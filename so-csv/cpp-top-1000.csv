title,viewcount,title,body,body,acceptedanswerid
"Easiest way to convert int to string in C++","1900790","","<p>What is the easiest way to convert from int to equivalent string in C++.  I am aware of two methods. Is there any easier way?</p>

<p>1.</p>

<pre><code>int a = 10;
char *intStr = itoa(a);
string str = string(intStr);
</code></pre>

<p>2.</p>

<pre><code>int a = 10;
stringstream ss;
ss &lt;&lt; a;
string str = ss.str();
</code></pre>
","<p>C++11 introduces <a href=""http://en.cppreference.com/w/cpp/string/basic_string/stol"" rel=""noreferrer""><code>std::stoi</code></a> (and variants for each numeric type) and <a href=""http://en.cppreference.com/w/cpp/string/basic_string/to_string"" rel=""noreferrer""><code>std::to_string</code></a>, the counterparts of the C <code>atoi</code> and <code>itoa</code> but expressed in term of <code>std::string</code>.</p>

<pre><code>#include &lt;string&gt; 

std::string s = std::to_string(42);
</code></pre>

<p>is therefore the shortest way I can think of. You can even omit naming the type, using the <code>auto</code> keyword:</p>

<pre><code>auto s = std::to_string(42);
</code></pre>

<p><em>Note: see <strong>[string.conversions]</strong> (<strong>21.5</strong> in n3242)</em></p>
","5591169"
"The most elegant way to iterate the words of a string","1884378","","<p>What is the most elegant way to iterate the words of a string? The string can be assumed to be composed of words separated by whitespace.</p>

<p>Note that I'm not interested in C string functions or that kind of character manipulation/access. Also, please give precedence to elegance over efficiency in your answer.</p>

<p>The best solution I have right now is:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

using namespace std;

int main()
{
    string s = ""Somewhere down the road"";
    istringstream iss(s);

    do
    {
        string subs;
        iss &gt;&gt; subs;
        cout &lt;&lt; ""Substring: "" &lt;&lt; subs &lt;&lt; endl;
    } while (iss);
}
</code></pre>
","<p>For what it's worth, here's another way to extract tokens from an input string, relying only on standard library facilities. It's an example of the power and elegance behind the design of the STL.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;algorithm&gt;
#include &lt;iterator&gt;

int main() {
    using namespace std;
    string sentence = ""And I feel fine..."";
    istringstream iss(sentence);
    copy(istream_iterator&lt;string&gt;(iss),
         istream_iterator&lt;string&gt;(),
         ostream_iterator&lt;string&gt;(cout, ""\n""));
}
</code></pre>

<p>Instead of copying the extracted tokens to an output stream, one could insert them into a container, using the same generic <code>copy</code> algorithm.</p>

<pre><code>vector&lt;string&gt; tokens;
copy(istream_iterator&lt;string&gt;(iss),
     istream_iterator&lt;string&gt;(),
     back_inserter(tokens));
</code></pre>

<p>... or create the <code>vector</code> directly:</p>

<pre><code>vector&lt;string&gt; tokens{istream_iterator&lt;string&gt;{iss},
                      istream_iterator&lt;string&gt;{}};
</code></pre>
","237280"
"Why is it faster to process a sorted array than an unsorted array?","1149137","","<p>Here is a piece of C++ code that seems very peculiar. For some strange reason, sorting the data miraculously makes the code almost six times faster.</p>

<pre class=""lang-cpp prettyprint-override""><code>#include &lt;algorithm&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;

int main()
{
    // Generate data
    const unsigned arraySize = 32768;
    int data[arraySize];

    for (unsigned c = 0; c &lt; arraySize; ++c)
        data[c] = std::rand() % 256;

    // !!! With this, the next loop runs faster
    std::sort(data, data + arraySize);

    // Test
    clock_t start = clock();
    long long sum = 0;

    for (unsigned i = 0; i &lt; 100000; ++i)
    {
        // Primary loop
        for (unsigned c = 0; c &lt; arraySize; ++c)
        {
            if (data[c] &gt;= 128)
                sum += data[c];
        }
    }

    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;

    std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;
    std::cout &lt;&lt; ""sum = "" &lt;&lt; sum &lt;&lt; std::endl;
}
</code></pre>

<ul>
<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in 11.54 seconds.</li>
<li>With the sorted data, the code runs in 1.93 seconds.</li>
</ul>

<p>Initially, I thought this might be just a language or compiler anomaly. So I tried it in Java.</p>

<pre class=""lang-java prettyprint-override""><code>import java.util.Arrays;
import java.util.Random;

public class Main
{
    public static void main(String[] args)
    {
        // Generate data
        int arraySize = 32768;
        int data[] = new int[arraySize];

        Random rnd = new Random(0);
        for (int c = 0; c &lt; arraySize; ++c)
            data[c] = rnd.nextInt() % 256;

        // !!! With this, the next loop runs faster
        Arrays.sort(data);

        // Test
        long start = System.nanoTime();
        long sum = 0;

        for (int i = 0; i &lt; 100000; ++i)
        {
            // Primary loop
            for (int c = 0; c &lt; arraySize; ++c)
            {
                if (data[c] &gt;= 128)
                    sum += data[c];
            }
        }

        System.out.println((System.nanoTime() - start) / 1000000000.0);
        System.out.println(""sum = "" + sum);
    }
}
</code></pre>

<p>With a somewhat similar but less extreme result.</p>

<hr>

<p>My first thought was that sorting brings the data into the cache, but then I thought how silly that is because the array was just generated.</p>

<ul>
<li>What is going on?</li>
<li>Why is a sorted array faster to process than an unsorted array?</li>
<li>The code is summing up some independent terms, and the order should not matter.</li>
</ul>
","<p><strong>You are a victim of <a href=""//en.wikipedia.org/wiki/Branch_predictor"" rel=""noreferrer"">branch prediction</a> fail.</strong></p>

<hr>

<h2>What is Branch Prediction?</h2>

<p>Consider a railroad junction:</p>

<p><a href=""//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/muxnt.jpg"" alt=""Licensed Image""></a>
<sub><a href=""//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG"" rel=""noreferrer"">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href=""//creativecommons.org/licenses/by-sa/3.0/deed.en"" rel=""noreferrer"">CC-By-SA 3.0</a> license.</sub></p>

<p>Now for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.</p>

<p>You are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.</p>

<p><em>Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.</em></p>

<p>Is there a better way? You guess which direction the train will go!</p>

<ul>
<li>If you guessed right, it continues on.</li>
<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>
</ul>

<p><strong>If you guess right every time</strong>, the train will never have to stop.<br>
<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>

<hr>

<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>

<p><img src=""https://i.stack.imgur.com/pyfwC.png"" alt=""image2""></p>

<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>

<p><em>Modern processors are complicated and have long pipelines. So they take forever to ""warm up"" and ""slow down"".</em></p>

<p>Is there a better way? You guess which direction the branch will go!</p>

<ul>
<li>If you guessed right, you continue executing.</li>
<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>
</ul>

<p><strong>If you guess right every time</strong>, the execution will never have to stop.<br>
<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>

<hr>

<p>This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.</p>

<p>So how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every 3 times, you guess the same...</p>

<p><strong><em>In other words, you try to identify a pattern and follow it.</em></strong> This is more or less how branch predictors work.</p>

<p>Most applications have well-behaved branches. So modern branch predictors will typically achieve >90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>

<p>Further reading: <a href=""//en.wikipedia.org/wiki/Branch_predictor"" rel=""noreferrer"">""Branch predictor"" article on Wikipedia</a>.</p>

<hr>

<h2>As hinted from above, the culprit is this if-statement:</h2>

<pre><code>if (data[c] &gt;= 128)
    sum += data[c];
</code></pre>

<p>Notice that the data is evenly distributed between 0 and 255. 
When the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>

<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times.
Even a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>

<p><strong>Quick visualization:</strong></p>

<pre><code>T = branch taken
N = branch not taken

data[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...
branch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...

       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)
</code></pre>

<p>However, when the data is completely random, the branch predictor is rendered useless because it can't predict random data.
Thus there will probably be around 50% misprediction. (no better than random guessing)</p>

<pre><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...
branch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...

       = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)
</code></pre>

<hr>

<p><strong>So what can be done?</strong></p>

<p>If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>

<p>Replace:</p>

<pre><code>if (data[c] &gt;= 128)
    sum += data[c];
</code></pre>

<p>with:</p>

<pre><code>int t = (data[c] - 128) &gt;&gt; 31;
sum += ~t &amp; data[c];
</code></pre>

<p>This eliminates the branch and replaces it with some bitwise operations.</p>

<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of <code>data[]</code>.)</sub></p>

<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>

<p>C++ - Visual Studio 2010 - x64 Release</p>

<pre><code>//  Branch - Random
seconds = 11.777

//  Branch - Sorted
seconds = 2.352

//  Branchless - Random
seconds = 2.564

//  Branchless - Sorted
seconds = 2.587
</code></pre>

<p>Java - Netbeans 7.1.1 JDK 7 - x64</p>

<pre><code>//  Branch - Random
seconds = 10.93293813

//  Branch - Sorted
seconds = 5.643797077

//  Branchless - Random
seconds = 3.113581453

//  Branchless - Sorted
seconds = 3.186068823
</code></pre>

<p>Observations:</p>

<ul>
<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>
<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>
<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>
</ul>

<p>A general rule of thumb is to avoid data-dependent branching in critical loops. (such as in this example)</p>

<hr>

<p><strong>Update:</strong></p>

<ul>
<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.</p></li>
<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p></li>
<li><p>Intel Compiler 11 does something miraculous. It <a href=""//en.wikipedia.org/wiki/Loop_interchange"" rel=""noreferrer"">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. So not only is it immune the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p></li>
<li><p>If you give the Intel Compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).</p></li>
</ul>

<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>
","11227902"
"Best C++ IDE or Editor for Windows","1053539","","<p>What is the best C++ IDE or editor for using on Windows? I use Notepad++, but am missing IntelliSense from Visual Studio.</p>
","<p>I've found the latest release of NetBeans, which includes C/C++ support, to be excellent.</p>

<p><a href=""http://www.netbeans.org/features/cpp/index.html"" rel=""nofollow noreferrer"">http://www.netbeans.org/features/cpp/index.html</a></p>
","89284"
"C++ IDE for Linux?","874334","","<p>I want to expand my programming horizons to Linux. A good, dependable basic toolset is important, and what is more basic than an IDE?</p>

<p>I could find these SO topics:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/2756/lightweight-ide-for-linux"">Lightweight IDE for linux</a> and</li>
<li><a href=""https://stackoverflow.com/questions/17228/what-tools-do-you-use-to-develop-c-applications-on-linux"">What tools do you use to develop
C++ applications on Linux?</a></li>
</ul>

<p>I'm not looking for a <em>lightweight</em> IDE. If an IDE is worth the money, then I will pay for it, so it need not be free.</p>

<p>My question, then:</p>

<blockquote>
  <p><em>What good, C++ programming IDE is available for Linux?</em></p>
</blockquote>

<p>The minimums are fairly standard: syntax highlighting, code completion (like <a href=""http://en.wikipedia.org/wiki/IntelliSense"" rel=""nofollow noreferrer"">intellisense</a> or its Eclipse counterpart) and integrated debugging (e.g., basic
breakpoints).</p>

<p>I have searched for it myself, but there are so many that it is almost impossible to separate the good from the bads by hand, especially for someone like me who has little  C++ coding experience in Linux. I know that <a href=""http://www.eclipse.org/cdt/"" rel=""nofollow noreferrer"">Eclipse supports C++</a>, and I really like that IDE for Java, but is it any good for C++ and is there something better?</p>

<p>The second post actually has some good suggestions, but what I am missing is what exactly makes the sugested IDE so good for the user, what are its (dis)advantages?</p>

<p>Maybe my question should therefore be:</p>

<blockquote>
  <p><em>What IDE do you propose (given your experiences), and why?</em></p>
</blockquote>
","<h2>Initially: confusion</h2>

<p>When originally writing this answer, I had recently made the switch from Visual Studio (with years of experience) to Linux and the first thing I did was try to find a reasonable IDE. At the time this was impossible: no good IDE existed.</p>

<h2>Epiphany: UNIX is an IDE. <em>All of it.</em><sup>1</sup></h2>

<p>And then I realised that the IDE in Linux is the command line with its tools:</p>

<ul>
<li>First you set up your shell

<ul>
<li>Bash, in my case, but many people prefer</li>
<li><a href=""https://fishshell.com/"" rel=""noreferrer"">fish</a> or</li>
<li><a href=""https://github.com/robbyrussell/oh-my-zsh"" rel=""noreferrer"">(Oh My) Zsh</a>;</li>
</ul></li>
<li>and your editor; pick your poison — both are state of the art:

<ul>
<li><a href=""https://neovim.io/"" rel=""noreferrer"">Neovim</a><sup>2</sup> or</li>
<li><a href=""https://www.gnu.org/software/emacs/"" rel=""noreferrer"">Emacs</a>.</li>
</ul></li>
</ul>

<p>Depending on your needs, you will then have to install and configure several plugins to make the editor work nicely (that’s the one annoying part). For example, most programmers on Vim will benefit from the <a href=""https://valloric.github.io/YouCompleteMe/"" rel=""noreferrer"">YouCompleteMe</a> plugin for smart autocompletion.</p>

<p>Once that’s done, the shell is your command interface to interact with the various tools — Debuggers (gdb), Profilers (gprof, valgrind), etc. You set up your project/build environment using <a href=""https://www.gnu.org/software/make/"" rel=""noreferrer"">Make</a>, <a href=""https://bitbucket.org/snakemake/snakemake/wiki/Home"" rel=""noreferrer"">CMake</a>, <a href=""https://bitbucket.org/snakemake/snakemake/wiki/Home"" rel=""noreferrer"">SnakeMake</a> or any of the various alternatives. And you manage your code with a version control system (most people use <a href=""https://git-scm.com/"" rel=""noreferrer"">Git</a>). You also use <a href=""https://tmux.github.io/"" rel=""noreferrer"">tmux</a> (previously also screen) to multiplex (= think multiple windows/tabs/panels) and persist your terminal session.</p>

<p>The point is that, thanks to the shell and a few tool writing conventions, these all <em>integrate with each other</em>. And that way <strong>the Linux shell is a truly integrated development environment</strong>, completely on par with other modern IDEs. (This doesn’t mean that individual IDEs don’t have features that the command line may be lacking, but the inverse is also true.)</p>

<h2>To each their own</h2>

<p>I cannot overstate how well the above workflow functions once you’ve gotten into the habit. But some people simply prefer graphical editors, and in the years since this answer was originally written, Linux has gained a suite of excellent graphical IDEs for several different programming languages (but not, as far as I’m aware, for C++). Do give them a try even if — like me — you end up not using them. Here’s just a small and biased selection:</p>

<ul>
<li>For Python development, there’s <a href=""https://www.jetbrains.com/pycharm/"" rel=""noreferrer"">PyCharm</a></li>
<li>For R, there’s <a href=""https://www.rstudio.com/"" rel=""noreferrer"">RStudio</a></li>
<li>For JavaScript and TypeScript, there’s <a href=""https://code.visualstudio.com/"" rel=""noreferrer"">Visual Studio Code</a> (which is also a good all-round editor)</li>
<li>And finally, many people love the <a href=""https://www.sublimetext.com/"" rel=""noreferrer"">Sublime Text editor</a> for general code editing.</li>
</ul>

<p>Keep in mind that this list is far from complete.</p>

<hr>

<p><sup>1</sup> I stole that title from dsm’s comment.</p>

<p><sup>2</sup> I used to refer to Vim here. And while plain Vim is still more than capable, Neovim is a promising restart, and it’s modernised a few old warts.</p>
","24119"
"Read file line by line","852425","","<p>The contents of file.txt are:</p>

<pre><code>5 3
6 4
7 1
10 5
11 6
12 3
12 4
</code></pre>

<p>Where <code>5 3</code> is a coordinate pair.
How do I process this data line by line in C++?</p>

<p>I am able to get the first line, but how do I get the next line of the file?</p>

<pre><code>ofstream myfile;
myfile.open (""text.txt"");
</code></pre>
","<p>First, make an <code>ifstream</code>:</p>

<pre><code>#include &lt;fstream&gt;
std::ifstream infile(""thefile.txt"");
</code></pre>

<p>The two standard methods are:</p>

<ol>
<li><p>Assume that every line consists of two numbers and read token by token:</p>

<pre><code>int a, b;
while (infile &gt;&gt; a &gt;&gt; b)
{
    // process pair (a,b)
}
</code></pre></li>
<li><p>Line-based parsing, using string streams:</p>

<pre><code>#include &lt;sstream&gt;
#include &lt;string&gt;

std::string line;
while (std::getline(infile, line))
{
    std::istringstream iss(line);
    int a, b;
    if (!(iss &gt;&gt; a &gt;&gt; b)) { break; } // error

    // process pair (a,b)
}
</code></pre></li>
</ol>

<p>You shouldn't mix (1) and (2), since the token-based parsing doesn't gobble up newlines, so you may end up with spurious empty lines if you use <code>getline()</code> after token-based extraction got you to the end of a line already.</p>
","7868998"
"Convert string to int C++","852006","","<p>Just have a quick question. I've looked around the internet quite a bit  and I've found a few solutions but none of them have worked yet. Looking at converting a string to an int and I don't mean ASCII codes.</p>

<p>For a quick run-down, we are passed in an equation as a string. We are to break it down, format it correctly and solve the linear equations. Now, in saying that, I'm not able to convert a string to an int.</p>

<p>I know that the string will be in either the format (-5) or (25) etc. so it's definitely an int. But how do we extract that from a string?</p>

<p>One way I was thinking is running a for/while loop through the string, check for a digit, extract all the digits after that and then look to see if there was a leading '-', if there is, multiply the int by -1.</p>

<p>It seems a bit over complicated for such a small problem though. Any ideas?</p>
","<p>In C++11 there are some nice new convert functions from <code>std::string</code> to a number type.</p>

<p>So instead of </p>

<pre><code>atoi( str.c_str() )
</code></pre>

<p>you can use</p>

<pre><code>std::stoi( str )
</code></pre>

<p>where <code>str</code> is your number as <code>std::string</code>.</p>

<p>There are version for all flavours of numbers:
<code>long stol(string)</code>, <code>float stof(string)</code>, <code>double stod(string)</code>,...
see <a href=""http://en.cppreference.com/w/cpp/string/basic_string/stol"">http://en.cppreference.com/w/cpp/string/basic_string/stol</a></p>
","7664227"
"How do you set, clear, and toggle a single bit?","828117","","<p>How do you set, clear, and toggle a bit in C/C++?</p>
","<h1>Setting a bit</h1>

<p>Use the bitwise OR operator (<code>|</code>) to set a bit.</p>

<pre><code>number |= 1UL &lt;&lt; x;
</code></pre>

<p>That will set bit <code>x</code>.</p>

<p>Use <code>1ULL</code> if <code>number</code> is wider than <code>unsigned long</code>; promotion of <code>1UL &lt;&lt; x</code> doesn't happen until after evaluating <code>1UL &lt;&lt; x</code> where it's UB to shift by more than the width of a <code>long</code>.  The same applies to all the rest of the examples.</p>

<h1>Clearing a bit</h1>

<p>Use the bitwise AND operator (<code>&amp;</code>) to clear a bit.</p>

<pre><code>number &amp;= ~(1UL &lt;&lt; x);
</code></pre>

<p>That will clear bit <code>x</code>. You must invert the bit string with the bitwise NOT operator (<code>~</code>), then AND it.</p>

<h1>Toggling a bit</h1>

<p>The XOR operator (<code>^</code>) can be used to toggle a bit.</p>

<pre><code>number ^= 1UL &lt;&lt; x;
</code></pre>

<p>That will toggle bit <code>x</code>.</p>

<h1>Checking a bit</h1>

<p>You didn't ask for this but I might as well add it.</p>

<p>To check a bit, shift the number x to the right, then bitwise AND it:</p>

<pre><code>bit = (number &gt;&gt; x) &amp; 1U;
</code></pre>

<p>That will put the value of bit <code>x</code> into the variable <code>bit</code>.</p>

<h1>Changing the <em>n</em>th bit to <em>x</em></h1>

<p>Setting the <code>n</code>th bit to either <code>1</code> or <code>0</code> can be achieved with the following on a 2's complement C++ implementation:</p>

<pre><code>number ^= (-x ^ number) &amp; (1UL &lt;&lt; n);
</code></pre>

<p>Bit <code>n</code> will be set if <code>x</code> is <code>1</code>, and cleared if <code>x</code> is <code>0</code>.  If <code>x</code> has some other value, you get garbage.  <code>x = !!x</code> will booleanize it to 0 or 1.</p>

<p>To make this independent of 2's complement negation behaviour (where <code>-1</code> has all bits set, unlike on a 1's complement or sign/magnitude C++ implementation), use unsigned negation.</p>

<pre><code>number ^= (-(unsigned long)x ^ number) &amp; (1UL &lt;&lt; n);
</code></pre>

<p>or</p>

<pre><code>unsigned long newbit = !!x;    // also booleanize to force 0 or 1
number ^= (-newbit ^ number) &amp; (1UL &lt;&lt; n);
</code></pre>

<p>It's generally a good idea to use unsigned types for portable bit manipulation.</p>
","47990"
"How do I find the length of an array?","823200","","<p>Is there a way to find how many values an array has?  Detecting whether or not I've reached the end of an array would also work.</p>
","<p>If you mean a C-style array, then you can do something like:</p>

<pre><code>int a[7];
std::cout &lt;&lt; ""Length of array = "" &lt;&lt; (sizeof(a)/sizeof(*a)) &lt;&lt; std::endl;
</code></pre>

<p>This doesn't work on pointers, though, i.e. it <strong>won't</strong> work for either of the following:</p>

<pre><code>int *p = new int[7];
std::cout &lt;&lt; ""Length of array = "" &lt;&lt; (sizeof(p)/sizeof(*p)) &lt;&lt; std::endl;
</code></pre>

<p>or:</p>

<pre><code>void func(int *p)
{
    std::cout &lt;&lt; ""Length of array = "" &lt;&lt; (sizeof(p)/sizeof(*p)) &lt;&lt; std::endl;
}

int a[7];
func(a);
</code></pre>

<p>In C++, if you want this kind of behaviour, then you should be using a container class; probably <a href=""http://en.cppreference.com/w/cpp/container/vector""><code>std::vector</code></a>.</p>
","4108340"
"Sleep for milliseconds","807997","","<p>I know the POSIX <code>sleep(x)</code> function makes the program sleep for x seconds. Is there a function to make the program sleep for x <em>milliseconds</em> in C++?</p>
","<p>Note that there is no standard C API for milliseconds, so (on Unix) you will have to settle for <code>usleep</code>, which accepts microseconds:</p>

<pre><code>#include &lt;unistd.h&gt;

unsigned int microseconds;
...
usleep(microseconds);
</code></pre>
","4184493"
"How to get current time and date in C++?","773018","","<p>Is there a cross-platform way to get the current date and time in C++?</p>
","<p>std C libraries provide <a href=""http://en.cppreference.com/w/cpp/chrono/c/time"" rel=""noreferrer""><code>time()</code></a>.
This is seconds from the epoch and can be converted to date and <code>H:M:S</code> using standard C functions. <strong>Boost</strong> also has <a href=""http://www.boost.org/doc/libs/1_38_0/doc/html/date_time.html"" rel=""noreferrer"">a time/date library</a> that you can check.</p>

<pre><code>time_t  timev;
time(&amp;timev);
</code></pre>
","997959"
"How to convert a std::string to const char* or char*?","752402","","<p>How can I convert an <code>std::string</code> to a <code>char*</code> or a <code>const char*</code>?</p>
","<p>If you just want to pass a <a href=""http://en.cppreference.com/w/cpp/string/basic_string"" rel=""noreferrer""><code>std::string</code></a> to a function that needs <code>const char*</code> you can use </p>

<pre><code>std::string str;
const char * c = str.c_str();
</code></pre>

<p>If you want to get a writable copy, like <code>char *</code>, you can do that with this:</p>

<pre><code>std::string str;
char * writable = new char[str.size() + 1];
std::copy(str.begin(), str.end(), writable);
writable[str.size()] = '\0'; // don't forget the terminating 0

// don't forget to free the string after finished using it
delete[] writable;
</code></pre>

<p><strong>Edit</strong>: Notice that the above is not exception safe. If anything between the <code>new</code> call and the <code>delete</code> call throws, you will leak memory, as nothing will call <code>delete</code> for you automatically. There are two immediate ways to solve this.</p>

<h3>boost::scoped_array</h3>

<p><a href=""http://www.boost.org/doc/libs/release/libs/smart_ptr/scoped_array.htm"" rel=""noreferrer""><code>boost::scoped_array</code></a> will delete the memory for you upon going out of scope:</p>

<pre><code>std::string str;
boost::scoped_array&lt;char&gt; writable(new char[str.size() + 1]);
std::copy(str.begin(), str.end(), writable.get());
writable[str.size()] = '\0'; // don't forget the terminating 0

// get the char* using writable.get()

// memory is automatically freed if the smart pointer goes 
// out of scope
</code></pre>

<h3>std::vector</h3>

<p>This is the standard way (does not require any external library). You use <a href=""http://en.cppreference.com/w/cpp/container/vector"" rel=""noreferrer""><code>std::vector</code></a>, which completely manages the memory for you.</p>

<pre><code>std::string str;
std::vector&lt;char&gt; writable(str.begin(), str.end());
writable.push_back('\0');

// get the char* using &amp;writable[0] or &amp;*writable.begin()
</code></pre>
","347959"
"Difference between float and double","682208","","<p>I know, I've read about the difference between double precision and single precision, etc. But they should give the same results on most cases right?</p>

<p>I was solving a problem on a programming contest and there were calculations with floating point numbers that were not really big, so I decided to use float instead of double, and I checked it - I was getting the correct results. But when I send the solution, it said only 1 of 10 tests was correct. I checked again and again, until I found that using float is not the same using double. I put double for the calculations and double for the output, and the program gave the SAME results, but this time it passed all the 10 tests correctly.</p>

<p>I repeat, the output was the SAME, the results were the SAME, but putting float didn't work - only double. The values were not so big too, and the program gave the same results on the same tests both with float and double, but the online judge accepted only the double-provided solution.</p>

<p>Why? What is the difference?</p>
","<p>Huge difference.</p>

<p>As the name implies, a <a href=""http://en.wikipedia.org/wiki/Double_precision_floating-point_format"" rel=""noreferrer""><code>double</code></a> has 2x the precision of <a href=""http://en.wikipedia.org/wiki/Single_precision_floating-point_format"" rel=""noreferrer""><code>float</code></a><sup>[1]</sup>. In general a <code>double</code> has 15 decimal digits of precision, while <code>float</code> has 7.</p>

<p>Here's how the number of digits are calculated:</p>

<blockquote>
  <p><code>double</code> has 52 mantissa bits + 1 hidden bit: log(2<sup>53</sup>)÷log(10) = 15.95 digits</p>
  
  <p><code>float</code> has 23 mantissa bits + 1 hidden bit: log(2<sup>24</sup>)÷log(10) = 7.22 digits</p>
</blockquote>

<p>This precision loss could lead to truncation errors much easier to float up, e.g.</p>

<pre><code>    float a = 1.f / 81;
    float b = 0;
    for (int i = 0; i &lt; 729; ++ i)
            b += a;
    printf(""%.7g\n"", b);   // prints 9.000023
</code></pre>

<p>while</p>

<pre><code>    double a = 1.0 / 81;
    double b = 0;
    for (int i = 0; i &lt; 729; ++ i)
            b += a;
    printf(""%.15g\n"", b);   // prints 8.99999999999996
</code></pre>

<p>Also, the maximum value of float is about <code>3e38</code>, but double is about <code>1.7e308</code>, so using <code>float</code> can hit Infinity much more easily than double for something simple e.g. computing 60 factorial.</p>

<p>Maybe their test case contains these huge numbers which causes your program to fail.</p>

<hr>

<p>Of course sometimes even <code>double</code> isn't accurate enough, hence we sometimes have <code>long double</code><sup>[1]</sup> (the above example gives 9.000000000000000066 on Mac), but all floating point types suffer from round-off errors, so if precision is very important (e.g. money processing) you should use <code>int</code> or a fraction class.</p>

<hr>

<p>BTW, don't use <code>+=</code> to sum lots of floating point numbers as the errors accumulate quickly. If you're using Python, use <code>fsum</code>. Otherwise, try to implement the <a href=""http://en.wikipedia.org/wiki/Kahan_summation_algorithm"" rel=""noreferrer"">Kahan summation algorithm</a>.</p>

<hr>

<p><sup>[1]: The C and C++ standards do not specify the representation of <code>float</code>, <code>double</code> and <code>long double</code>. It is possible that all three are implemented as IEEE double-precision. Nevertheless, for most architectures (gcc, MSVC; x86, x64, ARM) <code>float</code> <em>is</em> indeed a IEEE single-precision floating point number (binary32), and <code>double</code> <em>is</em> a IEEE double-precision floating point number (binary64).</sup></p>
","2386882"
"How to use the PI constant in C++","677733","","<p>I want to use the PI constant and trigonometric functions in some C++ program. I get the trigonometric functions with <code>include &lt;math.h&gt;</code>. However, there doesn't seem to be a definition for PI in this header file.</p>

<p>How can I get PI without defining it manually?</p>
","<p>On some (especially older) platforms (see the comments below) you might need to</p>

<pre><code>#define _USE_MATH_DEFINES
</code></pre>

<p>and then include the necessary header file:</p>

<pre><code>#include &lt;math.h&gt;
</code></pre>

<p>and the value of pi can be accessed via:</p>

<pre><code>M_PI
</code></pre>

<p>In my <code>math.h</code> (2014) it is defined as: </p>

<pre><code># define M_PI           3.14159265358979323846  /* pi */
</code></pre>

<p>but check your <code>math.h</code> for more. An extract from the ""old"" <code>math.h</code> (in 2009):</p>

<pre><code>/* Define _USE_MATH_DEFINES before including math.h to expose these macro
 * definitions for common math constants.  These are placed under an #ifdef
 * since these commonly-defined names are not part of the C/C++ standards.
 */
</code></pre>

<p>However:</p>

<ol>
<li><p>on newer platforms (at least on my 64 bit Ubuntu 14.04) I do not need to define the <code>_USE_MATH_DEFINES</code> </p></li>
<li><p>On (recent) Linux platforms there are <code>long double</code> values too provided as a GNU Extension:</p>

<pre><code># define M_PIl          3.141592653589793238462643383279502884L /* pi */
</code></pre></li>
</ol>
","1727896"
"How to find out if an item is present in a std::vector?","647474","","<p>All I want to do is to check whether an element exists in the vector or not, so I can deal with each case.</p>

<pre><code>if ( item_present )
   do_this();
else
   do_that();
</code></pre>
","<p>You can use <a href=""http://en.cppreference.com/w/cpp/algorithm/find"" rel=""noreferrer""><code>std::find</code></a> from <code>&lt;algorithm&gt;</code>:</p>

<pre><code>std::find(vector.begin(), vector.end(), item) != vector.end()
</code></pre>

<p>This returns a bool (<code>true</code> if present, <code>false</code> otherwise).  With your example:</p>

<pre><code>#include &lt;algorithm&gt;

if ( std::find(vector.begin(), vector.end(), item) != vector.end() )
   do_this();
else
   do_that();
</code></pre>
","571405"
"What does the explicit keyword mean?","621997","","<p>Someone posted in a comment to another question about the meaning of the <code>explicit</code> keyword in C++. So, what does it mean?</p>
","<p>The compiler is allowed to make one implicit conversion to resolve the parameters to a function. What this means is that the compiler can use constructors callable with a <strong>single parameter</strong> to convert from one type to another in order to get the right type for a parameter. </p>

<p>Here's an example class with a constructor that can be used for implicit conversions:</p>

<pre><code>class Foo
{
public:
  // single parameter constructor, can be used as an implicit conversion
  Foo (int foo) : m_foo (foo) 
  {
  }

  int GetFoo () { return m_foo; }

private:
  int m_foo;
};
</code></pre>

<p>Here's a simple function that takes a <code>Foo</code> object:</p>

<pre><code>void DoBar (Foo foo)
{
  int i = foo.GetFoo ();
}
</code></pre>

<p>and here's where the <code>DoBar</code> function is called.</p>

<pre><code>int main ()
{
  DoBar (42);
}
</code></pre>

<p>The argument is not a <code>Foo</code> object, but an <code>int</code>. However, there exists a constructor for <code>Foo</code> that takes an <code>int</code> so this constructor can be used to convert the parameter to the correct type.</p>

<p>The compiler is allowed to do this once for each parameter.</p>

<p>Prefixing the <code>explicit</code> keyword to the constructor prevents the compiler from using that constructor for implicit conversions. Adding it to the above class will create a compiler error at the function call <code>DoBar (42)</code>.  It is now necessary to call for conversion explicitly with  <code>DoBar (Foo (42))</code></p>

<p>The reason you might want to do this is to avoid accidental construction that can hide bugs.  Contrived example:</p>

<ul>
<li>You have a <code>MyString(int size)</code> class with a constructor that constructs a string of the given size.  You have a function <code>print(const MyString&amp;)</code>, and you call <code>print(3)</code> (when you <em>actually</em> intended to call <code>print(""3"")</code>).  You expect it to print ""3"", but it prints an empty string of length 3 instead.</li>
</ul>
","121163"
"How do I declare a 2d array in C++ using new?","614333","","<p>How do i declare a 2d array using new?</p>

<p>Like, for a ""normal"" array I would:</p>

<pre><code>int* ary = new int[Size]
</code></pre>

<p>but</p>

<pre><code>int** ary = new int[sizeY][sizeX]
</code></pre>

<p>a) doesn't work/compile and b) doesn't accomplish what:</p>

<pre><code>int ary[sizeY][sizeX] 
</code></pre>

<p>does.</p>
","<p>A dynamic 2D array is basically an array of <em>pointers to arrays</em>. You should initialize it using a loop, like this:</p>

<pre><code>int** ary = new int*[rowCount];
for(int i = 0; i &lt; rowCount; ++i)
    ary[i] = new int[colCount];
</code></pre>

<p>The above, for <code>colCount= 5</code> and <code>rowCount = 4</code>, would produce the following:</p>

<p><img src=""https://i.stack.imgur.com/M75kn.png"" alt=""enter image description here""></p>
","936702"
"How can I get the list of files in a directory using C or C++?","586667","","<p>How can I determine the list of files in a directory from inside my C or C++ code?</p>

<p>I'm not allowed to execute the <code>'ls'</code> command and parse the results from within my program.</p>
","<p>In small and simple tasks I do not use boost, I use <strong>dirent.h</strong> which is also available for windows:</p>

<pre><code>DIR *dir;
struct dirent *ent;
if ((dir = opendir (""c:\\src\\"")) != NULL) {
  /* print all the files and directories within directory */
  while ((ent = readdir (dir)) != NULL) {
    printf (""%s\n"", ent-&gt;d_name);
  }
  closedir (dir);
} else {
  /* could not open directory */
  perror ("""");
  return EXIT_FAILURE;
}
</code></pre>

<p>It is just a small header file and does most of the simple stuff you need without using a big template-based approach like boost(no offence, I like boost!).</p>

<p>The author of the windows compatibility layer is Toni Ronkko. In Unix, it is a standard header.</p>

<p><strong>UPDATE 2017</strong>:</p>

<p>In C++17 there is now an official way to list files of your file system: <code>std::filesystem</code>. There is an excellent answer from <a href=""https://stackoverflow.com/a/37494654/23264""><strong>Shreevardhan</strong></a> below with this source code:</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;filesystem&gt;
namespace fs = std::filesystem;

int main()
{
    std::string path = ""path_to_directory"";
    for (auto &amp; p : fs::directory_iterator(path))
        std::cout &lt;&lt; p &lt;&lt; std::endl;
}
</code></pre>

<p>Consider upvoting his answer, if you are using the C++17 approach.</p>
","612176"
"What are the rules for calling the superclass constructor?","585088","","<p>What are the C++ rules for calling the superclass constructor from a subclass one?</p>

<p>For example, I know in Java, you must do it as the first line of the subclass constructor (and if you don't, an implicit call to a no-arg super constructor is assumed - giving you a compile error if that's missing).</p>
","<p>Base class constructors are automatically called for you if they have no argument.  If you want to call a superclass constructor with an argument, you must use the subclass's constructor initialization list.  Unlike Java, C++ supports multiple inheritance (for better or worse), so the base class must be referred to by name, rather than ""super()"".</p>

<pre><code>class SuperClass
{
    public:

        SuperClass(int foo)
        {
            // do something with foo
        }
};

class SubClass : public SuperClass
{
    public:

        SubClass(int foo, int bar)
        : SuperClass(foo)    // Call the superclass constructor in the subclass' initialization list.
        {
            // do something with bar
        }
};
</code></pre>

<p>More info on the constructor's initialization list <a href=""http://www.cprogramming.com/tutorial/initialization-lists-c++.html"" rel=""noreferrer"">here</a> and <a href=""http://www.parashift.com/c++-faq-lite/ctors.html#faq-10.6"" rel=""noreferrer"">here</a>.</p>
","120916"
"What is the ""-->"" operator in C++?","578990","","<p>After reading <a href=""http://groups.google.com/group/comp.lang.c++.moderated/msg/33f173780d58dd20"" rel=""noreferrer"">Hidden Features and Dark Corners of C++/STL</a> on <code>comp.lang.c++.moderated</code>, I was completely surprised that the following snippet compiled and worked in both Visual Studio 2008 and G++ 4.4.</p>

<p>Here's the code:</p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
    int x = 10;
    while (x --&gt; 0) // x goes to 0
    {
        printf(""%d "", x);
    }
}
</code></pre>

<p>I'd assume this is C, since it works in GCC as well. Where is this defined in the standard, and where has it come from?</p>
","<p><code>--&gt;</code> is not an operator. It is in fact two separate operators, <code>--</code> and <code>&gt;</code>.</p>

<p>The conditional's code decrements <code>x</code>, while returning <code>x</code>'s original (not decremented) value, and then compares the original value with <code>0</code> using the <code>&gt;</code> operator.</p>

<p><strong>To better understand, the statement could be written as follows:</strong></p>

<pre><code>while( (x--) &gt; 0 )
</code></pre>
","1642035"
"Why is ""using namespace std"" considered bad practice?","575492","","<p>I've been told by others that writing <code>using namespace std</code> in code is wrong, and that I should use <code>std::cout</code> and <code>std::cin</code> directly instead.</p>

<p>Why is <code>using namespace std</code> considered a bad practice? Is it inefficient or risk declaring ambiguous variables (variables that share the same name as a function in <code>std</code> namespace)? Does it impact performance?</p>
","<p>This is not related to performance at all. But consider this: you are using two libraries called Foo and Bar:</p>

<pre><code>using namespace foo;
using namespace bar;
</code></pre>

<p>Everything works fine, you can call <code>Blah()</code> from Foo and <code>Quux()</code> from Bar without problems. But one day you upgrade to a new version of Foo 2.0, which now offers a function called <code>Quux()</code>. Now you've got a conflict: Both Foo 2.0 and Bar import <code>Quux()</code> into your global namespace. This is going to take some effort to fix, especially if the function parameters happen to match.</p>

<p>If you had used <code>foo::Blah()</code> and <code>bar::Quux()</code>, then the introduction of <code>foo::Quux()</code> would have been a non-event.</p>
","1452738"
"What does int argc, char *argv[] mean?","575028","","<p>In many C++ IDE's and compilers, when it generates the main function for you, it looks like this:</p>

<pre><code>int main(int argc, char *argv[])
</code></pre>

<p>When I code C++ without an IDE, just with a command line compiler, I type:</p>

<pre><code>int main()
</code></pre>

<p>without any parameters.  What does this mean, and is it vital to my program?</p>
","<p><code>argv</code> and <code>argc</code> are how command line arguments are passed to <code>main()</code> in C and C++.</p>

<p><code>argc</code> will be the number of strings pointed to by <code>argv</code>.  This will (in practice) be 1 plus the number of arguments, as virtually all implementations will prepend the name of the program to the array.</p>

<p>The variables are named <code>argc</code> (<em>argument count</em>) and <code>argv</code> (<em>argument vector</em>) by convention, but they can be given any valid identifier: <code>int main(int num_args, char** arg_strings)</code> is equally valid.</p>

<p>They can also be omitted entirely, yielding <code>int main()</code>, if you do not intend to process command line arguments.</p>

<p>Try the following program:</p>

<pre><code>#include &lt;iostream&gt;

int main(int argc, char** argv) {
    std::cout &lt;&lt; ""Have "" &lt;&lt; argc &lt;&lt; "" arguments:"" &lt;&lt; std::endl;
    for (int i = 0; i &lt; argc; ++i) {
        std::cout &lt;&lt; argv[i] &lt;&lt; std::endl;
    }
}
</code></pre>

<p>Running it with <code>./test a1 b2 c3</code> will output</p>

<pre class=""lang-none prettyprint-override""><code>Have 4 arguments:
./test
a1
b2
c3
</code></pre>
","3024202"
"How to convert a char array to a string?","572983","","<p>Converting a C++ <code>string</code> to a char array is pretty straightorward using the <code>c_str</code> function of string and then doing <code>strcpy</code>. However, how to do the opposite?</p>

<p>I have a char array like: <code>char arr[ ] = ""This is a test"";</code> to be converted back to:
<code>string str = ""This is a test</code>.</p>
","<p>The <code>string</code> class has a constructor that takes a NULL-terminated C-string:</p>

<pre><code>char arr[ ] = ""This is a test"";

string str(arr);


//  You can also assign directly to a string.
str = ""This is another string"";

// or
str = arr;
</code></pre>
","8960101"
"How to convert std::string to lower case?","572422","","<p>I want to convert a <code>std::string</code> to lowercase. I am aware of the function <code>tolower()</code>, however in the past I have had issues with this function and it is hardly ideal anyway as use with a string would require iterating over each character.</p>

<p>Is there an alternative which works 100% of the time?</p>
","<p>From <a href=""http://notfaq.wordpress.com/2007/08/04/cc-convert-string-to-upperlower-case/"" rel=""noreferrer"">http://notfaq.wordpress.com/2007/08/04/cc-convert-string-to-upperlower-case/</a>:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;string&gt; 

std::string data = ""Abc""; 
std::transform(data.begin(), data.end(), data.begin(), ::tolower);
</code></pre>

<p>You're really not going to get away with not iterating through each character.  There's no way to know whether the character is lowercase or uppercase otherwise.</p>

<p>If you really hate tolower(), here's a non-portable alternative that I don't recommend you use:</p>

<pre><code>char easytolower(char in){
  if(in&lt;='Z' &amp;&amp; in&gt;='A')
    return in-('Z'-'z');
  return in;
} 

std::transform(data.begin(), data.end(), data.begin(), easytolower);
</code></pre>

<p>Be aware that <code>::tolower()</code> can only do a per-single-byte-character substitution, which is ill-fitting for many scripts, especially if using a multi-byte-encoding like UTF-8.</p>
","313990"
"Parse (split) a string in C++ using string delimiter (standard C++)","566830","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/236129/splitting-a-string-in-c"">Splitting a string in C++</a>  </p>
</blockquote>



<p>I am parsing a string in C++ using the following:</p>

<pre><code>string parsed,input=""text to be parsed"";
stringstream input_stringstream(input);

if(getline(input_stringstream,parsed,' '))
{
     // do some processing.
}
</code></pre>

<p>Parsing with a single char delimiter is fine. But what if I want to use a string as delimiter.</p>

<p>Example: I want to split:</p>

<pre><code>scott&gt;=tiger
</code></pre>

<p>with >= as delimiter so that I can get scott and tiger.   </p>
","<p>You can use the <a href=""http://en.cppreference.com/w/cpp/string/basic_string/find""><code>std::string::find()</code></a> function to find the position of your string delimiter, then use <a href=""http://en.cppreference.com/w/cpp/string/basic_string/substr""><code>std::string::substr()</code></a> to get a token.</p>

<p>Example:</p>

<pre><code>std::string s = ""scott&gt;=tiger"";
std::string delimiter = ""&gt;="";
std::string token = s.substr(0, s.find(delimiter)); // token is ""scott""
</code></pre>

<ul>
<li><p>The <code>find(const string&amp; str, size_t pos = 0)</code> function returns the position of the first occurrence of <code>str</code> in the string, or <a href=""http://en.cppreference.com/w/cpp/string/basic_string/npos""><code>npos</code></a> if the string is not found.</p></li>
<li><p>The <code>substr(size_t pos = 0, size_t n = npos)</code> function returns a substring of the object, starting at position <code>pos</code> and of length <code>npos</code>.</p></li>
</ul>

<hr>

<p>If you have multiple delimiters, after you have extracted one token, you can remove it (delimiter included) to proceed with subsequent extractions (if you want to preserve the original string, just use <code>s = s.substr(pos + delimiter.length());</code>):</p>

<pre><code>s.erase(0, s.find(delimiter) + delimiter.length());
</code></pre>

<p>This way you can easily loop to get each token.</p>

<h2> Complete Example </h2>

<pre><code>std::string s = ""scott&gt;=tiger&gt;=mushroom"";
std::string delimiter = ""&gt;="";

size_t pos = 0;
std::string token;
while ((pos = s.find(delimiter)) != std::string::npos) {
    token = s.substr(0, pos);
    std::cout &lt;&lt; token &lt;&lt; std::endl;
    s.erase(0, pos + delimiter.length());
}
std::cout &lt;&lt; s &lt;&lt; std::endl;
</code></pre>

<p>Output:</p>

<pre><code>scott
tiger
mushroom
</code></pre>
","14266139"
"std::string to char*","565931","","<p>I want to convert a <strong>std::string</strong> into a <strong>char*</strong> or <strong>char[]</strong> data type.</p>

<pre><code>std::string str = ""string"";
char* chr = str;
</code></pre>

<p>Results in: <strong>“error: cannot convert ‘std::string’ to ‘char’ ...”</strong>.</p>

<p>What methods are there available to do this?</p>
","<p>It won't automatically convert (thank god). You'll have to use the method <code>c_str()</code> to get the C string version.</p>

<pre><code>std::string str = ""string"";
const char *cstr = str.c_str();
</code></pre>

<p>Note that it returns a <code>const char *</code>; you aren't allowed to change the C-style string returned by <code>c_str()</code>. If you want to process it you'll have to copy it first:</p>

<pre><code>std::string str = ""string"";
char *cstr = new char[str.length() + 1];
strcpy(cstr, str.c_str());
// do stuff
delete [] cstr;
</code></pre>

<p>Or in modern C++:</p>

<pre><code>std::vector&lt;char&gt; cstr(str.c_str(), str.c_str() + str.size() + 1);
</code></pre>
","7352131"
"What is the easiest way to initialize a std::vector with hardcoded elements?","565687","","<p>I can create an array and initialize it like this:</p>

<pre><code>int a[] = {10, 20, 30};
</code></pre>

<p>How do I create a <code>std::vector</code> and initialize it similarly elegant?</p>

<p>The best way I know is:</p>

<pre><code>std::vector&lt;int&gt; ints;

ints.push_back(10);
ints.push_back(20);
ints.push_back(30);
</code></pre>

<p>Is there a better way?</p>
","<p>One method would be to use the array to initialize the vector</p>

<pre><code>static const int arr[] = {16,2,77,29};
vector&lt;int&gt; vec (arr, arr + sizeof(arr) / sizeof(arr[0]) );
</code></pre>
","2236227"
"How to initialize a vector in C++","541608","","<blockquote>
  <p><strong>Possible Duplicate:</strong> <br/>
  <a href=""https://stackoverflow.com/questions/2236197/c-easiest-way-to-initialize-an-stl-vector-with-hardcoded-elements"">C++: Easiest way to initialize an STL vector with hardcoded elements</a></p>
</blockquote>



<p>I want to initialize a vector like we do in case of an array.</p>

<p>Example</p>

<pre><code>int vv[2] = {12, 43};
</code></pre>

<p>But when I do it like this,</p>

<pre><code>vector&lt;int&gt; v(2) = {34, 23};
</code></pre>

<p>OR</p>

<pre><code>vector&lt;int&gt; v(2);
v = {0, 9};
</code></pre>

<p>it gives an error:</p>

<blockquote>
  <p>expected primary-expression before ‘{’ token</p>
</blockquote>

<p>AND</p>

<blockquote>
  <p>error: expected ‘,’ or ‘;’ before ‘=’ token</p>
</blockquote>

<p>respectively.</p>
","<p>With the new C++ standard (may need special flags to be enabled on your compiler) you can simply do:</p>

<pre><code>std::vector&lt;int&gt; v { 34,23 };
// or
// std::vector&lt;int&gt; v = { 34,23 };
</code></pre>

<p>Or even:</p>

<pre><code>std::vector&lt;int&gt; v(2);
v = { 34,23 };
</code></pre>

<p>On compilers that don't support this feature (initializer lists) yet you can emulate this with an array:</p>

<pre><code>int vv[2] = { 12,43 };
std::vector&lt;int&gt; v(&amp;vv[0], &amp;vv[0]+2);
</code></pre>

<p>Or, for the case of assignment to an existing vector:</p>

<pre><code>int vv[2] = { 12,43 };
v.assign(&amp;vv[0], &amp;vv[0]+2);
</code></pre>

<p>Like James Kanze suggested, it's more robust to have functions that give you the beginning and end of an array:</p>

<pre><code>template &lt;typename T, size_t N&gt;
T* begin(T(&amp;arr)[N]) { return &amp;arr[0]; }
template &lt;typename T, size_t N&gt;
T* end(T(&amp;arr)[N]) { return &amp;arr[0]+N; }
</code></pre>

<p>And then you can do this without having to repeat the size all over:</p>

<pre><code>int vv[] = { 12,43 };
std::vector&lt;int&gt; v(begin(vv), end(vv));
</code></pre>
","8906577"
"std::string formatting like sprintf","536608","","<p>I have to format <a href=""http://en.cppreference.com/w/cpp/string/basic_string""><code>std::string</code></a> with <a href=""http://en.cppreference.com/w/cpp/io/c/fprintf""><code>sprintf</code></a> and send it into file stream. How can I do this?</p>
","<p>You can't do it directly, because you don't have write access to the underlying buffer (until C++11; see Dietrich Epp's <a href=""https://stackoverflow.com/questions/2342162/stdstring-formatting-like-sprintf#comment61134428_2342176"">comment</a>). You'll have to do it first in a c-string, then copy it into a std::string:</p>

<pre><code>  char buff[100];
  snprintf(buff, sizeof(buff), ""%s"", ""Hello"");
  std::string buffAsStdStr = buff;
</code></pre>

<p>But I'm not sure why you wouldn't just use a string stream? I'm assuming you have specific reasons to not just do this:</p>

<pre><code>  std::ostringstream stringStream;
  stringStream &lt;&lt; ""Hello"";
  std::string copyOfStr = stringStream.str();
</code></pre>
","2342176"
"Iteration over std::vector: unsigned vs signed index variable","534850","","<p>What is the correct way of iterating over a vector in C++?</p>

<p>Consider these two code fragments, this one works fine:</p>

<pre><code>for (unsigned i=0; i &lt; polygon.size(); i++) {
    sum += polygon[i];
}
</code></pre>

<p>and this one:</p>

<pre><code>for (int i=0; i &lt; polygon.size(); i++) {
    sum += polygon[i];
}
</code></pre>

<p>which generates <code>warning: comparison between signed and unsigned integer expressions</code>.</p>

<p>I'm new in the world of C++, so the <code>unsigned</code> variable looks a bit frightening to me and I know <code>unsigned</code> variables can be dangerous if not used correctly, so - is this correct?</p>
","<h1>Iterating Backwards</h1>

<p>See <a href=""https://stackoverflow.com/questions/275994/whats-the-best-way-to-do-a-backwards-loop-in-c-c-c#276053"">this answer</a>. </p>

<h1>Iterating Forwards</h1>

<p>This is almost identical. Just change the iterators / swap decrement by increment. You should prefer iterators. Some people tell you to use <code>std::size_t</code> as the index variable type. However, that is not portable. Always use the <code>size_type</code> typedef of the container (While you could get away with only a conversion in the forward iterating case, it could actually go wrong all the way in the backward iterating case when using <code>std::size_t</code>, in case <code>std::size_t</code> is wider than what is the typedef of <code>size_type</code>):</p>

<h2>Using std::vector</h2>

<h3>Using iterators</h3>

<pre><code>for(std::vector&lt;T&gt;::iterator it = v.begin(); it != v.end(); ++it) {
    /* std::cout &lt;&lt; *it; ... */
}
</code></pre>

<p>Important is, always use the prefix increment form for iterators whose definitions you don't know. That will ensure your code runs as generic as possible. </p>

<h3>Using Range C++11</h3>

<pre><code>for(auto const&amp; value: a) {
     /* std::cout &lt;&lt; value; ... */
</code></pre>

<h3>Using indices</h3>

<pre><code>for(std::vector&lt;int&gt;::size_type i = 0; i != v.size(); i++) {
    /* std::cout &lt;&lt; someVector[i]; ... */
}
</code></pre>

<h2>Using arrays</h2>

<h3>Using iterators</h3>

<pre><code>for(element_type* it = a; it != (a + (sizeof a / sizeof *a)); it++) {
    /* std::cout &lt;&lt; *it; ... */
}
</code></pre>

<h3>Using Range C++11</h3>

<pre><code>for(auto const&amp; value: a) {
     /* std::cout &lt;&lt; value; ... */
</code></pre>

<h3>Using indices</h3>

<pre><code>for(std::size_t i = 0; i != (sizeof a / sizeof *a); i++) {
    /* std::cout &lt;&lt; a[i]; ... */
}
</code></pre>

<p>Read in the backward iterating answer what problem the <code>sizeof</code> approach can yield to, though.</p>
","409396"
"Return array in a function","527683","","<p>I have an array <code>int arr[5]</code> that is passed to a function <code>fillarr(int arr[])</code>:</p>

<pre><code>int fillarr(int arr[])
{
    for(...);
    return arr;
}
</code></pre>

<ol>
<li>How can I return that array?</li>
<li>How will I use it, say I returned a pointer how am I going to access it?</li>
</ol>
","<p>In this case, your array variable <code>arr</code> can actually also be treated as a pointer to the beginning of your array's block in memory, by an implicit conversion.  This syntax that you're using:</p>

<pre><code>int fillarr(int arr[])
</code></pre>

<p>Is kind of just syntactic sugar.  You could really replace it with this and it would still work:</p>

<pre><code>int fillarr(int* arr)
</code></pre>

<p>So in the same sense, what you want to return from your function is actually a pointer to the first element in the array:</p>

<pre><code>int* fillarr(int arr[])
</code></pre>

<p>And you'll still be able to use it just like you would a normal array:</p>

<pre><code>int main()
{
  int y[10];
  int *a = fillarr(y);
  cout &lt;&lt; a[0] &lt;&lt; endl;
}
</code></pre>
","3473448"
"Regular cast vs. static_cast vs. dynamic_cast","519351","","<p>I've been writing C and C++ code for almost twenty years, but there's one aspect of these languages that I've never really understood. I've obviously used regular casts i.e.</p>

<pre><code>MyClass *m = (MyClass *)ptr;
</code></pre>

<p>all over the place, but there seem to be two other types of casts, and I don't know the difference. What's the difference between the following lines of code?</p>

<pre><code>MyClass *m = (MyClass *)ptr;
MyClass *m = static_cast&lt;MyClass *&gt;(ptr);
MyClass *m = dynamic_cast&lt;MyClass *&gt;(ptr);
</code></pre>
","<h2>static_cast</h2>

<p><code>static_cast</code> is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions. <code>static_cast</code> performs no runtime checks. This should be used if you know that you refer to an object of a specific type, and thus a check would be unnecessary. Example:</p>

<pre><code>void func(void *data) {
  // Conversion from MyClass* -&gt; void* is implicit
  MyClass *c = static_cast&lt;MyClass*&gt;(data);
  ...
}

int main() {
  MyClass c;
  start_thread(&amp;func, &amp;c)  // func(&amp;c) will be called
      .join();
}
</code></pre>

<p>In this example, you know that you passed a <code>MyClass</code> object, and thus there isn't any need for a runtime check to ensure this.</p>

<h2>dynamic_cast</h2>

<p><code>dynamic_cast</code> is useful when you don't know what the dynamic type of the object is. It returns a null pointer if the object referred to doesn't contain the type casted to as a base class (when you cast to a reference, a <code>bad_cast</code> exception is thrown in that case).</p>

<pre><code>if (JumpStm *j = dynamic_cast&lt;JumpStm*&gt;(&amp;stm)) {
  ...
} else if (ExprStm *e = dynamic_cast&lt;ExprStm*&gt;(&amp;stm)) {
  ...
}
</code></pre>

<p>You cannot use <code>dynamic_cast</code> if you downcast (cast to a derived class) and the argument type is not polymorphic. For example, the following code is not valid, because <code>Base</code> doesn't contain any virtual function:</p>

<pre><code>struct Base { };
struct Derived : Base { };
int main() {
  Derived d; Base *b = &amp;d;
  dynamic_cast&lt;Derived*&gt;(b); // Invalid
}
</code></pre>

<p>An ""up-cast"" (cast to the base class) is always valid with both <code>static_cast</code> and <code>dynamic_cast</code>, and also without any cast, as an ""up-cast"" is an implicit conversion.</p>

<h2>Regular Cast</h2>

<p>These casts are also called C-style cast. A C-style cast is basically identical to trying out a range of sequences of C++ casts, and taking the first C++ cast that works, without ever considering <code>dynamic_cast</code>. Needless to say, this is much more powerful as it combines all of <code>const_cast</code>, <code>static_cast</code> and <code>reinterpret_cast</code>, but it's also unsafe, because it does not use <code>dynamic_cast</code>.</p>

<p>In addition, C-style casts not only allow you to do this, but they also allow you to safely cast to a private base-class, while the ""equivalent"" <code>static_cast</code> sequence would give you a compile-time error for that.</p>

<p>Some people prefer C-style casts because of their brevity. I use them for numeric casts only, and use the appropriate C++ casts when user defined types are involved, as they provide stricter checking.</p>
","1255015"
"Difference between private, public, and protected inheritance","518645","","<p>What is the difference between <code>public</code>, <code>private</code>, and <code>protected</code> inheritance in C++? All of the questions I've found on SO deal with specific cases.</p>
","<p>To answer that question, I'd like to describe member's accessors first in my own words. If you already know this, skip to the heading ""next:"".</p>

<p>There are three accessors that I'm aware of: <code>public</code>, <code>protected</code> and <code>private</code>. </p>

<p>Let:</p>

<pre><code>class Base {
    public:
        int publicMember;
    protected:
        int protectedMember;
    private:
        int privateMember;
};
</code></pre>

<ul>
<li>Everything that is aware of <code>Base</code> is also aware that <code>Base</code> contains <code>publicMember</code>.</li>
<li>Only the children (and their children) are aware that <code>Base</code> contains <code>protectedMember</code>.</li>
<li>No one but <code>Base</code> is aware of <code>privateMember</code>.</li>
</ul>

<p>By ""is aware of"", I mean ""acknowledge the existence of, and thus be able to access"".</p>

<h2>next:</h2>

<p>The same happens with public, private and protected inheritance. Let's consider a class <code>Base</code> and a class <code>Child</code> that inherits from <code>Base</code>.</p>

<ul>
<li>If the inheritance is <code>public</code>, everything that is aware of <code>Base</code> and <code>Child</code> is also aware that <code>Child</code> inherits from <code>Base</code>.</li>
<li>If the inheritance is <code>protected</code>, only <code>Child</code>, and its children, are aware that they inherit from <code>Base</code>.</li>
<li>If the inheritance is <code>private</code>, no one other than <code>Child</code> is aware of the inheritance.</li>
</ul>
","860353"
"Simple example of threading in C++","500405","","<p>Can someone post a simple example of starting two (Object Oriented) threads in C++. </p>

<p>I'm looking for actual C++ thread objects that I can extend run methods on (or something similar) as opposed to calling a C-style thread library.</p>

<p>Update - I left out any OS specific requests in the hopes that whoever replied would reply with cross platform libraries to use. I'm just making that explicit now.</p>
","<p>Create a function that you want the thread to execute. I'll demonstrate with a trivial example:</p>

<pre><code>void task1(std::string msg)
{
    std::cout &lt;&lt; ""task1 says: "" &lt;&lt; msg;
}
</code></pre>

<p>Now create the <code>thread</code> object that will ultimately invoke the function above like so:</p>

<pre><code>std::thread t1(task1, ""Hello"");
</code></pre>

<p>(You need to <code>#include &lt;thread&gt;</code> to access the <code>std::thread</code> class)</p>

<p>As you can see, the constructor's arguments are the function the thread will execute, followed by the function's parameters.</p>

<p>Finally, join it to your main thread of execution like so:</p>

<pre><code>t1.join(); 
</code></pre>

<p>(Joining means that the thread who invoked the new thread will wait for the new thread to finish execution, before it will continue its own execution).</p>

<hr>

<h2>The Code</h2>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;thread&gt;

using namespace std;

// The function we want to execute on the new thread.
void task1(string msg)
{
    cout &lt;&lt; ""task1 says: "" &lt;&lt; msg;
}

int main()
{
    // Constructs the new thread and runs it. Does not block execution.
    thread t1(task1, ""Hello"");

    // Makes the main thread wait for the new thread to finish execution, therefore blocks its own execution.
    t1.join();
}
</code></pre>

<p><a href=""http://en.cppreference.com/w/cpp/thread/thread"">More information about std::thread here</a></p>

<ul>
<li><em>On GCC, compile with <code>-std=c++0x -pthread</code>.</em></li>
<li><em>This should work for any operating-system, granted your compiler supports this (C++11) feature.</em></li>
</ul>
","11229853"
"usr/bin/ld: cannot find -l<nameOfTheLibrary>","498813","","<p>I'm trying to compile my program and it returns this error :</p>

<pre><code>usr/bin/ld: cannot find -l&lt;nameOfTheLibrary&gt;
</code></pre>

<p>in my makefile I use the command <code>g++</code> and link to my library which is a symbolic link to my library located on an other directory.</p>

<p>Is there an option to add to make it work please?</p>
","<p>If your library name is say <code>libxyz.so</code> and it is located on path say:</p>

<pre><code>/home/user/myDir
</code></pre>

<p>then to link it to your program:</p>

<pre><code>g++ -L/home/user/myDir -lxyz myprog.cpp -o myprog
</code></pre>
","16710346"
"When to use virtual destructors?","498357","","<p>I have a solid understanding of most OO theory but the one thing that confuses me a lot is virtual destructors.</p>

<p>I thought that the destructor always gets called no matter what and for every object in the chain.</p>

<p>When are you meant to make them virtual and why?</p>
","<p>Virtual destructors are useful when you can delete an instance of a derived class through a pointer to base class:</p>

<pre><code>class Base 
{
    // some virtual methods
};

class Derived : public Base
{
    ~Derived()
    {
        // Do some important cleanup
    }
}
</code></pre>

<p>Here, you'll notice that I didn't declare Base's destructor to be <code>virtual</code>. Now, let's have a look at the following snippet:</p>

<pre><code>Base *b = new Derived();
// use b
delete b; // Here's the problem!
</code></pre>

<p>Since Base's destructor is not <code>virtual</code> and <code>b</code> is a <code>Base*</code> pointing to a <code>Derived</code> object, <code>delete b</code> has <a href=""https://stackoverflow.com/q/2397984/20984"">undefined behaviour</a>:</p>

<blockquote>
  <p>[In <code>delete b</code>], if the static type of the
  object to be deleted is different from its dynamic type, the static
  type shall be a base class of the dynamic type of the object to be
  deleted and <strong>the static type shall have a virtual destructor or the
  behavior is undefined</strong>.</p>
</blockquote>

<p>In most implementations, the call to the destructor will be resolved like any non-virtual code, meaning that the destructor of the base class will be called but not the one of the derived class, resulting in a resources leak.</p>

<p>To sum up, always make base classes' destructors <code>virtual</code> when they're meant to be manipulated polymorphically.</p>

<p>If you want to prevent the deletion of an instance through a base class pointer, you can make the base class destructor protected and nonvirtual; by doing so, the compiler won't let you call <code>delete</code> on a base class pointer.</p>

<p>You can learn more about virtuality and virtual base class destructor in <a href=""http://www.gotw.ca/publications/mill18.htm"" rel=""noreferrer"">this article from Herb Sutter</a>.</p>
","461224"
"In C++ source, what is the effect of extern ""C""?","494434","","<p>What exactly does putting <code>extern ""C""</code> into C++ code do?</p>

<p>For example:</p>

<pre><code>extern ""C"" {
   void foo();
}
</code></pre>
","<p>extern ""C"" makes a function-name in C++ have 'C' linkage (compiler does not mangle the name) so that client C code can link to (i.e use) your function using a 'C' compatible header file that contains just the declaration of your function. Your function definition is contained in a binary format (that was compiled by your C++ compiler) that the client 'C' linker will then link to using the 'C' name.</p>

<p>Since C++ has overloading of function names and C does not, the C++ compiler cannot just use the function name as a unique id to link to, so it mangles the name by adding information about the arguments.  A C compiler does not need to mangle the name since you can not overload function names in C.  When you state that a function has extern ""C"" linkage in C++, the C++ compiler does not add argument/parameter type information to the name used for linkage.</p>

<p>Just so you know, you can specify ""C"" linkage to each individual declaration/definition explicitly or use a block to group a sequence of declarations/definitions to have a certain linkage:</p>

<pre><code>extern ""C"" void foo(int);
extern ""C""
{
   void g(char);
   int i;
}
</code></pre>

<p>If you care about the technicalities, they are listed in section 7.5 of the C++03 standard, here is a brief summary (with emphasis on extern ""C""):</p>

<ul>
<li>extern ""C"" is a linkage-specification</li>
<li>Every compiler is <em>required</em> to provide ""C"" linkage</li>
<li>a linkage specification shall occur only in namespace scope</li>
<li><strike> all function types, function names and variable names have a language linkage </strike> <b><a href=""https://stackoverflow.com/questions/1041866/in-c-source-what-is-the-effect-of-extern-c#comment20842899_1041880"">See Richard's Comment:</a></b> Only function names and variable names with external linkage have a language linkage</li>
<li>two function types with distinct language linkages are distinct types even if otherwise identical</li>
<li>linkage specs nest, inner one determines the final linkage</li>
<li>extern ""C"" is ignored for class members </li>
<li>at most one function with a particular name can have ""C"" linkage (regardless of namespace)</li>
<li><strike> extern ""C"" forces a function to have external linkage (cannot make it static) </strike> <b> See Richard's comment: </b>   'static' inside 'extern ""C""' is valid; an entity so declared has internal linkage, and so does not have a language linkage </li>
<li>Linkage from C++ to objects defined in other languages and to objects defined in C++ from other languages is implementation-defined and language-dependent. Only where the object layout strategies of two language implementations are similar enough can such linkage be achieved  </li>
</ul>
","1041880"
"C++ Singleton design pattern","478178","","<p>Recently I've bumped into a realization/implementation of the Singleton design pattern for C++. It has looked like this (I have adopted it from the real life example):</p>

<pre><code>// a lot of methods are omitted here
class Singleton
{
   public:
       static Singleton* getInstance( );
       ~Singleton( );
   private:
       Singleton( );
       static Singleton* instance;
};
</code></pre>

<p>From this declaration I can deduce that the instance field is initiated on the heap. That means there is a memory allocation. What is completely unclear for me is when exactly the memory is going to be deallocated? Or is there a bug and memory leak? It seems like there is a problem in the implementation.</p>

<p>My main question is, how do I implement it in the right way?</p>
","<p>See this article for a simple design for a lazy evaluated with guaranteed destruction singleton:<br>
<a href=""https://stackoverflow.com/questions/270947/can-any-one-provide-me-a-sample-of-singleton-in-c/271104#271104"">Can any one provide me a sample of Singleton in c++?</a>  </p>

<p>The classic lazy evaluated and correctly destroyed singleton.</p>

<pre><code>class S
{
    public:
        static S&amp; getInstance()
        {
            static S    instance; // Guaranteed to be destroyed.
                                  // Instantiated on first use.
            return instance;
        }
    private:
        S() {}                    // Constructor? (the {} brackets) are needed here.

        // C++ 03
        // ========
        // Dont forget to declare these two. You want to make sure they
        // are unacceptable otherwise you may accidentally get copies of
        // your singleton appearing.
        S(S const&amp;);              // Don't Implement
        void operator=(S const&amp;); // Don't implement

        // C++ 11
        // =======
        // We can use the better technique of deleting the methods
        // we don't want.
    public:
        S(S const&amp;)               = delete;
        void operator=(S const&amp;)  = delete;

        // Note: Scott Meyers mentions in his Effective Modern
        //       C++ book, that deleted functions should generally
        //       be public as it results in better error messages
        //       due to the compilers behavior to check accessibility
        //       before deleted status
};
</code></pre>

<p>See this article about when to use a singleton: (not often)<br>
<a href=""https://stackoverflow.com/questions/86582/singleton-how-should-it-be-used"">Singleton: How should it be used</a></p>

<p>See this two article about initialization order and how to cope:<br>
<a href=""https://stackoverflow.com/questions/211237/c-static-variables-initialisation-order/211307#211307"">Static variables initialisation order</a><br>
<a href=""https://stackoverflow.com/questions/335369/finding-c-static-initialization-order-problems/335746#335746"">Finding C++ static initialization order problems</a>  </p>

<p>See this article describing lifetimes:<br>
<a href=""https://stackoverflow.com/questions/246564/what-is-the-lifetime-of-a-static-variable-in-a-c-function"">What is the lifetime of a static variable in a C++ function?</a>  </p>

<p>See this article that discusses some threading implications to singletons:<br>
<a href=""https://stackoverflow.com/questions/449436/singleton-instance-declared-as-static-variable-of-getinstance-method/449823#449823"">Singleton instance declared as static variable of GetInstance method</a></p>

<p>See this article that explains why double checked locking will not work on C++:<br>
<a href=""https://stackoverflow.com/questions/367633/what-are-all-the-common-undefined-behaviour-that-c-programmer-should-know-about/367690#367690"">What are all the common undefined behaviours that a C++ programmer should know about?</a></p>
","1008289"
"Compiling C++11 with g++","472393","","<p>I'm trying to update my C++ compiler to C++11.
I have searched a bit and I have come to the conclusion that I have to use the flag <code>-std=c++0x</code> or <code>-std=gnu++0x</code>, but I don't know many things about flags. Can anyone help me? (I'm using Ubuntu 12.04.)</p>

<p>Here is the error that i get from the compiler when i attempt to use a library which is included in C++11(i.e. array):</p>

<pre><code>#include &lt;array&gt;
#include &lt;iostream&gt;

int main()
{
    std::array&lt;int, 3&gt; arr = {2, 3, 5};
    ...
}
</code></pre>

<p><code>This file requires compiler and library support for the upcoming ISO C++ standard, C++0x. This support is currently experimental, and must be enabled with the -std=c++0x or -std=gnu++0x compiler options.</code></p>
","<p>Flags (or compiler options) are nothing but ordinary command line arguments passed to the compiler executable.</p>

<p>Assuming you are invoking g++ from the command line (terminal):</p>

<p><code>$ g++ -std=c++11 your_file.cpp -o your_program</code></p>

<p>or</p>

<p><code>$ g++ -std=c++0x your_file.cpp -o your_program</code></p>

<p>if the above doesn't work.</p>
","10363883"
"How do I tokenize a string in C++?","461868","","<p>Java has a convenient split method:</p>

<pre><code>String str = ""The quick brown fox"";
String[] results = str.split("" "");
</code></pre>

<p>Is there an easy way to do this in C++?</p>
","<p>Your simple case can easily be built using the <a href=""http://en.cppreference.com/w/cpp/string/basic_string/find"" rel=""noreferrer""><code>std::string::find</code></a> method. However, take a look at <a href=""http://www.boost.org/doc/libs/1_36_0/libs/tokenizer/index.html"" rel=""noreferrer"">Boost.Tokenizer</a>. It's great. Boost generally has some very cool string tools.</p>
","53863"
"What is an unsigned char?","441834","","<p>In C/C++, what an <code>unsigned char</code> is used for? How is it different from a regular <code>char</code>?</p>
","<p>In C++, there are three <em>distinct</em> character types:</p>

<ul>
<li><code>char</code></li>
<li><code>signed char</code></li>
<li><code>unsigned char</code></li>
</ul>

<p>If you are using character types for <em>text</em>, use the unqualified <code>char</code>:</p>

<ul>
<li>it is the type of character literals like <code>'a'</code> or <code>'0'</code>.</li>
<li>it is the type that makes up C strings like <code>""abcde""</code></li>
</ul>

<p>It also works out as a number value, but it is unspecified whether that value is treated as signed or unsigned. Beware character comparisons through inequalities - although if you limit yourself to ASCII (0-127) you're just about safe.</p>

<p>If you are using character types as <em>numbers</em>, use:</p>

<ul>
<li><code>signed char</code>, which gives you <em>at least</em> the -127 to 127 range. (-128 to 127 is common)</li>
<li><code>unsigned char</code>, which gives you <em>at least</em> the 0 to 255 range.</li>
</ul>

<p>""At least"", because the C++ standard only gives the minimum range of values that each numeric type is required to cover. <code>sizeof (char)</code> is required to be 1 (i.e. one byte), but a byte could in theory be for example 32 bits. <strong><code>sizeof</code> would still be report its size as <code>1</code></strong> - meaning that you <em>could</em> have <code>sizeof (char) == sizeof (long) == 1</code>.</p>
","87648"
"How do I erase an element from std::vector<> by index?","433252","","<p>I have a std::vector&lt;int>, and I want to delete the n'th element. How do I do that?</p>

<pre><code>std::vector&lt;int&gt; vec;

vec.push_back(6);
vec.push_back(-17);
vec.push_back(12);

vec.erase(???);
</code></pre>
","<p>To delete a single element, you could do:</p>

<pre><code>std::vector&lt;int&gt; vec;

vec.push_back(6);
vec.push_back(-17);
vec.push_back(12);

// Deletes the second element (vec[1])
vec.erase(vec.begin() + 1);
</code></pre>

<p>Or, to delete more than one element at once:</p>

<pre><code>// Deletes the second through third elements (vec[1], vec[2])
vec.erase(vec.begin() + 1, vec.begin() + 3);
</code></pre>
","875109"
"How to call a parent class function from derived class function?","418824","","<p>How do I call the parent function from a derived class using C++? For example, I have a class called <code>parent</code>, and a class called <code>child</code> which is derived from parent. Within 
each class there is a <code>print</code> function.  In the definition of the child's print function I would like to make a call to the parents print function.  How would I go about doing this?</p>
","<p>I'll take the risk of stating the obvious: You call the function, if it's defined in the base class it's automatically available in the derived class (unless it's <code>private</code>).</p>

<p>If there is a function with the same signature in the derived class you can disambiguate it by adding the base class's name followed by two colons <code>base_class::foo(...)</code>. You should note that unlike Java and C#, C++ does <strong>not</strong> have a keyword for ""the base class"" (<code>super</code> or <code>base</code>) since C++ supports <a href=""http://en.wikipedia.org/wiki/Multiple_inheritance"" rel=""noreferrer"">multiple inheritance</a> which may lead to ambiguity.</p>

<pre><code>class left {
public:
    void foo();
};

class right {
public:
    void foo();
};

class bottom : public left, public right {
public:
    void foo()
    {
        //base::foo();// ambiguous
        left::foo();
        right::foo();

        // and when foo() is not called for 'this':
        bottom b;
        b.left::foo();  // calls b.foo() from 'left'
        b.right::foo();  // call b.foo() from 'right'
    }
};
</code></pre>

<p>Incidentally, you can't derive directly from the same class twice since there will be no way to refer to one of the base classes over the other.</p>

<pre><code>class bottom : public left, public left { // Illegal
};
</code></pre>
","357380"
"When should static_cast, dynamic_cast, const_cast and reinterpret_cast be used?","406147","","<p>What are the proper uses of:</p>

<ul>
<li><code>static_cast</code></li>
<li><code>dynamic_cast</code></li>
<li><code>const_cast</code></li>
<li><code>reinterpret_cast</code></li>
<li>C-style cast <code>(type)value</code></li>
<li>Function-style cast <code>type(value)</code></li>
</ul>

<p>How does one decide which to use in which specific cases?</p>
","<p><strong><code>static_cast</code></strong> is the first cast you should attempt to use. It does things like implicit conversions between types (such as <code>int</code> to <code>float</code>, or pointer to <code>void*</code>), and it can also call explicit conversion functions (or implicit ones). In many cases, explicitly stating <code>static_cast</code> isn't necessary, but it's important to note that the <code>T(something)</code> syntax is equivalent to <code>(T)something</code> and should be avoided (more on that later). A <code>T(something, something_else)</code> is safe, however, and guaranteed to call the constructor.</p>

<p><code>static_cast</code> can also cast through inheritance hierarchies. It is unnecessary when casting upwards (towards a base class), but when casting downwards it can be used as long as it doesn't cast through <code>virtual</code> inheritance. It does not do checking, however, and it is undefined behavior to <code>static_cast</code> down a hierarchy to a type that isn't actually the type of the object.</p>

<hr>

<p><strong><code>const_cast</code></strong> can be used to remove or add <code>const</code> to a variable; no other C++ cast is capable of removing it (not even <code>reinterpret_cast</code>). It is important to note that modifying a formerly <code>const</code> value is only undefined if the original variable is <code>const</code>; if you use it to take the <code>const</code> off a reference to something that wasn't declared with <code>const</code>, it is safe. This can be useful when overloading member functions based on <code>const</code>, for instance. It can also be used to add <code>const</code> to an object, such as to call a member function overload.</p>

<p><code>const_cast</code> also works similarly on <code>volatile</code>, though that's less common.</p>

<hr>

<p><strong><code>dynamic_cast</code></strong> is almost exclusively used for handling polymorphism. You can cast a pointer or reference to any polymorphic type to any other class type (a polymorphic type has at least one virtual function, declared or inherited). You can use it for more than just casting downwards -- you can cast sideways or even up another chain. The <code>dynamic_cast</code> will seek out the desired object and return it if possible. If it can't, it will return <code>nullptr</code> in the case of a pointer, or throw <code>std::bad_cast</code> in the case of a reference.</p>

<p><code>dynamic_cast</code> has some limitations, though. It doesn't work if there are multiple objects of the same type in the inheritance hierarchy (the so-called 'dreaded diamond') and you aren't using <code>virtual</code> inheritance. It also can only go through public inheritance - it will always fail to travel through <code>protected</code> or <code>private</code> inheritance. This is rarely an issue, however, as such forms of inheritance are rare.</p>

<hr>

<p><strong><code>reinterpret_cast</code></strong> is the most dangerous cast, and should be used very sparingly. It turns one type directly into another - such as casting the value from one pointer to another, or storing a pointer in an <code>int</code>, or all sorts of other nasty things. Largely, the only guarantee you get with <code>reinterpret_cast</code> is that normally if you cast the result back to the original type, you will get the exact same value (but <strong><em>not</em></strong> if the intermediate type is smaller than the original type). There are a number of conversions that <strong><code>reinterpret_cast</code></strong> cannot do, too. It's used primarily for particularly weird conversions and bit manipulations, like turning a raw data stream into actual data, or storing data in the low bits of an aligned pointer.</p>

<hr>

<p><strong>C-style cast</strong> and <strong>function-style cast</strong> are casts using <code>(type)object</code> or <code>type(object)</code>, respectively. A C-style cast is defined as the first of the following which succeeds:</p>

<ul>
<li><code>const_cast</code></li>
<li><code>static_cast</code> (though ignoring access restrictions)</li>
<li><code>static_cast</code> (see above), then <code>const_cast</code></li>
<li><code>reinterpret_cast</code></li>
<li><code>reinterpret_cast</code>, then <code>const_cast</code></li>
</ul>

<p>It can therefore be used as a replacement for other casts in some instances, but can be extremely dangerous because of the ability to devolve into a <code>reinterpret_cast</code>, and the latter should be preferred when explicit casting is needed, unless you are sure <code>static_cast</code> will succeed or <code>reinterpret_cast</code> will fail. Even then, consider the longer, more explicit option.</p>

<p>C-style casts also ignore access control when performing a <code>static_cast</code>, which means that they have the ability to perform an operation that no other cast can. This is mostly a kludge, though, and in my mind is just another reason to avoid C-style casts.</p>
","332086"
"How to loop through a C++ map of maps?","405858","","<p>How would I loop through a <code>std::map</code> in C++?
My map is defined as:</p>

<pre><code>std::map&lt; std::string, std::map&lt;std::string, std::string&gt; &gt;
</code></pre>

<p>For example, this holds data like this:</p>

<pre><code>m[""name1""][""value1""] = ""data1"";
m[""name1""][""value2""] = ""data2"";
m[""name2""][""value1""] = ""data1"";
m[""name2""][""value2""] = ""data2"";
m[""name3""][""value1""] = ""data1"";
m[""name3""][""value2""] = ""data2"";
</code></pre>

<p>How can I loop through this map and access the various values?</p>
","<p>Old question but the remaining answers are outdated as of C++11 - you can use a <a href=""http://en.cppreference.com/w/cpp/language/range-for"" rel=""noreferrer"">ranged based for loop</a> and simply do:</p>

<pre><code>std::map&lt;std::string, std::map&lt;std::string, std::string&gt;&gt; mymap;

for(auto const &amp;ent1 : mymap) {
  // ent1.first is the first key
  for(auto const &amp;ent2 : ent1.second) {
    // ent2.first is the second key
    // ent2.second is the data
  }
}
</code></pre>

<p>this should be much cleaner than the earlier versions, and avoids unnecessary copies. </p>

<p>Some favour replacing the comments with explicit definitions of reference variables (which get optimised away if unused):</p>

<pre><code>for(auto const &amp;ent1 : mymap) {
  auto const &amp;outer_key = ent1.first;
  auto const &amp;inner_map = ent1.second;
  for(auto const &amp;ent2 : inner_map) {
    auto const &amp;inner_key   = ent2.first;
    auto const &amp;inner_value = ent2.second;
  }
}
</code></pre>
","27344958"
"How do you declare an interface in C++?","403201","","<p>How do I setup a class that represents an interface?  Is this just an abstract base class?</p>
","<p>To expand on the answer by <a href=""https://stackoverflow.com/questions/318064/how-do-you-declare-an-interface-in-c#318084"">bradtgmurray</a>,  you may want to make one exception to the pure virtual method list of your interface by adding a virtual destructor. This allows you to pass pointer ownership to another party without exposing the concrete derived class. The destructor doesn't have to do anything, because the interface doesn't have any concrete members. It might seem contradictory to define a function as both virtual and inline, but trust me - it isn't.</p>

<pre><code>class IDemo
{
    public:
        virtual ~IDemo() {}
        virtual void OverrideMe() = 0;
};

class Parent
{
    public:
        virtual ~Parent();
};

class Child : public Parent, public IDemo
{
    public:
        virtual void OverrideMe()
        {
            //do stuff
        }
};
</code></pre>

<p>You don't have to include a body for the virtual destructor - it turns out some compilers have trouble optimizing an empty destructor and you're better off using the default. </p>
","318137"
"Passing a 2D array to a C++ function","400242","","<p>I have a function which I want to take, as a parameter, a 2D array of variable size. </p>

<p>So far I have this: </p>

<pre><code>void myFunction(double** myArray){
     myArray[x][y] = 5;
     etc...
}
</code></pre>

<p>And I have declared an array elsewhere in my code:</p>

<pre><code>double anArray[10][10];
</code></pre>

<p>However, calling <code>myFunction(anArray)</code> gives me an error.</p>

<p>I do not want to copy the array when I pass it in. Any changes made in <code>myFunction</code> should alter the state of <code>anArray</code>. If I understand correctly, I only want to pass in as an argument a pointer to a 2D array. The function needs to accept arrays of different sizes also. So for example, <code>[10][10]</code> and <code>[5][5]</code>. How can I do this?</p>
","<p>There are three ways to pass a 2D array to a function:</p>

<ol>
<li><p>The parameter is a 2D array</p>

<pre><code>int array[10][10];
void passFunc(int a[][10])
{
    // ...
}
passFunc(array);
</code></pre></li>
<li><p>The parameter is an array containing pointers</p>

<pre><code>int *array[10];
for(int i = 0; i &lt; 10; i++)
    array[i] = new int[10];
void passFunc(int *a[10]) //Array containing pointers
{
    // ...
}
passFunc(array);
</code></pre></li>
<li><p>The parameter is a pointer to a pointer</p>

<pre><code>int **array;
array = new int *[10];
for(int i = 0; i &lt;10; i++)
    array[i] = new int[10];
void passFunc(int **a)
{
    // ...
}
passFunc(array);
</code></pre></li>
</ol>
","8767247"
"How do I build a graphical user interface in C++?","400124","","<p>All of my C++ programs so far have been using the command line interface and the only other language I have experience with is PHP which doesn't support this. </p>

<p>Where do I start with graphical user interface programming in C++? How do I create one?</p>
","<p>Essentially an operating system's windowing system exposes some API calls that you can perform to do jobs like create a window, or put a button on the window. Basically you get a suite of header files and you can call functions in those imported libraries, just like you'd do with stdlib and <code>printf</code>. </p>

<p>Each operating system comes with it's own GUI toolkit, suite of header files, and API calls, and their own way of doing things. There are also cross platform toolkits like gtk, qt, and wx widgets that help you build programs that work anywhere. They achieve this by having the same API calls on each platform, but a different implementation for those API functions that call down to the native OS API calls.</p>

<p>One thing they'll all have in common, which will be different from a CLI program, is something called an event loop. The basic idea there is somewhat complicated, and difficult to compress, but in essence it means that not a hell of a lot is going in in your main class/main function, except:</p>

<ul>
<li>check the event queue if there's any new events</li>
<li>if there is, dispatch those events to appropriate handlers</li>
<li>when you're done, yield control back to the operating system (usually with some kind of special ""sleep"" or ""select"" or ""yield"" function call)</li>
<li>then the yield function will return when the operating system is done, and you have another go around the loop.</li>
</ul>

<p>There are plenty of resources about event based programming. If you have any experience with javascript, it's the same basic idea, except that you, the scripter have no access or control over the event loop itself, or what events there are, your only job is to write and register handlers.</p>

<p>You should keep in mind that GUI programming is incredibly complicated and difficult, in general. If you have the option, it's actually much easier to just integrate an embedded webserver into your program and have an html/web based interface. The one exception that I've encountered is Apple's cocoa+xcode+interface builder + tutorials that make it easily the most approachable environment for people new to GUI programming that I've seen.</p>
","1186051"
"How do I get the directory that a program is running from?","396325","","<p>Is there a platform-agnostic and filesystem-agnostic method to obtain the full path of the directory from where a program is running using C/C++? Not to be confused with the current working directory. (Please don't suggest libraries unless they're standard ones like clib or STL.)</p>

<p>(If there's no platform/filesystem-agnostic method, suggestions that work in Windows and Linux for specific filesystems are welcome too.)</p>
","<p>Here's code to get the full path to the executing app:</p>

<p>Windows:</p>

<pre><code>int bytes = GetModuleFileName(NULL, pBuf, len);
if(bytes == 0)
    return -1;
else
    return bytes;
</code></pre>

<p>Linux:</p>

<pre><code>char szTmp[32];
sprintf(szTmp, ""/proc/%d/exe"", getpid());
int bytes = MIN(readlink(szTmp, pBuf, len), len - 1);
if(bytes &gt;= 0)
    pBuf[bytes] = '\0';
return bytes;
</code></pre>
","198099"
"What is a segmentation fault?","396242","","<p>What is a segmentation fault? Is it different in C and C++? How are segmentation faults and dangling pointers related?</p>
","<p>Segmentation fault is a specific kind of error caused by accessing memory that “does not belong to you.” It’s a helper mechanism that keeps you from corrupting the memory and introducing hard-to-debug memory bugs. Whenever you get a segfault you know you are doing something wrong with memory – accessing variable that has already been freed, writing to a read-only portion of the memory, etc. Segmentation fault is essentially the same in most languages that let you mess with the memory management, there is no principial difference between segfaults in C and C++.</p>

<p>There are many ways to get a segfault, at least in the lower-level languages such as C(++). A common way to get a segfault is to dereference a null pointer:</p>

<pre><code>int *p = NULL;
*p = 1;
</code></pre>

<p>Another segfault happens when you try to write to a portion of memory that was marked as read-only:</p>

<pre><code>char *str = ""Foo""; // Compiler marks the constant string as read-only
*str = 'b'; // Which means this is illegal and results in a segfault
</code></pre>

<p>Dangling pointer points to a thing that does not exist any more, like here:</p>

<pre><code>char *p = NULL;
{
    char c;
    p = &amp;c;
}
// Now p is dangling
</code></pre>

<p>The pointer <code>p</code> dangles because it points to character variable <code>c</code> that ceased to exist after the block ended. And when you try to dereference dangling pointer (like <code>*p='A'</code>), you would probably get a segfault.</p>
","2346849"
"How to compile and run C/C++ in a Unix console/Mac terminal?","392198","","<p>How can I compile/run C or C++ in Unix console or a Mac terminal?</p>

<p>(I know it, forget it, and relearn it again. Time to write it down.)</p>
","<p>If it is a simple single source program:</p>

<pre><code>make foo
</code></pre>

<p>where the source file is foo.c or foo.cpp, etc.</p>

<p>You dont even need a makefile. Make has enough built-in rules to build your source file into an executable of the same name, minus extension.</p>
","221257"
"Difference between 'struct' and 'typedef struct' in C++?","389852","","<p>In C++, is there any difference between:</p>

<pre><code>struct Foo { ... };
</code></pre>

<p>and </p>

<pre><code>typedef struct { ... } Foo;
</code></pre>
","<p>In C++, there is only a subtle difference.  It's a holdover from C, in which it makes a difference.</p>

<p>The C language standard (<a href=""http://port70.net/~nsz/c/c89/c89-draft.txt"" rel=""noreferrer"">C89 §3.1.2.3</a>, <a href=""http://port70.net/~nsz/c/c99/n1256.html#6.2.3"" rel=""noreferrer"">C99 §6.2.3</a>, and <a href=""http://port70.net/~nsz/c/c11/n1570.html#6.2.3"" rel=""noreferrer"">C11 §6.2.3</a>) mandates separate namespaces for different categories of identifiers, including <em>tag identifiers</em> (for <code>struct</code>/<code>union</code>/<code>enum</code>) and <em>ordinary identifiers</em> (for <code>typedef</code> and other identifiers). </p>

<p>If you just said:</p>

<pre><code>struct Foo { ... };
Foo x;
</code></pre>

<p>you would get a compiler error, because <code>Foo</code> is only defined in the tag namespace. </p>

<p>You'd have to declare it as:</p>

<pre><code>struct Foo x;
</code></pre>

<p>Any time you want to refer to a <code>Foo</code>, you'd always have to call it a <code>struct Foo</code>.  This gets annoying fast, so you can add a <code>typedef</code>:</p>

<pre><code>struct Foo { ... };
typedef struct Foo Foo;
</code></pre>

<p>Now both <code>struct Foo</code> (in the tag namespace) and just plain <code>Foo</code> (in the ordinary identifier namespace) both refer to the same thing, and you can freely declare objects of type <code>Foo</code> without the struct keyword.</p>

<hr>

<p>The construct:</p>

<pre><code>typedef struct Foo { ... } Foo;
</code></pre>

<p>is just an abbreviation for the declaration and <code>typedef</code>.</p>

<hr>

<p>Finally,</p>

<pre><code>typedef struct { ... } Foo;
</code></pre>

<p>declares an anonymous structure and creates a <code>typedef</code> for it.  Thus, with this construct, it doesn't have a name in the tag namespace, only a name in the typedef namespace.  This means it also cannot be forward-declared.  <em>If you want to make a forward declaration, you have to give it a name in the tag namespace</em>.</p>

<hr>

<p>In C++, all <code>struct</code>/<code>union</code>/<code>enum</code>/<code>class</code> declarations act like they are implicitly <code>typedef</code>'ed, as long as the name is not hidden by another declaration with the same name.  See <a href=""https://stackoverflow.com/questions/612328/difference-between-struct-and-typedef-struct-in-c/612476#612476"">Michael Burr's answer</a> for the full details.</p>
","612350"
"How to print out the contents of a vector?","388870","","<p>I want to print out the contents of a vector in C++, here is what I have:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;
#include &lt;cmath&gt;
#include &lt;vector&gt;
#include &lt;sstream&gt;
#include &lt;cstdio&gt;
using namespace std;

int main()
{
    ifstream file(""maze.txt"");
    if (file) {
        vector&lt;char&gt; vec(istreambuf_iterator&lt;char&gt;(file), (istreambuf_iterator&lt;char&gt;()));
        vector&lt;char&gt; path;
        int x = 17;
        char entrance = vec.at(16);
        char firstsquare = vec.at(x);
        if (entrance == 'S') { 
            path.push_back(entrance); 
        }
        for (x = 17; isalpha(firstsquare); x++) {
            path.push_back(firstsquare);
        }
        for (int i = 0; i &lt; path.size(); i++) {
            cout &lt;&lt; path[i] &lt;&lt; "" "";
        }
        cout &lt;&lt; endl;
        return 0;
    }
}
</code></pre>

<p>How do I print the contents of the vector to the screen?</p>
","<p>Purely to answer your question, you can use an iterator:</p>

<pre><code>std::vector&lt;char&gt; path;
// ...
for (std::vector&lt;char&gt;::const_iterator i = path.begin(); i != path.end(); ++i)
    std::cout &lt;&lt; *i &lt;&lt; ' ';
</code></pre>

<p>If you want to modify the vector's contents in the for loop, then use <code>iterator</code> rather than <code>const_iterator</code>.</p>

<p>But there's lots more that can be said about this. If you just want an answer you can use, then you can stop here; otherwise, read on.</p>

<h2>auto (C++11)/typedef</h2>

<p>This is not another solution, but a supplement to the above <code>iterator</code> solution. If you are using the C++11 standard (or later), then you can use the <code>auto</code> keyword to help the readability:</p>

<pre><code>for (auto i = path.begin(); i != path.end(); ++i)
    std::cout &lt;&lt; *i &lt;&lt; ' ';
</code></pre>

<p>But the type of <code>i</code> will be non-const (i.e., the compiler will use <code>std::vector&lt;char&gt;::iterator</code> as the type of <code>i</code>).</p>

<p>In this case, you might as well just use a <code>typedef</code> (not restricted to C++11, and <strong>very</strong> useful to use anyway):</p>

<pre><code>typedef std::vector&lt;char&gt; Path;
Path path;
// ...
for (Path::const_iterator i = path.begin(); i != path.end(); ++i)
    std::cout &lt;&lt; *i &lt;&lt; ' ';
</code></pre>

<h2>counter</h2>

<p>You can, of course, use a integer type to record your position in the <code>for</code> loop:</p>

<pre><code>for(int i=0; i&lt;path.size(); ++i)
  std::cout &lt;&lt; path[i] &lt;&lt; ' ';
</code></pre>

<p>If you are going to do this, it's better to use the container's member types, if they are available and appropriate. <code>std::vector</code> has a member type called <code>size_type</code> for this job: it is the type returned by the <code>size</code> method.</p>

<pre><code>// Path typedef'd to std::vector&lt;char&gt;
for( Path::size_type i=0; i&lt;path.size(); ++i)
  std::cout &lt;&lt; path[i] &lt;&lt; ' ';
</code></pre>

<p>Why not just use this over the <code>iterator</code> solution? For simple cases you might as well, but the point is that the <code>iterator</code> class is an object designed to do this job for more complicated objects where this solution is not going to be ideal.</p>

<h2>range-based for loop (C++11)</h2>

<p>See <a href=""https://stackoverflow.com/a/20507503/498730"">Jefffrey's solution</a>. In C++11 (and later) you can use the new range-based <code>for</code> loop, which looks like this:</p>

<pre><code>for (auto i: path)
  std::cout &lt;&lt; i &lt;&lt; ' ';
</code></pre>

<p>Since <code>path</code> is a vector of items (explicitly <code>std::vector&lt;char&gt;</code>), the object <code>i</code> is of type of the item of the vector (i.e., explicitly, it is of type <code>char</code>). The object <code>i</code> has a value that is a copy of the actual item in the <code>path</code> object. Thus, all changes to <code>i</code> in the loop are not preserved in <code>path</code> itself. Additionally, if you would like to enforce the fact that you don't want to be able to change the copied value of <code>i</code> in the loop, you can force the type of <code>i</code> to be <code>const char</code> like this:</p>

<pre><code>for (const auto i: path)
  std::cout &lt;&lt; i &lt;&lt; ' ';
</code></pre>

<p>If you would like to modify the items in <code>path</code>, you can use a reference:</p>

<pre><code>for (auto&amp; i: path)
  std::cout &lt;&lt; i &lt;&lt; ' ';
</code></pre>

<p>and even if you don't want to modify <code>path</code>, if the copying of objects is expensive you should use a const reference instead of copying by value:</p>

<pre><code>for (const auto&amp; i: path)
  std::cout &lt;&lt; i &lt;&lt; ' ';
</code></pre>

<h2>std::copy</h2>

<p>See <a href=""https://stackoverflow.com/a/11335634/498730"">Joshua's answer</a>. You can use the STL algorithm <code>std::copy</code> to copy the vector contents onto the output stream. This is an elegant solution if you are comfortable with it (and besides, it is <strong>very</strong> useful, not just in this case of printing the contents of a vector).</p>

<h2>std::for_each</h2>

<p>See <a href=""https://stackoverflow.com/a/26363773/498730"">Max's solution</a>. Using <code>std::for_each</code> is overkill for this simple scenario, but it is a very useful solution if you wanted to do more than just printing to screen: using <code>std::for_each</code> allows you to do <em>any</em> (sensible) operation on the vector contents.</p>

<h2>overload ostream::operator&lt;&lt;</h2>

<p>See <a href=""https://stackoverflow.com/a/23397700/498730"">Chris's answer</a>, this is more a complement to the other answers since you will still need to implement one of the solutions above in the overloading. In his example he used a counter in a <code>for</code> loop. For example, this is how you could quickly use <a href=""https://stackoverflow.com/a/11335634/498730"">Joshua's solution</a>:</p>

<pre><code>template &lt;typename T&gt;
std::ostream&amp; operator&lt;&lt; (std::ostream&amp; out, const std::vector&lt;T&gt;&amp; v) {
  if ( !v.empty() ) {
    out &lt;&lt; '[';
    std::copy (v.begin(), v.end(), std::ostream_iterator&lt;T&gt;(out, "", ""));
    out &lt;&lt; ""\b\b]"";
  }
  return out;
}
</code></pre>

<p>Usage of any of the other solutions should be straightforward.</p>

<h2>conclusion</h2>

<p>Any of the solutions presented here will work. It's up to you and the code on which one is the ""best"". Anything more detailed than this is probably best left for another question where the pros/cons can be properly evaluated; but as always user preference will always play a part: none of the solutions presented are wrong, but some will look nicer to each individual coder.</p>

<h2>addendum</h2>

<p>This is an expanded solution of an earlier one I posted. Since that post kept getting attention, I decided to expand on it and refer to the other excellent solutions that were posted here. My original post had a remark that mentioned that if you <em>were</em> intending on modifying your vector inside a <code>for</code> loop then there are two methods provided by <code>std::vector</code> to access elements: <code>std::vector::operator[]</code> which does not do bounds checking, and <code>std::vector::at</code> which does perform bounds checking. In other words, <code>at</code> will throw if you try to access an element outside the vector and <code>operator[]</code> wouldn't. I only added this comment, originally, for the sake of mentioning something that it might be useful to know of if anyone already didn't. And I see no difference now. Hence this addendum.</p>
","10758845"
"Check if a string contains a string in C++","387434","","<p>I have a variable of type string.  I want to check if it contains a certain string.  How would I do that?</p>

<p>Is there a function that returns true if the string is found, and false if it isn't?</p>
","<p>Use <a href=""http://en.cppreference.com/w/cpp/string/basic_string/find"" rel=""noreferrer""><code>std::string::find</code></a> as follows:</p>

<pre><code>if (s1.find(s2) != std::string::npos) {
    std::cout &lt;&lt; ""found!"" &lt;&lt; '\n';
}
</code></pre>

<p>Note: ""found!"" will be printed if s2 is a substring of s1, both s1 and s2 are of type std::string.</p>
","2340309"
"How can I profile C++ code running in Linux?","387100","","<p>I have a C++ application, running on Linux, which I'm in the process of optimizing. How can I pinpoint which areas of my code are running slowly?</p>
","<p>If your goal is to use a profiler, use one of the suggested ones.</p>

<p>However, if you're in a hurry and you can manually interrupt your program under the debugger while it's being subjectively slow, there's a simple way to find performance problems.</p>

<p>Just halt it several times, and each time look at the call stack. If there is some code that is wasting some percentage of the time, 20% or 50% or whatever, that is the probability that you will catch it in the act on each sample. So that is roughly the percentage of samples on which you will see it. There is no educated guesswork required.
If you do have a guess as to what the problem is, this will prove or disprove it.</p>

<p>You may have multiple performance problems of different sizes. If you clean out any one of them, the remaining ones will take a larger percentage, and be easier to spot, on subsequent passes.
This <em>magnification effect</em>, when compounded over multiple problems, can lead to truly massive speedup factors.</p>

<p>Caveat: Programmers tend to be skeptical of this technique unless they've used it themselves. They will say that profilers give you this information, but that is only true if they sample the entire call stack, and then let you examine a random set of samples. (The summaries are where the insight is lost.) Call graphs don't give you the same information, because </p>

<ol>
<li>they don't summarize at the instruction level, and</li>
<li>they give confusing summaries in the presence of recursion.</li>
</ol>

<p>They will also say it only works on toy programs, when actually it works on any program, and it seems to work better on bigger programs, because they tend to have more problems to find.
They will say it sometimes finds things that aren't problems, but that is only true if you see something <em>once</em>. If you see a problem on more than one sample, it is real.</p>

<p>P.S. This can also be done on multi-thread programs if there is a way to collect call-stack samples of the thread pool at a point in time, as there is in Java.</p>

<p>P.P.S As a rough generality, the more layers of abstraction you have in your software, the more likely you are to find that that is the cause of performance problems (and the opportunity to get speedup).</p>

<p>Added: It might not be obvious, but the stack sampling technique works equally well in the presence of recursion. The reason is that the time that would be saved by removal of an instruction is approximated by the fraction of samples containing it, regardless of the number of times it may occur within a sample.</p>

<p>Another objection I often hear is: ""<em>It will stop someplace random, and it will miss the real problem</em>"".
This comes from having a prior concept of what the real problem is.
A key property of performance problems is that they defy expectations.
Sampling tells you something is a problem, and your first reaction is disbelief.
That is natural, but you can be sure if it finds a problem it is real, and vice-versa.</p>

<p>ADDED: Let me make a Bayesian explanation of how it works.  Suppose there is some instruction <code>I</code> (call or otherwise) which is on the call stack some fraction <code>f</code> of the time (and thus costs that much). For simplicity, suppose we don't know what <code>f</code> is, but assume it is either 0.1, 0.2, 0.3, ... 0.9, 1.0, and the prior probability of each of these possibilities is 0.1, so all of these costs are equally likely a-priori.</p>

<p>Then suppose we take just 2 stack samples, and we see instruction <code>I</code> on both samples, designated observation <code>o=2/2</code>. This gives us new estimates of the frequency <code>f</code> of <code>I</code>, according to this:</p>

<pre><code>Prior                                    
P(f=x) x  P(o=2/2|f=x) P(o=2/2&amp;&amp;f=x)  P(o=2/2&amp;&amp;f &gt;= x)  P(f &gt;= x)

0.1    1     1             0.1          0.1            0.25974026
0.1    0.9   0.81          0.081        0.181          0.47012987
0.1    0.8   0.64          0.064        0.245          0.636363636
0.1    0.7   0.49          0.049        0.294          0.763636364
0.1    0.6   0.36          0.036        0.33           0.857142857
0.1    0.5   0.25          0.025        0.355          0.922077922
0.1    0.4   0.16          0.016        0.371          0.963636364
0.1    0.3   0.09          0.009        0.38           0.987012987
0.1    0.2   0.04          0.004        0.384          0.997402597
0.1    0.1   0.01          0.001        0.385          1

                  P(o=2/2) 0.385                
</code></pre>

<p>The last column says that, for example, the probability that <code>f</code> >= 0.5 is 92%, up from the prior assumption of 60%.</p>

<p>Suppose the prior assumptions are different. Suppose we assume P(f=0.1) is .991 (nearly certain), and all the other possibilities are almost impossible (0.001). In other words, our prior certainty is that <code>I</code> is cheap. Then we get:</p>

<pre><code>Prior                                    
P(f=x) x  P(o=2/2|f=x) P(o=2/2&amp;&amp; f=x)  P(o=2/2&amp;&amp;f &gt;= x)  P(f &gt;= x)

0.001  1    1              0.001        0.001          0.072727273
0.001  0.9  0.81           0.00081      0.00181        0.131636364
0.001  0.8  0.64           0.00064      0.00245        0.178181818
0.001  0.7  0.49           0.00049      0.00294        0.213818182
0.001  0.6  0.36           0.00036      0.0033         0.24
0.001  0.5  0.25           0.00025      0.00355        0.258181818
0.001  0.4  0.16           0.00016      0.00371        0.269818182
0.001  0.3  0.09           0.00009      0.0038         0.276363636
0.001  0.2  0.04           0.00004      0.00384        0.279272727
0.991  0.1  0.01           0.00991      0.01375        1

                  P(o=2/2) 0.01375                
</code></pre>

<p>Now it says P(f >= 0.5) is 26%, up from the prior assumption of 0.6%. So Bayes allows us to update our estimate of the probable cost of <code>I</code>. If the amount of data is small, it doesn't tell us accurately what the cost is, only that it is big enough to be worth fixing.</p>

<p>Yet another way to look at it is called the <a href=""http://en.wikipedia.org/wiki/Rule_of_succession"" rel=""noreferrer"">Rule Of Succession</a>.
If you flip a coin 2 times, and it comes up heads both times, what does that tell you about the probable weighting of the coin?
The respected way to answer is to say that it's a Beta distribution, with average value (number of hits + 1) / (number of tries + 2) = (2+1)/(2+2) = 75%.</p>

<p>(The key is that we see <code>I</code> more than once. If we only see it once, that doesn't tell us much except that <code>f</code> > 0.)</p>

<p>So, even a very small number of samples can tell us a lot about the cost of instructions that it sees. (And it will see them with a frequency, on average, proportional to their cost. If <code>n</code> samples are taken, and <code>f</code> is the cost, then <code>I</code> will appear on <code>nf+/-sqrt(nf(1-f))</code> samples. Example, <code>n=10</code>, <code>f=0.3</code>, that is <code>3+/-1.4</code> samples.)</p>

<hr>

<p>ADDED, to give an intuitive feel for the difference between measuring and random stack sampling:<br>
There are profilers now that sample the stack, even on wall-clock time, but <em>what comes out</em> is measurements (or hot path, or hot spot, from which a ""bottleneck"" can easily hide). What they don't show you (and they easily could) is the actual samples themselves. And if your goal is to <em>find</em> the bottleneck, the number of them you need to see is, <em>on average</em>, 2 divided by the fraction of time it takes.
So if it takes 30% of time, 2/.3 = 6.7 samples, on average, will show it, and the chance that 20 samples will show it is 99.2%.</p>

<p>Here is an off-the-cuff illustration of the difference between examining measurements and examining stack samples.
The bottleneck could be one big blob like this, or numerous small ones, it makes no difference.</p>

<p><a href=""https://i.stack.imgur.com/FpWuS.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/FpWuS.png"" alt=""enter image description here""></a></p>

<p>Measurement is horizontal; it tells you what fraction of time specific routines take.
Sampling is vertical.
If there is any way to avoid what the whole program is doing at that moment, <em>and if you see it on a second sample</em>, you've found the bottleneck.
That's what makes the difference - seeing the whole reason for the time being spent, not just how much.</p>
","378024"
"How to convert string to char array in C++?","384454","","<p>I would like to convert <code>string</code> to <code>char</code> array but not <code>char*</code>. I know how to convert string to <code>char*</code> (by using <code>malloc</code> or the way I posted it in my code) - but that's not what I want. I simply want to convert <code>string</code> to <code>char[size]</code> array. Is it possible?</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;stdio.h&gt;
using namespace std;

int main()
{
    // char to string
    char tab[4];
    tab[0] = 'c';
    tab[1] = 'a';
    tab[2] = 't';
    tab[3] = '\0';
    string tmp(tab);
    cout &lt;&lt; tmp &lt;&lt; ""\n"";

    // string to char* - but thats not what I want

    char *c = const_cast&lt;char*&gt;(tmp.c_str());
    cout &lt;&lt; c &lt;&lt; ""\n"";

    //string to char
    char tab2[1024];
    // ?

    return 0;
}
</code></pre>
","<p>Simplest way I can think of doing it is:</p>

<pre><code>string temp = ""cat"";
char tab2[1024];
strcpy(tab2, temp.c_str());
</code></pre>

<p>For safety, you might prefer:</p>

<pre><code>string temp = ""cat"";
char tab2[1024];
strncpy(tab2, temp.c_str(), sizeof(tab2));
tab2[sizeof(tab2) - 1] = 0;
</code></pre>
","13294114"
"Why do we need virtual functions in C++?","384314","","<p>I'm learning C++ and I'm just getting into virtual functions.</p>

<p>From what I've read (in the book and online), virtual functions are functions in the base class that you can override in derived classes.</p>

<p>But earlier in the book, when learning about basic inheritance, I was able to override base functions in derived classes without using <code>virtual</code>.</p>

<p>So what am I missing here? I know there is more to virtual functions, and it seems to be important so I want to be clear on what it is exactly. I just can't find a straight answer online.</p>
","<p>I'm a C++ newbie myself, but here is how I understood not just what virtual functions are, but why they're required:</p>

<p>Let's say you have these two classes:</p>

<pre><code>class Animal
{
    public:
        void eat() { std::cout &lt;&lt; ""I'm eating generic food.""; }
};

class Cat : public Animal
{
    public:
        void eat() { std::cout &lt;&lt; ""I'm eating a rat.""; }
};
</code></pre>

<p>In your main function:</p>

<pre><code>Animal *animal = new Animal;
Cat *cat = new Cat;

animal-&gt;eat(); // Outputs: ""I'm eating generic food.""
cat-&gt;eat();    // Outputs: ""I'm eating a rat.""
</code></pre>

<p>So far so good, right? Animals eat generic food, cats eat rats, all without <code>virtual</code>.</p>

<p>Let's change it a little now so that <code>eat()</code> is called via an intermediate function (a trivial function just for this example):</p>

<pre><code>// This can go at the top of the main.cpp file
void func(Animal *xyz) { xyz-&gt;eat(); }
</code></pre>

<p>Now our main function is:</p>

<pre><code>Animal *animal = new Animal;
Cat *cat = new Cat;

func(animal); // Outputs: ""I'm eating generic food.""
func(cat);    // Outputs: ""I'm eating generic food.""
</code></pre>

<p>Uh oh... we passed a Cat into <code>func()</code>, but it won't eat rats. Should you overload <code>func()</code> so it takes a <code>Cat*</code>? If you have to derive more animals from Animal they would all need their own <code>func()</code>.</p>

<p>The solution is to make <code>eat()</code> from the <code>Animal</code> class a virtual function:</p>

<pre><code>class Animal
{
    public:
        virtual void eat() { std::cout &lt;&lt; ""I'm eating generic food.""; }
};

class Cat : public Animal
{
    public:
        void eat() { std::cout &lt;&lt; ""I'm eating a rat.""; }
};
</code></pre>

<p>Main:</p>

<pre><code>func(animal); // Outputs: ""I'm eating generic food.""
func(cat);    // Outputs: ""I'm eating a rat.""
</code></pre>

<p>Done.</p>
","2392656"
"What is a smart pointer and when should I use one?","380226","","<p>What is a smart pointer and when should I use one?</p>
","<p>A smart pointer is a class that wraps a 'raw' (or 'bare') C++ pointer, to manage the lifetime of the object being pointed to. There is no single smart pointer type, but all of them try to abstract a raw pointer in a practical way.</p>

<p>Smart pointers should be preferred over raw pointers. If you feel you need to use pointers (first consider if you <em>really</em> do), you would normally want to use a smart pointer as this can alleviate many of the problems with raw pointers, mainly forgetting to delete the object and leaking memory.</p>

<p>With raw pointers, the programmer has to explicitly destroy the object when it is no longer useful.</p>

<pre><code>// Need to create the object to achieve some goal
MyObject* ptr = new MyObject(); 
ptr-&gt;DoSomething(); // Use the object in some way
delete ptr; // Destroy the object. Done with it.
// Wait, what if DoSomething() raises an exception...?
</code></pre>

<p>A smart pointer by comparison defines a policy as to when the object is destroyed. You still have to create the object, but you no longer have to worry about destroying it.</p>

<pre><code>SomeSmartPtr&lt;MyObject&gt; ptr(new MyObject());
ptr-&gt;DoSomething(); // Use the object in some way.

// Destruction of the object happens, depending 
// on the policy the smart pointer class uses.

// Destruction would happen even if DoSomething() 
// raises an exception
</code></pre>

<p>The simplest policy in use involves the scope of the smart pointer wrapper object, such as implemented by <a href=""http://www.boost.org/doc/libs/release/libs/smart_ptr/scoped_ptr.htm"" rel=""noreferrer""><code>boost::scoped_ptr</code></a> or <a href=""http://en.cppreference.com/w/cpp/memory/unique_ptr"" rel=""noreferrer""><code>std::unique_ptr</code></a>. </p>

<pre><code>void f()
{
    {
       boost::scoped_ptr&lt;MyObject&gt; ptr(new MyObject());
       ptr-&gt;DoSomethingUseful();
    } // boost::scopted_ptr goes out of scope -- 
      // the MyObject is automatically destroyed.

    // ptr-&gt;Oops(); // Compile error: ""ptr"" not defined
                    // since it is no longer in scope.
}
</code></pre>

<p>Note that <code>scoped_ptr</code> instances cannot be copied. This prevents the pointer from being deleted multiple times (incorrectly). You can, however, pass references to it around to other functions you call.</p>

<p>Scoped pointers are useful when you want to tie the lifetime of the object to a particular block of code, or if you embedded it as member data inside another object, the lifetime of that other object. The object exists until the containing block of code is exited, or until the containing object is itself destroyed.</p>

<p>A more complex smart pointer policy involves reference counting the pointer. This does allow the pointer to be copied. When the last ""reference"" to the object is destroyed, the object is deleted. This policy is implemented by <a href=""http://www.boost.org/doc/libs/release/libs/smart_ptr/shared_ptr.htm"" rel=""noreferrer""><code>boost::shared_ptr</code></a> and <a href=""http://en.cppreference.com/w/cpp/memory/shared_ptr"" rel=""noreferrer""><code>std::shared_ptr</code></a>.</p>

<pre><code>void f()
{
    typedef std::shared_ptr&lt;MyObject&gt; MyObjectPtr; // nice short alias
    MyObjectPtr p1; // Empty

    {
        MyObjectPtr p2(new MyObject());
        // There is now one ""reference"" to the created object
        p1 = p2; // Copy the pointer.
        // There are now two references to the object.
    } // p2 is destroyed, leaving one reference to the object.
} // p1 is destroyed, leaving a reference count of zero. 
  // The object is deleted.
</code></pre>

<p>Reference counted pointers are very useful when the lifetime of your object is much more complicated, and is not tied directly to a particular section of code or to another object.</p>

<p>There is one drawback to reference counted pointers — the possibility of creating a dangling reference:</p>

<pre><code>// Create the smart pointer on the heap
MyObjectPtr* pp = new MyObjectPtr(new MyObject())
// Hmm, we forgot to destroy the smart pointer,
// because of that, the object is never destroyed!
</code></pre>

<p>Another possibility is creating circular references:</p>

<pre><code>struct Owner {
   boost::shared_ptr&lt;Owner&gt; other;
};

boost::shared_ptr&lt;Owner&gt; p1 (new Owner());
boost::shared_ptr&lt;Owner&gt; p2 (new Owner());
p1-&gt;other = p2; // p1 references p2
p2-&gt;other = p1; // p2 references p1

// Oops, the reference count of of p1 and p2 never goes to zero!
// The objects are never destroyed!
</code></pre>

<p>To work around this problem, both Boost and C++11 have defined a <code>weak_ptr</code> to define a weak (uncounted) reference to a <code>shared_ptr</code>.</p>

<hr>

<p><strong>UPDATE</strong></p>

<p>This answer is rather old, and so describes what was 'good' at the time, which was smart pointers provided by the Boost library. Since C++11, the standard library has provided sufficient smart pointers types, and so you should favour the use of <a href=""http://en.cppreference.com/w/cpp/memory/unique_ptr"" rel=""noreferrer""><code>std::unique_ptr</code></a>, <a href=""http://en.cppreference.com/w/cpp/memory/shared_ptr"" rel=""noreferrer""><code>std::shared_ptr</code></a> and <a href=""http://en.cppreference.com/w/cpp/memory/weak_ptr"" rel=""noreferrer""><code>std::weak_ptr</code></a>. </p>

<p>There is also <a href=""http://en.cppreference.com/w/cpp/memory/auto_ptr"" rel=""noreferrer""><code>std::auto_ptr</code></a>. It is very much like a scoped pointer, except that it also has the ""special"" dangerous ability to be copied — which also unexpectedly transfers ownership! <strong>It is deprecated in the newest standards, so you shouldn't use it. Use the <a href=""http://en.cppreference.com/w/cpp/memory/unique_ptr"" rel=""noreferrer""><code>std::unique_ptr</code></a> instead.</strong></p>

<pre><code>std::auto_ptr&lt;MyObject&gt; p1 (new MyObject());
std::auto_ptr&lt;MyObject&gt; p2 = p1; // Copy and transfer ownership. 
                                 // p1 gets set to empty!
p2-&gt;DoSomething(); // Works.
p1-&gt;DoSomething(); // Oh oh. Hopefully raises some NULL pointer exception.
</code></pre>
","106614"
"How to fix undefined reference/unresolved external symbol error","376101","","<p>What are undefined reference/unresolved external symbol errors on C++ linking process? What are common causes and how to fix/prevent them?</p>

<p><sub>Feel free to edit/add your own.</sub></p>
","<p>Compiling a C++ program takes place in several steps, as specified by <strong>2.2</strong> <a href=""https://stackoverflow.com/a/8834196/673730"">(credits to Keith Thompson for the reference)</a>:</p>

<blockquote>
  <p>The precedence among the syntax rules of translation is specified by the following phases <em>[see footnote]</em>.</p>
  
  <ol>
  <li>Physical source file characters are mapped, in an implementation-defined manner, to the basic source character set
  (introducing new-line characters for end-of-line indicators) if
  necessary. <em>[SNIP]</em></li>
  <li>Each instance of a backslash character (\) immediately followed by a new-line character is deleted, splicing physical source lines to
  form logical source lines. <em>[SNIP]</em></li>
  <li>The source file is decomposed into preprocessing tokens (2.5) and sequences of white-space characters (including comments). <em>[SNIP]</em></li>
  <li>Preprocessing directives are executed, macro invocations are expanded, and _Pragma unary operator expressions are executed. <em>[SNIP]</em></li>
  <li>Each source character set member in a character literal or a string literal, as well as each escape sequence and universal-character-name
  in a character literal or a non-raw string literal, is converted to
  the corresponding member of the execution character set; <em>[SNIP]</em></li>
  <li>Adjacent string literal tokens are concatenated.</li>
  <li>White-space characters separating tokens are no longer significant. Each preprocessing token is converted into a token. (2.7). The
  resulting tokens are syntactically and semantically analyzed and
  translated as a translation unit. <em>[SNIP]</em></li>
  <li>Translated translation units and instantiation units are combined as follows: <em>[SNIP]</em></li>
  <li><strong>All external entity references are resolved. Library components are linked to satisfy external references to entities not defined in the
  current translation. All such translator output is collected into a
  program image which contains information needed for execution in its
  execution environment.</strong> (emphasis mine)</li>
  </ol>
  
  <p><em>[footnote]</em> Implementations must behave as if these separate phases occur, although in practice different phases might be folded together.</p>
</blockquote>

<p>The specified errors occur during this last stage of compilation, most commonly referred to as linking. It basically means that you compiled a bunch of implementation files into object files or libraries and now you want to get them to work together.</p>

<p>Say you defined symbol <code>a</code> in <code>a.cpp</code>. Now, <code>b.cpp</code> <em>declared</em> that symbol and used it. Before linking, it simply assumes that that symbol was defined <em>somewhere</em>, but it doesn't yet care where. The linking phase is responsible for finding the symbol and correctly linking it to <code>b.cpp</code> (well, actually to the object or library that uses it).</p>

<p>If you're using Microsoft Visual Studio, you'll see that projects generate <code>.lib</code> files. These contain a table of exported symbols, and a table of imported symbols. The imported symbols are resolved against the libraries you link against, and the exported symbols are provided for the libraries that use that <code>.lib</code> (if any).</p>

<p>Similar mechanisms exist for other compilers/ platforms.</p>

<p>Common error messages are <code>error LNK2001</code>, <code>error LNK1120</code>, <code>error LNK2019</code> for <strong>Microsoft Visual Studio</strong> and <code>undefined reference to</code> <em>symbolName</em> for <strong>GCC</strong>.</p>

<p>The code:</p>

<pre><code>struct X
{
   virtual void foo();
};
struct Y : X
{
   void foo() {}
};
struct A
{
   virtual ~A() = 0;
};
struct B: A
{
   virtual ~B(){}
};
extern int x;
void foo();
int main()
{
   x = 0;
   foo();
   Y y;
   B b;
}
</code></pre>

<p>will generate the following errors with <strong>GCC</strong>:</p>

<pre><code>/home/AbiSfw/ccvvuHoX.o: In function `main':
prog.cpp:(.text+0x10): undefined reference to `x'
prog.cpp:(.text+0x19): undefined reference to `foo()'
prog.cpp:(.text+0x2d): undefined reference to `A::~A()'
/home/AbiSfw/ccvvuHoX.o: In function `B::~B()':
prog.cpp:(.text._ZN1BD1Ev[B::~B()]+0xb): undefined reference to `A::~A()'
/home/AbiSfw/ccvvuHoX.o: In function `B::~B()':
prog.cpp:(.text._ZN1BD0Ev[B::~B()]+0x12): undefined reference to `A::~A()'
/home/AbiSfw/ccvvuHoX.o:(.rodata._ZTI1Y[typeinfo for Y]+0x8): undefined reference to `typeinfo for X'
/home/AbiSfw/ccvvuHoX.o:(.rodata._ZTI1B[typeinfo for B]+0x8): undefined reference to `typeinfo for A'
collect2: ld returned 1 exit status
</code></pre>

<p>and similar errors with <strong>Microsoft Visual Studio</strong>:</p>

<pre><code>1&gt;test2.obj : error LNK2001: unresolved external symbol ""void __cdecl foo(void)"" (?foo@@YAXXZ)
1&gt;test2.obj : error LNK2001: unresolved external symbol ""int x"" (?x@@3HA)
1&gt;test2.obj : error LNK2001: unresolved external symbol ""public: virtual __thiscall A::~A(void)"" (??1A@@UAE@XZ)
1&gt;test2.obj : error LNK2001: unresolved external symbol ""public: virtual void __thiscall X::foo(void)"" (?foo@X@@UAEXXZ)
1&gt;...\test2.exe : fatal error LNK1120: 4 unresolved externals
</code></pre>

<p>Common causes include:</p>

<ul>
<li><a href=""https://stackoverflow.com/a/12574400/673730"">Failure to link against appropriate libraries/object files or compile implementation files</a></li>
<li><a href=""https://stackoverflow.com/a/12574403/673730"">Declared and undefined variable or function.</a></li>
<li><a href=""https://stackoverflow.com/a/12574407/673730"">Common issues with class-type members</a></li>
<li><a href=""https://stackoverflow.com/a/12574417/673730"">Template implementations not visible.</a></li>
<li><a href=""https://stackoverflow.com/a/12574420/673730"">Symbols were defined in a C program and used in C++ code.</a></li>
<li><a href=""https://stackoverflow.com/a/12574423/673730"">Incorrectly importing/exporting methods/classes across modules/dll. (MSVS specific)</a></li>
<li><a href=""https://stackoverflow.com/a/20358542/673730"">Circular library dependency</a></li>
<li><a href=""https://stackoverflow.com/questions/5259714/undefined-reference-to-winmain16/5260237#5260237"">undefined reference to `WinMain@16'</a></li>
<li><a href=""https://stackoverflow.com/a/24675715/1356926"">Interdependent library order</a></li>
<li><a href=""https://stackoverflow.com/questions/14364362/visualstudio-project-with-multiple-sourcefiles-of-the-same-name"">Multiple source files of the same name</a></li>
<li><a href=""https://stackoverflow.com/a/25744263/3747990"">Mistyping or not including the .lib extension when using the <code>#pragma</code> (Microsoft Visual Studio)</a></li>
<li><a href=""https://stackoverflow.com/a/35891188/3747990"">Problems with template friends</a></li>
<li><a href=""https://stackoverflow.com/a/36475406/3747990"">Inconsistent <code>UNICODE</code> definitions</a></li>
</ul>
","12573818"
"Fastest way to check if a file exist using standard C++/C++11/C?","367642","","<p>I would like to find the fastest way to check if a file exist in standard C++11, C++, or C. I have thousands of files and before doing something on them I need to check if all of them exist. What can I write instead of <code>/* SOMETHING */</code> in the following function?  </p>

<pre><code>inline bool exist(const std::string&amp; name)
{
    /* SOMETHING */
}
</code></pre>
","<p>Well I threw together a test program that ran each of these methods 100,000 times, half on files that existed and half on files that didn't.</p>

<pre><code>#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string&gt;

inline bool exists_test0 (const std::string&amp; name) {
    ifstream f(name.c_str());
    return f.good();
}

inline bool exists_test1 (const std::string&amp; name) {
    if (FILE *file = fopen(name.c_str(), ""r"")) {
        fclose(file);
        return true;
    } else {
        return false;
    }   
}

inline bool exists_test2 (const std::string&amp; name) {
    return ( access( name.c_str(), F_OK ) != -1 );
}

inline bool exists_test3 (const std::string&amp; name) {
  struct stat buffer;   
  return (stat (name.c_str(), &amp;buffer) == 0); 
}
</code></pre>

<p>Results for total time to run the 100,000 calls averaged over 5 runs,</p>

<pre><code>Method exists_test0 (ifstream): **0.485s**
Method exists_test1 (FILE fopen): **0.302s**
Method exists_test2 (posix access()): **0.202s**
Method exists_test3 (posix stat()): **0.134s**
</code></pre>

<p>The stat() function provided the best performance on my system (Linux, compiled with g++), with a standard fopen call being your best bet if you for some reason refuse to use POSIX functions. </p>
","12774387"
"How to get rid of `deprecated conversion from string constant to ‘char*’` warnings in GCC?","366791","","<p>So I'm working on an exceedingly large codebase, and recently upgraded to gcc 4.3, which now triggers this warning:</p>

<blockquote>
  <p>warning: deprecated conversion from string constant to ‘char*’</p>
</blockquote>

<p>Obviously, the correct way to fix this is to find every declaration like</p>

<pre><code>char *s = ""constant string"";
</code></pre>

<p>or function call like:</p>

<pre><code>void foo(char *s);
foo(""constant string"");
</code></pre>

<p>and make them <code>const char</code> pointers.  However, that would mean touching 564 files, minimum, which is not a task I wish to perform at this point in time.  The problem right now is that I'm running with <code>-werror</code>, so I need some way to stifle these warnings.  How can I do that?</p>
","<p>I believe passing <code>-Wno-write-strings</code> to gcc will suppress this warning.</p>
","59687"
"Initializing private static members","366460","","<p>What is the best way to initialize a private, static data member in C++?  I tried this in my header file, but it gives me weird linker errors:</p>

<pre><code>class foo
{
    private:
        static int i;
};

int foo::i = 0;
</code></pre>

<p>I'm guessing this is because I can't initialize a private member from outside the class.  So what's the best way to do this?</p>
","<p>The class declaration should be in the header file (Or in the source file if not shared).<br>
File: foo.h</p>

<pre><code>class foo
{
    private:
        static int i;
};
</code></pre>

<p>But the initialization should be in source file.<br>
File: foo.cpp</p>

<pre><code>int foo::i = 0;
</code></pre>

<p>If the initialization is in the header file then each file that includes the header file will have a definition of the static member. Thus during the link phase you will get linker errors as the code to initialize the variable will be defined in multiple source files.</p>

<p><b>Note:</b> Matt Curtis: points out that C++ allows the simplification of the above if the static member variable is of const int type (e.g. <code>int</code>, <code>bool</code>, <code>char</code>). You can then declare and initialize the member variable directly inside the class declaration in the header file:</p>

<pre><code>class foo
{
    private:
        static int const i = 42;
};
</code></pre>
","185848"
"What does ""dereferencing"" a pointer mean?","357660","","<p>Please include an example with the explanation.</p>
","<h2>Reviewing the basic terminology</h2>

<p>It's <em>usually</em> good enough - unless you're programming assembly - to envisage a <strong><em>pointer</em></strong> containing a numeric memory address, with 1 referring to the second byte in the process's memory, 2 the third, 3 the fourth and so on....</p>

<ul>
<li>What happened to 0 and the first byte?  Well, we'll get to that later - see <em>null pointers</em> below.</li>
<li>For a more accurate definition of what pointers store, and how memory and addresses relate, see <em>""More about memory addresses, and why you probably don't need to know""</em>.</li>
</ul>

<p>When you want to access the data/value in the memory that the pointer points to - the contents of the address with that numerical index - then you <strong><em>dereference</em></strong> the pointer.</p>

<p>Different computer languages have different notations to tell the compiler or interpreter that you're now interested in the pointed-to value - I focus below on C and C++.</p>

<h2>A pointer scenario</h2>

<p>Consider in C, given a pointer such as <code>p</code> below...</p>

<pre><code>const char* p = ""abc"";
</code></pre>

<p>...four bytes with the numerical values used to encode the letters 'a', 'b', 'c', and a 0 byte to denote the end of the textual data, are stored somewhere in memory and the numerical address of that data is stored in <code>p</code>.</p>

<p>For example, if the string literal happened to be at address 0x1000 and <code>p</code> a 32-bit pointer at 0x2000, the memory content would be:</p>

<pre><code>Memory Address (hex)    Variable name    Contents
1000                                     'a' == 97 (ASCII)
1001                                     'b' == 98
1002                                     'c' == 99
1003                                     0
...
2000-2003               p                1000 hex
</code></pre>

<p>Note that there is no variable name/identifier for address 0x1000, but we can indirectly refer to the string literal using a pointer storing its address: <code>p</code>.</p>

<h2>Dereferencing the pointer</h2>

<p>To refer to the characters <code>p</code> points to, we dereference <code>p</code> using one of these notations (again, for C):</p>

<pre><code>assert(*p == 'a');  // The first character at address p will be 'a'
assert(p[1] == 'b'); // p[1] actually dereferences a pointer created by adding
                     // p and 1 times the size of the things to which p points:
                     // In this case they're char which are 1 byte in C...
assert(*(p + 1) == 'b');  // Another notation for p[1]
</code></pre>

<p>You can also move pointers through the pointed-to data, dereferencing them as you go:</p>

<pre><code>++p;  // Increment p so it's now 0x1001
assert(*p == 'b');  // p == 0x1001 which is where the 'b' is...
</code></pre>

<p>If you have some data that can be written to, then you can do things like this:</p>

<pre><code>int x = 2;
int* p_x = &amp;x;  // Put the address of the x variable into the pointer p_x
*p_x = 4;       // Change the memory at the address in p_x to be 4
assert(x == 4); // Check x is now 4
</code></pre>

<p>Above, you must have known at compile time that you would need a variable called <code>x</code>, and the code asks the compiler to arrange where it should be stored, ensuring the address will be available via <code>&amp;x</code>.</p>

<h2>Dereferencing and accessing a structure data member</h2>

<p>In C, if you have a variable that is a pointer to a structure with data members, you can access those members using the <code>-&gt;</code> dereferencing operator:</p>

<pre><code>typedef struct X { int i_; double d_; } X;
X x;
X* p = &amp;x;
p-&gt;d_ = 3.14159;  // Dereference and access data member x.d_
(*p).d_ *= -1;    // Another equivalent notation for accessing x.d_
</code></pre>

<h2>Multi-byte data types</h2>

<p>To use a pointer, a computer program also needs some insight into the type of data that is being pointed at - if that data type needs more than one byte to represent, then the pointer normally points to the lowest-numbered byte in the data.</p>

<p>So, looking at a slightly more complex example:</p>

<pre><code>double sizes[] = { 10.3, 13.4, 11.2, 19.4 };
double* p = sizes;
assert(p[0] == 10.3);  // Knows to look at all the bytes in the first double value
assert(p[1] == 13.4);  // Actually looks at bytes from address p + 1 * sizeof(double)
                       // (sizeof(double) is almost always eight bytes)
assert(++p);           // Advance p by sizeof(double)
assert(*p == 13.4);    // The double at memory beginning at address p has value 13.4
*(p + 2) = 29.8;       // Change sizes[3] from 19.4 to 29.8
                       // Note: earlier ++p and + 2 here =&gt; sizes[3]
</code></pre>

<h2>Pointers to dynamically allocated memory</h2>

<p>Sometimes you don't know how much memory you'll need until your program is running and sees what data is thrown at it... then you can dynamically allocate memory using <code>malloc</code>. It is common practice to store the address in a pointer...</p>

<pre><code>int* p = malloc(sizeof(int)); // Get some memory somewhere...
*p = 10;            // Dereference the pointer to the memory, then write a value in
fn(*p);             // Call a function, passing it the value at address p
(*p) += 3;          // Change the value, adding 3 to it
free(p);            // Release the memory back to the heap allocation library
</code></pre>

<p>In C++, memory allocation is normally done with the <code>new</code> operator, and deallocation with <code>delete</code>:</p>

<pre><code>int* p = new int(10); // Memory for one int with initial value 10
delete p;

p = new int[10];      // Memory for ten ints with unspecified initial value
delete[] p;

p = new int[10]();    // Memory for ten ints that are value initialised (to 0)
delete[] p;
</code></pre>

<p>See also <em>C++ smart pointers</em> below.</p>

<h2>Losing and leaking addresses</h2>

<p>Often a pointer may be the only indication of where some data or buffer exists in memory. If ongoing use of that data/buffer is needed, or the ability to call <code>free()</code> or <code>delete</code> to avoid leaking the memory, then the programmer must operate on a copy of the pointer...</p>

<pre><code>const char* p = asprintf(""name: %s"", name);  // Common but non-Standard printf-on-heap

// Replace non-printable characters with underscores....
for (const char* q = p; *q; ++q)
    if (!isprint(*q))
        *q = '_';

printf(""%s\n"", p); // Only q was modified
free(p);
</code></pre>

<p>...or carefully orchestrate reversal of any changes...</p>

<pre><code>const size_t n = ...;
p += n;
...
p -= n;  // Restore earlier value...
</code></pre>

<h2>C++ smart pointers</h2>

<p>In C++, it's best practice to use <a href=""http://en.wikipedia.org/wiki/Smart_pointer"" rel=""noreferrer"">smart pointer</a> objects to store and manage the pointers, automatically deallocating them when the smart pointers' destructors run. Since C++11 the Standard Library provides two, <a href=""http://en.cppreference.com/w/cpp/memory/unique_ptr"" rel=""noreferrer""><code>unique_ptr</code></a> for when there's a single owner for an allocated object...</p>

<pre><code>{
    std::unique_ptr&lt;T&gt; p{new T(42, ""meaning"")};
    call_a_function(p);
    // The function above might throw, so delete here is unreliable, but...
} // p's destructor's guaranteed to run ""here"", calling delete
</code></pre>

<p>...and <a href=""http://en.cppreference.com/w/cpp/memory/shared_ptr"" rel=""noreferrer""><code>shared_ptr</code></a> for share ownership (using <a href=""http://en.wikipedia.org/wiki/Reference_counting"" rel=""noreferrer"">reference counting</a>)...</p>

<pre><code>{
    std::shared_ptr&lt;T&gt; p(new T(3.14, ""pi""));
    number_storage.may_add(p); // Might copy p into its container
} // p's destructor will only delete the T if number_storage didn't copy
</code></pre>

<h2>Null pointers</h2>

<p>In C, <code>NULL</code> and <code>0</code> - and additionally in C++ <code>nullptr</code> - can be used to indicate that a pointer doesn't currently hold the memory address of a variable, and shouldn't be dereferenced or used in pointer arithmetic. For example:</p>

<pre><code>const char* p_filename = NULL; // Or ""= 0"", or ""= nullptr"" in C++
char c;
while ((c = getopt(argc, argv, ""f:"")) != EOF)
    switch (c) {
      case f: p_filename = optarg; break;
    }
if (p_filename)  // Only NULL converts to false
    ...   // Only get here if -f flag specified
</code></pre>

<p>In C and C++, just as inbuilt numeric types don't necessarily default to <code>0</code>, nor <code>bools</code> to <code>false</code>, pointers are not always set to <code>NULL</code>. All these are set to 0/false/NULL when they're <code>static</code> variables or (C++ only) direct or indirect member variables of static objects or their bases, or undergo zero initialisation (e.g. <code>new T();</code> and <code>new T(x, y, z);</code> perform zero-initialisation on T's members including pointers, whereas <code>new T;</code> does not).</p>

<p>Further, when you assign <code>0</code>, <code>NULL</code> and <code>nullptr</code> to a pointer the bits in the pointer are not necessarily all reset: the pointer may not contain ""0"" at the hardware level, or refer to address 0 in your virtual address space. The compiler is allowed to store something else there if it has reason to, but whatever it does - if you come along and compare the pointer to <code>0</code>, <code>NULL</code>, <code>nullptr</code> or another pointer that was assigned any of those, the comparison must work as expected. So, below the source code at the compiler level, ""NULL"" is potentially a bit ""magical"" in the C and C++ languages...</p>

<h2>More about memory addresses, and why you probably don't need to know</h2>

<p>More strictly, initialised pointers store a bit-pattern identifying either <code>NULL</code> or a (often <a href=""http://en.wikipedia.org/wiki/Virtual_address_space"" rel=""noreferrer"">virtual</a>) memory address.</p>

<p>The simple case is where this is a numeric offset into the process's entire virtual address space; in more complex cases the pointer may be relative to some specific memory area, which the CPU may select based on CPU ""segment"" registers or some manner of segment id encoded in the bit-pattern, and/or looking in different places depending on the machine code instructions using the address.</p>

<p>For example, an <code>int*</code> properly initialised to point to a <code>int</code> variable might - after casting to a <code>float*</code> - access a value in ""GPU"" memory quite distinct from the <code>int</code> variable, then once cast to a function pointer might refer to distinct memory holding the machine opcodes for the function.</p>

<p>3GL programming languages like C and C++ tend to hide this complexity, such that:</p>

<ul>
<li><p>If the compiler gives you a pointer to a variable or function, you can dereference it freely (as long as the variable's not destructed/deallocated meanwhile) and it's the compiler's problem whether e.g. a particular CPU register needs to be restored beforehand, or a distinct machine code instruction used</p></li>
<li><p>If you get a pointer to an element in an array, you can use pointer arithmetic to move anywhere else in the array, or even to form an address one-past-the-end of the array that's legal to compare with other pointers to elements in the array (or that have similarly been moved by pointer arithmetic to the same one-past-the-end value); again in C and C++, it's up to the compiler to ensure this ""just works""</p></li>
<li><p>Specific OS functions for e.g. shared memory mapping may give you pointers, and they'll ""just work"" within the range of addresses that makes sense for them</p></li>
<li><p>Attempts to move legal pointers beyond these boundaries, or to cast arbitrary numbers to pointers, or use pointers cast to unrelated types, typically have <a href=""http://en.wikipedia.org/wiki/Undefined_behavior"" rel=""noreferrer""><em>undefined behaviour</em></a>, so should be avoided in higher level libraries and applications, but code for OSes, device drivers, etc. may need to rely on behaviour left undefined by C or C++, that is never-the-less well defined by their specific hardware.</p></li>
</ul>
","4955297"
"Convert a String In C++ To Upper Case","356552","","<p>How could one convert a string to upper case. The examples I have found from googling only have to deal with chars.</p>
","<p>Boost string algorithms:</p>

<pre><code>#include &lt;boost/algorithm/string.hpp&gt;
#include &lt;string&gt;

std::string str = ""Hello World"";

boost::to_upper(str);

std::string newstr = boost::to_upper_copy&lt;std::string&gt;(""Hello World"");
</code></pre>
","735241"
"Case-insensitive string comparison in C++","355737","","<p>What is the best way of doing case-insensitive string comparison in C++ without transforming a string to all uppercase or all lowercase?</p>

<p>Please indicate whether the methods are Unicode-friendly and how portable they are.</p>
","<p>Boost includes a handy algorithm for this:</p>

<pre><code>#include &lt;boost/algorithm/string.hpp&gt;
// Or, for fewer header dependencies:
//#include &lt;boost/algorithm/string/predicate.hpp&gt;

std::string str1 = ""hello, world!"";
std::string str2 = ""HELLO, WORLD!"";

if (boost::iequals(str1, str2))
{
    // Strings are identical
}
</code></pre>
","315463"
"convert a char* to std::string","352198","","<p>I need to use <code>std::string</code> to store data retrieved by <code>fgets()</code>. To do this I need to convert <code>fgets() char*</code> output into an <code>std::string</code> to store in an array. How can this be done?</p>
","<p><code>std::string</code> has a constructor for this:</p>

<pre><code>const char *s = ""Hello, World!"";
std::string str(s);
</code></pre>

<p>Just make sure that your <code>char *</code> isn't <code>NULL</code>, or else the behavior is undefined.</p>
","1195690"
"C++ performance vs. Java/C#","351795","","<p>My understanding is that C/C++ produces native code to run on a particular machine architecture.  Conversely, languages like Java and C# run on top of a virtual machine which abstracts away the native architecture.  Logically it would seem impossible for Java or C# to match the speed of C++ because of this intermediate step, however I've been told that the latest compilers (""hot spot"") can attain this speed or even exceed it.</p>

<p>Perhaps this is more of a compiler question than a language question, but can anyone explain in plain English how it is possible for one of these virtual machine languages to perform better than a native language?</p>
","<p>Generally, C# and Java can be just as fast or faster because the JIT compiler -- a compiler that compiles your IL the first time it's executed -- can make optimizations that a C++ compiled program cannot because it can query the machine. It can determine if the machine is Intel or AMD; Pentium 4, Core Solo, or Core Duo; or if supports SSE4, etc.</p>

<p>A C++ program has to be compiled beforehand usually with mixed optimizations so that it runs decently well on all machines, but is not optimized as much as it could be for a single configuration (i.e. processor, instruction set, other hardware).</p>

<p>Additionally certain language features allow the compiler in C# and Java to make assumptions about your code that allows it to optimize certain parts away that just aren't safe for the C/C++ compiler to do. When you have access to pointers there's a lot of optimizations that just aren't safe.</p>

<p>Also Java and C# can do heap allocations more efficiently than C++ because the layer of abstraction between the garbage collector and your code allows it to do all of its heap compression at once (a fairly expensive operation).</p>

<p>Now I can't speak for Java on this next point, but I know that C# for example will actually remove methods and method calls when it knows the body of the method is empty. And it will use this kind of logic throughout your code.</p>

<p>So as you can see, there are lots of reasons why certain C# or Java implementations will be faster.</p>

<p>Now this all said, specific optimizations can be made in C++ that will blow away anything that you could do with C#, especially in the graphics realm and anytime you're close to the hardware. Pointers do wonders here.</p>

<p>So depending on what you're writing I would go with one or the other. But if you're writing something that isn't hardware dependent (driver, video game, etc), I wouldn't worry about the performance of C# (again can't speak about Java). It'll do just fine.</p>

<p>One the Java side, <a href=""https://stackoverflow.com/users/12682/swati"">@Swati</a> points out a good article:</p>

<p><a href=""https://www.ibm.com/developerworks/library/j-jtp09275/"" rel=""nofollow noreferrer"">https://www.ibm.com/developerworks/library/j-jtp09275</a></p>
","145122"
"C++ Functors - and their uses","348728","","<p>I keep hearing a lot about functors in C++. Can someone give me an overview as to what they are and in what cases they would be useful?</p>
","<p>A functor is pretty much just a class which defines the operator(). That lets you create objects which ""look like"" a function:</p>

<pre><code>// this is a functor
struct add_x {
  add_x(int x) : x(x) {}
  int operator()(int y) const { return x + y; }

private:
  int x;
};

// Now you can use it like this:
add_x add42(42); // create an instance of the functor class
int i = add42(8); // and ""call"" it
assert(i == 50); // and it added 42 to its argument

std::vector&lt;int&gt; in; // assume this contains a bunch of values)
std::vector&lt;int&gt; out(in.size());
// Pass a functor to std::transform, which calls the functor on every element 
// in the input sequence, and stores the result to the output sequence
std::transform(in.begin(), in.end(), out.begin(), add_x(1)); 
assert(out[i] == in[i] + 1); // for all i
</code></pre>

<p>There are a couple of nice things about functors. One is that unlike regular functions, they can contain state. The above example creates a function which adds 42 to whatever you give it. But that value 42 is not hardcoded, it was specified as a constructor argument when we created our functor instance. I could create another adder, which added 27, just by calling the constructor with a different value. This makes them nicely customizable.</p>

<p>As the last lines show, you often pass functors as arguments to other functions such as std::transform or the other standard library algorithms. You could do the same with a regular function pointer except, as I said above, functors can be ""customized"" because they contain state, making them more flexible (If I wanted to use a function pointer, I'd have to write a function which added exactly 1 to its argument. The functor is general, and adds whatever you initialized it with), and they are also potentially more efficient. In the above example, the compiler knows exactly which function <code>std::transform</code> should call. It should call <code>add_x::operator()</code>. That means it can inline that function call. And that makes it just as efficient as if I had manually called the function on each value of the vector.</p>

<p>If I had passed a function pointer instead, the compiler couldn't immediately see which function it points to, so unless it performs some fairly complex global optimizations, it'd have to dereference the pointer at runtime, and then make the call.</p>
","356993"
"Unresolved external symbol in object files","347915","","<p>During coding in Visual Studio I got an unresolved external symbol error
and I've got no idea what to do. I don't know what's wrong.
Could you please decipher me? Where should I be looking for what kind of errors?</p>

<pre><code>1&gt;Form.obj : error LNK2019: unresolved external symbol ""public: class Field * __thiscall Field::addField(class Field *)"" (?addField@Field@@QAEPAV1@PAV1@@Z) referenced in function ""public: void __thiscall Form::parse(class std::basic_stringstream&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; &amp;)"" (?parse@Form@@QAEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z)
1&gt;Form.obj : error LNK2019: unresolved external symbol ""public: virtual void __thiscall Field::parse(class std::basic_stringstream&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; &amp;)"" (?parse@Field@@UAEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z) referenced in function ""public: __thiscall InputField::InputField(class std::basic_stringstream&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; &amp;)"" (??0InputField@@QAE@AAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z)
1&gt;Form.obj : error LNK2001: unresolved external symbol ""public: virtual void __thiscall Field::prompt(void)"" (?prompt@Field@@UAEXXZ)
1&gt;Form.obj : error LNK2001: unresolved external symbol ""public: virtual class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; __thiscall Field::getName(void)"" (?getName@Field@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ)
1&gt;Form.obj : error LNK2001: unresolved external symbol ""public: virtual class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; __thiscall Field::getType(void)"" (?getType@Field@@UAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ)
1&gt;Form.obj : error LNK2001: unresolved external symbol ""public: virtual void __thiscall Field::describe(void)"" (?describe@Field@@UAEXXZ)
1&gt;C:\Users\tomy\Documents\Visual Studio 2010\Projects\zapoctovkac++\Debug\zapoctovkac++.exe : fatal error LNK1120: 6 unresolved externals
</code></pre>
","<p>This error often means that some function has a declaration, but not a definition.</p>

<p>Example:</p>

<pre><code>// A.hpp
class A
{
public:
  void myFunc(); // Function declaration
};

// A.cpp

// Function definition
void A::myFunc()
{
  // do stuff
}
</code></pre>

<p><strong>In your case, the definition cannot be found.</strong> The issue could be that you are including a header file, which brings in some function declarations, but you either:</p>

<ol>
<li>do not define the functions in your cpp file (if you wrote this code yourself)</li>
<li>do not include the lib/dll file that contains the definitions </li>
</ol>

<p>A common mistake is that you define a function as a standalone and forget the class selector, e.g. <code>A::</code>, in your <em>.cpp</em> file:</p>

<p><strong>Wrong:</strong> <code>void myFunc() { /* do stuff */ }</code>
<br><strong>Right:</strong> <code>void A::myFunc() { /* do stuff */ }</code></p>
","9928586"
"How popular is C++ for making websites/web applications?","345503","","<p>I don't know why this question is bugging me, but time after time I come back to the thought - why not make websites in C++? So far I know of none (except a rumor about Yahoo). Most use PHP, Java or ASP.NET. Some are built on Ruby or Python, but even those are minorities.</p>

<p>At the same time, looking at StackOverflow, it seems that C++ is still a very popular language with many projects written in it. Why not for webpages?</p>

<p>So - what do you know about this subject? Are there any websites written in C++? Are there any frameworks/libraries that help doing this? Have YOU ever done it? If yes, did you run into any fundamental problems and would you recommend this to others?</p>
","<p>I am primarily a C++ programmer, so I don't intend it as a slam on C++ when I say C# and Java are much more modern languages, better suited for 99% of application development you want to do.  The downside of C#/Java/etc. is that the users need big bulky runtimes installed on their PCs, and if your users don't have them then they will have to install them.  So it is usually better to write consumer apps in C++, where there will be few dependencies and Grandma won't have to figure out how to install .NET framework 3.0.</p>

<p>For web applications, your user will just be using a web browser so you can write in whatever language platform you want.  So why not write in a modern, better language?</p>

<p>(again, before C++ programmers jump all over me, let me say that I have been a primarily C++ programmer for 15+ years.  It'd be silly to ignore that modern languages are far easier and better for most application development.)</p>
","417904"
"What is meant with ""const"" at end of function declaration?","339272","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/751681/meaning-of-const-last-in-a-c-method-declaration"">Meaning of &ldquo;const&rdquo; last in a C++ method declaration?</a>  </p>
</blockquote>



<p>Hi
I got a book, where there is written something like:</p>

<pre><code>class Foo 
{
public:
    int Bar(int random_arg) const
    {
        // code
    }
};
</code></pre>

<p>Also, a by-the-way question: why should/shouldn't I use <code>const</code> before argument declarations? What does that change ?</p>

<pre><code>int Foo (const int Bar) { /* code */ }
</code></pre>

<p><em>EDIT:</em>
So if I do now:</p>

<pre><code>Foo v1, v2;
</code></pre>

<p>Will the (const-tagged) Bar function exist 3 times or 1 time in memory?</p>
","<p>A ""const function"", denoted with the keyword <code>const</code> after a function declaration, makes it a compiler error for this class function to change a member variable of the class.  However, reading of a class variables is ok inside of the function, but writing inside of this function will generate a compiler error.  </p>

<p>Another way of thinking about such ""const function"" is by viewing an class function as a normal function taking an implicit <code>this</code> pointer. So a method <code>int Foo::Bar(int random_arg)</code> (without the const at the end) results in a function like <code>int Foo_Bar(Foo* this, int random_arg)</code>, and a call such as <code>Foo f; f.Bar(4)</code> will internally correspond to something like <code>Foo f; Foo_Bar(&amp;f, 4)</code>. Now adding the const at the end (<code>int Foo::Bar(int random_arg) const</code>) can then be understood as a declaration with a const this pointer: <code>int Foo_Bar(const Foo* this, int random_arg)</code>. Since the type of <code>this</code> in such case is const, no modifications of member variables are possible.</p>

<p>It is possible to loosen the ""const function"" restriction of not allowing the function to write to any variable of a class. To allow some of the variables to be writable even when the function is marked as a ""const function"", these class variables are marked with the keyword <code>mutable</code>.  Thus, if a class variable is marked as mutable, and a ""const function"" writes to this variable then the code will compile cleanly and the variable is possible to change. (C++11)</p>

<p>As usual when dealing with the <code>const</code> keyword, changing the location of the const key word in a C++ statement has entirely different meanings.  The above usage of <code>const</code> only apply when adding <code>const</code> to the end of the function declaration after the parenthesis.  <code>const</code> is a highly overused qualifier in C++ and the syntax and ordering is often not straightforward in combination with pointers. Some readings about <code>const</code> correctness and the <code>const</code> keyword:</p>

<p><a href=""http://en.wikipedia.org/wiki/Const-correctness"" rel=""noreferrer"">Const correctness</a></p>

<p><a href=""http://duramecho.com/ComputerInformation/WhyHowCppConst.html"" rel=""noreferrer"">The C++ 'const' Declaration: Why &amp; How</a></p>
","3141107"
"How to declare an array of strings in C++?","338216","","<p>I am trying to iterate over all the elements of a static array of strings in the best possible way. I want to be able to declare it on one line and easily add/remove elements from it without having to keep track of the number. Sounds really simple, doesn't it?</p>

<p>Possible non-solutions:</p>

<pre><code>vector&lt;string&gt; v;
v.push_back(""abc"");
b.push_back(""xyz"");

for(int i = 0; i &lt; v.size(); i++)
    cout &lt;&lt; v[i] &lt;&lt; endl;
</code></pre>

<p>Problems - no way to create the vector on one line with a list of strings</p>

<p>Possible non-solution 2:</p>

<pre><code>string list[] = {""abc"", ""xyz""};
</code></pre>

<p>Problems - no way to get the number of strings automatically (that I know of).</p>

<p>There must be an easy way of doing this.</p>
","<p>The <a href=""http://www.boost.org/doc/libs/1_36_0/libs/assign/doc/index.html"" rel=""noreferrer"">boost assign library</a> seems to be exactly what you are looking for.  It makes assigning constants to containers easier than ever.</p>
","34995"
"How to stop C++ console application from exiting immediately?","338090","","<p>Lately, I've been trying to learn C++ from <a href=""http://www.cplusplus.com/doc/tutorial/"" rel=""noreferrer"">this website</a>. Unfortunately whenever I try to run one of the code samples, I see that program open for about a half second and then immediately close. Is there a way to stop the program from closing immediately so that I can see the fruits of my effort?</p>
","<p><strong>Edit:</strong>  As Charles Bailey rightly points out in a comment below, this won't work if there are characters buffered in <code>stdin</code>, and there's really no good way to work around that.  If you're running with a debugger attached, <a href=""https://stackoverflow.com/questions/2529617/how-to-stop-c-console-application-from-exiting-immediately/2529936#2529936"">John Dibling's suggested solution</a> is probably the cleanest solution to your problem.</p>

<p>That said, I'll leave this here and maybe someone else will find it useful.  I've used it a lot as a quick hack of sorts when writing tests during development.</p>

<hr>

<p>At the end of your <code>main</code> function, you can call <a href=""http://en.cppreference.com/w/cpp/io/c/getchar"" rel=""noreferrer""><code>std::getchar();</code></a></p>

<p>This will get a single character from <code>stdin</code>, thus giving you the ""press any key to continue"" sort of behavior (if you actually want a ""press any key"" message, you'll have to print one yourself).</p>

<p>You need to <code>#include &lt;cstdio&gt;</code> for <code>getchar</code>.</p>
","2529625"
"Can I call a constructor from another constructor (do constructor chaining) in C++?","336297","","<p>As a <a href=""http://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29"" rel=""noreferrer"">C#</a> developer I'm used to run through constructors:</p>



<pre class=""lang-cs prettyprint-override""><code>class Test {
    public Test() {
        DoSomething();
    }

    public Test(int count) : this() {
        DoSomethingWithCount(count);
    }

    public Test(int count, string name) : this(count) {
        DoSomethingWithName(name);
    }
}
</code></pre>

<p>Is there a way to do this in C++?</p>

<p>I tried calling the Class name and using the 'this' keyword, but both fails.</p>
","<p><strong>C++11: Yes!</strong></p>

<p>C++11 and onwards has this same feature (called <a href=""https://secure.wikimedia.org/wikipedia/en/wiki/C++11#Object_construction_improvement"" rel=""noreferrer"">delegating constructors</a>). </p>

<p>The syntax is slightly different from C#:</p>

<pre><code>class Foo {
public: 
  Foo(char x, int y) {}
  Foo(int y) : Foo('a', y) {}
};
</code></pre>

<p><strong>C++03: No</strong></p>

<p>Unfortunately there's no way to do this in C++03, but there are two ways of simulating this:</p>

<ol>
<li><p>You can combine two (or more) constructors via default parameters:</p>

<pre><code>class Foo {
 public:
   Foo(char x, int y=0);  // combines two constructors (char) and (char, int)
   ...
 };
</code></pre></li>
<li><p>Use an init method to share common code:</p>

<pre><code>class Foo {
 public:
   Foo(char x);
   Foo(char x, int y);
   ...
 private:
   void init(char x, int y);
 };

 Foo::Foo(char x)
 {
   init(x, int(x) + 7);
   ...
 }

 Foo::Foo(char x, int y)
 {
   init(x, y);
   ...
 }

 void Foo::init(char x, int y)
 {
   ...
 }
</code></pre></li>
</ol>

<p>See <a href=""https://isocpp.org/wiki/faq/ctors#init-methods"" rel=""noreferrer"">the C++FAQ entry</a> for reference.</p>
","308318"
"Read whole ASCII file into C++ std::string","335557","","<p>I need to read a whole file into memory and place it in a C++ <code>std::string</code>.</p>

<p>If I were to read it into a <code>char[]</code>, the answer would be very simple:</p>

<pre><code>std::ifstream t;
int length;
t.open(""file.txt"");      // open input file
t.seekg(0, std::ios::end);    // go to the end
length = t.tellg();           // report location (this is the length)
t.seekg(0, std::ios::beg);    // go back to the beginning
buffer = new char[length];    // allocate memory for a buffer of appropriate dimension
t.read(buffer, length);       // read the whole file into the buffer
t.close();                    // close file handle

// ... Do stuff with buffer here ...
</code></pre>

<p>Now, I want to do the exact same thing, but using a <code>std::string</code> instead of a <code>char[]</code>. I want to avoid loops, i.e. I <strong>don't</strong> want to:</p>

<pre><code>std::ifstream t;
t.open(""file.txt"");
std::string buffer;
std::string line;
while(t){
std::getline(t, line);
// ... Append line to buffer and go on
}
t.close()
</code></pre>

<p>Any ideas?</p>
","<p><strong>Update:</strong> Turns out that this method, while following STL idioms well, is actually surprisingly inefficient! Don't do this with large files. (See: <a href=""http://insanecoding.blogspot.com/2011/11/how-to-read-in-file-in-c.html"" rel=""noreferrer"">http://insanecoding.blogspot.com/2011/11/how-to-read-in-file-in-c.html</a>)</p>

<p>You can make a streambuf iterator out of the file and initialize the string with it:</p>

<pre><code>#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;streambuf&gt;

std::ifstream t(""file.txt"");
std::string str((std::istreambuf_iterator&lt;char&gt;(t)),
                 std::istreambuf_iterator&lt;char&gt;());
</code></pre>

<p>Not sure where you're getting the <code>t.open(""file.txt"", ""r"")</code> syntax from. As far as I know that's not a method that <code>std::ifstream</code> has. It looks like you've confused it with C's <code>fopen</code>.</p>

<p><strong>Edit:</strong> Also note the extra parentheses around the first argument to the string constructor. <em>These are essential</em>. They prevent the problem known as the ""<a href=""http://web.archive.org/web/20110426155617/http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=439"" rel=""noreferrer"">most vexing parse</a>"", which in this case won't actually give you a compile error like it usually does, but will give you interesting (read: wrong) results.</p>

<p>Following KeithB's point in the comments, here's a way to do it that allocates all the memory up front (rather than relying on the string class's automatic reallocation):</p>

<pre><code>#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;streambuf&gt;

std::ifstream t(""file.txt"");
std::string str;

t.seekg(0, std::ios::end);   
str.reserve(t.tellg());
t.seekg(0, std::ios::beg);

str.assign((std::istreambuf_iterator&lt;char&gt;(t)),
            std::istreambuf_iterator&lt;char&gt;());
</code></pre>
","2602060"
"std::cin input with spaces?","328886","","<pre><code>#include &lt;string&gt;

string input;
cin &gt;&gt; input;
</code></pre>

<p>The user wants to enter ""Hello World"". But <code>cin</code> fails at the space between the two words. How can I make <code>cin</code> take in the whole of <code>Hello World</code>?</p>

<p>I'm actually doing this with structs and <code>cin.getline</code> doesn't seem to work. Here's my code:</p>

<pre><code>struct cd
{
    string CDTitle[50];
    string Artist[50];
    int number_of_songs[50];
};

cin.getline(library.number_of_songs[libNumber], 250);
</code></pre>

<p>This yields an error. Any ideas?</p>
","<p>You have to use <a href=""http://en.cppreference.com/w/cpp/io/basic_istream/getline"" rel=""noreferrer""><code>cin.getline()</code></a>:</p>

<pre><code>char input[100];
cin.getline(input,sizeof(input));
</code></pre>
","5838723"
"How do you create a static class in C++?","327108","","<p>How do you create a static class in C++? I should be able to do something like:</p>

<pre><code>cout &lt;&lt; ""bit 5 is "" &lt;&lt; BitParser::getBitAt(buffer, 5) &lt;&lt; endl;
</code></pre>

<p>Assuming I created the BitParser class. What would the BitParser class definition look like?</p>
","<p>If you're looking for a way of applying the ""static"" keyword to a class, like you can in C# for example, then you won't be able to without using Managed C++.</p>

<p>But the looks of your sample, you just need to create a public static method on your BitParser object. Like so:</p>

<p><strong>BitParser.h</strong></p>

<pre><code>class BitParser
{
 public:
  static bool getBitAt(int buffer, int bitIndex);

  // ...lots of great stuff

 private:
  // Disallow creating an instance of this object
  BitParser() {}
};
</code></pre>

<p><strong>BitParser.cpp</strong></p>

<pre><code>bool BitParser::getBitAt(int buffer, int bitIndex)
{
  bool isBitSet = false;
  // .. determine if bit is set
  return isBitSet;
}
</code></pre>

<p>You can use this code to call the method in the same way as your example code.</p>

<p>Hope that helps! Cheers.</p>
","9328"
"round() for float in C++","325562","","<p>I need a simple floating point rounding function, thus: </p>

<pre><code>double round(double);

round(0.1) = 0
round(-0.1) = 0
round(-0.9) = -1
</code></pre>

<p>I can find <code>ceil()</code> and <code>floor()</code> in the math.h - but not <code>round()</code>.</p>

<p>Is it present in the standard C++ library under another name, or is it missing??</p>
","<p>There's no round() in the C++98 standard library. You can write one yourself though. The following is an implementation of <a href=""https://en.wikipedia.org/wiki/Rounding#Round_half_up"" rel=""nofollow noreferrer"">round-half-up</a>:</p>

<pre><code>double round(double d)
{
  return floor(d + 0.5);
}
</code></pre>

<p>The probable reason there is no round function in the C++98 standard library is that it can in fact be implemented in different ways. The above is one common way but there are others such as <a href=""http://en.wikipedia.org/wiki/Rounding#Round_half_to_even"" rel=""nofollow noreferrer"">round-to-even</a>, which is less biased and generally better if you're going to do a lot of rounding; it's a bit more complex to implement though.</p>
","485546"
"How to find if a given key exists in a C++ std::map","318522","","<p>I'm trying to check if a given key is in a map and somewhat can't do it:</p>

<pre><code>typedef map&lt;string,string&gt;::iterator mi;
map&lt;string, string&gt; m;
m.insert(make_pair(""f"",""++--""));
pair&lt;mi,mi&gt; p = m.equal_range(""f"");//I'm not sure if equal_range does what I want
cout &lt;&lt; p.first;//I'm getting error here
</code></pre>

<p>so how can I print what is in p?</p>
","<p>Use <a href=""http://en.cppreference.com/w/cpp/container/map/find"" rel=""noreferrer""><code>map::find</code></a></p>

<pre><code>if ( m.find(""f"") == m.end() ) {
  // not found
} else {
  // found
}
</code></pre>
","1939971"
"What is the difference between const int*, const int * const, and int const *?","318129","","<p>I always mess up how to use <code>const int*</code>, <code>const int * const</code>, and <code>int const *</code> correctly. Is there a set of rules defining what you can and cannot do?</p>

<p>I want to know all the do's and all don'ts in terms of assignments, passing to the functions, etc.</p>
","<p>Read it backwards (as driven by <a href=""http://c-faq.com/decl/spiral.anderson.html"" rel=""noreferrer"">Clockwise/Spiral Rule</a>)... </p>

<ul>
<li><code>int*</code> - pointer to int</li>
<li><code>int const *</code> - pointer to const int</li>
<li><code>int * const</code> - const pointer to int</li>
<li><code>int const * const</code> - const pointer to const int</li>
</ul>

<p>Now the first const can be on either side of the type so:</p>

<ul>
<li><code>const int *</code> == <code>int const *</code></li>
<li><code>const int * const</code> == <code>int const * const</code></li>
</ul>

<p>If you want to go really crazy you can do things like this:</p>

<ul>
<li><code>int **</code> - pointer to pointer to int</li>
<li><code>int ** const</code> - a const pointer to a pointer to an int</li>
<li><code>int * const *</code> - a pointer to a const pointer to an int</li>
<li><code>int const **</code> - a pointer to a pointer to a const int</li>
<li><code>int * const * const</code> - a const pointer to a const pointer to an int</li>
<li>...</li>
</ul>

<p>And to make sure we are clear on the meaning of const</p>

<pre><code>const int* foo;
int *const bar; //note, you actually need to set the pointer 
                //here because you can't change it later ;)
</code></pre>

<p><code>foo</code> is a variable pointer to a constant int. This lets you change what you point to but not the value that you point to. Most often this is seen with cstrings where you have a pointer to a <code>const char</code>. You may change which string you point to but you can't change the content of these strings. This is important when the string itself is in the data segment of a program and shouldn't be changed.</p>

<p><code>bar</code> is a const or fixed pointer to a value that can be changed. This is like a reference without the extra syntactic sugar. Because of this fact, usually you would use a reference where you would use a <code>T* const</code> pointer unless you need to allow null pointers.</p>
","1143272"
"Private and Protected Members : C++","317893","","<p>Can someone enlighten me as to the difference between private and protected members in classes? I understand from best practice conventions that variables and functions which are not called outside the class should be made private - but looking at my MFC project, MFC seems to favour protected.</p>

<p>Whats the difference and which should I use?</p>
","<p>Private members are only accessible within the class defining them.</p>

<p>Protected members are accessible in the class that defines them and in classes that inherit from that class.</p>

<p>Edit: Both are also accessible by friends of their class, and in the case of protected members, by friends of their derived classes.</p>

<p>Edit 2: Use whatever makes sense in the context of your problem. You should try to make members private whenever you can to reduce coupling and protect the implementation of the base class, but if that's not possible then use protected members. Check <a href=""https://isocpp.org/wiki/faq/basics-of-inheritance"" rel=""noreferrer"">C++ FAQ</a> for a better understanding of the issue. <a href=""https://stackoverflow.com/questions/37011/protected-member-variables"">This question about protected variables</a> might also help.</p>
","224977"
"Why can templates only be implemented in the header file?","317716","","<p>Quote from <a href=""http://books.google.com/books?id=n9VEG2Gp5pkC&amp;pg=PA10&amp;lpg=PA10&amp;dq=%22The%20only%20portable%20way%20of%20using%20templates%20at%20the%20moment%20is%20to%20implement%20them%20in%20header%20files%20by%20using%20inline%20functions.%22&amp;source=bl&amp;ots=Ref8pl8dPX&amp;sig=t4K5gvxtBblpcujNxodpwMfei8I&amp;hl=en&amp;ei=qkR6TvbiGojE0AHq4IzqAg&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=3&amp;ved=0CC8Q6AEwAg#v=onepage&amp;q=%22The%20only%20portable%20way%20of%20using%20templates%20at%20the%20moment%20is%20to%20implement%20them%20in%20header%20files%20by%20using%20inline%20functions.%22&amp;f=false"" rel=""noreferrer"">The C++ standard library: a tutorial and handbook</a>:</p>

<blockquote>
  <p>The only portable way of using templates at the moment is to implement them in header files by using inline functions.</p>
</blockquote>

<p>Why is this?</p>

<p>(Clarification: header files are not the <em>only</em> portable solution. But they are the most convenient portable solution.)</p>
","<p>It is <em>not</em> necessary to put the implementation in the header file, see the alternative solution at the end of this answer.</p>

<p>Anyway, the reason your code is failing is that, when instantiating a template, the compiler creates a new class with the given template argument. For example:</p>

<pre><code>template&lt;typename T&gt;
struct Foo
{
    T bar;
    void doSomething(T param) {/* do stuff using T */}
};

// somewhere in a .cpp
Foo&lt;int&gt; f; 
</code></pre>

<p>When reading this line, the compiler will create a new class (let's call it <code>FooInt</code>), which is equivalent to the following:</p>

<pre><code>struct FooInt
{
    int bar;
    void doSomething(int param) {/* do stuff using int */}
}
</code></pre>

<p>Consequently, the compiler needs to have access to the implementation of the methods, to instantiate them with the template argument (in this case <code>int</code>). If these implementations were not in the header, they wouldn't be accessible, and therefore the compiler wouldn't be able to instantiate the template.</p>

<p>A common solution to this is to write the template declaration in a header file, then implement the class in an implementation file (for example .tpp), and include this implementation file at the end of the header.</p>

<pre><code>// Foo.h
template &lt;typename T&gt;
struct Foo
{
    void doSomething(T param);
};

#include ""Foo.tpp""

// Foo.tpp
template &lt;typename T&gt;
void Foo&lt;T&gt;::doSomething(T param)
{
    //implementation
}
</code></pre>

<p>This way, implementation is still separated from declaration, but is accessible to the compiler.</p>

<p>Another solution is to keep the implementation separated, and explicitly instantiate all the template instances you'll need:</p>

<pre><code>// Foo.h

// no implementation
template &lt;typename T&gt; struct Foo { ... };

//----------------------------------------    
// Foo.cpp

// implementation of Foo's methods

// explicit instantiations
template class Foo&lt;int&gt;;
template class Foo&lt;float&gt;;
// You will only be able to use Foo with int or float
</code></pre>

<p>If my explanation isn't clear enough, you can have a look at the <a href=""https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl"" rel=""noreferrer"">C++ Super-FAQ on this subject</a>.</p>
","495056"
"How to replace all occurrences of a character in string?","316836","","<p>What is the effective way to replace all occurrences of a character with another character in <code>std::string</code>?</p>
","<p><code>std::string</code> doesn't contain such function but you could use stand-alone <code>replace</code> function from <code>algorithm</code> header.</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;string&gt;

void some_func() {
  std::string s = ""example string"";
  std::replace( s.begin(), s.end(), 'x', 'y'); // replace all 'x' to 'y'
}
</code></pre>
","2896627"
"How to convert int to QString?","308443","","<p>Is there a <code>QString</code> function which takes an <strong>int</strong> and outputs it as a <code>QString</code>?</p>
","<p>Use <a href=""http://doc.qt.io/qt-5/qstring.html#number"" rel=""noreferrer""><code>QString::number()</code></a>:</p>

<pre><code>int i = 42;
QString s = QString::number(i);
</code></pre>
","3211784"
"How do I print a double value with full precision using cout?","306809","","<p>So I've gotten the answer to my <a href=""https://stackoverflow.com/questions/553974/why-does-int55-54-in-c"">last question</a> (I don't know why I didn't think of that).  I was printing a <code>double</code> using <code>cout</code> that got rounded when I wasn't expecting it.  How can I make <code>cout</code> print a <code>double</code> using full precision?</p>
","<p>You can set the precision directly on <code>std::cout</code> and use the <a href=""http://en.cppreference.com/w/cpp/io/manip/fixed"" rel=""noreferrer""><code>std::fixed</code></a> format specifier.</p>

<pre><code>double d = 3.14159265358979;
cout.precision(17);
cout &lt;&lt; ""Pi: "" &lt;&lt; fixed &lt;&lt; d &lt;&lt; endl;
</code></pre>

<p>You can <code>#include &lt;limits&gt;</code> to get the maximum precision of a float or double.</p>

<pre><code>#include &lt;limits&gt;

typedef std::numeric_limits&lt; double &gt; dbl;

double d = 3.14159265358979;
cout.precision(dbl::max_digits10);
cout &lt;&lt; ""Pi: "" &lt;&lt; fixed &lt;&lt; d &lt;&lt; endl;
</code></pre>
","554134"
"What is a lambda expression in C++11?","306709","","<p>What is a lambda expression in C++11? When would I use one? What class of problem do they solve that wasn't possible prior to their introduction?</p>

<p>A few examples, and use cases would be useful. </p>
","<h1>The problem</h1>

<p>C++ includes useful generic functions like <code>std::for_each</code> and <code>std::transform</code>, which can be very handy. Unfortunately they can also be quite cumbersome to use, particularly if the <a href=""https://stackoverflow.com/questions/356950/c-functors-and-their-uses"">functor</a> you would like to apply is unique to the particular function.</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;vector&gt;

namespace {
  struct f {
    void operator()(int) {
      // do something
    }
  };
}

void func(std::vector&lt;int&gt;&amp; v) {
  f f;
  std::for_each(v.begin(), v.end(), f);
}
</code></pre>

<p>If you only use f once and in that specific place it seems overkill to be writing a whole class just to do something trivial and one off.</p>

<p>In C++03 you might be tempted to write something like the following, to keep the functor local:</p>

<pre><code>void func2(std::vector&lt;int&gt;&amp; v) {
  struct {
    void operator()(int) {
       // do something
    }
  } f;
  std::for_each(v.begin(), v.end(), f);
}
</code></pre>

<p>however this is not allowed, <code>f</code> cannot be passed to a template function in C++03.</p>

<h1>The new solution</h1>

<p>C++11 introduces lambdas allow you to write an inline, anonymous functor to replace the <code>struct f</code>. For small simple examples this can be cleaner to read (it keeps everything in one place) and potentially simpler to maintain, for example in the simplest form:</p>

<pre><code>void func3(std::vector&lt;int&gt;&amp; v) {
  std::for_each(v.begin(), v.end(), [](int) { /* do something here*/ });
}
</code></pre>

<p>Lambda functions are just syntactic sugar for anonymous functors.</p>

<h2>Return types</h2>

<p>In simple cases the return type of the lambda is deduced for you, e.g.:</p>

<pre><code>void func4(std::vector&lt;double&gt;&amp; v) {
  std::transform(v.begin(), v.end(), v.begin(),
                 [](double d) { return d &lt; 0.00001 ? 0 : d; }
                 );
}
</code></pre>

<p>however when you start to write more complex lambdas you will quickly encounter cases where the return type cannot be deduced by the compiler, e.g.:</p>

<pre><code>void func4(std::vector&lt;double&gt;&amp; v) {
    std::transform(v.begin(), v.end(), v.begin(),
        [](double d) {
            if (d &lt; 0.0001) {
                return 0;
            } else {
                return d;
            }
        });
}
</code></pre>

<p>To resolve this you are allowed to explicitly specify a return type for a lambda function, using <code>-&gt; T</code>:</p>

<pre><code>void func4(std::vector&lt;double&gt;&amp; v) {
    std::transform(v.begin(), v.end(), v.begin(),
        [](double d) -&gt; double {
            if (d &lt; 0.0001) {
                return 0;
            } else {
                return d;
            }
        });
}
</code></pre>

<h2>""Capturing"" variables</h2>

<p>So far we've not used anything other than what was passed to the lambda within it, but we can also use other variables, within the lambda. If you want to access other variables you can use the capture clause (the <code>[]</code> of the expression), which has so far been unused in these examples, e.g.:</p>

<pre><code>void func5(std::vector&lt;double&gt;&amp; v, const double&amp; epsilon) {
    std::transform(v.begin(), v.end(), v.begin(),
        [epsilon](double d) -&gt; double {
            if (d &lt; epsilon) {
                return 0;
            } else {
                return d;
            }
        });
}
</code></pre>

<p>You can capture by both reference and value, which you can specify using <code>&amp;</code> and <code>=</code> respectively:</p>

<ul>
<li><code>[&amp;epsilon]</code> capture by reference</li>
<li><code>[&amp;]</code> captures all variables used in the lambda by reference</li>
<li><code>[=]</code> captures all variables used in the lambda by value</li>
<li><code>[&amp;, epsilon]</code> captures variables like with [&amp;], but epsilon by value</li>
<li><code>[=, &amp;epsilon]</code> captures variables like with [=], but epsilon by reference</li>
</ul>

<p>The generated <code>operator()</code> is <code>const</code> by default, with the implication that captures will be <code>const</code> when you access them by default. This has the effect that each call with the same input would produce the same result, however you can <a href=""https://stackoverflow.com/questions/5501959/why-does-c0xs-lambda-require-mutable-keyword-for-capture-by-value-by-defaul"">mark the lambda as <code>mutable</code></a> to request that the <code>operator()</code> that is produced is not <code>const</code>.</p>


","7627218"
"Initialization of a normal array with one default value","302971","","<p><a href=""http://www.fredosaurus.com/notes-cpp/arrayptr/array-initialization.html"" rel=""noreferrer"">C++ Notes: Array Initialization</a> has a nice list over initialization of arrays. I have a</p>

<pre><code>int array[100] = {-1};
</code></pre>

<p>expecting it to be full with -1's but its not, only first value is and the rest are 0's mixed with random values.</p>

<p>The code</p>

<pre><code>int array[100] = {0};
</code></pre>

<p>works just fine and sets each element to 0.</p>

<p>What am I missing here.. Can't one initialize it if the value isn't zero ?</p>

<p>2: Is the default initialization (as above ) faster than the usual loop through the whole array and assign a value or does it do the same thing?</p>
","<p>Using the syntax that you used,</p>

<pre><code>int array[100] = {-1};
</code></pre>

<p>says ""set the first element to <code>-1</code> and the rest to <code>0</code>"" since all omitted elements are set to <code>0</code>.</p>

<p>In C++, to set them all to <code>-1</code>, you can use something like <a href=""http://en.cppreference.com/w/cpp/algorithm/fill_n"" rel=""nofollow noreferrer""><code>std::fill_n</code></a> (from <code>&lt;algorithm&gt;</code>):</p>

<pre><code>std::fill_n(array, 100, -1);
</code></pre>

<p>In portable C, you have to roll your own loop. There are compiler-extensions or you can depend on implementation-defined behavior as a shortcut if that's acceptable.</p>
","1065800"
"Undefined reference to vtable","300521","","<p>So, I'm getting the infamously horrible ""undefined reference to 'vtable..."" error for the following code (The class in question is CGameModule.) and I cannot for the life of me understand what the problem is. At first, I thought it was related to forgetting to give a virtual function a body, but as far as I understand, everything is all here. The inheritance chain is a little long, but here is the related source code. I'm not sure what other information I should provide.</p>

<p>Note: The constructor is where this error is happening, it'd seem.</p>

<p>My code:</p>

<pre><code>class CGameModule : public CDasherModule {
 public:
  CGameModule(Dasher::CEventHandler *pEventHandler, CSettingsStore *pSettingsStore, CDasherInterfaceBase *pInterface, ModuleID_t iID, const char *szName)
  : CDasherModule(pEventHandler, pSettingsStore, iID, 0, szName)
  { 
      g_pLogger-&gt;Log(""Inside game module constructor"");   
      m_pInterface = pInterface; 
  }

  virtual ~CGameModule() {};

  std::string GetTypedTarget();

  std::string GetUntypedTarget();

  bool DecorateView(CDasherView *pView) {
      //g_pLogger-&gt;Log(""Decorating the view"");
      return false;
  }

  void SetDasherModel(CDasherModel *pModel) { m_pModel = pModel; }


  virtual void HandleEvent(Dasher::CEvent *pEvent); 

 private:



  CDasherNode *pLastTypedNode;


  CDasherNode *pNextTargetNode;


  std::string m_sTargetString;


  size_t m_stCurrentStringPos;


  CDasherModel *m_pModel;


  CDasherInterfaceBase *m_pInterface;
};
</code></pre>

<p>Inherits from...</p>

<pre><code>class CDasherModule;
typedef std::vector&lt;CDasherModule*&gt;::size_type ModuleID_t;

/// \ingroup Core
/// @{
class CDasherModule : public Dasher::CDasherComponent {
 public:
  CDasherModule(Dasher::CEventHandler * pEventHandler, CSettingsStore * pSettingsStore, ModuleID_t iID, int iType, const char *szName);

  virtual ModuleID_t GetID();
  virtual void SetID(ModuleID_t);
  virtual int GetType();
  virtual const char *GetName();

  virtual bool GetSettings(SModuleSettings **pSettings, int *iCount) {
    return false;
  };

 private:
  ModuleID_t m_iID;
  int m_iType;
  const char *m_szName;
};
</code></pre>

<p>Which inherits from....</p>

<pre><code>namespace Dasher {
  class CEvent;
  class CEventHandler;
  class CDasherComponent;
};

/// \ingroup Core
/// @{
class Dasher::CDasherComponent {
 public:
  CDasherComponent(Dasher::CEventHandler* pEventHandler, CSettingsStore* pSettingsStore);
  virtual ~CDasherComponent();

  void InsertEvent(Dasher::CEvent * pEvent);
  virtual void HandleEvent(Dasher::CEvent * pEvent) {};

  bool GetBoolParameter(int iParameter) const;
  void SetBoolParameter(int iParameter, bool bValue) const;

  long GetLongParameter(int iParameter) const;
  void SetLongParameter(int iParameter, long lValue) const;

  std::string GetStringParameter(int iParameter) const;
  void        SetStringParameter(int iParameter, const std::string &amp; sValue) const;

  ParameterType   GetParameterType(int iParameter) const;
  std::string     GetParameterName(int iParameter) const;

 protected:
  Dasher::CEventHandler *m_pEventHandler;
  CSettingsStore *m_pSettingsStore;
};
/// @}


#endif
</code></pre>
","<p>So, I've figured out the issue and it was a combination of bad logic and not being totally familiar with the automake/autotools world. I was adding the correct files to my Makefile.am template, but I wasn't sure which step in our build process actually created the makefile itself. So, I was compiling with an old makefile that had no idea about my new files whatsoever.</p>

<p>Thanks for the responses and the link to the GCC FAQ. I will be sure to read that to avoid this problem occurring for a real reason.</p>
","3087312"
"""does not name a type"" error","298795","","<p>I have two classes declared as below:</p>

<pre><code>class User
{
public:
  MyMessageBox dataMsgBox;
};

class MyMessageBox
{
public:
  void sendMessage(Message *msg, User *recvr);
  Message receiveMessage();
  vector&lt;Message&gt; *dataMessageList;
};
</code></pre>

<p>When I try to compile it using gcc, it gives the following error:</p>

<blockquote>
  <p>MyMessageBox does not name a type</p>
</blockquote>
","<p>When the compiler compiles the class <code>User</code> and gets to the <code>MyMessageBox</code> line, <code>MyMessageBox</code> has not yet been defined. The compiler has no idea <code>MyMessageBox</code> exists, so cannot understand the meaning of your class member.</p>

<p>You need to make sure <code>MyMessageBox</code> is defined <em>before</em> you use it as a member. This is solved by reversing the definition order. However, you have a cyclic dependency: if you move <code>MyMessageBox</code> above <code>User</code>, then in the definition of <code>MyMessageBox</code> the name <code>User</code> won't be defined!</p>

<p>What you can do is <em>forward declare</em> <code>User</code>; that is, declare it but don't define it. During compilation, a type that is declared but not defined is called an <em>incomplete type</em>.
Consider the simpler example:</p>

<pre><code>struct foo; // foo is *declared* to be a struct, but that struct is not yet defined

struct bar
{
    // this is okay, it's just a pointer;
    // we can point to something without knowing how that something is defined
    foo* fp; 

    // likewise, we can form a reference to it
    void some_func(foo&amp; fr);

    // but this would be an error, as before, because it requires a definition
    /* foo fooMember; */
};

struct foo // okay, now define foo!
{
    int fooInt;
    double fooDouble;
};

void bar::some_func(foo&amp; fr)
{
    // now that foo is defined, we can read that reference:
    fr.fooInt = 111605;
    fr.foDouble = 123.456;
}
</code></pre>

<p>By forward declaring <code>User</code>, <code>MyMessageBox</code> can still form a pointer or reference to it:</p>

<pre><code>class User; // let the compiler know such a class will be defined

class MyMessageBox
{
public:
    // this is ok, no definitions needed yet for User (or Message)
    void sendMessage(Message *msg, User *recvr); 

    Message receiveMessage();
    vector&lt;Message&gt;* dataMessageList;
};

class User
{
public:
    // also ok, since it's now defined
    MyMessageBox dataMsgBox;
};
</code></pre>

<p>You <em>cannot</em> do this the other way around: as mentioned, a class member needs to have a definition. (The reason is that the compiler needs to know how much memory <code>User</code> takes up, and to know that it needs to know the size of its members.) If you were to say:</p>

<pre><code>class MyMessageBox;

class User
{
public:
    // size not available! it's an incomplete type
    MyMessageBox dataMsgBox;
};
</code></pre>

<p>It wouldn't work, since it doesn't know the size yet.</p>

<hr>

<p>On a side note, this function:</p>

<pre><code> void sendMessage(Message *msg, User *recvr);
</code></pre>

<p>Probably shouldn't take either of those by pointer. You can't send a message without a message, nor can you send a message without a user to send it to. And both of those situations are expressible by passing null as an argument to either parameter (null is a perfectly valid pointer value!)</p>

<p>Rather, use a reference (possibly const):</p>

<pre><code> void sendMessage(const Message&amp; msg, User&amp; recvr);
</code></pre>
","2133260"
"What does void mean in C, C++, and C#?","297950","","<p>Looking to get the fundamentals on where the term VOID comes from and why it would be called void. The intention of the question is to assist someone who has no C experience and is suddenly looking at a C-based codebase. </p>
","<p>Basically it means ""nothing"" or ""no type""</p>

<p>There are 3 basic ways that void is used:</p>

<ol>
<li><p>Function argument: <code>int myFunc(void)</code>
-- the function takes nothing. </p></li>
<li><p>Function return value: <code>void myFunc(int)</code>
-- the function returns nothing</p></li>
<li><p>Generic data pointer: <code>void* data</code>
-- 'data' is a pointer to data of unknown type, and cannot be dereferenced</p></li>
</ol>

<p>Note: the <code>void</code> in a function argument is optional in C++, so <code>int myFunc()</code> is exactly the same as <code>int myFunc(void)</code>, and it is left out completely in C#. It is always required for a return value.</p>
","1043107"
"How do you make a HTTP request with C++?","295874","","<p>Is there any way to easily make a HTTP request with C++?  Specifically, I want to download the contents of a page (an API) and check the contents to see if it contains a 1 or a 0. Is it also possible to download the contents into a string?</p>
","<p>I had the same problem. <a href=""http://curl.haxx.se/libcurl/"" rel=""noreferrer"">libcurl</a> is really complete. There is a C++ wrapper <a href=""http://www.curlpp.org/"" rel=""noreferrer"">curlpp</a> that might interest you as you ask for a C++ library. <a href=""http://www.webdav.org/neon/"" rel=""noreferrer"">neon</a> is another interesting C library that also support webdav.</p>

<p>curlpp seems natural if you use C++. There are many examples provided in the source distribution.
To get the content of an URL you do something like that (extracted from examples) :</p>

<pre><code>// Edit : rewritten for cURLpp 0.7.3
// Note : namespace changed, was cURLpp in 0.7.2 ...

#include &lt;curlpp/cURLpp.hpp&gt;
#include &lt;curlpp/Options.hpp&gt;

// RAII cleanup

curlpp::Cleanup myCleanup;

// Send request and get a result.
// Here I use a shortcut to get it in a string stream ...

std::ostringstream os;
os &lt;&lt; curlpp::options::Url(std::string(""http://www.wikipedia.org""));

string asAskedInQuestion = os.str();
</code></pre>

<p>See the <code>examples</code> directory in <a href=""https://github.com/jpbarrette/curlpp"" rel=""noreferrer"">curlpp source distribution</a>, there is a lot of more complex cases.</p>

<p>my 2 cents ...</p>
","1112084"
"How to execute a command and get output of command within C++ using POSIX?","295711","","<p>I am looking for a way to get the output of a command when it is run from within a C++ program.  I have looked at using the system() function, but that will just execute a command.  Here's an example of what I'm looking for:</p>

<pre><code>std::string result = system( ""./some_command"" ) ;
</code></pre>

<p>I need to run an arbitrary command and get it's output.  I've looked at Boost.org but I have not found anything that will give me what I need.</p>
","<pre><code>#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;array&gt;

std::string exec(const char* cmd) {
    std::array&lt;char, 128&gt; buffer;
    std::string result;
    std::shared_ptr&lt;FILE&gt; pipe(popen(cmd, ""r""), pclose);
    if (!pipe) throw std::runtime_error(""popen() failed!"");
    while (!feof(pipe.get())) {
        if (fgets(buffer.data(), 128, pipe.get()) != nullptr)
            result += buffer.data();
    }
    return result;
}
</code></pre>

<p>Pre-C++11 version:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
#include &lt;stdio.h&gt;
#include &lt;string&gt;

std::string exec(const char* cmd) {
    char buffer[128];
    std::string result = """";
    FILE* pipe = popen(cmd, ""r"");
    if (!pipe) throw std::runtime_error(""popen() failed!"");
    try {
        while (!feof(pipe)) {
            if (fgets(buffer, 128, pipe) != NULL)
                result += buffer;
        }
    } catch (...) {
        pclose(pipe);
        throw;
    }
    pclose(pipe);
    return result;
}
</code></pre>

<p>Replace <code>popen</code> and <code>pclose</code> with <code>_popen</code> and <code>_pclose</code> for Windows.</p>
","478960"
"Why is this program erroneously rejected by three C++ compilers?","294514","","<p>I am having some difficulty compiling a C++ program that I've written.</p>

<p>This program is very simple and, to the best of my knowledge, conforms to all the rules set forth in the C++ Standard.  I've read over the entirety of ISO/IEC 14882:2003 twice to be sure.</p>

<p>The program is as follows:</p>

<p><img src=""https://i.stack.imgur.com/JQXWL.png"" alt=""enter image description here""></p>

<p>Here is the output I received when trying to compile this program with Visual C++ 2010:</p>

<pre><code>c:\dev&gt;cl /nologo helloworld.png
cl : Command line warning D9024 : unrecognized source file type 'helloworld.png', object file assumed
helloworld.png : fatal error LNK1107: invalid or corrupt file: cannot read at 0x5172
</code></pre>

<p>Dismayed, I tried g++ 4.5.2, but it was equally unhelpful:</p>

<pre><code>c:\dev&gt;g++ helloworld.png
helloworld.png: file not recognized: File format not recognized
collect2: ld returned 1 exit status
</code></pre>

<p>I figured that Clang (version 3.0 trunk 127530) must work, since it is so highly praised for its standards conformance.  Unfortunately, it didn't even give me one of its pretty, highlighted error messages:</p>

<pre><code>c:\dev&gt;clang++ helloworld.png
helloworld.png: file not recognized: File format not recognized
collect2: ld returned 1 exit status
clang++: error: linker (via gcc) command failed with exit code 1 (use -v to see invocation)
</code></pre>

<p>To be honest, I don't really know what any of these error message mean.</p>

<p>Many other C++ programs have source files with a <em>.cpp</em> extension, so I thought perhaps I needed to rename my file.  I changed its name to <em>helloworld.cpp</em>, but that didn't help.  I think there is a very serious bug in Clang because when I tried using it to compile the renamed program, it flipped out, printed ""84 warnings and 20 errors generated."" and made my computer beep a lot!</p>

<p>What have I done wrong here?  Have I missed some critical part of the C++ Standard?  Or are all three compilers really just so broken that they can't compile this simple program?  </p>
","<p>In the standard, §2.1/1 specifies:</p>

<blockquote>
  <p>Physical source file characters are mapped, in an implementation-defined manner, to the basic source character set (introducing new-line characters for end-of-line indicators) if necessary.</p>
</blockquote>

<p>Your compiler doesn't support that format (aka cannot map it to the <em>basic source character set</em>), so it cannot move into further processing stages, hence the error. It is entirely possible that your compiler support a mapping from image to basic source character set, but is not required to. </p>

<p>Since this mapping is implementation-defined, you'll need to look at your implementations documentation to see the file formats it supports. Typically, every major compiler vendor supports (canonically defined) text files: any file produced by a text editor, typically a series of characters. </p>

<hr>

<p>Note that the C++ standard is based off the C standard (§1.1/2), and the C(99) standard says, in §1.2:</p>

<blockquote>
  <p>This International Standard does not specify<br>
  — the mechanism by which C programs are transformed for use by a data-processing
  system;<br>
  — the mechanism by which C programs are invoked for use by a data-processing
  system;<br>
  — the mechanism by which input data are transformed for use by a C program;</p>
</blockquote>

<p>So, again, the treatment of source files is something you need to find in your compilers documentation.</p>
","5508168"
"Checking if a double (or float) is NaN in C++","294450","","<p>Is there an isnan() function?</p>

<p>PS.: I'm in <a href=""http://en.wikipedia.org/wiki/MinGW"" rel=""noreferrer"">MinGW</a> (if that makes a difference).</p>

<p>I had this solved by using isnan() from <code>&lt;math.h&gt;</code>, which doesn't exist in <code>&lt;cmath&gt;</code>, which I was <code>#include</code>ing at first.</p>
","<p>According to the IEEE standard, NaN values have the odd property that comparisons involving them are <em>always</em> false. That is, for a float f, <code>f != f</code> will be true <em>only</em> if f is NaN. </p>

<p>Note that, as some comments below have pointed out, not all compilers respect this when optimizing code. </p>

<p>For any compiler which claims to use IEEE floating point, this trick <em>should</em> work. But I can't guarantee that it <em>will</em> work in practice. Check with your compiler, if in doubt.</p>
","570694"
"How do you reverse a string in place in C or C++?","294289","","<p>How do you reverse a string in C or C++ without requiring a separate buffer to hold the reversed string?</p>
","<p>Evil C:</p>

<pre><code>#include &lt;stdio.h&gt;

void strrev(char *p)
{
  char *q = p;
  while(q &amp;&amp; *q) ++q;
  for(--q; p &lt; q; ++p, --q)
    *p = *p ^ *q,
    *q = *p ^ *q,
    *p = *p ^ *q;
}

int main(int argc, char **argv)
{
  do {
    printf(""%s "",  argv[argc-1]);
    strrev(argv[argc-1]);
    printf(""%s\n"", argv[argc-1]);
  } while(--argc);

  return 0;
}
</code></pre>

<p>(This is XOR-swap thing. Take care to note that you <em>must avoid</em> swapping with self, because a^a==0.)</p>

<hr>

<h2>Ok, fine, let's fix the UTF-8 chars...</h2>

<pre><code>#include &lt;bits/types.h&gt;
#include &lt;stdio.h&gt;

#define SWP(x,y) (x^=y, y^=x, x^=y)

void strrev(char *p)
{
  char *q = p;
  while(q &amp;&amp; *q) ++q; /* find eos */
  for(--q; p &lt; q; ++p, --q) SWP(*p, *q);
}

void strrev_utf8(char *p)
{
  char *q = p;
  strrev(p); /* call base case */

  /* Ok, now fix bass-ackwards UTF chars. */
  while(q &amp;&amp; *q) ++q; /* find eos */
  while(p &lt; --q)
    switch( (*q &amp; 0xF0) &gt;&gt; 4 ) {
    case 0xF: /* U+010000-U+10FFFF: four bytes. */
      SWP(*(q-0), *(q-3));
      SWP(*(q-1), *(q-2));
      q -= 3;
      break;
    case 0xE: /* U+000800-U+00FFFF: three bytes. */
      SWP(*(q-0), *(q-2));
      q -= 2;
      break;
    case 0xC: /* fall-through */
    case 0xD: /* U+000080-U+0007FF: two bytes. */
      SWP(*(q-0), *(q-1));
      q--;
      break;
    }
}

int main(int argc, char **argv)
{
  do {
    printf(""%s "",  argv[argc-1]);
    strrev_utf8(argv[argc-1]);
    printf(""%s\n"", argv[argc-1]);
  } while(--argc);

  return 0;
}
</code></pre>

<ul>
<li>Why, yes, if the input is borked, this will cheerfully swap outside the place.</li>
<li>Useful link when vandalising in the UNICODE: <a href=""http://www.macchiato.com/unicode/chart/"" rel=""noreferrer"">http://www.macchiato.com/unicode/chart/</a></li>
<li>Also, UTF-8 over 0x10000 is untested (as I don't seem to have any font for it, nor the patience to use a hexeditor)</li>
</ul>

<p>Examples:</p>

<pre><code>$ ./strrev Räksmörgås ░▒▓○◔◑◕●

░▒▓○◔◑◕● ●◕◑◔○▓▒░

Räksmörgås sågrömskäR

./strrev verrts/.
</code></pre>
","198264"
"Write applications in C or C++ for Android?","293278","","<p>I'm trying to develop/port a game to Android, but it's in C, and Android supports Java, but I'm sure there must be a way to get a C app on there, anyone knows of a good tutorial on the subject?</p>

<p>Thanks!</p>
","<p>For anyone coming to this via Google, note that starting from SDK 1.6 Android now has an official native SDK. </p>

<p>You can download the Android NDK (Native Development Kit) from here: 
<a href=""https://developer.android.com/ndk/downloads/index.html"" rel=""noreferrer"">https://developer.android.com/ndk/downloads/index.html</a></p>

<p>Also there is an blog post about the NDK:<br>
<a href=""http://android-developers.blogspot.com/2009/06/introducing-android-15-ndk-release-1.html"" rel=""noreferrer"">http://android-developers.blogspot.com/2009/06/introducing-android-15-ndk-release-1.html</a></p>
","1571635"
"What are the differences between struct and class in C++?","293177","","<p>This question was <a href=""https://stackoverflow.com/questions/13049"">already asked in the context of C#/.Net</a>.</p>

<p>Now I'd like to learn the differences between a struct and a class in C++. Please discuss the technical differences as well as reasons for choosing one or the other in OO design.</p>

<p>I'll start with an obvious difference:</p>

<ul>
<li>If you don't specify <code>public:</code> or <code>private:</code>, members of a struct are public by default; members of a class are private by default.</li>
</ul>

<p>I'm sure there are other differences to be found in the obscure corners of the C++ specification.</p>
","<p>You forget the tricky 2nd difference between classes and structs.</p>

<p>Quoth the standard (§11.2.2 in C++98 through C++11):</p>

<blockquote>
  <p>In absence of an <em>access-specifier</em>
  for a base class, public is assumed
  when the derived class is declared
  <em>struct</em> and private is assumed when the class is declared <em>class</em>.</p>
</blockquote>

<p>And just for completeness' sake, the more widely known difference between class and struct is defined in (11.2):</p>

<blockquote>
  <p>Member of a class defined with the
  keyword <em>class</em> are <em>private</em> by
  default. Members of a class defined
  with the keywords <em>struct</em> or <em>union</em>
  are <em>public</em> by default.</p>
</blockquote>

<p>Additional difference: the keyword <code>class</code> can be used to declare template parameters, while the <code>struct</code> keyword cannot be so used.</p>
","999810"
"How do I convert a double into a string in C++?","293090","","<p>I need to store a double as a string.  I know I  can use <code>printf</code> if I wanted to display it, but I just want to store it in a string variable so that I can store it in a map later (as the <em>value</em>, not the <em>key</em>).</p>
","<p>The <em>boost (tm)</em> way:</p>

<pre><code>std::string str = boost::lexical_cast&lt;std::string&gt;(dbl);
</code></pre>

<p>The <em>Standard C++</em> way:</p>

<pre><code>std::ostringstream strs;
strs &lt;&lt; dbl;
std::string str = strs.str();
</code></pre>

<p><strong>Note</strong>: Don't forget <code>#include &lt;sstream&gt;</code></p>
","332132"
"Debugging with command-line parameters in Visual Studio","291380","","<p>I'm developing a C++ command-line application in Visual Studio and need to debug it with command-line arguments. At the moment I just run the generated EXE file with the arguments I need (like this <code>program.exe -file.txt</code>) , but this way I can't debug. Is there somewhere I can specify the arguments for debugging?</p>
","<p>Yes, it's on the Debugging section of the properties page of the project.</p>

<p>In VS since 2008: right-click the <code>project</code>, choose <code>properties</code>, go to the <code>Debugging</code> section -- there is a box for ""<code>Command Arguments</code>"". (Tip: not <code>solution</code>, but <code>project</code>)</p>
","298713"
"Can I use a binary literal in C or C++?","282309","","<p>I need to work with a binary number.</p>

<p>I tried writing:</p>

<pre><code>const x = 00010000;
</code></pre>

<p>But it didn't work.</p>

<p>I know that I can use an hexadecimal number that has the same value as <code>00010000</code>, but I want to know if there is a type in C++ for binary numbers and if there isn't, is there another solution for my problem?</p>
","<p>You can <a href=""http://www.boost.org/doc/libs/1_42_0/libs/utility/utility.htm#BOOST_BINARY"" rel=""nofollow noreferrer"">use <strong><code>BOOST_BINARY</code></strong></a> while waiting for C++0x. :)  <code>BOOST_BINARY</code> arguably has an advantage over template implementation insofar as it <strong>can be used in C programs as well</strong> (it is 100% preprocessor-driven.)</p>

<h3>UPDATE</h3>

<p>To do the converse (i.e. print out a number in binary form), you can use the non-portable <a href=""http://www.cplusplus.com/reference/clibrary/cstdlib/itoa/"" rel=""nofollow noreferrer""><code>itoa</code> function</a>, or <a href=""http://www.jb.man.ac.uk/~slowe/cpp/itoa.html"" rel=""nofollow noreferrer"">implement your own</a>.</p>

<p>Unfortunately you cannot do base 2 formatting with STL streams (since <a href=""http://en.cppreference.com/w/cpp/io/manip/setbase"" rel=""nofollow noreferrer""><code>setbase</code></a> will only honour bases 8, 10 and 16), but you <em>can</em> use either a <code>std::string</code> version of <code>itoa</code>, or (the more concise, yet marginally less efficient) <code>std::bitset</code>.</p>

<p><em>(Thank you <a href=""https://stackoverflow.com/users/54262/roger-pate"">Roger</a> for the <code>bitset</code> tip!)</em></p>

<pre><code>#include &lt;boost/utility/binary.hpp&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;bitset&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;

using namespace std;

int main() {
  unsigned short b = BOOST_BINARY( 10010 );
  char buf[sizeof(b)*8+1];
  printf(""hex: %04x, dec: %u, oct: %06o, bin: %16s\n"", b, b, b, itoa(b, buf, 2));
  cout &lt;&lt; setfill('0') &lt;&lt;
    ""hex: "" &lt;&lt; hex &lt;&lt; setw(4) &lt;&lt; b &lt;&lt; "", "" &lt;&lt;
    ""dec: "" &lt;&lt; dec &lt;&lt; b &lt;&lt; "", "" &lt;&lt;
    ""oct: "" &lt;&lt; oct &lt;&lt; setw(6) &lt;&lt; b &lt;&lt; "", "" &lt;&lt;
    ""bin: "" &lt;&lt; bitset&lt; 16 &gt;(b) &lt;&lt; endl;
  return 0;
}
</code></pre>

<p>produces:</p>

<pre><code>hex: 0012, dec: 18, oct: 000022, bin:            10010
hex: 0012, dec: 18, oct: 000022, bin: 0000000000010010
</code></pre>

<p>Also read Herb Sutter's <em><a href=""http://www.gotw.ca/publications/mill19.htm"" rel=""nofollow noreferrer"">The String Formatters of Manor Farm</a></em> for an interesting discussion.</p>
","2611883"
"C++ Structure Initialization","280973","","<p>Is it possible to initialize structs in C++ as indicated below</p>

<pre><code>struct address {
    int street_no;
    char *street_name;
    char *city;
    char *prov;
    char *postal_code;
};
address temp_address =
    { .city = ""Hamilton"", .prov = ""Ontario"" };
</code></pre>

<p>The links <a href=""http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/strin.htm"" rel=""noreferrer"">here</a> and <a href=""https://stackoverflow.com/questions/5790534/static-structure-initialization-with-tags-in-c"">here</a> mention that it is possible to use this style only in C.  If so why is this not possible in C++?  Is there any underlying technical reason why it is not implemented in C++, or is it bad practice to use this style.  I like using this way of initializing because my struct is big and this style gives me clear readability of what value is assigned to which member.</p>

<p>Please share with me if there are other ways through which we can achieve the same readability.</p>

<p>I have referred the following links before posting this question</p>

<ol>
<li><a href=""http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/strin.htm"" rel=""noreferrer"">C/C++ for AIX</a></li>
<li><a href=""https://stackoverflow.com/questions/7700878/c-structure-initialization-with-variable"">C Structure Initialization with Variable</a></li>
<li><a href=""https://stackoverflow.com/questions/5790534/static-structure-initialization-with-tags-in-c"">Static structure initialization with tags in C++</a></li>
<li><a href=""https://stackoverflow.com/questions/9557464/c11-proper-structure-initialization"">C++11 Proper Structure Initialization</a></li>
</ol>
","<p>If you want to make it clear what each initializer value is, just split it up on multiple lines, with a comment on each:</p>

<pre><code>address temp_addres = {
  0,  // street_no
  nullptr,  // street_name
  ""Hamilton"",  // city
  ""Ontario"",  // prov
  nullptr,  // postal_code
};
</code></pre>
","11516847"
"When should you use a class vs a struct in C++?","280257","","<p>In what scenarios is it better to use a <code>struct</code> vs a <code>class</code> in C++?</p>
","<p>Differences between a <code>class</code> and a <code>struct</code> in C++ are that structs have default <code>public</code> members and bases and classes have default <code>private</code> members and bases. Both classes and structs can have a mixture of <code>public</code> and <code>private</code> members, can use inheritance and can have member functions.</p>

<p>I would recommend using structs as plain-old-data structures without any class-like features, and using classes as aggregate data structures with <code>private</code> data and member functions.</p>
","54596"
"Typedef function pointer?","279986","","<p>I'm learning how to dynamically load DLL's but what I don't understand is this line</p>

<pre><code>typedef void (*FunctionFunc)();
</code></pre>

<p>I have a few questions. If someone is able answer them I would be grateful.</p>

<ol>
<li>Why is <code>typedef</code> used?</li>
<li>The syntax looks odd; after <code>void</code> should there not be a function name or something? It looks like an anonymous function.</li>
<li>Is a function pointer created to store the memory address of a function?</li>
</ol>

<p>So I'm confused at the moment; can you clarify things for me?</p>
","<p><code>typedef</code> is a language construct that associates a name to a type.<br/>
You use it the same way you would use the original type, for instance</p>

<pre><code>  typedef int myinteger;
  typedef char *mystring;
  typedef void (*myfunc)();
</code></pre>

<p>using them like</p>

<pre><code>  myinteger i;   // is equivalent to    int i;
  mystring s;    // is the same as      char *s;
  myfunc f;      // compile equally as  void (*f)();
</code></pre>

<p>As you can see, you could just replace the <em>typedefed</em> name with its definition given above.<br/></p>

<p>The difficulty lies in the pointer to functions syntax and readability in C and C++, and the <code>typedef</code> can improve the readability of such declarations. However, the syntax is appropriate, since functions - unlike other simpler types - may have a return value and parameters, thus the sometimes lengthy and complex declaration of a pointer to function.</p>

<p>The readability may start to be really tricky with pointers to functions arrays, and some other even more indirect flavors.</p>

<p>To answer your three questions</p>

<ul>
<li><p><strong>Why is typedef used?</strong>
To ease the reading of the code - especially for pointers to functions, or structure names. </p></li>
<li><p><strong>The syntax looks odd (in the pointer to function declaration)</strong>
That syntax is not obvious to read, at least when beginning. Using a <code>typedef</code> declaration instead eases the reading</p></li>
<li><p><strong>Is a function pointer created to store the memory address of a function?</strong>
Yes, a function pointer stores the address of a function. This has nothing to do with the <code>typedef</code> construct which only ease the writing/reading of a program ; the compiler just expands the typedef definition before compiling the actual code.</p></li>
</ul>

<p>Example:</p>

<pre><code>typedef int (*t_somefunc)(int,int);

int product(int u, int v) {
  return u*v;
}

t_somefunc afunc = &amp;product;
...
int x2 = (*afunc)(123, 456); // call product() to calculate 123*456
</code></pre>
","4295495"
"How to get the number of characters in a std::string?","278538","","<p>How should I get the number of characters in a string in C++?</p>
","<p>If you're using a <code>std::string</code>, call <a href=""http://en.cppreference.com/w/cpp/string/basic_string/size"" rel=""noreferrer""><code>length()</code></a>:</p>

<pre><code>std::string str = ""hello"";
std::cout &lt;&lt; str &lt;&lt; "":"" &lt;&lt; str.length();
// Outputs ""hello:5""
</code></pre>

<p>If you're using a c-string, call <a href=""http://en.cppreference.com/w/cpp/string/byte/strlen"" rel=""noreferrer""><code>strlen()</code></a>.</p>

<pre><code>const char *str = ""hello"";
std::cout &lt;&lt; str &lt;&lt; "":"" &lt;&lt; strlen(str);
// Outputs ""hello:5""
</code></pre>

<p>Or, if you happen to like using Pascal-style strings (or f***** strings as Joel Spolsky <a href=""http://www.joelonsoftware.com/articles/fog0000000319.html"" rel=""noreferrer"">likes to call them</a> when they have a trailing NULL), just dereference the first character.</p>

<pre><code>const char *str = ""\005hello"";
std::cout &lt;&lt; str + 1 &lt;&lt; "":"" &lt;&lt; *str;
// Outputs ""hello:5""
</code></pre>
","905366"
"error: request for member '..' in '..' which is of non-class type","278491","","<p>I have a class with two constructors, one that takes no arguments and one that takes one argument.</p>

<p>Creating objects using the constructor that takes one argument works as expected. However, if I create objects using the constructor that takes no arguments, I get an error.</p>

<p>For instance, if I compile this code (using g++ 4.0.1)...</p>

<pre><code>class Foo
{
  public:
    Foo() {};
    Foo(int a) {};
    void bar() {};
};

int main()
{
  // this works...
  Foo foo1(1);
  foo1.bar();

  // this does not...
  Foo foo2();
  foo2.bar();

  return 0;
}
</code></pre>

<p>... I get the following error:</p>

<pre><code>nonclass.cpp: In function ‘int main(int, const char**)’:
nonclass.cpp:17: error: request for member ‘bar’ in ‘foo2’, which is of non-class type ‘Foo ()()’
</code></pre>

<p>Why is this, and how do I make it work?</p>
","<pre><code>Foo foo2();
</code></pre>

<p>change to</p>

<pre><code>Foo foo2;
</code></pre>

<p>You get the error because compiler thinks of</p>

<pre><code>Foo foo2()
</code></pre>

<p>as of function declaration with name 'foo2' and the return type 'Foo'.</p>

<p>But in that case If we change to <code>Foo foo2</code> , the compiler might show the error   <code>"" call of overloaded ‘Foo()’ is ambiguous""</code>.</p>
","877538"
"C++ static constant string (class member)","276329","","<p>I'd like to have a private static constant for a class (in this case a shape-factory).
I'd like to have something of the sort.</p>

<pre><code>class A {
   private:
      static const string RECTANGLE = ""rectangle"";
}
</code></pre>

<p>Unfortunately I get all sorts of error from the C++ (g++) compiler, such as:</p>

<blockquote>
  <p>ISO C++ forbids initialization of
  member ‘RECTANGLE’ </p>
  
  <p>invalid in-class initialization of static data member of non-integral type ‘std::string’ </p>
  
  <p>error: making ‘RECTANGLE’ static</p>
</blockquote>

<p>This tells me that this sort of member design is not compliant with the standard. How do you have a private literal constant (or perhaps public) without having to use a #define directive (I want to avoid the uglyness of data globality!)</p>

<p>Any help is appreciated. Thanks.</p>
","<p>You have to define your static member outside the class definition and provide the initializer there.</p>

<p>First</p>

<pre><code>// In a header file (if it is in a header file in your case)
class A {   
private:      
  static const string RECTANGLE;
};
</code></pre>

<p>and then</p>

<pre><code>// In one of the implementation files
const string A::RECTANGLE = ""rectangle"";
</code></pre>

<p>The syntax you were originally trying to use (initializer inside class definition) is only allowed with integral and enum types.</p>
","1563906"
"to_string is not a member of std, says g++ (mingw)","275799","","<p>I am making a small vocabulary remembering program where words would would be flashed at me randomly for meanings. I want to use standard C++ library as Bjarne Stroustroup tells us, but I have encountered a seemingly strange problem right out of the gate. </p>

<p>I want to change a <code>long</code> integer into <code>std::string</code> so as to be able to store it in a file. I have employed <code>to_string()</code> for the same. The problem is, when I compile it with g++ (version 4.7.0 as mentioned in its --‍version flag), it says:</p>

<pre><code>PS C:\Users\Anurag\SkyDrive\College\Programs&gt; g++ -std=c++0x ttd.cpp
ttd.cpp: In function 'int main()':
ttd.cpp:11:2: error: 'to_string' is not a member of 'std'
</code></pre>

<p>My program that gives this error is:</p>

<pre><code>#include &lt;string&gt;

int main()
{
    std::to_string(0);
    return 0;
}
</code></pre>

<p>But, I know it can't be because msdn library <a href=""http://msdn.microsoft.com/en-us/library/ee404875.aspx"" rel=""noreferrer"">clearly says</a> it exists and <a href=""https://stackoverflow.com/questions/7521617/c11-to-string-function-where"">an earlier question</a> on Stack Overflow (for g++ version 4.5) says that it can be turned on with the <code>-std=c++0x</code> flag. What am I doing wrong?</p>
","<p>This is a known bug under MinGW. <a href=""http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52015"" rel=""noreferrer"">Relevant Bugzilla</a>. In the comments section you can get a <a href=""http://tehsausage.com/mingw-to-string"" rel=""noreferrer"">patch</a> to make it work with MinGW.</p>

<p>This issue has been fixed in MinGW-w64 distros higher than GCC 4.8.0 provided by the <a href=""http://mingw-w64.org/doku.php"" rel=""noreferrer"">MinGW-w64 project</a>. Despite the name, the project provides toolchains for 32-bit along with 64-bit. The <a href=""http://nuwen.net/mingw.html"" rel=""noreferrer"">Nuwen MinGW distro</a> also solves this issue.</p>
","12975602"
"How to solve the error LNK2019: unresolved external symbol - function?","275493","","<p>I get this error, but I don't know how to fix it.</p>

<p>I'm using Visual Studio 2013. I made the solution name <strong>MyProjectTest</strong>
This is the structure of my test solution:</p>

<p><img src=""https://i.stack.imgur.com/uRUex.png"" alt=""The structure""></p>

<p>-<em>function.h</em></p>

<pre><code>#ifndef MY_FUNCTION_H
#define MY_FUNCTION_H

int multiple(int x, int y);
#endif
</code></pre>

<p><em>-function.cpp</em></p>

<pre><code>#include ""function.h""

int multiple(int x, int y){
    return x*y;
}
</code></pre>

<p>-<em>main.cpp</em></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include ""function.h""
using namespace std;

int main(){
    int a, b;
    cin &gt;&gt; a &gt;&gt; b;
    cout &lt;&lt; multiple(a, b) &lt;&lt; endl;

    system(""pause"");
    return 0;
}
</code></pre>

<p>I'm a beginner; this is a simple program and it runs without error.
I read in the internet and became interested in the unit test, so I created a test project:</p>

<p><em>File > New > Project... > Installed > Templates > Visual C++ > Test > Native Unit Test Project ></em></p>

<p>Name: <em>UnitTest1</em>
Solution: <em>Add to solution</em>
Then the location auto-switched to the path of the current open solution
This is the folder structure of the solution:</p>

<p><img src=""https://i.stack.imgur.com/cvsCE.png"" alt=""Folder structure""></p>

<p>I only edited file unittest1.cpp:</p>

<pre><code>#include ""stdafx.h""
#include ""CppUnitTest.h""
#include ""../MyProjectTest/function.h""

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace UnitTest1
{       
    TEST_CLASS(UnitTest1)
    {
    public:

        TEST_METHOD(TestEqual)
        {

            Assert::AreEqual(multiple(2, 3), 6);
            // TODO: Your test code here
        }

    };
}
</code></pre>

<p>But I get error LNK2019: unresolved external symbol.
I know that the implementation of function <em>multiple</em> is missing.
I tried to delete the function.cpp file and I replaced the declaration with the definition, and it run. But writing both declaration and definition in the same file is not recommended.
How can I fix this error without doing that? Should I replace with <code>#include ""../MyProjectTest/function.cpp""</code> in file unittest.cpp?
<em>(I'm not good at English very much. Thanks)</em></p>
","<p>One option would be to include <code>function.cpp</code> in your <code>UnitTest1</code> project, but that may not be the most ideal solution structure.  The short answer to your problem is that when building your <code>UnitTest1</code> project, the compiler and linker have no idea that <code>function.cpp</code> exists, and also have nothing to link that contains a definition of <code>multiple</code>.  A way to fix this is making use of linking libraries.</p>

<p>Since your unit tests are in a different project, I'm assuming your intention is to make that project a standalone unit-testing program.  With the functions you are testing located in another project, it's possible to build that project to either a dynamically or statically linked library.  Static libraries are linked to other programs at build time, and have the extension <code>.lib</code>, and dynamic libraries are linked at runtime, and have the extension <code>.dll</code>.  For my answer I'll prefer static libraries.</p>

<p>You can turn your first program into a static library by changing it in the projects properties.  There should be an option under the General tab where the project is set to build to an executable (<code>.exe</code>).  You can change this to <code>.lib</code>.  The <code>.lib</code> file will build to the same place as the <code>.exe</code>.</p>

<p>In your <code>UnitTest1</code> project, you can go to its properties, and under the Linker tab in the category Additional Library Directories, add the path to which <code>MyProjectTest</code> builds.  Then, for Additional Dependencies under the Linker - Input tab, add the name of your static library, most likely <code>MyProjectTest.lib</code>.</p>

<p>That should allow your project to build.  Note that by doing this, <code>MyProjectTest</code> will not be a standalone executable program unless you change its build properties as needed, which would be less than ideal.</p>
","19886691"
"How to make a SIMPLE C++ Makefile?","274709","","<p>We are required to use a Makefile to pull everything together for our project but our professor never showed us how to.</p>

<p>I only have ONE file, <code>a3driver.cpp</code>.
The driver imports a class from a location <code>""/user/cse232/Examples/example32.sequence.cpp""</code>.</p>

<p>That's it, everything else is contained with the <code>.cpp</code>.</p>

<p>How would I go about making a simple Makefile that creates an executable called <code>a3a.exe</code>?</p>
","<p>Copied from a wiki post I wrote for physics grad students.</p>

<p>Since this is for unix the executables have no extensions.</p>

<p>One thing to note is that <code>root-config</code> is a utility which provides the right compilation and linking flags; and the right libraries for building applications against root. That's just a detail related to the original audience for this document.</p>

<h2>Make Me Baby</h2>

<p><strong>or You Never Forget The First Time You Got Made</strong></p>

<p>A introductory discussion of make, and how to write a simple makefile</p>

<p><strong>What is Make? And Why Should I Care?</strong></p>

<p>The tool called make is a build dependency manager. That is, it takes care of knowing what commands need to be executed in what order to take your software project from a collection of source files, object files, libraries, headers, etc. etc.---some of which may have changed recently---and turning them into a correct up-to-date version of the program.</p>

<p>Actually you can use make for other things too, but I'm not going to talk about that.</p>

<p><strong>A Trivial Makefile</strong></p>

<p>Suppose that you have a directory containing: <code>tool</code> <code>tool.cc</code> <code>tool.o</code> <code>support.cc</code> <code>support.hh</code>, and  <code>support.o</code> which depend on <code>root</code> and are supposed to be compiled into a program called <code>tool</code>, and suppose that you've been hacking on the source files (which means the existing <code>tool</code> is now out of date) and want to compile the program.</p>

<p>To do this yourself you could</p>

<p>1) check if either <code>support.cc</code> or <code>support.hh</code> is newer than <code>support.o</code>, and if so run a command like</p>

<pre><code>g++ -g -c -pthread -I/sw/include/root support.cc
</code></pre>

<p>2) check if either <code>support.hh</code> or <code>tool.cc</code> are newer than <code>tool.o</code>, and if so run a command like</p>

<pre><code>g++ -g  -c -pthread -I/sw/include/root tool.cc
</code></pre>

<p>3) check if <code>tool.o</code> is newer than <code>tool</code>, and if so run a command like</p>

<pre><code>g++ -g tool.o support.o -L/sw/lib/root -lCore -lCint -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint \
  -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lz -L/sw/lib -lfreetype -lz -Wl,-framework,CoreServices \
  -Wl,-framework,ApplicationServices -pthread -Wl,-rpath,/sw/lib/root -lm -ldl
</code></pre>

<p>Phew! What a hassle! There is a lot to remember and several chances to make mistakes. (BTW-- The particulars of the command lines exhibited here depend on our software environment. These ones work on my computer.)</p>

<p>Of course, you could just run all three commands every time. That would work, but doesn't scale well to a substantial piece of software (like DOGS which takes more than 15 minutes to compile from the ground up on my MacBook).</p>

<p>Instead you could write a file called <code>makefile</code> like this:</p>

<pre><code>tool: tool.o support.o
    g++ -g -o tool tool.o support.o -L/sw/lib/root -lCore -lCint -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint \
        -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lz -L/sw/lib -lfreetype -lz -Wl,-framework,CoreServices \
        -Wl,-framework,ApplicationServices -pthread -Wl,-rpath,/sw/lib/root -lm -ldl

tool.o: tool.cc support.hh
    g++ -g  -c -pthread -I/sw/include/root tool.cc

support.o: support.hh support.cc
    g++ -g -c -pthread -I/sw/include/root support.cc
</code></pre>

<p>and just type <code>make</code> at the command line. which will perform the three steps shown above automatically.</p>

<p>The un-indented lines here have the form <em>""target: dependencies""</em> and tell make that the associated commands (indented lines) should be run if any of the dependencies are newer than the target. That is the dependency lines describe the logic of what needs to be rebuilt to accommodate changes in various files. If <code>support.cc</code> changes that means that <code>support.o</code> must be rebuilt, but <code>tool.o</code> can be left alone. When <code>support.o</code> changes <code>tool</code> must be rebuilt.</p>

<p>The commands associated with each dependency line are set off with a tab (see below) should modify the target (or at least touch it to update the modification time).</p>

<h2>Variables, Built In Rules, and Other Goodies</h2>

<p>At this point, our makefile is simply remembering the work that needs doing, but we still had to figure out and type each and every needed command in its entirety. It does not have to be that way: make is a powerful language with variables, text manipulation functions, and a whole slew of built-in rules which can make this much easier for us.</p>

<p><strong>Make Variables</strong></p>

<p>The syntax for accessing a make variable is <code>$(VAR)</code>.</p>

<p>The syntax for assigning to a make variable is: <code>VAR = A text value of some kind</code>
(or <code>VAR := A different text value but ignore this for the moment</code>).</p>

<p>You can use variables in rules like this improved version of our makefile:</p>

<pre><code>CPPFLAGS=-g -pthread -I/sw/include/root 
LDFLAGS=-g
LDLIBS=-L/sw/lib/root -lCore -lCint -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint \
       -lPostscript -lMatrix -lPhysics -lMathCore -lThread -lz -L/sw/lib -lfreetype -lz \
       -Wl,-framework,CoreServices -Wl,-framework,ApplicationServices -pthread -Wl,-rpath,/sw/lib/root \
       -lm -ldl

tool: tool.o support.o
    g++ $(LDFLAGS) -o tool tool.o support.o $(LDLIBS) 

tool.o: tool.cc support.hh
    g++ $(CPPFLAGS) -c tool.cc

support.o: support.hh support.cc
    g++ $(CPPFLAGS) -c support.cc
</code></pre>

<p>which is a little more readable, but still requires a lot of typing</p>

<p><strong>Make Functions</strong></p>

<p>GNU make supports a variety of functions for accessing information from the filesystem or other commands on the system. In this case we are interested in <code>$(shell ...)</code> which expands to the output of the argument(s), and <code>$(subst opat,npat,text)</code> which replaces all instances of <code>opat</code> with <code>npat</code> in text.</p>

<p>Taking advantage of this gives us:</p>

<pre><code>CPPFLAGS=-g $(shell root-config --cflags)
LDFLAGS=-g $(shell root-config --ldflags)
LDLIBS=$(shell root-config --libs)

SRCS=tool.cc support.cc
OBJS=$(subst .cc,.o,$(SRCS))

tool: $(OBJS)
    g++ $(LDFLAGS) -o tool tool.o support.o $(LDLIBS) 

tool.o: tool.cc support.hh
    g++ $(CPPFLAGS) -c tool.cc

support.o: support.hh support.cc
    g++ $(CPPFLAGS) -c support.cc
</code></pre>

<p>which is easier to type and much more readable.</p>

<p>Notice that</p>

<ol>
<li>We are still stating explicitly the dependencies for each object file and the final executable</li>
<li>We've had to explicitly type the compilation rule for both source files </li>
</ol>

<p><strong>Implicit and Pattern Rules</strong></p>

<p>We would generally expect that all c++ source files should be treated the same way, and make provides three ways to state this</p>

<ol>
<li>suffix rules (considered obsolete in GNU make, but kept for backwards compatibility)</li>
<li>implicit rules</li>
<li>pattern rules </li>
</ol>

<p>Implicit rules are built in, and a few will be discussed below. Pattern rules are specified in a form like</p>

<pre><code>%.o: %.c 
    $(CC) $(CFLAGS) $(CPPFLAGS) -c $&lt;
</code></pre>

<p>which means that object files are generated from c source files by running the command shown, where the ""automatic"" variable <code>$&lt;</code> expands to the name of the first dependency.</p>

<p><strong>Built-in Rules</strong></p>

<p>Make has a whole host of built in rules that mean that very often, a project can be compile by a very simple makefile, indeed.</p>

<p>The GNU make built in rule for c source files is the one exhibited above. Similarly we create object files from c++ source files with a rule like <code>$(CXX) -c $(CPPFLAGS) $(CFLAGS)</code></p>

<p>Single object files are linked using <code>$(LD) $(LDFLAGS) n.o $(LOADLIBES) $(LDLIBS)</code>, but this won't work in our case, because we want to link multiple object files.</p>

<p><strong>Variables Used By Built-in Rules</strong></p>

<p>The built in rules use a  set of standard variables that allow you to specify local environment information (like where to find the ROOT include files) without re-writing all the rules. The ones most likely to be interesting to us are:</p>

<ul>
<li><code>CC</code> -- the c compiler to use</li>
<li><code>CXX</code> -- the c++ compiler to use</li>
<li><code>LD</code> -- the linker to use</li>
<li><code>CFLAGS</code> -- compilation flag for c source files</li>
<li><code>CXXFLAGS</code> -- compilation flags for c++ source files</li>
<li><code>CPPFLAGS</code> -- flags for the c-preprocessor (typically include file paths and symbols defined on the command line), used by c and c++</li>
<li><code>LDFLAGS</code> -- linker flags</li>
<li><code>LDLIBS</code> -- libraries to link </li>
</ul>

<p><strong>A Basic Makefile</strong></p>

<p>By taking advantage of the built in rules we can simplify our makefile to:</p>

<pre><code>CC=gcc
CXX=g++
RM=rm -f
CPPFLAGS=-g $(shell root-config --cflags)
LDFLAGS=-g $(shell root-config --ldflags)
LDLIBS=$(shell root-config --libs)

SRCS=tool.cc support.cc
OBJS=$(subst .cc,.o,$(SRCS))

all: tool

tool: $(OBJS)
    $(CXX) $(LDFLAGS) -o tool $(OBJS) $(LDLIBS) 

tool.o: tool.cc support.hh

support.o: support.hh support.cc

clean:
    $(RM) $(OBJS)

distclean: clean
    $(RM) tool
</code></pre>

<p>We have also added several standard targets that perform special actions (like cleaning up the source directory).</p>

<p>Note that when make is invoked without an argument, it uses the first target found in the file (in this case all), but you can also name the target to get which is what makes <code>make clean</code> remove the object files in this case.</p>

<p>We still have all the dependencies hard-coded.</p>

<p><strong>Some Mysterious Improvements</strong></p>

<pre><code>CC=gcc
CXX=g++
RM=rm -f
CPPFLAGS=-g $(shell root-config --cflags)
LDFLAGS=-g $(shell root-config --ldflags)
LDLIBS=$(shell root-config --libs)

SRCS=tool.cc support.cc
OBJS=$(subst .cc,.o,$(SRCS))

all: tool

tool: $(OBJS)
    $(CXX) $(LDFLAGS) -o tool $(OBJS) $(LDLIBS) 

depend: .depend

.depend: $(SRCS)
    $(RM) ./.depend
    $(CXX) $(CPPFLAGS) -MM $^&gt;&gt;./.depend;

clean:
    $(RM) $(OBJS)

distclean: clean
    $(RM) *~ .depend

include .depend
</code></pre>

<p>Notice that</p>

<ol>
<li>There are no longer any dependency lines for the source files!?!</li>
<li>There is some strange magic related to .depend and depend</li>
<li>If you do <code>make</code> then <code>ls -A</code> you see a file named <code>.depend</code> which contains things that look like make dependency lines </li>
</ol>

<p><strong>Other Reading</strong></p>

<ul>
<li><a href=""http://www.gnu.org/software/make/manual/make.html"" rel=""noreferrer"">GNU make manual</a></li>
<li><a href=""http://miller.emu.id.au/pmiller/books/rmch/"" rel=""noreferrer"">Recursive Make Considered Harmful</a> on a common way of writing makefiles that is less than optimal, and how to avoid it.</li>
</ul>

<p><strong>Know Bugs and Historical Notes</strong></p>

<p>The input language for make is whitespace sensitive. In particular <em>the action lines following dependencies must start with a tab</em>. But a series of spaces can look the same (and indeed there are editors that will silently convert tabs to spaces or vice versa), which results in a make file that looks right and still doesn't work. This was identified as a bug early on but (<a href=""http://www.catb.org/esr/writings/taoup/html/ch15s04.html"" rel=""noreferrer"">the story goes</a>) was not fixed because there were already 10 users.</p>
","2481326"
"How to read line by line or a whole text file at once?","272596","","<p>I'm in a tutorial which introduces files (how to read and write from\to file)</p>

<p>First of all, this is not a homework, this is just general help I'm seeking.</p>

<p>I know how to read one word at a time, but I don't know how to read one line at a time or how to read the whole text file.</p>

<p>What if my file contains 1000 words? It is not practical to read each word.</p>

<p>My text file named (Read) contains the following:</p>

<p>I love to play games
I love reading
I have 2 books</p>

<p>This is what I have accomplished so far:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;

using namespace std;
int main (){

  ifstream inFile;
  inFile.open(""Read.txt"");

  inFile &gt;&gt;
</code></pre>

<p>Is there any possible way to read the whole file at once, instead of reading each line or each word separate?</p>
","<p>You can use <code>std::getline</code> :</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;string&gt;

int main() 
{ 
    std::ifstream file(""Read.txt"");
    std::string str; 
    while (std::getline(file, str))
    {
        // Process str
    }
}
</code></pre>

<p>Also note that it's better you just construct the file stream with the file names in it's constructor rather than explicitly opening (same goes for closing, just let the destructor do the work).</p>

<p>Further documentation about <code>std::string::getline()</code> can be read at <a href=""http://en.cppreference.com/w/cpp/string/basic_string/getline"">CPP Reference</a>.</p>

<p>Probably the easiest way to read a whole text file is just to concatenate those retrieved lines.</p>

<pre><code>std::ifstream file(""Read.txt"");
std::string str;
std::string file_contents;
while (std::getline(file, str))
{
  file_contents += str;
  file_contents.push_back('\n');
}  
</code></pre>
","13035743"
"How do you clear a stringstream variable?","272025","","<p>I've tried several things already,</p>

<pre><code>std::stringstream m;
m.empty();
m.clear();
</code></pre>

<p>both of which don't work.</p>
","<p>For all the standard library types the member function <code>empty()</code> is a query, not a command, i.e. it means ""are you empty?"" not ""please throw away your contents"".</p>

<p>The <code>clear()</code> member function is inherited from <code>ios</code> and is used to clear the error state of the stream, e.g. if a file stream has the error state set to <code>eofbit</code> (end-of-file), then calling <code>clear()</code> will set the error state back to <code>goodbit</code> (no error).</p>

<p>For clearing the contents of a <code>stringstream</code>, using:</p>

<pre><code>m.str("""");
</code></pre>

<p>is correct, although using:</p>

<pre><code>m.str(std::string());
</code></pre>

<p>is technically more efficient, because you avoid invoking the <code>std::string</code> constructor that takes <code>const char*</code>. But any compiler these days should be able to generate the same code in both cases - so I would just go with whatever is more readable.</p>
","20792"
"What are move semantics?","270977","","<p>I just finished listening to the Software Engineering radio <a href=""http://www.se-radio.net/2010/04/episode-159-c-0x-with-scott-meyers/"" rel=""noreferrer"">podcast interview with Scott Meyers</a> regarding <a href=""http://en.wikipedia.org/wiki/C++11"" rel=""noreferrer"">C++0x</a>. Most of the new features made sense to me, and I am actually excited about C++0x now, with the exception of one. I still don't get <em>move semantics</em>... What are they exactly?</p>
","<p>I find it easiest to understand move semantics with example code. Let's start with a very simple string class which only holds a pointer to a heap-allocated block of memory:</p>

<pre><code>#include &lt;cstring&gt;
#include &lt;algorithm&gt;

class string
{
    char* data;

public:

    string(const char* p)
    {
        size_t size = strlen(p) + 1;
        data = new char[size];
        memcpy(data, p, size);
    }
</code></pre>

<p>Since we chose to manage the memory ourselves, we need to follow the <a href=""http://en.wikipedia.org/wiki/Rule_of_three_%28C++_programming%29"" rel=""noreferrer"">rule of three</a>. I am going to defer writing the assignment operator and only implement the destructor and the copy constructor for now:</p>

<pre><code>    ~string()
    {
        delete[] data;
    }

    string(const string&amp; that)
    {
        size_t size = strlen(that.data) + 1;
        data = new char[size];
        memcpy(data, that.data, size);
    }
</code></pre>

<p>The copy constructor defines what it means to copy string objects. The parameter <code>const string&amp; that</code> binds to all expressions of type string which allows you to make copies in the following examples:</p>

<pre><code>string a(x);                                    // Line 1
string b(x + y);                                // Line 2
string c(some_function_returning_a_string());   // Line 3
</code></pre>

<p>Now comes the key insight into move semantics. Note that only in the first line where we copy <code>x</code> is this deep copy really necessary, because we might want to inspect <code>x</code> later and would be very surprised if <code>x</code> had changed somehow. Did you notice how I just said <code>x</code> three times (four times if you include this sentence) and meant the <em>exact same object</em> every time? We call expressions such as <code>x</code> ""lvalues"".</p>

<p>The arguments in lines 2 and 3 are not lvalues, but rvalues, because the underlying string objects have no names, so the client has no way to inspect them again at a later point in time.
rvalues denote temporary objects which are destroyed at the next semicolon (to be more precise: at the end of the full-expression that lexically contains the rvalue). This is important because during the initialization of <code>b</code> and <code>c</code>, we could do whatever we wanted with the source string, and <em>the client couldn't tell a difference</em>!</p>

<p>C++0x introduces a new mechanism called ""rvalue reference"" which, among other things,
allows us to detect rvalue arguments via function overloading. All we have to do is write a constructor with an rvalue reference parameter. Inside that constructor we can do <em>anything we want</em> with the source, as long as we leave it in <em>some</em> valid state:</p>

<pre><code>    string(string&amp;&amp; that)   // string&amp;&amp; is an rvalue reference to a string
    {
        data = that.data;
        that.data = nullptr;
    }
</code></pre>

<p>What have we done here? Instead of deeply copying the heap data, we have just copied the pointer and then set the original pointer to null. In effect, we have ""stolen"" the data that originally belonged to the source string. Again, the key insight is that under no circumstance could the client detect that the source had been modified. Since we don't really do a copy here, we call this constructor a ""move constructor"". Its job is to move resources from one object to another instead of copying them.</p>

<p>Congratulations, you now understand the basics of move semantics! Let's continue by implementing the assignment operator. If you're unfamiliar with the <a href=""https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom"">copy and swap idiom</a>, learn it and come back, because it's an awesome C++ idiom related to exception safety.</p>

<pre><code>    string&amp; operator=(string that)
    {
        std::swap(data, that.data);
        return *this;
    }
};
</code></pre>

<p>Huh, that's it? ""Where's the rvalue reference?"" you might ask. ""We don't need it here!"" is my answer :)</p>

<p>Note that we pass the parameter <code>that</code> <em>by value</em>, so <code>that</code> has to be initialized just like any other string object. Exactly how is <code>that</code> going to be initialized? In the olden days of <a href=""http://en.wikipedia.org/wiki/C++#Standardization"" rel=""noreferrer"">C++98</a>, the answer would have been ""by the copy constructor"". In C++0x, the compiler chooses between the copy constructor and the move constructor based on whether the argument to the assignment operator is an lvalue or an rvalue.</p>

<p>So if you say <code>a = b</code>, the <em>copy constructor</em> will initialize <code>that</code> (because the expression <code>b</code> is an lvalue), and the assignment operator swaps the contents with a freshly created, deep copy. That is the very definition of the copy and swap idiom -- make a copy, swap the contents with the copy, and then get rid of the copy by leaving the scope. Nothing new here.</p>

<p>But if you say <code>a = x + y</code>, the <em>move constructor</em> will initialize <code>that</code> (because the expression <code>x + y</code> is an rvalue), so there is no deep copy involved, only an efficient move.
<code>that</code> is still an independent object from the argument, but its construction was trivial,
since the heap data didn't have to be copied, just moved. It wasn't necessary to copy it because <code>x + y</code> is an rvalue, and again, it is okay to move from string objects denoted by rvalues.</p>

<p>To summarize, the copy constructor makes a deep copy, because the source must remain untouched.
The move constructor, on the other hand, can just copy the pointer and then set the pointer in the source to null. It is okay to ""nullify"" the source object in this manner, because the client has no way of inspecting the object again.</p>

<p>I hope this example got the main point across. There is a lot more to rvalue references and move semantics which I intentionally left out to keep it simple. If you want more details please see <a href=""https://stackoverflow.com/a/11540204/179917"">my supplementary answer</a>.</p>
","3109981"
"C++ random float number generation","269812","","<p>How do I generate random floats in C++?</p>

<p>I thought I could take the integer rand and divide it by something, would that be adequate enough?</p>
","<p><code>rand()</code> can be used to generate pseudo-random numbers in C++.  In combination with <code>RAND_MAX</code> and a little math, you can generate random numbers in any arbitrary interval you choose.  This is sufficient for learning purposes and toy programs.  If you need <em>truly</em> random numbers with normal distribution, you'll need to employ a more advanced method.</p>

<hr>

<p>This will generate a number from 0.0 to 1.0, inclusive.</p>

<pre><code>float r = static_cast &lt;float&gt; (rand()) / static_cast &lt;float&gt; (RAND_MAX);
</code></pre>

<p>This will generate a number from 0.0 to some arbitrary <code>float</code>, <code>X</code>:</p>

<pre><code>float r2 = static_cast &lt;float&gt; (rand()) / (static_cast &lt;float&gt; (RAND_MAX/X));
</code></pre>

<p>This will generate a number from some arbitrary <code>LO</code> to some arbitrary <code>HI</code>:</p>

<pre><code>float r3 = LO + static_cast &lt;float&gt; (rand()) /( static_cast &lt;float&gt; (RAND_MAX/(HI-LO)));
</code></pre>

<hr>

<p>Note that the <code>rand()</code> function will often not be sufficient if you need truly random numbers.</p>

<hr>

<p>Before calling <code>rand()</code>, you must first ""seed"" the random number generator by calling <code>srand()</code>.  This should be done once during your program's run -- not once every time you call <code>rand()</code>.  This is often done like this:</p>

<pre><code>srand (static_cast &lt;unsigned&gt; (time(0)));
</code></pre>

<p>In order to call <code>rand</code> or <code>srand</code> you must <code>#include &lt;cstdlib&gt;</code>.</p>

<p>In order to call <code>time</code>, you must <code>#include &lt;ctime&gt;</code>.</p>
","686373"
"Why are #ifndef and #define used in C++ header files?","269168","","<p>I have been seeing code like this usually in the start of header files:</p>

<pre><code>#ifndef HEADERFILE_H
#define HEADERFILE_H
</code></pre>

<p>And at the end of the file is</p>

<pre><code>#endif
</code></pre>

<p>What is the purpose of this?</p>
","<p>Those are called <a href=""http://en.wikipedia.org/wiki/Include_guard"" rel=""noreferrer"">#include guards</a>.</p>

<p>Once the header is included, it checks if a unique value (in this case <code>HEADERFILE_H</code>) is defined. Then if it's not defined, it defines it and continues to the rest of the page.</p>

<p>When the code is included again, the first <code>ifndef</code> fails, resulting in a blank file.</p>

<p>That prevents double declaration of any identifiers such as types, enums and static variables.</p>
","1653965"
"Callback functions in c++","269011","","<p>In c++, when and how do you use a callback function?</p>

<p><strong>EDIT:</strong><br>
I would like to see a simple example to write a callback function.</p>
","<p><em>Note: Most of the answers cover function pointers which is one possibility to achieve ""callback"" logic in C++, but as of today not the most favourable one I think.</em></p>

<h1>What are callbacks(?) and why to use them(!)</h1>

<p>A callback is a <em>callable</em> (see further down) accepted by a class or function, used to customize the current logic depending on that callback.</p>

<p>One reason to use callbacks is to write <strong>generic</strong> code which is independant from the logic in the called function and can be reused with different callbacks.</p>

<p>Many functions of the standard algorithms library <code>&lt;algorithm&gt;</code> use callbacks. For example the <code>for_each</code> algorithm applies an unary callback to every item in a range of iterators:</p>

<pre><code>template&lt;class InputIt, class UnaryFunction&gt;
UnaryFunction for_each(InputIt first, InputIt last, UnaryFunction f)
{
  for (; first != last; ++first) {
    f(*first);
  }
  return f;
}
</code></pre>

<p>which can be used to first increment and then print a vector by passing appropriate callables for example:</p>

<pre><code>std::vector&lt;double&gt; v{ 1.0, 2.2, 4.0, 5.5, 7.2 };
double r = 4.0;
std::for_each(v.begin(), v.end(), [&amp;](double &amp; v) { v += r; });
std::for_each(v.begin(), v.end(), [](double v) { std::cout &lt;&lt; v &lt;&lt; "" ""; });
</code></pre>

<p>which prints</p>

<pre><code>5 6.2 8 9.5 11.2
</code></pre>

<p>Another application of callbacks is the notification of callers of certain events which enables a certain amount of static / compile time flexibility.</p>

<p>Personally, I use a local optimization library that uses two different callbacks:</p>

<ul>
<li>The first callback is called if a function value and the gradient based on a vector of input values is required (logic callback: function value determination / gradient derivation).</li>
<li>The second callback is called once for each algorithm step and receives certain information about the convergence of the algorithm (notification callback).</li>
</ul>

<p>Thus, the library designer is not in charge of deciding what happens with the information that is given to the programmer 
via the notification callback and he needn't worry about how to acutally determine function values becasue they're provided by the logic callback. Getting those things right is a task due to the library user and keeps the library slim and more generic. </p>

<p>Furthermore, callbacks can enable dynamic runtime behaviour.</p>

<p>Imagine some kind of game engine class which has a function that is fired, each time the users presses a button on his keyboard and a set of functions that control your game behaviour.
With callbacks you can (re)decide at runtime which action will be taken.</p>

<pre><code>void player_jump();
void player_crouch();

class game_core
{
    std::array&lt;void(*)(), total_num_keys&gt; actions;
    // 
    void key_pressed(unsigned key_id)
    {
        if(actions[key_id]) actions[key_id]();
    }
    // update keybind from menu
    void update_keybind(unsigned key_id, void(*new_action)())
    {
        actions[key_id] = new_action;
    }
};
</code></pre>

<p>Here the function <code>key_pressed</code> uses the callbacks stored in <code>actions</code> to obtain the desired behaviour when a certain key is pressed.
If the player chooses to change the button for jumping, the engine can call</p>

<pre><code>game_core_instance.update_keybind(newly_selected_key, &amp;player_jump);
</code></pre>

<p>and thus change the behaviour of a call to <code>key_pressed</code> (which the calls <code>player_jump</code>) once this button is pressed the next time ingame.</p>

<h1>What are <em>callables</em> in C++(11)?</h1>

<p>See <a href=""http://en.cppreference.com/w/cpp/concept/Callable"">C++ concepts: Callable</a> on cppreference for a more formal description.</p>

<p>Callback functionality can be realized in several ways in C++(11) since several different things turn out to be <strong>callable*</strong>:</p>

<ul>
<li>Function pointers (including pointers to member functions)</li>
<li><code>std::function</code> objects</li>
<li>Lambda expressions</li>
<li>Bind expressions</li>
<li>Function objects (classes with overloaded function call operator <code>operator()</code>)</li>
</ul>

<p><sub>* <em>Note: Pointer to data members are callable as well but no function is called at all.</em></sub></p>

<h1>Several important ways to write <em>callbacks</em> in detail</h1>

<ul>
<li>X.1 ""Writing"" a callback in this post means the syntax to declare and name the callback type.</li>
<li>X.2 ""Calling"" a callback refers to the syntax to call those objects.</li>
<li>X.3 ""Using"" a callback means the syntax when passing arguments to a function using a callback.</li>
</ul>

<p><em>Note: As of C++17, a call like <code>f(...)</code> can be written as <code>std::invoke(f, ...)</code> which also handles the pointer to member case.</em></p>

<h2>1. Function pointers</h2>

<p>A function pointer is the 'simplest' (in terms of generality; in terms of readability arguably the worst) type a callback can have.</p>

<p>Let's have a simple function <code>foo</code>:</p>

<pre><code>int foo (int x) { return 2+x; }
</code></pre>

<h3>1.1 Writing a function pointer / type notation</h3>

<p>A <strong>function pointer type</strong> has the notation </p>

<pre><code>return_type (*)(paramter_type_1, paramter_type_2, paramter_type_3)
// i.e. a pointer to foo has the type:
int (*)(int)
</code></pre>

<p>where a <strong>named function pointer</strong> type will look like</p>

<pre><code>return_type (* name) (paramter_type_1, paramter_type_2, paramter_type_3)

// i.e. f_int_t is a type: function pointer taking one int argument, returning int
typedef int (*f_int_t) (int); 

// foo_p is a pointer to function taking int returning int
// initialized by pointer to function foo taking int returning int
int (* foo_p)(int) = &amp;foo; 
// can alternatively be written as 
f_int_t foo_p = &amp;foo;
</code></pre>

<p>The <code>using</code> declaration gives us the option to make things a little bit more readable, since the <code>typedef</code> for <code>f_int_t</code> can also be written as:</p>

<pre><code>using f_int_t = int(*)(int);
</code></pre>

<p>Where (at least for me) it is clearer that <code>f_int_t</code> is the new type alias and recognition of the function pointer type is also easier</p>

<p>And a declaration of a <strong>function using a callback of function pointer type</strong> will be: </p>

<pre><code>// foobar having a callback argument named moo of type 
// pointer to function returning int taking int as its argument
int foobar (int x, int (*moo)(int));
// if f_int is the function pointer typedef from above we can also write foobar as:
int foobar (int x, f_int_t moo);
</code></pre>

<h3>1.2 Callback call notation</h3>

<p>The call notation follows the simple function call syntax:</p>

<pre><code>int foobar (int x, int (*moo)(int))
{
    return x + moo(x); // function pointer moo called using argument x
}
// analog
int foobar (int x, f_int_t moo)
{
    return x + moo(x); // function pointer moo called using argument x
}
</code></pre>

<h3>1.3 Callback use notation and compatible types</h3>

<p>A callback function taking a function pointer can be called using function pointers.</p>

<p>Using a function that takes a function pointer callback is rather simple:</p>

<pre><code> int a = 5;
 int b = foobar(a, foo); // call foobar with pointer to foo as callback
 // can also be
 int b = foobar(a, &amp;foo); // call foobar with pointer to foo as callback
</code></pre>

<h3>1.4 Example</h3>

<p>A function ca be written that doesn't rely on how the callback works:</p>

<pre><code>void tranform_every_int(int * v, unsigned n, int (*fp)(int))
{
  for (unsigned i = 0; i &lt; n; ++i)
  {
    v[i] = fp(v[i]);
  }
}
</code></pre>

<p>where possible callbacks could be</p>

<pre><code>int double_int(int x) { return 2*x; }
int square_int(int x) { return x*x; }
</code></pre>

<p>used like</p>

<pre><code>int a[5] = {1, 2, 3, 4, 5};
tranform_every_int(&amp;a[0], 5, double_int);
// now a == {2, 4, 6, 8, 10};
tranform_every_int(&amp;a[0], 5, square_int);
// now a == {4, 16, 36, 64, 100};
</code></pre>

<h2>2. Pointer to member function</h2>

<p>A pointer to member function (of some class <code>C</code>) is a special type of (and even more complex) function pointer which requires an object of type <code>C</code> to operate on.</p>

<pre><code>struct C
{
    int y;
    int foo(int x) const { return x+y; }
};
</code></pre>

<h3>2.1 Writing pointer to member function / type notation</h3>

<p>A <strong>pointer to member function type</strong> for some class <code>T</code> has the notation </p>

<pre><code>// can have more or less parameters
return_type (T::*)(paramter_type_1, paramter_type_2, paramter_type_3)
// i.e. a pointer to C::foo has the type
int (C::*) (int)
</code></pre>

<p>where a <strong>named pointer to member function</strong> will -in analogy to the function pointer- look like this:</p>

<pre><code>return_type (T::* name) (paramter_type_1, paramter_type_2, paramter_type_3)

// i.e. a type `f_C_int` representing a pointer to member function of `C`
// taking int returning int is:
typedef int (C::* f_C_int_t) (int x); 

// The type of C_foo_p is a pointer to member function of C taking int returning int
// Its value is initialized by a pointer to foo of C
int (C::* C_foo_p)(int) = &amp;C::foo;
// which can also be written using the typedef:
f_C_int_t C_foo_p = &amp;C::foo;
</code></pre>

<p>Example: Declaring a function taking a <strong>pointer to member function callback</strong> as one of its arguments:</p>

<pre><code>// C_foobar having an argument named moo of type pointer to member function of C
// where the callback returns int taking int as its argument
// also needs an object of type c
int C_foobar (int x, C const &amp;c, int (C::*moo)(int));
// can equivalently declared using the typedef above:
int C_foobar (int x, C const &amp;c, f_C_int_t moo);
</code></pre>

<h3>2.2 Callback call notation</h3>

<p>The pointer to member function of <code>C</code> can be invoked, with respect to an object of type <code>C</code> by using member access operations on the dereferenced pointer.
<em>Note: Parenthesis required!</em></p>

<pre><code>int C_foobar (int x, C const &amp;c, int (C::*moo)(int))
{
    return x + (c.*moo)(x); // function pointer moo called for object c using argument x
}
// analog
int C_foobar (int x, C const &amp;c, f_C_int_t moo)
{
    return x + (c.*moo)(x); // function pointer moo called for object c using argument x
}
</code></pre>

<p><em>Note: If a pointer to <code>C</code> is available the syntax is equivalent (where the pointer to <code>C</code> must be dereferenced as well):</em></p>

<pre><code>int C_foobar_2 (int x, C const * c, int (C::*meow)(int))
{
    if (!c) return x;
    // function pointer meow called for object *c using argument x
    return x + ((*c).*meow)(x); 
}
// or equivalent:
int C_foobar_2 (int x, C const * c, int (C::*meow)(int))
{
    if (!c) return x;
    // function pointer meow called for object *c using argument x
    return x + (c-&gt;*meow)(x); 
}
</code></pre>

<h3>2.3 Callback use notation and compatible types</h3>

<p>A callback function taking a member function pointer of class <code>T</code> can be called using a member function pointer of class <code>T</code>.</p>

<p>Using a function that takes a pointer to member function callback is -in analogy to function pointers- quite simple as well:</p>

<pre><code> C my_c{2}; // aggregate initialization
 int a = 5;
 int b = C_foobar(a, my_c, &amp;C::foo); // call C_foobar with pointer to foo as its callback
</code></pre>

<h2>3. <code>std::function</code> objects (header <code>&lt;functional&gt;</code>)</h2>

<p>The <code>std::function</code> class is a polymorphic function wrapper to store, copy or invoke callables.</p>

<h3>3.1 Writing a <code>std::function</code> object / type notation</h3>

<p>The type of a <code>std::function</code> object storing a callable looks like:</p>

<pre><code>std::function&lt;return_type(paramter_type_1, paramter_type_2, paramter_type_3)&gt;

// i.e. using the above function declaration of foo:
std::function&lt;int(int)&gt; stdf_foo = &amp;foo;
// or C::foo:
std::function&lt;int(const C&amp;, int)&gt; stdf_C_foo = &amp;C::foo;
</code></pre>

<h3>3.2 Callback call notation</h3>

<p>The class <code>std::function</code> has <code>operator()</code> defined which can be used to invoke its target.</p>

<pre><code>int stdf_foobar (int x, std::function&lt;int(int)&gt; moo)
{
    return x + moo(x); // std::function moo called
}
// or 
int stdf_C_foobar (int x, C const &amp;c, std::function&lt;int(C const &amp;, int)&gt; moo)
{
    return x + moo(c, x); // std::function moo called using c and x
}
</code></pre>

<h3>3.3 Callback use notation and compatible types</h3>

<p>The <code>std::function</code> callback is more generic than function pointers or pointer to member function since different types can be passed and implicitly converted into a <code>std::function</code> object.</p>

<p><strong>3.3.1 Function pointers and pointers to member functions</strong></p>

<p>A function pointer</p>

<pre><code>int a = 2;
int b = stdf_foobar(a, &amp;foo);
// b == 6 ( 2 + (2+2) )
</code></pre>

<p>or a pointer to member function</p>

<pre><code>int a = 2;
C my_c{7}; // aggregate initialization
int b = stdf_C_foobar(a, c, &amp;C::foo);
// b == 11 == ( 2 + (7+2) )
</code></pre>

<p>can be used.</p>

<p><strong>3.3.2 Lambda expressions</strong></p>

<p>An unnamed closure from a lambda expression can be stored in a <code>std::function</code> object:</p>

<pre><code>int a = 2;
int c = 3;
int b = stdf_foobar(a, [c](int x) -&gt; int { return 7+c*x; });
// b == 15 ==  a + (7*c*a) == 2 + (7+3*2)
</code></pre>

<p><strong>3.3.3 <code>std::bind</code> expressions</strong></p>

<p>The result of a <code>std::bind</code> expression can be passed. For example by binding parameters to a function pointer call:</p>

<pre><code>int foo_2 (int x, int y) { return 9*x + y; }
using std::placeholders::_1;

int a = 2;
int b = stdf_foobar(a, std::bind(foo_2, _1, 3));
// b == 23 == 2 + ( 9*2 + 3 )
int c = stdf_foobar(a, std::bind(foo_2, 5, _1));
// c == 49 == 2 + ( 9*5 + 2 )
</code></pre>

<p>Where also objects can be bound as the object for the invokation of pointer to member functions:</p>

<pre><code>int a = 2;
C const my_c{7}; // aggregate initialization
int b = stdf_foobar(a, std::bind(&amp;C::foo, my_c, _1));
// b == 1 == 2 + ( 2 + 7 )
</code></pre>

<p><strong>3.3.4 Function objects</strong></p>

<p>Objects of classes having a proper <code>operator()</code> overload can be stored inside a <code>std::function</code> object, as well.</p>

<pre><code>struct Meow
{
  int y = 0;
  Meow(int y_) : y(y_) {}
  int operator()(int x) { return y * x; }
};
int a = 11;
int b = stdf_foobar(a, Meow{8});
// b == 99 == 11 + ( 8 * 11 )
</code></pre>

<h3>3.4 Example</h3>

<p>Changing the function pointer example to use <code>std::function</code></p>

<pre><code>void stdf_tranform_every_int(int * v, unsigned n, std::function&lt;int(int)&gt; fp)
{
  for (unsigned i = 0; i &lt; n; ++i)
  {
    v[i] = fp(v[i]);
  }
}
</code></pre>

<p>gives a whole lot more utility to that function because (see 3.3) we have more possibilities to use it:</p>

<pre><code>// using function pointer still possible
int a[5] = {1, 2, 3, 4, 5};
stdf_tranform_every_int(&amp;a[0], 5, double_int);
// now a == {2, 4, 6, 8, 10};

// use it without having to write another function by using a lambda
stdf_tranform_every_int(&amp;a[0], 5, [](int x) -&gt; int { return x/2; });
// now a == {1, 2, 3, 4, 5}; again

// use std::bind :
int nine_x_and_y (int x, int y) { return 9*x + y; }
using std::placeholders::_1;
// calls nine_x_and_y for every int in a with y being 4 every time
stdf_tranform_every_int(&amp;a[0], 5, std::bind(nine_x_and_y, _1, 4));
// now a == {13, 22, 31, 40, 49};
</code></pre>

<h2>4. Templated callback type</h2>

<p>Using templates, the code calling the callback can be even more general than using <code>std::function</code> objects.</p>

<p><em>Note that templates are a compile-time feature and are a design tool for compile-time polymorphism. If runtime dynamic behaviour is to be achieved through callbacks, templates will help but they won't induce runtime dynamics.</em></p>

<h3>4.1 Writing (type notations) and calling templated callbacks</h3>

<p>Generalizing i.e. the <code>std_ftransform_every_int</code> code from above even further can be achieved by using templates:</p>

<pre><code>template&lt;class R, class T&gt;
void stdf_transform_every_int_templ(int * v,
  unsigned const n, std::function&lt;R(T)&gt; fp)
{
  for (unsigned i = 0; i &lt; n; ++i)
  {
    v[i] = fp(v[i]);
  }
}
</code></pre>

<p>with an even more general (as well as easiest) syntax for a callback type being a plain, to-be-deduced templated argument:</p>

<pre><code>template&lt;class F&gt;
void transform_every_int_templ(int * v, 
  unsigned const n, F f)
{
  std::cout &lt;&lt; ""transform_every_int_templ&lt;"" 
    &lt;&lt; type_name&lt;F&gt;() &lt;&lt; ""&gt;\n"";
  for (unsigned i = 0; i &lt; n; ++i)
  {
    v[i] = f(v[i]);
  }
}
</code></pre>

<p><em>Note: The included output prints the type name deduced for templated type <code>F</code>. The implementation of <code>type_name</code> is given at the end of this post.</em></p>

<p>The most general implementation for the unary transformation of a range is part of the standard library, namely <code>std::transform</code>, 
which is also templated with respect to the iterated types.</p>

<pre><code>template&lt;class InputIt, class OutputIt, class UnaryOperation&gt;
OutputIt transform(InputIt first1, InputIt last1, OutputIt d_first,
  UnaryOperation unary_op)
{
  while (first1 != last1) {
    *d_first++ = unary_op(*first1++);
  }
  return d_first;
}
</code></pre>

<h3>4.2 Examples using templated callbacks and compatible types</h3>

<p>The compatible types for the templated <code>std::function</code> callback method <code>stdf_transform_every_int_templ</code> are identical to the above mentioned types (see 3.4).</p>

<p>Using the templated version however, the signature of the used callback may change a little:</p>

<pre><code>// Let
int foo (int x) { return 2+x; }
int muh (int const &amp;x) { return 3+x; }
int &amp; woof (int &amp;x) { x *= 4; return x; }

int a[5] = {1, 2, 3, 4, 5};
stdf_transform_every_int_templ&lt;int,int&gt;(&amp;a[0], 5, &amp;foo);
// a == {3, 4, 5, 6, 7}
stdf_transform_every_int_templ&lt;int, int const &amp;&gt;(&amp;a[0], 5, &amp;muh);
// a == {6, 7, 8, 9, 10}
stdf_transform_every_int_templ&lt;int, int &amp;&gt;(&amp;a[0], 5, &amp;woof);
</code></pre>

<p><em>Note: <code>std_ftransform_every_int</code> (non templated version; see above) does work with <code>foo</code> but not using <code>muh</code>.</em></p>

<pre><code>// Let
void print_int(int * p, unsigned const n)
{
  bool f{ true };
  for (unsigned i = 0; i &lt; n; ++i)
  {
    std::cout &lt;&lt; (f ? """" : "" "") &lt;&lt; p[i]; 
    f = false;
  }
  std::cout &lt;&lt; ""\n"";
}
</code></pre>

<p>The plain templated paramter of <code>transform_every_int_templ</code> can be every possible callable type.</p>

<pre><code>int a[5] = { 1, 2, 3, 4, 5 };
print_int(a, 5);
transform_every_int_templ(&amp;a[0], 5, foo);
print_int(a, 5);
transform_every_int_templ(&amp;a[0], 5, muh);
print_int(a, 5);
transform_every_int_templ(&amp;a[0], 5, woof);
print_int(a, 5);
transform_every_int_templ(&amp;a[0], 5, [](int x) -&gt; int { return x + x + x; });
print_int(a, 5);
transform_every_int_templ(&amp;a[0], 5, Meow{ 4 });
print_int(a, 5);
using std::placeholders::_1;
transform_every_int_templ(&amp;a[0], 5, std::bind(foo_2, _1, 3));
print_int(a, 5);
transform_every_int_templ(&amp;a[0], 5, std::function&lt;int(int)&gt;{&amp;foo});
print_int(a, 5);
</code></pre>

<p>The above code prints:</p>

<pre><code>1 2 3 4 5
transform_every_int_templ &lt;int(*)(int)&gt;
3 4 5 6 7
transform_every_int_templ &lt;int(*)(int&amp;)&gt;
6 8 10 12 14
transform_every_int_templ &lt;int&amp; (*)(int&amp;)&gt;
9 11 13 15 17
transform_every_int_templ &lt;main::{lambda(int)#1} &gt;
27 33 39 45 51
transform_every_int_templ &lt;Meow&gt;
108 132 156 180 204
transform_every_int_templ &lt;std::_Bind&lt;int(*(std::_Placeholder&lt;1&gt;, int))(int, int)&gt;&gt;
975 1191 1407 1623 1839
transform_every_int_templ &lt;std::function&lt;int(int)&gt;&gt;
977 1193 1409 1625 1841
</code></pre>

<h1><code>type_name</code> implementation used above</h1>

<pre><code>#include &lt;type_traits&gt;
#include &lt;typeinfo&gt;
#include &lt;string&gt;
#include &lt;memory&gt;
#include &lt;cxxabi.h&gt;

template &lt;class T&gt;
std::string type_name()
{
  typedef typename std::remove_reference&lt;T&gt;::type TR;
  std::unique_ptr&lt;char, void(*)(void*)&gt; own
    (abi::__cxa_demangle(typeid(TR).name(), nullptr,
    nullptr, nullptr), std::free);
  std::string r = own != nullptr?own.get():typeid(TR).name();
  if (std::is_const&lt;TR&gt;::value)
    r += "" const"";
  if (std::is_volatile&lt;TR&gt;::value)
    r += "" volatile"";
  if (std::is_lvalue_reference&lt;T&gt;::value)
    r += "" &amp;"";
  else if (std::is_rvalue_reference&lt;T&gt;::value)
    r += "" &amp;&amp;"";
  return r;
}
</code></pre>
","28689902"
"Difference between a virtual function and a pure virtual function","267689","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/1306778/c-virtual-pure-virtual-explained"">C++ Virtual/Pure Virtual Explained</a>  </p>
</blockquote>



<p>What is the difference between a pure virtual function and a virtual function? </p>

<p>I know ""Pure Virtual Function is a Virtual function with no body"", but what does this mean and what is actually done by the line below:</p>

<pre><code>virtual void virtualfunctioname() = 0
</code></pre>
","<p>A virtual function makes its class a <em>polymorphic base class</em>. Derived classes can override virtual functions. Virtual functions called through base class pointers/references will be resolved at run-time. That is, the <em>dynamic type</em> of the object is used instead of its <em>static type</em>: </p>

<pre><code> Derived d;
 Base&amp; rb = d;
 // if Base::f() is virtual and Derived overrides it, Derived::f() will be called
 rb.f();  
</code></pre>

<p>A pure virtual function is a virtual function whose declaration ends in <code>=0</code>:</p>

<pre><code>class Base {
  // ...
  virtual void f() = 0;
  // ...
</code></pre>

<p>A pure virtual function implicitly makes the class it is defined for <em>abstract</em> (unlike in Java where you have a keyword to explicitly declare the class abstract). Abstract classes cannot be instantiated. Derived classes need to override/implement all inherited pure virtual functions. If they do not, they too will become abstract.</p>

<p>An interesting 'feature' of C++ is that a class can define a pure virtual function that has an implementation. 
(<a href=""https://stackoverflow.com/q/2609299/140719"">What that's good for is debatable</a>.)</p>

<hr>

<p>Note that C++11 brought a new use for the <code>delete</code> and <code>default</code> keywords which looks similar to the syntax of pure virtual functions:</p>

<pre><code>my_class(my_class const &amp;) = delete;
my_class&amp; operator=(const my_class&amp;) = default;
</code></pre>

<p>See <a href=""https://stackoverflow.com/q/5513881"">this question</a> and <a href=""https://stackoverflow.com/q/13576055"">this one</a> for more info on this use of <code>delete</code> and <code>default</code>. </p>
","2652223"
"How to use clock() in C++","266592","","<p>How do I call <code>clock()</code> in <code>C++</code>?</p>

<p>For example, I want to test how much time a linear search takes to find a given element in an array.</p>
","<pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;ctime&gt;

int main() {
    std::clock_t start;
    double duration;

    start = std::clock();

    /* Your algorithm here */

    duration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;

    std::cout&lt;&lt;""printf: ""&lt;&lt; duration &lt;&lt;'\n';
}
</code></pre>
","3220503"
"C++ code file extension? .cc vs .cpp","266509","","<p>I have seen C++ code saved as both <code>.cc</code> and <code>.cpp</code> files. Is there a difference between the two?</p>

<p>The <a href=""https://google.github.io/styleguide/cppguide.html"" rel=""noreferrer"">Google style guide</a> seems to suggest <code>.cc</code>, but provides no explanation.</p>

<p>I am mainly concerned with programs on Linux systems.</p>
","<p>At the end of the day it doesn't matter because C++ compilers can deal with the files in either format.  If it's a real issue within your team, flip a coin and move on to the actual work.  </p>
","1545085"
"Differences between C++ string == and compare()?","266276","","<p>I just read some recommendations on using </p>

<pre><code>std::string s = get_string();
std::string t = another_string();

if( !s.compare(t) ) 
{
</code></pre>

<p>instead of </p>

<pre><code>if( s == t )
{
</code></pre>

<p>I'm almost always using the last one because I'm used to it and it feels natural, more readable. I didn't even know that there was a separate comparison function.
To be more precise, I thought == would call compare().</p>

<p><strong>What are the differences? In which contexts should one way be favored to the other?</strong></p>

<p>I'm considering only the cases where I need to know if a string is the same value as another string.</p>
","<p>This is what the standard has to say about <code>operator==</code></p>

<blockquote>
  <p><strong>21.4.8.2 operator==</strong></p>
</blockquote>

<pre><code>template&lt;class charT, class traits, class Allocator&gt;
bool operator==(const basic_string&lt;charT,traits,Allocator&gt;&amp; lhs,
                const basic_string&lt;charT,traits,Allocator&gt;&amp; rhs) noexcept;
</code></pre>

<blockquote>
  <p>Returns: lhs.compare(rhs) == 0.</p>
</blockquote>

<p>Seems like there isn't much of a difference!</p>
","9159670"
"How to use enums in C++","260286","","<p>Suppose we have an <code>enum</code> like the following:</p>

<pre><code>enum Days {Saturday, Sunday, Tuesday,Wednesday, Thursday, Friday};
</code></pre>

<p>I want to create an instance of this <code>enum</code> and initialize it with a proper value, so I do:</p>

<pre><code>Days day = Days.Saturday;
</code></pre>

<p>Now I want to check my variable or instance with an existing <code>enum</code> value, so I do:</p>

<pre><code>if (day == Days.Saturday)
{
    std::cout&lt;&lt;""Ok its Saturday"";
}
</code></pre>

<p>Which gives me a compilation error:</p>

<blockquote>
  <p>error: expected primary-expression before ‘.’ token</p>
</blockquote>

<p>So to be clear, what is the difference between saying:</p>

<pre><code>if (day == Days.Saturday)         //Causes compilation error
</code></pre>

<p>and</p>

<pre><code>if (day == Saturday)
</code></pre>

<p>?</p>

<p>What do these two actually refer to, in that one is OK and one causes a compilation error?</p>
","<p>This code is wrong:</p>

<pre><code>enum Days { Saturday,Sunday,Tuesday,Wednesday,Thursday,Friday};
Days day = Days.Saturday;
if(day == Days.Saturday)
</code></pre>

<p>Because days is not a scope, nor object. It is a type. And Types themselves don't have members. What you wrote is the equivalent to <code>std::string.clear</code>.  <code>std::string</code> is a type, so you can't use <code>.</code> on it.  You use <code>.</code> on an <em>instance</em> of a class.</p>

<p>Unfortunately, enums are magical and so the analogy stops there.  Because with a class, you can do <code>std::string::clear</code> to get a pointer to the member function, but in C++03, <code>Days::Sunday</code> is invalid.  (Which is sad).  This is because C++ is (somewhat) backwards compatable with C, and C had no namespaces, so enumerations had to be in the global namespace.  So the syntax is simply:</p>

<pre><code>enum Days { Saturday,Sunday,Tuesday,Wednesday,Thursday,Friday};
Days day = Saturday;
if(day == Saturday)
</code></pre>

<p>Fortunately, <a href=""https://stackoverflow.com/users/204847/mike-seymour"">Mike Seymour</a> observes that this has been addressed in C++11. Change <code>enum</code> to <code>enum class</code> and it gets its own scope; so <code>Days::Sunday</code> is not only valid, but is the <em>only</em> way to access <code>Sunday</code>. Happy days! </p>
","12183377"
"Printing prime numbers from 1 through 100","260197","","<p>This c++ code prints out the following prime numbers:   <strong>3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97.</strong></p>

<p>But I don't think that's the way my book wants it to be written. It mentions something about square root of a number. So I did try changing my 2nd loop to <code>for (int j=2; j&lt;sqrt(i); j++)</code> but it did not give me the result I needed.</p>

<p>How would I need to change this code to the way my book wants it to be?</p>

<pre><code>int main () 
{
    for (int i=2; i&lt;100; i++) 
        for (int j=2; j&lt;i; j++)
        {
            if (i % j == 0) 
                break;
            else if (i == j+1)
                cout &lt;&lt; i &lt;&lt; "" "";

        }   
    return 0;
}
</code></pre>

<blockquote>
  <p>A prime integer number is one that has
  exactly two different divisors, 
  namely 1 and the number itself. Write,
  run, and test a C++ program that 
  finds and prints all the prime numbers
  less than 100. (Hint: 1 is a  prime
  number. For each number from 2 to 100,
  find Remainder = Number % n, where n
  ranges from 2 to sqrt(number). \ If n
  is greater than sqrt(number), the
  number is not equally divisible by n. 
  Why? If any Remainder equals 0, the
  number is no a prime number.)</p>
</blockquote>
","<p>Three ways:</p>

<p>1.</p>

<pre><code>int main () 
{
    for (int i=2; i&lt;100; i++) 
        for (int j=2; j*j&lt;=i; j++)
        {
            if (i % j == 0) 
                break;
            else if (j+1 &gt; sqrt(i)) {
                cout &lt;&lt; i &lt;&lt; "" "";

            }

        }   

    return 0;
}
</code></pre>

<p>2.</p>

<pre><code>int main () 
{
    for (int i=2; i&lt;100; i++) 
    {
        bool prime=true;
        for (int j=2; j*j&lt;=i; j++)
        {
            if (i % j == 0) 
            {
                prime=false;
                break;    
            }
        }   
        if(prime) cout &lt;&lt; i &lt;&lt; "" "";
    }
    return 0;
}
</code></pre>

<p>3.</p>

<pre><code>#include &lt;vector&gt;
int main()
{
    std::vector&lt;int&gt; primes;
    primes.push_back(2);
    for(int i=3; i &lt; 100; i++)
    {
        bool prime=true;
        for(int j=0;j&lt;primes.size() &amp;&amp; primes[j]*primes[j] &lt;= i;j++)
        {
            if(i % primes[j] == 0)
            {
                prime=false;
                break;
            }
        }
        if(prime) 
        {
            primes.push_back(i);
            cout &lt;&lt; i &lt;&lt; "" "";
        }
    }

    return 0;
}
</code></pre>

<p>Edit: In the third example, we keep track of all of our previously calculated primes. If a number is divisible by a non-prime number, there is also some prime &lt;= that divisor which it is also divisble by. This reduces computation by a factor of primes_in_range/total_range.</p>
","5200931"
"Iterate through a C++ Vector using a 'for' loop","258878","","<p>I am new to the C++ language. I have been starting to use vectors, and have noticed that in all of the code I see to iterate though a vector via indices, the first parameter of the <code>for</code> loop is always something based on the vector. In Java I might do something like this with an ArrayList:</p>

<pre><code>for(int i=0; i &lt; vector.size(); i++){
   vector[i].doSomething();
}
</code></pre>

<p>Is there a reason I don't see this in C++? Is it bad practice?</p>
","<blockquote>
  <p><strong>Is there any reason I don't see this in C++? Is it bad practice?</strong></p>
</blockquote>

<p>No. It is not a bad practice, but it renders your code certain <strong>flexibility</strong>.</p>

<p>Usually, pre-C++11 the code for iterating over container elements uses iterators, something like:</p>

<pre><code>std::vector&lt;int&gt;::iterator it = vector.begin();
</code></pre>

<p>This is because it makes the code more flexible.</p>

<p>All standard library containers support and provide iterators and given that if at a later point of development you need to switch another container then this code does not need to be changed.</p>

<p><strong>Note:</strong> Writing code which works with every possible standard library container is not as easily possible as it might seemingly seem to be.</p>
","12702643"
"check if a std::vector contains a certain object?","257225","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/571394/how-to-find-an-item-in-a-stdvector"">How to find an item in a std::vector?</a>  </p>
</blockquote>



<p>Is there something in <code>&lt;algorithm&gt;</code> which allows  you to check if a std:: container contains something? Or, a way to make one, for example:</p>

<pre><code>if(a.x == b.x &amp;&amp; a.y == b.y)
return true;

return false;
</code></pre>

<p>Can this only be done with <code>std::map</code> since it uses keys?</p>

<p>Thanks</p>
","<p>Checking if <code>v</code> contains the element <code>x</code>:</p>

<pre><code>#include &lt;algorithm&gt;

if(std::find(v.begin(), v.end(), x) != v.end()) {
    /* v contains x */
} else {
    /* v does not contain x */
}
</code></pre>

<p>Checking if <code>v</code> contains elements (is non-empty):</p>

<pre><code>if(!v.empty()){
    /* v is non-empty */
} else {
    /* v is empty */
}
</code></pre>
","3450906"
"How do I concatenate multiple C++ strings on one line?","256838","","<p>C# has a syntax feature where you can concatenate many data types together on 1 line.</p>

<pre><code>string s = new String();
s += ""Hello world, "" + myInt + niceToSeeYouString;
s += someChar1 + interestingDecimal + someChar2;
</code></pre>

<p>What would be the equivalent in C++? As far as I can see, you'd have to do it all on separate lines as it doesn't support multiple strings/variables with the + operator. This is OK, but doesn't look as neat.</p>

<pre><code>string s;
s += ""Hello world, "" + ""nice to see you, "" + ""or not."";
</code></pre>

<p>The above code produces an error.</p>
","<pre><code>#include &lt;sstream&gt;
#include &lt;string&gt;

std::stringstream ss;
ss &lt;&lt; ""Hello, world, "" &lt;&lt; myInt &lt;&lt; niceToSeeYouString;
std::string s = ss.str();
</code></pre>

<p>Take a look at this Guru Of The Week article from Herb Sutter: <a href=""http://www.gotw.ca/publications/mill19.htm"" rel=""noreferrer"">The String Formatters of Manor Farm</a></p>
","662936"
"What exactly is nullptr?","256260","","<p>We now have C++11 with many new features. An interesting and confusing one (at least for me) is the new <code>nullptr</code>.</p>

<p>Well, no need anymore for the nasty macro <code>NULL</code>.</p>

<pre><code>int* x = nullptr;
myclass* obj = nullptr;
</code></pre>

<p>Still, I am not getting how <code>nullptr</code> works. For example, <a href=""http://en.wikipedia.org/wiki/C%2B%2B11#Null_pointer_constant"" rel=""noreferrer"">Wikipedia article</a> says:</p>

<blockquote>
  <p>C++11 corrects this by introducing a new <strong>keyword</strong> to serve as a distinguished null pointer constant: nullptr. It is of <strong>type nullptr_t</strong>, which is implicitly convertible and comparable to any pointer type or pointer-to-member type. It is not implicitly convertible or comparable to integral types, except for bool.</p>
</blockquote>

<p>How is it a keyword and an instance of a type?</p>

<p>Also, do you have another example (beside the Wikipedia one) where <code>nullptr</code> is superior to good old <code>0</code>?</p>
","<blockquote>
  <p>How is it a keyword and an instance of a type?</p>
</blockquote>

<p>This isn't surprising. Both <code>true</code> and <code>false</code> are keywords and as literals they have a type ( <code>bool</code> ). <code>nullptr</code> is a <em>pointer literal</em> of type <code>std::nullptr_t</code>, and it's a prvalue (you cannot take the address of it using <code>&amp;</code>). </p>

<ul>
<li><p><code>4.10</code> about pointer conversion says that a prvalue of type <code>std::nullptr_t</code> is a null pointer constant, and that an integral null pointer constant can be converted to <code>std::nullptr_t</code>. The opposite direction is not allowed. This allows overloading a function for both pointers and integers, and passing <code>nullptr</code> to select the pointer version. Passing <code>NULL</code> or <code>0</code> would confusingly select the <code>int</code> version. </p></li>
<li><p>A cast of <code>nullptr_t</code> to an integral type needs a <code>reinterpret_cast</code>, and has the same semantics as a cast of <code>(void*)0</code> to an integral type (mapping implementation defined). A <code>reinterpret_cast</code> cannot convert <code>nullptr_t</code> to any pointer type. Rely on the implicit conversion if possible or use <code>static_cast</code>. </p></li>
<li><p>The Standard requires that <code>sizeof(nullptr_t)</code> be <code>sizeof(void*)</code>. </p></li>
</ul>
","1282345"
"Sorting a vector of custom objects","254456","","<p>How does one go about sorting a vector containing custom (i.e. user defined) objects.<br>
Probably, standard STL algorithm <strong>sort</strong> along with a predicate (a function or a function object) which would operate on one of the fields (as a key for sorting) in the custom object should be used.<br>
Am I on the right track?</p>
","<p>A simple example using <a href=""http://en.cppreference.com/w/cpp/algorithm/sort"" rel=""noreferrer""><code>std::sort</code></a></p>

<pre><code>struct MyStruct
{
    int key;
    std::string stringValue;

    MyStruct(int k, const std::string&amp; s) : key(k), stringValue(s) {}
};

struct less_than_key
{
    inline bool operator() (const MyStruct&amp; struct1, const MyStruct&amp; struct2)
    {
        return (struct1.key &lt; struct2.key);
    }
};

std::vector &lt; MyStruct &gt; vec;

vec.push_back(MyStruct(4, ""test""));
vec.push_back(MyStruct(3, ""a""));
vec.push_back(MyStruct(2, ""is""));
vec.push_back(MyStruct(1, ""this""));

std::sort(vec.begin(), vec.end(), less_than_key());
</code></pre>

<hr>

<p><strong>Edit:</strong> As Kirill V. Lyadvinsky pointed out, instead of supplying a sort predicate, you can implement the <code>operator&lt;</code> for <code>MyStruct</code>:</p>

<pre><code>struct MyStruct
{
    int key;
    std::string stringValue;

    MyStruct(int k, const std::string&amp; s) : key(k), stringValue(s) {}

    bool operator &lt; (const MyStruct&amp; str) const
    {
        return (key &lt; str.key);
    }
};
</code></pre>

<p>Using this method means you can simply sort the vector as follows:</p>

<pre><code>std::sort(vec.begin(), vec.end());
</code></pre>

<p><strong>Edit2:</strong> As Kappa suggests you can also sort the vector in the descending order by override > operator and changing call of sort a bit: </p>

<pre><code>struct MyStruct
{
    int key;
    std::string stringValue;

    MyStruct(int k, const std::string&amp; s) : key(k), stringValue(s) {}

    bool operator &gt; (const MyStruct&amp; str) const
    {
        return (key &gt; str.key);
    }
};
</code></pre>

<p>And you should call sort as:</p>

<pre><code>std::sort(vec.begin(), vec.end(),greater&lt;MyStruct&gt;());
</code></pre>
","1380496"
"Calling C/C++ from Python?","254081","","<p>What would be the quickest way to construct a Python binding to a C or C++ library?</p>

<p>(I am using Windows if this matters.)</p>
","<p>You should have a look at <a href=""http://www.boost.org/doc/libs/1_49_0/libs/python/doc/"" rel=""noreferrer"">Boost.Python</a>. Here is the short introduction taken from their website:</p>

<blockquote>
  <p>The Boost Python Library is a framework for interfacing Python and
  C++. It allows you to quickly and seamlessly expose C++ classes
  functions and objects to Python, and vice-versa, using no special
  tools -- just your C++ compiler. It is designed to wrap C++ interfaces
  non-intrusively, so that you should not have to change the C++ code at
  all in order to wrap it, making Boost.Python ideal for exposing
  3rd-party libraries to Python. The library's use of advanced
  metaprogramming techniques simplifies its syntax for users, so that
  wrapping code takes on the look of a kind of declarative interface
  definition language (IDL).</p>
</blockquote>
","145436"
"What should main() return in C and C++?","252240","","<p>What is the correct (most efficient) way to define the <code>main()</code> function in C and C++ — <code>int main()</code> or <code>void main()</code> — and why? 
If <code>int main()</code> then <code>return 1</code> or <code>return 0</code>?</p>

<hr>

<p><em>There are numerous duplicates of this question, including:</em></p>

<ul>
<li><a href=""https://stackoverflow.com/questions/2108192/what-are-the-valid-signatures-for-cs-main-function/"">What are the valid signatures for C's <code>main()</code> function?</a></li>
<li><a href=""https://stackoverflow.com/questions/17715008/the-return-type-of-main-function/"">The return type of <code>main()</code> function</a></li>
<li><a href=""https://stackoverflow.com/questions/636829/difference-between-void-main-and-int-main"">Difference between <code>void main()</code> and <code>int main()</code>?</a></li>
<li><a href=""https://stackoverflow.com/questions/1621574/mains-signature-in-c""><code>main()</code>'s signature in C++</a></li>
<li><a href=""https://stackoverflow.com/questions/4207134/what-is-the-proper-declaration-of-main"">What is the proper declaration of <code>main()</code>?</a> — For C++, with a very good answer indeed.</li>
<li><a href=""https://stackoverflow.com/questions/8692120/styles-of-main-functions-in-c"">Styles of <code>main()</code> functions in C</a></li>
<li><a href=""https://stackoverflow.com/questions/10915713/return-type-of-main-method-in-c"">Return type of <code>main()</code> method in C</a></li>
<li><a href=""https://stackoverflow.com/questions/9356510/int-main-vs-void-main-in-c""><code>int main()</code> vs <code>void main()</code> in C</a></li>
</ul>

<p>Related:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/5191965/c-int-mainint-argc-char-argv"">C++ — <code>int main(int argc, char **argv)</code></a></li>
<li><a href=""https://stackoverflow.com/questions/5217395/c-int-mainint-argc-char-argv"">C++ — <code>int main(int argc, char *argv[])</code></a></li>
<li><a href=""https://stackoverflow.com/questions/10321435/is-char-envp-as-a-third-argument-to-main-portable"">Is <code>char *envp[]</code> as a third argument to <code>main()</code> portable?</a></li>
<li><a href=""https://stackoverflow.com/questions/18402853/must-the-int-main-function-return-a-value-in-all-compilers"">Must the <code>int main()</code> function return a value in all compilers?</a></li>
<li><a href=""https://stackoverflow.com/questions/5296163/why-is-the-type-of-the-main-function-in-c-and-c-left-to-the-user-to-define"">Why is the type of the <code>main()</code> function in C and C++ left to the user to define?</a></li>
<li><a href=""https://stackoverflow.com/questions/22239/why-does-int-main-compile"">Why does <code>int main(){}</code> compile?</a></li>
<li><a href=""https://stackoverflow.com/questions/26470912/legal-definitions-of-main-in-c14"">Legal definitions of <code>main()</code> in C++14?</a></li>
</ul>
","<p>The return value for <code>main</code> should indicate how the program exited. Normal exit is generally represented by a 0 return value from <code>main</code>. Abnormal termination is usually signalled by a non-zero return but there is no standard for how non-zero codes are interpreted. Also as noted by others, <code>void main()</code> is explicitly prohibited by the C++ standard and shouldn't be used. The valid C++ <code>main</code> signatures are:</p>

<pre><code>int main()
</code></pre>

<p>and</p>

<pre><code>int main(int argc, char* argv[])
</code></pre>

<p>which is equivalent to</p>

<pre><code>int main(int argc, char** argv)
</code></pre>

<p>It's also worth noting that in C++, <code>int main()</code> can be left without a return value at which point it defaults to returning 0. This is also true with a C99 program. Whether return 0 should be omitted or not is open to debate. The range of valid C program main signatures is much greater.  </p>

<p>Also, efficiency is not an issue with the <code>main</code> function. It can only be entered and left once (marking program start and termination) according to the C++ standard. For C, the case is different and re-entering <code>main()</code> is allowed, but should probably be avoided. </p>
","204483"
"Debug vs Release in CMAKE","252104","","<p>In a GCC compiled project,</p>

<ul>
<li>how to run <code>cmake</code> for each target type (debug/release)?</li>
<li>how to specify debug and release C/C++ flags using <code>cmake</code>?</li>
<li>how to express that the main executable will be compiled with <code>g++</code> and one nested library with <code>gcc</code>?</li>
</ul>
","<p>It's generally best to do an ""out of source"" build.  Create your <code>CMakeLists.txt</code> in the root of your project.  Then from the root of your project:</p>

<pre><code>mkdir Release
cd Release
cmake -DCMAKE_BUILD_TYPE=Release ..
make
</code></pre>

<p>And for Debug (again from the root of your project):</p>

<pre><code>mkdir Debug
cd Debug
cmake -DCMAKE_BUILD_TYPE=Debug ..
make
</code></pre>

<p><code>Debug</code> will add the debug flags appropriate for your compiler.  See
<a href=""http://www.cmake.org/Wiki/CMake_FAQ#Out-of-source_build_trees"" rel=""noreferrer"">this FAQ</a> for more details.</p>

<hr>

<p>You can modify/add to the flags in your <code>CMakeLists.txt</code> via <code>CMAKE_C_FLAGS_DEBUG</code> and <code>CMAKE_C_FLAGS_RELEASE</code> variables, e.g.: </p>

<pre><code>set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -Wall"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -Wall"")
</code></pre>

<p>See <a href=""http://cmake.org/Wiki/CMake_Useful_Variables"" rel=""noreferrer"">this link</a> under <code>CMAKE_BUILD_TYPE</code> for more details. </p>

<hr>

<p>As for your 3rd question, I'm not sure what you are asking exactly. CMake should automatically detect and use the compiler appropriate for your different source files.</p>
","7725055"
"How to automatically generate a stacktrace when my gcc C++ program crashes","250683","","<p>When my C++ program crashes I would like it to automatically generate a stacktrace.</p>

<p>My program is being run by many different users and it also runs on Linux, Windows and Macintosh (all versions are compiled using <code>gcc</code>).</p>

<p>I would like my program to be able to generate a stack trace when it crashes and the next time the user runs it, it will ask them if it is ok to send the stack trace to me so I can track down the problem. I can handle the sending the info to me but I don't know how to generate the trace string. Any ideas?</p>
","<p>For Linux and I believe Mac OS X, if you're using gcc, or any compiler that uses glibc, you can use the backtrace() functions in <code>execinfo.h</code> to print a stacktrace and exit gracefully when you get a segmentation fault.  Documentation can be found <a href=""http://www.gnu.org/software/libc/manual/html_node/Backtraces.html"" rel=""noreferrer"">in the libc manual</a>.</p>

<p>Here's an example program that installs a <code>SIGSEGV</code> handler and prints a stacktrace to <code>stderr</code> when it segfaults.  The <code>baz()</code> function here causes the segfault that triggers the handler:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;execinfo.h&gt;
#include &lt;signal.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;


void handler(int sig) {
  void *array[10];
  size_t size;

  // get void*'s for all entries on the stack
  size = backtrace(array, 10);

  // print out all the frames to stderr
  fprintf(stderr, ""Error: signal %d:\n"", sig);
  backtrace_symbols_fd(array, size, STDERR_FILENO);
  exit(1);
}

void baz() {
 int *foo = (int*)-1; // make a bad pointer
  printf(""%d\n"", *foo);       // causes segfault
}

void bar() { baz(); }
void foo() { bar(); }


int main(int argc, char **argv) {
  signal(SIGSEGV, handler);   // install our handler
  foo(); // this will call foo, bar, and baz.  baz segfaults.
}
</code></pre>

<p>Compiling with <code>-g -rdynamic</code> gets you symbol info in your output, which glibc can use to make a nice stacktrace:</p>

<pre><code>$ gcc -g -rdynamic ./test.c -o test
</code></pre>

<p>Executing this gets you this output:</p>

<pre><code>$ ./test
Error: signal 11:
./test(handler+0x19)[0x400911]
/lib64/tls/libc.so.6[0x3a9b92e380]
./test(baz+0x14)[0x400962]
./test(bar+0xe)[0x400983]
./test(foo+0xe)[0x400993]
./test(main+0x28)[0x4009bd]
/lib64/tls/libc.so.6(__libc_start_main+0xdb)[0x3a9b91c4bb]
./test[0x40086a]
</code></pre>

<p>This shows the load module, offset, and function that each frame in the stack came from.  Here you can see the signal handler on top of the stack, and the libc functions before <code>main</code> in addition to <code>main</code>, <code>foo</code>, <code>bar</code>, and <code>baz</code>.</p>
","77336"
"C++ convert hex string to signed integer","250559","","<p>I want to convert a hex string to a 32 bit signed integer in C++.  </p>

<p>So, for example, I have the hex string ""fffefffe"".  The binary representation of this is 11111111111111101111111111111110.  The signed integer representation of this is: -65538.  </p>

<p>How do I do this conversion in C++?  This also needs to work for non-negative numbers.  For example, the hex string ""0000000A"", which is 00000000000000000000000000001010 in binary, and 10 in decimal.</p>
","<p>use <code>std::stringstream</code></p>

<pre><code>unsigned int x;   
std::stringstream ss;
ss &lt;&lt; std::hex &lt;&lt; ""fffefffe"";
ss &gt;&gt; x;
</code></pre>

<p>the following example produces <code>-65538</code> as its result:</p>

<pre><code>#include &lt;sstream&gt;
#include &lt;iostream&gt;

int main() {
    unsigned int x;   
    std::stringstream ss;
    ss &lt;&lt; std::hex &lt;&lt; ""fffefffe"";
    ss &gt;&gt; x;
    // output it as a signed type
    std::cout &lt;&lt; static_cast&lt;int&gt;(x) &lt;&lt; std::endl;
}
</code></pre>

<p><strong>EDIT:</strong> C++11 update. In the new standard, there are a few new utility functions which you can make use of! specifically, there is a family of ""string to number"" functions (<a href=""http://en.cppreference.com/w/cpp/string/basic_string/stol"" rel=""noreferrer"">http://en.cppreference.com/w/cpp/string/basic_string/stol</a> and <a href=""http://en.cppreference.com/w/cpp/string/basic_string/stoul"" rel=""noreferrer"">http://en.cppreference.com/w/cpp/string/basic_string/stoul</a>). These are essentially thin wrappers around C's string to number conversion functions, but know how to deal with a <code>std::string</code></p>

<p>So, the simplest answer for newer code would probably look like this:</p>

<pre><code>std::string s = ""0xfffefffe"";
unsigned int x = std::stoul(s, nullptr, 16);
</code></pre>

<p><strong>NOTE:</strong> Below is my original answer, which as the edit says is not a complete answer. For a functional solution. Stick the code above the line :-).</p>

<hr>

<p><strong>EDIT:</strong> It appears that since <code>lexical_cast&lt;&gt;</code> is defined to have stream conversion semantics. Sadly, streams don't understand the ""0x"" notation. So both the <code>boost::lexical_cast</code> and my hand rolled one don't deal well with hex strings. The above solution which manually sets the input stream to hex will handle it just fine.</p>

<p><a href=""http://www.boost.org/doc/libs/1_39_0/libs/conversion/lexical_cast.htm"" rel=""noreferrer"">Boost has some stuff</a> to do this as well, which has some nice error checking capabilities as well. You can use it like this:</p>

<pre><code>try {
    unsigned int x = lexical_cast&lt;int&gt;(""0x0badc0de"");
} catch(bad_lexical_cast &amp;) {
    // whatever you want to do...
}
</code></pre>

<p>If you don't feel like using boost, here's a light version of lexical cast which does no error checking:</p>

<pre><code>template&lt;typename T2, typename T1&gt;
inline T2 lexical_cast(const T1 &amp;in) {
    T2 out;
    std::stringstream ss;
    ss &lt;&lt; in;
    ss &gt;&gt; out;
    return out;
}
</code></pre>

<p>which you can use like this:</p>

<pre><code>// though this needs the 0x prefix so it knows it is hex
unsigned int x = lexical_cast&lt;unsigned int&gt;(""0xdeadbeef""); 
</code></pre>
","1070499"
"How to properly overload the << operator for an ostream?","250106","","<p>I am writing a small matrix library in C++ for matrix operations. However my compiler complains, where before it did not. This code was left on a shelf for 6 months and in between I upgraded my computer from debian etch to lenny (g++ (Debian 4.3.2-1.1) 4.3.2
) however I have the same problem on a Ubuntu system with the same g++.</p>

<p>Here is the relevant part of my matrix class:</p>

<pre><code>namespace Math
{
    class Matrix
    {
    public:

        [...]

        friend std::ostream&amp; operator&lt;&lt; (std::ostream&amp; stream, const Matrix&amp; matrix);
    }
}
</code></pre>

<p>And the ""implementation"":</p>

<pre><code>using namespace Math;

std::ostream&amp; Matrix::operator &lt;&lt;(std::ostream&amp; stream, const Matrix&amp; matrix) {

    [...]

}
</code></pre>

<p>This is the error given by the compiler:</p>

<blockquote>
  <p>matrix.cpp:459: error: 'std::ostream&amp;
  Math::Matrix::operator&lt;&lt;(std::ostream&amp;,
  const Math::Matrix&amp;)' must take
  exactly one argument</p>
</blockquote>

<p>I'm a bit confused by this error, but then again my C++ has gotten a bit rusty after doing lots of Java those 6 months. :-)</p>
","<p>You have declared your function as <code>friend</code>. It's not a member of the class. You should remove <code>Matrix::</code> from the implementation. <code>friend</code> means that the specified function (which is not a member of the class) can access private member variables. The way you implemented the function is like an instance method for <code>Matrix</code> class which is wrong.</p>
","476279"
"What is the copy-and-swap idiom?","248931","","<p>What is this idiom and when should it be used? Which problems does it solve? Does the idiom change when C++11 is used?</p>

<p>Although it's been mentioned in many places, we didn't have any singular ""what is it"" question and answer, so here it is. Here is a partial list of places where it was previously mentioned:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/276173/what-are-your-favorite-c-coding-style-idioms/2034447#2034447"">What are your favorite C++ Coding Style idioms:  Copy-swap</a></li>
<li><a href=""https://stackoverflow.com/questions/1734628/copy-constructor-and-operator-overload-in-c-is-a-common-function-possible/1734640#1734640"">Copy constructor and = operator overload in C++: is a common function possible?</a></li>
<li><a href=""https://stackoverflow.com/questions/2143787/what-is-copy-elision-and-how-it-optimizes-copy-and-swap-idiom"">What is copy elision and how it optimizes copy-and-swap idiom</a></li>
<li><a href=""https://stackoverflow.com/questions/255612/c-dynamically-allocating-an-array-of-objects/255744#255744"">C++: dynamically allocating an array of objects?</a></li>
</ul>
","<h2>Overview</h2>

<h3>Why do we need the copy-and-swap idiom?</h3>

<p>Any class that manages a resource (a <em>wrapper</em>, like a smart pointer) needs to implement <a href=""https://stackoverflow.com/questions/4172722/what-is-the-rule-of-three"">The Big Three</a>. While the goals and implementation of the copy-constructor and destructor are straightforward, the copy-assignment operator is arguably the most nuanced and difficult. How should it be done? What pitfalls need to be avoided?</p>

<p>The <em>copy-and-swap idiom</em> is the solution, and elegantly assists the assignment operator in achieving two things: avoiding <a href=""http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"" rel=""noreferrer"">code duplication</a>, and providing a <a href=""http://en.wikipedia.org/wiki/Exception_guarantees"" rel=""noreferrer"">strong exception guarantee</a>.</p>

<h3>How does it work?</h3>

<p><a href=""https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom/3279616#3279616"">Conceptually</a>, it works by using the copy-constructor's functionality to create a local copy of the data, then takes the copied data with a <code>swap</code> function, swapping the old data with the new data. The temporary copy then destructs, taking the old data with it. We are left with a copy of the new data.</p>

<p>In order to use the copy-and-swap idiom, we need three things: a working copy-constructor, a working destructor (both are the basis of any wrapper, so should be complete anyway), and a <code>swap</code> function.</p>

<p>A swap function is a <em>non-throwing</em> function that swaps two objects of a class, member for member. We might be tempted to use <code>std::swap</code> instead of providing our own, but this would be impossible; <code>std::swap</code> uses the copy-constructor and copy-assignment operator within its implementation, and we'd ultimately be trying to define the assignment operator in terms of itself!</p>

<p>(Not only that, but unqualified calls to <code>swap</code> will use our custom swap operator, skipping over the unnecessary construction and destruction of our class that <code>std::swap</code> would entail.)</p>

<hr>

<h2>An in-depth explanation</h2>

<h3>The goal</h3>

<p>Let's consider a concrete case. We want to manage, in an otherwise useless class, a dynamic array. We start with a working constructor, copy-constructor, and destructor:</p>

<pre><code>#include &lt;algorithm&gt; // std::copy
#include &lt;cstddef&gt; // std::size_t

class dumb_array
{
public:
    // (default) constructor
    dumb_array(std::size_t size = 0)
        : mSize(size),
          mArray(mSize ? new int[mSize]() : nullptr)
    {
    }

    // copy-constructor
    dumb_array(const dumb_array&amp; other)
        : mSize(other.mSize),
          mArray(mSize ? new int[mSize] : nullptr),
    {
        // note that this is non-throwing, because of the data
        // types being used; more attention to detail with regards
        // to exceptions must be given in a more general case, however
        std::copy(other.mArray, other.mArray + mSize, mArray);
    }

    // destructor
    ~dumb_array()
    {
        delete [] mArray;
    }

private:
    std::size_t mSize;
    int* mArray;
};
</code></pre>

<p>This class almost manages the array successfully, but it needs <code>operator=</code> to work correctly.</p>

<h3>A failed solution</h3>

<p>Here's how a naive implementation might look:</p>

<pre><code>// the hard part
dumb_array&amp; operator=(const dumb_array&amp; other)
{
    if (this != &amp;other) // (1)
    {
        // get rid of the old data...
        delete [] mArray; // (2)
        mArray = nullptr; // (2) *(see footnote for rationale)

        // ...and put in the new
        mSize = other.mSize; // (3)
        mArray = mSize ? new int[mSize] : nullptr; // (3)
        std::copy(other.mArray, other.mArray + mSize, mArray); // (3)
    }

    return *this;
}
</code></pre>

<p>And we say we're finished; this now manages an array, without leaks. However, it suffers from three problems, marked sequentially in the code as <code>(n)</code>.</p>

<ol>
<li><p>The first  is the self-assignment test. This check serves two purposes: it's an easy way to prevent us from running needless code on self-assignment, and it protects us from subtle bugs (such as deleting the array only to try and copy it). But in all other cases it merely serves to slow the program down, and act as noise in the code; self-assignment rarely occurs, so most of the time this check is a waste. It would be better if the operator could work properly without it.</p></li>
<li><p>The second is that it only provides a basic exception guarantee. If <code>new int[mSize]</code> fails, <code>*this</code> will have been modified. (Namely, the size is wrong and the data is gone!) For a strong exception guarantee, it would need to be something akin to:</p>

<pre><code>dumb_array&amp; operator=(const dumb_array&amp; other)
{
    if (this != &amp;other) // (1)
    {
        // get the new data ready before we replace the old
        std::size_t newSize = other.mSize;
        int* newArray = newSize ? new int[newSize]() : nullptr; // (3)
        std::copy(other.mArray, other.mArray + newSize, newArray); // (3)

        // replace the old data (all are non-throwing)
        delete [] mArray;
        mSize = newSize;
        mArray = newArray;
    }

    return *this;
}
</code></pre></li>
<li><p>The code has expanded! Which leads us to the third problem: code duplication. Our assignment operator effectively duplicates all the code we've already written elsewhere, and that's a terrible thing.</p></li>
</ol>

<p>In our case, the core of it is only two lines (the allocation and the copy), but with more complex resources this code bloat can be quite a hassle. We should strive to never repeat ourselves.</p>

<p>(One might wonder: if this much code is needed to manage one resource correctly, what if my class manages more than one? While this may seem to be a valid concern, and indeed it requires non-trivial <code>try</code>/<code>catch</code> clauses, this is a non-issue. That's because a class should manage <a href=""http://en.wikipedia.org/wiki/Single_responsibility_principle"" rel=""noreferrer""><em>one resource only</em></a>!)</p>

<h3>A successful solution</h3>

<p>As mentioned, the copy-and-swap idiom will fix all these issues. But right now, we have all the requirements except one: a <code>swap</code> function. While The Rule of Three successfully entails the existence of our copy-constructor, assignment operator, and destructor, it should really be called ""The Big Three and A Half"": any time your class manages a resource it also makes sense to provide a <code>swap</code> function.</p>

<p>We need to add swap functionality to our class, and we do that as follows†:</p>

<pre><code>class dumb_array
{
public:
    // ...

    friend void swap(dumb_array&amp; first, dumb_array&amp; second) // nothrow
    {
        // enable ADL (not necessary in our case, but good practice)
        using std::swap;

        // by swapping the members of two objects,
        // the two objects are effectively swapped
        swap(first.mSize, second.mSize);
        swap(first.mArray, second.mArray);
    }

    // ...
};
</code></pre>

<p>(<a href=""https://stackoverflow.com/questions/5695548/public-friend-swap-member-function"">Here</a> is the explanation why <code>public friend swap</code>.) Now not only can we swap our <code>dumb_array</code>'s, but swaps in general can be more efficient; it merely swaps pointers and sizes, rather than allocating and copying entire arrays. Aside from this bonus in functionality and efficiency, we are now ready to implement the copy-and-swap idiom.</p>

<p>Without further ado, our assignment operator is:</p>

<pre><code>dumb_array&amp; operator=(dumb_array other) // (1)
{
    swap(*this, other); // (2)

    return *this;
}
</code></pre>

<p>And that's it! With one fell swoop, all three problems are elegantly tackled at once.</p>

<h3>Why does it work?</h3>

<p>We first notice an important choice: the parameter argument is taken <em>by-value</em>. While one could just as easily do the following (and indeed, many naive implementations of the idiom do):</p>

<pre><code>dumb_array&amp; operator=(const dumb_array&amp; other)
{
    dumb_array temp(other);
    swap(*this, temp);

    return *this;
}
</code></pre>

<p>We lose an <a href=""https://web.archive.org/web/20140113221447/http://cpp-next.com/archive/2009/08/want-speed-pass-by-value/"" rel=""noreferrer"">important optimization opportunity</a>. Not only that, but this choice is critical in C++11, which is discussed later. (On a general note, a remarkably useful guideline is as follows: if you're going to make a copy of something in a function, let the compiler do it in the parameter list.‡)</p>

<p>Either way, this method of obtaining our resource is the key to eliminating code duplication: we get to use the code from the copy-constructor to make the copy, and never need to repeat any bit of it. Now that the copy is made, we are ready to swap.</p>

<p>Observe that upon entering the function that all the new data is already allocated, copied, and ready to be used. This is what gives us a strong exception guarantee for free: we won't even enter the function if construction of the copy fails, and it's therefore not possible to alter the state of <code>*this</code>. (What we did manually before for a strong exception guarantee, the compiler is doing for us now; how kind.)</p>

<p>At this point we are home-free, because <code>swap</code> is non-throwing. We swap our current data with the copied data, safely altering our state, and the old data gets put into the temporary. The old data is then released when the function returns. (Where upon the parameter's scope ends and its destructor is called.)</p>

<p>Because the idiom repeats no code, we cannot introduce bugs within the operator. Note that this means we are rid of the need for a self-assignment check, allowing a single uniform implementation of <code>operator=</code>. (Additionally, we no longer have a performance penalty on non-self-assignments.)</p>

<p>And that is the copy-and-swap idiom.</p>

<h2>What about C++11?</h2>

<p>The next version of C++, C++11, makes one very important change to how we manage resources: the Rule of Three is now <strong>The Rule of Four</strong> (and a half). Why? Because not only do we need to be able to copy-construct our resource, <a href=""https://stackoverflow.com/questions/3106110/can-someone-please-explain-move-semantics-to-me"">we need to move-construct it as well</a>.</p>

<p>Luckily for us, this is easy:</p>

<pre><code>class dumb_array
{
public:
    // ...

    // move constructor
    dumb_array(dumb_array&amp;&amp; other)
        : dumb_array() // initialize via default constructor, C++11 only
    {
        swap(*this, other);
    }

    // ...
};
</code></pre>

<p>What's going on here? Recall the goal of move-construction: to take the resources from another instance of the class, leaving it in a state guaranteed to be assignable and destructible.</p>

<p>So what we've done is simple: initialize via the default constructor (a C++11 feature), then swap with <code>other</code>; we know a default constructed instance of our class can safely be assigned and destructed, so we know <code>other</code> will be able to do the same, after swapping.</p>

<p>(Note that some compilers do not support constructor delegation; in this case, we have to manually default construct the class. This is an unfortunate but luckily trivial task.)</p>

<h3>Why does that work?</h3>

<p>That is the only change we need to make to our class, so why does it work? Remember the ever-important decision we made to make the parameter a value and not a reference:</p>

<pre><code>dumb_array&amp; operator=(dumb_array other); // (1)
</code></pre>

<p>Now, if <code>other</code> is being initialized with an rvalue, <em>it will be move-constructed</em>. Perfect. In the same way C++03 let us re-use our copy-constructor functionality by taking the argument by-value, C++11 will <em>automatically</em> pick the move-constructor when appropriate as well. (And, of course, as mentioned in previously linked article, the copying/moving of the value may simply be elided altogether.)</p>

<p>And so concludes the copy-and-swap idiom.</p>

<hr>

<h3>Footnotes</h3>

<p>*Why do we set <code>mArray</code> to null? Because if any further code in the operator throws, the destructor of <code>dumb_array</code> might be called; and if that happens without setting it to null, we attempt to delete memory that's already been deleted! We avoid this by setting it to null, as deleting null is a no-operation.</p>

<p>†There are other claims that we should specialize <code>std::swap</code> for our type, provide an in-class <code>swap</code> along-side a free-function <code>swap</code>, etc. But this is all unnecessary: any proper use of <code>swap</code> will be through an unqualified call, and our function will be found through <a href=""http://en.wikipedia.org/wiki/Argument-dependent_name_lookup"" rel=""noreferrer"">ADL</a>. One function will do.</p>

<p>‡The reason is simple: once you have the resource to yourself, you may swap and/or move it (C++11) anywhere it needs to be. And by making the copy in the parameter list, you maximize optimization.</p>
","3279550"
"Why use static_cast<int>(x) instead of (int)x?","248523","","<p>I've heard that the <code>static_cast</code> function should be preferred to C-style or simple function-style casting.  Is this true?  Why?</p>
","<p>The main reason is that classic C casts make no distinction between what we call <code>static_cast&lt;&gt;()</code>, <code>reinterpret_cast&lt;&gt;()</code>, <code>const_cast&lt;&gt;()</code>, and <code>dynamic_cast&lt;&gt;()</code>. These four things are completely different.</p>

<p>A <code>static_cast&lt;&gt;()</code> is usually safe. There is a valid conversion in the language, or an appropriate constructor that makes it possible. The only time it's a bit risky is when you cast down to an inherited class; you must make sure that the object is a actually the descendant that you claim it is, by means external to the language (like a flag in the object). A <code>dynamic_cast&lt;&gt;()</code> is safe as long as the result is checked (pointer) or a possible exception is taken into account (reference). </p>

<p>A <code>reinterpret_cast&lt;&gt;()</code> (or a <code>const_cast&lt;&gt;()</code>) on the other hand is always dangerous. You tell the compiler: ""trust me: I know this doesn't look like a <code>foo</code> (this looks as if it isn't mutable), but it is"". </p>

<p>The first problem is that it's almost impossible to tell which one will occur in a C-style cast without looking at large and disperse pieces of code and knowing all the rules.</p>

<p>Let's assume these:</p>

<pre><code>class CMyClass : public CMyBase {...};
class CMyOtherStuff {...} ;

CMyBase  *pSomething; // filled somewhere
</code></pre>

<p>Now, these two are compiled the same way:</p>

<pre><code>CMyClass *pMyObject;
pMyObject = static_cast&lt;CMyClass*&gt;(pSomething); // Safe; as long as we checked

pMyObject = (CMyClass*)(pSomething); // Same as static_cast&lt;&gt;
                                     // Safe; as long as we checked
                                     // but harder to read
</code></pre>

<p>However, let's see this almost identical code:</p>

<pre><code>CMyOtherStuff *pOther;
pOther = static_cast&lt;CMyOtherStuff*&gt;(pSomething); // Compiler error: Can't convert

pOther = (CMyOtherStuff*)(pSomething);            // No compiler error.
                                                  // Same as reinterpret_cast&lt;&gt;
                                                  // and it's wrong!!!
</code></pre>

<p>As you can see, there is no easy way to distinguish between the two situations without knowing a lot about all the classes involved.</p>

<p>The second problem is that the C-style casts are too hard to locate. In complex expressions it can be very hard to see C-style casts. It is virtually impossible to write an automated tool that needs to locate C-style casts (for example a search tool) without a full blown C++ compiler front-end. On the other hand, it's easy to search for ""static_cast&lt;"" or ""reinterpret_cast&lt;"".</p>

<pre><code>pOther = reinterpret_cast&lt;CMyOtherStuff*&gt;(pSomething);
      // No compiler error.
      // but the presence of a reinterpret_cast&lt;&gt; is 
      // like a Siren with Red Flashing Lights in your code.
      // The mere typing of it should cause you to feel VERY uncomfortable.
</code></pre>

<p>That means that, not only are C-style casts more dangerous, but it's a lot harder to find them all to make sure that they are correct.</p>
","103868"
"Alternative to itoa() for converting integer to string C++?","247871","","<p>I was wondering if there was an alternative to <code>itoa()</code> for converting an integer to a string because when I run it in visual Studio I get warnings, and when I try to build my program under Linux, I get a compilation error.</p>
","<p>In C++11 you can use <a href=""http://en.cppreference.com/w/cpp/string/basic_string/to_string"" rel=""noreferrer""><code>std::to_string</code></a>:</p>

<pre><code>#include &lt;string&gt;

std::string s = std::to_string(5);
</code></pre>

<p>If you're working with prior to C++11, you could use C++ streams:</p>

<pre><code>#include &lt;sstream&gt;

int i = 5;
std::string s;
std::stringstream out;
out &lt;&lt; i;
s = out.str();
</code></pre>

<p>Taken from <a href=""http://notfaq.wordpress.com/2006/08/30/c-convert-int-to-string/"" rel=""noreferrer"">http://notfaq.wordpress.com/2006/08/30/c-convert-int-to-string/</a></p>
","228039"
"Is there a standard sign function (signum, sgn) in C/C++?","247591","","<p>I want a function that returns -1 for negative numbers and +1 for positive numbers.
<a href=""http://en.wikipedia.org/wiki/Sign_function"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Sign_function</a>
It's easy enough to write my own, but it seems like something that ought to be in a standard library somewhere.</p>

<p>Edit: Specifically, I was looking for a function working on floats.</p>
","<p>Surprised no one has posted the branchless, type-safe C++ version yet:</p>

<pre><code>template &lt;typename T&gt; int sgn(T val) {
    return (T(0) &lt; val) - (val &lt; T(0));
}
</code></pre>

<p>Benefits:</p>

<ul>
<li>Actually implements signum (-1, 0, or 1). Implementations here using copysign only return -1 or 1, which is not signum. Also, some implementations here are returning a float (or T) rather than an int, which seems wasteful.</li>
<li>Works for ints, floats, doubles, unsigned shorts, or any custom types constructible from integer 0 and orderable.</li>
<li>Fast! <code>copysign</code> is slow, especially if you need to promote and then narrow again. This is branchless and optimizes excellently</li>
<li>Standards-compliant! The bitshift hack is neat, but only works for some bit representations, and doesn't work when you have an unsigned type. It could be provided as a manual specialization when appropriate.</li>
<li>Accurate! Simple comparisons with zero can maintain the machine's internal high-precision representation (e.g. 80 bit on x87), and avoid a premature round to zero.</li>
</ul>

<p>Caveats:</p>

<ul>
<li>It's a template so it'll take forever to compile.</li>
<li>Apparently some people think use of a new, somewhat esoteric, and very slow standard library function <em>that doesn't even really implement signum</em> is more understandable.</li>
<li><p>The <code>&lt; 0</code> part of the check triggers GCC's <code>-Wtype-limits</code> warning when instantiated for an unsigned type. You can avoid this by using some overloads:</p>

<pre><code>template &lt;typename T&gt; inline constexpr
int signum(T x, std::false_type is_signed) {
    return T(0) &lt; x;
}

template &lt;typename T&gt; inline constexpr
int signum(T x, std::true_type is_signed) {
    return (T(0) &lt; x) - (x &lt; T(0));
}

template &lt;typename T&gt; inline constexpr
int signum(T x) {
    return signum(x, std::is_signed&lt;T&gt;());
}
</code></pre>

<p>(Which is a good example of the first caveat.)</p></li>
</ul>
","4609795"
"How do I list the symbols in a .so file","245856","","<p>How do list the symbols being exported from a .so file. If possible, I'd also like to know their source (e.g. if they are pulled in from a static library).</p>

<p>I'm using gcc 4.0.2, if that makes a difference</p>
","<p>The standard tool for listing symbols is <code>nm</code>, you can use it simply like this:</p>

<pre><code>nm -g yourLib.so
</code></pre>

<p>If you want to see symbols of a C++ library, add the ""-C"" option which demangle the symbols (it's far more readable demangled).</p>

<pre><code>nm -gC yourLib.so
</code></pre>

<p>If your .so file is in elf format, you have two options:</p>

<p>Either <code>objdump</code> (<code>-C</code> is also useful for demangling C++):</p>

<pre><code>$ objdump -TC libz.so

libz.so:     file format elf64-x86-64

DYNAMIC SYMBOL TABLE:
0000000000002010 l    d  .init  0000000000000000              .init
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 free
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 __errno_location
0000000000000000  w   D  *UND*  0000000000000000              _ITM_deregisterTMCloneTable
</code></pre>

<p>Or use <code>readelf</code>:</p>

<pre><code>$ readelf -Ws libz.so
Symbol table '.dynsym' contains 112 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND
     1: 0000000000002010     0 SECTION LOCAL  DEFAULT   10
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND free@GLIBC_2.2.5 (14)
     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __errno_location@GLIBC_2.2.5 (14)
     4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTable
</code></pre>
","34796"
"fast way to copy one vector into another","243782","","<p>I prefer two ways:</p>

<pre><code>void copyVecFast(const vec&lt;int&gt;&amp; original)
{
  vector&lt;int&gt; newVec;
  newVec.reserve(original.size());
  copy(original.begin(),original.end(),back_inserter(newVec));
}

void copyVecFast(vec&lt;int&gt;&amp; original)
{

  vector&lt;int&gt; newVec;
  newVec.swap(original); 
}
</code></pre>

<p>How do you do it?</p>
","<p>Your second example does not work if you send the argument by reference. Did you mean</p>

<pre><code>void copyVecFast(vec&lt;int&gt; original) // no reference
{

  vector&lt;int&gt; new_;
  new_.swap(original); 
}
</code></pre>

<p>That would work, but an easier way is </p>

<pre><code>vector&lt;int&gt; new_(original);
</code></pre>
","644693"
"How to use Boost in Visual Studio 2010","243755","","<p>What is a good step by step explanation on how to use the Boost library in an empty project in Visual Studio 2010?</p>
","<p>While <a href=""https://stackoverflow.com/questions/2629421/how-to-use-boost-in-vs-2010/2641513#2641513"">Nate's answer</a> is pretty good already, I'm going to expand on it more specifically for Visual Studio 2010 as requested, and include information on compiling in the various optional components which requires external libraries.</p>

<p>If you are using headers only libraries, then all you need to do is to unarchive the boost download and set up the environment variables. The instruction below set the environment variables for Visual Studio only, and not across the system as a whole. Note you only have to do it once.</p>

<ol>
<li>Unarchive the latest version of boost (1.47.0 as of writing) into a directory of your choice (e.g. <code>C:\boost_1_47_0</code>).</li>
<li>Create a new empty project in Visual Studio.</li>
<li>Open the Property Manager and expand one of the configuration for the platform of your choice.</li>
<li>Select &amp; right click <code>Microsoft.Cpp.&lt;Platform&gt;.user</code>, and select <code>Properties</code> to open the Property Page for edit.</li>
<li>Select <code>VC++ Directories</code> on the left.</li>
<li>Edit the <code>Include Directories</code> section to include the path to your boost source files.</li>
<li>Repeat steps 3 - 6 for different platform of your choice if needed.</li>
</ol>

<p>If you want to use the part of boost that require building, but none of the features that requires external dependencies, then building it is fairly simple.</p>

<ol>
<li>Unarchive the latest version of boost (1.47.0 as of writing) into a directory of your choice (e.g. <code>C:\boost_1_47_0</code>).</li>
<li>Start the Visual Studio Command Prompt for the platform of your choice and navigate to where boost is.</li>
<li>Run: <code>bootstrap.bat</code> to build b2.exe (previously named bjam).</li>
<li><p>Run b2: </p>

<ul>
<li><strong>Win32:</strong> <code>b2 --toolset=msvc-10.0 --build-type=complete stage</code> ;  </li>
<li><strong>x64:</strong> <code>b2 --toolset=msvc-10.0 --build-type=complete architecture=x86 address-model=64 stage</code>  </li>
</ul></li>
</ol>

<p>Go for a walk / watch a movie or 2 / ....  </p>

<ol start=""8"">
<li>Go through steps 2 - 6 from the set of instruction above to set the environment variables.</li>
<li>Edit the <code>Library Directories</code> section to include the path to your boost libraries output. (The default for the example and instructions above would be <code>C:\boost_1_47_0\stage\lib</code>. Rename and move the directory first if you want to have x86 &amp; x64 side by side (such as to <code>&lt;BOOST_PATH&gt;\lib\x86</code> &amp; <code>&lt;BOOST_PATH&gt;\lib\x64</code>).</li>
<li>Repeat steps 2 - 6 for different platform of your choice if needed.</li>
</ol>

<p>If you want the optional components, then you have more work to do. These are:</p>

<ul>
<li>Boost.IOStreams Bzip2 filters</li>
<li>Boost.IOStreams Zlib filters</li>
<li>Boost.MPI</li>
<li>Boost.Python</li>
<li>Boost.Regex ICU support</li>
</ul>

<p>Boost.IOStreams Bzip2 filters:</p>

<ol>
<li>Unarchive the latest version of bzip2 library (1.0.6 as of writing) source files into a directory of your choice (e.g. <code>C:\bzip2-1.0.6</code>).</li>
<li>Follow the second set of instructions above to build boost, but add in the option <code>-sBZIP2_SOURCE=""C:\bzip2-1.0.6""</code> when running b2 in step 5.</li>
</ol>

<p>Boost.IOStreams Zlib filters</p>

<ol>
<li>Unarchive the latest version of zlib library (1.2.5 as of writing) source files into a directory of your choice (e.g. <code>C:\zlib-1.2.5</code>).</li>
<li>Follow the second set of instructions above to build boost, but add in the option <code>-sZLIB_SOURCE=""C:\zlib-1.2.5""</code> when running b2 in step 5.</li>
</ol>

<p>Boost.MPI</p>

<ol>
<li>Install a MPI distribution such as Microsoft Compute Cluster Pack.</li>
<li>Follow steps 1 - 3 from the second set of instructions above to build boost.</li>
<li>Edit the file <code>project-config.jam</code> in the directory <code>&lt;BOOST_PATH&gt;</code> that resulted from running bootstrap. Add in a line that read <code>using mpi ;</code> (note the space before the ';').</li>
<li>Follow the rest of the steps from the second set of instructions above to build boost. If auto-detection of the MPI installation fail, then you'll need to look for and modify the appropriate build file to look for MPI in the right place.</li>
</ol>

<p>Boost.Python</p>

<ol>
<li>Install a Python distribution such as ActiveState's ActivePython. Make sure the Python installation is in your PATH.</li>
<li><p>To completely built the 32-bits version of the library requires 32-bits Python, and similarly for the 64-bits version. If you have multiple versions installed for such reason, you'll need to tell b2 where to find specific version and when to use which one. One way to do that would be to edit the file <code>project-config.jam</code> in the directory <code>&lt;BOOST_PATH&gt;</code> that resulted from running bootstrap. Add in the following two lines adjusting as appropriate for your Python installation paths &amp; versions (note the space before the ';').</p>

<p><code>using python : 2.6 : C:\\Python\\Python26\\python ;</code></p>

<p><code>using python : 2.6 : C:\\Python\\Python26-x64\\python :  :  : &lt;address-model&gt;64 ;</code></p>

<p>Do note that such explicit Python specification currently cause MPI build to fail. So you'll need to do some separate building with and without specification to build everything if you're building MPI as well.</p></li>
<li><p>Follow the second set of instructions above to build boost.</p></li>
</ol>

<p>Boost.Regex ICU support</p>

<ol>
<li>Unarchive the latest version of ICU4C library (4.8 as of writing) source file into a directory of your choice (e.g. <code>C:\icu4c-4_8</code>).</li>
<li>Open the Visual Studio Solution in <code>&lt;ICU_PATH&gt;\source\allinone</code>.</li>
<li>Build All for both debug &amp; release configuration for the platform of your choice. There can be <a href=""http://bugs.icu-project.org/trac/ticket/8170"" rel=""noreferrer"">a problem</a> building recent releases of ICU4C with Visual Studio 2010 when the output for both debug &amp; release build are in the same directory (which is the default behaviour). A possible workaround is to do a Build All (of debug build say) and then do a Rebuild all in the 2nd configuration (e.g. release build).</li>
<li>If building for x64, you'll need to be running x64 OS as there's post build steps that involves running some of the 64-bits application that it's building.</li>
<li>Optionally remove the source directory when you're done.</li>
<li>Follow the second set of instructions above to build boost, but add in the option <code>-sICU_PATH=""C:\icu4c-4_8""</code> when running b2 in step 5.</li>
</ol>
","2655683"
"Printing 1 to 1000 without loop or conditionals","243327","","<p><strong>Task</strong>: Print numbers from 1 to 1000 without using any loop or conditional statements. Don't just write the <code>printf()</code> or <code>cout</code> statement 1000 times.</p>

<p>How would you do that using C or C++?</p>
","<p>Compile time recursion! :P</p>

<pre><code>#include &lt;iostream&gt;
template&lt;int N&gt;
struct NumberGeneration{
  static void out(std::ostream&amp; os)
  {
    NumberGeneration&lt;N-1&gt;::out(os);
    os &lt;&lt; N &lt;&lt; std::endl;
  }
};
template&lt;&gt;
struct NumberGeneration&lt;1&gt;{
  static void out(std::ostream&amp; os)
  {
    os &lt;&lt; 1 &lt;&lt; std::endl;
  }
};
int main(){
   NumberGeneration&lt;1000&gt;::out(std::cout);
}
</code></pre>
","4568650"
"When to use reinterpret_cast?","243264","","<p>I am little confused with the applicability of <code>reinterpret_cast</code> vs <code>static_cast</code>. From what I have read the general rules are to use static cast when the types can be interpreted at compile time hence the word <code>static</code>. This is the cast the C++ compiler uses internally for implicit casts also.</p>

<p><code>reinterpret_cast</code>s are applicable in two scenarios, convert integer types to pointer types and vice versa or to convert one pointer type to another. The general idea I get is this is unportable and should be avoided.</p>

<p>Where I am a little confused is one usage which I need, I am calling C++ from C and the C code needs to hold on to the C++ object so basically it holds a <code>void*</code>. What cast should be used to convert between the <code>void *</code> and the Class type?</p>

<p>I have seen usage of both <code>static_cast</code> and <code>reinterpret_cast</code>? Though from what I have been reading it appears <code>static</code> is better as the cast can happen at compile time? Though it says to use <code>reinterpret_cast</code> to convert from one pointer type to another? </p>
","<p>The C++ standard guarantees the following:</p>

<p><code>static_cast</code>ing a pointer to and from <code>void*</code> preserves the address. That is, in the following, a, b and c all point to the same address:</p>

<pre><code>int* a = new int();
void* b = static_cast&lt;void*&gt;(a);
int* c = static_cast&lt;int*&gt;(b);
</code></pre>

<p><code>reinterpret_cast</code> only guarantees that if you cast a pointer to a different type, <em>and then <code>reinterpret_cast</code> it back to the original type</em>, you get the original value. So in the following:</p>

<pre><code>int* a = new int();
void* b = reinterpret_cast&lt;void*&gt;(a);
int* c = reinterpret_cast&lt;int*&gt;(b);
</code></pre>

<p>a and c contain the same value, but the value of b is unspecified. (in practice it will typically contain the same address as a and c, but that's not specified in the standard, and it may not be true on machines with more complex memory systems.)</p>

<p>For casting to and from void*, <code>static_cast</code> should be preferred.</p>
","573345"
"C++ obtaining milliseconds time on Linux -- clock() doesn't seem to work properly","243024","","<p>On Windows, <code>clock()</code> returns the time in milliseconds, but on this Linux box I'm working on, it rounds it to the nearest 1000 so the precision is only to the ""second"" level and not to the milliseconds level.</p>

<p>I found a solution with Qt using the <code>QTime</code> class, instantiating an object and calling <code>start()</code> on it then calling <code>elapsed()</code> to get the number of milliseconds elapsed.</p>

<p>I got kind of lucky because I'm working with Qt to begin with, but I'd like a solution that doesn't rely on third party libraries,  </p>

<p>Is there no standard way to do this?</p>

<p><strong>UPDATE</strong></p>

<p>Please don't recommend Boost ..</p>

<p>If Boost and Qt can do it, surely it's not magic, there must be something standard that they're using!</p>
","<p>You could use gettimeofday at the start and end of your method and then difference the two return structs.  You'll get a structure like the following:</p>

<pre><code>struct timeval {
  time_t tv_sec;
  suseconds_t tv_usec;
}
</code></pre>
","588352"
"Best C/C++ Network Library","241582","","<p>I haven't done work in C/C++ for a little bit and was just wondering what people's favorite cross platform libraries are to use.  </p>

<p>I'm looking for something that is a good quick and dirty library as well as a library that is a little more robust.  Often those are two different libraries and that's okay.</p>
","<p>Aggregated List of Libraries</p>

<ul>
<li><a href=""http://www.boost.org/doc/libs/release/doc/html/boost_asio.html"" rel=""noreferrer"">Boost.Asio</a> is really good.</li>
<li><a href=""http://think-async.com/Asio/"" rel=""noreferrer"">Asio</a> is also available as a stand-alone library.</li>
<li><a href=""http://www.cs.wustl.edu/~schmidt/ACE.html"" rel=""noreferrer"">ACE</a> is also good, a bit more mature and has a <a href=""https://rads.stackoverflow.com/amzn/click/0201604647"" rel=""noreferrer"">couple</a> of <a href=""https://rads.stackoverflow.com/amzn/click/0201795256"" rel=""noreferrer"">books</a> to support it.</li>
<li><a href=""http://cpp-netlib.org/index.html"" rel=""noreferrer"">C++ Network Library</a></li>
<li><a href=""http://pocoproject.org/"" rel=""noreferrer"">POCO</a></li>
<li><a href=""http://www.qt.io/developers/"" rel=""noreferrer"">Qt</a></li>
<li><a href=""http://www.jenkinssoftware.com/"" rel=""noreferrer"">Raknet</a></li>
<li><a href=""http://www.zeromq.org/"" rel=""noreferrer"">ZeroMQ</a> (C++)</li>
<li><a href=""http://nanomsg.org/"" rel=""noreferrer"">nanomsg</a> (C Library)</li>
<li><a href=""https://github.com/nanomsg/nng"" rel=""noreferrer"">nng</a> (C Library)</li>
<li>Berkeley Sockets</li>
<li><a href=""http://libevent.org/"" rel=""noreferrer"">libevent</a></li>
<li><a href=""http://apr.apache.org/"" rel=""noreferrer"">Apache APR</a></li>
<li><a href=""https://github.com/glycerine/yield"" rel=""noreferrer"">yield</a></li>
<li>Winsock2(Windows only)</li>
<li><a href=""http://code.google.com/p/wvstreams/"" rel=""noreferrer"">wvstreams</a></li>
<li><a href=""https://zeroc.com/"" rel=""noreferrer"">zeroc</a></li>
<li><a href=""http://curl.haxx.se/libcurl/"" rel=""noreferrer"">libcurl</a></li>
<li><a href=""https://github.com/libuv/libuv"" rel=""noreferrer"">libuv</a> (Cross-platform C library)</li>
<li><a href=""http://www.sfml-dev.org/tutorials/2.3/#network-module"" rel=""noreferrer"">SFML's Network Module</a></li>
<li><a href=""https://github.com/microsoft/cpprestsdk"" rel=""noreferrer"">C++ Rest SDK (Casablanca)</a></li>
<li><a href=""http://www.deltavsoft.com/doc/rcf_user_guide/Intro.html#rcf_user_guide.Intro.WhatIsRcf"" rel=""noreferrer"">RCF</a></li>
<li><a href=""https://github.com/corvusoft/restbed"" rel=""noreferrer"">Restbed (HTTP Asynchronous Framework)</a></li>
<li><a href=""http://github.com/zenol/sednl"" rel=""noreferrer"">SedNL</a></li>
<li><a href=""https://www.libsdl.org/projects/SDL_net/"" rel=""noreferrer"">SDL_net</a></li>
<li><a href=""http://www.prismtech.com/vortex/vortex-opensplice"" rel=""noreferrer"">OpenSplice|DDS</a></li>
<li><a href=""http://facil.io"" rel=""noreferrer"">facil.io</a> (C, with optional HTTP and Websockets, Linux / BSD / macOS)</li>
<li><a href=""https://developer.gnome.org/gio/stable/gio-gnetworking.h.html"" rel=""noreferrer"">GLib Networking</a></li>
<li><a href=""http://www.grpc.io/"" rel=""noreferrer"">grpc</a> from Google</li>
</ul>
","118968"
"error: passing xxx as 'this' argument of xxx discards qualifiers","239185","","<pre><code>#include &lt;iostream&gt;
#include &lt;set&gt;

using namespace std;

class StudentT {

public:
    int id;
    string name;
public:
    StudentT(int _id, string _name) : id(_id), name(_name) {
    }
    int getId() {
        return id;
    }
    string getName() {
        return name;
    }
};

inline bool operator&lt; (StudentT s1, StudentT s2) {
    return  s1.getId() &lt; s2.getId();
}

int main() {

    set&lt;StudentT&gt; st;
    StudentT s1(0, ""Tom"");
    StudentT s2(1, ""Tim"");
    st.insert(s1);
    st.insert(s2);
    set&lt;StudentT&gt; :: iterator itr;
    for (itr = st.begin(); itr != st.end(); itr++) {
        cout &lt;&lt; itr-&gt;getId() &lt;&lt; "" "" &lt;&lt; itr-&gt;getName() &lt;&lt; endl;
    }
    return 0;
}
</code></pre>

<p>In line:</p>

<pre><code>cout &lt;&lt; itr-&gt;getId() &lt;&lt; "" "" &lt;&lt; itr-&gt;getName() &lt;&lt; endl;
</code></pre>

<p>It give an error that:</p>

<blockquote>
  <p>../main.cpp:35: error: passing 'const StudentT' as 'this' argument of 'int StudentT::getId()' discards qualifiers</p>
  
  <p>../main.cpp:35: error: passing 'const StudentT' as 'this' argument of 'std::string StudentT::getName()' discards qualifiers</p>
</blockquote>

<p>What's wrong with this code? Thank you!</p>
","<p>The objects in the <code>std::set</code> are stored as <code>const StudentT</code>. So when you try to call <code>getId()</code> with the <code>const</code> object the compiler  detects a problem, namely you're calling a non-const member function on const object which is not allowed because non-const member functions make NO PROMISE not to modify the object; so the compiler is going to make a <em>safe</em> assumption that <code>getId()</code> might attempt to modify the object but at the same time, it also notices that the object is const; so any attempt to modify the const object should be an error. Hence compiler generates error message. </p>

<p>The solution is simple: make the functions const as:</p>

<pre><code>int getId() const {
    return id;
}
string getName() const {
    return name;
}
</code></pre>

<p>This is necessary because now you can call <code>getId()</code> and <code>getName()</code> on const objects as:</p>

<pre><code>void f(const StudentT &amp; s)
{
     cout &lt;&lt; s.getId();   //now okay, but error with your versions
     cout &lt;&lt; s.getName(); //now okay, but error with your versions
}
</code></pre>

<p>As a sidenote, you should implement <code>operator&lt;</code> as : </p>

<pre><code>inline bool operator&lt; (const StudentT &amp; s1, const StudentT &amp; s2)
{
    return  s1.getId() &lt; s2.getId();
}
</code></pre>

<p>Note parameters are now <code>const</code> reference.</p>
","5973485"
"Can a local variable's memory be accessed outside its scope?","238697","","<p>I have the following code.</p>

<pre><code>int * foo()
{
    int a = 5;
    return &amp;a;
}

int main()
{
    int* p = foo();
    cout &lt;&lt; *p;
    *p = 8;
    cout &lt;&lt; *p;
}
</code></pre>

<p>And the code is just running with no runtime exceptions!</p>

<p>The output was <code>58</code></p>

<p>How can it be? Isn't the memory of a local variable inaccessible outside its function?</p>
","<blockquote>
  <p>How can it be? Isn't the memory of a local variable inaccessible outside its function?</p>
</blockquote>

<p>You rent a hotel room. You put a book in the top drawer of the bedside table and go to sleep.  You check out the next morning, but ""forget"" to give back your key. You steal the key!</p>

<p>A week later, you return to the hotel, do not check in, sneak into your old room with your stolen key, and look in the drawer. Your book is still there. Astonishing!</p>

<p><strong>How can that be? Aren't the contents of a hotel room drawer inaccessible if you haven't rented the room?</strong></p>

<p>Well, obviously that scenario can happen in the real world no problem. There is no mysterious force that causes your book to disappear when you are no longer authorized to be in the room. Nor is there a mysterious force that prevents you from entering a room with a stolen key.</p>

<p>The hotel management is not <em>required</em> to remove your book. You didn't make a contract with them that said that if you leave stuff behind, they'll shred it for you. If you illegally re-enter your room with a stolen key to get it back, the hotel security staff is not <em>required</em> to catch you sneaking in. You didn't make a contract with them that said ""if I try to sneak back into my room later, you are required to stop me."" Rather, you signed a contract with them that said ""I promise not to sneak back into my room later"", a contract which <em>you broke</em>.</p>

<p>In this situation <strong>anything can happen</strong>. The book can be there -- you got lucky. Someone else's book can be there and yours could be in the hotel's furnace. Someone could be there right when you come in, tearing your book to pieces. The hotel could have removed the table and book entirely and replaced it with a wardrobe. The entire hotel could be just about to be torn down and replaced with a football stadium, and you are going to die in an explosion while you are sneaking around. </p>

<p>You don't know what is going to happen; when you checked out of the hotel and stole a key to illegally use later, you gave up the right to live in a predictable, safe world because <em>you</em> chose to break the rules of the system.</p>

<p><strong>C++ is not a safe language</strong>. It will cheerfully allow you to break the rules of the system. If you try to do something illegal and foolish like going back into a room you're not authorized to be in and rummaging through a desk that might not even be there anymore, C++ is not going to stop you. Safer languages than C++ solve this problem by restricting your power -- by having much stricter control over keys, for example.</p>

<h2>UPDATE</h2>

<p>Holy goodness, this answer is getting a lot of attention. (I'm not sure why -- I considered it to be just a ""fun"" little analogy, but whatever.)</p>

<p>I thought it might be germane to update this a bit with a few more technical thoughts.</p>

<p>Compilers are in the business of generating code which manages the storage of the data manipulated by that program. There are lots of different ways of generating code to manage memory, but over time two basic techniques have become entrenched. </p>

<p>The first is to have some sort of ""long lived"" storage area where the ""lifetime"" of each byte in the storage -- that is, the period of time when it is validly associated with some program variable -- cannot be easily predicted ahead of time. The compiler generates calls into a ""heap manager"" that knows how to dynamically allocate storage when it is needed and reclaim it when it is no longer needed.</p>

<p>The second is to have some sort of ""short lived"" storage area where the lifetime of each byte in the storage is well known, and, in particular, lifetimes of storages follow a ""nesting"" pattern. That is, the allocation of the longest-lived of the short-lived variables strictly overlaps the allocations of shorter-lived variables that come after it. </p>

<p>Local variables follow the latter pattern; when a method is entered, its local variables come alive. When that method calls another method, the new method's local variables come alive. They'll be dead before the first method's local variables are dead.  The relative order of the beginnings and endings of lifetimes of storages associated with local variables can be worked out ahead of time.</p>

<p>For this reason, local variables are usually generated as storage on a ""stack"" data structure, because a stack has the property that the first thing pushed on it is going to be the last thing popped off. </p>

<p>It's like the hotel decides to only rent out rooms sequentially, and you can't check out until everyone with a room number higher than you has checked out. </p>

<p>So let's think about the stack. In many operating systems you get one stack per thread and the stack is allocated to be a certain fixed size. When you call a method, stuff is pushed onto the stack. If you then pass a pointer to the stack back out of your method, as the original poster does here, that's just a pointer to the middle of some entirely valid million-byte memory block. In our analogy, you check out of the hotel; when you do, you just checked out of the highest-numbered occupied room.  If no one else checks in after you, and you go back to your room illegally, all your stuff is guaranteed to still be there <em>in this particular hotel</em>.</p>

<p>We use stacks for temporary stores because they are really cheap and easy. An implementation of C++ is not required to use a stack for storage of locals; it could use the heap. It doesn't, because that would make the program slower. </p>

<p>An implementation of C++ is not required to leave the garbage you left on the stack untouched so that you can come back for it later illegally; it is perfectly legal for the compiler to generate code that turns back to zero everything in the ""room"" that you just vacated. It doesn't because again, that would be expensive.</p>

<p>An implementation of C++ is not required to ensure that when the stack logically shrinks, the addresses that used to be valid are still mapped into memory. The implementation is allowed to tell the operating system ""we're done using this page of stack now. Until I say otherwise, issue an exception that destroys the process if anyone touches the previously-valid stack page"".  Again, implementations do not actually do that because it is slow and unnecessary.</p>

<p>Instead, implementations let you make mistakes and get away with it. Most of the time. Until one day something truly awful goes wrong and the process explodes.</p>

<p>This is problematic. There are a lot of rules and it is very easy to break them accidentally. I certainly have many times. And worse, the problem often only surfaces when memory is detected to be corrupt billions of nanoseconds after the corruption happened, when it is very hard to figure out who messed it up.</p>

<p>More memory-safe languages solve this problem by restricting your power. In ""normal"" C# there simply is no way to take the address of a local and return it or store it for later. You can take the address of a local, but the language is cleverly designed so that it is impossible to use it after the lifetime of the local ends. In order to take the address of a local and pass it back, you have to put the compiler in a special ""unsafe"" mode, <em>and</em> put the word ""unsafe"" in your program, to call attention to the fact that you are probably doing something dangerous that could be breaking the rules. </p>

<p>For further reading:</p>

<ul>
<li><p>What if C# did allow returning references? Coincidentally that is the subject of today's blog post:</p>

<p><a href=""http://blogs.msdn.com/b/ericlippert/archive/2011/06/23/ref-returns-and-ref-locals.aspx"" rel=""noreferrer"">http://blogs.msdn.com/b/ericlippert/archive/2011/06/23/ref-returns-and-ref-locals.aspx</a></p></li>
<li><p>Why do we use stacks to manage memory? Are value types in C# always stored on the stack? How does virtual memory work? And many more topics in how the C# memory manager works. Many of these articles are also germane to C++ programmers:</p>

<p><a href=""https://blogs.msdn.microsoft.com/ericlippert/tag/memory-management/"" rel=""noreferrer"">https://blogs.msdn.microsoft.com/ericlippert/tag/memory-management/</a></p></li>
</ul>
","6445794"
"For every character in string","237521","","<p>How would I do a for loop on every character in string in C++?</p>
","<ol>
<li><p>Looping through the <a href=""http://eel.is/c++draft/basic.fundamental#1"" rel=""noreferrer"">characters</a> of a <code>std::string</code>, using a range-based for loop (it's from C++11, already supported in recent releases of GCC, clang, and the VC11 beta):</p>

<pre><code>std::string str = ???;
for(char&amp; c : str) {
    do_things_with(c);
}
</code></pre></li>
<li><p>Looping through the characters of a <code>std::string</code> with iterators:</p>

<pre><code>std::string str = ???;
for(std::string::iterator it = str.begin(); it != str.end(); ++it) {
    do_things_with(*it);
}
</code></pre></li>
<li><p>Looping through the characters of a <code>std::string</code> with an old-fashioned for-loop:</p>

<pre><code>for(std::string::size_type i = 0; i &lt; str.size(); ++i) {
    do_things_with(str[i]);
}
</code></pre></li>
<li><p>Looping through the characters of a null-terminated character array:</p>

<pre><code>char* str = ???;
for(char* it = str; *it; ++it) {
    do_things_with(*it);
}
</code></pre></li>
</ol>
","9438329"
"What is the C++ function to raise a number to a power?","237417","","<p>How do I raise a number to a power?</p>

<pre><code>2^1

2^2

2^3
</code></pre>

<p>etc...</p>
","<p>pow() in the cmath library. More info <a href=""http://en.cppreference.com/w/cpp/numeric/math/pow"" rel=""noreferrer"">here</a>.
Don't forget to have the #include at the top.</p>
","845917"
"Remove spaces from std::string in C++","236150","","<p>What is the preferred way to remove spaces from a string in C++? I could loop through all the characters and build a new string, but is there a better way?</p>
","<p>The best thing to do is to use the algorithm <a href=""http://en.cppreference.com/w/cpp/algorithm/remove"" rel=""noreferrer""><code>remove_if</code></a> and isspace:</p>

<pre><code>remove_if(str.begin(), str.end(), isspace);
</code></pre>

<p>Now the algorithm itself can't change the container(only modify the values), so it actually shuffles the values around and returns a pointer to where the end now should be. So we have to call string::erase to actually modify the length of the container:</p>

<pre><code>str.erase(remove_if(str.begin(), str.end(), isspace), str.end());
</code></pre>

<p>We should also note that remove_if will make at most one copy of the data. Here is a sample implementation:</p>

<pre><code>template&lt;typename T, typename P&gt;
T remove_if(T beg, T end, P pred)
{
    T dest = beg;
    for (T itr = beg;itr != end; ++itr)
        if (!pred(*itr))
            *(dest++) = *itr;
    return dest;
}
</code></pre>
","83538"
"Why should I use a pointer rather than the object itself?","235537","","<p>I'm coming from a Java background and have started working with objects in C++. But one thing that occurred to me is that people often use pointers to objects rather than the objects themselves, for example this declaration:</p>

<pre><code>Object *myObject = new Object;
</code></pre>

<p>rather than:</p>

<pre><code>Object myObject;
</code></pre>

<p>Or instead of using a function, let's say <code>testFunc()</code>, like this:</p>

<pre><code>myObject.testFunc();
</code></pre>

<p>we have to write:</p>

<pre><code>myObject-&gt;testFunc();
</code></pre>

<p>But I can't figure out why should we do it this way. I would assume it has to do with efficiency and speed since we get direct access to the memory address. Am I right?</p>
","<p>It's very unfortunate that you see dynamic allocation so often. That just shows how many bad C++ programmers there are.</p>

<p>In a sense, you have two questions bundled up into one. The first is when should we use dynamic allocation (using <code>new</code>)? The second is when should we use pointers?</p>

<p>The important take-home message is that you should <strong>always use the appropriate tool for the job</strong>. In almost all situations, there is something more appropriate and safer than performing manual dynamic allocation and/or using raw pointers.</p>

<h2>Dynamic allocation</h2>

<p>In your question, you've demonstrated two ways of creating an object. The main difference is the storage duration of the object. When doing <code>Object myObject;</code> within a block, the object is created with automatic storage duration, which means it will be destroyed automatically when it goes out of scope. When you do <code>new Object()</code>, the object has dynamic storage duration, which means it stays alive until you explicitly <code>delete</code> it. You should only use dynamic storage duration when you need it. 
That is, <strong>you should <em>always</em> prefer creating objects with automatic storage duration when you can</strong>.</p>

<p>The main two situations in which you might require dynamic allocation:</p>

<ol>
<li><strong>You need the object to outlive the current scope</strong> - that specific object at that specific memory location, not a copy of it. If you're okay with copying/moving the object (most of the time you should be), you should prefer an automatic object.</li>
<li><strong>You need to allocate a lot of memory</strong>, which may easily fill up the stack. It would be nice if we didn't have to concern ourselves with this (most of the time you shouldn't have to), as it's really outside the purview of C++, but unfortunately we have to deal with the reality of the systems we're developing for.</li>
</ol>

<p>When you do absolutely require dynamic allocation, you should encapsulate it in a smart pointer or some other type that performs <a href=""http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization"" rel=""noreferrer"">RAII</a> (like the standard containers). Smart pointers provide ownership semantics of dynamically allocated objects. Take a look at <a href=""http://en.cppreference.com/w/cpp/memory/unique_ptr"" rel=""noreferrer""><code>std::unique_ptr</code></a> and <a href=""http://en.cppreference.com/w/cpp/memory/shared_ptr"" rel=""noreferrer""><code>std::shared_ptr</code></a>, for example. If you use them appropriately, you can almost entirely avoid performing your own memory management (see the <a href=""https://rmf.io/cxx11/rule-of-zero"" rel=""noreferrer"">Rule of Zero</a>).</p>

<h2>Pointers</h2>

<p>However, there are other more general uses for raw pointers beyond dynamic allocation, but most have alternatives that you should prefer. As before, <strong>always prefer the alternatives unless you really need pointers</strong>.</p>

<ol>
<li><p><strong>You need reference semantics</strong>. Sometimes you want to pass an object using a pointer (regardless of how it was allocated) because you want the function to which you're passing it to have access that that specific object (not a copy of it). However, in most situations, you should prefer reference types to pointers, because this is specifically what they're designed for. Note this is not necessarily about extending the lifetime of the object beyond the current scope, as in situation 1 above. As before, if you're okay with passing a copy of the object, you don't need reference semantics.</p></li>
<li><p><strong>You need polymorphism</strong>. You can only call functions polymorphically (that is, according to the dynamic type of an object) through a pointer or reference to the object. If that's the behaviour you need, then you need to use pointers or references. Again, references should be preferred.</p></li>
<li><p><strong>You want to represent that an object is optional</strong> by allowing a <code>nullptr</code> to be passed when the object is being omitted. If it's an argument, you should prefer to use default arguments or function overloads. Otherwise, you should prefer use a type that encapsulates this behaviour, such as <code>std::optional</code> (introduced in C++17 - with earlier C++ standards, use <code>boost::optional</code>).</p></li>
<li><p><strong>You want to decouple compilation units to improve compilation time</strong>. The useful property of a pointer is that you only require a forward declaration of the pointed-to type (to actually use the object, you'll need a definition). This allows you to decouple parts of your compilation process, which may significantly improve compilation time. See the <a href=""http://en.wikipedia.org/wiki/Opaque_pointer"" rel=""noreferrer"">Pimpl idiom</a>.</p></li>
<li><p><strong>You need to interface with a C library</strong> or a C-style library. At this point, you're forced to use raw pointers. The best thing you can do is make sure you only let your raw pointers loose at the last possible moment. You can get a raw pointer from a smart pointer, for example, by using its <code>get</code> member function. If a library performs some allocation for you which it expects you to deallocate via a handle, you can often wrap the handle up in a smart pointer with a custom deleter that will deallocate the object appropriately.</p></li>
</ol>
","22146244"
"/usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.15' not found","232334","","<p>How can I get GLIBCXX_3.4.15 in Ubuntu? I can't run some programs that I'm compiling.</p>

<p>When I do:</p>

<pre><code>strings /usr/lib/libstdc++.so.6 | grep GLIBC
</code></pre>

<p>I get:</p>

<pre><code>GLIBCXX_3.4
GLIBCXX_3.4.1
GLIBCXX_3.4.2
GLIBCXX_3.4.3
GLIBCXX_3.4.4
GLIBCXX_3.4.5
GLIBCXX_3.4.6
GLIBCXX_3.4.7
GLIBCXX_3.4.8
GLIBCXX_3.4.9
GLIBCXX_3.4.10
GLIBCXX_3.4.11
GLIBCXX_3.4.12
GLIBCXX_3.4.13
GLIBCXX_3.4.14
GLIBC_2.2.5
GLIBC_2.3
GLIBC_2.4
GLIBC_2.3.4
GLIBC_2.3.2
GLIBCXX_FORCE_NEW
GLIBCXX_DEBUG_MESSAGE_LENGTH
</code></pre>

<p>Thanks for any help!</p>
","<p>I'm compiling gcc 4.6 from source, and apparently</p>

<pre><code>sudo make install 
</code></pre>

<p>didn't catch this one. I dug around and found</p>

<pre><code>gcc/trunk/x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.15
</code></pre>

<p>I copied it in to /usr/lib and redirected libstdc++.so.6 to point to the new one, and now everything works.</p>
","5216501"
"Why have header files and .cpp files?","231590","","<p>Why does C++ have header files and .cpp files?</p>
","<p>Well, the main reason would be for separating the interface from the implementation.  The header declares ""what"" a class (or whatever is being implemented) will do, while the cpp file defines ""how"" it will perform those features.</p>

<p>This reduces dependencies so that code that uses the header doesn't necessarily need to know all the details of the implementation and any other classes/headers needed only for that. This will reduce compilation times and also the amount of recompilation needed when something in the implementation changes.</p>

<p>It's not perfect, and you would usually resort to techniques like the <a href=""http://aszt.inf.elte.hu/~gsd/halado_cpp/ch09s03.html"" rel=""noreferrer"">Pimpl Idiom</a> to properly separate interface and implementation, but it's a good start.</p>
","333902"
"In C++, what is a virtual base class?","230820","","<p>I want to know what a ""<em>virtual base class</em>"" is and what it means.</p>

<p>Let me show an example:</p>

<pre><code>class Foo
{
public:
    void DoSomething() { /* ... */ }
};

class Bar : public virtual Foo
{
public:
    void DoSpecific() { /* ... */ }
};
</code></pre>
","<p>Virtual base classes, used in virtual inheritance, is a way of preventing multiple ""instances"" of a given class appearing in an inheritance hierarchy when using multiple inheritance.</p>

<p>Consider the following scenario:</p>

<pre><code>class A { public: void Foo() {} };
class B : public A {};
class C : public A {};
class D : public B, public C {};
</code></pre>

<p>The above class hierarchy results in the ""dreaded diamond"" which looks like this:</p>

<pre><code>  A
 / \
B   C
 \ /
  D
</code></pre>

<p>An instance of D will be made up of B, which includes A, and C which also includes A. So you have two ""instances"" (for want of a better expression) of A.</p>

<p>When you have this scenario, you have the possibility of ambiguity. What happens when you do this:</p>

<pre><code>D d;
d.Foo(); // is this B's Foo() or C's Foo() ??
</code></pre>

<p>Virtual inheritance is there to solve this problem. When you specify virtual when inheriting your classes, you're telling the compiler that you only want a single instance.</p>

<pre><code>class A { public: void Foo() {} };
class B : public virtual A {};
class C : public virtual A {};
class D : public B, public C {};
</code></pre>

<p>This means that there is only one ""instance"" of A included in the hierarchy. Hence</p>

<pre><code>D d;
d.Foo(); // no longer ambiguous
</code></pre>

<p>Hope that helps as a mini summary. For more information, have a read of <a href=""http://en.wikipedia.org/wiki/Virtual_inheritance"" rel=""noreferrer"">this</a> and <a href=""https://isocpp.org/wiki/faq/multiple-inheritance"" rel=""noreferrer"">this</a>. A good example is also available <a href=""http://www.learncpp.com/cpp-tutorial/118-virtual-base-classes/"" rel=""noreferrer"">here</a>.</p>
","21607"
"How can I read and parse CSV files in C++?","228998","","<p>I need to load and use CSV file data in C++.  At this point it can really just be a comma-delimited parser (ie don't worry about escaping new lines and commas).  The main need is a line-by-line parser that will return a vector for the next line each time the method is called.</p>

<p>I found this article which looks quite promising:
<a href=""http://www.boost.org/doc/libs/1_35_0/libs/spirit/example/fundamental/list_parser.cpp"" rel=""noreferrer"">http://www.boost.org/doc/libs/1_35_0/libs/spirit/example/fundamental/list_parser.cpp</a></p>

<p>I've never used Boost's Spirit, but am willing to try it. But only if there isn't a more straightforward solution I'm overlooking.</p>
","<p>If you don't care about escaping comma and newline,<br>
AND you can't embed comma and newline in quotes (If you can't escape then...)<br>
then its only about three lines of code (OK 14 ->But its only 15 to read the whole file).</p>

<pre><code>std::vector&lt;std::string&gt; getNextLineAndSplitIntoTokens(std::istream&amp; str)
{
    std::vector&lt;std::string&gt;   result;
    std::string                line;
    std::getline(str,line);

    std::stringstream          lineStream(line);
    std::string                cell;

    while(std::getline(lineStream,cell, ','))
    {
        result.push_back(cell);
    }
    // This checks for a trailing comma with no data after it.
    if (!lineStream &amp;&amp; cell.empty())
    {
        // If there was a trailing comma then add an empty element.
        result.push_back("""");
    }
    return result;
}
</code></pre>

<p>I would just create a class representing a row.<br>
Then stream into that object:</p>

<pre><code>#include &lt;iterator&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;

class CSVRow
{
    public:
        std::string const&amp; operator[](std::size_t index) const
        {
            return m_data[index];
        }
        std::size_t size() const
        {
            return m_data.size();
        }
        void readNextRow(std::istream&amp; str)
        {
            std::string         line;
            std::getline(str, line);

            std::stringstream   lineStream(line);
            std::string         cell;

            m_data.clear();
            while(std::getline(lineStream, cell, ','))
            {
                m_data.push_back(cell);
            }
            // This checks for a trailing comma with no data after it.
            if (!lineStream &amp;&amp; cell.empty())
            {
                // If there was a trailing comma then add an empty element.
                m_data.push_back("""");
            }
        }
    private:
        std::vector&lt;std::string&gt;    m_data;
};

std::istream&amp; operator&gt;&gt;(std::istream&amp; str, CSVRow&amp; data)
{
    data.readNextRow(str);
    return str;
}   
int main()
{
    std::ifstream       file(""plop.csv"");

    CSVRow              row;
    while(file &gt;&gt; row)
    {
        std::cout &lt;&lt; ""4th Element("" &lt;&lt; row[3] &lt;&lt; "")\n"";
    }
}
</code></pre>

<p>But with a little work we could technically create an iterator:</p>

<pre><code>class CSVIterator
{   
    public:
        typedef std::input_iterator_tag     iterator_category;
        typedef CSVRow                      value_type;
        typedef std::size_t                 difference_type;
        typedef CSVRow*                     pointer;
        typedef CSVRow&amp;                     reference;

        CSVIterator(std::istream&amp; str)  :m_str(str.good()?&amp;str:NULL) { ++(*this); }
        CSVIterator()                   :m_str(NULL) {}

        // Pre Increment
        CSVIterator&amp; operator++()               {if (m_str) { if (!((*m_str) &gt;&gt; m_row)){m_str = NULL;}}return *this;}
        // Post increment
        CSVIterator operator++(int)             {CSVIterator    tmp(*this);++(*this);return tmp;}
        CSVRow const&amp; operator*()   const       {return m_row;}
        CSVRow const* operator-&gt;()  const       {return &amp;m_row;}

        bool operator==(CSVIterator const&amp; rhs) {return ((this == &amp;rhs) || ((this-&gt;m_str == NULL) &amp;&amp; (rhs.m_str == NULL)));}
        bool operator!=(CSVIterator const&amp; rhs) {return !((*this) == rhs);}
    private:
        std::istream*       m_str;
        CSVRow              m_row;
};


int main()
{
    std::ifstream       file(""plop.csv"");

    for(CSVIterator loop(file); loop != CSVIterator(); ++loop)
    {
        std::cout &lt;&lt; ""4th Element("" &lt;&lt; (*loop)[3] &lt;&lt; "")\n"";
    }
}
</code></pre>
","1120224"
"The program can't start because libgcc_s_dw2-1.dll is missing","227960","","<p>I have created a simple program in C++ with Code::Blocks.</p>

<p>If I run it from Code::Blocks, it works correctly; but if I run it by doubleclicking on the executable file, a window pops up with this message:</p>

<blockquote>
  <p>The program can't start because libgcc_s_dw2-1.dll is missing from your computer.<br>
  Try reinstalling the program to fix this problem.</p>
</blockquote>

<p>So, what is the problem? What do I have to do to fix it?</p>
","<p>I believe this is a MinGW/gcc compiler issue, rather than a Microsoft Visual Studio setup.</p>

<p>The <code>libgcc_s_dw2-1.dll</code> should be in the compiler's bin directory.  You can add this directory to your PATH environment variable for runtime linking, or you can avoid the problem by adding ""-static-libgcc -static-libstdc++"" to your compiler flags.</p>

<p>If you plan to distribute the executable, the latter probably makes the most sense.  If you only plan to run it on your own machine, the changing the PATH environment variable is an attractive option (keeps down the size of the executable).</p>

<p><strong>Updated:</strong></p>

<p>Based on feedback from Greg Treleaven (see comments below), I'm adding links to:</p>

<p><a href=""http://www.codeblocks.org/docs/main_codeblocks_en3.html#x3-1060003.11"" rel=""noreferrer""> [Screenshot of Code::Blocks ""Project build options""]</a></p>

<p><a href=""http://gcc.gnu.org/onlinedocs/gcc/Link-Options.html#Link-Options"" rel=""noreferrer""> [GNU gcc link options]</a></p>

<p>The latter discussion includes <code>-static-libgcc</code> and <code>-static-libstdc++</code> linker options.</p>
","4703059"
"C++ error 'Undefined reference to Class::Function()'","227701","","<p>I was wondering if anyone could help me out with this - I'm only new to C++ and it's causing me a fair amount of troubles.</p>

<p>I'm trying to make relatively simple Deck and Card class objects. </p>

<p>The error is showing up in ""Deck.cpp"", declaration of an array of cards, and then when i try to fill the array with card objects. It says there's an undefined reference to <code>Card::Card()</code>, <code>Card::Card(Card::Rank, Card::Suit)</code> and <code>Card::~Card()</code>.</p>

<p>I've got all my includes seemingly right, so I don't know what's going wrong.</p>

<p>The code is as follows:</p>

<p>deck.h</p>

<pre><code>#ifndef DECK_H
#define DECK_H
#include ""card.h""

class Deck
{
 public:
    Deck();
    ~Deck();
    Card DealNextCard();
    void Shuffle();
    void DisplayDeck();
protected:
private:

};

#endif // DECK_H
</code></pre>

<p>deck.cpp</p>

<pre><code>#include ""Deck.h""
#include ""card.h""

using namespace std;

const int NUM_TOTAL_CARDS = 52;
const int NUM_SUITS = 4;
const int NUM_RANKS = 13;
Card* cardArray;
void Deck() {
    cardArray = new Card[NUM_TOTAL_CARDS];
    int cardCount = 0;
    for (int i = 0; i &gt; NUM_SUITS; i++) {
        for (int j = 0; j &gt; NUM_RANKS; j++) {
            cardArray[cardCount] = Card(Card::Rank(i), Card::Suit(j) );
            cardCount++;
        }
    }
}


Card DealNextCard();
void Shuffle();
void DisplayDeck();
</code></pre>

<p>card.h</p>

<pre><code>class Card
{

    public:
        enum Suit {D=0, H, C, S};
        enum Rank {ONE=0, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, J, Q, K, A};
        Card(Card::Rank, Card::Suit);
        Card();
        virtual ~Card();
        Card::Suit suit;
        Card::Rank rank;
        Card::Rank GetRank();
        Card::Suit GetSuit();
        std::string CardName();

    protected:

    private:

};

#endif // CARD_H
</code></pre>

<p>card.cpp</p>

<pre><code>#include ""card.h""
using namespace std;


Card::Suit cardSuit;
Card::Rank cardRank;

void Card() {
    //nothing
     }


void Card(Card::Rank rank, Card::Suit suit) {
cardRank = rank;
cardSuit = suit;
}

Card::Rank GetRank() {
return cardRank;
}
Card::Suit GetSuit() {
return cardSuit;
}
std::string CardName() {
    string test;
    test = ""testing string"";
    return test;
}
</code></pre>
","<p>What are you using to compile this? If there's an undefined reference error, usually it's because the .o file (which gets created from the .cpp file) doesn't exist and your compiler/build system is not able to link it.</p>

<p>Also, in your card.cpp, the function should be <code>Card::Card()</code> instead of <code>void Card</code>. The <code>Card::</code> is <strong>scoping</strong>; it means that your <code>Card()</code> function is a member of the Card class (which it obviously is, since it's the constructor for that class). Without this, void Card is just a free function. Similarly, </p>

<p><code>void Card(Card::Rank rank, Card::Suit suit)</code></p>

<p>should be </p>

<p><code>Card::Card(Card::Rank rank, Card::Suit suit)</code></p>

<p>Also, in deck.cpp, you are saying <code>#include ""Deck.h""</code> even though you referred to it as deck.h. The includes are case sensitive.</p>
","15712951"
"Is there a decent wait function in C++?","227290","","<p>One of the first things I learned in C++ was that</p>

<pre><code>#include &lt;iostream&gt;
int main()
{
    std::cout&lt;&lt;""Hello, World!\n"";
    return 0;
}
</code></pre>

<p>would simply appear and disappear extremely quickly without pause. To prevent this, I had to go to notepad, and save</p>

<pre><code>helloworld.exe
pause
</code></pre>

<p>ase</p>

<pre><code>helloworld.bat
</code></pre>

<p>This got tedious when I needed to create a bunch of small test programs, and eventually I simply put <code>while(true);</code> at the end on most of my test programs, just so I could see the results. Is there a better wait function I can use?</p>
","<p>you can require the user to hit enter before closing the program... something like this works.</p>

<pre><code>#include &lt;iostream&gt;
int main()
{
  std::cout &lt;&lt; ""Hello, World\n"";
  std::cin.ignore();
  return 0;
}
</code></pre>

<p>The cin reads in user input, and the .ignore() function of cin tells the program to just ignore the input.  The program will continue once the user hits enter.</p>

<p><a href=""http://en.cppreference.com/w/cpp/io/basic_istream/ignore"" rel=""noreferrer"">Link</a></p>
","902269"
"Does delete call the destructor?","225392","","<p>I have an class (A) which uses a heap memory allocation for one of it's fields. Class A  is instantiated and stored as a pointer field in another class (B).</p>

<p>When I'm done with object B, I call delete, which I assume calls the destructor... But does this call the destructor in class A as well?</p>

<h3>Edit:</h3>

<p>From the answers, I take that (please edit if incorrect):</p>

<ol>
<li><code>delete</code> <em>instance of B</em> calls B::~B();</li>
<li>which calls <code>A::~A();</code></li>
<li><code>and A::~A</code> <em>should</em> explicitly <code>delete</code> all heap-allocated member variables of A;</li>
<li>and finally the memory block storing said instance of B is returned to the heap - when <em>new</em> was used, it first allocated a block of memory on heap, then invoked constructors to initialize it, now after all destructors have been invoked to finalize the object the block where the object resided is returned to the heap.</li>
</ol>
","<p>The destructor of A will run when its lifetime is over. If you want its memory to be freed and the destructor run, you have to delete it if it was allocated on the heap. If it was allocated on the stack this happens automatically (i.e. when it goes out of scope; see RAII).  If it is a member of a class (not a pointer, but a full member), then this will happen when the containing object is destroyed.</p>

<pre><code>class A
{
    char *someHeapMemory;
public:
    A() : someHeapMemory(new char[1000]) {}
    ~A() { delete[] someHeapMemory; }
};

class B
{
    A* APtr;
public:
    B() : APtr(new A()) {}
    ~B() { delete APtr; }
};

class C
{
    A Amember;
public:
    C() : Amember() {}
    ~C() {} // A is freed / destructed automatically.
};

int main()
{
    B* BPtr = new B();
    delete BPtr; // Calls ~B() which calls ~A() 
    C *CPtr = new C();
    delete CPtr;
    B b;
    C c;
} // b and c are freed/destructed automatically
</code></pre>

<p>In the above example, every delete and delete[] is needed.  And no delete is needed (or indeed able to be used) where I did not use it.</p>

<p><code>auto_ptr</code>, <code>unique_ptr</code> and <code>shared_ptr</code> etc... are great for making this lifetime management much easier:</p>

<pre><code>class A
{
    shared_array&lt;char&gt; someHeapMemory;
public:
    A() : someHeapMemory(new char[1000]) {}
    ~A() { } // someHeapMemory is delete[]d automatically
};

class B
{
    shared_ptr&lt;A&gt; APtr;
public:
    B() : APtr(new A()) {}
    ~B() {  } // APtr is deleted automatically
};

int main()
{
    shared_ptr&lt;B&gt; BPtr = new B();
} // BPtr is deleted automatically
</code></pre>
","677661"
"How do I install the OpenSSL libraries on Ubuntu?","224669","","<p>I'm trying to build some code on Ubuntu 10.04 LTS that uses OpenSSL 1.0.0.  When I run make, it invokes g++ with the ""-lssl"" option.  The source includes:</p>

<pre><code>#include &lt;openssl/bio.h&gt;
#include &lt;openssl/buffer.h&gt;
#include &lt;openssl/des.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;openssl/pem.h&gt;
#include &lt;openssl/rsa.h&gt;
</code></pre>

<p>I ran:</p>

<pre><code>$ sudo apt-get install openssl
Reading package lists... Done
Building dependency tree       
Reading state information... Done
openssl is already the newest version.
0 upgraded, 0 newly installed, 0 to remove and 3 not upgraded.
</code></pre>

<p>But I guess the openssl package doesn't include the library.  I get these errors on make:</p>

<pre><code>foo.cpp:21:25: error: openssl/bio.h: No such file or directory
foo.cpp:22:28: error: openssl/buffer.h: No such file or directory
foo.cpp:23:25: error: openssl/des.h: No such file or directory
foo.cpp:24:25: error: openssl/evp.h: No such file or directory
foo.cpp:25:25: error: openssl/pem.h: No such file or directory
foo.cpp:26:25: error: openssl/rsa.h: No such file or directory
</code></pre>

<p>How do I install the OpenSSL C++ library on Ubuntu 10.04 LTS?</p>

<p>I did a <code>man g++</code> and (under ""Options for Linking"") for the -l option it states: "" The linker searches a standard list of directories for the library..."" and ""The directories searched include several standard system directories...""  What are those standard system directories?</p>
","<p>You want to install the development package, which is libssl-dev:</p>

<pre><code>sudo apt-get install libssl-dev
</code></pre>
","3016986"
"Compile to a stand-alone executable (.exe) in Visual Studio","223064","","<p>how can I make a stand-alone exe in Visual Studio. Its just a simple Console application that I think users would not like to install a tiny Console application. I compiled a simple cpp file using the visual studio command prompt. Will the exe work even if the .NET framework is not installed? I used native C++ code.</p>
","<p>Anything using the managed environment (which includes anything written in C# and VB.NET) requires the .NET framework.  You can simply redistribute your .EXE in that scenario, but they'll need to install the appropriate framework if they don't already have it.</p>
","2035104"
"C++: How to round a double to an int?","222373","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/485525/round-for-float-in-c"">round() for float in C++</a>  </p>
</blockquote>



<p>I have a double (call it x), meant to be 55 but in actuality stored as 54.999999999999943157 which I just realised.</p>

<p>So when I do </p>

<pre><code>double x = 54.999999999999943157;
int y = (int) x;
</code></pre>

<p>y = 54 instead of 55!</p>

<p>This puzzled me for a long time. How do I get it to correctly round? </p>
","<p>add 0.5 before casting (if x > 0) or subtract 0.5 (if x &lt; 0), because the compiler will always truncate.</p>

<pre><code>float x = 55; // stored as 54.999999...
x = x + 0.5; // x is now 55.499999...
int y = (int)x; // truncated to 55
</code></pre>

<p>C++11 also introduces <a href=""http://en.cppreference.com/w/cpp/numeric/math/round"" rel=""noreferrer"">std::round</a>, which likely uses a similar logic of adding 0.5 to |x| under the hood (see the link if interested) but is obviously more robust.</p>

<p>A follow up question might be <em>why</em> the float isn't stored as exactly 55. For an explanation, see <a href=""https://stackoverflow.com/questions/21895756/why-are-floating-point-numbers-inaccurate"">this</a> stackoverflow answer.</p>
","9695341"
"Determine if map contains a value for a key?","222205","","<p>What is the best way to determine if a STL map contains a value for a given key?</p>

<pre><code>#include &lt;map&gt;

using namespace std;

struct Bar
{
    int i;
};

int main()
{
    map&lt;int, Bar&gt; m;
    Bar b = {0};
    Bar b1 = {1};

    m[0] = b;
    m[1] = b1;

    //Bar b2 = m[2];
    map&lt;int, Bar&gt;::iterator iter = m.find(2);
    Bar b3 = iter-&gt;second;

}
</code></pre>

<p>Examining this in a debugger, it looks like <code>iter</code> is just garbage data. </p>

<p>If I uncomment out this line:</p>

<pre><code>Bar b2 = m[2]
</code></pre>

<p>The debugger shows that <code>b2</code> is <code>{i = 0}</code>. (I'm guessing it means that using an undefined index will return a struct with all empty/uninitialized values?)</p>

<p>Neither of these methods is so great. What I'd really like is an interface like this:</p>

<pre><code>bool getValue(int key, Bar&amp; out)
{
    if (map contains value for key)
    {
        out = map[key];
        return true;
    }
    return false;
}
</code></pre>

<p>Does something along these lines exist?</p>
","<blockquote>
  <p>Does something along these lines exist?</p>
</blockquote>

<p>No. With the stl map class, you use <a href=""http://en.cppreference.com/w/cpp/container/map/find"" rel=""noreferrer""><code>::find()</code></a> to search the map, and compare the returned iterator to <code>std::map::end()</code></p>

<p>so</p>

<pre><code>map&lt;int,Bar&gt;::iterator it = m.find('2');
Bar b3;
if(it != m.end())
{
   //element found;
   b3 = it-&gt;second;
}
</code></pre>

<p>Obviously you can write your own <code>getValue()</code> routine if you want (also in C++, there is no reason to use <code>out</code>), but I would suspect that once you get the hang of using <code>std::map::find()</code> you won't want to waste your time.</p>

<p><strong>Also your code is slightly wrong:</strong></p>

<p><code>m.find('2');</code> will search the map for a keyvalue that is <code>'2'</code>. IIRC the C++ compiler will implicitly convert '2' to an int, which results in the numeric value for the ASCII code for '2' which is not what you want.</p>

<p>Since your keytype in this example is <code>int</code> you want to search like this: <strong><code>m.find(2);</code></strong></p>
","3136537"
"'typeid' versus 'typeof' in C++","222166","","<p>I am wondering what the difference is between <code>typeid</code> and <code>typeof</code> in C++. Here's what I know:</p>

<ul>
<li><p><code>typeid</code> is mentioned in the documentation for  <a href=""http://www.cplusplus.com/reference/typeinfo/type_info/"" rel=""noreferrer"">type_info</a> which is defined in the C++ header file <a href=""http://www.cplusplus.com/reference/typeinfo/?kw=typeinfo"" rel=""noreferrer"">typeinfo</a>.</p></li>
<li><p><code>typeof</code> is defined in the GCC extension for C and in the C++ <a href=""http://en.wikipedia.org/wiki/Boost_C%2B%2B_Libraries"" rel=""noreferrer"">Boost</a> library.</p></li>
</ul>

<p>Also, here is test code test that I've created where I've discovered that <code>typeid</code> does not return what I expected. Why?</p>

<p><strong>main.cpp</strong></p>

<pre><code>#include &lt;iostream&gt;  
#include &lt;typeinfo&gt;  //for 'typeid' to work  

class Person {  
    public:
    // ... Person members ...  
    virtual ~Person() {}  
};  

class Employee : public Person {  
    // ... Employee members ...  
};  

int main () {  
    Person person;  
    Employee employee;  
    Person *ptr = &amp;employee;  
    int t = 3;  

    std::cout &lt;&lt; typeid(t).name() &lt;&lt; std::endl;  
    std::cout &lt;&lt; typeid(person).name() &lt;&lt; std::endl;   // Person (statically known at compile-time)  
    std::cout &lt;&lt; typeid(employee).name() &lt;&lt; std::endl; // Employee (statically known at compile-time)  
    std::cout &lt;&lt; typeid(ptr).name() &lt;&lt; std::endl;      // Person * (statically known at compile-time)  
    std::cout &lt;&lt; typeid(*ptr).name() &lt;&lt; std::endl;     // Employee (looked up dynamically at run-time  
                                                       // because it is the dereference of a pointer
                                                       // to a polymorphic class)  
 }  
</code></pre>

<p><strong>output:</strong></p>

<pre class=""lang-none prettyprint-override""><code>bash-3.2$ g++ -Wall main.cpp -o main  
bash-3.2$ ./main   
i  
6Person  
8Employee  
P6Person  
8Employee
</code></pre>
","<p>C++ language has no such thing as <code>typeof</code>. You must be looking at some compiler-specific extension. If you are talking about GCC's <code>typeof</code>, then a similar feature is present in C++11 through the keyword <code>decltype</code>. Again, C++ has no such <code>typeof</code> keyword.</p>

<p><code>typeid</code> is a C++ language operator which returns type identification information at run time. It basically returns a <code>type_info</code> object, which is equality-comparable with other <code>type_info</code> objects.</p>

<p>Note, that the only defined property of the returned <code>type_info</code> object has is its being equality- and non-equality-comparable, i.e. <code>type_info</code> objects describing different types shall compare non-equal, while <code>type_info</code> objects describing the same type have to compare equal. Everything else is implementation-defined. Methods that return various ""names"" are not guaranteed to return anything human-readable, and even not guaranteed to return anything at all.</p>

<p>Note also, that the above probably implies (although the standard doesn't seem to mention it explicitly) that consecutive applications of <code>typeid</code> to the same type might return different <code>type_info</code> objects (which, of course, still have to compare equal).</p>
","1986485"
"How do I convert between big-endian and little-endian values in C++?","221261","","<p>How do I convert between big-endian and little-endian values in C++?</p>

<p>EDIT: For clarity, I have to translate binary data (double-precision floating point values and 32-bit and 64-bit integers) from one CPU architecture to another.  This doesn't involve networking, so ntoh() and similar functions won't work here.</p>

<p>EDIT #2: The answer I accepted applies directly to compilers I'm targetting (which is why I chose it).  However, there are other very good, more portable answers here.</p>
","<p>If you're using <strong>Visual C++</strong> do the following: You include intrin.h and call the following functions:</p>

<p>For 16 bit numbers:</p>

<pre><code>unsigned short _byteswap_ushort(unsigned short value);
</code></pre>

<p>For 32 bit numbers:</p>

<pre><code>unsigned long _byteswap_ulong(unsigned long value);
</code></pre>

<p>For 64 bit numbers:</p>

<pre><code>unsigned __int64 _byteswap_uint64(unsigned __int64 value);
</code></pre>

<p>8 bit numbers (chars) don't need to be converted.</p>

<p>Also these are only defined for unsigned values they work for signed integers as well.</p>

<p>For floats and doubles it's more difficult as with plain integers as these may or not may be in the host machines byte-order. You can get little-endian floats on big-endian machines and vice versa.</p>

<p>Other compilers have similar intrinsics as well. </p>

<p>In <strong>GCC</strong> for example you can directly call:</p>

<pre><code>int32_t __builtin_bswap32 (int32_t x)
int64_t __builtin_bswap64 (int64_t x)
</code></pre>

<p>(no need to include something). Afaik bits.h declares the same function in a non gcc-centric way as well.</p>

<p>16 bit swap it's just a bit-rotate.</p>

<p>Calling the intrinsics instead of rolling your own gives you the best performance and code density btw.. </p>
","105339"
"Printing an array in C++?","220361","","<p>Is there a way of printing arrays in C++?</p>

<p>I'm trying to make a function that reverses a user-input array and then prints it out. I tried Googling this problem and it seemed like C++ can't print arrays. That can't be true can it?</p>
","<p>can't you just iterate over the elements? like this:</p>

<pre><code>for (int i = numElements - 1; i &gt;= 0; i--) 
    cout &lt;&lt; array[i];
</code></pre>

<p>Note: As Maxim Egorushkin pointed out, this could overflow. See his comment below for a better solution.</p>
","1370341"
"Why switch statement cannot be applied on strings?","218538","","<pre><code>int main()
{
    switch(std::string(""raj"")) //Compilation error - switch expression of type illegal 
    {
    case""sda"":
    }

}
</code></pre>
","<p>The reason why has to do with the type system.  C/C++ doesn't really support strings as a type.  It does support the idea of a constant char array but it doesn't really fully understand the notion of a string.  </p>

<p>In order to generate the code for a switch statement the compiler must understand what it means for two values to be equal.  For items like ints and enums, this is a trivial bit comparison.  But how should the compiler compare 2 string values?  Case sensitive, insensitive, culture aware, etc ...  Without a full awareness of a string this cannot be accurately answered.  </p>

<p>Additionally, C/C++ switch statements are typically generated as <a href=""http://en.wikipedia.org/wiki/Branch_table"" rel=""noreferrer"">branch tables</a>.  It's not nearly as easy to generate a branch table for a string style switch.  </p>
","650218"
"Concatenating strings doesn't work as expected","215924","","<p>I know it is a common issue, but looking for references and other material I don't find a clear answer to this question.</p>

<p>Consider the following code:</p>

<pre><code>#include &lt;string&gt;

// ...
// in a method
std::string a = ""Hello "";
std::string b = ""World"";
std::string c = a + b;
</code></pre>

<p>The compiler tells me it cannot find an overloaded operator for <code>char[dim]</code>.</p>

<p>Does it mean that in the string there is not a + operator?</p>

<p>But in several examples there is a situation like this one. If this is not the correct way to concat more strings, what is the best way?</p>
","<p>Your code, as written, works. You’re probably trying to achieve something unrelated, but similar:</p>

<pre><code>std::string c = ""hello"" + ""world"";
</code></pre>

<p>This doesn’t work because for C++ this seems like you’re trying to add two <code>char</code> pointers. Instead, you <em>need</em> to convert at least one of the <code>char*</code> literals to a <code>std::string</code>. Either you can do what you’ve already posted in the question (as I said, this code <em>will</em> work) or you do the following:</p>

<pre><code>std::string c = std::string(""hello"") + ""world"";
</code></pre>
","4304690"
"How to convert vector to array in C++","215618","","<p>How do I convert a <code>vector</code> of <code>double</code>s to an <code>array</code> of <code>double</code>s?</p>
","<p>There's a fairly simple trick to do so, since the spec now <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#69"" rel=""noreferrer"">guarantees</a> vectors store their elements contiguously:</p>

<pre><code>std::vector&lt;double&gt; v;
double* a = &amp;v[0];
</code></pre>
","2923290"
"Use 'class' or 'typename' for template parameters?","214634","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2023977/c-difference-of-keywords-typename-and-class-in-templates"">C++ difference of keywords ‘typename’ and ‘class’ in templates</a>  </p>
</blockquote>



<p>When defining a function template or class template in C++, one can write this:</p>

<pre><code>template &lt;class T&gt; ...
</code></pre>

<p>or one can write this:</p>

<pre><code>template &lt;typename T&gt; ...
</code></pre>

<p>Is there a good reason to prefer one over the other?</p>

<hr>

<p>I accepted the most popular (and interesting) answer, but the real answer seems to be ""No, there is no good reason to prefer one over the other.""</p>

<ul>
<li>They are equivalent (except as noted below).</li>
<li>Some people have reasons to always use <code>typename</code>.</li>
<li>Some people have reasons to always use <code>class</code>.</li>
<li>Some people have reasons to use both.</li>
<li>Some people don't care which one they use.</li>
</ul>

<p>Note, however, in the case of <em>template template</em> parameters, use of <code>class</code> instead of <code>typename</code> is required. See <a href=""https://stackoverflow.com/a/11311432/3964522"">user1428839's answer</a> below. (But this particular case is not a matter of preference, it is a requirement of the language.) (Also this will change with <code>c++17</code>)</p>
","<p>Stan Lippman talked about this <a href=""https://web.archive.org/web/20060619131004/http://blogs.msdn.com/slippman/archive/2004/08/11/212768.aspx"" rel=""noreferrer"">here</a>.  I thought it was interesting.</p>

<p><em>Summary</em>: Stroustrup originally used <code>class</code> to specify types in templates to avoid introducing a new keyword. Some in the committee worried that this overloading of the keyword led to confusion. Later, the committee introduced a new keyword <code>typename</code> to resolve syntactic ambiguity, and decided to let it also be used to specify template types to reduce confusion, but for backward compatibility, <code>class</code> kept its overloaded meaning.</p>
","213135"
"Is the practice of returning a C++ reference variable, evil?","213528","","<p>This is a little subjective I think; I'm not sure if the opinion will be unanimous (I've seen a lot of code snippets where references are returned).</p>

<p>According to a comment toward <a href=""https://stackoverflow.com/questions/752479/am-i-initializing-my-c-reference-variables-correctly"">this question I just asked, regarding initializing references</a>, returning a reference can be evil because, [as I understand] it makes it easier to miss deleting it, which can lead to memory leaks.</p>

<p>This worries me, as I have followed examples (unless I'm imagining things) and done this in a fair few places... Have I misunderstood? Is it evil? If so, just how evil?</p>

<p>I feel that because of my mixed bag of pointers and references, combined with the fact that I'm new to C++, and total confusion over what to use when, my applications must be memory leak hell...</p>

<p>Also, I understand that using smart/shared pointers is generally accepted as the best way to avoid memory leaks.</p>
","<p>In general, returning a reference is perfectly normal and happens all the time.</p>

<p>If you mean:</p>

<pre><code>int&amp; getInt() {
    int i;
    return i;  // DON'T DO THIS.
}
</code></pre>

<p>That is all sorts of evil. The stack-allocated <code>i</code> will go away and you are referring to nothing. This is also evil:</p>

<pre><code>int&amp; getInt() {
    int* i = new int;
    return *i;  // DON'T DO THIS.
}
</code></pre>

<p>Because now the client has to eventually do the strange:</p>

<pre><code>int&amp; myInt = getInt(); // note the &amp;, we cannot lose this reference!
delete &amp;myInt;         // must delete...totally weird and  evil

int oops = getInt(); 
delete &amp;oops; // undefined behavior, we're wrongly deleting a copy, not the original
</code></pre>

<p>Note that rvalue references are still just references, so all the evil applications remain the same.</p>

<p>If you want to allocate something that lives beyond the scope of the function, use a smart pointer (or in general, a container):</p>

<pre><code>std::unique_ptr&lt;int&gt; getInt() {
    return std::make_unique&lt;int&gt;(0);
}
</code></pre>

<p>And now the client stores a smart pointer:</p>

<pre><code>std::unique_ptr&lt;int&gt; x = getInt();
</code></pre>

<p>References are also okay for accessing things where you know the lifetime is being kept open on a higher-level, e.g.:</p>

<pre><code>struct immutableint {
    immutableint(int i) : i_(i) {}

    const int&amp; get() const { return i_; }
private:
    int i_;
};
</code></pre>

<p>Here we know it's okay to return a reference to <code>i_</code> because whatever is calling us manages the lifetime of the class instance, so <code>i_</code> will live at least that long.</p>

<p>And of course, there's nothing wrong with just:</p>

<pre><code>int getInt() {
   return 0;
}
</code></pre>

<p>If the lifetime should be left up to the caller, and you're just computing the value.</p>

<p>Summary: it's okay to return a reference if the lifetime of the object won't end after the call.</p>
","752699"
"std::string to float or double","213430","","<p>I'm trying to convert <code>std::string</code> to <code>float/double</code>.
I tried:</p>

<pre><code>std::string num = ""0.6"";
double temp = (double)atof(num.c_str());
</code></pre>

<p>But it always returns zero. Any other ways?</p>
","<pre><code>std::string num = ""0.6"";
double temp = ::atof(num.c_str());
</code></pre>

<p>Does it for me, it is a valid C++ syntax to convert a string to a double.</p>

<p>You can do it with the stringstream or boost::lexical_cast but those come with a performance penalty.</p>

<hr>

<p>Ahaha you have a Qt project ...</p>

<pre><code>QString winOpacity(""0.6"");
double temp = winOpacity.toDouble();
</code></pre>

<p>Extra note:<br>
If the input data is a <code>const char*</code>, <code>QByteArray::toDouble</code> will be faster.</p>
","1012604"
"Printing the correct number of decimal points with cout","212642","","<p>I have a list of <code>float</code> values and I want to print them with <code>cout</code> with 2 decimal places.</p>

<p>For example:</p>

<pre><code>10.900  should be printed as 10.90
1.000 should be printed as 1.00
122.345 should be printed as 122.34
</code></pre>

<p>How can I do this? </p>

<p>( <code>setprecision</code> doesn't seem to help in this.)</p>
","<p>With <code>&lt;iomanip&gt;</code>, you can use <a href=""http://en.cppreference.com/w/cpp/io/manip/fixed"" rel=""noreferrer""><code>std::fixed</code></a> and <a href=""http://en.cppreference.com/w/cpp/io/manip/setprecision"" rel=""noreferrer""><code>std::setprecision</code></a></p>

<p>Here is an example</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;

int main()
{
    double d = 122.345;

    std::cout &lt;&lt; std::fixed;
    std::cout &lt;&lt; std::setprecision(2);
    std::cout &lt;&lt; d;
}
</code></pre>

<p>And you will get output </p>

<pre><code>122.34
</code></pre>
","5907076"
"How do you get assembler output from C/C++ source in gcc?","212566","","<p>How does one do this?</p>

<p>If I want to analyze how something is getting compiled, how would I get the emitted assembly code?</p>
","<p>Use the <code>-S</code> option to gcc (or g++).</p>

<pre><code>gcc -S helloworld.c
</code></pre>

<p>This will run the preprocessor (cpp) over helloworld.c, perform the initial compilation and then stop before the assembler is run.</p>

<p>By default this will output a file <code>helloworld.s</code>. The output file can be still be set by using the <code>-o</code> option.</p>

<pre><code>gcc -S -o my_asm_output.s helloworld.c
</code></pre>

<p>Of course this only works if you have the original source.
An alternative if you only have the resultant object file is to use <code>objdump</code>, by setting the <code>--disassemble</code> option (or <code>-d</code> for the abbreviated form).</p>

<pre><code>objdump -S --disassemble helloworld &gt; helloworld.dump
</code></pre>

<p>This option works best if debugging option is enabled for the object file (<code>-g</code> at compilation time) and the file hasn't been stripped.</p>

<p>Running <code>file helloworld</code> will give you some indication as to the level of detail that you will get by using objdump.</p>
","137074"
"Variable number of arguments in C++?","212566","","<p>How can I write a function that accepts a variable number of arguments? Is this possible, how?</p>
","<p>You probably shouldn't, and you can probably do what you want to do in a safer  and simpler way.  Technically to use variable number of arguments in C you include stdarg.h.  From that you'll get the <code>va_list</code> type as well as three functions that operate on it called <code>va_start()</code>, <code>va_arg()</code> and <code>va_end()</code>.</p>

<pre><code>#include&lt;stdarg.h&gt;

int maxof(int n_args, ...)
{
    va_list ap;
    va_start(ap, n_args);
    int max = va_arg(ap, int);
    for(int i = 2; i &lt;= n_args; i++) {
        int a = va_arg(ap, int);
        if(a &gt; max) max = a;
    }
    va_end(ap);
    return max;
}
</code></pre>

<p>If you ask me, this is a mess.  It looks bad, it's unsafe, and it's full of technical details that have nothing to do with what you're conceptually trying to achieve.  Instead, consider using overloading or inheritance/polymorphism, builder pattern (as in <code>operator&lt;&lt;()</code> in streams) or default arguments etc.  These are all safer:  the compiler gets to know more about what you're trying to do so there are more occasions it can stop you before you blow your leg off.</p>
","1657924"
"Storing C++ template function definitions in a .CPP file","212111","","<p>I have some template code that I would prefer to have stored in a CPP file instead of inline in the header.  I know this can be done as long as you know which template types will be used.  For example:</p>

<p><strong>.h file</strong></p>

<pre><code>class foo
{
public:
    template &lt;typename T&gt;
    void do(const T&amp; t);
};
</code></pre>

<p><strong>.cpp file</strong></p>

<pre><code>template &lt;typename T&gt;
void foo::do(const T&amp; t)
{
    // Do something with t
}

template void foo::do&lt;int&gt;(const int&amp;);
template void foo::do&lt;std::string&gt;(const std::string&amp;);
</code></pre>

<p>Note the last two lines - the foo::do template function is only used with ints and std::strings, so those definitions mean the app will link.</p>

<p>My question is - is this a nasty hack or will this work with other compilers/linkers? I am only using this code with VS2008 at the moment but will be wanting to port to other environments.</p>
","<p>The problem you describe can be solved by defining the template in the header, or via the approach you describe above.</p>

<p>I recommend reading the following points from the <a href=""https://isocpp.org/wiki/faq/templates"" rel=""noreferrer"">C++ FAQ Lite</a>: </p>

<ul>
<li><a href=""https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl"" rel=""noreferrer"">Why can’t I separate the definition of my templates class from its declaration and put it inside a .cpp file?</a></li>
<li><a href=""https://isocpp.org/wiki/faq/templates#separate-template-fn-defn-from-decl"" rel=""noreferrer"">How can I avoid linker errors with my template functions?</a></li>
<li><a href=""https://isocpp.org/wiki/faq/templates#separate-template-fn-defn-from-decl-export-keyword"" rel=""noreferrer"">How does the C++ keyword export help with template linker errors?</a></li>
</ul>

<p>They go into a lot of detail about these (and other) template issues.</p>
","115735"
"Generating random integer from a range","210164","","<p>I need a function which would generate a random integer in given range (including border values). I don't unreasonable quality/randomness requirements, I have four requirements:</p>

<ul>
<li>I need it to be fast. My project needs to generate millions (or sometimes even tens of millions) of random numbers and my current generator function has proven to be a bottleneck.</li>
<li>I need it to be reasonably uniform (use of rand() is perfectly fine).</li>
<li>the min-max ranges can be anything from &lt;0, 1> to &lt;-32727, 32727>.</li>
<li>it has to be seedable.</li>
</ul>

<p>I currently have following C++ code:</p>

<pre><code>output = min + (rand() * (int)(max - min) / RAND_MAX)
</code></pre>

<p>The problem is, that it is not really uniform - max is returned only when rand() = RAND_MAX (for Visual C++ it is 1/32727). This is major issue for small ranges like &lt;-1, 1>, where the last value is almost never returned.</p>

<p>So I grabbed pen and paper and came up with following formula (which builds on the (int)(n + 0.5) integer rounding trick):</p>

<p><img src=""https://i.stack.imgur.com/2c4JZ.png"" alt=""enter image description here""></p>

<p>But it still doesn't give me uniform distribution. Repeated runs with 10000 samples give me ratio of 37:50:13 for values values -1, 0. 1.</p>

<p>Could you please suggest better formula? (or even whole pseudo-random number generator function)</p>
","<p>A fast, somewhat better than yours, but still not properly uniform distributed solution is</p>

<pre><code>output = min + (rand() % static_cast&lt;int&gt;(max - min + 1))
</code></pre>

<p>Except when the size of the range is a power of 2, <strong>this method produces <a href=""https://ericlippert.com/2013/12/16/how-much-bias-is-introduced-by-the-remainder-technique/"" rel=""noreferrer"">biased non-uniform distributed</a> numbers</strong> regardless the quality of <code>rand()</code>. For a comprehensive test of the quality of this method, please <a href=""https://ericlippert.com/2013/12/16/how-much-bias-is-introduced-by-the-remainder-technique/"" rel=""noreferrer"">read this</a>.</p>
","5009006"
"long long in C/C++","209867","","<p>I am trying this code on GNU's C++ compiler and am unable to understand its behaviour:</p>

<pre><code>#include &lt;stdio.h&gt;;

int main()
{
    int  num1 = 1000000000;
    long num2 = 1000000000;
    long long num3;
    //num3 = 100000000000;
    long long num4 = ~0;

    printf(""%u %u %u"", sizeof(num1), sizeof(num2), sizeof(num3));
    printf(""%d %ld %lld %llu"", num1, num2, num3, num4);
    return 0;
}
</code></pre>

<p>When I uncomment the commented line, the code doesn't compile and is giving an error:</p>

<blockquote>
  <p>error: integer constant is too large for long type</p>
</blockquote>

<p>But, if the code is compiled as it is and is executed, it produces values much larger than 10000000000.</p>

<p>Why?</p>
","<p>The letters 100000000000 make up a literal integer constant, but the value is too large for the type <code>int</code>. You need to use a suffix to change the type of the literal, i.e.</p>

<pre><code>long long num3 = 100000000000LL;
</code></pre>

<p>The suffix <code>LL</code> makes the literal into type <code>long long</code>. C is not ""smart"" enough to conclude this from the type on the left, the type is a property of the literal itself, not the context in which it is being used.</p>
","1458934"
"Why are elementwise additions much faster in separate loops than in a combined loop?","209326","","<p>Suppose <code>a1</code>, <code>b1</code>, <code>c1</code>, and <code>d1</code> point to heap memory and my numerical code has the following core loop.</p>

<pre><code>const int n = 100000;

for (int j = 0; j &lt; n; j++) {
    a1[j] += b1[j];
    c1[j] += d1[j];
}
</code></pre>

<p>This loop is executed 10,000 times via another outer <code>for</code> loop. To speed it up, I changed the code to:</p>

<pre><code>for (int j = 0; j &lt; n; j++) {
    a1[j] += b1[j];
}

for (int j = 0; j &lt; n; j++) {
    c1[j] += d1[j];
}
</code></pre>

<p>Compiled on MS <a href=""http://en.wikipedia.org/wiki/Visual_C++#32-bit_versions"" rel=""noreferrer"">Visual C++ 10.0</a> with full optimization and <a href=""http://en.wikipedia.org/wiki/SSE2"" rel=""noreferrer"">SSE2</a> enabled for 32-bit on a <a href=""http://en.wikipedia.org/wiki/Intel_Core_2"" rel=""noreferrer"">Intel Core 2</a> Duo (x64), the first example takes 5.5&nbsp;seconds and the double-loop example takes only 1.9&nbsp;seconds. My question is: (Please refer to the my rephrased question at the bottom)</p>

<p>PS: I am not sure, if this helps:</p>

<p>Disassembly for the first loop basically looks like this (this block is repeated about five times in the full program):</p>

<pre><code>movsd       xmm0,mmword ptr [edx+18h]
addsd       xmm0,mmword ptr [ecx+20h]
movsd       mmword ptr [ecx+20h],xmm0
movsd       xmm0,mmword ptr [esi+10h]
addsd       xmm0,mmword ptr [eax+30h]
movsd       mmword ptr [eax+30h],xmm0
movsd       xmm0,mmword ptr [edx+20h]
addsd       xmm0,mmword ptr [ecx+28h]
movsd       mmword ptr [ecx+28h],xmm0
movsd       xmm0,mmword ptr [esi+18h]
addsd       xmm0,mmword ptr [eax+38h]
</code></pre>

<p>Each loop of the double loop example produces this code (the following block is repeated about three times):</p>

<pre><code>addsd       xmm0,mmword ptr [eax+28h]
movsd       mmword ptr [eax+28h],xmm0
movsd       xmm0,mmword ptr [ecx+20h]
addsd       xmm0,mmword ptr [eax+30h]
movsd       mmword ptr [eax+30h],xmm0
movsd       xmm0,mmword ptr [ecx+28h]
addsd       xmm0,mmword ptr [eax+38h]
movsd       mmword ptr [eax+38h],xmm0
movsd       xmm0,mmword ptr [ecx+30h]
addsd       xmm0,mmword ptr [eax+40h]
movsd       mmword ptr [eax+40h],xmm0
</code></pre>

<p><strong>EDIT:</strong> The question turned out to be of no relevance, as the behavior severely depends on the sizes of the arrays (n) and the CPU cache. So if there is further interest, I rephrase the question:</p>

<p><strong>Could you provide some solid insight into the details that lead to the different cache behaviors as illustrated by the five regions on the following graph?</strong></p>

<p><strong>It might also be interesting to point out the differences between CPU/cache architectures, by providing a similar graph for these CPUs.</strong></p>

<p>PPS: Here is the full code. It uses <a href=""https://www.threadingbuildingblocks.org/"" rel=""noreferrer"">TBB</a> <code>Tick_Count</code> for higher resolution timing, which can be disabled by not defining the <code>TBB_TIMING</code> Macro:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;cmath&gt;
#include &lt;string&gt;

//#define TBB_TIMING

#ifdef TBB_TIMING   
#include &lt;tbb/tick_count.h&gt;
using tbb::tick_count;
#else
#include &lt;time.h&gt;
#endif

using namespace std;

//#define preallocate_memory new_cont

enum { new_cont, new_sep };

double *a1, *b1, *c1, *d1;


void allo(int cont, int n)
{
    switch(cont) {
      case new_cont:
        a1 = new double[n*4];
        b1 = a1 + n;
        c1 = b1 + n;
        d1 = c1 + n;
        break;
      case new_sep:
        a1 = new double[n];
        b1 = new double[n];
        c1 = new double[n];
        d1 = new double[n];
        break;
    }

    for (int i = 0; i &lt; n; i++) {
        a1[i] = 1.0;
        d1[i] = 1.0;
        c1[i] = 1.0;
        b1[i] = 1.0;
    }
}

void ff(int cont)
{
    switch(cont){
      case new_sep:
        delete[] b1;
        delete[] c1;
        delete[] d1;
      case new_cont:
        delete[] a1;
    }
}

double plain(int n, int m, int cont, int loops)
{
#ifndef preallocate_memory
    allo(cont,n);
#endif

#ifdef TBB_TIMING   
    tick_count t0 = tick_count::now();
#else
    clock_t start = clock();
#endif

    if (loops == 1) {
        for (int i = 0; i &lt; m; i++) {
            for (int j = 0; j &lt; n; j++){
                a1[j] += b1[j];
                c1[j] += d1[j];
            }
        }
    } else {
        for (int i = 0; i &lt; m; i++) {
            for (int j = 0; j &lt; n; j++) {
                a1[j] += b1[j];
            }
            for (int j = 0; j &lt; n; j++) {
                c1[j] += d1[j];
            }
        }
    }
    double ret;

#ifdef TBB_TIMING   
    tick_count t1 = tick_count::now();
    ret = 2.0*double(n)*double(m)/(t1-t0).seconds();
#else
    clock_t end = clock();
    ret = 2.0*double(n)*double(m)/(double)(end - start) *double(CLOCKS_PER_SEC);
#endif

#ifndef preallocate_memory
    ff(cont);
#endif

    return ret;
}


void main()
{   
    freopen(""C:\\test.csv"", ""w"", stdout);

    char *s = "" "";

    string na[2] ={""new_cont"", ""new_sep""};

    cout &lt;&lt; ""n"";

    for (int j = 0; j &lt; 2; j++)
        for (int i = 1; i &lt;= 2; i++)
#ifdef preallocate_memory
            cout &lt;&lt; s &lt;&lt; i &lt;&lt; ""_loops_"" &lt;&lt; na[preallocate_memory];
#else
            cout &lt;&lt; s &lt;&lt; i &lt;&lt; ""_loops_"" &lt;&lt; na[j];
#endif

    cout &lt;&lt; endl;

    long long nmax = 1000000;

#ifdef preallocate_memory
    allo(preallocate_memory, nmax);
#endif

    for (long long n = 1L; n &lt; nmax; n = max(n+1, long long(n*1.2)))
    {
        const long long m = 10000000/n;
        cout &lt;&lt; n;

        for (int j = 0; j &lt; 2; j++)
            for (int i = 1; i &lt;= 2; i++)
                cout &lt;&lt; s &lt;&lt; plain(n, m, j, i);
        cout &lt;&lt; endl;
    }
}
</code></pre>

<p>(It shows FLOP/s for different values of <code>n</code>.)</p>

<p><img src=""https://i.stack.imgur.com/keuWU.gif"" alt=""enter image description here""></p>
","<p>Upon further analysis of this, I believe this is (at least partially) caused by data alignment of the four pointers. This will cause some level of cache bank/way conflicts.</p>

<p>If I've guessed correctly on how you are allocating your arrays, they <strong><em>are likely to be aligned to the page line</em></strong>.</p>

<p>This means that all your accesses in each loop will fall on the same cache way. However, Intel processors have had 8-way L1 cache associativity for a while. But in reality, the performance isn't completely uniform. Accessing 4-ways is still slower than say 2-ways.</p>

<p><strong>EDIT : It does in fact look like you are allocating all the arrays separately.</strong>
Usually when such large allocations are requested, the allocator will request fresh pages from the OS. Therefore, there is a high chance that large allocations will appear at the same offset from a page-boundary.</p>

<p><strong>Here's the test code:</strong></p>

<pre><code>int main(){
    const int n = 100000;

#ifdef ALLOCATE_SEPERATE
    double *a1 = (double*)malloc(n * sizeof(double));
    double *b1 = (double*)malloc(n * sizeof(double));
    double *c1 = (double*)malloc(n * sizeof(double));
    double *d1 = (double*)malloc(n * sizeof(double));
#else
    double *a1 = (double*)malloc(n * sizeof(double) * 4);
    double *b1 = a1 + n;
    double *c1 = b1 + n;
    double *d1 = c1 + n;
#endif

    //  Zero the data to prevent any chance of denormals.
    memset(a1,0,n * sizeof(double));
    memset(b1,0,n * sizeof(double));
    memset(c1,0,n * sizeof(double));
    memset(d1,0,n * sizeof(double));

    //  Print the addresses
    cout &lt;&lt; a1 &lt;&lt; endl;
    cout &lt;&lt; b1 &lt;&lt; endl;
    cout &lt;&lt; c1 &lt;&lt; endl;
    cout &lt;&lt; d1 &lt;&lt; endl;

    clock_t start = clock();

    int c = 0;
    while (c++ &lt; 10000){

#if ONE_LOOP
        for(int j=0;j&lt;n;j++){
            a1[j] += b1[j];
            c1[j] += d1[j];
        }
#else
        for(int j=0;j&lt;n;j++){
            a1[j] += b1[j];
        }
        for(int j=0;j&lt;n;j++){
            c1[j] += d1[j];
        }
#endif

    }

    clock_t end = clock();
    cout &lt;&lt; ""seconds = "" &lt;&lt; (double)(end - start) / CLOCKS_PER_SEC &lt;&lt; endl;

    system(""pause"");
    return 0;
}
</code></pre>

<hr>

<p><strong>Benchmark Results:</strong></p>

<h1>EDIT: Results on an <em>actual</em> Core 2 architecture machine:</h1>

<p><strong>2 x Intel Xeon X5482 Harpertown @ 3.2 GHz:</strong></p>

<pre><code>#define ALLOCATE_SEPERATE
#define ONE_LOOP
00600020
006D0020
007A0020
00870020
seconds = 6.206

#define ALLOCATE_SEPERATE
//#define ONE_LOOP
005E0020
006B0020
00780020
00850020
seconds = 2.116

//#define ALLOCATE_SEPERATE
#define ONE_LOOP
00570020
00633520
006F6A20
007B9F20
seconds = 1.894

//#define ALLOCATE_SEPERATE
//#define ONE_LOOP
008C0020
00983520
00A46A20
00B09F20
seconds = 1.993
</code></pre>

<p>Observations:</p>

<ul>
<li><p><strong>6.206 seconds</strong> with one loop and <strong>2.116 seconds</strong> with two loops. This reproduces the OP's results exactly.</p></li>
<li><p><strong>In the first two tests, the arrays are allocated separately.</strong> You'll notice that they all have the same alignment relative to the page.</p></li>
<li><p><strong>In the second two tests, the arrays are packed together to break that alignment.</strong> Here you'll notice both loops are faster. Furthermore, the second (double) loop is now the slower one as you would normally expect.</p></li>
</ul>

<p>As @Stephen Cannon points out in the comments, there is very likely possibility that this alignment causes <strong><em>false aliasing</em></strong> in the load/store units or the cache. I Googled around for this and found that Intel actually has a hardware counter for <strong><em>partial address aliasing</em></strong> stalls:</p>

<p><a href=""http://software.intel.com/sites/products/documentation/doclib/stdxe/2013/~amplifierxe/pmw_dp/events/partial_address_alias.html"">http://software.intel.com/sites/products/documentation/doclib/stdxe/2013/~amplifierxe/pmw_dp/events/partial_address_alias.html</a></p>

<hr>

<h1>5 Regions - Explanations</h1>

<p><strong>Region 1:</strong></p>

<p>This one is easy. The dataset is so small that the performance is dominated by overhead like looping and branching.</p>

<p><strong>Region 2:</strong></p>

<p><strike>Here, as the data sizes increases, the amount of relative overhead goes down and the performance ""saturates"". Here two loops is slower because it has twice as much loop and branching overhead.</strike></p>

<p>I'm not sure exactly what's going on here... Alignment could still play an effect as Agner Fog mentions <a href=""http://www.agner.org/optimize/blog/read.php?i=142"">cache bank conflicts</a>. (That link is about Sandy Bridge, but the idea should still be applicable to Core 2.)</p>

<p><strong>Region 3:</strong></p>

<p>At this point, the data no longer fits in L1 cache. So performance is capped by the L1 &lt;-> L2 cache bandwidth.</p>

<p><strong>Region 4:</strong></p>

<p>The performance drop in the single-loop is what we are observing. And as mentioned, this is due to the alignment which (most likely) causes <strong><em>false aliasing</em></strong> stalls in the processor load/store units.</p>

<p>However, in order for false aliasing to occur, there must be a large enough stride between the datasets. This is why you don't see this in region 3.</p>

<p><strong>Region 5:</strong></p>

<p>At this point, nothing fits in cache. So you're bound by memory bandwidth.</p>

<hr>

<p><img src=""https://i.stack.imgur.com/ElCGL.png"" alt=""2 x Intel X5482 Harpertown @ 3.2 GHz"">
<img src=""https://i.stack.imgur.com/QMpwj.png"" alt=""Intel Core i7 870 @ 2.8 GHz"">
<img src=""https://i.stack.imgur.com/NpyhG.png"" alt=""Intel Core i7 2600K @ 4.4 GHz""></p>
","8547993"
"Returning multiple values from a C++ function","208937","","<p>Is there a preferred way to return multiple values from a C++ function?  For example, imagine a function that divides two integers and returns both the quotient and the remainder.  One way I commonly see is to use reference parameters:</p>

<pre><code>void divide(int dividend, int divisor, int&amp; quotient, int&amp; remainder);
</code></pre>

<p>A variation is to return one value and pass the other through a reference parameter:</p>

<pre><code>int divide(int dividend, int divisor, int&amp; remainder);
</code></pre>

<p>Another way would be to declare a struct to contain all of the results and return that:</p>

<pre><code>struct divide_result {
    int quotient;
    int remainder;
};

divide_result divide(int dividend, int divisor);
</code></pre>

<p>Is one of these ways generally preferred, or are there other suggestions?</p>

<p>Edit: In the real-world code, there may be more than two results.  They may also be of different types.</p>
","<p>For returning two values I use a <code>std::pair</code> (usually typedef'd).  You should look at <code>boost::tuple</code> (in C++11 and newer, there's <code>std::tuple</code>) for more than two return results.</p>
","321080"
"What are POD types in C++?","208600","","<p>I've come across this term POD-type a few times... what does it mean? </p>
","<p><em>POD</em> stands for <em>Plain Old Data</em> - that is, a class (whether defined with the keyword <code>struct</code> or the keyword <code>class</code>) without constructors, destructors and virtual members functions. <a href=""http://en.wikipedia.org/wiki/Plain_Old_Data_Structures"" rel=""noreferrer"">Wikipedia's article on POD</a> goes into a bit more detail and defines it as:</p>

<blockquote>
  <p>A Plain Old Data Structure in C++ is an aggregate class that contains only PODS as members, has no user-defined destructor, no user-defined copy assignment operator, and no nonstatic members of pointer-to-member type.</p>
</blockquote>

<p>Greater detail can be found in <a href=""https://stackoverflow.com/a/4178176/734069"">this answer for C++98/03</a>. C++11 changed the rules surrounding POD, relaxing them greatly, thus <a href=""https://stackoverflow.com/a/7189821/734069"">necessitating a follow-up answer here</a>.</p>
","146454"
"'cout' was not declared in this scope","208293","","<p>I have a C++ program:</p>

<pre><code>#include&lt;iostream&gt;

int main()
{
    char t = 'f';
    char *t1;
    char **t2;
    cout&lt;&lt;t;    //this causes an error, cout was not declared in this scope
    return 0;
}
</code></pre>

<p>g++ test.cpp</p>

<p>I get the error <code>error: 'cout' was not declared in this scope</code></p>

<p>why?</p>
","<p>Put the following code before <code>int main()</code>:</p>

<pre><code>using namespace std;
</code></pre>

<p>And you will be able to use <code>cout</code>.</p>

<p>For example:</p>

<pre><code>#include&lt;iostream&gt;
using namespace std;
int main(){
    char t = 'f';
    char *t1;
    char **t2;
    cout&lt;&lt;t;        
    return 0;
}
</code></pre>

<p>Now take a moment and read up on what cout is and what is going on here: <a href=""http://www.cplusplus.com/reference/iostream/cout/"" rel=""noreferrer"">http://www.cplusplus.com/reference/iostream/cout/</a></p>
","15186523"
"What is the ""assert"" function?","208159","","<p>I've been studying OpenCV tutorials and came across the <code>assert</code> function; what does it do?</p>
","<p><code>assert</code> will terminate the program (usually with a message quoting the assert statement) if its argument turns out to be false. It's commonly used during debugging to make the program fail more obviously if an unexpected condition occurs.</p>

<p>For example:</p>

<pre><code>assert(length &gt;= 0);  // die if length is negative.
</code></pre>

<p>You can also add a more informative message to be displayed if it fails like so:</p>

<pre><code>assert(length &gt;= 0 &amp;&amp; ""Whoops, length can't possibly be negative! (didn't we just check 10 lines ago?) Tell jsmith"");
</code></pre>

<p>Or else like this:</p>

<pre><code>assert((""Length can't possibly be negative! Tell jsmith"", length &gt;= 0));
</code></pre>

<p>When you're doing a release (non-debug) build, you can also remove the overhead of evaluating <code>assert</code> statements by defining the <code>NDEBUG</code> macro, usually with a compiler switch. The corollary of this is that your program should <em>never</em> rely on the assert macro running.</p>

<pre><code>// BAD
assert(x++);

// GOOD
assert(x);    
x++;

// Watch out! Depends on the function:
assert(foo());

// Here's a safer way:
int ret = foo();
assert(ret);
</code></pre>

<p>From the combination of the program calling abort() and not being guaranteed to do anything, asserts should only be used to test things that the developer has assumed rather than, for example, the user entering a number rather than a letter (which should be handled by other means).</p>
","1571360"
"Is there a C++ decompiler?","207816","","<p>I have a program in which I've lost the C++ source code.  Are there any good C++ decompilers out there?</p>

<p>I've already ran across <a href=""http://boomerang.sourceforge.net/"" rel=""noreferrer"">Boomerang</a>.</p>
","<p>You can use <a href=""http://www.hex-rays.com/idapro/"" rel=""noreferrer"">IDA Pro</a> by <a href=""http://www.hex-rays.com/"" rel=""noreferrer"">Hex-Rays</a>. You will usually not get good C++ out of a binary unless you compiled in debugging information. Prepare to spend a <strong>lot</strong> of manual labor reversing the code.</p>

<p>If you didn't strip the binaries there is some hope as IDA Pro can produce C-alike code for you to work with. Usually it is very rough though, at least when I used it a couple of years ago.</p>
","205083"
"How can I iterate over an enum?","207573","","<p>I just noticed that you can not use standard math operators on an enum such as ++ or +=</p>

<p>So what is the best way to iterate through all of the values in a C++ enum?</p>
","<p>The typical way is as follows:</p>

<pre><code>enum Foo {
  One,
  Two,
  Three,
  Last
};

for ( int fooInt = One; fooInt != Last; fooInt++ )
{
   Foo foo = static_cast&lt;Foo&gt;(fooInt);
   // ...
}
</code></pre>

<p>Of course, this breaks down if the enum values are specified:</p>

<pre><code>enum Foo {
  One = 1,
  Two = 9,
  Three = 4,
  Last
};
</code></pre>

<p>This illustrates that an enum is not really meant to iterate through. The typical way to deal with an enum is to use it in a switch statement.</p>

<pre><code>switch ( foo )
{
    case One:
        // ..
        break;
    case Two:  // intentional fall-through
    case Three:
        // ..
        break;
    case Four:
        // ..
        break;
     default:
        assert( ! ""Invalid Foo enum value"" );
        break;
}
</code></pre>

<p>If you really want to enumerate, stuff the enum values in a vector and iterate over that. This will properly deal with the specified enum values as well.</p>
","261986"
"How to pass a vector to a function?","207311","","<p>I'm trying to send a vector as an argument to a function and i can't figure out how to make it work. Tried a bunch of different ways but they all give different error messages.
I only include part of the code, since it's only this part that doesn't work.
(the vector ""random"" is filled with random, but sorted, values between 0 and 200)</p>

<p>Updated the code:</p>

<pre><code>#include &lt;iostream&gt;     
#include &lt;ctime&gt;        
#include &lt;algorithm&gt;    
#include &lt;vector&gt;       

using namespace std;

int binarySearch(int first, int last, int search4, vector&lt;int&gt;&amp; random);

int main()
{
    vector&lt;int&gt; random(100);

    int search4, found;
    int first = 0;
    int last = 99;

    found = binarySearch(first, last, search4, random);

    system(""pause"");    
    return(0);      
}

int binarySearch(int first, int last, int search4, vector&lt;int&gt;&amp; random)
{
    do
    {
        int mid = (first + last) / 2;  
        if (search4 &gt; random[mid]) 
            first = mid + 1;  
        else if (search4 &lt; random[mid]) 
            last = mid - 1; 
        else
            return mid;     
    } while (first &lt;= last); 

    return -(first + 1);
}
</code></pre>
","<p>It depends on if you want to pass the <code>vector</code> as a reference or as a pointer (I am disregarding the option of passing it by value as clearly undesirable).</p>

<p>As a reference:</p>

<pre><code>int binarySearch(int first, int last, int search4, vector&lt;int&gt;&amp; random);

vector&lt;int&gt; random(100);
// ...
found = binarySearch(first, last, search4, random);
</code></pre>

<p>As a pointer:</p>

<pre><code>int binarySearch(int first, int last, int search4, vector&lt;int&gt;* random);

vector&lt;int&gt; random(100);
// ...
found = binarySearch(first, last, search4, &amp;random);
</code></pre>

<p>Inside <code>binarySearch</code>, you will need to use <code>.</code> or <code>-&gt;</code> to access the members of <code>random</code> correspondingly.</p>

<p><strong>Issues with your current code</strong></p>

<ol>
<li><code>binarySearch</code> expects a <code>vector&lt;int&gt;*</code>, but you pass in a <code>vector&lt;int&gt;</code> (missing a <code>&amp;</code> before <code>random</code>)</li>
<li>You do not dereference the pointer inside <code>binarySearch</code> before using it (for example, <code>random[mid]</code> should be <code>(*random)[mid]</code></li>
<li>You are missing <code>using namespace std;</code> after the <code>&lt;include&gt;</code>s</li>
<li>The values you assign to <code>first</code> and <code>last</code> are wrong (should be 0 and 99 instead of <code>random[0]</code> and <code>random[99]</code></li>
</ol>
","5333141"
"Convert an int to ASCII character","206980","","<p>I have </p>

<pre><code>int i = 6;
</code></pre>

<p>and I want </p>

<pre><code>char c = '6'
</code></pre>

<p>by conversion. Any simple way to suggest?</p>

<p><strong>EDIT:</strong>
also i need to generate a random number, and convert to a char, then add a '.txt' and access it in an ifstream.</p>
","<p><em>Straightforward way:</em></p>

<pre><code>char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
char aChar = digits[i];
</code></pre>

<p><em>Safer way:</em></p>

<pre><code>char aChar = '0' + i;
</code></pre>

<p><em>Generic way:</em></p>

<pre><code>itoa(i, ...)
</code></pre>

<p><em>Handy way:</em> </p>

<pre><code>sprintf(myString, ""%d"", i)
</code></pre>

<p><em>C++ way:</em> (taken from Dave18 answer)</p>

<pre><code>std::ostringstream oss;
oss &lt;&lt; 6;
</code></pre>

<p><em>Boss way:</em></p>

<blockquote>
  <p>Joe, write me an int to char converter</p>
</blockquote>

<p><em>Studboss way:</em></p>

<blockquote>
  <p>char aChar = '6';</p>
</blockquote>

<p><em>Joe's way:</em></p>

<blockquote>
  <p>char aChar = '6'; //int i = 6;</p>
</blockquote>

<p><em>Nasa's way:</em></p>

<blockquote>
  <p>//Waiting for reply from satellite...</p>
</blockquote>

<p><em>Alien's way: '9'</em></p>

<blockquote>
  <p>//Greetings.</p>
</blockquote>

<p><em>God's way:</em></p>

<blockquote>
  <p>Bruh I built this</p>
</blockquote>

<p><em>Peter Pan's way:</em></p>

<pre><code>char aChar;

switch (i)
{
  case 0:
    aChar = '0';
    break;
  case 1:
    aChar = '1';
    break;
  case 2:
    aChar = '2';
    break;
  case 3:
    aChar = '3';
    break;
  case 4:
    aChar = '4';
    break;
  case 5:
    aChar = '5';
    break;
  case 6:
    aChar = '6';
    break;
  case 7:
    aChar = '7';
    break;
  case 8:
    aChar = '8';
    break;
  case 9:
    aChar = '9';
    break;
  default:
    aChar = '?';
    break;
}
</code></pre>

<p><em>Santa Claus's way:</em></p>

<pre><code>//Wait till Christmas!
sleep(457347347);
</code></pre>

<p><em>Gravity's way:</em></p>

<blockquote>
  <p>//What</p>
</blockquote>

<p><em>'6' (Jersey) Mikes'™ way:</em></p>

<blockquote>
  <p>//</p>
</blockquote>

<p><em>SO way:</em></p>

<blockquote>
  <p>Guys, how do I avoid reading
  beginner's guide to C++?</p>
</blockquote>

<p><em>My way:</em></p>

<blockquote>
  <p>or the highway.</p>
</blockquote>

<p>Comment: I've added Handy way and C++ way (to have a complete collection) and I'm saving this as a wiki. </p>

<p>Edit: satisfied?</p>
","4629196"
"How to retrieve all keys (or values) from a std::map and put them into a vector?","206897","","<p>This is one of the possible ways I come out:</p>

<pre><code>struct RetrieveKey
{
    template &lt;typename T&gt;
    typename T::first_type operator()(T keyValuePair) const
    {
        return keyValuePair.first;
    }
};

map&lt;int, int&gt; m;
vector&lt;int&gt; keys;

// Retrieve all keys
transform(m.begin(), m.end(), back_inserter(keys), RetrieveKey());

// Dump all keys
copy(keys.begin(), keys.end(), ostream_iterator&lt;int&gt;(cout, ""\n""));
</code></pre>

<p>Of course, we can also retrieve all values from the map by defining another functor <strong>RetrieveValues</strong>.</p>

<p>Is there any other way to achieve this easily? (I'm always wondering why std::map does not include a member function for us to do so.)</p>
","<p>While your solution should work, it can be difficult to read depending on the skill level of your fellow programmers.  Additionally, it moves functionality away from the call site.  Which can make maintenance a little more difficult.  </p>

<p>I'm not sure if your goal is to get the keys into a vector or print them to cout so I'm doing both.  You may try something like this:</p>

<pre><code>map&lt;int, int&gt; m;
vector&lt;int&gt; v;
for(map&lt;int,int&gt;::iterator it = m.begin(); it != m.end(); ++it) {
  v.push_back(it-&gt;first);
  cout &lt;&lt; it-&gt;first &lt;&lt; ""\n"";
}
</code></pre>

<p>Or even simpler, if you are using Boost:</p>

<pre><code>map&lt;int,int&gt; m;
pair&lt;int,int&gt; me; // what a map&lt;int, int&gt; is made of
vector&lt;int&gt; v;
BOOST_FOREACH(me, m) {
  v.push_back(me.first);
  cout &lt;&lt; me.first &lt;&lt; ""\n"";
}
</code></pre>

<p>Personally, I like the BOOST_FOREACH version because there is less typing and it is very explicit about what it is doing.</p>
","110255"
"How do I flush the cin buffer?","206811","","<p>How do I clear the cin buffer in C++?</p>
","<p>Possibly:</p>

<pre><code>std::cin.ignore(INT_MAX);
</code></pre>

<p>This would read in and ignore everything until <code>EOF</code>. (you can also supply a second argument which is the character to read until (ex: <code>'\n'</code> to ignore a single line).</p>

<p>Also: You probably want to do a: <code>std::cin.clear();</code> before this too to reset the stream state.</p>
","257098"
"Best C++ Code Formatter/Beautifier","206756","","<p>There are lots of source code formatting tools out there.  Which ones work best for C++?</p>

<p>I'm interested in command-line tools or other things that can be automatically run when checking code in/out, preferably without needing to launch an editor or IDE.</p>

<p>(If you see the one you like already listed as an answer, vote it up.  If it's not there, add it.)</p>
","<p><a href=""http://astyle.sourceforge.net/"" rel=""nofollow noreferrer"">AStyle</a> can be customized in great detail for C++ and Java (and others too) </p>

<p>This is a source code formatting tool.</p>

<hr>

<p><a href=""http://clang.llvm.org/docs/ClangFormat.html"" rel=""nofollow noreferrer"">clang-format</a> is a powerful <strong>command line</strong> tool bundled with the clang compiler which handles even the most obscure language constructs in a coherent way.</p>

<p>It can be integrated with Visual Studio, Emacs, Vim (and others) and can format just the selected lines (or with git/svn to format some diff).</p>

<p>It can be configured with a variety of options listed <a href=""http://clang.llvm.org/docs/ClangFormatStyleOptions.html"" rel=""nofollow noreferrer"">here</a>.</p>

<p>When using config files (named <code>.clang-format</code>) styles can be per directory - the closest such file in parent directories shall be used for a particular file.</p>

<p>Styles can be inherited from a preset (say LLVM or Google) and can later override different options</p>

<p>It is used by Google and others and is production ready.</p>

<hr>

<p>Also look at the project <a href=""http://universalindent.sourceforge.net"" rel=""nofollow noreferrer"">UniversalIndentGUI</a>. You can experiment with several indenters using it: AStyle, Uncrustify, GreatCode, ... and select the best for you. Any of them can be run later from a command line.</p>

<hr>

<p><a href=""http://uncrustify.sourceforge.net/"" rel=""nofollow noreferrer"">Uncrustify</a> has a <em>lot</em> of configurable options. You'll probably need Universal Indent GUI (in Konstantin's reply) as well to configure it.</p>
","841083"
"What is the difference between ""long"", ""long long"", ""long int"", and ""long long int"" in C++?","206707","","<p>I am transitioning from Java to C++ and have some questions about the <code>long</code> data type. In Java, to hold an integer greater than 2<sup>32</sup>, you would simply write <code>long x;</code>. However, in C++, it seems that <code>long</code> is both a data type and a modifier. </p>

<p>There seems to be several ways to use <code>long</code>:</p>

<pre><code>long x;
long long x;
long int x;
long long int x;
</code></pre>

<p>Also, it seems there are things such as:</p>

<pre><code>long double x;
</code></pre>

<p>and so on.</p>

<p>What is the difference between all of these various data types, and do they all have the same purpose?</p>
","<p><code>long</code> and <code>long int</code> are identical. So are <code>long long</code> and <code>long long int</code>. In both cases, the <code>int</code> is optional.</p>

<p>As to the difference between the two sets, the C++ standard mandates minimum ranges for each, and that <code>long long</code> is at <em>least</em> as wide as <code>long</code>.</p>

<p>The controlling parts of the standard (C++11, but this has been around for a long time) are, for one, <code>3.9.1 Fundamental types</code>, section 2 (a later section gives similar rules for the unsigned integral types):</p>

<blockquote>
  <p>There are five standard signed integer types : signed char, short int, int, long int, and long long int. In this list, each type provides at least as much storage as those preceding it in the list.</p>
</blockquote>

<p>There's also a table 9 in <code>7.1.6.2 Simple type specifiers</code>, which shows the ""mappings"" of the specifiers to actual types (showing that the <code>int</code> is optional), a section of which is shown below:</p>

<pre><code>Specifier(s)         Type
-------------    -------------
long long int    long long int
long long        long long int
long int         long int
long             long int
</code></pre>

<p>Note the distinction there between the specifier and the type. The specifier is how you tell the compiler what the type is but you can use different specifiers to end up at the same type.</p>

<p>Hence <code>long</code> on its own is neither a type <em>nor</em> a modifier as your question posits, it's simply a specifier for the <code>long int</code> type. Ditto for <code>long long</code> being a specifier for the <code>long long int</code> type.</p>

<p>Although the C++ standard itself doesn't specify the minimum ranges of integral types, it does cite C99, in <code>1.2 Normative references</code>, as applying. Hence the minimal ranges as set out in <code>C99 5.2.4.2.1 Sizes of integer types &lt;limits.h&gt;</code> are applicable.</p>

<hr>

<p>In terms of <code>long double</code>, that's actually a floating point value rather than an integer. Similarly to the integral types, it's required to have at least as much precision as a <code>double</code> and to provide a superset of values over that type (meaning <em>at least</em> those values, not necessarily <em>more</em> values).</p>
","18971763"
"Reading from text file until EOF repeats last line","204832","","<p>The following <strong>C++</strong> code uses a <strong>ifstream</strong> object to read integers from a text file (which has one number per line) until it hits <strong>EOF</strong>. Why does it read the integer on the last line twice? How to fix this?</p>

<p><strong>Code:</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

int main()
{
    ifstream iFile(""input.txt"");    // input.txt has integers, one per line

    while (!iFile.eof())
    {
        int x;
        iFile &gt;&gt; x;
        cerr &lt;&lt; x &lt;&lt; endl;
    }

    return 0;
}
</code></pre>

<p><strong>input.txt</strong>:</p>

<pre><code>10  
20  
30
</code></pre>

<p><strong>Output</strong>:</p>

<pre><code>10  
20  
30  
30
</code></pre>

<p><strong>Note</strong>: I've skipped all error checking code to keep the code snippet small. The above behaviour is seen on Windows (Visual C++), cygwin (gcc) and Linux (gcc).</p>
","<p>Just follow closely the chain of events.</p>

<ul>
<li>Grab 10</li>
<li>Grab 20</li>
<li>Grab 30</li>
<li>Grab EOF</li>
</ul>

<p>Look at the second-to-last iteration.  You grabbed 30, then carried on to check for EOF.  You haven't reached EOF because the EOF mark hasn't been read yet (""binarically"" speaking, its conceptual location is just after the 30 line).  Therefore you carry on to the next iteration.  x is still 30 from previous iteration.  Now you read from the stream and you get EOF.  x remains 30 and the ios::eofbit is raised.  You output to stderr x (which is 30, just like in the previous iteration).  Next you check for EOF in the loop condition, and this time you're out of the loop.</p>

<p>Try this:</p>

<pre><code>while (true) {
    int x;
    iFile &gt;&gt; x;
    if( iFile.eof() ) break;
    cerr &lt;&lt; x &lt;&lt; endl;
}
</code></pre>

<p>By the way, there is another bug in your code.  Did you ever try to run it on an empty file?  The behaviour you get is for the exact same reason.</p>
","21656"
"How to code a modulo (%) operator in C/C++/Obj-C that handles negative numbers","204207","","<p>One of my pet hates of C-derived languages (as a mathematician)  is that</p>

<pre><code>(-1) % 8 // comes out as -1, and not 7

fmodf(-1,8) // fails similarly
</code></pre>

<p>What's the best solution?  </p>

<p>C++ allows the possibility of templates and operator overloading, but both of these are murky waters for me. examples gratefully received.</p>
","<p>First of all I'd like to note that you cannot even rely on the fact that <code>(-1) % 8 == -1</code>. the only thing you can rely on is that <code>(x / y) * y + ( x % y) == x</code>. However whether or not the remainder is negative is <em>implementation-defined</em>. </p>

<p>Now why use templates here? An overload for ints and longs would do.</p>

<pre><code>int mod (int a, int b)
{
   int ret = a % b;
   if(ret &lt; 0)
     ret+=b;
   return ret;
}
</code></pre>

<p>and now you can call it like mod(-1,8) and it will appear to be 7. </p>

<p>Edit: I found a bug in my code. It won't work if b is negative. So I think this is better:</p>

<pre><code>int mod (int a, int b)
{
   if(b &lt; 0) //you can check for b == 0 separately and do what you want
     return mod(a, -b);   
   int ret = a % b;
   if(ret &lt; 0)
     ret+=b;
   return ret;
}
</code></pre>

<p>Reference: C++03 paragraph 5.6 clause 4:</p>

<blockquote>
  <p>The binary / operator yields the quotient, and the binary % operator yields the remainder from the division of the first expression by the second. If the second operand of / or % is zero the behavior is undefined; otherwise (a/b)*b + a%b is equal to a. If both operands are nonnegative then the remainder is nonnegative; <strong><em>if not, the sign of the remainder is implementation-defined</em></strong>.</p>
</blockquote>
","4003287"
"Read Numeric Data from a Text File in C++","203841","","<p>For example, if data in an external text file is like this:</p>

<pre><code>45.78   67.90   87
34.89   346     0.98
</code></pre>

<p>How can I read this text file and assign each number to a variable in c++?
Using ifstream, I am able to open the text file and assign first number to a variable, but I don't know how to read the next number after the spaces.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

int main()
{
    float a;
    ifstream myfile;
    myfile.open(""data.txt"");
    myfile &gt;&gt; a;
    cout &lt;&lt; a;
    myfile.close();
    system(""pause"");
    return 0;
}

#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;
int main()
{
    int data[6], a, b, c, d, e, f;
    ifstream myfile;
    myfile.open(""a.txt"");

    for(int i = 0; i &lt;&lt; 6; i++)
        myfile &gt;&gt; data[i];

    myfile.close();
    a = data[0];
    b = data[1];
    c = data[2];
    d = data[3];
    e = data[4];
    f = data[5];
    cout &lt;&lt; a &lt;&lt; ""\t"" &lt;&lt; b &lt;&lt; ""\t"" &lt;&lt; c &lt;&lt; ""\t"" &lt;&lt; d &lt;&lt; ""\t"" &lt;&lt; e &lt;&lt; ""\t"" &lt;&lt; f &lt;&lt; ""\n"";
    system(""pause"");
    return 0;
}
</code></pre>
","<p>Repeat >> reads in loop.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
int main(int argc, char * argv[])
{
    std::fstream myfile(""D:\\data.txt"", std::ios_base::in);

    float a;
    while (myfile &gt;&gt; a)
    {
        printf(""%f "", a);
    }

    getchar();

    return 0;
}
</code></pre>

<p>Result:</p>

<p><code>45.779999 67.900002 87.000000 34.889999 346.000000 0.980000</code></p>

<p>If you know <em>exactly</em>, how many elements there are in a file, you can chain >> operator:</p>

<pre><code>int main(int argc, char * argv[])
{
    std::fstream myfile(""D:\\data.txt"", std::ios_base::in);

    float a, b, c, d, e, f;

    myfile &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e &gt;&gt; f;

    printf(""%f\t%f\t%f\t%f\t%f\t%f\n"", a, b, c, d, e, f);

    getchar();

    return 0;
}
</code></pre>

<hr />

<p><b>Edit:</b> In response to your comments in main question.</p>

<p>You have two options. </p>

<ul>
<li>You can run previous code in a loop (or two loops) and throw away a defined number of values - for example, if you need the value at point (97, 60), you have to skip 5996 (= 60 * 100 + 96) values and use the last one. This will work if you're interested <em>only</em> in specified value.</li>
<li>You can load the data into an array - as Jerry Coffin sugested. He already gave you quite nice class, which will solve the problem. Alternatively, you can use simple array to store the data.</li>
</ul>

<hr />

<p><b>Edit:</b> How to skip values in file</p>

<p>To choose the 1234th value, use the following code:</p>

<pre><code>int skipped = 1233;
for (int i = 0; i &lt; skipped; i++)
{
    float tmp;
    myfile &gt;&gt; tmp;
}
myfile &gt;&gt; value;
</code></pre>
","14517130"
"Run C++ in command prompt - Windows","203704","","<p>I know that everyone uses an IDE nowadays, but I just find it simpler to write my code in notepad++, compile it using a command prompt command, and run it from there too. At least that works for Java and Python. I've tried to get my head around how to do that with C++, and haven't been able to find anything good. Is there any compiler (like Java's JDK) that I can stick into my path and use the C++ equivalent of <code>javac</code> and <code>java</code> to run and compile my code from CMD?</p>

<p>Note: please don't post answers and comments about how IDEs are better - I know they are. I'm just used to doing it the old way :D</p>
","<p>It depends on what compiler you're using.</p>

<p>For example, if you are using Visual C++ .NET 2010 Express, run Visual C++ 2010 Express Command Prompt from the start menu, and you can simply compile and run the code.</p>

<pre><code>&gt; cl /EHsc mycode.cpp
&gt; mycode.exe
</code></pre>

<p>or from the regular command line, you can run <code>vcvars32.bat</code> first to set up the environment. Alternatively search for <code>setvcvars.cmd</code> (part of a FLOSS project) and use that to even locate the installed VS and have it call <code>vcvars32.bat</code> for you.</p>

<p>Please check your compiler's manual for command lines.</p>
","11366013"
"C++ printf with std::string?","203132","","<p>My understanding is that <code>string</code> is a member of the <code>std</code> namespace, so why does the following occur?</p>

<pre><code>#include &lt;iostream&gt;

int main()
{
    using namespace std;

    string myString = ""Press ENTER to quit program!"";
    cout &lt;&lt; ""Come up and C++ me some time."" &lt;&lt; endl;
    printf(""Follow this command: %s"", myString);
    cin.get();

    return 0;
}
</code></pre>

<p><img src=""https://i.stack.imgur.com/W1w68.png"" alt=""enter image description here""></p>

<p>Each time the program runs, <code>myString</code> prints a seemingly random string of 3 characters, such as in the output above.</p>
","<p>It's compiling because <code>printf</code> isn't type safe, since it uses variable arguments in the C sense<sup>1</sup>. <code>printf</code> has no option for <code>std::string</code>, only a C-style string. Using something else in place of what it expects definitely won't give you the results you want. It's actually undefined behaviour, so anything at all could happen.</p>

<p>The easiest way to fix this, since you're using C++, is printing it normally with <code>std::cout</code>, since <code>std::string</code> supports that through operator overloading:</p>

<pre><code>std::cout &lt;&lt; ""Follow this command: "" &lt;&lt; myString;
</code></pre>

<p>If, for some reason, you need to extract the C-style string, you can use the <code>c_str()</code> method of <code>std::string</code> to get a <code>const char *</code> that is null-terminated. Using your example:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
{
    using namespace std;

    string myString = ""Press ENTER to quit program!"";
    cout &lt;&lt; ""Come up and C++ me some time."" &lt;&lt; endl;
    printf(""Follow this command: %s"", myString.c_str()); //note the use of c_str
    cin.get();

    return 0;
}
</code></pre>

<p>If you want a function that is like <code>printf</code>, but type safe, look into variadic templates (C++11, supported on all major compilers as of MSVC12). You can find an example of one <a href=""https://web.archive.org/web/20131018185034/http://www.generic-programming.org/~dgregor/cpp/variadic-templates.html"">here</a>. There's nothing I know of implemented like that in the standard library, but there might be in Boost, specifically <a href=""http://www.boost.org/doc/libs/1_49_0/libs/format/""><code>boost::format</code></a>.</p>

<hr>

<p>[1]: This means that you can pass any number of arguments, but the function relies on you to tell it the number and types of those arguments. In the case of <code>printf</code>, that means a string with encoded type information like <code>%d</code> meaning <code>int</code>. If you lie about the type or number, the function has no standard way of knowing, although some compilers have the ability to check and give warnings when you lie.</p>
","10865967"
"maximum value of int","202703","","<p>Is there any code to find the maximum value of integer (accordingly to the compiler) in C/C++ like <code>Integer.MaxValue</code> function in java?</p>
","<p>In C++:</p>

<pre><code>#include &lt;limits&gt;
</code></pre>

<p>then use</p>

<pre><code>int imin = std::numeric_limits&lt;int&gt;::min(); // minimum value
int imax = std::numeric_limits&lt;int&gt;::max();
</code></pre>

<p><code>std::numeric_limits</code> is a template type which can be instantiated with other types:</p>

<pre><code>float fmin = std::numeric_limits&lt;float&gt;::min(); // minimum positive value
float fmax = std::numeric_limits&lt;float&gt;::max();
</code></pre>

<hr>

<p>In C:</p>

<pre><code>#include &lt;limits.h&gt;
</code></pre>

<p>then use</p>

<pre><code>int imin = INT_MIN; // minimum value
int imax = INT_MAX;
</code></pre>

<p>or</p>

<pre><code>#include &lt;float.h&gt;

float fmin = FLT_MIN;  // minimum positive value
double dmin = DBL_MIN; // minimum positive value

float fmax = FLT_MAX;
double dmax = DBL_MAX;
</code></pre>
","1855465"
"Size of character ('a') in C/C++","202620","","<p>What is the size of character in C and C++ ? As far as I know the size of char is 1 byte in both C and C++.</p>

<p><strong><a href=""http://www.ideone.com/e3Yo1Kyf"" rel=""noreferrer"">In C:</a></strong></p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
  printf(""Size of char : %d\n"",sizeof(char));
  return 0;
}
</code></pre>

<p><strong><a href=""http://www.ideone.com/uG4Qodfo"" rel=""noreferrer"">In C++:</a></strong></p>

<pre><code>#include &lt;iostream&gt;
int main()
{
  std::cout&lt;&lt;""Size of char : ""&lt;&lt;sizeof(char)&lt;&lt;""\n"";
  return 0;
}
</code></pre>

<p>No surprises, both of them gives the output : <code>Size of char : 1</code></p>

<p>Now we know that characters are represented as <code>'a'</code>,<code>'b'</code>,<code>'c'</code>,<code>'|'</code>,... So I just modified the above codes to these:</p>

<p><strong>In C:</strong></p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
  char a = 'a';
  printf(""Size of char : %d\n"",sizeof(a));
  printf(""Size of char : %d\n"",sizeof('a'));
  return 0;
}
</code></pre>

<p><strong><a href=""http://www.ideone.com/Y11gm1lw"" rel=""noreferrer"">Output:</a></strong></p>

<pre><code>Size of char : 1
Size of char : 4
</code></pre>

<p><strong>In C++:</strong></p>

<pre><code>#include &lt;iostream&gt;
int main()
{
  char a = 'a';
  std::cout&lt;&lt;""Size of char : ""&lt;&lt;sizeof(a)&lt;&lt;""\n"";
  std::cout&lt;&lt;""Size of char : ""&lt;&lt;sizeof('a')&lt;&lt;""\n"";
  return 0;
}
</code></pre>

<p><strong><a href=""http://www.ideone.com/b00pdptc"" rel=""noreferrer"">Output:</a></strong></p>

<pre><code>Size of char : 1
Size of char : 1
</code></pre>

<p><strong>Why the <code>sizeof('a')</code> returns different values in C and C++?</strong></p>
","<p>In C, the type of a character <em>constant</em> like <code>'a'</code> is actually an <code>int</code>, with size of 4 (or some other implementation-dependent value). In C++, the type is <code>char</code>, with size of 1. This is one of many small differences between the two languages.</p>
","2172948"
"how to convert from int to char*?","202447","","<p>The only way I know is:</p>

<pre><code>#include &lt;sstream&gt;
#include &lt;string.h&gt;
using namespace std;

int main() {
  int number=33;
  stringstream strs;
  strs &lt;&lt; number;
  string temp_str = strs.str();
  char* char_type = (char*) temp_str.c_str();
}
</code></pre>

<p>But is there any method with less typing ?</p>
","<ul>
<li><p>In C++11, use <a href=""http://en.cppreference.com/w/cpp/string/basic_string/to_string""><code>std::to_string</code></a> as:</p>

<pre><code>std::string s = std::to_string(number);
char const *pchar = s.c_str();  //use char const* as target type
</code></pre></li>
<li><p>And in C++03, what you're doing is just fine, except use <code>const</code> as:</p>

<pre><code>char const* pchar = temp_str.c_str(); //dont use cast
</code></pre></li>
</ul>
","10847317"
"What is The Rule of Three?","202302","","<p>What does <em>copying an object</em> mean? What are the <em>copy constructor</em> and the <em>copy assignment operator</em>? When do I need to declare them myself? How can I prevent my objects from being copied?</p>
","<h1>Introduction</h1>

<p>C++ treats variables of user-defined types with <em>value semantics</em>.
This means that objects are implicitly copied in various contexts,
and we should understand what ""copying an object"" actually means.</p>

<p>Let us consider a simple example:</p>

<pre><code>class person
{
    std::string name;
    int age;

public:

    person(const std::string&amp; name, int age) : name(name), age(age)
    {
    }
};

int main()
{
    person a(""Bjarne Stroustrup"", 60);
    person b(a);   // What happens here?
    b = a;         // And here?
}
</code></pre>

<p>(If you are puzzled by the <code>name(name), age(age)</code> part,
this is called a <a href=""https://stackoverflow.com/questions/1272680/"">member initializer list</a>.)</p>

<h1>Special member functions</h1>

<p>What does it mean to copy a <code>person</code> object?
The <code>main</code> function shows two distinct copying scenarios.
The initialization <code>person b(a);</code> is performed by the <em>copy constructor</em>.
Its job is to construct a fresh object based on the state of an existing object.
The assignment <code>b = a</code> is performed by the <em>copy assignment operator</em>.
Its job is generally a little more complicated,
because the target object is already in some valid state that needs to be dealt with.</p>

<p>Since we declared neither the copy constructor nor the assignment operator (nor the destructor) ourselves,
these are implicitly defined for us. Quote from the standard:</p>

<blockquote>
  <p>The [...] copy constructor and copy assignment operator, [...] and destructor are special member functions.
  [ <em>Note</em>: <strong>The implementation will implicitly declare these member functions
  for some class types when the program does not explicitly declare them.</strong>
  The implementation will implicitly define them if they are used. [...] <em>end note</em> ]
  [n3126.pdf section 12 §1]</p>
</blockquote>

<p>By default, copying an object means copying its members:</p>

<blockquote>
  <p>The implicitly-defined copy constructor for a non-union class X performs a memberwise copy of its subobjects.
  [n3126.pdf section 12.8 §16]</p>
  
  <p>The implicitly-defined copy assignment operator for a non-union class X performs memberwise copy assignment
  of its subobjects.
  [n3126.pdf section 12.8 §30]</p>
</blockquote>

<h2>Implicit definitions</h2>

<p>The implicitly-defined special member functions for <code>person</code> look like this:</p>

<pre><code>// 1. copy constructor
person(const person&amp; that) : name(that.name), age(that.age)
{
}

// 2. copy assignment operator
person&amp; operator=(const person&amp; that)
{
    name = that.name;
    age = that.age;
    return *this;
}

// 3. destructor
~person()
{
}
</code></pre>

<p>Memberwise copying is exactly what we want in this case:
<code>name</code> and <code>age</code> are copied, so we get a self-contained, independent <code>person</code> object.
The implicitly-defined destructor is always empty.
This is also fine in this case since we did not acquire any resources in the constructor.
The members' destructors are implicitly called after the <code>person</code> destructor is finished:</p>

<blockquote>
  <p>After executing the body of the destructor and destroying any automatic objects allocated within the body,
  a destructor for class X calls the destructors for X's direct [...] members
  [n3126.pdf 12.4 §6]</p>
</blockquote>

<h1>Managing resources</h1>

<p>So when should we declare those special member functions explicitly?
When our class <em>manages a resource</em>, that is,
when an object of the class is <em>responsible</em> for that resource.
That usually means the resource is <em>acquired</em> in the constructor
(or passed into the constructor) and <em>released</em> in the destructor.</p>

<p>Let us go back in time to pre-standard C++.
There was no such thing as <code>std::string</code>, and programmers were in love with pointers.
The <code>person</code> class might have looked like this:</p>

<pre><code>class person
{
    char* name;
    int age;

public:

    // the constructor acquires a resource:
    // in this case, dynamic memory obtained via new[]
    person(const char* the_name, int the_age)
    {
        name = new char[strlen(the_name) + 1];
        strcpy(name, the_name);
        age = the_age;
    }

    // the destructor must release this resource via delete[]
    ~person()
    {
        delete[] name;
    }
};
</code></pre>

<p>Even today, people still write classes in this style and get into trouble:
""<em>I pushed a person into a vector and now I get crazy memory errors!</em>""
Remember that by default, copying an object means copying its members,
but copying the <code>name</code> member merely copies a pointer, <em>not</em> the character array it points to!
This has several unpleasant effects:</p>

<ol>
<li>Changes via <code>a</code> can be observed via <code>b</code>.</li>
<li>Once <code>b</code> is destroyed, <code>a.name</code> is a dangling pointer.</li>
<li>If <code>a</code> is destroyed, deleting the dangling pointer yields <a href=""https://stackoverflow.com/questions/2397984/"">undefined behavior</a>.</li>
<li>Since the assignment does not take into account what <code>name</code> pointed to before the assignment,
sooner or later you will get memory leaks all over the place.</li>
</ol>

<h2>Explicit definitions</h2>

<p>Since memberwise copying does not have the desired effect, we must define the copy constructor and the copy assignment operator explicitly to make deep copies of the character array:</p>

<pre><code>// 1. copy constructor
person(const person&amp; that)
{
    name = new char[strlen(that.name) + 1];
    strcpy(name, that.name);
    age = that.age;
}

// 2. copy assignment operator
person&amp; operator=(const person&amp; that)
{
    if (this != &amp;that)
    {
        delete[] name;
        // This is a dangerous point in the flow of execution!
        // We have temporarily invalidated the class invariants,
        // and the next statement might throw an exception,
        // leaving the object in an invalid state :(
        name = new char[strlen(that.name) + 1];
        strcpy(name, that.name);
        age = that.age;
    }
    return *this;
}
</code></pre>

<p>Note the difference between initialization and assignment:
we must tear down the old state before assigning to <code>name</code> to prevent memory leaks.
Also, we have to protect against self-assignment of the form <code>x = x</code>.
Without that check, <code>delete[] name</code> would delete the array containing the <em>source</em> string,
because when you write <code>x = x</code>, both <code>this-&gt;name</code> and <code>that.name</code> contain the same pointer.</p>

<h2>Exception safety</h2>

<p>Unfortunately, this solution will fail if <code>new char[...]</code> throws an exception due to memory exhaustion.
One possible solution is to introduce a local variable and reorder the statements:</p>

<pre><code>// 2. copy assignment operator
person&amp; operator=(const person&amp; that)
{
    char* local_name = new char[strlen(that.name) + 1];
    // If the above statement throws,
    // the object is still in the same state as before.
    // None of the following statements will throw an exception :)
    strcpy(local_name, that.name);
    delete[] name;
    name = local_name;
    age = that.age;
    return *this;
}
</code></pre>

<p>This also takes care of self-assignment without an explicit check.
An even more robust solution to this problem is the <a href=""https://stackoverflow.com/questions/3279543/"">copy-and-swap idiom</a>,
but I will not go into the details of exception safety here.
I only mentioned exceptions to make the following point: <strong>Writing classes that manage resources is hard.</strong></p>

<h2>Noncopyable resources</h2>

<p>Some resources cannot or should not be copied, such as file handles or mutexes.
In that case, simply declare the copy constructor and copy assignment operator as <code>private</code> without giving a definition:</p>

<pre><code>private:

    person(const person&amp; that);
    person&amp; operator=(const person&amp; that);
</code></pre>

<p>Alternatively, you can inherit from <code>boost::noncopyable</code> or declare them as deleted (C++0x):</p>

<pre><code>person(const person&amp; that) = delete;
person&amp; operator=(const person&amp; that) = delete;
</code></pre>

<h2>The rule of three</h2>

<p>Sometimes you need to implement a class that manages a resource.
(Never manage multiple resources in a single class,
this will only lead to pain.)
In that case, remember the <strong>rule of three</strong>:</p>

<blockquote>
  <p>If you need to explicitly declare either the destructor,
  copy constructor or copy assignment operator yourself,
  you probably need to explicitly declare all three of them.</p>
</blockquote>

<p>(Unfortunately, this ""rule"" is not enforced by the C++ standard or any compiler I am aware of.)</p>

<h1>Advice</h1>

<p>Most of the time, you do not need to manage a resource yourself,
because an existing class such as <code>std::string</code> already does it for you.
Just compare the simple code using a <code>std::string</code> member
to the convoluted and error-prone alternative using a <code>char*</code> and you should be convinced.
As long as you stay away from raw pointer members, the rule of three is unlikely to concern your own code.</p>
","4172724"
"How to remove certain characters from a string in C++?","202272","","<p>For example I have a user input a phone number.</p>

<pre><code>cout &lt;&lt; ""Enter phone number: "";
INPUT: (555) 555-5555
cin &gt;&gt; phone;
</code></pre>

<p>I want to remove the ""("", "")"", and ""-"" characters from the string. I've looked at the string remove, find and replace functions however I only see that they operate based on position.</p>

<p>Is there a string function that I can use to pass a character, ""("" for example, and have it remove all instances within a string?</p>
","<pre><code>   string str(""(555) 555-5555"");

   char chars[] = ""()-"";

   for (unsigned int i = 0; i &lt; strlen(chars); ++i)
   {
      // you need include &lt;algorithm&gt; to use general algorithms like std::remove()
      str.erase (std::remove(str.begin(), str.end(), chars[i]), str.end());
   }

   // output: 555 5555555
   cout &lt;&lt; str &lt;&lt; endl;
</code></pre>

<p>To use as <strong>function</strong>:</p>

<pre><code>void removeCharsFromString( string &amp;str, char* charsToRemove ) {
   for ( unsigned int i = 0; i &lt; strlen(charsToRemove); ++i ) {
      str.erase( remove(str.begin(), str.end(), charsToRemove[i]), str.end() );
   }
}
//example of usage:
removeCharsFromString( str, ""()-"" );
</code></pre>
","5891643"
"Is there a replacement for unistd.h for Windows (Visual C)?","202008","","<p>I'm porting a relatively simple console program written for Unix to the Windows platform (<a href=""http://en.wikipedia.org/wiki/Visual_C++#32-bit_versions"" rel=""noreferrer"">Visual C++ 8.0</a>). All the source files include ""unistd.h"", which doesn't exist.  Removing it, I get complaints about misssing prototypes for 'srandom', 'random', and 'getopt'.
I know I can replace the random functions, and I'm pretty sure I can find/hack-up a getopt implementation.  </p>

<p>But I'm sure others have run into the same challenge. 
My question is: is there a port of ""unistd.h"" to Windows? At least one containg those functions which do have a native Windows implementation - I don't need pipes or forking.</p>

<p><strong>EDIT</strong>:</p>

<p>I know I can create my very own ""unistd.h"" which contains replacements for the things I need - especially in this case, since it is a limited set. But since it seems like a common problem, I was wondering if someone had done the work already for a bigger subset of the functionality.</p>

<p>Switching to a different compiler or environment isn't possible at work - I'm stuck with Visual Studio.</p>
","<p>Since we can't find a version on the Internet, let's start one here.<br>
Most ports to Windows probably only need a subset of the complete Unix file.<br>
Here's a starting point. Please add definitions as needed.</p>

<pre><code>#ifndef _UNISTD_H
#define _UNISTD_H    1

/* This is intended as a drop-in replacement for unistd.h on Windows.
 * Please add functionality as neeeded.
 * https://stackoverflow.com/a/826027/1202830
 */

#include &lt;stdlib.h&gt;
#include &lt;io.h&gt;
#include &lt;getopt.h&gt; /* getopt at: https://gist.github.com/ashelly/7776712 */
#include &lt;process.h&gt; /* for getpid() and the exec..() family */
#include &lt;direct.h&gt; /* for _getcwd() and _chdir() */

#define srandom srand
#define random rand

/* Values for the second argument to access.
   These may be OR'd together.  */
#define R_OK    4       /* Test for read permission.  */
#define W_OK    2       /* Test for write permission.  */
//#define   X_OK    1       /* execute permission - unsupported in windows*/
#define F_OK    0       /* Test for existence.  */

#define access _access
#define dup2 _dup2
#define execve _execve
#define ftruncate _chsize
#define unlink _unlink
#define fileno _fileno
#define getcwd _getcwd
#define chdir _chdir
#define isatty _isatty
#define lseek _lseek
/* read, write, and close are NOT being #defined here, because while there are file handle specific versions for Windows, they probably don't work for sockets. You need to look at your app and consider whether to call e.g. closesocket(). */

#ifdef _WIN64
#define ssize_t __int64
#else
#define ssize_t long
#endif

#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2
/* should be in some equivalent to &lt;sys/types.h&gt; */
typedef __int8            int8_t;
typedef __int16           int16_t; 
typedef __int32           int32_t;
typedef __int64           int64_t;
typedef unsigned __int8   uint8_t;
typedef unsigned __int16  uint16_t;
typedef unsigned __int32  uint32_t;
typedef unsigned __int64  uint64_t;

#endif /* unistd.h  */
</code></pre>
","826027"
"When to use extern in C++","201662","","<p>I'm reading ""Think in C++"" and it just introduced the <code>extern</code> declaration. For example: </p>

<pre><code>extern int x;
extern float y;
</code></pre>

<p>I think I understand the meaning (declaration without definition), but I wonder when it proves useful. </p>

<p>Can someone provide an example?</p>
","<p>This comes in useful when you have global variables. You declare the <em>existence</em> of global variables in a header, so that each source file that includes the header knows about it, but you only need to &ldquo;define&rdquo; it once in one of your source files.</p>

<p>To clarify, using <code>extern int x;</code> tells the compiler that an object of type <code>int</code> called <code>x</code> exists <em>somewhere</em>. It's not the compilers job to know where it exists, it just needs to know the type and name so it knows how to use it. Once all of the source files have been compiled, the linker will resolve all of the references of <code>x</code> to the one definition that it finds in one of the compiled source files. For it to work, the definition of the <code>x</code> variable needs to have what's called &ldquo;external linkage&rdquo;, which basically means that it needs to be declared outside of a function (at what's usually called &ldquo;the file scope&rdquo;) and without the <code>static</code> keyword.</p>

<h3>header:</h3>

<pre><code>#ifndef HEADER_H
#define HEADER_H

// any source file that includes this will be able to use ""global_x""
extern int global_x;

void print_global_x();

#endif
</code></pre>

<h3>source 1:</h3>

<pre><code>#include ""header.h""

// it needs to be defined somewhere
int global_x;

int main()
{
    //set global_x here:
    global_x = 5;

    print_global_x();
}
</code></pre>

<h3>source 2:</h3>

<pre><code>#include &lt;iostream&gt;
#include ""header.h""

void print_global_x()
{
    //print global_x here:
    std::cout &lt;&lt; global_x &lt;&lt; std::endl;
}
</code></pre>
","10422050"
"How to add element to C++ array?","201385","","<p>I want to add an int into an array, but the problem is that I don't know what the index is now.</p>

<pre><code>int[] arr = new int[15];
arr[0] = 1;
arr[1] = 2;
arr[2] = 3;
arr[3] = 4;
arr[4] = 5;
</code></pre>

<p>That code works because I know what index I am assigning to, but what if I don't know the index...</p>

<p>In PHP, I can just do <code>arr[]=22;</code>, which will automatically add 22 to the next empty index of the array. But in C++ I can't do that, it gives me a compiler error. What do you guys suggest?</p>
","<p>There is no way to do what you say in C++ with plain arrays. The C++ solution for that is by using the STL library that gives you the <a href=""http://en.cppreference.com/w/cpp/container/vector"" rel=""noreferrer""><code>std::vector</code></a>.</p>

<p>You can use a <code>vector</code> in this way:</p>

<pre><code>std::vector&lt; int &gt; arr;

arr.push_back(1);
arr.push_back(2);
arr.push_back(3);
</code></pre>
","755845"
"C++ multiline string literal","200286","","<p>Is there any way to have multi-line plain-text, constant literals in C++, à la Perl? Maybe some parsing trick with <code>#include</code>ing a file? I can't think of one, but boy, that would be nice. I know it'll be in C++0x.</p>
","<p>Well ... Sort of. The easiest is to just use the fact that adjacent string literals are concatenated by the compiler:</p>

<pre><code>const char *text =
  ""This text is pretty long, but will be ""
  ""concatenated into just a single string. ""
  ""The disadvantage is that you have to quote ""
  ""each part, and newlines must be literal as ""
  ""usual."";
</code></pre>

<p>The indentation doesn't matter, since it's not inside the quotes.</p>

<p>You can also do this, as long as you take care to escape the embedded newline. Failure to do so, like my first answer did, will not compile:</p>

<pre>
const char *text2 =
  ""Here, on the other hand, I've gone crazy \
and really let the literal span several lines, \
without bothering with quoting each line's \
content. This works, but you can't indent."";
</pre>

<p>Again, note those backslashes at the end of each line, they must be immediately before the line ends, they are escaping the newline in the source, so that everything acts as if the newline wasn't there. You don't get newlines in the string at the locations where you had backslashes. With this form, you obviously can't indent the text since the indentation would then become part of the string, garbling it with random spaces.</p>
","1135862"
"vector vs. list in STL","199948","","<p>I noticed in Effective STL that </p>

<blockquote>
  <p>vector is the type of sequence that
  should be used by default.</p>
</blockquote>

<p>What's does it mean? It seems that ignore the efficiency <code>vector</code> can do anything. </p>

<p>Could anybody offer me a scenario where <code>vector</code> is not a feasible option but <code>list</code> must be used?</p>
","<p>Situations where you want to insert a lot of items into anywhere but the end of a sequence repeatedly.</p>

<p>Check out the complexity guarantees for each different type of container:</p>

<p><a href=""https://stackoverflow.com/questions/181693/what-are-the-complexity-guarantees-of-the-standard-containers"">What are the complexity guarantees of the standard containers?</a></p>
","2209233"
"Creating an object: with or without `new`","199539","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/3673998/what-is-difference-between-instantiating-an-object-using-new-vs-without"">What is difference between instantiating an object using new vs. without</a>  </p>
</blockquote>



<p>This is probably a basic question, and might have already been asked (say, <a href=""https://stackoverflow.com/q/2494471/459391"">here</a>); yet I still don't understand it. So, let me ask it.</p>

<p>Consider the following C++ class:</p>

<pre><code>class Obj{
    char* str;
public:
    Obj(char* s){
        str = s;
        cout &lt;&lt; str;
    }
    ~Obj(){
        cout &lt;&lt; ""Done!\n"";
        delete str;        // See the comment of ""Loki Astari"" below on why this line of code is bad practice
    }
};
</code></pre>

<p>what's the difference between the following code snippets:</p>

<pre><code>Obj o1 (""Hi\n"");
</code></pre>

<p>and</p>

<pre><code>Obj* o2 = new Obj(""Hi\n"");
</code></pre>

<p>Why the former calls the destructor, but the latter doesn't (without explicit call to <code>destroy</code>)?</p>

<p>Which one is preferred?</p>
","<p>Both do different things.</p>

<p>The first creates an object with <em>automatic storage duration</em>. It is created, used, and then goes out of scope when the current block (<code>{ ... }</code>) ends. It's the simplest way to create an object, and is just the same as when you write <code>int x = 0;</code></p>

<p>The second creates an object with <em>dynamic storage duration</em> and allows two things:</p>

<ul>
<li><p>Fine control over the lifetime of the object, since it does not go out of scope automatically; you must destroy it explicitly using the keyword <code>delete</code>;</p></li>
<li><p>Creating arrays with a size known only at runtime, since the object creation occurs at runtime. (I won't go into the specifics of allocating dynamic arrays here.)</p></li>
</ul>

<p>Neither is preferred; it depends on what you're doing as to which is most appropriate.</p>

<p>Use the former unless you need to use the latter.</p>

<p>Your C++ book should cover this pretty well. If you don't have one, <em>go no further</em> until you have bought and read, several times, <a href=""https://isocpp.org/get-started"" rel=""noreferrer"">one of these</a>.</p>

<p>Good luck.</p>

<hr>

<p>Your original code is broken, as it <code>delete</code>s a <code>char</code> array that it did not <code>new</code>. In fact, <em>nothing</em> <code>new</code>d the C-style string; it came from a string literal. <code>delete</code>ing that is an error (albeit one that will not generate a compilation error, but instead unpredictable behaviour at runtime).</p>

<p>Usually an object should not have the responsibility of <code>delete</code>ing anything that it didn't itself <code>new</code>. This behaviour should be well-documented. In this case, the rule is being completely broken.</p>
","6337327"
"how does array[100] = {0} set the entire array to 0?","197703","","<p>How does the compiler fill values in <code>char array[100] = {0};</code>? What's the magic behind it?</p>

<p>I wanted to know how internally compiler initializes.</p>
","<p>It's not magic. </p>

<p>The behavior of this code in C is described in section 6.7.8.21 of the C specification (<a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf"" rel=""nofollow noreferrer"">online draft of C spec</a>): for the elements that don't have a specified value, the compiler initializes pointers to NULL and arithmetic types to zero (and recursively applies this to aggregates). </p>

<p>The behavior of this code in C++ is described in section 8.5.1.7 of the C++ specification (<a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf#subsection.8.5.1"" rel=""nofollow noreferrer"">online draft of C++ spec</a>): the compiler aggregate-initializes the elements that don't have a specified value.</p>

<p>Also, note that in C++ (but not C), you can use an empty initializer list, causing the compiler to aggregate-initialize all of the elements of the array:</p>

<pre><code>char array[100] = {};
</code></pre>

<p>As for what sort of code the compiler might generate when you do this, take a look at this question: <a href=""https://stackoverflow.com/questions/531477/strange-assembly-from-array-0-initialization/531490"">Strange assembly from array 0-initialization</a></p>
","629063"
"C++ Virtual/Pure Virtual Explained","196948","","<p>What exactly does it mean if a function is defined as virtual and is that the same as pure virtual?</p>
","<p>From <a href=""https://en.wikipedia.org/wiki/Virtual_function"" rel=""noreferrer"">Wikipedia's Virtual function</a>
...</p>

<blockquote>
  <p>A virtual function or virtual method is a function or method whose behavior can be overridden within an inheriting class by a function with the same signature </p>
</blockquote>

<p>whereas..</p>

<blockquote>
  <p>A pure virtual function or pure virtual method is a virtual function that is required to be implemented by a derived class that is not abstract"" - Wikipedia</p>
</blockquote>

<p>So, the virtual function can be overriden and the pure virtual must be implemented.</p>
","1306837"
"Is there a max array length limit in C++?","196347","","<p>Is there a max length for an array in C++?</p>

<p>Is it a C++ limit or does it depend on my machine? Is it tweakable? Does it depend on the type the array is made of?</p>

<p>Can I break that limit somehow or do I have to search for a better way of storing information? And what should be the simplest way?</p>

<p>What I have to do is storing long long int on an array, I'm working in a Linux environment. My question is: what do I have to do if I need to store an array of N long long integers with N > 10 digits?</p>

<p>I need this because I'm writing some cryptographic algorithm (as for example the p-Pollard) for school, and hit this wall of integers and length of arrays representation.</p>
","<p>There are two limits, both not enforced by C++ but rather by the hardware.</p>

<p>The first limit (should never be reached) is set by the restrictions of the size type used to describe an index in the array (and the size thereof). It is given by the maximum value the system's <code>std::size_t</code> can take. This data type should always be the largest integer type of a system.</p>

<p>The other limit is a physical memory limit. The larger your objects in the array are, the sooner this limit is reached because memory is full. For example, a <code>vector&lt;int&gt;</code> of a given size <em>n</em> typically takes about four times as much memory as an array of type <code>vector&lt;char&gt;</code> (minus a small constant value). Therefore, a <code>vector&lt;char&gt;</code> may contain more items than a <code>vector&lt;int&gt;</code> before memory is full. The same counts for the native C-style arrays <code>int[]</code> and <code>char[]</code>.</p>

<p>Additionally, this upper limit may be influenced by the type of <code>allocator</code> used to construct the <code>vector</code> because an <code>allocator</code> is free to manage memory any way it wants. A very odd but nontheless conceivable allocator could pool memory in such a way that identical instances of an object share resources. This way, you could insert a lot of identical objects into a container that would otherwise use up all the available memory.</p>

<p>Apart from that, C++ doesn't enforce any limits.</p>
","216266"
"How to convert QString to std::string?","195799","","<p>I am trying to do something like this:</p>

<pre><code>QString string;
// do things...
std::cout &lt;&lt; string &lt;&lt; std::endl;
</code></pre>

<p>but the code doesn't compile.
How to output the content of qstring into the console (e.g. for debugging purposes or other reasons)? How to convert <code>QString</code> to <code>std::string</code>?</p>
","<p>One of the things you should remember when converting <code>QString</code> to <code>std::string</code> is the fact that <code>QString</code> is UTF-16 encoded while <code>std::string</code>... May have any encodings.</p>

<p>So the best would be either:</p>

<pre><code>QString qs;

// Either this if you use UTF-8 anywhere
std::string utf8_text = qs.toUtf8().constData();

// or this if you're on Windows :-)
std::string current_locale_text = qs.toLocal8Bit().constData();
</code></pre>

<p>The suggested (accepted) method may work if you specify codec.</p>

<p>See: <a href=""http://doc.qt.io/qt-5/qstring.html#toAscii"" rel=""noreferrer"">http://doc.qt.io/qt-5/qstring.html#toAscii</a></p>
","4644922"
"Determine if two rectangles overlap each other?","195707","","<p>I am trying to write a C++ program that takes the following inputs from the user to construct rectangles (between 2 and 5): height, width, x-pos, y-pos. All of these rectangles will exist parallel to the x and the y axis, that is all of their edges will have slopes of 0 or infinity.</p>

<p>I've tried to implement what is mentioned in <a href=""https://stackoverflow.com/questions/115426"">this</a> question but I am not having very much luck.</p>

<p>My current implementation does the following:</p>

<pre><code>// Gets all the vertices for Rectangle 1 and stores them in an array -&gt; arrRect1
// point 1 x: arrRect1[0], point 1 y: arrRect1[1] and so on...
// Gets all the vertices for Rectangle 2 and stores them in an array -&gt; arrRect2

// rotated edge of point a, rect 1
int rot_x, rot_y;
rot_x = -arrRect1[3];
rot_y = arrRect1[2];
// point on rotated edge
int pnt_x, pnt_y;
pnt_x = arrRect1[2]; 
pnt_y = arrRect1[3];
// test point, a from rect 2
int tst_x, tst_y;
tst_x = arrRect2[0];
tst_y = arrRect2[1];

int value;
value = (rot_x * (tst_x - pnt_x)) + (rot_y * (tst_y - pnt_y));
cout &lt;&lt; ""Value: "" &lt;&lt; value;  
</code></pre>

<p>However I'm not quite sure if (a) I've implemented the algorithm I linked to correctly, or if I did exactly how to interpret this?</p>

<p>Any suggestions?</p>
","<pre><code>if (RectA.Left &lt; RectB.Right &amp;&amp; RectA.Right &gt; RectB.Left &amp;&amp;
     RectA.Top &gt; RectB.Bottom &amp;&amp; RectA.Bottom &lt; RectB.Top ) 
</code></pre>

<p>or, using Cartesian coordinates     </p>

<p>(With X1 being left coord, X2 being right coord, increasing from left to right and   Y1 being Top coord, and Y2 being Bottom coord, increasing from bottom to top) ...</p>

<pre><code>if (RectA.X1 &lt; RectB.X2 &amp;&amp; RectA.X2 &gt; RectB.X1 &amp;&amp;
    RectA.Y1 &gt; RectB.Y2 &amp;&amp; RectA.Y2 &lt; RectB.Y1) 
</code></pre>

<p>NOTE: TO ALL SO USERS WITH EDIT AUTHORITY.  PLEASE STOP FIDDLING WITH THIS.</p>

<p>Say you have Rect A, and Rect B. 
Proof is by contradiction. Any one of four conditions guarantees that <strong>no overlap can exist</strong>:</p>

<ul>
<li>Cond1.  If A's left edge is to the right of the B's right edge,
       -  then A is Totally to right Of B</li>
<li>Cond2.  If A's right edge is to the left of the B's left edge,
       -  then A is Totally to left Of B</li>
<li>Cond3.  If A's top edge is below B's bottom  edge,
       -  then A is Totally below B</li>
<li>Cond4.  If A's bottom edge is above B's top edge,
       -  then A is Totally above B</li>
</ul>

<p>So condition for Non-Overlap is </p>

<pre>Cond1 Or Cond2 Or Cond3 Or Cond4</pre>

<p>Therefore, a sufficient condition for Overlap is the opposite.  </p>

<pre>Not (Cond1 Or Cond2 Or Cond3 Or Cond4)</pre>

<p>De Morgan's law says<br>
<code>Not (A or B or C or D)</code> is the same as <code>Not A And Not B And Not C And Not D</code><br>
so using De Morgan, we have</p>

<pre>Not Cond1 And Not Cond2 And Not Cond3 And Not Cond4</pre>

<p>This is equivalent to:</p>

<ul>
<li>A's Left Edge to left of B's right edge, [<code>RectA.Left &lt; RectB.Right</code>], and</li>
<li>A's right edge to right of B's left edge, [<code>RectA.Right &gt; RectB.Left</code>], and</li>
<li>A's top above B's bottom, [<code>RectA.Top &gt; RectB.Bottom</code>], and</li>
<li>A's bottom below B's Top [<code>RectA.Bottom &lt; RectB.Top</code>]</li>
</ul>

<p><strong>Note 1</strong>:  It is fairly obvious this same principle can be extended to any number of dimensions.<br>
<strong>Note 2</strong>:  It should also be fairly obvious to count overlaps of just one pixel, change the <code>&lt;</code> and/or the <code>&gt;</code> on that boundary to a <code>&lt;=</code> or a <code>&gt;=</code>.<br>
<strong>Note 3</strong>: This answer, when utilizing Cartesian coordinates (X, Y) is based on standard algebraic Cartesian coordinates (x increases left to right, and Y increases bottom to top). Obviously, where a computer system might mechanize screen coordinates differently, (e.g., increasing Y from top to bottom, or X From right to left), the syntax will need to be adjusted accordingly/ </p>
","306332"
"Replace part of a string with another string","195379","","<p>Is it possible in C++ to replace part of a string with another string?</p>

<p>Basically, I would like to do this:</p>

<pre><code>QString string(""hello $name"");
string.replace(""$name"", ""Somename"");
</code></pre>

<p>But I would like to use the Standard C++ libraries.</p>
","<p>There's a function to find a substring within a string (<a href=""http://en.cppreference.com/w/cpp/string/basic_string/find"" rel=""noreferrer""><code>find</code></a>), and a function to replace a particular range in a string with another string (<a href=""http://en.cppreference.com/w/cpp/string/basic_string/replace"" rel=""noreferrer""><code>replace</code></a>), so you can combine those to get the effect you want:</p>

<pre><code>bool replace(std::string&amp; str, const std::string&amp; from, const std::string&amp; to) {
    size_t start_pos = str.find(from);
    if(start_pos == std::string::npos)
        return false;
    str.replace(start_pos, from.length(), to);
    return true;
}

std::string string(""hello $name"");
replace(string, ""$name"", ""Somename"");
</code></pre>

<hr>

<p>In response to a comment, I think <code>replaceAll</code> would probably look something like this:</p>

<pre><code>void replaceAll(std::string&amp; str, const std::string&amp; from, const std::string&amp; to) {
    if(from.empty())
        return;
    size_t start_pos = 0;
    while((start_pos = str.find(from, start_pos)) != std::string::npos) {
        str.replace(start_pos, from.length(), to);
        start_pos += to.length(); // In case 'to' contains 'from', like replacing 'x' with 'yx'
    }
}
</code></pre>
","3418285"
"Why can't variables be declared in a switch statement?","195191","","<p>I've always wondered this - why can't you declare variables after a case label in a switch statement?  In C++ you can declare variables pretty much anywhere (and declaring them close to first use is obviously a good thing) but the following still won't work:</p>

<pre><code>switch (val)  
{  
case VAL:  
  // This won't work
  int newVal = 42;  
  break;
case ANOTHER_VAL:  
  ...
  break;
}  
</code></pre>

<p>The above gives me the following error (MSC):</p>

<blockquote>
  <p>initialization of 'newVal' is skipped by 'case' label</p>
</blockquote>

<p>This seems to be a limitation in other languages too.  Why is this such a problem?</p>
","<p><code>Case</code> statements are only <strong>labels</strong>. This means the compiler will interpret this as a jump directly to the label. In C++, the problem here is one of scope. Your curly brackets define the scope as everything inside the <code>switch</code> statement. This means that you are left with a scope where a jump will be performed further into the code skipping the initialization. The correct way to handle this is to define a scope specific to that <code>case</code> statement and define your variable within it. </p>

<pre><code>switch (val)
{   
case VAL:  
{
  // This will work
  int newVal = 42;  
  break;
}
case ANOTHER_VAL:  
...
break;
}
</code></pre>
","92439"
"Start thread with member function","195174","","<p>I am trying to construct a <code>std::thread</code> with a member function that takes no arguments and returns <code>void</code>. I can't figure out any syntax that works - the compiler complains no matter what. What is the correct way to implement <code>spawn()</code> so that it returns a <code>std::thread</code> that executes <code>test()</code>?</p>

<pre><code>#include &lt;thread&gt;
class blub {
  void test() {
  }
public:
  std::thread spawn() {
    return { test };
  }
};
</code></pre>
","<pre><code>#include &lt;thread&gt;
#include &lt;iostream&gt;

class bar {
public:
  void foo() {
    std::cout &lt;&lt; ""hello from member function"" &lt;&lt; std::endl;
  }
};

int main()
{
  std::thread t(&amp;bar::foo, bar());
  t.join();
}
</code></pre>

<p>EDIT:
Accounting your edit, you have to do it like this:</p>

<pre><code>  std::thread spawn() {
    return std::thread(&amp;blub::test, this);
  }
</code></pre>

<hr>

<p><strong>UPDATE:</strong> I want to explain some more points, some of them have also been discussed in the comments.</p>

<p>The syntax described above is defined in terms of the INVOKE definition (§20.8.2.1):</p>

<blockquote>
  <p>Define INVOKE (f, t1, t2, ..., tN) as follows: </p>
  
  <ul>
  <li>(t1.*f)(t2, ..., tN) when f is a pointer to a member function of a class T and t1 is an object of type T or a reference to an object of
  type T or a reference to an object of a type derived from T;</li>
  <li>((*t1).*f)(t2, ..., tN) when f is a pointer to a member function of a class T and t1 is not one of the types described in the previous
  item;</li>
  <li>t1.*f when N ==    1 and f is a pointer to member data of a class T and  t  1 is an object of type T or a<br>
  reference to an object of type T or a reference to an object of a<br>
  type derived from T;</li>
  <li>(*t1).*f when N == 1 and f is a pointer to member data of a class T and t 1 is not one of the types described in the previous item;</li>
  <li>f(t1, t2, ..., tN) in all other cases.</li>
  </ul>
</blockquote>

<hr>

<p>Another general fact which I want to point out is that by default the thread constructor will copy all arguments passed to it. The reason for this is that the arguments may need to outlive the calling thread, copying the arguments guarantees that. Instead, if you want to really pass a reference, you can use a <code>std::reference_wrapper</code> created by <code>std::ref</code>.</p>

<pre><code>std::thread (foo, std::ref(arg1));
</code></pre>

<p>By doing this, you are promising that you will take care of guaranteeing that the arguments will still exist when the thread operates on them.</p>

<hr>

<p>Note that all the things mentioned above can also be applied to <code>std::async</code> and <code>std::bind</code>.</p>
","10673671"
"C++ Erase vector element by value rather than by position?","194512","","<pre><code>vector&lt;int&gt; myVector;
</code></pre>

<p>and lets say the values in the vector are this (in this order):</p>

<pre><code>5 9 2 8 0 7
</code></pre>

<p>If I wanted to erase the element that contains the value of ""8"", I think I would do this:</p>

<pre><code>myVector.erase(myVector.begin()+4);
</code></pre>

<p>Because that would erase the 4th element. But is there any way to erase an element based off of the value ""8""?  Like:</p>

<pre><code>myVector.eraseElementWhoseValueIs(8);
</code></pre>

<p>Or do I simply just need to iterate through all the vector elements and test their values?</p>
","<p>How about <a href=""http://en.cppreference.com/w/cpp/algorithm/remove"" rel=""noreferrer""><code>std::remove()</code></a> instead:</p>

<pre><code>#include &lt;algorithm&gt;
...
vec.erase(std::remove(vec.begin(), vec.end(), 8), vec.end());
</code></pre>

<p>This combination is also known as the <a href=""http://en.wikipedia.org/wiki/Erase%E2%80%93remove_idiom"" rel=""noreferrer"">erase-remove idiom</a>.</p>
","3385251"
"How to Parse Command Line Arguments in C++?","194007","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/253556/what-parameter-parser-libraries-are-there-for-c"">What parameter parser libraries are there for C++?</a>  </p>
</blockquote>



<p>What is the best way of parsing command-line arguments in C++ if the program is specified 
to be run like this:</p>

<pre><code>prog [-abc] [input [output]]
</code></pre>

<p>Is there a library in STL to do this?</p>

<hr>

<p>Related:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/332849/parsing-command-line-arguments-in-a-unicode-c-application"">Parsing command line arguments in a unicode C++ application</a></li>
</ul>
","<p><a href=""http://www.boost.org/doc/libs/release/libs/program_options/"" rel=""noreferrer"">Boost.Program_options</a>  should do the trick</p>
","865687"
"C/C++ check if one bit is set in, i.e. int variable","193646","","<pre><code>int temp = 0x5E; // in binary 0b1011110.
</code></pre>

<p>Is there such a way to check if bit 3 in temp is 1 or 0 without bit shifting and masking.</p>

<p>Just want to know if there is some built in function for this, or am I forced to write one myself.</p>
","<p>In C, if you want to hide bit manipulation, you can write a macro:</p>

<pre><code>#define CHECK_BIT(var,pos) ((var) &amp; (1&lt;&lt;(pos)))
</code></pre>

<p>and use it this way:</p>

<pre><code>CHECK_BIT(temp, 3)
</code></pre>

<p>In C++, you can use <a href=""http://www.cppreference.com/wiki/stl/bitset/start"" rel=""noreferrer"">std::bitset</a>.</p>
","523737"
"When does a process get SIGABRT (signal 6)?","193119","","<p>What are the scenarios where a process gets a SIGABRT in C++?  Does this signal always come from within the process or can this signal be sent from one process to another?</p>

<p>Is there a way to identify which process is sending this signal?</p>
","<p><code>abort()</code> sends the calling process the <code>SIGABRT</code> signal, this is how <code>abort()</code> basically works. </p>

<p><code>abort()</code> is usually called by library functions which detect an internal error or some seriously broken constraint. For example <code>malloc()</code> will call <code>abort()</code> if its internal structures are damaged by a heap overflow.</p>
","3413215"
"Is there a function to copy an array in C/C++?","192996","","<p>I am a Java programmer learning C/C++. So I know that Java has a function like System.arraycopy(); to copy an array. I was wondering if there is a function in C or C++ to copy an array. I was only able to find implementation to copy an array by using for loop, pointers,etc. Is there a function that I can use to copy an array?</p>
","<p>Since C++11, you can copy arrays directly with <code>std::array</code>:</p>

<pre><code>std::array&lt;int,4&gt; A = {10,20,30,40};
std::array&lt;int,4&gt; B = A; //copy array A into array B
</code></pre>

<p>Here is the documentation about <a href=""http://en.cppreference.com/w/cpp/container/array"">std::array</a></p>
","16137997"
"Calling C++ class methods via a function pointer","192928","","<p>How do I obtain a function pointer for a class member function, and later call that member function with a specific object?  I’d like to write:</p>

<pre><code>class Dog : Animal
{
    Dog ();
    void bark ();
}

…
Dog* pDog = new Dog ();
BarkFunction pBark = &amp;Dog::bark;
(*pBark) (pDog);
…
</code></pre>

<p>Also, if possible, I’d like to invoke the constructor via a pointer as well:</p>

<pre><code>NewAnimalFunction pNew = &amp;Dog::Dog;
Animal* pAnimal = (*pNew)();    
</code></pre>

<p>Is this possible, and if so, what is the preferred way to do this?</p>
","<p>Read <a href=""http://www.newty.de/fpt/fpt.html#defi"" rel=""noreferrer"">this</a> for detail :</p>

<p>// 1 define a function pointer and initialize to NULL</p>

<pre><code>int (TMyClass::*pt2ConstMember)(float, char, char) const = NULL;
</code></pre>

<p>// C++</p>

<pre><code>class TMyClass
{
public:
   int DoIt(float a, char b, char c){ cout &lt;&lt; ""TMyClass::DoIt""&lt;&lt; endl; return a+b+c;};
   int DoMore(float a, char b, char c) const
         { cout &lt;&lt; ""TMyClass::DoMore"" &lt;&lt; endl; return a-b+c; };

   /* more of TMyClass */
};
pt2ConstMember = &amp;TMyClass::DoIt; // note: &lt;pt2Member&gt; may also legally point to &amp;DoMore

// Calling Function using Function Pointer

(*this.*pt2ConstMember)(12, 'a', 'b');
</code></pre>
","1486279"
"What's the most efficient way to erase duplicates and sort a vector?","192801","","<p>I need to take a C++ vector with potentially a lot of elements, erase duplicates, and sort it.</p>

<p>I currently have the below code, but it doesn't work.</p>

<pre><code>vec.erase(
      std::unique(vec.begin(), vec.end()),
      vec.end());
std::sort(vec.begin(), vec.end());
</code></pre>

<p>How can I correctly do this?</p>

<p>Additionally, is it faster to erase the duplicates first (similar to coded above) or perform the sort first?  If I do perform the sort first, is it guaranteed to remain sorted after <code>std::unique</code> is executed?</p>

<p>Or is there another (perhaps more efficient) way to do all this?  </p>
","<p>I agree with <a href=""https://stackoverflow.com/questions/1041620/most-efficient-way-to-erase-duplicates-and-sort-a-c-vector/1041874#1041874"">R. Pate</a> and <a href=""https://stackoverflow.com/questions/1041620/most-efficient-way-to-erase-duplicates-and-sort-a-c-vector/1041700#1041700"">Todd Gardner</a>; a <a href=""http://en.cppreference.com/w/cpp/container/set"" rel=""noreferrer""><code>std::set</code></a> might be a good idea here.  Even if you're stuck using vectors, if you have enough duplicates, you might be better off creating a set to do the dirty work.</p>

<p>Let's compare three approaches:</p>

<p><strong>Just using vector, sort + unique</strong></p>

<pre><code>sort( vec.begin(), vec.end() );
vec.erase( unique( vec.begin(), vec.end() ), vec.end() );
</code></pre>

<p><strong>Convert to set (manually)</strong></p>

<pre><code>set&lt;int&gt; s;
unsigned size = vec.size();
for( unsigned i = 0; i &lt; size; ++i ) s.insert( vec[i] );
vec.assign( s.begin(), s.end() );
</code></pre>

<p><strong>Convert to set (using a constructor)</strong></p>

<pre><code>set&lt;int&gt; s( vec.begin(), vec.end() );
vec.assign( s.begin(), s.end() );
</code></pre>

<p>Here's how these perform as the number of duplicates changes:</p>

<p><img src=""https://i.stack.imgur.com/gGgtR.png"" alt=""comparison of vector and set approaches""></p>

<p><strong>Summary</strong>: when the number of duplicates is large enough, <em>it's actually faster to convert to a set and then dump the data back into a vector</em>.  </p>

<p>And for some reason, doing the set conversion manually seems to be faster than using the set constructor -- at least on the toy random data that I used.</p>
","1041939"
"Finding the type of an object in C++","192552","","<p>I have a class A and another class that inherits from it, B. I am overriding a function that accepts an object of type A as a parameter, so I have to accept an A. However, I later call functions that only B has, so I want to return false and not proceed if the object passed is not of type B.</p>

<p>What is the best way to find out which type the object passed to my function is?</p>
","<p>dynamic_cast should do the trick </p>

<pre><code>TYPE&amp; dynamic_cast&lt;TYPE&amp;&gt; (object);
TYPE* dynamic_cast&lt;TYPE*&gt; (object);
</code></pre>

<p>The <a href=""http://en.cppreference.com/w/cpp/language/dynamic_cast"" rel=""noreferrer""><code>dynamic_cast</code></a> keyword casts a datum from one pointer or reference type to another, performing a runtime check to ensure the validity of the cast.</p>

<p>If you attempt to cast to pointer to a type that is not a type of actual object, the result of the cast will be NULL. If you attempt to cast to reference to a type that is not a type of actual object, the cast will throw a <a href=""http://en.cppreference.com/w/cpp/types/bad_cast"" rel=""noreferrer""><code>bad_cast</code></a> exception.</p>

<p><strong>Make sure there is at least one virtual function in Base class to make dynamic_cast work.</strong></p>
","351865"
"What is the most effective way to get the index of an iterator of an std::vector?","192228","","<p>I'm iterating over a vector and need the index the iterator is currently pointing at. AFAIK this can be done in two ways:</p>

<ul>
<li><code>it - vec.begin()</code></li>
<li><code>std::distance(vec.begin(), it)</code></li>
</ul>

<p>What are the pros and cons of these methods?</p>
","<p>I would prefer <code>it - vec.begin()</code> precisely for the opposite reason given by Naveen: so it <em>wouldn't</em> compile if you change the vector into a list. If you do this during every iteration, you could easily end up turning an O(n) algorithm into an O(n^2) algorithm.</p>

<p>Another option, if you don't jump around in the container during iteration, would be to keep the index as a second loop counter.</p>
","2153160"
"Use of min and max functions in C++","192180","","<p>From C++, are <code>min</code> and <code>max</code> preferable over <code>fmin</code> and <code>fmax</code>?  For comparing two integers, do they provide basically the same functionality? </p>

<p>Do you tend to use one of these sets of functions or do you prefer to write your own (perhaps to improve efficiency, portability, flexibility, etc.)?</p>

<p><strong><em>Notes:</em></strong></p>

<ol>
<li><p>The C++ Standard Template Library (STL) declares the <code>min</code> and <code>max</code> functions in the standard C++ <a href=""http://en.wikipedia.org/wiki/Algorithm_(C%2B%2B)"" rel=""noreferrer"">algorithm</a> header.  </p></li>
<li><p>The C standard (C99) provides the <code>fmin</code> and <code>fmax</code> function in the standard C <a href=""http://en.wikipedia.org/wiki/Math.h"" rel=""noreferrer"">math.h</a> header.</p></li>
</ol>

<p>Thanks in advance!</p>
","<p><code>fmin</code> and <code>fmax</code> are specifically for use with floating point numbers (hence the ""f""). If you use it for ints, you may suffer performance or precision losses due to conversion, function call overhead, etc. depending on your compiler/platform.</p>

<p><code>std::min</code> and <code>std::max</code> are template functions (defined in header <a href=""http://en.cppreference.com/w/cpp/header/algorithm"" rel=""noreferrer""><code>&lt;algorithm&gt;</code></a>) which work on any type with a less-than (<code>&lt;</code>) operator, so they can operate on any data type that allows such a comparison. You can also provide your own comparison function if you don't want it to work off <code>&lt;</code>.</p>

<p>This is safer since you have to explicitly convert arguments to match when they have different types. The compiler won't let you accidentally convert a 64-bit int into a 64-bit float, for example. This reason alone should make the templates your default choice. (Credit to Matthieu M &amp; bk1e)</p>

<p>Even when used with floats the template <strong><em>may</em></strong> win in performance. A compiler always has the option of inlining calls to template functions since the source code is part of the compilation unit. Sometimes it's <em>impossible</em> to inline a call to a library function, on the other hand (shared libraries, absence of link-time optimization, etc.).</p>
","1632175"
"Remove last character from C++ string","191942","","<p>How can I remove last character from a C++ string?</p>

<p>I tried <code>st = substr(st.length()-1);</code> But it didn't work.</p>
","<p>For a non-mutating version:</p>

<pre><code>st = myString.substr(0, myString.size()-1);
</code></pre>
","2310952"
"Using G++ to compile multiple .cpp and .h files","191916","","<p>I've just inherited some C++ code which was written poorly with one cpp file which contained the main and a bunch of other functions. There are also <code>.h</code> files which contain classes and their function definitions.</p>

<p>Until now the program was compiled using the command <code>g++ main.cpp</code>. Now that I've seperated the classes to <code>.h</code> and <code>.cpp</code> files do I need to use a makefile or can I still use the <code>g++ main.cpp</code> command?</p>
","<p>list all the other cpp files after main.cpp.</p>

<p>ie </p>

<pre><code>g++ main.cpp other.cpp etc.cpp
</code></pre>

<p>and so on.</p>

<p>Or you can compile them all individually.   You then link all the resulting "".o"" files together.</p>
","3202161"
"What are the rules about using an underscore in a C++ identifier?","191185","","<p>It's common in C++ to name member variables with some kind of prefix to denote the fact that they're member variables, rather than local variables or parameters. If you've come from an MFC background, you'll probably use <code>m_foo</code>. I've also seen <code>myFoo</code> occasionally.</p>

<p>C# (or possibly just .NET) seems to recommend using just an underscore, as in <code>_foo</code>. Is this allowed by the C++ standard?</p>
","<p>The rules (which did not change in C++11):</p>

<ul>
<li>Reserved in any scope, including for use as implementation macros:

<ul>
<li>identifiers beginning with an underscore followed immediately by an uppercase letter</li>
<li>identifiers containing adjacent underscores (or ""double underscore"")</li>
</ul></li>
<li>Reserved in the global namespace:

<ul>
<li>identifiers beginning with an underscore</li>
</ul></li>
<li>Also, everything in the <code>std</code> namespace is reserved. (You are allowed to add template specializations, though.) </li>
</ul>

<p>From the 2003 C++ Standard:</p>

<blockquote>
  <h3>17.4.3.1.2 Global names [lib.global.names]</h3>
  
  <p>Certain sets of names and function signatures are always reserved to the implementation:</p>
  
  <ul>
  <li>Each name that contains a double underscore (_ _) or begins with an underscore followed by an uppercase letter (2.11) is reserved to the implementation for any use.</li>
  <li>Each name that begins with an underscore is reserved to the implementation for use as a name in the global namespace.<sup>165</sup></li>
  </ul>
  
  <p><sup>165)</sup> Such names are also reserved in namespace ::std (17.4.3.1). </p>
</blockquote>

<p>Because C++ is based on the C standard (1.1/2, C++03) and C99 is a normative reference (1.2/1, C++03) these also apply, from the 1999 C Standard:</p>

<blockquote>
  <h3>7.1.3 Reserved identifiers</h3>
  
  <p>Each header declares or defines all identifiers listed in its associated subclause, and
  optionally declares or defines identifiers listed in its associated future library directions subclause and identifiers which are always reserved either for any use or for use as file scope identifiers.</p>
  
  <ul>
  <li>All identifiers that begin with an underscore and either an uppercase letter or another
  underscore are always reserved for any use.</li>
  <li>All identifiers that begin with an underscore are always reserved for use as identifiers
  with file scope in both the ordinary and tag name spaces.</li>
  <li>Each macro name in any of the following subclauses (including the future library
  directions) is reserved for use as specified if any of its associated headers is included;
  unless explicitly stated otherwise (see 7.1.4).</li>
  <li>All identifiers with external linkage in any of the following subclauses (including the
  future library directions) are always reserved for use as identifiers with external
  linkage.<sup>154</sup></li>
  <li>Each identifier with file scope listed in any of the following subclauses (including the
  future library directions) is reserved for use as a macro name and as an identifier with
  file scope in the same name space if any of its associated headers is included.</li>
  </ul>
  
  <p>No other identifiers are reserved. If the program declares or defines an identifier in a
  context in which it is reserved (other than as allowed by 7.1.4), or defines a reserved
  identifier as a macro name, the behavior is undefined.</p>
  
  <p>If the program removes (with <code>#undef</code>) any macro definition of an identifier in the first
  group listed above, the behavior is undefined.</p>
  
  <p><sup>154)</sup> The list of reserved identifiers with external linkage includes <code>errno</code>, <code>math_errhandling</code>, <code>setjmp</code>, and <code>va_end</code>.</p>
</blockquote>

<p>Other restrictions might apply. For example, the POSIX standard reserves a lot of identifiers that are likely to show up in normal code:</p>

<ul>
<li>Names beginning with a capital 'E' followed a digit or uppercase letter:

<ul>
<li>may be used for additional error code names.</li>
</ul></li>
<li>Names that begin with either 'is' or 'to' followed by a lowercase letter

<ul>
<li>may be used for additional character testing and conversion functions.</li>
</ul></li>
<li>Names that begin with 'LC_' followed by an uppercase letter

<ul>
<li>may be used for additional macros specifying locale attributes.</li>
</ul></li>
<li>Names of all existing mathematics functions suffixed with 'f' or 'l' are reserved

<ul>
<li>for corresponding functions that operate on float and long double arguments, respectively.</li>
</ul></li>
<li>Names that begin with 'SIG' followed by an uppercase letter are reserved

<ul>
<li>for additional signal names.</li>
</ul></li>
<li>Names that begin with 'SIG_' followed by an uppercase letter are reserved

<ul>
<li>for additional signal actions.</li>
</ul></li>
<li>Names beginning with 'str', 'mem', or 'wcs' followed by a lowercase letter are reserved

<ul>
<li>for additional string and array functions.</li>
</ul></li>
<li>Names beginning with 'PRI' or 'SCN' followed by any lowercase letter or 'X' are reserved

<ul>
<li>for additional format specifier macros</li>
</ul></li>
<li>Names that end with '_t' are reserved

<ul>
<li>for additional type names.</li>
</ul></li>
</ul>

<p>While using these names for your own purposes right now might not cause a problem, they do raise the possibility of conflict with future versions of that standard.</p>

<hr>

<p>Personally I just don't start identifiers with underscores. New addition to my rule: Don't use double underscores anywhere, which is easy as I rarely use underscore.</p>

<p>After doing research on this article I no longer end my identifiers with '_t'
as this is reserved by the POSIX standard.</p>

<p>The rule about any identifier ending with '_t' surprised me a lot. I think that is a POSIX standard (not sure yet) looking for clarification and official chapter and verse. This is from the <a href=""http://www.gnu.org/software/libtool/manual/libc/Reserved-Names.html"" rel=""noreferrer"">GNU</a> libtool manual, listing reserved names.</p>

<p>CesarB provided the following link to the <a href=""http://www.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_02.html"" rel=""noreferrer"">POSIX 2004</a> reserved symbols and notes 'that many other reserved prefixes and suffixes ... can be found there'.  The
<a href=""http://www.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html"" rel=""noreferrer"">POSIX 2008</a> reserved symbols are defined here.  The restrictions are somewhat more nuanced than those above.</p>
","228797"
"How to append a char to a std::string?","191111","","<p>The following fails with the error <code>prog.cpp:5:13: error: invalid conversion from ‘char’ to ‘const char*’</code></p>

<pre><code>int main()
{
  char d = 'd';
  std::string y(""Hello worl"");
  y.append(d); // Line 5 - this fails
  std::cout &lt;&lt; y;
  return 0;
}
</code></pre>

<p>I also tried, the following, which compiles but behaves randomly at runtime:</p>

<pre><code>int main()
{
  char d[1] = { 'd' };
  std::string y(""Hello worl"");
  y.append(d);
  std::cout &lt;&lt; y;
  return 0;
}
</code></pre>

<p>Sorry for this dumb question, but I've searched around google, what I could see are just ""char array to char ptr"", ""char ptr to char array"", etc.</p>
","<pre><code>y += d;
</code></pre>

<p>I would use <code>+=</code> operator instead of named functions.</p>
","1472075"
"How to navigate through a vector using iterators? (C++)","190685","","<p>The goal is to access the ""nth"" element of a vector of strings instead of the [] operator or the ""at"" method. From what I understand, iterators can be used to navigate through containers, but I've never used iterators before, and what I'm reading is confusing.</p>

<p>If anyone could give me some information on how to achieve this, I would appreciate it. Thank you.</p>
","<p>You need to make use of the <a href=""http://en.cppreference.com/w/cpp/container/vector/begin"" rel=""noreferrer""><code>begin</code></a> and <a href=""http://en.cppreference.com/w/cpp/container/vector/end"" rel=""noreferrer""><code>end</code></a> method of the <a href=""http://en.cppreference.com/w/cpp/container/vector"" rel=""noreferrer""><code>vector</code></a> class, which return the iterator referring to the first and the last element respectively.</p>

<pre><code>using namespace std;  

vector&lt;string&gt; myvector;  // a vector of stings.


// push some strings in the vector.
myvector.push_back(""a"");
myvector.push_back(""b"");
myvector.push_back(""c"");
myvector.push_back(""d"");


vector&lt;string&gt;::iterator it;  // declare an iterator to a vector of strings
int n = 3;  // nth element to be found.
int i = 0;  // counter.

// now start at from the beginning
// and keep iterating over the element till you find
// nth element...or reach the end of vector.
for(it = myvector.begin(); it != myvector.end(); it++,i++ )    {
    // found nth element..print and break.
    if(i == n) {
        cout&lt;&lt; *it &lt;&lt; endl;  // prints d.
        break;
    }
}

// other easier ways of doing the same.
// using operator[]
cout&lt;&lt;myvector[n]&lt;&lt;endl;  // prints d.

// using the at method
cout &lt;&lt; myvector.at(n) &lt;&lt; endl;  // prints d.
</code></pre>
","2395311"
"How to print a string in C++","190443","","<p>I tried this, but it didn't work.</p>

<pre><code>#include &lt;string&gt;
string someString(""This is a string."");
printf(""%s\n"", someString);
</code></pre>
","<pre><code>#include &lt;iostream&gt;
cout &lt;&lt; someString &lt;&lt; ""\n"";
</code></pre>

<p>or</p>

<pre><code>printf(""%s\n"",someString.c_str())
</code></pre>
","5322236"
"error LNK2019: unresolved external symbol _main referenced in function ___tmainCRTStartup","190206","","<p>I don't know what's wrong with it.. I can't find where the error is, commenting out the implementation doesn't resolve the error either.</p>

<p><strong>Header File</strong></p>

<pre><code>#ifndef MAIN_SAVITCH_SEQUENCE_H
#define MAIN_SAVITCH_SEQUENCE_H
#include &lt;cstdlib&gt;  // Provides size_t

namespace main_savitch_3
{
    class sequence
    {
    public:
        // TYPEDEFS and MEMBER CONSTANTS
        typedef double value_type;
        typedef std::size_t size_type;
        static const size_type CAPACITY = 30;
        // CONSTRUCTOR
        sequence( );
        // MODIFICATION MEMBER FUNCTIONS
        void start( );
        void advance( );
        void insert(const value_type&amp; entry);
        void attach(const value_type&amp; entry);
        void remove_current( );
        // CONSTANT MEMBER FUNCTIONS
        size_type size( ) const;
        bool is_item( ) const;
        value_type current( ) const;
    private:
        value_type data[CAPACITY];
        size_type used;
        size_type current_index;
    };
}

#endif
</code></pre>

<p><strong>Source</strong></p>

<pre><code>#include ""sequence1.h""
#include &lt;assert.h&gt;

namespace main_savitch_3
{

    // Default constructer - sequence is empty
    sequence::sequence()
    {
        used = current_index = 0;
    }


    // Start the iteration
    void sequence::start()
    {
        current_index = 0;
    }
    // Iterate
    void sequence::advance()
    {
        current_index++;
    }


    // Number of items in the sequence
    sequence::size_type sequence::size() const
    {
        return used;
    }
    // Checks if there is a current item
    bool sequence::is_item() const
    {
        return current_index &lt;= used &amp;&amp; used &gt; 0;
    }
    // Returns the current value
    sequence::value_type sequence::current() const
    {
        assert(is_item()); // no current item
        return data[current_index];
    }


    // Adds an item BEFORE the current index
    void sequence::insert(const value_type&amp; entry)
    {
        assert(entry != 0); // pointer is invalid
        assert(current_index &lt; sequence::CAPACITY); // no room to add an item

        // move items up - starting with the last item and working down to the current item
        // arrays start at 0, so the -1 adjusts it
        for (size_type i = used - 1; i &gt;= current_index; i--)
            data[i + 1] = data[i];

        data[current_index] = entry;
    }
    // Adds an item AFTER the current index
    void sequence::attach(const value_type&amp; entry)
    {
        assert(entry != 0); // pointer is invalid
        assert(current_index &lt; sequence::CAPACITY); // no room to add an item

        // move items up - starting with the last item and working down to the current item
        // arrays start at 0, so the -1 adjusts it
        for (size_type i = used - 1; i &gt; current_index; i--)
            data[i + 1] = data[i];

        if (current_index = 0)
            data[used] = entry;
        else
            data[current_index + 1] = entry;
    }
    // Removes the current item
    void sequence::remove_current()
    {
        for (size_type i = current_index; i &lt; used; i++)
            data[i] = data[i + 1];
    }

}
</code></pre>
","<p>Even if your project has a <code>main()</code> method, the linker sometimes gets confused. You can solve this issue in Visual Studio 2010 by going to</p>

<blockquote>
  <p>Project -> Properties -> Configuration Properties -> Linker -> System</p>
</blockquote>

<p>and changing <code>SubSystem</code>  to Console.</p>
","7770651"
"How to get Current Directory?","189934","","<p>I've been doing this in C# and Delphi ,but C++ is evil.The purpose is to create a file in the current directory(where the executable is running).</p>

<p>My code:</p>

<pre><code>LPTSTR NPath = NULL;
DWORD a = GetCurrentDirectory(MAX_PATH,NPath);
HANDLE hNewFile = CreateFile(NPath,GENERIC_WRITE,0,NULL,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);
</code></pre>

<p>I get exception at GetCurrentDirectory().</p>

<p>Please tell me why I get an exception and how do I make it easier in C++?</p>
","<p>I would recommend reading a book on C++ before you go any further, as it would be helpful to get a firmer footing. <a href=""http://www.acceleratedcpp.com/"" rel=""noreferrer"">Accelerated C++</a> by Koenig and Moo is excellent.</p>

<p>To get the executable path use <a href=""http://msdn.microsoft.com/en-us/library/ms683197%28VS.85%29.aspx"" rel=""noreferrer"">GetModuleFileName</a>:</p>

<pre><code>char buffer[MAX_PATH];
GetModuleFileName( NULL, buffer, MAX_PATH );
</code></pre>

<p>Here's a C++ function that gets the directory without the file name:</p>

<pre><code>#include &lt;windows.h&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
using namespace std;;

string ExePath() {
    char buffer[MAX_PATH];
    GetModuleFileName( NULL, buffer, MAX_PATH );
    string::size_type pos = string( buffer ).find_last_of( ""\\/"" );
    return string( buffer ).substr( 0, pos);
}

int main() {
    cout &lt;&lt; ""my directory is "" &lt;&lt; ExePath() &lt;&lt; ""\n"";
}
</code></pre>
","875264"
"When to use dynamic vs. static libraries","189630","","<p>When creating a class library in C++, you can choose between dynamic (.dll) and static (.lib) libraries. What is the difference between them and when is it appropriate to use which?</p>
","<p>Static libraries increase the size of the code in your binary. They're always loaded and whatever version of the code you compiled with is the version of the code that will run.</p>

<p>Dynamic libraries are stored and versioned separately. It's possible for a version of the dynamic library to be loaded that wasn't the original one that shipped with your code <strong>if</strong> the update is considered binary compatible with the original version.</p>

<p>Additionally dynamic libraries aren't necessarily loaded -- they're usually loaded when first called -- and can be shared among components that use the same library (multiple data loads, one code load).</p>

<p>Dynamic libraries were considered to be the better approach most of the time, but originally they had a major flaw (google DLL hell), which has all but been eliminated by more recent Windows OSes (Windows XP in particular).</p>
","140100"
"How to create a dynamic array of integers","189559","","<p>How to create a dynamic array of integers in C++ using the <code>new</code> keyword?</p>
","<pre><code>int main()
{
  int size;

  std::cin &gt;&gt; size;

  int *array = new int[size];

  delete [] array;

  return 0;
}
</code></pre>

<p>Don't forget to <code>delete</code> every array you allocate with <code>new</code>.</p>
","4029897"
"How to end C++ code","189411","","<p>I would like my C++ code to stop running if a certain condition is met, but I'm not sure how to do that. So just at any point if an <code>if</code> statement is true terminate the code like this:</p>

<pre><code>if (x==1)
{
    kill code;
}
</code></pre>
","<p>There are several ways, but first you need to understand why object cleanup is important, and hence the reason <a href=""http://en.cppreference.com/w/cpp/utility/program/exit"" rel=""noreferrer""><code>std::exit</code></a> is marginalized among C++ programmers.</p>

<h2>RAII and Stack Unwinding</h2>

<p>C++ makes use of a idiom called <a href=""http://en.cppreference.com/w/cpp/language/raii"" rel=""noreferrer"">RAII</a>, which in simple terms means objects should perform initialization in the constructor and cleanup in the destructor. For instance the <a href=""http://en.cppreference.com/w/cpp/io/basic_ofstream"" rel=""noreferrer""><code>std::ofstream</code></a> class [may] open the file during the constructor, then the user performs output operations on it, and finally at the end of its life cycle, usually determined by its scope, the destructor is called that essentially closes the file and flushes any written content into the disk.</p>

<p>What happens if you don't get to the destructor to flush and close the file? <em>Who knows!</em> But possibly it won't write all the data it was supposed to write into the file.</p>

<p>For instance consider this code</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;exception&gt;
#include &lt;memory&gt;

void inner_mad()
{
    throw std::exception();
}

void mad()
{
    std::unique_ptr&lt;int&gt; ptr(new int);
    inner_mad();
}

int main()
{
    std::ofstream os(""file.txt"");
    os &lt;&lt; ""Content!!!"";

    int possibility = /* either 1, 2, 3 or 4 */;

    if(possibility == 1)
        return 0;
    else if(possibility == 2)
        throw std::exception();
    else if(possibility == 3)
        mad();
    else if(possibility == 4)
        exit(0);
}
</code></pre>

<p>What happens in each possibility is:</p>

<ul>
<li><strong>Possibility 1:</strong> Return essentially leaves the current function scope, so it knows about the end of the life cycle of <code>os</code> thus calling its destructor and doing proper cleanup by closing and flushing the file to disk.</li>
<li><strong>Possibility 2:</strong> Throwing a exception also takes care of the life cycle of the objects in the current scope, thus doing proper cleanup...</li>
<li><strong>Possibility 3:</strong> Here stack unwinding enters in action! Even though the exception is thrown at <code>inner_mad</code>, the unwinder will go though the stack of <code>mad</code> and <code>main</code> to perform proper cleanup, all the objects are going to be destructed properly, including <code>ptr</code> and <code>os</code>.</li>
<li><strong>Possibility 4:</strong> Well, here? <a href=""http://en.cppreference.com/w/cpp/utility/program/exit"" rel=""noreferrer""><code>exit</code></a> is a C function and it's not aware nor compatible with the C++ idioms. It <strong>does not</strong> perform cleanup on your objects, including <code>os</code> in the very same scope. So your file won't be closed properly and for this reason the content might never get written into it!</li>
<li><strong>Other Possibilities:</strong> It'll just leave main scope, by performing a implicit <code>return 0</code> and thus having the same effect as possibility 1, i.e. proper cleanup.</li>
</ul>

<p>But don't be so certain about what I just told you (mainly possibilities 2 and 3); continue reading and we'll find out how to perform a proper exception based cleanup.</p>

<h2>Possible Ways To <em>End</em></h2>

<h3>Return from main!</h3>

<p>You should do this whenever possible; always prefer to return from your program by returning a proper exit status from main.</p>

<p>The caller of your program, and possibly the operating system, might want to know whether what your program was supposed to do was done successfully or not. For this same reason you should return either zero or <a href=""http://en.cppreference.com/w/cpp/utility/program/EXIT_status"" rel=""noreferrer""><code>EXIT_SUCCESS</code></a> to signal that the program successfully terminated and <a href=""http://en.cppreference.com/w/cpp/utility/program/EXIT_status"" rel=""noreferrer""><code>EXIT_FAILURE</code></a> to signal the program terminated unsuccessfully, any other form of return value is implementation-defined (<em>§18.5/8</em>).</p>

<p>However you may be very deep in the call stack, and returning all of it may be painful...</p>

<h3>[Do not] throw a exception</h3>

<p>Throwing a exception will perform proper object cleanup using stack unwinding, by calling the destructor of every object in any previous scope.</p>

<p>But here's <strong>the catch</strong>! It's implementation-defined whether stack unwinding is performed when a thrown exception is not handled <em>(by the catch(...) clause)</em> or even if you have a <a href=""http://en.cppreference.com/w/cpp/language/noexcept_spec"" rel=""noreferrer""><code>noexcept</code></a> function in the middle of the call stack. This is stated in <em>§15.5.1 [except.terminate]</em>:</p>

<blockquote>
  <ol>
  <li><p>In some situations exception handling must be abandoned for less subtle error handling techniques. [Note: These situations are:</p>
  
  <blockquote>
    <p>[...]</p>
    
    <p>—  <strong>when the exception handling mechanism cannot find a handler for a thrown exception (15.3), or when the search for a handler (15.3) encounters the outermost block of a function with a <code>noexcept</code>-specification</strong> that does not allow the exception (15.4), or [...]</p>
    
    <p>[...]</p>
  </blockquote></li>
  <li><p><strong>In such cases, std::terminate() is called (18.8.3). In the situation where no matching handler is found, it is implementation-defined whether or not the stack is unwound before std::terminate() is called</strong> [...]</p></li>
  </ol>
</blockquote>

<p>So we have to catch it!</p>

<h3>Do throw a exception and catch it at main!</h3>

<p>Since uncaught exceptions may not perform stack unwinding <em>(and consequently won't perform proper cleanup)</em>, we should catch the exception in main and then return a exit status (<a href=""http://en.cppreference.com/w/cpp/utility/program/EXIT_status"" rel=""noreferrer""><code>EXIT_SUCCESS</code></a> or <a href=""http://en.cppreference.com/w/cpp/utility/program/EXIT_status"" rel=""noreferrer""><code>EXIT_FAILURE</code></a>).</p>

<p>So a possibly good setup would be:</p>

<pre><code>int main()
{
    /* ... */
    try
    {
        // Insert code that will return by throwing a exception.
    }
    catch(const std::exception&amp;)  // Consider using a custom exception type for intentional
    {                             // throws. A good idea might be a `return_exception`.
        return EXIT_FAILURE;
    }
    /* ... */
}
</code></pre>

<h3>[Do not] std::exit</h3>

<p>This does not perform any sort of stack unwinding, and no alive object on the stack will call its respective destructor to perform cleanup.</p>

<p>This is enforced in <em>§3.6.1/4 [basic.start.init]</em>:</p>

<blockquote>
  <p><strong>Terminating the program without leaving the current block (e.g., by calling the function std::exit(int) (18.5)) does not destroy any objects with automatic storage duration (12.4)</strong>. If std::exit is called to end a program during the destruction of an object with static or thread storage duration, the program has undefined behavior.</p>
</blockquote>

<p>Think about it now, why would you do such a thing? How many objects have you painfully damaged?</p>

<h2>Other [as bad] alternatives</h2>

<p>There are other ways to terminate a program <em>(other than crashing)</em>, but they aren't recommended. Just for the sake of clarification they are going to be presented here. Notice how <em>normal program termination</em> <strong>does not</strong> mean stack unwinding but an <em>okay</em> state for the operating system.</p>

<ul>
<li><a href=""http://en.cppreference.com/w/cpp/utility/program/_Exit"" rel=""noreferrer""><code>std::_Exit</code></a> causes a normal program termination, and that's it.</li>
<li><a href=""http://en.cppreference.com/w/cpp/utility/program/quick_exit"" rel=""noreferrer""><code>std::quick_exit</code></a> causes a normal program termination and calls <a href=""http://en.cppreference.com/w/cpp/utility/program/at_quick_exit"" rel=""noreferrer""><code>std::at_quick_exit</code></a> handlers, no other cleanup is performed.</li>
<li><a href=""http://en.cppreference.com/w/cpp/utility/program/exit"" rel=""noreferrer""><code>std::exit</code></a> causes a normal program termination and then calls <a href=""http://en.cppreference.com/w/cpp/utility/program/atexit"" rel=""noreferrer""><code>std::atexit</code></a> handlers. Other sorts of cleanups are performed such as calling static objects destructors.</li>
<li><a href=""http://en.cppreference.com/w/cpp/utility/program/abort"" rel=""noreferrer""><code>std::abort</code></a> causes an abnormal program termination, no cleanup is performed. This should be called if the program terminated in a really, really unexpected way. It'll do nothing but signal the OS about the abnormal termination. Some systems perform a core dump in this case.</li>
<li><a href=""http://en.cppreference.com/w/cpp/error/terminate"" rel=""noreferrer""><code>std::terminate</code></a> calls the <a href=""http://en.cppreference.com/w/cpp/error/terminate_handler"" rel=""noreferrer""><code>std::terminate_handler</code></a> which calls <a href=""http://en.cppreference.com/w/cpp/utility/program/abort"" rel=""noreferrer""><code>std::abort</code></a> by default.</li>
</ul>
","30251056"
"How to convert wstring into string?","188799","","<p>The question is how to convert wstring to string?</p>

<p>I have next example :</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
    std::wstring ws = L""Hello"";
    std::string s( ws.begin(), ws.end() );

  //std::cout &lt;&lt;""std::string =     ""&lt;&lt;s&lt;&lt;std::endl;
    std::wcout&lt;&lt;""std::wstring =    ""&lt;&lt;ws&lt;&lt;std::endl;
    std::cout &lt;&lt;""std::string =     ""&lt;&lt;s&lt;&lt;std::endl;
}
</code></pre>

<p>the output with commented out line is :</p>

<pre><code>std::string =     Hello
std::wstring =    Hello
std::string =     Hello
</code></pre>

<p>but without is only :</p>

<pre><code>std::wstring =    Hello
</code></pre>

<p>Is anything wrong in the example? Can I do the conversion like above?</p>

<p><strong>EDIT</strong></p>

<p>New example (taking into account some answers) is </p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;locale&gt;

int main()
{
    setlocale(LC_CTYPE, """");

    const std::wstring ws = L""Hello"";
    const std::string s( ws.begin(), ws.end() );

    std::cout&lt;&lt;""std::string =     ""&lt;&lt;s&lt;&lt;std::endl;
    std::wcout&lt;&lt;""std::wstring =    ""&lt;&lt;ws&lt;&lt;std::endl;

    std::stringstream ss;
    ss &lt;&lt; ws.c_str();
    std::cout&lt;&lt;""std::stringstream =     ""&lt;&lt;ss.str()&lt;&lt;std::endl;
}
</code></pre>

<p>The output is :</p>

<pre><code>std::string =     Hello
std::wstring =    Hello
std::stringstream =     0x860283c
</code></pre>

<p>therefore the stringstream can not be used to convert wstring into string.</p>
","<p>Here is a worked-out solution based on the other suggestions:</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;clocale&gt;
#include &lt;locale&gt;
#include &lt;vector&gt;

int main() {
  std::setlocale(LC_ALL, """");
  const std::wstring ws = L""ħëłlö"";
  const std::locale locale("""");
  typedef std::codecvt&lt;wchar_t, char, std::mbstate_t&gt; converter_type;
  const converter_type&amp; converter = std::use_facet&lt;converter_type&gt;(locale);
  std::vector&lt;char&gt; to(ws.length() * converter.max_length());
  std::mbstate_t state;
  const wchar_t* from_next;
  char* to_next;
  const converter_type::result result = converter.out(state, ws.data(), ws.data() + ws.length(), from_next, &amp;to[0], &amp;to[0] + to.size(), to_next);
  if (result == converter_type::ok or result == converter_type::noconv) {
    const std::string s(&amp;to[0], to_next);
    std::cout &lt;&lt;""std::string =     ""&lt;&lt;s&lt;&lt;std::endl;
  }
}
</code></pre>

<p>This will usually work for Linux, but will create problems on Windows.</p>
","4805413"
"What is the best way to use a HashMap in C++?","188313","","<p>I know that STL has a HashMap API, but I cannot find any good and thorough documentation with good examples regarding this.</p>

<p>Any good examples will be appreciated.</p>
","<p>The STL includes the ordered and the unordered map (<a href=""http://en.cppreference.com/w/cpp/container/map"" rel=""noreferrer""><code>std::map</code></a> and <a href=""http://en.cppreference.com/w/cpp/container/unordered_map"" rel=""noreferrer""><code>std::unordered_map</code></a>) containers. In an ordered map the elements are sorted by the key, insert and access is in <a href=""http://en.wikipedia.org/wiki/Big_O_notation"" rel=""noreferrer"">O</a>(log n)). Usually the STL internally uses <a href=""http://en.wikipedia.org/wiki/Red_black_tree"" rel=""noreferrer"">red black trees</a> for ordered maps. But this is just an implementation detail. In an unordered map insert and access is in O(1). It is just another name for a hashtable.</p>

<p>An example with (ordered) <code>std::map</code>:</p>

<pre><code>#include &lt;map&gt;
#include &lt;iostream&gt;
#include &lt;cassert&gt;

int main(int argc, char **argv)
{
  std::map&lt;std::string, int&gt; m;
  m[""hello""] = 23;
  // check if key is present
  if (m.find(""world"") != m.end())
    std::cout &lt;&lt; ""map contains key world!\n"";
  // retrieve
  std::cout &lt;&lt; m[""hello""] &lt;&lt; '\n';
  std::map&lt;std::string, int&gt;::iterator i = m.find(""hello"");
  assert(i != m.end());
  std::cout &lt;&lt; ""Key: "" &lt;&lt; i-&gt;first &lt;&lt; "" Value: "" &lt;&lt; i-&gt;second &lt;&lt; '\n';
  return 0;
}
</code></pre>

<p>Output:</p>

<pre>
23
Key: hello Value: 23
</pre>

<p>If you need ordering in your container and are fine with the O(log n) runtime then just use <code>std::map</code>.</p>

<p>Otherwise, if you really need a hash-table (O(1) insert/access), check out <code>std::unordered_map</code>, which has a similar to <code>std::map</code> API (e.g. in the above example you just have to search and replace <code>map</code> with <code>unordered_map</code>).</p>

<p>The <code>unordered_map</code> container was introduced with the <a href=""http://en.wikipedia.org/wiki/C++11"" rel=""noreferrer"">C++11 standard</a> revision. Thus, depending on your compiler, you have to enable C++11 features (e.g. when using GCC 4.8 you have to add <code>-std=c++11</code> to the CXXFLAGS).</p>

<p>Even before the C++11 release GCC supported <code>unordered_map</code> - in the namespace <code>std::tr1</code>. Thus, for old GCC compilers you can try to use it like this:</p>

<pre><code>#include &lt;tr1/unordered_map&gt;

std::tr1::unordered_map&lt;std::string, int&gt; m;
</code></pre>

<p>It is also part of boost, i.e. you can use the corresponding <a href=""http://www.boost.org/doc/libs/1_55_0/doc/html/boost/unordered_map.html"" rel=""noreferrer"">boost-header</a> for better portability.</p>
","3578247"
"Cycles in family tree software","187983","","<p>I am the developer of some family tree software (written in C++ and Qt). I had no problems until one of my customers mailed me a bug report. The problem is that the customer has two children with their own daughter, and, as a result, he can't use my software because of errors.</p>

<p>Those errors are the result of my various assertions and invariants about the family graph being processed (for example, after walking a cycle, the program states that X can't be both father and grandfather of Y).</p>

<p>How can I resolve those errors without removing all data assertions?</p>
","<p>It seems you (and/or your company) have a fundamental misunderstanding of what a family tree is supposed to be. </p>

<p>Let me clarify, I also work for a company that has (as one of its products) a family tree in its portfolio, and we have been struggling with similar problems.</p>

<p>The problem, in our case, and I assume your case as well, comes from the <a href=""http://en.wikipedia.org/wiki/GEDCOM"" rel=""noreferrer"">GEDCOM</a> format that is extremely opinionated about what a family should be. However this format contains some severe misconceptions about what a family tree really looks like.</p>

<p>GEDCOM has many issues, such as incompatibility with same sex relations, incest, etc... Which in real life happens more often than you'd imagine (especially when going back in time to the 1700-1800).</p>

<p>We have modeled our family tree to what happens in the real world: Events (for example, births, weddings, engagement, unions, deaths, adoptions, etc.). We do not put any restrictions on these, except for logically impossible ones (for example, one can't be one's own parent, relations need two individuals, etc...)</p>

<p>The lack of validations gives us a more ""real world"", simpler and more flexible solution.</p>

<p>As for this specific case, I would suggest removing the assertions as they do not hold universally.</p>

<p>For displaying issues (that will arise) I would suggest drawing the same node as many times as needed, hinting at the duplication by lighting up all the copies on selecting one of them.</p>
","6198257"
"Good C++ GUI library for Windows","187601","","<p>I'm looking for a good windows GUI library for C++. The ideal characteristics in my opinion should be:</p>

<ul>
<li><b>Modern</b>. MFC, wxWidgets, Qt were started a long time ago and they don't use modern C++ features and standard library.</li> 
<li><b>Have a rich set of controls with decent features.</b> The ability to drop HTML almost everywhere is a happiness for which I love wxWidgets when I don't hate it.</li>
<li><b>Open source</b>. It's the must. If sources are available after purchase then it's considered ok.</li>
<li><b>Have a form designer in some way</b>. Yeah, it would be great. After years of working with Delphi, I cry every time I have to specify control sizes by hand.</li>
<li><b>Free for commercial use</b>. But if some library is REALLY good, then I will consider buying it.</li>
<li><b>Cross platform</b>. This specification is just a tie-breaker &#9786;. I can live without this.</li>
</ul>

<p>Please suggest your ideas for candidates. One library per answer please.</p>
","<p>I think you're writing Qt off too quickly; it doesn't use the standard library much, but that has less to do with being obsolete than with having different priorities. The QT containers use iterators, template algorithms, etc, but have a different iterator model; Qt iterators point between elements instead of at them. This makes forward and reverse traversal symmetric, and cleans up some edge cases for inserting and removing elements while traversing, though it's a little less efficient. And they do provide STL-style iterators too. It's a valid choice for a GUI library IMO; performance of the containers is unlikely to be the critical factor.</p>

<p>As for the preprocessor (moc), think of it more as an IDL compiler that knows how to read C++ headers instead of needing its own language. It doesn't preprocess <em>your</em> code, which is compiled directly. It just generates an additional cpp file containing the marshaling for signal/slot callbacks, which can get rather messy when they cross thread boundaries and need synchronization.</p>

<p>Qt is free if you can release your sources (even for commercial use; how many in-house tools really <strong>need</strong> to be proprietary), and not unreasonably priced if you can't (no per-unit royalties or anything particularly annoying)</p>
","115089"
"C++ Fatal Error LNK1120: 1 unresolved externals","186311","","<p>What is causing this error? I google'd it and first few solutions I found were that something was wrong with the library and the main function but both seem to be fine in my problem, I even retyped both! What could be causing this?</p>

<p>This might be helpful:</p>

<p>MSVCRTD.lib(crtexew.obj) : error LNK2019: unresolved external symbol <em>WinMain@16 referenced in function _</em>_tmainCRTStartup</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;
int main()
{
    const double A = 15.0, 
                 B = 12.0, 
                 C = 9.0;
    double aTotal, bTotal, cTotal, total;
    int numSold;

    cout &lt;&lt; ""Enter The Number of Class A Tickets Sold: "";
    cin &gt;&gt; numSold;
    aTotal = numSold * A;

    cout &lt;&lt; ""Enter The Number of Class B Tickets Sold: "";
    cin &gt;&gt; numSold;
    bTotal = numSold * B;

    cout &lt;&lt; ""Enter The Number of Class C Tickets Sold: "";
    cin &gt;&gt; numSold;
    cTotal = numSold * C;

    total = aTotal + bTotal + cTotal;

    cout &lt;&lt; ""Income Generated"" &lt;&lt; endl;
    cout &lt;&lt; ""From Class A Seats $"" &lt;&lt; aTotal &lt;&lt; endl;
    cout &lt;&lt; ""From Class B Seats $"" &lt;&lt; bTotal &lt;&lt; endl;
    cout &lt;&lt; ""From Class C Seats $"" &lt;&lt; cTotal &lt;&lt; endl;
    cout &lt;&lt; ""-----------------------"" &lt;&lt; endl;
    cout &lt;&lt; ""Total Income: "" &lt;&lt; total &lt;&lt; endl;

    return 0;
}
</code></pre>
","<p>From  <a href=""http://social.msdn.microsoft.com/Forums/en-US/Vsexpressvc/thread/b83e4884-9dec-4d67-ab92-90d5b6c8c51c/"">msdn</a></p>

<blockquote>
  <p>When you created the project, you made the wrong choice of application
  type. When asked whether your project was a console application or a
  windows application or a DLL or a static library, you made the wrong
  chose windows application (wrong choice).</p>
  
  <p>Go back, start over again, go to File -> New -> Project -> Win32
  Console Application -> name your app -> click next -> click
  application settings.</p>
  
  <p>For the application type, make sure Console Application is selected
  (this step is the vital step).</p>
  
  <p>The main for a windows application is called WinMain, for a DLL is
  called DllMain, for a .NET application is called
  Main(cli::array ^), and a static library doesn't have a
  main. Only in a console app is main called main</p>
</blockquote>
","7410844"
"How to determine if a string is a number with C++?","186179","","<p>I've had quite a bit of trouble trying to write a function that checks if a string is a number.  For a game I am writing I just need to check if a line from the file I am reading is a number or not (I will know if it is a parameter this way).  I wrote the below function which I believe was working smoothly (or I accidentally edited to stop it or I'm schizophrenic or Windows is schizophrenic):</p>

<pre><code>bool isParam(string line){
    if(isdigit(atoi(line.c_str()))) return true;
    return false;
}        
</code></pre>
","<p>The most efficient way would be just to iterate over the string until you find a non-digit character.  If there are any non-digit characters, you can consider the string not a number.</p>

<pre><code>bool is_number(const std::string&amp; s)
{
    std::string::const_iterator it = s.begin();
    while (it != s.end() &amp;&amp; std::isdigit(*it)) ++it;
    return !s.empty() &amp;&amp; it == s.end();
}
</code></pre>

<p>Or if you want to do it the C++11 way:</p>

<pre><code>bool is_number(const std::string&amp; s)
{
    return !s.empty() &amp;&amp; std::find_if(s.begin(), 
        s.end(), [](char c) { return !std::isdigit(c); }) == s.end();
}
</code></pre>

<p>As pointed out in the comments below, this only works for positive integers.  If you need to detect negative integers or fractions, you should go with a more robust library-based solution.  Although, adding support for negative integers is pretty trivial.</p>
","4654718"
"How to properly add include directories with CMake?","185569","","<p>About a year ago I asked about <a href=""https://stackoverflow.com/questions/7461000/handling-header-files-dependencies-with-cmake"">header dependencies in CMake</a>.</p>

<p>I realized recently that the issue seemed to be that CMake considered those header files to be <em>external</em> to the project. At least, when generating a Code::Blocks project the header files do not appear within the project (the source files do). It therefore seems to me that CMake consider those headers to be <em>external</em> to the project, and does not track them in the depends.</p>

<p>A quick search in the CMake tutorial only pointed to <code>include_directories</code> which does not seem to do what I wish...</p>

<blockquote>
  <p>What is the proper way to signal to CMake that a particular directory contain headers to be included, and that those headers should be tracked by the Makefile generated ?</p>
</blockquote>
","<p>Two things must be done.</p>

<p>First add the directory to be included:</p>

<pre><code>include_directories(${YOUR_DIRECTORY})
</code></pre>

<p>Then you also must add the header files to the list of your source files for the current target, for instance:</p>

<pre><code>set(SOURCES file.cpp file2.cpp ${YOUR_DIRECTORY}/file1.h ${YOUR_DIRECTORY}/file2.h)
add_executable(test ${SOURCES})
</code></pre>

<p>This way, the header files will appear as dependencies in the Makefile, and also for example in the generated visual studio project, if you generate one.</p>

<p><strong>Edit:</strong> How to use those header files for several targets</p>

<pre><code>set(HEADER_FILES ${YOUR_DIRECTORY}/file1.h ${YOUR_DIRECTORY}/file2.h)

add_library(mylib libsrc.cpp ${HEADER_FILES})
add_executable(myexec execfile.cpp ${HEADER_FILES})
</code></pre>
","13703725"
"Comparison of c++ unit test frameworks","185385","","<p>I know there are already a few questions regarding recomendations for c++ unit test frameworks, but all the answers did not help as they just recomend one of the frameworks but do not provide any information about a (feature) comparison.</p>

<p>I think the most interesting frameworks are CppUnit, Boost and the new Google testing framework. Has anybody done any comparison yet?</p>
","<p><a href=""https://stackoverflow.com/questions/91683/how-do-you-implement-unit-testing-in-large-scale-c-projects"">See this question</a> for some discussion.</p>

<p>They recommend the articles: 
<a href=""http://gamesfromwithin.com/?p=29"" rel=""noreferrer"">Exploring the C++ Unit Testing Framework Jungle</a>, By Noel Llopis. 
And the more recent: <a href=""http://accu.org/index.php/journals/1326"" rel=""noreferrer"">C++ Test Unit Frameworks</a></p>

<p>I have not found an article that compares googletest to the other frameworks yet.</p>
","242942"
"How to use range-based for() loop with std::map?","184861","","<p>The common example for C++11 range-based for() loops is always something simple like this:</p>

<pre><code>std::vector&lt;int&gt; numbers = { 1, 2, 3, 4, 5, 6, 7 };
for ( auto xyz : numbers )
{
     std::cout &lt;&lt; xyz &lt;&lt; std::endl;
}
</code></pre>

<p>In which case <code>xyz</code> is an <code>int</code>.  But, what happens when we have something like a map?  What is the type of the variable in this example:</p>

<pre><code>std::map&lt; foo, bar &gt; testing = { /*...blah...*/ };
for ( auto abc : testing )
{
    std::cout &lt;&lt; abc &lt;&lt; std::endl;         // ? should this give a foo? a bar?
    std::cout &lt;&lt; abc-&gt;first &lt;&lt; std::endl;  // ? or is abc an iterator?
}
</code></pre>

<p>When the container being traversed is something simple, it looks like range-based for() loops will give us each item, not an iterator.  Which is nice...if it was iterator, first thing we'd always have to do is to dereference it anyway.</p>

<p>But I'm confused as to what to expect when it comes to things like maps and multimaps.</p>

<p>(I'm still on g++ 4.4, while range-based loops are in g++ 4.6+, so I haven't had the chance to try it yet.)</p>
","<p>Each element of the container is a <code>map&lt;K, V&gt;::value_type</code>, which is a <code>typedef</code> for <code>std::pair&lt;const K, V&gt;</code>.  Consequently, you'd write this as</p>

<pre><code>for (auto&amp; kv : myMap) {
    std::cout &lt;&lt; kv.first &lt;&lt; "" has value "" &lt;&lt; kv.second &lt;&lt; std::endl;
}
</code></pre>

<p>For efficiency, it is a good idea to make the parameter in the loop a reference.  You could also consider making it <code>const</code> if you want a read-only view of the values.</p>
","6963910"
"Logical XOR operator in C++?","184639","","<p>Is there such a thing? It is the first time I encountered a practical need for it, but I don't see one listed <a href=""https://en.wikipedia.org/wiki/The_C%2B%2B_Programming_Language"" rel=""noreferrer"">in Stroustrup</a>. I intend to write:</p>

<pre><code>// Detect when exactly one of A,B is equal to five.
return (A==5) ^^ (B==5);
</code></pre>

<p>But there is no <code>^^</code> operator. Can I use the bitwise <code>^</code> here and get the right answer (regardless of machine representation of true and false)? I never mix <code>&amp;</code> and <code>&amp;&amp;</code>, or <code>|</code> and <code>||</code>, so I hesitate to do that with <code>^</code> and <code>^^</code>. </p>

<p>I'd be more comfortable writing my own <code>bool XOR(bool,bool)</code> function instead.</p>
","<p>The <code>!=</code> operator serves this purpose for <code>bool</code> values.</p>
","1596681"
"How do you add a timed delay to a C++ program?","184416","","<p>I am trying to add a timed delay in a C++ program, and was wondering if anyone has any suggestions on what I can try or information I can look at?</p>

<p>I wish I had more details on how I am implementing this timed delay, but until I have more information on how to add a timed delay I am not sure on how I should even attempt to implement this.</p>
","<p>Win32: <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms686298(v=vs.85).aspx"" rel=""noreferrer""><code>Sleep(milliseconds)</code></a> is what you what</p>

<p>unix: <a href=""http://linux.die.net/man/3/usleep"" rel=""noreferrer""><code>usleep(microseconds)</code></a> is what you want.</p>

<p>sleep() only takes a number of seconds which is often too long.</p>
","158614"
"Launch Failed. Binary not found. CDT on Eclipse Helios","184329","","<p>I'm using Eclipse Helios on Ubuntu 10.04, and I'm trying to install CDT plugin on it. I download it from here <a href=""http://www.eclipse.org/downloads/download.php?file=/tools/cdt/releases/helios/dist/cdt-master-7.0.1.zip"" rel=""noreferrer"">here</a>. </p>

<p>And then I go to <strong>Install New Software</strong> and select the zip file (<em>I don't extract it, just select the zip file</em>). And its ok, it installs, everything works fine, it shows optional features, <em>blah blah blah</em>.</p>

<p>And then I create a new HelloWorld project. And when I try to run it, it shows an error and says:</p>

<p>Launch failed. Binary not found.</p>

<p>Can anyone explain me how to fix it?</p>

<p>Thanks.</p>
","<p>You must build an executable file before you can run it. So if you don't “BUILD” your file, then it will not be able to link and load that object file, and hence it does not have the required binary numbers to execute.</p>

<p>So basically right click on the <code>Project -&gt; Build Project -&gt; Run As Local C/C++ Application</code> should do the trick</p>
","8765552"
"When can I use a forward declaration?","184269","","<p>I am looking for the definition of when I am allowed to do forward declaration of a class in another class's header file:</p>

<p>Am I allowed to do it for a base class, for a class held as a member, for a class passed to member function by reference, etc. ?</p>
","<p>Put yourself in the compiler's position: when you forward declare a type, all the compiler knows is that this type exists; it knows nothing about its size, members, or methods. This is why it's called an <em>incomplete type</em>. Therefore, you cannot use the type to declare a member, or a base class, since the compiler would need to know the layout of the type.</p>

<p>Assuming the following forward declaration.</p>

<pre><code>class X;
</code></pre>

<p>Here's what you can and cannot do.</p>

<p><strong>What you can do with an incomplete type:</strong></p>

<ul>
<li><p>Declare a member to be a pointer or a reference to the incomplete type:</p>

<pre><code>class Foo {
    X *pt;
    X &amp;pt;
};
</code></pre></li>
<li><p><em>Declare</em> functions or methods which accept/return incomplete types:</p>

<pre><code>void f1(X);
X    f2();
</code></pre></li>
<li><p><em>Define</em> functions or methods which accept/return pointers/references to the incomplete type (but without using its members):</p>

<pre><code>void f3(X*, X&amp;) {}
X&amp;   f4()       {}
X*   f5()       {}
</code></pre></li>
</ul>

<p><strong>What you cannot do with an incomplete type:</strong></p>

<ul>
<li><p>Use it as a base class</p>

<pre><code>class Foo : X {} // compiler error!
</code></pre></li>
<li><p>Use it to declare a member:</p>

<pre><code>class Foo {
    X m; // compiler error!
};
</code></pre></li>
<li><p><em>Define</em> functions or methods using this type</p>

<pre><code>void f1(X x) {} // compiler error!
X    f2()    {} // compiler error!
</code></pre></li>
<li><p>Use its methods or fields, in fact trying to dereference a variable with incomplete type</p>

<pre><code>class Foo {
    X *m;            
    void method()            
    {
        m-&gt;someMethod();      // compiler error!
        int i = m-&gt;someField; // compiler error!
    }
};
</code></pre></li>
</ul>

<hr>

<p>When it comes to templates, there is no absolute rule: whether you can use an incomplete type as a template parameter is dependent on the way the type is used in the template.</p>

<p>For instance, <code>std::vector&lt;T&gt;</code> requires its parameter to be a complete type, while <code>boost::container::vector&lt;T&gt;</code> does not. Sometimes, a complete type is required only if you use certain member functions; <a href=""https://stackoverflow.com/questions/6012157/is-stdunique-ptrt-required-to-know-the-full-definition-of-t"">this is the case for <code>std::unique_ptr&lt;T&gt;</code></a>, for example.</p>

<p>A well-documented template should indicate in its documentation all the requirements of its parameters, including whether they need to be complete types or not.</p>
","553869"
"Is it possible to print a variable's type in standard C++?","184128","","<p>For example:</p>

<pre><code>int a = 12;
cout &lt;&lt; typeof(a) &lt;&lt; endl;
</code></pre>

<p>Expected output:</p>

<pre><code>int
</code></pre>
","<p>C++11 update to a very old question: Print variable type in C++.</p>

<p>The accepted (and good) answer is to use <code>typeid(a).name()</code>, where <code>a</code> is a variable name.</p>

<p>Now in C++11 we have <code>decltype(x)</code>, which can turn an expression into a type.  And <code>decltype()</code> comes with its own set of very interesting rules.  For example <code>decltype(a)</code> and <code>decltype((a))</code> will generally be different types (and for good and understandable reasons once those reasons are exposed).</p>

<p>Will our trusty <code>typeid(a).name()</code> help us explore this brave new world?</p>

<p>No.</p>

<p>But the tool that will is not that complicated.  And it is that tool which I am using as an answer to this question.  I will compare and contrast this new tool to <code>typeid(a).name()</code>.  And this new tool is actually built on top of <code>typeid(a).name()</code>.</p>

<p><strong>The fundamental issue:</strong></p>

<pre><code>typeid(a).name()
</code></pre>

<p>throws away cv-qualifiers, references, and lvalue/rvalue-ness.  For example:</p>

<pre><code>const int ci = 0;
std::cout &lt;&lt; typeid(ci).name() &lt;&lt; '\n';
</code></pre>

<p>For me outputs:</p>

<pre><code>i
</code></pre>

<p>and I'm guessing on MSVC outputs:</p>

<pre><code>int
</code></pre>

<p>I.e. the <code>const</code> is gone.  This is not a QOI (Quality Of Implementation) issue.  The standard mandates this behavior.</p>

<p>What I'm recommending below is:</p>

<pre><code>template &lt;typename T&gt; std::string type_name();
</code></pre>

<p>which would be used like this:</p>

<pre><code>const int ci = 0;
std::cout &lt;&lt; type_name&lt;decltype(ci)&gt;() &lt;&lt; '\n';
</code></pre>

<p>and for me outputs:</p>

<pre><code>int const
</code></pre>

<p><code>&lt;disclaimer&gt;</code> I have not tested this on MSVC. <code>&lt;/disclaimer&gt;</code>  But I welcome feedback from those who do.</p>

<p><strong>The C++11 Solution</strong></p>

<p>I am using <code>__cxa_demangle</code> for non-MSVC platforms as recommend by <a href=""https://stackoverflow.com/users/487362/ipapadop"">ipapadop</a> in his answer to demangle types.  But on MSVC I'm trusting <code>typeid</code> to demangle names (untested).  And this core is wrapped around some simple testing that detects, restores and reports cv-qualifiers and references to the input type.</p>

<pre><code>#include &lt;type_traits&gt;
#include &lt;typeinfo&gt;
#ifndef _MSC_VER
#   include &lt;cxxabi.h&gt;
#endif
#include &lt;memory&gt;
#include &lt;string&gt;
#include &lt;cstdlib&gt;

template &lt;class T&gt;
std::string
type_name()
{
    typedef typename std::remove_reference&lt;T&gt;::type TR;
    std::unique_ptr&lt;char, void(*)(void*)&gt; own
           (
#ifndef _MSC_VER
                abi::__cxa_demangle(typeid(TR).name(), nullptr,
                                           nullptr, nullptr),
#else
                nullptr,
#endif
                std::free
           );
    std::string r = own != nullptr ? own.get() : typeid(TR).name();
    if (std::is_const&lt;TR&gt;::value)
        r += "" const"";
    if (std::is_volatile&lt;TR&gt;::value)
        r += "" volatile"";
    if (std::is_lvalue_reference&lt;T&gt;::value)
        r += ""&amp;"";
    else if (std::is_rvalue_reference&lt;T&gt;::value)
        r += ""&amp;&amp;"";
    return r;
}
</code></pre>

<p><strong>The Results</strong></p>

<p>With this solution I can do this:</p>

<pre><code>int&amp; foo_lref();
int&amp;&amp; foo_rref();
int foo_value();

int
main()
{
    int i = 0;
    const int ci = 0;
    std::cout &lt;&lt; ""decltype(i) is "" &lt;&lt; type_name&lt;decltype(i)&gt;() &lt;&lt; '\n';
    std::cout &lt;&lt; ""decltype((i)) is "" &lt;&lt; type_name&lt;decltype((i))&gt;() &lt;&lt; '\n';
    std::cout &lt;&lt; ""decltype(ci) is "" &lt;&lt; type_name&lt;decltype(ci)&gt;() &lt;&lt; '\n';
    std::cout &lt;&lt; ""decltype((ci)) is "" &lt;&lt; type_name&lt;decltype((ci))&gt;() &lt;&lt; '\n';
    std::cout &lt;&lt; ""decltype(static_cast&lt;int&amp;&gt;(i)) is "" &lt;&lt; type_name&lt;decltype(static_cast&lt;int&amp;&gt;(i))&gt;() &lt;&lt; '\n';
    std::cout &lt;&lt; ""decltype(static_cast&lt;int&amp;&amp;&gt;(i)) is "" &lt;&lt; type_name&lt;decltype(static_cast&lt;int&amp;&amp;&gt;(i))&gt;() &lt;&lt; '\n';
    std::cout &lt;&lt; ""decltype(static_cast&lt;int&gt;(i)) is "" &lt;&lt; type_name&lt;decltype(static_cast&lt;int&gt;(i))&gt;() &lt;&lt; '\n';
    std::cout &lt;&lt; ""decltype(foo_lref()) is "" &lt;&lt; type_name&lt;decltype(foo_lref())&gt;() &lt;&lt; '\n';
    std::cout &lt;&lt; ""decltype(foo_rref()) is "" &lt;&lt; type_name&lt;decltype(foo_rref())&gt;() &lt;&lt; '\n';
    std::cout &lt;&lt; ""decltype(foo_value()) is "" &lt;&lt; type_name&lt;decltype(foo_value())&gt;() &lt;&lt; '\n';
}
</code></pre>

<p>and the output is:</p>

<pre><code>decltype(i) is int
decltype((i)) is int&amp;
decltype(ci) is int const
decltype((ci)) is int const&amp;
decltype(static_cast&lt;int&amp;&gt;(i)) is int&amp;
decltype(static_cast&lt;int&amp;&amp;&gt;(i)) is int&amp;&amp;
decltype(static_cast&lt;int&gt;(i)) is int
decltype(foo_lref()) is int&amp;
decltype(foo_rref()) is int&amp;&amp;
decltype(foo_value()) is int
</code></pre>

<p>Note (for example) the difference between <code>decltype(i)</code> and <code>decltype((i))</code>.  The former is the type of the <em>declaration</em> of <code>i</code>.  The latter is the ""type"" of the <em>expression</em> <code>i</code>. (expressions never have reference type, but as a convention <code>decltype</code> represents lvalue expressions with lvalue references).</p>

<p>Thus this tool is an excellent vehicle just to learn about <code>decltype</code>, in addition to exploring and debugging your own code.</p>

<p>In contrast, if I were to build this just on <code>typeid(a).name()</code>, without adding back lost cv-qualifiers or references, the output would be:</p>

<pre><code>decltype(i) is int
decltype((i)) is int
decltype(ci) is int
decltype((ci)) is int
decltype(static_cast&lt;int&amp;&gt;(i)) is int
decltype(static_cast&lt;int&amp;&amp;&gt;(i)) is int
decltype(static_cast&lt;int&gt;(i)) is int
decltype(foo_lref()) is int
decltype(foo_rref()) is int
decltype(foo_value()) is int
</code></pre>

<p>I.e. Every reference and cv-qualifier is stripped off.</p>

<p><strong>C++14 Update</strong></p>

<p>Just when you think you've got a solution to a problem nailed, someone always comes out of nowhere and shows you a much better way. :-)</p>

<p><a href=""https://stackoverflow.com/a/35943472/576911"">This answer</a> from <a href=""https://stackoverflow.com/users/2969631/jamboree"">Jamboree</a> shows how to get the type name in C++14 at compile time.  It is a brilliant solution for a couple reasons:</p>

<ol>
<li>It's at compile time!</li>
<li>You get the compiler itself to do the job instead of a library (even a std::lib).  This means more accurate results for the latest language features (like lambdas).</li>
</ol>

<p><a href=""https://stackoverflow.com/users/2969631/jamboree"">Jamboree's</a> <a href=""https://stackoverflow.com/a/35943472/576911"">answer</a> doesn't quite lay everything out for VS, and I'm tweaking his code a little bit.  But since this answer gets a lot of views, take some time to go over there and upvote his answer, without which, this update would never have happened.</p>

<pre><code>#include &lt;cstddef&gt;
#include &lt;stdexcept&gt;
#include &lt;cstring&gt;
#include &lt;ostream&gt;

#ifndef _MSC_VER
#  if __cplusplus &lt; 201103
#    define CONSTEXPR11_TN
#    define CONSTEXPR14_TN
#    define NOEXCEPT_TN
#  elif __cplusplus &lt; 201402
#    define CONSTEXPR11_TN constexpr
#    define CONSTEXPR14_TN
#    define NOEXCEPT_TN noexcept
#  else
#    define CONSTEXPR11_TN constexpr
#    define CONSTEXPR14_TN constexpr
#    define NOEXCEPT_TN noexcept
#  endif
#else  // _MSC_VER
#  if _MSC_VER &lt; 1900
#    define CONSTEXPR11_TN
#    define CONSTEXPR14_TN
#    define NOEXCEPT_TN
#  elif _MSC_VER &lt; 2000
#    define CONSTEXPR11_TN constexpr
#    define CONSTEXPR14_TN
#    define NOEXCEPT_TN noexcept
#  else
#    define CONSTEXPR11_TN constexpr
#    define CONSTEXPR14_TN constexpr
#    define NOEXCEPT_TN noexcept
#  endif
#endif  // _MSC_VER

class static_string
{
    const char* const p_;
    const std::size_t sz_;

public:
    typedef const char* const_iterator;

    template &lt;std::size_t N&gt;
    CONSTEXPR11_TN static_string(const char(&amp;a)[N]) NOEXCEPT_TN
        : p_(a)
        , sz_(N-1)
        {}

    CONSTEXPR11_TN static_string(const char* p, std::size_t N) NOEXCEPT_TN
        : p_(p)
        , sz_(N)
        {}

    CONSTEXPR11_TN const char* data() const NOEXCEPT_TN {return p_;}
    CONSTEXPR11_TN std::size_t size() const NOEXCEPT_TN {return sz_;}

    CONSTEXPR11_TN const_iterator begin() const NOEXCEPT_TN {return p_;}
    CONSTEXPR11_TN const_iterator end()   const NOEXCEPT_TN {return p_ + sz_;}

    CONSTEXPR11_TN char operator[](std::size_t n) const
    {
        return n &lt; sz_ ? p_[n] : throw std::out_of_range(""static_string"");
    }
};

inline
std::ostream&amp;
operator&lt;&lt;(std::ostream&amp; os, static_string const&amp; s)
{
    return os.write(s.data(), s.size());
}

template &lt;class T&gt;
CONSTEXPR14_TN
static_string
type_name()
{
#ifdef __clang__
    static_string p = __PRETTY_FUNCTION__;
    return static_string(p.data() + 31, p.size() - 31 - 1);
#elif defined(__GNUC__)
    static_string p = __PRETTY_FUNCTION__;
#  if __cplusplus &lt; 201402
    return static_string(p.data() + 36, p.size() - 36 - 1);
#  else
    return static_string(p.data() + 46, p.size() - 46 - 1);
#  endif
#elif defined(_MSC_VER)
    static_string p = __FUNCSIG__;
    return static_string(p.data() + 38, p.size() - 38 - 7);
#endif
}
</code></pre>

<p>This code will auto-backoff on the <code>constexpr</code> if you're still stuck in ancient C++11.  And if you're painting on the cave wall with C++98/03, the <code>noexcept</code> is sacrificed as well.</p>

<p><strong>C++17 Update</strong></p>

<p>In the comments below <a href=""https://stackoverflow.com/users/3624760/lyberta"">Lyberta</a> points out that the new <code>std::string_view</code> can replace <code>static_string</code>:</p>

<pre><code>template &lt;class T&gt;
constexpr
std::string_view
type_name()
{
    using namespace std;
#ifdef __clang__
    string_view p = __PRETTY_FUNCTION__;
    return string_view(p.data() + 34, p.size() - 34 - 1);
#elif defined(__GNUC__)
    string_view p = __PRETTY_FUNCTION__;
#  if __cplusplus &lt; 201402
    return string_view(p.data() + 36, p.size() - 36 - 1);
#  else
    return string_view(p.data() + 49, p.find(';', 49) - 49);
#  endif
#elif defined(_MSC_VER)
    string_view p = __FUNCSIG__;
    return string_view(p.data() + 84, p.size() - 84 - 7);
#endif
}
</code></pre>

<p>I've updated the constants for VS thanks to the very nice detective work by Jive Dadson in the comments below.</p>
","20170989"
"Eclipse CDT C++11/C++0x support","183797","","<p>Eclipse 3.7.1
CDT 1.4.1
GCC 4.6.2</p>

<p>This is an example of a piece of C++11 code:</p>

<pre><code>auto text = std::unique_ptr&lt;char[]&gt;(new char[len]);
</code></pre>

<p>The Eclipse editor complains about:</p>

<pre><code>Function 'unique_ptr' could not be resolved
</code></pre>

<p>The Makefile compilation works fine. How to make Eclipse stop complaining about these sort of errors?</p>
","<p>I found <a href=""http://www.eclipse.org/forums/index.php/mv/msg/282618/787571/"" rel=""noreferrer"">this</a> article in the Eclipse forum, just followed those steps and it works for me. I am using Eclipse Indigo 20110615-0604 on Windows with a Cygwin setup.</p>

<ul>
<li>Make a new C++ project </li>
<li>Default options for everything</li>
<li>Once created, right-click the project and go to ""Properties""</li>
<li>C/C++ Build -> Settings -> Tool Settings -> GCC C++ Compiler -> Miscellaneous -> Other Flags. Put <code>-std=c++0x</code> (or for newer compiler version <code>-std=c++11</code> at the end . ... instead of GCC C++ Compiler I have also Cygwin compiler</li>
<li>C/C++ General -> Paths and Symbols -> Symbols -> GNU C++. Click ""Add..."" and paste <code>__GXX_EXPERIMENTAL_CXX0X__</code> (ensure to append and prepend two underscores) into ""Name"" and leave ""Value"" blank.</li>
<li>Hit Apply, do whatever it asks you to do, then hit OK.</li>
</ul>

<p>There is a description of this in the Eclipse FAQ now as well: <a href=""http://wiki.eclipse.org/CDT/User/FAQ#CDT_does_not_recognize_C.2B.2B11_features"" rel=""noreferrer"">Eclipse FAQ/C++11 Features</a>.</p>

<p><a href=""https://i.stack.imgur.com/VuXY7.png"" rel=""noreferrer"">Eclipse image setting</a></p>
","9135135"
"Adding external library into Qt Creator project","183699","","<p>How can I add external library into a project built by Qt Creator RC1 (version 0.9.2)? For example, the win32 function <code>EnumProcesses()</code> requires <code>Psapi.lib</code> to be added in the project to build.</p>
","<p>The proper way to do this is like this:</p>

<pre><code>LIBS += -L/path/to -lpsapi
</code></pre>

<p>This way it will work on all platforms supported by Qt. The idea is that you have to separate the directory from the library name (without the extension and without any 'lib' prefix). Of course, if you are including a Windows specific lib, this really doesn't matter.</p>

<p>In case you want to store your lib files in the project directory, you can reference them with the <code>$$_PRO_FILE_PWD_</code> variable, e.g.:</p>

<pre><code>LIBS += -L""$$_PRO_FILE_PWD_/3rdparty/libs/"" -lpsapi
</code></pre>
","789025"
"Timer function to provide time in nano seconds using C++","182976","","<p>I wish to calculate the time it took for an API to return a value.
The time taken for such an action is in the space of nano seconds. As the API is a C++ class/function, I am using the timer.h to caculate the same:</p>

<pre><code>  #include &lt;ctime&gt;
  #include &lt;cstdio&gt;

  using namespace std;

  int main(int argc, char** argv) {

      clock_t start;
      double diff;
      start = clock();
      diff = ( std::clock() - start ) / (double)CLOCKS_PER_SEC;
      cout&lt;&lt;""printf: ""&lt;&lt; diff &lt;&lt;'\n';

      return 0;
  }
</code></pre>

<p>The above code gives the time in seconds. How do I get the same in nano seconds and with more precision?</p>
","<p>What others have posted about running the function repeatedly in a loop is correct.</p>

<p>For Linux (and BSD) you want to use <A href=""http://opengroup.org/onlinepubs/007908799/xsh/clock_gettime.html"" rel=""nofollow noreferrer"">clock_gettime()</A>.</p>

<pre><code>#include &lt;sys/time.h&gt;

int main()
{
   timespec ts;
   // clock_gettime(CLOCK_MONOTONIC, &amp;ts); // Works on FreeBSD
   clock_gettime(CLOCK_REALTIME, &amp;ts); // Works on Linux
}
</code></pre>

<p>For windows you want to use the <A href=""http://support.microsoft.com/kb/172338"" rel=""nofollow noreferrer"">QueryPerformanceCounter</A>. And here is more on <A href=""http://msdn.microsoft.com/en-us/library/ms979201.aspx"" rel=""nofollow noreferrer"">QPC</A></p>

<p>Apparently there is a known <A href=""http://support.microsoft.com/kb/274323"" rel=""nofollow noreferrer"">issue</A> with QPC on some chipsets, so you may want to make sure you do not have those chipset. Additionally some dual core AMDs may also cause a <A href=""http://forum.beyond3d.com/showthread.php?t=47951"" rel=""nofollow noreferrer"">problem</A>. See the second post by sebbbi, where he states:</p>

<blockquote>
  <p>QueryPerformanceCounter() and
  QueryPerformanceFrequency() offer a
  bit better resolution, but have
  different issues. For example in
  Windows XP, all AMD Athlon X2 dual
  core CPUs return the PC of either of
  the cores ""randomly"" (the PC sometimes
  jumps a bit backwards), unless you
  specially install AMD dual core driver
  package to fix the issue. We haven't
  noticed any other dual+ core CPUs
  having similar issues (p4 dual, p4 ht,
  core2 dual, core2 quad, phenom quad).</p>
</blockquote>

<p><strong>EDIT 2013/07/16:</strong></p>

<p>It looks like there is some controversy on the efficacy of QPC under certain circumstances as stated in <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ee417693(v=vs.85).aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/windows/desktop/ee417693(v=vs.85).aspx</a></p>

<blockquote>
  <p>...While QueryPerformanceCounter and QueryPerformanceFrequency typically adjust for
  multiple processors, bugs in the BIOS or drivers may result in these routines returning
  different values as the thread moves from one processor to another...</p>
</blockquote>

<p>However this StackOverflow answer <a href=""https://stackoverflow.com/a/4588605/34329"">https://stackoverflow.com/a/4588605/34329</a> states that QPC should work fine on any MS OS after Win XP service pack 2.</p>

<p>This article shows that Windows 7 can determine if the processor(s) have an invariant TSC and falls back to an external timer if they don't. <a href=""http://performancebydesign.blogspot.com/2012/03/high-resolution-clocks-and-timers-for.html"" rel=""nofollow noreferrer"">http://performancebydesign.blogspot.com/2012/03/high-resolution-clocks-and-timers-for.html</a> Synchronizing across processors is still an issue.</p>

<p>Other fine reading related to timers:</p>

<ul>
<li><a href=""https://blogs.oracle.com/dholmes/entry/inside_the_hotspot_vm_clocks"" rel=""nofollow noreferrer"">https://blogs.oracle.com/dholmes/entry/inside_the_hotspot_vm_clocks</a></li>
<li><a href=""http://lwn.net/Articles/209101/"" rel=""nofollow noreferrer"">http://lwn.net/Articles/209101/</a></li>
<li><a href=""http://performancebydesign.blogspot.com/2012/03/high-resolution-clocks-and-timers-for.html"" rel=""nofollow noreferrer"">http://performancebydesign.blogspot.com/2012/03/high-resolution-clocks-and-timers-for.html</a></li>
<li><a href=""https://stackoverflow.com/questions/7287663/queryperformancecounter-status"">QueryPerformanceCounter Status?</a></li>
</ul>

<p>See the comments for more details.</p>
","275231"
"How do I remove an item from a stl vector with a certain value?","182885","","<p>I was looking at the API documentation for stl vector, and noticed there was no method on the vector class that allowed the removal of an element with a certain value. This seems like a common operation, and it seems odd that there's no built in way to do this.</p>
","<p>std::remove doesn't actually erase the element from the container, but it does return the new end iterator which can be passed to container_type::erase to do the REAL removal of the extra elements that are now at the end of the container:</p>

<pre><code>std::vector&lt;int&gt; vec;
// .. put in some values ..
int int_to_remove = n;
vec.erase(std::remove(vec.begin(), vec.end(), int_to_remove), vec.end());
</code></pre>
","39944"
"How to print to console when using Qt","182241","","<p>I'm using Qt4 and C++ for making some programs in computer graphics. I need to be able to print some variables in my console at run-time, not debugging, but <code>cout</code> doesn't seem to work even if I add the libraries. Is there a way to do this?</p>
","<p>If it is good enough to print to <code>stderr</code>, you can use the following streams originally intended for debugging:</p>

<pre><code>//qInfo is qt5.5+ only.
qInfo() &lt;&lt; ""C++ Style Info Message"";
qInfo( ""C Style Info Message"" );

qDebug() &lt;&lt; ""C++ Style Debug Message"";
qDebug( ""C Style Debug Message"" );

qWarning() &lt;&lt; ""C++ Style Warning Message"";
qWarning( ""C Style Warning Message"" );

qCritical() &lt;&lt; ""C++ Style Critical Error Message"";
qCritical( ""C Style Critical Error Message"" );

// qFatal does not have a C++ style method.
qFatal( ""C Style Fatal Error Message"" );
</code></pre>

<p>Though as pointed out in the comments, bear in mind qDebug messages are removed if <code>QT_NO_DEBUG_OUTPUT</code> is defined</p>

<p>If you need stdout you could try something like this (as Kyle Strand has pointed out):</p>

<pre><code>QTextStream&amp; qStdOut()
{
    static QTextStream ts( stdout );
    return ts;
}
</code></pre>

<p>You could then call as follows:</p>

<pre><code>qStdOut() &lt;&lt; ""std out!"";
</code></pre>
","3886128"
"How do I check if a C++ <string> starts with a certain string, and convert a substring to an int?","180756","","<p>How do I do the following (Python pseudocode) in C++?</p>

<pre><code>if argv[1].startswith('--foo='):
    foo_value = int(argv[1][len('--foo='):])
</code></pre>

<p>(For example, if argv[1] is '--foo=98', then foo_value is 98.)</p>

<p><strong>Update:</strong> I'm hesitant to look into Boost, since I'm just looking at making a very small change to a simple little command-line tool.  (I'd rather not have to learn how to link in and use Boost for a minor change.)</p>
","<p>If you're using Boost, you can do it with <a href=""http://www.boost.org/doc/libs/1_41_0/doc/html/string_algo.html"" rel=""nofollow noreferrer"">boost string algorithms</a> + <a href=""http://www.boost.org/doc/libs/1_41_0/libs/conversion/lexical_cast.htm"" rel=""nofollow noreferrer"">boost lexical cast:</a></p>

<pre><code>#include &lt;boost/algorithm/string/predicate.hpp&gt;
#include &lt;boost/lexical_cast.hpp&gt;

try {    
    if (boost::starts_with(argv[1], ""--foo=""))
        foo_value = boost::lexical_cast&lt;int&gt;(argv[1]+6);
} catch (boost::bad_lexical_cast) {
    // bad parameter
}
</code></pre>

<p>Like most boost libraries, string algorithm &amp; lexical cast are header-only, there's nothing to link in.</p>

<p>This kind of approach, like many of the other answers provided here is ok for very simple tasks, but in the long run you are usually better off using a command line parsing library. Boost has one (<a href=""http://www.boost.org/doc/libs/1_65_1/doc/html/program_options.html"" rel=""nofollow noreferrer"">Boost.Program_options</a>), which may make sense if you happen to be using Boost already.</p>

<p>Otherwise a search for ""c++ command line parser"" will yield a number of options. Personally, I've really come to really like <a href=""https://github.com/catchorg/Clara"" rel=""nofollow noreferrer"">Clara</a>.</p>
","1878017"
"How to throw a C++ exception","180474","","<p>I have a very poor understanding of exception handling(i.e., how to customize throw, try, catch statements for my own purposes).</p>

<p>For example, I have defined a function as follows: <code>int compare(int a, int b){...}</code></p>

<p>I'd like the function to throw an exception with some message when either a or b is negative.</p>

<p>How should I approach this in the definition of the function? </p>
","<p>Simple:</p>

<pre><code>#include &lt;stdexcept&gt;

int compare( int a, int b ) {
    if ( a &lt; 0 || b &lt; 0 ) {
        throw std::invalid_argument( ""received negative value"" );
    }
}
</code></pre>

<p>The Standard Library comes with a nice collection of <a href=""http://stdcxx.apache.org/doc/stdlibref/2-3.html"" rel=""noreferrer"">built-in exception objects</a> you can throw.  Keep in mind that you should always throw by value and catch by reference:</p>

<pre><code>try {
    compare( -1, 3 );
}
catch( const std::invalid_argument&amp; e ) {
    // do stuff with exception... 
}
</code></pre>

<p>You can have multiple catch() statements after each try, so you can handle different exception types separately if you want.  </p>

<p>You can also re-throw exceptions:</p>

<pre><code>catch( const std::invalid_argument&amp; e ) {
    // do something

    // let someone higher up the call stack handle it if they want
    throw;
}
</code></pre>

<p>And to catch exceptions regardless of type:</p>

<pre><code>catch( ... ) { };
</code></pre>
","8480675"
"Checking for NULL pointer in C/C++","180257","","<p>In a recent code review, a contributor is trying to enforce that all <code>NULL</code> checks on pointers be performed in the following manner:</p>

<pre><code>int * some_ptr;
// ...
if (some_ptr == NULL)
{
    // Handle null-pointer error
}
else
{
    // Proceed
}
</code></pre>

<p>instead of</p>

<pre><code>int * some_ptr;
// ...
if (some_ptr)
{
    // Proceed
}
else
{
    // Handle null-pointer error
}
</code></pre>

<p>I agree that his way is a little more clear in the sense that it's explicitly saying ""Make sure this pointer is not NULL"", but I would counter that by saying that anyone who's working on this code would understand that using a pointer variable in an <code>if</code> statement is implicitly checking for <code>NULL</code>.  Also I feel the second method has a smaller chance of introducing a bug of the ilk:</p>

<pre><code>if (some_ptr = NULL)
</code></pre>

<p>which is just an absolute pain to find and debug.</p>

<p>Which way do you prefer and why?</p>
","<p>In my experience, tests of the form <code>if (ptr)</code> or <code>if (!ptr)</code> are preferred. They do not depend on the definition of the symbol <code>NULL</code>. They do not expose the opportunity for the accidental assignment. And they are clear and succinct. </p>

<p><strong>Edit:</strong> As SoapBox points out in a comment, they are compatible with C++ classes such as <code>auto_ptr</code> that are objects that act as pointers and which provide a conversion to <code>bool</code> to enable exactly this idiom. For these objects, an explicit comparison to <code>NULL</code> would have to invoke a conversion to pointer which may have other semantic side effects or be more expensive than the simple existence check that the <code>bool</code> conversion implies.</p>

<p>I have a preference for code that says what it means without unneeded text. <code>if (ptr != NULL)</code> has the same meaning as <code>if (ptr)</code> but at the cost of redundant specificity. The next logical thing is to write <code>if ((ptr != NULL) == TRUE)</code> and that way lies madness. The C language is clear that a boolean tested by <code>if</code>, <code>while</code> or the like has a specific meaning of non-zero value is true and zero is false. Redundancy does not make it clearer.</p>
","3825704"
"Static linking vs dynamic linking","180023","","<p>Are there any compelling performance reasons to choose static linking over dynamic linking or vice versa in certain situations? I've heard or read the following, but I don't know enough on the subject to vouch for its veracity.</p>

<p>1) The difference in runtime performance between static linking and dynamic linking is usually negligible.</p>

<p>2) (1) is not true if using a profiling compiler that uses profile data to optimize program hotpaths because with static linking, the compiler can optimize both your code and the library code. With dynamic linking only your code can be optimized. If most of the time is spent running library code, this can make a big difference. Otherwise, (1) still applies.</p>
","<ul>
<li><strong>Dynamic</strong> linking can <strong>reduce total resource consumption</strong> (if more than one process shares the same library (including the version in ""the same"", of course)). I believe this is the argument that drives it its presence in most environments. Here ""resources"" includes disk space, RAM, and cache space. Of course, if your dynamic linker is insufficiently flexible there is a risk of <a href=""http://en.wikipedia.org/wiki/DLL_Hell"" rel=""noreferrer"">DLL hell</a>.</li>
<li><strong>Dynamic</strong> linking means that bug fixes and upgrades to libraries <strong>propagate</strong> to improve <em>your</em> product without requiring you to ship anything.</li>
<li><strong>Plugins</strong> always call for <strong>dynamic</strong> linking.</li>
<li><strong>Static</strong> linking, means that you can know the code will run in very <strong>limited environments</strong> (early in the boot process, or in rescue mode).</li>
<li><strong>Static</strong> linking can make binaries <strong>easier to distribute</strong> to diverse user environments (at the cost of sending a large and more resource hungry program).</li>
<li><strong>Static</strong> linking may allow slightly <strong>faster startup</strong> times, but this depends to some degree on both the size and complexity of your program <em>and</em> on the details of the OSs loading strategy.</li>
</ul>

<hr>

<p>Some edits to include the very relevant suggestions in the comments and in other answers. I'd like to note that the way you break on this depends a lot on what environment you plan to run in. Minimal embedded systems may not have enough resources to support dynamic linking. Slightly larger small systems may well support linking, because their memory is small enough to make the RAM savings from dynamic linking very attractive. Full blown consumer PCs have, as Mark notes, enormous resources, and you can probably let the convenience issues drive you thinking on this matter.</p>

<hr>

<p>To address the performance and efficiency issues: <strong>it depends</strong>.</p>

<p>Classically, dynamic libraries require a some kind of glue layer which often means double dispatch or an extra layer of indirection in function addressing and can cost a little speed (but is function calling time actually a big part of your running time???).</p>

<p>However, if you are running multiple processes which all call the same library a lot, you can end up saving cache lines (and thus winning on running performance) when using dynamic linking relative using static linking. (Unless modern OS's are smart enough to notice identical segments in statically linked binaries. Seems hard, anyone know?)</p>

<p>Another issue: loading time. You pay loading costs at some point. When you pay this cost depends on how the OS works as well as what linking you use. Maybe you'd rather put off paying it until you know you need it.</p>

<p>Note that static-vs--dynamic linking is traditionally <em>not</em> a optimization issue, because they both involve separate compilation down to object files. However, this is not required: a compiler can in principle, ""compile"" ""static libraries"" to a digested AST form initially, and ""link"" them by adding those ASTs to the ones generated for the main code, thus empowering global optimization. None of the systems I use do this, so I can't comment on how well it works.</p>

<p>The way to answer performance questions is <em>always</em> by testing (and use an test environment as much like the deployment environment as possible).</p>
","1993407"
"How to convert a single char into an int","178171","","<p>I have a string of digits, e.g. ""123456789"", and I need to extract each one of them to use them in a calculation. I can of course access each char by index, but how do I convert it into an int?</p>

<p>I've looked into atoi(), but it takes a string as argument. Hence I must convert each char into a string and then call atoi on it. Is there a better way?</p>
","<p>You can utilize the fact that the character encodings for digits are all in order from 48 (for '0') to 57 (for '9'). This holds true for ASCII, UTF-x and practically all other encodings (<em>see comments below for more on this</em>).</p>

<p>Therefore the integer value for any digit is the digit minus '0' (or 48).</p>

<pre><code>char c = '1';
int i = c - '0'; // i is now equal to 1, not '1'
</code></pre>

<p>is synonymous to</p>

<pre><code>char c = '1';
int i = c - 48; // i is now equal to 1, not '1'
</code></pre>

<p>However I find the first <code>c - '0'</code> far more readable.</p>
","439589"
"Separating class code into a header and cpp file","177697","","<p>I am confused on how to separate implementation and declarations code of a simple class into a new header and cpp file. For example, how would I separate the code for the following class?</p>

<pre><code>class A2DD
{
  private:
  int gx;
  int gy;

  public:
  A2DD(int x,int y)
  {
    gx = x;
    gy = y;
  }

  int getSum()
  {
    return gx + gy;
  }
};
</code></pre>
","<p>The class declaration goes into the header file. It is important that you add the <code>#ifndef</code> include guards, or if you are on a MS platform you also can use <code>#pragma once</code>. Also I have omitted the private, by default C++ class members are private.</p>

<pre><code>// A2DD.h
#ifndef A2DD_H
#define A2DD_H

class A2DD
{
  int gx;
  int gy;

public:
  A2DD(int x,int y);
  int getSum();

};

#endif
</code></pre>

<p>and the implementation goes in the CPP file:</p>

<pre><code>// A2DD.cpp
#include ""A2DD.h""

A2DD::A2DD(int x,int y)
{
  gx = x;
  gy = y;
}

int A2DD::getSum()
{
  return gx + gy;
}
</code></pre>
","9579974"
"What range of values can integer types store in C++","177483","","<p>Can <code>unsigned long int</code> hold a ten digits number (1,000,000,000 - 9,999,999,999) on a 32-bit computer?</p>

<p>Additionally, what are the ranges of <code>unsigned long int</code> , <code>long int</code>, <code>unsigned int</code>, <code>short int</code>, <code>short unsigned int</code>, and <code>int</code>?</p>
","<p>The <em>minimum</em> ranges you can rely on are:</p>

<ul>
<li><code>short int</code> and <code>int</code>: -32,767 to 32,767</li>
<li><code>unsigned short int</code> and <code>unsigned int</code>: 0 to 65,535</li>
<li><code>long int</code>: -2,147,483,647 to 2,147,483,647</li>
<li><code>unsigned long int</code>: 0 to 4,294,967,295</li>
</ul>

<p>This means that no, <code>long int</code> <strong>cannot</strong> be relied upon to store any 10 digit number.  However, a larger type <code>long long int</code> was introduced to C in C99 and C++ in C++11 (this type is also often supported as an extension by compilers built for older standards that did not include it).  The minimum range for this type, if your compiler supports it, is:</p>

<ul>
<li><code>long long int</code>: -9,223,372,036,854,775,807 to 9,223,372,036,854,775,807</li>
<li><code>unsigned long long int</code>: 0 to 18,446,744,073,709,551,615</li>
</ul>

<p>So that type will be big enough (again, <em>if</em> you have it available).</p>

<hr>

<p>A note for those who believe I've made a mistake with these lower bounds - I haven't.  The C requirements for the ranges are written to allow for ones' complement or sign-magnitude integer representations, where the lowest representable value and the highest representable value differ only in sign.  It is also allowed to have a two's complement representation where the value with sign bit 1 and all value bits 0 is a <em>trap representation</em> rather than a legal value.  In other words, <code>int</code> is <em>not</em> required to be able to represent the value -32,768.</p>
","1819236"
"How to parse a string to an int in C++?","176220","","<p>What's the C++ way of parsing a string (given as char *) into an int? Robust and clear error handling is a plus (instead of <a href=""http://en.cppreference.com/w/cpp/string/byte/atoi"" rel=""noreferrer"">returning zero</a>).</p>
","<p>In the new C++11 there are functions for that: stoi, stol, stoll, stoul and so on.</p>

<pre><code>int myNr = std::stoi(myString);
</code></pre>

<p>It will throw an exception on conversion error.</p>

<p>Even these new functions still have the <strong>same issue</strong> as noted by Dan: they will happily convert the string ""11x"" to integer ""11"".</p>

<p>See more: <a href=""http://en.cppreference.com/w/cpp/string/basic_string/stol"">http://en.cppreference.com/w/cpp/string/basic_string/stol</a></p>
","11354496"
"Does the 'mutable' keyword have any purpose other than allowing the variable to be modified by a const function?","175976","","<p>A while ago I came across some code that marked a member variable of a class with the <code>mutable</code> keyword.  As far as I can see it simply allows you to modify a variable in a <code>const</code> method:</p>

<pre><code>class Foo  
{  
private:  
    mutable bool done_;  
public:  
    void doSomething() const { ...; done_ = true; }  
};
</code></pre>

<p>Is this the only use of this keyword or is there more to it than meets the eye?  I have since used this technique in a class, marking a <code>boost::mutex</code> as mutable allowing <code>const</code> functions to lock it for thread-safety reasons, but, to be honest, it feels like a bit of a hack.</p>
","<p>It allows the differentiation of bitwise const and logical const.  Logical const is when an object doesn't change in a way that is visible through the public interface, like your locking example.  Another example would be a class that computes a value the first time it is requested, and caches the result. </p>

<p>Since c++11 <code>mutable</code> can be used on a lambda to denote that things captured by value are modifiable (they aren't by default):</p>

<pre><code>int x = 0;
auto f1 = [=]() mutable {x = 42;};  // OK
auto f2 = [=]()         {x = 42;};  // Error: a by-value capture cannot be modified in a non-mutable lambda
</code></pre>
","105061"
"Parsing a comma-delimited std::string","175009","","<p>If I have a std::string containing a comma-separated list of numbers, what's the simplest way to parse out the numbers and put them in an integer array?</p>

<p>I don't want to generalise this out into parsing anything else. Just a simple string of comma separated integer numbers such as ""1,1,1,1,2,1,1,1,0"".</p>
","<pre><code>#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;iostream&gt;

int main()
{
    std::string str = ""1,2,3,4,5,6"";
    std::vector&lt;int&gt; vect;

    std::stringstream ss(str);

    int i;

    while (ss &gt;&gt; i)
    {
        vect.push_back(i);

        if (ss.peek() == ',')
            ss.ignore();
    }

    for (i=0; i&lt; vect.size(); i++)
        std::cout &lt;&lt; vect.at(i)&lt;&lt;std::endl;
}
</code></pre>
","1894955"
"Mutex example / tutorial?","174983","","<p>I'm new to multithreading, and was trying to understand how mutexes work. Did a lot of Googling and <a href=""http://www.yolinux.com/TUTORIALS/LinuxTutorialPosixThreads.html"" rel=""noreferrer"">I found a decent tutorial</a>, but it still left some doubts of how it works because I created my own program in which locking didn't work.</p>

<p>One absolutely non-intuitive syntax of the mutex is <code>pthread_mutex_lock( &amp;mutex1 );</code>, where it looks like the mutex is being locked, when what I really want to lock is some other variable. Does this syntax mean that locking a mutex locks a region of code until the mutex is unlocked? Then how do threads know that the region is locked? [<em>UPDATE: Threads know that the region is locked, by</em> <a href=""http://en.wikipedia.org/wiki/Memory_barrier#Multithreaded_programming_and_memory_visibility"" rel=""noreferrer"">Memory Fencing</a> ]. And isn't such a phenomenon supposed to be called critical section? [<em>UPDATE: Critical section objects are available in Windows only, where the objects are faster than mutexes and are visible only to the thread which implements it. Otherwise, critical section just refers to the area of code protected by a mutex</em>]</p>

<p>In short, could you please help with the simplest possible mutex <strong>example program</strong> and the simplest possible <strong>explanation</strong> on the logic of how it works? I'm sure this will help <strong><em>plenty</em></strong> of other newbies.</p>
","<p><em>Edits to the explanation and code are most welcome (to make it clearer/shorter/simpler/more correct).<br>
Here goes my humble attempt to explain the concept to newbies around the world: (a <a href=""http://nrecursions.blogspot.in/2014/08/mutex-tutorial-and-example.html"" rel=""noreferrer"">colour coded version</a> on my blog too)</em>  </p>

<p>A lot of people run to a lone phone booth (no mobiles) to talk to their loved ones. The first person to catch the door-handle of the booth, is the one who is allowed to use the phone. He has to keep holding on to the handle of the door as long as he uses the phone, otherwise someone else will catch hold of the handle, throw him out and talk to his wife :) There's no queue system as such. When the person finishes his call, comes out of the booth and leaves the door handle, the next person to get hold of the door handle will be allowed to use the phone.  </p>

<p>A <strong>thread</strong> is     : Each person<br>
The <strong>mutex</strong> is    : The door handle<br>
The <strong>lock</strong> is     : The person's hand<br>
The <strong>resource</strong> is : The phone  </p>

<p>Any thread which has to execute some lines of code which should not be modified by other threads at the same time (using the phone to talk to his wife), has to first acquire a lock on a mutex (clutching the door handle of the booth). Only then will a thread be able to run those lines of code (making the phone call).  </p>

<p>Once the thread has executed that code, it should release the lock on the mutex so that another thread can acquire a lock on the mutex (other people being able to access the phone booth).</p>

<p>[<em>The concept of having a mutex is a bit absurd when considering real-world exclusive access, but in the programming world I guess there was no other way to let the other threads 'see' that a thread was already executing some lines of code. There are concepts of recursive mutexes etc, but this example was only meant to show you the basic concept. Hope the example gives you a clear picture of the concept.</em>]  </p>

<p><strong>With C++11 threading:</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;mutex&gt;

std::mutex m;//you can use std::lock_guard if you want to be exception safe
int i = 0;

void makeACallFromPhoneBooth() 
{
    m.lock();//man gets a hold of the phone booth door and locks it. The other men wait outside
      //man happily talks to his wife from now....
      std::cout &lt;&lt; i &lt;&lt; "" Hello Wife"" &lt;&lt; std::endl;
      i++;//no other thread can access variable i until m.unlock() is called
      //...until now, with no interruption from other men
    m.unlock();//man lets go of the door handle and unlocks the door
}

int main() 
{
    //This is the main crowd of people uninterested in making a phone call

    //man1 leaves the crowd to go to the phone booth
    std::thread man1(makeACallFromPhoneBooth);
    //Although man2 appears to start second, there's a good chance he might
    //reach the phone booth before man1
    std::thread man2(makeACallFromPhoneBooth);
    //And hey, man3 also joined the race to the booth
    std::thread man3(makeACallFromPhoneBooth);

    man1.join();//man1 finished his phone call and joins the crowd
    man2.join();//man2 finished his phone call and joins the crowd
    man3.join();//man3 finished his phone call and joins the crowd
    return 0;
}
</code></pre>

<p>Compile and run using <code>g++ -std=c++0x -pthread -o thread thread.cpp;./thread</code></p>

<p><strong>With TBB:</strong>
You'll need <a href=""http://threadingbuildingblocks.org/download.php"" rel=""noreferrer"">TBB</a> to run the below program, but the intent of posting TBB code is that you understand the sequence of locking and unlocking just by looking at the simple code (could've shown scoped locking by not using acquire and release - <a href=""https://stackoverflow.com/questions/4989451/mutex-example-tutorial/5156479#5156479"">which also is exception safe</a> -, but this is clearer).</p>

<pre><code>#include &lt;iostream&gt;
#include ""/tbb/mutex.h""
#include ""/tbb/tbb_thread.h""
using namespace tbb;

typedef mutex myMutex;
static myMutex sm;
int i = 0;

void someFunction() 
{ 
      //Note: Since a scoped lock is used below, you should know that you 
      //can specify a scope for the mutex using curly brackets, instead of 
      //using lock.acquire() and lock.release(). The lock will automatically 
      //get released when program control goes beyond the scope.
      myMutex::scoped_lock lock;//create a lock
      lock.acquire(sm);//Method acquire waits until it can acquire a lock on the mutex
         //***only one thread can access the lines from here...***
         ++i;//incrementing i is safe (only one thread can execute the code in this scope) because the mutex locked above protects all lines of code until the lock release.
         sleep(1);//simply creating a delay to show that no other thread can increment i until release() is executed
         std::cout&lt;&lt;""In someFunction ""&lt;&lt;i&lt;&lt;""\n"";
         //***...to here***
      lock.release();//releases the lock (duh!)      
}

int main()
{
   tbb_thread my_thread1(someFunction);//create a thread which executes 'someFunction'
   tbb_thread my_thread2(someFunction);
   tbb_thread my_thread3(someFunction);

   my_thread1.join();//This command causes the main thread (which is the 'calling-thread' in this case) to wait until thread1 completes its task.
   my_thread2.join();
   my_thread3.join();
}
</code></pre>

<p>Note that <code>tbb_thread.h</code> is deprecated. The replacement is shown <a href=""http://www.threadingbuildingblocks.org/docs/help/reference/appendices/compatibility_features/tbb_thread_cls.htm"" rel=""noreferrer"">here</a>.<br>
Also, instead of explicitly using <code>lock</code> and <code>unlock</code>, you can use brackets <a href=""https://software.intel.com/en-us/node/527509"" rel=""noreferrer"">as shown here</a>, if you are using a scoped lock <a href=""https://stackoverflow.com/questions/15179553/boost-scoped-lock-vs-plain-lock-unlock"">for the advantage it provides</a>.  </p>
","5154174"
"Differentiate between function overloading and function overriding","174608","","<p>Differentiate between function overloading and function overriding in C++?</p>
","<p>You are putting in place an overloading when you change the original types for the arguments in the signature of a method.</p>

<p>You are putting in place an overriding when you change the original definition of a method.</p>
","11912144"
"'uint32_t' identifier not found error","174504","","<p>I'm porting code from Linux C to Visual C++ for windows.</p>

<p>Visual C++ doesn't know <code>#include &lt;stdint.h&gt;</code> so I commented it out.</p>

<p>Later, I found a lot of those <code>'uint32_t': identifier not found</code> errors. How can it be solved?</p>
","<p>This type is defined in the C header <code>&lt;stdint.h&gt;</code> which is part of the C++11 standard but not standard in C++03.  According to <a href=""http://en.wikipedia.org/wiki/Stdint.h"" rel=""nofollow noreferrer"">the Wikipedia page on the header</a>, it hasn't shipped with Visual Studio until VS2010.</p>

<p>In the meantime, you could probably fake up your own version of the header by adding <code>typedef</code>s that map <a href=""http://msdn.microsoft.com/en-us/library/29dh1w7z.aspx"" rel=""nofollow noreferrer"">Microsoft's custom integer types</a> to the types expected by C.  For example:</p>

<pre><code>typedef __int32 int32_t;
typedef unsigned __int32 uint32_t;
/* ... etc. ... */
</code></pre>

<p>Hope this helps!</p>
","5162801"
"Can I call a base class's virtual function if I'm overriding it?","174209","","<p>Say I have classes <code>Foo</code> and <code>Bar</code> set up like this:</p>

<pre><code>class Foo
{
public:
    int x;

    virtual void printStuff()
    {
        std::cout &lt;&lt; x &lt;&lt; std::endl;
    }
};

class Bar : public Foo
{
public:
    int y;

    void printStuff()
    {
        // I would like to call Foo.printStuff() here...
        std::cout &lt;&lt; y &lt;&lt; std::endl;
    }
};
</code></pre>

<p>As annotated in the code, I'd like to be able to call the base class's function that I'm overriding. In Java there's the <code>super.funcname()</code> syntax. Is this possible in C++?</p>
","<p>The C++ syntax is like this:</p>

<pre><code>class Bar : public Foo {
  // ...

  void printStuff() {
    Foo::printStuff(); // calls base class' function
  }
};
</code></pre>
","672376"
"C++ initialize static variables in class?","173908","","<p>I have noticed that some of my functions in a class are actually not accessing the object, so I made them <code>static</code>. Then the compiler told me that all variables they access must also be static – well, quite understandable so far. I have a bunch of string variables such as</p>

<pre><code>string RE_ANY = ""([^\\n]*)"";
string RE_ANY_RELUCTANT = ""([^\\n]*?)"";
</code></pre>

<p>and so on in the class. I have then made them all <code>static const</code> because they never change. However, my program only compiles if I move them out of the class: Otherwise, MSVC++2010 complains ""Only static constant integral variables may be initialized within a class"".</p>

<p>Well that's unfortunate. Is there a workaround? I would like to leave them inside the class they belong to.</p>
","<p>They can't be initialised inside the class, but they can be initialised outside the class, in a source file:</p>

<pre><code>// inside the class
class Thing {
    static string RE_ANY;
    static string RE_ANY_RELUCTANT;
};

// in the source file
string Thing::RE_ANY = ""([^\\n]*)"";
string Thing::RE_ANY_RELUCTANT = ""([^\\n]*?)"";
</code></pre>

<p><strong>Update</strong></p>

<p>I've just noticed the first line of your question - you <em>don't</em> want to make those functions <code>static</code>, you want to make them <code>const</code>. Making them <code>static</code> means that they are no longer associated with an object (so they can't access any non-static members), and making the data static means it will be shared with all objects of this type. This may well not be what you want. Making them <code>const</code> simply means that they can't modify any members, but can still access them.</p>
","5019896"
"How to sum up elements of a C++ vector?","173086","","<p>What are the <em>good</em> ways of finding the sum of all the elements in a <code>std::vector</code>?</p>

<p>Suppose I have a vector <code>std::vector&lt;int&gt; vector</code> with a few elements in it. Now I want to find the sum of all the elements. What are the different ways for the same?</p>
","<p>Actually there are quite a few methods.</p>

<pre><code>int sum_of_elems = 0;
</code></pre>

<h2>C++03</h2>

<ol>
<li><p>Classic for loop:</p>

<pre><code>for(std::vector&lt;int&gt;::iterator it = vector.begin(); it != vector.end(); ++it)
    sum_of_elems += *it;
</code></pre></li>
<li><p>Using a standard algorithm:    </p>

<pre><code>#include &lt;numeric&gt;

sum_of_elems = std::accumulate(vector.begin(), vector.end(), 0);
</code></pre>

<p>flag</p>

<p><em>Be careful with accumulate.</em> The last argument's type is used not just for the initial value, but for the type of the result as well. If you put an int there, it will accumulate ints even if the vector has float. If you are summing floating-point numbers, change <code>0</code> to <code>0.0</code> or <code>0.0f</code> (thanks to nneonneo).</p></li>
</ol>

<h2>C++11 and higher</h2>

<ol start=""3"">
<li><p>Using <code>std::for_each</code>:</p>

<pre><code>std::for_each(vector.begin(), vector.end(), [&amp;] (int n) {
    sum_of_elems += n;
});
</code></pre></li>
<li><p>Using a range-based for loop (thanks to Roger Pate):</p>

<pre><code>for (auto&amp; n : vector)
    sum_of_elems += n;
</code></pre></li>
</ol>
","3221813"
"How do I output coloured text to a Linux terminal?","172871","","<p>How do I print coloured characters to a Linux terminal that supports it?</p>

<p>How do I tell whether the terminal supports colour codes?</p>

<p>I'm using C++ for this program.</p>
","<p>You need to output <a href=""http://en.wikipedia.org/wiki/ANSI_escape_code"" rel=""noreferrer"">ANSI colour codes</a>. Note that not all terminals support this; if colour sequences are not supported, garbage will show up.</p>

<p>Example:</p>

<pre><code> cout &lt;&lt; ""\033[1;31mbold red text\033[0m\n"";
</code></pre>

<p>Here, <code>\033</code> is the ESC character, ASCII 27. It is followed by <code>[</code>, then zero or more numbers separated by <code>;</code>, and finally the letter <code>m</code>. The numbers describe the colour and format to switch to from that point onwards.</p>

<p>The codes for foreground and background colours are:</p>

<pre><code>         foreground background
black        30         40
red          31         41
green        32         42
yellow       33         43
blue         34         44
magenta      35         45
cyan         36         46
white        37         47
</code></pre>

<p>Additionally, you can use these:</p>

<pre><code>reset             0  (everything back to normal)
bold/bright       1  (often a brighter shade of the same colour)
underline         4
inverse           7  (swap foreground and background colours)
bold/bright off  21
underline off    24
inverse off      27
</code></pre>

<p>See the <a href=""http://en.wikipedia.org/wiki/ANSI_escape_code#graphics"" rel=""noreferrer"">table on Wikipedia</a> for other, less widely supported codes.</p>

<hr>

<p>Edit: To determine whether your terminal supports colour sequences, read the value of the <code>TERM</code> environment variable. It should specify the particular terminal type used (e.g. <code>vt100</code>, <code>gnome-terminal</code>, <code>xterm</code>, <code>screen</code>, ...). Then look that up in the <a href=""http://linux.die.net/man/5/terminfo"" rel=""noreferrer"">terminfo database</a>; check the <code>colors</code> capability.</p>
","2616912"
"system(""pause""); - Why is it wrong?","172753","","<p>Here's a question that I don't quite understand:</p>

<p>The command, <code>system(""pause"");</code> is taught to new programmers as a way to pause a program and wait for a keyboard input to continue. However, it seems to be frowned on by many veteran programmers as something that should not be done in varying degrees.</p>

<p>Some people say it is fine to use. Some say it is only to be used when you are locked in your room and no one is watching. Some say that they will personally come to your house and kill you if you use it. </p>

<p>I, myself am a new programmer with no formal programming training. I use it because I was taught to use it. What I don't understand is that if it is not something to be used, then why was I taught to use it? Or, on the flip side, is it really not that bad after all?</p>

<p>What are your thoughts on this subject?</p>
","<p>It's frowned upon because it's a platform-specific hack that has nothing to do with actually learning programming, but instead to get around a feature of the IDE/OS - the console window launched from Visual Studio closes when the program has finished execution, and so the new user doesn't get to see the output of his new program.</p>

<p>Bodging in System(""pause"") runs the Windows command-line ""pause"" program and waits for that to terminate before it continues execution of the program - the console window stays open so you can read the output.</p>

<p>A better idea would be to put a breakpoint at the end and debug it, but that again has problems.</p>
","1107717"
"__FILE__, __LINE__, and __FUNCTION__ usage in C++","172591","","<p>Presuming that your C++ compiler supports them, is there any particular reason <em>not</em> to use <code>__FILE__</code>, <code>__LINE__</code> and <code>__FUNCTION__</code> for logging and debugging purposes?</p>

<p>I'm primarily concerned with giving the user misleading data—for example, reporting the incorrect line number or function as a result of optimization—or taking a performance hit as a result.</p>

<p>Basically, can I trust <code>__FILE__</code>, <code>__LINE__</code> and <code>__FUNCTION__</code> to <em>always</em> do the right thing?</p>
","<p><code>__FUNCTION__</code> is non standard, <code>__func__</code> exists in C99 / C++11. The others (<code>__LINE__</code> and <code>__FILE__</code>) are just fine.</p>

<p>It will always report the right file and line (and function if you choose to use <code>__FUNCTION__</code>/<code>__func__</code>). Optimization is a non-factor since it is a compile time macro expansion; it will <strong>never</strong> effect performance in any way.</p>
","597081"
"How to check that an element is in a std::set?","172258","","<p>How do you check that an element is in a set?</p>

<p>Is there a simpler equivalent of the following code:</p>

<pre><code>myset.find(x) != myset.end()
</code></pre>
","<p>The typical way to check for existence in many STL containers is:</p>

<pre><code>const bool is_in = container.find(element) != container.end();
</code></pre>
","1701083"
"Use of 'const' for function parameters","172242","","<p>How far do you go with <code>const</code>?  Do you just make functions <code>const</code> when necessary or do you go the whole hog and use it everywhere?  For example, imagine a simple mutator that takes a single boolean parameter:</p>

<pre><code>void SetValue(const bool b) { my_val_ = b; }
</code></pre>

<p>Is that <code>const</code> actually useful?  Personally I opt to use it extensively, including parameters, but in this case I wonder if it's worthwhile?</p>

<p>I was also surprised to learn that you can omit <code>const</code> from parameters in a function declaration but can include it in the function definition, e.g.:</p>

<p><strong>.h file</strong></p>

<pre><code>void func(int n, long l);
</code></pre>

<p><strong>.cpp file</strong></p>

<pre><code>void func(const int n, const long l)
</code></pre>

<p>Is there a reason for this? It seems a little unusual to me.</p>
","<p>The reason is that const for the parameter only applies locally within the function, since it is working on a copy of the data. This means the function signature is really the same anyways. It's probably bad style to do this a lot though.</p>

<p>I personally tend to not use const except for reference and pointer parameters. For copied objects it doesn't really matter, although it can be safer as it signals intent within the function. It's really a judgement call. I do tend to use const_iterator though when looping on something and I don't intend on modifying it, so I guess to each his own, as long as const correctness for reference types is rigorously maintained.</p>
","117308"
"Why do we use volatile keyword in C++?","170995","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/72552/c-when-has-the-volatile-keyword-ever-helped-you"">C++: When Has The volatile Keyword Ever Helped You?</a>  </p>
</blockquote>



<p>I have never used it but I wonder why people use it? What does it exactly do? I searched the forum, I found it only C# or Java topics.</p>
","<p>Consider this code,</p>

<pre><code>int some_int = 100;

while(some_int == 100)
{
   //your code
}
</code></pre>

<p>When this program gets compiled, the compiler may optimize this code, if it finds that the program <strong>never</strong> ever makes any attempt to change the value of <code>some_int</code>, so it may be tempted to optimize the <code>while</code> loop by changing it from <code>while(some_int == 100)</code> to simply <code>while(true)</code> so that the execution could be fast (since the condition in <code>while</code> loop appears to be <code>true</code> always). <em>(if the compiler doesn't optimize it, then it has to fetch the value of <code>some_int</code> (if it's not loaded on a register) and compare it with 100, each time which obviously is a little bit slow.)</em></p>

<p>However, sometimes, optimization (of some parts of your program) may be <strong>undesirable</strong>, because it may be that someone else is changing the value of <code>some_int</code> from <strong>outside the program which compiler is not aware of</strong>, since it can't see it; but it's how you've designed it. In that case, compiler's optimization would <strong>not</strong> produce the desired result!</p>

<p>So, to ensure the desired result, you need to somehow stop the compiler from optimizing the <code>while</code> loop. That is where the <code>volatile</code> keyword plays its role. All you need to do is this,</p>

<pre><code>volatile int some_int = 100; //note the 'volatile' qualifier now!
</code></pre>

<hr>

<p>In others words I would explain this as follows:</p>

<p><code>volatile</code> tells the compiler that, </p>

<blockquote>
  <p>""Hey compiler, I'm volatile and, you
  know, I can be changed by some XYZ
  that you're not even aware of. That
  XYZ could be anything. Maybe some
  alien outside this planet called
  program. Maybe some lighting, some
  form of interrupt, volcanoes, etc can
  mutate me. Maybe. You never know who
  is going to change me! So O you
  ignorant, stop playing an all-knowing
  god, and don't dare touch the code
  where I'm present. Okay?""</p>
</blockquote>

<p>Well, that is how <code>volatile</code> prevents compiler from optimizing code. Now google it to see some sample examples.</p>

<hr>

<p>Quoting from the C++ Standard ($7.1.5.1/8)</p>

<blockquote>
  <p>[..] volatile is a hint to the
  implementation to <strong>avoid aggressive
  optimization involving the object</strong>
  because the value of the object might
  be changed by means undetectable by an
  implementation.[...]</p>
</blockquote>

<p>Related topic:</p>

<p><a href=""https://stackoverflow.com/questions/4479597/does-making-a-struct-volatile-make-all-its-members-volatile/4479652"">Does making a struct volatile make all its members volatile?</a></p>
","4437555"
"Best way to extract a subvector from a vector?","170788","","<p>Suppose I have a <code>std::vector</code> (let's call it <code>myVec</code>) of size <code>N</code>.  What's the simplest way to construct a new vector consisting of a copy of elements X through Y, where 0 &lt;= X &lt;= Y &lt;= N-1?  For example, <code>myVec [100000]</code> through <code>myVec [100999]</code> in a vector of size <code>150000</code>.</p>

<p>If this cannot be done efficiently with a vector, is there another STL datatype that I should use instead?</p>
","<pre><code>vector&lt;T&gt;::const_iterator first = myVec.begin() + 100000;
vector&lt;T&gt;::const_iterator last = myVec.begin() + 101000;
vector&lt;T&gt; newVec(first, last);
</code></pre>

<p>It's an O(N) operation to construct the new vector, but there isn't really a better way.</p>
","421615"
"Difference between static and shared libraries?","170425","","<p>What is the difference between static and shared libraries?</p>

<p>I use Eclipse and there are several project types including Static Libraries and Shared Libraries? Does one have an advantage over the other?</p>
","<p>Shared libraries are .so (or in Windows .dll, or in OS X .dylib) files. All the code relating to the library is in this file, and it is referenced by programs using it at run-time. A program using a shared library only makes reference to the code that it uses in the shared library.</p>

<p>Static libraries are .a (or in Windows .lib) files. All the code relating to the library is in this file, and it is directly linked into the program at compile time. A program using a static library takes copies of the code that it uses from the static library and makes it part of the program. [Windows also has .lib files which are used to reference .dll files, but they act the same way as the first one].</p>

<p>There are advantages and disadvantages in each method.</p>

<p>Shared libraries reduce the amount of code that is duplicated in each program that makes use of the library, keeping the binaries small. It also allows you to replace the shared object with one that is functionally equivalent, but may have added performance benefits without needing to recompile the program that makes use of it. Shared libraries will, however have a small additional cost for the execution of the functions as well as a run-time loading cost as all the symbols in the library need to be connected to the things they use. Additionally, shared libraries can be loaded into an application at run-time, which is the general mechanism for implementing binary plug-in systems.</p>

<p>Static libraries increase the overall size of the binary, but it means that you don't need to carry along a copy of the library that is being used. As the code is connected at compile time there are not any additional run-time loading costs. The code is simply there.</p>

<p>Personally, I prefer shared libraries, but use static libraries when needing to ensure that the binary does not have many external dependencies that may be difficult to meet, such as specific versions of the C++ standard library or specific versions of the Boost C++ library.</p>
","2649430"
"C++ IDE for Macs","170318","","<p>I teach a C++ course using Visual Studio.  One of my students has a Mac and was looking for an IDE to use on his machine. What would be good to recommend?</p>
","<p><a href=""http://developer.apple.com/tools/xcode/"" rel=""noreferrer"">Xcode</a> which is part of the MacOS Developer Tools is a great IDE. There's also <a href=""http://www.netbeans.org"" rel=""noreferrer"">NetBeans</a> and <a href=""http://www.eclipse.org"" rel=""noreferrer"">Eclipse</a> that can be configured to build and compile C++ projects. </p>

<p><a href=""https://www.jetbrains.com/clion/"" rel=""noreferrer"">Clion</a> from JetBrains, also is available now, and uses Cmake as project model.</p>
","220649"
"How to initialize const member variable in a class?","170223","","<pre><code>#include &lt;iostream&gt;

using namespace std;
class T1
{
  const int t = 100;
  public:

  T1()
  {

    cout &lt;&lt; ""T1 constructor: "" &lt;&lt; t &lt;&lt; endl;
  }
};
</code></pre>

<p>When I am trying to initialize the const member variable <code>t</code> with 100. But it's giving me the following error:</p>

<pre><code>test.cpp:21: error: ISO C++ forbids initialization of member ‘t’
test.cpp:21: error: making ‘t’ static
</code></pre>

<p>How can I initialize a <code>const</code> value?</p>
","<p>The <code>const</code> variable specifies whether a variable is modifiable or not. The constant value assigned will be used each time the variable is referenced. The value assigned cannot be modified during program execution.</p>

<p>Bjarne Stroustrup's <a href=""http://www.stroustrup.com/bs_faq2.html#in-class"" rel=""noreferrer"">explanation</a> sums it up briefly:</p>

<blockquote>
  <p>A class is typically declared in a header file and a header file is typically included into many translation units. However, to avoid complicated linker rules, C++ requires that every object has a unique definition. That rule would be broken if C++ allowed in-class definition of entities that needed to be stored in memory as objects.</p>
</blockquote>

<p>A <code>const</code> variable has to be declared within the class, but it cannot be defined in it. We need to define the const variable outside the class.</p>

<pre><code>T1() : t( 100 ){}
</code></pre>

<p>Here the assignment <code>t = 100</code> happens in initializer list, much before the class initilization occurs.</p>
","14495926"
"unsigned int vs. size_t","169620","","<p>I notice that modern C and C++ code seems to use <code>size_t</code> instead of <code>int</code>/<code>unsigned int</code> pretty much everywhere - from parameters for C string functions to the STL.  I am curious as to the reason for this and the benefits it brings.</p>
","<p>The <code>size_t</code> type is the unsigned integer type that is the result of the <code>sizeof</code> operator (and the <code>offsetof</code> operator), so it is guaranteed to be big enough to contain the size of the biggest object your system can handle (e.g., a static array of 8Gb).</p>

<p>The <code>size_t</code> type may be bigger than, equal to, or smaller than an <code>unsigned int</code>, and your compiler might make assumptions about it for optimization.</p>

<p>You may find more precise information in the C99 standard, section 7.17, a draft of which is available on the Internet in <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf"" rel=""noreferrer"">pdf</a> format, or in the C11 standard, section 7.19, also available as a <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf"" rel=""noreferrer"">pdf draft</a>.</p>
","131833"
"Efficient way to determine number of digits in an integer","168021","","<p>What is a very <strong><em>efficient</em></strong> way of determining how many digits there are in an integer in C++?</p>
","<p>Well, the most efficient way, presuming you know the size of the integer, would be a lookup.  Should be faster than the much shorter logarithm based approach.  If you don't care about counting the '-', remove the + 1.</p>

<pre><code>// generic solution
template &lt;class T&gt;
int numDigits(T number)
{
    int digits = 0;
    if (number &lt; 0) digits = 1; // remove this line if '-' counts as a digit
    while (number) {
        number /= 10;
        digits++;
    }
    return digits;
}

// partial specialization optimization for 32-bit numbers
template&lt;&gt;
int numDigits(int32_t x)
{
    if (x == MIN_INT) return 10 + 1;
    if (x &lt; 0) return numDigits(-x) + 1;

    if (x &gt;= 10000) {
        if (x &gt;= 10000000) {
            if (x &gt;= 100000000) {
                if (x &gt;= 1000000000)
                    return 10;
                return 9;
            }
            return 8;
        }
        if (x &gt;= 100000) {
            if (x &gt;= 1000000)
                return 7;
            return 6;
        }
        return 5;
    }
    if (x &gt;= 100) {
        if (x &gt;= 1000)
            return 4;
        return 3;
    }
    if (x &gt;= 10)
        return 2;
    return 1;
}

// partial-specialization optimization for 8-bit numbers
template &lt;&gt;
int numDigits(char n)
{
    // if you have the time, replace this with a static initialization to avoid
    // the initial overhead &amp; unnecessary branch
    static char x[256] = {0};
    if (x[0] == 0) {
        for (char c = 1; c != 0; c++)
            x[c] = numDigits((int32_t)c);
        x[0] = 1;
    }
    return x[n];
}
</code></pre>
","1489873"
"Declaring an enum within a class","167886","","<p>In the following code snippet, the <code>Color</code> enum is declared within the <code>Car</code> class in order to limit the scope of the enum and to try not to ""pollute"" the global namespace.</p>

<pre><code>class Car
{
public:

   enum Color
   {
      RED,
      BLUE,
      WHITE
   };

   void SetColor( Car::Color color )
   {
      _color = color;
   }

   Car::Color GetColor() const
   {
      return _color;
   }

private:

   Car::Color _color;

};
</code></pre>

<p>(1) Is this a good way to limit the scope of the <code>Color</code> enum?  Or, should I declare it outside of the <code>Car</code> class, but possibly within its own namespace or struct?  I just came across this article today, which advocates the latter and discusses some nice points about enums:  <a href=""http://gamesfromwithin.com/stupid-c-tricks-2-better-enums"" rel=""noreferrer"">http://gamesfromwithin.com/stupid-c-tricks-2-better-enums</a>.</p>

<p>(2) In this example, when working <em>within</em> the class, is it best to code the enum as <code>Car::Color</code>, or would just <code>Color</code> suffice?  (I assume the former is better, just in case there is another <code>Color</code> enum declared in the global namespace.  That way, at least, we are explicit about the enum to we are referring.)</p>
","<ol>
<li><p>If <code>Color</code> is something that is specific to just <code>Car</code>s then that is the way you would limit its scope. If you are going to have another <code>Color</code> enum that other classes use then you might as well make it global (or at least outside <code>Car</code>).</p></li>
<li><p>It makes no difference. If there is a global one then the local one is still used anyway as it is closer to the current scope. Note that if you define those function outside of the class definition then you'll need to explicitly specify <code>Car::Color</code> in the function's interface.</p></li>
</ol>
","2503845"
"How do I ""break"" out of an if statement?","167784","","<p>I have a if statement that I want to ""break"" out of.  I understand that break is only really for loops.  Can anyone help?</p>

<p>For those that require an example of what I'm trying to do:</p>

<pre><code>if( color == red )
{
...
if( car == hyundai ) break;
...
}
</code></pre>
","<p>Nested ifs:</p>

<pre><code>if (condition)
{
    // half-massive amount of code here

    if (!breakOutCondition)
    {
        //half-massive amount of code here
    }
}
</code></pre>

<p>At the risk of being downvoted -- it's happened to me in the past -- I'll mention that another (unpopular) option would of course be the dreaded <code>goto</code>; a break statement is just a goto in disguise.</p>

<p>And finally, I'll echo the common sentiment that your design could probably be improved so that the massive if statement is not necessary, let alone breaking out of it.  At least you should be able to extract a couple of methods, and use a return:</p>

<pre><code>if (condition)
{
    ExtractedMethod1();

    if (breakOutCondition)
        return;

    ExtractedMethod2();
}
</code></pre>
","8523572"
"Using getline() in C++","167510","","<p>I have a problem using getline method to get a message that user types, I'm using something like:</p>

<pre><code>string messageVar;
cout &lt;&lt; ""Type your message: "";
getline(cin, messageVar);
</code></pre>

<p>However, it's not stopping to get the output value, what's wrong with this?</p>
","<p>If you're using <code>getline()</code> after <code>cin &gt;&gt; something</code>, you need to flush the newline character out of the buffer in between. You can do it by using <code>cin.ignore()</code>.</p>

<p>It would be something like this:</p>

<pre><code>string messageVar;
cout &lt;&lt; ""Type your message: "";
cin.ignore(); 
getline(cin, messageVar);
</code></pre>

<p>This happens because the <code>&gt;&gt;</code> operator leaves a newline <code>\n</code> character in the input buffer. This may become a problem when you do unformatted input, like <code>getline()</code>, which reads input until a newline character is found. This happening, it will stop reading immediately, because of that <code>\n</code> that was left hanging there in your previous operation.</p>
","18786719"
"Integer to hex string in C++","167242","","<p>How do I convert an integer to a hex string in <a href=""http://en.wikipedia.org/wiki/C%2B%2B"">C++</a>?</p>

<p>I can find some ways to do it, but they mostly seem targeted towards C. It doesn't seem there's a native way to do it in C++. It is a pretty simple problem though; I've got an int which I'd like to convert to a hex string for later printing. </p>
","<p>Use <code>&lt;iomanip&gt;</code>'s  <a href=""http://en.cppreference.com/w/cpp/io/manip/hex"" rel=""noreferrer""><code>std::hex</code></a>. If you print, just send it to <code>std::cout</code>, if not, then use <a href=""http://en.cppreference.com/w/cpp/io/basic_stringstream"" rel=""noreferrer""><code>std::stringstream</code></a></p>

<pre><code>std::stringstream stream;
stream &lt;&lt; std::hex &lt;&lt; your_int;
std::string result( stream.str() );
</code></pre>

<p>You can prepend the first <code>&lt;&lt;</code> with <code>&lt;&lt; ""0x""</code> or whatever you like if you wish.</p>

<p>Other manips of interest are <code>std::oct</code> (octal) and <code>std::dec</code> (back to decimal).</p>

<p>One problem you may encounter is the fact that this produces the exact amount of digits needed to represent it. You may use <code>setfill</code> and <code>setw</code> this to circumvent the problem:</p>

<pre><code>stream &lt;&lt; std::setfill ('0') &lt;&lt; std::setw(sizeof(your_type)*2) 
       &lt;&lt; std::hex &lt;&lt; your_int;
</code></pre>

<p>So finally, I'd suggest such a function:</p>

<pre><code>template&lt; typename T &gt;
std::string int_to_hex( T i )
{
  std::stringstream stream;
  stream &lt;&lt; ""0x"" 
         &lt;&lt; std::setfill ('0') &lt;&lt; std::setw(sizeof(T)*2) 
         &lt;&lt; std::hex &lt;&lt; i;
  return stream.str();
}
</code></pre>
","5100745"
"What does the \0 symbol mean in a C string?","166509","","<p>Consider following code:</p>

<pre><code>char str[]= ""Hello\0"";
</code></pre>

<p>What is the length of str array, and with how much 0s it is ending?</p>
","<p><code>sizeof str</code> is 7 - five bytes for the ""Hello"" text, plus the explicit NUL terminator, plus the implicit NUL terminator.</p>

<p><code>strlen(str)</code> is 5 - the five ""Hello"" bytes only.</p>

<p>The key here is that the implicit nul terminator is <em>always</em> added - even if the string literal just happens to end with <code>\0</code>. Of course, <code>strlen</code> just stops at the first <code>\0</code> - it can't tell the difference.</p>

<p>There is one exception to the implicit NUL terminator rule - if you explicitly specify the array size, the string will be truncated to fit:</p>

<pre><code>char str[6] = ""Hello\0""; // strlen(str) = 5, sizeof(str) = 6 (with one NUL)
char str[7] = ""Hello\0""; // strlen(str) = 5, sizeof(str) = 7 (with two NULs)
char str[8] = ""Hello\0""; // strlen(str) = 5, sizeof(str) = 8 (with three NULs per C99 6.7.8.21)
</code></pre>

<p>This is, however, rarely useful, and prone to miscalculating the string length and ending up with an unterminated string. It is also forbidden in C++.</p>
","4711475"
"How do you properly use namespaces in C++?","165959","","<p>I come from a Java background, where packages are used, not namespaces. I'm used to putting classes that work together to form a complete object into packages, and then reusing them later from that package. But now I'm working in C++.</p>

<p>How do you use namespaces in C++? Do you create a single namespace for the entire application, or do you create namespaces for the major components? If so, how do you create objects from classes in other namespaces?</p>
","<p>Namespaces are packages essentially. They can be used like this:</p>

<pre><code>namespace MyNamespace
{
  class MyClass
  {
  };
}
</code></pre>

<p>Then in code:</p>

<pre><code>MyNamespace::MyClass* pClass = new MyNamespace::MyClass();
</code></pre>

<p>Hope that helps.</p>

<p>Or, if you want to always use a specific namespace, you can do this:</p>

<pre><code>using namespace MyNamespace;

MyClass* pClass = new MyClass();
</code></pre>

<p><strong>Edit:</strong> Following what <a href=""https://stackoverflow.com/questions/41590/how-do-you-properly-use-namespaces-in-c#41624"">bernhardrusch</a> has said, I tend not to use the ""using namespace x"" syntax at all, I usually explicitly specify the namespace when instantiating my objects (i.e. the first example I showed).</p>

<p>And as you asked <a href=""https://stackoverflow.com/questions/41590/how-do-you-properly-use-namespaces-in-c#41615"">below</a>, you can use as many namespaces as you like.</p>
","41598"
"rand() between 0 and 1","165893","","<p>So the following code makes 0 &lt; r &lt; 1 </p>

<pre><code>r = ((double) rand() / (RAND_MAX))
</code></pre>

<p>Why does having  <code>r = ((double) rand() / (RAND_MAX + 1))</code> make -1 &lt; r &lt; 0?</p>

<p>Shouldn't adding one to RAND_MAX make 1 &lt; r &lt; 2?</p>

<p>Edit: I was getting a  warning: integer overflow in expression</p>

<p>on that line, so that might be the problem. I just did <code>cout &lt;&lt; r &lt;&lt; endl</code> and it definitely gives me values between -1 and 0</p>
","<p>This is entirely <strong>implementation specific</strong>, but it appears that in the C++ environment you're working in, <code>RAND_MAX</code> is equal to <code>INT_MAX</code>.</p>

<p>Because of this, <code>RAND_MAX + 1</code> exhibits undefined (overflow) behavior, and becomes <code>INT_MIN</code>. While your initial statement was dividing (random # between 0 and <code>INT_MAX</code>)/(<code>INT_MAX</code>) and generating a value <code>0 &lt;= r &lt; 1</code>, now it's dividing (random # between 0 and <code>INT_MAX</code>)/(<code>INT_MIN</code>), generating a value <code>-1 &lt; r &lt;= 0</code></p>

<p>In order to generate a random number <code>1 &lt;= r &lt; 2</code>, you would want</p>

<pre><code>r = ((double) rand() / (RAND_MAX)) + 1
</code></pre>
","9879024"
"*.h or *.hpp for your class definitions","165843","","<p>I've always used a <code>*.h</code> file for my class definitions, but after reading some boost library code, I realised they all use <code>*.hpp</code>. I've always had an aversion to that file extension, I think mainly because I'm not used to it.</p>

<p>What are the advantages and disadvantages of using <code>*.hpp</code> over <code>*.h</code>?</p>
","<p>Here are a couple of reasons for having different naming of C vs C++ headers:</p>

<ul>
<li>Automatic code formatting, you might have different guidelines for formatting C and C++ code. If the headers are separated by extension you can set your editor to apply the appropriate formatting automatically</li>
<li>Naming, I've been on projects where there were libraries written in C and then wrappers had been implemented in C++. Since the headers usually had similar names, i.e. Feature.h vs Feature.hpp, they were easy to tell apart.</li>
<li>Inclusion, maybe your project has more appropriate versions available written in C++ but you are using the C version (see above point). If headers are named after the language they are implemented in you can easily spot all the C-headers and check for C++ versions.</li>
</ul>

<p>Remember, C is <strong>not</strong> C++ and it can be very dangerous to mix and match unless you know what you are doing. Naming your sources appropriately helps you tell the languages apart.</p>
","152671"
"push_back vs emplace_back","165043","","<p>I'm a bit confused regarding the difference between <code>push_back</code> and <code>emplace_back</code>.</p>

<pre><code>void emplace_back(Type&amp;&amp; _Val);
void push_back(const Type&amp; _Val);
void push_back(Type&amp;&amp; _Val);
</code></pre>

<p>As there is a <code>push_back</code> overload taking a rvalue reference I don't quite see what the purpose of <code>emplace_back</code> becomes?</p>
","<p>In addition to what visitor said :</p>

<p>The function <code>void emplace_back(Type&amp;&amp; _Val)</code> provided by MSCV10 is non conforming and redundant, because as you noted it is strictly equivalent to <code>push_back(Type&amp;&amp; _Val)</code>.</p>

<p>But the real C++0x form of <code>emplace_back</code> is really useful: <a href=""http://en.cppreference.com/w/cpp/container/vector/emplace_back"" rel=""noreferrer""><code>void emplace_back(Args&amp;&amp;...)</code></a>;</p>

<p>Instead of taking a <code>value_type</code> it takes a variadic list of arguments, so that means that you can now perfectly forward the arguments and construct directly an object into a container without a temporary at all. </p>

<p>That's useful, Because no matter how much cleverness RVO and move semantic bring to the table there is still complicated cases where a push_back is likely to make unnecessary copies (or move). For example, with the traditional <code>insert()</code> function of a <code>std::map</code>, you have to create a temporary, which will then be copied into a <code>std::pair&lt;Key, Value&gt;</code>, which will then be copied into the map : </p>

<pre><code>std::map&lt;int, Complicated&gt; m;
int anInt = 4;
double aDouble = 5.0;
std::string aString = ""C++"";

// cross your finger so that the optimizer is really good
m.insert(std::make_pair(4, Complicated(anInt, aDouble, aString))); 

// should be easier for the optimizer
m.emplace(4, anInt, aDouble, aString);
</code></pre>

<p>So why didn't they implement the right version of emplace_back in MSVC ? Actually it bugged me too a while ago, so I asked the same question on the <a href=""http://blogs.msdn.com/b/vcblog/archive/2009/10/22/visual-studio-2010-beta-2-is-now-available-for-download.aspx?PageIndex=3"" rel=""noreferrer"">Visual C++ blog</a>. Here is the answer from Stephan T Lavavej, the official maintainer of the Visual C++ standard library implementation at Microsoft.</p>

<blockquote>
  <p>Q : Are beta 2 emplace functions just some kind of placeholder right now ?</p>
  
  <p>A : As you may know, variadic templates
  aren't implemented in VC10. We
  simulate them with preprocessor
  machinery for things like
  <code>make_shared&lt;T&gt;()</code>, tuple, and the new
  things in <code>&lt;functional&gt;</code>. This
  preprocessor machinery is relatively
  difficult to use and maintain. Also,
  it significantly affects compilation
  speed, as we have to repeatedly
  include subheaders. Due to a
  combination of our time constraints
  and compilation speed concerns, we
  haven't simulated variadic templates
  in our emplace functions.</p>
  
  <p>When variadic templates are
  implemented in the compiler, you can
  expect that we'll take advantage of
  them in the libraries, including in
  our emplace functions. We take
  conformance very seriously, but
  unfortunately we can't do everything
  all at once.</p>
</blockquote>

<p>It's an understandable decision. Everyone who tried just once to emulate variadic template with preprocessor horrible tricks know how disgusting this stuff gets. </p>
","4306581"
"How to print (using cout) the way a number is stored in memory?","164661","","<p>I'm following a college course about operating systems and we're learning how to convert from binary to hexadecimal, decimal to hexadecimal, etc. and today we just learned how signed/unsigned numbers are stored in memory using the two's complement (~number + 1).</p>

<p>We have a couple of exercises to do on paper and I would like to be able to verify my answers before submitting my work to the teacher. I wrote a C++ program for the first few exercises but now I'm stuck as to how I could verify my answer with the following problem:</p>

<pre><code>char a, b;

short c;
a = -58;
c = -315;

b = a &gt;&gt; 3;
</code></pre>

<p>and we need to show the binary representation <em>in memory</em> of <code>a</code>, <code>b</code> and <code>c</code>.</p>

<p>I've done it on paper and it gives me the following results (all the binary representations in memory of the numbers after the two's complement):</p>

<blockquote>
  <p>a = 00111010 (it's a char, so 1 byte)</p>
  
  <p>b = 00001000 (it's a char, so 1 byte)</p>
  
  <p>c = 11111110 11000101 (it's a short, so 2 bytes)</p>
</blockquote>

<p>Is there a way to verify my answer? Is there a standard way in C++ to show the binary representation in memory of a number, or do I have to code each step myself (calculate the two's complement and then convert to binary)? I know the latter wouldn't take so long but I'm curious as to if there is a standard way to do so.</p>
","<p>The easiest way is probably to create an <a href=""http://en.cppreference.com/w/cpp/utility/bitset"" rel=""noreferrer""><code>std::bitset</code></a> representing the value, then stream that to <code>cout</code>.</p>

<pre><code>#include &lt;bitset&gt;
...

char a = -58;    
std::bitset&lt;8&gt; x(a);
std::cout &lt;&lt; x;

short c = -315;
std::bitset&lt;16&gt; y(c);
std::cout &lt;&lt; y;
</code></pre>
","7349767"
"Default parameters with C++ constructors","164425","","<p>Is it good practice to have a class constructor that uses default parameters, or should I use separate overloaded constructors?  For example:</p>

<pre><code>// Use this...
class foo  
{
private:
    std::string name_;
    unsigned int age_;
public:
    foo(const std::string&amp; name = """", const unsigned int age = 0) :
        name_(name),
        age_(age)
    {
        ...
    }
};

// Or this?
class foo  
{
private:
    std::string name_;
    unsigned int age_;
public:
    foo() :
    name_(""""),
    age_(0)
{
}

foo(const std::string&amp; name, const unsigned int age) :
        name_(name),
        age_(age)
    {
        ...
    }
};
</code></pre>

<p>Either version seems to work, e.g.:</p>

<pre><code>foo f1;
foo f2(""Name"", 30);
</code></pre>

<p>Which style do you prefer or recommend and why?</p>
","<p>Definitely a matter of style.  I prefer constructors with default parameters, so long as the parameters make sense.  Classes in the standard use them as well, which speaks in their favor.</p>

<p>One thing to watch out for is if you have defaults for all but one parameter, your class can be implicitly converted from that parameter type.  Check out <a href=""https://stackoverflow.com/questions/174349/forcing-single-argument-constructors-to-be-explicit-in-c"">this thread</a> for more info.</p>
","187650"
"Where does Visual Studio look for C++ header files?","163726","","<p>I checked out a copy of a C++ application from SourceForge (HoboCopy, if you're curious) and tried to compile it.</p>

<p>Visual Studio tells me that it can't find a particular header file. I found the file in the source tree, but where do I need to put it, so that it will be found when compiling?  </p>

<p>Are there special directories?</p>
","<p>Visual Studio looks for headers in this order:</p>

<ul>
<li>In the current source directory.</li>
<li>In the Additional Include Directories in the project properties (under C++ | General).</li>
<li>In the Visual Studio C++ <em>Include directories</em> under <em>Tools</em> → <em>Options</em> → <em>Projects and Solutions</em> → <em>VC++ Directories</em>.</li>
</ul>

<p>In your case, add the directory that the header is in to the project properties.</p>
","335426"
"How to get current timestamp in milliseconds since 1970 just the way Java gets","163571","","<p>In Java, we can use <code>System.currentTimeMillis()</code> to get the current timestamp in Milliseconds since epoch time which is -</p>

<blockquote>
  <p>the difference, measured in milliseconds, between the current time and
  midnight, January 1, 1970 UTC.</p>
</blockquote>

<p>In C++ how to get the same thing?</p>

<p>Currently I am using this to get the current timestamp - </p>

<pre><code>struct timeval tp;
gettimeofday(&amp;tp, NULL);
long int ms = tp.tv_sec * 1000 + tp.tv_usec / 1000; //get current timestamp in milliseconds

cout &lt;&lt; ms &lt;&lt; endl;
</code></pre>

<p>This looks right or not?</p>
","<p>If you have access to the C++ 11 libraries, check out the <a href=""http://en.cppreference.com/w/cpp/chrono"" rel=""noreferrer""><code>std::chrono</code></a> library. You can use it to get the milliseconds since the Unix Epoch like this:</p>

<pre><code>#include &lt;chrono&gt;

// ...

using namespace std::chrono;
milliseconds ms = duration_cast&lt; milliseconds &gt;(
    system_clock::now().time_since_epoch()
);
</code></pre>
","19555298"
"How can I get a file's size in C++?","163556","","<p>Let's create a complementary question to <a href=""https://stackoverflow.com/questions/238603/how-can-i-get-a-files-size-in-c"">this one</a>.
What is the most common way to get the file size in C++?
Before answering, make sure it is portable (may be executed on Unix, Mac and Windows),
reliable, easy to understand and without library dependencies (no boost or qt, but for instance glib is ok since it is portable library).</p>
","<pre><code>#include &lt;fstream&gt;

std::ifstream::pos_type filesize(const char* filename)
{
    std::ifstream in(filename, std::ifstream::ate | std::ifstream::binary);
    return in.tellg(); 
}
</code></pre>

<p>See <a href=""http://www.cplusplus.com/doc/tutorial/files/"">http://www.cplusplus.com/doc/tutorial/files/</a> for more information on files in C++.</p>
","5840160"
"Deleting a pointer in C++","163248","","<p>Context: I'm trying to wrap my head around pointers, we just saw them a couple of weeks ago in school and while practicing today I ran into a silly? issue, it can be super straightforward to you but I have little to none programming experience.</p>

<p>I've seen quite a few questions over in SO about deleting pointers but they all seem to be related to deleting a class and not a 'simple' pointer (or whatever the proper term might be), here's the code I'm trying to run:</p>

<pre><code>#include &lt;iostream&gt;;

using namespace std;

int main() {
  int myVar,
      *myPointer;

  myVar = 8;
  myPointer = &amp;myVar;

  cout &lt;&lt; ""delete-ing pointers "" &lt;&lt; endl;
  cout &lt;&lt; ""Memory address: "" &lt;&lt; myPointer &lt;&lt; endl;

  // Seems I can't *just* delete it, as it triggers an error 
  delete myPointer;
  cout &lt;&lt; ""myPointer: "" &lt;&lt; myPointer &lt;&lt; endl;
  // Error: a.out(14399) malloc: *** error for object 0x7fff61e537f4:
  // pointer being freed was not allocated
  // *** set a breakpoint in malloc_error_break to debug
  // Abort trap: 6

  // Using the new keyword befor deleting it works, but
  // does it really frees up the space? 
  myPointer = new int;
  delete myPointer;
  cout &lt;&lt; ""myPointer: "" &lt;&lt; myPointer &lt;&lt; endl;
  // myPointer continues to store a memory address.

  // Using NULL before deleting it, seems to work. 
  myPointer = NULL;
  delete myPointer;
  cout &lt;&lt; ""myPointer: "" &lt;&lt; myPointer &lt;&lt; endl;
  // myPointer returns 0.

}
</code></pre>

<p>So my questions are:</p>

<ol>
<li>Why won't the first case work? Seems the most straightforward use to use and delete a pointer? The error says the memory wasn't allocated but 'cout' returned an address.</li>
<li>On the second example the error is not being triggered but doing a cout of the value of myPointer <strong>still</strong> returns a memory address?</li>
<li>Does #3 really work? Seems to work to me, the pointer is no longer storing an address, is this the proper way to delete a pointer?</li>
</ol>

<p>Sorry for the long question, wanted to make this as clear as possible, also to reiterate, I have little programming experience, so if someone could answer this using layman's terms, it would be greatly appreciated!</p>
","<p><strong>1 &amp; 2</strong></p>

<pre><code>myVar = 8; //not dynamically allocated. Can't call delete on it.
myPointer = new int; //dynamically allocated, can call delete on it.
</code></pre>

<p>The first variable was allocated on the stack. You can call delete only on memory you allocated dynamically (on the heap) using the <code>new</code> operator.</p>

<p><strong>3.</strong></p>

<pre><code>  myPointer = NULL;
  delete myPointer;
</code></pre>

<p>The above did <strong>nothing at all</strong>. You didn't free anything, as the pointer pointed at NULL. </p>

<hr>

<p><strong>The following shouldn't be done:</strong></p>

<pre><code>myPointer = new int;
myPointer = NULL; //leaked memory, no pointer to above int
delete myPointer; //no point at all
</code></pre>

<p>You pointed it at NULL, leaving behind leaked memory (the new int you allocated).
You should free the memory you were pointing at. There is no way to access that allocated <code>new int</code> anymore, hence memory leak.</p>

<hr>

<p><strong>The correct way:</strong></p>

<pre><code>myPointer = new int;
delete myPointer; //freed memory
myPointer = NULL; //pointed dangling ptr to NULL
</code></pre>

<hr>

<p><strong>The better way:</strong></p>

<p>If you're using C++, <strong>do not</strong> use raw pointers. Use <a href=""https://stackoverflow.com/q/106508/759019"">smart pointers</a> instead which can handle these things for you with little overhead. C++11 comes with <a href=""http://en.cppreference.com/w/cpp/memory"" rel=""noreferrer"">several</a>.</p>
","13223431"
"How to compile a 64-bit application using Visual C++ 2010 Express?","162463","","<p>Is there a simple way to compile a 64 bit app with the 32-bit edition of Visual C++ 2010 Express? What configurations, if any, are necessary?</p>
","<p>Here are step by step instructions:</p>

<ol>
<li>Download and install the Windows Software Development Kit version 7.1. Visual C++ 2010 Express does not include a 64 bit compiler, but the SDK does. A link to the SDK: <a href=""http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx</a></li>
<li>Change your project configuration. Go to Properties of your project. On the top of the dialog box there will be a ""Configuration"" drop-down menu. Make sure that selects ""All Configurations."" There will also be a ""Platform"" drop-down that will read ""Win32."" Finally on the right there is a ""Configuration Manager"" button - press it. In the dialog that comes up, find your project, hit the Platform drop-down, select New, then select x64. Now change the ""Active solution platform"" drop-down menu to ""x64.""  When you return to the Properties dialog box, the ""Platform"" drop-down should now read ""x64.""</li>
<li>Finally, change your toolset. In the Properties menu of your project, under Configuration Properties | General, change Platform Toolset from ""v100"" to ""Windows7.1SDK"".</li>
</ol>

<p>These steps have worked for me, anyway. Some more details on step 2 can be found in a reference from Microsoft that a previous poster mentioned: <a href=""http://msdn.microsoft.com/en-us/library/9yb4317s.aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/library/9yb4317s.aspx</a>.</p>
","8582538"
"C++ Best way to get integer division and remainder","162073","","<p>I am just wondering, if I want to divide a by b, and am interested both in the result c and the remainder (e.g. say I have number of seconds and want to split that into minutes and seconds), what is the best way to go about it?</p>

<p>Would it be</p>

<pre><code>int c = (int)a / b;
int d = a % b;
</code></pre>

<p>or</p>

<pre><code>int c = (int)a / b;
int d = a - b * c;
</code></pre>

<p>or</p>

<pre><code>double tmp = a / b;
int c = (int)tmp;
int d = (int)(0.5+(tmp-c)*b);
</code></pre>

<p>or</p>

<p>maybe there is a magical function that gives one both at once?</p>
","<p>On x86 the remainder is a by-product of the division itself so any half-decent compiler should be able to just use it (and not perform a <code>div</code> again). This is probably done on other architectures too.</p>

<blockquote>
  <p>Instruction: <code>DIV</code> src</p>
  
  <p>Note: Unsigned division. Divides accumulator (AX) by ""src"". If divisor
  is a byte value, result is put to AL <strong>and remainder to AH</strong>. If divisor
  is a word value, then DX:AX is divided by ""src"" and result is stored
  in AX <strong>and remainder is stored in DX</strong>.</p>
</blockquote>

<pre><code>int c = (int)a / b;
int d = a % b; /* Likely uses the result of the division. */
</code></pre>
","7070383"
"Cannot open output file, permission denied","162062","","<p>So I keep getting this error when trying to compile C++ code using CodeBlocks.</p>

<blockquote>
  <p>cannot open output file [filename.exe] permission denied</p>
</blockquote>

<p>It only started today, and it's sporadic and inconsistent.  It usually goes away if I shut CodeBlocks down and restart the project, but not always.  Sometimes it even goes away when I just press F9 (build &amp; run) several times.  I always check Task Manager, but there are never any .EXEs running with my file's name, or anything related to it.  </p>

<p>I've also noticed that if this problem occurs and I then try to delete the .EXE manually or otherwise interact with it, Windows tells me I need administrator permission to do so (this is a private PC, and as far as I know I am an administrator on it).</p>

<p>The first time it occurred, the only thing I had added to the code beyond what was in the previous version was a debugging report sent to cout - hardly anything arcane.  It sometimes occurs even when no code was changed from a previous version.</p>

<p>What could this be?  It's not game-breaking, yet, but it's irritating and I'd rather it didn't get worse.</p>

<p>EDIT: This is old by now, but just in case anyone else is having similar problems, the workaround I currently use is just to consistently delete [filename.exe] before trying to run the code again.  This avoids the problem, though it is annoying.</p>
","<p>check that ""filename.exe"" is not running, I guess you are using Microsoft Windows, in that case you can use either Task Manager or Process Explorer : <a href=""http://technet.microsoft.com/en-us/sysinternals/bb896653"" rel=""noreferrer"">http://technet.microsoft.com/en-us/sysinternals/bb896653</a> to kill ""filename.exe"" before trying to generate it.</p>
","6875488"
"Can you remove elements from a std::list while iterating through it?","161884","","<p>I've got code that looks like this:</p>

<pre><code>for (std::list&lt;item*&gt;::iterator i=items.begin();i!=items.end();i++)
{
    bool isActive = (*i)-&gt;update();
    //if (!isActive) 
    //  items.remove(*i); 
    //else
       other_code_involving(*i);
}
items.remove_if(CheckItemNotActive);
</code></pre>

<p>I'd like remove inactive items immediately after update them, inorder to avoid walking the list again.  But if I add the commented-out lines, I get an error when I get to <code>i++</code>: ""List iterator not incrementable"".  I tried some alternates which didn't increment in the for statement, but I couldn't get anything to work.</p>

<p>What's the best way to remove items as you are walking a std::list?</p>
","<p>You have to increment the iterator first (with i++) and then remove the previous element (e.g., by using the returned value from i++).  You can change the code to a while loop like so:</p>

<pre><code>std::list&lt;item*&gt;::iterator i = items.begin();
while (i != items.end())
{
    bool isActive = (*i)-&gt;update();
    if (!isActive)
    {
        items.erase(i++);  // alternatively, i = items.erase(i);
    }
    else
    {
        other_code_involving(*i);
        ++i;
    }
}
</code></pre>
","596180"
"Where to put default parameter value in C++?","160832","","<p>What's the place for the default parameter value? Just in function definition, or declaration, or both places?</p>
","<p>Default parameter values must appear on the declaration, since that is the only thing that the caller sees.</p>

<p><strong>EDIT:</strong> As others point out, you <em>can</em> have the argument on the definition, but I would advise writing all code as if that wasn't true.</p>
","4989505"
"C++ Dynamic Shared Library on Linux","160587","","<p>This is a follow-up to <a href=""https://stackoverflow.com/q/483797/1288"">Dynamic Shared Library compilation with g++</a>.</p>

<p>I'm trying to create a shared class library in C++ on Linux.  I'm able to get the library to compile, and I can call some of the (non-class) functions using the tutorials that I found <a href=""https://stackoverflow.com/questions/496664/c-dynamic-shared-library-on-linux/497067#497067"">here</a> and <a href=""http://rads.stackoverflow.com/amzn/click/0470147628"" rel=""noreferrer"">here</a>.  My problems start when I try to use the classes that are defined in the library.  The second tutorial that I linked to shows how to load the symbols for creating objects of the classes defined in the library, but stops short of <em>using</em> those objects to get any work done.</p>

<p>Does anyone know of a more complete tutorial for creating shared C++ class libraries that also shows how to <em>use</em> those classes in a separate executable?  A very simple tutorial that shows object creation, use (simple getters and setters would be fine), and deletion would be fantastic.  A link or a reference to some open source code that illustrates the use of a shared class library would be equally good.</p>

<hr>

<p>Although the answers from <a href=""https://stackoverflow.com/q/483797/1288"">codelogic</a> and <a href=""https://stackoverflow.com/questions/496664/c-dynamic-shared-library-on-linux/497067#497067"">nimrodm</a> do work, I just wanted to add that I picked up a copy of <a href=""http://rads.stackoverflow.com/amzn/click/0470147628"" rel=""noreferrer"">Beginning Linux Programming</a> since asking this question, and its first chapter has example C code and good explanations for creating and using both static and shared libraries.  These examples are available through Google Book Search in <a href=""http://books.google.com/books?hl=en&amp;id=7q0TFMi7FIkC&amp;dq=beginning+linux+programming&amp;printsec=frontcover&amp;source=web&amp;ots=ko8ox73Gd6&amp;sig=Fbp6iqNbeRaADHOUB0Px-99uaY8&amp;sa=X&amp;oi=book_result&amp;resnum=3&amp;ct=result#PPA10,M1"" rel=""noreferrer"">an older edition of that book</a>.</p>
","<p><strong>myclass.h</strong></p>

<pre><code>#ifndef __MYCLASS_H__
#define __MYCLASS_H__

class MyClass
{
public:
  MyClass();

  /* use virtual otherwise linker will try to perform static linkage */
  virtual void DoSomething();

private:
  int x;
};

#endif
</code></pre>

<p><strong>myclass.cc</strong></p>

<pre><code>#include ""myclass.h""
#include &lt;iostream&gt;

using namespace std;

extern ""C"" MyClass* create_object()
{
  return new MyClass;
}

extern ""C"" void destroy_object( MyClass* object )
{
  delete object;
}

MyClass::MyClass()
{
  x = 20;
}

void MyClass::DoSomething()
{
  cout&lt;&lt;x&lt;&lt;endl;
}
</code></pre>

<p><strong>class_user.cc</strong></p>

<pre><code>#include &lt;dlfcn.h&gt;
#include &lt;iostream&gt;
#include ""myclass.h""

using namespace std;

int main(int argc, char **argv)
{
  /* on Linux, use ""./myclass.so"" */
  void* handle = dlopen(""myclass.so"", RTLD_LAZY);

  MyClass* (*create)();
  void (*destroy)(MyClass*);

  create = (MyClass* (*)())dlsym(handle, ""create_object"");
  destroy = (void (*)(MyClass*))dlsym(handle, ""destroy_object"");

  MyClass* myClass = (MyClass*)create();
  myClass-&gt;DoSomething();
  destroy( myClass );
}
</code></pre>

<p>On Mac OS X, compile with:</p>

<pre><code>g++ -dynamiclib -flat_namespace myclass.cc -o myclass.so
g++ class_user.cc -o class_user
</code></pre>

<p>On Linux, compile with:</p>

<pre><code>g++ -fPIC -shared myclass.cc -o myclass.so
g++ class_user.cc -ldl -o class_user
</code></pre>

<p>If this were for a plugin system, you would use MyClass as a base class and define all the required functions virtual. The plugin author would then derive from MyClass, override the virtuals and implement <code>create_object</code> and <code>destroy_object</code>. Your main application would not need to be changed in any way.</p>
","497158"
"How to specify preference of library path?","159787","","<p>I'm compiling a c++ program using <code>g++</code> and <code>ld</code>. I have a <code>.so</code> library I want to be used during linking. However, a library of the same name exists in <code>/usr/local/lib</code>, and <code>ld</code> is choosing that library over the one I'm directly specifying. How can I fix this?</p>

<p>For the examples below, my library file is <code>/my/dir/libfoo.so.0</code>. Things I've tried that don't work:</p>

<ul>
<li>my g++ command is <code>g++ -g -Wall -o my_binary -L/my/dir -lfoo bar.cpp</code></li>
<li>adding <code>/my/dir</code> to the beginning or end of my <code>$PATH</code> en` variable</li>
<li>adding <code>/my/dir/libfoo.so.0</code> as an argument to g++</li>
</ul>
","<p><strong>Add the path to where your new library is to <code>LD_LIBRARY_PATH</code> (it has slightly different name on Mac ...)</strong></p>

<p>Your solution should work with using the <code>-L/my/dir -lfoo</code> options, at runtime use LD_LIBRARY_PATH to point to the location of your library.</p>

<p>OR</p>

<p>Use the rpath option via gcc to linker - runtime library search path, will be used
instead of looking in standard dir (gcc option):</p>

<pre><code>-Wl,-rpath,$(DEFAULT_LIB_INSTALL_PATH)
</code></pre>

<p>This is good for a temporary solution. Linker first searches the LD_LIBRARY_PATH for libraries before looking into standard directories.</p>

<p>If you don't want to permanently update LD_LIBRARY_PATH you can do it on the fly on command line:</p>

<pre><code>LD_LIBRARY_PATH=/some/custom/dir ./fooo
</code></pre>

<p>You can check what libraries linker knows about using (example):</p>

<pre><code>/sbin/ldconfig -p | grep libpthread
        libpthread.so.0 (libc6, OS ABI: Linux 2.6.4) =&gt; /lib/libpthread.so.0
</code></pre>

<p>And you can check which library your application is using:</p>

<pre><code>ldd foo
        linux-gate.so.1 =&gt;  (0xffffe000)
        libpthread.so.0 =&gt; /lib/libpthread.so.0 (0xb7f9e000)
        libxml2.so.2 =&gt; /usr/lib/libxml2.so.2 (0xb7e6e000)
        librt.so.1 =&gt; /lib/librt.so.1 (0xb7e65000)
        libm.so.6 =&gt; /lib/libm.so.6 (0xb7d5b000)
        libc.so.6 =&gt; /lib/libc.so.6 (0xb7c2e000)
        /lib/ld-linux.so.2 (0xb7fc7000)
        libdl.so.2 =&gt; /lib/libdl.so.2 (0xb7c2a000)
        libz.so.1 =&gt; /lib/libz.so.1 (0xb7c18000)
</code></pre>
","2727033"
"Passing a member function as an argument in C++","159375","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2402579/c-function-pointer-to-member-function"">C++, function pointer to member function</a>  </p>
</blockquote>



<p>The question is the following: consider this piece of code:</p>

<pre><code>#include &lt;iostream&gt;


class aClass
{
public:
    void aTest(int a, int b)
    {
        printf(""%d+%d=%d"",a,b,a+b);
    }
};

void function1(void (*function)(int,int))
{
    function(1,1);
}

void test(int a,int b)
{
    printf(""%d-%d=%d"",a,b,a-b);
}

int main (int argc, const char * argv[])
{
    aClass a();

    function1(&amp;test);
    function1(&amp;aClass::aTest ); // &lt;-- how should I point to a's aClass::test function?

    return 0;
}
</code></pre>

<p>How can I use the <code>a</code>'s <code>aClass::test</code> as an argument to <code>function1</code>? I'm stuck in doing this.</p>

<p>I would like to access a member of the class.</p>
","<p>There isn't anything wrong with using function pointers. However, pointers to non-static member functions are not like normal function pointers: member functions need to be called on an object which is passed as an implicit argument to the function. The signature of your member function above is, thus</p>

<pre><code>void (aClass::*)(int, int)
</code></pre>

<p>rather than the type you try to use</p>

<pre><code>void (*)(int, int)
</code></pre>

<p>One approach could consist in making the member function <code>static</code> in which case it doesn't require any object to be called on and you can use it with the type <code>void (*)(int, int)</code>.</p>

<p>If you need to access any non-static member of your class  <em>and</em> you need to stick with function pointers, e.g., because the function is part of a C interface, your best option is to always pass a <code>void*</code> to your function taking function pointers and call your member through a forwarding function which obtains an object from the <code>void*</code> and then calls the member function.</p>

<p>In a proper C++ interface you might want to have a look at having your function take templated argument for function objects to use arbitrary class types. If using a templated interface is undesirable you should use something like <code>std::function&lt;void(int, int)&gt;</code>: you can create a suitably callable function object for these, e.g., using <code>std::bind()</code>.</p>

<p>The type-safe approaches using a template argument for the class type or a suitable <code>std::function&lt;...&gt;</code> are preferable than using a <code>void*</code> interface as they remove the potential for errors due to a cast to the wrong type.</p>

<p>To clarify how to use a function pointer to call a member function, here is an example:</p>

<pre><code>// the function using the function pointers:
void somefunction(void (*fptr)(void*, int, int), void* context) {
    fptr(context, 17, 42);
}

void non_member(void*, int i0, int i1) {
    std::cout &lt;&lt; ""I don't need any context! i0="" &lt;&lt; i0 &lt;&lt; "" i1="" &lt;&lt; i1 &lt;&lt; ""\n"";
}

struct foo {
    void member(int i0, int i1) {
        std::cout &lt;&lt; ""member function: this="" &lt;&lt; this &lt;&lt; "" i0="" &lt;&lt; i0 &lt;&lt; "" i1="" &lt;&lt; i1 &lt;&lt; ""\n"";
    }
};

void forwarder(void* context, int i0, int i1) {
    static_cast&lt;foo*&gt;(context)-&gt;member(i0, i1);
}

int main() {
    somefunction(&amp;non_member, 0);
    foo object;
    somefunction(&amp;forwarder, &amp;object);
}
</code></pre>
","12662961"
"What are forward declarations in C++?","158342","","<p>At: <a href=""http://www.learncpp.com/cpp-tutorial/19-header-files/"" rel=""noreferrer"">http://www.learncpp.com/cpp-tutorial/19-header-files/</a></p>

<p>The following is mentioned:</p>

<p>add.cpp:</p>

<pre><code>int add(int x, int y)
{
    return x + y;
}
</code></pre>

<p>main.cpp:</p>

<pre><code>#include &lt;iostream&gt;

int add(int x, int y); // forward declaration using function prototype

int main()
{
    using namespace std;
    cout &lt;&lt; ""The sum of 3 and 4 is "" &lt;&lt; add(3, 4) &lt;&lt; endl;
    return 0;
}
</code></pre>

<blockquote>
  <p>We used a forward declaration so that the compiler would know what ""<code>add</code>"" was when compiling <code>main.cpp</code>. As previously mentioned, writing forward declarations for every function you want to use that lives in another file can get tedious quickly.</p>
</blockquote>

<p>Can you explain ""<strong>forward declaration</strong>"" further? What is the problem if we use it in the <code>main()</code> function?</p>
","<p><strong>Why forward-declare is necessary in C++</strong></p>

<p>The compiler wants to ensure you haven't made spelling mistakes or passed the wrong number of arguments to the function. So, it insists that it first sees a declaration of 'add' (or any other types, classes or functions) before it is used.</p>

<p>This really just allows the compiler to do a better job of validating the code, and allows it to tidy up loose ends so it can produce a neat looking object file. If you didn't have to forward declare things, the compiler would produce an object file that would have to contain information about all the possible guesses as to what the function 'add' might be. And the linker would have to contain very clever logic to try and work out which 'add' you actually intended to call, when the 'add' function may live in a different object file the linker is joining with the one that uses add to produce a dll or exe. It's possible that the linker may get the wrong add. Say you wanted to use int add(int a, float b), but accidentally forgot to write it, but the linker found an already existing int add(int a, int b) and thought that was the right one and used that instead. Your code would compile, but wouldn't be doing what you expected.</p>

<p>So, just to keep things explicit and avoid the guessing etc, the compiler insists you declare everything before it is used.</p>

<p><strong>Difference between declaration and definition</strong></p>

<p>As an aside, it's important to know the difference between a declaration and a definition.  A declaration just gives enough code to show what something looks like, so for a function, this is the return type, calling convention, method name, arguments and their types. But the code for the method isn't required. For a definition, you need the declaration and then also the code for the function too.</p>

<p><strong>How forward-declarations can significantly reduce build times</strong></p>

<p>You can get the declaration of a function into your current .cpp or .h file by #includ'ing the header that already contains a declaration of the function. However, this can slow down your compile, especially if you #include a header into a .h instead of .cpp of your program, as everything that #includes the .h you're writing would end up #include'ing all the headers you wrote #includes for too. Suddenly, the compiler has #included pages and pages of code that it needs to compile even when you only wanted to use one or two functions. To avoid this, you can use a forward-declaration and just type the declaration of the function yourself at the top of the file. If you're only using a few functions, this can really make your compiles quicker compared to always #including the header.  For really large projects, the difference could be an hour or more of compile time bought down to a few minutes.</p>

<p><strong>Break cyclic references where two definitions both use each other</strong></p>

<p>Additionally, forward-declarations can help you break cycles. This is where two functions both try to use each other. When this happens (and it is a perfectly valid thing to do), you may #include one header file, but that header file tries to #include the header file you're currently writing.... which then #includes the other header, which #includes the one you're writing. You're stuck in a chicken and egg situation with each header file trying to re #include the other. To solve this, you can forward-declare the parts you need in one of the files and leave the #include out of that file.</p>

<p>Eg:</p>

<p><strong>File Car.h</strong></p>

<pre><code>#include ""Wheel.h""  // Include Wheel's definition so it can be used in Car.
#include &lt;vector&gt;

class Car
{
    std::vector&lt;Wheel&gt; wheels;
};
</code></pre>

<p><strong>File Wheel.h</strong></p>

<p>Hmm... the declaration of Car is required here as Wheel has a pointer to a Car, but Car.h can't be included here as it would result in a compiler error. If Car.h was included, that would then try to include Wheel.h which would include Car.h which would include Wheel.h and this would go on forever, so instead the compiler raises an error. The solution is to forward declare Car instead:</p>

<pre><code>class Car;     // forward declaration

class Wheel
{
    Car* car;
};
</code></pre>

<p>If class Wheel had methods which need to call methods of car, those methods could be defined in Wheel.cpp and Wheel.cpp is now able to include Car.h without causing a cycle.</p>
","4757718"
"Generating UML from C++ code?","158126","","<p>Is there a tool that can parse C++ files within a project and generate UML from it?</p>
","<p>Here are a few options:</p>

<p>Step-by-Step Guide to Reverse Engineering Code into UML Diagrams with Microsoft Visio 2000 - <a href=""http://msdn.microsoft.com/en-us/library/aa140255(office.10).aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/library/aa140255(office.10).aspx</a></p>

<p>BoUML - <a href=""http://bouml.fr/features.html"" rel=""noreferrer"">http://bouml.fr/features.html</a></p>

<p>StarUML - <a href=""http://staruml.sourceforge.net/en/"" rel=""noreferrer"">http://staruml.sourceforge.net/en/</a></p>

<p>Reverse engineering of the UML class diagram from C++ code in presence of weakly typed containers (2001) - <a href=""http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.27.9064"" rel=""noreferrer"">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.27.9064</a></p>

<p>Umbrello UML Modeller - <a href=""http://uml.sourceforge.net/"" rel=""noreferrer"">http://uml.sourceforge.net/</a></p>

<p>A list of other tools to look at - <a href=""http://plg.uwaterloo.ca/~migod/uml.html"" rel=""noreferrer"">http://plg.uwaterloo.ca/~migod/uml.html</a></p>
","406130"
"How to write log base(2) in c/c++","157225","","<p>Is there any way to write log(base 2) function?</p>

<p>The  C language has 2 built in function -->></p>

<p>1.<code>log</code> which is base e.</p>

<p>2.<code>log10</code> base 10;</p>

<p>But I need log function of base 2.How to calculate this.</p>
","<p>Simple math:</p>

<p>    log<sub>2</sub> (<em>x</em>) = log<sub><em>y</em></sub> (<em>x</em>) / log<sub><em>y</em></sub> (2)</p>

<p>where <em>y</em> can be anything, which for standard log functions is either 10 or <em>e</em>.</p>
","3064939"
"Eclipse CDT: Symbol 'cout' could not be resolved","157068","","<p>The error is as above. I have what should be all the necessary files include in the eclipse project:</p>

<pre><code>/usr/include/c++/4.6
/usr/include
/usr/include/linux
/usr/local/include
</code></pre>

<p>etc. </p>

<p>I tried <code>std::cout</code> and <code>using namespace std;</code> <code>cout</code> but it still says unresolved. </p>

<p>I have imported <code>iostream</code> and <code>cstdlib</code>.</p>

<p>Also, I'm on Ubuntu 12.04 with eclipse 3.7.2.</p>

<p>Code snippet:</p>

<pre><code>#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;iostream&gt;
#include ""XPLMDisplay.h""
#include ""XPLMGraphics.h""

int XPluginStart(char * outName,  char * outSig,  char * outDesc) {
    /* ... */
    std::cout &lt;&lt; ""test"" &lt;&lt; std::endl;
    /* ... */
}
</code></pre>

<p>using namespace std;</p>

<hr>

<p>UPDATE: I had created the eclipse project from existing code. Creating a new c++ project fixes it. I'll accept an answer that explains what setting in the existing project could cause this (so I don't have to cut &amp; paste all my projects).</p>
","<p>Most likely you have some system-specific include directories missing in your settings which makes it impossible for indexer to correctly parse iostream, thus the errors. Selecting <code>Index -&gt; Search For Unresolved Includes</code> in the context menu of the project will give you the list of unresolved includes which you can search in <code>/usr/include</code> and add containing directories to <code>C++ Include Paths and Symbols</code> in Project Properties.</p>

<p>On my system I had to add <code>/usr/include/c++/4.6/x86_64-linux-gnu</code> for <code>bits/c++config.h</code> to be resolved and a few more directories.</p>

<p>Don't forget to rebuild the index (Index -> Rebuild) after adding include directories.</p>
","10804034"
"How to calculate a time difference in C++","156653","","<p>What's the best way to calculate a time difference in C++? I'm timing the execution speed of a program, so I'm interested in milliseconds. Better yet, seconds.milliseconds..</p>

<p>The accepted answer works, but needs to include ctime or time.h as noted in the comments. </p>
","<p>See <a href=""http://en.cppreference.com/w/cpp/chrono/c/clock"" rel=""noreferrer""><code>std::clock()</code></a> function.</p>

<pre><code>const clock_t begin_time = clock();
// do something
std::cout &lt;&lt; float( clock () - begin_time ) /  CLOCKS_PER_SEC;
</code></pre>

<p>If you want calculate execution time for self ( not for user ), it is better to do this in clock ticks ( not seconds ).  </p>

<p><strong>EDIT:</strong><br>
responsible header files - <code>&lt;ctime&gt;</code> or <code>&lt;time.h&gt;</code></p>
","728070"
"Qt 5.1.1: Application failed to start because platform plugin ""windows"" is missing","155894","","<hr>

<p><strong>Edit:</strong>
Some people started to mark my question as a duplicate. Do not forget that many similar questions existed when I asked this one (see e.g. the list below). However, <strong>none of these answers solved my problem</strong>. After a long search I found <strong>a comment</strong> which had been ignored by all users pointing to the missing lib. Now, many months later, the comment has been changed to an answer. However, when I answered this question by msyself I intended to help other people by directly providing the solution. This should not be forgotten and so far my answer helped a lot of people. Therefore my question is definitely not a duplicate.  <strong>By the way: The accepted answer within the provided link on top does not solve the problem</strong>!</p>

<hr>

<p>Yes, i used the search:</p>

<p><a href=""https://stackoverflow.com/questions/17366967/failed-to-load-platform-plugin-windows-available-platforms-are-error"">Failed to load platform plugin &quot;windows&quot;. Available platforms are : Error</a></p>

<p><a href=""https://stackoverflow.com/questions/18368826/deploying-qt-c-application-from-visual-studio-qwindows-dll-error"">Deploying Qt C++ Application from Visual Studio qwindows.dll error</a></p>

<p><a href=""https://stackoverflow.com/questions/14963881/failed-to-load-platform-plugin-windows-available-platforms-are-windows-minim"">failed to load platform plugin &quot;windows&quot; Available platforms are: windows, minimal</a></p>

<p>However, in my case the problem still persists. I am using Qt 5.1.1 with Visual Studio 2012 and developed my Application on Windows 7 with Qt Creator 2.8.1. Application is compiled in ""Release""-mode and can be executed if directly started with Qt Creator.</p>

<p>However, when starting from the ""release""-Folder, i get the following message:</p>

<blockquote>
  <p>This application failed to start because it could not find or load the
  Qt platform plugin ""windows"".  Available platform plugins are:
  minimal, offscreen, windows.</p>
</blockquote>

<p>Folder structure looks like this:</p>

<pre><code>release
+ gui.exe
+ icudt51.dll
+ icuin51.dll
+ icuuc51.dll
+ libGLESv2.dll
+ Qt5Core.dll
+ Qt5Gui.dll
+ Qt5Widgets.dll
+ platforms
</code></pre>

<p>Platforms is the folder directly copied from <strong>Qt\Qt5.1.1\5.1.1\msvc2012\plugins\platforms</strong> including e.g. qwindows.dll. Does not matter if I rename it to ""platform"" as some other users did. Qt is still not finding the ""platform plugin windows"", where is my mistake?</p>
","<p>Okay, as posted here <a href=""https://stackoverflow.com/a/17271172/1458552"">https://stackoverflow.com/a/17271172/1458552</a> without much attention by other users: </p>

<p>The <strong>libEGL.dll</strong> was missing! Even though this has not been reported when trying to start the application (all other *.dlls such as Qt5Gui.dll had been reported).</p>
","20496175"
"Capture characters from standard input without waiting for enter to be pressed","155862","","<p>I can never remember how I do this because it comes up so infrequently for me. But in C or C++, what is the best way to read a character from standard input without waiting for a newline (press enter).</p>

<p>Also ideally it wouldn't echo the input character to the screen. I just want to capture keystrokes with out effecting the console screen.</p>
","<p>That's not possible portably in pure C++, because it depends too much on the terminal used that may be connected with stdin (they are usually line buffered). You can, however use a library for that:</p>

<ol>
<li>conio available with windows compilers. Use the function <code>_getch()</code> to give you a character without waiting for the enter key. I'm not a frequent windows developer, but i've seen my classmates just include <code>conio.h</code> and use it. See <a href=""http://en.wikipedia.org/wiki/Conio.h"" rel=""noreferrer"">conio.h</a> at wikipedia. It lists <code>getch</code>, which is declared deprecated in Visual C++. </li>
<li>curses available for linux, compatible curses implementations are available for windows too. It has also a <code>getch</code> function. (try <code>man getch</code> to view its manpage). See <a href=""http://en.wikipedia.org/wiki/Curses_%28programming_library%29"" rel=""noreferrer"">Curses</a> at wikipedia. </li>
</ol>

<p>I would recommend you to use curses if you aim for cross platform compatibility. That said, I'm sure there are functions that you can use to switch off line buffering (i believe that's called ""raw mode"", as opposed to ""cooked mode"" (look into <code>man stty</code>)). Curses would handle that for you in a portable manner if i'm not mistaken. </p>
","421871"
"Why am I getting string does not name a type Error?","155802","","<h3>game.cpp</h3>

<pre class=""lang-cpp prettyprint-override""><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;
#include ""game.h""
#include ""board.h""
#include ""piece.h""

using namespace std;
</code></pre>

<h3>game.h</h3>

<pre class=""lang-cpp prettyprint-override""><code>#ifndef GAME_H
#define GAME_H
#include &lt;string&gt;

class Game
{
    private:
        string white;
        string black;
        string title;
    public:
        Game(istream&amp;, ostream&amp;);
        void display(colour, short);
};

#endif
</code></pre>

<hr>

<p>The error is:</p>

<blockquote>
  <p><code>game.h:8 error: 'string' does not name a type</code><br>
  <code>game.h:9 error: 'string' does not name a type</code></p>
</blockquote>
","<p>Your <code>using</code> declaration is in <code>game.cpp</code>, not <code>game.h</code> where you actually declare string variables. You intended to put <code>using namespace std;</code> into the header, above the lines that use <code>string</code>, which would let those lines find the <code>string</code> type defined in the <code>std</code> namespace.</p>

<p>As <a href=""https://stackoverflow.com/questions/5527665/weird-string-does-not-name-a-type-error-c/5527754#5527754"">others have pointed out</a>, this is <a href=""https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-a-bad-practice-in-c"">not good practice</a> in headers -- everyone who includes that header will also involuntarily hit the <code>using</code> line and import <code>std</code> into their namespace; the right solution is to change those lines to use <code>std::string</code> instead</p>
","5527669"
"Convert Python program to C/C++ code?","155174","","<p>is it possible to convert a Python program to C/C++?</p>

<p>I need to implement a couple of algorithms, and I'm not sure if the performance gap is big enough to justify all the pain I'd go through when doing it in C/C++ (which I'm not good at). I thought about writing one simple algorithm and benchmark it against such a converted solution. If that alone is significantly faster than the Python version, then I'll have no other choice than doing it in C/C++.</p>
","<p>Yes. Look at <a href=""http://cython.org/"">Cython</a>. It does just that: Converts Python to C for speedups.</p>
","4650280"
"Ubuntu Linux C++ error: undefined reference to 'clock_gettime' and 'clock_settime'","155172","","<p>I am pretty new to Ubuntu, but I can't seem to get this to work.  It works fine on my school computers and I don't know what I am not doing.  I have checked <strong>usr/include</strong> and time.h is there just fine.  Here is the code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;time.h&gt;
using namespace std;

int main()
{
    timespec time1, time2;
    int temp;
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &amp;time1);
    //do stuff here
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &amp;time2);
    return 0;
}
</code></pre>

<p>I am using CodeBlocks as my IDE to build and run as well. Any help would be great, thank you.</p>
","<p>Add <code>-lrt</code> to the end of g++ command line. This links in the librt.so ""Real Time"" shared library.</p>
","2418175"
"What does this error mean: ""error: expected specifier-qualifier-list before 'type_name'""?","154949","","<p>I've been working on the Cell processor and I'm trying to create a struct that will hold an <code>spe_context_ptr_t</code>, which will be used within the thread to launch an spe context and will also hold a pointer to something else that will be passed to the spu context from within the thread (currently I'm trying to just make it a generic pointer, but in actuality it will be a pointer to another structure I've defined). When I try and compile, I get the following error:</p>

<pre><code>spu/../common.h:38: error: expected specifier-qualifier-list before 'spe_context_ptr_t'

// here is the offending line(s)

typedef struct _PTHREAD_BLOCK {
    spe_context_ptr_t * context; // Error happens here
    uintptr32_t  args; 
 } PTHREAD_BLOCK;
</code></pre>
","<p>The compiler doesn't know that spe_context_ptr_t is a type.  Check that the appropriate typedef is in scope when this code is compiled.  You may have forgotten to include the appropriate header file.</p>
","608185"
"'foo' was not declared in this scope c++","154433","","<p>I'm just learning c++ (first day looking at it since I took a 1 week summer camp years ago)</p>

<p>I was converting a program I'm working on in Java to C++:</p>

<pre><code>#ifndef ADD_H
#define ADD_H
#define _USE_MATH_DEFINES
#include &lt;iostream&gt;
#include &lt;math.h&gt;

using namespace std;

class Evaluatable {
public:
  virtual double evaluate(double x);
};

class SkewNormalEvalutatable : Evaluatable{
public:
  SkewNormalEvalutatable();
  double evaluate(double x){
    return 1 / sqrt(2 * M_PI) * pow(2.71828182845904523536, -x * x / 2);
  }
};

SkewNormalEvalutatable::SkewNormalEvalutatable()
{
}

double getSkewNormal(double skewValue, double x)
{
  SkewNormalEvalutatable e ();
  return 2 / sqrt(2 * M_PI) * pow(2.71828182845904523536, -x * x / 2) * integrate(-1000, skewValue * x, 10000, e);
}

// double normalDist(double x){
//   return 1 / Math.sqrt(2 * Math.PI) * Math.pow(Math.E, -x * x / 2);
// }

double integrate (double start, double stop,
                                     int numSteps, 
                                     Evaluatable evalObj)
{
  double stepSize = (stop - start) / (double)numSteps;
  start = start + stepSize / 2.0;
  return (stepSize * sum(start, stop, stepSize, evalObj));
}

double sum (double start, double stop,
                               double stepSize,
                               Evaluatable evalObj)
{
  double sum = 0.0, current = start;
  while (current &lt;= stop) {
    sum += evalObj.evaluate(current);
    current += stepSize;
  }
  return(sum);
}

// int main()
// {
//   cout &lt;&lt; getSkewNormal(10.0, 0) &lt;&lt; endl;
//   return 0;
// }
#endif
</code></pre>

<p>The errors were:</p>

<pre><code>SkewNormal.h: In function 'double getSkewNormal(double, double)' :
SkewNormal.h: 29: error: 'integrate' was not declared in this scope
SkewNormal.h: In function 'double integrate(double, double, int, Evaluatable)':
SkewNormal.h:41: error: 'sum' was not declared in this scope
</code></pre>

<p>Integrate and sum are both supposed to be functions</p>

<p>Here is the Java code, more or less the same:</p>

<pre><code>public static double negativelySkewed(double skew, int min, int max){
    return randomSkew(skew) * (max - min) + min;
}

public static double randomSkew(final double skew){
    final double xVal = Math.random();
    return 2 * normalDist(xVal) * Integral.integrate(-500, skew * xVal, 100000, new Evaluatable() {

        @Override
        public double evaluate(double value) {
            return normalDist(value);
        }
    });
}

public static double normalDist(double x){
    return 1 / Math.sqrt(2 * Math.PI) * Math.pow(Math.E, -x * x / 2);
}

/** A class to calculate summations and numeric integrals. The
 *  integral is calculated according to the midpoint rule.
 *
 *  Taken from Core Web Programming from 
 *  Prentice Hall and Sun Microsystems Press,
 *  http://www.corewebprogramming.com/.
 *  &amp;copy; 2001 Marty Hall and Larry Brown;
 *  may be freely used or adapted. 
 */

public static class Integral {
  /** Returns the sum of f(x) from x=start to x=stop, where the
   *  function f is defined by the evaluate method of the 
   *  Evaluatable object.
   */

  public static double sum(double start, double stop,
                           double stepSize,
                           Evaluatable evalObj) {
    double sum = 0.0, current = start;
    while (current &lt;= stop) {
      sum += evalObj.evaluate(current);
      current += stepSize;
    }
    return(sum);
  }

  /** Returns an approximation of the integral of f(x) from 
   *  start to stop, using the midpoint rule. The function f is
   *  defined by the evaluate method of the Evaluatable object.
   */

  public static double integrate(double start, double stop,
                                 int numSteps, 
                                 Evaluatable evalObj) {
    double stepSize = (stop - start) / (double)numSteps;
    start = start + stepSize / 2.0;
    return(stepSize * sum(start, stop, stepSize, evalObj));
  }
}

/** An interface for evaluating functions y = f(x) at a specific
 *  value. Both x and y are double-precision floating-point 
 *  numbers.
 *
 *  Taken from Core Web Programming from 
 *  Prentice Hall and Sun Microsystems Press,
 *  http://www.corewebprogramming.com/.
 *  &amp;copy; 2001 Marty Hall and Larry Brown;
 *  may be freely used or adapted. 
 */
public static interface Evaluatable {
      public double evaluate(double value);
}
</code></pre>

<p>I'm certain it's something very simple</p>

<p>Also, how do I call</p>

<pre><code>getSkewNormal(double skewValue, double x)
</code></pre>

<p>From a file outside SkewNormal.h?</p>
","<p>In C++ you are supposed to declare functions before you can use them. In your code <code>integrate</code> is not declared before the point of the first call to <code>integrate</code>. The same applies to <code>sum</code>. Hence the error. Either reorder your definitions so that function definition precedes the first call to that function, or introduce a [forward] non-defining declaration for each function.</p>

<p>Additionally, defining external non-inline functions in header files in a no-no in C++. Your definitions of <code>SkewNormalEvalutatable::SkewNormalEvalutatable</code>, <code>getSkewNormal</code>, <code>integrate</code> etc. have no business being in header file.</p>

<p>Also <code>SkewNormalEvalutatable e();</code> declaration in C++ declares a function <code>e</code>, not an object <code>e</code> as you seem to assume. The simple <code>SkewNormalEvalutatable e;</code> will declare an object initialized by default constructor.</p>

<p>Also, you receive the last parameter of <code>integrate</code> (and of <code>sum</code>) <em>by value</em> as an object of <code>Evaluatable</code> type. That means that attempting to pass <code>SkewNormalEvalutatable</code> as last argument of <code>integrate</code> will result in <code>SkewNormalEvalutatable</code> getting sliced to <code>Evaluatable</code>. Polymorphism won't work because of that. If you want polymorphic behavior, you have to receive this parameter by reference or by pointer, but not by value.</p>
","6283213"
"What is the meaning of prepended double colon ""::""?","153445","","<p>I found this line of a code in a class which I have to modify:</p>

<pre><code>::Configuration * tmpCo = m_configurationDB;//pointer to current db
</code></pre>

<p>and I don't know what exactly means the double colon prepended to the class name. Without that I would read: declaration of <code>tmpCo</code> as a pointer to an object of the class <code>Configuration</code>... but the prepended double colon confuses me.</p>

<p>I also found:</p>

<pre><code>typedef ::config::set ConfigSet;
</code></pre>
","<p>This ensures that resolution occurs from the global namespace, instead of starting at the namespace you're currently in. For instance, if you had two different classes called <code>Configuration</code> as such:</p>

<pre><code>class Configuration; // class 1, in global namespace
namespace MyApp
{
    class Configuration; // class 2, different from class 1
    function blah()
    {
        // resolves to MyApp::Configuration, class 2
        Configuration::doStuff(...) 
        // resolves to top-level Configuration, class 1
        ::Configuration::doStuff(...)
    }
}
</code></pre>

<p>Basically, it allows you to traverse up to the global namespace since your name might get clobbered by a new definition inside another namespace, in this case <code>MyApp</code>.</p>
","4269064"
"Benefits of inline functions in C++?","153335","","<p>What is the advantages/disadvantages of using inline functions in C++? I see that it only increases performance for the code that the compiler outputs, but with today's optimized compilers, fast CPUs, huge memory etc. (not like in the 1980&lt; where memory was scarce and everything had to fit in 100KB of memory) what advantages do they really have today?</p>
","<p>Inline functions are faster because you don't need to push and pop things on/off the stack like parameters and the return address; however, it does make your binary slightly larger. </p>

<p>Does it make a significant difference?  Not noticeably enough on modern hardware for most.  But it can make a difference, which is enough for some people. </p>

<p>Marking something inline does not give you a guarantee that it will be inline.  It's just a suggestion to the compiler.  Sometimes it's not possible such as when you have a virtual function, or when there is recursion involved.  And sometimes the compiler just chooses not to use it. </p>

<p>I could see a situation like this making a detectable difference:</p>

<pre><code>inline int aplusb_pow2(int a, int b) {
  return (a + b)*(a + b) ;
}

for(int a = 0; a &lt; 900000; ++a)
    for(int b = 0; b &lt; 900000; ++b)
        aplusb_pow2(a, b);
</code></pre>
","145841"
"How to compile C++ under Ubuntu Linux?","153105","","<p>I cut&amp;pasted the below code from <a href=""https://stackoverflow.com/questions/1696225/null-pointer-to-object-problems"">a previous question</a> into a file called ""avishay.cpp"" and then ran </p>

<pre><code>gcc avishay.cpp
</code></pre>

<p>only to get the following error messages from the linker. What went wrong, what should I have done?</p>

<pre><code>carl@carl-ubuntu:~/Projects/StackOverflow$ gcc -static avishay.cpp 
/tmp/cccRNW34.o: In function `__static_initialization_and_destruction_0(int, int)':
avishay.cpp:(.text+0x41): undefined reference to `std::ios_base::Init::Init()'
avishay.cpp:(.text+0x46): undefined reference to `std::ios_base::Init::~Init()'
/tmp/cccRNW34.o: In function `A::func()':
avishay.cpp:(.text._ZN1A4funcEv[A::func()]+0x11): undefined reference to `std::cout'
avishay.cpp:(.text._ZN1A4funcEv[A::func()]+0x16): undefined reference to `std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)'
avishay.cpp:(.text._ZN1A4funcEv[A::func()]+0x1e): undefined reference to `std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)'
avishay.cpp:(.text._ZN1A4funcEv[A::func()]+0x26): undefined reference to `std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::operator&lt;&lt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; (*)(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;))'
avishay.cpp:(.text._ZN1A4funcEv[A::func()]+0x36): undefined reference to `std::cout'
avishay.cpp:(.text._ZN1A4funcEv[A::func()]+0x3b): undefined reference to `std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::operator&lt;&lt;(int)'
/tmp/cccRNW34.o:(.eh_frame+0x12): undefined reference to `__gxx_personality_v0'
collect2: ld returned 1 exit status
</code></pre>

<p>The C++ code (not my code, I was just trying to run it):</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

class A
{
private:
   int _dmember;

public:
   void func()
   {
     cout&lt;&lt;""Inside A!! ""&lt;&lt;endl;
     cout&lt;&lt;_dmember; // crash when reach here.
   }
};

int main ()

{

    A* a= NULL;

    a-&gt;func(); // prints ""Inside A!!!"" 

    return 1;
}
</code></pre>
","<p>You should use <code>g++</code>, not <code>gcc</code>, to compile C++ programs.</p>

<p>For this particular program, I just typed</p>

<pre><code>make avishay
</code></pre>

<p>and let <code>make</code> figure out the rest. Gives your executable a decent name, too, instead of <code>a.out</code>.</p>
","1696309"
"How do I use a third-party DLL file in Visual Studio C++?","153035","","<p>I understand that I need to use LoadLibrary(). But what other steps do I need to take in order to use a third-party DLL file?</p>

<p>I simply jumped into C++ and this is the only part that I do not get (as a Java programmer). I am just looking into how I can use a <a href=""https://en.wikipedia.org/wiki/Qt_%28software%29"" rel=""noreferrer"">Qt</a> Library and tesseract-ocr, yet the process makes no sense to me and is so difficult to google.</p>

<p>How do I tell the compiler of the functions that I am using? Should there be an include file from the third-party vendor?</p>
","<p>As everyone else says, LoadLibrary is the hard way to do it, and is hardly ever necessary.</p>

<p>The DLL should have come with a .lib file for linking, and one or more header files to #include into your sources.  The header files will define the classes and function prototypes that you can use from the DLL.  You will need this even if you use LoadLibrary.</p>

<p>To link with the library, you might have to add the .lib file to the project configuration under Linker/Input/Additional Dependencies.</p>
","495899"
"How to debug heap corruption errors?","152960","","<p>I am debugging a (native) multi-threaded C++ application under Visual&nbsp;Studio&nbsp;2008. On seemingly random occasions, I get a ""Windows has triggered a break point..."" error with a note that this might be due to a corruption in the heap. These errors won't always crash the application right away, although it is likely to crash short after.</p>

<p>The big problem with these errors is that they pop up only after the corruption has actually taken place, which makes them very hard to track and debug, especially on a multi-threaded application.</p>

<ul>
<li><p>What sort of things can cause these errors?</p></li>
<li><p>How do I debug them?</p></li>
</ul>

<p>Tips, tools, methods, enlightments... are welcome.</p>
","<p><a href=""http://msdn.microsoft.com/en-us/library/ms220948.aspx"" rel=""noreferrer"">Application Verifier</a> combined with <a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/ff551063.aspx"" rel=""noreferrer"">Debugging Tools for Windows</a> is an amazing setup.  You can get both as a part of the <a href=""http://msdn.microsoft.com/en-us/windows/hardware/hh852365"" rel=""noreferrer"">Windows Driver Kit or the lighter Windows SDK</a>.  (Found out about Application Verifier when researching an <a href=""https://stackoverflow.com/questions/811951/mt-and-md-builds-crashing-but-only-when-debugger-isnt-attached-how-to-debug"">earlier question about a heap corruption issue</a>.)  I've used BoundsChecker and Insure++ (mentioned in other answers) in the past too, although I was surprised how much functionality was in Application Verifier.</p>

<p>Electric Fence (aka ""efence""), <a href=""http://dmalloc.com/"" rel=""noreferrer"">dmalloc</a>, <a href=""http://valgrind.org/"" rel=""noreferrer"">valgrind</a>, and so forth are all worth mentioning, but most of these are much easier to get running under *nix than Windows.  Valgrind is ridiculously flexible: I've debugged large server software with many heap issues using it.</p>

<p>When all else fails, you can provide your own global operator new/delete and malloc/calloc/realloc overloads -- how to do so will vary a bit depending on compiler and platform -- and this will be a bit of an investment -- but it may pay off over the long run.  The desirable feature list should look familiar from dmalloc and electricfence, and the surprisingly excellent book <a href=""http://rads.stackoverflow.com/amzn/click/1556155514"" rel=""noreferrer"">Writing Solid Code</a>:</p>

<ul>
<li><strong>sentry values</strong>: allow a little more space before and after each alloc, respecting maximum alignment requirement; fill with magic numbers (helps catch buffer overflows and underflows, and the occasional ""wild"" pointer)</li>
<li><strong>alloc fill</strong>: fill new allocations with a magic non-0 value -- Visual C++ will already do this for you in Debug builds (helps catch use of uninitialized vars)</li>
<li><strong>free fill</strong>: fill in freed memory with a magic non-0 value, designed to trigger a segfault if it's dereferenced in most cases (helps catch dangling pointers)</li>
<li><strong>delayed free</strong>: don't return freed memory to the heap for a while, keep it free filled but not available (helps catch more dangling pointers, catches proximate double-frees)</li>
<li><strong>tracking</strong>: being able to record where an allocation was made can sometimes be useful</li>
</ul>

<p>Note that in our local homebrew system (for an embedded target) we keep the tracking separate from most of the other stuff, because the run-time overhead is much higher.</p>

<hr>

<p>If you're interested in more reasons to overload these allocation functions/operators, take a look at <a href=""https://stackoverflow.com/a/1215807/80074"">my answer to ""Any reason to overload global operator new and delete?""</a>; shameless self-promotion aside, it lists other techniques that are helpful in tracking heap corruption errors, as well as other applicable tools.</p>
","1010811"
"Difference between string and char[] types in C++","152852","","<p>I know a little C and now I'm taking a look at C++.
I'm used to char arrays for dealing with C strings, but while I look at C++ code I see there are examples using both string type and char arrays:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main () {
  string mystr;
  cout &lt;&lt; ""What's your name? "";
  getline (cin, mystr);
  cout &lt;&lt; ""Hello "" &lt;&lt; mystr &lt;&lt; "".\n"";
  cout &lt;&lt; ""What is your favorite team? "";
  getline (cin, mystr);
  cout &lt;&lt; ""I like "" &lt;&lt; mystr &lt;&lt; "" too!\n"";
  return 0;
}
</code></pre>

<p>and</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

int main () {
  char name[256], title[256];

  cout &lt;&lt; ""Enter your name: "";
  cin.getline (name,256);

  cout &lt;&lt; ""Enter your favourite movie: "";
  cin.getline (title,256);

  cout &lt;&lt; name &lt;&lt; ""'s favourite movie is "" &lt;&lt; title;

  return 0;
}
</code></pre>

<p>(both examples from <a href=""http://www.cplusplus.com"" rel=""noreferrer"">http://www.cplusplus.com</a>)</p>

<p>I suppose this is a widely asked and answered (obvious?) question, but it would be nice if someone could tell me what's exactly the difference between that two ways for dealing with strings in C++ (performance, API integration, the way each one is better, ...).</p>

<p>Thank you.</p>
","<p>A char array is just that - an array of characters:</p>

<ul>
<li>If allocated on the stack (like in your example), it will always occupy eg. 256 bytes no matter how long the text it contains is</li>
<li>If allocated on the heap (using malloc() or new char[]) you're responsible for releasing the memory afterwards and you will always have the overhead of a heap allocation. </li>
<li>If you copy a text of more than 256 chars into the array, it might crash, produce ugly assertion messages or cause unexplainable (mis-)behavior somewhere else in your program.</li>
<li>To determine the text's length, the array has to be scanned, character by character, for a \0 character.</li>
</ul>

<p>A string is a class that contains a char array, but automatically manages it for you. Most string implementations have a built-in array of 16 characters (so short strings don't fragment the heap) and use the heap for longer strings.</p>

<p>You can access a string's char array like this:</p>

<pre><code>std::string myString = ""Hello World"";
const char *myStringChars = myString.c_str();
</code></pre>

<p>C++ strings can contain embedded \0 characters, know their length without counting, are faster than heap-allocated char arrays for short texts and protect you from buffer overruns. Plus they're more readable and easier to use.</p>

<p>-</p>

<p>However, C++ strings are not (very) suitable for usage across DLL boundaries, because this would require any user of such a DLL function to make sure he's using the exact same compiler and C++ runtime implementation, lest he risk his string class behaving differently.</p>

<p>Normally, a string class would also release its heap memory on the calling heap, so it will only be able to free memory again if you're using a shared (.dll or .so) version of the runtime.</p>

<p>In short: use C++ strings in all your internal functions and methods. If you ever write a .dll or .so, use C strings in your public (dll/so-exposed) functions.</p>
","1287357"
"Where are static variables stored (in C/C++)?","152754","","<p>In what segment (.BSS, .DATA, other) of an executable file are static variables stored so that they don't have name collision?
For example:</p>

<pre><code>
foo.c:                         bar.c:
static int foo = 1;            static int foo = 10;
void fooTest() {               void barTest() {
  static int bar = 2;            static int bar = 20;
  foo++;                         foo++;
  bar++;                         bar++;
  printf(""%d,%d"", foo, bar);     printf(""%d, %d"", foo, bar);
}                              }
</code></pre>

<p>If I compile both files and link it to a main that calls fooTest() and barTest repeatedly, the printf statements increment independently.  Makes sense since the foo and bar variables are local to the translation unit.</p>

<p>But where is the storage allocated?</p>

<p>To be clear, the assumption is that you have a toolchain that would output a file in ELF format.  Thus, I <em>believe</em> that there <strong>has</strong> to be some space reserved in the executable file for those static variables.<br>
For discussion purposes, lets assume we use the GCC toolchain.</p>
","<p>Where your statics go depends on if they are 0 initialized or not.  0 initialized static data goes in <a href=""http://en.wikipedia.org/wiki/.bss"" rel=""noreferrer"">.BSS (Block Started by Symbol)</a>, non 0 initialized data goes in <a href=""http://en.wikipedia.org/wiki/Data_segment"" rel=""noreferrer"">.DATA</a></p>
","93411"
"Reading and writing binary file","152086","","<p>I'm trying to write code to read a binary file into a buffer, then write the buffer to another file.  I have the following code, but the buffer only stores a couple of ASCII characters from the first line in the file and nothing else.</p>

<pre><code>int length;
char * buffer;

ifstream is;
is.open (""C:\\Final.gif"", ios::binary );
// get length of file:
is.seekg (0, ios::end);
length = is.tellg();
is.seekg (0, ios::beg);
// allocate memory:
buffer = new char [length];
// read data as a block:
is.read (buffer,length);
is.close();

FILE *pFile;
pFile = fopen (""C:\\myfile.gif"", ""w"");
fwrite (buffer , 1 , sizeof(buffer) , pFile );
</code></pre>
","<p>If you want to do this the C++ way, do it like this:</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;iterator&gt;
#include &lt;algorithm&gt;

int main()
{
    std::ifstream input( ""C:\\Final.gif"", std::ios::binary );
    std::ofstream output( ""C:\\myfile.gif"", std::ios::binary );

    std::copy( 
        std::istreambuf_iterator&lt;char&gt;(input), 
        std::istreambuf_iterator&lt;char&gt;( ),
        std::ostreambuf_iterator&lt;char&gt;(output));
}
</code></pre>

<p>If you need that data in a buffer to modify it or something, do this:</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;iterator&gt;
#include &lt;vector&gt;

int main()
{
    std::ifstream input( ""C:\\Final.gif"", std::ios::binary );
    // copies all data into buffer
    std::vector&lt;char&gt; buffer((
            std::istreambuf_iterator&lt;char&gt;(input)), 
            (std::istreambuf_iterator&lt;char&gt;()));
}
</code></pre>
","5420568"
"Finding smallest value in an array most efficiently","151929","","<p>There are N values in the array, and one of them is the smallest value. How can I find the smallest value most efficiently?</p>
","<p>If they are unsorted, you can't do much but look at each one, which is O(N), and when you're done you'll know the minimum.</p>

<hr>

<p>Pseudo-code:</p>

<pre><code>small = &lt;biggest value&gt; // such as std::numerical_limits&lt;int&gt;::max
for each element in array:
    if (element &lt; small)
        small = element
</code></pre>

<p>A better way reminded by <a href=""https://stackoverflow.com/users/38924/ben"">Ben</a> to me was to just initialize small with the first element:</p>

<pre><code>small = element[0]
for each element in array, starting from 1 (not 0):
    if (element &lt; small)
        small = element
</code></pre>

<p>The above is wrapped in the <a href=""http://www.cppreference.com/wiki/stl/algorithm/start"" rel=""nofollow noreferrer"">algorithm</a> header as <a href=""http://www.cppreference.com/wiki/stl/algorithm/min_element"" rel=""nofollow noreferrer"">std::min_element</a>.</p>

<hr>

<p>If you can keep your array sorted as items are added, then finding it will be O(1), since you can keep the smallest at front.</p>

<p>That's as good as it gets with arrays.</p>
","1042523"
"What exactly does stringstream do?","151886","","<p>I am trying to learn C++ since yesterday and I am using this document:<a href=""http://www.cplusplus.com/files/tutorial.pdf"">http://www.cplusplus.com/files/tutorial.pdf</a> (page 32) . I found a code in the document and I ran it. I tried inputting Rs 5.5 for price and an integer for quantity and the output was 0.
I tried inputting 5.5 and 6 and the output was correct.</p>

<pre><code>// stringstreams
#include &lt;iostream&gt; 
#include &lt;string&gt; 
#include &lt;sstream&gt; 

using namespace std; 

int main () 
{ 
  string mystr; 
  float price = 0; 
  int quantity = 0; 

  cout &lt;&lt; ""Enter price: ""; 
  getline (cin,mystr); 
  stringstream(mystr) &gt;&gt; price; 
  cout &lt;&lt; ""Enter quantity: ""; 
  getline (cin,mystr); 
  stringstream(mystr) &gt;&gt; quantity; 
  cout &lt;&lt; ""Total price: "" &lt;&lt; price*quantity &lt;&lt; endl; 
  return 0; 
}
</code></pre>

<p>Question: What exactly does the mystring command do? Quoting from the document: </p>

<blockquote>
  <p>""In this example, we acquire numeric values from the standard input
  indirectly. Instead of extracting numeric values  directly from the
  standard input, we get lines from the standard input (cin) into a
  string object (mystr), and then  we extract the integer values from
  this string into a variable of type int (quantity).""</p>
</blockquote>

<p>My impression was that the function will take the integral part of a string and use that as input.</p>

<p>(I don't exactly know how to ask a question here. I am also new to programming)
Thank you.</p>
","<p>Sometimes it is very convenient to use stringstream to convert between strings and other numerical types. The usage of stringstream is similar to the usage of iostream, so it is not a burden to learn.</p>

<p>Stringstreams can be used to both read strings and write data into strings. It mainly functions with a string buffer, but without an real I/O channel.</p>

<p>The basic member functions of stringstream class are </p>

<ul>
<li><p><code>str()</code>, which returns the contents of its buffer in string type. </p></li>
<li><p><code>str(string)</code>, which set the contents of the buffer to the string argument.</p></li>
</ul>

<p>Here is an example of how to use string streams.</p>

<pre><code>ostringstream os;
os &lt;&lt; ""dec: "" &lt;&lt; 15 &lt;&lt; "" hex: "" &lt;&lt; std::hex &lt;&lt; 15 &lt;&lt; endl;
cout &lt;&lt; os.str() &lt;&lt; endl;
</code></pre>

<p>The result is dec: 15 hex: f. </p>

<p><code>istringstream</code> is of more or less the same usage.</p>

<p>To summarize, stringstream is a convenient way to <strong>manipulate strings like an independent I/O device</strong>.</p>

<p>FYI, the inheritance relationships between the classes are:</p>

<p><img src=""https://i.stack.imgur.com/0fZlv.gif"" alt=""string stream classes""></p>
","20595061"
"How to append text to a text file in C++?","151805","","<p>How to append text to a text file in C++? Create new if does not exist and append if exist.</p>
","<pre><code>#include &lt;fstream&gt;

int main() {  
  std::ofstream outfile;

  outfile.open(""test.txt"", std::ios_base::app);
  outfile &lt;&lt; ""Data""; 
  return 0;
}
</code></pre>
","2393389"
"Why is reading lines from stdin much slower in C++ than Python?","151566","","<p>I wanted to compare reading lines of string input from stdin using Python and C++ and was shocked to see my C++ code run an order of magnitude slower than the equivalent Python code. Since my C++ is rusty and I'm not yet an expert Pythonista, please tell me if I'm doing something wrong or if I'm misunderstanding something.</p>

<hr>

<p>(TLDR answer: include the statement: <code>cin.sync_with_stdio(false)</code> or just use <code>fgets</code> instead.</p>

<p>TLDR results: scroll all the way down to the bottom of my question and look at the table.)</p>

<hr>

<p><strong>C++ code:</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;time.h&gt;

using namespace std;

int main() {
    string input_line;
    long line_count = 0;
    time_t start = time(NULL);
    int sec;
    int lps;

    while (cin) {
        getline(cin, input_line);
        if (!cin.eof())
            line_count++;
    };

    sec = (int) time(NULL) - start;
    cerr &lt;&lt; ""Read "" &lt;&lt; line_count &lt;&lt; "" lines in "" &lt;&lt; sec &lt;&lt; "" seconds."";
    if (sec &gt; 0) {
        lps = line_count / sec;
        cerr &lt;&lt; "" LPS: "" &lt;&lt; lps &lt;&lt; endl;
    } else
        cerr &lt;&lt; endl;
    return 0;
}

// Compiled with:
// g++ -O3 -o readline_test_cpp foo.cpp
</code></pre>

<p><strong>Python Equivalent:</strong></p>

<pre><code>#!/usr/bin/env python
import time
import sys

count = 0
start = time.time()

for line in  sys.stdin:
    count += 1

delta_sec = int(time.time() - start_time)
if delta_sec &gt;= 0:
    lines_per_sec = int(round(count/delta_sec))
    print(""Read {0} lines in {1} seconds. LPS: {2}"".format(count, delta_sec,
       lines_per_sec))
</code></pre>

<p><strong>Here are my results:</strong></p>

<pre><code>$ cat test_lines | ./readline_test_cpp
Read 5570000 lines in 9 seconds. LPS: 618889

$cat test_lines | ./readline_test.py
Read 5570000 lines in 1 seconds. LPS: 5570000
</code></pre>

<p><strong>Edit:</strong> <em>I should note that I tried this both under Mac&nbsp;OS&nbsp;X&nbsp;v10.6.8 (Snow&nbsp;Leopard) and Linux 2.6.32 (Red Hat Linux 6.2). The former is a MacBook Pro, and the latter is a very beefy server, not that this is too pertinent.</em></p>

<p><strong>Edit 2:</strong> <em>(Removed this edit, as no longer applicable)</em></p>

<pre><code>$ for i in {1..5}; do echo ""Test run $i at `date`""; echo -n ""CPP:""; cat test_lines | ./readline_test_cpp ; echo -n ""Python:""; cat test_lines | ./readline_test.py ; done
Test run 1 at Mon Feb 20 21:29:28 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 2 at Mon Feb 20 21:29:39 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 3 at Mon Feb 20 21:29:50 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 4 at Mon Feb 20 21:30:01 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 5 at Mon Feb 20 21:30:11 EST 2012
CPP:   Read 5570001 lines in 10 seconds. LPS: 557000
Python:Read 5570000 lines in  1 seconds. LPS: 5570000
</code></pre>

<p><strong>Edit 3:</strong></p>

<p>Okay, I tried J.N.'s suggestion of trying having Python store the line read: but it made no difference to python's speed.</p>

<p>I also tried J.N.'s suggestion of using <code>scanf</code> into a <code>char</code> array instead of <code>getline</code> into a <code>std::string</code>. Bingo! This resulted in equivalent performance for both Python and C++. (3,333,333 LPS with my input data, which by the way are just short lines of three fields each, usually about 20 characters wide, though sometimes more).</p>

<p>Code:</p>

<pre><code>char input_a[512];
char input_b[32];
char input_c[512];
while(scanf(""%s %s %s\n"", input_a, input_b, input_c) != EOF) {
    line_count++;
};
</code></pre>

<p>Speed:</p>

<pre><code>$ cat test_lines | ./readline_test_cpp2
Read 10000000 lines in 3 seconds. LPS: 3333333
$ cat test_lines | ./readline_test2.py
Read 10000000 lines in 3 seconds. LPS: 3333333
</code></pre>

<p>(Yes, I ran it several times.) So, I guess I will now use <code>scanf</code> instead of <code>getline</code>. But, I'm still curious if people think this performance hit from <code>std::string</code>/<code>getline</code> is typical and reasonable.</p>

<p><strong>Edit 4 (was: Final Edit / Solution):</strong></p>

<p>Adding:</p>

<pre><code>cin.sync_with_stdio(false);
</code></pre>

<p>Immediately above my original while loop above results in code that runs faster than Python.</p>

<p><strong>New performance comparison</strong> (this is on my 2011 MacBook Pro), using the original code, the original with the sync disabled, and the original Python code, respectively, on a file with 20M lines of text. Yes, I ran it several times to eliminate disk caching confound.</p>

<pre><code>$ /usr/bin/time cat test_lines_double | ./readline_test_cpp
       33.30 real         0.04 user         0.74 sys
Read 20000001 lines in 33 seconds. LPS: 606060
$ /usr/bin/time cat test_lines_double | ./readline_test_cpp1b
        3.79 real         0.01 user         0.50 sys
Read 20000000 lines in 4 seconds. LPS: 5000000
$ /usr/bin/time cat test_lines_double | ./readline_test.py
        6.88 real         0.01 user         0.38 sys
Read 20000000 lines in 6 seconds. LPS: 3333333
</code></pre>

<p>Thanks to @Vaughn Cato for his answer! <strong><em>Any elaboration people can make or good references people can point to as to why this synchronisation happens, what it means, when it's useful, and when it's okay to disable would be greatly appreciated by posterity.</em></strong> :-)</p>

<p><strong>Edit 5 / Better Solution:</strong></p>

<p>As suggested by Gandalf The Gray below, <code>gets</code> is even faster than <code>scanf</code> or the unsynchronized <code>cin</code> approach. I also learned that <a href=""http://c-faq.com/stdio/scanfprobs.html"" rel=""noreferrer""><code>scanf</code></a> and <a href=""http://c-faq.com/stdio/getsvsfgets.html"" rel=""noreferrer""><code>gets</code></a> are both UNSAFE and should NOT BE USED due to potential of buffer overflow. So, I wrote this iteration using <code>fgets</code>, the safer alternative to gets. Here are the pertinent lines for my fellow noobs:</p>

<pre><code>char input_line[MAX_LINE];
char *result;

//&lt;snip&gt;

while((result = fgets(input_line, MAX_LINE, stdin )) != NULL)
    line_count++;
if (ferror(stdin))
    perror(""Error reading stdin."");
</code></pre>

<p>Now, here are the results using an even larger file (100M lines; ~3.4&nbsp;GB) on a fast server with very fast disk, comparing the Python code, the unsynchronised <code>cin</code>, and the <code>fgets</code> approaches, as well as comparing with the wc utility. [The <code>scanf</code> version segmentation faulted and I don't feel like troubleshooting it.]:</p>

<pre><code>$ /usr/bin/time cat temp_big_file | readline_test.py
0.03user 2.04system 0:28.06elapsed 7%CPU (0avgtext+0avgdata 2464maxresident)k
0inputs+0outputs (0major+182minor)pagefaults 0swaps
Read 100000000 lines in 28 seconds. LPS: 3571428

$ /usr/bin/time cat temp_big_file | readline_test_unsync_cin
0.03user 1.64system 0:08.10elapsed 20%CPU (0avgtext+0avgdata 2464maxresident)k
0inputs+0outputs (0major+182minor)pagefaults 0swaps
Read 100000000 lines in 8 seconds. LPS: 12500000

$ /usr/bin/time cat temp_big_file | readline_test_fgets
0.00user 0.93system 0:07.01elapsed 13%CPU (0avgtext+0avgdata 2448maxresident)k
0inputs+0outputs (0major+181minor)pagefaults 0swaps
Read 100000000 lines in 7 seconds. LPS: 14285714

$ /usr/bin/time cat temp_big_file | wc -l
0.01user 1.34system 0:01.83elapsed 74%CPU (0avgtext+0avgdata 2464maxresident)k
0inputs+0outputs (0major+182minor)pagefaults 0swaps
100000000


Recap (lines per second):
python:         3,571,428
cin (no sync): 12,500,000
fgets:         14,285,714
wc:            54,644,808
</code></pre>

<p>As you can see, <code>fgets</code> is better, but still pretty far from wc performance; I'm pretty sure this is due to the fact that wc examines each character without any memory copying. I suspect that, at this point, other parts of the code will become the bottleneck, so I don't think optimizing to that level would even be worthwhile, even if possible (since, after all, I actually need to store the read lines in memory).</p>

<p>Also note that a small tradeoff with using a <code>char *</code> buffer and <code>fgets</code> vs. unsynchronised <code>cin</code> to string is that the latter can read lines of any length, while the former requires limiting input to some finite number.  In practice, this is probably a non-issue for reading most line-based input files, as the buffer can be set to a very large value that would not be exceeded by valid input.</p>

<p>This has been educational. Thanks to all for your comments and suggestions.</p>

<p><strong>Edit 6:</strong></p>

<p>As suggested by J.F. Sebastian in the comments below, the GNU wc utility uses plain C <code>read()</code> (within the safe-read.c wrapper) to read chunks (of 16k bytes) at a time and count new lines. Here's a Python equivalent based on J.F.'s code (just showing the relevant snippet that replaces the Python <code>for</code> loop:</p>

<pre><code>BUFFER_SIZE = 16384
count = sum(chunk.count('\n') for chunk in iter(partial(sys.stdin.read, BUFFER_SIZE), ''))
</code></pre>

<p>The performance of this version is quite fast (though still a bit slower than the raw C wc utility, of course):</p>

<pre><code>$ /usr/bin/time cat temp_big_file | readline_test3.py
0.01user 1.16system 0:04.74elapsed 24%CPU (0avgtext+0avgdata 2448maxresident)k
0inputs+0outputs (0major+181minor)pagefaults 0swaps
Read 100000000 lines in 4.7275 seconds. LPS: 21152829
</code></pre>

<p>Again, it's a bit silly for me to compare C++ <code>fgets</code>/<code>cin</code> and the first python code on the one hand to <code>wc -l</code> and this last Python snippet on the other, as the latter two don't actually store the read lines, but merely count newlines. Still, it's interesting to explore all the different implementations and think about the performance implications. Thanks again!</p>

<p><strong>Edit 7: Tiny benchmark addendum and recap</strong></p>

<p>For completeness, I thought I'd update the read speed for the same file on the same box with the original (synced) C++ code. Again, this is for a 100M line file on a fast disk. Here's the complete table now:</p>

<pre><code>Implementation      Lines per second
python (default)           3,571,428
cin (default/naive)          819,672
cin (no sync)             12,500,000
fgets                     14,285,714
wc (not fair comparison)  54,644,808
</code></pre>
","<p>By default, <code>cin</code> is synchronized with stdio, which causes it to avoid any input buffering.  If you add this to the top of your main, you should see much better performance:</p>

<pre><code>std::ios_base::sync_with_stdio(false);
</code></pre>

<p>Normally, when an input stream is buffered, instead of reading one character at a time, the stream will be read in larger chunks.  This reduces the number of system calls, which are typically relatively expensive.  However, since the <code>FILE*</code> based <code>stdio</code> and <code>iostreams</code> often have separate implementations and therefore separate buffers, this could lead to a problem if both were used together.  For example:</p>

<pre><code>int myvalue1;
cin &gt;&gt; myvalue1;
int myvalue2;
scanf(""%d"",&amp;myvalue2);
</code></pre>

<p>If more input was read by <code>cin</code> than it actually needed, then the second integer value wouldn't be available for the <code>scanf</code> function, which has its own independent buffer.  This would lead to unexpected results.</p>

<p>To avoid this, by default, streams are synchronized with <code>stdio</code>.  One common way to achieve this is to have <code>cin</code> read each character one at a time as needed using <code>stdio</code> functions.  Unfortunately, this introduces a lot of overhead.  For small amounts of input, this isn't a big problem, but when you are reading millions of lines, the performance penalty is significant.</p>

<p>Fortunately, the library designers decided that you should also be able to disable this feature to get improved performance if you knew what you were doing, so they provided the <code>sync_with_stdio</code> method.</p>
","9371717"
"Generate random numbers following a normal distribution in C/C++","151348","","<p>Does anyone know how I could easily generate random numbers following a normal distribution in C/C++ ?</p>

<p><a href=""http://www.mathworks.com/access/helpdesk/help/toolbox/stats/normrnd.html"" rel=""noreferrer"">http://www.mathworks.com/access/helpdesk/help/toolbox/stats/normrnd.html</a></p>

<p>I don't want to use any of Boost.</p>

<p>I know that Knuth talks about this at length but I don't have his books at hand right now.</p>
","<p>The <a href=""http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform"" rel=""noreferrer"">Box-Muller</a> transform is what is commonly used.  This correctly produces values with a normal distribution.</p>

<p><a href=""http://en.wikipedia.org/wiki/Normal_distribution#Generating_values_from_normal_distribution"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Normal_distribution#Generating_values_from_normal_distribution</a></p>

<p><a href=""http://en.wikipedia.org/wiki/Box_Muller_transform"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Box_Muller_transform</a></p>

<p>The math is easy.  You generate two uniform numbers and from those you get two normally distributed numbers.  Return one, save the other for the next request of a random number.</p>
","2325531"
"How can I create directory tree in C++/Linux?","151049","","<p>I want an easy way to create multiple directories in C++/Linux. </p>

<p>For example I want to save a file lola.file in the directory: </p>

<pre><code>/tmp/a/b/c
</code></pre>

<p>but if the directories are not there I want them to be created automagically. A working example would be perfect.</p>
","<p>Here's a C function that can be compiled with C++ compilers.</p>

<pre><code>/*
@(#)File:           $RCSfile: mkpath.c,v $
@(#)Version:        $Revision: 1.13 $
@(#)Last changed:   $Date: 2012/07/15 00:40:37 $
@(#)Purpose:        Create all directories in path
@(#)Author:         J Leffler
@(#)Copyright:      (C) JLSS 1990-91,1997-98,2001,2005,2008,2012
*/

/*TABSTOP=4*/

#include ""jlss.h""
#include ""emalloc.h""

#include &lt;errno.h&gt;
#ifdef HAVE_UNISTD_H
#include &lt;unistd.h&gt;
#endif /* HAVE_UNISTD_H */
#include &lt;string.h&gt;
#include ""sysstat.h""    /* Fix up for Windows - inc mode_t */

typedef struct stat Stat;

#ifndef lint
/* Prevent over-aggressive optimizers from eliminating ID string */
const char jlss_id_mkpath_c[] = ""@(#)$Id: mkpath.c,v 1.13 2012/07/15 00:40:37 jleffler Exp $"";
#endif /* lint */

static int do_mkdir(const char *path, mode_t mode)
{
    Stat            st;
    int             status = 0;

    if (stat(path, &amp;st) != 0)
    {
        /* Directory does not exist. EEXIST for race condition */
        if (mkdir(path, mode) != 0 &amp;&amp; errno != EEXIST)
            status = -1;
    }
    else if (!S_ISDIR(st.st_mode))
    {
        errno = ENOTDIR;
        status = -1;
    }

    return(status);
}

/**
** mkpath - ensure all directories in path exist
** Algorithm takes the pessimistic view and works top-down to ensure
** each directory in path exists, rather than optimistically creating
** the last element and working backwards.
*/
int mkpath(const char *path, mode_t mode)
{
    char           *pp;
    char           *sp;
    int             status;
    char           *copypath = STRDUP(path);

    status = 0;
    pp = copypath;
    while (status == 0 &amp;&amp; (sp = strchr(pp, '/')) != 0)
    {
        if (sp != pp)
        {
            /* Neither root nor double slash in path */
            *sp = '\0';
            status = do_mkdir(copypath, mode);
            *sp = '/';
        }
        pp = sp + 1;
    }
    if (status == 0)
        status = do_mkdir(path, mode);
    FREE(copypath);
    return (status);
}

#ifdef TEST

#include &lt;stdio.h&gt;

/*
** Stress test with parallel running of mkpath() function.
** Before the EEXIST test, code would fail.
** With the EEXIST test, code does not fail.
**
** Test shell script
** PREFIX=mkpath.$$
** NAME=./$PREFIX/sa/32/ad/13/23/13/12/13/sd/ds/ww/qq/ss/dd/zz/xx/dd/rr/ff/ff/ss/ss/ss/ss/ss/ss/ss/ss
** : ${MKPATH:=mkpath}
** ./$MKPATH $NAME &amp;
** [...repeat a dozen times or so...]
** ./$MKPATH $NAME &amp;
** wait
** rm -fr ./$PREFIX/
*/

int main(int argc, char **argv)
{
    int             i;

    for (i = 1; i &lt; argc; i++)
    {
        for (int j = 0; j &lt; 20; j++)
        {
            if (fork() == 0)
            {
                int rc = mkpath(argv[i], 0777);
                if (rc != 0)
                    fprintf(stderr, ""%d: failed to create (%d: %s): %s\n"",
                            (int)getpid(), errno, strerror(errno), argv[i]);
                exit(rc == 0 ? EXIT_SUCCESS : EXIT_FAILURE);
            }
        }
        int status;
        int fail = 0;
        while (wait(&amp;status) != -1)
        {
            if (WEXITSTATUS(status) != 0)
                fail = 1;
        }
        if (fail == 0)
            printf(""created: %s\n"", argv[i]);
    }
    return(0);
}

#endif /* TEST */
</code></pre>

<p>The macros <code>STRDUP()</code> and <code>FREE()</code> are error-checking versions of <code>strdup()</code> and <code>free()</code>, declared in <code>emalloc.h</code> (and implemented in <code>emalloc.c</code> and <code>estrdup.c</code>).  The <code>""sysstat.h""</code> header deals with broken versions of <code>&lt;sys/stat.h&gt;</code> and can be replaced by <code>&lt;sys/stat.h&gt;</code> on modern Unix systems (but there were many issues back in 1990).  And <code>""jlss.h""</code> declares <code>mkpath()</code>.</p>

<p>The change between v1.12 (previous) and v1.13 (above) is the test for <code>EEXIST</code> in <code>do_mkdir()</code>.  This was pointed out as necessary by <a href=""https://stackoverflow.com/users/205938/switch"">Switch</a> &mdash; thank you, Switch.  The test code has been upgraded and reproduced the problem on a MacBook Pro (2.3GHz Intel Core i7, running Mac OS X 10.7.4), and suggests that the problem is fixed in the revision (but testing can only show the presence of bugs, never their absence).</p>

<p><em>(You are hereby given permission to use this code for any purpose with attribution.)</em></p>
","675193"
"Can I use break to exit multiple nested for loops?","150657","","<p>Is it possible to use the <code>break</code> function to exit several nested <code>for</code> loops? If so, how would you go about doing this? Can you also control how many loops the break exits?</p>
","<p>AFAIK, C++ doesn't support naming loops, like Java and other languages do.  You can use a goto, or create a flag value that you use.  At the end of each loop check the flag value.  If it is set to true, then you can break out of that iteration.</p>
","1257760"
"How to run regasm.exe from command line other than Visual Studio command prompt?","150566","","<p>I want to run regasm.exe from cmd. which is available in c:\windows\Microsoft.net\framework\2.057</p>

<p>I do like this c:\ regasm.exe</p>

<p>It gives <em>regasm is not recognized as internal or external command</em>.</p>

<p>So I understood that I need to set the path for regasm.exe in environment variable.</p>

<p>For which variable do I need to set the path to run regasm as described above?</p>
","<p>In command prompt:</p>

<pre><code>SET PATH = ""%PATH%;%SystemRoot%\Microsoft.NET\Framework\v2.0.50727""
</code></pre>
","973955"
"Static array vs. dynamic array in C++","150557","","<p>What is the difference between a static array and a dynamic array in C++?</p>

<p>I have to do an assignment for my class and it says not to use static arrays, only dynamic arrays. I've looked in the book and online, but I don't seem to understand. </p>

<p>I thought static was created at compile time and dynamic at runtime, but I might be mistaking this with memory allocation.  </p>

<p>Can you explain the difference between static array and dynamic array in C++?</p>
","<p>Local arrays are created on the stack, and have automatic storage duration -- you don't need to manually manage memory, but they get destroyed when the function they're in ends. They necessarily have a fixed size:</p>

<pre><code>int foo[10];
</code></pre>

<p>Arrays created with <code>operator new[]</code> have dynamic storage duration and are stored on the heap (technically the ""free store""). They can have any size, but you need to allocate and free them yourself since they're not part of the stack frame:</p>

<pre><code>int* foo = new int[10];
delete[] foo;
</code></pre>
","2672106"
"Error: Jump to case label","150230","","<p>I wrote a program which involves use of switch statements... However on compilation it shows:</p>

<blockquote>
  <p>Error: Jump to case label.</p>
</blockquote>

<p>Why does it do that?</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;

using namespace std;

class contact
{
public:
    string name;
    int phonenumber;
    string address;
    contact() {
        name= ""Noname"";
        phonenumber= 0;
        address= ""Noaddress"";
    }
};

int main() {
    contact *d;
    d = new contact[200];
    string name,add;
    int choice,modchoice,t;//Variable for switch statement
    int phno,phno1;
    int i=0;
    int initsize=0, i1=0;//i is declared as a static int variable
    bool flag=false,flag_no_blank=false;

    //TAKE DATA FROM FILES.....
    //We create 3 files names, phone numbers, Address and then abstract the data from these files first!
    fstream f1;
    fstream f2;
    fstream f3;
    string file_input_name;
    string file_input_address;
    int file_input_number;

    f1.open(""./names"");
    while(f1&gt;&gt;file_input_name){
        d[i].name=file_input_name;
        i++;
    }
    initsize=i;

    f2.open(""./numbers"");
    while(f2&gt;&gt;file_input_number){
        d[i1].phonenumber=file_input_number;
        i1++;
    }
    i1=0;

    f3.open(""./address"");
    while(f3&gt;&gt;file_input_address){
        d[i1].address=file_input_address;
        i1++;
    }

    cout&lt;&lt;""\tWelcome to the phone Directory\n"";//Welcome Message
    do{
        //do-While Loop Starts
        cout&lt;&lt;""Select :\n1.Add New Contact\n2.Update Existing Contact\n3.Display All Contacts\n4.Search for a Contact\n5.Delete a  Contact\n6.Exit PhoneBook\n\n\n"";//Display all options
        cin&gt;&gt;choice;//Input Choice from user

        switch(choice){//Switch Loop Starts
        case 1:
            i++;//increment i so that values are now taken from the program and stored as different variables
            i1++;
            do{
                cout&lt;&lt;""\nEnter The Name\n"";
                cin&gt;&gt;name;
                if(name=="" ""){cout&lt;&lt;""Blank Entries are not allowed"";
                flag_no_blank=true;
                }
            }while(flag_no_blank==true);
            flag_no_blank=false;
            d[i].name=name;
            cout&lt;&lt;""\nEnter the Phone Number\n"";
            cin&gt;&gt;phno;
            d[i1].phonenumber=phno;
            cout&lt;&lt;""\nEnter the address\n"";
            cin&gt;&gt;add;
            d[i1].address=add;
            i1++;
            i++;
            break;//Exit Case 1 to the main menu
        case 2:
            cout&lt;&lt;""\nEnter the name\n"";//Here it is assumed that no two contacts can have same contact number or address but may have the same name.
            cin&gt;&gt;name;
            int k=0,val;
            cout&lt;&lt;""\n\nSearching.........\n\n"";
            for(int j=0;j&lt;=i;j++){
                if(d[j].name==name){
                    k++;
                    cout&lt;&lt;k&lt;&lt;"".\t""&lt;&lt;d[j].name&lt;&lt;""\t""&lt;&lt;d[j].phonenumber&lt;&lt;""\t""&lt;&lt;d[j].address&lt;&lt;""\n\n"";
                    val=j;
                }
            }
            char ch;
            cout&lt;&lt;""\nTotal of ""&lt;&lt;k&lt;&lt;"" Entries were found....Do you wish to edit?\n"";
            string staticname;
            staticname=d[val].name;
            cin&gt;&gt;ch;
            if(ch=='y'|| ch=='Y'){
                cout&lt;&lt;""Which entry do you wish to modify ?(enter the old telephone number)\n"";
                cin&gt;&gt;phno;
                for(int j=0;j&lt;=i;j++){
                    if(d[j].phonenumber==phno &amp;&amp; staticname==d[j].name){
                        cout&lt;&lt;""Do you wish to change the name?\n"";
                        cin&gt;&gt;ch;
                        if(ch=='y'||ch=='Y'){
                            cout&lt;&lt;""Enter new name\n"";
                            cin&gt;&gt;name;
                            d[j].name=name;
                        }
                        cout&lt;&lt;""Do you wish to change the number?\n"";
                        cin&gt;&gt;ch;
                        if(ch=='y'||ch=='Y'){
                            cout&lt;&lt;""Enter the new number\n"";
                            cin&gt;&gt;phno1;
                            d[j].phonenumber=phno1;
                        }
                        cout&lt;&lt;""Do you wish to change the address?\n"";
                        cin&gt;&gt;ch;
                        if(ch=='y'||ch=='Y'){
                            cout&lt;&lt;""Enter the new address\n"";
                            cin&gt;&gt;add;
                            d[j].address=add;
                        }
                    }
                }
            }
            break;
        case 3 : {
            cout&lt;&lt;""\n\tContents of PhoneBook:\n\n\tNames\tPhone-Numbers\tAddresses"";
            for(int t=0;t&lt;=i;t++){
                cout&lt;&lt;t+1&lt;&lt;"".\t""&lt;&lt;d[t].name&lt;&lt;""\t""&lt;&lt;d[t].phonenumber&lt;&lt;""\t""&lt;&lt;d[t].address;
            }
            break;
                 }
        }
    }
    while(flag==false);
    return 0;
}
</code></pre>
","<p>The problem is that variables declared in one <code>case</code> are still visible in the subsequent <code>case</code>s unless an explicit <code>{ }</code> block is used, <em>but they will not be initialized</em> because the initialization code belongs to another <code>case</code>.</p>

<p>In the following code, if <code>foo</code> equals 1, everything is ok, but if it equals 2, we'll accidentally use the <code>i</code> variable which does exist but probably contains garbage.</p>

<pre><code>switch(foo) {
  case 1:
    int i = 42; // i exists all the way to the end of the switch
    dostuff(i);
    break;
  case 2:
    dostuff(i*2); // i is *also* in scope here, but is not initialized!
}
</code></pre>

<p>Wrapping the case in an explicit block solves the problem:</p>

<pre><code>switch(foo) {
  case 1:
    {
        int i = 42; // i only exists within the { }
        dostuff(i);
        break;
    }
  case 2:
    dostuff(123); // Now you cannot use i accidentally
}
</code></pre>

<h2>Edit</h2>

<p>To further elaborate, <code>switch</code> statements are just a particularly fancy kind of a <code>goto</code>. Here's an analoguous piece of code exhibiting the same issue but using a <code>goto</code> instead of a <code>switch</code>:</p>

<pre><code>int main() {
    if(rand() % 2) // Toss a coin
        goto end;

    int i = 42;

  end:
    // We either skipped the declaration of i or not,
    // but either way the variable i exists here, because
    // variable scopes are resolved at compile time.
    // Whether the *initialization* code was run, though,
    // depends on whether rand returned 0 or 1.
    std::cout &lt;&lt; i;
}
</code></pre>
","5685578"
"Static methods in C++","150229","","<p>I am having a little trouble working with static methods in C++</p>

<p>Example .h:</p>

<pre><code>class IC_Utility {
public:
    IC_Utility();
    ~IC_Utility();

    std::string CP_PStringToString( const unsigned char *outString );
    void CP_StringToPString( std::string&amp; inString, unsigned char *outString, short inMaxLength );
    static void CP_StringToPString( std::string&amp; inString, unsigned char *outString);
    void CP_StringToPString( FxString&amp; inString, FxUChar *outString);

};
</code></pre>

<p>Example .cpp:</p>

<pre><code>static void IC_Utility::CP_StringToPString(std::string&amp; inString, unsigned char *outString)
{
    short       length = inString.length();

   if( outString != NULL )
    {
        if( length &gt;= 1 )
            CPLAT::CP_Utility::CP_CopyMemory( inString.c_str(), &amp;outString[ 1 ], length );

            outString[ 0 ] = length;
    }
}
</code></pre>

<p>I wanted to make a call like:</p>

<pre><code>IC_Utility::CP_StringToPString(directoryNameString, directoryName );
</code></pre>

<p>But I get an error:</p>

<pre><code>error: cannot declare member function 'static void IC_Utility::CP_StringToPString(std::string&amp;, unsigned char*)' to have static linkage
</code></pre>

<p>I dont understand why I cannot do this. Can anyone help me understand why and how to achieve what I want?</p>
","<p>Remove <code>static</code> keyword in method definition. Keep it just in your class definition.</p>

<p><code>static</code> keyword placed in .cpp file means that a certain function has a static linkage, ie. it is accessible only from other functions in the same file.</p>
","5980549"
"Programmatically find the number of cores on a machine","150213","","<p>Is there a way to determine how many cores a machine has from C/C++ in a platform-independent way? If no such thing exists, what about determining it per-platform (Windows/*nix/Mac)?</p>
","<h1>C++11</h1>

<pre><code>//may return 0 when not able to detect
unsigned concurentThreadsSupported = std::thread::hardware_concurrency();
</code></pre>

<p>Reference: <a href=""http://en.cppreference.com/w/cpp/thread/thread/hardware_concurrency"" rel=""noreferrer"">std::thread::hardware_concurrency</a></p>

<hr>

<p>In C++ prior to C++11, there's no portable way.  Instead, you'll need to use one or more of the following methods (guarded by appropriate <code>#ifdef</code> lines):</p>

<ul>
<li><h3>Win32</h3>

<pre><code>SYSTEM_INFO sysinfo;
GetSystemInfo(&amp;sysinfo);
int numCPU = sysinfo.dwNumberOfProcessors;
</code></pre></li>
<li><h3>Linux, Solaris, AIX and Mac OS X >=10.4 (i.e. Tiger onwards)</h3>

<pre><code>int numCPU = sysconf(_SC_NPROCESSORS_ONLN);
</code></pre></li>
<li><h3>FreeBSD, MacOS X, NetBSD, OpenBSD, etc.</h3>

<pre><code>int mib[4];
int numCPU;
std::size_t len = sizeof(numCPU); 

/* set the mib for hw.ncpu */
mib[0] = CTL_HW;
mib[1] = HW_AVAILCPU;  // alternatively, try HW_NCPU;

/* get the number of CPUs from the system */
sysctl(mib, 2, &amp;numCPU, &amp;len, NULL, 0);

if (numCPU &lt; 1) 
{
    mib[1] = HW_NCPU;
    sysctl(mib, 2, &amp;numCPU, &amp;len, NULL, 0);
    if (numCPU &lt; 1)
        numCPU = 1;
}
</code></pre></li>
<li><h3>HPUX</h3>

<pre><code>int numCPU = mpctl(MPC_GETNUMSPUS, NULL, NULL);
</code></pre></li>
<li><h3>IRIX</h3>

<pre><code>int numCPU = sysconf(_SC_NPROC_ONLN);
</code></pre></li>
<li><h3>Objective-C (Mac OS X >=10.5 or iOS)</h3>

<pre><code>NSUInteger a = [[NSProcessInfo processInfo] processorCount];
NSUInteger b = [[NSProcessInfo processInfo] activeProcessorCount];
</code></pre></li>
</ul>
","150971"
"How could i create a list in c++?","150197","","<p>How can I create a list in C++? I need it to create a linked list.  How would I go about doing that?  Are there good tutorials or examples I could follow?</p>
","<p>I take it that you know that C++ already has a linked list class, and you want to implement your own because you want to learn how to do it. </p>

<p>First, read <a href=""https://stackoverflow.com/questions/392397/arrays-whats-the-point"">Why do we use arrays instead of other data structures?</a> , which contains a good answer of basic data-structures. Then think about how to model them in C++:</p>

<pre><code>struct Node {
    int data;
    Node * next;
};
</code></pre>

<p>Basically that's all you need to implement a list! (a <em>very</em> simple one). Yet it has no abstractions, you have to link the items per hand:</p>

<pre><code>Node a={1}, b={20, &amp;a}, c={35, &amp;b} d={42, &amp;c};
</code></pre>

<p>Now, you have have a linked list of nodes, all allocated on the stack:</p>

<pre><code>d -&gt; c -&gt; b -&gt; a
42   35   20   1
</code></pre>

<p>Next step is to write a wrapper class <code>List</code> that points to the start node, and allows to add nodes as needed, keeping track of the head of the list (the following is very simplified):</p>

<pre><code>class List {
    struct Node {
        int data;
        Node * next;
    };

    Node * head;

public:
    List() {
        head = NULL;
    }

    ~List() {
        while(head != NULL) {
            Node * n = head-&gt;next;
            delete head;
            head = n;
        }
    }

    void add(int value) {
        Node * n = new Node;
        n-&gt;data = value;
        n-&gt;next = head;
        head = n;
    }

    // ...
};
</code></pre>

<p>Next step is to make the List a template, so that you can stuff other values (not only integers). </p>

<p>If you are familiar with smart pointers, you can then replace the raw pointers used with smart pointers. Often i find people recommend smart pointers to starters. But in my opinion you should first understand why you need smart pointers, and then use them. But that requires that you need first understand raw pointers. Otherwise, you use some magic tool, without knowing why you need it. </p>
","397969"
"How to pass arguments and redirect stdin from a file to program run in gdb?","150154","","<p>I usually run a program as :</p>

<pre><code>./a.out arg1 arg2 &lt;file
</code></pre>

<p>I would like to debug it using gdb.</p>

<p>I am aware of the <code>set args</code> functionality, but that only works from the gdb prompt.</p>
","<p>Pass the arguments to the <code>run</code> command from within gdb.</p>

<pre><code>$ gdb ./a.out
(gdb) r &lt; t
Starting program: /dir/a.out &lt; t
</code></pre>
","4521023"
"What's the best free C++ profiler for Windows?","150081","","<p>I'm looking for a profiler in order to find the bottleneck in my C++ code. I'd like to find a free, non-intrusive, and good profiling tool. I'm a game developer, and I use PIX for Xbox&nbsp;360 and found it very good, but it's not free. I know the Intel <a href=""https://en.wikipedia.org/wiki/VTune"" rel=""noreferrer"">VTune</a>, but it's not free either.</p>
","<p><a href=""http://gpuopen.com/compute-product/codexl/"" rel=""noreferrer"">CodeXL</a> has now superseded the End Of Line'd <a href=""http://developer.amd.com/tools-and-sdks/archive/amd-codeanalyst-performance-analyzer/"" rel=""noreferrer"">AMD Code Analyst</a> and both are free, but not as advanced as VTune. There's also <a href=""http://www.codersnotes.com/sleepy/"" rel=""noreferrer"">Sleepy</a>, which is very simple, but does the job in many cases. </p>
","67577"
"Why I cannot cout a string?","149985","","<p>Why I cannot <code>cout</code> <code>string</code> like this:</p>

<pre><code>string text ;
text = WordList[i].substr(0,20) ;
cout &lt;&lt; ""String is  : "" &lt;&lt; text &lt;&lt; endl ;
</code></pre>

<p>When I do this, I get the following error:</p>

<blockquote>
  <p>Error 2   error C2679: binary '&lt;&lt;' : no operator found which takes a right-hand operand of type 'std::string' (or there is no acceptable conversion)  c:\users\mollasadra\documents\visual studio 2008\projects\barnamec\barnamec\barnamec.cpp    67  barnamec**</p>
</blockquote>

<p>It is amazing, that even this is not working:</p>

<pre><code>string text ;
text = ""hello""  ;
cout &lt;&lt; ""String is  : "" &lt;&lt; text &lt;&lt; endl ;
</code></pre>
","<p>You need to include </p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
</code></pre>
","6321005"
"How to change string into QString?","149926","","<p>What is the most basic way to do it?</p>
","<p>If by string you mean <code>std::string</code> you can do it with this method:</p>

<p><a href=""http://doc.qt.io/qt-4.8/qstring.html#fromStdString"" rel=""noreferrer"">QString QString::fromStdString(const std::string &amp; str)</a></p>

<pre><code>std::string str = ""Hello world"";
QString qstr = QString::fromStdString(str);
</code></pre>

<hr>

<p>If by string you mean Ascii encoded <code>const char *</code> then you can use this method:</p>

<p><a href=""http://doc.qt.io/qt-4.8/qstring.html#fromAscii"" rel=""noreferrer"">QString QString::fromAscii(const char * str, int size = -1)</a></p>

<pre><code>const char* str = ""Hello world"";
QString qstr = QString::fromAscii(str);
</code></pre>

<hr>

<p>If you have <code>const char *</code> encoded with system encoding that can be read with <a href=""http://doc.qt.io/qt-4.8/qtextcodec.html#codecForLocale"" rel=""noreferrer"">QTextCodec::codecForLocale()</a> then you should use this method:</p>

<p><a href=""http://doc.qt.io/qt-4.8/qstring.html#fromLocal8Bit"" rel=""noreferrer"">QString QString::fromLocal8Bit(const char * str, int size = -1)</a></p>

<pre><code>const char* str = ""zażółć gęślą jaźń"";      // latin2 source file and system encoding
QString qstr = QString::fromLocal8Bit(str);
</code></pre>

<hr>

<p>If you have <code>const char *</code> that's UTF8 encoded then you'll need to use this method:</p>

<p><a href=""http://doc.qt.io/qt-4.8/qstring.html#fromUtf8"" rel=""noreferrer"">QString QString::fromUtf8(const char * str, int size = -1)</a></p>

<pre><code>const char* str = read_raw(""hello.txt""); // assuming hello.txt is UTF8 encoded, and read_raw() reads bytes from file into memory and returns pointer to the first byte as const char*
QString qstr = QString::fromUtf8(str);
</code></pre>

<hr>

<p>There's also method for <code>const ushort *</code> containing UTF16 encoded string:</p>

<p><a href=""http://doc.qt.io/qt-4.8/qstring.html#fromUtf16"" rel=""noreferrer"">QString QString::fromUtf16(const ushort * unicode, int size = -1)</a></p>

<pre><code>const ushort* str = read_raw(""hello.txt""); // assuming hello.txt is UTF16 encoded, and read_raw() reads bytes from file into memory and returns pointer to the first byte as const ushort*
QString qstr = QString::fromUtf16(str);
</code></pre>
","1814194"
"Vector of structs initialization","148834","","<p>I want know how I can add values to my vector of structs using the <code>push_back</code> method</p>

<pre><code>struct subject
{
  string name;
  int marks;
  int credits;
};


vector&lt;subject&gt; sub;
</code></pre>

<p>So now how can I add elements to it?</p>

<p>I have function that initializes string name(subject name to it)</p>

<pre><code>void setName(string s1, string s2, ...... string s6)
{
   // how can i set name too sub[0].name= ""english"", sub[1].name = ""math"" etc

  sub[0].name = s1 // gives segmentation fault; so how do I use push_back method?

  sub.name.push_back(s1);
  sub.name.push_back(s2);
  sub.name.push_back(s3);
  sub.name.push_back(s4);

  sub.name.push_back(s6);

}
</code></pre>

<p>Function call</p>

<pre><code>setName(""english"", ""math"", ""physics"" ... ""economics"");
</code></pre>
","<p>Create vector, push_back element, then modify it as so:</p>

<pre><code>struct subject {
    string name;
    int marks;
    int credits;
};


int main() {
    vector&lt;subject&gt; sub;

    //Push back new subject created with default constructor.
    sub.push_back(subject());

    //Vector now has 1 element @ index 0, so modify it.
    sub[0].name = ""english"";

    //Add a new element if you want another:
    sub.push_back(subject());

    //Modify its name and marks.
    sub[1].name = ""math"";
    sub[1].marks = 90;
}
</code></pre>

<p>You cant access a vector with [#] until an element exists in the vector at that index. This example populates the [#] and then modifies it afterward.</p>
","8067443"
"What is the difference between new/delete and malloc/free?","148784","","<p>What is the difference between <code>new</code>/<code>delete</code> and <code>malloc</code>/<code>free</code>?</p>

<p>Related (duplicate?): <a href=""https://stackoverflow.com/questions/184537/in-what-cases-do-i-use-malloc-vs-new"">In what cases do I use malloc vs new?</a></p>
","<h2>new/delete</h2>

<ul>
<li>Allocate/release memory

<ol>
<li>Memory allocated from 'Free Store'</li>
<li>Returns a fully typed pointer.</li>
<li>new (standard version) never returns a NULL (will throw on failure)</li>
<li>Are called with Type-ID (compiler calculates the size)</li>
<li>Has a version explicitly to handle arrays.</li>
<li>Reallocating (to get more space) not handled intuitively (because of copy constructor).</li>
<li>Whether they call malloc/free is implementation defined.</li>
<li>Can add a new memory allocator to deal with low memory (set_new_handler)</li>
<li>operator new/delete can be overridden legally</li>
<li><strong>constructor/destructor used to initialize/destroy the object</strong></li>
</ol></li>
</ul>

<h2>malloc/free</h2>

<ul>
<li>Allocates/release memory

<ol>
<li>Memory allocated from 'Heap'</li>
<li>Returns a void*</li>
<li>Returns NULL on failure</li>
<li>Must specify the size required in bytes.</li>
<li>Allocating array requires manual calculation of space.</li>
<li>Reallocating larger chunk of memory simple (No copy constructor to worry about)</li>
<li>They will <b>NOT</b> call new/delete</li>
<li>No way to splice user code into the allocation sequence to help with low memory.</li>
<li>malloc/free can <b>NOT</b> be overridden legally</li>
</ol></li>
</ul>

<p>Table comparison of the features:</p>

<pre class=""lang-none prettyprint-override""><code> Feature                  | new/delete                     | malloc/free                   
--------------------------+--------------------------------+-------------------------------
 Memory allocated from    | 'Free Store'                   | 'Heap'                        
 Returns                  | Fully typed pointer            | void*                         
 On failure               | Throws (never returns NULL)    | Returns NULL                  
 Required size            | Calculated by compiler         | Must be specified in bytes    
 Handling arrays          | Has an explicit version        | Requires manual calculations  
 Reallocating             | Not handled intuitively        | Simple (no copy constructor)  
 Call of reverse          | Implementation defined         | No                            
 Low memory cases         | Can add a new memory allocator | Not handled by user code      
 Overridable              | Yes                            | No                            
 Use of (con-)/destructor | Yes                            | No                            
</code></pre>

<p>Technically memory allocated by new comes from the 'Free Store' while memory allocated by malloc comes from the 'Heap'. Whether these two areas are the same is an implementation details, which is another reason that malloc and new can not be mixed.</p>
","240308"
"How to convert std::string to LPCSTR?","148592","","<p>How can I convert a <code>std::string</code> to <code>LPCSTR</code>? Also, how can I convert a <code>std::string</code> to <code>LPWSTR</code>?</p>

<p>I am totally confused with these <code>LPCSTR</code> <code>LPSTR</code> <code>LPWSTR</code> and <code>LPCWSTR</code>.</p>

<p>Are <code>LPWSTR</code> and <code>LPCWSTR</code> the same?</p>
","<p><code>str.c_str()</code> gives you a <code>const char *</code>, which is an <code>LPCSTR</code> (Long Pointer to Constant STRing) -- means that it's a pointer to a <code>0</code> terminated string of characters.  <code>W</code> means wide string (composed of <code>wchar_t</code> instead of <code>char</code>).</p>
","1200218"
"Why does the C++ STL not provide any ""tree"" containers?","148531","","<p>Why does the C++ STL not provide any ""tree"" containers, and what's the best thing to use instead?</p>

<p>I want to store a hierarchy of objects as a tree, rather than use a tree as a performance enhancement...</p>
","<p>There are two reasons you could want to use a tree:</p>

<p>You want to mirror the problem using a tree-like structure:<br>
For this we have <a href=""http://www.boost.org/doc/libs/1_36_0/libs/graph/doc/index.html"" rel=""nofollow noreferrer"">boost graph library</a></p>

<p>Or you want a container that has tree like access characteristics
For this we have</p>

<ul>
<li><a href=""http://en.cppreference.com/w/cpp/container/map"" rel=""nofollow noreferrer""><code>std::map</code></a></li>
<li><a href=""http://en.cppreference.com/w/cpp/container/set"" rel=""nofollow noreferrer""><code>std::set</code></a></li>
</ul>

<p>Basically the characteristics of these two containers is such that they practically have to be implemented using trees (though this is not actually a requirement).</p>

<p>See also this question:
<a href=""https://stackoverflow.com/questions/181630/whats-a-good-and-stable-c-tree-implementation"">C tree Implementation</a></p>
","205985"
"GCC -fPIC option","148346","","<p>I have read about <a href=""http://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#Code-Gen-Options"" rel=""noreferrer"">GCC's Options for Code Generation Conventions</a>, but could not understand what ""Generate position-independent code (PIC)"" does. Please give an example to explain me what does it mean.</p>
","<p>Position Independent Code means that the generated machine code is not dependent on being located at a specific address in order to work.</p>

<p>E.g. jumps would be generated as relative rather than absolute.</p>

<p>Pseudo-assembly:</p>

<p>PIC: This would work whether the code was at address 100 or 1000</p>

<pre><code>100: COMPARE REG1, REG2
101: JUMP_IF_EQUAL CURRENT+10
...
111: NOP
</code></pre>

<p>Non-PIC: This will only work if the code is at address 100</p>

<pre><code>100: COMPARE REG1, REG2
101: JUMP_IF_EQUAL 111
...
111: NOP
</code></pre>

<p>EDIT: In response to comment.</p>

<p>If your code is compiled with -fPIC, it's suitable for inclusion in a library - the library must be able to be relocated from its preferred location in memory to another address, there could be another already loaded library at the address your library prefers.</p>
","5311538"
"How do I print to the debug output window in a Win32 app?","148073","","<p>I've got a win32 project that I've loaded into Visual Studio 2005. I'd like to be able to print things to the Visual Studio output window, but I can't for the life of me work out how. I've tried 'printf' and 'cout &lt;&lt;' but my messages stay stubbornly unprinted.</p>

<p>Is there some sort of special way to print to the Visual Studio output window?</p>
","<p>You can use <a href=""http://msdn.microsoft.com/en-us/library/aa363362(VS.85).aspx"" rel=""noreferrer""><code>OutputDebugString</code></a>. <code>OutputDebugString</code> is a macro that depending on your build options either maps to <code>OutputDebugStringA(char const*)</code> or <code>OutputDebugStringW(wchar_t const*)</code>. In the later case you will have to supply a wide character string to the function. To create a wide character literal you can use the <code>L</code> prefix:</p>

<pre><code>OutputDebugStringW(L""My output string."");
</code></pre>

<p>Normally you will use the macro version together with the <code>_T</code> macro like this:</p>

<pre><code>OutputDebugString(_T(""My output string.""));
</code></pre>

<p>If you project is configured to build for UNICODE it will expand into:</p>

<pre><code>OutputDebugStringW(L""My output string."");
</code></pre>

<p>If you are not building for UNICODE it will expand into:</p>

<pre><code>OutputDebugStringA(""My output string."");
</code></pre>
","1333542"
"C++ wait for user input","147748","","<p>What would be the best way to wait for user input in console application?</p>

<pre><code>std::cout &lt;&lt; ""press any key to exit..."";
// wait for user to hit enter or another key
</code></pre>
","<p>Several ways to do so, here are some possible one-line approaches:</p>

<ol start=""2"">
<li><p>Use <code>getch()</code> (need <code>#include &lt;conio.h&gt;</code>).</p></li>
<li><p>Use <code>getchar()</code> (expected for <kbd>Enter</kbd>, need <code>#include &lt;iostream&gt;</code>).</p></li>
<li><p>Use <code>cin.get()</code> (expected for <kbd>Enter</kbd>, need <code>#include &lt;iostream&gt;</code>).</p></li>
<li><p>Use <strong><code>system(""pause"")</code></strong> (need <code>#include &lt;iostream&gt;</code>).</p>

<p>PS: This method will also print <code>Press any key to continue . . .</code> on the screen. (seems perfect choice for you :))</p></li>
</ol>

<hr>

<p><strong>Edit:</strong> As discussed <a href=""https://stackoverflow.com/a/9419951/2589776"">here</a>, There is no completely portable solution for this. Question 19.1 of the <a href=""http://c-faq.com/"" rel=""noreferrer"">comp.lang.c FAQ</a> covers this in some depth, with solutions for Windows, Unix-like systems, and even MS-DOS and VMS.</p>
","21257728"
"When should you use 'friend' in C++?","147694","","<p>I have been reading through the <a href=""http://yosefk.com/c++fqa/"" rel=""noreferrer"">C++ FAQ</a> and was curious about the <a href=""http://yosefk.com/c++fqa/friend.html"" rel=""noreferrer""><code>friend</code></a> declaration. I personally have never used it, however I am interested in exploring the language. </p>

<p>What is a good example of using <code>friend</code>?</p>

<hr>

<p>Reading the FAQ a bit longer I like the idea of the <code>&lt;&lt;</code> <code>&gt;&gt;</code> operator overloading and adding as a friend of those classes. However I am not sure how this doesn't break encapsulation. When can these exceptions stay within the strictness that is OOP?</p>
","<p>Firstly (IMO) don't listen to people who say <code>friend</code> is not useful. It IS useful. In many situations you will have objects with data or functionality that are not intended to be publicly available. This is particularly true of large codebases with many authors who may only be superficially familiar with different areas. </p>

<p>There ARE alternatives to the friend specifier, but often they are cumbersome (cpp-level concrete classes/masked typedefs) or not foolproof (comments or function name conventions).</p>

<p>Onto the answer; </p>

<p>The <code>friend</code> specifier allows the designated class access to protected data or functionality within the class making the friend statement. For example in the below code anyone may ask a child for their name, but only the mother and the child may change the name. </p>

<p>You can take this simple example further by considering a more complex class such as a Window. Quite likely a Window will have many function/data elements that should not be publicly accessible, but ARE needed by a related class such as a WindowManager.</p>

<pre><code>class Child
{
//Mother class members can access the private parts of class Child.
friend class Mother;

public:

  string name( void );

protected:

  void setName( string newName );
};
</code></pre>
","17443"
"What is the difference between 'typedef' and 'using' in C++11?","147538","","<p>I know that in C++11 we can now use <code>using</code> to write type alias, like <code>typedef</code>s:</p>

<pre><code>typedef int MyInt;
</code></pre>

<p>Is, from what I understand, equivalent to:</p>

<pre><code>using MyInt = int;
</code></pre>

<p>And that new syntax emerged from the effort to have a way to express ""<code>template typedef</code>"":</p>

<pre><code>template&lt; class T &gt; using MyType = AnotherType&lt; T, MyAllocatorType &gt;;
</code></pre>

<p>But, with the first two non-template examples, are there any other subtle differences in the standard? For example, <code>typedef</code>s do aliasing in a ""weak"" way. That is it does not create a new type but only a new name (conversions are implicit between those names).</p>

<p>Is it the same with <code>using</code> or does it generate a new type? Are there any differences?</p>
","<p>They are equivalent, from the standard (emphasis mine) (7.1.3.2):</p>

<blockquote>
  <p>A typedef-name can also be introduced by an alias-declaration. The
  identifier following the using keyword becomes a typedef-name and the
  optional attribute-specifier-seq following the identifier appertains
  to that typedef-name. <strong>It has the same semantics as if it were
  introduced by the typedef specifier.</strong> In particular, it
  does not define a new type and it shall not appear in the type-id.</p>
</blockquote>
","10748056"
"Simple linked list in C++","147288","","<p>I am about to create a linked that can insert and display until now:</p>

<pre><code>struct Node {
    int x;
    Node *next;
};
</code></pre>

<p>This is my initialisation function which only will be called for the first <code>Node</code>:</p>

<pre><code>void initNode(struct Node *head, int n){
    head-&gt;x = n;
    head-&gt;next = NULL;
}
</code></pre>

<p>To add the <code>Node</code>, and I think the reason why my linked list isn't working correct is in this function:</p>

<pre><code>void addNode(struct Node *head, int n){
    struct Node *NewNode = new Node;
    NewNode-&gt; x = n;
    NewNode -&gt; next = head;
    head = NewNode;
}
</code></pre>

<p>My <code>main</code> function:</p>

<pre><code>int _tmain(int argc, _TCHAR* argv[])
{
    struct Node *head = new Node;

    initNode(head, 5);
    addNode(head, 10);
    addNode(head, 20);
    return 0;
}
</code></pre>

<p>Let me run the program as I think it works. First I initialise the head <code>Node</code> as a <code>Node</code> like this:</p>

<pre><code>head = [ 5 |  NULL ]
</code></pre>

<p>Then I add a new node with n = 10 and pass head as my argument.</p>

<p>NewNode = [ x | next ] where next points at head. And then I change the place where head is pointing to NewNode, since NewNode is the first Node in LinkedList now.</p>

<p>Why isn't this working? I would appreciate any hints that could make me move in the right direction. I think LinkedList is a bit hard to understand.</p>

<p>When I'm printing this, it only returns 5:</p>
","<p>This is the most simple example I can think of in this case and is not tested. Please consider that this uses some bad practices and does not go the way you normally would go with C++ (initialize lists, separation of declaration and definition, and so on). But that are topics I can't cover here.</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

class LinkedList{
    // Struct inside the class LinkedList
    // This is one node which is not needed by the caller. It is just
    // for internal work.
    struct Node {
        int x;
        Node *next;
    };

// public member
public:
    // constructor
    LinkedList(){
        head = NULL; // set head to NULL
    }

    // destructor
    ~LinkedList(){
        Node *next = head;

        while(next) {              // iterate over all elements
            Node *deleteMe = next;
            next = next-&gt;next;     // save pointer to the next element
            delete deleteMe;       // delete the current entry
        }
    }

    // This prepends a new value at the beginning of the list
    void addValue(int val){
        Node *n = new Node();   // create new Node
        n-&gt;x = val;             // set value
        n-&gt;next = head;         // make the node point to the next node.
                                //  If the list is empty, this is NULL, so the end of the list --&gt; OK
        head = n;               // last but not least, make the head point at the new node.
    }

    // returns the first element in the list and deletes the Node.
    // caution, no error-checking here!
    int popValue(){
        Node *n = head;
        int ret = n-&gt;x;

        head = head-&gt;next;
        delete n;
        return ret;
    }

// private member
private:
    Node *head; // this is the private member variable. It is just a pointer to the first Node
};

int main() {
    LinkedList list;

    list.addValue(5);
    list.addValue(10);
    list.addValue(20);

    cout &lt;&lt; list.popValue() &lt;&lt; endl;
    cout &lt;&lt; list.popValue() &lt;&lt; endl;
    cout &lt;&lt; list.popValue() &lt;&lt; endl;
    // because there is no error checking in popValue(), the following
    // is undefined behavior. Probably the program will crash, because
    // there are no more values in the list.
    // cout &lt;&lt; list.popValue() &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>I would strongly suggest you to read a little bit about C++ and Object oriented programming. A good starting point could be this: <a href=""http://www.galileocomputing.de/1278?GPP=opoo"" rel=""nofollow noreferrer"">http://www.galileocomputing.de/1278?GPP=opoo</a></p>

<p>EDIT: added a pop function and some output. As you can see the program pushes 3 values 5, 10, 20 and afterwards pops them. The order is reversed afterwards because this list works in stack mode (LIFO, Last in First out)</p>
","22141970"
"How can I add reflection to a C++ application?","147239","","<p>I'd like to be able to introspect a C++ class for its name, contents (i.e. members and their types) etc. I'm talking native C++ here, not managed C++, which has reflection. I realise C++ supplies some limited information using RTTI. Which additional libraries (or other techniques) could supply this information?</p>
","<p><a href=""http://billyquith.github.io/ponder/"" rel=""nofollow"">Ponder</a> is a C++ reflection library, in answer to this question. I considered the options and decided to make my own since I couldn't find one that ticked all my boxes. </p>

<p>Although there are great answers to this question, I don't want to use tonnes of macros, or rely on Boost. Boost is a great library, but there are lots of small bespoke C++0x projects out that are simpler and have faster compile times. There are also advantages to being able to decorate a class externally, like wrapping a C++ library that doesn't (yet?) support C++11. It is fork of CAMP, using C++11, that <em>no longer requires Boost</em>.</p>
","34551440"
"How to use stringstream to separate comma separated strings","146922","","<p>I've got the following code:</p>

<pre><code>std::string str = ""abc def,ghi"";
std::stringstream ss(str);

string token;

while (ss &gt;&gt; token)
{
    printf(""%s\n"", token.c_str());
}
</code></pre>

<p>The output is:</p>

<blockquote>
  <p>abc<br>
  def,ghi</p>
</blockquote>

<p>So the <code>stringstream::&gt;&gt;</code> operator can separate strings by space but not by comma. Is there anyway to modify the above code so that I can get the following result?</p>

<blockquote>
  <p><strong>input</strong>: ""abc,def,ghi""  </p>
  
  <p><strong>output</strong>:<br>
  abc<br>
  def<br>
  ghi</p>
</blockquote>
","<pre><code>#include &lt;iostream&gt;
#include &lt;sstream&gt;

std::string input = ""abc,def,ghi"";
std::istringstream ss(input);
std::string token;

while(std::getline(ss, token, ',')) {
    std::cout &lt;&lt; token &lt;&lt; '\n';
}
</code></pre>

<blockquote>
  <p>abc<br>
  def<br>
  ghi   </p>
</blockquote>
","11719617"
"cout is not a member of std","146439","","<p>I'm practicing using mulitple files and header files etc. So I have this project which takes two numbers and then adds them. Pretty simple.</p>

<p>Here are my files:</p>

<p><strong>main.cpp</strong></p>

<pre><code>#include &lt;iostream&gt;
#include ""add.h""

int main()
{
    int x = readNumber();
    int y = readNumber();

    writeAnswer(x + y);

    return(0);
}
</code></pre>

<p><strong>io.cpp</strong></p>

<pre><code>int readNumber()
{
    int x;

    std::cout &lt;&lt; ""Number: "";
    std::cin &gt;&gt; x;

    return x;
}

void writeAnswer(int x)
{
    std::cout &lt;&lt; ""Answer: "";
    std::cout &lt;&lt; x;
}
</code></pre>

<p><strong>add.h</strong></p>

<pre><code>#ifndef ADD_H_INCLUDED
#define ADD_H_INCLUDED

int readNumber();
void writeAnswer(int x);

#endif // #ifndef ADD_H_INCLUDED
</code></pre>

<p>The error is showing up in io.cpp. The exact errors are:</p>

<p><a href=""http://gyazo.com/117f407f4717ad4472f52b57b628c514.png"" rel=""noreferrer"">http://gyazo.com/117f407f4717ad4472f52b57b628c514.png</a></p>

<p>Does anyone have any idea why this may be happening? Thanks.</p>

<p><strong>EDIT: I made a small project yesterday with the same amount of files (2 .cpp and 1.h) and I didn't include the iostream header in the other .cpp and it still compiled and ran fine.</strong></p>
","<p>add <code>#include &lt;iostream&gt;</code> to the start of <code>io.cpp</code> too.</p>
","11375960"
"Unnamed/anonymous namespaces vs. static functions","145685","","<p>A feature of C++ is the ability to create unnamed (anonymous) namespaces, like so:</p>

<pre><code>namespace {
    int cannotAccessOutsideThisFile() { ... }
} // namespace
</code></pre>

<p>You would think that such a feature would be useless -- since you can't specify the name of the namespace, it's impossible to access anything within it from outside. But these unnamed namespaces <em>are</em> accessible within the file they're created in, as if you had an implicit using-clause to them.</p>

<p>My question is, why or when would this be preferable to using static functions? Or are they essentially two ways of doing the exact same thing?</p>
","<p><s>The C++ Standard reads in section 7.3.1.1 Unnamed namespaces, paragraph 2:</s>
<s></p>

<blockquote>
  <p>The use of the static keyword is
  deprecated when declaring objects in a
  namespace scope, the unnamed-namespace
  provides a superior alternative.
  </s></p>
</blockquote>

<p>Static only applies to names of objects, functions, and anonymous unions, not to type declarations.</p>

<p><strong>Edit:</strong></p>

<p>The decision to deprecate this use of the static keyword (affect visibility of a variable declaration in a translation unit) has been reversed (<a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1012"" rel=""noreferrer"">ref</a>).  In this case using a static or an unnamed namespace are back to being essentially two ways of doing the exact same thing.  For more discussion please see <a href=""https://stackoverflow.com/questions/4726570/deprecation-of-the-static-keyword-no-more"">this</a> SO question.</p>

<p>Unnamed namespaces still have the advantage of allowing you to define translation-unit-local types.  Please see <a href=""https://stackoverflow.com/questions/4422507/superiority-of-unnamed-namespace-over-static"">this</a> SO question for more details.</p>

<p>Credit goes to <a href=""https://stackoverflow.com/users/1220179/mike-percy"">Mike Percy</a> for bringing this to my attention.</p>
","154482"
"How to generate a random number in C++?","145576","","<p>I'm trying to make a game with dice, and I need to have random numbers in it (to simulate the sides of the die.  I know how to make it between 1 and 6).  Using</p>

<pre><code>#include &lt;cstdlib&gt; 
#include &lt;ctime&gt; 
#include &lt;iostream&gt;

using namespace std;

int main() 
{ 
    srand((unsigned)time(0)); 
    int i;
    i = (rand()%6)+1; 
    cout &lt;&lt; i &lt;&lt; ""\n""; 
}
</code></pre>

<p>doesn't work very well, because when I run the program a few times, here's the output I get:</p>

<pre><code>6
1
1
1
1
1
2
2
2
2
5
2
</code></pre>

<p>So I want a command that will generate a <em>different</em> random number each time, not the same one 5 times in a row.  Is there a command that will do this?</p>
","<p>The most fundamental problem of your test application is that you call <code>srand</code> once and then call <code>rand</code> one time and exit.</p>

<p>The whole point of <code>srand</code> function is to initialize the sequence of pseudo-random numbers with a random seed. It means that if you pass the same value to <code>srand</code> in two different applications (with the same <code>srand</code>/<code>rand</code> implementation) you will get exactly the same sequence of <code>rand()</code> values read after that. But your pseudo-random sequence consists of one element only - your output consists of the first elements of different pseudo-random sequences seeded with time of 1 second precision. So what do you expect to see? When you happen to run application on the same second your result is the same of course (as Loki Astari already mentioned in a comment to the answer).</p>

<p>Actually you should call <code>srand(seed)</code> one time and then call <code>rand()</code> many times and analyze that sequence - it should look random.</p>
","13446015"
"C++ deprecated conversion from string constant to 'char*'","145263","","<p>I have a class with a <code>private char str[256];</code></p>

<p>and for it I have an explicit constructor:</p>

<pre><code>explicit myClass(const char *func)
{
    strcpy(str,func);
}
</code></pre>

<p>I call it as:</p>

<pre><code>myClass obj(""example"");
</code></pre>

<p>When I compile this I get the following warning:  </p>

<blockquote>
  <p>deprecated conversion from string constant to 'char*'</p>
</blockquote>

<p>Why is this happening?</p>
","<p>This is an error message you see whenever you have a situation like the following:</p>

<pre><code>char* pointer_to_nonconst = ""string literal"";
</code></pre>

<p>Why? Well, C and C++ differ in the type of the string literal. In C the type is array of char and in C++ it is <em>constant</em> array of char. In any case, you are not allowed to change the characters of the string literal, so the const in C++ is not really a restriction but more of a type safety thing. A conversion from <code>const char*</code> to <code>char*</code> is generally not possible without an explicit cast for safety reasons. But for backwards compatibility with C the language C++ still allows assigning a string literal to a <code>char*</code> and gives you a warning about this conversion being deprecated.</p>

<p>So, somwehere you are missing one or more <code>const</code>s in your program for const correctness. But the code you showed to us is not the problem as it does not do this kind of deprecated conversion. The warning must have come from some other place.</p>
","1524510"
"How to concatenate two strings in C++?","144786","","<p>I have a private class variable (char name[10]) to which I would like to add the .txt extension so that I can open the file present in the directory. How do I go about this? It would be preferable to create a new string variable that holds the concatenated string.</p>
","<p>First of all, don't use <code>char*</code> or <code>char[N]</code>. Use <code>std::string</code>, then everything else becomes so easy!</p>

<p>Examples,</p>

<pre><code>std::string s = ""Hello"";
std::string greet = s + "" World""; //concatenation easy!
</code></pre>

<p>Easy, isn't it? </p>

<p>Now if you need <code>char const *</code> for some reason, such as when you want to pass to some function, then you can do this:</p>

<pre><code>some_c_api(s.c_str(), s.size()); 
</code></pre>

<p>assuming this function is declared as:</p>

<pre><code>some_c_api(char const *input, size_t length);
</code></pre>

<p>Explore <code>std::string</code> yourself starting from here:</p>

<ul>
<li><a href=""http://en.cppreference.com/w/cpp/string/basic_string"" rel=""noreferrer"">Documentation of std::string</a></li>
</ul>

<p>Hope that helps.</p>
","15319868"
"Abstract Class vs Interface in C++","144596","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/318064/how-do-you-declare-an-interface-in-c"">How do you declare an interface in C++?</a>  </p>
</blockquote>



<p>This is a general question about C++. As you know, there is no clear distinction between <code>interface</code> and <code>abstract class</code> in C++ unlike Java and C#. When would it be more preferrable to use an <code>interface</code> instead of an <code>abstract class</code> in C++? Could you give some examples?</p>
","<p>I assume that with <strong>interface</strong> you mean a C++ class with only <em>pure virtual</em> methods (i.e. without any code), instead with <strong>abstract class</strong> you mean a C++ class with virtual methods that can be overridden, and some code, but <em>at least one pure virtual method</em> that makes the class not instantiable.
e.g.:</p>

<pre><code>class MyInterface
{
public:
  // Empty virtual destructor for proper cleanup
  virtual ~MyInterface() {}

  virtual void Method1() = 0;
  virtual void Method2() = 0;
};


class MyAbstractClass
{
public:
  virtual ~MyAbstractClass();

  virtual void Method1();
  virtual void Method2();
  void Method3();

  virtual void Method4() = 0; // make MyAbstractClass not instantiable
};
</code></pre>

<p>In Windows programming, <em>interfaces</em> are fundamental in <strong>COM</strong>. In fact, a COM component exports only interfaces (i.e. pointers to <em>v-tables</em>, i.e. pointers to set of function pointers). This helps defining an <em>ABI</em> (Application Binary Interface) that makes it possible to e.g. build a COM component in C++ and use it in Visual Basic, or build a COM component in C and use it in C++, or build a COM component with Visual C++ version X and use it with Visual C++ version Y.
In other words, with interfaces you have high decoupling between client code and server code.</p>

<p>Moreover, when you want to build DLL's with a C++ object-oriented interface (instead of pure C DLL's), as described in <a href=""http://www.codeproject.com/Articles/28969/HowTo-Export-C-classes-from-a-DLL"">this article</a>, it's better to export <em>interfaces</em> (the ""mature approach"") instead of C++ classes (this is basically what COM does, but without the burden of COM infrastructure).</p>

<p>I'd use an <em>interface</em> if I want to define a set of rules using which a component can be programmed, without specifying a concrete particular behavior. Classes that implement this interface will provide some concrete behavior themselves.</p>

<p>Instead, I'd use an <em>abstract class</em> when I want to provide some default <em>infrastructure code</em> and behavior, and make it possible to client code to derive from this abstract class, overriding the pure virtual methods with some custom code, and <em>complete</em> this behavior with custom code.
Think for example of an infrastructure for an OpenGL application.
You can define an abstract class that initializes OpenGL, sets up the window environment, etc. and then you can derive from this class and implement custom code for e.g. the rendering process and handling user input:</p>

<pre><code>// Abstract class for an OpenGL app.
// Creates rendering window, initializes OpenGL; 
// client code must derive from it 
// and implement rendering and user input.
class OpenGLApp
{
public:
  OpenGLApp();
  virtual ~OpenGLApp();
  ...

  // Run the app    
  void Run();


  // &lt;---- This behavior must be implemented by the client ----&gt;

  // Rendering
  virtual void Render() = 0;

  // Handle user input
  // (returns false to quit, true to continue looping)
  virtual bool HandleInput() = 0;

  // &lt;---------------------------------------------------------&gt;


private:
  //
  // Some infrastructure code
  //
  ... 
  void CreateRenderingWindow();
  void CreateOpenGLContext();
  void SwapBuffers();
};


class MyOpenGLDemo : public OpenGLApp
{
public:
  MyOpenGLDemo();
  virtual ~MyOpenGLDemo();

  // Rendering
  virtual void Render();  // implements rendering code

  // Handle user input
  virtual bool HandleInput(); // implements user input handling


  //  ... some other stuff
};
</code></pre>
","12855410"
"How do you install Boost on MacOS?","144082","","<p>How do you install Boost on MacOS?
Right now I can't find bjam for the Mac.</p>
","<p>Download <a href=""https://www.macports.org/"" rel=""noreferrer"">MacPorts</a>, and run the following command:</p>

<pre><code>sudo port install boost 
</code></pre>
","104389"
"When to use references vs. pointers","143414","","<p>I understand the syntax and general semantics of pointers versus references, but how should I decide when it is more-or-less appropriate to use references or pointers in an API?</p>

<p>Naturally some situations need one or the other (<code>operator++</code> needs a reference argument), but in general I'm finding I prefer to use pointers (and const pointers) as the syntax is clear that the variables are being passed destructively.</p>

<p>E.g. in the following code:</p>

<pre><code>void add_one(int&amp; n) { n += 1; }
void add_one(int* const n) { *n += 1; }
int main() {
  int a = 0;
  add_one(a); // Not clear that a may be modified
  add_one(&amp;a); // 'a' is clearly being passed destructively
}
</code></pre>

<p>With the pointer, it's always (more) obvious what's going on, so for APIs and the like where clarity is a big concern are pointers not more appropriate than references? Does that mean references should only be used when necessary (e.g. <code>operator++</code>)? Are there any performance concerns with one or the other?</p>

<p>EDIT (OUTDATED):</p>

<p>Besides allowing NULL values and dealing with raw arrays, it seems the choice comes down to personal preference. I've accepted the answer below that references <a href=""https://google.github.io/styleguide/cppguide.html#Reference_Arguments"" rel=""noreferrer"">Google's C++ Style Guide</a>, as they present the view that ""References can be confusing, as they have value syntax but pointer semantics."".</p>

<p>Due to the additional work required to sanitise pointer arguments that should not be NULL (e.g. <code>add_one(0)</code> will call the pointer version and break during runtime), it makes sense from a maintainability perspective to use references where an object MUST be present, though it is a shame to lose the syntactic clarity.</p>
","<p>Use reference wherever you can, pointers wherever you must.</p>

<p>Avoid pointers until you can't.</p>

<p>The reason is that pointers make things harder to follow/read, less safe and far more dangerous manipulations than any other constructs.</p>

<p>So the rule of thumb is to use pointers only if there is no other choice. </p>

<p>For example, returning a pointer to an object is a valid option when the function can return nullptr in some cases and it is assumed it will. That said, a better option would be to use something similar to <code>boost::optional</code>.</p>

<p>Another example is to use pointers to raw memory for specific memory manipulations. That should be hidden and localized in very narrow parts of the code, to help limit the dangerous parts of the whole code base. </p>

<p>In your example, there is no point in using a pointer as argument because:</p>

<ol>
<li>if you provide <code>nullptr</code> as the argument, you're going in undefined-behaviour-land;</li>
<li>the reference attribute version doesn't allow (without easy to spot tricks) the problem with 1.</li>
<li>the reference attribute version is simpler to understand for the user: you have to provide a valid object, not something that could be null.</li>
</ol>

<p>If the behaviour of the function would have to work with or without a given object, then using a pointer as attribute suggests that you can pass <code>nullptr</code> as the argument and it is fine for the function. That's kind of a contract between the user and the implementation.</p>
","7058373"
"Post-increment and pre-increment within a 'for' loop produce same output","143328","","<p>The following for loops produce identical results even though one uses post increment and the other pre-increment.</p>

<p>Here is the code:</p>

<pre><code>for(i=0; i&lt;5; i++) {
    printf(""%d"", i);
}

for(i=0; i&lt;5; ++i) {
    printf(""%d"", i);
}
</code></pre>

<p>I get the same output for both 'for' loops.  Am I missing something?</p>
","<p>After evaluating <code>i++</code> or <code>++i</code>, the new value of <code>i</code> will be the same in both cases.  The difference between pre- and post-increment is in the result of evaluating the expression itself.</p>

<p><code>++i</code> increments <code>i</code> and evaluates to the new value of <code>i</code>.</p>

<p><code>i++</code> evaluates to the old value of <code>i</code>, and increments <code>i</code>.</p>

<p>The reason this doesn't matter in a for loop is that the flow of control works roughly like this:</p>

<ol>
<li>test the condition</li>
<li>if it is false, terminate</li>
<li>if it is true, execute the body</li>
<li>execute the incrementation step</li>
</ol>

<p>Because (1) and (4) are decoupled, either pre- or post-increment can be used.</p>
","4706225"
"Throwing exceptions from constructors","143095","","<p>I'm having a debate with a co-worker about throwing exceptions from constructors, and thought I would like some feedback.</p>

<p>Is it ok to throw exceptions from constructors, from a design point of view?</p>

<p>Lets say I'm wrapping a posix mutex in a class, it would look something like this:</p>

<pre><code>class Mutex {
public:
  Mutex() {
    if (pthread_mutex_init(&amp;mutex_, 0) != 0) {
      throw MutexInitException();
    }
  }

  ~Mutex() {
    pthread_mutex_destroy(&amp;mutex_);
  }

  void lock() {
    if (pthread_mutex_lock(&amp;mutex_) != 0) {
      throw MutexLockException();
    }
  }

  void unlock() {
    if (pthread_mutex_unlock(&amp;mutex_) != 0) {
      throw MutexUnlockException();
    }
  }

private:
  pthread_mutex_t mutex_;
};
</code></pre>

<p>My question is, is this the standard way to do it? Because if the pthread mutex_init call fails the mutex object is unusable so throwing an exception ensures that the mutex won't be created.</p>

<p>Should I rather create a member function init for the Mutex class and call pthread mutex_init within which would return a bool based on pthread mutex_init's return? This way I don't have to use exceptions for such a low level object.</p>
","<p>Yes, throwing an exception from the failed constructor is the standard way of doing this. Read this FAQ about <a href=""https://isocpp.org/wiki/faq/exceptions#ctors-can-throw"" rel=""noreferrer"">Handling a constructor that fails</a> for more information. Having a init() method will also work, but everybody who creates the object of mutex has to remember that init() has to be called. I feel it goes against the <a href=""http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization"" rel=""noreferrer"">RAII</a> principle.</p>
","810850"
"Disabling Warnings generated via _CRT_SECURE_NO_DEPRECATE","143026","","<p>What is the best way to disable the warnings generated via <code>_CRT_SECURE_NO_DEPRECATE</code> that allows them to be reinstated with ease and will work across Visual Studio versions?</p>
","<p>If you don't want to pollute your source code (after all this warning presents only with Microsoft compiler), add <code>_CRT_SECURE_NO_WARNINGS</code> symbol to your project settings via ""Project""->""Properties""->""Configuration properties""->""C/C++""->""Preprocessor""->""Preprocessor definitions"".</p>

<p>Also you can define it just before you include a header file which generates this warning.
You should add something like this</p>

<pre><code>#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
</code></pre>

<p>And just a small remark, make sure you understand what this warning stands for, and maybe, if you don't intend to use other compilers than MSVC, consider using safer version of functions i.e. strcpy_s instead of strcpy.</p>
","119752"
"How to use makefiles in Visual Studio?","142906","","<p>I heard a lot about makefiles and how they simplify the compilation process.  I'm using VS2008.  Can somebody please suggest some online references or books where I can find out more about how to deal with them?</p>
","<p>A UNIX guy probably told you that. :)</p>

<p>You can use makefiles in VS, but when you do it bypasses all the built-in functionality in MSVC's IDE.  Makefiles are basically the reinterpret_cast of the builder.  IMO the simplest thing is just to use Solutions.</p>
","314601"
"GCC C++ Linker errors: Undefined reference to 'vtable for XXX', Undefined reference to 'ClassName::ClassName()'","142468","","<p>I'm setting up a C++ project, on Ubuntu x64, using Eclipse-CDT.  I'm basically doing a hello world and linking to a commerical 3rd party library.</p>

<p>I've included the header files, linked to their libraries, but I still get linker errors.  Are there some possible problems here other than the obvious (e.g. I am 99% sure I'm linking to the correct library).</p>

<ol>
<li>Is there a way to confirm the static libraries I am linking to are 64bit?</li>
<li>Is there a way to confirm that the library has the class (and methods) I am expecting it to have?</li>
</ol>

<p>Eclipse says:</p>

<pre>
Building target: LinkProblem
Invoking: GCC C++ Linker
g++ -L/home/notroot/workspace/somelib-3/somelib/target/bin -o""LinkProblem""  ./src/LinkProblem.o   -lsomelib1 -lpthread -lsomelib2 -lsomelib3
./src/LinkProblem.o: In function `main':
/home/notroot/workspace/LinkProblem/Debug/../src/LinkProblem.cpp:17: undefined reference to `SomeClass::close()'
./src/LinkProblem.o: In function `SomeOtherClass':
/home/notroot/workspace/somelib-3/somelib/include/sql/somefile.h:148: undefined reference to `SomeClass::SomeClass()'
/home/notroot/workspace/somelib-3/somelib/include/sql/somefile.h:148: undefined reference to `vtable for SomeOtherClass'
/home/notroot/workspace/somelib-3/somelib/include/sql/somefile.h:151: undefined reference to `SomeClass::~SomeClass()'
./src/LinkProblem.o: In function `~SomeOtherClass':
/home/notroot/workspace/somelib-3/somelib/include/sql/somefile.h:140: undefined reference to `vtable for SomeOtherClass'
/home/notroot/workspace/somelib-3/somelib/include/sql/somefile.h:140: undefined reference to `SomeClass::~SomeClass()'
/home/notroot/workspace/somelib-3/somelib/include/sql/somefile.h:140: undefined reference to `SomeClass::~SomeClass()'
collect2: ld returned 1 exit status
make: *** [LinkProblem] Error 1
</pre>
","<p>Assuming those methods are in one of the libs it looks like an ordering problem.</p>

<p>When linking libraries into an executable they are done in the order they are declared.<br>
Also the linker will only take the methods/functions required to resolve currently outstanding dependencies. If a subsequent library then uses methods/functions that were not originally required by the objects you will have missing dependencies.</p>

<p>How it works:</p>

<ul>
<li>Take all the object files and combine them into an executable</li>
<li>Resolve any dependencies among object files.</li>
<li>For-each library in order:

<ul>
<li>Check unresolved dependencies and see if the lib resolves them.</li>
<li>If so load required part into the executable.</li>
</ul></li>
</ul>

<p>Example:</p>

<p>Objects requires:</p>

<ul>
<li>Open</li>
<li>Close  </li>
<li>BatchRead</li>
<li>BatchWrite</li>
</ul>

<p>Lib 1 provides:</p>

<ul>
<li>Open</li>
<li>Close</li>
<li>read</li>
<li>write</li>
</ul>

<p>Lib 2 provides</p>

<ul>
<li>BatchRead  (but uses lib1:read)</li>
<li>BatchWrite (but uses lib1:write)</li>
</ul>

<p>If linked like this:</p>

<blockquote>
  <p>gcc -o plop plop.o -l1 -l2</p>
</blockquote>

<p>Then the linker will fail to resolve the read and write symbols.</p>

<p>But if I link the application like this:</p>

<blockquote>
  <p>gcc -o plop plop.o -l2 -l1</p>
</blockquote>

<p>Then it will link correctly. As l2 resolves the BatchRead and BatchWrite dependencies but also adds two new ones (read and write). When we link with l1 next all four dependencies are resolved.</p>
","1095321"
"How to Detect if I'm Compiling Code With Visual Studio 2008?","142075","","<p>Is there any way to know if I'm compiling under Microsoft Visual Studio 2008 ?</p>
","<p><code>_MSC_VER</code> and possibly <code>_MSC_FULL_VER</code> is what you need. You can also examine visualc.hpp in any recent boost install for some usage examples.</p>

<p>Some values for the more recent versions of the compiler are:</p>

<pre><code>MSVC++ 14.1 _MSC_VER == 1912 (Visual Studio 2017)
MSVC++ 14.1 _MSC_VER == 1911 (Visual Studio 2017)
MSVC++ 14.1 _MSC_VER == 1910 (Visual Studio 2017)
MSVC++ 14.0 _MSC_VER == 1900 (Visual Studio 2015)
MSVC++ 12.0 _MSC_VER == 1800 (Visual Studio 2013)
MSVC++ 11.0 _MSC_VER == 1700 (Visual Studio 2012)
MSVC++ 10.0 _MSC_VER == 1600 (Visual Studio 2010)
MSVC++ 9.0  _MSC_FULL_VER == 150030729 (Visual Studio 2008, SP1)
MSVC++ 9.0  _MSC_VER == 1500 (Visual Studio 2008)
MSVC++ 8.0  _MSC_VER == 1400 (Visual Studio 2005)
MSVC++ 7.1  _MSC_VER == 1310 (Visual Studio 2003)
MSVC++ 7.0  _MSC_VER == 1300
MSVC++ 6.0  _MSC_VER == 1200
MSVC++ 5.0  _MSC_VER == 1100
</code></pre>

<p>The version number above of course refers to the major version of your Visual studio you see in the about box, not to the year in the name.  A thorough list can be found <a href=""http://sourceforge.net/p/predef/wiki/Compilers/#microsoft-visual-c"" rel=""nofollow noreferrer"">here</a>. <a href=""https://blogs.msdn.microsoft.com/vcblog/2016/10/05/visual-c-compiler-version/"" rel=""nofollow noreferrer"">Starting recently</a>, Visual Studio will start updating it's ranges monotonically, meaning you should check ranges, rather than exact compiler values.</p>

<p><code>cl.exe /?</code> will give a hint of the used version, e.g.:</p>

<pre><code>c:\program files (x86)\microsoft visual studio 11.0\vc\bin&gt;cl /?
Microsoft (R) C/C++ Optimizing Compiler Version 17.00.50727.1 for x86
.....
</code></pre>
","70630"
"Converting an int to std::string","141806","","<p>What is the shortest way, preferably inline-able, to convert an int to a string? Answers using stl and boost will be welcomed.</p>
","<p>You can use <a href=""http://en.cppreference.com/w/cpp/string/basic_string/to_string""><strong>std::to_string</strong></a> in C++11</p>

<pre><code>int i = 3;
std::string str = std::to_string(i);
</code></pre>
","26843934"
"What is std::move(), and when should it be used?","141567","","<ol>
<li>What is it?</li>
<li>What does it do?</li>
<li>When should it be used?</li>
</ol>

<p>Good links are appreciated.</p>
","<p><a href=""http://en.wikipedia.org/wiki/C%2B%2B11#Rvalue_references_and_move_constructors"" rel=""noreferrer"">http://en.wikipedia.org/wiki/C%2B%2B11#Rvalue_references_and_move_constructors</a><br>
<a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2027.html#Move_Semantics"" rel=""noreferrer"">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2027.html#Move_Semantics</a></p>

<ol>
<li>In C++11, in addition to copy constructors, objects can have move constructors.<br>
(And in addition to copy assignment operators, they have move assignment operators.)</li>
<li>The move constructor is used instead of the copy constructor, if the object has type ""rvalue-reference"" (<code>Type &amp;&amp;</code>).</li>
<li><code>std::move()</code> is a cast that produces an rvalue-reference to an object, to enable moving from it.</li>
</ol>

<p>It's a new C++ way to avoid copies. For example, using a move constructor, a <code>std::vector</code> could just copy its internal pointer to data to the new object, leaving the moved object in an incorrect state, avoiding to copy all data. This would be C++-valid.</p>

<p>Try googling for move semantics, rvalue, perfect forwarding.</p>
","3413547"
"cc1plus: error: unrecognized command line option ""-std=c++11"" with g++","141535","","<p>I'm trying to compile using <code>g++</code> and either the <code>-std=c++11</code> or <code>c++0x</code> flags.</p>

<p>However, I get this error </p>

<pre><code>cc1plus: error: unrecognized command line option ""-std=c++11""
</code></pre>

<p><strong>g++ --version</strong></p>

<pre><code>g++ (GCC) 4.1.2 20080704 (Red Hat 4.1.2-54)
Copyright (C) 2006 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
</code></pre>
","<p>Seeing from your G++ version, you need to update it badly. C++11 has only been available since G++ 4.3. The most recent version is 4.7.</p>

<p>In versions pre-G++ 4.7, you'll have to use <code>-std=c++0x</code>, for more recent versions you can use <code>-std=c++11</code>.</p>
","14674646"
"Expression must have class type","141345","","<p>I have't coded in c++ for some time and I got stuck when I tried to compile this simple snippet</p>

<pre><code>#include ""iostream""
using namespace std;

class A
{
 public:
  void f() { cout&lt;&lt;""f()\n""; }
};

int main()
{
// A a; //this works
 A *a = new A(); //this doesn't
 a.f(); // ""f has not been declared""
 system(""pause"");
}
</code></pre>
","<p>It's a pointer, so instead try:</p>

<pre><code>a-&gt;f();
</code></pre>

<p>Basically the operator <code>.</code> (used to access an object's fields and methods) is used on objects and references, so:</p>

<pre><code>A a;
a.f();
A&amp; ref = a;
ref.f();
</code></pre>

<p>If you have a pointer type, you have to dereference it first to obtain a reference:</p>

<pre><code>A* ptr = new A();
(*ptr).a();
ptr-&gt;a();
</code></pre>

<p>The <code>a-&gt;b</code> notation is usually just a shorthand for <code>(*a).b</code>.</p>
","6547615"
"How to use std::sort to sort an array in C++","141337","","<p>How to use standard template library <code>std::sort()</code> to sort an array declared as 
<code>int v[2000]</code>;</p>

<p>Does C++ provide some function that can get the begin and end index of an array?</p>
","<p>In C++0x/11 we get <a href=""http://en.cppreference.com/w/cpp/iterator/begin""><code>std::begin</code></a> and <a href=""http://en.cppreference.com/w/cpp/iterator/end""><code>std::end</code></a> which are overloaded for arrays:</p>

<pre><code>#include &lt;algorithm&gt;

int main(){
  int v[2000];
  std::sort(std::begin(v), std::end(v));
}
</code></pre>

<p>If you don't have access to C++0x, it isn't hard to write them yourself:</p>

<pre><code>// for container with nested typedefs, non-const version
template&lt;class Cont&gt;
typename Cont::iterator begin(Cont&amp; c){
  return c.begin();
}

template&lt;class Cont&gt;
typename Cont::iterator end(Cont&amp; c){
  return c.end();
}

// const version
template&lt;class Cont&gt;
typename Cont::const_iterator begin(Cont const&amp; c){
  return c.begin();
}

template&lt;class Cont&gt;
typename Cont::const_iterator end(Cont const&amp; c){
  return c.end();
}

// overloads for C style arrays
template&lt;class T, std::size_t N&gt;
T* begin(T (&amp;arr)[N]){
  return &amp;arr[0];
}

template&lt;class T, std::size_t N&gt;
T* end(T (&amp;arr)[N]){
  return arr + N;
}
</code></pre>
","5897358"
"Error: free(): invalid next size (fast):","141260","","<p>What is this strange error I'm getting? I'm compiling C++ using g++ on Ubuntu 10.10. It pops up randomly when I run the executable (maybe 2 times in 8 hours, with 10 compiles an hour). However, if I make clean and recompile it goes away most of the time.</p>

<pre><code>*** glibc detected *** ./emailQueue.app: free(): invalid next size (fast): 0x0000000001c40270 ***
======= Backtrace: =========
/lib/libc.so.6(+0x774b6)[0x7f490d95e4b6]
/lib/libc.so.6(cfree+0x73)[0x7f490d964c83]
./emailQueue.app[0x401f47]
/lib/libc.so.6(__libc_start_main+0xfe)[0x7f490d905d8e]
./emailQueue.app[0x401cc9]
======= Memory map: ========
00400000-0040d000 r-xp 00000000 08:01 1311132                            /home/server/Projects/email/emailQueue.app
0060d000-0060e000 r--p 0000d000 08:01 1311132                            /home/server/Projects/email/emailQueue.app
0060e000-0060f000 rw-p 0000e000 08:01 1311132                            /home/server/Projects/email/emailQueue.app
01c40000-01c82000 rw-p 00000000 00:00 0                                  [heap]
7f4908000000-7f4908021000 rw-p 00000000 00:00 0 
7f4908021000-7f490c000000 ---p 00000000 00:00 0 
7f490ce52000-7f490ce5e000 r-xp 00000000 08:01 1051251                    /lib/libnss_files-2.12.1.so
7f490ce5e000-7f490d05d000 ---p 0000c000 08:01 1051251                    /lib/libnss_files-2.12.1.so
7f490d05d000-7f490d05e000 r--p 0000b000 08:01 1051251                    /lib/libnss_files-2.12.1.so
7f490d05e000-7f490d05f000 rw-p 0000c000 08:01 1051251                    /lib/libnss_files-2.12.1.so
7f490d05f000-7f490d075000 r-xp 00000000 08:01 1048770                    /lib/libz.so.1.2.3.4
7f490d075000-7f490d275000 ---p 00016000 08:01 1048770                    /lib/libz.so.1.2.3.4
7f490d275000-7f490d276000 r--p 00016000 08:01 1048770                    /lib/libz.so.1.2.3.4
7f490d276000-7f490d277000 rw-p 00017000 08:01 1048770                    /lib/libz.so.1.2.3.4
7f490d277000-7f490d28e000 r-xp 00000000 08:01 1051248                    /lib/libnsl-2.12.1.so
7f490d28e000-7f490d48d000 ---p 00017000 08:01 1051248                    /lib/libnsl-2.12.1.so
7f490d48d000-7f490d48e000 r--p 00016000 08:01 1051248                    /lib/libnsl-2.12.1.so
7f490d48e000-7f490d48f000 rw-p 00017000 08:01 1051248                    /lib/libnsl-2.12.1.so
7f490d48f000-7f490d491000 rw-p 00000000 00:00 0 
7f490d491000-7f490d49a000 r-xp 00000000 08:01 1051244                    /lib/libcrypt-2.12.1.so
7f490d49a000-7f490d69a000 ---p 00009000 08:01 1051244                    /lib/libcrypt-2.12.1.so
7f490d69a000-7f490d69b000 r--p 00009000 08:01 1051244                    /lib/libcrypt-2.12.1.so
7f490d69b000-7f490d69c000 rw-p 0000a000 08:01 1051244                    /lib/libcrypt-2.12.1.so
7f490d69c000-7f490d6ca000 rw-p 00000000 00:00 0 
7f490d6ca000-7f490d6e2000 r-xp 00000000 08:01 1051256                    /lib/libpthread-2.12.1.so
7f490d6e2000-7f490d8e1000 ---p 00018000 08:01 1051256                    /lib/libpthread-2.12.1.so
7f490d8e1000-7f490d8e2000 r--p 00017000 08:01 1051256                    /lib/libpthread-2.12.1.so
7f490d8e2000-7f490d8e3000 rw-p 00018000 08:01 1051256                    /lib/libpthread-2.12.1.so
7f490d8e3000-7f490d8e7000 rw-p 00000000 00:00 0 
7f490d8e7000-7f490da61000 r-xp 00000000 08:01 1048743                    /lib/libc-2.12.1.so
7f490da61000-7f490dc60000 ---p 0017a000 08:01 1048743                    /lib/libc-2.12.1.so
7f490dc60000-7f490dc64000 r--p 00179000 08:01 1048743                    /lib/libc-2.12.1.so
7f490dc64000-7f490dc65000 rw-p 0017d000 08:01 1048743                    /lib/libc-2.12.1.so
7f490dc65000-7f490dc6a000 rw-p 00000000 00:00 0 
7f490dc6a000-7f490dc7f000 r-xp 00000000 08:01 1048655                    /lib/libgcc_s.so.1
7f490dc7f000-7f490de7e000 ---p 00015000 08:01 1048655                    /lib/libgcc_s.so.1
7f490de7e000-7f490de7f000 r--p 00014000 08:01 1048655                    /lib/libgcc_s.so.1
7f490de7f000-7f490de80000 rw-p 00015000 08:01 1048655                    /lib/libgcc_s.so.1
7f490de80000-7f490df02000 r-xp 00000000 08:01 1051246                    /lib/libm-2.12.1.so
7f490df02000-7f490e101000 ---p 00082000 08:01 1051246                    /lib/libm-2.12.1.so
7f490e101000-7f490e102000 r--p 00081000 08:01 1051246                    /lib/libm-2.12.1.so
7f490e102000-7f490e103000 rw-p 00082000 08:01 1051246                    /lib/libm-2.12.1.so
7f490e103000-7f490e1eb000 r-xp 00000000 08:01 4853329                    /usr/lib/libstdc++.so.6.0.14
7f490e1eb000-7f490e3ea000 ---p 000e8000 08:01 4853329                    /usr/lib/libstdc++.so.6.0.14
7f490e3ea000-7f490e3f2000 r--p 000e7000 08:01 4853329                    /usr/lib/libstdc++.so.6.0.14
7f490e3f2000-7f490e3f4000 rw-p 000ef000 08:01 4853329                    /usr/lib/libstdc++.so.6.0.14
7f490e3f4000-7f490e409000 rw-p 00000000 00:00 0 
7f490e409000-7f490e5c7000 r-xp 00000000 08:01 4851315                    /usr/lib/libmysqlclient.so.16.0.0
7f490e5c7000-7f490e7c7000 ---p 001be000 08:01 4851315                    /usr/lib/libmysqlclient.so.16.0.0
7f490e7c7000-7f490e7cc000 r--p 001be000 08:01 4851315                    /usr/lib/libmysqlclient.so.16.0.0
7f490e7cc000-7f490e816000 rw-p 001c3000 08:01 4851315                    /usr/lib/libmysqlclient.so.16.0.0
7f490e816000-7f490e817000 rw-p 00000000 00:00 0 
7f490e817000-7f490e837000 r-xp 00000000 08:01 1048597                    /lib/ld-2.12.1.so
7f490ea15000-7f490ea1c000 rw-p 00000000 00:00 0 
7f490ea33000-7f490ea37000 rw-p 00000000 00:00 0 
7f490ea37000-7f490ea38000 r--p 00020000 08:01 1048597                    /lib/ld-2.12.1.so
7f490ea38000-7f490ea39000 rw-p 00021000 08:01 1048597                    /lib/ld-2.12.1.so
7f490ea39000-7f490ea3a000 rw-p 00000000 00:00 0 
7fffb85b9000-7fffb85da000 rw-p 00000000 00:00 0                          [stack]
7fffb85ff000-7fffb8600000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
Aborted
</code></pre>
","<p>It means that you have a memory error.  You may be trying to <code>free</code> a pointer that wasn't allocated by <code>malloc</code> (or <code>delete</code> an object that wasn't created by <code>new</code>) or you may be trying to <code>free</code>/<code>delete</code> such an object more than once.  You may be overflowing a buffer or otherwise writing to memory to which you shouldn't be writing, causing heap corruption.</p>

<p>Any number of programming errors can cause this problem.  You need to use a debugger, get a backtrace, and see what your program is doing when the error occurs.  If that fails and you determine you have corrupted the heap at some previous point in time, you may be in for some painful debugging (it may not be too painful if the project is small enough that you can tackle it piece by piece).</p>
","4729416"
"Creating files in C++","141105","","<p>I want to create a file using C++, but I have no idea how to do it. For example I want to create a text file named <code>Hello.txt</code>. </p>

<p>Can anyone help me?</p>
","<p>One way to do this is to create an instance of the ofstream class, and use it to write to your file. Here's a link to a website that has some example code, and some more information about the standard tools available with most implementations of C++:</p>

<p><a href=""http://en.cppreference.com/w/cpp/io/basic_ofstream"" rel=""noreferrer"">ofstream reference</a></p>

<p>For completeness, here's some example code:</p>

<pre><code>// using ofstream constructors.
#include &lt;iostream&gt;
#include &lt;fstream&gt;  

std::ofstream outfile (""test.txt"");

outfile &lt;&lt; ""my text here!"" &lt;&lt; std::endl;

outfile.close();
</code></pre>

<p>You want to use std::endl to end your lines. An alternative is using '\n' character. These two things are different, std::endl flushes the buffer and writes your output immediately while '\n' allows the outfile to put all of your output into a buffer and maybe write it later. </p>
","478088"
"Combining C++ and C - how does #ifdef __cplusplus work?","140909","","<p>I'm working on a project that has a lot of legacy <strong>C</strong> code.  We've started writing in C++, with the intent to eventually convert the legacy code, as well.  I'm a little confused about how the <strong>C</strong> and C++ interact.  I understand that by wrapping the <strong>C</strong> code with <code>extern ""C""</code> the C++ compiler will not mangle the <strong>C</strong> code's names, but I'm not entirely sure how to implement this.</p>

<p>So, at the top of each <strong>C</strong> header file (after the include guards), we have</p>

<pre><code>#ifdef __cplusplus
extern ""C"" {
#endif
</code></pre>

<p>and at the bottom, we write</p>

<pre><code>#ifdef __cplusplus
}
#endif
</code></pre>

<p>In between the two, we have all of our includes, typedefs, and function prototypes.  I have a few questions, to see if I'm understanding this correctly:</p>

<ol>
<li><p>If I have a C++ file A.hh which
includes a <strong>C</strong> header file B.h,
includes another <strong>C</strong> header file C.h,
how does this work?  I think that
when the compiler steps into B.h,
<code>__cplusplus</code> will be defined, so it
will wrap the code with <code>extern ""C""</code>
(and <code>__cplusplus</code> will not be
defined inside this block).  So,
when it steps into C.h,
<code>__cplusplus</code> will not be defined
and the code will not be wrapped in
<code>extern ""C""</code>.  Is this correct?</p></li>
<li><p>Is there anything wrong with
wrapping a piece of code with
<code>extern ""C"" { extern ""C"" { .. } }</code>? 
What will the second <code>extern ""C""</code>
do?</p></li>
<li><p>We don't put this wrapper around the .c files, just the .h files.  So, what happens if a function doesn't have a prototype? Does the compiler think that it's a C++ function?</p></li>
<li><p>We are also using some third-party
code which is written in <strong>C</strong>, and does
not have this sort of wrapper around
it.  Any time I include a header
from that library, I've been putting
an <code>extern ""C""</code> around the #include.
Is this the right way to deal with
that?</p></li>
<li><p>Finally, is this set up a good idea?
Is there anything else we should do?
We're going to be mixing <strong>C</strong> and C++
for the foreseeable future, and I
want to make sure we're covering all
our bases.</p></li>
</ol>
","<p><code>extern ""C""</code> doesn't really change the way that the compiler reads the code.  If your code is in a .c file, it will be compiled as C, if it is in a .cpp file, it will be compiled as C++ (unless you do something strange to your configuration).</p>

<p>What <code>extern ""C""</code> does is affect linkage.  C++ functions, when compiled, have their names mangled -- this is what makes overloading possible.  The function name gets modified based on the types and number of parameters, so that two functions with the same name will have different symbol names.</p>

<p>Code inside an <code>extern ""C""</code> is still C++ code.  There are limitations on what you can do in an extern ""C"" block, but they're all about linkage.  You can't define any new symbols that can't be built with C linkage.  That means no classes or templates, for example.</p>

<p><code>extern ""C""</code> blocks nest nicely.  There's also <code>extern ""C++""</code> if you find yourself hopelessly trapped inside of <code>extern ""C""</code> regions, but it isn't such a good idea from a cleanliness perspective.</p>

<p>Now, specifically regarding your numbered questions:</p>

<p>Regarding #1: __cplusplus should be defined inside of <code>extern ""C""</code> blocks.  This doesn't matter, though, since the blocks should nest neatly.</p>

<p>Regarding #2: __cplusplus will be defined for any compilation unit that is being run through the C++ compiler.  Generally, that means .cpp files and any files being included by that .cpp file.  The same .h (or .hh or .hpp or what-have-you) could be interpreted as C or C++ at different times, if different compilation units include them.  If you want the prototypes in the .h file to refer to C symbol names, then they must have <code>extern ""C""</code> when being interpreted as C++, and they should not have <code>extern ""C""</code> when being interpreted as C -- hence the <code>#ifdef __cplusplus</code> checking.</p>

<p>To answer your question #3:  functions without prototypes will have C++ linkage if they are in .cpp files and not inside of an <code>extern ""C""</code> block.  This is fine, though, because if it has no prototype, it can only be called by other functions in the same file, and then you don't generally care what the linkage looks like, because you aren't planning on having that function be called by anything outside the same compilation unit anyway.</p>

<p>For #4, you've got it exactly.  If you are including a header for code that has C linkage (such as code that was compiled by a C compiler), then you must <code>extern ""C""</code> the header -- that way you will be able to link with the library.  (Otherwise, your linker would be looking for functions with names like <code>_Z1hic</code> when you were looking for <code>void h(int, char)</code></p>

<p>5:  This sort of mixing is a common reason to use <code>extern ""C""</code>, and I don't see anything wrong with doing it this way -- just make sure you understand what you are doing.</p>
","3789553"
"Copy a file in a sane, safe and efficient way","140510","","<p>I search for a good way to copy a file (binary or text). I've written several samples, everyone works. But I want hear the opinion of seasoned programmers.</p>

<p>I missing good examples and search a way which works with C++.</p>

<p><strong>ANSI-C-WAY</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;    // fopen, fclose, fread, fwrite, BUFSIZ
#include &lt;ctime&gt;
using namespace std;

int main() {
    clock_t start, end;
    start = clock();

    // BUFSIZE default is 8192 bytes
    // BUFSIZE of 1 means one chareter at time
    // good values should fit to blocksize, like 1024 or 4096
    // higher values reduce number of system calls
    // size_t BUFFER_SIZE = 4096;

    char buf[BUFSIZ];
    size_t size;

    FILE* source = fopen(""from.ogv"", ""rb"");
    FILE* dest = fopen(""to.ogv"", ""wb"");

    // clean and more secure
    // feof(FILE* stream) returns non-zero if the end of file indicator for stream is set

    while (size = fread(buf, 1, BUFSIZ, source)) {
        fwrite(buf, 1, size, dest);
    }

    fclose(source);
    fclose(dest);

    end = clock();

    cout &lt;&lt; ""CLOCKS_PER_SEC "" &lt;&lt; CLOCKS_PER_SEC &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME START "" &lt;&lt; start &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END "" &lt;&lt; end &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END - START "" &lt;&lt; end - start &lt;&lt; ""\n"";
    cout &lt;&lt; ""TIME(SEC) "" &lt;&lt; static_cast&lt;double&gt;(end - start) / CLOCKS_PER_SEC &lt;&lt; ""\n"";

    return 0;
}
</code></pre>

<p><strong>POSIX-WAY</strong> (K&amp;R use this in ""The C programming language"", more low-level)</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fcntl.h&gt;   // open
#include &lt;unistd.h&gt;  // read, write, close
#include &lt;cstdio&gt;    // BUFSIZ
#include &lt;ctime&gt;
using namespace std;

int main() {
    clock_t start, end;
    start = clock();

    // BUFSIZE defaults to 8192
    // BUFSIZE of 1 means one chareter at time
    // good values should fit to blocksize, like 1024 or 4096
    // higher values reduce number of system calls
    // size_t BUFFER_SIZE = 4096;

    char buf[BUFSIZ];
    size_t size;

    int source = open(""from.ogv"", O_RDONLY, 0);
    int dest = open(""to.ogv"", O_WRONLY | O_CREAT /*| O_TRUNC/**/, 0644);

    while ((size = read(source, buf, BUFSIZ)) &gt; 0) {
        write(dest, buf, size);
    }

    close(source);
    close(dest);

    end = clock();

    cout &lt;&lt; ""CLOCKS_PER_SEC "" &lt;&lt; CLOCKS_PER_SEC &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME START "" &lt;&lt; start &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END "" &lt;&lt; end &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END - START "" &lt;&lt; end - start &lt;&lt; ""\n"";
    cout &lt;&lt; ""TIME(SEC) "" &lt;&lt; static_cast&lt;double&gt;(end - start) / CLOCKS_PER_SEC &lt;&lt; ""\n"";

    return 0;
}
</code></pre>

<p><strong>KISS-C++-Streambuffer-WAY</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;ctime&gt;
using namespace std;

int main() {
    clock_t start, end;
    start = clock();

    ifstream source(""from.ogv"", ios::binary);
    ofstream dest(""to.ogv"", ios::binary);

    dest &lt;&lt; source.rdbuf();

    source.close();
    dest.close();

    end = clock();

    cout &lt;&lt; ""CLOCKS_PER_SEC "" &lt;&lt; CLOCKS_PER_SEC &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME START "" &lt;&lt; start &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END "" &lt;&lt; end &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END - START "" &lt;&lt;  end - start &lt;&lt; ""\n"";
    cout &lt;&lt; ""TIME(SEC) "" &lt;&lt; static_cast&lt;double&gt;(end - start) / CLOCKS_PER_SEC &lt;&lt; ""\n"";

    return 0;
}
</code></pre>

<p><strong>COPY-ALGORITHM-C++-WAY</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;ctime&gt;
#include &lt;algorithm&gt;
#include &lt;iterator&gt;
using namespace std;

int main() {
    clock_t start, end;
    start = clock();

    ifstream source(""from.ogv"", ios::binary);
    ofstream dest(""to.ogv"", ios::binary);

    istreambuf_iterator&lt;char&gt; begin_source(source);
    istreambuf_iterator&lt;char&gt; end_source;
    ostreambuf_iterator&lt;char&gt; begin_dest(dest); 
    copy(begin_source, end_source, begin_dest);

    source.close();
    dest.close();

    end = clock();

    cout &lt;&lt; ""CLOCKS_PER_SEC "" &lt;&lt; CLOCKS_PER_SEC &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME START "" &lt;&lt; start &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END "" &lt;&lt; end &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END - START "" &lt;&lt;  end - start &lt;&lt; ""\n"";
    cout &lt;&lt; ""TIME(SEC) "" &lt;&lt; static_cast&lt;double&gt;(end - start) / CLOCKS_PER_SEC &lt;&lt; ""\n"";

    return 0;
}
</code></pre>

<p><strong>OWN-BUFFER-C++-WAY</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;ctime&gt;
using namespace std;

int main() {
    clock_t start, end;
    start = clock();

    ifstream source(""from.ogv"", ios::binary);
    ofstream dest(""to.ogv"", ios::binary);

    // file size
    source.seekg(0, ios::end);
    ifstream::pos_type size = source.tellg();
    source.seekg(0);
    // allocate memory for buffer
    char* buffer = new char[size];

    // copy file    
    source.read(buffer, size);
    dest.write(buffer, size);

    // clean up
    delete[] buffer;
    source.close();
    dest.close();

    end = clock();

    cout &lt;&lt; ""CLOCKS_PER_SEC "" &lt;&lt; CLOCKS_PER_SEC &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME START "" &lt;&lt; start &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END "" &lt;&lt; end &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END - START "" &lt;&lt;  end - start &lt;&lt; ""\n"";
    cout &lt;&lt; ""TIME(SEC) "" &lt;&lt; static_cast&lt;double&gt;(end - start) / CLOCKS_PER_SEC &lt;&lt; ""\n"";

    return 0;
}
</code></pre>

<p><strong>LINUX-WAY</strong> // requires kernel >= 2.6.33</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;sys/sendfile.h&gt;  // sendfile
#include &lt;fcntl.h&gt;         // open
#include &lt;unistd.h&gt;        // close
#include &lt;sys/stat.h&gt;      // fstat
#include &lt;sys/types.h&gt;     // fstat
#include &lt;ctime&gt;
using namespace std;

int main() {
    clock_t start, end;
    start = clock();

    int source = open(""from.ogv"", O_RDONLY, 0);
    int dest = open(""to.ogv"", O_WRONLY | O_CREAT /*| O_TRUNC/**/, 0644);

    // struct required, rationale: function stat() exists also
    struct stat stat_source;
    fstat(source, &amp;stat_source);

    sendfile(dest, source, 0, stat_source.st_size);

    close(source);
    close(dest);

    end = clock();

    cout &lt;&lt; ""CLOCKS_PER_SEC "" &lt;&lt; CLOCKS_PER_SEC &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME START "" &lt;&lt; start &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END "" &lt;&lt; end &lt;&lt; ""\n"";
    cout &lt;&lt; ""CPU-TIME END - START "" &lt;&lt;  end - start &lt;&lt; ""\n"";
    cout &lt;&lt; ""TIME(SEC) "" &lt;&lt; static_cast&lt;double&gt;(end - start) / CLOCKS_PER_SEC &lt;&lt; ""\n"";

    return 0;
}
</code></pre>

<p><strong>Environment</strong>  </p>

<ul>
<li>GNU/LINUX (Archlinux)</li>
<li>Kernel 3.3</li>
<li>GLIBC-2.15, LIBSTDC++ 4.7 (GCC-LIBS), GCC 4.7, Coreutils 8.16</li>
<li>Using RUNLEVEL 3 (Multiuser, Network, Terminal, no GUI)</li>
<li>INTEL SSD-Postville 80 GB, filled up to 50%  </li>
<li>Copy a 270 MB OGG-VIDEO-FILE  </li>
</ul>

<p><strong>Steps to reproduce</strong> </p>

<pre><code> 1. $ rm from.ogg
 2. $ reboot                           # kernel and filesystem buffers are in regular
 3. $ (time ./program) &amp;&gt;&gt; report.txt  # executes program, redirects output of program and append to file
 4. $ sha256sum *.ogv                  # checksum
 5. $ rm to.ogg                        # remove copy, but no sync, kernel and fileystem buffers are used
 6. $ (time ./program) &amp;&gt;&gt; report.txt  # executes program, redirects output of program and append to file
</code></pre>

<p><strong>Results (CPU TIME used)</strong>  </p>

<pre><code>Program  Description                 UNBUFFERED|BUFFERED
ANSI C   (fread/frwite)                 490,000|260,000  
POSIX    (K&amp;R, read/write)              450,000|230,000  
FSTREAM  (KISS, Streambuffer)           500,000|270,000 
FSTREAM  (Algorithm, copy)              500,000|270,000
FSTREAM  (OWN-BUFFER)                   500,000|340,000  
SENDFILE (native LINUX, sendfile)       410,000|200,000  
</code></pre>

<p>Filesize doesn't change.<br>
sha256sum print the same results.<br>
The video file is still playable.  </p>

<p><strong>Questions</strong></p>

<ul>
<li>What method would you prefer?</li>
<li>Do you know better solutions?</li>
<li>Do you see any mistakes in my code?</li>
<li><p>Do you know a reason to avoid a solution?</p></li>
<li><p>FSTREAM (KISS, Streambuffer)<br>
I really like this one, because it is really short and simple. As far is I know the operator &lt;&lt; is overloaded for rdbuf() and doesn't convert anything. Correct?</p></li>
</ul>

<p>Thanks</p>

<p><strong>Update 1</strong><br>
I changed the source in all samples in that way, that the open and close of the file descriptors is include in the measurement of <em>clock()</em>. Their are no other significant changes in the source code. The results doesn't changed! I also used <em>time</em> to double-check my results.  </p>

<p><strong>Update 2</strong><br>
ANSI C sample changed: The condition of the <em>while-loop</em> doesn't call any longer <em>feof()</em> instead I moved <em>fread()</em> into the condition. It looks like, the code runs now 10,000 clocks faster.  </p>

<p>Measurement changed: The former results were always buffered, because I repeated the old command line <em>rm to.ogv &amp;&amp; sync &amp;&amp; time ./program</em> for each program a few times. Now I reboot the system for every program. The unbuffered results are new and show no surprise. The unbuffered results didn't changed really.</p>

<p>If i don't delete the old copy, the programs react different. Overwriting a existing file <em>buffered</em> is faster with POSIX and SENDFILE, all other programs are slower. Maybe the options <em>truncate</em> or <em>create</em> have a impact on this behaviour. But overwriting existing files with the same copy is not a real world use-case.  </p>

<p>Performing the copy with <em>cp</em> takes 0.44 seconds unbuffered und 0.30 seconds buffered. So <em>cp</em> is a little bit slower than the POSIX sample. Looks fine for me.  </p>

<p>Maybe I add also samples and results of <em>mmap()</em> and <em><code>copy_file()</code></em> from boost::filesystem.</p>

<p><strong>Update 3</strong><br>
I've put this also on a blog page and extended it a little bit. Including <em>splice()</em>, which is a low-level function from the Linux kernel. Maybe more samples with Java will follow.
<a href=""http://www.ttyhoney.com/blog/?page_id=69"">http://www.ttyhoney.com/blog/?page_id=69</a></p>
","<p>Copy a file in a sane way:</p>

<pre><code>int main()
{
    std::ifstream  src(""from.ogv"", std::ios::binary);
    std::ofstream  dst(""to.ogv"",   std::ios::binary);

    dst &lt;&lt; src.rdbuf();
}
</code></pre>

<p>This is so simple and intuitive to read it is worth the extra cost. If we were doing it a lot, better to fall back on OS calls to the file system. I am sure <code>boost</code> has a copy file method in its filesystem class. </p>

<p>There is a C method for interacting with the file system:</p>

<pre><code>#include &lt;copyfile.h&gt;

int
copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags);
</code></pre>
","10195497"
"const char* concatenation","140242","","<p>I need to concatenate two const chars like these:</p>

<pre><code>const char *one = ""Hello "";
const char *two = ""World"";
</code></pre>

<p>How might I go about doing that?</p>

<p>I am passed these <code>char*</code>s from a third-party library with a C interface so I can't simply use <code>std::string</code> instead.</p>
","<p>In your example <em>one</em> and <em>two</em> are char pointers, pointing to char constants. You cannot change the char constants pointed to by these pointers. So anything like:</p>

<pre><code>strcat(one,two); // append string two to string one.
</code></pre>

<p>will not work. Instead you should have a separate variable(char array) to hold the result. Something like this:</p>

<pre><code>char result[100];   // array to hold the result.

strcpy(result,one); // copy string one into the result.
strcat(result,two); // append string two to the result.
</code></pre>
","1995057"
"How to use QueryPerformanceCounter?","140150","","<p>I recently decided that I needed to change from using milliseconds to microseconds for my Timer class, and after some research I've decided that QueryPerformanceCounter is probably my safest bet. (The warning on <code>Boost::Posix</code> that it may not works on Win32 API put me off a bit). However, I'm not really sure how to implement it. </p>

<p>What I'm doing is calling whatever <code>GetTicks()</code> esque function I'm using and assigning it to Timer's <code>startingTicks</code> variable. Then to find the amount of time passed I just subtract the function's return value from the <code>startingTicks</code>, and when I reset the timer I just call the function again and assign startingTicks to it. Unfortunately, from the code I've seen it isn't as simple as just calling <code>QueryPerformanceCounter()</code>, and I'm not sure what I'm supposed to pass as its argument.</p>
","<pre><code>#include &lt;windows.h&gt;

double PCFreq = 0.0;
__int64 CounterStart = 0;

void StartCounter()
{
    LARGE_INTEGER li;
    if(!QueryPerformanceFrequency(&amp;li))
    cout &lt;&lt; ""QueryPerformanceFrequency failed!\n"";

    PCFreq = double(li.QuadPart)/1000.0;

    QueryPerformanceCounter(&amp;li);
    CounterStart = li.QuadPart;
}
double GetCounter()
{
    LARGE_INTEGER li;
    QueryPerformanceCounter(&amp;li);
    return double(li.QuadPart-CounterStart)/PCFreq;
}

int main()
{
    StartCounter();
    Sleep(1000);
    cout &lt;&lt; GetCounter() &lt;&lt;""\n"";
    return 0;
}
</code></pre>

<p>This program should output a number close to 1000 (windows sleep isn't that accurate, but it should be like 999).</p>

<p>The <code>StartCounter()</code> function records the number of ticks the performance counter has in the <code>CounterStart</code> variable. The <code>GetCounter()</code> function returns the number of milliseconds since <code>StartCounter()</code> was last called as a double, so if <code>GetCounter()</code> returns 0.001 then it has been about 1 microsecond since <code>StartCounter()</code> was called.</p>

<p>If you want to have the timer use seconds instead then change</p>

<pre><code>PCFreq = double(li.QuadPart)/1000.0;
</code></pre>

<p>to</p>

<pre><code>PCFreq = double(li.QuadPart);
</code></pre>

<p>or if you want microseconds then use</p>

<pre><code>PCFreq = double(li.QuadPart)/1000000.0;
</code></pre>

<p>But really it's about convenience since it returns a double.</p>
","1739265"
"How to get the GL library/headers?","139806","","<pre><code>#include &lt;gl\gl.h&gt; 
#include &lt;gl\glu.h&gt; 
#include &lt;gl\glaux.h&gt;
</code></pre>

<p>This is an example, but where to get GL headers?</p>
","<h3>Windows</h3>

<p>On Windows you need to include the <code>gl.h</code> header for OpenGL 1.1 support and link against OpenGL32.lib. Both are a part of the <a href=""http://msdn.microsoft.com/en-us/windows/bb980924.aspx"" rel=""noreferrer"">Windows SDK</a>. In addition, you might want the following headers which you can get from <a href=""http://www.opengl.org/registry"" rel=""noreferrer"">http://www.opengl.org/registry</a> .</p>

<ul>
<li><a href=""https://www.opengl.org/registry/api/GL/glext.h"" rel=""noreferrer""><code>&lt;GL/glext.h&gt;</code></a> - OpenGL 1.2 and above compatibility profile and extension interfaces..</li>
<li><a href=""https://www.opengl.org/registry/api/GL/glcorearb.h"" rel=""noreferrer""><code>&lt;GL/glcorearb.h&gt;</code></a> - OpenGL core profile and ARB extension interfaces, as described in appendix G.2 of the OpenGL 4.3 Specification. Does not include interfaces found only in the compatibility profile.</li>
<li><a href=""https://www.opengl.org/registry/api/GL/glxext.h"" rel=""noreferrer""><code>&lt;GL/glxext.h&gt;</code></a> - GLX 1.3 and above API and GLX extension interfaces.</li>
<li><a href=""https://www.opengl.org/registry/api/GL/wglext.h"" rel=""noreferrer""><code>&lt;GL/wglext.h&gt;</code></a> - WGL extension interfaces.</li>
</ul>

<h3>Linux</h3>

<p>On Linux you need to link against libGL.so, which is usually a symlink to libGL.so.1, which is yet a symlink to the actual library/driver which is a part of your graphics driver. For example, on my system the actual driver library is named libGL.so.256.53, which is the version number of the nvidia driver I use. You also need to include the <code>gl.h</code> header, which is usually a part of a Mesa or Xorg package. Again, you might need <code>glext.h</code> and <code>glxext.h</code> from <a href=""http://www.opengl.org/registry"" rel=""noreferrer"">http://www.opengl.org/registry</a> . <code>glxext.h</code> holds GLX extensions, the equivalent to <code>wglext.h</code> on Windows.</p>

<p>If you want to use OpenGL 3.x or OpenGL 4.x functionality without the functionality which were moved into the <code>GL_ARB_compatibility</code> extension, use the new <code>gl3.h</code> header from the registry webpage. It replaces <code>gl.h</code> and also <code>glext.h</code> (as long as you only need core functionality).</p>

<p>Last but not the least, <code>glaux.h</code> is not a header associated with OpenGL. I assume you've read the awful NEHE tutorials and just went along with it. Glaux is a horribly outdated Win32 library (1996) for loading uncompressed bitmaps. Use something better, like libPNG, which also supports alpha channels.</p>
","3939495"
"Why std::cout instead of simply cout?","139108","","<p>I get these error messages for all <code>cout</code> and <code>endl</code>:</p>

<pre><code>main.cc:17:5: error: ‘cout’ was not declared in this scope
main.cc:17:5: note: suggested alternative:
/usr/include/c++/4.6/iostream:62:18: note:   ‘std::cout’
</code></pre>

<p>After following the suggestion, everything is fine. Now I am curious, why I had to do that. We used C++ in classes before, but I never had to write a <code>std::</code> before any of those commands. What might be different on this system?</p>
","<p>It seems possible your class may have been using pre-standard C++.  An easy way to tell, is to look at your old programs and check, do you see:</p>

<pre><code>#include &lt;iostream.h&gt;
</code></pre>

<p>or</p>

<pre><code>#include &lt;iostream&gt;
</code></pre>

<p>The former is pre-standard, and you'll be able to just say <code>cout</code> as opposed to <code>std::cout</code> without anything additional. You can get the same behavior in standard C++ by adding</p>

<pre><code>using std::cout;
</code></pre>

<p>or</p>

<pre><code>using namespace std;
</code></pre>

<p>Just one idea, anyway.</p>
","10950131"
"How to use _CRT_SECURE_NO_WARNINGS","138936","","<p>I have compile error in my simple MFC window application generated from wizard with several lines of code:</p>

<blockquote>
  <p>error C4996: 'strncpy': This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, <strong>use _CRT_SECURE_NO_WARNINGS</strong>. See online help for details.</p>
</blockquote>

<p>I set <code>Configuration Properties&gt;&gt;C/C++&gt;&gt;Preporocessor&gt;&gt;Preprocessor Definitions&gt;&gt; _CRT_NONSTDC_NO_WARNINGS</code></p>

<p>But this does't helped. I have another very close project that generates only warning in this place and it has no <code>_CRT_NONSTDC_NO_WARNINGS</code> definition.</p>

<p>Only difference between projects is several different options in wizard.</p>

<p>Why _CRT_NONSTDC_NO_WARNINGS does not helps in first project and why second project compiles without problems without this definition?</p>
","<p>Add by</p>

<blockquote>
  <p>Configuration Properties>>C/C++>>Preporocessor>>Preprocessor
  Definitions>> _CRT_SECURE_NO_WARNINGS</p>
</blockquote>
","22450838"
"How to Calculate Execution Time of a Code Snippet in C++","138862","","<p>I have to compute execution time of a C++ code snippet in seconds. It must be working either on Windows or Unix machines.</p>

<p>I use code the following code to do this. (import  before)</p>

<pre><code>clock_t startTime = clock();
// some code here
// to compute its execution duration in runtime
cout &lt;&lt; double( clock() - startTime ) / (double)CLOCKS_PER_SEC&lt;&lt; "" seconds."" &lt;&lt; endl;
</code></pre>

<p>However for small inputs or short statements such as a = a + 1, I get ""0 seconds"" result. I think it must be something like 0.0000001 seconds or something like that.</p>

<p>I remember that <code>System.nanoTime()</code> in Java works pretty well in this case. However I can't get same exact functionality from <code>clock()</code> function of C++.</p>

<p>Do you have a solution?</p>
","<p>You can use this function I wrote. You call <code>GetTimeMs64()</code>, and it returns the number of milliseconds elapsed since the unix epoch using the system clock - the just like <code>time(NULL)</code>, except in milliseconds.</p>

<p>It works on both windows and linux; it is thread safe.</p>

<p>Note that the granularity is 15 ms on windows; on linux it is implementation dependent, but it usually 15 ms as well.</p>

<pre><code>#ifdef _WIN32
#include &lt;Windows.h&gt;
#else
#include &lt;sys/time.h&gt;
#include &lt;ctime&gt;
#endif

/* Remove if already defined */
typedef long long int64; typedef unsigned long long uint64;

/* Returns the amount of milliseconds elapsed since the UNIX epoch. Works on both
 * windows and linux. */

uint64 GetTimeMs64()
{
#ifdef _WIN32
 /* Windows */
 FILETIME ft;
 LARGE_INTEGER li;

 /* Get the amount of 100 nano seconds intervals elapsed since January 1, 1601 (UTC) and copy it
  * to a LARGE_INTEGER structure. */
 GetSystemTimeAsFileTime(&amp;ft);
 li.LowPart = ft.dwLowDateTime;
 li.HighPart = ft.dwHighDateTime;

 uint64 ret = li.QuadPart;
 ret -= 116444736000000000LL; /* Convert from file time to UNIX epoch time. */
 ret /= 10000; /* From 100 nano seconds (10^-7) to 1 millisecond (10^-3) intervals */

 return ret;
#else
 /* Linux */
 struct timeval tv;

 gettimeofday(&amp;tv, NULL);

 uint64 ret = tv.tv_usec;
 /* Convert from micro seconds (10^-6) to milliseconds (10^-3) */
 ret /= 1000;

 /* Adds the seconds (10^0) after converting them to milliseconds (10^-3) */
 ret += (tv.tv_sec * 1000);

 return ret;
#endif
}
</code></pre>
","1861337"
"Is there any advantage of using map over unordered_map in case of trivial keys?","138712","","<p>A recent talk about <code>unordered_map</code> in C++ made me realize, that I should use <code>unordered_map</code> for most cases where I used <code>map</code> before, because of the efficiency of lookup ( <em>amortized O(1)</em> vs. <em>O(log n)</em> ). Most times I use a map I use either <code>int</code>'s or <code>std::strings</code> as keys, hence I've got no problems with the definition of the hash function. The more I thought about it, the more I came to realize that I can't find any reason of using a <code>std::map</code> in case of simple types over a <code>unordered_map</code> -- I took a look at the interfaces, and didn't find any significant differences that would impact my code. </p>

<p>Hence the question - is there any real reason to use <code>std::map</code> over <code>unordered map</code> in case of simple types like <code>int</code> and <code>std::string</code>?</p>

<p>I'm asking from a strictly programming point of view -- I know that it's not fully considered standard, and that it may pose problems with porting. </p>

<p>Also I expect that one of the correct answers might be <em>""it's more efficient for smaller sets of data""</em> because of a smaller overhead (is that true?) -- hence I'd like to restrict the question to cases where the amount of keys is non-trivial (>1 024).</p>

<p><strong>Edit:</strong> <em>duh, I forgot the obvious (thanks GMan!) -- yes, map's are ordered of course -- I know that, and am looking for other reasons.</em></p>
","<p>Don't forget the <code>map</code>'s keep their elements ordered. If you can't give up that, obviously you can't use an <code>unordered_map</code>.</p>

<p>Something else to keep in mind is that <code>unordered_map</code>'s generally use more memory. A <code>map</code> just has a few house-keeping pointers then memory for each object. Contrarily, <code>unordered_map</code>'s have a big array (these can get quite big in some implementations) and then additional memory for each object. If you need to be memory-aware, a <code>map</code> should prove better, because it lacks the large array.</p>

<p>So, if you need pure lookup-retrieval, I'd say an <code>unordered_map</code> is the way to go. But there are always trade-offs, and if you can't afford them, then you can't use it.</p>

<p>Just from personal experience, I found an enormous improvement in performance (measured, of course) when using an <code>unordered_map</code> instead of a <code>map</code> in a main entity look-up table.</p>

<p>On the other hand, I found it was much slower at repeatedly inserting and removing elements. It's great for a relatively static collection of elements, but if you're doing tons of insertions and deletions the hashing + bucketing seems to add up. (Note, this was over many iterations.)</p>
","2197015"
"Forward declaring an enum in c++","138635","","<p>I'm trying to do something like the following:</p>

<pre><code>enum E;

void Foo(E e);

enum E {A, B, C};
</code></pre>

<p>which the compiler rejects.  I've had a quick look on Google and the consensus seems to be ""you can't do it"", but I can't understand why.  Can anyone explain?  Many thanks.</p>

<p>Clarification 2: I'm doing this as I have private methods in a class that take said enum, and I do not want the enum's values exposed - so, for example, I do not want anyone to know that E is defined as</p>

<pre><code>enum E {
    FUNCTIONALITY_NORMAL, FUNCTIONALITY_RESTRICTED, FUNCTIONALITY_FOR_PROJECT_X
}
</code></pre>

<p>as project X is not something I want my users to know about.</p>

<p>So, I wanted to forward declare the enum so I could put the private methods in the header file, declare the enum internally in the cpp, and distribute the built library file and header to people.</p>

<p>As for the compiler - it's GCC.</p>
","<p>The reason the enum can't be forward declared is that without knowing the values, the compiler can't know the storage required for the enum variable.  C++ Compiler's are allowed to specify the actual storage space based on the size necessary to contain all the values specified.  If all that is visible is the forward declaration, the translation unit can't know what storage size will have been chosen - it could be a char or an int, or something else.</p>

<hr>

<p>From Section 7.2.5 of the ISO C++ Standard:</p>

<blockquote>
  <p>The <em>underlying type</em> of an enumeration is an integral type that can represent all the enumerator values defined in the enumeration. It is implementation-defined which integral type is used as the underlying type for an enumeration except that the underlying type shall not be larger than <code>int</code> unless the value of an enumerator cannot fit in an <code>int</code> or <code>unsigned int</code>. If the <em>enumerator-list</em> is empty, the underlying type is as if the enumeration had a single enumerator with value 0. The value of <code>sizeof()</code> applied to an enumeration type, an object of enumeration type, or an enumerator, is the value of <code>sizeof()</code> applied to the underlying type.</p>
</blockquote>

<p>Since the <em>caller</em> to the function must know the sizes of the parameters to correctly setup the call stack, the number of enumerations in an enumeration list must be known before the function prototype.</p>

<p>Update:
In C++0X a syntax for foreward declaring enum types has been proposed and accepted.  You can see the proposal at <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2764.pdf"" rel=""noreferrer"">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2764.pdf</a> </p>
","72599"
"C++ getters/setters coding style","138577","","<p>I have been programming in C# for a while and now I want to brush up on my C++ skills. </p>

<p>Having the class:</p>

<pre><code>class Foo
{
    const std::string&amp; name_;
    ...
};
</code></pre>

<p>What would be the best approach (I only want to allow read access to the name_ field):</p>

<ul>
<li>use a getter method: <code>inline const std::string&amp; name() const { return name_; }</code></li>
<li>make the field public since it's a constant</li>
</ul>

<p>Thanks.</p>
","<p>It tends to be a bad idea to make non-const fields public because it then becomes hard to force error checking constraints and/or add side-effects to value changes in the future.</p>

<p>In your case, you have a const field, so the above issues are not a problem.  The main downside of making it a public field is that you're locking down the underlying implementation.  For example, if in the future you wanted to change the internal representation to a C-string or a Unicode string, or something else, then you'd break all the client code.  With a gettor, you could convert to the legacy representation for existing clients while providing the newer functionality to new users via a new gettor.</p>

<p>I'd still suggest having a getter method like the one you have placed above.  This will maximize your future flexibility.</p>
","760801"
"Example to use shared_ptr?","138522","","<p>Hi I asked a question today about <a href=""https://stackoverflow.com/questions/3475030/different-types-of-objects-in-the-same-vector-array"">How to insert different types of objects in the same vector array </a> and my code in that question was </p>

<pre><code> gate* G[1000];
G[0] = new ANDgate() ;
G[1] = new ORgate;
//gate is a class inherited by ANDgate and ORgate classes
class gate
{
 .....
 ......
 virtual void Run()
   {   //A virtual function
   }
};
class ANDgate :public gate 
  {.....
   .......
   void Run()
   {
    //AND version of Run
   }  

};
 class ORgate :public gate 
  {.....
   .......
   void Run()
   {
    //OR version of Run
   }  

};      
//Running the simulator using overloading concept
 for(...;...;..)
 {
  G[i]-&gt;Run() ;  //will run perfectly the right Run for the right Gate type
 } 
</code></pre>

<p>and I wanted to use vectors so someone wrote that I should do that :</p>

<pre><code>std::vector&lt;gate*&gt; G;
G.push_back(new ANDgate); 
G.push_back(new ORgate);
for(unsigned i=0;i&lt;G.size();++i)
{
  G[i]-&gt;Run();
}
</code></pre>

<p>but then he and many others suggested that I would better use <a href=""http://www.boost.org/doc/libs/1_43_0/libs/ptr_container/doc/guidelines.html"" rel=""nofollow noreferrer"">Boost pointer containers<br>
</a> or <code>shared_ptr</code>. I have spent the last 3 hours reading about this topic, but the documentation seems pretty advanced to me . ****Can anyone give me a small code example of <code>shared_ptr</code> usage and why they suggested using <code>shared_ptr</code>. Also are there other types like <code>ptr_vector</code>, <code>ptr_list</code> and <code>ptr_deque</code>**  **</p>

<p>Edit1: I have read a code example too that included:</p>

<pre><code>typedef boost::shared_ptr&lt;Foo&gt; FooPtr;
.......
int main()
{
  std::vector&lt;FooPtr&gt;         foo_vector;
........
FooPtr foo_ptr( new Foo( 2 ) );
  foo_vector.push_back( foo_ptr );
...........
}
</code></pre>

<p>And I don't understand the syntax!</p>
","<p>Using a <code>vector</code> of <code>shared_ptr</code> removes the possibility of leaking memory because you forgot to walk the vector and call <code>delete</code> on each element.  Let's walk through a slightly modified version of the example line-by-line.</p>

<pre><code>typedef boost::shared_ptr&lt;gate&gt; gate_ptr;
</code></pre>

<p>Create an alias for the shared pointer type.  This avoids the ugliness in the C++ language that results from typing <code>std::vector&lt;boost::shared_ptr&lt;gate&gt; &gt;</code> and forgetting the space between the closing <em>greater-than signs</em>.</p>

<pre><code>    std::vector&lt;gate_ptr&gt; vec;
</code></pre>

<p>Creates an empty vector of <code>boost::shared_ptr&lt;gate&gt;</code> objects.</p>

<pre><code>    gate_ptr ptr(new ANDgate);
</code></pre>

<p>Allocate a new <code>ANDgate</code> instance and store it into a <code>shared_ptr</code>.  The reason for doing this separately is to prevent a problem that can occur if an operation throws.  This isn't possible in this example.  The <a href=""http://www.boost.org/doc/libs/1_43_0/libs/smart_ptr/shared_ptr.htm#BestPractices"" rel=""noreferrer"">Boost <code>shared_ptr</code> ""Best Practices""</a> explain why it is a <em>best practice</em> to allocate into a free-standing object instead of a temporary.</p>

<pre><code>    vec.push_back(ptr);
</code></pre>

<p>This creates a new shared pointer in the vector and copies <code>ptr</code> into it.  The reference counting in the guts of <code>shared_ptr</code> ensures that the allocated object inside of <code>ptr</code> is safely transferred into the vector.</p>

<p>What is not explained is that the destructor for <code>shared_ptr&lt;gate&gt;</code> ensures that the allocated memory is deleted.  This is where the memory leak is avoided.  The destructor for <code>std::vector&lt;T&gt;</code> ensures that the destructor for <code>T</code> is called for every element stored in the vector.  However, the destructor for a pointer (e.g., <code>gate*</code>) <strong>does not delete the memory that you had allocated</strong>.  That is what you are trying to avoid by using <code>shared_ptr</code> or <code>ptr_vector</code>.</p>
","3477305"
"How to find memory leak in a C++ code/project?","138153","","<p>I am a C++ programmer on the Windows platform. I am using Visual Studio 2008.</p>

<p>I usually end up in the code with memory leaks.</p>

<p>Normally I find the memory leak by inspecting the code, but it is cumbersome and is not always a good approach.   </p>

<p>Since I can't afford a paid memory leak detection tool, I wanted you guys to suggest the best possible ways to avoid memory leaks.</p>

<ol>
<li>I want to the know how the programmer can find memory leaks.</li>
<li>Is there any standard or procedure one should follow to ensure there is no memory leak in the program?</li>
</ol>
","<p><strong>Instructions</strong></p>

<p>Things You'll Need</p>

<ul>
<li>Proficiency in C++</li>
<li>C++ compiler</li>
<li>Debugger and other investigative software tools</li>
</ul>

<h1>1</h1>

<p>Understand the operator basics. The C++ operator ""new"" allocates heap memory. The ""delete"" operator frees heap memory. For every ""new,"" you should use a ""delete"" so that you free the same memory you allocated:</p>

<pre><code>char* str = new char [30]; // Allocate 30 bytes to house a string.

delete [] str; // Clear those 30 bytes and make str point nowhere.
</code></pre>

<h1>2</h1>

<p>Reallocate memory only if you've deleted. In the code below, str acquires a new address with the second allocation. The first address is lost irretrievably, and so are the 30 bytes that it pointed to. Now they're impossible to free, and you have a memory leak:</p>

<pre><code>char* str = new char [30]; // Give str a memory address.

// delete [] str; // Remove the first comment marking in this line to correct.

str = new char [60]; /* Give str another memory address with
                                                    the first one gone forever.*/

delete [] str; // This deletes the 60 bytes, not just the first 30.
</code></pre>

<h1>3</h1>

<p>Watch those pointer assignments. Every dynamic variable (allocated memory on the heap) needs to be associated with a pointer. When a dynamic variable becomes disassociated from its pointer(s), it becomes impossible to erase. Again, this results in a memory leak:</p>

<pre><code>char* str1 = new char [30];

char* str2 = new char [40];

strcpy(str1, ""Memory leak"");

str2 = str1; // Bad! Now the 40 bytes are impossible to free.

delete [] str2; // This deletes the 30 bytes.

delete [] str1; // Possible access violation. What a disaster!
</code></pre>

<h1>4</h1>

<p>Be careful with local pointers. A pointer you declare in a function is allocated on the stack, but the dynamic variable it points to is allocated on the heap. If you don't delete it, it will persist after the program exits from the function:</p>

<pre><code>void Leak(int x){

char* p = new char [x];

// delete [] p; // Remove the first comment marking to correct.

}
</code></pre>

<h1>5</h1>

<p>Pay attention to the square braces after ""delete."" Use ""delete"" by itself to free a single object. Use ""delete"" [] with square brackets to free a heap array. Don't do something like this:</p>

<pre><code>char* one = new char;

delete [] one; // Wrong

char* many = new char [30];

delete many; // Wrong!
</code></pre>

<h1>6</h1>

<p>If the leak yet allowed - I'm usually seeking it with deleaker (check it here: <a href=""http://deleaker.com"" rel=""noreferrer"">http://deleaker.com</a>).</p>

<p>Thanks!</p>
","8417851"
"Where do I find the definition of size_t?","138040","","<p>I see variables defined with this type but I don't know where it comes from, nor what is its purpose. Why not use int or unsigned int? (What about other ""similar"" types? Void_t, etc).</p>
","<p>From <a href=""http://en.wikipedia.org/wiki/Stdlib.h"" rel=""noreferrer"">Wikipedia</a></p>

<blockquote>
  <p>The <code>stdlib.h</code> and <code>stddef.h</code> header files define a datatype called <code>size_t</code><a href=""http://en.wikipedia.org/wiki/Stdlib.h"" rel=""noreferrer"">1</a> which is used to represent the size of an object. Library functions that take sizes expect them to be of type <code>size_t</code>, and the sizeof operator evaluates to <code>size_t</code>.</p>
  
  <p>The actual type of <code>size_t</code> is platform-dependent; a common mistake is to assume <code>size_t</code> is the same as unsigned int, which can lead to programming errors,<a href=""http://open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf#page=266"" rel=""noreferrer"">2</a> particularly as 64-bit architectures become more prevalent.</p>
</blockquote>

<p>From <a href=""http://open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf#page=266"" rel=""noreferrer"">C99 7.17.1/2</a></p>

<blockquote>
  <p>The following types and macros are defined in the standard header <code>stddef.h</code></p>
  
  <p>&lt;snip&gt;</p>
  
  <p><code>size_t</code></p>
  
  <p>which is the unsigned integer type of the result of the sizeof operator</p>
</blockquote>
","1119390"
"Why doesn't Java offer operator overloading?","137699","","<p>Coming from C++ to Java, the obvious unanswered question is why didn't Java include operator overloading?</p>

<p>Isn't <code>Complex a, b, c; a = b + c;</code> much simpler than <code>Complex a, b, c; a=b.add(c);</code>?</p>

<p>Is there a known reason for this, valid arguments for <em>not</em> allowing operator overloading? Is the reason arbitrary, or lost to time?</p>
","<p>Assuming you wanted to overwrite the previous value of the object referred to by 'a', then a member function would have to be invoked.</p>

<pre><code>Complex a, b, c;
...
a = b.add(c)
</code></pre>

<p>In C++, this expression tells the compiler to create 3 objects on the stack, perform addition, and <em>copy</em> the resultant value from the temporary object into the existing object 'a'.</p>

<p>However, in java, operator= doesn't perform value copy for reference types, and users can only create new reference types, not value types.  So for a user-defined type named 'Complex', assignment means to copy a reference to an existing value.</p>

<p>consider instead:</p>

<pre><code>b.set(1, 0); // initialize to real number '1'
a = b; 
b.set(2, 0);
assert(!a.equals(b));
</code></pre>

<p>In C++, this copies the value, so the comparison will result not-equal.  In Java, operator= performs reference copy, so 'a' and 'b' are now referring to the same value.  As a result, the comparison will produce 'equal', since the object will compare equal to itself.</p>

<p>The difference between copies and references only adds to the confusion of operator overloading.  As Sebastian mentioned, Java and C# both have to deal with value and reference equality separately -- operator+ would likely deal with values and objects, but operator= is already implemented to deal with references.</p>

<p>In C++, you should only be dealing with one kind of comparison at a time, so it can be less confusing.  For example, on Complex, operator= and operator== are both working on values -- copying values and comparing values respectively.  </p>
","77963"
"Singleton: How should it be used","137511","","<p>Edit:
   From another question I provided an answer that has links to a lot of questions/answers about singletons: <a href=""https://stackoverflow.com/questions/1008019/c-singleton-design-pattern/1008289#1008289"">More info about singletons here:</a></p>

<p>So I have read the thread <a href=""https://stackoverflow.com/questions/11831/singletons-good-design-or-a-crutch"">Singletons: good design or a crutch?</a><br>
And the argument still rages.</p>

<p>I see Singletons as a Design Pattern (good and bad).<br><br>
The problem with Singleton is not the Pattern but rather the users (sorry everybody). Everybody and their father thinks they can implement one correctly (and from the many interviews I have done, most people can't). Also because everybody thinks they can implement a correct Singleton they abuse the Pattern and use it in situations that are not appropriate (replacing global variables with Singletons!).</p>

<p>So the main questions that need to be answered are:</p>

<ul>
<li>When should you use a Singleton</li>
<li>How do you implement a Singleton correctly</li>
</ul>

<p>My hope for this article is that we can collect together in a single place (rather than having to google and search multiple sites) an authoritative source of when (and then how) to use a Singleton correctly. Also appropriate would be a list of Anti-Usages and common bad implementations explaining why they fail to work and for good implementations their weaknesses.<br><br><hr></p>

<p>So get the ball rolling:<br>
I will hold my hand up and say this is what I use but probably has problems.<br>
I like ""Scott Myers"" handling of the subject in his books ""Effective C++""</p>

<blockquote>
  <p>Good Situations to use Singletons (not many):</p>
  
  <ul>
  <li>Logging frameworks</li>
  <li>Thread recycling pools</li>
  </ul>
</blockquote>

<pre><code>/*
 * C++ Singleton
 * Limitation: Single Threaded Design
 * See: http://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf
 *      For problems associated with locking in multi threaded applications
 *
 * Limitation:
 * If you use this Singleton (A) within a destructor of another Singleton (B)
 * This Singleton (A) must be fully constructed before the constructor of (B)
 * is called.
 */
class MySingleton
{
    private:
        // Private Constructor
        MySingleton();
        // Stop the compiler generating methods of copy the object
        MySingleton(MySingleton const&amp; copy);            // Not Implemented
        MySingleton&amp; operator=(MySingleton const&amp; copy); // Not Implemented

    public:
        static MySingleton&amp; getInstance()
        {
            // The only instance
            // Guaranteed to be lazy initialized
            // Guaranteed that it will be destroyed correctly
            static MySingleton instance;
            return instance;
        }
};
</code></pre>

<p>OK. Lets get some criticism and other implementations together.<br>
:-)</p>
","<p>All of you are wrong.
Read the question.
Answer:</p>

<p>Use a Singleton if:</p>

<ul>
<li>If you need to have one and only one object of a type in system</li>
</ul>

<p>Do not use a Singleton if:</p>

<ul>
<li>If you want to save memory</li>
<li>If you want to try something new</li>
<li>If you want to show off how much you know</li>
<li>Because everyone else is doing it (See <a href=""http://en.wikipedia.org/wiki/Cargo_cult_programming"" rel=""noreferrer"">cargo cult programmer</a> in wikipedia)</li>
<li>In user interface widgets</li>
<li>It is supposed to be a cache</li>
<li>In strings</li>
<li>In Sessions</li>
<li>I can go all day long</li>
</ul>

<p>How to create the best singleton:</p>

<ul>
<li>The smaller, the better. I am a minimalist</li>
<li>Make sure it is thread safe</li>
<li>Make sure it is never null</li>
<li>Make sure it is created only once</li>
<li>Lazy or system initialization? Up to your requirements</li>
<li>Sometimes the OS or the JVM creates singletons for you (e.g. in Java every class definition is a singleton)</li>
<li>Provide a destructor or somehow figure out how to dispose resources</li>
<li>Use little memory</li>
</ul>
","92193"
"How to return an array from a function?","137105","","<p>How can I return an array from a method, and how must I declare it?</p>

<pre><code>int[] test(void); // ??
</code></pre>
","<p><code>int* test();</code></p>

<p>but it would be ""more C++"" to use vectors:</p>

<p><code>std::vector&lt; int &gt; test();</code></p>

<p><strong>EDIT</strong><br>
I'll clarify some point. Since you mentioned C++, I'll go with <code>new[]</code> and <code>delete[]</code> operators, but it's the same with malloc/free.</p>

<p>In the first case, you'll write something like:</p>

<pre><code>int* test() {
    return new int[size_needed];
}
</code></pre>

<p>but it's not a nice idea because your function's client doesn't really know the size of the array you are returning, although the client can safely deallocate it with a call to <code>delete[]</code>.</p>

<pre><code>int* theArray = test();
for (size_t i; i &lt; ???; ++i) { // I don't know what is the array size!
    // ...
}
delete[] theArray; // ok.
</code></pre>

<p>A better signature would be this one:</p>

<pre><code>int* test(size_t&amp; arraySize) {
    array_size = 10;
    return new int[array_size];
}
</code></pre>

<p>And your client code would now be:</p>

<pre><code>size_t theSize = 0;
int* theArray = test(theSize);
for (size_t i; i &lt; theSize; ++i) { // now I can safely iterate the array
    // ...
}
delete[] theArray; // still ok.
</code></pre>

<p>Since this is C++, `std::vector&lt; T > is a widely-used solution:</p>

<pre><code>std::vector&lt;int&gt; test() {
    std::vector&lt;int&gt; vector(10);
    return vector;
}
</code></pre>

<p>Now you don't have to call <code>delete[]</code>, since it will be handled by the object, and you can safely iterate it with:</p>

<pre><code>std::vector&lt;int&gt; v = test();
std::vector&lt;int&gt;::iterator it = v.begin();
for (; it != v.end(); ++it) {
   // do your things
}
</code></pre>

<p>which is easier and safer.</p>
","4264314"
"How to resize an image to a specific size in OpenCV?","136581","","<pre><code>IplImage* img = cvLoadImage(""something.jpg"");
IplImage* src = cvLoadImage(""src.jpg"");
cvSub(src, img, img);
</code></pre>

<p>But the size of the source image is different from <code>img</code>.</p>

<p>Is there any opencv function to resize it to the <code>img</code> size?</p>
","<p>You can use <a href=""http://docs.opencv.org/modules/imgproc/doc/geometric_transformations.html?#void%20cvResize%28const%20CvArr%2a%20src,%20CvArr%2a%20dst,%20int%20interpolation%29""><code>cvResize</code></a>. Or better use c++ interface (eg <code>cv::Mat</code> instead of <code>IplImage</code> and <code>cv::imread</code> instead of <code>cvLoadImage</code>) and then use <code>cv::resize</code> which handles memory allocation and deallocation itself.</p>
","11679779"
"What does 'const static' mean in C and C++?","136571","","<pre><code>const static int foo = 42;
</code></pre>

<p>I saw this in some code here on StackOverflow and I couldn't figure out what it does. Then I saw some confused answers on other forums. My best guess is that it's used in C to hide the constant <code>foo</code> from other modules. Is this correct? If so, why would anyone use it in a C++ context where you can just make it <code>private</code>?</p>
","<p>It has uses in both C and C++.</p>

<p>As you guessed, the <code>static</code> part limits its scope to that <a href=""https://stackoverflow.com/questions/1106149/what-is-a-translation-unit-in-c"">compilation unit</a>. It also provides for static initialization. <code>const</code> just tells the compiler to not let anybody modify it. This variable is either put in the data or bss segment depending on the architecture, and might be in memory marked read-only.</p>

<p>All that is how C treats these variables (or how C++ treats namespace variables). In C++, a member marked <code>static</code> is shared by all instances of a given class. Whether it's private or not doesn't affect the fact that one variable is shared by multiple instances. Having <code>const</code> on there will warn you if any code would try to modify that.</p>

<p>If it was strictly private, then each instance of the class would get its own version (optimizer notwithstanding).</p>
","177451"
"C++: ""std::endl"" vs ""\n""","136291","","<p>Many C++ books contain example code like this...</p>

<pre><code>std::cout &lt;&lt; ""Test line"" &lt;&lt; std::endl;
</code></pre>

<p>...so I've always done that too. But I've seen a lot of code from working developers like this instead:</p>

<pre><code>std::cout &lt;&lt; ""Test line\n"";
</code></pre>

<p>Is there a technical reason to prefer one over the other, or is it just a matter of coding style?</p>
","<p>The varying line-ending characters don't matter, assuming the file is open in text mode, which is what you get unless you ask for binary.  The compiled program will write out the correct thing for the system compiled for.</p>

<p>The only difference is that <a href=""http://en.cppreference.com/w/cpp/io/manip/endl"" rel=""noreferrer""><code>std::endl</code></a> flushes the output buffer, and <code>'\n'</code> doesn't.  If you don't want the buffer flushed frequently, use <code>'\n'</code>.  If you do (for example, if you want to get all the output, and the program is unstable), use <code>std::endl</code>.</p>
","213977"
"C++11 introduced a standardized memory model. What does it mean? And how is it going to affect C++ programming?","136242","","<p>C++11 introduced a standardized memory model, but what exactly does that mean? And how is it going to affect C++ programming?</p>

<p><a href=""http://www.theregister.co.uk/2011/06/11/herb_sutter_next_c_plus_plus/page2.html"" rel=""noreferrer"">This article</a> (by <strong>Gavin Clarke</strong> who quotes <strong>Herb Sutter</strong>) says that,</p>

<blockquote>
  <p>The memory model means that C++ code
  now has a standardized library to call
  regardless of who made the compiler
  and on what platform it's running.
  There's a standard way to control how
  different threads talk to the
  processor's memory.</p>
  
  <p>""When you are talking about splitting
  [code] across different cores that's
  in the standard, we are talking about
  the memory model. We are going to
  optimize it without breaking the
  following assumptions people are going
  to make in the code,"" <strong>Sutter</strong> said.</p>
</blockquote>

<p>Well, I can <em>memorize</em> this and similar paragraphs available online (as I've had my own memory model since birth :P) and can even post as answer to questions asked by others, but to be honest, I don't exactly understand this.</p>

<p>So, what I basically want to know is, C++ programmers used to develop multi-threaded applications even before, so how does it matter if it's POSIX threads, or Windows threads, or C++11 threads? What are the benefits? I want to understand the low-level details.</p>

<p>I also get this feeling that the C++11 memory model is somehow related to C++11 multi-threading support, as I often see these two together. If it is, how exactly? Why should they be related?</p>

<p>As I don't know how internals of multi-threading works, and what memory model means in general, please help me understand these concepts. :-)</p>
","<p>First, you have to learn to think like a Language Lawyer.</p>

<p>The C++ specification does not make reference to any particular compiler, operating system, or CPU.  It makes reference to an <em>abstract machine</em> that is a generalization of actual systems.  In the Language Lawyer world, the job of the programmer is to write code for the abstract machine; the job of the compiler is to actualize that code on a concrete machine.  By coding rigidly to the spec, you can be certain that your code will compile and run without modification on any system with a compliant C++ compiler, whether today or 50 years from now.</p>

<p>The abstract machine in the C++98/C++03 specification is fundamentally single-threaded.  So it is not possible to write multi-threaded C++ code that is ""fully portable"" with respect to the spec.  The spec does not even say anything about the <em>atomicity</em> of memory loads and stores or the <em>order</em> in which loads and stores might happen, never mind things like mutexes.</p>

<p>Of course, you can write multi-threaded code in practice for particular concrete systems -- like pthreads or Windows.  But there is no <em>standard</em> way to write multi-threaded code for C++98/C++03.</p>

<p>The abstract machine in C++11 is multi-threaded by design.  It also has a well-defined <em>memory model</em>; that is, it says what the compiler may and may not do when it comes to accessing memory.</p>

<p>Consider the following example, where a pair of global variables are accessed concurrently by two threads:</p>

<pre><code>           Global
           int x, y;

Thread 1            Thread 2
x = 17;             cout &lt;&lt; y &lt;&lt; "" "";
y = 37;             cout &lt;&lt; x &lt;&lt; endl;
</code></pre>

<p>What might Thread 2 output?</p>

<p>Under C++98/C++03, this is not even Undefined Behavior; the question itself is <em>meaningless</em> because the standard does not contemplate anything called a ""thread"".</p>

<p>Under C++11, the result is Undefined Behavior, because loads and stores need not be atomic in general.  Which may not seem like much of an improvement...  And by itself, it's not.</p>

<p>But with C++11, you can write this:</p>

<pre><code>           Global
           atomic&lt;int&gt; x, y;

Thread 1                 Thread 2
x.store(17);             cout &lt;&lt; y.load() &lt;&lt; "" "";
y.store(37);             cout &lt;&lt; x.load() &lt;&lt; endl;
</code></pre>

<p>Now things get much more interesting.  First of all, the behavior here is <em>defined</em>.  Thread 2 could now print <code>0 0</code> (if it runs before Thread 1), <code>37 17</code> (if it runs after Thread 1), or <code>0 17</code> (if it runs after Thread 1 assigns to x but before it assigns to y).</p>

<p>What it cannot print is <code>37 0</code>, because the default mode for atomic loads/stores in C++11 is to enforce <em>sequential consistency</em>.  This just means all loads and stores must be ""as if"" they happened in the order you wrote them within each thread, while operations among threads can be interleaved however the system likes.  So the default behavior of atomics provides both <em>atomicity</em> and <em>ordering</em> for loads and stores.</p>

<p>Now, on a modern CPU, ensuring sequential consistency can be expensive.  In particular, the compiler is likely to emit full-blown memory barriers between every access here.  But if your algorithm can tolerate out-of-order loads and stores; i.e., if it requires atomicity but not ordering; i.e., if it can tolerate <code>37 0</code> as output from this program, then you can write this:</p>

<pre><code>           Global
           atomic&lt;int&gt; x, y;

Thread 1                            Thread 2
x.store(17,memory_order_relaxed);   cout &lt;&lt; y.load(memory_order_relaxed) &lt;&lt; "" "";
y.store(37,memory_order_relaxed);   cout &lt;&lt; x.load(memory_order_relaxed) &lt;&lt; endl;
</code></pre>

<p>The more modern the CPU, the more likely this is to be faster than the previous example.</p>

<p>Finally, if you just need to keep particular loads and stores in order, you can write:</p>

<pre><code>           Global
           atomic&lt;int&gt; x, y;

Thread 1                            Thread 2
x.store(17,memory_order_release);   cout &lt;&lt; y.load(memory_order_acquire) &lt;&lt; "" "";
y.store(37,memory_order_release);   cout &lt;&lt; x.load(memory_order_acquire) &lt;&lt; endl;
</code></pre>

<p>This takes us back to the ordered loads and stores -- so <code>37 0</code> is no longer a possible output -- but it does so with minimal overhead.  (In this trivial example, the result is the same as full-blown sequential consistency; in a larger program, it would not be.)</p>

<p>Of course, if the only outputs you want to see are <code>0 0</code> or <code>37 17</code>, you can just wrap a mutex around the original code.  But if you have read this far, I bet you already know how that works, and this answer is already longer than I intended :-).</p>

<p>So, bottom line. Mutexes are great, and C++11 standardizes them. But sometimes for performance reasons you want lower-level primitives (e.g., the classic <a href=""http://www.justsoftwaresolutions.co.uk/threading/multithreading-in-c++0x-part-6-double-checked-locking.html"" rel=""noreferrer"">double-checked locking pattern</a>).  The new standard provides high-level gadgets like mutexes and condition variables, and it also provides low-level gadgets like atomic types and the various flavors of memory barrier.  So now you can write sophisticated, high-performance concurrent routines entirely within the language specified by the standard, and you can be certain your code will compile and run unchanged on both today's systems and tomorrow's.</p>

<p>Although to be frank, unless you are an expert and working on some serious low-level code, you should probably stick to mutexes and condition variables.  That's what I intend to do.</p>

<p>For more on this stuff, see <a href=""http://bartoszmilewski.wordpress.com/2008/12/01/c-atomics-and-memory-ordering/"" rel=""noreferrer"">this blog post</a>.</p>
","6319356"
"How do I create a pause/wait function using Qt?","136000","","<p>I'm playing around with <a href=""https://en.wikipedia.org/wiki/Qt_%28software%29"" rel=""noreferrer"">Qt</a>, and I want to create a simple pause between two commands. However it won't seem to let me use <code>Sleep(int mili);</code>, and I can't find any obvious wait functions.</p>

<p>I am basically just making a console application to test some class code which will later be included in a proper Qt GUI, so for now I'm not bothered about breaking the whole event-driven model.</p>
","<p>This <a href=""https://stackoverflow.com/questions/3149356/qt-make-a-function-to-pause-at-some-moment-for-some-time"">previous question</a> mentions using <code>qSleep()</code> which is in the <code>QtTest</code> module. To avoid the overhead linking in the <code>QtTest</code> module, looking at the source for that function you could just make your own copy and call it. It uses defines to call either Windows <code>Sleep()</code> or Linux <code>nanosleep()</code>.</p>

<pre><code>#ifdef Q_OS_WIN
#include &lt;windows.h&gt; // for Sleep
#endif
void QTest::qSleep(int ms)
{
    QTEST_ASSERT(ms &gt; 0);

#ifdef Q_OS_WIN
    Sleep(uint(ms));
#else
    struct timespec ts = { ms / 1000, (ms % 1000) * 1000 * 1000 };
    nanosleep(&amp;ts, NULL);
#endif
}
</code></pre>
","3753182"
"In STL maps, is it better to use map::insert than []?","135512","","<p>A while ago, I had a discussion with a colleague about how to insert values in STL <a href=""http://www.sgi.com/tech/stl/Map.html"" rel=""noreferrer"">maps</a>.  I preferred
<code>map[key] = value;</code>
because it feels natural and is clear to read whereas he preferred
<code>map.insert(std::make_pair(key, value))</code></p>

<p>I just asked him and neither of us can remember the reason why insert is better, but I am sure it was not just a style preference rather there was a technical reason such as efficiency.  The <a href=""http://www.sgi.com/tech/stl/Map.html"" rel=""noreferrer"">SGI STL reference</a> simply says ""Strictly speaking, this member function is unnecessary: it exists only for convenience.""</p>

<p>Can anybody tell me that reason, or am I just dreaming that there is one?</p>
","<p>When you write</p>

<pre><code>map[key] = value;
</code></pre>

<p>there's no way to tell if you <strong>replaced</strong> the <code>value</code> for <code>key</code>, or if you <strong>created</strong> a new <code>key</code> with <code>value</code>.</p>

<p><a href=""http://en.cppreference.com/w/cpp/container/map/insert"" rel=""noreferrer""><code>map::insert()</code></a> will only create:</p>

<pre><code>using std::cout; using std::endl;
typedef std::map&lt;int, std::string&gt; MyMap;
MyMap map;
// ...
std::pair&lt;MyMap::iterator, bool&gt; res = map.insert(std::make_pair(key,value));
if ( ! res.second ) {
    cout &lt;&lt; ""key "" &lt;&lt;  key &lt;&lt; "" already exists ""
         &lt;&lt; "" with value "" &lt;&lt; (res.first)-&gt;second &lt;&lt; endl;
} else {
    cout &lt;&lt; ""created key "" &lt;&lt; key &lt;&lt; "" with value "" &lt;&lt; value &lt;&lt; endl;
}
</code></pre>

<p>For most of my apps, I usually don't care if I'm creating or replacing, so I use the easier to read <code>map[key] = value</code>.</p>
","327289"
"How to convert CString and ::std::string  ::std::wstring to each other?","135463","","<p><code>CString</code> is quite handy, while <code>std::string</code> is more compatible with STL container.
I am using <code>hash_map</code>. However, <code>hash_map</code> does not support <code>CString</code> as key, so I want to convert <code>CString</code> into <code>std::string</code>.</p>

<p>Writing a <code>CString</code> hash function seems to take a lot of time.</p>

<pre><code>CString -----&gt; std::string
</code></pre>

<p>How can I do this?</p>

<pre><code>std::string -----&gt; CString:

inline CString toCString(std::string const&amp; str)
{
    return CString(str.c_str()); 
}
</code></pre>

<p>Am I right?</p>

<hr>

<p><strong>EDIT:</strong></p>

<p>Here are more questions:</p>

<p>How can I convert <code>wstring</code>, <code>CString</code> to each other?</p>

<pre><code>//wstring -&gt; CString,
std::wstring src;
CString result(src.c_str());
//CString-&gt;wstring. 
CString src;
::std::wstring des(src.GetString());
</code></pre>

<p>Is there <strong>any</strong> problem?</p>

<p>How can I convert <code>std::wstring</code>, <code>std::string</code> to each other?</p>
","<p>According to <a href=""http://www.codeguru.com/forum/archive/index.php/t-231155.html"" rel=""noreferrer"">CodeGuru</a>:</p>

<p><code>CString</code> to <code>std::string</code>:</p>

<pre><code>CString cs(""Hello"");
std::string s((LPCTSTR)cs);
</code></pre>

<p><strong>BUT:</strong> <code>std::string</code> cannot always construct from a <code>LPCTSTR</code>. i.e. the code will fail for UNICODE builds.</p>

<p>As <code>std::string</code> can construct only from <code>LPSTR</code> / <code>LPCSTR</code>, a programmer who uses VC++ 7.x or better can utilize conversion classes such as <code>CT2CA</code> as an intermediary.</p>

<pre><code>CString cs (""Hello"");
// Convert a TCHAR string to a LPCSTR
CT2CA pszConvertedAnsiString (cs);
// construct a std::string using the LPCSTR input
std::string strStd (pszConvertedAnsiString);
</code></pre>

<p><a href=""http://cstrings.blogspot.com/2006/08/how-to-convert-from-stdstring-to.html"" rel=""noreferrer""><code>std::string</code> to <code>CString</code></a>: (From <a href=""http://cstrings.blogspot.com/2006/08/how-to-convert-from-stdstring-to.html"" rel=""noreferrer"">Visual Studio's CString FAQs...</a>)</p>

<pre><code>std::string s(""Hello"");
CString cs(s.c_str());
</code></pre>

<p><code>CStringT</code> can construct from both character or wide-character strings. i.e. It can convert from <code>char*</code> (i.e. <code>LPSTR</code>) or from <code>wchar_t*</code> (<code>LPWSTR</code>).</p>

<p>In other words, char-specialization (of <code>CStringT</code>) i.e. <code>CStringA</code>, <code>wchar_t</code>-specilization <code>CStringW</code>, and <code>TCHAR</code>-specialization <code>CString</code> can be constructed from either <code>char</code> or wide-character, <del>null terminated (null-termination is very important here)</del> string sources.<br>
Althoug <a href=""https://stackoverflow.com/users/1889329/iinspectable"">IInspectable</a> amends the ""null-termination"" part <a href=""https://stackoverflow.com/questions/258050/how-to-convert-cstring-and-stdstring-stdwstring-to-each-other/258052?noredirect=1#comment29168168_258052"">in the comments</a>:</p>

<blockquote>
  <p><strong>NUL-termination is not required</strong>.<br>
  <code>CStringT</code> has conversion constructors that take an explicit length argument. This also means that you can construct <code>CStringT</code> objects from <code>std::string</code> objects with embedded <code>NUL</code> characters.</p>
</blockquote>
","258052"
"Inheriting constructors","134956","","<p>Why does this code:</p>

<pre><code>class A
{
    public: 
        explicit A(int x) {}
};

class B: public A
{
};

int main(void)
{
    B *b = new B(5);
    delete b;
}
</code></pre>

<p>Result in these errors:</p>

<pre>
main.cpp: In function ‘int main()’:
main.cpp:13: error: no matching function for call to ‘B::B(int)’
main.cpp:8: note: candidates are: B::B()
main.cpp:8: note:                 B::B(const B&)
</pre>

<p>Shouldn't B inherit A's constructor?</p>

<p>(this is using gcc)</p>
","<p>In C++03 standard constructors cannot be inherited and you need to inherit them manually one by one by calling base implementation on your own. If your compiler supports C++11 standard, there is a constructor inheritance. For more see <a href=""http://en.wikipedia.org/wiki/C%2B%2B11#Object_construction_improvement"" rel=""noreferrer"">Wikipedia C++11 article</a>. With the new standard you write:</p>

<pre><code>class A
{
    public: 
        explicit A(int x) {}
};

class B: public A
{
     using A::A;
};
</code></pre>
","434784"
"What is exactly the base pointer and stack pointer? To what do they point?","134676","","<p>Using <a href=""http://en.wikipedia.org/wiki/Call_stack"" rel=""noreferrer"">this example</a> coming from wikipedia, in which DrawSquare() calls DrawLine(),</p>

<p><img src=""https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Call_stack_layout.svg/342px-Call_stack_layout.svg.png"" alt=""alt text""></p>

<p>(Note that this diagram has high addresses at the bottom and low addresses at the top.)</p>

<p>Could anyone explain me what <code>ebp</code> and <code>esp</code> are in this context?</p>

<p>From what I see, I'd say the stack pointer points always to the top of the stack, and the base pointer to the beginning of the the current function? Or what?</p>

<hr>

<p>edit: I mean this in the context of windows programs</p>

<p><strong>edit2: And how does <code>eip</code> work, too?</strong></p>

<p><strong>edit3:</strong> I have the following code from MSVC++:</p>

<pre><code>var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
hInstance= dword ptr  8
hPrevInstance= dword ptr  0Ch
lpCmdLine= dword ptr  10h
nShowCmd= dword ptr  14h
</code></pre>

<p>All of them seem to be dwords, thus taking 4 bytes each. So I can see there is a gap from hInstance to var_4 of 4 bytes. What are they? I assume it is the return address, as can be seen in wikipedia's picture?</p>

<hr>

<p>(editor's note: removed a long quote from Michael's answer, which doesn't belong in the question, but a followup question was edited in):</p>

<p>This is because the flow of the function call is:</p>

<pre><code>* Push parameters (hInstance, etc.)
* Call function, which pushes return address
* Push ebp
* Allocate space for locals
</code></pre>

<p><strong>My question (last, i hope!) now is, what is exactly what happens from the instant I pop the arguments of the function i want to call up to the end of the prolog? I want to know how the ebp, esp evolve during those moments(I already understood how the prolog works, I just want to know what is happening after i pushed the arguments on the stack and before the prolog).</strong></p>
","<p><code>esp</code> is as you say it is, the top of the stack.</p>

<p><code>ebp</code> is usually set to <code>esp</code> at the start of the function. Function parameters and local variables are accessed by adding and subtracting, respectively, a constant offset from <code>ebp</code>.  All x86 calling conventions define <code>ebp</code> as being preserved across function calls.  <code>ebp</code> itself actually points to the previous frame's base pointer, which enables stack walking in a debugger and viewing other frames local variables to work.  </p>

<p>Most function prologs look something like:</p>

<pre class=""lang-none prettyprint-override""><code>push ebp      ; Preserve current frame pointer
mov ebp, esp  ; Create new frame pointer pointing to current stack top
sub esp, 20   ; allocate 20 bytes worth of locals on stack.
</code></pre>

<p>Then later in the function you may have code like (presuming both local variables are 4 bytes)</p>

<pre class=""lang-none prettyprint-override""><code>mov [ebp-4], eax    ; Store eax in first local
mov ebx, [ebp - 8]  ; Load ebx from second local
</code></pre>

<p>FPO or <em>frame pointer omission</em> optimization which you can enable will actually eliminate this and use <code>ebp</code> as another register and access locals directly off of <code>esp</code>, but this makes debugging a bit more difficult since the debugger can no longer directly access the stack frames of earlier function calls.</p>

<p>EDIT:</p>

<p>For your updated question, the missing two entries in the stack are:</p>

<pre class=""lang-none prettyprint-override""><code>var_C = dword ptr -0Ch
var_8 = dword ptr -8
var_4 = dword ptr -4
*savedFramePointer = dword ptr 0*
*return address = dword ptr 4*
hInstance = dword ptr  8h
PrevInstance = dword ptr  0C
hlpCmdLine = dword ptr  10h
nShowCmd = dword ptr  14h
</code></pre>

<p>This is because the flow of the function call is:</p>

<ul>
<li>Push parameters (<code>hInstance</code>, etc.)</li>
<li>Call function, which pushes return address</li>
<li>Push <code>ebp</code></li>
<li>Allocate space for locals</li>
</ul>
","1395646"
"What uses are there for ""placement new""?","134436","","<p>Has anyone here ever used C++'s ""placement new""? If so, what for? It looks to me like it would only be useful on memory-mapped hardware.</p>
","<h2>Placement new allows you to construct an object on memory that's already allocated.</h2>

<p>You may want to do this for optimizations (it is faster not to re-allocate all the time) but you need to re-construct an object multiple times.  If you need to keep re-allocating it might be more efficient to allocate more than you need, even though you don't want to use it yet.  </p>

<p>Devex gives a <a href=""http://www.devx.com/tips/Tip/12582"" rel=""noreferrer"">good example</a>:</p>

<blockquote>
  <p>Standard C++ also supports placement
  new operator, which constructs an
  object on a pre-allocated buffer. This
  is useful when building a memory pool,
  a garbage collector or simply when
  performance and exception safety are
  paramount (there's no danger of
  allocation failure since the memory
  has already been allocated, and
  constructing an object on a
  pre-allocated buffer takes less time):</p>
</blockquote>

<pre><code>char *buf  = new char[sizeof(string)]; // pre-allocated buffer
string *p = new (buf) string(""hi"");    // placement new
string *q = new string(""hi"");          // ordinary heap allocation
</code></pre>

<p>You may also want to be sure there can be no allocation failure at a certain part of critical code (maybe you work on a pacemaker for example).  In that case you would want to use placement new. </p>

<h2>Deallocation in placement new</h2>

<p>You should not deallocate every object that is using the memory buffer.  Instead you should delete[] only the original buffer.  You would have to then call the destructors directly of your classes manually.  For a good suggestion on this please see Stroustrup's FAQ on: <a href=""http://www.stroustrup.com/bs_faq2.html#placement-delete"" rel=""noreferrer"">Is there a ""placement delete""</a>?</p>
","222578"
"C++ display stack trace on exception","134025","","<p>I want to have a way to report the stack trace to the user if an exception is thrown. What is the best way to do this? Does it take huge amounts of extra code?</p>

<p>To answer questions:</p>

<p>I'd like it to be portable if possible. I want information to pop up, so the user can copy the stack trace and email it to me if an error comes up.</p>
","<p>It depends which platform. </p>

<p>On GCC it's pretty trivial, see <a href=""https://stackoverflow.com/questions/77005/how-to-generate-a-stacktrace-when-my-gcc-c-app-crashes"">this post</a> for more details.</p>

<p>On MSVC then you can use the <a href=""http://www.codeproject.com/KB/threads/StackWalker.aspx"" rel=""nofollow noreferrer"">StackWalker</a> library that handles all of the underlying API calls needed for Windows.</p>

<p>You'll have to figure out the best way to integrate this functionality into your app, but the amount of code you need to write should be minimal.</p>
","691742"
"How do I print the full value of a long string in gdb?","133831","","<p>I want to print the full length of a C-string in GDB.  By default it's being abbreviated, how do I force GDB to print the whole string?</p>
","<pre><code>set print elements 0
</code></pre>

<p><a href=""http://ftp.gnu.org/old-gnu/Manuals/gdb-5.1.1/html_node/gdb_57.html#IDX353"" rel=""noreferrer"">From the GDB manual</a>: </p>

<blockquote><code>set print elements </code><i><code>number-of-elements</code></i></blockquote>

<blockquote>
Set a limit on how many elements of an array GDB will print. If GDB is printing a large array, it stops printing after it has printed the number of elements set by the <code>set print elements</code> command. This limit also applies to the display of strings. When GDB starts, this limit is set to 200. <b>Setting <i>number-of-elements</i> to zero means that the printing is unlimited</b>.
</blockquote>
","233339"
"error LNK2005, already defined?","133744","","<p>I have 2 files, A.cpp and B.cpp, in a Win32 console application.</p>

<p>Both 2 files contain only the following 2 lines of code:</p>

<pre><code>#include ""stdafx.h""
int k;
</code></pre>

<p>When compiling it produces the error</p>

<pre><code>Error   1   error LNK2005: ""int k"" (?a@@3HA) already defined in A.obj
</code></pre>

<p>I don't understand what is happening.</p>

<p>Can someone please explain this to me?</p>
","<p><strong>Why this error?</strong></p>

<p>You broke the <strong><a href=""http://en.wikipedia.org/wiki/One_Definition_Rule"" rel=""noreferrer"">one definition rule</a></strong> and hence the linking error.   </p>

<p><strong>Suggested Solutions:</strong></p>

<hr>

<p>If you need the same named variable in the two cpp files then You need to use Nameless namespace(Anonymous Namespace) to avoid the error.    </p>

<pre><code>namespace 
{
    int k;
}
</code></pre>

<hr>

<p>If you need to share the same variable across multiple files then you need to use <code>extern</code>.</p>

<p><strong>A.h</strong></p>

<pre><code>extern int k;
</code></pre>

<p><strong>A.cpp</strong></p>

<pre><code>#include ""A.h""
int k = 0;
</code></pre>

<p><strong>B.cpp</strong></p>

<pre><code>#include ""A.h""

//Use `k` anywhere in the file 
</code></pre>
","10046514"
"How to convert std::string to LPCWSTR in C++ (Unicode)","133724","","<p>I'm looking for a method, or a code snippet for converting std::string to LPCWSTR</p>
","<p>Thanks for the link to the MSDN article. This is exactly what I was looking for.</p>

<pre><code>std::wstring s2ws(const std::string&amp; s)
{
    int len;
    int slength = (int)s.length() + 1;
    len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0); 
    wchar_t* buf = new wchar_t[len];
    MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);
    std::wstring r(buf);
    delete[] buf;
    return r;
}

std::wstring stemp = s2ws(myString);
LPCWSTR result = stemp.c_str();
</code></pre>
","27296"
"How to define several include path in Makefile","133702","","<p>New to C++; Basic understanding of includes, libraries and the compile process. Did a few simple makefiles yet.</p>

<p>My current project involves using an informix DB api and i need to include header files in more than one nonstandard dirs. How to write that ? Havent found anything on the net, probably because i did not use good search terms</p>

<p>This is one way what i tried (not working). Just to show the makefile </p>

<pre><code>LIB=-L/usr/informix/lib/c++
INC=-I/usr/informix/incl/c++ /opt/informix/incl/public

default:    main

main:   test.cpp
        gcc -Wall $(LIB) $(INC) -c test.cpp
        #gcc -Wall $(LIB) $(INC) -I/opt/informix/incl/public -c test.cpp

clean:
        rm -r test.o make.out
</code></pre>
","<p>You have to prepend every directory with <code>-I</code>:</p>

<pre><code>INC=-I/usr/informix/incl/c++ -I/opt/informix/incl/public
</code></pre>
","4134781"
"How to write std::string to file?","133608","","<p>I want to write a <code>std::string</code> variable I am accepting from the user to a file. I tried using the <code>write()</code> method and it writes to the file. But when I open the file I see boxes instead of the string. </p>

<p>The string is only a variable length single word. Is <code>std::string</code> suitable for this or should I use a character array or something.</p>

<pre><code>ofstream write;
std::string studentName, roll, studentPassword, filename;


public:

void studentRegister()
{
    cout&lt;&lt;""Enter roll number""&lt;&lt;endl;
    cin&gt;&gt;roll;
    cout&lt;&lt;""Enter your name""&lt;&lt;endl;
    cin&gt;&gt;studentName;
    cout&lt;&lt;""Enter password""&lt;&lt;endl;
    cin&gt;&gt;studentPassword;


    filename = roll + "".txt"";
    write.open(filename.c_str(), ios::out | ios::binary);

    write.put(ch);
    write.seekp(3, ios::beg);

    write.write((char *)&amp;studentPassword, sizeof(std::string));
    write.close();`
}
</code></pre>
","<p>You're currently writing the binary data in the <code>string</code>-object to your file. This binary data will probably only consist of a pointer to the actual data, and an integer representing the length of the string.</p>

<p>If you want to write to a text file, the best way to do this would probably be with an <code>ofstream</code>, an ""out-file-stream"". It behaves exactly like <code>std::cout</code>, but the output is written to a file.</p>

<p>The following example reads one string from stdin, and then writes this string to the file <code>output.txt</code>.</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
    std::string input;
    std::cin &gt;&gt; input;
    std::ofstream out(""output.txt"");
    out &lt;&lt; input;
    out.close();
    return 0;
}
</code></pre>

<p>Note that <code>out.close()</code> isn't strictly neccessary here: the deconstructor of <code>ofstream</code> can handle this for us as soon as <code>out</code> goes out of scope.</p>

<p>For more information, see the C++-reference: <a href=""http://cplusplus.com/reference/fstream/ofstream/ofstream/"" rel=""noreferrer"">http://cplusplus.com/reference/fstream/ofstream/ofstream/</a></p>

<p>Now if you need to write to a file in binary form, you should do this using the actual data in the string. The easiest way to acquire this data would be using <code>string::c_str()</code>. So you could use:</p>

<pre><code>write.write( studentPassword.c_str(), sizeof(char)*studentPassword.size() );
</code></pre>
","15388182"
"C++ Object Instantiation","133567","","<p>I'm a C programmer trying to understand C++.  Many tutorials demonstrate object instantiation using a snippet such as:</p>

<pre><code>Dog* sparky = new Dog();
</code></pre>

<p>which implies that later on you'll do:</p>

<pre><code>delete sparky;
</code></pre>

<p>which makes sense.  Now, in the case when dynamic memory allocation is unnecessary, is there any reason to use the above instead of</p>

<pre><code>Dog sparky;
</code></pre>

<p>and let the destructor be called once sparky goes out of scope?</p>

<p>Thanks!</p>
","<p>On the contrary, you should always prefer stack allocations, to the extent that as a rule of thumb, you should never have new/delete in your user code.</p>

<p>As you say, when the variable is declared on the stack, its destructor is automatically called when it goes out of scope, which is your main tool for tracking resource lifetime and avoiding leaks.</p>

<p>So in general, every time you need to allocate a resource, whether it's memory (by calling new), file handles, sockets or anything else, wrap it in a class where the constructor acquires the resource, and the destructor releases it. Then you can create an object of that type on the stack, and you're guaranteed that your resource gets freed when it goes out of scope. That way you don't have to track your new/delete pairs everywhere to ensure you avoid memory leaks.</p>

<p>The most common name for this idiom is <a href=""http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization"" rel=""noreferrer"">RAII</a></p>

<p>Also look into smart pointer classes which are used to wrap the resulting pointers on the rare cases when you do have to allocate something with new outside a dedicated RAII object. You instead pass the pointer to a smart pointer, which then tracks its lifetime, for example by reference counting, and calls the destructor when the last reference goes out of scope. The standard library has <code>std::unique_ptr</code> for simple scope-based management, and <code>std::shared_ptr</code> which does reference counting to implement shared ownership.</p>

<blockquote>
  <p>Many tutorials demonstrate object
  instantiation using a snippet such as ...</p>
</blockquote>

<p>So what you've discovered is that most tutorials suck. ;)
Most tutorials teach you lousy C++ practices, including calling new/delete to create variables when it's not necessary, and giving you a hard time tracking lifetime of your allocations.</p>
","333541"
"How to iterate over a STL map full of strings in C++","133064","","<p>I have the following issue related to iterating over an associative array of strings defined using std::map.</p>

<pre><code>-- snip --
class something 
{
//...
   private:
      std::map&lt;std::string, std::string&gt; table;
//...
}
</code></pre>

<p>In the constructor I populate table with pairs of string keys associated to string data. Somewhere else I have a method toString that returns a string object that contains all the keys and associated data contained in the table object(as key=data format).</p>

<pre><code>std::string something::toString() 
{
        std::map&lt;std::string, std::string&gt;::iterator iter;
        std::string* strToReturn = new std::string("""");

        for (iter = table.begin(); iter != table.end(); iter++) {
           strToReturn-&gt;append(iter-&gt;first());
           strToReturn-&gt;append('=');
           strToRetunr-&gt;append(iter-&gt;second());
           //....
        }
       //...
}
</code></pre>

<p>When I'm trying to compile I get the following </p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>error: ""error: no match for call to ‘(std::basic_string, std::allocator >) ()’"".</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>Could somebody explain to me what is missing, what I'm doing wrong? 
I only found some discussion about a similar issue in the case of hash_map where the user has to define a hashing function to be able to use hash_map with std::string objects. Could be something similar also in my case? </p>

<p>Thank you!</p>
","<p>Your main problem is that you are calling a method called <code>first()</code> in the iterator. What you are meant to do is use the property called <code>first</code>:</p>

<pre><code>...append(iter-&gt;first) rather than ...append(iter-&gt;first())
</code></pre>

<p>As a matter of style, you shouldn't be using <code>new</code> to create that string.</p>

<pre><code>std::string something::toString() 
{
        std::map&lt;std::string, std::string&gt;::iterator iter;
        std::string strToReturn; //This is no longer on the heap

        for (iter = table.begin(); iter != table.end(); ++iter) {
           strToReturn.append(iter-&gt;first); //Not a method call
           strToReturn.append(""="");
           strToReturn.append(iter-&gt;second);
           //....
           // Make sure you don't modify table here or the iterators will not work as you expect
        }
        //...
        return strToReturn;
}
</code></pre>

<p><strong>edit:</strong> facildelembrar pointed out (in the comments) that in modern C++ you can now rewrite the loop </p>

<pre><code>for (auto&amp; item: table) {
    ...
}
</code></pre>
","1066706"
"Why would one use nested classes in C++?","132909","","<p>Can someone please point me towards some nice resources for understanding and using nested classes? I have some material like Programming Principles and things like this <a href=""https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.1.0/com.ibm.zos.v2r1.cbclx01/cplr061.htm"" rel=""noreferrer""><em>IBM Knowledge Center - Nested Classes</em></a></p>

<p>But I'm still having trouble understanding their purpose. Could someone please help me?</p>
","<p>Nested classes are cool for hiding implementation details</p>

<p>List:</p>

<pre><code>class List
{
    public:
        List(): head(NULL), tail(NULL) {}
    private:
        class Node
        {
              public:
                  int   data;
                  Node* next;
                  Node* prev;
        };
    private:
        Node*     head;
        Node*     tail;
};
</code></pre>

<p>Here I don't want to expose Node as other people may decide to use the class and that would hinder me from updating my class as anything exposed is part of the public API and must be maintained <strong>forever</strong>. By making the class private, I not only hide the implementation I am also saying this is mine and I may change it at any time so you can not use it.</p>

<p>Look at <code>std::list</code> or <code>std::map</code> they all contain hidden classes (or do they?). The point is they may or may not, but because the implementation is private and hidden the builders of the STL were able to update the code without affecting how you used the code, or leaving a lot of old baggage laying around the STL because they need to maintain backwards compatibility with some fool who decided they wanted to use the Node class that was hidden inside <code>list</code>.</p>
","4571683"
"How does the compilation/linking process work?","132810","","<p>How does the compilation and linking process work?  </p>

<p><sub>
<em>(Note: This is meant to be an entry to <a href=""https://stackoverflow.com/questions/tagged/c++-faq"">Stack Overflow's C++ FAQ</a>. If you want to critique the idea of providing an FAQ in this form, then <a href=""https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag"">the posting on meta that started all this</a> would be the place to do that. Answers to that question are monitored in the <a href=""http://chat.stackoverflow.com/rooms/10/c-lounge"">C++ chatroom</a>, where the FAQ idea started out in the first place, so your answer is very likely to get read by those who came up with the idea.)</em>
</sub></p>
","<p>The compilation of a C++ program involves three steps:</p>

<ol>
<li><p>Preprocessing: the preprocessor takes a C++ source code file and deals with the <code>#include</code>s, <code>#define</code>s and other preprocessor directives. The output of this step is a ""pure"" C++ file without pre-processor directives.</p></li>
<li><p>Compilation: the compiler takes the pre-processor's output and produces an object file from it.</p></li>
<li><p>Linking: the linker takes the object files produced by the compiler and produces either a library or an executable file.</p></li>
</ol>

<h1>Preprocessing</h1>

<p>The preprocessor handles the <em>preprocessor directives</em>, like <code>#include</code> and <code>#define</code>. It is agnostic of the syntax of C++, which is why it must be used with care.</p>

<p>It works on one C++ source file at a time by replacing <code>#include</code> directives with the content of the respective files (which is usually just declarations), doing replacement of macros (<code>#define</code>), and selecting different portions of text depending of <code>#if</code>, <code>#ifdef</code> and <code>#ifndef</code> directives.</p>

<p>The preprocessor works on a stream of preprocessing tokens. Macro substitution is defined as replacing tokens with other tokens (the operator <code>##</code> enables merging two tokens when it makes sense).</p>

<p>After all this, the preprocessor produces a single output that is a stream of tokens resulting from the transformations described above. It also adds some special markers that tell the compiler where each line came from so that it can use those to produce sensible error messages.</p>

<p>Some errors can be produced at this stage with clever use of the <code>#if</code> and <code>#error</code> directives.</p>

<h1>Compilation</h1>

<p>The compilation step is performed on each output of the preprocessor. The compiler parses the pure C++ source code (now without any preprocessor directives) and converts it into assembly code. Then invokes underlying back-end(assembler in toolchain) that assembles that code into machine code producing actual binary file in some format(ELF, COFF, a.out, ...). This object file contains the compiled code (in binary form) of the symbols defined in the input. Symbols in object files are referred to by name.</p>

<p>Object files can refer to symbols that are not defined. This is the case when you use a declaration, and don't provide a definition for it. The compiler doesn't mind this, and will happily produce the object file as long as the source code is well-formed.</p>

<p>Compilers usually let you stop compilation at this point. This is very useful because with it you can compile each source code file separately. The advantage this provides is that you don't need to recompile <em>everything</em> if you only change a single file.</p>

<p>The produced object files can be put in special archives called static libraries, for easier reusing later on.</p>

<p>It's at this stage that ""regular"" compiler errors, like syntax errors or failed overload resolution errors, are reported.</p>

<h1>Linking</h1>

<p>The linker is what produces the final compilation output from the object files the compiler produced. This output can be either a shared (or dynamic) library (and while the name is similar, they haven't got much in common with static libraries mentioned earlier) or an executable.</p>

<p>It links all the object files by replacing the references to undefined symbols with the correct addresses. Each of these symbols can be defined in other object files or in libraries. If they are defined in libraries other than the standard library, you need to tell the linker about them.</p>

<p>At this stage the most common errors are missing definitions or duplicate definitions. The former means that either the definitions don't exist (i.e. they are not written), or that the object files or libraries where they reside were not given to the linker. The latter is obvious: the same symbol was defined in two different object files or libraries.</p>
","6264256"
"How can I read and manipulate CSV file data in C++?","132625","","<p>Pretty self-explanatory, I tried google and got a lot of the dreaded expertsexchange, I searched here as well to no avail. An online tutorial or example would be best. Thanks guys.</p>
","<p>If what you're really doing is manipulating a CSV file itself, Nelson's answer makes sense.  However, my suspicion is that the CSV is simply an artifact of the problem you're solving.  In C++, that probably means you have something like this as your data model:</p>

<pre><code>struct Customer {
    int id;
    std::string first_name;
    std::string last_name;
    struct {
        std::string street;
        std::string unit;
    } address;
    char state[2];
    int zip;
};
</code></pre>

<p>Thus, when you're working with a collection of data, it makes sense to have <code>std::vector&lt;Customer&gt;</code> or <code>std::set&lt;Customer&gt;</code>.</p>

<p>With that in mind, think of your CSV handling as two operations:</p>

<pre><code>// if you wanted to go nuts, you could use a forward iterator concept for both of these
class CSVReader {
public:
    CSVReader(const std::string &amp;inputFile);
    bool hasNextLine();
    void readNextLine(std::vector&lt;std::string&gt; &amp;fields);
private:
    /* secrets */
};
class CSVWriter {
public:
    CSVWriter(const std::string &amp;outputFile);
    void writeNextLine(const std::vector&lt;std::string&gt; &amp;fields);
private:
    /* more secrets */
};
void readCustomers(CSVReader &amp;reader, std::vector&lt;Customer&gt; &amp;customers);
void writeCustomers(CSVWriter &amp;writer, const std::vector&lt;Customer&gt; &amp;customers);
</code></pre>

<p>Read and write a single row at a time, rather than keeping a complete in-memory representation of the file itself.  There are a few obvious benefits:</p>

<ol>
<li>Your data is represented in a form that makes sense for your problem (customers), rather than the current solution (CSV files).</li>
<li>You can trivially add adapters for other data formats, such as bulk SQL import/export, Excel/OO spreadsheet files, or even an HTML <code>&lt;table&gt;</code> rendering.</li>
<li>Your memory footprint is likely to be smaller (depends on relative <code>sizeof(Customer)</code> vs. the number of bytes in a single row).</li>
<li><code>CSVReader</code> and <code>CSVWriter</code> can be reused as the basis for an in-memory model (such as Nelson's) without loss of performance or functionality.  The converse is not true.</li>
</ol>
","415575"
"map vs. hash_map in C++","132577","","<p>I have a question with <code>hash_map</code> and <code>map</code> in C++. I understand that <code>map</code> is in STL, but <code>hash_map</code> is not a standard. What's the difference between the two?</p>
","<p>They are implemented in very different ways.</p>

<p><code>hash_map</code> (<code>unordered_map</code> in TR1 and Boost; use those instead) use a hash table where the key is hashed to a slot in the table and the value is stored in a list tied to that key.</p>

<p><code>map</code> is implemented as a balanced binary search tree (usually a red/black tree).</p>

<p>An <code>unordered_map</code> should give slightly better performance for accessing known elements of the collection, but a <code>map</code> will have additional useful characteristics (e.g. it is stored in sorted order, which allows traversal from start to finish).  <code>unordered_map</code> will be faster on insert and delete than a <code>map</code>.</p>
","2189206"
"How do I create a random alpha-numeric string in C++?","132511","","<p>I'd like to create a random string, consisting of alpha-numeric characters. I want to be able to be specify the length of the string.</p>

<p>How do I do this in C++?</p>
","<p>Mehrdad Afshari's <a href=""https://stackoverflow.com/questions/440133/how-do-i-create-a-random-alpha-numeric-string-in-c#440147"">answer</a> would do the trick, but I found it a bit too verbose for this simple task. Look-up tables can sometimes do wonders:</p>

<pre><code>void gen_random(char *s, const int len) {
    static const char alphanum[] =
        ""0123456789""
        ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
        ""abcdefghijklmnopqrstuvwxyz"";

    for (int i = 0; i &lt; len; ++i) {
        s[i] = alphanum[rand() % (sizeof(alphanum) - 1)];
    }

    s[len] = 0;
}
</code></pre>
","440240"
"What is the lifetime of a static variable in a C++ function?","132324","","<p>If a variable is declared as <code>static</code> in a function's scope it is only initialized once and retains its value between function calls. What exactly is its lifetime? When do its constructor and destructor get called?</p>

<pre><code>void foo() 
{ 
    static string plonk = ""When will I die?"";
}
</code></pre>

<hr>

<p><em>P.S. For those who want to know <a href=""http://blog.stackoverflow.com/2011/07/its-ok-to-ask-and-answer-your-own-questions/"">why I asked the question if I already knew the answer?</a></em></p>
","<p>The lifetime of function <code>static</code> variables begins the first time<sup>[0]</sup> the program flow encounters the declaration and it ends at program termination. This means that the run-time must perform some book keeping in order to destruct it only if it was actually constructed. </p>

<p>Additionally since the standard says that the destructors' of static objects must run in the reverse order of the completion of their construction<sup>[1]</sup>  and the order of construction may depend on the specific program run, the order of construction must be taken into account.</p>

<p><strong>Example</strong> </p>

<pre><code>struct emitter {
    string str;
    emitter(const string&amp; s) : str(s) { cout &lt;&lt; ""Created "" &lt;&lt; str; &lt;&lt; endl; }
    ~emitter() { cout &lt;&lt; ""Destroyed "" &lt;&lt; str &lt;&lt; endl; }
};

void foo(bool skip_first) 
{
    if (!skip_first)
        static emitter a(""in if"");
    static emitter b(""in foo"");
}

int main(int argc, char*[])
{
    foo(argc != 2);
    if (argc == 3)
        foo(false);
}
</code></pre>

<p><strong>Output:</strong></p>

<blockquote>
  <p>C:>sample.exe<br>
  Created in foo<br>
  Destroyed in foo  </p>
  
  <p>C:>sample.exe  1<br>
  Created in if<br>
  Created in foo<br>
  Destroyed in foo<br>
  Destroyed in if  </p>
  
  <p>C:>sample.exe 1 2<br>
  Created in foo<br>
  Created in if<br>
  Destroyed in if<br>
  Destroyed in foo  </p>
</blockquote>

<p><code>[0]</code> Since <strong>C++98</strong><sup>[2]</sup> has no reference to multiple threads how this will be behave in a multi-threaded environment is unspecified, and can be problematic as <a href=""https://stackoverflow.com/questions/246564/what-is-the-lifetime-of-a-static-variable-in-a-c-function#246594"">Roddy</a> mentions.</p>

<p><code>[1]</code> <strong>C++98</strong> section <code>3.6.3.1</code> <em>[basic.start.term]</em></p>

<p><code>[2]</code> In C++11 statics are initialized in a thread safe way, this is also known as <a href=""http://herbsutter.com/2013/09/09/visual-studio-2013-rc-is-now-available/"" rel=""noreferrer""><em>Magic Statics</em></a>.</p>
","246568"
"Is it possible to program iPhone in C++","132169","","<p>I'm all for language diversity, but Objective C is insane. So I'm curious: is it possible to code iPhone apps with C++ while using the Cocoa API, etc?</p>
","<p>Short answer, yes, sort of. You can use Objective-C++, which you can read about at <a href=""http://web.archive.org/web/20101203170217/http://developer.apple.com/library/mac/#/web/20101204020949/http://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocCPlusPlus.html"" rel=""nofollow noreferrer"">Apple Developer Connection.</a></p>

<p>If you know C++ already, learning Objective-C would be pretty simple, if you decided to give that a try. More info on that topic is at the ADC as well.</p>
","270464"
"Pause Console in C++ program","131931","","<p>Which is best way to pause the console in C++ programs?</p>

<ol>
<li>using <code>cin.get()</code></li>
<li>or using <code>system(""pause"")</code></li>
<li>or using C functions like <code>getch()</code> or <code>getchar()</code>?</li>
</ol>

<p>Is it true that use of <code>system(""pause"")</code> leads to non portable code and can't work in UNIX?</p>

<p>Is cin.get() is better to use to pause console? </p>
","<p>There might be a best way (like using the portable <code>cin.get()</code>), <em>but a <strong>good</strong> way doesn't exist</em>. A program that has done its job should quit and give its resources back to the computer.</p>

<p>And yes, any usage of <code>system()</code> leads to unportable code, as the parameter is passed to the shell that owns your process.</p>

<p>Having pausing-code in your source code sooner or later causes hassles:</p>

<ul>
<li>someone forgets to delete the pausing code before checking in

<ul>
<li>now all working mates have to wonder why the app does not close anymore</li>
<li>version history is tainted</li>
</ul></li>
<li><code>#define</code> is hell</li>
<li>it's annoying to anyone who runs your code from the console</li>
<li>it's very, very, very annoying when trying to start and end your program from within a script; quadly annoying if your program is part of a pipeline in the shell, because if the program does not end, the shell script or pipeline won't, too</li>
</ul>

<p>Instead, explore your IDE. It probably has an option not to close the console window after running. If not, it's a great justification to you as a developer worth her/his money to always have a console window open nearby.</p>

<p>Alternatively, you can make this a program option, but I personally have never seen a program with an option <code>--keep-alive-when-dead</code>.</p>

<p><strong>Moral of the story:</strong> This is the user's problem, and not the program's problem. Don't taint your code.</p>
","24776299"
"Removing leading and trailing spaces from a string","131378","","<p>How to remove spaces from a string object in C++.<br>
For example, how to remove leading and trailing spaces from the below string object.  </p>

<pre><code>//Original string: ""         This is a sample string                    ""
//Desired string: ""This is a sample string""
</code></pre>

<p>The string class, as far as I know, doesn't provide any methods to remove leading and trailing spaces.  </p>

<p>To add to the problem, how to extend this formatting to process extra spaces between words of the string. For example,</p>

<pre><code>// Original string: ""          This       is         a sample   string    "" 
// Desired string:  ""This is a sample string""  
</code></pre>

<p>Using the string methods mentioned in the solution, I can think of doing these operations in two steps.</p>

<ol>
<li>Remove leading and trailing spaces.</li>
<li>Use <strong>find_first_of, find_last_of, find_first_not_of, find_last_not_of and substr</strong>, repeatedly at word boundaries to get desired formatting.</li>
</ol>
","<p>It's called trimming. You want to use <code>find_first_not_of</code> to get the index of the first non-whitespace character, then <code>find_last_not_of</code> to get the index from the end that isn't whitespace. With these, use <code>substr</code> to get the sub-string with no surrounding whitespace.</p>

<p>In response to your edit, I don't know the term but I'd guess something along the lines of ""reduce"", so that's what I called it. :) (Note, I've changed the white-space to be a parameter, for flexibility)</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

std::string trim(const std::string&amp; str,
                 const std::string&amp; whitespace = "" \t"")
{
    const auto strBegin = str.find_first_not_of(whitespace);
    if (strBegin == std::string::npos)
        return """"; // no content

    const auto strEnd = str.find_last_not_of(whitespace);
    const auto strRange = strEnd - strBegin + 1;

    return str.substr(strBegin, strRange);
}

std::string reduce(const std::string&amp; str,
                   const std::string&amp; fill = "" "",
                   const std::string&amp; whitespace = "" \t"")
{
    // trim first
    auto result = trim(str, whitespace);

    // replace sub ranges
    auto beginSpace = result.find_first_of(whitespace);
    while (beginSpace != std::string::npos)
    {
        const auto endSpace = result.find_first_not_of(whitespace, beginSpace);
        const auto range = endSpace - beginSpace;

        result.replace(beginSpace, range, fill);

        const auto newStart = beginSpace + fill.length();
        beginSpace = result.find_first_of(whitespace, newStart);
    }

    return result;
}

int main(void)
{
    const std::string foo = ""    too much\t   \tspace\t\t\t  "";
    const std::string bar = ""one\ntwo"";

    std::cout &lt;&lt; ""["" &lt;&lt; trim(foo) &lt;&lt; ""]"" &lt;&lt; std::endl;
    std::cout &lt;&lt; ""["" &lt;&lt; reduce(foo) &lt;&lt; ""]"" &lt;&lt; std::endl;
    std::cout &lt;&lt; ""["" &lt;&lt; reduce(foo, ""-"") &lt;&lt; ""]"" &lt;&lt; std::endl;

    std::cout &lt;&lt; ""["" &lt;&lt; trim(bar) &lt;&lt; ""]"" &lt;&lt; std::endl;
}
</code></pre>

<p>Result:</p>

<pre>
[too much               space]  
[too much space]  
[too-much-space]  
[one  
two]  
</pre>

<p>Though if you can <a href=""http://www.boost.org/doc/html/string_algo.html"" rel=""noreferrer"">Boost</a>, I'd recommend it.</p>
","1798170"
"C++ convert string to hexadecimal and vice versa","131171","","<p>What is the best way to convert a string to hex and vice versa in C++?</p>

<p>Example:</p>

<ul>
<li>A string like <code>""Hello World""</code> to hex format: <code>48656C6C6F20576F726C64</code></li>
<li>And from hex <code>48656C6C6F20576F726C64</code> to string: <code>""Hello World""</code></li>
</ul>
","<blockquote>
  <p>A string like ""Hello World"" to hex format: 48656C6C6F20576F726C64.</p>
</blockquote>

<p>Ah, here you go:</p>

<pre><code>#include &lt;string&gt;

std::string string_to_hex(const std::string&amp; input)
{
    static const char* const lut = ""0123456789ABCDEF"";
    size_t len = input.length();

    std::string output;
    output.reserve(2 * len);
    for (size_t i = 0; i &lt; len; ++i)
    {
        const unsigned char c = input[i];
        output.push_back(lut[c &gt;&gt; 4]);
        output.push_back(lut[c &amp; 15]);
    }
    return output;
}

#include &lt;algorithm&gt;
#include &lt;stdexcept&gt;

std::string hex_to_string(const std::string&amp; input)
{
    static const char* const lut = ""0123456789ABCDEF"";
    size_t len = input.length();
    if (len &amp; 1) throw std::invalid_argument(""odd length"");

    std::string output;
    output.reserve(len / 2);
    for (size_t i = 0; i &lt; len; i += 2)
    {
        char a = input[i];
        const char* p = std::lower_bound(lut, lut + 16, a);
        if (*p != a) throw std::invalid_argument(""not a hex digit"");

        char b = input[i + 1];
        const char* q = std::lower_bound(lut, lut + 16, b);
        if (*q != b) throw std::invalid_argument(""not a hex digit"");

        output.push_back(((p - lut) &lt;&lt; 4) | (q - lut));
    }
    return output;
}
</code></pre>

<p>(This assumes that a char has 8 bits, so it's not very portable, but you can take it from here.)</p>
","3382894"
"Using arrays or std::vectors in C++, what's the performance gap?","131058","","<p>In our C++ course they suggest not to use C++ arrays on new projects anymore. As far as I know Stroustroup himself suggests not to use arrays. But are there significant performance differences?</p>
","<p>Using C++ arrays with <code>new</code> (that is, using dynamical arrays) should be avoided. There is the problem you have to keep track of the size, and you need to delete them manually, and do all sort of housekeeping. </p>

<p>Using arrays on the stack is also discouraged because you don't have range checking, and passing the array around will lose any information about its size (array to pointer conversion). You should use <code>boost::array</code> in that case, which wraps a C++ array in a small class and provides a <code>size</code> function and iterators to iterate over it.</p>

<p>Now the <strong>std::vector vs. native C++ arrays</strong> (taken from the internet):</p>

<pre><code>// Comparison of assembly code generated for basic indexing, dereferencing, 
// and increment operations on vectors and arrays/pointers.

// Assembly code was generated by gcc 4.1.0 invoked with  g++ -O3 -S  on a 
// x86_64-suse-linux machine.

#include &lt;vector&gt;

struct S
{
  int padding;

  std::vector&lt;int&gt; v;
  int * p;
  std::vector&lt;int&gt;::iterator i;
};

int pointer_index (S &amp; s) { return s.p[3]; }
  // movq    32(%rdi), %rax
  // movl    12(%rax), %eax
  // ret

int vector_index (S &amp; s) { return s.v[3]; }
  // movq    8(%rdi), %rax
  // movl    12(%rax), %eax
  // ret

// Conclusion: Indexing a vector is the same damn thing as indexing a pointer.

int pointer_deref (S &amp; s) { return *s.p; }
  // movq    32(%rdi), %rax
  // movl    (%rax), %eax
  // ret

int iterator_deref (S &amp; s) { return *s.i; }
  // movq    40(%rdi), %rax
  // movl    (%rax), %eax
  // ret

// Conclusion: Dereferencing a vector iterator is the same damn thing 
// as dereferencing a pointer.

void pointer_increment (S &amp; s) { ++s.p; }
  // addq    $4, 32(%rdi)
  // ret

void iterator_increment (S &amp; s) { ++s.i; }
  // addq    $4, 40(%rdi)
  // ret

// Conclusion: Incrementing a vector iterator is the same damn thing as 
// incrementing a pointer.
</code></pre>

<p>Note: If you allocate arrays with <code>new</code> and allocate non-class objects (like plain <code>int</code>) or classes without a user defined constructor <em>and</em> you don't want to have your elements initialized initially, using <code>new</code>-allocated arrays can have performance advantages because <code>std::vector</code> initializes all elements to default values (0 for int, for example) on construction (credits to @bernie for remembering me). </p>
","381656"
"Examples of good gotos in C or C++","130702","","<p>In this thread, we look at examples of good uses of <code>goto</code> in C or C++.  It's inspired by <a href=""https://stackoverflow.com/questions/244445/best-refactoring-for-the-dreaded-while-true-loop#244644"">an answer</a> which people voted up because they thought I was joking.</p>

<p>Summary (label changed from original to make intent even clearer):</p>

<pre><code>infinite_loop:

    // code goes here

goto infinite_loop;
</code></pre>

<p>Why it's better than the alternatives:</p>

<ul>
<li>It's specific.  <code>goto</code> is the
language construct which causes an
unconditional branch.  Alternatives
depend on using structures
supporting conditional branches,
with a degenerate always-true
condition.</li>
<li>The label documents the intent
without extra comments.</li>
<li>The reader doesn't have to scan the
intervening code for early <code>break</code>s
(although it's still possible for an
unprincipled hacker to simulate
<code>continue</code> with an early <code>goto</code>).</li>
</ul>

<p><strong>Rules:</strong></p>

<ul>
<li>Pretend that the gotophobes didn't
win.  It's understood that the above
can't be used in real code because
it goes against established idiom.</li>
<li>Assume that we have all heard of
'Goto considered harmful' and know
that goto can be used to write
spaghetti code.</li>
<li>If you disagree with an example,
criticize it on technical merit
alone ('Because people don't like
goto' is not a technical reason).</li>
</ul>

<p>Let's see if we can talk about this like grown ups.</p>

<p><strong>Edit</strong></p>

<p>This question seems finished now.  It generated some high quality answers.  Thanks to everyone,
 especially those who took my little loop example seriously.  Most skeptics were concerned
 by the lack of block scope.  As @quinmars pointed out in a comment, you can always put braces around the 
loop body.  I note in passing that <code>for(;;)</code> and <code>while(true)</code> don't give you the braces 
for free either (and omitting them can cause vexing bugs).  Anyway, I won't waste any more
of your brain power on this trifle - I can live with the harmless and idiomatic <code>for(;;)</code> and <code>while(true)</code> (just as well if I want to keep my job).  </p>

<p>Considering the other responses, I see that many people view <code>goto</code> as something you always 
have to rewrite in another way.  Of course you can avoid a <code>goto</code> by introducing a loop,
 an extra flag, a stack of nested <code>if</code>s, or whatever, but why not consider whether <code>goto</code> is 
perhaps the best tool for the job? Put another way, how much ugliness are people prepared to endure to avoid using a built-in language feature for its intended purpose? My take is that
even adding a flag is too high a price to pay.  I like my variables to represent things in 
the problem or solution domains. 'Solely to avoid a <code>goto</code>' doesn't cut it.</p>

<p>I'll accept the first answer which gave the C pattern for branching to a cleanup block. IMO, this makes the strongest case for a <code>goto</code> of all the posted answers, certainly 
if you measure it by the contortions a hater has to go through to avoid it.</p>
","<p>Heres one trick I've heard of people using. I've never seen it in the wild though. And it only applies to C because C++ has RAII to do this more idiomatically. </p>

<pre><code>void foo()
{
    if (!doA())
        goto exit;
    if (!doB())
        goto cleanupA;
    if (!doC())
        goto cleanupB;

    /* everything has succeeded */
    return;

cleanupB:
    undoB();
cleanupA:
    undoA();
exit:
    return;
}
</code></pre>
","245761"
"Use of ""this"" keyword in C++","130219","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/1057425/is-excessive-use-of-this-in-c-a-code-smell"">Is excessive use of this in C++ a code smell</a><br>
  <a href=""https://stackoverflow.com/questions/2337540/when-should-you-use-the-this-keyword-in-c-closed"">When should you use the ""this"" keyword in C++?</a><br>
  <a href=""https://stackoverflow.com/questions/577243/is-there-any-reason-to-use-this"">Is there any reason to use this-></a></p>
</blockquote>



<p>In C++, is the keyword ""this"" usually omitted? For example:</p>

<pre><code>Person::Person(int age) {
    _age = age;
}
</code></pre>

<p>As opposed to:</p>

<pre><code>Person::Person(int age) {
    this-&gt;_age = age;
}
</code></pre>
","<p>Yes, it is not required and is usually omitted. It might be required for accessing variables after they have been overridden in the scope though:</p>

<pre><code>Person::Person() {
    int age;
    this-&gt;age = 1;
}
</code></pre>

<p>Also, this:</p>

<pre><code>Person::Person(int age) {
    _age = age;
}
</code></pre>

<p>It is pretty bad style; if you need an initializer with the same name use this notation:</p>

<pre><code>Person::Person(int age) : age(age) { }
</code></pre>
","6779684"
"Identifier not found error on function call","130190","","<p>I have a program here where I invert the case of an entered string. This is the code in my .cpp file and I am using Visual Studio C++ IDE. I am not sure what I need in a header file or if I need one to make this work.</p>

<p>Error with my function call swapCase. Main does not see swapCase for some reason that I'm not sure of.</p>

<pre><code>#include &lt;cctype&gt;
#include &lt;iostream&gt;
#include &lt;conio.h&gt;

using namespace std;

int main()
{
    char name[30];
    cout&lt;&lt;""Enter a name: "";
    cin.getline(name, 30);
    swapCase(name);
    cout&lt;&lt;""Changed case is: ""&lt;&lt; name &lt;&lt;endl;
    _getch();
    return 0;
}

void swapCase (char* name)
{
    for(int i=0;name[i];i++)
    {
        if ( name[i] &gt;= 'A' &amp;&amp; name[i] &lt;= 'Z' )
            name[i] += 32; //changing upper to lower
        else if( name[i] &gt;= 'a' &amp;&amp; name[i] &lt;= 'z')
            name[i] -= 32; //changing lower to upper
    }
}
</code></pre>

<p>Any other tips for syntax or semantics is appreciated. </p>
","<p>Add this line before main function:</p>

<pre><code>void swapCase (char* name);

int main()
{
   ...
   swapCase(name);    // swapCase prototype should be known at this point
   ...
}
</code></pre>

<p>This is called forward declaration: compiler needs to know function prototype when function call is compiled.</p>
","8329124"
"How different is Objective-C from C++?","130002","","<p>What are the main differences between Objective-C and C++ in terms of the syntax, features, paradigms, frameworks and libraries?</p>

<p>*Important: My goal is not to start a performance war between the two languages. I only want real hard facts. In fact, my question is not related to performance! Please give sources for anything that may seem subjective.</p>
","<p>Short list of some of the major differences:</p>

<ul>
<li>C++ allows multiple inheritance, Objective-C doesn't.</li>
<li>Unlike C++, Objective-C allows method parameters to be named and the method signature includes only the names and types of the parameters and return type (see bbum's and Chuck's comments below). In comparison, a C++ member function signature contains the function name as well as just the types of the parameters/return (without their names).</li>
<li>C++ uses <code>bool</code>, <code>true</code> and <code>false</code>, Objective-C uses <code>BOOL</code>, <code>YES</code> and <code>NO</code>.</li>
<li>C++ uses <code>void*</code> and <code>nullptr</code>, Objective-C prefers <code>id</code> and <code>nil</code>.</li>
<li>Objective-C uses ""selectors"" (which have type <code>SEL</code>) as an approximate equivalent to function pointers.</li>
<li>Objective-C uses a messaging paradigm (a la Smalltalk) where you can send ""messages"" to objects through methods/selectors.</li>
<li>Objective-C will happily let you send a message to <code>nil</code>, unlike C++ which will crash if you try to call a member function of <code>nullptr</code></li>
<li><s>Objective-C allows for dynamic dispatch, allowing the class responding to a message to be determined at runtime, unlike C++ where the object a method is invoked upon must be known at compile time (see wilhelmtell's comment below). This is related to the previous point.</s>  </li>
<li>Objective-C allows autogeneration of accessors for member variables using ""properties"".</li>
<li>Objective-C allows assigning to <code>self</code>, and allows class initialisers (similar to constructors) to return a completely different class if desired. Contrast to C++, where if you create a new instance of a class (either implicitly on the stack, or explicitly through <code>new</code>) it is guaranteed to be of the type you originally specified.</li>
<li>Similarly, in Objective-C other classes may also dynamically alter a target class at runtime to intercept method calls.</li>
<li>Objective-C lacks the namespace feature of C++.</li>
<li>Objective-C lacks an equivalent to C++ references.</li>
<li>Objective-C lacks templates, preferring (for example) to instead allow weak typing in containers.</li>
<li>Objective-C doesn't allow implicit method overloading, but C++ does. That is, in C++ <code>int foo (void)</code> and <code>int foo (int)</code> define an implicit overload of the method <code>foo</code>, but to achieve the same in Objective-C requires the explicit overloads <code>- (int) foo</code> and <code>- (int) foo:(int) intParam</code>. This is due to Objective-C's named parameters being functionally equivalent to C++'s name mangling.</li>
<li>Objective-C will happily allow a method and a variable to share the same name, unlike C++ which will typically have fits. I imagine this is something to do with Objective-C using selectors instead of function pointers, and thus method names not actually having a ""value"".</li>
<li>Objective-C doesn't allow objects to be created on the stack - all objects must be allocated from the heap (either explicitly with an <code>alloc</code> message, or implicitly in an appropriate factory method).</li>
<li>Like C++, Objective-C has both structs and classes. However, where in C++ they are treated as almost exactly the same, in Objective-C they are treated wildly differently - you <em>can</em> create structs on the stack, for instance.</li>
</ul>

<p>In my opinion, probably the biggest difference is the syntax. You can achieve essentially the same things in either language, but in my opinion the C++ syntax is simpler while some of Objective-C's features make certain tasks (such as GUI design) easier thanks to dynamic dispatch.</p>

<p>Probably plenty of other things too that I've missed, I'll update with any other things I think of. Other than that, can highly recommend the guide LiraNuna pointed you to. Incidentally, another site of interest might be <a href=""http://www.mactech.com/articles/mactech/Vol.13/13.03/CandObjectiveCCompared/"" rel=""noreferrer"">this</a>.</p>

<p>I should also point out that I'm just starting learning Objective-C myself, and as such a lot of the above may not quite be correct or complete - I apologise if that's the case, and welcome suggestions for improvement.</p>

<p>EDIT: updated to address the points raised in the following comments, added a few more items to the list.</p>
","2445071"
"Resolve build errors due to circular dependency amongst classes","129926","","<p>I often find myself in a situation where I am facing multiple compilation/linker errors in a C++ project due to some bad design decisions (made by someone else :) ) which lead to circular dependencies between C++ classes in different header files <em>(can happen also in the same file)</em>. But fortunately(?) this doesn't happen often enough for me to remember the solution to this problem for the next time it happens again.</p>

<p>So for the purposes of easy recall in the future I am going to post a representative problem and a solution along with it. Better solutions are of-course welcome.</p>

<hr>

<ul>
<li><p><code>A.h</code></p>

<pre><code>class B;
class A
{
    int _val;
    B *_b;
public:

    A(int val)
        :_val(val)
    {
    }

    void SetB(B *b)
    {
        _b = b;
        _b-&gt;Print(); // COMPILER ERROR: C2027: use of undefined type 'B'
    }

    void Print()
    {
        cout&lt;&lt;""Type:A val=""&lt;&lt;_val&lt;&lt;endl;
    }
};
</code></pre></li>
</ul>

<hr>

<ul>
<li><p><code>B.h</code></p>

<pre><code>#include ""A.h""
class B
{
    double _val;
    A* _a;
public:

    B(double val)
        :_val(val)
    {
    }

    void SetA(A *a)
    {
        _a = a;
        _a-&gt;Print();
    }

    void Print()
    {
        cout&lt;&lt;""Type:B val=""&lt;&lt;_val&lt;&lt;endl;
    }
};
</code></pre></li>
</ul>

<hr>

<ul>
<li><p><code>main.cpp</code></p>

<pre><code>#include ""B.h""
#include &lt;iostream&gt;

int main(int argc, char* argv[])
{
    A a(10);
    B b(3.14);
    a.Print();
    a.SetB(&amp;b);
    b.Print();
    b.SetA(&amp;a);
    return 0;
}
</code></pre></li>
</ul>
","<p>The way to think about this is to ""think like a compiler"".</p>

<p>Imagine you are writing a compiler. And you see code like this.</p>

<pre><code>// file: A.h
class A {
  B _b;
};

// file: B.h
class B {
  A _a;
};

// file main.cc
#include ""A.h""
#include ""B.h""
int main(...) {
  A a;
}
</code></pre>

<p>When you are compiling the <strong>.cc</strong> file (remember that the <strong>.cc</strong> and not the <strong>.h</strong> is the unit of compilation), you need to allocate space for object <code>A</code>. So, well, how much space then? Enough to store <code>B</code>! What's the size of <code>B</code> then? Enough to store <code>A</code>! Oops.</p>

<p>Clearly a circular reference that you must break.</p>

<p>You can break it by allowing the compiler to instead reserve as much space as it knows about upfront - pointers and references, for example, will always be 32 or 64 bits (depending on the architecture) and so if you replaced (either one) by a pointer or reference, things would be great. Let's say we replace in <code>A</code>:</p>

<pre><code>// file: A.h
class A {
  // both these are fine, so are various const versions of the same.
  B&amp; _b_ref;
  B* _b_ptr;
};
</code></pre>

<p>Now things are better. Somewhat. <code>main()</code> still says:</p>

<pre><code>// file: main.cc
#include ""A.h""  // &lt;-- Houston, we have a problem
</code></pre>

<p><code>#include</code>, for all extents and purposes (if you take the preprocessor out) just copies the file into the <strong>.cc</strong>. So really, the <strong>.cc</strong> looks like:</p>

<pre><code>// file: partially_pre_processed_main.cc
class A {
  B&amp; _b_ref;
  B* _b_ptr;
};
#include ""B.h""
int main (...) {
  A a;
}
</code></pre>

<p>You can see why the compiler can't deal with this - it has no idea what <code>B</code> is - it has never even seen the symbol before.</p>

<p>So let's tell the compiler about <code>B</code>. This is known as a <a href=""http://en.cppreference.com/w/cpp/language/class"" rel=""noreferrer"">forward declaration</a>, and is discussed further in <a href=""https://stackoverflow.com/a/4757718/391161"">this answer</a>.</p>

<pre><code>// main.cc
class B;
#include ""A.h""
#include ""B.h""
int main (...) {
  A a;
}
</code></pre>

<p>This <em>works</em>. It is not <em>great</em>. But at this point you should have an understanding of the circular reference problem and what we did to ""fix"" it, albeit the fix is bad.</p>

<p>The reason this fix is bad is because the next person to <code>#include ""A.h""</code> will have to declare <code>B</code> before they can use it and will get a terrible <code>#include</code> error. So let's move the declaration into <strong>A.h</strong> itself.</p>

<pre><code>// file: A.h
class B;
class A {
  B* _b; // or any of the other variants.
};
</code></pre>

<p>And in <strong>B.h</strong>, at this point, you can just <code>#include ""A.h""</code> directly.</p>

<pre><code>// file: B.h
#include ""A.h""
class B {
  // note that this is cool because the compiler knows by this time
  // how much space A will need.
  A _a; 
}
</code></pre>

<p>HTH.</p>
","628079"
"'was not declared in this scope' error","129899","","<p>So I was writing this simple program to calculate the day of any date using the Gaussian algorithm found <a href=""http://en.wikipedia.org/wiki/Determination_of_the_day_of_the_week#Gaussian_algorithm"" rel=""noreferrer"">here</a>.</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

//Using the Gaussian algorithm
int dayofweek(int date, int month, int year ){
    int d=date;
    if (month==1||month==2)
        {int y=((year-1)%100);int c=(year-1)/100;}
    else
        {int y=year%100;int c=year/100;}
    int m=(month+9)%12+1;
    int product=(d+(2.6*m-0.2)+y+y/4+c/4-2*c);
    return product%7;
}

int main(){
    cout&lt;&lt;dayofweek(19,1,2054);
    return 0;
}
</code></pre>

<p>It's a very simple program and what's even more puzzling is the output.</p>

<pre><code>:In function  dayofweek(int, int, int)’:
:19: warning:  unused variable ‘y’
:19: warning: unused variable ‘c’
:21: warning: unused variable ‘y’
:21: warning: unused variable ‘c’
:23: error: ‘y’ was not declared in this scope
:25: error: ‘c’ was not declared in this scope
</code></pre>

<p>It says that my variable is unused but then says that it isn't declared? Could anyone please tell me whats wrong.</p>
","<p>The scope of a variable is always the block it is inside. For example if you do something like</p>

<pre><code>if(...)
{
     int y = 5; //y is created
} //y leaves scope, since the block ends.
else
{
     int y = 8; //y is created
} //y leaves scope, since the block ends.

cout &lt;&lt; y &lt;&lt; endl; //Gives error since y is not defined.
</code></pre>

<p>The solution is to define y outside of the if blocks</p>

<pre><code>int y; //y is created

if(...)
{
     y = 5;
} 
else
{
     y = 8;
} 

cout &lt;&lt; y &lt;&lt; endl; //Ok
</code></pre>

<p>In your program you have to move the definition of y and c out of the if blocks into the higher scope. Your Function then would look like this:</p>

<pre><code>//Using the Gaussian algorithm
int dayofweek(int date, int month, int year )
{
    int y, c;
    int d=date;

    if (month==1||month==2)
    {
         y=((year-1)%100);
         c=(year-1)/100;
    }
    else
    {
         y=year%100;
         c=year/100;
    }
int m=(month+9)%12+1;
int product=(d+(2.6*m-0.2)+y+y/4+c/4-2*c);
return product%7;
}
</code></pre>
","10056157"
"Open source PDF library for C/C++ application?","129828","","<p>I want to be able to generate PDF ouput from my (native) C++ Windows application. Are there any free/open source libraries available to do this?</p>

<p>I looked at the answers to <a href=""https://stackoverflow.com/questions/177/how-do-i-programmatically-create-a-pdf-in-my-net-application"">this question</a>, but they mostly relate to .Net.</p>
","<p><a href=""https://github.com/libharu/libharu"" rel=""noreferrer"">LibHaru</a></p>

<blockquote>
  <p>Haru is a free, cross platform,
  open-sourced software library for
  generating PDF written in ANSI-C. It
  can work as both a static-library (.a,
  .lib) and a shared-library (.so,
  .dll).</p>
</blockquote>

<p>Didn't try it myself, but maybe it can help you</p>
","58737"
"stringstream, string, and char* conversion confusion","129681","","<p>My question can be boiled down to, where does the string returned from <code>stringstream.str().c_str()</code> live in memory, and why can't it be assigned to a <code>const char*</code>?</p>

<p>This code example will explain it better than I can</p>

<pre><code>#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;iostream&gt;

using namespace std;

int main()
{
    stringstream ss(""this is a string\n"");

    string str(ss.str());

    const char* cstr1 = str.c_str();

    const char* cstr2 = ss.str().c_str();

    cout &lt;&lt; cstr1   // Prints correctly
        &lt;&lt; cstr2;   // ERROR, prints out garbage

    system(""PAUSE"");

    return 0;
}
</code></pre>

<p>The assumption that <code>stringstream.str().c_str()</code> could be assigned to a <code>const char*</code> led to a bug that took me a while to track down.</p>

<p>For bonus points, can anyone explain why replacing the <code>cout</code> statement with</p>

<pre><code>cout &lt;&lt; cstr            // Prints correctly
    &lt;&lt; ss.str().c_str() // Prints correctly
    &lt;&lt; cstr2;           // Prints correctly (???)
</code></pre>

<p>prints the strings correctly?</p>

<p>I'm compiling in Visual Studio 2008.</p>
","<p><code>stringstream.str()</code> returns a temporary string object that's destroyed at the end of the full expression. If you get a pointer to a C string from that (<code>stringstream.str().c_str()</code>), it will point to a string which is deleted where the statement ends. That's why your code prints garbage.    </p>

<p>You could copy that temporary string object to some other string object and take the C string from that one:</p>

<pre><code>const std::string tmp = stringstream.str();
const char* cstr = tmp.c_str();
</code></pre>

<p>Note that I made the temporary string <code>const</code>, because any changes to it might cause it to re-allocate and thus render <code>cstr</code> invalid. It is therefor safer to not to store the result of the call to <code>str()</code> at all and use <code>cstr</code> only until the end of the full expression:</p>

<pre><code>use_c_str( stringstream.str().c_str() );
</code></pre>

<p>Of course, the latter might not be easy and copying might be too expensive. What you can do instead is to bind the temporary to a <code>const</code> reference. This will extend its lifetime to the lifetime of the reference:</p>

<pre><code>{
  const std::string&amp; tmp = stringstream.str();   
  const char* cstr = tmp.c_str();
}
</code></pre>

<p>IMO that's the best solution. Unfortunately it's not very well known.
</p>
","1374485"
"MSVCP140.dll missing","129630","","<p>I just developed my first program in C++ and I wanted to show it with one of my friends. Sadly, when he tries to open the exe it gets an error which says ""MSVCP140.dll is missing"". Why is this issue happening and how can he/I fix it?</p>
","<p>Either make your friends download the runtime DLL (@Kay's answer), or compile the app with static linking.</p>

<p>In visual studio, go to <code>Project tab -&gt; properties - &gt; configuration properties -&gt; C/C++ -&gt; Code Generation</code> on runtime library choose <code>/MTd</code> for debug mode and <code>/MT</code> for release mode.</p>

<p>This will cause the compiler to embed the runtime into the app. The executable will be significantly bigger, but it will run without any need of runtime dlls.</p>
","32999084"
"Why isn't sizeof for a struct equal to the sum of sizeof of each member?","129392","","<p>Why does the 'sizeof' operator return a size larger for a structure than the total sizes of the structure's members?</p>
","<p>This is because of padding added to satisfy alignment constraints. <a href=""http://en.wikipedia.org/wiki/Data_structure_alignment"" rel=""noreferrer"">Data structure alignment</a> impacts both performance and correctness of programs:</p>

<ul>
<li>Mis-aligned access might be a hard error (often <code>SIGBUS</code>).</li>
<li>Mis-aligned access might be a soft error.

<ul>
<li>Either corrected in hardware, for a modest performance-degradation.</li>
<li>Or corrected by emulation in software, for a severe performance-degradation.</li>
<li>In addition, atomicity and other concurrency-guarantees might be broken, leading to subtle errors.</li>
</ul></li>
</ul>

<p>Here's an example using typical settings for an x86 processor (all used 32 and 64 bit modes):</p>

<pre><code>struct X
{
    short s; /* 2 bytes */
             /* 2 padding bytes */
    int   i; /* 4 bytes */
    char  c; /* 1 byte */
             /* 3 padding bytes */
};

struct Y
{
    int   i; /* 4 bytes */
    char  c; /* 1 byte */
             /* 1 padding byte */
    short s; /* 2 bytes */
};

struct Z
{
    int   i; /* 4 bytes */
    short s; /* 2 bytes */
    char  c; /* 1 byte */
             /* 1 padding byte */
};

const int sizeX = sizeof(struct X); /* = 12 */
const int sizeY = sizeof(struct Y); /* = 8 */
const int sizeZ = sizeof(struct Z); /* = 8 */
</code></pre>

<p>One can minimize the size of structures by sorting members by alignment (sorting by size suffices for that in basic types) (like structure <code>Z</code> in the example above).</p>

<p>IMPORTANT NOTE: Both the C and C++ standards state that structure alignment is implementation-defined.  Therefore each compiler may choose to align data differently, resulting in different and incompatible data layouts.  For this reason, when dealing with libraries that will be used by different compilers, it is important to understand how the compilers align data.  Some compilers have command-line settings and/or special <code>#pragma</code> statements to change the structure alignment settings.</p>
","119128"
"How to get length of a string using strlen function","129381","","<p>I have following code that gets and prints a string.</p>

<pre><code>#include&lt;iostream&gt;
#include&lt;conio.h&gt;
#include&lt;string&gt;
using namespace std;

int main()
{
    string str;
    cout &lt;&lt; ""Enter a string: "";
    getline(cin, str);
    cout &lt;&lt; str;
    getch();
    return 0;
}
</code></pre>

<p>But how to count the number of characters in this string using <code>strlen()</code> function?</p>
","<p>For C++ strings, there's no reason to use <code>strlen</code>. Just use <code>string::length</code>:</p>

<pre><code>cout &lt;&lt; str.length() &lt;&lt; endl;
</code></pre>

<p>You should <em>strongly</em> prefer this to <code>strlen(str.c_str())</code> for the following reasons:</p>

<ol>
<li><p>Clarity: The <code>length()</code> (or <code>size()</code>) member functions unambiguously give back the length of the string. While it's possible to figure out what <code>strlen(str.c_str())</code> does, it forces the reader to pause for a bit.</p></li>
<li><p>Efficiency: <code>length()</code> and <code>size()</code> run in time O(1), while <code>strlen(str.c_str())</code> will take &Theta;(n) time to find the end of the string.</p></li>
<li><p>Style: It's good to prefer the C++ versions of functions to the C versions unless there's a specific reason to do so otherwise. This is why, for example, it's usually considered better to use <code>std::sort</code> over <code>qsort</code> or <code>std::lower_bound</code> over <code>bsearch</code>, unless some other factors come into play that would affect performance.</p></li>
</ol>

<p>Hope this helps!</p>
","20180891"
"What is a handle in C++?","129267","","<p>I have been told that a handle is sort of a pointer, but not, and that it allows you to keep a reference to an object, rather than the object itself. What is a more elaborate explanation?</p>
","<p>A handle can be anything from an integer index to a pointer to a resource in kernel space. The idea is that they provide an abstraction of a resource, so you don't need to know much about the resource itself to use it.</p>

<p>For instance, the HWND in the Win32 API is a handle for a Window. By itself it's useless: you can't glean any information from it. But pass it to the right API functions, and you can perform a wealth of different tricks with it. Internally you can think of the HWND as just an index into the GUI's table of windows (which may not necessarily be how it's implemented, but it makes the magic make sense).</p>

<p>EDIT: Not 100% certain what specifically you were asking in your question. This is mainly talking about pure C/C++.</p>
","1303130"
"Function passed as template argument","128934","","<p>I'm looking for the rules involving passing C++ templates functions as arguments.</p>

<p>This is supported by C++ as shown by an example here:</p>

<pre><code>#include &lt;iostream&gt;

void add1(int &amp;v)
{
  v+=1;
}

void add2(int &amp;v)
{
  v+=2;
}

template &lt;void (*T)(int &amp;)&gt;
void doOperation()
{
  int temp=0;
  T(temp);
  std::cout &lt;&lt; ""Result is "" &lt;&lt; temp &lt;&lt; std::endl;
}

int main()
{
  doOperation&lt;add1&gt;();
  doOperation&lt;add2&gt;();
}
</code></pre>

<p>Learning about this technique is difficult, however. <a href=""http://www.google.com/search?q=function+as+template+argument"" rel=""noreferrer"">Googling for ""function as a template argument""</a> doesn't lead to much. And the classic <a href=""http://rads.stackoverflow.com/amzn/click/0201734842"" rel=""noreferrer"">C++ Templates The Complete Guide</a> surprisingly also doesn't discuss it (at least not from my search).</p>

<p>The questions I have are whether this is valid C++ (or just some widely supported extension).</p>

<p>Also, is there a way to allow a functor with the same signature to be used interchangeably with explicit functions during this kind of template invocation?</p>

<p>The following does <strong>not</strong> work in the above program, at least in <a href=""http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions"" rel=""noreferrer"">Visual C++</a>, because the syntax is obviously wrong. It'd be nice to be able to switch out a function for a functor and vice versa, similar to the way you can pass a function pointer or functor to the std::sort algorithm if you want to define a custom comparison operation.</p>

<pre><code>   struct add3 {
      void operator() (int &amp;v) {v+=3;}
   };
...

    doOperation&lt;add3&gt;();
</code></pre>

<p>Pointers to a web link or two, or a page in the C++ Templates book would be appreciated!</p>
","<p>Yes, it is valid.</p>

<p>As for making it work with functors as well, the usual solution is something like this instead:</p>

<pre><code>template &lt;typename F&gt;
void doOperation(F f)
{
  int temp=0;
  f(temp);
  std::cout &lt;&lt; ""Result is "" &lt;&lt; temp &lt;&lt; std::endl;
}
</code></pre>

<p>which can now be called as either:</p>

<pre><code>doOperation(add2);
doOperation(add3());
</code></pre>

<p>The problem with this is that if it makes it tricky for the compiler to inline the call to <code>add2</code>, since all the compiler knows is that a function pointer type <code>void (*)(int &amp;)</code> is being passed to <code>doOperation</code>. (But <code>add3</code>, being a functor, can be inlined easily. Here, the compiler knows that an object of type <code>add3</code> is passed to the function, which means that the function to call is <code>add3::operator()</code>, and not just some unknown function pointer.)</p>
","1174193"
"Current date and time as string","128673","","<p>I wrote a function to get a current date and time in format: <code>DD-MM-YYYY HH:MM:SS</code>. It works but let's say, its pretty ugly. How can I do <strong>exactly the same thing</strong> but simpler?</p>

<pre><code>string currentDateToString()
{
    time_t now = time(0);
    tm *ltm = localtime(&amp;now);

    string dateString = """", tmp = """";
    tmp = numToString(ltm-&gt;tm_mday);
    if (tmp.length() == 1)
        tmp.insert(0, ""0"");
    dateString += tmp;
    dateString += ""-"";
    tmp = numToString(1 + ltm-&gt;tm_mon);
    if (tmp.length() == 1)
        tmp.insert(0, ""0"");
    dateString += tmp;
    dateString += ""-"";
    tmp = numToString(1900 + ltm-&gt;tm_year);
    dateString += tmp;
    dateString += "" "";
    tmp = numToString(ltm-&gt;tm_hour);
    if (tmp.length() == 1)
        tmp.insert(0, ""0"");
    dateString += tmp;
    dateString += "":"";
    tmp = numToString(1 + ltm-&gt;tm_min);
    if (tmp.length() == 1)
        tmp.insert(0, ""0"");
    dateString += tmp;
    dateString += "":"";
    tmp = numToString(1 + ltm-&gt;tm_sec);
    if (tmp.length() == 1)
        tmp.insert(0, ""0"");
    dateString += tmp;

    return dateString;
}
</code></pre>
","<p>Non C++11 solution: With the <code>&lt;ctime&gt;</code> header, you could use <code>strftime</code>. Make sure your buffer is large enough, you wouldn't want to overrun it and wreak havoc later.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;ctime&gt;

int main ()
{
  time_t rawtime;
  struct tm * timeinfo;
  char buffer[80];

  time (&amp;rawtime);
  timeinfo = localtime(&amp;rawtime);

  strftime(buffer,sizeof(buffer),""%d-%m-%Y %I:%M:%S"",timeinfo);
  std::string str(buffer);

  std::cout &lt;&lt; str;

  return 0;
}
</code></pre>
","16358264"
"Why would we call cin.clear() and cin.ignore() after reading input?","128174","","<p><a href=""http://code.google.com/edu/languages/cpp/basics/getting-started.html#learn-by-example"" rel=""noreferrer"">Google Code University's C++ tutorial</a> used to have this code:</p>

<pre><code>// Description: Illustrate the use of cin to get input
// and how to recover from errors.

#include &lt;iostream&gt;
using namespace std;

int main()
{
  int input_var = 0;
  // Enter the do while loop and stay there until either
  // a non-numeric is entered, or -1 is entered.  Note that
  // cin will accept any integer, 4, 40, 400, etc.
  do {
    cout &lt;&lt; ""Enter a number (-1 = quit): "";
    // The following line accepts input from the keyboard into
    // variable input_var.
    // cin returns false if an input operation fails, that is, if
    // something other than an int (the type of input_var) is entered.
    if (!(cin &gt;&gt; input_var)) {
      cout &lt;&lt; ""Please enter numbers only."" &lt;&lt; endl;
      cin.clear();
      cin.ignore(10000,'\n');
    }
    if (input_var != -1) {
      cout &lt;&lt; ""You entered "" &lt;&lt; input_var &lt;&lt; endl;
    }
  }
  while (input_var != -1);
  cout &lt;&lt; ""All done."" &lt;&lt; endl;

  return 0;
}
</code></pre>

<p>What is the significance of <code>cin.clear()</code> and <code>cin.ignore()</code>? Why are the <code>10000</code> and <code>\n</code> parameters necessary?</p>
","<p>The <code>cin.clear()</code> clears the error flag on <code>cin</code> (so that future I/O operations will work correctly), and then <code>cin.ignore(10000, '\n')</code> skips to the next newline (to ignore anything else on the same line as the non-number so that it does not cause another parse failure).  It will only skip up to 10000 characters, so the code is assuming the user will not put in a very long, invalid line.</p>
","5131654"
"c++ exception : throwing std::string","127701","","<p>I would like to throw an exception when my C++ methods encounter something weird and can't recover. Is it OK to throw a <code>std::string</code> pointer?</p>

<p>Here's what I was looking forward to doing:</p>

<pre><code>void Foo::Bar() {
    if(!QueryPerformanceTimer(&amp;m_baz)) {
        throw new std::string(""it's the end of the world!"");
    }
}

void Foo::Caller() {
    try {
        this-&gt;Bar(); // should throw
    }
    catch(std::string *caught) { // not quite sure the syntax is OK here...
        std::cout &lt;&lt; ""Got "" &lt;&lt; caught &lt;&lt; std::endl;
    }
}
</code></pre>
","<p>Yes. <a href=""http://en.cppreference.com/w/cpp/error/exception"" rel=""noreferrer""><code>std::exception</code></a> is the base exception class in the C++ standard library.  You may want to avoid using strings as exception classes because they themselves can throw an exception during use. If that happens, then where will you be?</p>

<p>boost has an excellent <a href=""http://www.boost.org/community/error_handling.html"" rel=""noreferrer"">document</a> on good style for exceptions and error handling. It's worth a read.</p>
","134640"
"static constructors in C++? I need to initialize private static objects","127633","","<p>I want to have a class with a private static data member (a vector that contains all the characters a-z). In java or C#, I can just make a ""static constructor"" that will run before I make any instances of the class, and sets up the static data members of the class. It only gets run once (as the variables are read only and only need to be set once) and since it's a function of the class it can access its private members. I could add code in the constructor that checks to see if the vector is initialized, and initialize it if it's not, but that introduces many necessary checks and doesn't seem like the optimal solution to the problem.</p>

<p>The thought occurs to me that since the variables will be read only, they can just be public static const, so I can set them once outside the class, but once again, it seems sort of like an ugly hack. </p>

<p><strong>Is it possible to have private static data members in a class if I don't want to initialize them in the instance constructor?</strong></p>
","<p>To get the equivalent of a static constructor, you need to write a separate ordinary class to hold the static data and then make a static instance of that ordinary class.</p>

<pre><code>class StaticStuff
{
     std::vector&lt;char&gt; letters_;

public:
     StaticStuff()
     {
         for (char c = 'a'; c &lt;= 'z'; c++)
             letters_.push_back(c);
     }

     // provide some way to get at letters_
};

class Elsewhere
{
    static StaticStuff staticStuff; // constructor runs once, single instance

};
</code></pre>
","1197129"
"C++ convert from 1 char to string?","127610","","<p>I really didn't find any answer that close...</p>

<p>the opposite way is pretty simple like str[0]</p>

<p>But I need to cast only 1 char to string...</p>

<p>like this:</p>

<pre><code>char c = 34;
string(1,c);
//this doesn't work, the string is always empty.

string s(c);
//also doesn't work.

boost::lexical_cast&lt;string&gt;((int)c);

//also return null
</code></pre>
","<p>All of</p>

<pre><code>string s(1, c); std::cout &lt;&lt; s &lt;&lt; std::endl;
</code></pre>

<p>and</p>

<pre><code>std::cout &lt;&lt; string(1, c) &lt;&lt; std::endl;
</code></pre>

<p>and</p>

<pre><code>string s; s.push_back(c); std::cout &lt;&lt; s &lt;&lt; std::endl;
</code></pre>

<p>worked for me.</p>
","17201751"
"Graph implementation C++","127341","","<p>I was wondering about a quick to write implementation of a graph in c++. I need the data structure to be easy to manipulate and use graph algorithms(such as BFS,DFS, Kruskal, Dijkstra...).
I need this implementation for an algorithms Olympiad, so the easier to write the data structure the better.</p>

<p>Can you suggest such DS(main structs or classes and what will be in them). I know that an Adjacency list and Adjacency matrix are the main possibilities, but I mean a more detailed <strong>code</strong> sample.</p>

<p>For example I thought about this DS last time I had to implement a graph for DFS:</p>

<pre><code>struct Edge {
  int start;
  int end;
  struct Edge* nextEdge;
}
</code></pre>

<p>and then used a array of size n containing in its i'th place the Edge List(struct Edge) representing the edges starting in the i'th node.</p>

<p>but when trying to DFS on this graph I had to write a 50 line code with about 10 while loops.</p>

<p>What 'good' implementations are there?</p>
","<p>It really depends on what algorithms you need to implement, there is no silver bullet (and that's shouldn't be a surprise... the general rule about programming is that there's no general rule ;-) ).</p>

<p>I often end up representing directed multigraphs using node/edge structures with pointers... more specifically:</p>

<pre><code>struct Node
{
    ... payload ...
    Link *first_in, *last_in, *first_out, *last_out;
};

struct Link
{
    ... payload ...
    Node *from, *to;
    Link *prev_same_from, *next_same_from,
         *prev_same_to, *next_same_to;
};
</code></pre>

<p>In other words each node has a doubly-linked list of incoming links and a doubly-linked list of outgoing links. Each link knows <code>from</code> and <code>to</code> nodes and is at the same time in two different doubly-linked lists: the list of all links coming out from the same <code>from</code> node and the list of all links arriving at the same <code>to</code> node.</p>

<p>It's a lot of pointer twiddling (so unless you love pointers just forget about this) but query and update operations are efficient; for example adding a node or a link is O(1), removing a link is O(1) and removing a node x is O(deg(x)).</p>

<p>Of course depending on the problem, payload size, graph size, graph density this approach can be way overkilling or too much demanding for memory (in addition to payload you've 4 pointers per node and 6 pointers per link).</p>
","5493656"
"Are the days of passing const std::string & as a parameter over?","127266","","<p>I heard a recent talk by Herb Sutter who suggested that the reasons to pass <code>std::vector</code> and <code>std::string</code> by <code>const &amp;</code> are largely gone.  He suggested that writing a function such as the following is now preferable:</p>

<pre><code>std::string do_something ( std::string inval )
{
   std::string return_val;
   // ... do stuff ...
   return return_val;
}
</code></pre>

<p>I understand that the <code>return_val</code> will be an rvalue at the point the function returns and can therefore be returned using move semantics, which are very cheap.  However, <code>inval</code> is still much larger than the size of a reference (which is usually implemented as a pointer).  This is because a <code>std::string</code> has various components including a pointer into the heap and a member <code>char[]</code> for short string optimization.  So it seems to me that passing by reference is still a good idea.</p>

<p>Can anyone explain why Herb might have said this?</p>
","<p>The reason Herb said what he said is because of cases like this.</p>

<p>Let's say I have function <code>A</code> which calls function <code>B</code>, which calls function <code>C</code>. And <code>A</code> passes a string through <code>B</code> and into <code>C</code>. <code>A</code> does not know or care about <code>C</code>; all <code>A</code> knows about is <code>B</code>. That is, <code>C</code> is an implementation detail of <code>B</code>.</p>

<p>Let's say that A is defined as follows:</p>

<pre><code>void A()
{
  B(""value"");
}
</code></pre>

<p>If B and C take the string by <code>const&amp;</code>, then it looks something like this:</p>

<pre><code>void B(const std::string &amp;str)
{
  C(str);
}

void C(const std::string &amp;str)
{
  //Do something with `str`. Does not store it.
}
</code></pre>

<p>All well and good. You're just passing pointers around, no copying, no moving, everyone's happy. <code>C</code> takes a <code>const&amp;</code> because it doesn't store the string. It simply uses it.</p>

<p>Now, I want to make one simple change: <code>C</code> needs to store the string somewhere.</p>

<pre><code>void C(const std::string &amp;str)
{
  //Do something with `str`.
  m_str = str;
}
</code></pre>

<p>Hello, copy constructor and potential memory allocation (ignore the <a href=""https://stackoverflow.com/questions/10315041/meaning-of-acronym-sso-in-the-context-of-stdstring"">Short String Optimization (SSO)</a>). C++11's move semantics are supposed to make it possible to remove needless copy-constructing, right? And <code>A</code> passes a temporary; there's no reason why <code>C</code> should have to <em>copy</em> the data. It should just abscond with what was given to it.</p>

<p>Except it can't. Because it takes a <code>const&amp;</code>.</p>

<p>If I change <code>C</code> to take its parameter by value, that just causes <code>B</code> to do the copy into that parameter; I gain nothing.</p>

<p>So if I had just passed <code>str</code> by value through all of the functions, relying on <code>std::move</code> to shuffle the data around, we wouldn't have this problem. If someone wants to hold on to it, they can. If they don't, oh well.</p>

<p>Is it more expensive? Yes; moving into a value is more expensive than using references. Is it less expensive than the copy? Not for small strings with SSO. Is it worth doing?</p>

<p>It depends on your use case. How much do you hate memory allocations?</p>
","10232761"
"Easiest way to flip a boolean value?","127132","","<p>I just want to flip a boolean based on what it already is. If it's true - make it false. If it's false - make it true.</p>

<p>Here is my code excerpt:</p>

<pre><code>switch(wParam) {

case VK_F11:
  if (flipVal == true) {
     flipVal = false;
  } else {
    flipVal = true;
  }
break;

case VK_F12:
  if (otherVal == true) {
     otherValVal = false;
  } else {
    otherVal = true;
  }
break;

default:
break;
}
</code></pre>
","<p>You can flip a value like so:</p>

<pre><code>myVal = !myVal;
</code></pre>

<p>so your code would shorten down to:</p>

<pre><code>switch(wParam) {
    case VK_F11:
    flipVal = !flipVal;
    break;

    case VK_F12:
    otherVal = !otherVal;
    break;

    default:
    break;
}
</code></pre>
","610919"
"reading a line from ifstream into a string variable","126922","","<p>In the following code :</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;

using namespace std;

int main() {
    string x = ""This is C++."";
    ofstream of(""d:/tester.txt"");
    of &lt;&lt; x;
    of.close();


    ifstream read(""d:/tester.txt"");
    read &gt;&gt; x;
    cout &lt;&lt; x &lt;&lt; endl ;
}
</code></pre>

<h2><code>Output :</code></h2>

<p><code>This</code></p>

<p>Since >> operator reads upto the first whitespace i get this output. How can i extract the line back into the string ?</p>

<p>I know this form of <code>istream&amp; getline (char* s, streamsize n );</code>  <strong>but i want to store it in a string variable.</strong>
How can i do this ?</p>
","<p>Use the <a href=""http://en.cppreference.com/w/cpp/string/basic_string/getline""><code>std::getline()</code></a> from <code>&lt;string&gt;</code>.  </p>

<pre><code> istream &amp; getline(istream &amp; is,std::string&amp; str)
</code></pre>

<p>So, for your case it would be:</p>

<pre><code>std::getline(read,x);
</code></pre>
","6663172"
"gcc/g++: ""No such file or directory""","126830","","<p><code>g++</code> gives me errors of the form:</p>

<pre><code>foo.cc:&lt;line&gt;:&lt;column&gt;: fatal error: &lt;bar&gt;: No such file or directory
compilation terminated.
</code></pre>

<p>It is the same when compiling C-programs with <code>gcc</code>.</p>

<p>Why is that?</p>

<hr>

<p><sup><strong>Please note:</strong> This question has been asked many times before, but each time it was specific to the askers situation. This question's purpose is <strong>to have a question that others can be closed as duplicates of</strong>, once and for all; a <em>FAQ</em>.</sup></p>
","<p>Your compiler just tried to compile the file named <code>foo.cc</code>. Upon hitting line number <code>line</code>, the compiler finds:</p>

<pre><code>#include ""bar""
</code></pre>

<p>or</p>

<pre><code>#include &lt;bar&gt;
</code></pre>

<p>The compiler then tries to find that file. For this, it uses a set of directories to look into, but within this set, there is no file <code>bar</code>. For an explanation of the difference between the versions of the include statement look <a href=""https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename"">here</a>.</p>

<h2>How to tell the compiler where to find it</h2>

<p><code>g++</code> has an option <code>-I</code>. It lets you add include search paths to the command line. Imagine that your file <code>bar</code> is in a folder named <code>frobnicate</code>, relative to <code>foo.cc</code> (assume you are compiling from the directory where <code>foo.cc</code> is located):</p>

<pre><code>g++ -Ifrobnicate foo.cc
</code></pre>

<p>You can add more include-paths; each you give is relative to the current directory. Microsoft's compiler has a correlating option <code>/I</code> that works in the same way, or in Visual Studio, the folders can be set in the Property Pages of the Project, under Configuration Properties->C/C++->General->Additional Include Directories.  </p>

<p>Now imagine you have multiple version of <code>bar</code> in different folders, given:</p>

<hr>

<pre><code>// A/bar
#include&lt;string&gt;
std::string which() { return ""A/bar""; }
</code></pre>

<hr>

<pre><code>// B/bar
#include&lt;string&gt;
std::string which() { return ""B/bar""; }
</code></pre>

<hr>

<pre><code>// C/bar
#include&lt;string&gt;
std::string which() { return ""C/bar""; }
</code></pre>

<hr>

<pre><code>// foo.cc
#include ""bar""
#include &lt;iostream&gt;

int main () {
    std::cout &lt;&lt; which() &lt;&lt; std::endl;
}
</code></pre>

<hr>

<p>The priority with <code>#include ""bar""</code> is leftmost:</p>

<pre><code>$ g++ -IA -IB -IC foo.cc
$ ./a.out
A/bar
</code></pre>

<p>As you see, when the compiler started looking through <code>A/</code>, <code>B/</code> and <code>C/</code>, it stopped at the first or leftmost hit.</p>

<p>This is true of both forms, <code>include &lt;&gt;</code> and <code>incude """"</code>.</p>

<h2>Difference between <code>#include &lt;bar&gt;</code> and <code>#include ""bar""</code></h2>

<p>Usually, the <code>#include &lt;xxx&gt;</code> makes it look into system folders first, the <code>#include ""xxx""</code> makes it look into the current or custom folders first.</p>

<p>E.g.:</p>

<p>Imagine you have the following files in your project folder:</p>

<pre><code>list
main.cc
</code></pre>

<p>with <code>main.cc</code>:</p>

<pre><code>#include ""list""
....
</code></pre>

<p>For this, your compiler will <code>#include</code> the file <code>list</code> in your project folder, because it currently compiles <code>main.cc</code> and there is that file <code>list</code> in the current folder.</p>

<p>But with <code>main.cc</code>:</p>

<pre><code>#include &lt;list&gt;
....
</code></pre>

<p>and then <code>g++ main.cc</code>, your compiler will look into the system folders first, and because <code>&lt;list&gt;</code> is a standard header, it will <code>#include</code> the file named <code>list</code> that comes with your C++ platform as part of the standard library.</p>

<p>This is all a bit simplified, but should give you the basic idea.</p>

<h2>Details on <code>&lt;&gt;</code>/<code>""""</code>-priorities and <code>-I</code></h2>

<p>According to the <a href=""http://gcc.gnu.org/onlinedocs/cpp/Search-Path.html"" rel=""noreferrer"">gcc-documentation</a>, the priority for <code>include &lt;&gt;</code> is, on a ""normal Unix system"", as follows:</p>

<pre><code> /usr/local/include
 libdir/gcc/target/version/include
 /usr/target/include
 /usr/include
</code></pre>

<blockquote>
  <p>For C++ programs, it will also look in /usr/include/c++/version, first. In the above, target is the canonical name of the system GCC was configured to compile code for; [...]. </p>
</blockquote>

<p>The documentation also states:</p>

<blockquote>
  <p>You can add to this list with the -Idir command line option. All the directories named by -I are searched, in left-to-right order, <strong>before the default directories</strong>. The only exception is when dir is already searched by default. In this case, the option is ignored and the search order for system directories remains unchanged. </p>
</blockquote>

<p>To continue our <code>#include&lt;list&gt; / #include""list""</code> example (same code):</p>

<pre><code>g++ -I. main.cc
</code></pre>

<p>and</p>

<pre><code>#include&lt;list&gt;
int main () { std::list&lt;int&gt; l; }
</code></pre>

<p>and indeed, the <code>-I.</code> prioritizes the folder <code>.</code> over the system includes and we get a compiler error.</p>
","12919082"
"Link error ""undefined reference to `__gxx_personality_v0'"" and g++","126786","","<blockquote>
  <p><strong>Possible Duplicate:</strong> <br/>
  <a href=""https://stackoverflow.com/questions/203548/undefined-symbol-gxx-personality-v0-on-link"">Undefined Symbol ___gxx_personality_v0 on link</a></p>
</blockquote>



<p>I have a problem with the following program.</p>

<pre><code>// fkt.cpp

#include ""fkt.h""

int add2(int a, int b)
{
    return a+b;
}
</code></pre>

<p>And the header:</p>

<pre><code>// fkt.h

int add2(int a, int b);
</code></pre>

<p>Now I compile this with: </p>

<pre><code>g++ -c fkt.cpp
</code></pre>

<p>Now I run <code>nm</code> and get:</p>

<pre><code>00000000 T _Z6add2ii
         U __gxx_personality_v0
</code></pre>

<p>When I want to use the function anywhere I get:</p>

<pre><code>(.eh_frame+0x12): undefined reference to `__gxx_personality_v0'
</code></pre>

<p>How can I solve this problem? (I'm using <a href=""http://en.wikipedia.org/wiki/Ubuntu_%28operating_system%29"" rel=""nofollow noreferrer"">Ubuntu</a> Linux.)</p>
","<p>If <code>g++</code> still gives error Try using:</p>

<pre><code>g++ file.c -lstdc++
</code></pre>

<p>Look at this post: <a href=""https://stackoverflow.com/questions/329059/what-is-gxx-personality-v0-for"">What is __gxx_personality_v0 for?</a></p>

<p>Make sure <code>-lstdc++</code> is at the end of the command.  If you place it at the beginning (i.e. before file.c), you still can get this same error.</p>
","6045967"
"counting the number of lines in a text file","126677","","<p>I'm reading lines off of text file and I'm wondering if this is a good way to go? I had to write the function <code>numberoflines</code> to decrease the <code>number_of_lines variable</code> by one because within the while loop, for every line it read it adds 2 to the number_of_lines variable.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;

int number_of_lines = 0;

void numberoflines();
int main(){
    string line;
    ifstream myfile(""textexample.txt"");

    if(myfile.is_open()){
        while(!myfile.eof()){
            getline(myfile,line);
            cout&lt;&lt; line &lt;&lt; endl;
            number_of_lines++;
        }
        myfile.close();
    }
    numberoflines();

}

void numberoflines(){
    number_of_lines--;
    cout&lt;&lt;""number of lines in text file: "" &lt;&lt; number_of_lines &lt;&lt; endl;
}
</code></pre>

<p>Is there any other easier better way?</p>
","<p>Your hack of decrementing the count at the end is exactly that -- a hack.</p>

<p>Far better to write your loop correctly in the first place, so it doesn't count the last line twice.</p>

<pre><code>int main() { 
    int number_of_lines = 0;
    std::string line;
    std::ifstream myfile(""textexample.txt"");

    while (std::getline(myfile, line))
        ++number_of_lines;
    std::cout &lt;&lt; ""Number of lines in text file: "" &lt;&lt; number_of_lines;
    return 0;
}
</code></pre>

<p>Personally, I think in this case, C-style code is perfectly acceptable:</p>

<pre><code>int main() {
    unsigned int number_of_lines = 0;
    FILE *infile = fopen(""textexample.txt"", ""r"");
    int ch;

    while (EOF != (ch=getc(infile)))
        if ('\n' == ch)
            ++number_of_lines;
    printf(""%u\n"", number_of_lines);
    return 0;
}
</code></pre>

<p>Edit: Of course, C++ will also let you do something a bit similar:</p>

<pre><code>int main() {
    std::ifstream myfile(""textexample.txt"");

    // new lines will be skipped unless we stop it from happening:    
    myfile.unsetf(std::ios_base::skipws);

    // count the newlines with an algorithm specialized for counting:
    unsigned line_count = std::count(
        std::istream_iterator&lt;char&gt;(myfile),
        std::istream_iterator&lt;char&gt;(), 
        '\n');

    std::cout &lt;&lt; ""Lines: "" &lt;&lt; line_count &lt;&lt; ""\n"";
    return 0;
}
</code></pre>
","3482093"
"How to set initial size of std::vector?","125871","","<p>I have <code>vector&lt;CustomClass*&gt;</code> and I put lot off items in vector and I need fast access, so I don't use list. How to set initial size of vector (for example to be 20 000 places, so to avoid copy when I insert new ) ?</p>
","<pre><code>std::vector&lt;CustomClass *&gt; whatever(20000);
</code></pre>

<p>or:</p>

<pre><code>std::vector&lt;CustomClass *&gt; whatever;
whatever.reserve(20000);
</code></pre>

<p>The former sets the actual size of the array -- i.e., makes it a vector of 20000 pointers. The latter leaves the vector empty, but reserves space for 20000 pointers, so you can insert (up to) that many without it having to reallocate.</p>

<p>You should probably be aware that chances of this doing any real good are minimal though.</p>
","11457629"
"initializing strings as null vs. empty string","125868","","<p>How would it matter if my C++ code (as shown below) has a string initialized as an empty string :</p>

<pre><code>std::string myStr = """";
....some code to optionally populate 'myStr'...
if (myStr != """") {
    // do something
}
</code></pre>

<p>vs. no/null initialization:</p>

<pre><code>std::string myStr;
....some code to optionally populate 'myStr'...
if (myStr != NULL) {
    // do something
}
</code></pre>

<p>Are there any best practices or gotchas around this?</p>
","<p>There's a function <code>empty()</code> ready for you in <code>std::string:</code></p>

<pre><code>std::string a;
if(a.empty())
{
    //do stuff. You will enter this block if the string is declared like this
}
</code></pre>

<p>or</p>

<pre><code>std::string a;
if(!a.empty())
{
    //You will not enter this block now
}
a = ""42"";
if(!a.empty())
{
    //And now you will enter this block.
}
</code></pre>
","11556416"
"g++ undefined reference to typeinfo","125843","","<p>I just ran across the following error (and found the solution online, but it's not present in Stack Overflow):</p>

<blockquote>
  <p>(.gnu.linkonce.[stuff]): undefined
  reference to [method] [object
  file]:(.gnu.linkonce.[stuff]):
  undefined reference to `typeinfo for
  [classname]'</p>
</blockquote>

<p>Why might one get one of these ""undefined reference to typeinfo"" linker errors?</p>

<p>(Bonus points if you can explain what's going on behind the scenes.)</p>
","<p>One possible reason is because you are declaring a virtual function without defining it.</p>

<p>When you declare it without defining it in the same compilation unit, you're indicating that it's defined somewhere else - this means the linker phase will try to find it in one of the other compilation units (or libraries).</p>

<p>An example of defining the virtual function is:</p>

<pre><code>virtual void fn() { /* insert code here */ }
</code></pre>

<p>In this case, you are attaching a definition to the declaration, which means the linker doesn't need to resolve it later.</p>

<p>The line</p>

<pre><code>virtual void fn();
</code></pre>

<p>declares <code>fn()</code> without defining it and will cause the error message you asked about.</p>

<p>It's very similar to the code:</p>

<pre><code>extern int i;
int *pi = &amp;i;
</code></pre>

<p>which states that the integer <code>i</code> is declared in another compilation unit which must be resolved at link time (otherwise <code>pi</code> can't be set to it's address).</p>
","307427"
"How to install Eclipse with c++ in Ubuntu 12.10?","125818","","<p>I just installed Ubuntu 12.10 and I tried to install Eclipse and C++, but I failed miserably.<br>
I started with an installation from the Software Center, Eclipse worked, but only in java.<br>
Then started googling for installation guides and tutorials, but after hours of downloads and installations, the c++ in Eclipse still doesn't work.  </p>

<p>So now I have two questions:  </p>

<p>1) How do I clean up this mess?<br>
Actually, how do I know if there is a mess?<br>
According to the Ubuntu Software Center, Eclipse is installed and has three add-ons.<br>
How do I know if the other installations of other Eclipse versions/packagings overwrote each other or if I have multiple installations?  </p>

<p>2) How do I install the last version of Eclipse and c++ in Ubuntu 12.10?</p>
","<p>There is a package called <code>eclipse-cdt</code> in the Ubuntu 12.10 repositories, this is what you want. If you haven't got <code>g++</code> already, you need to install that as well, so all you need is:</p>

<p><code>sudo apt-get install eclipse eclipse-cdt g++</code></p>

<p>Whether you messed up your system with your previous installation attempts depends heavily on how you did it. If you did it the safe way for trying out new packages not from repositories (i.e., only installed in your home folder, no <code>sudo</code>s blindly copied from installation manuals...) you're definitely fine. Otherwise, you may well have thousands of stray files all over your file system now. In that case, run all uninstall scripts you can find for the things you installed, then install using <code>apt-get</code> and hope for the best.</p>
","14721762"
"#pragma once vs include guards?","125581","","<p>I'm working on a codebase that is known to only run on windows and be compiled under Visual Studio (it integrates tightly with excel so it's not going anywhere). I'm wondering if I should go with the traditional include guards or use <code>#pragma once</code> for our code. I would think letting the compiler deal with <code>#pragma once</code> will yield faster compiles and is less error prone when coping and pasting. It is also slightly less ugly <strong><code>;)</code></strong></p>

<p>Note: to get the faster compile times we could use <a href=""http://www.c2.com/cgi/wiki?RedundantIncludeGuards"" rel=""noreferrer"">Redundant Include Guards</a> but that adds a tight coupling between the included file and the including file. Usually it's ok because the guard should be based on the file name and would only change if you needed to change in the include name anyways.</p>
","<p>I don't think it will make a significant difference in compile time but <code>#pragma once</code> is very well supported across compilers but not actually part of the standard.  The preprocessor may be a little faster with it as it is more simple to understand your exact intent.</p>

<p><code>#pragma once</code> is less prone to making mistakes and it is less code to type.</p>

<p>To speed up compile time more just forward declare instead of including in .h files when you can. </p>

<p>I prefer to use <code>#pragma once</code>.</p>

<p>See this <a href=""http://en.wikipedia.org/wiki/Pragma_once"" rel=""noreferrer"">wikipedia article about the possibility of using both</a>. </p>
","1143958"
"How to get the real and total length of char * (char array)?","125406","","<p>For a <code>char []</code>, I can easily get its length by:</p>

<pre><code>char a[] = ""aaaaa"";
int length = sizeof(a)/sizeof(char); // length=6
</code></pre>

<p>However, I cannot do like this to get the length of a <code>char *</code> by:</p>

<pre><code>char *a = new char[10];
int length = sizeof(a)/sizeof(char);
</code></pre>

<p>because, I know, <code>a</code> here is a pointer, such that <code>length</code> here will be always be <code>4</code> (or something other in different systems).</p>

<p>My question is that how can I get the length of a <code>char *</code> afterwards? <em>I know someone may challenge me that you already know its <code>10</code> because you just created it. I want to know this because this step of getting its length may come long long way from its creation and I don't want to come long long way back to check this number. Moreover, I also want to know its real length.</em></p>

<p>To be more specific</p>

<ul>
<li>how can I get its real <code>length=5</code>?</li>
<li>how can I get its total <code>length=10</code>?</li>
</ul>

<p>for the following example:</p>

<pre><code>char *a = new char[10]; 
strcpy(a, ""hello"");
</code></pre>
","<p>You can't. Not with 100% accuracy, anyway. The pointer <em>has no length/size but its own</em>. All it does is point to a particular place in memory that holds a char. If that char is part of a string, then you can use <code>strlen</code> to determine what chars follow the one currently being pointed to, but that doesn't mean the <em>array</em> in your case is that big.<br/>
Basically:</p>

<p>A <strong><em>pointer</em></strong> is not an <strong><em>array</em></strong>, so it doesn't <em>need</em> to know what the size of the array is. A pointer can point to a single value, so a pointer can exist without there even being an array. It doesn't even care where the memory it points to is situated (Read only, heap or stack... doesn't matter). A pointer doesn't have a length other than itself. A pointer just is...<br/>
Consider this:</p>

<pre><code>char beep = '\a';
void alert_user(const char *msg, char *signal);//for some reason
alert_user(""Hear my super-awsome noise!"", &amp;beep);//passing pointer to single char!
//
void alert_user(const char *msg, char *signal)
{
    printf(""%s%c\n"", msg, *signal);
}
</code></pre>

<p>A pointer can be a single char aswell as the beginning, end or middle of an array...<Br/>
Think of chars as structs. You sometimes allocate a single struct on the heap. That, too, creates a pointer without an array.</p>

<p>Using only a pointer, to determine how big an array it is pointing to is impossible. The closest you can get to it is using <code>calloc</code> and counting the number of consecutive \0 chars you can find through the pointer. Of course, that doesn't work once you've assigned/reassigned stuff to that array's keys and it also fails if the memory just <em>outside</em> of the array happens to hold <code>\0</code>, too. So using this method is unreliable, dangerous and just generally silly. Don't. Do. It.</p>

<p><em>Another analogy:</em><br/>
Think of a pointer as a road sign, it points to <em>Town X</em>. The sign doesn't know what that town looks like, and it doesn't know or care (or can care) who lives there. It's job is to tell you where to find <em>Town X</em>. It can only tell you how far that town is, but not how big it is. That information is deemed irrelevant for road-signs. That's something that you can only find out by looking at the town itself, not at the road-signs that are pointing you in its direction</p>

<p>So, using a pointer the only thing you can do is:</p>

<pre><code>char a_str[] = ""hello"";//{h,e,l,l,o,\0}
char *arr_ptr = &amp;a_str[0];
printf(""Get length of string -&gt; %d\n"", strlen(arr_ptr));
</code></pre>

<p>But this, of course, only works if the array/string is \0-terminated.</p>

<p>As an asside:</p>

<pre><code>int length = sizeof(a)/sizeof(char);//sizeof char is guaranteed 1, so sizeof(a) is enough
</code></pre>

<p>is actually assigning <code>size_t</code> (the return type of <code>sizeof</code>) to an <code>int</code>, best write:</p>

<pre><code>size_t length = sizeof(a)/sizeof(*a);//best use ptr's type -&gt; good habit
</code></pre>

<p>Since <code>size_t</code> is an unsigned type, if <code>sizeof</code> returns bigger values, the value of <code>length</code> might be something you didn't expect...</p>
","21022815"
"Get a file name from a path","125342","","<p>What is the simplest way to get the file name that from a path? </p>

<pre><code>string filename = ""C:\\MyDirectory\\MyFile.bat""
</code></pre>

<p>In this example, I should get ""MyFile"". without extension.</p>
","<p><a href=""http://msdn.microsoft.com/en-us/library/e737s6tf%28v=vs.71%29.aspx"" rel=""noreferrer"">_splitpath</a> should do what you need. You could of course do it manually but <code>_splitpath</code> handles all special cases as well.</p>

<p>EDIT:</p>

<p>As BillHoag mentioned it is recommended to use the more safe version of <code>_splitpath</code> called <a href=""http://msdn.microsoft.com/en-us/library/8e46eyt7.aspx"" rel=""noreferrer"">_splitpath_s</a> when available.</p>

<p>Or if you want something portable you could just do something like this</p>

<pre><code>std::vector&lt;std::string&gt; splitpath(
  const std::string&amp; str
  , const std::set&lt;char&gt; delimiters)
{
  std::vector&lt;std::string&gt; result;

  char const* pch = str.c_str();
  char const* start = pch;
  for(; *pch; ++pch)
  {
    if (delimiters.find(*pch) != delimiters.end())
    {
      if (start != pch)
      {
        std::string str(start, pch);
        result.push_back(str);
      }
      else
      {
        result.push_back("""");
      }
      start = pch + 1;
    }
  }
  result.push_back(start);

  return result;
}

...
std::set&lt;char&gt; delims{'\\'};

std::vector&lt;std::string&gt; path = splitpath(""C:\\MyDirectory\\MyFile.bat"", delims);
cout &lt;&lt; path.back() &lt;&lt; endl;
</code></pre>
","8520681"
"How to compare strings","125129","","<p>I wanted to compare a string without actually defining one of them as a string, something like this,</p>

<pre><code>if (string == 'add')
</code></pre>

<p>Do I have to declare <code>'add'</code> as a string or is it possible to compare in a similar way?</p>
","<p>In C++ the std::string class implements the <a href=""http://en.cppreference.com/w/cpp/string/basic_string/operator_cmp"">comparison operators</a>, so you can perform the comparison using <code>==</code> just as you would expect:</p>

<pre><code>if (string == ""add"") { ... }
</code></pre>

<p>When used properly, <a href=""http://en.wikipedia.org/wiki/Operator_overloading"">operator overloading</a> is an excellent C++ feature.</p>
","6222602"
"Image Processing: Algorithm Improvement for 'Coca-Cola Can' Recognition","125069","","<p>One of the most interesting projects I've worked on in the past couple of years was a project about <a href=""https://en.wikipedia.org/wiki/Image_processing"" rel=""noreferrer"">image processing</a>. The goal was to develop a system to be able to recognize Coca-Cola <strong>'cans'</strong> (note that I'm stressing the word 'cans', you'll see why in a minute). You can see a sample below, with the can recognized in the <em>green rectangle</em> with scale and rotation.</p>

<p><img src=""https://i.stack.imgur.com/irQtR.png"" alt=""Template matching""></p>

<p>Some constraints on the project:</p>

<ul>
<li>The background could be very noisy.</li>
<li>The <em>can</em> could have any <em>scale</em> or <em>rotation</em> or even orientation (within reasonable limits).</li>
<li>The image could have some degree of fuzziness (contours might not be entirely straight).</li>
<li>There could be Coca-Cola bottles in the image, and the algorithm should only detect the <em>can</em>!</li>
<li>The brightness of the image could vary a lot (so you can't rely ""too much"" on color detection).</li>
<li>The <em>can</em> could be partly hidden on the sides or the middle and possibly partly hidden behind a bottle.</li>
<li>There could be no <em>can</em> at all in the image, in which case you had to find nothing and write a message saying so.</li>
</ul>

<p>So you could end up with tricky things like this (which in this case had my algorithm totally fail):</p>

<p><img src=""https://i.stack.imgur.com/Byw82.png"" alt=""Total fail""></p>

<p>I did this project a while ago, and had a lot of fun doing it, and I had a decent implementation. Here are some details about my implementation:</p>

<p><strong>Language</strong>: Done in C++ using <a href=""http://opencv.org"" rel=""noreferrer"">OpenCV</a> library.</p>

<p><strong>Pre-processing</strong>: For the image pre-processing, i.e. transforming the image into a more raw form to give to the algorithm, I used 2 methods:</p>

<ol>
<li>Changing color domain from RGB to <a href=""http://en.wikipedia.org/wiki/HSL_and_HSV"" rel=""noreferrer"">HSV</a> and filtering based on ""red"" hue, saturation above a certain threshold to avoid orange-like colors, and filtering of low value to avoid dark tones. The end result was a binary black and white image, where all white pixels would represent the pixels that match this threshold. Obviously there is still a lot of crap in the image, but this reduces the number of dimensions you have to work with.
<img src=""https://i.stack.imgur.com/ktdAB.png"" alt=""Binarized image"">  </li>
<li>Noise filtering using median filtering (taking the median pixel value of all neighbors and replace the pixel by this value) to reduce noise.</li>
<li>Using <a href=""http://en.wikipedia.org/wiki/Canny_edge_detector"" rel=""noreferrer"">Canny Edge Detection Filter</a> to get the contours of all items after 2 precedent steps.
<img src=""https://i.stack.imgur.com/F9319.png"" alt=""Contour detection""></li>
</ol>

<p><strong>Algorithm</strong>: The algorithm itself I chose for this task was taken from <a href=""http://rads.stackoverflow.com/amzn/click/0123725380"" rel=""noreferrer"">this</a> awesome book on feature extraction and called <a href=""http://en.wikipedia.org/wiki/Generalised_Hough_transform"" rel=""noreferrer"">Generalized Hough Transform</a> (pretty different from the regular Hough Transform). It basically says a few things:</p>

<ul>
<li>You can describe an object in space without knowing its analytical equation (which is the case here).</li>
<li>It is resistant to image deformations such as scaling and rotation, as it will basically test your image for every combination of scale factor and rotation factor.</li>
<li>It uses a base model (a template) that the algorithm will ""learn"".</li>
<li>Each pixel remaining in the contour image will vote for another pixel which will supposedly be the center (in terms of gravity) of your object, based on what it learned from the model.</li>
</ul>

<p>In the end, you end up with a heat map of the votes, for example here all the pixels of the contour of the can will vote for its gravitational center, so you'll have a lot of votes in the same pixel corresponding to the center, and will see a peak in the heat map as below:</p>

<p><img src=""https://i.stack.imgur.com/wxrT1.png"" alt=""GHT""></p>

<p>Once you have that, a simple threshold-based heuristic can give you the location of the center pixel, from which you can derive the scale and rotation and then plot your little rectangle around it (final scale and rotation factor will obviously be relative to your original template). In theory at least...</p>

<p><strong>Results</strong>: Now, while this approach worked in the basic cases, it was severely lacking in some areas:</p>

<ul>
<li>It is <strong>extremely slow</strong>! I'm not stressing this enough. Almost a full day was needed to process the 30 test images, obviously because I had a very high scaling factor for rotation and translation, since some of the cans were very small.</li>
<li>It was completely lost when bottles were in the image, and for some reason almost always found the bottle instead of the can (perhaps because bottles were bigger, thus had more pixels, thus more votes)</li>
<li>Fuzzy images were also no good, since the votes ended up in pixel at random locations around the center, thus ending with a very noisy heat map.</li>
<li>In-variance in translation and rotation was achieved, but not in orientation, meaning that a can that was not directly facing the camera objective wasn't recognized.</li>
</ul>

<p>Can you help me improve my <strong>specific</strong> algorithm, using <strong>exclusively OpenCV</strong> features, to resolve the <strong>four specific</strong> issues mentioned?</p>

<p>I hope some people will also learn something out of it as well, after all I think not only people who ask questions should learn. :)</p>
","<p>An alternative approach would be to extract features (keypoints) using the <a href=""http://en.wikipedia.org/wiki/Scale-invariant_feature_transform"" rel=""noreferrer"">scale-invariant feature transform</a> (SIFT) or <a href=""http://en.wikipedia.org/wiki/SURF"" rel=""noreferrer"">Speeded Up Robust Features</a> (SURF).</p>

<p>It is implemented in <a href=""http://en.wikipedia.org/wiki/OpenCV"" rel=""noreferrer"">OpenCV</a> 2.3.1.</p>

<p>You can find a nice code example using features in <em><a href=""http://docs.opencv.org/2.4/doc/tutorials/features2d/feature_homography/feature_homography.html"" rel=""noreferrer"">Features2D + Homography to find a known object</a></em></p>

<p>Both algorithms are invariant to scaling and rotation. Since they work with features, you can also handle <a href=""http://en.wikipedia.org/wiki/Ambient_occlusion"" rel=""noreferrer"">occlusion</a> (as long as enough keypoints are visible).</p>

<p><img src=""https://i.stack.imgur.com/kF63R.jpg"" alt=""Enter image description here""></p>

<p>Image source: tutorial example</p>

<p>The processing takes a few hundred ms for SIFT, SURF is bit faster, but it not suitable for real-time applications. ORB uses FAST which is weaker regarding rotation invariance.</p>

<h3>The original papers</h3>

<ul>
<li><a href=""http://www.vision.ee.ethz.ch/~surf/eccv06.pdf"" rel=""noreferrer"">SURF: Speeded Up Robust Features</a></li>
<li><a href=""http://www.cs.ubc.ca/~lowe/papers/ijcv04.pdf"" rel=""noreferrer"">Distinctive Image Features
from Scale-Invariant Keypoints</a></li>
<li><a href=""http://www.willowgarage.com/sites/default/files/orb_final.pdf"" rel=""noreferrer"">ORB: an efficient alternative to SIFT or SURF</a></li>
</ul>
","10169025"
"C++ for each, pulling from vector elements","124906","","<p>I am trying to do a foreach on a vector of attacks, each attack has a <strong>unique ID</strong> say, 1-3.</p>

<p>The class method takes the keyboard input of 1-3.</p>

<p>I am trying to use a foreach to run through my elements in m_attack to see if the number matches, if it does... do something.</p>

<p>The problem I'm seeing is this: </p>

<pre><code>a'for each' statement cannot operate on an expression of type ""std::vector&lt;Attack
</code></pre>

<p>Am I going about this totally wrong, I have C# experience and is kind of what I'm basing this on, any help would be appreciated. </p>

<p>My code is as follows: </p>

<p>In header</p>

<pre><code>vector&lt;Attack&gt; m_attack;
</code></pre>

<p>In class</p>

<pre><code>int Player::useAttack (int input)
{

    for each (Attack* attack in m_attack) // Problem part
    {  
        //Psuedo for following action
        if (attack-&gt;m_num == input)
        {
            //For the found attack, do it's damage
            attack-&gt;makeDamage();
        }
    }
}
</code></pre>
","<p>For next examples assumed that you use C++11.
Example with ranged-based for loops:</p>

<pre><code>for (auto &amp;attack : m_attack) // access by reference to avoid copying
{  
    if (attack-&gt;m_num == input)
    {
        attack-&gt;makeDamage();
    }
}
</code></pre>

<p>You should  use <code>const auto &amp;attack</code> depending on the behavior of <code>makeDamage()</code>.</p>

<p>You can use <code>std::for_each</code> from standard  library + lambdas:</p>

<pre><code>std::for_each(m_attack.begin(), m_attack.end(),
        [](Attack * attack)
        {
            if (attack-&gt;m_num == input)
            {
                attack-&gt;makeDamage();
            }
        }
);
</code></pre>

<p>If you are uncomfortable using <code>std::for_each</code>, you can loop over <code>m_attack</code> using iterators:</p>

<pre><code>for (auto attack = m_attack.begin(); attack != m_attack.end(); ++attack)
{  
    if (attack-&gt;m_num == input)
    {
        attack-&gt;makeDamage();
    }
}
</code></pre>

<p>Use <code>m_attack.cbegin()</code> and <code>m_attack.cend()</code> to get <code>const</code> iterators.</p>
","15027760"
"C++ string to double conversion","124795","","<p>Usually when I write anything in C++ and I need to convert a <code>char</code> into an <code>int</code> I simply make a new <code>int</code> equal to the char. </p>

<p>I used the code(snippet) </p>

<pre><code> string word;  
 openfile &gt;&gt; word;
 double lol=word;
</code></pre>

<p>I receive the error that </p>

<pre><code>Code1.cpp cannot convert `std::string' to `double' in initialization 
</code></pre>

<p>What does the error mean exactly? The first word is the number 50. Thanks :)</p>
","<p>You can convert char to int and viceversa easily because for the machine an int and a char are the same, 8 bits, the only difference comes when they have to be shown in screen, if the number is 65 and is saved as a char, then it will show 'A', if it's saved as a int it will show 65.</p>

<p>With other types things change, because they are stored differently in memory. There's standard function in C that allows you to convert from string to double easily, it's atof. (You need to include stdlib.h)</p>

<pre><code>#include &lt;stdlib.h&gt;

int main()
{
    string word;  
    openfile &gt;&gt; word;
    double lol = atof(word.c_str()); /*c_str is needed to convert string to const char*
                                     previously (the function requires it)*/
    return 0;
}
</code></pre>
","4754486"
"How to get file extension from string in C++","124671","","<p>Given a string <code>""filename.conf""</code>, how to I verify the extension part?</p>

<p>I need a cross platform solution.</p>
","<p>You have to make sure you take care of file names with more then one dot. 
example: <code>c:\.directoryname\file.name.with.too.many.dots.ext</code> would not be handled correctly by <code>strchr</code> or <code>find.</code> </p>

<p>My favorite would be the <a href=""http://www.boost.org/doc/libs/release/libs/filesystem/index.html"" rel=""noreferrer"">boost filesystem library</a> that have an extension(path) function</p>
","52009"
"Why is this C++ code faster than my hand-written assembly for testing the Collatz conjecture?","124656","","<p>I wrote these two solutions for <a href=""https://projecteuler.net/problem=14"" rel=""noreferrer"">Project Euler Q14</a>, in assembly and in C++. They are the same identical brute force approach for testing the <a href=""https://en.wikipedia.org/wiki/Collatz_conjecture"" rel=""noreferrer"">Collatz conjecture</a>. The assembly solution was assembled with</p>

<pre><code>nasm -felf64 p14.asm &amp;&amp; gcc p14.o -o p14
</code></pre>

<p>The C++ was compiled with</p>

<pre><code>g++ p14.cpp -o p14
</code></pre>

<p>Assembly, <code>p14.asm</code></p>

<pre><code>section .data
    fmt db ""%d"", 10, 0

global main
extern printf

section .text

main:
    mov rcx, 1000000
    xor rdi, rdi        ; max i
    xor rsi, rsi        ; i

l1:
    dec rcx
    xor r10, r10        ; count
    mov rax, rcx

l2:
    test rax, 1
    jpe even

    mov rbx, 3
    mul rbx
    inc rax
    jmp c1

even:
    mov rbx, 2
    xor rdx, rdx
    div rbx

c1:
    inc r10
    cmp rax, 1
    jne l2

    cmp rdi, r10
    cmovl rdi, r10
    cmovl rsi, rcx

    cmp rcx, 2
    jne l1

    mov rdi, fmt
    xor rax, rax
    call printf
    ret
</code></pre>

<p>C++, p14.cpp</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

int sequence(long n) {
    int count = 1;
    while (n != 1) {
        if (n % 2 == 0)
            n /= 2;
        else
            n = n*3 + 1;

        ++count;
    }

    return count;
}

int main() {
    int max = 0, maxi;
    for (int i = 999999; i &gt; 0; --i) {
        int s = sequence(i);
        if (s &gt; max) {
            max = s;
            maxi = i;
        }
    }

    cout &lt;&lt; maxi &lt;&lt; endl;
}
</code></pre>

<p>I know about the compiler optimizations to improve speed and everything, but I don't see many ways to optimize my assembly solution further (speaking programmatically not mathematically).</p>

<p>The C++ code has modulus every term and division every even term, where assembly is only one division per even term.</p>

<p>But the assembly is taking on average 1 second longer than the C++ solution. Why is this? I am asking out of mainly curiosity.</p>

<h3>Execution times</h3>

<p>My system: 64 bit Linux on ‎1.4 GHz Intel Celeron 2955U (Haswell microarchitecture).</p>

<ul>
<li><p><code>g++</code> (unoptimized):          avg 1272 ms</p></li>
<li><p><code>g++ -O3</code>        avg 578 ms</p></li>
<li><p>original asm (div)  avg 2650 ms</p></li>
<li><p><code>Asm (shr)</code>  avg 679 ms</p></li>
<li><p><a href=""https://stackoverflow.com/a/40356449/4322363"">@johnfound asm</a>, assembled with nasm avg 501 ms</p></li>
<li><p><a href=""https://stackoverflow.com/a/40367384/4322363"">@hidefromkgb asm</a> avg 200 ms</p></li>
<li><p><a href=""http://gcc.godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZTUAHAvVAOwGdK0AbVAV2J4OmAIIcAtiADkABmmk0Exnh6YA8mwDCCAIZtgmGfICUpDgOLIj0gKQAmAMx42yHvywBqW460cC%2BKgAdAg%2B2Layog7Oru5ePn4BLgQhYRFRTi5uHpjevskEAJ6MmBypjuGR6fzJAGwALAD6BJ4iAI78mK6YEDVsBA3NrXgAXpiknn0DTS0AVIy6BAgm3gDsAELpntuTdTOeEroAHnh5ACKeshOHR8jnlz6bVZE7ngBmJJ69e0OnPhcQDijXIAWk8tBWtlWWnBj22fwqnnscM8pxB/yRkI2W1eOymgxabHueEe6WieDeDxeuO2%2BP2dwxyMcT1ENO2AHcEKpclAiRjed57LVPI4TD4AGJfPkVMLgyH2daePkK8GeEBSvLhRH2Ey6zWYnFsnYMhWM0lVJyYHgiQ24ulDBmOC6yc2stnoVBrFlG14Ael9Is8s08GHQ91DE30YYc61oB10AGtSqiWpgAG5dILbADKnqWmGImDA0g4nl0PHZukKpcWnjUun8IbYuTSFTjRE8HrLbwIBbLIrYMdotqNJs2TqRrp9O39ngIyk8ad0xFLFjnCFyShUamInmQ%2BnjBGQCDLkk87MIJ4sgmsBxIuX4Ije/B4PEKI7Z9tTGbYjXTXXuCBpS1bADWZD8ZwDLduVLDsAFl1AANUFRVswACQAJRQzwABlsCialpy/Tx/1/UNAOA2UIWw5VFWHZltlncs13ZEgE1LD5d3zEN0HQP8fz3BtMAgnYRMYqDUGUGC509PDWRjTx0KwoDPQQ5Dm0wLB0DMVo8y5UsJHvEEtzUI4SKORhCw4IF2FRUtj0wXQSi4z103LfhFmEwi2VnAAjfgWnzIluOgnclUwTSayJTAjgIYhdE8NSZNaXQM3XXISDwYAXHLJUJjXQhPF88t9GsUsBAIdJZ2nXZ%2BgJHi%2BNIwCgLyLQEjlGjsJ1TUqJREif0aciMVDfiuinI1Z0Kj1k1QDNiDePh2V09gCwmJYBGABAs08ABVVxJIkLpAs9R8vLdadpQBZVhVFCV%2Bq6QbeLVe7f1I8aaShC5OW5DV9R1V1oi6fA3g/ESKQ1f5GTFbzRxjOHwJhnZwYgR1QJuZAsW9GqbgRC4SQR86fXR%2B5kHe3FPttCnvPmRYTwxdGycLAhBCJHGAdWM4yUiZJ4xcCBMdtYiceuY5SYJ20cfudpOm6CBaFkBXFYmBxanRsUCdeSzkjeCAHGRewAFY9c8AAFDCAEl%2BAaQV7GVw3jbNy3rb12wDa0Qd7Ft%2BMThF251ax7YmZZh5xY5rnRF9WYtjcfRgEcIIAE5i1LPgmHSIIcPWdZZEaRx1RqgujWiHYTeXI7cNQJhPCznP7E8M5MGYUInWHRHtkMtNcWIeWJisI4RI4BBd1eburiRQvi8HGUKmRZ5Cdeesu/QI5lYN9Y%2B662YN4U5EDc5tvWiHpf%2B7no1e0bY0eAmRwRI7rvkBXzxiGXkTkA73JA4f3v5fDo1dCekeCcJiz3nsaBcI8v6TgPlQBKngM411ziJdIxAE7/DQPwfo/wXQMSfg/f4U8zgkkiEEVOjBHpYB/PnQUjgmxvibLkNS20tACB4GGDgqVchLFrBeJY/YFq6GAGoayIJB4UhaBAJSAANc8l49wCH6KiIkCVCzZX8AWaGoDtiLxHsvVe68H6b23iqXe%2B9NGH2HjsZ%2BZk2TFxGm9F4t9Zq4kco/TABjtjF3YWlTK2U2C5SJCxTcB5z6BQ3HWVAS1fKEFLC4dKcjGCFC%2BEsYQdk4lxTwMgBMZZXyBlCgWAywgRDaQHkfCBj866vEnq2LUZw66xMYDwXQ1hf5shCbics19X4dzYCMT%2Bj8rGiScHWTyrg8DJjeMQSSnhLLphTAWdUVj1QmRio0OSMYlJ9PVBs7Y/DgBcESkhGMAAVbA2YjktJpP/MMgDgFdMYPfcpIkYHbBIZXMhoZ7EES%2BSgtB8jKpOmwYqXB/cnQEKIaIV5TBRpsFDCARxncdH9LwQfcmThtGWJ7t4NeRi6KuwuIMmh5ZezED8SwNKHZCzoH4LeRpvZXCJM4k/Ze6oIByWHNCJSYoFRspKRYwOL8D7ov5Y/V2%2BizIKQGQpYce8CVKhotUuMUqLm4jvq8FxEw3EnzMYPPlwLbkHzaa8DpIoumzR6X03uy9ZW0q6MgMZHFJkSGmYWTuhB5lMqOOqNS6zMIxmWUcVZ%2BFtp9y2Zhbauz9neoVCcs5yqjUAMsUAqBZi373LKfqsxzy4GkOhaGcOPynToMwQClEfd8H/HBZ4jh/Ykq%2BUSVuAKLhgBKmqXXCZUyp4gTjICLIuRCDJyVKgFotkQpCBYPuHg0zaYaOLsxPMiZkzcSSqgN4lJR2EAyblBYvDGXlknVoE2O0OD5V7SmJ%2BGCYlEgWPFV8VoZG8O4m8PAK4WhKXTjm0iI1CynUaKInscKD6qssccXuyKzEfTRY5Y%2BeicWwhlbK4gF7FFTpvWoSdPCTzcT/ZVA%2BOqHliVRY4K50HgXTlnTwYlpK8Dks9JS6luQbX0veJ8RZXweUcswly9YogzgXEZMgfKuhDqnkUr6hUSkJgenZESdtTr6ik0FVBxFMGDESuONhaV%2BLZWdrCIqlUtFYSnzZHhsphcfRVOntgL2HpmzIYIKxVovZGCli%2BIx5A74nT/SMzSQ1OxjU3wPm/M1vS9UeutSMu14zHXOtmW64gCzmVvoVP6wNUQnT1GDQ/UNGEfUYXDY0vZXrDnRtOecmGxciAEFyqQ4yy4hCaU7I3PcegXDqnNv0O9aFswAHV1TDgVDfBUdcMS1GQNtdQu5%2BuxhjMNic8myyhM3KgRsK6yzRVivFRRHA2DbXWGcbrvpswAGkcLqgNncT4jgxsjmLmZguog4IXHWC%2BVhqAxjxdhENoc9xzvjcm0Ob7GIrtfELB0Z9yYNlRlwvhZKiGiSxMfc%2Bxs7m3C5F0D2PsG9fJuMksmQs/9CgTAwxVA5yE1HlibZ4bAkjZCt3nrdu7jOmeM5NtydAQg5qHd7EJyZt7dz7iJF2Lh4i4dsEp3fYgDRSCS/qE2TwogADiO1ZC%2BghBMfyLRnuvg9O9wSbBiwpA0YRxSeAJCqGXG%2BCY7XeyTpmSCc2aZCjrzwOgQwXwkpVaTKWWgdwocHhim4xttlGAkAICsQ4iTUDIH3DZPxr5EnY8a40woDW61P1KJYW8aA2ALQyQQY9RUAqHxYWGRPhl/B0KBGbxpLlPBde68Mbo6VEl6DSjQ0QOEj1xr8wmwOSaQGjnAZYyBA%2B2RZshWQz9vFGjfpEL%2BrkPZw5L7ngWs4Rb/lnEBcPkFZwwVkiGVIkUIImAFih7soRq4F8tC8cmJKLh/CIeQCwdgpYIAa/CpFORGCWixOUZgVRxKJg20aEDY7IVok6cOMSP%2BRItA/ATAEwPuwydK7mQQyCtA9EZw9AT8tATItS76byua0%2B6wcE5s9gAG2qQ81iwqoG/S6BEGNCkqE4OmbYBG9BQq2BY8oqsGmmlSQyAu568OV6y4e6d6GGcS2GrBhGxGymHBZGQyRKBYVGNG6eVKNKEWDKLGzKbG%2BE7KWgUiXGPGpiRo7BViMGVqEqqmKoPBHiQyzB2AemioBmdOIkvm2wbgnSuGlB6aoW3cFSvBDBqmTBraROl4JO6ObwbiLABg7wBWHApqaY5qPhVqchNCbm9q7w0WMyrqxK%2BcrGUifqkkDSKyck2%2B2W0iMRAi%2ByMaZW4GzORcQylW1WbytWxA9WYYWA9yx4ugrWng1unWPW6o9QM29wo2f2k4X26Wvui2ciK2lI/uG2CU9%2BO22we2B2x2p2ng52IYu4V2qB3m7SveT8/edyDyGaRo4%2BH6P4I0xBpBy%2Bbo6AyAxUBK0QLxTgrxNCcEVYieYBeukwIgFReyrQmALQaeeGphW23OYYq21REo3eRovICQCQ1ECkThkIlmhmboEoyACsOwg41I2JOJ2wU8bUvgzhKoiscY2wzhTokMNJdJnM9JOIkiNOlJRyG4lEbYQJ%2BengWg4oLSWJvklJcqNhNC5EpEWYvkX%2BrCRUuQsg2xGJHijg4ogpcpRJiJpJ%2B%2BioFJOw1JDJeptJ%2BpNJ1IkiRwvkqpbJAECqe49YK4PJfJRmWJ8suJsqTUea%2BJ8sqpLavgSJmplwCsQpupBpQZjJxpWgdBngFpHJ9hXJpYvJrwAAcifpJqgKUPrtIC0BuDwIwHcf6LmXmfmbma8EBAqvKI4RpjiFiYSS2tSLCUqdibiQqr6dqVSWSIyW2YaUYZ4MycgM4TWXWYKc6SKQ1C9BKVKaXrKfKXToqXyf2Q2ZZmSVqf6Tqa2R2cGfqcaSab5PyXWU6USS6QJKGNtJKRII%2BCCbkN2kOhuMQBeP8YVKxC%2BOOS9C9EbnkDOeKD2XOV2k2UuS2VUO2WuZDBuVoJ6biImSUMmamQbp4JmYwBMALlBVQKeXOKUNMYtEVIVKtskuVLuBYIdMkgYDmQWURQGFyFgLJgmMAL5AOnoGwOgCCOyGOnSqeBIFVMRSsZMkmESNjvuKdKJhhBcPWBmKWOoJKBgmRS4A1mIdhl/golRHsbUYpEJrkIyhhOoFhJ4PxebMAjsBAN9MeJ2CmbBGEuwsJvhc2u/m8A2IAfJekAAAKHCtZMlqUaXZhaUuXmzjQlGaV6IYRaDSJKp7wAzUi2WkLkGvCGHuW3LizeReVnCSI%2BVnDmzYSaWzDDbGJ4pkwbL8XxWwg4KM7FwDJuYMrRbPynA2q7hxZLKFGmSpbYQbIYgZbbAQATbjHTZOjA62QPZnAzreRKQXDeUaWJVRVAopG9EdY8DqjA5FX5TAkcSxHbSJnDrBRhLIBjqbq260yN63hDEVDxzbBdXqjChwTH7ObXx3BFVfCWSoDFS%2BR0K%2BRDoEBqDNiZLlTLWTL8CbSMABQvnbBaBqQ4SDVuXZV9Q1TFwmyFggirHqj2DnXqHyWvB/VITZiA0TDA15Wg1DLg2YCQ37bQ2w3IHvgop1HG6NGTo1b7itFjLtFNZdGxJPXABLBtbjXVz7aHYnaHVjbbB9GTr17qgAAcnN8uj2k1AOCoiqE4WxEAV1N1d1D1T1biCYlOI6Q8G0CAX1LQAYVkme2N2eueT%2BHAPVhMf1JsKNk4GsngAAUqyCFW8kFV8rML6DmbMM7S7a7W7cGCwPgA1vwPcnNLHiGJSKRZgORZRQOpyKgGoHIlgCEQ%2BkPBFJ2BSBEYWAoi4M2LuKQqWO7Vna7cqqSAxEcqbk2g6lMglMwoWPYGcHAVTrULUDiRAPYEEPUArmhCMDpHBAWFMmbqtagMuMeG6k/oIJgNtCjNVTFCCCURiIgdNTyd6hOHXHAc5veieDDUgbaoUIbZUuBAxG1KaCqCwGbgYK/mIRIPWvWM2HRT7YuPkqwESJhWEjCMLmWAPXuvWoUdJNjgQIAVzKglvYqFoI0gYPHHzZ4CCOoDQiCIcFYM3LvosNRkYJ4PUHzXXBIKWDGL6GCLIEEINgbMxruDg4WM5t/XnYqMANHgbEEBUqA%2BA5A8ePgrAxmGdo4HzSgyhOg5cEELIEMYbDsp8Pg43HEfscQzKY2DRXRczOfcxVfSuDfeqKpVhFDm0txFyJtOPFEvnoMY4Dgyw4ynw4Q3PN/YItdblL%2BlVsQDhqICY8uAQOQREAnBLrQI4OgAgekPvU2jPo3I5NY%2BkElJgH5QgYrIrHbbY1gHcJqt/VDpqhMCCCArY0cJ8JgL5LBSRIk9/XE7uAk64r5Fqt/fYwbE4yas8AnIPBAbQAbBMLUH4XCN3DgxiLIIKR6Zg0EFmLU7cIrE0zZb/R3ubArvGeCMKIqeOIqDBUZS2J7GhUVcbKQnLu3Y6ttNmAgCXmmRmYIEtWtoUGZXZQ5WwDY7IAnJIs5aUHgBqkCN/SUZgENViusL5f5VYRlX%2BYM/LjhN0707QMKFeX2qWKxCuJwjRYOmZbg4lB3SxRaAbODC6MQpcV0F%2BpgD%2BthlQkI2XZgHXDM1MvXY3c3a3dsPUBUwcK/jo%2Bns5j9Sqk4iPCBkyuCmZo8CYbopc6VeWfBgMwIZeihiIehrIlhlfrykvEcwqRPMyNIZYjS3S%2BZgxAoSSvQ5wrRppPRqvUxoyqxqyjoVCHoZxjGBFfxoJsJg2HxblsmdJhkVMvJiJNSyKtivgNhPFOKrcwy4y3YQ4XKkqvsa8CZoKzy0KflQxHYdZitHZg5moova5uof8F5l8mfChe0lfAUymt0iFqVZalQXCGkVFlMlkXMh9osklusClmsulsGvgNlrlvlpUUVohMcqVjdgxKTeEkwC0W0Y1p0S1ts2NTbnXgMZ9usINusLNhcKMdsC1VNlNt2wg1MXEmgLMWtuZHFIsZwMsSzWsezZsRdjsdduVujcTTsF1dXC9jru6oO4DhLYLf26LbGPcMDhAKDjUFZHxWtmGCURShgnZmEk%2Bi%2BnuIUKjt2MSuSzKUoHjo5OgITkvSTklOTjwJTtTrThWyNeu9B8TazmoOznA8QFzo5BILzmFPwULnoCLhgmLtERLlLjLnLorsrqrjpO/lrq9rrvBemUEES3kKhIXTXpbs23enbg7k7kIK7jyB7gut7r7rRROwHsgEHleqHuHlWCGNHg2DfS/TKUnlWKnoklrTeEtjnqB/rerkXoPCXnJ%2BXo9YklXubrXvXltT85gC3tWu3p3gI6G2yAK9sIc2cWyKmty05zSBcQQVPnxLPpgPPmIvvgbFaODL2WloM3CNmGwOsCCBMmMrRXQnrItCCBM57PnIq6ILoZymq7xvCJwJCQHdDhY/6nVb6hC551cdPotLSvnEI5oDyfeMi0C4MbUAbCw2IRTsABI1s9W4wNtIg7ICwxAPiwQwbUvYOtkllGwIdAorpbIg0CCGo%2BnoCYyv%2BMQOs1yAYHBctlEc2jFFOxpdTjFk%2BkcKUHRzsEBoHGS6VQRia2YX8Na1pvR0y8hteqy6Nxy/554bqnG7y3/IceCcK0XKKxRooRK7DtK2oQTQCwq%2BxiqxhAYdlxqylFq6WJmxJgZfq7JsO0gsyDd7S%2Ba2pla7ija3CHa51I67ZzSC6/ym63UST8EQZbZgjn605i5hABM55hva0uG0apGwFtG8FtT/G3CWWIcY58moPmmq6257iB51Cl540JV4sEvobFaDaC8DbUwDswnGsrs9lQlUlQpClWlYqCYt/W%2Brr3Fc4/cyDX1abQNUyECnCCJZMLRcHRJeOTxf8evrpnM5KBiHGRiI0o2At9hg1hVL6C4NtAbI4A3diwbJ7MAwN0N/wysGIW0tU9/ZMnyt97PKgrs49872JW7xIyPd/rpisD6PUI4BlgnA47UKsKsLi18Mn4S29%2BGxn4U75t9x318sQ7Yx3LY%2BqiROa4D3/fV0iOiy3Vi6sOQ7QHzbUHzbQAnE34N7wwSwba2WF7szqrYzn5v%2BaAnCErY/5svgnEFgkb0t3wKr3%2BjYjYhADQNWjVByKw8xaf8TZlBV8wmOqC4E%2BmLr2N122gmxlsQIW6oknzCJIv%2BcuBKMDCTrlwu6kyXulyF7AD1Cw54LkPpT0CMASgnAZKCIBaDO9YBBYcuJjxRYSAOmUHO/sjUf5xUQaL/OEO/iwqpJxK//K0IkhhQtBLKjYRlNzR5KHoyg39QwrY1ORuUYmuzY2rY3t7f0ratjDXtmRBZAwKQLSCers2wCW9LmGEVyvS07J39QIIgiYGoMkQtJja3gXZpgHWAmwDBrlHEHf0VDmDLBVOawdSFsEkR1gOVXxkYKMzZgdoioQfn42TRW1PA9lboniVDYhNsCjjLYFQHNSuMDA7jEoEr30YMQy0AKBbOuBSQh5kg8NTwGk0H74ANU%2BAWxo8CSiSCLm1zHEFckH6QIf4%2BjXZgPzMFksEmkvR4NnjmgtBJYz7fwKfwlxAhe4HAeQQRCKb8BJSK4JJg0HDi2VCAPdeIZ4y153wuCJzPeHBUnSPdmw7IUDs2G/rhDpGdlKYboEaBdF4sOINJsP1cTX9tg%2BATuGE2pDEZ0AkbYsLIGLA4h5h2KRYWcEkw8AcQ2wk5tSDaRD8XE6QC2vGVAiTCiA%2Bww4S0kXhD8uCWTbQYywIaeM4kUzRlFhkwAdBbUDGLoAzVCC/Dw2GTDVFk2eEkt8Rw/IhMv1EgMQ74JI8FqICBEgi9hMwxIbZyyA7BNIZIoobszhBsj/glJBim6neDoAcQ6KTSKa3Xj9CYw4wwKpyM5EMQRRPIjkGOlyB1oUBfyHEBwGGGsiaWhzDkT/UVDsA6E3ENCjH3Qrck76uQIgcnVvApJCwagJcP0HyiegfiH/dMh/jDCaCHBmgjykZiyC78fhXyWyhVEYBhU7wVwslq3Dz4RjwuAATWzCNA%2BRvYNUdWAnSfC54UIsllwXx4qgDYqCKUaIBOFsiCh4KDgEmL3Thxs62dX0NIDMATVpABsBQNs2kC0AFAqAGQDvU2AqhrwVgUZo4CbGkBrGcgKsWYG/61BaAHDBOPYCQb1BPYDQBoKsCAQ1j6gCgKQB6VIANj5ADAGQAoC4BXB%2BxpgUgHAFgBIA8kZACgCPSkg7gUAADOOAnCuBPpgeK4SgL5GMAKAlAU3AgJoDfDPjSA%2BAQsE/jgZcABx5Acas%2BLMBMBn8nAGQCCFuAgNuse6GCbt02zRc5o91EQCCAbBOoqGIDGhtA3YS0VCgvkTjoYCrGkAaxdY1cV%2BJbF2AnAcYMQkcHn4ghrYMcaIvHATgcMFAu44iRACPFv0dw5AbgDxPmTAAKmpAO8cSi4Bv4vxr4o6B%2BMKBfifxkRf8V%2BOSBWgQJDAZgDfQAlQS7gIiAIP8A678AE4y/EELBJyTGSEJCUJCQWBQnY10JIDMBsRNIn1iKJMgaIDRNkR0TagDE2XKQzuC1AKG7E1SVxJQACSTx/E88fMgyQ9lVgIk1QGJMfGSSDo0ktgJ%2BMAnyS/xQlJScBIHGgT1JL%2BSCdBOMlwSzJCxEBm8BhQghkJy2GyWeEwkQMkB/wXCf%2BwIku4iJ1YmQGRLXHNiXJ1E0bh5K8moho84IVYAFOylDiQATDROLIFWC0AZ%2BDfTRpo09gkSZAi40gMuIVjkTAJlErcSAFtgcTdQS06QPYCcmbTNxfYkCWYD9oyN6gQAA"" rel=""noreferrer"">@hidefromkgb asm optimized by @Peter Cordes</a> avg 145 ms</p></li>
<li><p><a href=""https://godbolt.org/g/1N70Ib"" rel=""noreferrer"">@Veedrac C++</a> avg 81 ms with <code>-O3</code>, 305 ms with <code>-O0</code></p></li>
</ul>
","<p>If you think a 64-bit DIV instruction is a good way to divide by two, then no wonder the compiler's asm output beat your hand-written code, even with <code>-O0</code> (compile fast, no extra optimization, and store/reload to memory after/before every C statement so a debugger can modify variables).</p>

<p>See <a href=""http://agner.org/optimize/"" rel=""noreferrer"">Agner Fog's Optimizing Assembly guide</a> to learn how to write efficient asm.  He also has instruction tables and a microarch guide for specific details for specific CPUs.  See also the <a href=""/questions/tagged/x86"" class=""post-tag"" title=""show questions tagged &#39;x86&#39;"" rel=""tag"">x86</a> tag wiki for more perf links.</p>

<p>See also this more general question about beating the compiler with hand-written asm: <a href=""https://stackoverflow.com/questions/9601427"">Is inline assembly language slower than native C++ code?</a>.  TL:DR: yes if you do it wrong (like this question).</p>

<p>Usually you're fine letting the compiler do its thing, especially if you <strong>try to write C++ that can compile efficiently</strong>.  Also see <a href=""https://stackoverflow.com/questions/1866316/assembly-language-compiled-languages"">is assembly faster than compiled languages?</a>.  One of the answers links to <a href=""http://www.linux-kongress.org/2009/slides/compiler_survey_felix_von_leitner.pdf"" rel=""noreferrer"">these neat slides</a> showing how various C compilers optimize some really simple functions with cool tricks.</p>

<hr>

<pre><code>even:
    mov rbx, 2
    xor rdx, rdx
    div rbx
</code></pre>

<p>On Intel Haswell, <strong><code>div r64</code></strong> is 36 uops, with a <strong>latency of 32-96 cycles</strong>, and a throughput of one per 21-74 cycles.  (Plus the 2 uops to set up RBX and zero RDX, but out-of-order execution can run those early).  <a href=""https://stackoverflow.com/q/26907523/224132"">High-uop-count instructions like DIV are microcoded, which can also cause front-end bottlenecks.</a> In this case, latency is the most relevant factor because it's part of a loop-carried dependency chain.</p>

<p><strong><code>shr rax, 1</code> does the same unsigned division: It's 1 uop, with 1c latency</strong>, and can run 2 per clock cycle.</p>

<p>For comparison, 32-bit division is faster, but still horrible vs. shifts. <code>idiv r32</code> is 9 uops, 22-29c latency, and one per 8-11c throughput on Haswell.</p>

<hr>

<p><strong>As you can see from looking at gcc's <code>-O0</code> asm output (<a href=""http://gcc.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(j:1,options:(colouriseAsm:&#39;0&#39;,compileOnChange:&#39;0&#39;),source:&#39;%23include+%3Ciostream%3E%0A%23include+%3Cstdint.h%3E%0Ausing+namespace+std%3B%0A%0A//+unsigned+types+give+better+asm+output+for+divides+by+2.%0A//+Even+with+-O3,+%60long%60+sucks+(try+it:+godbolt+recompiles+automatically+after+edits)%0A//+I+used+this+version+as+a+starting+point+for+hand-optimizing.%0Aint+sequence(uint64_t+n)+%7B%0A++//+CHANGED+FROM+THE+QUESTION!&#39;S+CODE:+long+-%3E+uint64_t+%0A++++int+count+%3D+1%3B%0A++++while+(n+!!%3D+1)+%7B%0A++++++++if+(n+%25+2+%3D%3D+0)%0A++++++++++++n+/%3D+2%3B%0A++++++++else%0A++++++++++++n+%3D+n*3+%2B+1%3B%0A%0A++++++++%2B%2Bcount%3B%0A++++%7D%0A++++return+count%3B%0A%7D%0A%0Aint+main()+%7B%0A++++int+max+%3D+0,+maxi%3B%0A++++for+(int+i+%3D+999999%3B+i+%3E+0%3B+--i)+%7B%0A++++++++int+s+%3D+sequence(i)%3B%0A++++++++if+(s+%3E+max)+%7B%0A++++++++++++max+%3D+s%3B%0A++++++++++++maxi+%3D+i%3B%0A++++++++%7D%0A++++%7D%0A++++cout+%3C%3C+maxi+%3C%3C+endl%3B%0A%7D%0A%0A//+as+discussed,+gcc+-O0+still+uses+a+multiplicative+inverse%0A//+for+non-power-of-2+constants%0Aunsigned+long+div_by_13(unsigned+long+a)+%7B%0A++return+a/13%3B%0A%7D%0A&#39;),l:&#39;5&#39;,n:&#39;1&#39;,o:&#39;C%2B%2B+source+%231&#39;,t:&#39;0&#39;)),k:40.81295963439001,l:&#39;4&#39;,n:&#39;0&#39;,o:&#39;&#39;,s:0,t:&#39;0&#39;),(g:!((h:compiler,i:(compiler:g540,filters:(b:&#39;0&#39;,commentOnly:&#39;0&#39;,directives:&#39;0&#39;,intel:&#39;0&#39;),options:&#39;-O0+-std%3Dgnu%2B%2B11+-Wall+-Wextra+-fverbose-asm&#39;),l:&#39;5&#39;,n:&#39;0&#39;,o:&#39;%231+with+x86-64+gcc+5.4&#39;,t:&#39;0&#39;)),k:31.237103409492676,l:&#39;4&#39;,n:&#39;0&#39;,o:&#39;&#39;,s:0,t:&#39;0&#39;),(g:!((h:compiler,i:(compiler:g540,filters:(b:&#39;0&#39;,commentOnly:&#39;0&#39;,directives:&#39;0&#39;,intel:&#39;0&#39;),options:&#39;-O3+-std%3Dgnu%2B%2B11+-Wall+-Wextra+-fno-verbose-asm&#39;),l:&#39;5&#39;,n:&#39;0&#39;,o:&#39;%231+with+x86-64+gcc+5.4&#39;,t:&#39;0&#39;)),k:27.94993695611732,l:&#39;4&#39;,n:&#39;0&#39;,o:&#39;&#39;,s:0,t:&#39;0&#39;)),l:&#39;2&#39;,n:&#39;0&#39;,o:&#39;&#39;,t:&#39;0&#39;)),version:4"" rel=""noreferrer"">Godbolt compiler explorer</a>), it only uses shifts instructions</strong>. clang <code>-O0</code> does compile naively like you thought, even using 64-bit IDIV twice. (When optimizing, compilers do use both outputs of IDIV when the source does a division and modulus with the same operands, if they use IDIV at all)</p>

<p>GCC doesn't have a totally-naive mode; <a href=""https://stackoverflow.com/a/33284629/224132"">it always transforms through GIMPLE, which means some ""optimizations"" can't be disabled</a>.  This includes recognizing division-by-constant and using shifts (power of 2) or <a href=""https://stackoverflow.com/questions/41183935/why-does-gcc-use-multiplication-by-a-strange-number-in-implementing-integer-divi"">a fixed-point multiplicative inverse</a> (non power of 2) to avoid IDIV (see <code>div_by_13</code> in the above godbolt link).</p>

<p><code>gcc -Os</code> (optimize for size) <em>does</em> use IDIV for non-power-of-2 division,
unfortunately even in cases where the multiplicative inverse code is only slightly larger but much slower.</p>

<hr>

<h1>Helping the compiler</h1>

<p>(summary for this case: use <code>uint64_t n</code>)</p>

<p>First of all, it's only interesting to look at optimized compiler output.  (<code>-O3</code>).  <strong><a href=""https://stackoverflow.com/a/32001196/224132""><code>-O0</code> speed is basically meaningless.</a></strong></p>

<p>Look at your asm output (on Godbolt, or see <a href=""https://stackoverflow.com/q/38552116/224132"">How to remove &quot;noise&quot; from GCC/clang assembly output?</a>).  When the compiler doesn't make optimal code in the first place: <strong>Writing your C/C++ source in a way that guides the compiler into making better code is usually the best approach</strong>.  You have to know asm, and know what's efficient, but you apply this knowledge indirectly.  Compilers are also a good source of ideas: sometimes clang will do something cool, and you can hand-hold gcc into doing the same thing: see <a href=""https://stackoverflow.com/a/34410357/224132"">this answer</a> and what I did with the non-unrolled loop in @Veedrac's code below.)</p>

<p>This approach is portable, and in 20 years some future compiler can compile it to whatever is efficient on future hardware (x86 or not), maybe using new ISA extension or auto-vectorizing.  Hand-written x86-64 asm from 15 years ago would usually not be optimally tuned for Skylake.  e.g. compare&amp;branch macro-fusion didn't exist back then.  <strong>What's optimal now for hand-crafted asm for one microarchitecture might not be optimal for other current and future CPUs.</strong>  <a href=""https://stackoverflow.com/questions/40354978/why-is-this-c-code-faster-than-my-hand-written-assembly-for-testing-the-collat#comment67966852_40356449"">Comments on @johnfound's answer</a> discuss major differences between AMD Bulldozer and Intel Haswell, which have a big effect on this code.  But in theory, <code>g++ -O3 -march=bdver3</code> and <code>g++ -O3 -march=skylake</code> will do the right thing.  (Or <code>-march=native</code>.)   Or <code>-mtune=...</code> to just tune, without using instructions that other CPUs might not support.</p>

<p>My feeling is that guiding the compiler to asm that's good for a current CPU you care about shouldn't be a problem for future compilers.  They're hopefully better than current compilers at finding ways to transform code, and can find a way that works for future CPUs.  Regardless, future x86 probably won't be terrible at anything that's good on current x86, and the future compiler will avoid any asm-specific pitfalls while implementing something like the data movement from your C source, if it doesn't see something better.</p>

<p>Hand-written asm is a black-box for the optimizer, so constant-propagation doesn't work when inlining makes an input a compile-time constant.  Other optimizations are also affected.  Read <a href=""https://gcc.gnu.org/wiki/DontUseInlineAsm"" rel=""noreferrer"">https://gcc.gnu.org/wiki/DontUseInlineAsm</a> before using asm.  (And avoid MSVC-style inline asm: inputs/outputs have to go through memory <a href=""https://stackoverflow.com/a/35959859/224132"">which adds overhead</a>.)</p>

<p><strong>In this case</strong>: your <code>n</code> has a signed type, and gcc uses the SAR/SHR/ADD sequence that gives the correct rounding.  (IDIV and arithmetic-shift ""round"" differently for negative inputs, see the <a href=""http://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html"" rel=""noreferrer"">SAR insn set ref manual entry</a>).  (IDK if gcc tried and failed to prove that <code>n</code> can't be negative, or what.  Signed-overflow is undefined behaviour, so it should have been able to.)</p>

<p>You should have used <code>uint64_t n</code>, so it can just SHR.  And so it's portable to systems where <code>long</code> is only 32-bit (e.g. x86-64 Windows).</p>

<hr>

<p>BTW, <strong>gcc's <em>optimized</em> asm output looks pretty good (using <code>unsigned long n</code>)</strong>: the inner loop it inlines into <code>main()</code> does this:</p>

<pre><code> # from gcc5.4 -O3  plus my comments

 # edx= count=1
 # rax= uint64_t n

.L9:                   # do{
    lea    rcx, [rax+1+rax*2]   # rcx = 3*n + 1
    mov    rdi, rax
    shr    rdi         # rdi = n&gt;&gt;1;
    test   al, 1       # set flags based on n%2 (aka n&amp;1)
    mov    rax, rcx
    cmove  rax, rdi    # n= (n%2) ? 3*n+1 : n/2;
    add    edx, 1      # ++count;
    cmp    rax, 1
    jne   .L9          #}while(n!=1)

  cmp/branch to update max and maxi, and then do the next n
</code></pre>

<p>The inner loop is branchless, and the critical path of the loop-carried dependency chain is:</p>

<ul>
<li>3-component LEA (3 cycles)</li>
<li>cmov (2 cycles on Haswell, 1c on Broadwell or later).</li>
</ul>

<p><strong>Total: 5 cycle per iteration, latency bottleneck</strong>.  Out-of-order execution takes care of everything else in parallel with this (in theory: I haven't tested with perf counters to see if it really runs at 5c/iter).</p>

<p>The FLAGS input of <code>cmov</code> (produced by TEST) is faster to produce than the RAX input (from LEA->MOV), so it's not on the critical path.</p>

<p>Similarly, the MOV->SHR that produces CMOV's RDI input is off the critical path, because it's also faster than the LEA.  MOV on IvyBridge and later has zero latency (handled at register-rename time).  (It still takes a uop, and a slot in the pipeline, so it's not free, just zero latency).  The extra MOV in the LEA dep chain is part of the bottleneck on other CPUs.</p>

<p>The cmp/jne is also not part of the critical path: it's not loop-carried, because control dependencies are handled with branch prediction + speculative execution, unlike data dependencies on the critical path.</p>

<hr>

<h1>Beating the compiler</h1>

<p>GCC did a pretty good job here.  It could save one code byte by using <a href=""https://stackoverflow.com/a/36510865/224132""><code>inc edx</code> instead of <code>add edx, 1</code></a>, because nobody cares about P4 and its false-dependencies for partial-flag-modifying instructions.</p>

<p>It could also save all the MOV instructions, and the TEST:  SHR sets CF= the bit shifted out, so we can use <code>cmovc</code> instead of <code>test</code> / <code>cmovz</code>.</p>

<pre><code> ### Hand-optimized version of what gcc does
.L9:                       #do{
    lea     rcx, [rax+1+rax*2] # rcx = 3*n + 1
    shr     rax, 1         # n&gt;&gt;=1;    CF = n&amp;1 = n%2
    cmovc   rax, rcx       # n= (n&amp;1) ? 3*n+1 : n/2;
    inc     edx            # ++count;
    cmp     rax, 1
    jne     .L9            #}while(n!=1)
</code></pre>

<p>See @johnfound's answer for another clever trick: remove the CMP by branching on SHR's flag result as well as using it for CMOV:  zero only if n was 1 (or 0) to start with.  (Fun fact: <a href=""https://stackoverflow.com/a/36510865/224132"">SHR with count != 1 on Nehalem or earlier causes a stall if you read the flag results</a>.  That's how they made it single-uop.  The shift-by-1 special encoding is fine, though.)</p>

<p>Avoiding MOV doesn't help with the latency at all on Haswell (<a href=""https://stackoverflow.com/q/44169342"">Can x86&#39;s MOV really be &quot;free&quot;? Why can&#39;t I reproduce this at all?</a>).  It does help <em>significantly</em> on CPUs like Intel pre-IvB, and AMD Bulldozer-family, where MOV is not zero-latency.  The compiler's wasted MOV instructions do affect the critical path.  BD's complex-LEA and CMOV are both lower latency (2c and 1c respectively), so it's a bigger fraction of the latency.  Also, throughput bottlenecks become an issue, because it only has two integer ALU pipes.  <a href=""https://stackoverflow.com/questions/40354978/why-is-this-c-code-faster-than-assembly/40356449#40356449"">See @johnfound's answer</a>, where he has timing results from an AMD CPU.</p>

<p>Even on Haswell, this version may help a bit by avoiding some occasional delays where a non-critical uop steals an execution port from one on the critical path, delaying execution by 1 cycle.  (This is called a resource conflict).  It also saves a register, which may help when doing multiple <code>n</code> values in parallel in an interleaved loop (see below).</p>

<p><strong>LEA's latency depends on the addressing mode</strong>, on Intel SnB-family CPUs.  3c for 3 components (<code>[base+idx+const]</code>, which takes two separate adds), but only 1c with 2 or fewer components (one add).  Some CPUs (like Core2) do even a 3-component LEA in a single cycle, but SnB-family doesn't.  Worse, <a href=""https://stackoverflow.com/a/40212446/224132"">Intel SnB-family standardizes latencies so there are no 2c uops</a>, otherwise 3-component LEA would be only 2c like Bulldozer.  (3-component LEA is slower on AMD as well, just not by as much).</p>

<p>So <code>lea  rcx, [rax + rax*2]</code> / <code>inc rcx</code> is only 2c latency, faster than <code>lea  rcx, [rax + rax*2 + 1]</code>, on Intel SnB-family CPUs like Haswell.  Break-even on BD, and worse on Core2.  It does cost an extra uop, which normally isn't worth it to save 1c latency, but latency is the major bottleneck here and Haswell has a wide enough pipeline to handle the extra uop throughput.</p>

<p><strong>Neither gcc, icc, nor clang (on godbolt) used SHR's CF output, always using an AND or TEST</strong>.  Silly compilers. :P  They're great pieces of complex machinery, but a clever human can often beat them on small-scale problems.  (Given thousands to millions of times longer to think about it, of course!  Compilers don't use exhaustive algorithms to search for every possible way to do things, because that would take too long when optimizing a lot of inlined code, which is what they do best.  They also don't model of the pipeline in the target microarchitecture; they just use some heuristics.)</p>

<hr>

<p><strong>Simple loop unrolling won't help</strong>; this loop bottlenecks on the latency of a loop-carried dependency chain, not on loop overhead / throughput.  This means it would do well with hyperthreading (or any other kind of SMT), since the CPU has lots of time to interleave instructions from two threads.  This would mean parallelizing the loop in <code>main</code>, but that's fine because each thread can just check a range of <code>n</code> values and produce a pair of integers as a result.</p>

<p><strong>Interleaving by hand within a single thread might be viable, too</strong>.  Maybe compute the sequence for a pair of numbers in parallel, since each one only takes a couple registers, and they can all update the same <code>max</code> / <code>maxi</code>.  This creates more <a href=""https://en.wikipedia.org/wiki/Instruction-level_parallelism"" rel=""noreferrer"">instruction-level parallelism</a>.</p>

<p>The trick is deciding whether to wait until all the <code>n</code> values have reached <code>1</code> before getting another pair of starting <code>n</code> values, or whether to break out and get a new start point for just one that reached the end condition, without touching the registers for the other sequence.  Probably it's best to keep each chain working on useful data, otherwise you'd have to conditionally increment its counter.</p>

<hr>

<p>You could maybe even do this with SSE packed-compare stuff to conditionally increment the counter for vector elements where <code>n</code> hadn't reached <code>1</code> yet.  And then to hide the even longer latency of a SIMD conditional-increment implementation, you'd need to keep more vectors of <code>n</code> values up in the air.  Maybe only worth with 256b vector (4x <code>uint64_t</code>).</p>

<p>I think the best strategy to make detection of a <code>1</code> ""sticky"" is to mask the vector of all-ones that you add to increment the counter.  So after you've seen a <code>1</code> in an element, the increment-vector will have a zero, and +=0 is a no-op.</p>

<h3>Untested idea for manual vectorization</h3>

<pre><code># starting with YMM0 = [ n_d, n_c, n_b, n_a ]  (64-bit elements)
# ymm4 = _mm256_set1_epi64x(1):  increment vector
# ymm5 = all-zeros:  count vector

.inner_loop:
    vpaddq    ymm1, ymm0, xmm0
    vpaddq    ymm1, ymm1, xmm0
    vpaddq    ymm1, ymm1, set1_epi64(1)     # ymm1= 3*n + 1.  Maybe could do this more efficiently?

    vprllq    ymm3, ymm0, 63                # shift bit 1 to the sign bit

    vpsrlq    ymm0, ymm0, 1                 # n /= 2

    # There may be a better way to do this blend, avoiding the bypass delay for an FP blend between integer insns, not sure.  Probably worth it
    vpblendvpd ymm0, ymm0, ymm1, ymm3       # variable blend controlled by the sign bit of each 64-bit element.  I might have the source operands backwards, I always have to look this up.

    # ymm0 = updated n  in each element.

    vpcmpeqq ymm1, ymm0, set1_epi64(1)
    vpandn   ymm4, ymm1, ymm4         # zero out elements of ymm4 where the compare was true

    vpaddq   ymm5, ymm5, ymm4         # count++ in elements where n has never been == 1

    vptest   ymm4, ymm4
    jnz  .inner_loop
    # Fall through when all the n values have reached 1 at some point, and our increment vector is all-zero

    vextracti128 ymm0, ymm5, 1
    vpmaxq .... crap this doesn't exist
    # Actually just delay doing a horizontal max until the very very end.  But you need some way to record max and maxi.
</code></pre>

<p>You can and should implement this with intrinsics, instead of hand-written asm.</p>

<hr>

<h2>Algorithmic / implementation improvement:</h2>

<p>Besides just implementing the same logic with more efficient asm, look for ways to simplify the logic, or avoid redundant work.  e.g. memoize to detect common endings to sequences.  Or even better, look at 8 trailing bits at once (gnasher's answer)</p>

<p>@EOF points out that <code>tzcnt</code> (or <code>bsf</code>) could be used to do multiple <code>n/=2</code> iterations in one step.  That's probably better than SIMD vectorizing, because no SSE or AVX instruction can do that.  It's still compatible with doing multiple scalar <code>n</code>s in parallel in different integer registers, though.</p>

<p>So the loop might look like this:</p>

<pre><code>goto loop_entry;  // C++ structured like the asm, for illustration only
do {
   n = n*3 + 1;
  loop_entry:
   shift = _tzcnt_u64(n);
   n &gt;&gt;= shift;
   count += shift;
} while(n != 1);
</code></pre>

<p>This may do significantly fewer iterations, but variable-count shifts are slow on Intel SnB-family CPUs without BMI2.  3 uops, 2c latency.  (They have an input dependency on the FLAGS because count=0 means the flags are unmodified.  They handle this as a data dependency, and take multiple uops because a uop can only have 2 inputs (pre-HSW/BDW anyway)).  This is the kind that people complaining about x86's crazy-CISC design are referring to.  It makes x86 CPUs slower than they would be if the ISA was designed from scratch today, even in a mostly-similar way.  (i.e. this is part of the ""x86 tax"" that costs speed / power.)  SHRX/SHLX/SARX (BMI2) are a big win (1 uop / 1c latency).</p>

<p>It also puts tzcnt (3c on Haswell and later) on the critical path, so it significantly lengthens the total latency of the loop-carried dependency chain.  It does remove any need for a CMOV, or for preparing a register holding <code>n&gt;&gt;1</code>, though.  <strong>@Veedrac's answer overcomes all this by deferring the tzcnt/shift for multiple iterations, which is highly effective (see below).</strong></p>

<p>We can safely use <a href=""http://www.felixcloutier.com/x86/BSF.html"" rel=""noreferrer"">BSF</a> or <a href=""http://www.felixcloutier.com/x86/TZCNT.html"" rel=""noreferrer"">TZCNT</a> interchangeably, because <code>n</code> can never be zero at that point.  TZCNT's machine-code decodes as BSF on CPUs that don't support BMI1.  (Meaningless prefixes are ignored, so REP BSF runs as BSF).</p>

<p>TZCNT performs much better than BSF on AMD CPUs that support it,  so it can be a good idea to use <code>REP BSF</code>, even if you don't care about setting ZF if the input is zero rather than the output.  Some compilers do this when you use <code>__builtin_ctzll</code> even with <code>-mno-bmi</code>.  </p>

<p>They perform the same on Intel CPUs, so just save the byte if that's all that matters.  TZCNT on Intel (pre-Skylake) still has a false-dependency on the supposedly write-only output operand, just like BSF, to support the undocumented behaviour that BSF with input = 0 leaves its destination unmodified.  So you need to work around that unless optimizing only for Skylake, so there's nothing to gain from the extra REP byte.  (Intel often goes above and beyond what the x86 ISA manual requires, to avoid breaking widely-used code that depends on something it shouldn't, or that is retroactively disallowed.  e.g. <a href=""http://blog.stuffedcow.net/2015/08/pagewalk-coherence/"" rel=""noreferrer"">Windows 9x's assumes no speculative prefetching of TLB entries</a>, which was safe when the code was written, <a href=""https://stackoverflow.com/questions/17395557/observing-stale-instruction-fetching-on-x86-with-self-modifying-code#comment68191467_18388700"">before Intel updated the TLB management rules</a>.)</p>

<p>Anyway, LZCNT/TZCNT on Haswell have the same false dep as POPCNT: see <a href=""https://stackoverflow.com/questions/25078285/replacing-a-32-bit-loop-count-variable-with-64-bit-introduces-crazy-performance"">this Q&amp;A</a>.  This is why in gcc's asm output for @Veedrac's code, you see it <a href=""https://stackoverflow.com/a/33668295/224132"">breaking the dep chain with xor-zeroing</a> on the register it's about to use as TZCNT's destination, when it doesn't use dst=src.  Since TZCNT/LZCNT/POPCNT never leave their destination undefined or unmodified, this false dependency on the output on Intel CPUs is purely a performance bug / limitation.  Presumably it's worth some transistors / power to have them behave like other uops that go to the same execution unit.  The only software-visible upside is in the interaction with another microarchitectural limitation: <a href=""https://stackoverflow.com/questions/26046634/micro-fusion-and-addressing-modes"">they can micro-fuse a memory operand with an indexed addressing mode</a> on Haswell, but on Skylake where Intel removed the false dependency for LZCNT/TZCNT they ""un-laminate"" indexed addressing modes while POPCNT can still micro-fuse any addr mode.</p>

<hr>

<h1>Improvements to ideas / code from other answers:</h1>

<p><strong>@hidefromkgb's answer</strong> has a nice observation that you're guaranteed to be able to do one right shift after a 3n+1.  You can compute this more even more efficiently than just leaving out the checks between steps.  The asm implementation in that answer is broken, though (it depends on OF, which is undefined after SHRD with a count > 1), and slow: <code>ROR rdi,2</code> is faster than <code>SHRD rdi,rdi,2</code>, and using two CMOV instructions on the critical path is slower than an extra TEST that can run in parallel.</p>

<p>I put tidied / improved C (which guides the compiler to produce better asm), and tested+working faster asm (in comments below the C) up on Godbolt: see the link in <a href=""https://stackoverflow.com/questions/40354978/why-is-this-c-code-faster-than-my-hand-written-assembly-for-testing-the-collat/40367384#40367384"">@hidefromkgb's answer</a>.  (This answer hit the 30k char limit from the large Godbolt URLs, but <a href=""https://meta.stackoverflow.com/questions/319549/how-are-we-supposed-to-post-godbolt-links-now-that-url-shortening-is-blocked/319594#319594"">shortlinks can rot</a> and were too long for goo.gl anyway.)</p>

<p>Also improved the output-printing to convert to a string and make one <code>write()</code> instead of writing one char at a time. This minimizes impact on timing the whole program with <code>perf stat ./collatz</code> (to record performance counters), and I de-obfuscated some of the non-critical asm.</p>

<hr>

<p><strong>@Veedrac's code</strong></p>

<p>I got a very small speedup from right-shifting as much as we <em>know</em> needs doing, and checking to continue the loop.  From 7.5s for limit=1e8 down to 7.275s, on Core2Duo (Merom), with an unroll factor of 16.</p>

<p>code + comments <a href=""http://gcc.godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZTUAHAvVAOwGdK0AbVAV2J4OmAIIcAtiADkABmmk0Exnh6YA8mwDCCAIZtgmGfICUpDgOLIj0gPS2A1BIx4AZnkzoHAN0zEOrGwOqK4OAGqYnsS6yGDSHA5oWCAApLKi9omCxJhsBD5%2BAeyJqMqqmAkA7pg8PA6VhAgOwMjIaRmOAMoAMuoA6g5a6gAi2A59AJIAKgASg92iAHIA4g4QmAAeBNEOAFIAsgAKCXhBBAiYDliufg58TCbt7ZnXt/eMV6gVwWyXAEZ4YAOITABAEAC0HAQbnyjFuwGIAkYpAc%2Bi87B4AE87phdL4qhcgsg%2BCIHERgr5iK4%2BJUAHRPdKZXQ8Cwo86XAIGNSQgiYD7vBz8EQJAAC0OuiIkAGtgH84glecgEGw8ABHfiYBmiFIAJgAzKdifwsA4UnqtMgOAR8HkzdgnvrDTxjZczVpWFacroJHatULTkC2N6KowYhzrWaAEJaq26FjIQWnAgANgALAB9fKc4BqND8PKmvXDByyKMOByZPMFkJkoSMBUIRH8UFki4ONjscGvYg5Lzvdqx%2BOJvJpzMOWOYzzp07pgVm4ulvWR8uZAVoNj4FjFSq6BXEDWo/Lshy5dGhY9YHi6SfoSHQ1z5fvpQd4BPrq0OP6oVB1U6e/gSLk%2BTzg4rjMiIUYxgQcavsOBB6jqY4iOquTWBA/BJghY4bCYpoAOzRukDoGq4G6YKEACqiwAErqN03TpkMVFTMR1ynJcVG0fRjHqMxDi0MmK6OPmiK1J%2B2ICQ4wigbuvJWiADh4bS%2BoJHCxD8ZgAAcTi6KcArQK0ACsykoloJCYDqwz8Kgaz7H4pS4TqtKpssMwAF6PER%2Bqnm47TluW775BheRYfkCJIumARua6RYOJxdEMUxiwsUufn%2BZkyyIpUCR/NiugycgRDqbQsi2HqawgXwwA6hAJVlbhKTYDqKSaQAnC12m0LSeGpp%2BhAcLhuJKsCAgbvS6T%2BRWjgTAQ8rjroNxSaEhCJPozRZSelLYoQfgwdujQCPkqCUtSqANAY42iJNgVwaOR0nTS6YAgQCQgcm5XgutEVRZcABU/E9RW/GyIuhFXf5N3BSmGb3X4p2VJFeDRYWxa0BR9GFloboUnDj3PRwkETeljj6NijBnbcNY6lJCT5VaTAlBuhCBApGJ5eOAZqH1WaYAQKIWPUlzIGtzI0lJ%2BRJjZx5PtqRPllDd3tijDgbIT4Py5hiH5FWwGxaDWqTZU0JcxA2wag1BFpZNUOhQ4UrK6DQmJFeBg6VK3yVCQpJJJcDTnA4abgs9dsOCAthW8TDjdLivjjveLCu%2BgZ1BK4JB3HGfiXZN5ZJ/hYNpK1GsjjD3NqwXRfwVrduGg7ZZTQ4Fw8GpoFpyJP48AG9SNFJWB5K%2BzIlCo3w1sefx8MgUparqepsb8DjTNg1HppGvRaAA0hADWGVjRGyIXFUEdzytBLqgngmwZa2P9Y8BA4v3h3vBfl9nKTbwy%2B/%2BW4azB/OIFsBby4damh1NGWKUpDRlj%2BF6SeS58LFmrmwNoIDdSgOXK/HessP7lhPrFII/1yooNLqlPCwxcL12WIsCigxxzQV5IBPI4JNiMByBwIoF9d77xeOwOI%2BRU7EEMEePQgjLhrjWmBMSh1Wz/FQAQIgEgURokFjQ1QdRfieDJDZfgjB0AZxKPmYROQ2Tfkus8Rw2cW7EAgEmKS85ZCFmXHgN04UtGI2RmWFBKC8BkMrKUFQah/CgX4LUTE4I25iXOMIFEfx%2BDaxdkCJO3wVp/F0OgLEpjzHmIXkvFe6h16bzrpkYAMibKHT8LOb8jB0ynnLH%2BXkKTgihCgbiSeHDyxZOXqvDejxUqtPnlMReHTcldLLnvNp/TsmdPyT0zBYyBk5Lyd0/OjpKI0QSjxPidoHCpnfrMiZQypn51GX0uZkzFk7OOXshZIz97tPmcM6Z08fKuGIl/eK3EkpTELGMTS5zbmnOubswZVyHlHL%2Bfss5vSwXAqWXqJ5LyVlcUSrxZKXz%2BLNUheMoF9zDk3MxXcg5vy8X/JBbik54Ky7eSZs83pL5kDpl3CIYgBAIBvKRRs80IEBIol1DqMJdQgFEBstCUEPKIXq3MZkWl9LWF%2BGZc4ypP0UYgXAYg7lOpeVsFEvy0a%2BQEkcDYDwnSBBhqBX0AQUVAKlprBVQmMAYAQLytcZgbxjhApMPUnqg10h8i5F0GPcMME6UMtlaHCA5zrp%2BHUm6bGPK%2BV6ILJ6w1Eg4zDXlRzaK6CL7qpGTMpWvo9T2lio6n6lqgEeNitTf6xakaalgfXKYIx1AKWJPoIEcJWF4AkDWhs0k/ZNE2NsfKBxjhSTOG2GWz83BWM4GbehwEdTJlPnmjlsVjq4zOk6zyubJoTinDOfsyDkHTPMSkEh9RjaYAgDgrGq6Hobp%2BmKg22dMjDBqNedRmBfBBCgfoJUFQs7ZxtlXKEMJlbpiehhHgCd0yFTcrUK9YrzE4MLYW4sIGHxq3MWWo9aH44FJJugG0QJ7bSSTnPU4UjPzQKnl5Ei/F674A4H6rmx4OyhM1e3O4FSzQADEI6TRfTZFa7Bwx8kPKiMknbfaEko2PVAE8fC6CEGapwgIwQ4ypDSADhsL1rGQxp%2BGm687nKnbU/cc7cLZlzDqjxR6YVf1oAxtwNwcgFk9BnYAHgEh8NbNJGWV8/LDBshAPUWbIy0G6ShxzacqBCnyGtC%2BBb83DC6n5ELYWIv5uwI53%2BsUr1ZYi8A5cJ8QH0bWJ0SIDc8ASlKDKOU8RUScGqGQc9r4mjMh3JiBIeqHDUytHyE4M7cRnno2nJyW6/IzDROCBAP4vDHiUH424ks3ad13BIT8u51HFBbQYOaKprBOF5rN9AqQJpCkuPlLQ%2Bx1BhA0YzTcgRRbYmioiCTOQgSzZ4ERvTKCIsok894TufAXoNPnt0Q4jWvB4lQNVzuepwSLZEwWbo2AroUa9QkZAQh4wD1DOcA2u3QDA2svWCxDgZidD6LSeNBAQB6mQBAVHohcJsBAKmBMTO0e1UeHhLQSxSEoOu7diAOpHggNEMMYYKCbthD8i0ZAClaC8qYN5tOlPqcQx1fTxnzPWfs858znnp7%2BeLEFyA4XYRRfi5XtzzLE1IzDD6LYToa9ugKQZ5%2BTAwsLuDFl8rWgpOUS0DaBNKY0ITg5QqBCYWpIry8kQZiFEHZgQVEsId9c1JXwvRpxT6blQccJ9RJIeoAhvuClJJ0GY1FwR2i0Dx8nluocOElxg%2B%2B5yFYlzYIwHLuCiv8UtZ3scbBIqNmPgVwfmsxw0h/nlrNyZMt1olY4ZNKqgQRISAhIOK01DzZsp7fwQtfHlHUodRgMTR0SeYZ%2B1gQoCj%2BECFEi/0l3Bzw7HSDvSZFYEGUMrGfK1eN2we9Q4SxLUcFiwR8oQo1Ssf9GBS0dUitOV%2B9/9zVpkAsJo%2BghF55WwBBQR8hPYgkvA/hLgmAWBk0eAUR9FVBnZW0rhqsvdZE/B5dWg0VSc1d1INcacdYdcucWdsEQBDIExZcUEq9qIUEjc9QbdLdrcZdbt%2BMMkh8fUv1x8ksC1aBMMMlrYv8S4MB0AqllCQJ8tVDssGpSsStlx1Dj1ND/JFCuNKhZ9ix8sF1F8wZrD/JwC7DZ8G9dD9DcgQDP1cgNC3DsNQFUZ%2B90Ip8CATAUD8MaDXZSMAI/hm8etA5g4UkvBCFXtUBGEthqkRBQxoheQsQUQ%2B0JN/cmNAJzBgxWw4x548gahBhDgKJutuFvUTwO4u0gxeR2h29aMagv5SxGQV9sQSBARTgB4qpXwSiDoL9YDFN/Bc8JB%2BBhoD9SR1t5DroEDy0wjCEnCF9ENrCPC9jCtACjCotTDit%2B9HMFJEsosKVYUWRNQhiOYuRMAeQxNdDgh1IAi2AUQIgogYg5pRjPMgweB0kNdm04lbAFcHBBCo5udJD%2B9pCxd%2B9ZcIBZAJsjkjiStBITi9QG8r074HACFStCsFJCSst%2BJH0jkQjOV7i4U5Z/JT1pc%2BiqUnYrMRFuNd5xUnY%2Bhvw7V5Cv4KSV1UYAETNQhhStAqTw0IZI1MYY11UPC7FXBJQDMxZSiNhlYeV5TzQVYdSpS4hM1DSSVywcgCBBAiQbMrDJpmSI5mSnYjZyhTZ9xnUngSEp5HREFnQTQ3QrRUk8A/haQEBfR0hrFk1Thp14t%2BFkAUQlQlNfpfolNgBvAxTGSgMxxk1NSQJ9Y0zIidINhHFrS4JbYOiADYpaAtIc1rZOBARfgvAchGBSzdZUYgirUIAky2hVDhgxcdkGymzlY4xYd2z%2BFvBX5wtX5Bciy%2BF0IazgA6zU84CixHYGzMYFz%2Bz3FD1IwGzeccUXicxvcti9YAVMgABNAQVaIIemD4Wops2wamYgn3UkIaJoEeWbUkPQAmVpJkRTZ0S4JOfgf1cWEo6EYaXsZY74ckQgExUZHzCIkKKuPAP/TtQgMsRCzZfsxwZqWBcEcELxYzXpLQ%2BCpCZWZCDURBS9LxS1SaIU16AtfM1MzBZ%2BfMki65JizMtC2KQs3cl%2Bd01pW0xk/i2WK6P0kAFASRaNXU9i/U4BambUiSqUzMzDUzGdczICLdLDcSldKUnldBLMTmN4tcK06XdVaSjkstLSmS3S3dLwCjcMtgfsIsOSiy6y6cEfBy1BPyPMXWG9A06QI0vyh5Xi0QaQMwHgGQQyBQNnaQWgBQVAGQLGTc8cdPV0fUGK0gOnOQEKswKUenJSVMVqTSPCVqVMNMAqvUWgPCPCUgMK6QVMBQKQEqWQUgKK%2BQBgGQBQLgJqjK0wUgOAWAJARbE/cgbgY/fxFAOJPUVqJq9wKDQoSgP4YwBQJQOdTQLERa0gfAHIQqPAfEdapMGoRaswUgwILgaQHkdAecOc/gWzcLRzcEYYVldZZKecSScEPoUWBwN6gdHYcEVwSkL8EQcEdbT69QD6ZNKwYMosNAHIHUEK6q8KyK9auKvy1Kruf2DYTSZMcENMOIoEPUWkVqWkVq7qrK0gHKnUTSZyQyVMWgVqEqEqZMVqAqnUeG2qxGzKtq6QDqkALqw63qmARAMSsofxYaiAQasa4AZMFmma3kfwea9a5aoCVazEdaza73FgXajm/amqnq469gU686y6tga6zc2gXqN6j6r6rYH6v6vwAGt44G8EUGz6iQHgNyZAAscECQP4LtamL2n2xCr28034ecDgKUTEK8d2OGmqiK5qpGmQaeRzDUzG7G3qGE5MZSBQEmkwbK%2BnVMIm1MPCWQM2vUSakqzSVMBdVmuq0gBqkGOOjm5G7m3mzKnO1m2Ghu1qpu9Kw6swSkNhdnIAA"" rel=""noreferrer"">on Godbolt</a>.  Don't use this version with clang; it does something silly with the defer-loop.  Using a tmp counter <code>k</code> and then adding it to <code>count</code> later changes what clang does, but that <em>slightly</em> hurts gcc.</p>

<p>See discussion in comments: Veedrac's code is <em>excellent</em> on CPUs with BMI1 (i.e. not Celeron/Pentium)</p>
","40355466"
"2D array values C++","124346","","<p>I wanted to declare a 2D array and assign values to it, without running a for loop.</p>

<p>I thought I could used the following idea </p>

<pre><code>int array[5] = {1,2,3,4,5};
</code></pre>

<p>Which works fine to initialize the 2D array as well. But apparently my compiler doesn't like this.</p>

<pre><code>/*
 1   8  12  20  25
 5   9  13  24  26
*/

#include &lt;iostream.h&gt;

int main()
{
    int arr[2][5] = {0};   // This actually initializes everything to 0.
    arr [1] [] = {1,8,12,20,25}; // Line 11
    arr [2] [] = {5,9,13,24,26};
    return 0;
}
</code></pre>

<blockquote>
  <p>J:\CPP\Grid>bcc32.exe Grid.cpp</p>
  
  <p>Borland C++ 5.5.1 for Win32 Copyright (c) 1993, 2000 Borland</p>
  
  <p>Grid.cpp:</p>
  
  <p>Error E2188 Grid.cpp 11: Expression syntax in function main()</p>
  
  <p>Error E2188 Grid.cpp 12: Expression syntax in function main()</p>
  
  <p>Warning W8004 Grid.cpp 14: 'arr' is assigned a value that is never used in funct
  ion main()</p>
  
  <p><strong>* 2 errors in Compile *</strong></p>
</blockquote>

<p>Please help as to what is the right way to initialize the 2d array with my set of values.</p>
","<p>Like this:</p>

<pre><code>int main()
{
    int arr[2][5] =
    {
        {1,8,12,20,25},
        {5,9,13,24,26}
    };
}
</code></pre>

<p>This should be covered by your C++ textbook: which one are you using?</p>

<p>Anyway, better, consider using <code>std::vector</code> or some ready-made matrix class e.g. from Boost.</p>
","4981220"
"Is Python faster and lighter than C++?","124339","","<p>I've always thought that Python's advantages are code readibility and development speed, but time and memory usage were not as good as those of C++.</p>

<p><a href=""http://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=python3&amp;lang2=gpp"" rel=""noreferrer"">These stats</a> struck me really hard.</p>

<p>What does your experience tell you about Python vs C++ time and memory usage?</p>
","<p>I think you're reading those stats incorrectly. They show that Python is up to about 400 times <em>slower</em> than C++ and with the exception of a single case, Python is more of a memory hog. When it comes to source size though, Python wins flat out.</p>

<p>My experiences with Python show the same definite trend that Python is on the order of between 10 and 100 times slower than C++ when doing any serious number crunching.  There are many reasons for this, the major ones being: a) Python is interpreted, while C++ is compiled; b) Python has no primitives, everything including the builtin types (int, float, etc.) are objects; c) a Python list can hold objects of different type, so each entry has to store additional data about its type. These all severely hinder both runtime and memory consumption.</p>

<p>This is no reason to ignore Python though. A lot of software doesn't require much time or memory even with the 100 time slowness factor. Development cost is where Python wins with the simple and concise style. This improvement on development cost often outweighs the cost of additional cpu and memory resources. When it doesn't, however, then C++ wins.</p>
","801671"
"Initialize a vector array of strings","124265","","<p>Would it be possible to initialize a vector array of strings.</p>

<p>for example:</p>

<p><code>static std::vector&lt;std::string&gt; v;</code> //declared as a class member</p>

<p>I used <code>static</code> just to initialize and fill it with strings. Or should i just fill it in constructor if it can't be initialized like we do regular arrays.</p>
","<p>Sort of:</p>

<pre><code>class some_class {
    static std::vector&lt;std::string&gt; v; // declaration
};

const char *vinit[] = {""one"", ""two"", ""three""};

std::vector&lt;std::string&gt; some_class::v(vinit, end(vinit)); // definition
</code></pre>

<p><code>end</code> is just so I don't have to write <code>vinit+3</code> and keep it up to date if the length changes later. Define it as:</p>

<pre><code>template&lt;typename T, size_t N&gt;
T * end(T (&amp;ra)[N]) {
    return ra + N;
}
</code></pre>
","4268956"
"Convert float to std::string in C++","123939","","<p>I have a float value that needs to be put into a <code>std::string</code>. How do I convert from float to string?</p>

<pre><code>float val = 2.5;
std::string my_val = val; // error here
</code></pre>
","<p>Unless you're worried about performance, use <a href=""http://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt"" rel=""noreferrer"">string streams</a>:</p>

<pre><code>std::ostringstream ss;
ss &lt;&lt; myFloat;
std::string s(ss.str());
</code></pre>

<p>If you're okay with Boost, <a href=""http://www.boost.org/doc/libs/1_41_0/libs/conversion/lexical_cast.htm"" rel=""noreferrer"">lexical_cast&lt;></a> is a convenient alternative:</p>

<pre><code>std::string s = boost::lexical_cast&lt;std::string&gt;(myFloat);
</code></pre>

<p>Efficient alternatives are e.g. <a href=""http://www.fastformat.org/"" rel=""noreferrer"">FastFormat</a> or simply the C-style functions.</p>
","2125888"
"Why can't Visual Studio find my DLL?","123706","","<p>In Visual Studio 2010, under <code>VC++ Directories &gt; Executable Directories</code>, I have specified the path to <code>glew32d.dll</code>. However, when I run the executable, it still complains.</p>

<p>On the other hand, if I copy the DLL into the local folder and run the executable then, it doesn't complain.</p>

<p>Can someone please tell me how to fix this? Also, why is Visual Studio not recognizing that path?</p>

<p><strong>Update</strong>
Scenario: I currently use a template project which I use as a starter code for a lot of my projects. This template depends on glew32d.dll. I usually store all dependent dlls in a common bin folder. I was hoping to reference this folder and Visual studio could read the dlls from there, instead of me having to copy the dlls everytime. What would be a good way to handle this?</p>
","<p>Specifying the path to the DLL file in your project's settings does not ensure that your application will<br>
find the DLL at run-time. You only told Visual Studio how to find the files it needs. That has nothing<br>
to do with how the program finds what it needs, once built.</p>

<p>Placing the DLL file into the same folder as the executable is by far the simplest solution. That's the <a href=""http://msdn.microsoft.com/en-us/library/ms682586.aspx"" rel=""noreferrer"">default search path</a> for dependencies, so you won't need to do anything special if you go that route.<br>
To avoid having to do this manually each time, you can create a Post-Build Event for your project that<br>
will automatically copy the DLL into the appropriate directory after a build completes.</p>

<p>Alternatively, you could deploy the DLL to the Windows <a href=""http://msdn.microsoft.com/en-us/library/aa376307.aspx"" rel=""noreferrer"">side-by-side cache</a>, and add a manifest to your application that specifies the location.</p>
","4953976"
"error: ‘NULL’ was not declared in this scope","123558","","<p>I get this message when compiling C++ on gcc 4.3</p>

<pre><code>error: ‘NULL’ was not declared in this scope
</code></pre>

<p>It appears and disappears and I don't know why. Why?</p>

<p>Thanks.</p>
","<p><code>NULL</code> is not a keyword. It's an identifier defined in some standard headers. You can include </p>

<pre><code>#include &lt;cstddef&gt;
</code></pre>

<p>To have it in scope, including some other basics, like <code>std::size_t</code>.</p>
","462203"
"Difference between static, auto, global and local variable in the context of c and c++","123190","","<p>I’ve a bit confusion about static, auto, global and local variables. Somewhere I read that a static variable can only be accessed within the function, but they still exist (remain in the memory) after the function returns. However, I also know that a local variable also does the same, so what is the difference?</p>
","<p>There are two separate concepts here:</p>

<ul>
<li><em>scope</em>, which determines where a name can be accessed, and</li>
<li><em>storage duration</em>, which determines when a variable is created and destroyed.</li>
</ul>

<p><em>Local</em> variables (pedantically, variables with <em>block scope</em>) are only accessible within the block of code in which they are declared:</p>

<pre><code>void f() {
    int i;
    i = 1; // OK: in scope
}
void g() {
    i = 2; // Error: not in scope
}
</code></pre>

<p><em>Global</em> variables (pedantically, variables with <em>file scope</em> (in C) or <em>namespace scope</em> (in C++)) are accessible at any point after their declaration:</p>

<pre><code>int i;
void f() {
    i = 1; // OK: in scope
}
void g() {
    i = 2; // OK: still in scope
}
</code></pre>

<p>(In C++, the situation is more complicated since namespaces can be closed and reopened, and scopes other than the current one can be accessed, and names can also have class scope. But that's getting very off-topic.)</p>

<p><em>Automatic</em> variables (pedantically, variables with <em>automatic storage duration</em>) are local variables whose lifetime ends when execution leaves their scope, and are recreated when the scope is reentered.</p>

<pre><code>for (int i = 0; i &lt; 5; ++i) {
    int n = 0;
    printf(""%d "", ++n);  // prints 1 1 1 1 1  - the previous value is lost
}
</code></pre>

<p><em>Static</em> variables (pedantically, variables with <em>static storage duration</em>) have a lifetime that lasts until the end of the program. If they are local variables, then their value persists when execution leaves their scope.</p>

<pre><code>for (int i = 0; i &lt; 5; ++i) {
    static int n = 0;
    printf(""%d "", ++n);  // prints 1 2 3 4 5  - the value persists
}
</code></pre>

<p>Note that the <code>static</code> keyword has various meanings apart from static storage duration. On a global variable or function, it gives it <em>internal linkage</em> so that it's not accessible from other translation units; on a C++ class member, it means there's one instance per class rather than one per object. Also, in C++ the <code>auto</code> keyword no longer means automatic storage duration; it now means automatic type, deduced from the variable's initialiser.</p>
","13415659"
"make sounds (beep) with c++","123143","","<p>How to make the hardware beep sound with c++?</p>

<p>Thanks</p>
","<pre><code>cout &lt;&lt; '\a';
</code></pre>

<p><a href=""http://bytes.com/topic/c/answers/127539-making-computer-speaker-beep"">Source</a></p>

<p>:)</p>
","4060616"
"Find OpenCV Version Installed on Ubuntu","123079","","<p>I would like to find out what version of OpenCV is installed on my computer (i am running Ubuntu 10.04). Is there a simple way to check it if ? If not then can i find out the directories where files (samples, etc) are installed ? </p>

<p>I am trying to run some code that i have already tested on another computer with OpenCV 2.3 installed and i get many errors.</p>
","<p>You can look at the headers or libs installed. pkg-config can tell you where they are:</p>

<pre><code>pkg-config --cflags opencv
pkg-config --libs opencv
</code></pre>

<p>Alternatively you can write a simple program and print the following defs:</p>

<pre><code>CV_MAJOR_VERSION
CV_MINOR_VERSION
</code></pre>

<p>A similar question has been also asked <a href=""https://stackoverflow.com/questions/2422514/how-to-check-for-opencv"">here</a>: </p>
","8804690"
"Two decimal places using printf( )","123037","","<p>I'm trying to write a number to two decimal places using <code>printf()</code> as follows:</p>

<pre><code>#include &lt;cstdio&gt;
int main()
{
  printf(""When this number: %d is assigned to 2 dp, it will be: 2%f "", 94.9456, 94.9456);
  return 0;
}
</code></pre>

<p>When I run the program, I get the following output:</p>

<pre class=""lang-none prettyprint-override""><code># ./printf
When this number: -1243822529 is assigned to 2 db, it will be: 2-0.000000
</code></pre>

<p>Why is that?</p>

<p>Thanks.</p>
","<p>What you want is <code>%.2f</code>, not <code>2%f</code>.</p>

<p>Also, you might want to replace your <code>%d</code> with a <code>%f</code> ;)</p>

<pre><code>#include &lt;cstdio&gt;
int main()
{
printf(""When this number: %f is assigned to 2 dp, it will be: %.2f "", 94.9456, 94.9456);
return 0;
}
</code></pre>

<p>This will output:</p>

<blockquote>
  <p>When this number: 94.945600 is assigned to 2 dp, it will be: 94.95 </p>
</blockquote>

<p>See here for a full description of the printf formatting options: <a href=""http://en.cppreference.com/w/c/io/printf"" rel=""nofollow noreferrer""><code>printf</code></a></p>
","4784359"
"Creating an instance of class","122590","","<p>What's the difference between lines 1 , 2 , 3 , 4?</p>

<p>When do I use each?</p>

<p>Why line 3 prints the <code>constructor Foo</code> and line 7 returns an error and line 8 doesn't?</p>

<pre><code>#include &lt;iostream&gt;     
using namespace std;

class Foo
 {
   public:
   Foo ( )
   {
      cout &lt;&lt; ""constructor Foo\n"";
   }               
};

class Bar
 {
   public:
   Bar ( Foo )
   {
      cout &lt;&lt; ""constructor Bar\n"";
   }
};

int main()
{
   /* 1 */ Foo* foo1 = new Foo ();
   /* 2 */ Foo* foo2 = new Foo;
   /* 3 */ Foo foo3;
   /* 4 */ Foo foo4 = Foo::Foo();

   /* 5 */ Bar* bar1 = new Bar ( *new Foo() );
   /* 6 */ Bar* bar2 = new Bar ( *new Foo );
   /* 7 */ Bar* bar3 = new Bar ( Foo foo5 );
   /* 8 */ Bar* bar3 = new Bar ( Foo::Foo() );

   return 1;
}
</code></pre>
","<pre><code>   /* 1 */ Foo* foo1 = new Foo ();
</code></pre>

<p>Creates an object of type <code>Foo</code> in dynamic memory. <code>foo1</code> points to it. Normally, you wouldn't use raw pointers in C++, but rather a smart pointer. If <code>Foo</code> was a POD-type, this would perform value-initialization (it doesn't apply here).</p>

<pre><code>   /* 2 */ Foo* foo2 = new Foo;
</code></pre>

<p>Identical to before, because <code>Foo</code> is not a POD type.</p>

<pre><code>   /* 3 */ Foo foo3;
</code></pre>

<p>Creates a <code>Foo</code> object called <code>foo3</code> in automatic storage.</p>

<pre><code>   /* 4 */ Foo foo4 = Foo::Foo();
</code></pre>

<p>Uses copy-initialization to create a <code>Foo</code> object called <code>foo4</code> in automatic storage.</p>

<pre><code>   /* 5 */ Bar* bar1 = new Bar ( *new Foo() );
</code></pre>

<p>Uses <code>Bar</code>'s conversion constructor to create an object of type <code>Bar</code> in dynamic storage. <code>bar1</code> is a pointer to it.</p>

<pre><code>   /* 6 */ Bar* bar2 = new Bar ( *new Foo );
</code></pre>

<p>Same as before.</p>

<pre><code>   /* 7 */ Bar* bar3 = new Bar ( Foo foo5 );
</code></pre>

<p>This is just invalid syntax. You can't declare a variable there.</p>

<pre><code>   /* 8 */ Bar* bar3 = new Bar ( Foo::Foo() );
</code></pre>

<p>Would work and work by the same principle to 5 and 6 if <code>bar3</code> wasn't declared on in 7.</p>

<p><strong>5 &amp; 6</strong> contain memory leaks.</p>

<p>Syntax like <code>new Bar ( Foo::Foo() );</code> is not usual. It's usually <code>new Bar ( (Foo()) );</code> - <del>extra parenthesis account for most-vexing parse.</del> (corrected)</p>
","12248783"
"Pointer to a Vector","122515","","<p>I have a pointer to a vector. Now, how can I read the contents of the vector through pointer? I know this is a basic question, but Im unable to find an answer for the same.(C++)</p>
","<p>There are many solutions, here's a few I've come up with:</p>

<pre><code>int main(int nArgs, char ** vArgs)
{
    vector&lt;int&gt; *v = new vector&lt;int&gt;(10);
    v-&gt;at(2); //Retrieve using pointer to member
    v-&gt;operator[](2); //Retrieve using pointer to operator member
    v-&gt;size(); //Retrieve size
    vector&lt;int&gt; &amp;vr = *v; //Create a reference
    vr[2]; //Normal access through reference
    delete &amp;vr; //Delete the reference. You could do the same with
                //a pointer (but not both!)
}
</code></pre>
","6946261"
"How does delete[] know it's an array?","122163","","<p>Alright, I think we all agree that what happens with the following code is undefined, depending on what is passed,</p>

<pre><code>void deleteForMe(int* pointer)
{
     delete[] pointer;
}
</code></pre>

<p>The pointer could be all sorts of different things, and so performing an unconditional <code>delete[]</code> on it is undefined. However, let's assume that we are indeed passing an array pointer,</p>

<pre><code>int main()
{
     int* arr = new int[5];
     deleteForMe(arr);
     return 0;
}
</code></pre>

<p>My question is, in this case where the pointer <strong>is</strong> an array, who is it that knows this? I mean, from the language/compiler's point of view, it has no idea whether or not <code>arr</code> is an array pointer versus a pointer to a single int. Heck, it doesn't even know whether <code>arr</code> was dynamically created. Yet, if I do the following instead,</p>

<pre><code>int main()
{
     int* num = new int(1);
     deleteForMe(num);
     return 0;
}
</code></pre>

<p>The OS is smart enough to only delete one int and not go on some type of 'killing spree' by deleting the rest of the memory beyond that point (contrast that with <code>strlen</code> and a non-<code>\0</code>-terminated string -- it will keep going until it hits 0).</p>

<p>So whose job is it to remember these things? Does the OS keep some type of record in the background? (I mean, I realise that I started this post by saying that what happens is undefined, but the fact is, the 'killing spree' scenario doesn't happen, so therefore in the practical world <em>someone</em> is remembering.)</p>
","<p>The compiler doesn't know it's an array, it's trusting the programmer.  Deleting a pointer to a single <code>int</code> with <code>delete []</code> would result in undefined behavior.  Your second <code>main()</code> example is unsafe, even if it doesn't immediately crash.</p>

<p>The compiler does have to keep track of how many objects need to be deleted somehow.  It may do this by over-allocating enough to store the array size.  For more details, see the <a href=""https://isocpp.org/wiki/faq/freestore-mgmt#num-elems-in-new-array"" rel=""noreferrer"">C++ Super FAQ</a>.</p>
","703706"
"C++ equivalent of StringBuffer/StringBuilder?","122030","","<p>Is there a C++ Standard Template Library class that provides efficient string concatenation functionality, similar to C#'s <a href=""http://msdn.microsoft.com/en-us/library/system.text.stringbuilder.aspx"" rel=""noreferrer"">StringBuilder</a> or Java's <a href=""http://java.sun.com/j2se/1.5.0/docs/api/java/lang/StringBuffer.html"" rel=""noreferrer"">StringBuffer</a>?</p>
","<p><strong>NOTE this answer has received some attention recently. I am not advocating this as a solution (it is a solution I have seen in the past, before the STL). It is an interesting approach and should only be applied over <code>std::string</code> or <code>std::stringstream</code> if after profiling your code you discover this makes an improvement.</strong></p>

<p>I normally use either <a href=""http://en.cppreference.com/w/cpp/string/basic_string"" rel=""noreferrer""><code>std::string</code></a> or <a href=""http://en.cppreference.com/w/cpp/io/basic_stringstream"" rel=""noreferrer""><code>std::stringstream</code></a>.  I have never had any problems with these.  I would normally reserve some room first if I know the rough size of the string in advance.</p>

<p>I have seen other people make their own optimized string builder in the distant past. </p>

<pre><code>class StringBuilder {
private:
    std::string main;
    std::string scratch;

    const std::string::size_type ScratchSize = 1024;  // or some other arbitrary number

public:
    StringBuilder &amp; append(const std::string &amp; str) {
        scratch.append(str);
        if (scratch.size() &gt; ScratchSize) {
            main.append(scratch);
            scratch.resize(0);
        }
        return *this;
    }

    const std::string &amp; str() {
        if (scratch.size() &gt; 0) {
            main.append(scratch);
            scratch.resize(0);
        }
        return main;
    }
};
</code></pre>

<p>It uses two strings one for the majority of the string and the other as a scratch area for concatenating short strings.  It optimise's appends by batching the short append operations in one small string then appending this to the main string, thus reducing the number of reallocations required on the main string as it gets larger.</p>

<p>I have not required this trick with <code>std::string</code> or <code>std::stringstream</code>.  I think it was used with a third party string library before std::string, it was that long ago.  If you adopt a strategy like this profile your application first.</p>
","2463103"
"What is the best way to concatenate two vectors?","121675","","<p>I'm using multitreading and want to merge the results. For example:</p>

<pre><code>std::vector&lt;int&gt; A;
std::vector&lt;int&gt; B;
std::vector&lt;int&gt; AB;
</code></pre>

<p>I want AB to have to contents of A and the contents of B in that order. What's the most efficient way of doing something like this?</p>
","<pre><code>AB.reserve( A.size() + B.size() ); // preallocate memory
AB.insert( AB.end(), A.begin(), A.end() );
AB.insert( AB.end(), B.begin(), B.end() );
</code></pre>
","3177252"
"generate random double numbers in c++","121447","","<p>How to generate random numbers between two doubles in c++ , these numbers should look like xxxxx,yyyyy .</p>
","<p>Here's how</p>

<pre><code>double fRand(double fMin, double fMax)
{
    double f = (double)rand() / RAND_MAX;
    return fMin + f * (fMax - fMin);
}
</code></pre>

<p>Remember to call srand() with a proper seed each time your program starts.</p>
","2704552"
"pinpointing ""conditional jump or move depends on uninitialized value(s)"" valgrind message","121234","","<p>So I've been getting some mysterious uninitialized values message from valgrind and it's been quite the mystery as of where the bad value originated from.</p>

<p>Seems that valgrind shows the place where the unitialised value ends up being used, but not the origin of the uninitialised value.</p>

<pre><code>==11366== Conditional jump or move depends on uninitialised value(s)
==11366==    at 0x43CAE4F: __printf_fp (in /lib/tls/i686/cmov/libc-2.7.so)
==11366==    by 0x43C6563: vfprintf (in /lib/tls/i686/cmov/libc-2.7.so)
==11366==    by 0x43EAC03: vsnprintf (in /lib/tls/i686/cmov/libc-2.7.so)
==11366==    by 0x42D475B: (within /usr/lib/libstdc++.so.6.0.9)
==11366==    by 0x42E2C9B: std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt;(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, char, double) const (in /usr/lib/libstdc++.so.6.0.9)
==11366==    by 0x42E31B4: std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put(std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;, std::ios_base&amp;, char, double) const (in /usr/lib/libstdc++.so.6.0.9)
==11366==    by 0x42EE56F: std::ostream&amp; std::ostream::_M_insert&lt;double&gt;(double) (in /usr/lib/libstdc++.so.6.0.9)
==11366==    by 0x81109ED: Snake::SnakeBody::syncBodyPos() (ostream:221)
==11366==    by 0x810B9F1: Snake::Snake::update() (snake.cpp:257)
==11366==    by 0x81113C1: SnakeApp::updateState() (snakeapp.cpp:224)
==11366==    by 0x8120351: RoenGL::updateState() (roengl.cpp:1180)
==11366==    by 0x81E87D9: Roensachs::update() (rs.cpp:321)
</code></pre>

<p>As can be seen, it gets quite cryptic.. especially because when it's saying by Class::MethodX, it sometimes points straight to ostream etc. Perhaps this is due to optimization?</p>

<pre><code>==11366==    by 0x81109ED: Snake::SnakeBody::syncBodyPos() (ostream:221)
</code></pre>

<p>Just like that. Is there something I'm missing? What is the best way to catch bad values without having to resort to super-long printf detective work?</p>

<p><strong><em>Update:</em></strong></p>

<p>I found out what was wrong, but the strange thing is, valgrind did not report it when the bad value was first used. It was used in a multiplication function:</p>

<pre><code>movespeed = stat.speedfactor * speedfac * currentbendfactor.val;
</code></pre>

<p>Where speedfac was an unitialised float. However, at that time it was not reported and not until the value is to be printed that I get the error.. Is there a setting for valgrind to change this behavior?</p>
","<p>Use the valgrind option <a href=""http://valgrind.org/docs/manual/mc-manual.html#opt.track-origins"" rel=""noreferrer""><code>--track-origins=yes</code></a> to have it track the origin of uninitialized values.  This will make it slower and take more memory, but can be very helpful if you need to track down the origin of an uninitialized value.</p>

<p><strong>Update:</strong> Regarding the point at which the uninitialized value is reported, <a href=""http://valgrind.org/docs/manual/mc-manual.html#mc-manual.uninitvals"" rel=""noreferrer"">the valgrind manual states</a>:</p>

<blockquote>
  <p>It is important to understand that your program can copy around junk (uninitialised) data as much as it likes. Memcheck observes this and keeps track of the data, but does not complain. A complaint is issued only when your program attempts to make use of uninitialised data in a way that might affect your program's externally-visible behaviour.</p>
</blockquote>

<p>From the <a href=""http://valgrind.org/docs/manual/faq.html#q-undeferrors"" rel=""noreferrer"">Valgrind FAQ</a>:</p>

<blockquote>
  <p>As for eager reporting of copies of uninitialised memory values, this has been suggested multiple times. Unfortunately, almost all programs legitimately copy uninitialised memory values around (because compilers pad structs to preserve alignment) and eager checking leads to hundreds of false positives. Therefore Memcheck does not support eager checking at this time.</p>
</blockquote>
","2612524"
"How to search for an element in an stl list?","121199","","<p>Is there a <code>find()</code> function for list as there was in vector?</p>

<p>Is there a way to do that in list?</p>
","<p>You use <a href=""http://en.cppreference.com/w/cpp/algorithm/find"" rel=""noreferrer""><code>std::find</code></a> from <code>&lt;algorithm&gt;</code>, which works equally well for <code>std::list</code> and <code>std::vector</code>. <code>std::vector</code> does not have its own search/find function.</p>

<pre><code>#include &lt;list&gt;
#include &lt;algorithm&gt;

int main()
{
    std::list&lt;int&gt; ilist;
    ilist.push_back(1);
    ilist.push_back(2);
    ilist.push_back(3);

    std::list&lt;int&gt;::iterator findIter = std::find(ilist.begin(), ilist.end(), 1);
}
</code></pre>

<p>Note that this works for built-in types like <code>int</code> as well as standard library types like <code>std::string</code> by default because they have <code>operator==</code> provided for them. If you are using using <code>std::find</code> on a container of a user-defined type, you should overload <code>operator==</code> to allow <code>std::find</code> to work properly: <a href=""http://en.cppreference.com/w/cpp/concept/EqualityComparable"" rel=""noreferrer""><code>EqualityComparable</code> concept</a></p>
","4604177"
"How to convert an enum type variable to a string?","121159","","<p>How to make printf to show the values of variables which are of an enum type? For instance:</p>

<pre><code>typedef enum {Linux, Apple, Windows} OS_type; 
OS_type myOS = Linux;
</code></pre>

<p>and what I need is something like </p>

<pre><code>printenum(OS_type, ""My OS is %s"", myOS);
</code></pre>

<p>which must show a string ""Linux"", not an integer.</p>

<p>I suppose, first I have to create a value-indexed array of strings. But I don't know if that is the most beautiful way to do it. Is it possible at all?</p>
","<p>There really is no beautiful way of doing this. Just set up an array of strings indexed by the enum.</p>

<p>If you do a lot of output, you can define an operator&lt;&lt; that takes an enum parameter and does the lookup for you.</p>
","5093643"
"Using ""super"" in C++","121007","","<p>My style of coding includes the following idiom:</p>

<pre><code>class Derived : public Base
{
   public :
      typedef Base super; // note that it could be hidden in
                          // protected/private section, instead

      // Etc.
} ;
</code></pre>

<p>This enables me to use ""super"" as an alias to Base, for example, in constructors:</p>

<pre><code>Derived(int i, int j)
   : super(i), J(j)
{
}
</code></pre>

<p>Or even when calling the method from the base class inside its overridden version:</p>

<pre><code>void Derived::foo()
{
   super::foo() ;

   // ... And then, do something else
}
</code></pre>

<p>It can even be chained (I have still to find the use for that, though):</p>

<pre><code>class DerivedDerived : public Derived
{
   public :
      typedef Derived super; // note that it could be hidden in
                             // protected/private section, instead

      // Etc.
} ;

void DerivedDerived::bar()
{
   super::bar() ; // will call Derived::bar
   super::super::bar ; // will call Base::bar

   // ... And then, do something else
}
</code></pre>

<p>Anyway, I find the use of ""typedef super"" very useful, for example, when Base is either verbose and/or templated.</p>

<p>The fact is that super is implemented in Java, as well as in C# (where it is called ""base"", unless I'm wrong). But C++ lacks this keyword.</p>

<p>So, my questions:</p>

<ul>
<li>is this use of typedef super common/rare/never seen in the code you work with?</li>
<li>is this use of typedef super Ok (i.e. do you see strong or not so strong reasons to not use it)?</li>
<li>should ""super"" be a good thing, should it be somewhat standardized in C++, or is this use through a typedef enough already?</li>
</ul>

<p><b>Edit:</b> Roddy mentionned the fact the typedef should be private. This would mean any derived class would not be able to use it without redeclaring it. But I guess it would also prevent the super::super chaining (but who's gonna cry for that?).</p>

<p><b>Edit 2:</b> Now, some months after massively using ""super"", I wholeheartedly agree with Roddy's viewpoint: ""super"" should be private. I would upvote his answer twice, but I guess I can't.</p>
","<p>Bjarne Stroustrup mentions in <em>Design and Evolution of C++</em> that <code>super</code> as a keyword was considered by the ISO C++ Standards committee the first time C++ was standardized.</p>

<p>Dag Bruck proposed this extension, calling the base class ""inherited.""  The proposal mentioned the multiple inheritance issue, and would have flagged ambiguous uses.  Even Stroustrup was convinced.</p>

<p>After discussion, Dag Bruck (yes, the same person making the proposal) wrote that the proposal was implementable, technically sound, and free of major flaws, and handled multiple inheritance.  On the other hand, there wasn't enough bang for the buck, and the committee should handle a thornier problem.</p>

<p>Michael Tiemann arrived late, and then showed that a typedef'ed super would work just fine, using the same technique that was asked about in this post.</p>

<p>So, no, this will probably never get standardized.</p>

<p>If you don't have a copy, <em>Design and Evolution</em> is well worth the cover price.  Used copies can be had for about $10.</p>
","180633"
"How do you exit from a void function in C++?","120752","","<p>How can you prematurely exit from a function if it is a void function? I have a void method that needs to not execute its code if a certain condition is true. I really don't want to have to change the method to actually return a value.</p>
","<p>Use a return statement!</p>

<pre><code>return;
</code></pre>

<p>or</p>

<pre><code>if (condition) return;
</code></pre>

<p>You don't need to (and can't) specify any values, if your method returns <code>void</code>.</p>
","346616"
"How do you force a makefile to rebuild a target","120682","","<p>I have a makefile that builds and then calls another makefile. Since this makefile calls more makefiles that does the work it doesnt really change. Thus it keeps thinking the project is built and upto date. </p>

<pre><code>dnetdev11 ~ # make
make: `release' is up to date.
</code></pre>

<p>How do i force the makefile to rebuild the target?</p>

<pre><code>clean = $(MAKE) -f ~/xxx/xxx_compile.workspace.mak clean


build = svn up ~/xxx                                                       \
        $(clean)                                                                \
        ~/cbp2mak/cbp2mak -C ~/xxx ~/xxx/xxx_compile.workspace        \
        $(MAKE) -f ~/xxx/xxx_compile.workspace.mak $(1)                    \


release:
        $(build )

debug:
        $(build DEBUG=1)

clean:
        $(clean)

install:
        cp ~/xxx/source/xxx_utility/release/xxx_util /usr/local/bin
        cp ~/xxx/source/xxx_utility/release/xxxcore.so /usr/local/lib
</code></pre>

<p>Note: Names removed to protect the innocent</p>

<p>Edit: Final Fixed version:</p>

<pre><code>clean = $(MAKE) -f xxx_compile.workspace.mak clean;


build = svn up;                                         \
        $(clean)                                        \
        ./cbp2mak/cbp2mak -C . xxx_compile.workspace;   \
        $(MAKE) -f xxx_compile.workspace.mak    $(1);   \


.PHONY: release debug clean install

release:
        $(call build,)

debug:
        $(call build,DEBUG=1)

clean:
        $(clean)

install:
        cp ./source/xxx_utillity/release/xxx_util /usr/bin
        cp ./dlls/Release/xxxcore.so /usr/lib
</code></pre>
","<p>You could declare one or more of your targets to be <a href=""http://www.gnu.org/software/make/manual/html_node/Phony-Targets.html"" rel=""nofollow noreferrer"">phony</a>.</p>

<blockquote>
  <p>A phony target is one that is not really the name of a file; rather it
  is just a name for a recipe to be executed when you make an explicit
  request. There are two reasons to use a phony target: to avoid a
  conflict with a file of the same name, and to improve performance.</p>
  
  <p>...</p>
  
  <p>A phony target should not be a prerequisite of a real target file; if
  it is, its recipe will be run every time make goes to update that
  file. As long as a phony target is never a prerequisite of a real
  target, the phony target recipe will be executed only when the phony
  target is a specified goal</p>
</blockquote>
","816373"
"Incomplete type is not allowed: stringstream","120610","","<p>Why does this line give the error <code>Error: incomplete type is not allowed</code>?</p>

<pre><code>stringstream ss;
</code></pre>
","<p><code>#include &lt;sstream&gt;</code> and use the fully qualified name  i.e. <code>std::stringstream ss;</code></p>
","5781667"
"c++ string array initialization","120390","","<p>I know I can do this in C++:</p>

<pre><code>string s[] = {""hi"", ""there""};
</code></pre>

<p>But is there anyway to delcare an array this way without delcaring <code>string s[]</code>?</p>

<p>e.g.</p>

<pre><code>void foo(string[] strArray){
  // some code
}

string s[] = {""hi"", ""there""}; // Works
foo(s); // Works

foo(new string[]{""hi"", ""there""}); // Doesn't work
</code></pre>
","<p>In C++11 you can. A note beforehand: Don't <code>new</code> the array, there's no need for that.</p>

<p>First, <code>string[] strArray</code> is a syntax error, that should either be <code>string* strArray</code> or <code>string strArray[]</code>. And I assume that it's just for the sake of the example that you don't pass any size parameter.</p>

<pre><code>#include &lt;string&gt;

void foo(std::string* strArray, unsigned size){
  // do stuff...
}

template&lt;class T&gt;
using alias = T;

int main(){
  foo(alias&lt;std::string[]&gt;{""hi"", ""there""}, 2);
}
</code></pre>

<p>Note that it would be better if you didn't need to pass the array size as an extra parameter, and thankfully there is a way: Templates!</p>

<pre><code>template&lt;unsigned N&gt;
void foo(int const (&amp;arr)[N]){
  // ...
}
</code></pre>

<p>Note that this will only match stack arrays, like <code>int x[5] = ...</code>. Or temporary ones, created by the use of <code>alias</code> above.</p>

<pre><code>int main(){
  foo(alias&lt;int[]&gt;{1, 2, 3});
}
</code></pre>
","9626922"
"What is the difference between _tmain() and main() in C++?","120118","","<p>If I run my C++ application with the following main() method everything is OK:</p>

<pre><code>int main(int argc, char *argv[]) 
{
   cout &lt;&lt; ""There are "" &lt;&lt; argc &lt;&lt; "" arguments:"" &lt;&lt; endl;

   // Loop through each argument and print its number and value
   for (int i=0; i&lt;argc; i++)
      cout &lt;&lt; i &lt;&lt; "" "" &lt;&lt; argv[i] &lt;&lt; endl;

   return 0;
}
</code></pre>

<p>I get what I expect and my arguments are printed out.</p>

<p>However, if I use _tmain:</p>

<pre><code>int _tmain(int argc, char *argv[]) 
{
   cout &lt;&lt; ""There are "" &lt;&lt; argc &lt;&lt; "" arguments:"" &lt;&lt; endl;

   // Loop through each argument and print its number and value
   for (int i=0; i&lt;argc; i++)
      cout &lt;&lt; i &lt;&lt; "" "" &lt;&lt; argv[i] &lt;&lt; endl;

   return 0;
}
</code></pre>

<p>It just displays the first character of each argument.</p>

<p>What is the difference causing this?</p>
","<p><code>_tmain</code> does not exist in C++. <code>main</code> does.</p>

<p><code>_tmain</code> is a Microsoft extension.</p>

<p><code>main</code> is, according to the C++ standard, the program's entry point.
It has one of these two signatures:</p>

<pre><code>int main();
int main(int argc, char* argv[]);
</code></pre>

<p>Microsoft has added a wmain which replaces the second signature with this:</p>

<pre><code>int wmain(int argc, wchar_t* argv[]);
</code></pre>

<p>And then, to make it easier to switch between Unicode (UTF-16) and their multibyte character set, they've defined <code>_tmain</code> which, if Unicode is enabled, is compiled as <code>wmain</code>, and otherwise as <code>main</code>.</p>

<p>As for the second part of your question, the first part of the puzzle is that your main function is wrong. <code>wmain</code> should take a <code>wchar_t</code> argument, not <code>char</code>. Since the compiler doesn't enforce this for the <code>main</code> function, you get a program where an array of <code>wchar_t</code> strings are passed to the <code>main</code> function, which interprets them as <code>char</code> strings.</p>

<p>Now, in UTF-16, the character set used by Windows when Unicode is enabled, all the ASCII characters are represented as the pair of bytes <code>\0</code> followed by the ASCII value.</p>

<p>And since the x86 CPU is little-endian, the order of these bytes are swapped, so that the ASCII value comes first, then followed by a null byte.</p>

<p>And in a char string, how is the string usually terminated? Yep, by a null byte. So your program sees a bunch of strings, each one byte long.</p>

<p>In general, you have three options when doing Windows programming:</p>

<ul>
<li>Explicitly use Unicode (call wmain, and for every Windows API function which takes char-related arguments, call the <code>-W</code> version of the function. Instead of CreateWindow, call CreateWindowW). And instead of using <code>char</code> use <code>wchar_t</code>, and so on</li>
<li>Explicitly disable Unicode. Call main, and CreateWindowA, and use <code>char</code> for strings.</li>
<li>Allow both. (call _tmain, and CreateWindow, which resolve to main/_tmain and CreateWindowA/CreateWindowW), and use TCHAR instead of char/wchar_t.</li>
</ul>

<p>The same applies to the string types defined by windows.h:
LPCTSTR resolves to either LPCSTR or LPCWSTR, and for every other type that includes char or wchar_t, a -T- version always exists which can be used instead.</p>

<p>Note that all of this is Microsoft specific. TCHAR is not a standard C++ type, it is a macro defined in windows.h. wmain and _tmain are also defined by Microsoft only.</p>
","895894"
"Should I learn C before learning C++?","119798","","<p>I visited a university CS department open day today and in the labs tour we sat down to play with a couple of final-year projects from undergraduate students. One was particularly good - a sort of FPS asteroids game. I decided to take a peek in the <code>src</code> directory to find it was done in C++ (most of the other projects were Java 3D apps).</p>

<p>I haven't done any C before but I have looked through some C code before. From what I saw in the .cpp code in this game it didn't look very different.</p>

<p>I'm interested in learning either C or C++ but will probably learn the other later on. <strong>Is there any advantage to me learning one before the other</strong> and <strong>if so, which one?</strong></p>
","<p>There is no need to learn C before learning C++.  </p>

<p><strong>They are different languages</strong>.  It is a common misconception that C++ is in some way dependent on C and not a fully specified language on its own. </p>

<p>Just because C++ shares a lot of the same syntax and a lot of the same semantics, does not mean you need to learn C first.   </p>

<p>If you learn C++ you will eventually learn most of C with some differences between the languages that you will learn over time.  In fact its a very hard thing to write proper C++ because intermediate C++ programmers tend to write C/C++.That is true whether or not you started with C or started with C++.</p>

<p>If you know C first, then that is good plus to learning C++.  You will start with knowing a chunk of the language.  If you do not know C first then there is no point focusing on a different language.  There are plenty of good books and tutorials available that start you from knowing nothing and will cover anything you would learn from C which applies to C++ as well. </p>

<p><a href=""https://stackoverflow.com/questions/145096/is-it-true-that-there-is-no-need-to-learn-c-because-c-contains-everything/145098#145098"">Please see further reasoning in this answer</a>.</p>
","598555"
"How to implement the factory method pattern in C++ correctly","119673","","<p>There's this one thing in C++ which has been making me feel uncomfortable for quite a long time, because I honestly don't know how to do it, even though it sounds simple:</p>

<h1><strong>How do I implement Factory Method in C++ correctly?</strong></h1>

<p>Goal: to make it possible to allow the client to instantiate some object using factory methods instead of the object's constructors, without unacceptable consequences and a performance hit. </p>

<p>By ""Factory method pattern"", I mean both static factory methods inside an object or methods defined in another class, or global functions. Just generally ""the concept of redirecting the normal way of instantiation of class X to anywhere else than the constructor"".</p>

<p>Let me skim through some possible answers which I have thought of.</p>

<hr>

<h2>0) Don't make factories, make constructors.</h2>

<p>This sounds nice (and indeed often the best solution), but is not a general remedy. First of all, there are cases when object construction is a task complex enough to justify its extraction to another class. But even putting that fact aside, even for simple objects using just constructors often won't do.</p>

<p>The simplest example I know is a 2-D Vector class. So simple, yet tricky. I want to be able to construct it both from both Cartesian and polar coordinates. Obviously, I cannot do:</p>

<pre><code>struct Vec2 {
    Vec2(float x, float y);
    Vec2(float angle, float magnitude); // not a valid overload!
    // ...
};
</code></pre>

<p>My natural way of thinking is then:</p>

<pre><code>struct Vec2 {
    static Vec2 fromLinear(float x, float y);
    static Vec2 fromPolar(float angle, float magnitude);
    // ...
};
</code></pre>

<p>Which, instead of constructors, leads me to usage of static factory methods... which essentially means that I'm implementing the factory pattern, in some way (""the class becomes its own factory""). This looks nice (and would suit this particular case), but fails in some cases, which I'm going to describe in point 2. Do read on.</p>

<p><em>another case: trying to overload by two opaque typedefs of some API (such as GUIDs of unrelated domains, or a GUID and a bitfield), types semantically totally different (so - in theory - valid overloads) but which actually turn out to be the same thing - like unsigned ints or void pointers.</em></p>

<hr>

<h2>1) The Java Way</h2>

<p>Java has it simple, as we only have dynamic-allocated objects. Making a factory is as trivial as:</p>

<pre><code>class FooFactory {
    public Foo createFooInSomeWay() {
        // can be a static method as well,
        //  if we don't need the factory to provide its own object semantics
        //  and just serve as a group of methods
        return new Foo(some, args);
    }
}
</code></pre>

<p>In C++, this translates to:</p>

<pre><code>class FooFactory {
public:
    Foo* createFooInSomeWay() {
        return new Foo(some, args);
    }
};
</code></pre>

<p>Cool? Often, indeed. But then- this forces the user to only use dynamic allocation. Static allocation is what makes C++ complex, but is also what often makes it powerful. Also, I believe that there exist some targets (keyword: embedded) which don't allow for dynamic allocation. And that doesn't imply that the users of those platforms like to write clean OOP.</p>

<p>Anyway, philosophy aside: In the general case, I don't want to force the users of the factory to be restrained to dynamic allocation.</p>

<hr>

<h2>2) Return-by-value</h2>

<p>OK, so we know that 1) is cool when we want dynamic allocation. Why won't we add static allocation on top of that?</p>

<pre><code>class FooFactory {
public:
    Foo* createFooInSomeWay() {
        return new Foo(some, args);
    }
    Foo createFooInSomeWay() {
        return Foo(some, args);
    }
};
</code></pre>

<p>What? We can't overload by the return type? Oh, of course we can't. So let's change the method names to reflect that. And yes, I've written the invalid code example above just to stress how much I dislike the need to change the method name, for example because we cannot implement a language-agnostic factory design properly now, since we have to change names - and every user of this code will need to remember that difference of the implementation from the specification.</p>

<pre><code>class FooFactory {
public:
    Foo* createDynamicFooInSomeWay() {
        return new Foo(some, args);
    }
    Foo createFooObjectInSomeWay() {
        return Foo(some, args);
    }
};
</code></pre>

<p>OK... there we have it. It's ugly, as we need to change the method name. It's imperfect, since we need to write the same code twice. But once done, it works. Right?</p>

<p>Well, usually. But sometimes it does not. When creating Foo, we actually depend on the compiler to do the return value optimisation for us, because the C++ standard is benevolent enough for the compiler vendors not to specify when will the object created in-place and when will it be copied when returning a temporary object by value in C++. So if Foo is expensive to copy, this approach is risky.</p>

<p>And what if Foo is not copiable at all? Well, doh. (<em>Note that in C++17 with guaranteed copy elision, not-being-copiable is no problem anymore for the code above</em>)</p>

<p>Conclusion: Making a factory by returning an object is indeed a solution for some cases (such as the 2-D vector previously mentioned), but still not a general replacement for constructors.</p>

<hr>

<h2>3) Two-phase construction</h2>

<p>Another thing that someone would probably come up with is separating the issue of object allocation and its initialisation. This usually results in code like this:</p>

<pre><code>class Foo {
public:
    Foo() {
        // empty or almost empty
    }
    // ...
};

class FooFactory {
public:
    void createFooInSomeWay(Foo&amp; foo, some, args);
};

void clientCode() {
    Foo staticFoo;
    auto_ptr&lt;Foo&gt; dynamicFoo = new Foo();
    FooFactory factory;
    factory.createFooInSomeWay(&amp;staticFoo);
    factory.createFooInSomeWay(&amp;dynamicFoo.get());
    // ...
}
</code></pre>

<p>One may think it works like a charm. The only price we pay for in our code...</p>

<p>Since I've written all of this and left this as the last, I must dislike it too. :) Why?</p>

<p>First of all... I sincerely dislike the concept of two-phase construction and I feel guilty when I use it. If I design my objects with the assertion that ""if it exists, it is in valid state"", I feel that my code is safer and less error-prone. I like it that way.</p>

<p>Having to drop that convention AND changing the design of my object just for the purpose of making factory of it is.. well,  unwieldy.</p>

<p>I know that the above won't convince many people, so let's me give some more solid arguments. Using two-phase construction, you cannot:</p>

<ul>
<li>initialise <code>const</code> or reference member variables,</li>
<li>pass arguments to base class constructors and member object constructors.</li>
</ul>

<p>And probably there could be some more drawbacks which I can't think of right now, and I don't even feel particularly obliged to since the above bullet points convince me already.</p>

<p>So: not even close to a good general solution for implementing a factory.</p>

<hr>

<h2>Conclusions:</h2>

<p>We want to have a way of object instantiation which would: </p>

<ul>
<li>allow for uniform instantiation regardless of allocation,</li>
<li>give different, meaningful names to construction methods (thus not relying on by-argument overloading),</li>
<li>not introduce a significant performance hit and, preferably, a significant code bloat hit, especially at client side,</li>
<li>be general, as in: possible to be introduced for any class.</li>
</ul>

<p>I believe I have proven that the ways I have mentioned don't fulfil those requirements.</p>

<p>Any hints? Please provide me with a solution, I don't want to think that this language won't allow me to properly implement such a trivial concept.</p>
","<blockquote>
  <p>First of all, there are cases when
  object construction is a task complex
  enough to justify its extraction to
  another class.</p>
</blockquote>

<p>I believe this point is incorrect. The complexity doesn't really matter. The relevance is what does. If an object can be constructed in one step (not like in the builder pattern), the constructor is the right place to do it. If you really need another class to perform the job, then it should be a helper class that is used from the constructor anyway.</p>

<pre><code>Vec2(float x, float y);
Vec2(float angle, float magnitude); // not a valid overload!
</code></pre>

<p>There is an easy workaround for this:</p>

<pre><code>struct Cartesian {
  inline Cartesian(float x, float y): x(x), y(y) {}
  float x, y;
};
struct Polar {
  inline Polar(float angle, float magnitude): angle(angle), magnitude(magnitude) {}
  float angle, magnitude;
};
Vec2(const Cartesian &amp;cartesian);
Vec2(const Polar &amp;polar);
</code></pre>

<p>The only disadvantage is that it looks a bit verbose:</p>

<pre><code>Vec2 v2(Vec2::Cartesian(3.0f, 4.0f));
</code></pre>

<p>But the good thing is that you can immediately see what coordinate type you're using, and at the same time you don't have to worry about copying. If you want copying, and it's expensive (as proven by profiling, of course), you may wish to use something like <a href=""http://doc.qt.io/qt-5/implicit-sharing.html"" rel=""noreferrer"">Qt's shared classes</a> to avoid copying overhead.</p>

<p>As for the allocation type, the main reason to use the factory pattern is usually polymorphism. Constructors can't be virtual, and even if they could, it wouldn't make much sense. When using static or stack allocation, you can't create objects in a polymorphic way because the compiler needs to know the exact size. So it works only with pointers and references. And returning a reference from a factory doesn't work too, because while an object technically <em>can</em> be deleted by reference, it could be rather confusing and bug-prone, see <a href=""https://stackoverflow.com/questions/752658/is-the-practice-of-returning-a-c-reference-variable-evil/752699#752699"">Is the practice of returning a C++ reference variable, evil?</a> for example. So pointers are the only thing that's left, and that includes smart pointers too. In other words, factories are most useful when used with dynamic allocation, so you can do things like this:</p>

<pre><code>class Abstract {
  public:
    virtual void do() = 0;
};

class Factory {
  public:
    Abstract *create();
};

Factory f;
Abstract *a = f.create();
a-&gt;do();
</code></pre>

<p>In other cases, factories just help to solve minor problems like those with overloads you have mentioned. It would be nice if it was possible to use them in a uniform way, but it doesn't hurt much that it is probably impossible.</p>
","5121500"
"View array in Visual Studio debugger?","119611","","<p>Is it possible to view an array in the Visual Studio debugger?  QuickWatch only shows the first element of the array.</p>
","<p>You can try this nice little trick for C++.  Take the expression which gives you the array and then append a comma and the number of elements you want to see.  Expanding that value will show you elements 0-(N-1) where N is the number you add after the comma.</p>

<p>For example if <code>pArray</code> is the array, type <code>pArray,10</code> in the watch window.</p>
","972529"
"How do I get the type of a variable?","119467","","<p>In C++, how does one find the type of a variable?</p>
","<p>You can use <a href=""http://msdn.microsoft.com/en-us/library/fyf39xec%28v=vs.110%29.aspx"">the typeid operator</a>:</p>

<pre><code>#include &lt;typeinfo&gt;
...
cout &lt;&lt; typeid(variable).name() &lt;&lt; endl;
</code></pre>
","11310937"
"Get path of executable","118972","","<p>I know this question has been asked before but I still haven't seen a satisfactory answer, or a definitive ""no, this cannot be done"", so I'll ask again!</p>

<p>All I want to do is get the path to the currently running executable, either as an absolute path or relative to where the executable is invoked from, in a platform-independent fashion. I though boost::filesystem::initial_path was the answer to my troubles but that seems to only handle the 'platform-independent' part of the question - it still returns the path from which the application was invoked.</p>

<p>For a bit of background, this is a game using Ogre, which I'm trying to profile using Very Sleepy, which runs the target executable from its own directory, so of course on load the game finds no configuration files etc. and promptly crashes. I want to be able to pass it an absolute path to the configuration files, which I know will always live alongside the executable. The same goes for debugging in Visual Studio - I'd like to be able to run $(TargetPath) without having to set the working directory.</p>
","<p>There is no cross platform way that I know.  </p>

<p>For Linux: <a href=""https://linux.die.net/man/2/readlink"" rel=""nofollow noreferrer"">readlink</a> /proc/self/exe</p>

<p>Windows: <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/ms683197(v=vs.85).aspx"" rel=""nofollow noreferrer"">GetModuleFileName</a></p>
","1528493"
"Recursive Fibonacci","118957","","<p>I'm having a hard time understanding why</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

int fib(int x) {
    if (x == 1) {
        return 1;
    } else {
        return fib(x-1)+fib(x-2);
    }
}

int main() {
    cout &lt;&lt; fib(5) &lt;&lt; endl;
}
</code></pre>

<p>results in a segmentation fault. Once x gets down to 1 shouldn't it eventually return?</p>
","<p>When <code>x==2</code> you call <code>fib(1)</code> and <code>fib(0)</code>:</p>

<pre><code>return fib(2-1)+fib(2-2);
</code></pre>

<p>Consider what will happen when <code>fib(0)</code> is evaluated...</p>
","1518731"
"Floating Point Exception C++ Why and what is it?","118571","","<p>I'm building a program for the Euler projects question 3, and while that might not really matter as a result I'm current trying to make this code take a number and test if it is prime or not. Now then before I get to troubleshoot the function it gives me the error ""floating point exception"" right after inputting the number. Here's the code:</p>

<pre><code>int main()
{
    int input;
    cout &lt;&lt; ""Enter number: "" &lt;&lt; endl;
    cin&gt;&gt; input;
    int i = input/2;
    int c;
    for (i&gt;0; i--;) {
        c= input%i;
        if (c==0 || i == 1)
            cout &lt;&lt; ""not prime"" &lt;&lt; endl;
        else
            cout &lt;&lt; ""prime"" &lt;&lt; endl;
    }
    return 0;
}
</code></pre>

<p>so essentially why is it giving me a floating point exception and what does that even mean?</p>
","<p>A ""<a href=""http://en.wikipedia.org/wiki/Floating_point"" rel=""noreferrer"">floating point number</a>"" is how computers usually represent numbers that are not integers -- basically, a number with a decimal point. In C++ you declare them with <code>float</code> instead of <code>int</code>. A floating point exception is an error that occurs when you try to do something impossible with a floating point number, such as divide by zero.</p>
","4236868"
"Writing a binary file in C++ very fast","118530","","<p>I'm trying to write huge amounts of data onto my SSD(solid state drive). And by huge amounts I mean 80GB.</p>

<p>I browsed the web for solutions, but the best I came up with was this:</p>

<pre><code>#include &lt;fstream&gt;
const unsigned long long size = 64ULL*1024ULL*1024ULL;
unsigned long long a[size];
int main()
{
    std::fstream myfile;
    myfile = std::fstream(""file.binary"", std::ios::out | std::ios::binary);
    //Here would be some error handling
    for(int i = 0; i &lt; 32; ++i){
        //Some calculations to fill a[]
        myfile.write((char*)&amp;a,size*sizeof(unsigned long long));
    }
    myfile.close();
}
</code></pre>

<p>Compiled with Visual Studio 2010 and full optimizations and run under Windows7 this program maxes out around 20MB/s. What really bothers me is that Windows can copy files from an other SSD to this SSD at somewhere between 150MB/s and 200MB/s. So at least 7 times faster. That's why I think I should be able to go faster.</p>

<p>Any ideas how I can speed up my writing?</p>

<p><strong>Edit:</strong> Now it compiles.</p>
","<p>This did the job:</p>

<pre><code>#include &lt;stdio.h&gt;
const unsigned long long size = 8ULL*1024ULL*1024ULL;
unsigned long long a[size];

int main()
{
    FILE* pFile;
    pFile = fopen(""file.binary"", ""wb"");
    for (unsigned long long j = 0; j &lt; 1024; ++j){
        //Some calculations to fill a[]
        fwrite(a, 1, size*sizeof(unsigned long long), pFile);
    }
    fclose(pFile);
    return 0;
}
</code></pre>

<p>I just timed 8GB in 36sec, which is about 220MB/s and I think that maxes out my SSD. Also worth to note, the code in the question used one core 100%, whereas this code only uses 2-5%.</p>

<p>Thanks a lot to everyone.</p>

<p><strong>Update</strong>: 5 years have passed. Compilers, hardware, libraries and my requirements have changed. That's why I made some changes to the code and did some measurements.</p>

<p>First up the code:</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;chrono&gt;
#include &lt;vector&gt;
#include &lt;cstdint&gt;
#include &lt;numeric&gt;
#include &lt;random&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;cassert&gt;

std::vector&lt;uint64_t&gt; GenerateData(std::size_t bytes)
{
    assert(bytes % sizeof(uint64_t) == 0);
    std::vector&lt;uint64_t&gt; data(bytes / sizeof(uint64_t));
    std::iota(data.begin(), data.end(), 0);
    std::shuffle(data.begin(), data.end(), std::mt19937{ std::random_device{}() });
    return data;
}

long long option_1(std::size_t bytes)
{
    std::vector&lt;uint64_t&gt; data = GenerateData(bytes);

    auto startTime = std::chrono::high_resolution_clock::now();
    auto myfile = std::fstream(""file.binary"", std::ios::out | std::ios::binary);
    myfile.write((char*)&amp;data[0], bytes);
    myfile.close();
    auto endTime = std::chrono::high_resolution_clock::now();

    return std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(endTime - startTime).count();
}

long long option_2(std::size_t bytes)
{
    std::vector&lt;uint64_t&gt; data = GenerateData(bytes);

    auto startTime = std::chrono::high_resolution_clock::now();
    FILE* file = fopen(""file.binary"", ""wb"");
    fwrite(&amp;data[0], 1, bytes, file);
    fclose(file);
    auto endTime = std::chrono::high_resolution_clock::now();

    return std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(endTime - startTime).count();
}

long long option_3(std::size_t bytes)
{
    std::vector&lt;uint64_t&gt; data = GenerateData(bytes);

    std::ios_base::sync_with_stdio(false);
    auto startTime = std::chrono::high_resolution_clock::now();
    auto myfile = std::fstream(""file.binary"", std::ios::out | std::ios::binary);
    myfile.write((char*)&amp;data[0], bytes);
    myfile.close();
    auto endTime = std::chrono::high_resolution_clock::now();

    return std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(endTime - startTime).count();
}

int main()
{
    const std::size_t kB = 1024;
    const std::size_t MB = 1024 * kB;
    const std::size_t GB = 1024 * MB;

    for (std::size_t size = 1 * MB; size &lt;= 4 * GB; size *= 2) std::cout &lt;&lt; ""option1, "" &lt;&lt; size / MB &lt;&lt; ""MB: "" &lt;&lt; option_1(size) &lt;&lt; ""ms"" &lt;&lt; std::endl;
    for (std::size_t size = 1 * MB; size &lt;= 4 * GB; size *= 2) std::cout &lt;&lt; ""option2, "" &lt;&lt; size / MB &lt;&lt; ""MB: "" &lt;&lt; option_2(size) &lt;&lt; ""ms"" &lt;&lt; std::endl;
    for (std::size_t size = 1 * MB; size &lt;= 4 * GB; size *= 2) std::cout &lt;&lt; ""option3, "" &lt;&lt; size / MB &lt;&lt; ""MB: "" &lt;&lt; option_3(size) &lt;&lt; ""ms"" &lt;&lt; std::endl;

    return 0;
}
</code></pre>

<p>Now the code compiles with Visual Studio 2017 and g++ 7.2.0 (which is now one of my requirements).
I let the code run with two setups:</p>

<ul>
<li>Laptop, Core i7, SSD, Ubuntu 16.04, g++ Version 7.2.0 with -std=c++11 -march=native -O3</li>
<li>Desktop, Core i7, SSD, Windows 10, Visual Studio 2017 Version 15.3.1 with /Ox /Ob2 /Oi /Ot /GT /GL /Gy</li>
</ul>

<p>Which gave the following measurements (after ditching the values for 1MB, because they were obvious outliers):
<a href=""https://i.stack.imgur.com/cOdNE.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/cOdNE.jpg"" alt=""enter image description here""></a>
<a href=""https://i.stack.imgur.com/TJJSN.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/TJJSN.jpg"" alt=""enter image description here""></a>
Both times option1 and option3 max out my SSD. I didn't expect this to see, because option2 used to be the fastest code on my machine back then.</p>

<p><strong>TL;DR</strong>: My measurements indicate to use <code>std::fstream</code> over <code>FILE</code>.</p>
","11564931"
"C++ error: expected unqualified-id","118490","","<p>I'm getting an error ""error: expected unqualified-id before '{' token"" on line 6. </p>

<p>I can't tell what's wrong.</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

class WordGame;
{
public:

    void setWord( string word )
    {
        theWord = word;
    }
    string getWord()
    {
        return theWord;
    }
    void displayWord()
    {
        cout &lt;&lt; ""Your word is "" &lt;&lt; getWord() &lt;&lt; endl;
    }
private:
    string theWord;
}


int main()
{
    string aWord;
    WordGame theGame;
    cin &gt;&gt; aWord;
    theGame.setWord(aWord);
    theGame.displaymessage();

}
</code></pre>
","<p>There should be no semicolon here:</p>

<pre><code>class WordGame;
</code></pre>

<p>...but there should be one at the end of your class definition:</p>

<pre><code>...
private:
    string theWord;
}; // &lt;-- Semicolon should be at the end of your class definition
</code></pre>
","10135260"
"How to redirect cin and cout to files?","118489","","<p>How can I redirect <code>cin</code> to <code>in.txt</code> and <code>cout</code> to <code>out.txt</code>?</p>
","<p>Here is an working example of what you want to do. Read the comments to know what each line in the code does. I've tested it on my pc with gcc 4.6.1; it works fine.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;string&gt;

void f()
{
    std::string line;
    while(std::getline(std::cin, line))  //input from the file in.txt
    {
        std::cout &lt;&lt; line &lt;&lt; ""\n"";   //output to the file out.txt
    }
}
int main()
{
    std::ifstream in(""in.txt"");
    std::streambuf *cinbuf = std::cin.rdbuf(); //save old buf
    std::cin.rdbuf(in.rdbuf()); //redirect std::cin to in.txt!

    std::ofstream out(""out.txt"");
    std::streambuf *coutbuf = std::cout.rdbuf(); //save old buf
    std::cout.rdbuf(out.rdbuf()); //redirect std::cout to out.txt!

    std::string word;
    std::cin &gt;&gt; word;           //input from the file in.txt
    std::cout &lt;&lt; word &lt;&lt; ""  "";  //output to the file out.txt

    f(); //call function


    std::cin.rdbuf(cinbuf);   //reset to standard input again
    std::cout.rdbuf(coutbuf); //reset to standard output again

    std::cin &gt;&gt; word;   //input from the standard input
    std::cout &lt;&lt; word;  //output to the standard input
}
</code></pre>

<p>You could <em>save</em> and <em>redirect</em> in just one line as:</p>

<pre><code>auto cinbuf = std::cin.rdbuf(in.rdbuf()); //save and redirect
</code></pre>

<p>Here <code>std::cin.rdbuf(in.rdbuf())</code> sets <code>std::cin's</code> buffer to <code>in.rdbuf()</code> and then returns the old buffer associated with <code>std::cin</code>. The very same can be done with <code>std::cout</code> &mdash; or any <em>stream</em> for that matter.</p>

<p>Hope that helps.</p>
","10151286"
"C++ String Declaring","118356","","<p>I have been working with VB for a while now. Now I'm giving C++ a shot, i have came across strings, i cant seem to find a way to declare a string.</p>

<p>For example in VB:</p>

<pre><code>Dim Something As String = ""Some text""
</code></pre>

<p>Or</p>

<pre><code>Dim Something As String = ListBox1.SelectedItem
</code></pre>

<p>Whats the equivalent to the code above in C++ ?</p>

<p>Any help is appreciated.</p>
","<p>C++ supplies a <a href=""http://www.cplusplus.com/reference/string/string/""><code>string</code></a> class that can be used like this:</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;

int main() {
    std::string Something = ""Some text"";
    std::cout &lt;&lt; Something &lt;&lt; std::endl;
}
</code></pre>
","10218747"
"What does '?' do in C++?","117856","","<pre><code>int qempty()
{
    return (f == r ? 1 : 0);
}
</code></pre>

<p>In the above snippet, what does ""<strong>?</strong>"" mean?  What can we replace it with?</p>
","<p>This is commonly referred to as the <a href=""http://en.wikipedia.org/wiki/%3F:"" rel=""noreferrer""><strong>conditional operator</strong></a>, and when used like this:</p>

<pre><code>condition ? result_if_true : result_if_false
</code></pre>

<p>... if the <code>condition</code> evaluates to <code>true</code>, the expression evaluates to <code>result_if_true</code>, otherwise it evaluates to <code>result_if_false</code>.</p>

<p>It is <a href=""http://en.wikipedia.org/wiki/Syntactic_sugar"" rel=""noreferrer"">syntactic sugar</a>, and in this case, it can be replaced with</p>

<pre><code>int qempty()
{ 
  if(f == r)
  {
      return 1;
  } 
  else 
  {
      return 0;
  }
}
</code></pre>

<p><strong>Note:</strong> Some people refer to <code>?:</code> it as ""<strong>the ternary operator</strong>"", because it is the only ternary operator (i.e. operator that takes three arguments) in the language they are using.</p>
","795289"
"Immediate exit of 'while' loop in C++","117842","","<p>How do I exit a <code>while</code> loop immediately without going to the end of the block?</p>

<p>For example,</p>

<pre><code>while (choice != 99)
{
    cin &gt;&gt; choice;
    if (choice == 99)
        //Exit here and don't get additional input
    cin&gt;&gt;gNum;
}
</code></pre>

<p>Any ideas?</p>
","<p>Use break?</p>

<pre><code>while(choice!=99)
{
  cin&gt;&gt;choice;
  if (choice==99)
    break;
  cin&gt;&gt;gNum;
}
</code></pre>
","873003"
"How to correctly implement custom iterators and const_iterators?","117802","","<p>I have a custom container class for which I'd like to write the <code>iterator</code> and <code>const_iterator</code> classes.</p>

<p>I never did this before and I failed to find an appropriate how-to. What are the guidelines regarding iterator creation, and what should I be aware of ?</p>

<p>I'd also like to avoid code duplication (I feel that <code>const_iterator</code> and <code>iterator</code> share many things; should one subclass the other ?).</p>

<p><em>Foot note: I'm pretty sure Boost has something to ease this but I can't use it here, for many stupid reasons.</em></p>
","<ul>
<li>Choose type of iterator which fits your container: input, output, forward etc.</li>
<li>Use base iterator classes from standard library. For example, <a href=""http://en.cppreference.com/w/cpp/iterator/iterator"" rel=""noreferrer""><code>std::iterator</code></a> with <code>random_access_iterator_tag</code>.These base classes define all type definitions required by STL and do other work.</li>
<li><p>To avoid code duplication iterator class should be a template class and be parametrized by ""value type"", ""pointer type"", ""reference type"" or all of them (depends on implementation). For example:</p>

<pre><code>// iterator class is parametrized by pointer type
template &lt;typename PointerType&gt; class MyIterator {
    // iterator class definition goes here
};

typedef MyIterator&lt;int*&gt; iterator_type;
typedef MyIterator&lt;const int*&gt; const_iterator_type;
</code></pre>

<p>Notice <code>iterator_type</code> and <code>const_iterator_type</code> type definitions: they are types for your non-const and const iterators.</p></li>
</ul>

<p>See Also: <a href=""http://en.cppreference.com/w/cpp"" rel=""noreferrer"">standard library reference</a></p>
","3582733"
"What does the fpermissive flag do?","117801","","<p>I'm just wondering what the <code>-fpermissive</code> flag does in the g++ compiler? I am getting:</p>

<blockquote>
  <p>error: taking address of temporary [-fpermissive]</p>
</blockquote>

<p>which I can solve by giving the  <code>-fpermissive</code> flag to the compiler. </p>

<p><strong>EDIT</strong>:
I just found what was causing the temporary address error part! I'm going to fix that part right now.</p>
","<p>Right from <a href=""http://gcc.gnu.org/onlinedocs/gcc-4.0.4/gcc/C_002b_002b-Dialect-Options.html#index-fpermissive-140"">the docs</a>:</p>

<blockquote>
  <p><code>-fpermissive</code><br>
      Downgrade some diagnostics about nonconformant code from errors to warnings. 
      Thus, using <code>-fpermissive</code> will allow some nonconforming code to compile.</p>
</blockquote>

<p>Bottom line: <strong>don't use</strong> it unless you know what you are doing!</p>
","8843848"
"Is it safe to delete a NULL pointer?","117744","","<p>Is it safe to delete a NULL pointer?</p>

<p>And is it a good coding style?</p>
","<p><code>delete</code> performs the check anyway, so checking it on your side adds overhead and looks uglier. A <strong>very</strong> good practice is setting the pointer to NULL after <code>delete</code> (helps avoiding double deletion and other similar memory corruption problems).</p>

<p>I'd also love if <code>delete</code> by default was setting the parameter to NULL like in </p>

<pre><code>#define my_delete(x) {delete x; x = NULL;}
</code></pre>

<p>(I know about R and L values, but wouldn't it be nice?)</p>
","4190737"
"C++ compiling on Windows and Linux: ifdef switch","117504","","<p>I want to run some c++ code on Linux and Windows.  There are some pieces of code that I want to include only for one operating system and not the other.  Is there a standard <em>#ifdef</em> that once can use?</p>

<p>Something like:</p>

<pre><code>  #ifdef LINUX_KEY_WORD
    ... // linux code goes here.
  #elif WINDOWS_KEY_WORD
    ... // windows code goes here.
  #else 
  #error ""OS not supported!""
  #endif
</code></pre>

<hr>

<p>The question is indeed a duplicate but the answers here are much better, especially the accepted one.</p>
","<p>use:</p>

<pre><code>#ifdef __linux__ 
    //linux code goes here
#elif _WIN32
    // windows code goes here
#else

#endif
</code></pre>
","6649992"
"Read file-contents into a string in C++","117422","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/116038/what-is-the-best-way-to-slurp-a-file-into-a-stdstring-in-c"">What is the best way to slurp a file into a std::string in c++?</a>  </p>
</blockquote>



<p>In scripting languages like Perl, it is possible to read a file into a variable in one shot.</p>

<pre><code>    open(FILEHANDLE,$file);
    $content=&lt;FILEHANDLE&gt;;
</code></pre>

<p>What would be the most efficient way to do this in C++? </p>
","<p>Like this:</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;string&gt;

int main(int argc, char** argv)
{

  std::ifstream ifs(""myfile.txt"");
  std::string content( (std::istreambuf_iterator&lt;char&gt;(ifs) ),
                       (std::istreambuf_iterator&lt;char&gt;()    ) );

  return 0;
}
</code></pre>

<p>The statement</p>

<pre><code>  std::string content( (std::istreambuf_iterator&lt;char&gt;(ifs) ),
                       (std::istreambuf_iterator&lt;char&gt;()    ) );
</code></pre>

<p>can be split into</p>

<pre><code>std::string content;
content.assign( (std::istreambuf_iterator&lt;char&gt;(ifs) ),
                (std::istreambuf_iterator&lt;char&gt;()    ) );
</code></pre>

<p>which is useful if you want to just overwrite the value of an existing std::string variable.</p>
","2912614"
"Why does changing 0.1f to 0 slow down performance by 10x?","117093","","<p>Why does this bit of code,</p>

<pre><code>const float x[16] = {  1.1,   1.2,   1.3,     1.4,   1.5,   1.6,   1.7,   1.8,
                       1.9,   2.0,   2.1,     2.2,   2.3,   2.4,   2.5,   2.6};
const float z[16] = {1.123, 1.234, 1.345, 156.467, 1.578, 1.689, 1.790, 1.812,
                     1.923, 2.034, 2.145,   2.256, 2.367, 2.478, 2.589, 2.690};
float y[16];
for (int i = 0; i &lt; 16; i++)
{
    y[i] = x[i];
}

for (int j = 0; j &lt; 9000000; j++)
{
    for (int i = 0; i &lt; 16; i++)
    {
        y[i] *= x[i];
        y[i] /= z[i];
        y[i] = y[i] + 0.1f; // &lt;--
        y[i] = y[i] - 0.1f; // &lt;--
    }
}
</code></pre>

<p>run more than 10 times faster than the following bit (identical except where noted)?</p>

<pre><code>const float x[16] = {  1.1,   1.2,   1.3,     1.4,   1.5,   1.6,   1.7,   1.8,
                       1.9,   2.0,   2.1,     2.2,   2.3,   2.4,   2.5,   2.6};
const float z[16] = {1.123, 1.234, 1.345, 156.467, 1.578, 1.689, 1.790, 1.812,
                     1.923, 2.034, 2.145,   2.256, 2.367, 2.478, 2.589, 2.690};
float y[16];
for (int i = 0; i &lt; 16; i++)
{
    y[i] = x[i];
}

for (int j = 0; j &lt; 9000000; j++)
{
    for (int i = 0; i &lt; 16; i++)
    {
        y[i] *= x[i];
        y[i] /= z[i];
        y[i] = y[i] + 0; // &lt;--
        y[i] = y[i] - 0; // &lt;--
    }
}
</code></pre>

<p>when compiling with Visual Studio 2010 SP1. (I haven't tested with other compilers.)</p>
","<p><strong>Welcome to the world of <a href=""http://en.wikipedia.org/wiki/Denormal_number"" rel=""noreferrer"">denormalized floating-point</a>!</strong> They can wreak havoc on performance!!!</p>

<p>Denormal (or subnormal) numbers are kind of a hack to get some extra values very close to zero out of the floating point representation. Operations on denormalized floating-point can be <strong><em>tens to hundreds of times slower</em></strong> than on normalized floating-point. This is because many processors can't handle them directly and must trap and resolve them using microcode.</p>

<p>If you print out the numbers after 10,000 iterations, you will see that they have converged to different values depending on whether <code>0</code> or <code>0.1</code> is used.</p>

<p>Here's the test code compiled on x64:</p>

<pre><code>int main() {

    double start = omp_get_wtime();

    const float x[16]={1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,2.4,2.5,2.6};
    const float z[16]={1.123,1.234,1.345,156.467,1.578,1.689,1.790,1.812,1.923,2.034,2.145,2.256,2.367,2.478,2.589,2.690};
    float y[16];
    for(int i=0;i&lt;16;i++)
    {
        y[i]=x[i];
    }
    for(int j=0;j&lt;9000000;j++)
    {
        for(int i=0;i&lt;16;i++)
        {
            y[i]*=x[i];
            y[i]/=z[i];
#ifdef FLOATING
            y[i]=y[i]+0.1f;
            y[i]=y[i]-0.1f;
#else
            y[i]=y[i]+0;
            y[i]=y[i]-0;
#endif

            if (j &gt; 10000)
                cout &lt;&lt; y[i] &lt;&lt; ""  "";
        }
        if (j &gt; 10000)
            cout &lt;&lt; endl;
    }

    double end = omp_get_wtime();
    cout &lt;&lt; end - start &lt;&lt; endl;

    system(""pause"");
    return 0;
}
</code></pre>

<p><strong>Output:</strong></p>

<pre><code>#define FLOATING
1.78814e-007  1.3411e-007  1.04308e-007  0  7.45058e-008  6.70552e-008  6.70552e-008  5.58794e-007  3.05474e-007  2.16067e-007  1.71363e-007  1.49012e-007  1.2666e-007  1.11759e-007  1.04308e-007  1.04308e-007
1.78814e-007  1.3411e-007  1.04308e-007  0  7.45058e-008  6.70552e-008  6.70552e-008  5.58794e-007  3.05474e-007  2.16067e-007  1.71363e-007  1.49012e-007  1.2666e-007  1.11759e-007  1.04308e-007  1.04308e-007

//#define FLOATING
6.30584e-044  3.92364e-044  3.08286e-044  0  1.82169e-044  1.54143e-044  2.10195e-044  2.46842e-029  7.56701e-044  4.06377e-044  3.92364e-044  3.22299e-044  3.08286e-044  2.66247e-044  2.66247e-044  2.24208e-044
6.30584e-044  3.92364e-044  3.08286e-044  0  1.82169e-044  1.54143e-044  2.10195e-044  2.45208e-029  7.56701e-044  4.06377e-044  3.92364e-044  3.22299e-044  3.08286e-044  2.66247e-044  2.66247e-044  2.24208e-044
</code></pre>

<p>Note how in the second run the numbers are very close to zero.</p>

<p>Denormalized numbers are generally rare and thus most processors don't try to handle them efficiently.</p>

<hr>

<p>To demonstrate that this has everything to do with denormalized numbers, if we <strong>flush denormals to zero</strong> by adding this to the start of the code:</p>

<pre><code>_MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON);
</code></pre>

<p>Then the version with <code>0</code> is no longer 10x slower and actually becomes faster. (This requires that the code be compiled with SSE enabled.)</p>

<p>This means that rather than using these weird lower precision almost-zero values, we just round to zero instead.</p>

<p><strong>Timings: Core i7 920 @ 3.5 GHz:</strong></p>

<pre><code>//  Don't flush denormals to zero.
0.1f: 0.564067
0   : 26.7669

//  Flush denormals to zero.
0.1f: 0.587117
0   : 0.341406
</code></pre>

<p>In the end, this really has nothing to do with whether it's an integer or floating-point. The <code>0</code> or <code>0.1f</code> is converted/stored into a register outside of both loops. So that has no effect on performance.</p>
","9314926"
".c vs .cc vs. .cpp vs .hpp vs .h vs .cxx","117072","","<blockquote>
  <p><strong>Possible Duplicates:</strong><br>
  <a href=""https://stackoverflow.com/questions/152555/h-or-hpp-for-your-class-definitions"">*.h or *.hpp for your class definitions</a><br>
  <a href=""https://stackoverflow.com/questions/1545080/correct-c-code-file-extension-cc-vs-cpp"">Correct C++ code file extension? .cc vs .cpp</a>  </p>
</blockquote>



<p>I used to think that it used to be that:</p>

<ul>
<li><code>.h</code> files are header files for C and C++, and usually only contain declarations.</li>
<li><code>.c</code> files are C source code.</li>
<li><code>.cpp</code> files are C++ source code (which can also be C source code).</li>
</ul>

<p>then files like <code>.hpp</code>, <code>.cc</code>, and <code>.cxx</code> came along, and I got totally confused... what's the difference(s) between those? When do you use the ""new"" ones?</p>
","<p>Historically, the first extensions used for C++ were <code>.c</code> and <code>.h</code>, exactly like for C.  This caused practical problems, especially the <code>.c</code> which didn't allow build systems to easily differentiate C++ and C files.</p>

<p>Unix, on which C++ has been developed, has case sensitive file systems.  So some used <code>.C</code> for C++ files.  Other used <code>.c++</code>, <code>.cc</code> and <code>.cxx</code>.  <code>.C</code> and <code>.c++</code> have the problem that they aren't available on other file systems and their use quickly dropped. DOS and Windows C++ compilers tended to use <code>.cpp</code>, and some of them make the choice difficult, if not impossible, to configure.  Portability consideration made that choice the most common, even outside MS-Windows.</p>

<p>Headers have used the corresponding <code>.H</code>, <code>.h++</code>, <code>.hh</code>, <code>.hxx</code> and <code>.hpp</code>. But unlike the main files, <code>.h</code> remains to this day a popular choice for C++ even with the disadvantage that it doesn't allow to know if the header can be included in C context or not. Standard headers now have no extension at all.</p>

<p>Additionally, some are using <code>.ii</code>, <code>.ixx</code>, <code>.ipp</code>, <code>.inl</code> for headers providing inline definitions and <code>.txx</code>, <code>.tpp</code> and <code>.tpl</code> for template definitions.  Those are either included in the headers providing the definition, or manually in the contexts where they are needed.</p>

<p>Compilers and tools usually don't care about what extensions are used, but using an extension that they associate with C++ prevents the need to track out how to configure them so they correctly recognize the language used.</p>

<p>2017 edit: the experimental module support of Visual Studio recognize <code>.ixx</code> as a default extension for module interfaces, clang++ is recognizing <code>.c++m</code>, <code>.cppm</code> and <code>.cxxm</code> for the same purpose.</p>
","5171821"
"What should be the sizeof(int) on a 64-bit machine?","116976","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/589575/size-of-int-long-etc"">size of int, long, etc</a><br>
  <a href=""https://stackoverflow.com/questions/2331751/does-the-size-of-an-int-depend-on-the-compiler-and-or-processor"">Does the size of an int depend on the compiler and/or processor?</a><br>
  <a href=""https://stackoverflow.com/questions/9689049/what-decides-the-sizeof-an-integer"">What decides the sizeof an integer?</a>  </p>
</blockquote>



<p>I'm using a <code>64-bit</code> machine.</p>

<pre><code>$ uname -m
x86_64
$ file /usr/bin/file
/usr/bin/file: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, stripped
$ 
</code></pre>

<p>When I ran the following program, I got the <code>sizeof(int)</code> as <code>4-bytes</code>.</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    printf(""sizeof(int) = %d bytes\n"", (int) sizeof(int));

    return 0;
}
</code></pre>

<p>If I'm running a <code>16-</code>, <code>32-</code> and <code>64-</code> bit machine, then doesn't it mean that the size of an <code>integer</code> is <code>16-</code>, <code>32-</code> and <code>64-</code> bit respectively?</p>

<p>In my machine, I found the <code>WORD_BIT</code> is <code>32</code>. Shouldn't it be <code>64</code> on a <code>64-bit</code> machine? </p>

<pre><code>$ getconf WORD_BIT
32
$ 
</code></pre>

<p>And, shouldn't the <code>sizeof(int)</code> be <code>64-bits</code> (<code>8 bytes</code>) in the above case?</p>
","<p>Doesn't have to be; ""64-bit machine"" can mean many things, but typically means that the CPU has registers that big.  The sizeof a type is determined by the compiler, which doesn't have to have anything to do with the actual hardware (though it typically does); in fact, different compilers on the same machine can have different values for these.</p>
","10197311"
"CMake Error at CMakeLists.txt:30 (project): No CMAKE_C_COMPILER could be found","116958","","<p>I'm trying make a Visual Studio solution with Cmake to compile the latest version of aseprite and the cmake keeps giving me the :</p>

<pre><code>No CMAKE_C_COMPILER could be found.
No CMAKE_CXX_COMPILER could be found.
</code></pre>

<p>I've already downloaded gcc and i'm using visual studio 2015.</p>

<p>I'm following this tutorial /</p>

<p><a href=""https://github.com/aseprite/aseprite/blob/master/INSTALL.md"">https://github.com/aseprite/aseprite/blob/master/INSTALL.md</a></p>

<p>I've been searching for about 3 hours and no solution on internet fitted.</p>
","<p>Those error messages</p>

<pre><code>CMake Error at ... (project): 
    No CMAKE_C_COMPILER could be found.
-- Configuring incomplete, errors occurred!
See also "".../CMakeFiles/CMakeOutput.log"".
See also "".../CMakeFiles/CMakeError.log"".
</code></pre>

<p>or</p>

<pre><code>CMake Error: your CXX compiler: ""CMAKE_CXX_COMPILER-NOTFOUND"" was not found.   
Please set CMAKE_CXX_COMPILER to a valid compiler path or name.
...
-- Configuring incomplete, errors occurred!
</code></pre>

<p>just mean that CMake was unable to find your C/CXX compiler to compile a simple test program (one of the first things CMake tries while detecting your build environment).</p>

<p>The steps to find your problem are dependent on the build environment you want to generate. The following tutorials are a collection of answers here on StackOverflow and some of my own experiences with CMake on MS Windows 7/8/10 and Ubuntu 14.04. </p>

<p><strong>Preconditions</strong> </p>

<ul>
<li>You have installed the compiler/IDE and it was able to once compile any other program (directly without CMake)

<ul>
<li>You e.g. may have the IDE but may not have installed the compiler or supporting framework itself like described in <a href=""https://stackoverflow.com/questions/42701019/problems-generating-solution-for-vs-2017-with-cmake"">Problems generating solution for VS 2017 with CMake</a> or <a href=""https://stackoverflow.com/questions/38171878/how-do-i-tell-cmake-to-use-clang-on-windows"">How do I tell CMake to use Clang on Windows?</a></li>
</ul></li>
<li>You have the latest <a href=""https://cmake.org/download/"" rel=""noreferrer"">CMake version</a></li>
<li>You have access rights on the drive you want CMake to generate your build environment</li>
<li><p>You have a clean build directory (because CMake does cache things from the last try) e.g. as sub-directory of your source tree</p>

<p><strong>Windows cmd.exe</strong></p>

<pre><code>&gt; rmdir /s /q VS2015
&gt; mkdir VS2015 
&gt; cd VS2015
</code></pre>

<p><strong>Bash shell</strong></p>

<pre><code>$ rm -rf MSYS
$ mkdir MSYS
$ cd MSYS
</code></pre>

<p>and make sure your command shell points to your newly created binary output directory.</p></li>
</ul>

<p><strong>General things you can/should try</strong></p>

<ol>
<li><p>Is CMake able find and run with any/your default compiler? Run without giving a generator</p>

<pre><code>&gt; cmake ..
-- Building for: Visual Studio 14 2015
...
</code></pre>

<p>Perfect if it correctly determined the generator to use - like here <code>Visual Studio 14 2015</code></p></li>
<li><p>What was it that actually failed? </p>

<p>In the previous build output directory look at <code>CMakeFiles\CMakeError.log</code> for any error message that make sense to you or try to open/compile the test project generated at <code>CMakeFiles\[Version]\CompilerIdC</code>|<code>CompilerIdCXX</code> directly from the command line (as found in the error log).</p></li>
</ol>

<p><strong>CMake can't find Visual Studio</strong></p>

<ol>
<li><p>Try to select the correct <a href=""http://cmake.org/cmake/help/v3.3/manual/cmake-generators.7.html#visual-studio-generators"" rel=""noreferrer"">generator version</a></p>

<pre><code>&gt; cmake --help
&gt; cmake -G ""Visual Studio 14 2015"" ..
</code></pre></li>
<li><p>If that doesn't help try to set the VS environment variables first (the path could vary)</p>

<pre><code>&gt; ""c:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat""
&gt; cmake ..
</code></pre>

<p>or use the <code>Developer Command Prompt for VS2015</code> short-cut in your Windows Start Menu under <code>All Programs</code>/<code>Visual Studio 2015</code>/<code>Visual Studio Tools</code> (thanks at <a href=""https://stackoverflow.com/users/1887976/antwane"">@Antwane</a> for the hint)</p></li>
</ol>

<p><em>Background</em>: CMake does support all Visual Studio releases and flavors (Express, Community, Professional, Premium, Test, Team, Enterprise, Ultimate, ...). To determine the location of the compiler it uses a combination of searching the registry (e.g. at <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\[Version];InstallDir</code>), system environment variables and - if none of the others did come up with something - plainly try to call the compiler.</p>

<p><strong>CMake can't find GCC (MinGW/MSys)</strong></p>

<ol>
<li><p>You start the MSys <code>bash</code> shell with <code>msys.bat</code> and just try to directly call <code>gcc</code></p>

<pre><code>$ gcc
gcc.exe: fatal error: no input files 
compilation terminated.
</code></pre>

<p>Here it did find <code>gcc</code> and is complaining that I didn't gave it any parameters to work with.</p>

<p>So the following should work:</p>

<pre><code>$ cmake -G ""MSYS Makefiles"" ..
-- The CXX compiler identification is GNU 4.8.1        
...
$ make
</code></pre>

<p>If GCC was not found call <code>export PATH=...</code> to add your compilers path (see <a href=""https://stackoverflow.com/questions/7584602/how-to-set-path-environment-variable-in-cmake-script"">How to set PATH environment variable in CMake script?</a>) and try again.</p></li>
<li><p>If it's still not working, try to set the CXX compiler path directly by exporting it (path may vary)</p>

<pre><code>$ export CC=/c/MinGW/bin/gcc.exe
$ export CXX=/c/MinGW/bin/g++.exe
$ cmake -G ""MinGW Makefiles"" ..
-- The CXX compiler identification is GNU 4.8.1        
...
$ mingw32-make
</code></pre>

<p>For more details see <a href=""https://stackoverflow.com/questions/17275348/how-to-specify-new-gcc-path-for-cmake"">how to specify new gcc path for cmake</a></p>

<p><strong>Note</strong>: When using the ""MinGW Makefiles"" generator you have to use the <code>mingw32-make</code> program distributed with MinGW</p></li>
<li><p>Still not working? That's weird. Please make sure that the compiler is there and it has executable rights (see also preconditions chapter above).</p>

<p>Otherwise the last resort of CMake is to not try any compiler search itself and set CMake's internal variables directly by</p>

<pre><code>$ cmake -DCMAKE_C_COMPILER=/c/MinGW/bin/gcc.exe -DCMAKE_CXX_COMPILER=/c/MinGW/bin/g++.exe ..
</code></pre>

<p>For more details see <a href=""https://stackoverflow.com/questions/13851830/cmake-doesnt-honour-d-cmake-cxx-compiler-g"">Cmake doesn&#39;t honour -D CMAKE_CXX_COMPILER=g++</a> and <a href=""https://stackoverflow.com/questions/16128199/cmake-error-setting-compiler"">Cmake error setting compiler</a></p>

<p>Alternatively those variables can also be set via <code>cmake-gui.exe</code> on Windows. See <a href=""https://stackoverflow.com/questions/29746950/cmake-cannot-find-compiler"">Cmake cannot find compiler</a></p></li>
</ol>

<p><em>Background</em>: Much the same as with Visual Studio. CMake supports all sorts of GCC flavors. It searches the environment variables (CC, CXX, ...) or simply tries to call the compiler. In addition it will detect any prefixes (when <a href=""http://www.vtk.org/Wiki/CMake_Cross_Compiling"" rel=""noreferrer"">cross-compiling</a>) and tries to add it to all binutils of the GNU compiler toolchain (<code>ar</code>, <code>ranlib</code>, <code>strip</code>, <code>ld</code>, <code>nm</code>, <code>objdump</code>, <code>objcopy</code>).</p>
","32830625"
"Get Unix timestamp with C++","116447","","<p>How do I get a <code>uint</code> unix timestamp in C++? I've googled a bit and it seems that most methods are looking for more convoluted ways to represent time. Can't I just get it as a <code>uint</code>?</p>
","<p><a href=""http://en.cppreference.com/w/cpp/chrono/c/time"" rel=""noreferrer""><code>time()</code></a> is the simplest function - seconds since Epoch.  Linux manpage <a href=""http://linux.die.net/man/2/time"" rel=""noreferrer"">here</a>.</p>

<p>The cppreference page linked above gives this <a href=""http://en.cppreference.com/w/cpp/chrono/c/time"" rel=""noreferrer"">example</a>:</p>

<pre><code>#include &lt;ctime&gt;
#include &lt;iostream&gt;

int main()
{
    std::time_t result = std::time(nullptr);
    std::cout &lt;&lt; std::asctime(std::localtime(&amp;result))
              &lt;&lt; result &lt;&lt; "" seconds since the Epoch\n"";
}
</code></pre>
","6012671"
"What is the difference between ""::"" ""."" and ""->"" in c++","115846","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/4984600/when-do-i-use-a-dot-arrow-or-double-colon-to-refer-to-members-of-a-class-in-c"">When do I use a dot, arrow, or double colon to refer to members of a class in C++?</a>  </p>
</blockquote>



<p>I have created the class called Kwadrat and I have three int fields inside. The Code Blocks gives me advice that i can get into the field of the object by <code>::</code>, <code>.</code> and <code>-&gt;</code>. The arrow is the one that only works, but why? What's the difference between those three?</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

class Kwadrat{
public:
int val1, val2, val3;
    Kwadrat(int val1, int val2, int val3)
    {
        this-&gt;val1 = val1;
        //this.val2 = val2;
        //this::val3 = val3;
    }
};

int main()
{
    Kwadrat* kwadrat = new Kwadrat(1,2,3);
    cout&lt;&lt;kwadrat-&gt;val1&lt;&lt;endl;
    cout&lt;&lt;kwadrat-&gt;val2&lt;&lt;endl;
    cout&lt;&lt;kwadrat-&gt;val3&lt;&lt;endl;
    return 0;
}
</code></pre>
","<p>1.<code>-&gt;</code> for accessing object member variables and methods via <code>pointer</code> to object</p>

<pre><code>Foo *foo = new Foo();
foo-&gt;member_var = 10;
foo-&gt;member_func();
</code></pre>

<p>2.<code>.</code>  for accessing object member variables and methods via object <code>instance</code></p>

<pre><code>Foo foo;
foo.member_var = 10;
foo.member_func();
</code></pre>

<p>3.<code>::</code> for accessing static variables and methods of a <code>class/struct</code> or <code>namespace</code>. It can also be used to access variables and functions from another scope (actually class, struct, namespace are scopes in that case)</p>

<pre><code>int some_val = Foo::static_var;
Foo::static_method();
int max_int = std::numeric_limits&lt;int&gt;::max();
</code></pre>
","11902837"
"Compiler error: memset was not declared in this scope","115837","","<p>I am trying to compile my C program in Ubuntu 9.10 (gcc 4.4.1).</p>

<p>I am getting this error:</p>

<pre><code>Rect.cpp:344: error: ‘memset’ was not declared in this scope
</code></pre>

<p>But the problem is I have already included in my cpp file:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
</code></pre>

<p>And the same program compiles fine under Ubuntu 8.04 (gcc 4.2.4).</p>

<p>Please tell me what am I missing.</p>
","<p>You should include <code>&lt;string.h&gt;</code> (or its C++ equivalent, <code>&lt;cstring&gt;</code>).</p>
","2505376"
"C++ where to initialize static const","115714","","<p>I have a class</p>

<pre><code>class foo {
public:
   foo();
   foo( int );
private:
   static const string s;
};
</code></pre>

<p>Where is the best place to initialize the string s in the source file?</p>
","<p>Anywhere in <strong>one</strong> compilation unit (usually a .cpp file) would do:</p>

<p>foo.h</p>

<pre><code>class foo {
    static const string s; // Can never be initialized here.
    static const char* cs; // Same with C strings.

    static const int i = 3; // Integral types can be initialized here (*)...
    static const int j; //     ... OR in cpp.
};
</code></pre>

<p>foo.cpp</p>

<pre><code>#include ""foo.h""
const string foo::s = ""foo string"";
const char* foo::cs = ""foo C string"";
// No definition for i. (*)
const int foo::j = 4;
</code></pre>

<p>(*) According to the standards you must define <code>i</code> outside of the class definition (like <code>j</code> is) if it is used in code other than just integral constant expressions. See David's comment below for details.</p>
","2605559"
"How to create a template function within a class? (C++)","115629","","<p>I know it's possible to make a template function:</p>

<pre><code>template&lt;typename T&gt;
void DoSomeThing(T x){}
</code></pre>

<p>and it's possible to make a template class:</p>

<pre><code>template&lt;typename T&gt;
class Object
{
public:
    int x;
};
</code></pre>

<p>but is it possible to make a class not within a template, and then make a function in that class a template? Ie:</p>

<pre><code>//I have no idea if this is right, this is just how I think it would look
class Object
{
public:
    template&lt;class T&gt;
    void DoX(){}
};
</code></pre>

<p>or something to the extent, where the class is not part of a template, but the function is?</p>
","<p>Your guess is the correct one.  The only thing you have to remember is that the member function template <em>definition</em> (in addition to the declaration) should be in the header file, not the cpp, though it does <em>not</em> have to be in the body of the class declaration itself.</p>
","972197"
"C99 stdint.h header and MS Visual Studio","115507","","<p>To my amazement I just discovered that the C99 stdint.h is missing from MS Visual Studio 2003 upwards.  I'm sure they have their reasons, but does anyone know where I can download a copy?  Without this header I have no definitions for useful types such as uint32_t, etc.</p>
","<p>Turns out you can download a MS version of this header from:</p>

<p><a href=""https://github.com/mattn/gntp-send/blob/master/include/msinttypes/stdint.h"" rel=""nofollow noreferrer"">https://github.com/mattn/gntp-send/blob/master/include/msinttypes/stdint.h</a></p>

<p>A portable one can be found here:</p>

<p><a href=""http://www.azillionmonkeys.com/qed/pstdint.h"" rel=""nofollow noreferrer"">http://www.azillionmonkeys.com/qed/pstdint.h</a></p>

<p>Thanks to the <a href=""http://stephendoyle.blogspot.com/2008/03/c-tr1-stdinth-still-missing-from-visual.html"" rel=""nofollow noreferrer"">Software Rambling</a>s blog.</p>
","126285"
"C# equivalent of C++ vector, with contiguous memory?","115455","","<p>What's the C# equivalent of C++ vector? </p>

<p>I am searching for this feature:</p>

<p>To have a dynamic array of contiguously stored memory that has no performance penalty for access vs. standard arrays.</p>

<p>I was searching and they say <code>.NET equivalent to the vector in C++ is the ArrayList</code>, so:</p>

<p>Do ArrayList have that contiguous memory feature?</p>
","<p>You could use a <a href=""http://msdn.microsoft.com/en-us/library/6sh2ey19.aspx"" rel=""noreferrer""><code>List&lt;T&gt;</code></a> and when <code>T</code> is a value type it will be allocated in contiguous memory which would not be the case if <code>T</code> is a reference type.</p>

<p>Example:</p>

<pre><code>List&lt;int&gt; integers = new List&lt;int&gt;();
integers.Add(1);
integers.Add(4);
integers.Add(7);

int someElement = integers[1];
</code></pre>
","6943272"
"Recommended way to insert elements into map","115394","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/326062/in-stl-maps-is-it-better-to-use-mapinsert-than"">In STL maps, is it better to use map::insert than []?</a>  </p>
</blockquote>



<p>I was wondering, when I insert element into map, what is the recommended way. Should I</p>

<pre><code>map[key] = value;
</code></pre>

<p>or</p>

<pre><code>map.insert(std::pair&lt;key_type, value_type&gt;(key, value));
</code></pre>

<p>I did the following quick test:</p>

<pre><code>#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

class Food {
public:
    Food(const std::string&amp; name) : name(name) { std::cout &lt;&lt; ""constructor with string parameter"" &lt;&lt; std::endl; }
    Food(const Food&amp; f) : name(f.name) { std::cout &lt;&lt; ""copy"" &lt;&lt; std::endl; }
    Food&amp; operator=(const Food&amp; f) { name = f.name; std::cout &lt;&lt; ""="" &lt;&lt; std::endl; return *this; } 
    Food() { std::cout &lt;&lt; ""default"" &lt;&lt; std::endl; }
    std::string name;
};

int main() {
    std::map&lt;std::string, Food&gt; m0;

/*
1) constructor with string parameter
2) copy
3) copy
4) copy
*/
    m0.insert(std::pair&lt;std::string, Food&gt;(""Key"", Food(""Ice Cream"")));

/*
1) constructor with string parameter
2) default
3) copy
4) copy
5) =
*/
    // If we do not provide default constructor.
    // C2512: 'Food::Food' : no appropriate default constructor available
    m0[""Key""] = Food(""Ice Cream"");
}
</code></pre>

<ol>
<li>I realize by using member function <code>insert</code>, less value's function call will be involved. So, is using <code>insert</code> a recommended way?</li>
<li>Why default constructor is needed, when <code>map[key] = value</code> way is being used?</li>
</ol>

<p>I know that <code>insert</code> doesn't overwrite existence key value pair, but <code>map[key] = value</code> does. However, is this the only factor I take into consideration, when try to choose among the both?</p>

<p>How about</p>

<ol>
<li><strong>Performance</strong></li>
<li><strong>Availability of value's default constructor</strong></li>
<li><strong>???</strong></li>
</ol>
","<ol>
<li><code>insert</code> is not a recommended way - it is one of the ways to insert into map. The difference with <code>operator[]</code> is that the <code>insert</code> can tell whether the element is inserted into the map. Also, if your class has no default constructor, you are forced to use <code>insert</code>.    </li>
<li><code>operator[]</code> needs the default constructor because the map checks if the element exists. If it doesn't then it creates one using default constructor and returns a reference (or const reference to it).</li>
</ol>

<p>Because map containers do not allow for duplicate key values, the insertion operation checks for each element inserted whether another element exists already in the container with the same key value, if so, the element is not inserted and its mapped value is not changed in any way.</p>
","6952583"
"Why doesn't C++ have a garbage collector?","115369","","<p>I'm not asking this question because of the merits of garbage collection first of all.  My main reason for asking this is that I do know that Bjarne Stroustrup has said that C++ will have a garbage collector at some point in time.</p>

<p>With that said, why hasn't it been added?  There are already some garbage collectors for C++.  Is this just one of those ""easier said than done"" type things?  Or are there other reasons it hasn't been added (and won't be added in C++11)?</p>

<p>Cross links:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/81062/garbage-collectors-for-c"">Garbage collectors for C++</a></li>
</ul>

<p>Just to clarify, I understand the reasons why C++ didn't have a garbage collector when it was first created.  I'm wondering why the collector can't be added in.</p>
","<p>Implicit garbage collection could have been added in, but it just didn't make the cut.  Probably due to not just implementation complications, but also due to people not being able to come to a general consensus fast enough. </p>

<p>A quote from Bjarne Stroustrup himself:</p>

<blockquote>
  <p>I had hoped that a garbage collector
  which could be optionally enabled
  would be part of C++0x, but there were
  enough technical problems that I have
  to make do with just a detailed
  specification of how such a collector
  integrates with the rest of the
  language, if provided. As is the case
  with essentially all C++0x features,
  an experimental implementation exists.</p>
</blockquote>

<p>There is a good discussion of the topic <a href=""http://www.informit.com/guides/content.aspx?g=cplusplus&amp;seqNum=222"" rel=""noreferrer"">here</a>.</p>

<p><strong>General overview:</strong></p>

<p>C++ is very powerful and allows you to do almost anything.  For this reason it doesn't automatically push many things onto you that might impact performance.   Garbage collection can be easily implemented with smart pointers (objects that wrap pointers with a reference count, which auto delete themselves when the reference count reaches 0).</p>

<p>C++ was built with competitors in mind that did not have garbage collection.  Efficiency was the main concern that C++ had to fend off criticism from in comparison to C and others. </p>

<p>There are 2 types of garbage collection...</p>

<p><strong>Explicit garbage collection:</strong></p>

<p>C++0x will have garbage collection via pointers created with shared_ptr</p>

<p>If you want it you can use it, if you don't want it you aren't forced into using it.</p>

<p>You can currently use boost:shared_ptr as well if you don't want to wait for C++0x.</p>

<p><strong>Implicit garbage collection:</strong></p>

<p>It does not have transparent garbage collection though.  It will be a focus point for future C++ specs though.</p>

<p><strong>Why Tr1 doesn't have implicit garbage collection?</strong></p>

<p>There are a lot of things that tr1 of C++0x should have had, Bjarne Stroustrup in previous interviews stated that tr1 didn't have as much as he would have liked. </p>
","147137"
"Naming convention - underscore in C++ and C# variables","115287","","<p>It's common to see a <code>_var</code> variable name in a class field. What does the underscore mean? Is there a reference for all these special naming conventions?</p>
","<p>The underscore is simply a convention; nothing more. As such, its use is always somewhat different to each person. Here's how I understand them for the two languages in question:</p>

<p>In C++, an underscore usually indicates a private member variable.</p>

<p>In C#, I usually see it used only when defining the underlying private member variable for a public property. Other private member variables would not have an underscore. This usage has largely gone to the wayside with the advent of automatic properties though.</p>

<p>Before:</p>

<pre><code>private string _name;
public string Name
{
    get { return this._name; }
    set { this._name = value; }
}
</code></pre>

<p>After:</p>

<pre><code>public string Name { get; set; }
</code></pre>
","3136618"
"How to convert string to IP address and vice versa","115193","","<p>how can I convert a string ipAddress (struct in_addr) and vice versa?
and how do I turn in unsigned long ipAddress?
thanks</p>
","<p>Use <code>inet_ntop()</code> and <code>inet_pton()</code> if you need it other way around. Do not use <code>inet_ntoa(), inet_aton()</code> and similar as they are deprecated and don't support ipv6.</p>

<p>Here is a nice <a href=""http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html#inet_ntopman"" rel=""noreferrer"">guide</a> with quite a few examples.</p>

<pre><code>// IPv4 demo of inet_ntop() and inet_pton()

struct sockaddr_in sa;
char str[INET_ADDRSTRLEN];

// store this IP address in sa:
inet_pton(AF_INET, ""192.0.2.33"", &amp;(sa.sin_addr));

// now get it back and print it
inet_ntop(AF_INET, &amp;(sa.sin_addr), str, INET_ADDRSTRLEN);

printf(""%s\n"", str); // prints ""192.0.2.33""
</code></pre>
","5328184"
"error: expected class-name before ‘{’ token","115057","","<p>I know there are a couple of similar questions(circular include) out stackoverflow and other websites. But I still can't figure it out and no solutions pop out. So I would like to post my specific one.</p>

<p>I have a Event class who has 2 and actually more subclass, which are Arrival and Landing. The compiler(g++) complains:</p>

<pre><code>g++ -c -Wall -g -DDEBUG Event.cpp -o Event.o
In file included from Event.h:15,
                 from Event.cpp:8:
Landing.h:13: error: expected class-name before ‘{’ token
make: *** [Event.o] Error 1
</code></pre>

<p>People said that it's a circular include. The 3 header files(Event.h Arrival.h Landing.h) are as follows:</p>

<p>the Event.h:</p>

<pre><code>#ifndef EVENT_H_
#define EVENT_H_

#include ""common.h""
#include ""Item.h""
#include ""Flight.h""

#include ""Landing.h""

class Arrival;

class Event : public Item {
public:
    Event(Flight* flight, int time);
    virtual ~Event();

    virtual void occur() = 0;
    virtual string extraInfo() = 0; // extra info for each concrete event

    // @implement
    int compareTo(Comparable* b);
    void print();

protected:
    /************** this is why I wanna include Landing.h *******************/
    Landing* createNewLanding(Arrival* arrival); // return a Landing obj based on arrival's info

private:
    Flight* flight;
    int time; // when this event occurs

};

#endif /* EVENT_H_ */
</code></pre>

<p>Arrival.h:</p>

<pre><code>#ifndef ARRIVAL_H_
#define ARRIVAL_H_

#include ""Event.h""

class Arrival: public Event {
public:
    Arrival(Flight* flight, int time);
    virtual ~Arrival();

    void occur();
    string extraInfo();
};

#endif /* ARRIVAL_H_ */
</code></pre>

<p>Landing.h</p>

<pre><code>#ifndef LANDING_H_
#define LANDING_H_

#include ""Event.h""

class Landing: public Event {/************** g++ complains here ****************/
public:
    static const int PERMISSION_TIME;

    Landing(Flight* flight, int time);
    virtual ~Landing();

    void occur();
    string extraInfo();
};

#endif /* LANDING_H_ */
</code></pre>

<p>UPDATE:</p>

<p>I included Landing.h due to Landing's constructor is called in the Event::createNewLanding method:</p>

<pre><code>Landing* Event::createNewLanding(Arrival* arrival) {
    return new Landing(flight, time + Landing::PERMISSION_TIME);
}
</code></pre>
","<p>Replace</p>

<pre><code>#include ""Landing.h""
</code></pre>

<p>with</p>

<pre><code>class Landing;
</code></pre>

<p>If you still get errors, also post <code>Item.h</code>, <code>Flight.h</code> and <code>common.h</code></p>

<p>EDIT: In response to comment.</p>

<p>You will need to e.g. <code>#include ""Landing.h""</code> from <code>Event.cpp</code> in order to actually use the class. You just cannot include it from <code>Event.h</code></p>
","5319927"
"A warning - comparison between signed and unsigned integer expressions","114996","","<p>I am currently working through <em>Accelerated C++</em> and have come across an issue in exercise 2-3.</p>

<p><strong>A quick overview of the program</strong> - the program basically takes a name, then displays a greeting within a frame of asterisks - i.e. Hello ! surrounded framed by *'s. </p>

<p><strong>The exercise</strong> - In the example program, the authors use <code>const int</code> to determine the padding (blank spaces) between the greeting and the asterisks. They then ask the reader, as part of the exercise, to ask the user for input as to how big they want the padding to be.</p>

<p>All this seems easy enough, I go ahead ask the user for two integers (<code>int</code>) and store them and change the program to use these integers, removing the ones used by the author, when compiling though I get the following warning;</p>

<blockquote>
  <p>Exercise2-3.cpp:46: warning: comparison between signed and unsigned integer expressions</p>
</blockquote>

<p>After some research it appears to be because the code attempts to compare one of the above integers (<code>int</code>) to a <code>string::size_type</code>, which is fine. But I was wondering - does this mean I should change one of the integers to  <code>unsigned int</code>? Is it important to explicitly state whether my integers are signed or unsigned? </p>

<pre><code> cout &lt;&lt; ""Please enter the size of the frame between top and bottom you would like "";
 int padtopbottom;
 cin &gt;&gt; padtopbottom;

 cout &lt;&lt; ""Please enter size of the frame from each side you would like: "";
 unsigned int padsides; 
 cin &gt;&gt; padsides;

 string::size_type c = 0; // definition of c in the program
 if (r == padtopbottom + 1 &amp;&amp; c == padsides + 1) { // where the error occurs
</code></pre>

<p>Above are the relevant bits of code, the <code>c</code> is of type <code>string::size_type</code> because we do not know how long the greeting might be - but why do I get this problem now, when the author's code didn't get the problem when using <code>const int</code>? In addition - to anyone who may have completed <em>Accelerated C++</em> - will this be explained later in the book?</p>

<p>I am on Linux Mint using g++ via Geany, if that helps or makes a difference (as I read that it could when determining what <code>string::size_type</code> is). </p>
","<p>It is usually a good idea to declare variables as <code>unsigned</code> or <code>size_t</code> if they will be compared to sizes, to avoid this issue.  Whenever possible, use the exact type you will be comparing against (for example, use <code>std::string::size_type</code> when comparing with a <code>std::string</code>'s length).</p>

<p>Compilers give warnings about comparing signed and unsigned types because the ranges of signed and unsigned ints are different, and when they are compared to one another, the results can be surprising.  If you have to make such a comparison, you should explicitly convert one of the values to a type compatible with the other, perhaps after checking to ensure that the conversion is valid.  For example:</p>

<pre><code>unsigned u = GetSomeUnsignedValue();
int i = GetSomeSignedValue();

if (i &gt;= 0)
{
    // i is nonnegative, so it is safe to cast to unsigned value
    if ((unsigned)i &gt;= u)
        iIsGreaterThanOrEqualToU();
    else
        iIsLessThanU();
}
else
{
    iIsNegative();
}
</code></pre>
","3660928"
"How do you iterate through every file/directory recursively in standard C++?","114940","","<p>How do you iterate through every file/directory recursively in standard C++?</p>
","<p>In standard C++, technically there is no way to do this since standard C++ has no conception of directories. If you want to expand your net a little bit, you might like to look at using <a href=""http://www.boost.org/doc/libs/1_36_0/libs/filesystem/doc/index.htm"" rel=""noreferrer"">Boost.FileSystem</a>. This has been accepted for inclusion in TR2, so this gives you the best chance of keeping your implementation as close as possible to the standard.</p>

<p>An example, taken straight from the website:</p>

<pre><code>bool find_file( const path &amp; dir_path,         // in this directory,
                const std::string &amp; file_name, // search for this name,
                path &amp; path_found )            // placing path here if found
{
  if ( !exists( dir_path ) ) return false;
  directory_iterator end_itr; // default construction yields past-the-end
  for ( directory_iterator itr( dir_path );
        itr != end_itr;
        ++itr )
  {
    if ( is_directory(itr-&gt;status()) )
    {
      if ( find_file( itr-&gt;path(), file_name, path_found ) ) return true;
    }
    else if ( itr-&gt;leaf() == file_name ) // see below
    {
      path_found = itr-&gt;path();
      return true;
    }
  }
  return false;
}
</code></pre>
","67307"
"Converting a pointer into an integer","114932","","<p>I am trying to adapt an existing code to a 64 bit machine. The main problem is that in one function, the previous coder uses a void* argument that is converted into suitable type in the function itself. A short example:</p>

<pre><code>void function(MESSAGE_ID id, void* param)
{
    if(id == FOO) {
        int real_param = (int)param;
        // ...
    }
}
</code></pre>

<p>Of course, on a 64 bit machine, I get the error:</p>

<pre><code>error: cast from 'void*' to 'int' loses precision
</code></pre>

<p>I would like to correct this so that it still works on a 32 bit machine and as cleanly as possible. Any idea ?</p>
","<p>'size_t' and 'ptrdiff_t' are required to match your architecture (whatever it is).  Therefore, I think rather than using 'int', you should be able to use 'size_t', which on a 64 bit system should be a 64 bit type.</p>

<p>This discussion <a href=""https://stackoverflow.com/questions/131803/unsigned-int-vs-sizet"">unsigned int vs size_t</a> goes into a bit more detail.</p>
","153466"
"cannot call member function without object","114915","","<p>This program has the user input <code>name</code>/<code>age</code> pairs and then outputs them, using a class.
Here is the code.</p>

<pre><code>#include ""std_lib_facilities.h""

class Name_pairs
{
public:
       bool test();
       void read_names();
       void read_ages();
       void print();
private:
        vector&lt;string&gt;names;
        vector&lt;double&gt;ages;
        string name;
        double age;
};

void Name_pairs::read_names()
{
     cout &lt;&lt; ""Enter name: "";
     cin &gt;&gt; name;
     names.push_back(name);
     cout &lt;&lt; endl;
}

void Name_pairs::read_ages()
{
     cout &lt;&lt; ""Enter corresponding age: "";
     cin &gt;&gt; age;
     ages.push_back(age);
     cout &lt;&lt; endl;
}

void Name_pairs::print()
{
     for(int i = 0; i &lt; names.size() &amp;&amp; i &lt; ages.size(); ++i)
             cout &lt;&lt; names[i] &lt;&lt; "" , "" &lt;&lt; ages[i] &lt;&lt; endl;
}

bool Name_pairs::test()
{
   int i = 0;
   if(ages[i] == 0 || names[i] == ""0"") return false;
   else{
        ++i;
        return true;}
}


int main()
{
    cout &lt;&lt; ""Enter names and ages. Use 0 to cancel.\n"";
    while(Name_pairs::test())
    {
     Name_pairs::read_names();
     Name_pairs::read_ages();
     }
     Name_pairs::print();
     keep_window_open();
}
</code></pre>

<p>However, in <code>int main()</code> when I'm trying to call the functions I get <code>""cannot call 'whatever name is' function without object.""</code> I'm guessing this is because it's looking for something like <code>variable.test</code> or <code>variable.read_names</code>. How should I go about fixing this?       </p>
","<p>You need to instantiate an object in order to call its member functions. The member functions need an object to operate on; they can't just be used on their own. The <code>main()</code> function could, for example, look like this:</p>

<pre><code>int main()
{
   Name_pairs np;
   cout &lt;&lt; ""Enter names and ages. Use 0 to cancel.\n"";
   while(np.test())
   {
      np.read_names();
      np.read_ages();
   }
   np.print();
   keep_window_open();
}
</code></pre>
","1127766"
"c++ parse int from string","114891","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/194465/how-to-parse-a-string-to-an-int-in-c"">How to parse a string to an int in C++?</a>  </p>
</blockquote>



<p>I have done some research and some people say to use atio and others say it's bad, and I can't get it to work anyways.</p>

<p>So I just want to ask flat out, whats the right way to convert a string to a int.</p>

<pre><code>string s = ""10"";
int i = s....?
</code></pre>

<p>Thanks!</p>
","<ul>
<li><p>In C++11, use <a href=""http://en.cppreference.com/w/cpp/string/basic_string/stol"" rel=""noreferrer""><code>std::stoi</code></a> as:</p>

<pre><code>std::string s = ""10"";
int i = std::stoi(s);
</code></pre>

<p>Note that <code>std::stoi</code> will throw exception of type <code>std::invalid_argument</code> if the conversion cannot be performed, or <code>std::out_of_range</code> if the conversion results in overflow(i.e when the string value is too big for <code>int</code> type). You can use <a href=""http://en.cppreference.com/w/cpp/string/basic_string/stol"" rel=""noreferrer""><code>std::stol</code></a> or <a href=""http://en.cppreference.com/w/cpp/string/basic_string/stol"" rel=""noreferrer""><code>std:stoll</code></a> though in case <code>int</code> seems too small for the input string.</p></li>
<li><p>In C++03/98, any of the following can be used:</p>

<pre><code>std::string s = ""10"";
int i;

//approach one
std::istringstream(s) &gt;&gt; i; //i is 10 after this

//approach two
sscanf(s.c_str(), ""%d"", &amp;i); //i is 10 after this
</code></pre></li>
</ul>

<p>Note that  the above two approaches would fail for input <code>s = ""10jh""</code>. They will return 10 instead of notifying error. So the safe and robust approach is to write your own function that parses the input string, and verify each character to check if it is digit or not, and then work accordingly. Here is one robust implemtation (untested though):</p>

<pre><code>int to_int(char const *s)
{
     if ( s == NULL || *s == '\0' )
        throw std::invalid_argument(""null or empty string argument"");

     bool negate = (s[0] == '-');
     if ( *s == '+' || *s == '-' ) 
         ++s;

     if ( *s == '\0')
        throw std::invalid_argument(""sign character only."");

     int result = 0;
     while(*s)
     {
          if ( *s &gt;= '0' &amp;&amp; *s &lt;= '9' )
          {
              result = result * 10  - (*s - '0');  //assume negative number
          }
          else
              throw std::invalid_argument(""invalid input string"");
          ++s;
     }
     return negate ? result : -result; //-result is positive!
} 
</code></pre>

<p>This solution is slightly modified version of <a href=""https://stackoverflow.com/questions/9620437/string-const-char-size-t-to-int"">my another solution</a>.</p>
","4442669"
"How do I set the icon for my application in visual studio 2008?","114855","","<p>How do I set the executable icon for my C++ application in visual studio 2008?</p>
","<p>First go to Resource View (from menu: View --> Other Window --> Resource View). Then in Resource View navigate through resources, if any. If there is already a resource of Icon type, added by Visual Studio, then open and edit it. Otherwise right-click and select Add Resource, and then add a new icon.</p>

<p>Use the embedded image editor in order to edit the existing or new icon. Note that an icon can include several types (sizes), selected from Image menu.</p>

<p>Then compile your project and see the effect.</p>

<p>See: <a href=""http://social.microsoft.com/Forums/en-US/vcgeneral/thread/87614e26-075c-4d5d-a45a-f462c79ab0a0"" rel=""noreferrer"">http://social.microsoft.com/Forums/en-US/vcgeneral/thread/87614e26-075c-4d5d-a45a-f462c79ab0a0</a></p>
","320688"
"Undefined Symbols for architecture x86_64: Compiling problems","114801","","<p>So I am trying to start an assignment, my professor gives us a Main.cpp, Main.h, Scanner.cpp, Scanner.h, and some other utilities.</p>

<p>My job is to create a Similarity class to compare documents using the cosine and Jaccard coefficients. However, I can not seem to get the project linked correctly, therefore I am unable to start on the actual code.</p>

<p>After trying for several hours to see what I am doing wrong, I need fresh eyes to see what I am doing wrong, I suspect it is obvious.</p>

<p>Here is the Main.cpp</p>

<pre><code>#include ""Main.h""

using namespace std;

static const string TAG = ""Main: "";

int main(int argc, char *argv[])
{
  string inStreamName;
  string logStreamName;
  string outStreamName;

  ofstream outStream;
  string timeCallOutput;
  Scanner inStream;

  Similarity similarity;

  ///////////////////////////////////////////////////////////////
  // Boilerplate for naming files and opening files
  Utils::CheckArgs(3, argc, argv, ""infilename outfilename logfilename"");
  outStreamName = static_cast&lt;string&gt;(argv[2]);
  logStreamName = static_cast&lt;string&gt;(argv[3]);

  Utils::FileOpen(outStream, outStreamName);
  Utils::LogFileOpen(logStreamName);

  timeCallOutput = Utils::timecall(""beginning"");
  Utils::logStream &lt;&lt; timeCallOutput &lt;&lt; endl;
  Utils::logStream &lt;&lt; TAG &lt;&lt; ""Beginning execution"" &lt;&lt; endl;

  Utils::logStream &lt;&lt; TAG &lt;&lt; ""outfile '"" &lt;&lt; outStreamName &lt;&lt; ""'"" &lt;&lt; endl;
  Utils::logStream &lt;&lt; TAG &lt;&lt; ""logfile '"" &lt;&lt; logStreamName &lt;&lt; ""'"" &lt;&lt; endl;
  Utils::logStream.flush();

  ///////////////////////////////////////////////////////////////
  // What follows here is the real work of this code.
  //   read the entire input file and echo it back
  //   compute the two similarity coefficients

  inStreamName = static_cast&lt;string&gt;(argv[1]);
  inStream.openFile(inStreamName);
  Utils::logStream &lt;&lt; TAG &lt;&lt; ""infile '"" &lt;&lt; inStreamName &lt;&lt; ""'"" &lt;&lt; endl;
  Utils::logStream.flush();

  similarity.readData(inStream);

  outStream &lt;&lt; TAG &lt;&lt; ""Data Begin\n"" &lt;&lt; similarity.toString() &lt;&lt; endl;
  outStream &lt;&lt; TAG &lt;&lt; ""Data End\n"" &lt;&lt; endl;
  outStream.flush();
  inStream.close();

  outStream &lt;&lt; TAG &lt;&lt; ""Begin similarity computation"" &lt;&lt; endl;
  outStream &lt;&lt; TAG &lt;&lt; ""Maximum Jaccard similarity:\n"" &lt;&lt;
                       similarity.maxJaccard() &lt;&lt; endl;
  outStream &lt;&lt; TAG &lt;&lt; ""Maximum cosine similarity:\n"" &lt;&lt;
                       similarity.maxCosine() &lt;&lt; endl;
  outStream &lt;&lt; TAG &lt;&lt; ""End similarity computation"" &lt;&lt; endl;
  outStream.flush();

  ///////////////////////////////////////////////////////////////
  // Boilerplate for terminating gracefully
  Utils::logStream &lt;&lt; TAG &lt;&lt; ""Ending execution"" &lt;&lt; endl;
  timeCallOutput = Utils::timecall(""ending"");
  Utils::logStream &lt;&lt; timeCallOutput &lt;&lt; endl;
  Utils::logStream.flush();

  outStream.flush();
  Utils::FileClose(outStream);

  Utils::FileClose(Utils::logStream);

  return 0;
}
</code></pre>

<p>And the Main.h</p>

<pre><code>#ifndef MAIN_H
#define MAIN_H

#include ""../../Utilities/Utils.h""
#include ""../../Utilities/Scanner.h""

#include ""Similarity.h""

class Main
{
public:
  int main();
  virtual ~Main();

private:

};

#endif // MAIN_H
</code></pre>

<p>My Similarity.cpp</p>

<pre><code>#include ""Similarity.h""

using namespace std;

void readData(Scanner&amp; inStream){
}

string maxCosine(){
    return ""cosine"";
}

string maxJaccard(){
    return ""jaccard"";
}

string toString(){
    return ""toString"";
}
</code></pre>

<p>And finally my Similarity.h:</p>

<pre><code>#ifndef SIMILARITY_H
#define SIMILARITY_H

#include ""../../Utilities/Scanner.h""

class Similarity
{
public:
    Similarity();
    virtual ~Similarity();

    void readData(Scanner&amp; inStream);
    string maxCosine();
    string maxJaccard();
    string toString();
private:

};

#endif
</code></pre>

<p>When I use the makefile he provided, and the one I have to use in order for his script to work to grade it I get this error:</p>

<pre><code>g++ -O3 -Wall -o Similarity.o -c Similarity.cpp
g++ -O3 -Wall -o Aprog Main.o Similarity.o Scanner.o ScanLine.o Utils.o 
Undefined symbols for architecture x86_64:
  ""Similarity::maxJaccard()"", referenced from:
      _main in Main.o
  ""Similarity::readData(Scanner&amp;)"", referenced from:
      _main in Main.o
  ""Similarity::toString()"", referenced from:
      _main in Main.o
  ""Similarity::maxCosine()"", referenced from:
      _main in Main.o
  ""Similarity::Similarity()"", referenced from:
      _main in Main.o
  ""Similarity::~Similarity()"", referenced from:
      _main in Main.o
ld: symbol(s) not found for architecture x86_64
collect2: ld returned 1 exit status
make: *** [Aprog] Error 1
</code></pre>

<p>Thank you for reading through all that, any suggestions or solutions would be greatly appreciated.</p>
","<p>There's no mystery here, the linker is telling you that you haven't defined the missing symbols, and you haven't.</p>

<p><code>Similarity::Similarity()</code> or <code>Similarity::~Similarity()</code> are just missing and you have defined the others incorrectly,</p>

<pre><code>void Similarity::readData(Scanner&amp; inStream){
}
</code></pre>

<p>not</p>

<pre><code>void readData(Scanner&amp; inStream){
}
</code></pre>

<p>etc. etc.</p>

<p>The second one is a function called readData, only the first is the readData method of the Similarity class.</p>

<p>To be clear about this, in Similarity.h</p>

<pre><code>void readData(Scanner&amp; inStream);
</code></pre>

<p>but in Similarity.cpp</p>

<pre><code>void Similarity::readData(Scanner&amp; inStream){
}
</code></pre>
","18752000"
"C/C++ Macro string concatenation","114635","","<pre><code>#define STR1      ""s""
#define STR2      ""1""
#define STR3      STR1 ## STR2
</code></pre>

<p>Is it possible to concatenate have STR3 == ""s1""?
You can do this by passing args to another Macro function.  But is there a direct way?</p>
","<p>If they're both strings you can just do:</p>

<pre><code>#define STR3 STR1 STR2
</code></pre>

<p>The preprocessor automatically concatenates adjacent strings.</p>

<p><strong>EDIT:</strong></p>

<p>As noted below, it's not the preprocessor but the compiler that does the concatenation.</p>
","5256426"
"How do I best silence a warning about unused variables?","114478","","<p>I have a cross platform application and in a few of my functions not all the values passed to functions are utilised.  Hence I get a warning from GCC telling me that there are unused variables.</p>

<p>What would be the best way of coding around the warning?</p>

<p>An #ifdef around the function? </p>

<pre><code>#ifdef _MSC_VER
void ProcessOps::sendToExternalApp(QString sAppName, QString sImagePath, qreal qrLeft, qreal qrTop, qreal qrWidth, qreal qrHeight)
#else
void ProcessOps::sendToExternalApp(QString sAppName, QString sImagePath, qreal /*qrLeft*/, qreal /*qrTop*/, qreal /*qrWidth*/, qreal /*qrHeight*/)
#endif
{
</code></pre>

<p>This is so ugly but seems like the way the compiler would prefer.</p>

<p>Or do I assign zero to the variable at the end of the function? (which I hate because it's altering something in the program flow to silence a compiler warning).</p>

<p>Is there a correct way?</p>
","<p>You can <a href=""https://stackoverflow.com/questions/308277/what-is-the-consequences-of-ignoring-warning-unused-parameter/308286#308286"">put it in ""<code>(void)var;</code>"" expression</a> (does nothing) so that a compiler sees it is used. This is portable between compilers.</p>

<p>E.g.</p>

<pre><code>void foo(int param1, int param2)
{
    (void)param2;
    bar(param1);
}
</code></pre>

<p>Or,</p>

<pre><code>#define UNUSED(expr) do { (void)(expr); } while (0)
...

void foo(int param1, int param2)
{
    UNUSED(param2);
    bar(param1);
}
</code></pre>
","1486931"
"Dynamically load a function from a DLL","114422","","<p>I'm having a little look at .dll files, I understand their usage and I'm trying to understand how to use them.</p>

<p>I have created a .dll file that contains a function that returns an integer named funci()</p>

<p>using this code, I (think) I've imported the .dll file into the project(there's no complaints):</p>

<pre><code>#include &lt;windows.h&gt;
#include &lt;iostream&gt;

int main() {
  HINSTANCE hGetProcIDDLL = LoadLibrary(""C:\\Documents and Settings\\User\\Desktop  \\fgfdg\\dgdg\\test.dll"");

  if (hGetProcIDDLL == NULL) {
    std::cout &lt;&lt; ""cannot locate the .dll file"" &lt;&lt; std::endl;
  } else {
    std::cout &lt;&lt; ""it has been called"" &lt;&lt; std::endl;
    return -1;
  }

  int a = funci();

  return a;
}

# funci function 

int funci() {
  return 40;
}
</code></pre>

<p>However when I try to compile this .cpp file that I think has imported the .dll I have the following error: </p>

<pre><code>C:\Documents and Settings\User\Desktop\fgfdg\onemore.cpp||In function 'int main()':|
C:\Documents and Settings\User\Desktop\fgfdg\onemore.cpp|16|error: 'funci' was not     declared in this scope|
||=== Build finished: 1 errors, 0 warnings ===|
</code></pre>

<p>I know a .dll is different from a header file so I know I can;t import a function like this but it's the best I could come up with to show that I've tried.</p>

<p>My question is, how can I use the ""hGetProcIDDLL"" pointer to access the function within the .dll. </p>

<p>I hope this question makes sense and I'm not barking up some wrong tree yet again.</p>
","<p><code>LoadLibrary</code> does not do what you think it does. It loads the DLL into the memory of the current process, but it does <em>not</em> magically import functions defined in it! This wouldn't be possible, as function calls are resolved by the linker at compile time while <code>LoadLibrary</code> is called at runtime (remember that C++ is a <a href=""https://en.wikipedia.org/wiki/Type_system#Static_type-checking"" rel=""nofollow noreferrer"">statically typed</a> language).</p>

<p>You need a separate WinAPI function to get the address of dynamically loaded functions: <a href=""https://msdn.microsoft.com/en-gb/library/64tkc9y5(v=vs.80).aspx"" rel=""nofollow noreferrer""><code>GetProcAddress</code></a>.</p>

<p><strong>Example</strong></p>

<pre><code>#include &lt;windows.h&gt;
#include &lt;iostream&gt;

/* Define a function pointer for our imported
 * function.
 * This reads as ""introduce the new type f_funci as the type: 
 *                pointer to a function returning an int and 
 *                taking no arguments.
 *
 * Make sure to use matching calling convention (__cdecl, __stdcall, ...)
 * with the exported function. __stdcall is the convention used by the WinAPI
 */
typedef int (__stdcall *f_funci)();

int main()
{
  HINSTANCE hGetProcIDDLL = LoadLibrary(""C:\\Documents and Settings\\User\\Desktop\\test.dll"");

  if (!hGetProcIDDLL) {
    std::cout &lt;&lt; ""could not load the dynamic library"" &lt;&lt; std::endl;
    return EXIT_FAILURE;
  }

  // resolve function address here
  f_funci funci = (f_funci)GetProcAddress(hGetProcIDDLL, ""funci"");
  if (!funci) {
    std::cout &lt;&lt; ""could not locate the function"" &lt;&lt; std::endl;
    return EXIT_FAILURE;
  }

  std::cout &lt;&lt; ""funci() returned "" &lt;&lt; funci() &lt;&lt; std::endl;

  return EXIT_SUCCESS;
}
</code></pre>

<p>Also, you should <a href=""http://msdn.microsoft.com/en-us/library/z4zxe9k8(v=vs.80).aspx"" rel=""nofollow noreferrer"">export</a> your function from the DLL correctly. This can be done like this:</p>

<pre><code>int __declspec(dllexport) __stdcall funci() {
   // ...
}
</code></pre>

<p>As Lundin notes, it's good practice to <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms683152(v=vs.85).aspx"" rel=""nofollow noreferrer"">free the handle to the library</a> if you don't need them it longer. This will cause it to get unloaded if no other process still holds a handle to the same DLL.</p>
","8696688"
"How to automatically convert strongly typed enum into int?","114194","","<pre><code>#include &lt;iostream&gt;

struct a
{
  enum LOCAL_A
  {
    A1,
    A2
  };
};
enum class b
{
    B1,
    B2
};

int foo( int input )
{
    return input;
}

int main(void)
{
    std::cout&lt;&lt;foo(a::A1)&lt;&lt;std::endl;
    std::cout&lt;&lt;foo(static_cast&lt;int&gt;(b::B2))&lt;&lt;std::endl;
}
</code></pre>

<p>The <code>a::LOCAL_A</code> is what the strongly typed enum is trying to achieve, but there is a small difference : normal enums can be converted into integer type, while strongly typed enums can not do it without a cast.</p>

<p>So, is there a way to convert a strongly typed enum value into an integer type without a cast? If yes, how?</p>
","<p>Strongly typed enums aiming to solve multiple problems and not only scoping problem as you mentioned in your question:</p>

<ol>
<li>Provide type safety, thus eliminating implicit conversion to integer by integral promotion.</li>
<li>Specify underlying types.</li>
<li>Provide strong scoping.</li>
</ol>

<p>Thus, it is impossible to implicitly convert a strongly typed enum to integers, or even its underlying type - that's the idea. So you have to use <code>static_cast</code> to make conversion explicit.</p>

<p>If your only problem is scoping and you really want to have implicit promotion to integers, then you better off using not strongly typed enum with the scope of the structure it is declared in.</p>

<p>Hope it helps!</p>
","8357366"
"C++ template typedef","114190","","<p>I have a class</p>

<pre><code>template&lt;size_t N, size_t M&gt;
class Matrix {
    // ....
};
</code></pre>

<p>I want to make a <code>typedef</code> which creates a <code>Vector</code> (column vector) which is equivalent to a <code>Matrix</code> with sizes N and 1. Something like that:</p>

<pre><code>typedef Matrix&lt;N,1&gt; Vector&lt;N&gt;;
</code></pre>

<p>Which produces compile error. The following creates something similar, but not exactly what I want:</p>

<pre><code>template &lt;int N&gt;
class Vector: public Matrix&lt;N,1&gt;
{ };
</code></pre>

<p>Is there a solution or a not too expensive workaround / best-practice for it? </p>
","<p>C++11 added <em>alias declarations</em>, which are generalization of <code>typedef</code>, allowing templates:</p>

<pre><code>template &lt;size_t N&gt;
using Vector = Matrix&lt;N, 1&gt;;
</code></pre>

<p>The type <code>Vector&lt;3&gt;</code> is equivalent to <code>Matrix&lt;3, 1&gt;</code>.</p>

<hr>

<p>In C++03, the closest approximation was:</p>

<pre><code>template &lt;size_t N&gt;
struct Vector
{
    typedef Matrix&lt;N, 1&gt; type;
};
</code></pre>

<p>Here, the type <code>Vector&lt;3&gt;::type</code> is equivalent to <code>Matrix&lt;3, 1&gt;</code>.</p>
","2795024"
"Right way to split an std::string into a vector<string>","114174","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/236129/how-to-split-a-string"">How to split a string?</a>  </p>
</blockquote>



<p>What is the right way to split a string into a vector of strings. Delimiter is space or comma.</p>
","<p>For space separated strings, then you can do this:</p>

<pre><code>std::string s = ""What is the right way to split a string into a vector of strings"";
std::stringstream ss(s);
std::istream_iterator&lt;std::string&gt; begin(ss);
std::istream_iterator&lt;std::string&gt; end;
std::vector&lt;std::string&gt; vstrings(begin, end);
std::copy(vstrings.begin(), vstrings.end(), std::ostream_iterator&lt;std::string&gt;(std::cout, ""\n""));
</code></pre>

<p>Output:</p>

<pre><code>What
is
the
right
way
to
split
a
string
into
a
vector
of
strings
</code></pre>

<p>Online Demo : <a href=""http://ideone.com/d8E2G"" rel=""noreferrer"">http://ideone.com/d8E2G</a></p>

<hr>

<h1>string that have both comma and space</h1>

<pre><code>struct tokens: std::ctype&lt;char&gt; 
{
    tokens(): std::ctype&lt;char&gt;(get_table()) {}

    static std::ctype_base::mask const* get_table()
    {
        typedef std::ctype&lt;char&gt; cctype;
        static const cctype::mask *const_rc= cctype::classic_table();

        static cctype::mask rc[cctype::table_size];
        std::memcpy(rc, const_rc, cctype::table_size * sizeof(cctype::mask));

        rc[','] = std::ctype_base::space; 
        rc[' '] = std::ctype_base::space; 
        return &amp;rc[0];
    }
};

std::string s = ""right way, wrong way, correct way"";
std::stringstream ss(s);
ss.imbue(std::locale(std::locale(), new tokens()));
std::istream_iterator&lt;std::string&gt; begin(ss);
std::istream_iterator&lt;std::string&gt; end;
std::vector&lt;std::string&gt; vstrings(begin, end);
std::copy(vstrings.begin(), vstrings.end(), std::ostream_iterator&lt;std::string&gt;(std::cout, ""\n""));
</code></pre>

<p>Output:</p>

<pre><code>right
way
wrong
way
correct
way
</code></pre>

<p>Online Demo : <a href=""http://ideone.com/aKL0m"" rel=""noreferrer"">http://ideone.com/aKL0m</a></p>
","5607650"
"C++: Pointer to class data member ""::*""","114112","","<p>I came across this strange code snippet which compiles fine:</p>

<pre><code>class Car
{
    public:
    int speed;
};

int main()
{
    int Car::*pSpeed = &amp;Car::speed;
    return 0;
}
</code></pre>

<p><strong>Why</strong> does C++ have this pointer to a non-static data member of a class? <strong>What</strong> is the use of this strange pointer in real code?</p>
","<p>It's a ""pointer to member"" - the following code illustrates its use:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

class Car
{
    public:
    int speed;
};

int main()
{
    int Car::*pSpeed = &amp;Car::speed;

    Car c1;
    c1.speed = 1;       // direct access
    cout &lt;&lt; ""speed is "" &lt;&lt; c1.speed &lt;&lt; endl;
    c1.*pSpeed = 2;     // access via pointer to member
    cout &lt;&lt; ""speed is "" &lt;&lt; c1.speed &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>As to <em>why</em> you would want to do that, well it gives you another level of indirection that can solve some tricky problems. But to be honest, I've never had to use them in my own code.</p>

<p><strong>Edit:</strong> I can't think off-hand of a convincing use for pointers to member data. Pointer to member functions can be used  in pluggable architectures, but once again producing an example in a small space defeats me. The following is my best (untested) try - an Apply function that would do some pre &amp;post processing before applying a user-selected member function to an object:</p>

<pre><code>void Apply( SomeClass * c, void (SomeClass::*func)() ) {
    // do hefty pre-call processing
    (c-&gt;*func)();  // call user specified function
    // do hefty post-call processing
}
</code></pre>

<p>The parentheses around <code>c-&gt;*func</code> are necessary because the <code>-&gt;*</code> operator has lower precedence than the function call operator.</p>
","670744"
"Algorithm to convert RGB to HSV and HSV to RGB in range 0-255 for both","114035","","<p>I am looking for color space converter from RGB to HSV, specifically for the range 0 to 255 for both color spaces.</p>
","<p>I've used these for a long time - no idea where they came from at this point... Note that the inputs and outputs, except for the angle in degrees, are in the range of 0 to 1.0.</p>

<p>NOTE: this code does no real sanity checking on inputs. Proceed with caution!</p>

<pre><code>typedef struct {
    double r;       // a fraction between 0 and 1
    double g;       // a fraction between 0 and 1
    double b;       // a fraction between 0 and 1
} rgb;

typedef struct {
    double h;       // angle in degrees
    double s;       // a fraction between 0 and 1
    double v;       // a fraction between 0 and 1
} hsv;

static hsv   rgb2hsv(rgb in);
static rgb   hsv2rgb(hsv in);

hsv rgb2hsv(rgb in)
{
    hsv         out;
    double      min, max, delta;

    min = in.r &lt; in.g ? in.r : in.g;
    min = min  &lt; in.b ? min  : in.b;

    max = in.r &gt; in.g ? in.r : in.g;
    max = max  &gt; in.b ? max  : in.b;

    out.v = max;                                // v
    delta = max - min;
    if (delta &lt; 0.00001)
    {
        out.s = 0;
        out.h = 0; // undefined, maybe nan?
        return out;
    }
    if( max &gt; 0.0 ) { // NOTE: if Max is == 0, this divide would cause a crash
        out.s = (delta / max);                  // s
    } else {
        // if max is 0, then r = g = b = 0              
        // s = 0, h is undefined
        out.s = 0.0;
        out.h = NAN;                            // its now undefined
        return out;
    }
    if( in.r &gt;= max )                           // &gt; is bogus, just keeps compilor happy
        out.h = ( in.g - in.b ) / delta;        // between yellow &amp; magenta
    else
    if( in.g &gt;= max )
        out.h = 2.0 + ( in.b - in.r ) / delta;  // between cyan &amp; yellow
    else
        out.h = 4.0 + ( in.r - in.g ) / delta;  // between magenta &amp; cyan

    out.h *= 60.0;                              // degrees

    if( out.h &lt; 0.0 )
        out.h += 360.0;

    return out;
}


rgb hsv2rgb(hsv in)
{
    double      hh, p, q, t, ff;
    long        i;
    rgb         out;

    if(in.s &lt;= 0.0) {       // &lt; is bogus, just shuts up warnings
        out.r = in.v;
        out.g = in.v;
        out.b = in.v;
        return out;
    }
    hh = in.h;
    if(hh &gt;= 360.0) hh = 0.0;
    hh /= 60.0;
    i = (long)hh;
    ff = hh - i;
    p = in.v * (1.0 - in.s);
    q = in.v * (1.0 - (in.s * ff));
    t = in.v * (1.0 - (in.s * (1.0 - ff)));

    switch(i) {
    case 0:
        out.r = in.v;
        out.g = t;
        out.b = p;
        break;
    case 1:
        out.r = q;
        out.g = in.v;
        out.b = p;
        break;
    case 2:
        out.r = p;
        out.g = in.v;
        out.b = t;
        break;

    case 3:
        out.r = p;
        out.g = q;
        out.b = in.v;
        break;
    case 4:
        out.r = t;
        out.g = p;
        out.b = in.v;
        break;
    case 5:
    default:
        out.r = in.v;
        out.g = p;
        out.b = q;
        break;
    }
    return out;     
}
</code></pre>
","6930407"
"What is the 'override' keyword in C++ used for?","113965","","<p>I am a beginner in C++. I have come across <code>override</code> keyword used in the header file that I am working on. May I know, what is real use of <code>override</code>, perhaps with an example would be easy to understand.</p>
","<p>The <code>override</code> keyword serves two purposes: </p>

<ol>
<li>It shows the reader of the code that ""this is a virtual method, that is overriding a virtual method of the base class.""</li>
<li>The compiler also knows that it's an override, so it can ""check"" that you are not altering/adding new methods that you think are overrides. </li>
</ol>

<p>To explain the latter:</p>

<pre><code>class base
{
  public:
    virtual int foo(float x) = 0; 
};


class derived: public base
{
   public:
     int foo(float x) override { ... do stuff with x and such ... }
}

class derived2: public base
{
   public:
     int foo(int x) override { ... } 
};
</code></pre>

<p>In <code>derived2</code> the compiler will issue an error for ""changing the type"". Without <code>override</code>, at most the compiler would give a warning for ""you are hiding virtual method by same name"". </p>
","18198377"
"OpenCV get pixel channel value from Mat image","113849","","<p>Maybe I'm not looking hard enough, but everything seems to want me to use an array. Thus, how do I get the channel value for a particular pixel for foo if foo is something like <code>Mat foo = imread(""bar.png"")</code>?</p>
","<p>Assuming the type is CV_8UC3 you would do this:</p>

<pre><code>for(int i = 0; i &lt; foo.rows; i++)
{
    for(int j = 0; j &lt; foo.cols; j++)
    {
        Vec3b bgrPixel = foo.at&lt;Vec3b&gt;(i, j);

        // do something with BGR values...
    }
}
</code></pre>

<p><a href=""http://opencv.itseez.com/modules/core/doc/basic_structures.html?highlight=vec3b#vec"" rel=""noreferrer"">Here</a> is the documentation for Vec3b. Hope that helps! Also, don't forget OpenCV stores things internally as <strong>BGR</strong> not RGB.</p>

<p><strong>EDIT :</strong><br>
For performance reasons, you may want to use direct access to the data buffer in order to process the pixel values:</p>

<p>Here is how you might go about this:</p>

<pre><code>uint8_t* pixelPtr = (uint8_t*)foo.data;
int cn = foo.channels();
Scalar_&lt;uint8_t&gt; bgrPixel;

for(int i = 0; i &lt; foo.rows; i++)
{
    for(int j = 0; j &lt; foo.cols; j++)
    {
        bgrPixel.val[0] = pixelPtr[i*foo.cols*cn + j*cn + 0]; // B
        bgrPixel.val[1] = pixelPtr[i*foo.cols*cn + j*cn + 1]; // G
        bgrPixel.val[2] = pixelPtr[i*foo.cols*cn + j*cn + 2]; // R

        // do something with BGR values...
    }
}
</code></pre>

<p>Or alternatively:</p>

<pre><code>int cn = foo.channels();
Scalar_&lt;uint8_t&gt; bgrPixel;

for(int i = 0; i &lt; foo.rows; i++)
{
    uint8_t* rowPtr = foo.row(i);
    for(int j = 0; j &lt; foo.cols; j++)
    {
        bgrPixel.val[0] = rowPtr[j*cn + 0]; // B
        bgrPixel.val[1] = rowPtr[j*cn + 1]; // G
        bgrPixel.val[2] = rowPtr[j*cn + 2]; // R

        // do something with BGR values...
    }
}
</code></pre>
","7903042"
"Difference between uint32 and uint32_t","113565","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/11786113/difference-between-different-integer-types"">Difference between different integer types</a>  </p>
</blockquote>



<p>What is the difference between uint32 and uint32_t in C/C++?</p>

<p>Are they OS dependent?</p>

<p>In which case should I use one or another?</p>

<p>Thanks</p>
","<p><code>uint32_t</code> is standard, <code>uint32</code> is not.  That is, if you include <code>&lt;inttypes.h&gt;</code> or <code>&lt;stdint.h&gt;</code>, you will get a definition of <code>uint32_t</code>.  <code>uint32</code> is a typedef in some local code base, but you should not expect it to exist unless you define it yourself.  And defining it yourself is a bad idea.</p>
","13362099"
"C++: constructor initializer for arrays","113281","","<p>I'm having a brain cramp... how do I initialize an array of objects properly in C++?</p>

<p>non-array example:</p>

<pre><code>struct Foo { Foo(int x) { /* ... */  } };

struct Bar { 
     Foo foo;

     Bar() : foo(4) {}
};
</code></pre>

<p>array example:</p>

<pre><code>struct Foo { Foo(int x) { /* ... */  } };

struct Baz { 
     Foo foo[3];

     // ??? I know the following syntax is wrong, but what's correct?
     Baz() : foo[0](4), foo[1](5), foo[2](6) {}
};
</code></pre>

<p><strong>edit:</strong> Wild &amp; crazy workaround ideas are appreciated, but they won't help me in my case. I'm working on an embedded processor where std::vector and other STL constructs are not available, and the obvious workaround is to make a default constructor and have an explicit <code>init()</code> method that can be called after construction-time, so that I don't have to use initializers at all. (This is one of those cases where I've gotten spoiled by Java's <code>final</code> keyword + flexibility with constructors.)</p>
","<p>There is no way.  You need a default constructor for array members and it will be called, afterwards, you can do any initialization you want in the constructor.</p>
","2409853"
"Split string by single spaces","113159","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/236129/how-to-split-a-string-in-c"">How to split a string in C++?</a>  </p>
</blockquote>



<p>I need to split a string by single spaces and store it into an array of strings. I can achieve this using a istringstream, but what I am not being able to achieve is this:</p>

<p>I want every space to terminate the current word. So, if there are two spaces consecutively, one element of my array should be blank.</p>

<p>For example:</p>

<p>(underscore denotes space)</p>

<pre><code>This_is_a_string.
gets split into:
A[0] = This
A[1] = is
A[2] = a
A[3] = string.

This__is_a_string.
gets split into:
A[0] = This
A[1] = """"
A[2] = is
A[3] = a
A[4] = string.
</code></pre>

<p>How can I implement this?</p>
","<p>You can even develop your own split function (I know, little old-fashioned):</p>

<pre><code>unsigned int split(const std::string &amp;txt, std::vector&lt;std::string&gt; &amp;strs, char ch)
{
    unsigned int pos = txt.find( ch );
    unsigned int initialPos = 0;
    strs.clear();

    // Decompose statement
    while( pos != std::string::npos ) {
        strs.push_back( txt.substr( initialPos, pos - initialPos + 1 ) );
        initialPos = pos + 1;

        pos = txt.find( ch, initialPos );
    }

    // Add the last one
    strs.push_back( txt.substr( initialPos, std::min( pos, txt.size() ) - initialPos + 1 ) );

    return strs.size();
}
</code></pre>

<p>Then you just need to invoke it with a vector&lt;string&gt; as argument:</p>

<pre><code>int main()
{
    std::vector&lt;std::string&gt; v;

    split( ""This  is a  test"", v, ' ' );
    show( v );

    return 0;
}
</code></pre>
","5888676"
"Stack, Static, and Heap in C++","112753","","<p>I've searched, but I've not understood very well these three concepts. When do I have to use dynamic allocation (in the heap) and what's its real advantage? What are the problems of static and stack? Could I write an entire application without allocating variables in the heap?   </p>

<p>I heard that others languages incorporate a ""garbage collector"" so you don't have to worry about memory. What does the garbage collector do?  </p>

<p>What could you do manipulating the memory by yourself that you couldn't do using this garbage collector?</p>

<p>Once someone said to me that with this declaration:</p>

<pre><code>int * asafe=new int;
</code></pre>

<p>I have a ""pointer to a pointer"". What does it mean? It is different of:</p>

<pre><code>asafe=new int;
</code></pre>

<p>?</p>
","<p><a href=""https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap"">A similar question</a> was asked, but it didn't ask about statics.</p>

<h2>Summary of what static, heap, and stack memory are:</h2>

<ul>
<li><p>A static variable is basically a global variable, even if you cannot access it globally. Usually there is an address for it that is in the executable itself. There is only one copy for the entire program. No matter how many times you go into a function call (or class) (and in how many threads!) the variable is referring to the same memory location.</p></li>
<li><p>The heap is a bunch of memory that can be used dynamically. If you want 4kb for an object then the dynamic allocator will look through its list of free space in the heap, pick out a 4kb chunk, and give it to you. Generally, the dynamic memory allocator (malloc, new, et c.) starts at the end of memory and works backwards.</p></li>
<li><p>Explaining how a stack grows and shrinks is a bit outside the scope of this answer, but suffice to say you always add and remove from the end only. Stacks usually start high and grow down to lower addresses. You run out of memory when the stack meets the dynamic allocator somewhere in the middle (but refer to physical versus virtual memory and fragmentation). Multiple threads will require multiple stacks (the process generally reserves a minimum size for the stack).</p></li>
</ul>

<h2>When you would want to use each one:</h2>

<ul>
<li><p>Statics/globals are useful for memory that you know you will always need and you know that you don't ever want to deallocate. (By the way, embedded environments may be thought of as having only static memory... the stack and heap are part of a known address space shared by a third memory type: the program code. Programs will often do dynamic allocation out of their static memory when they need things like linked lists. But regardless, the static memory itself (the buffer) is not itself ""allocated"", but rather other objects are allocated out of the memory held by the buffer for this purpose. You can do this in non-embedded as well, and console games will frequently eschew the built in dynamic memory mechanisms in favor of tightly controlling the allocation process by using buffers of preset sizes for all allocations.)</p></li>
<li><p>Stack variables are useful for when you know that as long as the function is in scope (on the stack somewhere), you will want the variables to remain. Stacks are nice for variables that you need for the code where they are located, but which isn't needed outside that code. They are also really nice for when you are accessing a resource, like a file, and want the resource to automatically go away when you leave that code.</p></li>
<li><p>Heap allocations (dynamically allocated memory) is useful when you want to be more flexible than the above. Frequently, a function gets called to respond to an event (the user clicks the ""create box"" button). The proper response may require allocating a new object (a new Box object) that should stick around long after the function is exited, so it can't be on the stack. But you don't know how many boxes you would want at the start of the program, so it can't be a static.</p></li>
</ul>

<h2>Garbage Collection</h2>

<p>I've heard a lot lately about how great Garbage Collectors are, so maybe a bit of a dissenting voice would be helpful.</p>

<p>Garbage Collection is a wonderful mechanism for when performance is not a huge issue. I hear GCs are getting better and more sophisticated, but the fact is, you may be forced to accept a performance penalty (depending upon use case). And if you're lazy, it still may not work properly. At the best of times, Garbage Collectors realize that your memory goes away when it realizes that there are no more references to it (see <a href=""http://en.wikipedia.org/wiki/Reference_counting"" rel=""noreferrer"">reference counting</a>). But, if you have an object that refers to itself (possibly by referring to another object which refers back), then reference counting alone will not indicate that the memory can be deleted. In this case, the GC needs to look at the entire reference soup and figure out if there are any islands that are only referred to by themselves. Offhand, I'd guess that to be an O(n^2) operation, but whatever it is, it can get bad if you are at all concerned with performance. (Edit: Martin B <a href=""http://www.hpl.hp.com/personal/Hans_Boehm/gc/complexity.html"" rel=""noreferrer"">points out</a> that it is O(n) for reasonably efficient algorithms. That is still O(n) too much if you are concerned with performance and can deallocate in constant time without garbage collection.)</p>

<p>Personally, when I hear people say that C++ doesn't have garbage collection, my mind tags that as a feature of C++, but I'm probably in the minority. Probably the hardest thing for people to learn about programming in C and C++ are pointers and how to correctly handle their dynamic memory allocations. Some other languages, like Python, would be horrible without GC, so I think it comes down to what you want out of a language. If you want dependable performance, then C++ without garbage collection is the only thing this side of Fortran that I can think of. If you want ease of use and training wheels (to save you from crashing without requiring that you learn ""proper"" memory management), pick something with a GC. Even if you know how to manage memory well, it will save you time which you can spend optimizing other code. There really isn't much of a performance penalty anymore, but if you really need dependable performance (and the ability to know exactly what is going on, when, under the covers) then I'd stick with C++. There is a reason that every major game engine that I've ever heard of is in C++ (if not C or assembly). Python, et al are fine for scripting, but not the main game engine. </p>
","409072"
"How to get position of a certain element in strings vector, to use it as an index in ints vector?","112730","","<p>I am trying to get the index of an element in a vector of <code>strings</code>, to use it as an index in another vector of <code>int</code> type, is this possible ?</p>

<p>Example: </p>

<pre><code>vector &lt;string&gt; Names;
vector &lt;int&gt; Numbers;

 ... 
// condition to check whether the name exists or not
if((find(Names.begin(), Names.end(), old_name_)) != Names.end())  
    {   // if yes
        cout &lt;&lt;""Enter the new name.""&lt;&lt; endl;
        cin &gt;&gt; name;
        replace(Names.begin(), Names.end(), old_name_, name);
    }
</code></pre>

<p>Now I want to get the position of <code>old_name</code> in the <code>Names</code> vector, to use it in accessing certain element in <code>Numbers</code> vector. So that I can say:</p>

<pre><code>Numbers[position] = 3 ; // or whatever value assigned here.
</code></pre>

<p>I tried using:</p>

<pre><code>vector &lt;string&gt; :: const_iterator pos;
pos = (find(Names.begin(), Names.end(), old_name_))
Numbers[pos] = 3;
</code></pre>

<p>but obviously this doesn't work since <code>pos</code> is of type string !</p>
","<p>To get a position of an element in a vector knowing an iterator pointing to the element, simply subtract <code>v.begin()</code> from the iterator:</p>

<pre><code>ptrdiff_t pos = find(Names.begin(), Names.end(), old_name_) - Names.begin();
</code></pre>

<p>Now you need to check <code>pos</code> against <code>Names.size()</code> to see if it is out of bounds or not:</p>

<pre><code>if(pos &gt;= Names.size()) {
    //old_name_ not found
}
</code></pre>

<p>vector iterators behave in ways similar to array pointers; most of what you know about pointer arithmetic can be applied to vector iterators as well.</p>

<p>Starting with C++11 you can use <a href=""http://en.cppreference.com/w/cpp/iterator/distance"" rel=""noreferrer""><code>std::distance</code></a> in place of subtraction for both iterators and pointers:</p>

<pre><code>ptrdiff_t pos = distance(Names.begin(), find(Names.begin(), Names.end(), old_name_));
</code></pre>
","15099748"
"How to implement an STL-style iterator and avoid common pitfalls?","112531","","<p>I made a collection for which I want to provide an STL-style, random-access iterator. I was searching around for an example implementation of an iterator but I didn't find any. I know about the need for const overloads of <code>[]</code> and <code>*</code> operators. What are the requirements for an iterator to be ""STL-style"" and what are some other pitfalls to avoid (if any)?</p>

<p>Additional context: This is for a library and I don't want to introduce any dependency on it unless I really need to. I write my own collection to be able to provide binary compatibility between C++03 and C++11 with the same compiler (so no STL which would probably break).</p>
","<p><a href=""http://www.cplusplus.com/reference/std/iterator/"" rel=""noreferrer"">http://www.cplusplus.com/reference/std/iterator/</a> has a handy chart that details the specs of § 24.2.2 of the C++11 standard.  Basically, the iterators have tags that describe the valid operations, and the tags have a hierarchy.  Below is purely symbolic, these classes don't actually exist as such.</p>

<pre><code>iterator {
    iterator(const iterator&amp;);
    ~iterator();
    iterator&amp; operator=(const iterator&amp;);
    iterator&amp; operator++(); //prefix increment
    reference operator*() const;
    friend void swap(iterator&amp; lhs, iterator&amp; rhs); //C++11 I think
};

input_iterator : public virtual iterator {
    iterator operator++(int); //postfix increment
    value_type operator*() const;
    pointer operator-&gt;() const;
    friend bool operator==(const iterator&amp;, const iterator&amp;);
    friend bool operator!=(const iterator&amp;, const iterator&amp;); 
};
//once an input iterator has been dereferenced, it is 
//undefined to dereference one before that.

output_iterator : public virtual iterator {
    reference operator*() const;
    iterator operator++(int); //postfix increment
};
//dereferences may only be on the left side of an assignment
//once an output iterator has been dereferenced, it is 
//undefined to dereference one before that.

forward_iterator : input_iterator, output_iterator {
    forward_iterator();
};
//multiple passes allowed

bidirectional_iterator : forward_iterator {
    iterator&amp; operator--(); //prefix decrement
    iterator operator--(int); //postfix decrement
};

random_access_iterator : bidirectional_iterator {
    friend bool operator&lt;(const iterator&amp;, const iterator&amp;);
    friend bool operator&gt;(const iterator&amp;, const iterator&amp;);
    friend bool operator&lt;=(const iterator&amp;, const iterator&amp;);
    friend bool operator&gt;=(const iterator&amp;, const iterator&amp;);

    iterator&amp; operator+=(size_type);
    friend iterator operator+(const iterator&amp;, size_type);
    friend iterator operator+(size_type, const iterator&amp;);
    iterator&amp; operator-=(size_type);  
    friend iterator operator-(const iterator&amp;, size_type);
    friend difference_type operator-(iterator, iterator);

    reference operator[](size_type) const;
};
</code></pre>

<p>You can either specialize <code>std::iterator_traits&lt;youriterator&gt;</code>, or put the same typedefs in the iterator itself, or inherit from <code>std::iterator</code> (which has these typedefs).  I prefer the second option, to avoid changing things in the <code>std</code> namespace, and for readability, but most people inherit from <code>std::iterator</code>.</p>

<pre><code>struct std::iterator_traits&lt;youriterator&gt; {        
    typedef ???? difference_type; //almost always ptrdiff_t
    typedef ???? value_type; //almost always T
    typedef ???? reference; //almost always T&amp; or const T&amp;
    typedef ???? pointer; //almost always T* or const T*
    typedef ???? iterator_category;  //usually std::forward_iterator_tag or similar
};
</code></pre>

<p>Note the iterator_category should be one of <code>std::input_iterator_tag</code>, <code>std::output_iterator_tag</code>, <code>std::forward_iterator_tag</code>, <code>std::bidirectional_iterator_tag</code>, or <code>std::random_access_iterator_tag</code>, depending on which requirements your iterator satisfies.  Depending on your iterator, you may choose to specialize <code>std::next</code>, <code>std::prev</code>, <code>std::advance</code>, and <code>std::distance</code> as well, but this is rarely needed.  In <em>extremely rare</em> cases you may wish to specialize <code>std::begin</code> and <code>std::end</code>.</p>

<p>Your container should probably also have a <code>const_iterator</code>, which is a (possibly mutable) iterator to constant data that is similar to your <code>iterator</code> except it should be implicitly constructable from a <code>iterator</code> and users should be unable to modify the data.  It is common for its internal pointer to be a pointer to non-constant data, and have <code>iterator</code> inherit from <code>const_iterator</code> so as to minimize code duplication.</p>

<p>My post at <a href=""https://stackoverflow.com/questions/7758580/writing-your-own-stl-container/7759622#7759622"">Writing your own STL Container</a> has a more complete container/iterator prototype.</p>
","8054856"
"Adding to a vector of pair","112251","","<p>I have a <code>vector</code> of <code>pair</code> like such:</p>

<pre><code>vector&lt;pair&lt;string,double&gt;&gt; revenue;
</code></pre>

<p>I want to add a string and a double from a map like this:</p>

<pre><code>revenue[i].first = ""string"";
revenue[i].second = map[i].second;
</code></pre>

<p>But since revenue isn't initialized, it comes up with an out of bounds error. So I tried using <code>vector::push_back</code> like this:</p>

<pre><code>revenue.push_back(""string"",map[i].second);
</code></pre>

<p>But that says cannot take two arguments. So how can I add to this <code>vector</code> of <code>pair</code>?</p>
","<p>Use <a href=""http://en.cppreference.com/w/cpp/utility/pair/make_pair""><code>std::make_pair</code></a>:</p>

<pre><code>revenue.push_back(std::make_pair(""string"",map[i].second));
</code></pre>
","7897057"
"error: use of deleted function","112148","","<p>I've been working on some C++ code that a friend has written and I get the following error that I have never seen before when compiling with gcc4.6:</p>

<pre><code>error: use of deleted function

‘GameFSM_&lt;std::array&lt;C, 2ul&gt; &gt;::hdealt::hdealt()’ is implicitly deleted because the default definition would be ill-formed:
uninitialized non-static const member ‘const h_t FlopPokerGameFSM_&lt;std::array&lt;C, 2ul&gt; &gt;::hdealt::h’
</code></pre>

<p>Edit: This comes from a part of the code using boost MSM: <a href=""http://www.boost.org/doc/libs/1_46_1/libs/msm/doc/HTML/index.html"">Boost Webpage</a></p>

<p>Edit2: There is no <code>= delete()</code> used anywhere in the sourcecode.</p>

<p>Generally speaking, what does this error mean? What should I be looking for when this type of error occurs?</p>
","<p>I don't think the other answers mentioning the <code>=deleted;</code> syntax are correct. The error message clearly says that the default constructor has been deleted <em>implicitly</em>. It even says why: the class contains a non-static, const variable, which would not be initialized by the default ctor.</p>

<pre><code>class X {
    const int x;
};
</code></pre>

<p>Since <code>X::x</code> is <code>const</code>, it must be initialized -- but a default ctor wouldn't normally initialize it (because it's a POD type). Therefore, to get a default ctor, you need to define one yourself (and it must initialize <code>x</code>). You can get the same kind of situation with a member that's a reference:</p>

<pre><code>class X { 
    whatever &amp;x;
};
</code></pre>

<p>It's probably worth noting that both of these will also disable implicit creation of an assignment operator as well, and for much the same reason. The implicit assignment operator normally does members-wise assignment, but in these cases it can't because the member is one that can't be assigned. To make assignment work, you need to write your own assignment operator.</p>

<p>This is why a <code>const</code> member should <em>typically</em> be static -- when you do an assignment, you can't assign the const member anyway. In a typical case all your instances are going to have the same value so they might as well share access to a single variable instead of having lots of copies of a variable that will all have the same value.</p>

<p>It is possible, of course, to create instances with different values though -- you (for example) pass a value when you create the object, so two different objects can have two different values. If, however, you try to do something like swapping them, the const member will retain its original value instead of being swapped.</p>
","5966859"
"C++: long long int vs. long int vs. int64_t","111956","","<p>I experienced some odd behavior while using C++ type traits and have narrowed my problem down to this quirky little problem for which I will give a ton of explanation since I do not want to leave anything open for misinterpretation.</p>

<p>Say you have a program like so:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cstdint&gt;

template &lt;typename T&gt;
bool is_int64() { return false; }

template &lt;&gt;
bool is_int64&lt;int64_t&gt;() { return true; }

int main()
{
 std::cout &lt;&lt; ""int:\t"" &lt;&lt; is_int64&lt;int&gt;() &lt;&lt; std::endl;
 std::cout &lt;&lt; ""int64_t:\t"" &lt;&lt; is_int64&lt;int64_t&gt;() &lt;&lt; std::endl;
 std::cout &lt;&lt; ""long int:\t"" &lt;&lt; is_int64&lt;long int&gt;() &lt;&lt; std::endl;
 std::cout &lt;&lt; ""long long int:\t"" &lt;&lt; is_int64&lt;long long int&gt;() &lt;&lt; std::endl;

 return 0;
}
</code></pre>

<p>In both 32-bit compile with GCC (and with 32- and 64-bit MSVC), the output of the program will be:</p>

<pre><code>int:           0
int64_t:       1
long int:      0
long long int: 1
</code></pre>

<p>However, the program resulting from a 64-bit GCC compile will output:</p>

<pre><code>int:           0
int64_t:       1
long int:      1
long long int: 0
</code></pre>

<p>This is curious, since <code>long long int</code> is a signed 64-bit integer and is, for all intents and purposes, identical to the <code>long int</code> and <code>int64_t</code> types, so logically, <code>int64_t</code>, <code>long int</code> and <code>long long int</code> would be equivalent types - the assembly generated when using these types is identical.  One look at <code>stdint.h</code> tells me why:</p>

<pre><code># if __WORDSIZE == 64
typedef long int  int64_t;
# else
__extension__
typedef long long int  int64_t;
# endif
</code></pre>

<p>In a 64-bit compile, <code>int64_t</code> is <code>long int</code>, not a <code>long long int</code> (obviously).</p>

<p>The fix for this situation is pretty easy:</p>

<pre><code>#if defined(__GNUC__) &amp;&amp; (__WORDSIZE == 64)
template &lt;&gt;
bool is_int64&lt;long long int&gt;() { return true; }
#endif
</code></pre>

<p>But this is horribly hackish and does not scale well (actual functions of substance, <code>uint64_t</code>, etc).  <strong>So my question is:</strong> Is there a way to tell the compiler that a <code>long long int</code> is the also a <code>int64_t</code>, just like <code>long int</code> is?</p>

<hr>

<p>My initial thoughts are that this is not possible, due to the way C/C++ type definitions work.  There is not a way to specify type equivalence of the basic data types to the compiler, since that is the compiler's job (and allowing that could break a lot of things) and <code>typedef</code> only goes one way.</p>

<p>I'm also not too concerned with getting an answer here, since this is a super-duper edge case that I do not suspect anyone will ever care about when the examples are not horribly contrived (does that mean this should be community wiki?).</p>

<hr>

<p><strong>Append</strong>: The reason why I'm using partial template specialization instead of an easier example like:</p>

<pre><code>void go(int64_t) { }

int main()
{
    long long int x = 2;
    go(x);
    return 0;
}
</code></pre>

<p>is that said example will still compile, since <code>long long int</code> is implicitly convertible to an <code>int64_t</code>.</p>

<hr>

<p><strong>Append</strong>: The only answer so far assumes that I want to know if a type is 64-bits.  I did not want to mislead people into thinking that I care about that and probably should have provided more examples of where this problem manifests itself.</p>

<pre><code>template &lt;typename T&gt;
struct some_type_trait : boost::false_type { };

template &lt;&gt;
struct some_type_trait&lt;int64_t&gt; : boost::true_type { };
</code></pre>

<p>In this example, <code>some_type_trait&lt;long int&gt;</code> will be a <code>boost::true_type</code>, but <code>some_type_trait&lt;long long int&gt;</code> will not be.  While this makes sense in C++'s idea of types, it is not desirable.</p>

<p>Another example is using a qualifier like <code>same_type</code> (which is pretty common to use in C++0x Concepts):</p>

<pre><code>template &lt;typename T&gt;
void same_type(T, T) { }

void foo()
{
    long int x;
    long long int y;
    same_type(x, y);
}
</code></pre>

<p>That example fails to compile, since C++ (correctly) sees that the types are different.  g++ will fail to compile with an error like: no matching function call <code>same_type(long int&amp;, long long int&amp;)</code>.</p>

<p>I would like to stress that I understand <em>why</em> this is happening, but I am looking for a workaround that does not force me to repeat code all over the place.</p>
","<p>You don't need to go to 64-bit to see something like this. Consider <code>int32_t</code> on common 32-bit platforms. It might be <code>typedef</code>'ed as <code>int</code> or as a <code>long</code>, but obviously only one of the two at a time. <code>int</code> and <code>long</code> are of course distinct types.</p>

<p>It's not hard to see that there is no workaround which makes <code>int == int32_t == long</code> on 32-bit systems. For the same reason, there's no way to make <code>long == int64_t == long long</code> on 64-bit systems.</p>

<p>If you could, the possible consequences would be rather painful for code that overloaded <code>foo(int)</code>, <code>foo(long)</code> and <code>foo(long long)</code> - suddenly they'd have two definitions for the same overload?!</p>

<p>The correct solution is that your template code usually should not be relying on a precise type, but on the properties of that type. The whole <code>same_type</code> logic could still be OK for specific cases:</p>

<pre><code>long foo(long x);
std::tr1::disable_if(same_type(int64_t, long), int64_t)::type foo(int64_t);
</code></pre>

<p>I.e., the overload <code>foo(int64_t)</code> is not defined when it's <em>exactly</em> the same as <code>foo(long)</code>.</p>

<p>[edit]
With C++11, we now have a standard way to write this:</p>

<pre><code>long foo(long x);
std::enable_if&lt;!std::is_same&lt;int64_t, long&gt;::value, int64_t&gt;::type foo(int64_t);
</code></pre>
","4166592"
"What does T&& (double ampersand) mean in C++11?","111893","","<p>I've been looking into some of the new features of C++11 and one I've noticed is the double ampersand in declaring variables, like <code>T&amp;&amp; var</code>.</p>

<p>For a start, what is this beast called? I wish Google would allow us to search for punctuation like this.</p>

<p>What exactly does it <em>mean?</em></p>

<p>At first glance, it appears to be a double reference (like the C-style double pointers <code>T** var</code>), but I'm having a hard time thinking of a use case for that.</p>
","<p>It declares an <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1690.html"" rel=""noreferrer"">rvalue reference</a> (standards proposal doc).</p>

<p>Here's an introduction to rvalue <a href=""http://www.artima.com/cppsource/rvalue.html"" rel=""noreferrer"">references</a>.  </p>

<p>Here's a fantastic in-depth look at rvalue references by one of Microsoft's standard library <a href=""http://blogs.msdn.com/b/vcblog/archive/2009/02/03/rvalue-references-c-0x-features-in-vc10-part-2.aspx"" rel=""noreferrer"">developers</a>. (But see the Caution in the comments following this answer before reading this article.)</p>

<p>The biggest difference between a C++03 reference (now called an lvalue reference in C++11) is that it can bind to an rvalue like a temporary without having to be const.  Thus, this syntax is now legal:</p>

<pre><code>T&amp;&amp; r = T();
</code></pre>

<p>rvalue references primarily provide for the following:</p>

<p><strong>Move semantics</strong>.  A move constructor and move assignment operator can now be defined that takes an rvalue reference instead of the usual const-lvalue reference.  A move functions like a copy, except it is not obliged to keep the source unchanged; in fact, it usually modifies the source such that it no longer owns the moved resources.  This is great for eliminating extraneous copies, especially in standard library implementations.</p>

<p>For example, a copy constructor might look like this:</p>

<pre><code>foo(foo const&amp; other)
{
    this-&gt;length = other.length;
    this-&gt;ptr = new int[other.length];
    copy(other.ptr, other.ptr + other.length, this-&gt;ptr);
}
</code></pre>

<p>If this constructor was passed a temporary, the copy would be unnecessary because we know the temporary will just be destroyed; why not make use of the resources the temporary already allocated?  In C++03, there's no way to prevent the copy as we cannot determine we were passed a temporary.  In C++11, we can overload a move constructor:</p>

<pre><code>foo(foo&amp;&amp; other)
{
   this-&gt;length = other.length;
   this-&gt;ptr = other.ptr;
   other.length = 0;
   other.ptr = nullptr;
}
</code></pre>

<p>Notice the big difference here: the move constructor actually modifies its argument.  This would effectively ""move"" the temporary into the object being constructed, thereby eliminating the unnecessary copy.</p>

<p>The move constructor would be used for temporaries and for non-const lvalue references that are explicitly converted to rvalue references using the <code>std::move</code> function (it just performs the conversion).  The following code both invoke the move constructor for <code>f1</code> and <code>f2</code>:</p>

<pre><code>foo f1((foo())); // Move a temporary into f1; temporary becomes ""empty""
foo f2 = std::move(f1); // Move f1 into f2; f1 is now ""empty""
</code></pre>

<p><strong>Perfect forwarding</strong>.  rvalue references allow us to properly forward arguments for templated functions.  Take for example this factory function:</p>

<pre><code>template &lt;typename T, typename A1&gt;
std::unique_ptr&lt;T&gt; factory(A1&amp; a1)
{
    return std::unique_ptr&lt;T&gt;(new T(a1));
}
</code></pre>

<p>If we called <code>factory&lt;foo&gt;(5)</code>, the argument will be deduced to be <code>int&amp;</code>, which will not bind to a literal 5, even if <code>foo</code>'s constructor takes an <code>int</code>.  Well, we could instead use <code>A1 const&amp;</code>, but what if <code>foo</code> takes the constructor argument by non-const reference?  To make a truly generic factory function, we would have to overload factory on <code>A1&amp;</code> and on <code>A1 const&amp;</code>.  That might be fine if factory takes 1 parameter type, but each additional parameter type would multiply the necessary overload set by 2.  That's very quickly unmaintainable.</p>

<p>rvalue references fix this problem by allowing the standard library to define a <code>std::forward</code> function that can properly forward lvalue/rvalue references.  For more information about how <code>std::forward</code> works, see <a href=""https://stackoverflow.com/a/3582313/530189"">this excellent answer</a>.</p>

<p>This enables us to define the factory function like this:</p>

<pre><code>template &lt;typename T, typename A1&gt;
std::unique_ptr&lt;T&gt; factory(A1&amp;&amp; a1)
{
    return std::unique_ptr&lt;T&gt;(new T(std::forward&lt;A1&gt;(a1)));
}
</code></pre>

<p>Now the argument's rvalue/lvalue-ness is preserved when passed to <code>T</code>'s constructor.  That means that if factory is called with an rvalue, <code>T</code>'s constructor is called with an rvalue.  If factory is called with an lvalue, <code>T</code>'s constructor is called with an lvalue.  The improved factory function works because of one special rule:</p>

<blockquote>
  <p>When the function parameter type is of
  the form <code>T&amp;&amp;</code> where <code>T</code> is a template
  parameter, and the function argument
  is an lvalue of type <code>A</code>, the type <code>A&amp;</code> is
  used for template argument deduction.</p>
</blockquote>

<p>Thus, we can use factory like so:</p>

<pre><code>auto p1 = factory&lt;foo&gt;(foo()); // calls foo(foo&amp;&amp;)
auto p2 = factory&lt;foo&gt;(*p1);   // calls foo(foo const&amp;)
</code></pre>

<p><strong>Important rvalue reference properties</strong>:</p>

<ul>
<li>For overload resolution, <strong>lvalues prefer binding to lvalue references and rvalues prefer binding to rvalue references</strong>.  Hence why temporaries prefer invoking a move constructor / move assignment operator over a copy constructor / assignment operator.</li>
<li><strong>rvalue references will implicitly bind to rvalues and to temporaries that are the result of an implicit conversion</strong>.  i.e. <code>float f = 0f; int&amp;&amp; i = f;</code> is well formed because float is implicitly convertible to int; the reference would be to a temporary that is the result of the conversion.</li>
<li><strong>Named rvalue references are lvalues.  Unnamed rvalue references are rvalues.</strong>  This is important to understand why the <code>std::move</code> call is necessary in: <code>foo&amp;&amp; r = foo(); foo f = std::move(r);</code></li>
</ul>
","5481588"
"How do I install g++ on MacOS X?","111824","","<p>I want to compile C++ code on MacOS X, using the g++ compiler. How do I install it?</p>
","<p>That's the compiler that comes with Apple's XCode tools package.  They've hacked on it a little, but basically it's just g++.</p>

<p>You can download XCode for free (well, mostly, you do have to sign up to become an ADC member, but that's free too) here: <a href=""http://developer.apple.com/technology/xcode.html"" rel=""nofollow noreferrer"">http://developer.apple.com/technology/xcode.html</a></p>

<p><strong>Edit 2013-01-25:</strong> This answer was correct in 2010. It needs an update.</p>

<p>While XCode tools still has a command-line C++ compiler, I recent versions of OS X (I think 10.7 and later) have switched to <a href=""http://clang.llvm.org/"" rel=""nofollow noreferrer"">clang/llvm</a> (mostly because Apple wants all the benefits of Open Source without having to contribute back and clang is BSD licensed). Secondly, I think all you have to do to install XCode is to download it from the App store. I'm pretty sure it's free there.</p>

<p>So, in order to get g++ you'll have to use something like <a href=""http://www.finkproject.org/"" rel=""nofollow noreferrer"">fink</a> (basically Debian's apt system for OS X/Darwin) or <a href=""https://www.macports.org/"" rel=""nofollow noreferrer"">MacPorts</a> (Basically, OpenBSDs ports system for OS X/Darwin) to get it.</p>

<p>Fink definitely has the right packages. On 2016-12-26, it had <a href=""http://pdb.finkproject.org/pdb/package.php/gcc5"" rel=""nofollow noreferrer"">gcc 5</a> and <a href=""http://pdb.finkproject.org/pdb/package.php/gcc6"" rel=""nofollow noreferrer"">gcc 6</a> packages.</p>

<p>I'm less familiar with how MacPorts works, though some initial cursory investigation indicates they have the relevant packages as well.</p>
","2122428"
"How to convert char* to wchar_t*?","111596","","<p>I've tried implementing a function like this, but unfortunately it doesn't work:</p>

<pre><code>const wchar_t *GetWC(const char *c)
{
    const size_t cSize = strlen(c)+1;
    wchar_t wc[cSize];
    mbstowcs (wc, c, cSize);

    return wc;
}
</code></pre>

<p>My main goal here is to be able to integrate normal char strings in a Unicode application. Any advice you guys can offer is greatly appreciated.</p>
","<p>Use a <code>std::wstring</code> instead of a C99 variable length array. The current standard guarantees a contiguous buffer for <code>std::basic_string</code>. E.g.,</p>

<pre><code>std::wstring wc( cSize, L'#' );
mbstowcs( &amp;wc[0], c, cSize );
</code></pre>

<p>C++ does not support C99 variable length arrays, and so if you compiled your code as pure C++, it would not even compile.</p>

<p>With that change your function return type should also be <code>std::wstring</code>.</p>

<p>Remember to set relevant locale in <code>main</code>.</p>

<p>E.g., <code>setlocale( LC_ALL, """" )</code>.</p>

<p>Cheers &amp; hth.,</p>
","8032109"
"fatal error LNK1104: cannot open file 'libboost_system-vc110-mt-gd-1_51.lib'","111587","","<p>Seem I can't get this to work. I made a simple console application (which depend on <code>websocket++</code> library) which need <code>Boost</code> libraries.. but when I try to compile I get:</p>

<blockquote>
  <p>fatal error LNK1104: cannot open file 'libboost_system-vc110-mt-gd-1_51.lib'</p>
</blockquote>

<p>However, I did the bjam which created the lib in <code>(boost_root)/stage/libs</code> and I linked the path to the libs to the compiler <code>C++/Additionnals includes</code>.</p>

<p>If I look in <code>(boost_root)/stage/libs</code> the file  <code>libboost_system-vc110-mt-gd-1_51.lib</code> is not there. It is called <code>libboost_system-vc110-mt-sgd-1_51.lib</code> instead.</p>

<p>Any idea?</p>
","<p>The <em>C++ → General → Additional Include Directories</em> parameter is for listing directories where the compiler will search for header files. </p>

<p>You need to tell the linker where to look for libraries to link to. To access this setting, right-click on the project name in the <em>Solution Explorer</em> window, then <em>Properties → Linker → General → Additional Library Directories</em>. Enter <code>&lt;boost_path&gt;\stage\lib</code> here (this is the path where the libraries are located if you <a href=""https://stackoverflow.com/a/2655683/241631"">build Boost</a> using default options).</p>
","13042696"
"How do I build an import library (.lib) AND a DLL in Visual C++?","111042","","<p>I want to have a single Visual Studio project that builds a DLL file and an import library (.lib) file.  (An import library is a statically-linked library that takes care of loading that DLL file in other projects that use it).</p>

<p>So I went to Visual Studio C++ 2008 Express Edition, created a New Project of type Class Library, and set the ""Configuration Type"" to be ""Dyanamic Library (.dll)"".</p>

<p>But when I build the solution, the only relevant output file I see is a DLL file; I don't see any LIB file getting generated.  I looked in the project directory and all subdirectories (Release and Debug).</p>

<p>I believe that it is possible to build a LIB and a DLL file at the same time because <a href=""http://msdn.microsoft.com/en-us/library/d14wsce5.aspx"" rel=""nofollow noreferrer"">on the MSDN it says ""The linker creates the import library when the DLL is built.""</a>  Also, <a href=""https://stackoverflow.com/questions/477461/when-building-a-dll-file-does-the-generated-lib-file-contain-the-dll-name"">another user of this website is creating LIB and DLL files at the same time using Visual C++</a>.</p>

<p>So how can I do it?</p>
","<p>By selecting 'Class Library' you were accidentally telling it to make a .Net Library using the CLI (managed) extenstion of C++.</p>

<p>Instead, create a Win32 project, and in the Application Settings on the next page, choose 'DLL'.</p>

<p>You can also make an MFC DLL or ATL DLL from those library choices if you want to go that route, but it sounds like you don't.</p>
","584077"
"How do malloc() and free() work?","111011","","<p>I want to know how <code>malloc</code> and <code>free</code> work.</p>

<pre><code>int main()
{

    unsigned char *p = (unsigned char*)malloc(4*sizeof(unsigned char));
    memset(p,0,4);
    strcpy((char*)p,""abcdabcd""); // **deliberately storing 8bytes**
    cout &lt;&lt; p;
    free(p); // Obvious Crash, but I need how it works and why crash.
    cout &lt;&lt; p;
    return 0;
}
</code></pre>

<p>I would be really grateful if the answer is in depth at memory level, if it's possible.</p>
","<p>OK some answers about malloc were already posted.</p>

<p>The more interesting part is <strong>how free works</strong> (and in this direction, malloc too can be understood better).</p>

<p>In many malloc/free implementations, free does normally not return the memory to the operating system (or at least only in rare cases). The reason is that you will get gaps in your heap and thus it can happen, that you just finish off your 2 or 4 GB of virtual memory with gaps. This should be avoided, since as soon as the virtual memory is finished, you will be in really big trouble. The other reason is, that the OS can only handle memory chunks that are of a specific size and alignment. To be specific: Normally the OS can only handle blocks that the virtual memory manager can handle (most often multiples of 512 bytes e.g. 4KB).</p>

<p>So returning 40 Bytes to the OS will just not work. So what does free do?</p>

<p>Free will put the memory block in its own free block list. Normally it also tries to meld together adjacent blocks in the address space. The free block list is just a circular list of memory chunks which have some administrative data in the beginning. This is also the reason why managing very small memory elements with the standard malloc/free is not efficient. Every memory chunk needs additional data and with smaller sizes more fragmentation happens.</p>

<p>The free-list is also the first place that malloc looks at when a new chunk of memory is needed. It is scanned before it calls for new memory from the OS. When a chunk is found that is bigger than the needed memory, it is divided into two parts. One is returned to caller, the other is put back into the free list.</p>

<p>There are many different optimizations to this standard behaviour (for example for small chunks of memory). But since malloc and free must be so universal, the standard behaviour is always the fallback when alternatives are not usable. There are also optimizations in handling the free-list — for example storing the chunks in lists sorted by sizes. But all optimizations also have their own limitations.</p>

<p><strong>Why does your code crash:</strong></p>

<p>The reason is that by writing 9 chars (don't forget the trailing null byte) into an area sized for 4 chars, you will probably overwrite the administrative-data stored for another chunk of memory that resides ""behind"" your chunk of data (since this data is most often stored ""in front"" of the memory chunks). When free then tries to put your chunk into the free list, it can touch this administrative-data and therefore stumble over an overwritten pointer. This will crash the system.</p>

<p>This is a rather graceful behaviour. I have also seen situations where a runaway pointer somewhere has overwritten data in the memory-free-list and the system did not immediately crash but some subroutines later. Even in a system of medium complexity such problems can be really, really hard to debug! In the one case I was involved, it took us (a larger group of developers) several days to find the reason of the crash -- since it was in a totally different location than the one indicated by the memory dump. It is like a time-bomb. You know, your next ""free"" or ""malloc"" will crash, but you don't know why!</p>

<p>Those are some of the worst C/C++ problems, and one reason why pointers can be so problematic.</p>
","1119334"
"insert an element into a specific position of a vector","110914","","<p>I want to insert an element into a specific position of a vector, can I just use an assignment:</p>

<pre><code>// vec1 and 2 have the same length &amp; filled in somehow
vec1;
vec2;

vec1[i] = vec2[i] // insert vec2[i] at position i of vec1
</code></pre>

<p>or I have to use insert():</p>

<pre><code>vector&lt;sometype&gt;::iterator iterator = vec1.begin();

vec1.insert(iterator+(i+1), vec2[i]);
</code></pre>
","<pre><code>vec1[i] = vec2[i]
</code></pre>

<p>will set the value of <code>vec1[i]</code> to the value of <code>vec2[i]</code>. Nothing is inserted. Your second approach is almost correct. Instead of <code>+i+1</code> you need just <code>+i</code></p>

<pre><code>v1.insert(v1.begin()+i, v2[i])
</code></pre>
","6726818"
"error LNK2005: xxx already defined in MSVCRT.lib(MSVCR100.dll)	C:\something\LIBCMT.lib(setlocal.obj)","110848","","<p>I'm using DCMTK library for reading Dicom files (Image format used in medical image processing.) I'm having a problem in compiling this DCMTK source code. DCMTK uses some additional external libraries (zlib, tiff, libpng, libxml2, libiconv). I know that all libraries should be generated with same Code Generation Options.</p>

<p>I've downloaded the compiled versions of these support libraries which are compiled with ""Multithreaded DLL"" runtime options (/MD). In each project of DCMTK source code I ensured that runtime options are ""Multithreaded DLL"" (/MD). But still I'm getting these errors:</p>

<pre><code>Error   238 error LNK2005: ___iob_func already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmp2pgm
Error   239 error LNK2005: __lock_file already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmp2pgm
Error   240 error LNK2005: __unlock_file already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmp2pgm
Error   241 error LNK2005: __initterm_e already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmp2pgm
Error   242 error LNK2005: _exit already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmp2pgm
Error   243 error LNK2005: __exit already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmp2pgm
Error   244 error LNK2005: __cexit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmp2pgm
Error   245 error LNK2005: __amsg_exit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmp2pgm
Error   246 error LNK2005: _fflush already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(fflush.obj)   dcmp2pgm
Error   247 error LNK2005: __errno already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(dosmap.obj)   dcmp2pgm
Error   248 error LNK2005: __invoke_watson already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(invarg.obj)   dcmp2pgm
Error   249 error LNK2005: ""void __cdecl terminate(void)"" (?terminate@@YAXXZ) already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(hooks.obj)    dcmp2pgm
Error   250 error LNK2005: ___xi_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmp2pgm
Error   251 error LNK2005: ___xi_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmp2pgm
Error   252 error LNK2005: ___xc_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmp2pgm
Error   253 error LNK2005: ___xc_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmp2pgm
Error   254 error LNK2005: __unlock already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmp2pgm
Error   255 error LNK2005: __lock already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmp2pgm
Error   256 error LNK2005: __XcptFilter already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(winxfltr.obj) dcmp2pgm
Error   257 error LNK2005: _mainCRTStartup already defined in MSVCRT.lib(crtexe.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0.obj) dcmp2pgm
Error   258 error LNK2005: ___set_app_type already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(errmode.obj)  dcmp2pgm
Error   259 error LNK2005: __configthreadlocale already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(setlocal.obj) dcmp2pgm
Error   260 error LNK2005: _getenv already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(getenv.obj)   dcmp2pgm
Error   261 error LNK2005: __isctype already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(isctype.obj)  dcmp2pgm
Error   262 error LNK2005: __strnicmp already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(strnicmp.obj) dcmp2pgm
Error   263 error LNK2005: __close already defined in LIBCMT.lib(close.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   264 error LNK2005: __fileno already defined in LIBCMT.lib(fileno.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   265 error LNK2005: _calloc already defined in LIBCMT.lib(calloc.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   266 error LNK2005: _atol already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   267 error LNK2005: _strcspn already defined in LIBCMT.lib(strcspn.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   268 error LNK2005: __stricmp already defined in LIBCMT.lib(stricmp.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   269 error LNK2005: _atoi already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   270 error LNK2005: __lseek already defined in LIBCMT.lib(lseek.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   271 error LNK2005: __read already defined in LIBCMT.lib(read.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   272 error LNK2005: __write already defined in LIBCMT.lib(write.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   273 error LNK2005: __open already defined in LIBCMT.lib(open.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   274 error LNK2005: __get_osfhandle already defined in LIBCMT.lib(osfinfo.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   278 error LNK1169: one or more multiply defined symbols found   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\Release\dcmp2pgm.exe 1   1   dcmp2pgm
Error   201 error LNK2005: ___iob_func already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscp
Error   202 error LNK2005: __lock_file already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscp
Error   203 error LNK2005: __unlock_file already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscp
Error   204 error LNK2005: __initterm_e already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscp
Error   205 error LNK2005: _exit already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscp
Error   206 error LNK2005: __exit already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscp
Error   207 error LNK2005: __cexit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscp
Error   208 error LNK2005: __amsg_exit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscp
Error   209 error LNK2005: _fflush already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(fflush.obj)   dcmprscp
Error   210 error LNK2005: __errno already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(dosmap.obj)   dcmprscp
Error   211 error LNK2005: __invoke_watson already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(invarg.obj)   dcmprscp
Error   212 error LNK2005: ""void __cdecl terminate(void)"" (?terminate@@YAXXZ) already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(hooks.obj)    dcmprscp
Error   213 error LNK2005: ___xi_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscp
Error   214 error LNK2005: ___xi_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscp
Error   215 error LNK2005: ___xc_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscp
Error   216 error LNK2005: ___xc_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscp
Error   217 error LNK2005: __unlock already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmprscp
Error   218 error LNK2005: __lock already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmprscp
Error   219 error LNK2005: __XcptFilter already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(winxfltr.obj) dcmprscp
Error   220 error LNK2005: __stricmp already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(stricmp.obj)  dcmprscp
Error   221 error LNK2005: _mainCRTStartup already defined in MSVCRT.lib(crtexe.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0.obj) dcmprscp
Error   222 error LNK2005: ___set_app_type already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(errmode.obj)  dcmprscp
Error   223 error LNK2005: __configthreadlocale already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(setlocal.obj) dcmprscp
Error   224 error LNK2005: _getenv already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(getenv.obj)   dcmprscp
Error   225 error LNK2005: __isctype already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(isctype.obj)  dcmprscp
Error   226 error LNK2005: __strnicmp already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(strnicmp.obj) dcmprscp
Error   227 error LNK2005: __close already defined in LIBCMT.lib(close.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   228 error LNK2005: __fileno already defined in LIBCMT.lib(fileno.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   229 error LNK2005: __lseek already defined in LIBCMT.lib(lseek.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   230 error LNK2005: __read already defined in LIBCMT.lib(read.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   231 error LNK2005: __write already defined in LIBCMT.lib(write.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   232 error LNK2005: __open already defined in LIBCMT.lib(open.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   233 error LNK2005: __get_osfhandle already defined in LIBCMT.lib(osfinfo.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   237 error LNK1169: one or more multiply defined symbols found   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\Release\dcmprscp.exe 1   1   dcmprscp
Error   160 error LNK2005: ___iob_func already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscu
Error   161 error LNK2005: __lock_file already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscu
Error   162 error LNK2005: __unlock_file already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscu
Error   163 error LNK2005: __initterm_e already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscu
Error   164 error LNK2005: _exit already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscu
Error   165 error LNK2005: __exit already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscu
Error   166 error LNK2005: __cexit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscu
Error   167 error LNK2005: __amsg_exit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscu
Error   168 error LNK2005: _fflush already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(fflush.obj)   dcmprscu
Error   169 error LNK2005: __errno already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(dosmap.obj)   dcmprscu
Error   170 error LNK2005: __invoke_watson already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(invarg.obj)   dcmprscu
Error   171 error LNK2005: ""void __cdecl terminate(void)"" (?terminate@@YAXXZ) already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(hooks.obj)    dcmprscu
Error   172 error LNK2005: ___xi_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscu
Error   173 error LNK2005: ___xi_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscu
Error   174 error LNK2005: ___xc_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscu
Error   175 error LNK2005: ___xc_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscu
Error   176 error LNK2005: __unlock already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmprscu
Error   177 error LNK2005: __lock already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmprscu
Error   178 error LNK2005: __XcptFilter already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(winxfltr.obj) dcmprscu
Error   179 error LNK2005: _mainCRTStartup already defined in MSVCRT.lib(crtexe.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0.obj) dcmprscu
Error   180 error LNK2005: ___set_app_type already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(errmode.obj)  dcmprscu
Error   181 error LNK2005: __configthreadlocale already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(setlocal.obj) dcmprscu
Error   182 error LNK2005: _getenv already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(getenv.obj)   dcmprscu
Error   183 error LNK2005: __isctype already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(isctype.obj)  dcmprscu
Error   184 error LNK2005: __strnicmp already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(strnicmp.obj) dcmprscu
Error   185 error LNK2005: __close already defined in LIBCMT.lib(close.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   186 error LNK2005: __fileno already defined in LIBCMT.lib(fileno.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   187 error LNK2005: _calloc already defined in LIBCMT.lib(calloc.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   188 error LNK2005: _atol already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   189 error LNK2005: _strcspn already defined in LIBCMT.lib(strcspn.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   190 error LNK2005: __stricmp already defined in LIBCMT.lib(stricmp.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   191 error LNK2005: _atoi already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   192 error LNK2005: __lseek already defined in LIBCMT.lib(lseek.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   193 error LNK2005: __read already defined in LIBCMT.lib(read.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   194 error LNK2005: __write already defined in LIBCMT.lib(write.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   195 error LNK2005: __open already defined in LIBCMT.lib(open.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   196 error LNK2005: __get_osfhandle already defined in LIBCMT.lib(osfinfo.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   200 error LNK1169: one or more multiply defined symbols found   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\Release\dcmprscu.exe dcmprscu
Error   119 error LNK2005: ___iob_func already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmpsprt
Error   120 error LNK2005: __lock_file already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmpsprt
Error   121 error LNK2005: __unlock_file already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmpsprt
Error   122 error LNK2005: __initterm_e already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmpsprt
Error   123 error LNK2005: _exit already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmpsprt
Error   124 error LNK2005: __exit already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmpsprt
Error   125 error LNK2005: __cexit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmpsprt
Error   126 error LNK2005: __amsg_exit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmpsprt
Error   127 error LNK2005: _fflush already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(fflush.obj)   dcmpsprt
Error   128 error LNK2005: __errno already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(dosmap.obj)   dcmpsprt
Error   129 error LNK2005: __invoke_watson already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(invarg.obj)   dcmpsprt
Error   130 error LNK2005: ""void __cdecl terminate(void)"" (?terminate@@YAXXZ) already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(hooks.obj)    dcmpsprt
Error   131 error LNK2005: ___xi_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmpsprt
Error   132 error LNK2005: ___xi_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmpsprt
Error   133 error LNK2005: ___xc_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmpsprt
Error   134 error LNK2005: ___xc_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmpsprt
Error   135 error LNK2005: __unlock already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmpsprt
Error   136 error LNK2005: __lock already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmpsprt
Error   137 error LNK2005: __XcptFilter already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(winxfltr.obj) dcmpsprt
Error   138 error LNK2005: _mainCRTStartup already defined in MSVCRT.lib(crtexe.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0.obj) dcmpsprt
Error   139 error LNK2005: ___set_app_type already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(errmode.obj)  dcmpsprt
Error   140 error LNK2005: __configthreadlocale already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(setlocal.obj) dcmpsprt
Error   141 error LNK2005: _getenv already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(getenv.obj)   dcmpsprt
Error   142 error LNK2005: __isctype already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(isctype.obj)  dcmpsprt
Error   143 error LNK2005: __strnicmp already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(strnicmp.obj) dcmpsprt
Error   144 error LNK2005: __close already defined in LIBCMT.lib(close.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   145 error LNK2005: __fileno already defined in LIBCMT.lib(fileno.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   146 error LNK2005: _calloc already defined in LIBCMT.lib(calloc.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   147 error LNK2005: _atol already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   148 error LNK2005: _strcspn already defined in LIBCMT.lib(strcspn.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   149 error LNK2005: __stricmp already defined in LIBCMT.lib(stricmp.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   150 error LNK2005: _atoi already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   151 error LNK2005: __lseek already defined in LIBCMT.lib(lseek.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   152 error LNK2005: __read already defined in LIBCMT.lib(read.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   153 error LNK2005: __write already defined in LIBCMT.lib(write.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   154 error LNK2005: __open already defined in LIBCMT.lib(open.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   155 error LNK2005: __get_osfhandle already defined in LIBCMT.lib(osfinfo.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   159 error LNK1169: one or more multiply defined symbols found   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\Release\dcmpsprt.exe 1   1   dcmpsprt
Error   61  error LNK2005: ___iob_func already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(_file.obj)   dsr2html
Error   62  error LNK2005: __lock_file already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(_file.obj)   dsr2html
Error   63  error LNK2005: __unlock_file already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(_file.obj)   dsr2html
Error   64  error LNK2005: __initterm_e already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0dat.obj) dsr2html
Error   65  error LNK2005: _exit already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0dat.obj) dsr2html
Error   66  error LNK2005: __exit already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0dat.obj) dsr2html
Error   67  error LNK2005: __cexit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0dat.obj) dsr2html
Error   68  error LNK2005: __amsg_exit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0dat.obj) dsr2html
Error   69  error LNK2005: _fflush already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(fflush.obj)  dsr2html
Error   70  error LNK2005: __errno already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(dosmap.obj)  dsr2html
Error   71  error LNK2005: __invoke_watson already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(invarg.obj)  dsr2html
Error   72  error LNK2005: ""void __cdecl terminate(void)"" (?terminate@@YAXXZ) already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(hooks.obj)   dsr2html
Error   73  error LNK2005: ___xi_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0init.obj)    dsr2html
Error   74  error LNK2005: ___xi_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0init.obj)    dsr2html
Error   75  error LNK2005: ___xc_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0init.obj)    dsr2html
Error   76  error LNK2005: ___xc_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0init.obj)    dsr2html
Error   77  error LNK2005: __unlock already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(mlock.obj)   dsr2html
Error   78  error LNK2005: __lock already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(mlock.obj)   dsr2html
Error   79  error LNK2005: __XcptFilter already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(winxfltr.obj)    dsr2html
Error   80  error LNK2005: _mainCRTStartup already defined in MSVCRT.lib(crtexe.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0.obj)    dsr2html
Error   81  error LNK2005: ___set_app_type already defined in 
</code></pre>

<p><strong>EDIT:</strong></p>

<p>Observations:</p>

<ol>
<li>There are conflicts only between LIBCMT.LIB &amp; MSVCRT.LIB</li>
<li>These two LIB files doesn't exist at the locations shown in the errors.</li>
</ol>

<p><strong>EDIT2:</strong></p>

<p>Yes, the problem was because some of the support libraries weren't built with /MD. So, I myself built all the support libraries with /MD and my problem was solved.</p>
","<p>You are mixing code that was compiled with /MD (use DLL version of CRT) with code that was compiled with /MT (use static CRT library).  That cannot work, all source code files must be compiled with the same setting.  Given that you use libraries that were pre-compiled with /MD, almost always the correct setting, you must compile your own code with this setting as well.</p>

<p>Project + Properties, C/C++, Code Generation, Runtime Library.</p>

<p>Beware that these libraries were probably compiled with an earlier version of the CRT, msvcr100.dll is quite new.  Not sure if that will cause trouble, you may have to prevent the linker from generating a manifest.  You must also make sure to deploy the DLLs you need to the target machine, including msvcr100.dll</p>
","2729823"
"print call stack in C or C++","110542","","<p>Is there any way to dump the call stack in a running process in C or C++ every time a certain function is called?  What I have in mind is something like this:</p>

<pre><code>void foo()
{
   print_stack_trace();

   // foo's body

   return
}
</code></pre>

<p>Where <code>print_stack_trace</code> works similarly to <a href=""http://perldoc.perl.org/functions/caller.html"" rel=""noreferrer""><code>caller</code></a> in Perl.</p>

<p>Or something like this:</p>

<pre><code>int main (void)
{
    // will print out debug info every time foo() is called
    register_stack_trace_function(foo); 

    // etc...
}
</code></pre>

<p>where <code>register_stack_trace_function</code> puts some sort of internal breakpoint that will cause a stack trace to be printed whenever <code>foo</code> is called.</p>

<p>Does anything like this exist in some standard C library?</p>

<p>I am working on Linux, using GCC.</p>

<hr>

<h2>Background</h2>

<p>I have a test run that behaves differently based on some commandline switches that shouldn't affect this behavior.  My code has a pseudo-random number generator that I assume is being called differently based on these switches.  I want to be able to run the test with each set of switches and see if the random number generator is called differently for each one.</p>
","<p>For a linux-only solution you can use <a href=""http://www.kernel.org/doc/man-pages/online/pages/man3/backtrace.3.html"" rel=""noreferrer"">backtrace(3)</a> that simply returns an array of <code>void *</code> (in fact each of these point to the return address from the corresponding stack frame). To translate these to something of use, there's <a href=""http://linux.die.net/man/3/backtrace_symbols"" rel=""noreferrer"">backtrace_symbols(3)</a>.</p>

<p>Pay attention to the <a href=""http://www.kernel.org/doc/man-pages/online/pages/man3/backtrace.3.html#NOTES"" rel=""noreferrer"">notes section in backtrace(3)</a>:</p>

<blockquote>
  <p>The symbol names may be unavailable
  without the use of special linker
  options.
         For systems using the GNU linker, it is necessary to use the
  -rdynamic linker
         option.  Note that names of ""static"" functions are not exposed,
  and won't be
         available in the backtrace.</p>
</blockquote>
","3899916"
"How do I find an element position in std::vector?","110492","","<p>I need to find an element position in an std::vector to use it for referencing an element in <em>another</em> vector:</p>

<pre><code>int find( const vector&lt;type&gt;&amp; where, int searchParameter )
{
    for( int i = 0; i &lt; where.size(); i++ ) {
       if( conditionMet( where[i], searchParameter ) ) {
           return i;
       }
    }
    return -1;
}
// caller:
const int position = find( firstVector, parameter );
if( position != -1 ) {
    doAction( secondVector[position] );
}
</code></pre>

<p>however <code>vector::size()</code> returns <code>size_t</code> which corresponds to an <code>unsigned</code> integral type that can't directly store <code>-1</code>. How do I signal that the element is not found in a vector when using <code>size_t</code> instead of <code>int</code> as an index?</p>
","<p>You could use <code>std::numeric_limits&lt;size_t&gt;::max()</code> for elements that was not found. It is a valid value, but it is impossible to create container with such max index. If <code>std::vector</code> has size equal to <code>std::numeric_limits&lt;size_t&gt;::max()</code>, then maximum allowed index will be <code>(std::numeric_limits&lt;size_t&gt;::max()-1)</code>, since elements counted from 0.</p>
","1425683"
"Vector of Vectors to create matrix","110486","","<p>I am trying to take in an input for the dimensions of a 2D matrix. And then use user input to fill in this matrix. The way I tried doing this is via vectors (vectors of vectors). But I have encountered some errors whenever I try to read in data and append it to the matrix.</p>

<pre><code>//cin&gt;&gt;CC; cin&gt;&gt;RR; already done
vector&lt;vector&lt;int&gt; &gt; matrix;
for(int i = 0; i&lt;RR; i++)
{
    for(int j = 0; j&lt;CC; j++)
    {
    cout&lt;&lt;""Enter the number for Matrix 1"";
         cin&gt;&gt;matrix[i][j];
    }
}
</code></pre>

<p>Whenever I try to do this, it gives me a subscript out of range error. Any advice?</p>
","<p>As it is, both dimensions of your vector are 0.</p>

<p>Instead, initialize the vector as this:</p>

<pre><code>vector&lt;vector&lt;int&gt; &gt; matrix(RR);
for ( int i = 0 ; i &lt; RR ; i++ )
   matrix[i].resize(CC);
</code></pre>

<p>This will give you a matrix of dimensions <code>RR * CC</code> with all elements set to <code>0</code>.</p>
","12375616"
"static const vs #define","110432","","<p>Is it better to use <code>static const</code> vars than <code>#define</code> preprocessor? Or maybe it depends on the context?</p>

<p>What are advantages/disadvantages for each method?</p>
","<p>Personally, I loathe the preprocessor, so I'd always go with const.</p>

<p>The main advantage to a #define is that it requires no memory to store in your program, as it is really just replacing some text with a literal value. It also has the advantage that it has no type, so it can be used for any integer value without generating warnings.</p>

<p>Advantages of ""const""s are that they can be scoped, and they can be used in situations where a pointer to an object needs to be passed.</p>

<p>I don't know exactly what you are getting at with the ""static"" part though. If you are declaring globally, I'd put it in an anonomous namespace instead of using static. For example</p>

<pre><code>namespace {
   unsigned const seconds_per_minute = 60;
};

int main (int argc; char *argv[]) {
...
}
</code></pre>
","1637367"
"How to read a line from a text file in c/c++?","110315","","<p>After exhaustive googling and visiting many forums, I am yet to find a good comprehensive answer for this question. A lot of the forums suggest using the get line 
<code>istream&amp; getline (char* s, streamsize n )</code> function. My question is what if I don't know what the length of each line is and cannot predict what the size may be? Also what is it's equivalent in C?</p>

<p>Is there any specific function in c /c++ to read one single line each time from a text file ? </p>

<p>Explanation , with Code snippets will help me a lot.</p>
","<p>In c, you could use fopen, and getch. Usually, if you can't be exactly sure of the length of the longest line, you could allocate a large buffer (e.g. 8kb) and almost be guaranteed of getting all lines.</p>

<p>If there's a chance you may have really really long lines and you have to process line by line, you could malloc a resonable buffer, and use realloc to double it's size each time you get close to filling it.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void handle_line(char *line) {
  printf(""%s"", line);
}

int main(int argc, char *argv[]) {
    int size = 1024, pos;
    int c;
    char *buffer = (char *)malloc(size);

    FILE *f = fopen(""myfile.txt"", ""r"");
    if(f) {
      do { // read all lines in file
        pos = 0;
        do{ // read one line
          c = fgetc(f);
          if(c != EOF) buffer[pos++] = (char)c;
          if(pos &gt;= size - 1) { // increase buffer length - leave room for 0
            size *=2;
            buffer = (char*)realloc(buffer, size);
          }
        }while(c != EOF &amp;&amp; c != '\n');
        buffer[pos] = 0;
        // line is now in buffer
        handle_line(buffer);
      } while(c != EOF); 
      fclose(f);           
    }
    free(buffer);
    return 0;
}
</code></pre>
","3081405"
"Accessing certain pixel RGB value in openCV","110278","","<p>I have searched internet and stackoverflow thoroughly, but I haven't found answer to my question:</p>

<p>How can I get/set (both) RGB value of certain (given by x,y coordinates) pixel in OpenCV? What's important-I'm writing in C++, the image is stored in cv::Mat variable. I know there is an IplImage() operator, but IplImage is not very comfortable in use-as far as I know it comes from C API.</p>

<p><strong>Yes, I'm aware that there was already this <a href=""https://stackoverflow.com/questions/4742251/pixel-access-in-opencv-2-2"">Pixel access in OpenCV 2.2</a> thread, but it was only about black and white bitmaps.</strong></p>

<p><strong>EDIT:</strong></p>

<p>Thank you very much for all your answers. I see there are many ways to get/set RGB value of pixel. I got one more idea from my close friend-thanks Benny! It's very simple and effective. I think it's a matter of taste which one you choose.</p>

<pre><code>Mat image;
</code></pre>

<p>(...)</p>

<pre><code>Point3_&lt;uchar&gt;* p = image.ptr&lt;Point3_&lt;uchar&gt; &gt;(y,x);
</code></pre>

<p>And then you can read/write RGB values with:</p>

<pre><code>p-&gt;x //B
p-&gt;y //G
p-&gt;z //R
</code></pre>
","<p>Try the following:</p>

<pre><code>cv::Mat image = ...do some stuff...;
</code></pre>

<p><code>image.at&lt;cv::Vec3b&gt;(y,x);</code> gives you the RGB (it might be ordered as BGR) vector of type <code>cv::Vec3b</code></p>

<pre><code>image.at&lt;cv::Vec3b&gt;(y,x)[0] = newval[0];
image.at&lt;cv::Vec3b&gt;(y,x)[1] = newval[1];
image.at&lt;cv::Vec3b&gt;(y,x)[2] = newval[2];
</code></pre>
","8933145"
"How to sort an STL vector?","110260","","<p>I would like to sort a <code>vector</code> </p>

<pre><code>vector&lt;myClass&gt; object;
</code></pre>

<p>Where <code>myclass</code> contains many <code>int</code> variables. How can I sort my <code>vector</code> on any specific data variable of <code>myClass</code>.</p>
","<p>Overload less than operator, then sort. This is an example I found off the web...</p>

<pre><code>class MyData
{
public:
  int m_iData;
  string m_strSomeOtherData;
  bool operator&lt;(const MyData &amp;rhs) const { return m_iData &lt; rhs.m_iData; }
};

std::sort(myvector.begin(), myvector.end());
</code></pre>

<p>Source: <a href=""http://www.codeguru.com/forum/showthread.php?t=366064"" rel=""noreferrer"">here</a></p>
","2758100"
"Erasing elements from a vector","110213","","<p>I want to clear a element from a vector using the erase method. But the problem here is that the element is not guaranteed to occur only once in the vector. It may be present multiple times and I need to clear all of them. My code is something like this:</p>

<pre><code>void erase(std::vector&lt;int&gt;&amp; myNumbers_in, int number_in)
{
    std::vector&lt;int&gt;::iterator iter = myNumbers_in.begin();
    std::vector&lt;int&gt;::iterator endIter = myNumbers_in.end();
    for(; iter != endIter; ++iter)
    {
        if(*iter == number_in)
        {
            myNumbers_in.erase(iter);
        }
    }
}

int main(int argc, char* argv[])
{
    std::vector&lt;int&gt; myNmbers;
    for(int i = 0; i &lt; 2; ++i)
    {
        myNmbers.push_back(i);
        myNmbers.push_back(i);
    }

    erase(myNmbers, 1);

    return 0;
}
</code></pre>

<p>This code obviously crashes because I am changing the end of the vector while iterating through it. What is the best way to achieve this? I.e. is there any way to do this without iterating through the vector multiple times or creating one more copy of the vector?</p>
","<p>Use the <a href=""http://www.codeguru.com/forum/archive/index.php/t-231045.html"" rel=""noreferrer"">remove/erase idiom</a>:</p>

<pre><code>std::vector&lt;int&gt;&amp; vec = myNumbers; // use shorter name
vec.erase(std::remove(vec.begin(), vec.end(), number_in), vec.end());
</code></pre>

<p>What happens is that <code>remove</code> compacts the elements that differ from the value to be removed (<code>number_in</code>) in the beginning of the <code>vector</code> and returns the iterator to the first element after that range. Then <code>erase</code> removes these elements (who's value is unspecified).</p>
","347478"
"How do I get a list of files in a directory in C++?","110132","","<p>How do you get a list of files within a directory so each can be processed?</p>
","<p>Standard C++ doesn't provide a way to do this. But <code>boost::filesystem</code> can do that: <a href=""http://www.boost.org/doc/libs/1_37_0/libs/filesystem/example/simple_ls.cpp"" rel=""noreferrer"">http://www.boost.org/doc/libs/1_37_0/libs/filesystem/example/simple_ls.cpp</a></p>
","306542"
"'uint32_t' does not name a type","110039","","<p>I'm trying to compile a C++ software package that was written in 2007 and I'm getting this error:</p>

<p><code>error: ‘uint32_t’ does not name a type</code></p>

<p>This is happening in 64-bit Ubuntu using g++ 4.5.2. It compiles fine on 64-bit CentOS using g++ 4.1.2.</p>

<p>Is there an <code>#include</code> or a compiler flag that I'm missing? Or, should I use <code>typedef</code> to assign <code>uint32_t</code> to a <code>size_t</code> or maybe an <code>unsigned int</code>?</p>
","<p>You need to include stdint.h</p>

<pre><code> #include &lt;stdint.h&gt;
</code></pre>
","11069172"
"Can't use modulus on doubles?","109928","","<p>I have a program in C++ (compiled using g++). I'm trying to apply two doubles as operands to the modulus function, but I get the following error:</p>

<blockquote>
  <p>error: invalid operands of types 'double' and 'double' to binary 'operator%'</p>
</blockquote>

<p>Here's the code:</p>

<pre><code>int main() {
    double x = 6.3;
    double y = 2;
    double z = x % y;
}
</code></pre>
","<p>The <code>%</code> operator is for integers.  You're looking for the <a href=""http://en.cppreference.com/w/cpp/numeric/math/fmod"" rel=""nofollow noreferrer""><code>fmod()</code> function</a>.</p>

<pre><code>#include &lt;cmath&gt;

int main()
{
    double x = 6.3;
    double y = 2.0;
    double z = std::fmod(x,y);

}
</code></pre>
","9138794"
"How do I use arrays in C++?","109872","","<p>C++ inherited arrays from C where they are used virtually everywhere. C++ provides abstractions that are easier to use and less error-prone (<code>std::vector&lt;T&gt;</code> since C++98 and <a href=""http://en.cppreference.com/w/cpp/container/array"" rel=""noreferrer""><code>std::array&lt;T, n&gt;</code></a> since <a href=""https://en.wikipedia.org/wiki/C++11"" rel=""noreferrer"">C++11</a>), so the need for arrays does not arise quite as often as it does in C. However, when you read legacy code or interact with a library written in C, you should have a firm grasp on how arrays work.</p>

<p>This FAQ is split into five parts:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/4810668/"">arrays on the type level and accessing elements</a></li>
<li><a href=""https://stackoverflow.com/questions/4984228/"">array creation and initialization</a></li>
<li><a href=""https://stackoverflow.com/questions/4810672/"">assignment and parameter passing</a></li>
<li><a href=""https://stackoverflow.com/questions/4810676/"">multidimensional arrays and arrays of pointers</a></li>
<li><a href=""https://stackoverflow.com/questions/4810664/how-do-i-use-arrays-in-c/7439261#7439261"">common pitfalls when using arrays</a></li>
</ol>

<p>If you feel something important is missing in this FAQ, write an answer and link it here as an additional part.</p>

<p>In the following text, ""array"" means ""C array"", not the class template <code>std::array</code>. Basic knowledge of the C declarator syntax is assumed. Note that the manual usage of <code>new</code> and <code>delete</code> as demonstrated below is extremely dangerous in the face of exceptions, but that is the topic of <a href=""https://stackoverflow.com/questions/712639/"">another FAQ</a>.</p>

<p><sub>
<em>(Note: This is meant to be an entry to <a href=""https://stackoverflow.com/questions/tagged/c++-faq"">Stack Overflow's C++ FAQ</a>. If you want to critique the idea of providing an FAQ in this form, then <a href=""https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag"">the posting on meta that started all this</a> would be the place to do that. Answers to that question are monitored in the <a href=""http://chat.stackoverflow.com/rooms/10/c-lounge"">C++ chatroom</a>, where the FAQ idea started out in the first place, so your answer is very likely to get read by those who came up with the idea.)</em>
</sub></p>
","<h1>Arrays on the type level</h1>

<p>An array type is denoted as <code>T[n]</code> where <code>T</code> is the <em>element type</em> and <code>n</code> is a positive <em>size</em>, the number of elements in the array. The array type is a product type of the element type and the size. If one or both of those ingredients differ, you get a distinct type:</p>

<pre><code>#include &lt;type_traits&gt;

static_assert(!std::is_same&lt;int[8], float[8]&gt;::value, ""distinct element type"");
static_assert(!std::is_same&lt;int[8],   int[9]&gt;::value, ""distinct size"");
</code></pre>

<p>Note that the size is part of the type, that is, array types of different size are incompatible types that have absolutely nothing to do with each other. <code>sizeof(T[n])</code> is equivalent to <code>n * sizeof(T)</code>.</p>

<h2>Array-to-pointer decay</h2>

<p>The only ""connection"" between <code>T[n]</code> and <code>T[m]</code> is that both types can implicitly be <em>converted</em> to <code>T*</code>, and the result of this conversion is a pointer to the first element of the array. That is, anywhere a <code>T*</code> is required, you can provide a <code>T[n]</code>, and the compiler will silently provide that pointer:</p>

<pre><code>                  +---+---+---+---+---+---+---+---+
the_actual_array: |   |   |   |   |   |   |   |   |   int[8]
                  +---+---+---+---+---+---+---+---+
                    ^
                    |
                    |
                    |
                    |  pointer_to_the_first_element   int*
</code></pre>

<p>This conversion is known as ""array-to-pointer decay"", and it is a major source of confusion. The size of the array is lost in this process, since it is no longer part of the type (<code>T*</code>). Pro: Forgetting the size of an array on the type level allows a pointer to point to the first element of an array of <em>any</em> size. Con: Given a pointer to the first (or any other) element of an array, there is no way to detect how large that array is or where exactly the pointer points to relative to the bounds of the array. <a href=""https://stackoverflow.com/questions/4261074/"">Pointers are extremely stupid</a>.</p>

<h2>Arrays are not pointers</h2>

<p>The compiler will silently generate a pointer to the first element of an array whenever it is deemed useful, that is, whenever an operation would fail on an array but succeed on a pointer. This conversion from array to pointer is trivial, since the resulting pointer <em>value</em> is simply the address of the array. Note that the pointer is <em>not</em> stored as part of the array itself (or anywhere else in memory). <strong>An array is not a pointer.</strong></p>

<pre><code>static_assert(!std::is_same&lt;int[8], int*&gt;::value, ""an array is not a pointer"");
</code></pre>

<p>One important context in which an array does <em>not</em> decay into a pointer to its first element is when the <code>&amp;</code> operator is applied to it. In that case, the <code>&amp;</code> operator yields a pointer to the <em>entire</em> array, not just a pointer to its first element. Although in that case the <em>values</em> (the addresses) are the same, a pointer to the first element of an array and a pointer to the entire array are completely distinct types:</p>

<pre><code>static_assert(!std::is_same&lt;int*, int(*)[8]&gt;::value, ""distinct element type"");
</code></pre>

<p>The following ASCII art explains this distinction:</p>

<pre><code>      +-----------------------------------+
      | +---+---+---+---+---+---+---+---+ |
+---&gt; | |   |   |   |   |   |   |   |   | | int[8]
|     | +---+---+---+---+---+---+---+---+ |
|     +---^-------------------------------+
|         |
|         |
|         |
|         |  pointer_to_the_first_element   int*
|
|  pointer_to_the_entire_array              int(*)[8]
</code></pre>

<p>Note how the pointer to the first element only points to a single integer (depicted as a small box), whereas the pointer to the entire array points to an array of 8 integers (depicted as a large box).</p>

<p>The same situation arises in classes and is maybe more obvious. A pointer to an object and a pointer to its first data member have the same <em>value</em> (the same address), yet they are completely distinct types.</p>

<p>If you are unfamiliar with the C declarator syntax, the parenthesis in the type <code>int(*)[8]</code> are essential:</p>

<ul>
<li><code>int(*)[8]</code> is a pointer to an array of 8 integers.</li>
<li><code>int*[8]</code> is an array of 8 pointers, each element of type <code>int*</code>.</li>
</ul>

<h1>Accessing elements</h1>

<p>C++ provides two syntactic variations to access individual elements of an array.
Neither of them is superior to the other, and you should familiarize yourself with both.</p>

<h2>Pointer arithmetic</h2>

<p>Given a pointer <code>p</code> to the first element of an array, the expression <code>p+i</code> yields a pointer to the i-th element of the array. By dereferencing that pointer afterwards, one can access individual elements:</p>

<pre><code>std::cout &lt;&lt; *(x+3) &lt;&lt; "", "" &lt;&lt; *(x+7) &lt;&lt; std::endl;
</code></pre>

<p>If <code>x</code> denotes an <em>array</em>, then array-to-pointer decay will kick in, because adding an array and an integer is meaningless (there is no plus operation on arrays), but adding a pointer and an integer makes sense:</p>

<pre><code>   +---+---+---+---+---+---+---+---+
x: |   |   |   |   |   |   |   |   |   int[8]
   +---+---+---+---+---+---+---+---+
     ^           ^               ^
     |           |               |
     |           |               |
     |           |               |
x+0  |      x+3  |          x+7  |     int*
</code></pre>

<p>(Note that the implicitly generated pointer has no name, so I wrote <code>x+0</code> in order to identify it.)</p>

<p>If, on the other hand, <code>x</code> denotes a <em>pointer</em> to the first (or any other) element of an array, then array-to-pointer decay is not necessary, because the pointer on which <code>i</code> is going to be added already exists:</p>

<pre><code>   +---+---+---+---+---+---+---+---+
   |   |   |   |   |   |   |   |   |   int[8]
   +---+---+---+---+---+---+---+---+
     ^           ^               ^
     |           |               |
     |           |               |
   +-|-+         |               |
x: | | |    x+3  |          x+7  |     int*
   +---+
</code></pre>

<p>Note that in the depicted case, <code>x</code> is a pointer <em>variable</em> (discernible by the small box next to <code>x</code>), but it could just as well be the result of a function returning a pointer (or any other expression of type <code>T*</code>).</p>

<h2>Indexing operator</h2>

<p>Since the syntax <code>*(x+i)</code> is a bit clumsy, C++ provides the alternative syntax <code>x[i]</code>:</p>

<pre><code>std::cout &lt;&lt; x[3] &lt;&lt; "", "" &lt;&lt; x[7] &lt;&lt; std::endl;
</code></pre>

<p>Due to the fact that addition is commutative, the following code does exactly the same:</p>

<pre><code>std::cout &lt;&lt; 3[x] &lt;&lt; "", "" &lt;&lt; 7[x] &lt;&lt; std::endl;
</code></pre>

<p>The definition of the indexing operator leads to the following interesting equivalence:</p>

<pre><code>&amp;x[i]  ==  &amp;*(x+i)  ==  x+i
</code></pre>

<p>However, <code>&amp;x[0]</code> is generally <em>not</em> equivalent to <code>x</code>. The former is a pointer, the latter an array. Only when the context triggers array-to-pointer decay can <code>x</code> and <code>&amp;x[0]</code> be used interchangeably. For example:</p>

<pre><code>T* p = &amp;array[0];  // rewritten as &amp;*(array+0), decay happens due to the addition
T* q = array;      // decay happens due to the assignment
</code></pre>

<p>On the first line, the compiler detects an assignment from a pointer to a pointer, which trivially succeeds. On the second line, it detects an assignment from an <em>array</em> to a pointer. Since this is meaningless (but <em>pointer</em> to pointer assignment makes sense), array-to-pointer decay kicks in as usual.</p>

<h2>Ranges</h2>

<p>An array of type <code>T[n]</code> has <code>n</code> elements, indexed from <code>0</code> to <code>n-1</code>; there is no element <code>n</code>. And yet, to support half-open ranges (where the beginning is <em>inclusive</em> and the end is <em>exclusive</em>), C++ allows the computation of a pointer to the (non-existent) n-th element, but it is illegal to dereference that pointer:</p>

<pre><code>   +---+---+---+---+---+---+---+---+....
x: |   |   |   |   |   |   |   |   |   .   int[8]
   +---+---+---+---+---+---+---+---+....
     ^                               ^
     |                               |
     |                               |
     |                               |
x+0  |                          x+8  |     int*
</code></pre>

<p>For example, if you want to sort an array, both of the following would work equally well:</p>

<pre><code>std::sort(x + 0, x + n);
std::sort(&amp;x[0], &amp;x[0] + n);
</code></pre>

<p>Note that it is illegal to provide <code>&amp;x[n]</code> as the second argument since this is equivalent to <code>&amp;*(x+n)</code>, and the sub-expression <code>*(x+n)</code> technically invokes <a href=""https://stackoverflow.com/questions/3144904/"">undefined behavior</a> in C++ (but not in C99).</p>

<p>Also note that you could simply provide <code>x</code> as the first argument. That is a little too terse for my taste, and it also makes template argument deduction a bit harder for the compiler, because in that case the first argument is an array but the second argument is a pointer. (Again, array-to-pointer decay kicks in.)</p>
","4810668"
"How can I iterate through a string and also know the index (current position)?","109760","","<p>Often when iterating through a string (or any enumerable object), we are not only interested in the current value, but also the position (index). To accomplish this by using <code>string::iterator</code> we have to maintain a separate index:</p>

<pre><code>  string str (""Test string"");
  string::iterator it;
  int index = 0;
  for ( it = str.begin() ; it &lt; str.end(); it++ ,index++)
  {
         cout &lt;&lt; index &lt;&lt; *it;
  }
</code></pre>

<p>Above style seems does not seem superior to the 'c-style'</p>

<pre><code>  string str (""Test string"");
  for ( int i = 0 ; i &lt; str.length(); i++)
  {
         cout &lt;&lt; i &lt;&lt; str[i] ;
  }
</code></pre>

<p>In Ruby, we can get both content and index in a elegant way:</p>

<pre><code>  ""hello"".split("""").each_with_index {|c, i| puts ""#{i} , #{c}"" }
</code></pre>

<p>So, what is the best practice in C++ to iterate through an enumerable object and also keep track of the current index?</p>
","<p>I've never heard of a best practice for this specific question. However, one best practice in general is to use the simplest solution that solves the problem. In this case the array-style access (or c-style if you want to call it that) is the simplest way to iterate while having the index value available. So I would certainly recommend that way.</p>
","1315072"
"VC++ fatal error LNK1168: cannot open filename.exe for writing","109725","","<p>suddenly my visual studio express 2010 c++ stopped rebuilding my project.<br>
When I first hit F7 the project builds and runs fine (heck, it's a hello world example).<br>
Then I make some changes and hit F7 again, then I get:<br>
<strong>1>LINK : fatal error LNK1168: cannot open C:\Users\username\Documents\Visual Studio 2010\Projects\console\Debug\console.exe for writing</strong><br><br>
Now the funny thing comes:</p>

<ol>
<li>the app is not running and it's not shown in task manager.</li>
<li>going into the project directory and trying to remove it with hands comes with success  but the file APPEARS AGAIN FROM NOWHERE o_O</li>
<li>the system restore is disabled</li>
<li>i also tried to take the ownership of the whole damn drive</li>
<li>each time I delete the file it recreates itself again but sometimes it stops doing that</li>
<li>if delete the file (and it recreates after that) and then I start sysinternals procmon then the file will dissapear.</li>
<li>if I start procmon before - then the file keeps appearing after delete like always</li>
</ol>

<p>OS: W7 SP1 64-bit, with latest updates<br>
any ideas, please? google didn't help me :(</p>
","<p>Enable “Application Experience” service.  Launch a console window and type <code>net start AeLookupSvc</code></p>

<ul>
<li><a href=""http://support.microsoft.com/kb/902196"" rel=""noreferrer"">http://support.microsoft.com/kb/902196</a></li>
</ul>
","12124290"
"How to detect reliably Mac OS X, iOS, Linux, Windows in C preprocessor?","109507","","<p>If there's some cross-platform C/C++ code that should be compiled on Mac OS X, iOS, Linux, Windows, how can I detect them reliably during preprocessor process?</p>
","<p>There are predefined macros that are used by most compilers, you can find the list <a href=""http://sourceforge.net/p/predef/wiki/OperatingSystems/"" rel=""noreferrer"">[here]</a>. GCC compiler predefined macros can be found <a href=""http://gcc.gnu.org/onlinedocs/cpp/Predefined-Macros.html"" rel=""noreferrer"">[here]</a>.
Here is an example for gcc:</p>

<pre><code>#ifdef _WIN32
   //define something for Windows (32-bit and 64-bit, this part is common)
   #ifdef _WIN64
      //define something for Windows (64-bit only)
   #else
      //define something for Windows (32-bit only)
   #endif
#elif __APPLE__
    #include ""TargetConditionals.h""
    #if TARGET_IPHONE_SIMULATOR
         // iOS Simulator
    #elif TARGET_OS_IPHONE
        // iOS device
    #elif TARGET_OS_MAC
        // Other kinds of Mac OS
    #else
    #   error ""Unknown Apple platform""
    #endif
#elif __linux__
    // linux
#elif __unix__ // all unices not caught above
    // Unix
#elif defined(_POSIX_VERSION)
    // POSIX
#else
#   error ""Unknown compiler""
#endif
</code></pre>

<p>This defined macroses depends on compiler that you are going to use.</p>

<p>The <code>_WIN64</code> <code>#ifdef</code> can be nested into the <code>_WIN32</code> <code>#ifdef</code> because <code>_WIN32</code> is defined when targeting Windows, not only the x86 version. This prevents code duplication if some includes are common to both.</p>
","5920028"
"How to check if input is numeric in C++","109335","","<p>I want to create a program that takes in integer input from the user and then terminates when the user doesn't enter anything at all (ie, just presses enter). However, I'm having trouble validating the input (making sure that the user is inputting integers, not strings. atoi() won't work, since the integer inputs can be more than one digit.</p>

<p>What is the best way of validating this input? I tried something like the following, but I'm not sure how to complete it:</p>

<pre><code>char input

while( cin&gt;&gt;input != '\n')
{
     //some way to check if input is a valid number
     while(!inputIsNumeric)
     {
         cin&gt;&gt;input;
     }
}
</code></pre>
","<p>When <code>cin</code> gets input it can't use, it sets <a href=""http://en.cppreference.com/w/cpp/io/basic_ios/fail"" rel=""noreferrer""><code>failbit</code></a>:</p>

<pre><code>int n;
cin &gt;&gt; n;
if(!cin) // or if(cin.fail())
{
    // user didn't input a number
    cin.clear(); // reset failbit
    cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(), '\n'); //skip bad input
    // next, request user reinput
}
</code></pre>

<p>When <code>cin</code>'s <code>failbit</code> is set, use <a href=""http://en.cppreference.com/w/cpp/io/basic_ios/clear"" rel=""noreferrer""><code>cin.clear()</code></a> to reset the state of the stream, then <a href=""http://en.cppreference.com/w/cpp/io/basic_istream/ignore"" rel=""noreferrer""><code>cin.ignore()</code></a> to expunge the remaining input, and then request that the user re-input. The stream will misbehave so long as the failure state is set and the stream contains bad input.</p>
","5655685"
"How do you copy the contents of an array to a std::vector in C++ without looping?","109316","","<p>I have an array of values that is passed to my function from a different part of the program that I need to store for later processing.  Since I don't know how many times my function will be called before it is time to process the data, I need a dynamic storage structure, so I chose a <code>std::vector</code>.  I don't want to have to do the standard loop to <code>push_back</code> all the values individually, it would be nice if I could just copy it all using something similar to <code>memcpy</code>.</p>
","<p>If you can construct the vector after you've gotten the array and array size, you can just say:</p>

<pre><code>std::vector&lt;ValueType&gt; vec(a, a + n);
</code></pre>

<p>...assuming <code>a</code> is your array and <code>n</code> is the number of elements it contains.  Otherwise, <code>std::copy()</code> w/<code>resize()</code> will do the trick.</p>

<p>I'd stay away from <code>memcpy()</code> unless you can be sure that the values are plain-old data (POD) types.</p>

<p>Also, worth noting that none of these really avoids the for loop--it's just a question of whether you have to see it in your code or not.  O(n) runtime performance is unavoidable for copying the values.</p>

<p>Finally, note that C-style arrays are perfectly valid containers for most STL algorithms--the raw pointer is equivalent to <code>begin()</code>, and (<code>ptr + n</code>) is equivalent to <code>end()</code>.</p>
","259379"
"How to use string.substr() function?","109313","","<p>I want to make a program that will read some number in string format and output it like this: if the number is 12345 it should then output 12 23 34 45 . I tried using the substr() function from the c++ string library, but it gives me strange results - it outputs 1 23 345 45 instead of the expected result. Why ?</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstdlib&gt;
using namespace std;
int main(void)
{
    string a;
    cin &gt;&gt; a;
    string b;
    int c;

    for(int i=0;i&lt;a.size()-1;++i)
    {
        b = a.substr(i,i+1);
        c = atoi(b.c_str());
        cout &lt;&lt; c &lt;&lt; "" "";
    }
    cout &lt;&lt; endl;
    return 0;
}
</code></pre>
","<p>If I am correct, the second parameter of <a href=""http://en.cppreference.com/w/cpp/string/basic_string/substr"" rel=""noreferrer""><code>substr()</code></a> should be the length of the substring. How about</p>

<pre><code>b = a.substr(i,2);
</code></pre>

<p>?</p>
","2477864"
"C++: Where to initialize variables in constructor","109294","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/4589237/c-initialization-lists"">C++ initialization lists</a>  </p>
</blockquote>



<p>What are the pros/cons of initializing variables at option 1 vs option 2?</p>

<pre><code>class MyClass
{
public:
    MyClass( float f, char a );
private:
    float mFloat;
    char mCharacter;
    bool mBoolean;
    int mInteger;
};

MyClass::MyClass( float f, char a ) : mFloat( f ), mBoolean( true ) // option 1.
{
    // option 2
    mCharacter = a;
    mInteger = 0;
}
</code></pre>

<p>Edit:
Why is option 2 so common?</p>
","<p>In short, always prefer initialization lists when possible. 2 reasons:</p>

<ul>
<li><p>If you do not mention a variable in a class's initialization list, the constructor will default initialize it before entering the body of the constructor you've written. This means that option 2 will lead to each variable being written to twice, once for the default initialization and once for the assignment in the constructor body.</p></li>
<li><p>Also, as mentioned by mwigdahl and avada in other answers, const members and reference members can <strong>only</strong> be initialized in an initialization list.</p></li>
</ul>

<p>Also note that variables are always initialized on the order they are declared in the class declaration, not in the order they are listed in an initialization list (with proper warnings enabled a compiler will warn you if a list is written out of order). Similarly, destructors will call member destructors in the opposite order, last to first in the class declaration, after the code in your class's destructor has executed.</p>
","6822479"
"Convert wchar_t to char","109287","","<p>I was wondering is it safe to do so?</p>

<pre><code>wchar_t wide = /* something */;
assert(wide &gt;= 0 &amp;&amp; wide &lt; 256 &amp;&amp;);
char myChar = static_cast&lt;char&gt;(wide);
</code></pre>

<p>If I am pretty sure the wide char will fall within ASCII range.</p>
","<p><code>assert</code> is for ensuring that something is true in a debug mode, without it having any effect in a release build. Better to use an <code>if</code> statement and have an alternate plan for characters that are outside the range, unless the only way to get characters outside the range is through a program bug.</p>

<p>Also, depending on your character encoding, you might find a difference between the Unicode characters 0x80 through 0xff and their <code>char</code> version.</p>
","3020014"
"Installing OpenCV 2.4.3 in Visual C++ 2010 Express","109274","","<p>How do you install and use OpenCV 2.4.3 under VC++ 2010 Express?</p>
","<p><strong>1. Installing OpenCV 2.4.3</strong></p>

<p>First, get <a href=""http://sourceforge.net/projects/opencvlibrary/"" rel=""noreferrer"">OpenCV 2.4.3</a> from sourceforge.net. Its a self-extracting so just double click to start the installation. Install it in a directory, say <em><code>C:\</code></em>.</p>

<p><img src=""https://i.stack.imgur.com/AvByM.png"" alt=""OpenCV self-extractor""></p>

<p>Wait until all files get extracted. It will create a new directory <em><code>C:\opencv</code></em> which 
contains OpenCV header files, libraries, code samples, etc.</p>

<p>Now you need to add the directory <em><code>C:\opencv\build\x86\vc10\bin</code></em> to your system PATH. This directory contains OpenCV DLLs required for running your code.</p>

<p>Open <strong>Control Panel</strong> &rarr; <strong>System</strong> &rarr; <strong>Advanced system settings</strong> &rarr; <strong>Advanced</strong> Tab &rarr; <strong>Environment variables...</strong></p>

<p><img src=""https://i.stack.imgur.com/0b7is.png"" alt=""enter image description here""></p>

<p>On the System Variables section, select <strong>Path</strong> (1), <strong>Edit</strong> (2), and type <em><code>C:\opencv\build\x86\vc10\bin;</code></em> (3), then click <strong>Ok</strong>.</p>

<p>On some computers, you may need to restart your computer for the system to recognize the environment path variables.</p>

<p>This will completes the OpenCV 2.4.3 installation on your computer.</p>

<hr>

<p><strong>2. Create a new project and set up Visual C++</strong></p>

<p>Open Visual C++ and select <strong>File</strong> &rarr; <strong>New</strong> &rarr; <strong>Project...</strong> &rarr; <strong>Visual C++</strong> &rarr; <strong>Empty Project</strong>. Give a name for your project (e.g: <code>cvtest</code>) and set the project location (e.g: <code>c:\projects</code>).</p>

<p><img src=""https://i.stack.imgur.com/yTA7p.png"" alt=""New project dialog""></p>

<p>Click <strong>Ok</strong>. Visual C++ will create an empty project.</p>

<p><img src=""https://i.stack.imgur.com/tBMK0.png"" alt=""VC++ empty project""></p>

<p>Make sure that ""Debug"" is selected in the solution configuration combobox. Right-click <code>cvtest</code> and select <strong>Properties</strong> &rarr; <strong>VC++ Directories</strong>.</p>

<p><img src=""https://i.stack.imgur.com/GlDRa.png"" alt=""Project property dialog""></p>

<p>Select <strong>Include Directories</strong> to add a new entry and type <em><code>C:\opencv\build\include</code></em>.</p>

<p><img src=""https://i.stack.imgur.com/yPWjq.png"" alt=""Include directories dialog""></p>

<p>Click <strong>Ok</strong> to close the dialog.</p>

<p>Back to the Property dialog, select <strong>Library Directories</strong> to add a new entry and type <em><code>C:\opencv\build\x86\vc10\lib</code></em>.</p>

<p><img src=""https://i.stack.imgur.com/X3B87.png"" alt=""Library directories dialog""></p>

<p>Click <strong>Ok</strong> to close the dialog. </p>

<p>Back to the property dialog, select <strong>Linker</strong> &rarr; <strong>Input</strong> &rarr; <strong>Additional Dependencies</strong> to add new entries. On the popup dialog, type the files below:</p>

<pre><code>opencv_calib3d243d.lib
opencv_contrib243d.lib
opencv_core243d.lib
opencv_features2d243d.lib
opencv_flann243d.lib
opencv_gpu243d.lib
opencv_haartraining_engined.lib
opencv_highgui243d.lib
opencv_imgproc243d.lib
opencv_legacy243d.lib
opencv_ml243d.lib
opencv_nonfree243d.lib
opencv_objdetect243d.lib
opencv_photo243d.lib
opencv_stitching243d.lib
opencv_ts243d.lib
opencv_video243d.lib
opencv_videostab243d.lib
</code></pre>

<p>Note that the filenames end with ""d"" (for ""debug""). Also note that if you have installed another version of OpenCV (say 2.4.9) these filenames will end with 249d instead of 243d (opencv_core249d.lib..etc).</p>

<p><img src=""https://i.stack.imgur.com/6ESuk.png"" alt=""enter image description here""></p>

<p>Click <strong>Ok</strong> to close the dialog. Click <strong>Ok</strong> on the project properties dialog to save all settings.</p>

<blockquote>
  <p><strong>NOTE:</strong>   </p>
  
  <p>These steps will configure Visual C++ for the ""Debug"" solution. For ""Release"" solution (optional), you need to
  repeat adding the OpenCV directories and in <strong>Additional
  Dependencies</strong> section, use:      </p>
  
  <p><code>opencv_core243.lib</code><br>
  <code>opencv_imgproc243.lib</code><br>
  <code>...</code>      </p>
  
  <p>instead of:  </p>
  
  <p><code>opencv_core243d.lib</code><br>
  <code>opencv_imgproc243d.lib</code><br>
  <code>...</code>   </p>
</blockquote>

<p>You've done setting up Visual C++, now is the time to write the real code. Right click your project and select <strong>Add</strong> &rarr; <strong>New Item...</strong> &rarr; <strong>Visual C++</strong> &rarr; <strong>C++ File</strong>. </p>

<p><img src=""https://i.stack.imgur.com/wTk7K.png"" alt=""Add new source file""></p>

<p>Name your file (e.g: <code>loadimg.cpp</code>) and click <strong>Ok</strong>. Type the code below in the editor:</p>

<pre><code>#include &lt;opencv2/highgui/highgui.hpp&gt;
#include &lt;iostream&gt;

using namespace cv;
using namespace std;

int main()
{
    Mat im = imread(""c:/full/path/to/lena.jpg"");
    if (im.empty()) 
    {
        cout &lt;&lt; ""Cannot load image!"" &lt;&lt; endl;
        return -1;
    }
    imshow(""Image"", im);
    waitKey(0);
}
</code></pre>

<p>The code above will load <em><code>c:\full\path\to\lena.jpg</code></em> and display the image. You can 
use any image you like, just make sure the path to the image is correct.</p>

<p>Type F5 to compile the code, and it will display the image in a nice window.</p>

<p><img src=""https://i.stack.imgur.com/Gaa6P.png"" alt=""First OpenCV program""></p>

<p>And that is your first OpenCV program!</p>

<hr>

<p><strong>3. Where to go from here?</strong></p>

<p>Now that your OpenCV environment is ready, what's next?</p>

<ol>
<li>Go to the samples dir &rarr; <em><code>c:\opencv\samples\cpp</code></em>.</li>
<li>Read and compile some code.</li>
<li>Write your own code.</li>
</ol>
","10901906"
"CMake does not find Visual C++ compiler","109235","","<p>After installing Visual Studio 2015 and running CMake on a previous project, cmake errors stating that it could not find the C compiler.</p>

<pre><code>The C compiler identification is unknown
The CXX compiler identification is unknown
CMake Error at CMakeLists.txt:4 (PROJECT):
  No CMAKE_C_COMPILER could be found.



CMake Error at CMakeLists.txt:4 (PROJECT):
  No CMAKE_CXX_COMPILER could be found.
</code></pre>

<p>I went searching for <code>cl.exe</code> in the Visual Studio folder,<code>C:\Program Files\Microsoft Visual Studio 14.0</code>, and could not find it.<br>
How do I set up CMake to work on Windows with Visual Studio 2015?</p>
","<p>I have found the solution. While Visual Studio IDE installed successfully it did not install any build tools and therefore did not install the C++ compiler. By attempting to manually <a href=""https://msdn.microsoft.com/en-us/library/ms235629.aspx"">create a C++ project in the Visual Studio 2015 GUI</a> I was able to prompt it to download the C++ packages. Cmake was then able to find the compiler without any difficulty.</p>
","31619842"
"How to include libraries in Visual Studio 2012?","109230","","<p>I started with learning C++ a few days ago and I would like to get some data to make it more funny. I found <a href=""http://unirest.io/objective-c.html"">a powerful C++ library called Unirest</a> that can help me to get data from many APIs and after practice the basics :)</p>

<p>I don't know how to include libraries into my project. I fond some videos about how to do it so I just created <code>libs</code> folder (like i always do when I'm programming in PHP) and I copied library files. After I included header file <code>UNIRest.h</code> into my source and added the <code>libs</code> directory into VS+ Directories option in <strong>Project Properties - Configuration Properties - VC+ Directories</strong>. Everything is still OK. But when I opened the header file <code>UNIRest.h</code> the problem appeared:</p>

<pre><code>#import ""UNIHTTPRequest.h""
#import ""UNIHTTPRequestWithBody.h""
#import ""HttpRequest/UNISimpleRequest.h""
#import ""HttpRequest/UNIBodyRequest.h""
#import ""HttpResponse/UNIHTTPBinaryResponse.h""
#import ""HttpResponse/UNIHTTPJsonResponse.h""
#import ""HttpResponse/UNIHTTPStringResponse.h""
</code></pre>

<p>All of those macros are underlined and compilation failed with message:</p>

<pre><code>fatal error C1083: Cannot open type library file: 'libs\unirest\unihttprequest.h': Error loading type library/DLL.
</code></pre>

<p>Could you please help me? Hope it's not just a stupid question because I tried to make it works whole afternoon :(</p>
","<p>Typically you need to do 5 things to include a library in your project:</p>

<p>1) Add #include statements necessary files with declarations/interfaces, e.g.:</p>

<pre><code>#include ""library.h""
</code></pre>

<p>2) Add an include directory for the compiler to look into</p>

<p>-> Configuration Properties/VC++ Directories/Include Directories (click and edit, add a new entry)</p>

<p>3) Add a library directory for *.lib files:</p>

<p>-> project(on top bar)/properties/Configuration Properties/VC++ Directories/Library Directories (click and edit, add a new entry)</p>

<p>4) Link the lib's *.lib files</p>

<p>-> Configuration Properties/Linker/Input/Additional Dependencies (e.g.: library.lib;</p>

<p>5) Place *.dll files either:</p>

<p>-> in the directory you'll be opening your final executable from <strong>or</strong> into Windows/system32</p>
","20059167"
"Create a directory if it doesn't exist","109209","","<p>In my app I want to copy a file to the other hard disk so this is my code:</p>

<pre><code> #include &lt;windows.h&gt;

using namespace std;

int main(int argc, char* argv[] )
{
    string Input = ""C:\\Emploi NAm.docx"";
    string CopiedFile = ""Emploi NAm.docx"";
    string OutputFolder = ""D:\\test"";
    CopyFile(Input.c_str(), string(OutputFolder+CopiedFile).c_str(), TRUE);

    return 0;
}
</code></pre>

<p>so after executing this, it shows me in the <code>D:</code>HDD a file <code>testEmploi NAm.docx</code>
but I want him to create the test folder if it doesn't exist.</p>

<p>I want to do that without using the Boost library.</p>
","<p>Use the WINAPI <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa363855%28v=vs.85%29.aspx"" rel=""noreferrer""><code>CreateDirectory()</code></a> function to create a folder.</p>

<p>You can use this function without checking if the directory already exists as it will fail but <code>GetLastError()</code> will return <code>ERROR_ALREADY_EXISTS</code>:</p>

<pre><code>if (CreateDirectory(OutputFolder.c_str(), NULL) ||
    ERROR_ALREADY_EXISTS == GetLastError())
{
    // CopyFile(...)
}
else
{
     // Failed to create directory.
}
</code></pre>

<p>The code for constructing the target file is incorrect:</p>

<pre><code>string(OutputFolder+CopiedFile).c_str()
</code></pre>

<p>this would produce <code>""D:\testEmploi Nam.docx""</code>: there is a missing path separator between the directory and the filename. Example fix:</p>

<pre><code>string(OutputFolder+""\\""+CopiedFile).c_str()
</code></pre>
","9235708"
"Do you (really) write exception safe code?","109185","","<p>Exception handling (EH) seems to be the current standard, and by searching the web, I can not find any novel ideas or methods that try to improve or replace it (well, some variations exist, but nothing novel).</p>

<p>Though most people seem to ignore it or just accept it, EH <strong>has</strong> some huge drawbacks: exceptions are invisible to the code and it creates many, many possible exit points. Joel on software wrote an <a href=""http://www.joelonsoftware.com/items/2003/10/13.html"" rel=""noreferrer"">article about it</a>. The comparison to <code>goto</code> fits perfect, it made me think again about EH.</p>

<p>I try to avoid EH and just use return values, callbacks or whatever fits the purpose. But <strong>when you have to write reliable code, you just can't ignore EH these days</strong>: It starts with the <code>new</code>, which may throw an exception, instead of just returning 0 (like in the old days). This makes about any line of C++ code <em>vulnerable</em> to an exception. And then more places in the C++ foundational code throw exceptions... std lib does it, and so on.</p>

<p>This feels like <strong>walking on shaky grounds</strong>.. So, now we are forced to take care about exceptions!</p>

<p>But its hard, its really hard. You have to learn to write exception safe code, and even if you have some experience with it, it will still be required to double check any single line of code to be safe! Or you start to put try/catch blocks everywhere, which clutters the code until it reaches a state of unreadability.</p>

<p>EH replaced the old clean deterministical approach (return values..), which had just a few but understandable and easily solveable drawbacks with an approach that creates many possible exit points in your code, and if you start writing code that catches exceptions (what you are forced to do at some point), then it even creates a multitude of paths through your code (code in the catch blocks, think about a server program where you need logging facilities other than std::cerr ..). EH has advantages, but that's not the point.</p>

<p>My actual questions:</p>

<ul>
<li>Do you really write exception safe code?</li>
<li>Are you sure your last ""production ready"" code is exception safe?</li>
<li>Can you even be sure, that it is?</li>
<li>Do you know and/or actually use alternatives that work?</li>
</ul>
","<p>Your question makes an assertion, that ""Writing exception safe code is very hard"". I will answer your questions first, and then, answer the hidden question behind them.</p>

<h2>Answering questions</h2>

<blockquote>
  <p>Do you really write exception safe code?</p>
</blockquote>

<p>Of course I do.</p>

<p>This is <b>the</b> reason Java lost a lot of its appeal to me as a C++ programmer (lack of RAII semantics), but I am digressing: This is a C++ question.</p>

<p>It is in fact necessary when you need to work with STL or Boost code. For example, C++ threads (<code>boost::thread</code> or <code>std::thread</code>) will throw an exception to exit gracefully.</p>

<blockquote>
  <p>Are you sure your last ""production ready"" code is exception safe?</p>
  
  <p>Can you even be sure, that it is?</p>
</blockquote>

<p>Writing exception-safe code is like writing bug-free code.</p>

<p>You can't be 100% sure your code is exception safe. But then, you strive for it, using well known patterns, and avoiding well known anti-patterns.</p>

<blockquote>
  <p>Do you know and/or actually use alternatives that work?</p>
</blockquote>

<p>There are <em>no</em> viable alternatives in C++ (i.e. you'll need to revert back to C, and avoid C++ libraries, as well as external surprises like Windows SEH).</p>

<h2>Writing exception safe code</h2>

<p>To write exception safe code, you must know <strong>first</strong> what level of exception safety each instruction you write is.</p>

<p>For example, a <code>new</code> can throw an exception, but assigning a built-in (e.g. an int, or a pointer) won't fail. A swap will never fail (don't ever write a throwing swap), a <code>std::list::push_back</code> can throw...</p>

<h3>Exception guarantee</h3>

<p>The first thing to understand is that you must be able to evaluate the exception guarantee offered by all of your functions:</p>

<ol>
<li><strong>none</strong> : Your code should never offer that. This code will leak everything, and break down at the very first exception thrown.</li>
<li><strong>basic</strong> : This is the guarantee you must at the very least offer, that is, if an exception is thrown, no resources are leaked, and all objects are still whole</li>
<li><strong>strong</strong> : The processing will either succeed, or throw an exception, but if it throws, then the data will be in the same state as if the processing had not started at all (this gives a transactional power to C++)</li>
<li><strong>nothrow/nofail</strong> : The processing will succeed.</li>
</ol>

<h3>Example of code</h3>

<p>The following code seems like correct C++, but in truth, offers the ""none"" guarantee, and thus, it is not correct:</p>

<pre><code>void doSomething(T &amp; t)
{
   if(std::numeric_limits&lt;int&gt;::max() &gt; t.integer)  // 1.   nothrow/nofail
      t.integer += 1 ;                              // 1'.  nothrow/nofail
   X * x = new X() ;                // 2. basic : can throw with new and X constructor
   t.list.push_back(x) ;            // 3. strong : can throw
   x-&gt;doSomethingThatCanThrow() ;   // 4. basic : can throw
}
</code></pre>

<p>I write all my code with this kind of analysis in mind.</p>

<p>The lowest guarantee offered is basic, but then, the ordering of each instruction makes the whole function ""none"", because if 3. throws, x will leak.</p>

<p>The first thing to do would be to make the function ""basic"", that is putting x in a smart pointer until it is safely owned by the list:</p>

<pre><code>void doSomething(T &amp; t)
{
   if(std::numeric_limits&lt;int&gt;::max() &gt; t.integer)  // 1.   nothrow/nofail
      t.integer += 1 ;                              // 1'.  nothrow/nofail
   std::auto_ptr&lt;X&gt; x(new X()) ;    // 2.  basic : can throw with new and X constructor
   X * px = x.get() ;               // 2'. nothrow/nofail
   t.list.push_back(px) ;           // 3.  strong : can throw
   x.release() ;                    // 3'. nothrow/nofail
   px-&gt;doSomethingThatCanThrow() ;  // 4.  basic : can throw
}
</code></pre>

<p>Now, our code offers a ""basic"" guarantee. Nothing will leak, and all objects will be in a correct state. But we could offer more, that is, the strong guarantee. This is where it <em>can</em> become costly, and this is why <strong>not all</strong> C++ code is strong. Let's try it:</p>

<pre><code>void doSomething(T &amp; t)
{
   // we create ""x""
   std::auto_ptr&lt;X&gt; x(new X()) ;    // 1. basic : can throw with new and X constructor
   X * px = x.get() ;               // 2. nothrow/nofail
   px-&gt;doSomethingThatCanThrow() ;  // 3. basic : can throw

   // we copy the original container to avoid changing it
   T t2(t) ;                        // 4. strong : can throw with T copy-constructor

   // we put ""x"" in the copied container
   t2.list.push_back(px) ;          // 5. strong : can throw
   x.release() ;                    // 6. nothrow/nofail
   if(std::numeric_limits&lt;int&gt;::max() &gt; t2.integer)  // 7.   nothrow/nofail
      t2.integer += 1 ;                              // 7'.  nothrow/nofail

   // we swap both containers
   t.swap(t2) ;                     // 8. nothrow/nofail
}
</code></pre>

<p>We re-ordered the operations, first creating and setting <code>X</code> to its right value. If any operation fails, then <code>t</code> is not modified, so, operation 1 to 3 can be considered ""strong"": If something throws, <code>t</code> is not modified, and <code>X</code> will not leak because it's owned by the smart pointer.</p>

<p>Then, we create a copy <code>t2</code> of <code>t</code>, and work on this copy from operation 4 to 7. If something throws, <code>t2</code> is modified, but then, <code>t</code> is still the original. We still offer the strong guarantee.</p>

<p>Then, we swap <code>t</code> and <code>t2</code>. Swap operations should be nothrow in C++, so lets hope the swap you wrote for <code>T</code> is nothrow (if it isn't, rewrite it so it is nothrow).</p>

<p>So, if we reach the end of the function, everything succeeded (No need of a return type) and <code>t</code> has its excepted value. If it fails, then <code>t</code> has still its original value.</p>

<p>Now, offering the strong guarantee could be quite costly, so don't strive to offer the strong guarantee to all your code, but if you can do it without a cost (and C++ inlining and other optimization could make all the code above costless), then do it. The function user will thank you for it.</p>

<h3>Conclusion</h3>

<p>It takes some habit to write exception-safe code. You'll need to evaluate the guarantee offered by each instruction you'll use, and then, you'll need to evaluate the guarantee offered by a list of instructions.</p>

<p>Of course, the C++ compiler won't back up the guarantee (in my code, I offer the guarantee as a @warning doxygen tag), which is kinda sad, but it should not stop you from trying to write exception safe code.</p>

<h3>Normal failure vs. bug</h3>

<p>How can a programmer guarantee that a nofail function will always succeed? After all, the function could have a bug.</p>

<p>This is true. The exception guarantees are supposed to be offered by bug-free code. But then, in any language, calling a function supposes the function is bug-free. No sane code protects itself against the possibility of it having a bug. Write code the best you can, and then, offer the guarantee with the supposition it is bug free. And if there is a bug, correct it.</p>

<p>Exceptions are for exceptional processing failure, not for code bugs.</p>

<h3>Last words</h3>

<p>Now, the question is ""Is this worth it ?"".</p>

<p>Of course it is. Having a ""nothrow/nofail"" function knowing that the function won't fail is a great boon. The same can be said for a ""strong"" function, which enables you to write code with transactional semantics, like databases, with commit/rollback features, the commit being normal execution of the code, throwing exceptions being the rollback.</p>

<p>Then, the ""basic"" is the very least guarantee you should offer. C++ is a very strong language there, with its scopes, enabling you to avoid any resource leaks (something a garbage collector would find it difficult to offer for database, connection or file handles).</p>

<p>So, as far as I see it, it <strong>is</strong> worth it.</p>

<h3>Edit 2010-01-29: About non-throwing swap</h3>

<p>nobar made a comment that, I believe, is quite relevant, because it is part of ""how do you write exception safe code"":</p>

<ul>
<li>[me] A swap will never fail (don't even write a throwing swap)</li>
<li>[nobar] This is a good recommendation for custom-written <code>swap()</code> functions. It should be noted, however, that <code>std::swap()</code> can fail based on the operations that it uses internally</li>
</ul>

<p>the default <code>std::swap</code> will make copies and assignments, which, for some objects, can throw. Thus, the default swap could throw, either used for your classes, or even for STL classes. As far as the C++ standard is concerned, the swap operation for <code>vector</code>, <code>deque</code>, and <code>list</code> won't throw, whereas it could for <code>map</code> if the comparison functor can throw on copy construction (See <i>The C++ Programming Language, Special Edition, appendix E, E.4.3.Swap</i>).</p>

<p>Looking at Visual C++ 2008 implementation of the vector's swap, the vector's swap won't throw if the two vectors have the same allocator (i.e., the normal case), but will make copies if they have different allocators. And thus, I assume it could throw in this last case.</p>

<p>So, the original text still holds: Don't ever write a throwing swap, but nobar's comment must be remembered: Be sure the objects you're swapping have a non-throwing swap.</p>

<h3>Edit 2011-11-06: Interesting article</h3>

<p><a href=""https://secure.wikimedia.org/wikipedia/en/wiki/David_Abrahams_%28computer_programmer%29"" rel=""noreferrer"">Dave Abrahams</a>, who gave us the <a href=""https://secure.wikimedia.org/wikipedia/en/wiki/Exception_guarantees"" rel=""noreferrer"">basic/strong/nothrow guarantees</a>, described in an article his experience about making the STL exception safe:</p>

<p><a href=""http://www.boost.org/community/exception_safety.html"" rel=""noreferrer"">http://www.boost.org/community/exception_safety.html</a></p>

<p>Look at the 7th point (Automated testing for exception-safety), where he relies on automated unit testing to make sure every case is tested. I guess this part is an excellent answer to the question author's ""<i>Can you even be sure, that it is?</i>"".</p>

<h3>Edit 2013-05-31: Comment from <a href=""https://stackoverflow.com/users/65678/dionadar"">dionadar</a></h3>

<blockquote>
  <p><code>t.integer += 1;</code> is without the guarantee that overflow will not happen NOT exception safe, and in fact may technically invoke UB! (Signed overflow is UB: C++11 5/4 ""If during the evaluation of an expression, the result is not mathematically defined or not in the range of representable values for its type, the behavior is undefined."") Note that unsigned integer do not overflow, but do their computations in an equivalence class modulo 2^#bits.</p>
</blockquote>

<p>Dionadar is refering to the following line, which indeed has undefined behaviour.</p>

<pre><code>   t.integer += 1 ;                 // 1. nothrow/nofail
</code></pre>

<p>The solution here is to verify if the integer is already at its max value (using <code>std::numeric_limits&lt;T&gt;::max()</code>) before doing the addition.</p>

<p>My error would go in the ""Normal failure vs. bug"" section, that is, a bug.
It doesn't invalidate the reasoning, and it does not mean exception safe code is useless because impossible to attain.
You can't protect yourself against the computer switching off, or compiler bugs, or even your bugs, or other errors. You can't attain perfection, but you can try to get as near as possible.</p>

<p>I corrected the code with Dionadar's comment in mind.</p>
","1853769"
"Converting cv::Mat to IplImage*","109159","","<p>The documentation on this seems incredibly spotty. </p>

<p>I've basically got an empty array of IplImage*s (IplImage** imageArray) and I'm calling a function to import an array of cv::Mats - I want to convert my cv::Mat into an IplImage* so I can copy it into the array.</p>

<p>Currently I'm trying this:</p>

<pre><code>while(loop over cv::Mat array)
{
    IplImage* xyz = &amp;(IplImage(array[i]));
    cvCopy(iplimagearray[i], xyz);
}
</code></pre>

<p>Which generates a segfault.</p>

<p>Also trying:</p>

<pre><code>while(loop over cv::Mat array)
{
    IplImage* xyz;
    xyz = &amp;array[i];
    cvCopy(iplimagearray[i], xyz);
}
</code></pre>

<p>Which gives me a compile time error of:
<code>error: cannot convert ‘cv::Mat*’ to ‘IplImage*’ in assignment</code></p>

<p>Stuck as to how I can go further and would appreciate some advice :)</p>
","<p><code>cv::Mat</code> is the new type introduce in OpenCV2.X while the <code>IplImage*</code> is the ""legacy"" image structure. </p>

<p>Although, <code>cv::Mat</code> does support the usage of <code>IplImage</code> in the constructor parameters, the default library does not provide function for the other way. You will need to extract the image header information manually. (Do remember that you need to allocate the IplImage structure, which is lack in your example).</p>
","4664671"
"Dynamically allocating an array of objects","109058","","<p>This is kind of a beginners question, but I haven't done C++ in a long time, so here goes...</p>

<p>I have a class that contains a dynamically allocated array, say</p>

<pre><code>class A
{
    int* myArray;
    A()
    {
        myArray = 0;
    }
    A(int size)
    {
        myArray = new int[size];
    }
    ~A()
    {
        // Note that as per MikeB's helpful style critique, no need to check against 0.
        delete [] myArray;
    }
}
</code></pre>

<p>But now I want to create a dynamically allocated array of these classes. Here's my current code:</p>

<pre><code>A* arrayOfAs = new A[5];
for (int i = 0; i &lt; 5; ++i)
{
    arrayOfAs[i] = A(3);
}
</code></pre>

<p>But this blows up terribly. Because the new <code>A</code> object created (with the <code>A(3)</code> call) gets destructed when the <code>for</code> loop iteration finishes, and this means that the internal <code>myArray</code> of that <code>A</code> instance gets <code>delete []</code>-ed.</p>

<p>So I think my syntax must be terribly wrong? I guess there are a few fixes that seem like overkill, which I'm hoping to avoid:</p>

<ul>
<li>Creating a copy constructor for <code>A</code>.</li>
<li>Using <code>vector&lt;int&gt;</code> and <code>vector&lt;A&gt;</code> so I don't have to worry about all this.</li>
<li>Instead of having <code>arrayOfAs</code> be an array of <code>A</code> objects, have it be an array of <code>A*</code> pointers.</li>
</ul>

<p>I would think this is just some beginners thing where there's a syntax that actually works when attempting to dynamically allocate an array of things that have internal dynamic allocation.</p>

<p>(Also, style critiques appreciated, since it's been a while since I did C++.)</p>

<p><strong>Update for future viewers</strong>: All of the answers below are really helpful. Martin's is accepted because of the example code and the useful ""rule of 4,"" but I really suggest reading them all. Some are good, succinct statements of what's wrong, and some point out correctly how and why <code>vector</code>s are a good way to go.</p>
","<p>For building containers you obviously want to use one of the standard containers (such as a std::vector). But this is a perfect example of the things you need to consider when your object contains RAW pointers.</p>

<p>If your object has a RAW pointer then you need to remember the rule of 3 (now the rule of 5 in C++11).</p>

<ul>
<li>Constructor</li>
<li>Destructor</li>
<li>Copy Constructor</li>
<li>Assignment Operator</li>
<li>Move Constructor (C++11)</li>
<li>Move Assignment  (C++11)</li>
</ul>

<p>This is because if not defined the compiler will generate its own version of these methods (see below). The compiler generated versions are not always useful when dealing with RAW pointers.</p>

<p>The copy constructor is the hard one to get correct (it's non trivial if you want to provide the strong exception guarantee). The Assignment operator can be defined in terms of the Copy Constructor as you can use the copy and swap idiom internally.</p>

<p>See below for full details on the absolute minimum for a class containing a pointer to an array of integers.</p>

<p>Knowing that it is non trivial to get it correct you should consider using std::vector rather than a pointer to an array of integers. The vector is easy to use (and expand) and covers all the problems associated with exceptions. Compare the following class with the definition of A below.</p>

<pre><code>class A
{ 
    std::vector&lt;int&gt;   mArray;
    public:
        A(){}
        A(size_t s) :mArray(s)  {}
};
</code></pre>

<p>Looking at your problem:</p>

<pre><code>A* arrayOfAs = new A[5];
for (int i = 0; i &lt; 5; ++i)
{
    // As you surmised the problem is on this line.
    arrayOfAs[i] = A(3);

    // What is happening:
    // 1) A(3) Build your A object (fine)
    // 2) A::operator=(A const&amp;) is called to assign the value
    //    onto the result of the array access. Because you did
    //    not define this operator the compiler generated one is
    //    used.
}
</code></pre>

<p>The compiler generated assignment operator is fine for nearly all situations, but when RAW pointers are in play you need to pay attention. In your case it is causing a problem because of the <b>shallow copy</b> problem. You have ended up with two objects that contain pointers to the same piece of memory. When the A(3) goes out of scope at the end of the loop it calls delete [] on its pointer. Thus the other object (in the array) now contains a pointer to memory that has been returned to the system.</p>

<p><b>The compiler generated copy constructor</b>; copies each member variable by using that members copy constructor. For pointers this just means the pointer value is copied from the source object to the destination object (hence shallow copy).</p>

<p><b>The compiler generated assignment operator</b>; copies each member variable by using that members assignment operator. For pointers this just means the pointer value is copied from the source object to the destination object (hence shallow copy).</p>

<p>So the minimum for a class that contains a pointer:</p>

<pre><code>class A
{
    size_t     mSize;
    int*       mArray;
    public:
         // Simple constructor/destructor are obvious.
         A(size_t s = 0) {mSize=s;mArray = new int[mSize];}
        ~A()             {delete [] mArray;}

         // Copy constructor needs more work
         A(A const&amp; copy)
         {
             mSize  = copy.mSize;
             mArray = new int[copy.mSize];

             // Don't need to worry about copying integers.
             // But if the object has a copy constructor then
             // it would also need to worry about throws from the copy constructor.
             std::copy(&amp;copy.mArray[0],&amp;copy.mArray[c.mSize],mArray);

         }

         // Define assignment operator in terms of the copy constructor
         // Modified: There is a slight twist to the copy swap idiom, that you can
         //           Remove the manual copy made by passing the rhs by value thus
         //           providing an implicit copy generated by the compiler.
         A&amp; operator=(A rhs) // Pass by value (thus generating a copy)
         {
             rhs.swap(*this); // Now swap data with the copy.
                              // The rhs parameter will delete the array when it
                              // goes out of scope at the end of the function
             return *this;
         }
         void swap(A&amp; s) noexcept
         {
             using std::swap;
             swap(this.mArray,s.mArray);
             swap(this.mSize ,s.mSize);
         }

         // C++11
         A(A&amp;&amp; src) noexcept
             : mSize(0)
             , mArray(NULL)
         {
             src.swap(*this);
         }
         A&amp; operator=(A&amp;&amp; src) noexcept
         {
             src.swap(*this);     // You are moving the state of the src object
                                  // into this one. The state of the src object
                                  // after the move must be valid but indeterminate.
                                  //
                                  // The easiest way to do this is to swap the states
                                  // of the two objects.
                                  //
                                  // Note: Doing any operation on src after a move 
                                  // is risky (apart from destroy) until you put it 
                                  // into a specific state. Your object should have
                                  // appropriate methods for this.
                                  // 
                                  // Example: Assignment (operator = should work).
                                  //          std::vector() has clear() which sets
                                  //          a specific state without needing to
                                  //          know the current state.
             return *this;
         }   
 }
</code></pre>
","255744"
"Convert CString to const char*","109054","","<p>How do I convert from <code>CString</code> to <code>const char*</code> in my Unicode MFC application?</p>
","<p>To convert a <code>TCHAR</code> CString to ASCII, use the <code>CT2A</code> macro - this will also allow you to convert the string to UTF8 (or any other Windows code page):</p>

<pre><code>// Convert using the local code page
CString str(_T(""Hello, world!""));
CT2A ascii(str);
TRACE(_T(""ASCII: %S\n""), ascii.m_psz);

// Convert to UTF8
CString str(_T(""Some Unicode goodness""));
CT2A ascii(str, CP_UTF8);
TRACE(_T(""UTF8: %S\n""), ascii.m_psz);

// Convert to Thai code page
CString str(_T(""Some Thai text""));
CT2A ascii(str, 874);
TRACE(_T(""Thai: %S\n""), ascii.m_psz);
</code></pre>

<p>There is also a macro to convert from ASCII -> Unicode (<code>CA2T</code>) and you can use these in ATL/WTL apps as long as you have VS2003 or greater.</p>

<p>See the <a href=""http://msdn.microsoft.com/en-us/library/87zae4a3(VS.80).aspx"" rel=""noreferrer"">MSDN</a> for more info.</p>
","859841"
"Is it possible to declare two variables of different types in a for loop?","108997","","<p>Is it possible to declare two variables of different types in the initialization body of a for loop in C++?</p>

<p>For example:</p>

<pre><code>for(int i=0,j=0 ...
</code></pre>

<p>defines two integers. Can I define an <code>int</code> and a <code>char</code> in the initialization body? How would this be done?</p>
","<p>Not possible, but you can do:</p>

<pre><code>float f;
int i;
for (i = 0,f = 0.0; i &lt; 5; i++)
{
  //...
}
</code></pre>

<p>Or, explicitly limit the scope of <code>f</code> and <code>i</code> using additional brackets:</p>

<pre><code>{
    float f; 
    int i;
    for (i = 0,f = 0.0; i &lt; 5; i++)
    {
       //...
    }
}
</code></pre>
","2687408"
"How do I compile a Visual Studio project from the command-line?","108898","","<p>I'm scripting the checkout, build, distribution, test, and commit cycle for a large C++ solution that is using <a href=""http://en.wikipedia.org/wiki/Monotone_%28software%29"" rel=""noreferrer"">Monotone</a>, <a href=""http://en.wikipedia.org/wiki/CMake"" rel=""noreferrer"">CMake</a>, Visual Studio Express 2008, and custom tests.  </p>

<p>All of the other parts seem pretty straight-forward, but I don't see how to compile the Visual Studio solution without getting the GUI.  </p>

<p>The script is written in Python, but an answer that would allow me to just make a call to: os.system would do.</p>
","<p>I know of two ways to do it.  </p>

<p><strong>Method 1</strong><br>
The first method (which I prefer) is to use <a href=""http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx"" rel=""noreferrer"">msbuild</a>:</p>

<pre><code>msbuild project.sln /Flags...
</code></pre>

<p><strong>Method 2</strong><br>
You can also run:</p>

<pre><code>vcexpress project.sln /build /Flags...
</code></pre>

<p>The vcexpress option returns immediately and does not print any output. I suppose that might be what you want for a script.</p>

<p>Note that DevEnv is not distributed with Visual Studio Express 2008 (I spent a lot of time trying to figure that out when I first had a similar issue).  </p>

<p>So, the end result might be:</p>

<pre><code>os.system(""msbuild project.sln /p:Configuration=Debug"")
</code></pre>

<p>You'll also want to make sure your environment variables are correct, as msbuild and vcexpress are not by default on the system path. Either start the Visual Studio build environment and run your script from there, or modify the paths in Python (with <a href=""http://docs.python.org/library/os.html#os.putenv"" rel=""noreferrer"">os.putenv</a>).</p>
","498130"
"Creating/writing into a new file in Qt","108879","","<p>I am trying to write into a file and if the file doesn't exist create it. I have searched on the internet and nothing worked for me.</p>

<p>My code looks currently like this:</p>

<pre><code>QString filename=""Data.txt"";
QFile file( filename );
if ( file.open(QIODevice::ReadWrite) )
{
    QTextStream stream( &amp;file );
    stream &lt;&lt; ""something"" &lt;&lt; endl;
}
</code></pre>

<p>If I create a text file called Data in the directory, it remains empty. If I don't create anything it doesn't create the file either.
I don't know what to do with this, this isn't the first way in which I tried to create/write into a file and none of the ways worked.</p>

<p>Thanks for your answers.</p>
","<p>Are you sure you're in the right directory?<br>
Opening a file without a full path will open it in the current working directory. In most cases this is not what you want. Try changing the first line to </p>

<p><code>QString filename=""c:\\Data.txt""</code> or<br>
<code>QString filename=""c:/Data.txt""</code></p>

<p>and see if the file is created in <code>c:\</code></p>
","4916274"
"Check if a string is palindrome","108826","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/3285432/to-find-if-a-given-string-is-palindrome-or-is-not-palindrome"">to find if a given string is palindrome or is not palindrome</a>  </p>
</blockquote>



<p>I need to create a program that allows a user to input a string and my program will check to see if that string they entered is a palindrome (word that can be read the same backwards as it can forwards).</p>
","<p>Just compare the string with itself reversed:</p>

<pre><code>string input;

cout &lt;&lt; ""Please enter a string: "";
cin &gt;&gt; input;

if (input == string(input.rbegin(), input.rend())) {
    cout &lt;&lt; input &lt;&lt; "" is a palindrome"";
}
</code></pre>

<p>This constructor of <code>string</code> takes a beginning and ending iterator and creates the string from the characters between those two iterators. Since <code>rbegin()</code> is the end of the string and incrementing it goes backwards through the string, the string we create will have the characters of <code>input</code> added to it in reverse, reversing the string.</p>

<p>Then you just compare it to <code>input</code> and if they are equal, it is a palindrome.</p>

<p>This does not take into account capitalisation or spaces, so you'll have to improve on it yourself.</p>
","8362607"
"initialize a const array in a class initializer in C++","108808","","<p>I have the following class in C++:</p>

<pre><code>class a {
    const int b[2];
    // other stuff follows

    // and here's the constructor
    a(void);
}
</code></pre>

<p>The question is, how do I initialize b in the initialization list, given that I can't initialize it inside the body of the function of the constructor, because b is <code>const</code>?</p>

<p>This doesn't work:</p>

<pre><code>a::a(void) : 
    b([2,3])
{
     // other initialization stuff
}
</code></pre>

<p>Edit:  The case in point is when I can have different values for <code>b</code> for different instances, but the values are known to be constant for the lifetime of the instance.</p>
","<p>Like the others said, ISO C++ doesn't support that. But you can workaround it. Just use std::vector instead.</p>

<pre><code>int* a = new int[N];
// fill a

class C {
  const std::vector&lt;int&gt; v;
public:
  C():v(a, a+N) {}
};
</code></pre>
","162372"
"How do I include the string header?","108725","","<p>I'm trying to learn about <code>string</code>s, but different sources tell my to include different headers.</p>

<p>Some say to use <code>&lt;string.h&gt;</code>, but others mention <code>""apstring.h""</code>.  I was able to do some basic stuff with <code>apstring</code>, but I've been told the other one is more powerful.  When I include <code>&lt;string.h&gt;</code> and try to declare some string variables, however, I get errors.  What is the proper usage?</p>
","<p>You want to include <code>&lt;string&gt;</code> and use <code>std::string</code>:</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;

int main()
{
    std::string s = ""a string"";
    std::cout &lt;&lt; s &lt;&lt; std::endl;
}
</code></pre>

<p>But what you really need to do is get an <a href=""https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list"">introductory level book</a>. You aren't going to learn properly any other way, certainly not scrapping for information online.</p>
","4103178"
"The static keyword and its various uses in C++","108641","","<p>The keyword <code>static</code> is one which has several meanings in C++ that I find very confusing and I can never bend my mind around how its actually supposed to work.</p>

<p>From what I understand there is <code>static</code> storage duration, which means that it lasts for the lifetime of the program in the case of a global, but when you're talking about a local, it means that it's zero initialized by default.</p>

<p>The C++ Standard says this for class data members with the keyword <code>static</code>:</p>

<p><strong>3.7.1 Static storage duration [basic.stc.static]</strong></p>

<blockquote>
  <p>3 The keyword static can be used to declare a local variable with static storage duration.</p>
  
  <p>4 The keyword static applied to a class data member in a class definition gives the data member static storage duration.</p>
</blockquote>

<p>What does it mean with <em>local variable</em>? Is that a function local variable? Because there's also that when you declare a function local as <code>static</code> that it is only initialized once, the first time it enters this function.</p>

<p>It also only talks about storage duration with regards to class members, what about it being non instance specific, that's also a property of <code>static</code> no? Or is that storage duration?</p>

<p>Now what about the case with <code>static</code> and file scope? Are all global variables considered to have static storage duration by default? The following (from section 3.7.1)  seems to indicate so:</p>

<blockquote>
  <p>1 All variables which do not have dynamic storage duration, do not have thread storage duration, and are <strong>not local</strong> have static storage duration. The storage for these entities shall last for the duration of the program (3.6.2, 3.6.3)</p>
</blockquote>

<p>How does <code>static</code> relate to the linkage of a variable?  </p>

<p>This whole <code>static</code> keyword is downright confusing, can someone clarify the different uses for it English and also tell me <em>when</em> to initialize a <code>static</code> class member? </p>
","<h1>Variables:</h1>

<p><code>static</code> variables exist for the ""lifetime"" of the <em>translation unit that it's defined in</em>, and:  </p>

<ul>
<li>If it's in a namespace scope (i.e. outside of functions and classes), then it can't be accessed from any other translation unit.  This is known as ""internal linkage"". (Dont' do this in headers, it's just a terrible idea, you end up with a separate variable in each translation unit, which is crazy confusing)</li>
<li>If it's a variable <em>in a function</em>, it can't be accessed from outside of the function, just like any other local variable. (this is the local they mentioned)</li>
<li>class members have no restricted scope due to <code>static</code>, but can be addressed from the class as well as an instance (like <code>std::string::npos</code>).  [Note: you can <em>declare</em> static members in a class, but they should usually still be <em>defined</em> in a translation unit (cpp file), and as such, there's only one per class]</li>
</ul>

<p>Before any function in a translation unit is executed (possibly after <code>main</code> began execution), the variables with static storage duration in that translation unit will be ""constant initialized"" (to <code>constexpr</code> where possible, or zero otherwise), and then non-locals are ""dynamically initialized"" properly <em>in the order they are defined in the translation unit</em>  (for things like <code>std::string=""HI"";</code> that aren't <code>constexpr</code>).  Finally, function-local statics are initialized the first time execution ""reaches"" the line where they are declared.  They are all destroyed in the reverse order of initialization.</p>

<p>The easiest way to get all this right is to make all static variables that are not <code>constexpr</code> initialized into function static locals, which makes sure all of your statics/globals are initialized properly when you try to use them no matter what, thus preventing the <a href=""https://stackoverflow.com/questions/3035422/static-initialization-order-fiasco"">static initialization order fiasco</a>.</p>

<pre><code>T&amp; get_global() {
    static T global = initial_value();
    return global;
}
</code></pre>

<p>Be careful, because when the spec says namespace-scope variables have ""static storage duration"" by default, they mean the ""lifetime of the translation unit"" bit, but that does <em>not</em> mean it can't be accessed outside of the file.</p>

<h1>Functions</h1>

<p>Significantly more straightforward, <code>static</code> is often used as a class member function, and only very rarely used for a free-standing function.  </p>

<p>A static member function differs from a regular member function in that it can be called without an instance of a class, and since it has no instance, it cannot access non-static members of the class.  Static variables are useful when you want to have a function for a class that definitely absolutely does not refer to any instance members, or for managing <code>static</code> member variables.</p>

<pre><code>struct A {
    A() {++A_count;}
    A(const A&amp;) {++A_count;}
    A(A&amp;&amp;) {++A_count;}
    ~A() {--A_count;}

    static int get_count() {return A_count;}
private:
    static int A_count;
}

int main() {
    A var;

    int c0 = var.get_count(); //some compilers give a warning, but it's ok.
    int c1 = A::get_count(); //normal way
}
</code></pre>

<p>A <code>static</code> free-function means that the function will not be referred to by any other translation unit, and thus the linker can ignore it entirely.  This has a small number of purposes:</p>

<ul>
<li>Can be used in a cpp file to guarantee that the function is never used from any other file.</li>
<li>Can be put in a header and every file will have it's own copy of the function.  Not useful, since inline does pretty much the same thing.</li>
<li>Speeds up link time by reducing work</li>
<li>Can put a function with the same name in each TU, and they can all do different things.  For instance, you could put a <code>static void log(const char*) {}</code> in each cpp file, and they could each all log in a different way.</li>
</ul>
","15235626"
"Incrementing in C++ - When to use x++ or ++x?","108151","","<p>I'm currently learning C++ and I've learned about the incrementation a while ago.
I know that you can use ""++x"" to make the incrementation before and ""x++"" to do it after.</p>

<p>Still, I really don't know when to use either of the two... I've never really used ""++x"" and things always worked fine so far - so, when should I use it?</p>

<p>Example: In a for loop, when is it preferable to use ""++x""?</p>

<p>Also, could someone explain exactly how the different incrementations (or decrementations) work? I would really appreciate it.</p>
","<p>It's not a question of preference, but of logic.</p>

<p><code>x++</code> increments the value of variable x <strong>after</strong> processing the current statement.</p>

<p><code>++x</code> increments the value of variable x <strong>before</strong> processing the current statement.</p>

<p>So just decide on the logic you write.</p>

<p><code>x += ++i</code> will increment i and add i+1 to x.
<code>x += i++</code> will add i to x, then increment i.</p>
","1812998"
"How to iterate std::set?","108023","","<p>I have this code:</p>

<pre><code>std::set&lt;unsigned long&gt;::iterator it;
for (it = SERVER_IPS.begin(); it != SERVER_IPS.end(); ++it)
{
    u_long f = it; // error here
}
</code></pre>

<p>There is no <code>-&gt;first</code> value.
How I can obtain the value?</p>
","<p>You must dereference the iterator in order to retrieve the member of your set. </p>

<pre><code>std::set&lt;unsigned long&gt;::iterator it;
for (it = SERVER_IPS.begin(); it != SERVER_IPS.end(); ++it)
{
    u_long f = *it; // Note the ""*"" here
}
</code></pre>

<p>If you have C++11 features, you can use a <a href=""http://en.wikipedia.org/wiki/C%2B%2B11#Range-based_for-loop"" rel=""noreferrer"">range-based for loop</a>:</p>

<pre><code>for(auto f : SERVER_IPS) {
  // use f here
}    
</code></pre>
","12863273"
"Expression must be a modifiable lvalue","107786","","<p>I have this following code:</p>

<pre><code>int M = 3; 
int C = 5; 
int match = 3;
for ( int k =0; k &lt; C; k ++ )
{
    match --; 
    if ( match == 0 &amp;&amp; k = M )
    {
         std::cout &lt;&lt; "" equals"" &lt;&lt; std::endl;
    }
}
</code></pre>

<p>But it gives out an error saying:</p>

<blockquote>
  <p>Error: expression must be a modifiable value</p>
</blockquote>

<p>on that ""if"" line. I am not trying to modify ""match"" or ""k"" value here, but why this error? if I only write it like:</p>

<pre><code>if ( match == 0 )
</code></pre>

<p>it is ok. Could someone explain it to me? </p>
","<p>The assignment operator has lower precedence than <code>&amp;&amp;</code>, so your condition is equivalent to:</p>

<pre><code>if ((match == 0 &amp;&amp; k) = m)
</code></pre>

<p>But the left-hand side of this is an rvalue, namely the boolean resulting from the evaluation of the sub&shy;expression <code>match == 0 &amp;&amp; k</code>, so you cannot assign to it.</p>

<p>By contrast, comparison has higher precedence, so <code>match == 0 &amp;&amp; k == m</code> is equivalent to:</p>

<pre><code>if ((match == 0) &amp;&amp; (k == m))
</code></pre>
","12745647"
"Why would anybody use C over C++?","107754","","<p>Although people seem to like to <a href=""http://odgaard.org/jeod/funny/interview.html"" rel=""noreferrer"">complain</a> about C++, I haven't been able to find much evidence as to why you would want to choose C over C++. C doesn't seem to get nearly as much flak and if C++ has all these problems why can't you just restrict yourself to the C subset? What are your thoughts/experience?</p>
","<p>Joel's answer is good for reasons you might <em>have</em> to use C, though there are a few others:</p>

<ul>
<li>You must meet industry guidelines, which are easier to prove and test for in C.</li>
<li>You have tools to work with C, but not C++ (think not just about the compiler, but all the support tools, coverage, analysis, etc)</li>
<li>Your target developers are C gurus</li>
<li>You're writing drivers, kernels, or other low level code</li>
<li>You know the C++ compiler isn't good at optimizing the kind of code you need to write</li>
<li>Your app not only doesn't lend itself to be object oriented, but would be harder to write in that form</li>
</ul>

<p>In some cases, though, you might <em>want</em> to use C rather than C++:</p>

<ul>
<li>You want the performance of assembler without the trouble of coding in assembler (C++ is, in theory, capable of 'perfect' performance, but the compilers aren't as good at seeing optimizations a good C programmer will see)</li>
<li>The software you're writing is trivial, or nearly so - whip out the tiny C compiler, write a few lines of code, compile and you're all set - no need to open a huge editor with helpers, no need to write practically empty and useless classes, deal with namespaces, etc.  You can do nearly the same thing with a C++ compiler and simply use the C subset, but the C++ compiler is slower, even for tiny programs.</li>
<li>You need extreme performance or small code size, and know the C++ compiler will actually make it harder to accomplish due to the size and performance of the libraries</li>
</ul>

<p>You contend that you could just use the C subset and compile with a C++ compiler, but you'll find that if you do that you'll get slightly different results depending on the compiler.</p>

<p>Regardless, if you're doing that, you're using C.  Is your question really ""Why don't C programmers use C++ compilers?""  If it is, then you either don't understand the language differences, or you don't understand compiler theory.</p>
","497869"
"How much faster is C++ than C#?","107718","","<p>Or is it now the other way around?</p>

<p>From what I've heard there are some areas in which C# proves to be faster than C++, but I've never had the guts to test it by myself.</p>

<p>Thought any of you could explain these differences in detail or point me to the right place for information on this.</p>
","<p>There is no strict reason why a bytecode based language like C# or Java that has a JIT cannot be as fast as C++ code. However C++ code used to be significantly faster for a long time, and also today still is in many cases. This is mainly due to the more advanced JIT optimizations being complicated to implement, and the really cool ones are only arriving just now.</p>

<p>So C++ is faster, in many cases. But this is only part of the answer. The cases where C++ is actually faster, are highly optimized programs, where expert programmers thoroughly optimized the hell out of the code. This is not only very time consuming (and thus expensive), but also commonly leads to errors due to over-optimizations.</p>

<p>On the other hand, code in interpreted languages gets faster in later versions of the runtime (.NET CLR or Java VM), without you doing anything. And there are a lot of useful optimizations JIT compilers can do that are simply impossible in languages with pointers. Also, some argue that garbage collection should generally be as fast or faster as manual memory management, and in many cases it is. You can generally implement and achieve all of this in C++ or C, but it's going to be much more complicated and error prone.</p>

<p>As Donald Knuth said, ""premature optimization is the root of all evil"". If you really know for sure that your application will mostly consist of very performance critical arithmetic, and that it will be the bottleneck, and it's certainly going to be faster in C++, and you're sure that C++ won't conflict with your other requirements, go for C++. In any other case, concentrate on first implementing your application correctly in whatever language suits you best, then find performance bottlenecks if it runs too slow, and then think about how to optimize the code. In the worst case, you might need to call out to C code through a foreign function interface, so you'll still have the ability to write critical parts in lower level language.</p>

<p><strong>Keep in mind that it's relatively easy to optimize a correct program, but much harder to correct an optimized program.</strong></p>

<p>Giving actual percentages of speed advantages is impossible, it largely depends on your code. In many cases, the programming language implementation isn't even the bottleneck. Take the benchmarks at <a href=""http://benchmarksgame.alioth.debian.org/"" rel=""noreferrer"">http://benchmarksgame.alioth.debian.org/</a> with a great deal of scepticism, as these largely test arithmetic code, which is most likely not similar to your code at all.</p>
","138406"
"Why aren't variable-length arrays part of the C++ standard?","107530","","<p>I haven't used C very much in the last few years. When I read <a href=""https://stackoverflow.com/questions/1886504/coding-problem-using-a-2-d-array-of-structs-inside-another-struct-in-c"">this question</a> today I came across some C syntax which I wasn't familiar with.</p>

<p>Apparently in <a href=""https://en.wikipedia.org/wiki/C99"" rel=""noreferrer"">C99</a> the following syntax is valid:</p>

<pre><code>void foo(int n) {
    int values[n]; //Declare a variable length array
}
</code></pre>

<p>This seems like a pretty useful feature. Was there ever a discussion about adding it to the C++ standard, and if so, why it was omitted?</p>

<p>Some potential reasons:</p>

<ul>
<li>Hairy for compiler vendors to implement</li>
<li>Incompatible with some other part of the standard</li>
<li>Functionality can be emulated with other C++ constructs</li>
</ul>

<p>The C++ standard states that array size must be a constant expression (8.3.4.1).</p>

<p>Yes, of course I realize that in the toy example one could use <code>std::vector&lt;int&gt; values(m);</code>, but this allocates memory from the heap and not the stack. And if I want a multidimensional array like:</p>

<pre><code>void foo(int x, int y, int z) {
    int values[x][y][z]; // Declare a variable length array
}
</code></pre>

<p>the <code>vector</code> version becomes pretty clumsy:</p>

<pre><code>void foo(int x, int y, int z) {
    vector&lt; vector&lt; vector&lt;int&gt; &gt; &gt; values( /* Really painful expression here. */);
}
</code></pre>

<p>The slices, rows and columns will also potentially be spread all over memory.</p>

<p>Looking at the discussion at <code>comp.std.c++</code> it's clear that this question is pretty controversial with some very heavyweight names on both sides of the argument. It's certainly not obvious that a <code>std::vector</code> is always a better solution.</p>
","<p>There recently was a discussion about this kicked off in usenet: <a href=""http://groups.google.com/group/comp.std.c++/browse_thread/thread/2bfe25800d4961e8/9545494bbb336dfa"" rel=""noreferrer"">Why no VLAs in C++0x</a>. </p>

<p>I agree with those people that seem to agree that having to create a potential large array on the stack, which usually has only little space available, isn't good. The argument is, if you know the size beforehand, you can use a static array. And if you don't know the size beforehand, you will write unsafe code. </p>

<p>C99 VLAs could provide a small benefit of being able to create small arrays without wasting space or calling constructors for unused elements, but they will introduce rather large changes to the type system (you need to be able to specify types depending on runtime values - this does not yet exist in current C++, except for <code>new</code> operator type-specifiers, but they are treated specially, so that the runtime-ness doesn't escape the scope of the <code>new</code> operator).</p>

<p>You can use <code>std::vector</code>, but it is not quite the same, as it uses dynamic memory, and making it use one's own stack-allocator isn't exactly easy (alignment is an issue, too). It also doesn't solve the same problem, because a vector is a resizable container, whereas VLAs are fixed-size. The <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2648.html"" rel=""noreferrer"">C++ Dynamic Array</a> proposal is intended to introduce a library based solution, as alternative to a language based VLA. However, it's not going to be part of C++0x, as far as I know.</p>
","1887178"
"How to initialize a vector of vectors on a struct?","107339","","<p>If I have a NxN matrix</p>

<pre><code>vector&lt; vector&lt;int&gt; &gt; A;
</code></pre>

<p>How should I initialize it?</p>

<p>I've tried with no success:</p>

<pre><code> A = new vector(dimension);
</code></pre>

<p>neither:</p>

<pre><code> A = new vector(dimension,vector&lt;int&gt;(dimension));
</code></pre>
","<p>You use <code>new</code> to perform dynamic allocation. It returns a pointer that points to the dynamically allocated object.</p>

<p>You have no reason to use <code>new</code>, since <code>A</code> is an automatic variable. You can simply initialise <code>A</code> using its constructor:</p>

<pre><code>vector&lt;vector&lt;int&gt; &gt; A(dimension, vector&lt;int&gt;(dimension));
</code></pre>
","21663317"
"Linux c++ error: undefined reference to 'dlopen'","107119","","<p>I work in Linux with C++ (Eclipse), and want to use a library.
Eclipse shows me an error:</p>

<pre><code>undefined reference to 'dlopen' 
</code></pre>

<p>Do you know a solution? </p>

<p>Here is my code: </p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;dlfcn.h&gt;

int main(int argc, char **argv) {
    void *handle;
    double (*desk)(char*);
    char *error;

    handle = dlopen (""/lib/CEDD_LIB.so.6"", RTLD_LAZY);
    if (!handle) {
        fputs (dlerror(), stderr);
        exit(1);
    }

    desk= dlsym(handle, ""Apply"");

    if ((error = dlerror()) != NULL)  {
        fputs(error, stderr);
        exit(1);
    }

    dlclose(handle);
}
</code></pre>
","<p>You have to link against libdl, add</p>

<blockquote>
  <p>-ldl</p>
</blockquote>

<p>to your linker options</p>
","956698"
"How to enable C++11 in Qt Creator?","107097","","<p>The title is pretty self-descriptive. I've downloaded Qt Creator 2.7.0, and I am trying to compile some basic C++11 code:</p>

<pre><code>int my_array[5] = {1, 2, 3, 4, 5};
for(int &amp;x : my_array)
{
  x *= 2;
}
</code></pre>

<p>I'm receiving the following error:</p>

<pre><code>range based for loops are not allowed in c++ 98 mode
</code></pre>

<p>Yet, according to <a href=""http://blog.qt.digia.com/blog/2013/03/21/qt-creator-2-7-0-released/"">this article</a> this version of Qt Creator supports C++11. So how do I enable it?</p>
","<p>According to <a href=""http://woboq.com/blog/cpp11-in-qt5.html"" rel=""noreferrer"">this site</a> add</p>

<p><code>CONFIG += c++11</code></p>

<p>to your .pro file (see at the bottom of that web page). <strong>It requires Qt 5.</strong></p>

<hr>

<p>The other answers, suggesting </p>

<p><code>QMAKE_CXXFLAGS += -std=c++11</code> (or <code>QMAKE_CXXFLAGS += -std=c++0x</code>)</p>

<p>also work with <strong>Qt 4.8 and gcc / clang.</strong></p>
","16950073"
"How can I create objects while adding them into a vector?","107041","","<p>I have a C++ vector. I want the vector to hold a variable number of objects. </p>

<p>Visual Studio 2012 is giving me an error:  </p>

<pre><code>Error: type name is not allowed
</code></pre>

<p>From this C++ code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

class testObject{
private:
   int someInt;
public:
   testObject(int a){ someInt=a; }
   void show() { cout&lt;&lt;someInt&lt;&lt;endl; }
};

int main()
{
    vector&lt;testObject&gt; testVector;
    cout &lt;&lt; ""Initial size: "" &lt;&lt; testVector.size() &lt;&lt;endl;

    for ( int i = 0; i &lt; 3; i++ )
        testVector.push_back(testObject(3));
    cout &lt;&lt; ""New size: "" &lt;&lt; testVector.size() &lt;&lt; endl;

    for ( int j = 0; j &lt; 3; j++ )
        testVector[ j ].show();

    system(""pause"");
}    
</code></pre>

<p>But here's another sample of code that looks the same but it's not working.</p>

<pre><code>void Dealer::setNumberOfPlayers( const int tNumber )
{
    for ( int i = 0; i &lt; tNumber; i++ )
        vectorOfGamers.push_back(Player); // Player is a class that I created
}
</code></pre>

<p>Can I create vector to hold objects of Dealer, Bot and Player at the same time? How do I do that? As I know, all objects in vector should be of one type.</p>
","<p>To answer the first part of your question, you must create an object of type Player before you can use it. When you say <code>push_back(Player)</code>, it means ""add the Player <em>class</em> to the vector"", not ""add an object of type Player to the vector"" (which is what you meant).</p>

<p>You can create the object on the stack like this:</p>

<pre><code>Player player;
vectorOfGamers.push_back(player);    // &lt;-- name of variable, not type
</code></pre>

<p>Or you can even create a temporary object inline and push that (it gets copied when it's put in the vector):</p>

<pre><code>vectorOfGamers.push_back(Player());    // &lt;-- parentheses create a ""temporary""
</code></pre>

<p>To answer the second part, you can create a vector of the base type, which will allow you to push back objects of any subtype; however, this won't work as expected:</p>

<pre><code>vector&lt;Gamer&gt; gamers;
gamers.push_back(Dealer());    // Doesn't work properly!
</code></pre>

<p>since when the dealer object is put into the vector, it gets copied <em>as a Gamer object</em> -- this means only the Gamer part is copied effectively ""slicing"" the object. You can use pointers, however, since then only the pointer would get copied, and the object is never sliced:</p>

<pre><code>vector&lt;Gamer*&gt; gamers;
gamers.push_back(new Dealer());    // &lt;-- Allocate on heap with `new`, since we
                                   // want the object to persist while it's
                                   // pointed to
</code></pre>
","15802051"
"Do you use NULL or 0 (zero) for pointers in C++?","106978","","<p>In the early days of C++ when it was bolted on top of C, you could not use NULL as it was defined as <code>(void*)0</code>. You could not assign NULL to any pointer other than <code>void*</code>, which made it kind of useless. Back in those days, it was accepted that you used <code>0</code> (zero) for null pointers.</p>

<p>To this day, I have continued to use zero as a null pointer but those around me insist on using <code>NULL</code>. I personally do not see any benefit to giving a name (<code>NULL</code>) to an existing value - and since I also like to test pointers as truth values:</p>

<pre><code>if (p &amp;&amp; !q)
  do_something();
</code></pre>

<p>then using zero makes more sense (as in if you use <code>NULL</code>, you cannot logically use <code>p &amp;&amp; !q</code> - you need to explicitly compare against <code>NULL</code>, unless you assume <code>NULL</code> is zero, in which case why use <code>NULL</code>).</p>

<p>Is there any objective reason to prefer zero over NULL (or vice versa), or is all just personal preference?</p>

<p>Edit: I should add (and meant to originally say) that with RAII and exceptions, I rarely use zero/NULL pointers, but sometimes you do need them still.</p>
","<p>Here's Stroustrup's take on this: <a href=""http://www.stroustrup.com/bs_faq2.html#null"" rel=""noreferrer"">C++ Style and Technique FAQ</a></p>

<blockquote>
  <p>In C++, the definition of <code>NULL</code> is 0, so there is only an aesthetic difference. I prefer to avoid macros, so I use 0. Another problem with <code>NULL</code> is that people sometimes mistakenly believe that it is different from 0 and/or not an integer. In pre-standard code, <code>NULL</code> was/is sometimes defined to something unsuitable and therefore had/has to be avoided. That's less common these days.</p>
  
  <p>If you have to name the null pointer, call it <code>nullptr</code>; that's what it's called in C++11. Then, <code>nullptr</code> will be a keyword. </p>
</blockquote>

<p>That said, don't sweat the small stuff.</p>
","177007"
"What is uintptr_t data type","106963","","<p>What is uintptr_t and what it can be used for?</p>
","<p>It is an unsigned int that is capable of storing a pointer.  Which typically means that it's the same size as a pointer.</p>

<p>It is defined in C++11 and later standards.</p>

<p>A common reason to want an integer type that can hold an architecture's pointer type is to perform integer-specific operations on a pointer, or to obscure the type of a pointer by providing it as an integer ""handle"".</p>

<p><em>Edit: Note that Steve Jessop has some very interesting additional details (that I won't steal) in another answer here for you pedantic types  :)</em> </p>
","1845491"
"Which is faster: Stack allocation or Heap allocation","106939","","<p>This question may sound fairly elementary, but this is a debate I had with another developer I work with.</p>

<p>I was taking care to stack allocate things where I could, instead of heap allocating them. He was talking to me and watching over my shoulder and commented that it wasn't necessary because they are the same performance wise.</p>

<p>I was always under the impression that growing the stack was constant time, and heap allocation's performance depended on the current complexity of the heap for both allocation (finding a hole of the proper size) and de-allocating (collapsing holes to reduce fragmentation, as many standard library implementations take time to do this during deletes if I am not mistaken).</p>

<p>This strikes me as something that would probably be very compiler dependent. For this project in particular I am using a <a href=""http://en.wikipedia.org/wiki/Metrowerks"" rel=""noreferrer"">Metrowerks</a> compiler for the <a href=""http://en.wikipedia.org/wiki/PowerPC"" rel=""noreferrer"">PPC</a> architecture. Insight on this combination would be most helpful, but in general, for GCC, and MSVC++, what is the case? Is heap allocation not as high performing as stack allocation? Is there no difference? Or are the differences so minute it becomes pointless micro-optimization.</p>
","<p>Stack allocation is much faster since all it really does is move the stack pointer. 
Using memory pools, you can get comparable performance out of heap allocation, but that comes with a slight added complexity and its own headaches. </p>

<p>Also, stack vs. heap is not only a performance consideration; it also tells you a lot about the expected lifetime of objects. </p>
","161061"
"c++ integer->std::string conversion. Simple function?","106929","","<p>Problem: I have an integer; this integer needs to be converted to a stl::string type. </p>

<p>In the past, I've used <code>stringstream</code> to do a conversion, and that's just kind of cumbersome. I know the C way is to do a <code>sprintf</code>, but I'd much rather do a C++ method that is typesafe(er).</p>

<p>Is there a better way to do this? </p>

<p>Here is the stringstream approach I have used in the past:</p>

<pre><code>std::string intToString(int i)
{
    std::stringstream ss;
    std::string s;
    ss &lt;&lt; i;
    s = ss.str();

    return s;
}
</code></pre>

<p>Of course, this could be rewritten as so:</p>

<pre><code>template&lt;class T&gt;
std::string t_to_string(T i)
{
    std::stringstream ss;
    std::string s;
    ss &lt;&lt; i;
    s = ss.str();

    return s;
}
</code></pre>

<p>However, I have the notion that this is a fairly 'heavy-weight' implementation.</p>

<p>Zan noted that the invocation is pretty nice, however:</p>

<pre><code>std::string s = t_to_string(my_integer);
</code></pre>

<p>At any rate, a nicer way would be... nice. </p>

<blockquote>
  <h3>Related:</h3>
  
  <p><a href=""https://stackoverflow.com/questions/228005/alternative-to-itoa-for-converting-integer-to-string-c"">Alternative to itoa() for converting integer to string C++?</a>  </p>
</blockquote>
","<p>Now in c++11 we have</p>

<pre><code>#include &lt;string&gt;
string s = std::to_string(123);
</code></pre>

<p>Link to reference: <a href=""http://en.cppreference.com/w/cpp/string/basic_string/to_string"">http://en.cppreference.com/w/cpp/string/basic_string/to_string</a></p>
","8362045"
"Compiling a C++ program with gcc","106911","","<p>Question: How to compile a C++ program with gcc compiler?</p>

<p>info.c:</p>

<pre><code>#include&lt;iostream&gt;
using std::cout;
using std::endl;
int main()
{
   #ifdef __cplusplus
   cout &lt;&lt; ""C++ compiler in use and version is "" &lt;&lt; __cplusplus &lt;&lt; endl;
   #endif
   cout &lt;&lt;""Version is "" &lt;&lt; __STDC_VERSION__ &lt;&lt; endl;
   cout &lt;&lt; ""Hi"" &lt;&lt; __FILE__ &lt;&lt; __LINE__ &lt;&lt; endl;
}
</code></pre>

<p>and when I try to compile <code>info.c</code> </p>

<p><code>$ gcc info.C</code></p>

<pre><code>Undefined                       first referenced
 symbol                             in file
cout                                /var/tmp/ccPxLN2a.o
endl(ostream &amp;)                     /var/tmp/ccPxLN2a.o
ostream::operator&lt;&lt;(ostream &amp;(*)(ostream &amp;))/var/tmp/ccPxLN2a.o
ostream::operator&lt;&lt;(int)            /var/tmp/ccPxLN2a.o
ostream::operator&lt;&lt;(long)           /var/tmp/ccPxLN2a.o
ostream::operator&lt;&lt;(char const *)   /var/tmp/ccPxLN2a.o
ld: fatal: Symbol referencing errors. No output written to a.out
collect2: ld returned 1 exit status
</code></pre>

<p><strong>Isn't gcc compiler capable of compiling C++ programs?
On a related note, what is the difference between gcc and g++.
Thanks,</strong></p>
","<p>gcc can actually compile c++ code just fine. The errors you received are <strong>linker</strong> errors, not compiler errors.</p>

<p>Odds are that if you change the compilation line to be this:</p>

<pre><code>gcc info.C -lstdc++
</code></pre>

<p>which makes it link to the standard c++ library, then it will work just fine.</p>

<p>However, you should just make your life easier and use g++.</p>

<hr>

<p><strong>EDIT:</strong></p>

<p><a href=""https://stackoverflow.com/users/243245/rup"">Rup</a> says it best in <a href=""https://stackoverflow.com/questions/3178342/compiling-a-c-program-with-gcc#comment3304995_3206158"">his comment</a> to another answer:</p>

<blockquote>
  <p>[...] gcc will
  select the correct back-end compiler
  based on file extension (i.e. will
  compile a .c as C and a .cc as C++)
  and links binaries against just the
  standard C and GCC helper libraries by
  default regardless of input languages;
  g++ will also select the correct
  back-end based on extension except
  that I think it compiles all C source
  as C++ instead (i.e. it compiles both
  .c and .cc as C++) and it includes
  libstdc++ in its link step regardless
  of input languages.</p>
</blockquote>
","3206195"
"Using CMake to generate Visual Studio C++ project files","106797","","<p>I am working on an open source C++ project, for code that compiles on Linux and Windows. I use CMake to build the code on Linux. For ease of development setup and political reasons, I must stick to Visual Studio project files/editor on Windows (I can't switch to <a href=""http://en.wikipedia.org/wiki/Code::Blocks"" rel=""noreferrer"">Code::Blocks</a>, for example). I see instructions to generate Visual Studio files using CMake, as <a href=""http://www.opentissue.org/mediawiki/index.php/Using_CMake"" rel=""noreferrer"">here</a>.</p>

<p>Have you used CMake to generate Visual Studio files before? How has been your experience? Suppose I want to add a new file to my project. What is the workflow for this?</p>
","<p>CMake is actually pretty good for this. The key part was everyone on the Windows side has to remember to run CMake before loading in the solution, and everyone on our Mac side would have to remember to run it before make. </p>

<p>The hardest part was as a Windows developer making sure your structural changes were in the cmakelist.txt file and not in the solution or project files as those changes would probably get lost and even if not lost would not get transferred over to the Mac side who also needed them, and the Mac guys would need to remember not to modify the make file for the same reasons.</p>

<p>It just requires a little thought and patience, but there will be mistakes at first. But if you are using <a href=""http://en.wikipedia.org/wiki/Continuous_integration"" rel=""nofollow noreferrer"">continuous integration</a> on both sides then these will get shook out early, and people will eventually get in the habit.</p>
","395216"
"Compiling with g++ using multiple cores","106688","","<p>Quick question: what is the compiler flag to allow g++ to spawn multiple instances of itself in order to compile large projects quicker (for example 4 source files at a time for a multi-core CPU)?</p>

<p>Many thanks.</p>
","<p>You can do this with make - with gnu make it is the -j flag (this will also help on a uniprocessor machine).</p>

<p>For example if you want 4 parallel jobs from make:</p>

<pre><code>make -j 4
</code></pre>

<p>You can also run gcc in a pipe with </p>

<pre><code>gcc -pipe
</code></pre>

<p>This will pipeline the compile stages, which will also help keep the cores busy.</p>

<p>If you have additional machines available too, you might check out <a href=""http://distcc.samba.org/"" rel=""noreferrer"">distcc</a>, which will farm compiles out to those as well.</p>
","414725"
"Is there 'byte' data type in C++?","106646","","<p>If exists is there header file to include?</p>

<p>This code give compilation error:</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

int main()
{
    byte b = 2;

    cout &lt;&lt; b &lt;&lt; endl;

    return 0;
}
</code></pre>
","<p>No there is no byte data type in C++. However you could always include the bitset header from the standard library and create a typedef for byte:</p>

<pre><code>typedef bitset&lt;8&gt; BYTE;
</code></pre>

<p>NB: Given that WinDef.h defines BYTE for windows code, you may want to use something other than BYTE if your intending to target Windows.</p>

<p>Edit: In response to the suggestion that the answer is wrong.
 The answer is not wrong. The question was ""Is there a 'byte' data type in C++?"". The answer was and is: ""No there is no byte data type in C++"" as answered. </p>

<p>With regards to the suggested possible alternative for which it was asked why is the suggested alternative better?</p>

<p>According to my copy of the C++ standard, at the time:</p>

<p>""Objects declared as characters (char) shall be large enough to store any member of the implementations basic character set"": 3.9.1.1 </p>

<p>I read that to suggest that if a compiler implementation requires 16 bits to store a member of the basic character set then the size of a char would be 16 bits. That today's compilers tend to use 8 bits for a char is one thing, but as far as I can tell there is certainly no guarantee that it will be 8 bits.</p>

<p>On the other hand, ""the class template bitset&lt;N> describes an object that can store a sequence consisting of a fixed number of bits, N."" : 20.5.1. In otherwords by specifying 8 as the template parameter I end up with an object that can store a sequence consisting of 8 bits. </p>

<p>Whether or not the alternative is better to char, in the context of the program being written, therefore depends, as far as I understand, although I may be wrong, upon your compiler and your requirements at the time. It was therefore upto the individual writing the code, as far as I'm concerned, to do determine whether the suggested alternative was appropriate for their requirements/wants/needs.</p>
","20025042"
"How do I pass a unique_ptr argument to a constructor or a function?","106141","","

<p>I'm new to move semantics in C++11 and I don't know very well how to handle <code>unique_ptr</code> parameters in constructors or functions. Consider this class referencing itself:</p>

<pre class=""lang-cpp prettyprint-override""><code>#include &lt;memory&gt;

class Base
{
  public:

    typedef unique_ptr&lt;Base&gt; UPtr;

    Base(){}
    Base(Base::UPtr n):next(std::move(n)){}

    virtual ~Base(){}

    void setNext(Base::UPtr n)
    {
      next = std::move(n);
    }

  protected :

    Base::UPtr next;

};
</code></pre>

<p>Is this how I should write functions taking <code>unique_ptr</code> arguments?</p>

<p>And do I need to use <code>std::move</code> in the calling code?</p>

<pre class=""lang-cpp prettyprint-override""><code>Base::UPtr b1;
Base::UPtr b2(new Base());

b1-&gt;setNext(b2); //should I write b1-&gt;setNext(std::move(b2)); instead?
</code></pre>
","<p>Here are the possible ways to take a unique pointer as an argument, as well as their associated meaning.</p>

<h3>(A) By Value</h3>

<pre><code>Base(std::unique_ptr&lt;Base&gt; n)
  : next(std::move(n)) {}
</code></pre>

<p>In order for the user to call this, they must do one of the following:</p>

<pre><code>Base newBase(std::move(nextBase));
Base fromTemp(std::unique_ptr&lt;Base&gt;(new Base(...));
</code></pre>

<p>To take a unique pointer by value means that you are <em>transferring</em> ownership of the pointer to the function/object/etc in question. After <code>newBase</code> is constructed, <code>nextBase</code> is guaranteed to be <em>empty</em>. You don't own the object, and you don't even have a pointer to it anymore. It's gone.</p>

<p>This is ensured because we take the parameter by value. <code>std::move</code> doesn't actually <em>move</em> anything; it's just a fancy cast. <code>std::move(nextBase)</code> returns a <code>Base&amp;&amp;</code> that is an r-value reference to <code>nextBase</code>. That's all it does.</p>

<p>Because <code>Base::Base(std::unique_ptr&lt;Base&gt; n)</code> takes its argument by value rather than by r-value reference, C++ will automatically construct a temporary for us. It creates a <code>std::unique_ptr&lt;Base&gt;</code> from the <code>Base&amp;&amp;</code> that we gave the function via <code>std::move(nextBase)</code>. It is the construction of this temporary that actually <em>moves</em> the value from <code>nextBase</code> into the function argument <code>n</code>.</p>

<h3>(B) By non-const l-value reference</h3>

<pre><code>Base(std::unique_ptr&lt;Base&gt; &amp;n)
  : next(std::move(n)) {}
</code></pre>

<p>This has to be called on an actual l-value (a named variable). It cannot be called with a temporary like this:</p>

<pre><code>Base newBase(std::unique_ptr&lt;Base&gt;(new Base)); //Illegal in this case.
</code></pre>

<p>The meaning of this is the same as the meaning of any other use of non-const references: the function may <em>or may not</em> claim ownership of the pointer. Given this code:</p>

<pre><code>Base newBase(nextBase);
</code></pre>

<p>There is no guarantee that <code>nextBase</code> is empty. It <em>may</em> be empty; it may not. It really depends on what <code>Base::Base(std::unique_ptr&lt;Base&gt; &amp;n)</code> wants to do. Because of that, it's not very evident just from the function signature what's going to happen; you have to read the implementation (or associated documentation).</p>

<p>Because of that, I wouldn't suggest this as an interface.</p>

<h3>(C) By const l-value reference</h3>

<pre><code>Base(std::unique_ptr&lt;Base&gt; const &amp;n);
</code></pre>

<p>I don't show an implementation, because you <em>cannot</em> move from a <code>const&amp;</code>. By passing a <code>const&amp;</code>, you are saying that the function can access the <code>Base</code> via the pointer, but it cannot <em>store</em> it anywhere. It cannot claim ownership of it.</p>

<p>This can be useful. Not necessarily for your specific case, but it's always good to be able to hand someone a pointer and know that they <em>cannot</em> (without breaking rules of C++, like no casting away <code>const</code>) claim ownership of it. They can't store it. They can pass it to others, but those others have to abide by the same rules.</p>

<h3>(D) By r-value reference</h3>

<pre><code>Base(std::unique_ptr&lt;Base&gt; &amp;&amp;n)
  : next(std::move(n)) {}
</code></pre>

<p>This is more or less identical to the ""by non-const l-value reference"" case. The differences are two things.</p>

<ol>
<li><p>You <em>can</em> pass a temporary:</p>

<pre><code>Base newBase(std::unique_ptr&lt;Base&gt;(new Base)); //legal now..
</code></pre></li>
<li><p>You <em>must</em> use <code>std::move</code> when passing non-temporary arguments.</p></li>
</ol>

<p>The latter is really the problem. If you see this line:</p>

<pre><code>Base newBase(std::move(nextBase));
</code></pre>

<p>You have a reasonable expectation that, after this line completes, <code>nextBase</code> should be empty. It should have been moved from. After all, you have that <code>std::move</code> sitting there, telling you that movement has occurred.</p>

<p>The problem is that it hasn't. It is not <em>guaranteed</em> to have been moved from. It <em>may</em> have been moved from, but you will only know by looking at the source code. You cannot tell just from the function signature.</p>

<h3>Recommendations</h3>

<ul>
<li><strong>(A) By Value:</strong> If you mean for a function to claim <em>ownership</em> of a <code>unique_ptr</code>, take it by value.</li>
<li><strong>(C) By const l-value reference:</strong> If you mean for a function to simply use the <code>unique_ptr</code> for the duration of that function's execution, take it by <code>const&amp;</code>. Alternatively, pass a <code>&amp;</code> or <code>const&amp;</code> to the actual type pointed to, rather than using a <code>unique_ptr</code>.</li>
<li><strong>(D) By r-value reference:</strong> If a function may or may not claim ownership (depending on internal code paths), then take it by <code>&amp;&amp;</code>. But I strongly advise against doing this whenever possible.</li>
</ul>

<h3>How to manipulate unique_ptr</h3>

<p>You cannot copy a <code>unique_ptr</code>. You can only move it. The proper way to do this is with the <code>std::move</code> standard library function.</p>

<p>If you take a <code>unique_ptr</code> by value, you can move from it freely. But movement doesn't actually happen because of <code>std::move</code>. Take the following statement:</p>

<pre><code>std::unique_ptr&lt;Base&gt; newPtr(std::move(oldPtr));
</code></pre>

<p>This is really two statements:</p>

<pre><code>std::unique_ptr&lt;Base&gt; &amp;&amp;temporary = std::move(oldPtr);
std::unique_ptr&lt;Base&gt; newPtr(temporary);
</code></pre>

<p>(note: The above code does not technically compile, since non-temporary r-value references are not actually r-values. It is here for demo purposes only).</p>

<p>The <code>temporary</code> is just an r-value reference to <code>oldPtr</code>. It is in the <em>constructor</em> of <code>newPtr</code> where the movement happens. <code>unique_ptr</code>'s move constructor (a constructor that takes a <code>&amp;&amp;</code> to itself) is what does the actual movement.</p>

<p>If you have a <code>unique_ptr</code> value and you want to store it somewhere, you <em>must</em> use <code>std::move</code> to do the storage.</p>
","8114913"
"error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj","106052","","<p>I was converting my projects from VS2010 to VS2012.But I am getting an _MSC_VER linker error in certain projects. After a long surfing through google I found out that the issue is due to linking of a library created in VS2010 to VS2012.</p>

<p>How can I find out that which projectis causing the error?
Here I am quoting the error:</p>

<pre><code>Error   6   error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj      D:\ProjectLocation\Projectname1.lib(CppFile2.obj) Projectname2
Error   15  error LNK2001: unresolved external symbol ""private: static void __cdecl std::locale::facet::_Facet_Register(class std::locale::facet *)"" (?_Facet_Register@facet@locale@std@@CAXPAV123@@Z)  D:\ProjectLocation\Projectname1.lib(CppFile3.obj)   Projectname2
Error   13  error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj    D:\ProjectLocation\Projectname1.lib(CppFile4.obj)   Projectname2
Error   12  error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj    D:\ProjectLocation\Projectname1.lib(CppFile5.obj)   Projectname2
Error   10  error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj    D:\ProjectLocation\Projectname1.lib(CppFile6.obj)   Projectname2
Error   11  error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj    D:\ProjectLocation\Projectname1.lib(CppFile7.obj)   Projectname2
Error   9   error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj    D:\ProjectLocation\Projectname1.lib(CppFile8.obj)   Projectname2
Error   4   error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj       D:\ProjectLocation\Projectname1.lib(CppFile9.obj)    Projectname2
Error   14  error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj    D:\ProjectLocation\Projectname1.lib(CppFile10.obj)  Projectname2
Error   7   error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj    D:\ProjectLocation\Projectname1.lib(CppFile11.obj)  Projectname2
Error   8   error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj    D:\ProjectLocation\Projectname1.lib(CppFile12.obj)  Projectname2
Error   5   error LNK2038: mismatch detected for '_MSC_VER': value '1600' doesn't match value '1700' in CppFile1.obj    D:\ProjectLocation\Projectname1.lib(CppFile13.obj)  Projectname2
</code></pre>
","<p>You are trying to link objects compiled by different versions of the compiler. That's not supported in modern versions of VS, at least not if you are using the C++ standard library. Different versions of the standard library are binary incompatible and so you need all the inputs to the linker to be compiled with the same version. Make sure you re-compile all the objects that are to be linked. </p>

<p>The compiler error names the objects involved so the information the the question already has the answer you are looking for. Specifically it seems that the static library that you are linking needs to be re-compiled.</p>
","19575855"
"Are members of a C++ struct initialized to 0 by default?","106051","","<p>I have this <code>struct</code>:</p>

<pre><code>   struct Snapshot
    {
        double x; 
        int   y ;

    };
</code></pre>

<p>I want <code>x</code> and <code>y</code> to be 0. Will they be 0 by default or do I have to do:</p>

<pre><code>Snapshot s= {0,0};
</code></pre>

<p>What are the other ways to zero out the structure?</p>
","<p>They are not null if you don't initialize the struct. </p>

<pre><code>Snapshot s; // receives no initialization
Snapshot s = {}; // value initializes all members
</code></pre>

<p>The second will make all members zero, the first leaves them at unspecified values. Note that it is recursive:</p>

<pre><code>struct Parent { Snapshot s; };
Parent p; // receives no initialization
Parent p = {}; // value initializes all members
</code></pre>

<p>The second will make <code>p.s.{x,y}</code> zero. You cannot use these aggregate initializer lists if you've got constructors in your struct. If that is the case, you will have to add proper initalization to those constructors</p>

<pre><code>struct Snapshot {
    int x;
    double y;
    Snapshot():x(0),y(0) { }
    // other ctors / functions...
};
</code></pre>

<p>Will initialize both x and y to 0. Note that you can use <code>x(), y()</code> to initialize them disregarding of their type: That's then value initialization, and usually yields a proper initial value (0 for int, 0.0 for double, calling the default constructor for user defined types that have user declared constructors, ...). This is important especially if your struct is a template. </p>
","1069634"
"Opensource C/C++ decompiler","106002","","<p>Duplicate of <a href=""https://stackoverflow.com/questions/193896/whats-a-good-c-decompiler"">What&#39;s a good C decompiler?</a> and <a href=""https://stackoverflow.com/questions/205059/is-there-a-c-decompiler"">Is there a C++ decompiler?</a> taken together.</p>

<p>Does somebody know any opensource <strong>C/C++</strong> decompiler? I don't want to use any commercial solution like <strong>IDA Pro</strong>.</p>
","<p>Check out <a href=""http://boomerang.sourceforge.net/"" rel=""noreferrer"">Boomerang</a>.</p>
","711236"
"How do you calculate the variance, median, and standard deviation in C++ or Java?","106001","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/1735870/simple-statistics-java-packages-for-calculating-mean-standard-deviation-etc"">Simple statistics - Java packages for calculating mean, standard deviation, etc</a>  </p>
</blockquote>



<p>I have a vector of some doubles (1.1,2,3,5). How can I calculate the variance, median, and standard deviation? </p>

<p>Java or C++ or even pseudo code would do.</p>
","<pre><code>public class Statistics 
{
    double[] data;
    int size;   

    public Statistics(double[] data) 
    {
        this.data = data;
        size = data.length;
    }   

    double getMean()
    {
        double sum = 0.0;
        for(double a : data)
            sum += a;
        return sum/size;
    }

    double getVariance()
    {
        double mean = getMean();
        double temp = 0;
        for(double a :data)
            temp += (a-mean)*(a-mean);
        return temp/(size-1);
    }

    double getStdDev()
    {
        return Math.sqrt(getVariance());
    }

    public double median() 
    {
       Arrays.sort(data);

       if (data.length % 2 == 0) 
       {
          return (data[(data.length / 2) - 1] + data[data.length / 2]) / 2.0;
       } 
       return data[data.length / 2];
    }
}
</code></pre>
","7988556"
"How to pass objects to functions in C++?","105917","","<p>I am new to C++ programming, but I have experience in Java. I need guidance on how to pass objects to functions in C++.</p>

<p>Do I need to pass pointers, references, or non-pointer and non-reference values? I remember in Java there are no such issues since we pass just the variable that holds reference to the objects.</p>

<p>It would be great if you could also explain where to use each of those options.</p>
","<h1>Rules of thumb for <em>C++11:</em></h1>

<p>Pass <strong><em>by value</em></strong>, except when </p>

<ol>
<li>you do not need ownership of the object and a simple alias will do, in which case you <strong><em>pass by <code>const</code> reference</em></strong>, </li>
<li>you must mutate the object, in which case, use <strong><em>pass by a non-<code>const</code> lvalue reference</em></strong>,</li>
<li>you pass objects of derived classes as base classes, in which case you need to <strong><em>pass by reference</em></strong>. (Use the previous rules to determine whether to pass by <code>const</code> reference or not.) </li>
</ol>

<p>Passing by pointer is virtually never advised. Optional parameters are best expressed as a <code>boost::optional</code>, and aliasing is done fine by reference.</p>

<p>C++11's move semantics make passing and returning by value much more attractive even for complex objects.</p>

<hr>

<h1>Rules of thumb for <em>C++03:</em></h1>

<p>Pass arguments <strong><em>by <code>const</code> reference</em></strong>, except when </p>

<ol>
<li>they are to be changed inside the function and such changes should be reflected outside, in which case you <strong><em>pass by non-<code>const</code> reference</em></strong></li>
<li>the function should be callable without any argument, in which case you pass by pointer, so that users can pass <code>NULL</code>/<code>0</code>/<code>nullptr</code> instead; apply the previous rule to determine whether you should <strong><em>pass by a pointer to a <code>const</code> argument</em></strong></li>
<li>they are of built-in types, which can be <strong><em>passed by copy</em></strong></li>
<li>they are to be changed inside the function and such changes should <strong><em>not</em></strong> be reflected outside, in which case you can <strong><em>pass by copy</em></strong> (an alternative would be to pass according to the previous rules and make a copy inside of the function) </li>
</ol>

<p>(here, ""pass by value"" is called ""pass by copy"", because passing by value always creates a copy in C++03)</p>

<hr>

<p>There's more to this, but these few beginner's rules will get you quite far. </p>
","2139254"
"MSVCP120d.dll missing","105778","","<p>Every time I want to compile my Visual Studio project I get the message that MSVCP120d.dll is missing. Google can't help me. I already installed some redistributables but they didn't help. I also found this:</p>

<blockquote>
  <p>Msvcp120d.dll   Debug version of C++ runtime. No redistribution
  allowed.</p>
  
  <p><a href=""http://msdn.microsoft.com/en-us/library/windows/hardware/dn448963(v=vs.85).aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/library/windows/hardware/dn448963(v=vs.85).aspx</a></p>
</blockquote>
","<p>From the comments, the problem was caused by using dlls that were built with Visual Studio 2013 in a project compiled with Visual Studio 2012. The reason for this was a third party library named the folders containing the dlls vc11, vc12. One has to be careful with any system that uses the compiler version (less than 4 digits) since this does not match the version of Visual Studio (except for Visual Studio 2010).</p>

<ul>
<li>vc8  = Visual Studio 2005</li>
<li>vc9  = Visual Studio 2008</li>
<li>vc10 = Visual Studio 2010</li>
<li>vc11 = Visual Studio 2012</li>
<li>vc12 = Visual Studio 2013</li>
<li>vc14 = Visual Studio 2015</li>
</ul>

<p>The Microsoft C++ runtime dlls use a 2 or 3 digit code also based on the compiler version not the version of Visual Studio.</p>

<ul>
<li>MSVCP80.DLL is from Visual Studio 2005</li>
<li>MSVCP90.DLL is from Visual Studio 2008</li>
<li>MSVCP100.DLL is from Visual Studio 2010</li>
<li>MSVCP110.DLL is from Visual Studio 2012</li>
<li>MSVCP120.DLL is from Visual Studio 2013</li>
<li>MSVCP140.DLL is from Visual Studio 2015</li>
</ul>
","21730219"
"Pointer-to-pointer dynamic two-dimensional array","105693","","<p>First timer on this website, so here goes..</p>

<p>I'm a newbie to C++ and I'm currently working through the book ""Data structures using C++ 2nd ed, of D.S. Malik"". </p>

<p>In the book Malik offers two ways of creating a dynamic two-dimensional array. 
In the first method, you declare a variable to be an array of pointers, where each pointer is of type integer. ex.</p>

<pre><code>int *board[4];
</code></pre>

<p>..and then use a for-loop to create the 'columns' while using the array of pointers as 'rows'.</p>

<p>The second method, you use a pointer to a pointer.</p>

<pre><code>int **board;
board = new int* [10]; 
</code></pre>

<p>etc.</p>

<p>My question is this: which is the better method? The ** method is easier for me to visualize, but the first method can be used in much the same way. Both ways can be used to make dynamic 2-d arrays. </p>

<p>Edit: Wasn't clear enough with the above post. Here's some code I tried:</p>

<pre><code>int row, col;

cout &lt;&lt; ""Enter row size:"";
cin &gt;&gt; row;
cout &lt;&lt; ""\ncol:"";
cin &gt;&gt; col;

int *p_board[row];
for (int i=0; i &lt; row; i++)
    p_board[i] = new int[col];

for (int i=0; i &lt; row; i++)
{
    for (int j=0; j &lt; col; j++)
    {
        p_board[i][j] = j;
        cout &lt;&lt; p_board[i][j] &lt;&lt; "" "";
    }
    cout &lt;&lt; endl;
}
cout &lt;&lt; endl &lt;&lt; endl;

int **p_p_board;
p_p_board = new int* [row];
for (int i=0; i &lt; row; i++)
    p_p_board[i] = new int[col];

for (int i=0; i &lt; row; i++)
{
    for (int j=0; j &lt; col; j++)
    {
        p_p_board[i][j] = j;
        cout &lt;&lt; p_p_board[i][j] &lt;&lt; "" "";
    }
    cout &lt;&lt; endl;
}
</code></pre>
","<p>The first method cannot be used to create <strong>dynamic</strong> 2D arrays because by doing:</p>

<pre><code>int *board[4];
</code></pre>

<p>you essentially allocated an array of 4 pointers to <code>int</code> <strong>on stack</strong>. Therefore, if you now populate each of these  4 pointers with a dynamic array:</p>

<pre><code>for (int i = 0; i &lt; 4; ++i) {
  board[i] = new int[10];
}
</code></pre>

<p>what you end-up with is a 2D array with <strong>static</strong> number of rows (in this case 4) and <strong>dynamic</strong> number of columns (in this case 10). So it is not <strong>fully</strong> dynamic because when you allocate an array on stack you <strong>should</strong> specify a <strong>constant size</strong>, i.e. known at <strong>compile-time</strong>. <strong>Dynamic</strong> array is called <strong>dynamic</strong> because its size is not necessary to be known at <strong>compile-time</strong>, but can rather be determined by some variable in <strong>runtime</strong>.</p>

<p>Once again, when you do:</p>

<pre><code>int *board[4];
</code></pre>

<p>or:</p>

<pre><code>const int x = 4; // &lt;--- `const` qualifier is absolutely needed in this case!
int *board[x];
</code></pre>

<p>you supply a constant known at <strong>compile-time</strong> (in this case 4 or <code>x</code>) so that compiler can now <strong>pre-allocate</strong> this memory for your array, and when your program is loaded into the memory it would already have this amount of memory for the <code>board</code> array, that's why it is called <strong>static</strong>, i.e. because the size is <strong>hard-coded</strong> and <strong>cannot be changed dynamically</strong> (in runtime).</p>

<p>On the other hand, when you do:</p>

<pre><code>int **board;
board = new int*[10];
</code></pre>

<p>or:</p>

<pre><code>int x = 10; // &lt;--- Notice that it does not have to be `const` anymore!
int **board;
board = new int*[x];
</code></pre>

<p>the compiler does not know how much memory <code>board</code> array will require, and therefore it does not <strong>pre-allocate</strong> anything. But when you start your program, the size of array would be determined by the value of <code>x</code> variable (in runtime) and the corresponding space for <code>board</code> array would be allocated on so-called <strong>heap</strong> - the area of memory where all programs running on your computer can allocate <strong>unknown beforehand</strong> (at compile-time) amounts memory for personal usage.</p>

<p>As a result, to truly create dynamic 2D array you have to go with the second method:</p>

<pre><code>int **board;
board = new int*[10]; // dynamic array (size 10) of pointers to int

for (int i = 0; i &lt; 10; ++i) {
  board[i] = new int[10];
  // each i-th pointer is now pointing to dynamic array (size 10) of actual int values
}
</code></pre>

<p>We've just created an square 2D array with 10 by 10 dimensions. To traverse it and populate it with actual values, for example 1, we could use nested loops:</p>

<pre><code>for (int i = 0; i &lt; 10; ++i) {   // for each row
  for (int j = 0; j &lt; 10; ++j) { // for each column
    board[i][j] = 1;
  }
}
</code></pre>
","16001894"
"Arrays vs Vectors: Introductory Similarities and Differences","105513","","<p>What are the differences between an array and a vector in C++? An example of the differences might be included libraries, symbolism, abilities, etc.</p>

<h3>Array</h3>

<blockquote>
  <p>Arrays contain a specific number of elements of a particular type. So that the compiler can reserve the required amount of space when the program is compiled, you must specify the type and number of elements that the array will contain when it is defined. The compiler must be able to determine this value when the program is compiled. Once an array has been defined, you use the identifier for the array along with an index to access specific elements of the array. [...] arrays are zero-indexed; that is, the first element is at index 0. This indexing scheme is indicative of the close relationship in C++ between pointers and arrays and the rules that the language defines for pointer arithmetic.</p>
  
  <p>— C++ Pocket Reference</p>
</blockquote>

<h3>Vector</h3>

<blockquote>
  <p>A vector is a dynamically-sized sequence of objects that provides array-style <code>operator[]</code> random access. The member function <code>push_back</code> copies its arguments via copy constructor, adds that copy as the last item in the vector and increments its size by one. <code>pop_back</code> does the exact opposite, by removing the last element. Inserting or deleting items from the end of a vector takes amortized constant time, and inserting or deleting from any other location takes linear time. These are the basics of vectors. There is a lot more to them. In most cases, a vector should be your first choice over a C-style array. First of all, they are dynamically sized, which means they can grow as needed. You don't have to do all sorts of research to figure out an optimal static size, as in the case of C arrays; a vector grows as needed, and it can be resized larger or smaller manually if you need to. Second, vectors offer bounds checking with the <code>at</code> member function (but not with <code>operator[]</code>), so that you can do something if you reference a nonexistent index instead of simply watching your program crash or worse, continuing execution with corrupt data.</p>
  
  <p>— C++ Cookbook</p>
</blockquote>
","<p>arrays:</p>

<ul>
<li>are a builtin language construct;</li>
<li>come almost unmodified from C89;</li>
<li><strong><em>provide just a contiguous, indexable sequence of elements</em></strong>; no bells and whistles;</li>
<li>are of fixed size; you can't resize an array in C++ (unless it's an array of POD and it's allocated with <code>malloc</code>);</li>
<li>their size must be a compile-time constant unless they are allocated dynamically;</li>
<li>they take their storage space depending from the scope where you declare them;</li>
<li>if dynamically allocated, you must explicitly deallocate them;</li>
<li>if they are dynamically allocated, you just get a pointer, and you can't determine their size; otherwise, you can use <code>sizeof</code> (hence the common idiom <code>sizeof(arr)/sizeof(*arr)</code>, that however fails silently when used inadvertently on a pointer);</li>
<li>automatically decay to a pointers in most situations; in particular, this happens when passing them to a function, which usually requires passing a separate parameter for their size;</li>
<li>can't be returned from a function;</li>
<li>can't be copied/assigned directly;</li>
<li>dynamical arrays of objects require a default constructor, since all their elements must be constructed first;</li>
</ul>

<p><code>std::vector</code>:</p>

<ul>
<li>is a template class;</li>
<li>is a C++ only construct;</li>
<li>is implemented as a <em>dynamic array</em>;</li>
<li>grows and shrinks dynamically;</li>
<li>automatically manage their memory, which is freed on destruction;</li>
<li>can be passed to/returned from functions (by value);</li>
<li>can be copied/assigned (this performs a deep copy of all the stored elements);</li>
<li>doesn't decay to pointers, but you <em>can</em> explicitly get a pointer to their data (<code>&amp;vec[0]</code> is guaranteed to work as expected);</li>
<li>always brings along with the internal dynamic array its <em>size</em> (how many elements are currently stored) and <em>capacity</em> (how many elements <em>can be stored</em> in the currently allocated block);</li>
<li>the internal dynamic array is not allocated inside the object itself (which just contains a few ""bookkeeping"" fields), but is allocated dynamically by the allocator specified in the relevant template parameter; the default one gets the memory from the freestore (the so-called heap), independently from how where the actual object is allocated;</li>
<li>for this reason, they may be less efficient than ""regular"" arrays for small, short-lived, local arrays;</li>
<li>when reallocating, the objects are <em>copied</em> (moved, in C++11);</li>
<li>does not require a default constructor for the objects being stored;</li>
<li>is better integrated with the rest of the so-called STL (it provides the <code>begin()</code>/<code>end()</code> methods, the usual STL <code>typedef</code>s, ...)</li>
</ul>

<p>Also consider the ""modern alternative"" to arrays - <code>std::array</code>; I already described in <a href=""https://stackoverflow.com/questions/4424579/stdvector-versus-stdarray-in-c/4424658#4424658"">another answer</a> the difference between <code>std::vector</code> and <code>std::array</code>, you may want to have a look at it.</p>
","15079462"
"implementing merge sort in C++","105494","","<p>I have studied the theory of the merge sort but don't have any idea of how to implement it in C++. My question is, merge sort creates arrays in recursion. But when implementing, how do we create arrays in runtime? or what is the general approach for this? </p>

<p>Thanks. </p>
","<p>Based on the code here: <a href=""http://cplusplus.happycodings.com/algorithms/code17.html"" rel=""nofollow"">http://cplusplus.happycodings.com/algorithms/code17.html</a></p>

<pre><code>// Merge Sort

#include &lt;iostream&gt;
using namespace std;

int a[50];
void merge(int,int,int);
void merge_sort(int low,int high)
{
 int mid;
 if(low&lt;high)
 {
  mid = low + (high-low)/2; //This avoids overflow when low, high are too large
  merge_sort(low,mid);
  merge_sort(mid+1,high);
  merge(low,mid,high);
 }
}
void merge(int low,int mid,int high)
{
 int h,i,j,b[50],k;
 h=low;
 i=low;
 j=mid+1;

 while((h&lt;=mid)&amp;&amp;(j&lt;=high))
 {
  if(a[h]&lt;=a[j])
  {
   b[i]=a[h];
   h++;
  }
  else
  {
   b[i]=a[j];
   j++;
  }
  i++;
 }
 if(h&gt;mid)
 {
  for(k=j;k&lt;=high;k++)
  {
   b[i]=a[k];
   i++;
  }
 }
 else
 {
  for(k=h;k&lt;=mid;k++)
  {
   b[i]=a[k];
   i++;
  }
 }
 for(k=low;k&lt;=high;k++) a[k]=b[k];
}
int main()
{
 int num,i;

cout&lt;&lt;""*******************************************************************
*************""&lt;&lt;endl;
 cout&lt;&lt;""                             MERGE SORT PROGRAM
""&lt;&lt;endl;

cout&lt;&lt;""*******************************************************************
*************""&lt;&lt;endl;
 cout&lt;&lt;endl&lt;&lt;endl;
 cout&lt;&lt;""Please Enter THE NUMBER OF ELEMENTS you want to sort [THEN 
PRESS
ENTER]:""&lt;&lt;endl;
 cin&gt;&gt;num;
 cout&lt;&lt;endl;
 cout&lt;&lt;""Now, Please Enter the ( ""&lt;&lt; num &lt;&lt;"" ) numbers (ELEMENTS) [THEN
PRESS ENTER]:""&lt;&lt;endl;
 for(i=1;i&lt;=num;i++)
 {
  cin&gt;&gt;a[i] ;
 }
 merge_sort(1,num);
 cout&lt;&lt;endl;
 cout&lt;&lt;""So, the sorted list (using MERGE SORT) will be :""&lt;&lt;endl;
 cout&lt;&lt;endl&lt;&lt;endl;

 for(i=1;i&lt;=num;i++)
 cout&lt;&lt;a[i]&lt;&lt;""  "";

 cout&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl&lt;&lt;endl;
return 1;

}
</code></pre>
","12030723"
"Is #pragma once a safe include guard?","105476","","<p>I've read that there is some compiler optimization when using <code>#pragma once</code> which can result in faster compilation.  I recognize that is non-standard, and thus could pose a cross-platform compatibility issue.</p>

<p>Is this something that is supported by most modern compilers on non-windows platforms (gcc)?</p>

<p>I want to avoid platform compilation issues, but also want to avoid the extra work of fallback guards:</p>

<pre><code>#pragma once
#ifndef HEADER_H
#define HEADER_H

...

#endif // HEADER_H
</code></pre>

<p>Should I be concerned? Should I expend any further mental energy on this?</p>
","<p>Using <code>#pragma once</code> should work on any modern compiler, but I don't see any reason not to use a standard <code>#ifndef</code> include guard. It works just fine. The one caveat is that GCC didn't support <code>#pragma once</code> before <a href=""http://gcc.gnu.org/bugzilla/show_bug.cgi?id=11569"" rel=""nofollow noreferrer"">version 3.4</a>.</p>

<p>I also found that, at least on GCC, <a href=""http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC8"" rel=""nofollow noreferrer"">it recognizes the standard <code>#ifndef</code> include guard and optimizes it</a>, so it shouldn't be much slower than <code>#pragma once</code>.</p>
","787539"
"calculating execution time in c++","105292","","<p>I have written a c++ program , I want to know how to calculate the time taken for execution so I won't exceed the time limit.</p>

<pre><code>#include&lt;iostream&gt;

using namespace std;

int main ()
{
    int st[10000],d[10000],p[10000],n,k,km,r,t,ym[10000];
    k=0;
    km=0;
    r=0;
    scanf(""%d"",&amp;t);
    for(int y=0;y&lt;t;y++)
    {
    scanf(""%d"",&amp;n);
    for(int i=0;i&lt;n;i++)
    {
            cin&gt;&gt;st[i] &gt;&gt;d[i] &gt;&gt;p[i];
    }
    for(int i=0;i&lt;n;i++)
    {
            for(int j=i+1;j&lt;n;j++)
            {
                    if((d[i]+st[i])&lt;=st[j])
                    {
                              k=p[i]+p[j];
                    }
                    if(k&gt;km)
                    km=k;
            }
        if(km&gt;r)
        r=km;
    }
    ym[y]=r;
}
    for( int i=0;i&lt;t;i++)
    {
         cout&lt;&lt;ym[i]&lt;&lt;endl;
    }


    //system(""pause"");
    return 0;
}     
</code></pre>

<p>this is my program and i want it to be within time limit 3 sec !! how to do it ?
yeah sorry i meant execution time !!</p>
","<p>If you have cygwin installed, from it's bash shell, run your executable, say <code>MyProgram</code>, using the <code>time</code> utility, like so:</p>

<pre><code>/usr/bin/time ./MyProgram
</code></pre>

<p>This will report how long the execution of your program took -- the output would look something like the following:</p>

<pre><code>real    0m0.792s
user    0m0.046s
sys     0m0.218s
</code></pre>

<p>You could also manually modify your C program to instrument it using the <code>clock()</code> library function, like so:</p>

<pre><code>#include &lt;time.h&gt;
int main(void) {
    clock_t tStart = clock();
    /* Do your stuff here */
    printf(""Time taken: %.2fs\n"", (double)(clock() - tStart)/CLOCKS_PER_SEC);
    return 0;
}
</code></pre>
","876970"
"How does ifstream's eof() work?","105102","","<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;

int main() {
    std::fstream inf( ""ex.txt"", std::ios::in );
    while( !inf.eof() ) {
        std::cout &lt;&lt; inf.get() &lt;&lt; ""\n"";
    }
    inf.close();
    inf.clear();
    inf.open( ""ex.txt"", std::ios::in );
    char c;
    while( inf &gt;&gt; c ) {
        std::cout &lt;&lt; c &lt;&lt; ""\n"";
    }
    return 0;
}
</code></pre>

<p>I'm really confused about <code>eof()</code> function. Suppose that my ex.txt's content was:</p>

<pre><code>abc
</code></pre>

<p>It always reads an extra character and shows <code>-1</code> when reading using <code>eof()</code>. But the <code>inf &gt;&gt; c</code> gave the correct output which was 'abc'? Can anyone help me explain this?</p>
","<p>-1 is <code>get</code>'s way of saying you've reached the end of file. Compare it using the <code>std::char_traits&lt;char&gt;::eof()</code> (or <code>std::istream::traits_type::eof()</code>) - avoid -1, it's a magic number. (Although the other one is a bit verbose - you can always just call <code>istream::eof</code>)</p>

<p>The EOF flag is only set once a read tries to read <em>past the end of the file</em>. If I have a 3 byte file, and I only read 3 bytes, EOF is <code>false</code>, because I've not tried to read past the end of the file yet. While this seems confusing for files, which typically know their size, EOF is not known until a read is attempted on some devices, such as pipes and network sockets.</p>

<p>The second example works as <code>inf &gt;&gt; foo</code> will always return <code>inf</code>, with the side effect of attempt to read something and store it in <code>foo</code>. <code>inf</code>, in an <code>if</code> or <code>while</code>, will evaluate to <code>true</code> if the file is ""good"": no errors, no EOF. Thus, when a read fails, <code>inf</code> evaulates to <code>false</code>, and your loop properly aborts. However, take this common error:</p>

<pre><code>while(!inf.eof())  // EOF is false here
{
    inf &gt;&gt; x;      // read fails, EOF becomes true, x is not set
    // use x       // we use x, despite our read failing.
}
</code></pre>

<p>However, this:</p>

<pre><code>while(inf &gt;&gt; x)  // Attempt read into x, return false if it fails
{
    // will only be entered if read succeeded.
}
</code></pre>

<p>Which is what we want.</p>
","4533102"
"Deleting an object in C++","105003","","<p>Here is a sample code that I have:</p>

<pre><code>void test()
{
   Object1 *obj = new Object1();
   .
   .
   .
   delete obj;
}
</code></pre>

<p>I run it in Visual Studio, and it crashes at the line with 'delete obj;'.
Isn't this the normal way to free the memory associated with an object?
I realized that it automatically invokes the destructor... is this normal?</p>

<hr>

<p>Here is a code snippet:</p>

<pre><code>    if(node-&gt;isleaf())
    {
        vector&lt;string&gt; vec = node-&gt;L;
        vec.push_back(node-&gt;code);
        sort(vec.begin(), vec.end());

        Mesh* msh = loadLeaves(vec, node-&gt;code);

        Simplification smp(msh);

        smp.simplifyErrorBased(errorThreshold);

        int meshFaceCount = msh-&gt;faces.size();

        saveLeaves(vec, msh);

        delete msh;
    }
</code></pre>

<p><code>loadleaves()</code> is a function that reads a mesh from disk and creates a <code>Mesh</code> object and returns it.(think of <code>vec</code> and <code>node-&gt;code</code> are just information about the file to be opened)</p>

<p>Should I remove the <code>delete msh;</code> line?</p>
","<blockquote>
  <p>Isn't this the normal way to free the memory associated with an object?</p>
</blockquote>

<p>This is a common way of managing dynamically allocated memory, but it's not a good way to do so.  This sort of code is brittle because it is not exception-safe:  if an exception is thrown between when you create the object and when you delete it, you will leak that object.</p>

<p>It is far better to use a smart pointer container, which you can use to get scope-bound resource management (it's more commonly called <a href=""http://jalf.dk/blog/2010/01/the-meaning-of-raii-or-why-you-never-need-to-worry-about-resource-management-again/"" rel=""noreferrer"">resource acquisition is initialization</a>, or RAII).  </p>

<p>As an example of automatic resource management:</p>

<pre><code>void test()
{
    std::auto_ptr&lt;Object1&gt; obj1(new Object1);

} // The object is automatically deleted when the scope ends.
</code></pre>

<p>Depending on your use case, <code>auto_ptr</code> might not provide the semantics you need.  In that case, you can consider using <code>shared_ptr</code>.</p>

<p>As for why your program crashes when you delete the object, you have not given sufficient code for anyone to be able to answer that question with any certainty.  </p>
","3428972"
"Why it is OK to return vector from function?","104884","","<p>Please consider this code, I have seen this type of code several times, <code>words</code> is local vector, how it is possible to return from function. Can we guarantee it will not die? </p>

<pre><code> std::vector&lt;std::string&gt; read_file(const std::string&amp; path)
 {
    std::ifstream file(""E:\\names.txt"");

    if (!file.is_open())
    {
        std::cerr &lt;&lt; ""Unable to open file"" &lt;&lt; ""\n"";
        std::exit(-1);
    }

    std::vector&lt;string&gt; words;//this vector will be returned 
    std::string token;

    while (std::getline(file, token, ','))
    {
        words.push_back(token);
    }

    return words;
}
</code></pre>
","<blockquote>
  <p>Can we guarantee it will not die?</p>
</blockquote>

<p>As long there is no reference returned, it's perfectly fine to do so. <code>words</code> will be moved to the variable receiving the result.</p>

<p>The local variable will go out of scope. after it was moved (or copied).</p>
","22655120"
"How to cin Space in c++?","104799","","<p>Say we have a code:</p>

<pre><code>int main()
{
   char a[10];
   for(int i = 0; i &lt; 10; i++)
   {
       cin&gt;&gt;a[i];
       if(a[i] == ' ')
          cout&lt;&lt;""It is a space!!!""&lt;&lt;endl;
   }
   return 0;
}
</code></pre>

<p>How to cin a Space symbol from standard input? If you write space, program ignores! :(
Is there any combination of symbols (e.g. '\s' or something like this) that means ""Space"" that I can use from standard input for my code?</p>
","<p>It skips all whitespace (spaces, tabs, new lines, etc.) by default.  You can either change its behavior, or use a slightly different mechanism.  To change its behavior, use the manipulator <code>noskipws</code>, as follows:</p>

<pre><code> cin &gt;&gt; noskipws &gt;&gt; a[i];
</code></pre>

<p>But, since you seem like you want to look at the individual characters, I'd suggest using <code>get</code>, like this prior to your loop</p>

<pre><code> cin.get( a, n );
</code></pre>

<p>Note:  <code>get</code> will stop retrieving chars from the stream if it either finds a newline char (<code>\n</code>) or after n-1 chars.  It stops early so that it can append the null character (<code>\0</code>) to the array.  You can read more about the <code>istream</code> interface <a href=""http://www.cplusplus.com/reference/iostream/iostream/"" rel=""noreferrer"">here</a>.</p>
","2765613"
"How to forward declare a template class in namespace std?","104705","","<pre><code>#ifndef __TEST__
#define __TEST__

namespace std
{
    template&lt;typename T&gt;
    class list;
}

template&lt;typename T&gt;
void Pop(std::list&lt;T&gt; * l)
{
    while(!l-&gt;empty())
        l-&gt;pop();
}

#endif
</code></pre>

<p>and used that function in my main. I get errors. Of course, I know that there are more template params for <code>std::list</code> (allocator I think). But, that is beside the point. Do I have to know the full template declaration of a template class to be able to forward declare it?</p>

<p>EDIT: I wasn't using a pointer before - it was a reference. I'll try it out with the pointer.</p>
","<p>The problem is not that you can't forward-declare a template class. Yes, you do need to know all of the template parameters <em>and their defaults</em> to be able to forward-declare it correctly:</p>

<pre><code>namespace std {
  template&lt;class T, class Allocator = std::allocator&lt;T&gt;&gt;
  class list;
}
</code></pre>

<p>But to make even such a forward declaration in <code>namespace std</code> is explicitly prohibited by the standard: the <em>only</em> thing you're allowed to put in <code>std</code> is a template <em>specialisation</em>, commonly <code>std::less</code> on a user-defined type. Someone else can cite the relevant text if necessary.</p>

<p>Just <code>#include &lt;list&gt;</code> and don't worry about it.</p>

<p>Oh, incidentally, any name containing double-underscores is reserved for use by the implementation, so you should use something like <code>TEST_H</code> instead of <code>__TEST__</code>. It's not going to generate a warning or an error, but if your program has a clash with an implementation-defined identifier, then it's not guaranteed to compile or run correctly: it's <em>ill-formed</em>. Also prohibited are names beginning with an underscore followed by a capital letter, among others. In general, don't start things with underscores unless you know what magic you're dealing with.</p>
","3879276"
"gcc: undefined reference to","104606","","<p>I would like to compile this.</p>

<p><strong>program.c</strong></p>

<pre><code>#include &lt;libavcodec/avcodec.h&gt;

int main(){
    int i = avpicture_get_size(AV_PIX_FMT_RGB24,300,300);
}
</code></pre>

<p>Running this </p>

<pre><code>gcc -I$HOME/ffmpeg/include program.c
</code></pre>

<p>gives error</p>

<pre><code>/tmp/ccxMLBme.o: In function `main':
program.c:(.text+0x18): undefined reference to `avpicture_get_size'
collect2: ld returned 1 exit status
</code></pre>

<p>However, avpicture_get_size is defined. Why is this happening?</p>
","<blockquote>
  <p>However, avpicture_get_size is defined. </p>
</blockquote>

<p>No, as the header  (<code>&lt;libavcodec/avcodec.h&gt;</code>)  just <strong>declares</strong> it.</p>

<p>The <strong>definition</strong> is in the library itself.</p>

<p>So you might like to add the linker option to link <code>libavcodec</code> when invoking gcc:</p>

<pre><code>-lavcodec
</code></pre>

<hr>

<p>Please also note that libraries need to be specified on the command line <strong>after</strong> the files needing them:</p>

<pre><code>gcc -I$HOME/ffmpeg/include program.c -lavcodec
</code></pre>

<p><strong>Not</strong> like this:</p>

<pre><code>gcc -lavcodec -I$HOME/ffmpeg/include program.c
</code></pre>

<hr>

<p><strong>Update:</strong></p>

<p>Referring to <em><a href=""https://stackoverflow.com/users/226975/wyzard"">Wyzard</a></em>'s comment the complete command might look like this:</p>

<pre><code>gcc -I$HOME/ffmpeg/include program.c -L$HOME/ffmpeg/lib -lavcodec
</code></pre>

<p>For libraries not stored in the linkers standard location the option <code>-L</code> specifies an addtional search path to lookup libraries specified using the <code>-l</code> option, that is <code>libavcodec.x.y.z</code> in this case.</p>

<hr>

<p>For a detailed reference on gcc's linker option, <a href=""http://gcc.gnu.org/onlinedocs/gcc/Link-Options.html"" rel=""noreferrer"">please read here</a>.</p>
","22426590"
"How do you Make A Repeat-Until Loop in C++?","104600","","<p>How do you Make A Repeat-Until Loop in C++? As opposed to a standard While or For loop. I need to check the condition at the end of each iteration, rather than at the beginning.</p>
","<pre><code>do
{
  //  whatever
} while ( !condition );
</code></pre>
","1077229"
"What are access specifiers? Should I inherit with private, protected or public?","104429","","<p>I am confused about the meaning of access modifiers with respect to inheritance. What is the difference between inheritance involving the <code>private</code>, <code>protected</code> and <code>public</code> keywords?</p>
","<h2>what are Access Specifiers?</h2>

<p>There are 3 <code>access specifiers</code> for a class/struct/Union in C++. These access specifiers define how the members of the class can be accessed. Of course, any member of a class is accessible within that class(Inside any member function of that same class). Moving ahead to type of access specifiers, they are:  </p>

<p><strong>Public</strong> - The members declared as Public are accessible from outside the Class through an object of the class.  </p>

<p><strong>Protected</strong> - The members declared as Protected are accessible from outside the class <strong>BUT</strong> only in a class derived from it.  </p>

<p><strong>Private</strong> - These members are only accessible from within the class. No outside Access is allowed.</p>

<p>An Source Code Example:</p>

<pre><code>class MyClass
{
    public:
        int a;
    protected:
        int b;
    private:
        int c;
};

int main()
{
    MyClass obj;
    obj.a = 10;     //Allowed
    obj.b = 20;     //Not Allowed, gives compiler error
    obj.c = 30;     //Not Allowed, gives compiler error
}
</code></pre>

<hr>

<h2>Inheritance and Access Specifiers</h2>

<p>Inheritance in C++ can be one of the following types:  </p>

<ul>
<li><strong><code>Private</code> Inheritance</strong>  </li>
<li><strong><code>Public</code> Inheritance</strong>  </li>
<li><strong><code>Protected</code> inheritance</strong>  </li>
</ul>

<p>Here are the member access rules with respect to each of these:  </p>

<blockquote>
  <p><strong><em>First and most important rule <code>Private</code> members of a class are never accessible from anywhere except the members of the same class.</em></strong>  </p>
</blockquote>

<h2>Public Inheritance:</h2>

<blockquote>
  <p>All <code>Public</code> members of the Base Class become <code>Public</code> Members of the derived class &amp;<br>
  All <code>Protected</code> members of the Base Class become <code>Protected</code> Members of the Derived Class.  </p>
</blockquote>

<p>i.e. No change in the Access of the members. The access rules we discussed before are further then applied to these members.  </p>

<p>Code Example:  </p>

<pre><code>Class Base
{
    public:
        int a;
    protected:
        int b;
    private:
        int c;
};

class Derived:public Base
{
    void doSomething()
    {
        a = 10;  //Allowed 
        b = 20;  //Allowed
        c = 30;  //Not Allowed, Compiler Error
    }
};

int main()
{
    Derived obj;
    obj.a = 10;  //Allowed
    obj.b = 20;  //Not Allowed, Compiler Error
    obj.c = 30;  //Not Allowed, Compiler Error

}
</code></pre>

<h2>Private Inheritance:</h2>

<blockquote>
  <p>All <code>Public</code> members of the Base Class become <code>Private</code> Members of the Derived class &amp;<br>
  All <code>Protected</code> members of the Base Class become <code>Private</code> Members of the Derived Class.</p>
</blockquote>

<p>An code Example:  </p>

<pre><code>Class Base
{
    public:
      int a;
    protected:
      int b;
    private:
      int c;
};

class Derived:private Base   //Not mentioning private is OK because for classes it  defaults to private 
{
    void doSomething()
    {
        a = 10;  //Allowed 
        b = 20;  //Allowed
        c = 30;  //Not Allowed, Compiler Error
    }
};

class Derived2:public Derived
{
    void doSomethingMore()
    {
        a = 10;  //Not Allowed, Compiler Error, a is private member of Derived now
        b = 20;  //Not Allowed, Compiler Error, b is private member of Derived now
        c = 30;  //Not Allowed, Compiler Error
    }
};

int main()
{
    Derived obj;
    obj.a = 10;  //Not Allowed, Compiler Error
    obj.b = 20;  //Not Allowed, Compiler Error
    obj.c = 30;  //Not Allowed, Compiler Error

}
</code></pre>

<h2>Protected Inheritance:</h2>

<blockquote>
  <p>All <code>Public</code> members of the Base Class become <code>Protected</code> Members of the derived class &amp;<br>
  All <code>Protected</code> members of the Base Class become <code>Protected</code> Members of the Derived Class.  </p>
</blockquote>

<p>A Code Example:</p>

<pre><code>Class Base
{
    public:
        int a;
    protected:
        int b;
    private:
        int c;
};

class Derived:protected Base  
{
    void doSomething()
    {
        a = 10;  //Allowed 
        b = 20;  //Allowed
        c = 30;  //Not Allowed, Compiler Error
    }
};

class Derived2:public Derived
{
    void doSomethingMore()
    {
        a = 10;  //Allowed, a is protected member inside Derived &amp; Derived2 is public derivation from Derived, a is now protected member of Derived2
        b = 20;  //Allowed, b is protected member inside Derived &amp; Derived2 is public derivation from Derived, b is now protected member of Derived2
        c = 30;  //Not Allowed, Compiler Error
    }
};

int main()
{
    Derived obj;
    obj.a = 10;  //Not Allowed, Compiler Error
    obj.b = 20;  //Not Allowed, Compiler Error
    obj.c = 30;  //Not Allowed, Compiler Error
}
</code></pre>

<p>Remember the same access rules apply to the classes and members down the inheritance hierarchy. </p>

<hr>

<h2>Important points to note:</h2>

<p><strong><em>- Access Specification is per-Class not per-Object</em></strong></p>

<p>Note that the access specification C++ work on per-Class basis and not per-object basis.<br>
A good example of this is that in a copy constructor or Copy Assignment operator function, all the members of the object being passed can be accessed.</p>

<p><strong><em>- A Derived class can only access members of its own Base class</em></strong></p>

<p>Consider the <strong><a href=""http://ideone.com/5iAeM"" rel=""noreferrer"">following code example</a></strong>:</p>

<pre><code>class Myclass
{ 
    protected: 
       int x; 
}; 

class derived : public Myclass
{
    public: 
        void f( Myclass&amp; obj ) 
        { 
            obj.x = 5; 
        } 
};

int main()
{
    return 0;
}
</code></pre>

<p>It gives an compilation error:     </p>

<blockquote>
  <p>prog.cpp:4: error: ‘int Myclass::x’ is protected</p>
</blockquote>

<p>Because the derived class can only access members of its <strong><em>own Base Class</em></strong>. Note that the object <code>obj</code> being passed here is no way related to the <code>derived</code> class function in which it is being accessed, it is an altogether different object and hence <code>derived</code> member function cannot access its members.</p>

<hr>

<h2>What is a <code>friend</code>? How does <code>friend</code> affect access specification rules?</h2>

<p>You can declare a function or class as <code>friend</code> of another class. When you do so the access specification rules do not apply to the <code>friend</code>ed class/function. The class or function can access all the members of that particular class. </p>

<blockquote>
  <p><strong><em>So do <code>friend</code>s break Encapsulation?</em></strong></p>
</blockquote>

<p>No they don't, On the contrary they enhance Encapsulation!</p>

<p><code>friend</code>ship is used to indicate a <strong><em>intentional strong coupling</em></strong> between two entities.<br>
If there exists a special relationship between two entities such that one needs access to others <code>private</code> or <code>protected</code> members but You do not want <strong><em>everyone</em></strong> to have access by using the <code>public</code> access specifier then you should use <code>friend</code>ship.     </p>
","5448004"
"Compiling simple Hello World program on OS X via command line","104169","","<p>I've got a simple hello world example that I'm trying to compile on OS X, named <code>hw.cpp</code>:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
int main() {
  cout &lt;&lt; ""Hello world!"" &lt;&lt; endl;
  return 0;
}
</code></pre>

<p>I'd like to compile it using <code>gcc</code>, but I've had no success. I'd also like to hear the other options, like using Xcode ?</p>
","<p>Try</p>

<pre><code>g++ hw.cpp
./a.out
</code></pre>

<p><code>g++</code> is the C++ compiler frontend to GCC.<br>
<code>gcc</code> is the C compiler frontend to GCC.</p>

<p>Yes, Xcode is definitely an option. It is a GUI IDE that is built on-top of GCC.</p>

<p>Though I prefer a slightly more verbose approach:</p>

<pre><code>#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; ""Hello world!"" &lt;&lt; std::endl;
}
</code></pre>
","4073313"
"Difference between shared objects (.so), static libraries (.a), and DLL's (.so)?","104147","","<p>I have been involved in some debate with respect to libraries in Linux, and would like to confirm some things.</p>

<p>It is to my understanding (please correct me if I am wrong and I will edit my post later), that there are two ways of using libraries when building an application:</p>

<ol>
<li>Static libraries (.a files): At link time, a copy of the entire library is put into the final application so that the functions within the library are always available to the calling application</li>
<li>Shared objects (.so files): At link time, the object is just verified against its API via the corresponding header (.h) file. The library isn't actually used until run time, where it is needed.</li>
</ol>

<p>The obvious advantage of static libraries is that they allow the entire application to be self-contained, while the benefit of dynamic libraries is that the "".so"" file can be replaced (ie: in case it needs to be updated due to a security bug) without requiring the base application to be recompiled.</p>

<p>I have heard some people make a distinction between shared objects and dynamic linked libraries (DLL's), even though they are both "".so"" files. Is there any distinction between shared objects and DLLs when it comes to C/C++ development on Linux or any other POSIX compliant OS (ie: MINIX, UNIX, QNX, etc)? I am told that one key difference (so far) is that shared objects are just used at run time, while DLL's must be opened first using the dlopen() call within the application.</p>

<p>Finally, I have also heard some developers mention ""shared archives"", which, to my understanding, are also static libraries themselves, but are never used by an application directly. Instead, other static libraries will link against the ""shared archives"" to pull some (but not all) functions/resources from the shared archive into the static library being built.</p>

<p>Thank you all in advance for your assistance.</p>

<h1>Update</h1>

<hr>

<p>In the context in which these terms were provided to me, I've found out the slight differences in these terms, which may even be just colloquialisms in my industry:</p>

<ol>
<li>Shared Object: A library that is automatically linked into a program when the program starts, and exists as a standalone file. The library is included in the linking list at compile time (ie: LDOPTS+=-lmylib for a library file named mylib.so). <strong>The library must be present at compile time, and when the application starts.</strong></li>
<li>Static Library: A library that is merged into the actual program itself at build time for a single (larger) application containing the application code and the library code that is automatically linked into a program when the program is built, and the final binary containing both the main program and the library itself exists as a single standalone binary file. The library is included in the linking list at compile time (ie: LDOPTS+=-lmylib for a library file named mylib.a). <strong>The library must be present at compile time.</strong></li>
<li>DLL: Essentially the same as a shared object, but rather than being included in the linking list at compile time, the library is loaded via <code>dlopen()</code>/<code>dlsym()</code> commands so that the library does not need to be present at build time for the program to compile. <strong>Also, the library does not need to be present (necessarily) at application startup or compile time</strong>, as it is only needed at the moment the <code>dlopen</code>/<code>dlsym</code> calls are made.</li>
<li>Shared Archive: Essentially the same as a static library, but is compiled with the ""export-shared"" and ""-fPIC"" flags. The library is included in the linking list at compile time (ie: LDOPTS+=-lmylib<code>S</code> for a library file named mylib<code>S</code>.a). The distinction between the two is that this additional flag is required if a shared object or DLL wants to statically link the shared archive into its own code AND be able to make the functions in the shared object available to other programs, rather than just using them internal to the DLL. This is useful in the case when someone provides you with a static library, and you wish to repackage it as an SO. <strong>The library must be present at compile time.</strong></li>
</ol>

<h1>Additional Update</h1>

<p>The distinction between ""<code>DLL</code>"" and ""<code>shared library</code>"" was just a (lazy, inaccurate) colloquialism in the company I worked in at the time (Windows developers being forced to shift to Linux development, and the term stuck), adhering to the descriptions noted above.</p>

<p>Additionally, the trailing ""<code>S</code>"" literal after the library name, in the case of ""shared archives"" was just a convention used at that company, and not in industry in general.</p>
","<p>I've always thought that DLLs and shared objects are just different terms for the same thing - Windows calls them DLLs, while on UNIX systems they're shared objects, with the general term - dynamically linked library - covering both (even the function to open a .so on UNIX is called <code>dlopen()</code> after 'dynamic library').</p>

<p>They are indeed only linked at application startup, however your notion of verification against the header file is incorrect. The header file defines prototypes which are required in order to compile the code which uses the library, but at link time the linker looks inside the library itself to make sure the functions it needs are actually there. The linker has to find the function bodies somewhere at link time or it'll raise an error. It ALSO does that at runtime, because as you rightly point out the library itself might have changed since the program was compiled. This is why ABI stability is so important in platform libraries, as the ABI changing is what breaks existing programs compiled against older versions.</p>

<p>Static libraries are just bundles of object files straight out of the compiler, just like the ones that you are building yourself as part of your project's compilation, so they get pulled in and fed to the linker in exactly the same way, and unused bits are dropped in exactly the same way.</p>
","9688338"
"Differences between unique_ptr and shared_ptr","104099","","<blockquote>
  <p><strong>Possible Duplicates:</strong><br>
  <a href=""https://stackoverflow.com/questions/5576922/pimpl-shared-ptr-or-unique-ptr"">pimpl: shared_ptr or unique_ptr</a><br>
  <a href=""https://stackoverflow.com/questions/569775/smart-pointers-boost-explained"">smart pointers (boost) explained</a>  </p>
</blockquote>



<p>Could someone explain differences between shared_ptr and unique_ptr?</p>
","<p>Both of these classes are smart pointers, which means that they automatically (in most cases) will deallocate the object that they point at when that object can no longer be referenced.  The difference between the two is how many different pointers of each type can refer to a resource.</p>

<p>When using <code>unique_ptr</code>, there can be at most one <code>unique_ptr</code> pointing at any one resource.    When that <code>unique_ptr</code> is destroyed, the resource is automatically reclaimed.  Because there can only be one <code>unique_ptr</code> to any resource, any attempt to make a copy of a <code>unique_ptr</code> will cause a compile-time error.  For example, this code is illegal:</p>

<pre><code>unique_ptr&lt;T&gt; myPtr(new T);       // Okay
unique_ptr&lt;T&gt; myOtherPtr = myPtr; // Error: Can't copy unique_ptr
</code></pre>

<p>However, <code>unique_ptr</code> can be <em>moved</em> using the new move semantics:</p>

<pre><code>unique_ptr&lt;T&gt; myPtr(new T);                  // Okay
unique_ptr&lt;T&gt; myOtherPtr = std::move(myPtr); // Okay, resource now stored in myOtherPtr
</code></pre>

<p>Similarly, you can do something like this:</p>

<pre><code>unique_ptr&lt;T&gt; MyFunction() {
    unique_ptr&lt;T&gt; myPtr(/* ... */);

    /* ... */

    return myPtr;
}
</code></pre>

<p>This idiom means ""I'm returning a managed resource to you.  If you don't explicitly capture the return value, then the resource will be cleaned up.  If you do, then you now have exclusive ownership of that resource.""  In this way, you can think of <code>unique_ptr</code> as a safer, better replacement for <code>auto_ptr</code>.</p>

<p><code>shared_ptr</code>, on the other hand, allows for multiple pointers to point at a given resource.  When the very last <code>shared_ptr</code> to a resource is destroyed, the resource will be deallocated.  For example, this code is perfectly legal:</p>

<pre><code>shared_ptr&lt;T&gt; myPtr(new T);       // Okay
shared_ptr&lt;T&gt; myOtherPtr = myPtr; // Sure!  Now have two pointers to the resource.
</code></pre>

<p>Internally, <code>shared_ptr</code> uses <a href=""http://en.wikipedia.org/wiki/Reference_counting"" rel=""noreferrer"">reference counting</a> to track how many pointers refer to a resource, so you need to be careful not to introduce any reference cycles.</p>

<p>In short:</p>

<ol>
<li>Use <code>unique_ptr</code> when you want a single pointer to an object that will be reclaimed when that single pointer is destroyed.</li>
<li>Use <code>shared_ptr</code> when you want multiple pointers to the same resource.</li>
</ol>

<p>Hope this helps!</p>
","6876833"
"C++ equivalent of instanceof","104020","","<p>What is the preferred method to achieve the C++ equivalent of <code>instanceof</code>?</p>
","<p>Try using:</p>

<pre><code>if(NewType* v = dynamic_cast&lt;NewType*&gt;(old)) {
   // old was safely casted to NewType
   v-&gt;doSomething();
}
</code></pre>

<p>This requires your compiler to have rtti support enabled.</p>

<p>EDIT:
I've had some good comments on this answer!</p>

<p>Every time you need to use a dynamic_cast (or instanceof) you'd better ask yourself whether it's a necessary thing. It's generally a sign of poor design. </p>

<p>Typical workarounds is putting the special behaviour for the class you are checking for into a virtual function on the base class or perhaps introducing something like a <a href=""http://en.wikipedia.org/wiki/Visitor_pattern"" rel=""noreferrer"">visitor</a> where you can introduce specific behaviour for subclasses without changing the interface (except for adding the visitor acceptance interface of course).</p>

<p>As pointed out dynamic_cast doesn't come for free. A simple and consistently performing hack that handles most (but not all cases) is basically adding an enum representing all the possible types your class can have and check whether you got the right one. </p>

<pre><code>if(old-&gt;getType() == BOX) {
   Box* box = static_cast&lt;Box*&gt;(old);
   // Do something box specific
}
</code></pre>

<p>This is not good oo design, but it can be a workaround and its cost is more or less only a virtual function call. It also works regardless of RTTI is enabled or not.</p>

<p>Note that this approach doesn't support multiple levels of inheritance so if you're not careful you might end with code looking like this:</p>

<pre><code>// Here we have a SpecialBox class that inherits Box, since it has its own type
// we must check for both BOX or SPECIAL_BOX
if(old-&gt;getType() == BOX || old-&gt;getType() == SPECIAL_BOX) {
   Box* box = static_cast&lt;Box*&gt;(old);
   // Do something box specific
}
</code></pre>
","500495"
"C++, What does the colon after a constructor mean?","103796","","<blockquote>
  <p><strong>Possible Duplicates:</strong><br>
  <a href=""https://stackoverflow.com/questions/2349978/variables-after-the-colon-in-a-constructor"">Variables After the Colon in a Constructor</a><br>
  <a href=""https://stackoverflow.com/questions/1272680/c-constructor-syntax-question-noob"">C++ constructor syntax question (noob)</a>  </p>
</blockquote>



<p>I have some C++ code here:</p>

<pre><code>class demo 
{
private:
    unsigned char len, *dat;

public:
    demo(unsigned char le = 5, unsigned char default) : len(le) 
    { 
        dat = new char[len];                                      
        for (int i = 0; i &lt;= le; i++)                             
            dat[i] = default;
    }

    void ~demo(void) 
    {                                            
        delete [] *dat;                                           
    }
};

class newdemo : public demo 
{
private:
    int *dat1;

public:
    newdemo(void) : demo(0, 0)
    {
     *dat1 = 0;                                                   
     return 0;                                                    
    }
};
</code></pre>

<p>My question is, what are the <code>: len(le)</code> and <code>: demo(0, 0)</code> called? </p>

<p>Is it something to do with inheritance?</p>
","<p>As others have said, it's an initialisation list. You can use it for two things:</p>

<ol>
<li>Calling base class constructors</li>
<li>Initialising member variables before the body of the constructor executes.</li>
</ol>

<p>For case #1, I assume you understand inheritance (if that's not the case, let me know in the comments). So you are simply calling the constructor of your base class.</p>

<p>For case #2, the question may be asked: ""Why not just initialise it in the body of the constructor?"" The importance of the initialisation lists is particularly evident for <code>const</code> members. For instance, take a look at this situation, where I want to initialise <code>m_val</code> based on the constructor parameter:</p>

<pre><code>class Demo
{
    Demo(int&amp; val) 
     {
         m_val = val;
     }
private:
    const int&amp; m_val;
};
</code></pre>

<p>By the C++ specification, this is illegal. We cannot change the value of a <code>const</code> variable in the constructor, because it is marked as const. So you can use the initialisation list:</p>

<pre><code>class Demo
{
    Demo(int&amp; val) : m_val(val)
     {
     }
private:
    const int&amp; m_val;
};
</code></pre>

<p>That is the only time that you can change a const member variable. And as Michael noted in the comments section, it is also the only way to initialise a reference that is a class member.</p>

<p>Outside of using it to initialise <code>const</code> member variables, it seems to have been generally accepted as ""the way"" of initialising variables, so it's clear to other programmers reading your code.</p>
","2785639"
"Can we have functions inside functions?","103668","","<p>I mean something like:</p>

<pre><code>int main() {
  void a() {
    // code
  }
  a();
}
</code></pre>
","<p>No, C++ doesn't support that. </p>

<p><em>Edit: This answer is old. Meanwhile, C++11 has lambdas which can achieve a similar result – see answers below.</em></p>

<p>That said, you can have local classes, and they can have functions (non-<code>static</code> or <code>static</code>), so you can get this to some extend, albeit it's a bit of a kludge: </p>

<pre><code>int main() // it's int, dammit!
{
  struct X { // struct's as good as class
    static void a()
    {
    }
  };

  X::a();

  return 0;
}
</code></pre>

<p>However, I'd question the praxis. Everyone knows (well, now that you do, anyway <code>:)</code>) C++ doesn't support local functions, so they are used to not having them. They are not used, however, to that kludge. I would spend quite a while on this code to make sure it's really only there to allow local functions. Not good. </p>
","4324780"
"Is 'bool' a basic datatype in C++?","103604","","<p>I got this doubt while writing some code. Is 'bool' a basic datatype defined in the C++ standard or is it some sort of extension provided by the compiler ? I got this doubt because Win32 has 'BOOL' which is nothing but a typedef of long. Also what happens if I do something like this:</p>

<pre><code>int i = true;
</code></pre>

<p>Is it ""always"" guaranteed that variable i will have value 1 or is it again depends on the compiler I am using ? Further for some Win32 APIs which accept BOOL as the parameter what happens if I pass bool variable?</p>
","<p>bool is a fundamental datatype in C++. Converting <code>true</code> to an integer type will yield 1, and converting <code>false</code> will yield 0 (4.5/4 and 4.7/4). In C, until C99, there was no bool datatype, and people did stuff like</p>

<pre><code>enum bool {
    false, true
};
</code></pre>

<p>So did the Windows API. Starting with C99, we have <code>_Bool</code> as a basic data type. Including <code>stdbool.h</code> will <strike>typedef</strike> <code>#define</code> that to <code>bool</code> and provide the constants <code>true</code> and <code>false</code>. They didn't make bool a basic data-type (and thus a keyword) because of compatibility issues with existing code. </p>
","356728"
"I want to convert std::string into a const wchar_t *","103570","","<p>Is there any method?
My computer is AMD64.</p>

<pre><code>::std::string str;
BOOL loadU(const wchar_t* lpszPathName, int flag = 0);
</code></pre>

<p>When I used: </p>

<pre><code>loadU(&amp;str);
</code></pre>

<p>the VS2005 compiler says:</p>

<pre><code>Error 7 error C2664:: cannot convert parameter 1 from 'std::string *__w64 ' to 'const wchar_t *'
</code></pre>

<p>How can I do it?</p>
","<p>If you have a std::wstring object, you can call <code>c_str()</code> on it to get a <code>wchar_t*</code>:</p>

<pre><code>std::wstring name( L""Steve Nash"" );
const wchar_t* szName = name.c_str();
</code></pre>

<p>Since you are operating on a narrow string, however, you would first need to widen it.  There are various options here; one is to use Windows' built-in <a href=""http://msdn.microsoft.com/en-us/library/dd319072%28v=vs.85%29.aspx"" rel=""noreferrer""><code>MultiByteToWideChar</code></a> routine.  That will give you an <code>LPWSTR</code>, which is equivalent to <code>wchar_t*</code>.</p>
","246811"
"C++ Compare char array with string","103316","","<p>I'm trying to compare a character array against a string like so:</p>

<pre><code>const char *var1 = "" "";
var1 = getenv(""myEnvVar"");

if(var1 == ""dev"")
{
   // do stuff
}
</code></pre>

<p>This if statement never validates as true... when I output var1 it is ""dev"", I was thinking maybe it has something to do with a null terminated string, but the strlen of ""dev"" and var1 are equal... I also thought maybe var1 == ""dev"" was comparing ""dev"" against the memory location of var1 instead of the value. *var1 == ""dev"" results in an error.... tried many things, probably a simple solution for the saavy c++ developer (I havent coded c++ in a looong time).</p>

<p>edit:
we've tried</p>

<pre><code>if(strcmp(var1, ""dev"") == 0)
</code></pre>

<p>and </p>

<pre><code>if(strncmp(var1, ""dev"", 3) == 0)
</code></pre>

<p>Thanks</p>

<p>edit: After testing at home I'm just going to suggest my co-worker changes the datatype to a string. I believe he was comparing a char array of a large size against a string. I put together a program that outputs sizeof, strlen, etc to help us work through it. Thanks to everyone for the help.</p>
","<p>Use <a href=""http://linux.die.net/man/3/strcmp"" rel=""noreferrer""><code>strcmp()</code></a> to compare the contents of strings:</p>

<pre><code>if (strcmp(var1, ""dev"") == 0) {
}
</code></pre>

<p>Explanation: in C, a string is a pointer to a memory location which contains bytes. Comparing a <code>char*</code> to a <code>char*</code> using the equality operator won't work as expected, because you are comparing the <em>memory locations</em> of the strings rather than their byte contents. A function such as <code>strcmp()</code> will iterate through both strings, checking their bytes to see if they are equal. <code>strcmp()</code> will return 0 if they are equal, and a non-zero value if they differ. For more details, see the <a href=""http://linux.die.net/man/3/strcmp"" rel=""noreferrer"">manpage</a>.</p>
","1330559"
"C++ program converts fahrenheit to celsius","103203","","<p>Can someone help me understand why this gives an output of 0? </p>

<pre><code>#include &lt;iostream&gt;                        
using namespace std;                       

int main() {                               
    float celsius;                         
    float fahrenheit;

    cout &lt;&lt; ""Enter Celsius temperature: ""; 
    cin &gt;&gt; celsius;
    fahrenheit = (5/9) * (celsius + 32);
    cout &lt;&lt; ""Fahrenheit = "" &lt;&lt; fahrenheit &lt;&lt; endl;

    return 0;                             
}
</code></pre>
","<p><code>(5/9)</code> will by default be computed as an integer division and will be zero. Try <code>(5.0/9)</code></p>
","3217854"
"casting int to char using C++ style casting","103130","","<p>In traditional C you can do:</p>

<pre><code>int i = 48;
char c = (char)i;
//Now c holds the value of 48. 
//(Of course if i &gt; 255 then c will not hold the same value as i).  
</code></pre>

<p>Which of the c++ casting methods (static_cast, reinterpret_cast) is suited for getting this job done?</p>
","<p>You can implicitly convert between numerical types, even when that loses precision:</p>

<pre><code>char c = i;
</code></pre>

<p>However, you might like to enable compiler warnings to avoid potentially lossy conversions like this. If you do, then use <code>static_cast</code> for the conversion.</p>

<p>Of the other casts:</p>

<ul>
<li><code>dynamic_cast</code> only works for pointers or references to polymorphic class types;</li>
<li><code>const_cast</code> can't change types, only <code>const</code> or <code>volatile</code> qualifiers;</li>
<li><code>reinterpret_cast</code> is for special circumstances, converting between pointers or references and completely unrelated types. Specifically, it won't do numeric conversions.</li>
<li>C-style and function-style casts do whatever combination of <code>static_cast</code>, <code>const_cast</code> and <code>reinterpret_cast</code> is needed to get the job done.</li>
</ul>
","16899648"
"General guidelines to avoid memory leaks in C++","102743","","<p>What are some general tips to make sure I don't leak memory in C++ programs? How do I figure out who should free memory that has been dynamically allocated?</p>
","<p>Instead of managing memory manually, try to use smart pointers where applicable.<br />
Take a look at the <a href=""http://www.boost.org/"" rel=""noreferrer"">Boost lib</a>, <a href=""http://en.wikipedia.org/wiki/Technical_Report_1"" rel=""noreferrer"">TR1</a>, and <a href=""http://www.boost.org/doc/libs/1_36_0/libs/smart_ptr/smart_ptr.htm"" rel=""noreferrer"">smart pointers</a>.<br />
Also smart pointers are now a part of C++ standard called <a href=""http://en.wikipedia.org/wiki/Smart_pointer"" rel=""noreferrer"">C++11</a>.<br /></p>
","76844"
"In C++ check if std::vector<string> contains a certain value","102577","","<p>Is there any built in function which tells me that my vector contains a certain element or not
e.g.</p>

<pre><code>std::vector&lt;string&gt; v;
v.push_back(""abc"");
v.push_back(""xyz"");

if (v.contains(""abc"")) // I am looking for one such feature, is there any
                       // such function or i need to loop through whole vector?
</code></pre>
","<p>You can use <a href=""http://en.cppreference.com/w/cpp/algorithm/find"" rel=""noreferrer""><code>std::find</code></a> as follows:</p>

<pre><code>if (std::find(v.begin(), v.end(), ""abc"") != v.end())
{
  // Element in vector.
}
</code></pre>

<p>To be able to use <code>std::find</code>: <code>include &lt;algorithm&gt;</code>.</p>
","6277674"
"Where and why do I have to put the ""template"" and ""typename"" keywords?","102480","","<p>In templates, where and why do I have to put <code>typename</code> and <code>template</code> on dependent names? What exactly are dependent names anyway? I have the following code:</p>

<pre><code>template &lt;typename T, typename Tail&gt; // Tail will be a UnionNode too.
struct UnionNode : public Tail {
    // ...
    template&lt;typename U&gt; struct inUnion {
        // Q: where to add typename/template here?
        typedef Tail::inUnion&lt;U&gt; dummy; 
    };
    template&lt; &gt; struct inUnion&lt;T&gt; {
    };
};
template &lt;typename T&gt; // For the last node Tn.
struct UnionNode&lt;T, void&gt; {
    // ...
    template&lt;typename U&gt; struct inUnion {
        char fail[ -2 + (sizeof(U)%2) ]; // Cannot be instantiated for any U
    };
    template&lt; &gt; struct inUnion&lt;T&gt; {
    };
};
</code></pre>

<p>The problem I have is in the <code>typedef Tail::inUnion&lt;U&gt; dummy</code> line. I'm fairly certain that <code>inUnion</code> is a dependent name, and VC++ is quite right in choking on it. I also know that I should be able to add <code>template</code> somewhere to tell the compiler that inUnion is a template-id. But where exactly? And should it then assume that inUnion is a class template, i.e. <code>inUnion&lt;U&gt;</code> names a type and not a function?</p>
","<p>In order to parse a C++ program, the compiler needs to know whether certain names are types or not. The following example demonstrates that:</p>

<pre><code>t * f;
</code></pre>

<p>How should this be parsed? For many languages a compiler doesn't need to know the meaning of a name in order to parse and basically know what action a line of code does. In C++, the above however can yield vastly different interpretations depending on what <code>t</code> means. If it's a type, then it will be a declaration of a pointer <code>f</code>. However if it's not a type, it will be a multiplication. So the C++ Standard says at paragraph (3/7):</p>

<blockquote>
  <p>Some names denote types or templates. In general, whenever a name is encountered it is necessary to determine whether that name denotes one of these entities before continuing to parse the program that contains it. The process that determines this is called name lookup.</p>
</blockquote>

<p>How will the compiler find out what a name <code>t::x</code> refers to, if <code>t</code> refers to a template type parameter? <code>x</code> could be a static int data member that could be multiplied or could equally well be a nested class or typedef that could yield to a declaration. If a name has this property - that it can't be looked up until the actual template arguments are known - then it's called a <em>dependent name</em> (it ""depends"" on the template parameters). </p>

<p>You might recommend to just wait till the user instantiates the template: </p>

<blockquote>
  <p><em>Let's wait until the user instantiates the template, and then later find out the real meaning of <code>t::x * f;</code>.</em> </p>
</blockquote>

<p>This will work and actually is allowed by the Standard as a possible implementation approach. These compilers basically copy the template's text into an internal buffer, and only when an instantiation is needed, they parse the template and possibly detect errors in the definition. But instead of bothering the template's users (poor colleagues!) with errors made by a template's author, other implementations choose to check templates early on and give errors in the definition as soon as possible, before an instantiation even takes place. </p>

<p>So there has to be a way to tell the compiler that certain names are types and that certain names aren't. </p>

<h2>The ""typename"" keyword</h2>

<p>The answer is: <em>We</em> decide how the compiler should parse this. If <code>t::x</code> is a dependent name, then we need to prefix it by <code>typename</code> to tell the compiler to parse it in a certain way. The Standard says at (14.6/2):</p>

<blockquote>
  <p>A name used in a template declaration or definition and that is dependent on a template-parameter is
  assumed not to name a type unless the applicable name lookup finds a type name or the name is qualified
  by the keyword typename. </p>
</blockquote>

<p>There are many names for which <code>typename</code> is not necessary, because the compiler can, with the applicable name lookup in the template definition, figure out how to parse a construct itself - for example with <code>T *f;</code>, when <code>T</code> is a type template parameter. But for <code>t::x * f;</code> to be a declaration, it must be written as <code>typename t::x *f;</code>. If you omit the keyword and the name is taken to be a non-type, but when instantiation finds it denotes a type, the usual error messages are emitted by the compiler. Sometimes, the error consequently is given at definition time:</p>

<pre><code>// t::x is taken as non-type, but as an expression the following misses an
// operator between the two names or a semicolon separating them.
t::x f;
</code></pre>

<p><em>The syntax allows <code>typename</code> only before qualified names</em> - it is therefor taken as granted that unqualified names are always known to refer to types if they do so.</p>

<p>A similar gotcha exists for names that denote templates, as hinted at by the introductory text.</p>

<h2>The ""template"" keyword</h2>

<p>Remember the initial quote above and how the Standard requires special handling for templates as well? Let's take the following innocent-looking example: </p>

<pre><code>boost::function&lt; int() &gt; f;
</code></pre>

<p>It might look obvious to a human reader. Not so for the compiler. Imagine the following arbitrary definition of <code>boost::function</code> and <code>f</code>:</p>

<pre><code>namespace boost { int function = 0; }
int main() { 
  int f = 0;
  boost::function&lt; int() &gt; f; 
}
</code></pre>

<p>That's actually a valid <em>expression</em>! It uses the less-than operator to compare <code>boost::function</code> against zero (<code>int()</code>), and then uses the greater-than operator to compare the resulting <code>bool</code> against <code>f</code>. However as you might well know, <code>boost::function</code> <a href=""http://www.boost.org/doc/libs/1_54_0/doc/html/function.html"" rel=""noreferrer"">in real life</a> is a template, so the compiler knows (14.2/3):</p>

<blockquote>
  <p>After name lookup (3.4) finds that a name is a template-name, if this name is followed by a &lt;, the &lt; is
  always taken as the beginning of a template-argument-list and never as a name followed by the less-than
  operator.</p>
</blockquote>

<p>Now we are back to the same problem as with <code>typename</code>. What if we can't know yet whether the name is a template when parsing the code? We will need to insert <code>template</code> immediately before the template name, as specified by <code>14.2/4</code>. This looks like:</p>

<pre><code>t::template f&lt;int&gt;(); // call a function template
</code></pre>

<p>Template names can not only occur after a <code>::</code> but also after a <code>-&gt;</code> or <code>.</code> in a class member access. You need to insert the keyword there too:</p>

<pre><code>this-&gt;template f&lt;int&gt;(); // call a function template
</code></pre>

<hr>

<h2>Dependencies</h2>

<p>For the people that have thick Standardese books on their shelf and that want to know what exactly I was talking about, I'll talk a bit about how this is specified in the Standard.</p>

<p>In template declarations some constructs have different meanings depending on what template arguments you use to instantiate the template: Expressions may have different types or values, variables may have different types or function calls might end up calling different functions. Such constructs are generally said to <em>depend</em> on template parameters.</p>

<p>The Standard defines precisely the rules by whether a construct is dependent or not. It separates them into logically different groups: One catches types, another catches expressions. Expressions may depend by their value and/or their type. So we have, with typical examples appended:</p>

<ul>
<li>Dependent types (e.g: a type template parameter <code>T</code>)</li>
<li>Value-dependent expressions (e.g: a non-type template parameter <code>N</code>)</li>
<li>Type-dependent expressions (e.g: a cast to a type template parameter <code>(T)0</code>)</li>
</ul>

<p>Most of the rules are intuitive and are built up recursively: For example, a type constructed as <code>T[N]</code> is a dependent type if <code>N</code> is a value-dependent expression or <code>T</code> is a dependent type. The details of this can be read in section <code>(14.6.2/1</code>) for dependent types, <code>(14.6.2.2)</code> for type-dependent expressions and <code>(14.6.2.3)</code> for value-dependent expressions. </p>

<h3>Dependent names</h3>

<p>The Standard is a bit unclear about what <em>exactly</em> is a <em>dependent name</em>. On a simple read (you know, the principle of least surprise), all it defines as a <em>dependent name</em> is the special case for function names below. But since clearly <code>T::x</code> also needs to be looked up in the instantiation context, it also needs to be a dependent name (fortunately, as of mid C++14 the committee has started to look into how to fix this confusing definition). </p>

<p>To avoid this problem, I have resorted to a simple interpretation of the Standard text. Of all the constructs that denote dependent types or expressions, a subset of them represent names. Those names are therefore ""dependent names"". A name can take different forms - the Standard says:</p>

<blockquote>
  <p>A name is a use of an identifier (2.11), operator-function-id (13.5), conversion-function-id (12.3.2), or template-id (14.2) that denotes an entity or label (6.6.4, 6.1)</p>
</blockquote>

<p>An identifier is just a plain sequence of characters / digits, while the next two are the <code>operator +</code> and <code>operator type</code> form. The last form is <code>template-name &lt;argument list&gt;</code>. All these are names, and by conventional use in the Standard, a name can also include qualifiers that say what namespace or class a name should be looked up in.</p>

<p>A value dependent expression <code>1 + N</code> is not a name, but <code>N</code> is. The subset of all dependent constructs that are names is called <em>dependent name</em>. Function names, however, may have different meaning in different instantiations of a template, but unfortunately are not caught by this general rule. </p>

<h3>Dependent function names</h3>

<p>Not primarily a concern of this article, but still worth mentioning: Function names are an exception that are handled separately. An identifier function name is dependent not by itself, but by the type dependent argument expressions used in a call. In the example <code>f((T)0)</code>, <code>f</code> is a dependent name. In the Standard, this is specified at <code>(14.6.2/1)</code>.</p>

<h2>Additional notes and examples</h2>

<p>In enough cases we need both of <code>typename</code> and <code>template</code>. Your code should look like the following</p>

<pre><code>template &lt;typename T, typename Tail&gt;
struct UnionNode : public Tail {
    // ...
    template&lt;typename U&gt; struct inUnion {
        typedef typename Tail::template inUnion&lt;U&gt; dummy;
    };
    // ...
};
</code></pre>

<p>The keyword <code>template</code> doesn't always have to appear in the last part of a name. It can appear in the middle before a class name that's used as a scope, like in the following example</p>

<pre><code>typename t::template iterator&lt;int&gt;::value_type v;
</code></pre>

<p>In some cases, the keywords are forbidden, as detailed below</p>

<ul>
<li><p>On the name of a dependent base class you are not allowed to write <code>typename</code>. It's assumed that the name given is a class type name. This is true for both names in the base-class list and the constructor initializer list:</p>

<pre><code> template &lt;typename T&gt;
 struct derive_from_Has_type : /* typename */ SomeBase&lt;T&gt;::type 
 { };
</code></pre></li>
<li><p>In using-declarations it's not possible to use <code>template</code> after the last <code>::</code>, and the C++ committee <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_closed.html#109"" rel=""noreferrer"">said</a> not to work on a solution. </p>

<pre><code> template &lt;typename T&gt;
 struct derive_from_Has_type : SomeBase&lt;T&gt; {
    using SomeBase&lt;T&gt;::template type; // error
    using typename SomeBase&lt;T&gt;::type; // typename *is* allowed
 };
</code></pre></li>
</ul>
","613132"
"What is a simple C or C++ TCP server and client example?","102361","","<p>I need to quickly implement a very small C or C++ TCP server/client solution. This is simply to transfer literally an array of bytes from one computer to another - doesn't need to be scalable / over-complicated. The simpler the better. Quick and dirty if you can.</p>

<p>I tried to use the code from this tutorial, but I couldn't get it to build using g++ in Linux: <a href=""http://www.linuxhowtos.org/C_C++/socket.htm"" rel=""noreferrer"">http://www.linuxhowtos.org/C_C++/socket.htm</a></p>

<p>If possible, I'd like to avoid 3rd party libraries, as the system I'm running this on is quite restricted. This must be C or C++ as the existing application is already implemented.</p>

<p>Thanks to <strong>emg-2</strong>'s answer, I managed to make the above mentioned code sample compatible with C++ using the following steps:</p>

<p>Add these headers to both client and server:</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;unistd.h&gt;
</code></pre>

<p>In <a href=""http://www.linuxhowtos.org/data/6/server.c"" rel=""noreferrer"">server.c</a>, change the type of clilen to socklen_t.</p>

<pre><code>int sockfd, newsockfd, portno/*, clilen*/;
socklen_t clilen;
</code></pre>

<p>In <a href=""http://www.linuxhowtos.org/data/6/client.c"" rel=""noreferrer"">client.c</a>, change the following line:</p>

<pre><code>if (connect(sockfd,&amp;serv_addr,sizeof(serv_addr)) &lt; 0) { ... }
</code></pre>

<p>To:</p>

<pre><code>if (connect(sockfd,(const sockaddr*)&amp;serv_addr,sizeof(serv_addr)) &lt; 0)
</code></pre>
","<p>I've used <a href=""http://beej.us/guide/bgnet/html/multi/index.html"" rel=""nofollow noreferrer"">Beej's Guide to Network Programming</a> in the past.  It's in C, not C++, but the examples are good.  Go directly to <a href=""http://beej.us/guide/bgnet/html/multi/clientserver.html"" rel=""nofollow noreferrer"">section 6</a> for the simple client and server example programs.</p>
","662356"
"C++ Error 'nullptr was not declared in this scope' in Eclipse IDE","102331","","<p>I am running Eclipse Helios and I have g++-4.6 installed. Hope I am not wrong that g++4.6 implements C++ 11 features. I have created a C++ project which uses the nullptr and auto keywords. The build gives the following errors:-</p>

<pre><code>../{filename}.cpp:13:13: error: ‘nullptr’ was not declared in this scope

../{filename}.cpp:14:2: warning: ‘auto’ will change meaning in C++0x; please remove it [-Wc++0x-compat]
</code></pre>

<p>Actually it was building fine until yesterday. I am getting these from nowhere today. Please help me solve this problem.</p>
","<p>Finally found out what to do. Added the -std=c++0x compiler argument under Project Properties -> C/C++ Build -> Settings -> GCC C++ Compiler -> Miscellaneous. It works now!</p>

<p>But how to add this flag by default for all C++ projects? Anybody?</p>
","10042670"
"How do I make a C++ console program exit?","102152","","<p>Is there a line of code that will terminate the program? </p>

<p>Something like python's <code>sys.exit()</code>?</p>
","<pre><code>#include &lt;cstdlib&gt;
...
exit( exit_code );
</code></pre>
","4038308"
"C++ delete vector, objects, free memory","102032","","<p>I am totally confused with regards to deleting of things in C++
If I declare an array of objects and if I use the <code>clear()</code> function. Can I be sure that the memory was released?</p>

<p>For example : </p>

<pre><code>tempObject obj1;
tempObject obj2;
vector&lt;tempObject&gt; tempVector;

tempVector.pushback(obj1);
tempVector.pushback(obj2);
</code></pre>

<p>Can I safely call clear to free up all the memory? Or do I need to iterate through to delete one by one?</p>

<pre><code>tempVector.clear();
</code></pre>

<p>If this scenario is changed to a pointer of objects, will the answer be the same as above?</p>

<pre><code>vector&lt;tempObject&gt; *tempVector;
//push objects....
tempVector-&gt;clear();
</code></pre>
","<p>You can call clear, and that will destroy all the objects, but that will not free the memory.  Looping through the individual elements will not help either (what action would you even propose to take on the objects?)  What you can do is this:</p>

<pre><code>vector&lt;tempObject&gt;().swap(tempVector);
</code></pre>

<p>That will create an empty vector with no memory allocated and swap it with tempVector, effectively deallocating the memory.</p>

<p>C++11 also has the function <code>shrink_to_fit</code>, which you could call after the call to clear(), and it would theoretically shrink the capacity to fit the size (which is now 0).  This is however, a non-binding request, and your implementation is free to ignore it.</p>
","10465032"
"Undefined reference to static class member","101995","","<p>Can anyone explain why following code won't compile? At least on g++ 4.2.4.</p>

<p>And more interesting, why it will compile when I cast MEMBER to int?</p>

<pre><code>#include &lt;vector&gt;

class Foo {  
public:  
    static const int MEMBER = 1;  
};

int main(){  
    vector&lt;int&gt; v;  
    v.push_back( Foo::MEMBER );       // undefined reference to `Foo::MEMBER'
    v.push_back( (int) Foo::MEMBER ); // OK  
    return 0;
}
</code></pre>
","<p>You need to actually define the static member somewhere (after the class definition).  Try this:</p>

<pre><code>class Foo { /* ... */ };

const int Foo::MEMBER;

int main() { /* ... */ }
</code></pre>

<p>That should get rid of the undefined reference.</p>
","272965"
"Yes/No message box using QMessageBox","101717","","<p>How do I show a message box with Yes/No buttons in Qt, and how do I check which of them was pressed?</p>

<p>I.e. a message box that looks like this:</p>

<p><img src=""https://i.stack.imgur.com/h92PA.png"" alt=""enter image description here""></p>
","<p>You would use <a href=""http://qt-project.org/doc/qt-5.0/qtwidgets/qmessagebox.html#question""><code>QMessageBox::question</code></a> for that.</p>

<p>Example in a hypothetical widget's slot:</p>

<pre><code>#include &lt;QApplication&gt;
#include &lt;QMessageBox&gt;
#include &lt;QDebug&gt;

// ...

void MyWidget::someSlot() {
  QMessageBox::StandardButton reply;
  reply = QMessageBox::question(this, ""Test"", ""Quit?"",
                                QMessageBox::Yes|QMessageBox::No);
  if (reply == QMessageBox::Yes) {
    qDebug() &lt;&lt; ""Yes was clicked"";
    QApplication::quit();
  } else {
    qDebug() &lt;&lt; ""Yes was *not* clicked"";
  }
}
</code></pre>

<p><sub>Should work on Qt 4 and 5, requires <code>QT += widgets</code> on Qt 5, and <code>CONFIG += console</code> on Win32 to see <code>qDebug()</code> output.</sub></p>

<p>See the <a href=""http://qt-project.org/doc/qt-5.0/qtwidgets/qmessagebox.html#StandardButton-enum""><code>StandardButton</code></a> enum to get a list of buttons you can use; the function returns the button that was clicked. You can set a default button with an extra argument (Qt ""<em>chooses a suitable default automatically</em>"" if you don't or specify <code>QMessageBox::NoButton</code>).</p>
","13111762"
"How do I sort a vector of pairs based on the second element of the pair?","101615","","<p>If I have a vector of pairs:</p>

<pre><code>std::vector&lt;std::pair&lt;int, int&gt; &gt; vec;
</code></pre>

<p>Is there and easy way to sort the list in increasing order based on the second element of the pair?</p>

<p>I know I can write a little function object that will do the work, but is there a way to use existing parts of the <em>STL</em> and <code>std::less</code> to do the work directly?</p>

<p>EDIT:  I understand that I can write a separate function or class to pass to the third argument to sort.  The question is whether or not I can build it out of standard stuff.  I'd really something that looks like:</p>

<pre><code>std::sort(vec.begin(), vec.end(), std::something_magic&lt;int, int, std::less&gt;());
</code></pre>
","<p>You can use boost like this:</p>

<pre><code>std::sort(a.begin(), a.end(), 
          boost::bind(&amp;std::pair&lt;int, int&gt;::second, _1) &lt;
          boost::bind(&amp;std::pair&lt;int, int&gt;::second, _2));
</code></pre>

<p>I don't know a standard way to do this equally short and concise, but you can grab <code>boost::bind</code> it's all consisting of headers.</p>
","280128"
"How to write to the Output window in Visual Studio?","101539","","<p>Which function should I use to output text to the ""Output"" window in Visual Studio?</p>

<p>I tried <code>printf()</code> but it doesn't show up.</p>
","<p><a href=""http://msdn.microsoft.com/en-us/library/aa363362%28VS.85%29.aspx"" rel=""noreferrer"">OutputDebugString</a> function will do it.</p>

<p>example code</p>

<pre><code>    void CClass::Output(const char* szFormat, ...)
{
    char szBuff[1024];
    va_list arg;
    va_start(arg, szFormat);
    _vsnprintf(szBuff, sizeof(szBuff), szFormat, arg);
    va_end(arg);

    OutputDebugString(szBuff);
}
</code></pre>
","1149622"
"How do you disable the unused variable warnings coming out of gcc?","101445","","<p>I'd like to know what switch you pass to the gcc compiler to turn off unused variable warnings?  I'm getting errors out of boost on windows and I do not want to touch the boost code:</p>

<pre><code>C:\boost_1_52_0/boost/system/error_code.hpp: At global scope:
C:\boost_1_52_0/boost/system/error_code.hpp:214:36: error: 'boost::system::posix_category' defined but not used [-Werror=unused-variable]
C:\boost_1_52_0/boost/system/error_code.hpp:215:36: error: 'boost::system::errno_ecat' defined but not used [-Werror=unused-variable]
C:\boost_1_52_0/boost/system/error_code.hpp:216:36: error: 'boost::system::native_ecat' defined but not used [-Werror=unused-variable]
</code></pre>

<p>I tried using both <code>-Wunused-value</code> and <code>-Wno-unused-value</code> but neither suppressed the messages above.</p>

<p>What is the right command, here is my compile line:</p>

<pre><code>g++  -g -fno-inline -Wall -Werror -Wextra -Wfloat-equal -Wshadow
-Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wno-conversion 
-Wdisabled-optimization -Wredundant-decls -Wunused-value -Wno-deprecated 
-IC:\\boost_1_52_0 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 
-c -o op.o op.cpp
</code></pre>

<p>Perhaps the <code>-Wall</code> overrides my goal?</p>
","<p>The <code>-Wno-unused-variable</code> switch usually does the trick. However, that is a very useful warning indeed if you care about these things in your project. It becomes annoying when GCC starts to warn you about things not in your code though.</p>

<p>I would recommend you keeping the warning on, but use <code>-isystem</code> instead of <code>-I</code> for include directories of third-party projects. That flag tells GCC not to warn you about the stuff you have no control over.</p>

<p>For example, instead of <code>-IC:\\boost_1_52_0</code>, say <code>-isystem C:\\boost_1_52_0</code>.</p>

<p>Hope it helps. Good Luck!</p>
","15053852"
"Using C++ filestreams (fstream), how can you determine the size of a file?","101402","","<p>I'm sure I've just missed this in the manual, but how do you determine the size of a file (in bytes) using C++'s <code>istream</code> class from the <code>fstream</code> header?</p>
","<p>You can open the file using the <code>ios::ate</code> flag (and <code>ios::binary</code> flag), so the <code>tellg()</code> function will give you directly the file size:</p>

<pre><code>ifstream file( ""example.txt"", ios::binary | ios::ate);
return file.tellg();
</code></pre>
","13394183"
"Cannot open include file 'afxres.h' in VC2010 Express","101373","","<p>I'm trying to compile an old project using VS express 2010 but I get this error:</p>

<blockquote>
  <p>fatal error RC1015: cannot open include file 'afxres.h'. from this code</p>
</blockquote>

<pre><code>/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 2 resource.
//
#include ""afxres.h""
</code></pre>

<p>I have installed Windows SDK already, but without any success.</p>

<p>thanks!</p>
","<p>This header is a part of the MFC Library. VS Express edition doesn't contain MFC. If your project doesn't use MFC you can safely replace <code>afxres.h</code> with <code>windows.h</code> in your <code>terrain2.rc</code>.</p>
","3566074"
"CMake output/build directory","101337","","<p>I'm pretty new to cmake, and read a few tutorials on how to use it, and wrote some complicated 50 lines CMake script in order to make a program for 3 different compilers. This probably concludes all my knowledge in cmake.</p>

<p>Now my problem is that I have some source code, whose folder I don't want to touch/mess when I make the program. I want that all cmake and make output files and folders to go into ../Compile/, so I changed a few variables in my cmake script for that, and it worked for sometime when I did something like this on my laptop:</p>

<pre><code>Compile$ cmake ../src
Compile$ make
</code></pre>

<p>Where with that I had a clean output in the folder I'm in right now, which is exactly what I'm looking for.</p>

<p>Now I moved to another computer, and recompiled CMake 2.8.11.2, and I'm almost back to square one! It always compiles the thing into the src folder where my CMakeLists.txt is located.</p>

<p>The part where I choose the directory in my cmake script is this:</p>

<pre><code>set(dir ${CMAKE_CURRENT_SOURCE_DIR}/../Compile/)
set(EXECUTABLE_OUTPUT_PATH ${dir} CACHE PATH ""Build directory"" FORCE)
set(LIBRARY_OUTPUT_PATH ${dir} CACHE PATH ""Build directory"" FORCE)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${dir})
set(CMAKE_BUILD_FILES_DIRECTORY ${dir})
set(CMAKE_BUILD_DIRECTORY ${dir})
set(CMAKE_BINARY_DIR  ${dir})
SET(EXECUTABLE_OUTPUT_PATH ${dir})
SET(LIBRARY_OUTPUT_PATH ${dir}lib)
SET(CMAKE_CACHEFILE_DIR ${dir})
</code></pre>

<p>And now it always ends with:</p>

<pre><code>-- Build files have been written to: /.../src
</code></pre>

<p>Am I missing something?</p>
","<p><em>(Turning my comments into an answer)</em></p>

<p>There's little need to set all the variables you're setting. CMake sets them to reasonable defaults. You should definitely <em>not</em> modify <code>CMAKE_BINARY_DIR</code> or <code>CMAKE_CACHEFILE_DIR</code>. Treat these as read-only.</p>

<p>Simply remove all the <code>set()</code> commands and do:</p>

<pre><code>cd Compile
rm -rf *
cmake ../src
</code></pre>

<p>As long as you're outside of the source directory when running CMake, it will not modify the source directory unless your CMakeList explicitly tells it to.</p>

<p>Once you have this working, you can look at where CMake puts things by default, and only if you're not satisfied with the default locations (such as the default value of <code>EXECUTABLE_OUTPUT_PATH</code>), modify only those you need. And try to express them relative to <code>CMAKE_BINARY_DIR</code>, <code>CMAKE_CURRENT_BINARY_DIR</code>, <code>PROJECT_BINARY_DIR</code> etc.</p>

<p>If you look at CMake documentation, you'll see variables partitioned into semantic sections. Except for <em>very</em> special circumstances, you should treat all those listed under ""Variables that Provide Information"" as read-only inside CMakeLists.</p>
","18827510"
"Is it possible to serialize and deserialize a class in C++?","101230","","<p>Is it possible to serialize and deserialize a class in C++?</p>

<p>I've been using Java for 3 years now, and serialization / deserialization is fairly trivial in that language. Does C++ have similar features? Are there native libraries that handle serialization?</p>

<p>An example would be helpful.</p>
","<p>The <a href=""http://www.boost.org/doc/libs/1_36_0/libs/serialization/doc/index.html"" rel=""nofollow noreferrer""><code>Boost::serialization</code></a> library handles this rather elegantly. I've used it in several projects. There's an example program, showing how to use it, <a href=""http://www.boost.org/doc/libs/1_36_0/libs/serialization/example/demo.cpp"" rel=""nofollow noreferrer"">here</a>.</p>

<p>The only native way to do it is to use streams. That's essentially all the <code>Boost::serialization</code> library does, it extends the stream method by setting up a framework to write objects to a text-like format and read them from the same format. </p>

<p>For built-in types, or your own types with <code>operator&lt;&lt;</code> and <code>operator&gt;&gt;</code> properly defined, that's fairly simple; see <a href=""http://www.parashift.com/c++-faq-lite/serialization.html#faq-36.5"" rel=""nofollow noreferrer"">the C++ FAQ Lite</a> for more information.</p>
","234740"
"/usr/bin/ld: cannot find","101174","","<p>I created a <code>.so</code> file and put it in the location <code>/opt/lib</code> and added this path to <code>LD_LIBRARY_PATH</code> now after this when I try to compile my main program with the following command:</p>

<pre><code>g++ -Wall -I/home/alwin/Development/Calculator/ main.cpp -lcalc -o calculator
</code></pre>

<p>I get the following error:</p>

<pre><code>/usr/bin/ld: cannot find -lcalc
collect2: ld returned 1 exit status
</code></pre>

<p>Can someone help me with this. This is the first time I am trying to create a shared library.
I created the shared library using the code blocks IDE</p>
","<p>Add <code>-L/opt/lib</code> to your compiler parameters, this makes the compiler and linker search that path for <code>libcalc.so</code> in that folder.</p>
","5329671"
"undefined reference to boost::system::system_category() when compiling","101126","","<p>I'm trying to compile a program on Ubuntu 11.10 that uses the Boost libraries. I have the 1.46-dev Boost libraries from the Ubuntu Repository installed, but I get an error when compiling the program.</p>

<p><code>undefined reference to boost::system::system_category()</code></p>

<p>What is it that I do wrong?</p>
","<p>The boost library you are using depends on the boost_system library. (Not all of them do.)</p>

<p>Assuming you use gcc, try adding <code>-lboost_system</code> to your compiler command line in order to link against that library.</p>
","9724053"
"C++ Passing Pointer to Function (Howto) + C++ Pointer Manipulation","101061","","<p>I am a little confused as to how passing pointers works.</p>

<p>Let's say I have the following function and pointer, and... </p>

<p><strong>EDIT</strong>: </p>

<p>...I want to use a pointer to some object as an argument in the function.</p>

<p>i.e.:</p>

<pre><code>void Fun(int Pointer){
    int Fun_Ptr = ---Passed Pointer---; 
    //So that Fun_Ptr points to whatever ---Passed Pointer points to
</code></pre>

<p>Between the *Pointer and &amp;Pointer notations, I am very confused. I know that *Pointer means give whatever it points to.</p>

<p>Do I put void (int *pointer) in the declaration. What about when I use the function?</p>

<p>Your assistance is appreciated.</p>

<p><strong>EDIT 2:</strong></p>

<p>Okay, I now understand that using *variable in a declaration means that a pointer will be passed. However, what about when i use the function?</p>

<p>i.e.</p>

<pre><code>int main(){
    int foo;
    int *bar;
    bar = foo;
    Fun(bar);
}
</code></pre>

<p><strong>EDIT 3:</strong>
Okay, so correct me if I am wrong:</p>

<p>According to the conventions of the above code:</p>

<p>bar = &amp;foo means: Make bar point to foo in memory</p>

<p>*bar = foo means Change the value that bar points to to equal whatever foo equals</p>

<p>If I have a second pointer (int *oof), then:</p>

<p>bar = oof means: bar points to the oof pointer</p>

<p>bar = *oof means: bar points to the value that oof points to, but not to the oof pointer itself</p>

<p>*bar = *oof means: change the value that bar points to to the value that oof points to</p>

<p>&amp;bar = &amp;oof means: change the memory address that bar points to be the same as the memory address that oof points to</p>

<p>Do I have this right?</p>

<p>EDIT 4: Thanks so much for all your help (I wish I could accept more than 1 answer, but I have to go with the first one. I am not sure how a community wiki works exactly, but I will leave it this way for editing (feel free to turn it into a ref guide if you like).</p>
","<p>There is a difference in the * usage when you are defining a variable and when you are using it.</p>

<p>In declaration, </p>

<pre><code>int *myVariable;
</code></pre>

<p>Means a pointer to an integer data type. In usage however,</p>

<pre><code>*myVariable = 3;
</code></pre>

<p>Means deference the pointer and make the structure it is pointing at equal to three, rather then make the pointer equal to the memory address 0x 0003.</p>

<p>So in your function, you want to do this:</p>

<pre><code>void makePointerEqualSomething(int* pInteger)
{
    *pInteger = 7;
}
</code></pre>

<p>In the function declaration, * means you are passing a pointer, but in its actual code body * means you are accessing what the pointer is pointing at.</p>

<p>In an attempt to wave away any confusion you have, I'll briefly go into the ampersand (&amp;)</p>

<p>&amp; means get the address of something, its exact location in the computers memory, so</p>

<pre><code> int &amp; myVariable;
</code></pre>

<p>In a declaration means the address of an integer, or a pointer!</p>

<p>This however</p>

<pre><code>int someData;    
pInteger = &amp;someData;
</code></pre>

<p>Means make the pInteger pointer itself (remember, pointers are just memory addresses of what they point at) equal to the address of 'someData' - so now pInteger will point at some data, and can be used to access it when you deference it:</p>

<pre><code>*pInteger += 9000;
</code></pre>

<p>Does this make sense to you? Is there anything else that you find confusing?</p>

<p>@Edit3: </p>

<p>Nearly correct, except for three statements </p>

<pre><code>bar = *oof;
</code></pre>

<p>means that the bar pointer is equal to an integer, not what bar points at, which is invalid. </p>

<p><code>&amp;bar = &amp;oof;</code> </p>

<p>The ampersand is like a function, once it returns a memory address you cannot modify where it came from. Just like this code:</p>

<pre><code>returnThisInt(""72"") = 86; 
</code></pre>

<p>Is invalid, so is yours.</p>

<p>Finally,</p>

<pre><code>bar = oof
</code></pre>

<p>Does not mean that ""bar points to the oof pointer"" This means that bar points to the address that oof points to, so bar points to whatever foo is pointing at - not bar points to foo which points to oof. </p>
","3796196"
"Undefined reference to 'vtable for xxx'","101060","","<pre><code>takeaway.o: In function `takeaway':
project:145: undefined reference to `vtable for takeaway'
project:145: undefined reference to `vtable for takeaway'
takeaway.o: In function `~takeaway':
project:151: undefined reference to `vtable for takeaway'
project:151: undefined reference to `vtable for takeaway'
takeaway.o: In function `gameCore':
project.h:109: undefined reference to `gameCore&lt;int&gt;::initialData(int)'
collect2: ld returned 1 exit status
make: *** [takeaway] Error 1
</code></pre>

<p>I keep getting this Error from the linker , i know it has something to do with inline functions getting a vtable temporarily stored. But what that entails i am not quite sure. I would assume it has something to do with how i call gameCore's constructor in the initilization list of takeaway.cpp</p>

<p>I have a templated class (gameCore.h) 
and a class (takeaway.cpp) that is inheriting from gameCore
The vtable error is called 3 times
1)in takeaways constructor
2) takeaways destructor
3)in gameCores constructor</p>

<p>I am using G++
Here is the code:
(i know it may seem hard to read but i have marked off exatcly where the erros occur) 
takeaway.h</p>

<pre><code>#ifndef _TAKEAWAY_H_
#define _TAKEAWAY_H_
#include&lt;map&gt;
#include&lt;cctype&gt;
#include&lt;stack&gt;
#include&lt;map&gt;
#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;cstdlib&gt;
#include""gameCore.h""
#include&lt;vector&gt;
using namespace std;
class takeaway : public gameCore&lt;int&gt;
{
 private:

 public:
// template&lt;class Penny&gt;
 void  textualGame();
 bool isNum(string str);
// template&lt;class Penny&gt;
 stack&lt;int&gt; initialData(int initial);
// template&lt;class Position&gt;
 int score (int position);
// template&lt;class Position&gt;
 stack&lt;int&gt; addStack(int currentPos, stack&lt;int&gt; possiblePositions);
// template&lt;class Penny&gt;
 takeaway (int initial);
// template&lt;class Position&gt;
 ~takeaway();
};
bool isNum(string str);
int charToint(char *theChar);
#endif
</code></pre>

<p>takeaway.cpp</p>

<pre><code>/*
Description :
    This game communicates with the gameCore class to determine the results
    of a game of takeaway played between two computers or a computer and human.   
*/

#include ""takeaway.h""

 /*
 Description:Creates a stack represening initial data
 Note:Change to a vector eventually
 return : stack of int
 */
 stack&lt;int&gt; takeaway:: initialData(int initial){
   stack&lt;int&gt; returnStack;
   int theScore = score(initial);
   int final;
   if(initial ==0)
   {
    final = 1;
   }
   else
   {
    final = 0;
   }
   returnStack.push(theScore);
   returnStack.push(final);
   return returnStack;
 }


 /*
 Description: a textual representation of the game
 Note: This is still terribly wrong
 */

 void textualGame(){
  cout &lt;&lt;""this is the best i could do for a graphical representation"";

 }
 /*
 Description: Deetermines if a number is even
 Note: Helper function for determining win or loss positions
 Returns: 1 if it is and 0 if it is not
 */
 int takeaway::score(int position){
  if(position % 2 == 0)
  {
     return 1;
  }
  return 0;
 }
 /*
   Description: Will return a stack , withouth the given postion in it
   will contain all positions possible after the given position
   along with anyother that wehre in the given stack.This function
   Must also update the map to represent updated positions
   Takes: a position to check and a stack to return
   Returns: A stack of possible positions.

 */
 stack&lt;int&gt;  takeaway::addStack(int currentPos, stack&lt;int&gt; possiblePositions ){
  if(currentPos != 0)
  {
    // If even
    if( currentPos % 2 == 0)
    { 
       // Create a data aray with score of the new positon and mark it as not final
    int data[] = {score(currentPos/2),0};
    vector&lt;int&gt; theData(data, data+sizeof(data));
        int pos = currentPos/2;
       // Add it to the map
       //this -&gt; gamesMap[currentPos/2] = dataArray; 
       this -&gt; gamesMap.insert(std::pair&lt;int, vector&lt;int&gt; &gt;(pos, theData));
       // Add it to the possible positions
       possiblePositions.push(pos);
    }
    if(currentPos % 3 == 0)
    {

    int data[] = {score(currentPos/3),0};
       vector&lt;int&gt; theData(data,data+sizeof(data));
       int  pos = currentPos/3;
       //this -&gt; gamesMap[currentPos/3] = dataArray; 
       this -&gt; gamesMap.insert(std::pair&lt;int, vector&lt;int&gt; &gt;(pos, theData));
       possiblePositions.push(pos);
    }
    // Work for the position that represents taking one penny
    int minusFinal = 0;
    if(currentPos - 1 == 0)
    {
      minusFinal = 1;
    }
    int data[] = {score(currentPos - 1),minusFinal};
    vector&lt;int&gt; theData(data,data+sizeof(data));
    int pos  = currentPos - 1;
   // this -&gt; gamesMap[currentPos -1] = dataArary
    this-&gt;gamesMap.insert(std::pair&lt;int,vector&lt;int&gt; &gt;(pos, theData));
    possiblePositions.push(pos);
  }
  return possiblePositions;

 }
 /*
 Description: Constructor for the takeaway game
OA takes: a initial position, and initial data for it

 */
 takeaway::takeaway(int initial):gameCore&lt;int&gt;::gameCore(initial){ //&lt;--- ERROR HERE
 //Constructor
 }
 /*
 Description: Destuctor
 */
 takeaway::~takeaway(){ // &lt;--------------------- ERROR HERE
 //Destructor
 }


//checks input and creates game.
int main(int argc, char* argv[]){
  int numberPennies ;
  string game = argv[0];
  if(argc == 2 &amp;&amp; isNum(argv[1]) )
  {
    int pennies = charToint(argv[1]);
     takeaway gameInstance(pennies ); // Creates a instance of $
  }
 //  else if(argc == 3 &amp;&amp; argv[1] == ""play"" &amp;&amp; isNum(argv[2]) )
 // {
 //   int pennies = charToint(argv[2]);
 //   takeaway&lt;int&gt; gameInstance(pennies); // Craete a human playab$
 // }
  else
  {
    cerr &lt;&lt; ""Error-&gt;Usage: "" &lt;&lt; game &lt;&lt;"" [play] numberOfPennies \n"";
    exit (1);
  }
 return 0;
 }

//Converts a char to a integer
int charToint(char *theChar){
  int theInt = atoi(theChar);
  return theInt;
}
 //Determines if a string is numeric
bool isNum(string str){ 
  for(int i = 0;i &lt; str.length() ;i++){
   if(isdigit(str[i]) != 1)
   {
     cerr &lt;&lt; ""Error-&gt;Input: Number must be a Positive Integer the charecter '"" &lt;&lt; str[i]&lt;&lt; ""' invalidated your input. \n"" ;
     exit(1);
     return false;
   }
  }
  return true;
}
</code></pre>

<p>gameCore.h</p>

<pre><code>/*
gameCore.h

Description:
    This class created gameMap that are written as a template
    They will communicate with the specific game and the algorithm
    To keep track of positions ans there values.
*/
#ifndef GAMECORE_H
#define GAMECORE_H
#include &lt;map&gt;
#include &lt;stack&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;


template &lt;class Position&gt;
class gameCore
{
 protected:
    //Best Move used by algorithim
    Position bestMove;
    //The current highest score used by the algorithim
    int highestScore ;
    //Stack to be used to remmeber what move created the score
    stack&lt;Position&gt; movedFrom;
    //Stack used for the algorithim.
    stack&lt;Position&gt; curWorkingPos;
    //The actual Map that the data will be held in.
    map&lt;Position,vector&lt;int&gt; &gt; gamesMap;
 public:

    /*
    Description : finds the data array for a poisition
    takes: a Position
    Returns: a array of integers /**
    */
    virtual stack&lt;int&gt; initialData(Position pos) = 0;
        /*
    Description: Game must implement a way to determine a positions
    score.

    */
        virtual int score(Position pos) = 0;
        /*
    Description: A Graphical representation of the game

    */
    virtual void textualGame() = 0;

    /*
    Description: a virtual function implemented by the child class
    it will return a stack without the given position in it.This stack
    will contain all positions available from the given postion as well as 
    all position already in the given stack. Also it will update the map with
    all generated positions.
    TAkes: a postion to check and a stack of currently working positons.

    */
    virtual stack&lt;Position&gt; addStack(Position currentPos, stack&lt;Position&gt; possiblePositions ) = 0;
    /*
       Description:Constructor that
       Creates a Map with positions as the key.
       And an array of two integers that represent the positions
       value and if we have moved here in the past.
       Takes: a Initial Position and a Array of integers
    */
    gameCore(Position initial){              // &lt;-----ERROR HERE
       //Determine the initial data and add it to the map and queue.
       stack&lt;int&gt; theData = initialData(initial);
       int first = theData.top();
           theData.pop();
           int second = theData.top();
       theData.pop();
       int initialData[] = {first,second};
           vector&lt;int&gt; posData(initialData,initialData+sizeof(initialData));
       gamesMap[initial] = posData;
       curWorkingPos.push(initial);
    }
    /*
    Description:
       A destructor for the class
    */
     ~gameCore(){
        //I do nothing but , this class needs a destructor

    }
    /*
       Description: Takes the current position and returns 
       that positions Score.
       Takes: A position 
       Returns:A integer that is a positions score.

    */
    int getPosScore(Position thePos) const {
        return this -&gt;gamesMap.find(thePos)-&gt;second[0];
    }
    /*
    Description: Adds values to a stack based on the current position
    Takes: a poistion
    */
    void updateStack(Position curPos){
        this -&gt;curWorkingPos =addStack(curPos,this -&gt;curWorkingPos ); // get a stack from the game
        // The game has a function that takes a position and a stack and based on the positions returns a stack identical to the last but with added values that represent valid moves from the postion./
    }
    /*
       Description : Takes a positions and returns a integer
       that depends on if the position is a final pos or not
       Takes: A position
       Returns: A Bool that represents if the position is a final(1)  or not (0).

    */
        // Possible change
    bool isFinal(Position thePos) {     
        typename map&lt;Position,vector&lt;int&gt; &gt;::iterator iter =  this -&gt;gamesMap.find(thePos);
        return iter-&gt;second[1] == 1 ;
    }
    /*
    Description: Based on the given position determine if a move needs to be made.
    (if not this is a end game position and it will return itself) If a move needs
    to be made it will return the position to move to that is ideal.
    Note: (because all positions can be represented as integers for any game , the return
    type is a integer)

    */
    int evaluatePosition(Position possiblePosition ){
           if(isFinal(possiblePosition)) //If this is a final position
        {
           return  getPosScore(possiblePosition);  //Return the score 
        }
           else
           {
         updateStack(possiblePosition); //Put all possible positions from this in thte stack
         while(this -&gt; curWorkingPos.size() != 0)
         {
           this -&gt; movedFrom.push(this-&gt;curWorkingPos.front()); //take the top of the possible positions stack and set it the the moved from stack
           this -&gt; curWorkingPos.pop();
           int curScore =  evaluatePosition(this -&gt;movedFrom.top());  //Recursive call for school
           curScore = curScore * -1; //Negate the score
           if(curScore &gt; this -&gt; highestScore) // if the score resulting from this position is biggest seen
           {
             highestScore = curScore;
             this -&gt;movedFrom.pop();  //do this first to get rid of the the lowest point
             this -&gt; bestMove = this -&gt;movedFrom.top();  // mark where the lowest point came from
           }
          else
           {
             this -&gt; movedFrom.pop(); 
           }
         }
           }
        return this -&gt; bestMove;
    }
    //A Structure to determine if a position has a lower value than the second
    struct posCompare{
        bool operator() (Position pos1,Position pos2) const {
            return (pos1.getPosScore() &lt; pos2.getPosScore());
            }
        };
};
#endif
</code></pre>
","<p>The first set of errors, for the missing vtable, are caused because you do not implement <code>takeaway::textualGame()</code>; instead you implement a non-member function, <code>textualGame()</code>. I think that adding the missing <code>takeaway::</code> will fix that.</p>

<p>The cause of the last error is that you're calling a virtual function, <code>initialData()</code>, from the constructor of <code>gameCore</code>. At this stage, virtual functions are dispatched according to the type currently being constructed (<code>gameCore</code>), <em>not</em> the most derived class (<code>takeaway</code>). This particular function is pure virtual, and so calling it here gives undefined behaviour.</p>

<p>Two possible solutions:</p>

<ul>
<li>Move the initialisation code for <code>gameCore</code> out of the constructor and into a separate initialisation function, which must be called <em>after</em> the object is fully constructed; or</li>
<li>Separate <code>gameCore</code> into two classes: an abstract interface to be implemented by <code>takeaway</code>, and a concrete class containing the state. Construct <code>takeaway</code> first, and then pass it (via a reference to the interface class) to the constructor of the concrete class.</li>
</ul>

<p>I would recommend the second, as it is a move towards smaller classes and looser coupling, and it will be harder to use the classes incorrectly. The first is more error-prone, as there is no way be sure that the initialisation function is called correctly.</p>

<p>One final point: the destructor of a base class should usually either be virtual (to allow polymorphic deletion) or protected (to prevent invalid polymorphic deletion).</p>
","7665787"
"Replacing a 32-bit loop count variable with 64-bit introduces crazy performance deviations","100863","","<p>I was looking for the fastest way to <code>popcount</code> large arrays of data. I encountered a <em>very weird</em> effect: Changing the loop variable from <code>unsigned</code> to <code>uint64_t</code> made the performance drop by 50% on my PC.</p>

<h2>The Benchmark</h2>

<pre><code>#include &lt;iostream&gt;
#include &lt;chrono&gt;
#include &lt;x86intrin.h&gt;

int main(int argc, char* argv[]) {

    using namespace std;
    if (argc != 2) {
       cerr &lt;&lt; ""usage: array_size in MB"" &lt;&lt; endl;
       return -1;
    }

    uint64_t size = atol(argv[1])&lt;&lt;20;
    uint64_t* buffer = new uint64_t[size/8];
    char* charbuffer = reinterpret_cast&lt;char*&gt;(buffer);
    for (unsigned i=0; i&lt;size; ++i)
        charbuffer[i] = rand()%256;

    uint64_t count,duration;
    chrono::time_point&lt;chrono::system_clock&gt; startP,endP;
    {
        startP = chrono::system_clock::now();
        count = 0;
        for( unsigned k = 0; k &lt; 10000; k++){
            // Tight unrolled loop with unsigned
            for (unsigned i=0; i&lt;size/8; i+=4) {
                count += _mm_popcnt_u64(buffer[i]);
                count += _mm_popcnt_u64(buffer[i+1]);
                count += _mm_popcnt_u64(buffer[i+2]);
                count += _mm_popcnt_u64(buffer[i+3]);
            }
        }
        endP = chrono::system_clock::now();
        duration = chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(endP-startP).count();
        cout &lt;&lt; ""unsigned\t"" &lt;&lt; count &lt;&lt; '\t' &lt;&lt; (duration/1.0E9) &lt;&lt; "" sec \t""
             &lt;&lt; (10000.0*size)/(duration) &lt;&lt; "" GB/s"" &lt;&lt; endl;
    }
    {
        startP = chrono::system_clock::now();
        count=0;
        for( unsigned k = 0; k &lt; 10000; k++){
            // Tight unrolled loop with uint64_t
            for (uint64_t i=0;i&lt;size/8;i+=4) {
                count += _mm_popcnt_u64(buffer[i]);
                count += _mm_popcnt_u64(buffer[i+1]);
                count += _mm_popcnt_u64(buffer[i+2]);
                count += _mm_popcnt_u64(buffer[i+3]);
            }
        }
        endP = chrono::system_clock::now();
        duration = chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(endP-startP).count();
        cout &lt;&lt; ""uint64_t\t""  &lt;&lt; count &lt;&lt; '\t' &lt;&lt; (duration/1.0E9) &lt;&lt; "" sec \t""
             &lt;&lt; (10000.0*size)/(duration) &lt;&lt; "" GB/s"" &lt;&lt; endl;
    }

    free(charbuffer);
}
</code></pre>

<p>As you see, we create a buffer of random data, with the size being <code>x</code> megabytes where <code>x</code> is read from the command line. Afterwards, we iterate over the buffer and use an unrolled version of the x86 <code>popcount</code> intrinsic to perform the popcount. To get a more precise result, we do the popcount 10,000 times. We measure the times for the popcount. In the upper case, the inner loop variable is <code>unsigned</code>, in the lower case, the inner loop variable is <code>uint64_t</code>. I thought that this should make no difference, but the opposite is the case.</p>

<h2>The (absolutely crazy) results</h2>

<p>I compile it like this (g++ version: Ubuntu 4.8.2-19ubuntu1):</p>

<pre><code>g++ -O3 -march=native -std=c++11 test.cpp -o test
</code></pre>

<p>Here are the results on my <a href=""http://en.wikipedia.org/wiki/Haswell_%28microarchitecture%29"" rel=""noreferrer"">Haswell</a> <a href=""http://en.wikipedia.org/wiki/Haswell_%28microarchitecture%29#Desktop_processors"" rel=""noreferrer"">Core i7-4770K</a> CPU @ 3.50&nbsp;GHz, running <code>test 1</code> (so 1&nbsp;MB random data):</p>

<ul>
<li>unsigned  41959360000  0.401554 sec   <strong>26.113&nbsp;GB/s</strong></li>
<li>uint64_t  41959360000  0.759822 sec   <strong>13.8003&nbsp;GB/s</strong></li>
</ul>

<p>As you see, the throughput of the <code>uint64_t</code> version is <strong>only half</strong> the one of the <code>unsigned</code> version! The problem seems to be that different assembly gets generated, but why? First, I thought of a compiler bug, so I tried <code>clang++</code> (Ubuntu <a href=""http://en.wikipedia.org/wiki/Clang"" rel=""noreferrer"">Clang</a> version 3.4-1ubuntu3):</p>

<pre><code>clang++ -O3 -march=native -std=c++11 teest.cpp -o test
</code></pre>

<p>Result: <code>test 1</code></p>

<ul>
<li>unsigned  41959360000  0.398293 sec   <strong>26.3267 GB/s</strong></li>
<li>uint64_t  41959360000  0.680954 sec   <strong>15.3986 GB/s</strong></li>
</ul>

<p>So, it is almost the same result and is still strange. <em>But now it gets super strange.</em> I replace the buffer size that was read from input with a constant <code>1</code>, so I change:</p>

<pre><code>uint64_t size = atol(argv[1]) &lt;&lt; 20;
</code></pre>

<p>to</p>

<pre><code>uint64_t size = 1 &lt;&lt; 20;
</code></pre>

<p>Thus, the compiler now knows the buffer size at compile time. Maybe it can add some optimizations! Here are the numbers for <code>g++</code>:</p>

<ul>
<li>unsigned  41959360000  0.509156 sec   <strong>20.5944&nbsp;GB/s</strong></li>
<li>uint64_t  41959360000  0.508673 sec   <strong>20.6139&nbsp;GB/s</strong></li>
</ul>

<p>Now, both versions are equally fast. However, the <code>unsigned</code> <strong>got even slower</strong>! It dropped from <code>26</code> to <code>20 GB/s</code>, thus replacing a non-constant by a constant value lead to a <strong>deoptimization</strong>. Seriously, I have no clue what is going on here! But now to <code>clang++</code> with the new version:</p>

<ul>
<li>unsigned  41959360000  0.677009 sec   <strong>15.4884&nbsp;GB/s</strong></li>
<li>uint64_t  41959360000  0.676909 sec   <strong>15.4906&nbsp;GB/s</strong></li>
</ul>

<p><em>Wait, what?</em> Now, both versions dropped to the <strong>slow</strong> number of 15&nbsp;GB/s. Thus, replacing a non-constant by a constant value even lead to slow code in <strong>both</strong> cases for Clang!</p>

<p>I asked a colleague with an <a href=""http://en.wikipedia.org/wiki/Ivy_Bridge_%28microarchitecture%29"" rel=""noreferrer"">Ivy Bridge</a> CPU to compile my benchmark. He got similar results, so it does not seem to be Haswell. Because two compilers produce strange results here, it also does not seem to be a compiler bug. We do not have an AMD CPU here, so we could only test with Intel.</p>

<h2>More madness, please!</h2>

<p>Take the first example (the one with <code>atol(argv[1])</code>) and put a <code>static</code> before the variable, i.e.:</p>

<pre><code>static uint64_t size=atol(argv[1])&lt;&lt;20;
</code></pre>

<p>Here are my results in g++:</p>

<ul>
<li>unsigned  41959360000  0.396728 sec   <strong>26.4306 GB/s</strong></li>
<li>uint64_t  41959360000  0.509484 sec   <strong>20.5811 GB/s</strong></li>
</ul>

<p><em>Yay, yet another alternative</em>. We still have the fast 26&nbsp;GB/s with <code>u32</code>, but we managed to get <code>u64</code> at least from the 13&nbsp;GB/s to the 20&nbsp;GB/s version! <strong>On my collegue's PC, the <code>u64</code> version became even faster than the <code>u32</code> version, yielding the fastest result of all.</strong> Sadly, this only works for <code>g++</code>, <code>clang++</code> does not seem to care about <code>static</code>.</p>

<h2>My question</h2>

<p>Can you explain these results? Especially:</p>

<ul>
<li>How can there be such a difference between <code>u32</code> and <code>u64</code>?</li>
<li>How can replacing a non-constant by a constant buffer size trigger <em>less optimal code</em>?</li>
<li>How can the insertion of the <code>static</code> keyword make the <code>u64</code> loop faster? Even faster than the original code on my collegue's computer!</li>
</ul>

<p>I know that optimization is a tricky territory, however, I never thought that such small changes can lead to a <strong>100% difference</strong> in execution time and that small factors like a constant buffer size can again mix results totally. Of course, I always want to have the version that is able to popcount 26&nbsp;GB/s. The only reliable way I can think of is copy paste the assembly for this case and use inline assembly. This is the only way I can get rid of compilers that seem to go mad on small changes. What do you think? Is there another way to reliably get the code with most performance?</p>

<h2>The Disassembly</h2>

<p>Here is the disassembly for the various results:</p>

<p>26&nbsp;GB/s version from <strong>g++ / u32 / non-const bufsize</strong>:</p>

<pre><code>0x400af8:
lea 0x1(%rdx),%eax
popcnt (%rbx,%rax,8),%r9
lea 0x2(%rdx),%edi
popcnt (%rbx,%rcx,8),%rax
lea 0x3(%rdx),%esi
add %r9,%rax
popcnt (%rbx,%rdi,8),%rcx
add $0x4,%edx
add %rcx,%rax
popcnt (%rbx,%rsi,8),%rcx
add %rcx,%rax
mov %edx,%ecx
add %rax,%r14
cmp %rbp,%rcx
jb 0x400af8
</code></pre>

<p>13&nbsp;GB/s version from <strong>g++ / u64 / non-const bufsize</strong>:</p>

<pre><code>0x400c00:
popcnt 0x8(%rbx,%rdx,8),%rcx
popcnt (%rbx,%rdx,8),%rax
add %rcx,%rax
popcnt 0x10(%rbx,%rdx,8),%rcx
add %rcx,%rax
popcnt 0x18(%rbx,%rdx,8),%rcx
add $0x4,%rdx
add %rcx,%rax
add %rax,%r12
cmp %rbp,%rdx
jb 0x400c00
</code></pre>

<p>15&nbsp;GB/s version from <strong>clang++ / u64 / non-const bufsize</strong>:</p>

<pre><code>0x400e50:
popcnt (%r15,%rcx,8),%rdx
add %rbx,%rdx
popcnt 0x8(%r15,%rcx,8),%rsi
add %rdx,%rsi
popcnt 0x10(%r15,%rcx,8),%rdx
add %rsi,%rdx
popcnt 0x18(%r15,%rcx,8),%rbx
add %rdx,%rbx
add $0x4,%rcx
cmp %rbp,%rcx
jb 0x400e50
</code></pre>

<p>20&nbsp;GB/s version from <strong>g++ / u32&amp;u64 / const bufsize</strong>:</p>

<pre><code>0x400a68:
popcnt (%rbx,%rdx,1),%rax
popcnt 0x8(%rbx,%rdx,1),%rcx
add %rax,%rcx
popcnt 0x10(%rbx,%rdx,1),%rax
add %rax,%rcx
popcnt 0x18(%rbx,%rdx,1),%rsi
add $0x20,%rdx
add %rsi,%rcx
add %rcx,%rbp
cmp $0x100000,%rdx
jne 0x400a68
</code></pre>

<p>15&nbsp;GB/s version from <strong>clang++ / u32&amp;u64 / const bufsize</strong>:</p>

<pre><code>0x400dd0:
popcnt (%r14,%rcx,8),%rdx
add %rbx,%rdx
popcnt 0x8(%r14,%rcx,8),%rsi
add %rdx,%rsi
popcnt 0x10(%r14,%rcx,8),%rdx
add %rsi,%rdx
popcnt 0x18(%r14,%rcx,8),%rbx
add %rdx,%rbx
add $0x4,%rcx
cmp $0x20000,%rcx
jb 0x400dd0
</code></pre>

<p>Interestingly, the fastest (26&nbsp;GB/s) version is also the longest! It seems to be the only solution that uses <code>lea</code>. Some versions use <code>jb</code> to jump, others use <code>jne</code>. But apart from that, all versions seem to be comparable. I don't see where a 100% performance gap could originate from, but I am not too adept at deciphering assembly. The slowest (13&nbsp;GB/s) version looks even very short and good. Can anyone explain this?</p>

<h2>Lessons learned</h2>

<p>No matter what the answer to this question will be; I have learned that in really hot loops <em>every</em> detail can matter, <em>even details that do not seem to have any association to the hot code</em>. I have never thought about what type to use for a loop variable, but as you see such a minor change can make a <em>100%</em> difference! Even the storage type of a buffer can make a huge difference, as we saw with the insertion of the <code>static</code> keyword in front of the size variable! In the future, I will always test various alternatives on various compilers when writing really tight and hot loops that are crucial for system performance.</p>

<p>The interesting thing is also that the performance difference is still so high although I have already unrolled the loop four times. So even if you unroll, you can still get hit by major performance deviations. Quite interesting.</p>
","<p><strong>Culprit: False Data Dependency</strong> (and the compiler isn't even aware of it)</p>

<p>On Sandy/Ivy Bridge and Haswell processors, the instruction:</p>

<pre><code>popcnt  src, dest
</code></pre>

<p>appears to have a false dependency on the destination register <code>dest</code>. Even though the instruction only writes to it, the instruction will wait until <code>dest</code> is ready before executing.</p>

<p>This dependency doesn't just hold up the 4 <code>popcnt</code>s from a single loop iteration. It can carry across loop iterations making it impossible for the processor to parallelize different loop iterations.</p>

<p>The <code>unsigned</code> vs. <code>uint64_t</code> and other tweaks don't directly affect the problem. But they influence the register allocator which assigns the registers to the variables.</p>

<p>In your case, the speeds are a direct result of what is stuck to the (false) dependency chain depending on what the register allocator decided to do.</p>

<ul>
<li>13 GB/s has a chain: <code>popcnt</code>-<code>add</code>-<code>popcnt</code>-<code>popcnt</code> &rarr; next iteration</li>
<li>15 GB/s has a chain: <code>popcnt</code>-<code>add</code>-<code>popcnt</code>-<code>add</code> &rarr; next iteration</li>
<li>20 GB/s has a chain: <code>popcnt</code>-<code>popcnt</code> &rarr; next iteration</li>
<li>26 GB/s has a chain: <code>popcnt</code>-<code>popcnt</code> &rarr; next iteration</li>
</ul>

<p>The difference between 20 GB/s and 26 GB/s seems to be a minor artifact of the indirect addressing. Either way, the processor starts to hit other bottlenecks once you reach this speed.</p>

<hr>

<p>To test this, I used inline assembly to bypass the compiler and get exactly the assembly I want. I also split up the <code>count</code> variable to break all other dependencies that might mess with the benchmarks.</p>

<p>Here are the results:</p>

<p><strong>Sandy Bridge Xeon @ 3.5 GHz:</strong> (full test code can be found at the bottom)</p>

<ul>
<li>GCC 4.6.3: <code>g++ popcnt.cpp -std=c++0x -O3 -save-temps -march=native</code></li>
<li>Ubuntu 12</li>
</ul>

<p>Different Registers: <strong>18.6195 GB/s</strong></p>

<pre><code>.L4:
    movq    (%rbx,%rax,8), %r8
    movq    8(%rbx,%rax,8), %r9
    movq    16(%rbx,%rax,8), %r10
    movq    24(%rbx,%rax,8), %r11
    addq    $4, %rax

    popcnt %r8, %r8
    add    %r8, %rdx
    popcnt %r9, %r9
    add    %r9, %rcx
    popcnt %r10, %r10
    add    %r10, %rdi
    popcnt %r11, %r11
    add    %r11, %rsi

    cmpq    $131072, %rax
    jne .L4
</code></pre>

<p>Same Register: <strong>8.49272 GB/s</strong></p>

<pre><code>.L9:
    movq    (%rbx,%rdx,8), %r9
    movq    8(%rbx,%rdx,8), %r10
    movq    16(%rbx,%rdx,8), %r11
    movq    24(%rbx,%rdx,8), %rbp
    addq    $4, %rdx

    # This time reuse ""rax"" for all the popcnts.
    popcnt %r9, %rax
    add    %rax, %rcx
    popcnt %r10, %rax
    add    %rax, %rsi
    popcnt %r11, %rax
    add    %rax, %r8
    popcnt %rbp, %rax
    add    %rax, %rdi

    cmpq    $131072, %rdx
    jne .L9
</code></pre>

<p>Same Register with broken chain: <strong>17.8869 GB/s</strong></p>

<pre><code>.L14:
    movq    (%rbx,%rdx,8), %r9
    movq    8(%rbx,%rdx,8), %r10
    movq    16(%rbx,%rdx,8), %r11
    movq    24(%rbx,%rdx,8), %rbp
    addq    $4, %rdx

    # Reuse ""rax"" for all the popcnts.
    xor    %rax, %rax    # Break the cross-iteration dependency by zeroing ""rax"".
    popcnt %r9, %rax
    add    %rax, %rcx
    popcnt %r10, %rax
    add    %rax, %rsi
    popcnt %r11, %rax
    add    %rax, %r8
    popcnt %rbp, %rax
    add    %rax, %rdi

    cmpq    $131072, %rdx
    jne .L14
</code></pre>

<hr>

<p><strong>So what went wrong with the compiler?</strong></p>

<p>It seems that neither GCC nor Visual Studio are aware that <code>popcnt</code> has such a false dependency. Nevertheless, these false dependencies aren't uncommon. It's just a matter of whether the compiler is aware of it.</p>

<p><code>popcnt</code> isn't exactly the most used instruction. So it's not really a surprise that a major compiler could miss something like this. There also appears to be no documentation anywhere that mentions this problem. If Intel doesn't disclose it, then nobody outside will know until someone runs into it by chance.</p>

<p>(<strong>Update:</strong> <a href=""https://gcc.gnu.org/bugzilla/show_bug.cgi?id=62011#c13"">As of version 4.9.2</a>, GCC is aware of this false-dependency and generates code to compensate it when optimizations are enabled. Major compilers from other vendors, including Clang, MSVC, and even Intel's own ICC are not yet aware of this microarchitectural erratum and will not emit code that compensates for it.)</p>

<p><strong>Why does the CPU have such a false dependency?</strong></p>

<p>We can only speculate, but it's likely that Intel has the same handling for a lot of two-operand instructions. Common instructions like <code>add</code>, <code>sub</code> take two operands both of which are inputs. So Intel probably shoved <code>popcnt</code> into the same category to keep the processor design simple.</p>

<p>AMD processors do not appear to have this false dependency.</p>

<hr>

<p>The full test code is below for reference:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;chrono&gt;
#include &lt;x86intrin.h&gt;

int main(int argc, char* argv[]) {

   using namespace std;
   uint64_t size=1&lt;&lt;20;

   uint64_t* buffer = new uint64_t[size/8];
   char* charbuffer=reinterpret_cast&lt;char*&gt;(buffer);
   for (unsigned i=0;i&lt;size;++i) charbuffer[i]=rand()%256;

   uint64_t count,duration;
   chrono::time_point&lt;chrono::system_clock&gt; startP,endP;
   {
      uint64_t c0 = 0;
      uint64_t c1 = 0;
      uint64_t c2 = 0;
      uint64_t c3 = 0;
      startP = chrono::system_clock::now();
      for( unsigned k = 0; k &lt; 10000; k++){
         for (uint64_t i=0;i&lt;size/8;i+=4) {
            uint64_t r0 = buffer[i + 0];
            uint64_t r1 = buffer[i + 1];
            uint64_t r2 = buffer[i + 2];
            uint64_t r3 = buffer[i + 3];
            __asm__(
                ""popcnt %4, %4  \n\t""
                ""add %4, %0     \n\t""
                ""popcnt %5, %5  \n\t""
                ""add %5, %1     \n\t""
                ""popcnt %6, %6  \n\t""
                ""add %6, %2     \n\t""
                ""popcnt %7, %7  \n\t""
                ""add %7, %3     \n\t""
                : ""+r"" (c0), ""+r"" (c1), ""+r"" (c2), ""+r"" (c3)
                : ""r""  (r0), ""r""  (r1), ""r""  (r2), ""r""  (r3)
            );
         }
      }
      count = c0 + c1 + c2 + c3;
      endP = chrono::system_clock::now();
      duration=chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(endP-startP).count();
      cout &lt;&lt; ""No Chain\t"" &lt;&lt; count &lt;&lt; '\t' &lt;&lt; (duration/1.0E9) &lt;&lt; "" sec \t""
            &lt;&lt; (10000.0*size)/(duration) &lt;&lt; "" GB/s"" &lt;&lt; endl;
   }
   {
      uint64_t c0 = 0;
      uint64_t c1 = 0;
      uint64_t c2 = 0;
      uint64_t c3 = 0;
      startP = chrono::system_clock::now();
      for( unsigned k = 0; k &lt; 10000; k++){
         for (uint64_t i=0;i&lt;size/8;i+=4) {
            uint64_t r0 = buffer[i + 0];
            uint64_t r1 = buffer[i + 1];
            uint64_t r2 = buffer[i + 2];
            uint64_t r3 = buffer[i + 3];
            __asm__(
                ""popcnt %4, %%rax   \n\t""
                ""add %%rax, %0      \n\t""
                ""popcnt %5, %%rax   \n\t""
                ""add %%rax, %1      \n\t""
                ""popcnt %6, %%rax   \n\t""
                ""add %%rax, %2      \n\t""
                ""popcnt %7, %%rax   \n\t""
                ""add %%rax, %3      \n\t""
                : ""+r"" (c0), ""+r"" (c1), ""+r"" (c2), ""+r"" (c3)
                : ""r""  (r0), ""r""  (r1), ""r""  (r2), ""r""  (r3)
                : ""rax""
            );
         }
      }
      count = c0 + c1 + c2 + c3;
      endP = chrono::system_clock::now();
      duration=chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(endP-startP).count();
      cout &lt;&lt; ""Chain 4   \t""  &lt;&lt; count &lt;&lt; '\t' &lt;&lt; (duration/1.0E9) &lt;&lt; "" sec \t""
            &lt;&lt; (10000.0*size)/(duration) &lt;&lt; "" GB/s"" &lt;&lt; endl;
   }
   {
      uint64_t c0 = 0;
      uint64_t c1 = 0;
      uint64_t c2 = 0;
      uint64_t c3 = 0;
      startP = chrono::system_clock::now();
      for( unsigned k = 0; k &lt; 10000; k++){
         for (uint64_t i=0;i&lt;size/8;i+=4) {
            uint64_t r0 = buffer[i + 0];
            uint64_t r1 = buffer[i + 1];
            uint64_t r2 = buffer[i + 2];
            uint64_t r3 = buffer[i + 3];
            __asm__(
                ""xor %%rax, %%rax   \n\t""   // &lt;--- Break the chain.
                ""popcnt %4, %%rax   \n\t""
                ""add %%rax, %0      \n\t""
                ""popcnt %5, %%rax   \n\t""
                ""add %%rax, %1      \n\t""
                ""popcnt %6, %%rax   \n\t""
                ""add %%rax, %2      \n\t""
                ""popcnt %7, %%rax   \n\t""
                ""add %%rax, %3      \n\t""
                : ""+r"" (c0), ""+r"" (c1), ""+r"" (c2), ""+r"" (c3)
                : ""r""  (r0), ""r""  (r1), ""r""  (r2), ""r""  (r3)
                : ""rax""
            );
         }
      }
      count = c0 + c1 + c2 + c3;
      endP = chrono::system_clock::now();
      duration=chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(endP-startP).count();
      cout &lt;&lt; ""Broken Chain\t""  &lt;&lt; count &lt;&lt; '\t' &lt;&lt; (duration/1.0E9) &lt;&lt; "" sec \t""
            &lt;&lt; (10000.0*size)/(duration) &lt;&lt; "" GB/s"" &lt;&lt; endl;
   }

   free(charbuffer);
}
</code></pre>

<hr>

<p>An equally interesting benchmark can be found here: <a href=""http://pastebin.com/kbzgL8si"">http://pastebin.com/kbzgL8si</a>
<br>
This benchmark varies the number of <code>popcnt</code>s that are in the (false) dependency chain.</p>

<pre><code>False Chain 0:  41959360000 0.57748 sec     18.1578 GB/s
False Chain 1:  41959360000 0.585398 sec    17.9122 GB/s
False Chain 2:  41959360000 0.645483 sec    16.2448 GB/s
False Chain 3:  41959360000 0.929718 sec    11.2784 GB/s
False Chain 4:  41959360000 1.23572 sec     8.48557 GB/s
</code></pre>
","25089720"
"Setting an int to Infinity in C++","100853","","<p>I have an <code>int a</code> that needs to be equal to ""infinity"". This means that if</p>

<pre><code>int b = anyValue;
</code></pre>

<p><code>a&gt;b</code> is always true.</p>

<p>Is there any feature of C++ that could make this possible?</p>
","<p>Integers are finite, so sadly you can't have set it to a true infinity.
However you can set it to the max value of an int, this would mean that it would be greater or equal to any other int, ie:</p>

<pre><code>a&gt;=b
</code></pre>

<p>is always true.</p>

<p>You would do this by</p>

<pre><code>#include &lt;limits&gt;

//your code here

int a = std::numeric_limits&lt;int&gt;::max();

//go off and lead a happy and productive life
</code></pre>

<p>This will normally be equal to 2,147,483,647</p>

<p>If you really need a true ""infinite"" value, you would have to use a double or a float. Then you can simply do this</p>

<pre><code>float a = std::numeric_limits&lt;float&gt;::infinity();
</code></pre>

<p>Additional explanations of numeric limits can be found <a href=""http://en.cppreference.com/w/cpp/types/numeric_limits"">here</a></p>

<p>Happy Coding!</p>

<p>Note: As WTP mentioned, if it is absolutely necessary to have an int that is ""infinite"" you would have to write a wrapper class for an int and overload the comparison operators, though this is probably not necessary for most projects.</p>
","8690690"
"What is the difference between conversion specifiers %i and %d in formatted IO functions (*printf / *scanf)","100547","","<p>What is the difference between <code>%d</code> and <code>%i</code> when used as format specifiers in <code>printf</code>? </p>
","<p>They are the same when used for output, e.g. with <code>printf</code>.</p>

<p>However, these are different when used as input specifier e.g. with <code>scanf</code>, where <code>%d</code> scans an integer as a signed decimal number, but <code>%i</code> defaults to decimal but also allows hexadecimal (if preceded by <code>0x</code>) and octal if preceded by <code>0</code>.</p>

<p>So <code>033</code> would be 27 with <code>%i</code> but 33 with <code>%d</code>.</p>
","1893518"
"Cannot open Windows.h","100466","","<p>First of all: I'm using Microsoft Visual Studio 2012</p>

<p>I am a C#/Java developer and I am now trying to program for the kinect using Microsoft SDK and C++. So I started of with the Color Basics example, and I can not get it to compile. 
At first, none of the classes were able to find Windows.h. So I installed (Or re-installed, I'm not sure) the Windows SDK, and added the include dir of the SDK to the include ""path"" of the project. Then all the problems were gone, except for one:</p>

<pre><code>Error   5   error RC1015: cannot open include file 'windows.h'. C:\temp\ColorBasics-D2D\ColorBasics.rc  17  1   ColorBasics-D2D
</code></pre>

<p>And thats the error. No reasons why, the system can find it because it is used in multiple other files, only this file is not able to work with it. As a reference, the entire  file that is bugging (ColorBasics.rc): </p>

<pre><code>//------------------------------------------------------------------------------
// &lt;copyright file=""ColorBasics-D3D.rc"" company=""Microsoft""&gt;
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// &lt;/copyright&gt;
//------------------------------------------------------------------------------

// Microsoft Visual C++ generated resource script.
//
#include ""resource.h""

#define APSTUDIO_READONLY_SYMBOLS
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 2 resource.
//
#define APSTUDIO_HIDDEN_SYMBOLS
#include ""windows.h""
#undef APSTUDIO_HIDDEN_SYMBOLS

/////////////////////////////////////////////////////////////////////////////
#undef APSTUDIO_READONLY_SYMBOLS

/////////////////////////////////////////////////////////////////////////////
// English (United States) resources

#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US

/////////////////////////////////////////////////////////////////////////////
//
// Icon
//

// Icon with lowest ID value placed first to ensure application icon
// remains consistent on all systems.
IDI_APP                 ICON                    ""app.ico""

/////////////////////////////////////////////////////////////////////////////
//
// Dialog
//

IDD_APP DIALOGEX 0, 0, 512, 424
STYLE DS_SETFONT | DS_FIXEDSYS | WS_MINIMIZEBOX | WS_CLIPCHILDREN | WS_CAPTION | WS_SYSMENU
EXSTYLE WS_EX_CONTROLPARENT | WS_EX_APPWINDOW
CAPTION ""Color Basics""
CLASS ""ColorBasicsAppDlgWndClass""
FONT 8, ""MS Shell Dlg"", 400, 0, 0x1
BEGIN
    DEFPUSHBUTTON   ""Screenshot"",IDC_BUTTON_SCREENSHOT,238,391,50,14
    CONTROL         """",IDC_VIDEOVIEW,""Static"",SS_BLACKFRAME,0,0,512,384
    LTEXT           ""Press 'Screenshot' to save a screenshot to your 'My Pictures' directory."",IDC_STATUS,0,413,511,11,SS_SUNKEN,WS_EX_CLIENTEDGE
END


/////////////////////////////////////////////////////////////////////////////
//
// DESIGNINFO
//

#ifdef APSTUDIO_INVOKED
GUIDELINES DESIGNINFO
BEGIN
    IDD_APP, DIALOG
    BEGIN
    END
END
#endif    // APSTUDIO_INVOKED


#ifdef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// TEXTINCLUDE
//

1 TEXTINCLUDE 
BEGIN
    ""resource.h\0""
END

2 TEXTINCLUDE 
BEGIN
    ""#define APSTUDIO_HIDDEN_SYMBOLS\r\n""
    ""#include """"windows.h""""\r\n""
    ""#undef APSTUDIO_HIDDEN_SYMBOLS\r\n""
    ""\0""
END

3 TEXTINCLUDE 
BEGIN
    ""\r\n""
    ""\0""
END

#endif    // APSTUDIO_INVOKED

#endif    // English (United States) resources
/////////////////////////////////////////////////////////////////////////////



#ifndef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 3 resource.
//


/////////////////////////////////////////////////////////////////////////////
#endif    // not APSTUDIO_INVOKED
</code></pre>
","<p>If you already haven't done it, try to add to</p>

<p>Project->Preferences->C/C++->General->Additional Include Directories</p>

<p>""SDK Path\Include""</p>

<p>and to </p>

<p>Project->Preferences->Linker->General->Additional Library Directories</p>

<p>""SDK Path\Lib""</p>

<p>Also, try to change <code>""Windows.h""</code> to <code>&lt;windows.h&gt;</code></p>

<p>If won't help, check the physical existence of the file, it should be in ""\VC\PlatformSDK\Include"" folder in your Visual Studio install directory.</p>
","12749418"
"Difference between `constexpr` and `const`","100439","","<p>What's the difference between <code>constexpr</code> and <code>const</code>?</p>

<ul>
<li>When can I use only one of them?  </li>
<li>When can I use both and how should I choose one?</li>
</ul>
","<h2>Basic meaning and syntax</h2>

<p>Both keywords can be used in the declaration of objects as well as functions. The basic difference when applied to <em>objects</em> is this:</p>

<ul>
<li><p><code>const</code> declares an object as <em>constant</em>. This implies a guarantee that, once initialized, the value of that object won't change, and the compiler can make use of this fact for optimizations. It also helps prevent the programmer from writing code that modifies objects that were not meant to be modified after initialization.</p></li>
<li><p><code>constexpr</code> declares an object as fit for use in what the Standard calls <em>constant expressions</em>. But note that <code>constexpr</code> is not the only way to do this.</p></li>
</ul>

<p>When applied to <em>functions</em> the basic difference is this:</p>

<ul>
<li><p><code>const</code> can only be used for non-static member functions, not functions in general. It gives a guarantee that the member function does not modify any of the non-static data members.</p></li>
<li><p><code>constexpr</code> can be used with both member and non-member functions, as well as constructors. It declares the function fit for use in <em>constant expressions</em>. The compiler will only accept it if the function meets certain criteria (7.1.5/3,4), most importantly <sup>(&dagger;)</sup>:</p>

<ul>
<li>The function body must be non-virtual and extremely simple: Apart from typedefs and static asserts, only a single <code>return</code> statement is allowed. In the case of a constructor, only an initialization list, typedefs and static assert are allowed. (<code>= default</code> and <code>= delete</code> are allowed, too, though.)</li>
<li>As of C++14 the rules are more relaxed, what is allowed since then inside a constexpr function: asm declaration, a goto statement, a statement with a label other than case and default, try-block, definition of a variable of non-literal type, definition of a variable of static or thread storage duration, definition of a variable for which no initialization is performed.</li>
<li>The arguments and the return type must be <em>literal types</em> (i.e., generally speaking, very simple types, typically scalars or aggregates)</li>
</ul></li>
</ul>

<h2>Constant expressions</h2>

<p>As said above, <code>constexpr</code> declares both objects as well as functions as fit for use in constant expressions. A constant expression is more than merely constant:</p>

<ul>
<li><p>It can be used in places that require compile-time evaluation, for example, template parameters and array-size specifiers:</p>

<pre><code>template&lt;int N&gt;
class fixed_size_list
{ /*...*/ };

fixed_size_list&lt;X&gt; mylist;  // X must be an integer constant expression

int numbers[X];  // X must be an integer constant expression
</code></pre></li>
<li><p>But note:</p>

<ul>
<li><p>Declaring something as <code>constexpr</code> does not necessarily guarantee that it will be evaluated at compile time. It <em>can be used</em> for such, but it can be used in other places that are evaluated at run-time, as well.</p></li>
<li><p>An object <em>may</em> be fit for use in constant expressions <em>without</em> being declared <code>constexpr</code>. Example:</p>

<pre><code>int main()
{
  const int N = 3;
  int numbers[N] = {1, 2, 3};  // N is constant expression
  return 0;
}
</code></pre></li>
</ul>

<p>This is possible because <code>N</code>, being constant and initialized at declaration time with a literal, satisfies the criteria for a constant expression, even if it isn't declared <code>constexpr</code>.</p></li>
</ul>

<p><strong>So when do I actually have to use <code>constexpr</code>?</strong></p>

<ul>
<li><p>An <strong>object</strong> like <code>N</code> above can be used as constant expression <em>without</em> being declared <code>constexpr</code>. This is true for all objects that are:</p>

<ul>
<li><code>const</code></li>
<li>of integral or enumeration type <em>and</em></li>
<li>initialized at declaration time with an expression that is itself a constant expression
<br/><br/></li>
</ul>

<p><sub>[This is due to §5.19/2: A constant expression must not include a subexpressions that involves ""an lvalue-to-rvalue modification unless […] a glvalue of integral or enumeration type […]"" Thanks to Richard Smith for correcting my earlier claim that this was true for all literal types.]</sub></p></li>
<li><p>For a <strong>function</strong> to be fit for use in constant expressions, it <strong>must</strong> be explicitly declared <code>constexpr</code>; it is not sufficient for it merely to satisfy the criteria for constant-expression functions. Example:</p>

<pre><code>template&lt;int N&gt;
class list
{ };

constexpr int sqr1(int arg)
{ return arg * arg; }

int sqr2(int arg)
{ return arg * arg; }

int main()
{
  const int X = 2;
  list&lt;sqr1(X)&gt; mylist1;  // OK: sqr1 is constexpr
  list&lt;sqr2(X)&gt; mylist2;  // wrong: sqr2 is not constexpr
  return 0;
}
</code></pre></li>
</ul>

<p><strong>When can I / should I use both, <code>const</code> and <code>constexpr</code> <em>together?</em></strong></p>

<p><strong>A. In object declarations.</strong> This is never necessary when both keywords refer to the same object to be declared. <code>constexpr</code> implies <code>const</code>.</p>

<pre><code>constexpr const int N = 5;
</code></pre>

<p>is the same as</p>

<pre><code>constexpr int N = 5;
</code></pre>

<p>However, note that there may be situations when the keywords each refer to different parts of the declaration:</p>

<pre><code>static constexpr int N = 3;

int main()
{
  constexpr const int *NP = &amp;N;
  return 0;
}
</code></pre>

<p>Here, <code>NP</code> is declared as an address constant-expression, i.e. an pointer that is itself a constant expression. (This is possible when the address is generated by applying the address operator to a static/global constant expression.) Here, both <code>constexpr</code> and <code>const</code> are required: <code>constexpr</code> always refers to the expression being declared (here <code>NP</code>), while <code>const</code> refers to <code>int</code> (it declares a pointer-to-const). Removing the <code>const</code> would render the expression illegal (because (a) a pointer to a non-const object cannot be a constant expression, and (b) <code>&amp;N</code> is in-fact a pointer-to-constant).</p>

<p><strong>B. In member function declarations.</strong> In C++11, <code>constexpr</code> implies <code>const</code> also for member functions. However, this is likely to change in C++14. According to the current drafts, <code>constexpr</code> will imply <code>const</code> <em>only for objects</em>, not for member functions, due to a proposed change to §7.1.5/8. Hence, a member function declared under C++11 as</p>

<pre><code>constexpr void f();
</code></pre>

<p>will have to be declared as</p>

<pre><code>constexpr void f() const;
</code></pre>

<p>under C++14 in order to still be usable as a <code>const</code> function. <strong>Best mark your <code>constexpr</code> member functions as <code>const</code> even now so as to avoid having to change a lot of code later on.</strong></p>

<hr>

<p><sup>(&dagger;)</sup> The conditions for acceptable <code>constexpr</code> functions will probably be relaxed for C++14. A <a href=""http://isocpp.org/files/papers/N3652.html"" rel=""nofollow noreferrer"">proposal by Richard Smith</a> has recently been <a href=""http://isocpp.org/blog/2013/04/n3652-relaxing-constraints-on-constexpr-functions"" rel=""nofollow noreferrer"">adopted into the C++14 draft</a>.</p>
","14117121"
"Initializing a member array in constructor initializer","100420","","<pre><code>class C 
{
public:
 C() : arr({1,2,3}) //doesn't compile
{}
    /*
    C() : arr{1,2,3} //doesn't compile either
{}
    */
private:
 int arr[3];
};
</code></pre>

<p>I believe the reason is that arrays can be initialized only with <code>=</code> syntax, that is:</p>

<pre><code>int arr[3] = {1,3,4};
</code></pre>

<h3>Questions</h3>

<ol>
<li>How can I do what I want to do (that
is, <em>initialize</em> an array in a
constructor (not assigning elements
in the body)). Is it even possible?   </li>
<li>Does the C++03 standard say anything special about initializing aggregates (including arrays) in ctor initializers? Or the invalidness of the above code is a corollary of some other rules?  </li>
<li>Do C++0x initializer lists solve the problem?</li>
</ol>

<p><em><strong>P.S.</em></strong> Please do not mention vectors, boost::arrays, and their superiority to arrays, which I am well aware of.</p>
","<blockquote>
  <ol>
  <li>How can I do what I want to do (that is, initialize an array in a constructor (not assigning elements in the body)). Is it even possible? </li>
  </ol>
</blockquote>

<p>Yes. It's using a struct that contains an array. You say you already know about that, but then I don't understand the question. That way, you <em>do</em> initialize an array in the constructor, without assignments in the body. This is what <code>boost::array</code> does. </p>

<blockquote>
  <p>Does the C++03 standard say anything special about initializing aggregates (including arrays) in ctor initializers? Or the invalidness of the above code is a corollary of some other rules? </p>
</blockquote>

<p>A mem-initializer uses direct initialization. And the rules of clause 8 forbid this kind of thing. I'm not exactly sure about the following case, but some compilers do allow it. </p>

<pre><code>struct A {
  char foo[6];
  A():foo(""hello"") { } /* valid? */
};
</code></pre>

<p>See <a href=""http://gcc.gnu.org/bugzilla/show_bug.cgi?id=43453"" rel=""noreferrer"">this GCC PR</a> for further details. </p>

<blockquote>
  <p>Do C++0x initializer lists solve the problem?</p>
</blockquote>

<p>Yes, they do. However your syntax is invalid, I think. You have to use braces directly to fire off list initialization</p>

<pre><code>struct A {
  int foo[3];
  A():foo{1, 2, 3} { }
  A():foo({1, 2, 3}) { } /* invalid */
};
</code></pre>
","4058060"
"Passing references to pointers in C++","100388","","<p>As far as I can tell, there's no reason I shouldn't be allowed to pass a reference to a pointer in C++. However, my attempts to do so are failing, and I have no idea why. </p>

<p>This is what I'm doing:</p>

<pre><code>void myfunc(string*&amp; val)
{
    // Do stuff to the string pointer
}

// sometime later 
{
    // ...
    string s;
    myfunc(&amp;s);
    // ...
}
</code></pre>

<p>And I'm getting this error:</p>

<blockquote>
  <p>cannot convert parameter 1 from 'std::string *' to 'std::string *&amp;'</p>
</blockquote>
","<p>Your function expects a reference to an actual string pointer in the calling scope, not an anonymous string pointer. Thus:</p>

<pre><code>string s;
string* _s = &amp;s;
myfunc(_s);
</code></pre>

<p>should compile just fine.</p>

<p>However, this is only useful if you intend to modify the pointer you pass to the function. If you intend to modify the string itself you should use a reference to the string as Sake suggested. With that in mind it should be more obvious why the compiler complains about you original code. In your code the pointer is created 'on the fly', modifying that pointer would have no consequence and that is not what is intended. The idea of a reference (vs. a pointer) is that a reference always points to an actual object.</p>
","823455"
"Calculate mean and standard deviation from a vector of samples in C++ using Boost","100343","","<p>Is there a way to calculate mean and standard deviation for a vector containing samples using <a href=""http://en.wikipedia.org/wiki/Boost_%28C%2B%2B_libraries%29"" rel=""noreferrer"">Boost</a>? </p>

<p>Or do I have to create an accumulator and feed the vector into it?</p>
","<p>Using accumulators <strong>is</strong> the way to compute means and standard deviations in <a href=""http://www.boost.org/doc/libs/release/doc/html/accumulators/user_s_guide.html#accumulators.user_s_guide.the_statistical_accumulators_library.variance"" rel=""nofollow noreferrer"">Boost</a>.</p>

<pre><code>accumulator_set&lt;double, stats&lt;tag::variance&gt; &gt; acc;
for_each(a_vec.begin(), a_vec.end(), bind&lt;void&gt;(ref(acc), _1));

cout &lt;&lt; mean(acc) &lt;&lt; endl;
cout &lt;&lt; sqrt(variance(acc)) &lt;&lt; endl;
</code></pre>

<p>&nbsp;</p>
","7616820"
"error: invalid initialization of non-const reference of type ‘int&’ from an rvalue of type ‘int’","100095","","<p>Wrong form:  </p>

<pre><code>int &amp;z = 12;
</code></pre>

<p>Correct form:</p>

<pre><code>int y;
int &amp;r = y;
</code></pre>

<p><em><strong>Question</em></strong>:<br>
Why is the first code wrong? What is the ""<strong>meaning</strong>"" of the error in the title?</p>
","<p>C++03 3.10/1 says: ""Every expression is either an lvalue or an rvalue.""  It's important to remember that lvalueness versus rvalueness is a property of expressions, not of objects.</p>

<p>Lvalues name objects that persist beyond a single expression.  For example, <code>obj</code> , <code>*ptr</code> , <code>ptr[index]</code> , and <code>++x</code> are all lvalues.</p>

<p>Rvalues are temporaries that evaporate at the end of the full-expression in which they live (""at the semicolon"").  For example, <code>1729</code> , <code>x + y</code> , <code>std::string(""meow"")</code> , and <code>x++</code> are all rvalues.</p>

<p>The address-of operator requires that its ""operand shall be an lvalue"". if we could take the address of one expression, the expression is an lvalue, otherwise it's an rvalue. </p>

<pre><code> &amp;obj; //  valid
 &amp;12;  //invalid
</code></pre>
","8294009"
"Array[n] vs Array[10] - Initializing array with variable vs real number","100088","","<p>I am having the following issue with my code:</p>

<pre><code>int n = 10;
double tenorData[n]   =   {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
</code></pre>

<p>Returns the following error:</p>

<pre><code>error: variable-sized object 'tenorData' may not be initialized
</code></pre>

<p>Whereas using <code>double tenorData[10]</code> works.</p>

<p>Anyone know why?</p>
","<p>In C++, variable length arrays are not legal. G++ allows this as an ""extension"" (because C allows it), so in G++ (without being <code>-pedantic</code> about following the C++ standard), you can do:</p>

<pre><code>int n = 10;
double a[n]; // Legal in g++ (with extensions), illegal in proper C++
</code></pre>

<p>If you want a ""variable length array"" (better called a ""dynamically sized array"" in C++, since proper variable length arrays aren't allowed), you either have to dynamically allocate memory yourself:</p>

<pre><code>int n = 10;
double* a = new double[n]; // Don't forget to delete [] a; when you're done!
</code></pre>

<p>Or, better yet, use a standard container:</p>

<pre><code>int n = 10;
std::vector&lt;double&gt; a(n); // Don't forget to #include &lt;vector&gt;
</code></pre>

<p>If you still want a proper array, you can use a <em>constant</em>, not a <em>variable</em>, when creating it:</p>

<pre><code>const int n = 10;
double a[n]; // now valid, since n isn't a variable (it's a compile time constant)
</code></pre>

<p>Similarly, if you want to get the size from a function in C++11, you can use a <code>constexpr</code>:</p>

<pre><code>constexpr int n()
{
    return 10;
}

double a[n()]; // n() is a compile time constant expression
</code></pre>
","15013295"
"Throw keyword in function's signature","100077","","<p>What is the technical reason why it is considered bad practice to use the C++ <code>throw</code> keyword in a function signature?</p>

<pre><code>bool some_func() throw(myExc)
{
  ...
  if (problem_occurred) 
  {
    throw myExc(""problem occurred"");
  }
  ...
}
</code></pre>
","<p>No, it is not considered good practice. On the contrary, it is generally considered a bad idea.</p>

<p><a href=""http://www.gotw.ca/publications/mill22.htm"" rel=""noreferrer"">http://www.gotw.ca/publications/mill22.htm</a> goes into a lot more detail about why, but the problem is partly that the compiler is unable to enforce this, so it has to be checked at runtime, which is usually undesirable. And it is not well supported in any case. (MSVC ignores exception specifications, except throw(), which it interprets as a guarantee that no exception will be thrown.</p>
","1055407"
"What's the best way to do a backwards loop in C/C#/C++?","99898","","<p>I need to move backwards through an array, so I have code like this:</p>

<pre><code>for (int i = myArray.Length - 1; i &gt;= 0; i--)
{
    // Do something
    myArray[i] = 42;
}
</code></pre>

<p>Is there a better way of doing this?</p>

<p>Update: I was hoping that maybe C# had some built-in mechanism for this like:</p>

<pre><code>foreachbackwards (int i in myArray)
{
    // so easy
}
</code></pre>

<p>Update 2: There <em>are</em> better ways. Rune takes the prize with:</p>

<pre><code>for (int i = myArray.Length; i-- &gt; 0; )
{    
    //do something
}
//or
for (int i = myArray.Length; i --&gt; 0; )
{
    // do something
}
</code></pre>

<p>which looks even better in regular C (thanks to Twotymz):</p>

<pre><code>for (int i = lengthOfArray; i--; )
{    
    //do something
}
</code></pre>
","<p>While admittedly a bit obscure, I would say that the most typographically pleasing way of doing this is</p>

<pre><code>for (int i = myArray.Length; i --&gt; 0; )
{
    //do something
}
</code></pre>
","276056"
"C++ pointer to objects","99818","","<p>In C++ do you always have initialize a pointer to an object with the <code>new</code> keyword?</p>

<p>Or can you just have this too:</p>

<pre><code>MyClass *myclass;

myclass-&gt;DoSomething();
</code></pre>

<p>I thought this was a pointer allocated on the stack instead of the heap, but since objects are normally heap allocated, I think my theory is probably faulty??</p>

<p>Please advice.</p>
","<p>No, you can have pointers to stack allocated objects:</p>

<pre><code>MyClass *myclass;
MyClass c;
myclass = &amp; c;
myclass-&gt;DoSomething();
</code></pre>

<p>This is of course common when using pointers as function parameters:</p>

<pre><code>void f( MyClass * p ) {
    p-&gt;DoSomething();
}

int main() {
    MyClass c;
    f( &amp; c );
}
</code></pre>

<p>One way or another though, the pointer must always be initialised. Your code:</p>

<pre><code>MyClass *myclass;
myclass-&gt;DoSomething();
</code></pre>

<p>leads to that dreaded condition, <strong>undefined behaviour</strong>.</p>
","2988305"
"In C/C++ what's the simplest way to reverse the order of bits in a byte?","99799","","<p>While there are multiple ways to reverse bit order in a byte, I'm curious as to what is the ""simplest"" for a developer to implement.  And by reversing I mean:</p>

<pre><code>1110 -&gt; 0111
0010 -&gt; 0100
</code></pre>

<p>This is similar to, but not a duplicate of <a href=""https://stackoverflow.com/questions/1688532/how-to-reverse-bits-of-a-byte"">this</a> PHP question.</p>

<p>This is similar to, but not a duplicate of <a href=""https://stackoverflow.com/questions/746171/best-algorithm-for-bit-reversal-from-msb-lsb-to-lsb-msb-in-c"">this</a> C question. This question is asking for the easiest method to implement by a developer. The ""Best Algorithm"" is concerned with memory and cpu performance.</p>
","<p>If you are talking about a single byte, a table-lookup is probably the best bet, unless for some reason you don't have 256 bytes available.</p>
","2602836"
"What does iterator->second mean?","99757","","<p>In C++, what is the type of a <code>std::map&lt;&gt;::iterator</code>?</p>

<p>We know that an object <code>it</code> of type <code>std::map&lt;A,B&gt;::iterator</code> has an overloaded <code>operator -&gt;</code> which returns a <code>std::pair&lt;A,B&gt;*</code>, and that the <code>std::pair&lt;&gt;</code> has a <code>first</code> and <code>second</code> member.</p>

<p>But, what do these two members correspond to, and why do we have to access the value stored in the map as <code>it-&gt;second</code>?</p>
","<p>I'm sure you know that a <code>std::vector&lt;X&gt;</code> stores a whole bunch of <code>X</code> objects, right? But if you have a <code>std::map&lt;X, Y&gt;</code>, what it actually stores is a whole bunch of <code>std::pair&lt;const X, Y&gt;</code>s. That's exactly what a map is - it pairs together the keys and the associated values.</p>

<p>When you iterate over a <code>std::map</code>, you're iterating over all of these <code>std::pair</code>s. When you dereference one of these iterators, you get a <code>std::pair</code> containing the key and its associated value.</p>

<pre><code>std::map&lt;std::string, int&gt; m = /* fill it */;
auto it = m.begin();
</code></pre>

<p>Here, if you now do <code>*it</code>, you will get the the <code>std::pair</code> for the first element in the map.</p>

<p>Now the type <a href=""http://en.cppreference.com/w/cpp/utility/pair""><code>std::pair</code></a> gives you access to its elements through two members: <code>first</code> and <code>second</code>. So if you have a <code>std::pair&lt;X, Y&gt;</code> called <code>p</code>, <code>p.first</code> is an <code>X</code> object and <code>p.second</code> is a <code>Y</code> object.</p>

<p>So now you know that dereferencing a <code>std::map</code> iterator gives you a <code>std::pair</code>, you can then access its elements with <code>first</code> and <code>second</code>. For example, <code>(*it).first</code> will give you the key and <code>(*it).second</code> will give you the value. These are equivalent to <code>it-&gt;first</code> and <code>it-&gt;second</code>.</p>
","15451409"
"C++: what regex library should I use?","99705","","<p>I'm working on a commercial (not open source) C++ project that runs on a  linux-based system.  I need to do some regex within the C++ code.  (I know:  I now have 2 problems.)</p>

<p>QUESTION:  What libraries do people who regularly do regex from C/C++ recommend I look into?  A quick search has brought the following to my attention:</p>

<p>1) Boost.Regex (I need to go read the Boost Software License, but this question is not about software licenses)</p>

<p>2) C (not C++) POSIX regex (#include &lt;regex.h&gt;, regcomp, regexec, etc.)</p>

<p>3) <a href=""http://freshmeat.net/projects/cpp_regex/"" rel=""noreferrer"">http://freshmeat.net/projects/cpp_regex/</a>  (I know nothing about this one; seems to be GPL, therefore not usable on this project)</p>
","<p>Thanks for all the suggestions.</p>

<p>I tried out a few things today, and with the stuff we're trying to do, I opted for the simplest solution where I don't have to download any other 3rd-party library.  In the end, I #include &lt;regex.h&gt; and used the standard C POSIX calls regcomp() and regexec().  Not C++, but in a pinch this proved to be the easiest.</p>
","186026"
"Is it possible to write a template to check for a function's existence?","99613","","<p>Is it possible to write a template that changes behavior depending on if a certain member function is defined on a class?</p>

<p>Here's a simple example of what I would want to write:</p>

<pre><code>template&lt;class T&gt;
std::string optionalToString(T* obj)
{
    if (FUNCTION_EXISTS(T-&gt;toString))
        return obj-&gt;toString();
    else
        return ""toString not defined"";
}
</code></pre>

<p>So, if <code>class T</code> has <code>toString()</code> defined, then it uses it; otherwise, it doesn't. The magical part that I don't know how to do is the ""FUNCTION_EXISTS"" part.</p>
","<p>Yes, with SFINAE you can check if a given class does provide a certain method. Here's the working code:</p>

<pre><code>#include &lt;iostream&gt;

struct Hello
{
    int helloworld() { return 0; }
};

struct Generic {};    

// SFINAE test
template &lt;typename T&gt;
class has_helloworld
{
    typedef char one;
    typedef long two;

    template &lt;typename C&gt; static one test( typeof(&amp;C::helloworld) ) ;
    template &lt;typename C&gt; static two test(...);    

public:
    enum { value = sizeof(test&lt;T&gt;(0)) == sizeof(char) };
};

int main(int argc, char *argv[])
{
    std::cout &lt;&lt; has_helloworld&lt;Hello&gt;::value &lt;&lt; std::endl;
    std::cout &lt;&lt; has_helloworld&lt;Generic&gt;::value &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>I've just tested it with Linux and gcc 4.1/4.3. I don't know if it's portable to other platforms running different compilers. </p>
","257382"
"C++ int float casting","99610","","<p>Why is m always = 0? The x and y members of someClass are integers. </p>

<pre><code>float getSlope(someClass a, someClass b)
{           
    float m = (a.y - b.y) / (a.x - b.x);
    cout &lt;&lt; "" m = "" &lt;&lt; m &lt;&lt; ""\n"";
    return m;
}
</code></pre>
","<p>Integer division occurs, then the result, <em>which is an integer</em>, is assigned as a float. If the result is less than 1 then it ends up as 0.</p>

<p>You'll want to cast the expressions to floats first before dividing, e.g.</p>

<pre><code>float m = (float)(a.y - b.y) / (float)(a.x - b.x);
</code></pre>
","5456816"
"How to use enums as flags in C++?","99504","","<p>Treating <code>enum</code>s as flags works nicely in C# via the <code>[Flags]</code> attribute, but what's the best way to do this in C++?</p>

<p>For example, I'd like to write:</p>

<pre><code>enum AnimalFlags
{
    HasClaws = 1,
    CanFly =2,
    EatsFish = 4,
    Endangered = 8
};

seahawk.flags = CanFly | EatsFish | Endangered;
</code></pre>

<p>However, I get compiler errors regarding <code>int</code>/<code>enum</code> conversions.  Is there a nicer way to express this than just blunt casting?  Preferably, I don't want to rely on constructs from 3rd party libraries such as boost or Qt.</p>

<p>EDIT: As indicated in the answers, I can avoid the compiler error by declaring <code>seahawk.flags</code> as <code>int</code>.  However, I'd like to have some mechanism to enforce type safety, so someone can't write <code>seahawk.flags = HasMaximizeButton</code>.</p>
","<p>The ""correct"" way is to define bit operators for the enum, as:</p>

<pre><code>enum AnimalFlags
{
    HasClaws = 1,
    CanFly =2,
    EatsFish = 4,
    Endangered = 8
};

inline AnimalFlags operator|(AnimalFlags a, AnimalFlags b)
{return static_cast&lt;AnimalFlags&gt;(static_cast&lt;int&gt;(a) | static_cast&lt;int&gt;(b));}
</code></pre>

<p>Etc. rest of the bit operators. Modify as needed if the enum range exceeds int range.</p>
","1448478"
"Display QImage with QtGui","99335","","<p>I am new to Qt, and I am trying to create a simple GUI Application that displays an image once a button has been clicked on.</p>

<p>I can read the image in a <code>QImage</code> object, but is there any simple way to call a Qt function that takes the <code>QImage</code> as an input, and displays it?</p>
","<p>Thanks All, I found how to do it, which is the same as Dave and Sergey:</p>

<p>I am using QT Creator:</p>

<p>In the main GUI window create using the drag drop GUI and create label (e.g. ""myLabel"")</p>

<p>In the callback of the button (clicked) do the following using the (*ui) pointer to the user interface window:</p>

<pre><code>void MainWindow::on_pushButton_clicked()
{
     QImage imageObject;
     imageObject.load(imagePath);
     ui-&gt;myLabel-&gt;setPixmap(QPixmap::fromImage(imageObject));

     //OR use the other way by setting the Pixmap directly

     QPixmap pixmapObject(imagePath"");
     ui-&gt;myLabel2-&gt;setPixmap(pixmapObject);
}
</code></pre>
","4474570"
"Should operator<< be implemented as a friend or as a member function?","99306","","<p>That's basically the question, is there a ""right"" way to implement <code>operator&lt;&lt;</code> ?
Reading <a href=""http://bytes.com/forum/thread170304.html"" rel=""noreferrer"">this</a> I can see that something like:</p>

<pre><code>friend bool operator&lt;&lt;(obj const&amp; lhs, obj const&amp; rhs);
</code></pre>

<p>is preferred to something like </p>

<pre><code>ostream&amp; operator&lt;&lt;(obj const&amp; rhs);
</code></pre>

<p>But I can't quite see why should I use one or the other.</p>

<p>My personal case is:</p>

<pre><code>friend ostream &amp; operator&lt;&lt;(ostream &amp;os, const Paragraph&amp; p) {
    return os &lt;&lt; p.to_str();
}
</code></pre>

<p>But I could probably do:</p>

<pre><code>ostream &amp; operator&lt;&lt;(ostream &amp;os) {
    return os &lt;&lt; paragraph;
}
</code></pre>

<p>What rationale should I base this decision on?</p>

<p><em>Note</em>:</p>

<pre><code> Paragraph::to_str = (return paragraph) 
</code></pre>

<p>where paragraph's a string.</p>
","<p>The problem here is in your interpretation of the article you <a href=""http://bytes.com/forum/thread170304.html"" rel=""noreferrer"">link</a>.</p>

<p>This article is about somebody that is having problems correctly defining the bool relationship operators.</p>

<p>The operator:</p>

<ul>
<li>Equality == and !=</li>
<li>Relationship &lt; > &lt;= >=</li>
</ul>

<p>These operators should return a bool as they are comparing two objects of the same type. It is usually easiest to define these operators as part of the class. This is because a class is automatically a friend of itself so objects of type Paragraph can examine each other (even each others private members).</p>

<p>There is an argument for making these free standing functions as this lets auto conversion convert both sides if they are not the same type, while member functions only allow the rhs to be auto converted. I find this a paper man argument as you don't really want auto conversion happening in the first place (usually). But if this is something you want (I don't recommend it) then making the comparators free standing can be advantageous.</p>

<p>The stream operators:</p>

<ul>
<li>operator &lt;&lt;  output</li>
<li>operator >>  input</li>
</ul>

<p>When you use these as stream operators (rather than binary shift) the first parameter is a stream. Since you do not have access to the stream object (its not yours to modify) these can not be member operators they have to be external to the class. Thus they must either be friends of the class or have access to a public method that will do the streaming for you.</p>

<p>It is also traditional for these objects to return a reference to a stream object so you can chain stream operations together.</p>

<pre><code>#include &lt;iostream&gt;

class Paragraph
{
    public:
        explicit Paragraph(std::string const&amp; init)
            :m_para(init)
        {}

        std::string const&amp;  to_str() const
        {
            return m_para;
        }

        bool operator==(Paragraph const&amp; rhs) const
        {
            return m_para == rhs.m_para;
        }
        bool operator!=(Paragraph const&amp; rhs) const
        {
            // Define != operator in terms of the == operator
            return !(this-&gt;operator==(rhs));
        }
        bool operator&lt;(Paragraph const&amp; rhs) const
        {
            return  m_para &lt; rhs.m_para;
        }
    private:
        friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const Paragraph&amp; p);
        std::string     m_para;
};

std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const Paragraph&amp; p)
{
    return os &lt;&lt; p.to_str();
}


int main()
{
    Paragraph   p(""Plop"");
    Paragraph   q(p);

    std::cout &lt;&lt; p &lt;&lt; std::endl &lt;&lt; (p == q) &lt;&lt; std::endl;
}
</code></pre>
","237074"
"How do I convert from stringstream to string in C++?","99122","","<p>How do I convert from <code>std::stringstream</code> to <code>std::string</code> in C++?</p>

<p>Do I need to call a method on the string stream?</p>
","<p>yourStringStream.str()</p>
","662981"
"creating an array of structs in c++","99084","","<p>I'm trying to create an array of structs.  Is the code below valid?  I keep getting a <code>expected primary-expression before '{'</code> token error.</p>

<pre><code>int main()
{
    int pause;

    struct Customer
    {
           int uid;
           string name;
    };

    Customer customerRecords[2];
    customerRecords[0] = {25, ""Bob Jones""};
    customerRecords[1] = {26, ""Jim Smith""};

    cin &gt;&gt; pause;
return 0;
}
</code></pre>
","<p>Try this:</p>

<pre><code>Customer customerRecords[2] = {{25, ""Bob Jones""},
                               {26, ""Jim Smith""}};
</code></pre>
","6810672"
"What is the worst real-world macros/pre-processor abuse you've ever come across?","99072","","<p>What is the <em>worst</em> <strong>real-world</strong> macros/pre-processor abuse you've ever come across (please no contrived IOCCC answers *haha*)?</p>

<p>Please add a short snippet or story if it is really entertaining. The goal is to teach something instead of always telling people ""never use macros"".</p>

<hr>

<p>p.s.: I've used macros before... but usually I get rid of them eventually when I have a ""real"" solution (even if the real solution is inlined so it becomes similar to a macro).</p>

<hr>

<p><strong>Bonus:</strong> Give an example where the macro was really was better than a not-macro solution.</p>

<p><strong>Related question:</strong> <a href=""https://stackoverflow.com/questions/96196/when-are-c-macros-beneficial"">When are C++ macros beneficial?</a> </p>
","<p>From memory, it looked something like this:</p>

<pre><code>#define RETURN(result) return (result);}

int myfunction1(args) {
    int x = 0;
    // do something
    RETURN(x)

int myfunction2(args) {
    int y = 0;
    // do something
    RETURN(y)

int myfunction3(args) {
    int z = 0;
    // do something
    RETURN(z)
</code></pre>

<p>Yes that's right, no closing braces in any of the functions.  Syntax highlighting was a mess, so he used vi to edit (not vim, it has syntax coloring!)</p>

<p>He was a Russian programmer who had mostly worked in assembly language.  He was fanatical about saving as many bytes as possible because he had previously worked on systems with very limited memory.  ""It was for satellite.  Only very few byte, so we use each byte over for many things.""  (bit fiddling, reusing machine instruction bytes for their numeric values)  When I tried to find out what kinds of satellites, I was only able to get ""Orbiting satellite.  For making to orbit.""</p>

<p>He had two other quirks: A convex mirror mounted above his monitor ""For knowing who is watching"", and an occasional sudden exit from his chair to do a quick ten pushups.  He explained this last one as ""Compiler found error in code. This is punishment"".  </p>
","652945"
"How to check if std::map contains a key without doing insert?","99069","","<p>The only way I have found to check for duplicates is by inserting and checking the <code>std::pair.second</code> for <code>false</code>, but the problem is that this still inserts something if the key is unused, whereas what I want is a <code>map.contains(key);</code> function.</p>
","<p>Use <code>my_map.count( key )</code>; it can only return 0 or 1, which is essentially the Boolean result you want.</p>

<p>Alternately <code>my_map.find( key ) != my_map.end()</code> works too.</p>
","3886599"
"What is a C++ delegate?","98732","","<p>What is the general idea of a delegate in C++? What are they, how are they used and what are they used for?</p>

<p>I'd like to first learn about them in a 'black box' way, but a bit of information on the guts of these things would be great too.</p>

<p>This is not C++ at its purest or cleanest, but I notice that the codebase where I work has them in abundance. I'm hoping to understand them enough, so I can just use them and not have to delve into the horrible nested template awfulness.</p>

<p>These two <a href=""http://en.wikipedia.org/wiki/The_Code_Project"">The Code Project</a> articles explain what I mean but not particularly succinctly:</p>

<ul>
<li><p><em><a href=""http://www.codeproject.com/Articles/7150/Member-Function-Pointers-and-the-Fastest-Possible"">Member Function Pointers and the Fastest Possible C++ Delegates</a></em></p></li>
<li><p><em><a href=""http://www.codeproject.com/Articles/11015/The-Impossibly-Fast-C-Delegates"">The Impossibly Fast C++ Delegates</a></em></p></li>
</ul>
","<p>You have an incredible number of choices to achieve delegates in C++. Here are the ones that came to my mind.</p>

<hr>

<p><strong>Option 1 : functors:</strong></p>

<p>A function object may be created by implementing <code>operator()</code></p>

<pre><code>struct Functor
{
     // Normal class/struct members

     int operator()(double d) // Arbitrary return types and parameter list
     {
          return (int) d + 1;
     }
};

// Use:
Functor f;
int i = f(3.14);
</code></pre>

<hr>

<p><strong>Option 2: lambda expressions (<a href=""http://en.wikipedia.org/wiki/C++11"" rel=""noreferrer"">C++11</a> only)</strong></p>

<pre><code>// Syntax is roughly: [capture](parameter list) -&gt; return type {block}
// Some shortcuts exist
auto func = [](int i) -&gt; double { return 2*i/1.15; };
double d = func(1);
</code></pre>

<hr>

<p><strong>Option 3: function pointers</strong></p>

<pre><code>int f(double d) { ... }
typedef int (*MyFuncT) (double d);
MyFuncT fp = &amp;f;
int a = fp(3.14);
</code></pre>

<hr>

<p><strong>Option 4: pointer to member functions</strong> (fastest solution)</p>

<p>See <em><a href=""http://www.codeproject.com/Articles/13287/Fast-C-Delegate"" rel=""noreferrer"">Fast C++ Delegate</a></em> (on <a href=""http://en.wikipedia.org/wiki/The_Code_Project"" rel=""noreferrer"">The Code Project</a>).</p>

<pre><code>struct DelegateList
{
     int f1(double d) { }
     int f2(double d) { }
};

typedef int (DelegateList::* DelegateType)(double d);

DelegateType d = &amp;DelegateList::f1;
DelegateList list;
int a = (list.*d)(3.14);
</code></pre>

<hr>

<p><strong>Option 5: <a href=""http://en.cppreference.com/w/cpp/utility/functional/function"" rel=""noreferrer"">std::function</a></strong></p>

<p>(or <code>boost::function</code> if your standard library doesn't support it). It is slower, but it is the most flexible.</p>

<pre><code>#include &lt;functional&gt;
std::function&lt;int(double)&gt; f = [can be set to about anything in this answer]
// Usually more useful as a parameter to another functions
</code></pre>

<hr>

<p><strong>Option 6: binding (using <a href=""http://en.cppreference.com/w/cpp/utility/functional/bind"" rel=""noreferrer"">std::bind</a>)</strong></p>

<p>Allows setting some parameters in advance, convenient to call a member function for instance.</p>

<pre><code>struct MyClass
{
    int DoStuff(double d); // actually a DoStuff(MyClass* this, double d)
};

std::function&lt;int(double d)&gt; f = std::bind(&amp;MyClass::DoStuff, this, std::placeholders::_1);
// auto f = std::bind(...); in C++11
</code></pre>

<hr>

<p><strong>Option 7: templates</strong></p>

<p>Accept anything as long as it matches the argument list.</p>

<pre><code>template &lt;class FunctionT&gt;
int DoSomething(FunctionT func)
{
    return func(3.14);
}
</code></pre>
","9568485"
"Are there benefits of passing by pointer over passing by reference in C++?","98625","","<p>What are the benefits of passing by pointer over passing by reference in C++?</p>

<p>Lately, I have seen a number of examples that chose passing function arguments by pointers instead of passing by reference.  Are there benefits to doing this?</p>

<p>Example:</p>

<pre><code>func(SPRITE *x);
</code></pre>

<p>with a call of</p>

<pre><code>func(&amp;mySprite);
</code></pre>

<p>vs.</p>

<pre><code>func(SPRITE &amp;x);
</code></pre>

<p>with a call of</p>

<pre><code>func(mySprite);
</code></pre>
","<p>A pointer can receive a NULL parameter, a reference parameter can not.  If there's ever a chance that you could want to pass ""no object"", then use a pointer instead of a reference.</p>

<p>Also, passing by pointer allows you to explicitly see at the call site whether the object is passed by value or by reference:</p>

<pre><code>// Is mySprite passed by value or by reference?  You can't tell 
// without looking at the definition of func()
func(mySprite);

// func2 passes ""by pointer"" - no need to look up function definition
func2(&amp;mySprite);
</code></pre>
","334873"
"How do I select a range of values in a switch statement?","98611","","<p>When I try to compile I get this error:</p>

<pre>
1>------ Build started: Project: snake, Configuration: Debug Win32 ------
1>  exercise.cpp
1>c:\users\robin\documents\visual studio 2010\projects\snake\snake\exercise.cpp(13): error C2059: syntax error : '>='
1>c:\users\robin\documents\visual studio 2010\projects\snake\snake\exercise.cpp(16): error C2059: syntax error : '>='
1>c:\users\robin\documents\visual studio 2010\projects\snake\snake\exercise.cpp(19): error C2059: syntax error : '>='
1>c:\users\robin\documents\visual studio 2010\projects\snake\snake\exercise.cpp(22): error C2059: syntax error : '>='
1>c:\users\robin\documents\visual studio 2010\projects\snake\snake\exercise.cpp(25): error C2059: syntax error : '>'
1>c:\users\robin\documents\visual studio 2010\projects\snake\snake\exercise.cpp(28): error C2059: syntax error : '=='
1>c:\users\robin\documents\visual studio 2010\projects\snake\snake\exercise.cpp(34): warning C4065: switch statement contains 'default' but no 'case' labels
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========
</pre>

<p>Code:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

int main(){
    int score;

    //Vraag de score
    cout &lt;&lt; ""Score:"";
    cin &gt;&gt; score;

    //Switch
    switch(score){
        case &gt;= 100:
            cout &lt;&lt; ""a"";
            break;
        case &gt;= 50:
            cout &lt;&lt; ""b"";
            break;
        case &gt;= 25:
            cout &lt;&lt; ""c"";
            break;
        case &gt;= 10:
            cout &lt;&lt; ""d"";
            break;
        case &gt; 0:
            cout &lt;&lt; ""e"";
            break;
        case == 0:
            cout &lt;&lt; ""f"";
            break;
        default:
            cout &lt;&lt; ""BAD VALUE"";
            break;
    }
    cout &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>How can I fix this problem? It's a console application, Win32 and my IDE is Windows Enterprise C++ 2010.</p>

<p>I'm learning from <em>Beginning C++ Through Game Programming</em>.</p>
","<p>In C++ case labels are <em>constant</em> expressions, not expressions in general. You need a chain of if-then-else statements to do what you are trying to do.</p>

<p>Alternatively, you can enumerate the values in the switch. This runs marginally faster (though it does not matter in cases like yours), but it is considerably less readable:</p>

<pre><code>switch(score) {
    case 0: cout &lt;&lt; ""f""; break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10: cout &lt;&lt; ""e""; break;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25: cout &lt;&lt; ""c""; break;
    // ...and so on, you get the idea...

}
</code></pre>
","9432252"
"Get current working directory in a Qt application","98491","","<p>I'm writing a program in C++ using the Qt library. There is a symbolic link in my home bin directory to the executable. I would like the current working directory of my program to be the directory in which I am with my terminal (ie. the result of the <code>pwd</code> command). I saw the <code>QDir::currentPath()</code> function, but it gives back the directory where the binary is.</p>

<p>How can I find my current working directory?</p>
","<p>Thank you RedX and Kaz for your answers. I don't get why by me it gives the path of the exe. I found an other way to do it : </p>

<pre><code>QString pwd("""");
char * PWD;
PWD = getenv (""PWD"");
pwd.append(PWD);
cout &lt;&lt; ""Working directory : "" &lt;&lt; pwd &lt;&lt; flush;
</code></pre>

<p>It is less elegant than a single line... but it works for me.</p>
","7413516"
"fatal error: iostream.h no such file or directory","98485","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/7338584/no-such-file-iostream-h-when-including"">No such file iostream.h when including</a>  </p>
</blockquote>



<p>Even after naming the source file with .cpp extension. my compiler gives this error, both in command prompt and Codeblocks. How can I fix this issue? </p>

<pre><code>#include &lt;iostream.h&gt;


int main(){

    cout&lt;&lt;""Hello World!\n"";
    return 0;
}
</code></pre>
","<p>That header doesn't exist in standard C++. It was part of some pre-1990s compilers, but it is certainly not part of C++.</p>

<p>Use <code>#include &lt;iostream&gt;</code> instead. And all the library classes are in the <code>std::</code> namespace, for ex&shy;am&shy;ple <code>std::cout</code>.</p>

<p>Also, throw away any book or notes that mention the thing you said.</p>
","13050004"
"Compiling an application for use in highly radioactive environments","98480","","<p>We are compiling an embedded C/C++ application that is deployed in a shielded device in an environment bombarded with <a href=""https://en.wikipedia.org/wiki/Ionizing_radiation"">ionizing radiation</a>. We are using GCC and cross-compiling for ARM. When deployed, our application generates some erroneous data and crashes more often that we would like. The hardware is designed for this environment, and our application has run on this platform for several years.</p>

<p>Are there changes we can make to our code, or compile-time improvements that can be made to identify/correct <a href=""https://en.wikipedia.org/wiki/Soft_error"">soft errors</a> and memory-corruption caused by <a href=""https://en.wikipedia.org/wiki/Single_event_upset"">single event upsets</a>? Have any other developers had success in reducing the harmful effects of soft errors on a long-running application?</p>
","<p>Working for about 4-5 years with software/firmware development and environment testing of <a href=""https://en.wikipedia.org/wiki/Miniaturized_satellite"">miniaturized satellites</a>*, I would like to share my experience here.</p>

<p>*(<em>miniaturized satellites are a lot more prone to single event upsets than bigger satellites due to its relatively small, limited sizes for its electronic components</em>)</p>

<blockquote>
  <p>To be very concise and direct: there is no mechanism to recover from <em>detectable, erroneous
  situation</em> by the software/firmware itself <em>without</em>, at least, one
  <em>copy</em> of <em>minimum working version</em> of the software/firmware <em>somewhere</em> for <em>recovery</em> purpose - and with the <em>hardware supporting the recovery</em> (functional).</p>
</blockquote>

<p>Now, this situation is normally handled both in the hardware and software level. Here, as you request, I will share what we can do in the software level.</p>

<ol>
<li><p><strong>...recovery purpose...</strong>. Provide ability to update/recompile/reflash your software/firmware in real environment. This is an <em>almost must-have</em> feature for any software/firmware in highly ionized environment. Without this, you <em>could</em> have redundant software/hardware as many as you want but at one point, they are all going to blow up. So, prepare this feature!</p></li>
<li><p><strong>...minimum working version...</strong> Have responsive, multiple copies, minimum version of the software/firmware in your code. This is like Safe mode in Windows. Instead of having only one, fully functional version of your software, have multiple copies of the minimum version of your software/firmware. The minimum copy will usually having much less size than the full copy and almost always have <em>only</em> the following two or three features: </p>

<ol>
<li>capable of listening to command from external system, </li>
<li>capable of updating the current software/firmware, </li>
<li>capable of monitoring the basic operation's housekeeping data.</li>
</ol></li>
<li><p><strong>...copy... somewhere...</strong> Have redundant software/firmware somewhere. </p>

<ol>
<li><p>You could, with <em>or</em> without redundant hardware, try to have redundant software/firmware in your ARM uC. This is normally done by having two or more identical software/firmware <em>in separate addresses</em> which sending heartbeat to each other - but only one will be active at a time. If one or more software/firmware is known to be unresponsive, switch to the other software/firmware. The benefit of using this approach is we can have functional replacement immediately after an error occurs - without any contact with whatever external system/party who is responsible to detect and to repair the error (in satellite case, it is usually the Mission Control Centre (MCC)). </p>

<p>Strictly speaking, without redundant hardware, the disadvantage of doing this is you actually <em>cannot</em> eliminate <em>all</em> single point of failures. At the very least, you will still have <em>one</em> single point of failure, which is <em>the switch itself</em> (or often the beginning of the code). Nevertheless, for a device limited by size in a highly ionized environment (such as pico/femto satellites), the reduction of the single point of failures to one point <em>without</em> additional hardware will still be worth considering. Somemore, the piece of code for the switching would certainly be much less than the code for the whole program - significantly reducing the risk of getting Single Event in it.</p></li>
<li><p>But if you are not doing this, you should have at least one copy in your external system which can come in contact with the device and update the software/firmware (in the satellite case, it is again the mission control centre). </p></li>
<li>You could also have the copy in your permanent memory storage in your device which can be triggered to restore the running system's software/firmware</li>
</ol></li>
<li><p><strong>...detectable erroneous situation..</strong> The error must be <em>detectable</em>, usually by the hardware <em>error correction/detection circuit</em> or by a small piece of code for error correction/detection. It is best to put such code small, multiple, and <em>independent</em> from the main software/firmware. Its main task is <em>only</em> for checking/correcting. If the hardware circuit/firmware is <em>reliable</em> (such as it is more radiation hardened than the rests - or having multiple circuits/logics), then you might consider making error-correction with it. But if it is not, it is better to make it as error-detection. The correction can be by external system/device. For the error correction, you could consider making use of a basic error correction algorithm like Hamming/Golay23, because they can be implemented more easily both in the circuit/software. But it ultimately depends on your team's capability. For error detection, normally CRC is used.</p></li>
<li><p><strong>...hardware supporting the recovery</strong> Now, comes to the most difficult aspect on this issue. Ultimately, the recovery requires the hardware which is responsible for the recovery to be <em>at least</em> functional. If the hardware is permanently broken (normally happen after its <strong>Total ionizing dose</strong> reaches certain level), then there is (sadly) no way for the software to help in recovery. Thus, hardware is rightly the utmost importance concern for a device exposed to high radiation level (such as satellite). </p></li>
</ol>

<p>In addition to the suggestion for above anticipating firmware's error due to single event upset, I would also like to suggest you to have:</p>

<ol>
<li><p>Error detection and/or error correction algorithm in the inter-subsystem communication protocol. This is another almost must have in order to avoid incomplete/wrong signals received from other system</p></li>
<li><p>Filter in your ADC reading. Do <em>not</em> use the ADC reading directly. Filter it by median filter, mean filter, or any other filters - <em>never</em> trust single reading value. Sample more, not less - reasonably.</p></li>
</ol>
","36831344"
"Converting bool to text in C++","98305","","<p>Maybe this is a dumb question, but is there any way to convert a boolean value to a string such that 1 turns to ""true"" and 0 turns to ""false""?  I could just use an if statement, but it would be nice to know if there is a way to do that with the language or standard libraries.  Plus, I'm a pedant.  :)</p>
","<p>How about using the C++ language itself?</p>

<pre><code>bool t = true;
bool f = false;
std::cout &lt;&lt; std::noboolalpha &lt;&lt; t &lt;&lt; "" == "" &lt;&lt; std::boolalpha &lt;&lt; t &lt;&lt; std::endl;        
std::cout &lt;&lt; std::noboolalpha &lt;&lt; f &lt;&lt; "" == "" &lt;&lt; std::boolalpha &lt;&lt; f &lt;&lt; std::endl;
</code></pre>
","29571"
"What's the C++ version of Java's ArrayList","98302","","<p>Just getting back into using C++ and trying to convert a simple Java program I wrote recently. </p>

<p>What's the preferred equivalent to the Java ArrayList in C++?</p>
","<p>Use the <a href=""http://en.cppreference.com/w/cpp/container/vector"" rel=""noreferrer""><code>std::vector</code> class</a> from the standard library.</p>
","3971051"
"C++ class forward declaration","98111","","<p>When I try to compile this code i get:</p>

<pre><code>52 C:\Dev-Cpp\Projektyyy\strategy\Tiles.h invalid use of undefined type `struct tile_tree_apple' 
46 C:\Dev-Cpp\Projektyyy\strategy\Tiles.h forward declaration of `struct tile_tree_apple' 
</code></pre>

<p>some part of my code:</p>

<pre><code>class tile_tree_apple;

class tile_tree : public tile
{
      public:
          tile onDestroy() {return *new tile_grass;};
          tile tick() {if (rand()%20==0) return *new tile_tree_apple;};
          void onCreate() {health=rand()%5+4; type=TILET_TREE;};        
};

class tile_tree_apple : public tile
{
      public:
          tile onDestroy() {return *new tile_grass;};
          tile tick() {if (rand()%20==0) return *new tile_tree;};
          void onCreate() {health=rand()%5+4; type=TILET_TREE_APPLE;}; 
          tile onUse() {return *new tile_tree;};       
};
</code></pre>

<p>I dont really know what to do, I searched for the solution but I couldnt find anything simmilar to my problem... Actually, i have more classes with parent ""tile"" and It was ok before...
Thanx for any help.</p>

<p>EDIT:</p>

<p>I decided to change all returned types to pointers to avoid memory leaks, but now I got:</p>

<pre><code>27 C:\Dev-Cpp\Projektyyy\strategy\Tiles.h ISO C++ forbids declaration of `tile' with no type 
27 C:\Dev-Cpp\Projektyyy\strategy\Tiles.h expected `;' before ""tick""
</code></pre>

<p>Its only in base class, everything else is ok... Every function in tile class which return *tile has this error...</p>

<p>Some code:</p>

<pre><code>class tile
{
      public:
          double health;
          tile_type type;
          *tile takeDamage(int ammount) {return this;};
          *tile onDestroy() {return this;};
          *tile onUse() {return this;};
          *tile tick() {return this};
          virtual void onCreate() {};
};
</code></pre>
","<p>In order for <code>new T</code> to compile, <code>T</code> must be a complete type. In your case, when you say <code>new tile_tree_apple</code> inside the definition of <code>tile_tree::tick</code>, <code>tile_tree_apple</code> is incomplete (it has been forward declared, but its definition is later in your file). Try moving the inline definitions of your functions to a separate source file, or at least move them after the class definitions.</p>

<p>Something like:</p>

<pre><code>class A
{
    void f1();
    void f2();
};
class B
{
   void f3();
   void f4();
};

inline void A::f1() {...}
inline void A::f2() {...}
inline void B::f3() {...}
inline void B::f4() {...}
</code></pre>

<p>When you write your code this way, all references to A and B in these methods are guaranteed to refer to complete types, since there are no more forward references!</p>
","9119275"
"Remove an array element and shift the remaining ones","98062","","<p>How do I remove an element of an array and shift the remaining elements down. So, if I have an array, </p>

<pre><code>array[]={1,2,3,4,5} 
</code></pre>

<p>and want to delete 3 and shift the rest so I have,</p>

<pre><code>array[]={1,2,4,5}
</code></pre>

<p>How would I go about this in the least amount of code?</p>
","<p>You just need to overwrite what you're deleting with the next value in the array, propagate that change, and then keep in mind where the new end is:</p>

<pre><code>int array[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};

// delete 3 (index 2)
for (int i = 2; i &lt; 8; ++i)
    array[i] = array[i + 1]; // copy next element left
</code></pre>

<p>Now your array is <code>{1, 2, 4, 5, 6, 7, 8, 9, 9}</code>. You cannot delete the extra <code>9</code> since this is a statically-sized array, you just have to ignore it. This can be done with <code>std::copy</code>:</p>

<pre><code>std::copy(array + 3, // copy everything starting here
          array + 9, // and ending here, not including it,
          array + 2) // to this destination
</code></pre>

<p>In C++11, use can use <code>std::move</code> (the algorithm overload, not the utility overload) instead.</p>

<p>More generally, use <code>std::remove</code> to remove elements matching a value:</p>

<pre><code>// remove *all* 3's, return new ending (remaining elements unspecified)
auto arrayEnd = std::remove(std::begin(array), std::end(array), 3);
</code></pre>

<p>Even more generally, there is <code>std::remove_if</code>.</p>

<p>Note that the use of <code>std::vector&lt;int&gt;</code> may be more appropriate here, as its a ""true"" dynamically-allocated resizing array. (In the sense that asking for its <code>size()</code> reflects removed elements.)</p>
","879666"
"Define preprocessor macro through cmake","98002","","<p>How do I define a preprocessor variable through cmake?</p>

<p>The equivalent code would be <code>#define foo</code>.</p>
","<p>CMake has the <code>add_definitions</code> command for this purpose. An example:</p>

<pre><code>    add_definitions(-DOPENCV_VERSION=${OpenCV_VERSION})
    add_definitions(-DWITH_OPENCV2)
</code></pre>

<p>Although it looks very compiler-specific, it works cross-platform due to some trickery we all know and love from CMake. CMake is such a shabby system.</p>

<p>More explanation on the command here: <a href=""https://cmake.org/cmake/help/latest/command/add_definitions.html"">https://cmake.org/cmake/help/latest/command/add_definitions.html</a></p>
","9017635"
"Undefined Reference to","97988","","<p>When I compile my code for a linked list, I get a bunch of undefined reference errors.  The code is below.  I have been compiling with both of these statements:</p>

<pre><code>g++ test.cpp 
</code></pre>

<p>as well as </p>

<pre><code>g++ LinearNode.h LinearNode.cpp LinkedList.h LinkedList.cpp test.cpp  
</code></pre>

<p>I really do not understand why I am getting these errors because I am really rusty on classes in C++.  I could really use some help.</p>

<p>LinearNode.h:</p>

<pre><code>#ifndef LINEARNODE_H
#define LINEARNODE_H
#include&lt;iostream&gt;

using namespace std;

class LinearNode
{
    public:
        //Constructor for the LinearNode class that takes no arguments 
        LinearNode();
        //Constructor for the LinearNode class that takes the element as an argument
        LinearNode(int el);
        //returns the next node in the set.
        LinearNode* getNext();
        //returns the previous node in the set
        LinearNode* getPrevious();
        //sets the next element in the set
        void setNext(LinearNode* node);
        //sets the previous element in the set
        void setPrevious(LinearNode* node);
        //sets the element of the node
        void setElement(int el);
        //gets the element of the node
        int getElement();

    private: 
        LinearNode* next;
        LinearNode* previous;
        int element;        
};//ends the LinearNode class

#endif
</code></pre>

<p>LinearNode.cpp:</p>

<pre><code>#ifndef LINEARNODE_cpp
#define LINEARNODE_cpp
#include&lt;iostream&gt;
#include""LinearNode.h""

using namespace std;

//Constructor for LinearNode, sets next and element to initialized states
LinearNode::LinearNode()
{
    next = NULL;
    element = 0;
}//ends LinearNode default constructor

//Constructor for LinearNode takes an element as argument.
LinearNode::LinearNode(int el)
{
    next = NULL;
    previous = NULL;
    element = 0;
}//ends LinearNode constructor

//returns the next element in the structure
LinearNode* LinearNode::getNext()
{
    return next;
}//ends getNext function

//returns previous element in structure
LinearNode* LinearNode::getPrevious()
{
    return previous;
}//ends getPrevious function

//sets the next variable for the node
void LinearNode::setNext(LinearNode* node)
{
    next = node;
}//ends the setNext function

//sets previous for the node
void LinearNode::setPrevious(LinearNode* node)
{
    previous = node;
}//ends the setPrevious function

//returns element of the node
int LinearNode::getElement()
{
    return element;
}//ends the getelement function

//sets the element of the node
void LinearNode::setElement(int el)
{
    element = el;
}//ends the setElement function

#endif
</code></pre>

<p>LinkedList.h:</p>

<pre><code>#ifndef LINKEDLIST_H
#define LINKEDLIST_H
#include&lt;iostream&gt;
#include""LinearNode.h""

using namespace std;

class LinkedList
{
    public:
        LinkedList();
        void add(int element);
        int removie (int element);

    private:
        int count;
        LinearNode *contents;
};//ends the class linked list

#endif
</code></pre>

<p>LinkedList.cpp:</p>

<pre><code>#ifndef LINKEDLIST_CPP
#define LINKEDLIST_CPP

#include&lt;iostream&gt;
#include""LinearNode.h""
#include""LinkedList.h""

using namespace std;

//linkedlist constructor for an empty linked list
LinkedList::LinkedList()
{
    count = 0;
    contents = NULL;
}//ends the constructor

//adds an element to the front of the linked list
void LinkedList::add(int element)
{
    int found = 0, current = 0;

    while( (found == 0) &amp;&amp; (current !=count) )
    {
        if (contents.getElement() == element)
            found = 1;
        else    
        {
            contents = contents.getNext();
            current++;
        }//ends the else statement
    }//ends the while loop

    if (found == 0)
    {
        LinearNode node = new LinearNode(element);
        node.setNext(contents);
        contents.setPrevious(node);
        count++;
    }//ends the found == 0 if statment
}//ends the add function

//this function removes one element from the linked list.
int LinearNode::remove(int element)
{
    int found = 0;

    if (count == 0)
        cout &lt;&lt; ""The list is empty"" &lt;&lt; endl;
    else 
    {
        if (contents.getElement() == element)
        {
            result = contents.getElement();
            contents = contents.getNext();
        }//ends the contents.getElement() == element
        else 
        {
            previous = contents;
            current = contents.getNext();
            for (int index = 0; ( (index &lt; count) &amp;&amp; (found == 0) )index++)
                if (current.getElement() = element)
                    found = 1;
                else
                {
                    previous = current;
                    current = current.getNext();
                }//ends the else statement 

            if (found == 0)
                cout &lt;&lt; ""The element is not in the list"" &lt;&lt; endl;
            else
            {
                result = current.getElement();
                previous.setNext(current.getNext());
            }//ends else statement  

        }//ends the else stamtement

        count--;
    }//ends the else statement of count == 0
    return result;
}//ends the remove function

#endif
</code></pre>

<p>test.cpp:</p>

<pre><code>#include&lt;iostream&gt;
#include""LinearNode.h""
#include""LinkedList.h""

using namespace std;

int main()
{

    LinearNode node1, node2, node3, move;
    LinkedList list;    

    node1.setElement(1);
    node2.setElement(2);
    node3.setElement(3);
}   
</code></pre>
","<ol>
<li>Usually headers guards are for header files (i.e., <code>.h</code> ) not for source files ( i.e., <code>.cpp</code> ). </li>
<li>Include the necessary standard headers and namespaces in source files.</li>
</ol>

<p><strong>LinearNode.h:</strong></p>

<pre><code>#ifndef LINEARNODE_H
#define LINEARNODE_H

class LinearNode
{
    // .....
};

#endif
</code></pre>

<p><strong>LinearNode.cpp:</strong></p>

<pre><code>#include ""LinearNode.h""
#include &lt;iostream&gt;
using namespace std;
// And now the definitions
</code></pre>

<p><strong>LinkedList.h:</strong></p>

<pre><code>#ifndef LINKEDLIST_H
#define LINKEDLIST_H

class LinearNode; // Forward Declaration
class LinkedList
{
    // ...
};

#endif
</code></pre>

<p><strong>LinkedList.cpp</strong></p>

<pre><code>#include ""LinearNode.h""
#include ""LinkedList.h""
#include &lt;iostream&gt;
using namespace std;

// Definitions
</code></pre>

<p><strong>test.cpp</strong> is source file is fine. Note that header files are never compiled. Assuming all the files are in a single folder -</p>

<pre><code>g++ LinearNode.cpp LinkedList.cpp test.cpp -o exe.out
</code></pre>
","5293199"
"Concatenate two string literals","97932","","<p>I am very new to programming, and am reading Accelerated C++ by Koenig. Anyways, I am learning about strings and he writes that ""the new idea is that we can use + to concatenate a string and a string literal - or, for that matter, two strings (but not two string literals).</p>

<p>Fine, this makes sense I suppose. Now onto two separate exercises meant to illuminate this . </p>

<p>Are the following definitions valid?</p>

<pre><code>const string hello = ""Hello"";

const string message = hello + "",world"" + ""!"";
</code></pre>

<p>Now, I tried to execute the above and it worked! So I was happy.</p>

<p>Then I tried to do the next exercise; </p>

<pre><code>const string exclam = ""!"";

const string message = ""Hello"" + "",world"" + exclam;
</code></pre>

<p>This did not work. Now I understand it has something to do with the fact that you cannot concatenate two string literals, but I don't understand the semantic difference between why I managed to get the first example to work (isn't "",world"" and ""!"" two string literals? SHouldn't this not have worked?) but not the second.</p>

<p>Thank you!</p>
","<pre><code>const string message = ""Hello"" + "",world"" + exclam;
</code></pre>

<p>The <code>+</code> operator has left-to-right associativity, so the equivalent parenthesized expression is:</p>

<pre><code>const string message = ((""Hello"" + "",world"") + exclam);
</code></pre>

<p>As you can see, the two string literals <code>""Hello""</code> and <code>"",world""</code> are ""added"" first, hence the error.</p>

<p>One of the first two strings being concatenated must be a <code>std::string</code> object:</p>

<pre><code>const string message = string(""Hello"") + "",world"" + exclam;
</code></pre>

<p>Alternatively, you can force the second <code>+</code> to be evaluated first by parenthesizing that part of the expression:</p>

<pre><code>const string message = ""Hello"" + ("",world"" + exclam);
</code></pre>

<p>It makes sense that your first example (<code>hello + "",world"" + ""!""</code>) works because the <code>std::string</code> (<code>hello</code>) is one of the arguments to the leftmost <code>+</code>.  That <code>+</code> is evaluated, the result is a <code>std::string</code> object with the concatenated string, and that resulting <code>std::string</code> is then concatenated with the <code>""!""</code>.</p>

<hr>

<p>As for <em>why</em> you can't concatenate two string literals using <code>+</code>, it is because a string literal is just an array of characters (a <code>const char [N]</code> where <code>N</code> is the length of the string plus one, for the null terminator).  When you use an array in most contexts, it is converted into a pointer to its initial element.  </p>

<p>So, when you try to do <code>""Hello"" + "",world""</code>, what you're really trying to do is add two <code>const char*</code>s together, which isn't possible (what would it mean to add two pointers together?) and if it was it wouldn't do what you wanted it to do. </p>

<hr>

<p>Note that you <em>can</em> concatenate string literals by placing them next to each other; for example, the following two are equivalent:</p>

<pre><code>""Hello"" "",world""
""Hello,world""
</code></pre>

<p>This is useful if you have a long string literal that you want to break up onto multiple lines.  They have to be string literals, though:  this won't work with <code>const char*</code> pointers or <code>const char[N]</code> arrays.</p>
","6061677"
"How to convert a const char * to std::string","97917","","<p>What is the correct/best/simplest way to convert a c-style string to a std::string.</p>

<p>The conversion should accept a max_length, and terminate the string at the first \0 char, if this occur before max_length charter.</p>
","<p>This page on <a href=""http://en.cppreference.com/w/cpp/string/basic_string/basic_string"" rel=""noreferrer""><code>string::string</code></a> gives two potential constructors that would do what you want:</p>

<pre><code>string ( const char * s, size_t n );
string ( const string&amp; str, size_t pos, size_t n = npos );
</code></pre>

<p>Example:</p>

<pre><code>#include&lt;cstdlib&gt;
#include&lt;cstring&gt;
#include&lt;string&gt;
#include&lt;iostream&gt;
using namespace std;

int main(){

    char* p= (char*)calloc(30, sizeof(char));
    strcpy(p, ""Hello world"");

    string s(p, 15);
    cout &lt;&lt; s.size() &lt;&lt; "":["" &lt;&lt; s &lt;&lt; ""]"" &lt;&lt; endl;
    string t(p, 0, 15);
    cout &lt;&lt; t.size() &lt;&lt; "":["" &lt;&lt; t &lt;&lt; ""]"" &lt;&lt; endl;

    free(p);
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>15:[Hello world]
11:[Hello world]
</code></pre>

<p>The first form considers <code>p</code> to be a simple array, and so will create (in our case) a string of length 15, which however prints as a 11-character null-terminated string with <code>cout &lt;&lt; ...</code>. Probably not what you're looking for.</p>

<p>The second form will implicitly convert the <code>char*</code> to a string, and then keep the maximum between its length and the <code>n</code> you specify. I think this is the simplest solution, in terms of what you have to write.</p>
","8126643"
"Is < faster than <=?","97845","","<p>I'm reading a book where the author says that <code>if( a &lt; 901 )</code> is faster than <code>if( a &lt;= 900 )</code>. </p>

<p>Not exactly as in this simple example, but there are slight performance changes on loop complex code. I suppose this has to do something with generated machine code in case it's even true.</p>
","<p>No, it will not be faster on most architectures. You didn't specify, but on x86, all of the integral comparisons will be typically implemented in two machine instructions:</p>

<ul>
<li>A <code>test</code> or <code>cmp</code> instruction, which sets <code>EFLAGS</code></li>
<li>And a <a href=""http://www.unixwiz.net/techtips/x86-jumps.html""><code>Jcc</code> (jump) instruction</a>, depending on the comparison type (and code layout):
<ul>
<li><code>jne</code> - Jump if not equal --> <code>ZF = 0</code></li>
<li><code>jz</code> - Jump if zero (equal) --> <code>ZF = 1</code></li>
<li><code>jg</code> - Jump if greater --> <code>ZF = 0 and SF = OF</code></li>
<li>(etc...)</li>
</ul></li>
</ul>

<hr>

<p><strong>Example</strong> (Edited for brevity) Compiled with <code>$ gcc -m32 -S -masm=intel test.c</code></p>

<pre class=""lang-c prettyprint-override""><code>    if (a &lt; b) {
        // Do something 1
    }
</code></pre>

<p>Compiles to:</p>

<pre class=""lang-none prettyprint-override""><code>    mov     eax, DWORD PTR [esp+24]      ; a
    cmp     eax, DWORD PTR [esp+28]      ; b
    jge     .L2                          ; jump if a is &gt;= b
    ; Do something 1
.L2:
</code></pre>

<p>And</p>

<pre class=""lang-c prettyprint-override""><code>    if (a &lt;= b) {
        // Do something 2
    }
</code></pre>

<p>Compiles to:</p>

<pre class=""lang-none prettyprint-override""><code>    mov     eax, DWORD PTR [esp+24]      ; a
    cmp     eax, DWORD PTR [esp+28]      ; b
    jg      .L5                          ; jump if a is &gt; b
    ; Do something 2
.L5:
</code></pre>

<p>So the only difference between the two is a <code>jg</code> versus a <code>jge</code> instruction. The two will take the same amount of time.</p>

<hr>

<p>I'd like to address the comment that nothing indicates that the different jump instructions take the same amount of time.  This one is a little tricky to answer, but here's what I can give: In the <a href=""http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html"">Intel Instruction Set Reference</a>, they are all grouped together under one common instruction, <code>Jcc</code> (Jump if condition is met). The same grouping is made together under the <a href=""http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-optimization-manual.html"">Optimization Reference Manual</a>, in Appendix C. Latency and Throughput.</p>

<blockquote>
  <p><strong>Latency</strong> — The number of clock cycles that are required for the
  execution core to  complete the execution of all of the μops that form
  an instruction.</p>
  
  <p><strong>Throughput</strong> — The number of clock cycles required to
  wait before the issue  ports are free to accept the same instruction
  again. For many instructions, the  throughput of an instruction can be
  significantly less than its latency</p>
</blockquote>

<p>The values for <code>Jcc</code> are:</p>

<pre class=""lang-none prettyprint-override""><code>      Latency   Throughput
Jcc     N/A        0.5
</code></pre>

<p>with the following footnote on <code>Jcc</code>:</p>

<blockquote>
  <p>7) Selection of conditional jump instructions should be based on the recommendation of section Section 3.4.1, “Branch Prediction Optimization,” to improve the  predictability of branches. When branches are predicted successfully, the latency of <code>jcc</code> is effectively zero.</p>
</blockquote>

<p>So, nothing in the Intel docs ever treats one <code>Jcc</code> instruction any differently from the others.</p>

<p>If one thinks about the actual circuitry used to implement the instructions, one can assume that there would be simple AND/OR gates on the different bits in <code>EFLAGS</code>, to determine whether the conditions are met. There is then, no reason that an instruction testing two bits should take any more or less time than one testing only one (Ignoring gate propagation delay, which is much less than the clock period.)</p>

<hr>

<p><strong>Edit: Floating Point</strong></p>

<p>This holds true for x87 floating point as well:  (Pretty much same code as above, but with <code>double</code> instead of <code>int</code>.)</p>

<pre class=""lang-none prettyprint-override""><code>        fld     QWORD PTR [esp+32]
        fld     QWORD PTR [esp+40]
        fucomip st, st(1)              ; Compare ST(0) and ST(1), and set CF, PF, ZF in EFLAGS
        fstp    st(0)
        seta    al                     ; Set al if above (CF=0 and ZF=0).
        test    al, al
        je      .L2
        ; Do something 1
.L2:

        fld     QWORD PTR [esp+32]
        fld     QWORD PTR [esp+40]
        fucomip st, st(1)              ; (same thing as above)
        fstp    st(0)
        setae   al                     ; Set al if above or equal (CF=0).
        test    al, al
        je      .L5
        ; Do something 2
.L5:
        leave
        ret
</code></pre>
","12135533"
"What are the most widely used C++ vector/matrix math/linear algebra libraries, and their cost and benefit tradeoffs?","97551","","<p>It seems that many projects slowly come upon a need to do matrix math, and fall into the trap of first building some vector classes and slowly adding in functionality until they get caught building a half-assed custom linear algebra library, and depending on it. </p>

<p>I'd like to avoid that while not building in a dependence on some tangentially related library (e.g. OpenCV, OpenSceneGraph). </p>

<p>What are the commonly used matrix math/linear algebra libraries out there, and why would decide to use one over another? Are there any that would be advised against using for some reason? I am specifically using this in a geometric/time context*(2,3,4 Dim)* but may be using higher dimensional data in the future. </p>

<p>I'm looking for differences with respect to any of: API, speed, memory use, breadth/completeness, narrowness/specificness, extensibility, and/or maturity/stability.</p>

<h2>Update</h2>

<p>I ended up using Eigen3 which I am extremely happy with.</p>
","<p>There are quite a few projects that have settled on the <a href=""http://ggt.sourceforge.net/"" rel=""noreferrer"">Generic Graphics Toolkit</a> for this.  The GMTL in there is nice - it's quite small, very functional, and been used widely enough to be very reliable.   OpenSG, VRJuggler, and other projects have all switched to using this instead of their own hand-rolled vertor/matrix math.</p>

<p>I've found it quite nice - it does everything via templates, so it's very flexible, and very fast.</p>

<hr>

<p>Edit:</p>

<p>After the comments discussion, and edits, I thought I'd throw out some more information about the benefits and downsides to specific implementations, and why you might choose one over the other, given your situation.</p>

<p><a href=""http://ggt.sourceforge.net/"" rel=""noreferrer"">GMTL</a> - </p>

<p>Benefits: Simple API, specifically designed for graphics engines.  Includes many primitive types geared towards rendering (such as planes, AABB, quatenrions with multiple interpolation, etc) that aren't in any other packages.  Very low memory overhead, quite fast, easy to use.</p>

<p>Downsides: API is very focused specifically on rendering and graphics.  Doesn't include general purpose (NxM) matrices, matrix decomposition and solving, etc, since these are outside the realm of traditional graphics/geometry applications.</p>

<p><a href=""http://eigen.tuxfamily.org/index.php?title=Main_Page"" rel=""noreferrer"">Eigen</a> -</p>

<p>Benefits: <a href=""http://eigen.tuxfamily.org/index.php?title=API_Showcase"" rel=""noreferrer"">Clean API</a>, fairly easy to use.  Includes a <a href=""http://eigen.tuxfamily.org/dox/group__Geometry__Module.html"" rel=""noreferrer"">Geometry module</a> with quaternions and geometric transforms.  Low memory overhead.  Full, <a href=""http://eigen.tuxfamily.org/index.php?title=Benchmark"" rel=""noreferrer"">highly performant</a> solving of large NxN matrices and other general purpose mathematical routines.</p>

<p>Downsides: May be a bit larger scope than you are wanting (?).  Fewer geometric/rendering specific routines when compared to GMTL (ie: Euler angle definitions, etc).</p>

<p><a href=""http://www.vni.com/analysis/c.php"" rel=""noreferrer"">IMSL</a> -</p>

<p>Benefits: Very complete numeric library.  Very, very fast (supposedly the fastest solver).  By far the largest, most complete mathematical API.  Commercially supported, mature, and stable.</p>

<p>Downsides: Cost - not inexpensive.  Very few geometric/rendering specific methods, so you'll need to roll your own on top of their linear algebra classes.</p>

<p><a href=""http://nt2.sourceforge.net/"" rel=""noreferrer"">NT2</a> - </p>

<p>Benefits: Provides syntax that is more familiar if you're used to MATLAB.  Provides full decomposition and solving for large matrices, etc.</p>

<p>Downsides: Mathematical, not rendering focused.  Probably not as performant as Eigen.</p>

<p><a href=""http://en.wikipedia.org/wiki/LAPACK"" rel=""noreferrer"">LAPACK</a> -</p>

<p>Benefits: Very stable, proven algorithms.  Been around for a long time.  Complete matrix solving, etc.  Many options for obscure mathematics.</p>

<p>Downsides: Not as highly performant in some cases.  Ported from Fortran, with odd API for usage.</p>

<p>Personally, for me, it comes down to a single question - how are you planning to use this.  If you're focus is just on rendering and graphics, I like <a href=""http://ggt.sourceforge.net/"" rel=""noreferrer"">Generic Graphics Toolkit</a>, since it performs well, and supports many useful rendering operations out of the box without having to implement your own.  If you need general purpose matrix solving (ie: SVD or LU decomposition of large matrices), I'd go with <a href=""http://eigen.tuxfamily.org/index.php?title=Main_Page"" rel=""noreferrer"">Eigen</a>, since it handles that, provides some geometric operations, and is very performant with large matrix solutions.  You may need to write more of your own graphics/geometric operations (on top of their matrices/vectors), but that's not horrible.</p>
","1380432"
"What does LPCWSTR stand for and how should it be handled with?","97513","","<p>First of all, what is it exactly? I guess it is a pointer (LPC means long pointer constant), but what does ""W"" mean? Is it a specific pointer to a string or a pointer to a specific string?
 For example I want to close a Window named ""TestWindow"". </p>

<pre><code>HWND g_hTest;
LPCWSTR a;
*a = (""TestWindow"");
g_hTest = FindWindowEx(NULL, NULL, NULL, a);
DestroyWindow(g_hTest);
</code></pre>

<p>The code is illegal and it doesn't work since const char[6] cannot be converted to CONST WCHAR.
I don't get it at all. 
I want to get a clear understanding of all these LPCWSTR, LPCSTR, LPSTR. I tried to find something , however I got confused even more. At msdn site <code>FindWindowEx</code> is declared as </p>

<pre><code>HWND FindWindowEx(      
    HWND hwndParent,
    HWND hwndChildAfter,
    LPCTSTR lpszClass,
    LPCTSTR lpszWindow
);
</code></pre>

<p>So the last parameter is LPCSTR, and the compiler demands on LPCWSTR. 
Please help.</p>
","<p><code>LPCWSTR</code> stands for ""Long Pointer to Constant Wide String"". The W stands for Wide and means that the string is stored in a 2 byte character vs. the normal <code>char</code>.  Common for any C/C++ code that has to deal with non-ASCII only strings.=</p>

<p>To get a normal C literal string to assign to a <code>LPCWSTR</code>, you need to prefix it with L</p>

<pre><code>LPCWSTR a = L""TestWindow"";
</code></pre>
","2230778"
"Can I compile all .cpp files in src/ to .o's in obj/, then link to binary in ./?","97489","","<p>My project directory looks like this:</p>

<pre><code>/project
    Makefile
    main
    /src
        main.cpp
        foo.cpp
        foo.h
        bar.cpp
        bar.h
    /obj
        main.o
        foo.o
        bar.o
</code></pre>

<p>What I would like my makefile to do would be to compile all <code>.cpp</code> files in the <code>/src</code> folder to <code>.o</code> files in the <code>/obj</code> folder, then link all the <code>.o</code> files in <code>/obj</code> into the output binary in the top-level folder <code>/project</code>.</p>

<p>I have next to no experience with Makefiles, and am not really sure what to search for to accomplish this.</p>

<p>Also, is this a ""good"" way to do this, or is there a more standard approach to what I'm trying to do?</p>
","<p><strong>Makefile part of the question</strong></p>

<p>This is pretty easy, unless you don't need to generalize
try something like the code below (but replace space indentation with tabs near g++)</p>

<pre class=""lang-none prettyprint-override""><code>SRC_DIR := .../src
OBJ_DIR := .../obj
SRC_FILES := $(wildcard $(SRC_DIR)/*.cpp)
OBJ_FILES := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(SRC_FILES))
LDFLAGS := ...
CPPFLAGS := ...
CXXFLAGS := ...

main.exe: $(OBJ_FILES)
   g++ $(LDFLAGS) -o $@ $^

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
   g++ $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $&lt;
</code></pre>

<hr>

<p><strong>Automatic dependency graph generation</strong></p>

<p>A ""must"" feature for most make systems. With GCC in can be done in a single pass as a side effect of the compilation by adding <code>-MMD</code> flag to <code>CXXFLAGS</code> and <code> -include $(OBJ_FILES:.o=.d) </code> to the end of the makefile body:</p>

<pre class=""lang-none prettyprint-override""><code>CXXFLAGS += -MMD
-include $(OBJ_FILES:.o=.d)
</code></pre>

<p>And as guys mentioned already, always have <a href=""http://www.gnu.org/software/make/manual/make.html"" rel=""noreferrer"">GNU Make Manual</a> around, it is very helpful.</p>
","2908351"
"Accessing a matrix element in the ""Mat"" object (not the CvMat object) in OpenCV C++","97451","","<p>How to access elements by row, col in OpenCV 2.0's new ""Mat"" class? The documentation is linked below, but I have not been able to make any sense of it. 
<a href=""http://opencv.willowgarage.com/documentation/cpp/basic_structures.html#mat"" rel=""nofollow noreferrer"">http://opencv.willowgarage.com/documentation/cpp/basic_structures.html#mat</a></p>
","<p>On the documentation:</p>

<p><a href=""http://docs.opencv.org/2.4/modules/core/doc/basic_structures.html#mat"" rel=""noreferrer"">http://docs.opencv.org/2.4/modules/core/doc/basic_structures.html#mat</a></p>

<p>It says:</p>

<blockquote>
  <p>(...) if you know the matrix element
  type, e.g. it is float, then you can
  use at&lt;>() method</p>
</blockquote>

<p>That is, you can use:</p>

<pre><code>Mat M(100, 100, CV_64F);
cout &lt;&lt; M.at&lt;double&gt;(0,0);
</code></pre>

<p>Maybe it is easier to use the <code>Mat_</code> class. It is a template wrapper for <code>Mat</code>. 
<code>Mat_</code> has the <code>operator()</code> overloaded in order to access the elements.</p>
","1846363"
"Reading string by char till end of line C/C++","97436","","<p>How to read a string one char at the time, and stop when you reach end of line? I'am using fgetc function to read from file and put chars to array (latter will change array to malloc), but can't figure out how to stop when the end of line is reached</p>

<p>Tried this (c is the variable with char from file):</p>

<pre><code>if(c==""\0"")
</code></pre>

<p>But it gives error that I cant compare pointer to integer </p>

<p>File looks like (the length of the words are unknown):</p>

<pre><code>one
two
three
</code></pre>

<p>So here comes the questions:
1) Can I compare c with \0 as \0 is two symbols (\ and 0) or is it counted as one (same question with \n)
2) Maybe I should use \n ?
3) If suggestions above are wrong what would you suggest (note I must read string one char at the time)</p>

<p>(Note I am pretty new to C++(and programming it self))</p>
","<p>You want to use single quotes:</p>

<pre><code>if(c=='\0')
</code></pre>

<p>Double quotes ("") are for strings, which are sequences of characters.  Single quotes (') are for individual characters.</p>

<p>However, the end-of-line is represented by the newline character, which is '\n'.</p>

<p>Note that in both cases, the backslash is not part of the character, but just a way you represent special characters.  Using backslashes you can represent various unprintable characters and also characters which would otherwise confuse the compiler.</p>
","23726736"
"A free tool to check C/C++ source code against a set of coding standards?","97232","","<p>It looks quite easy to find such a tool for Java (<a href=""http://checkstyle.sourceforge.net/"" rel=""noreferrer"">Checkstyle</a>, <a href=""http://jcsc.sourceforge.net/"" rel=""noreferrer"">JCSC</a>), but I can't seem to find one for C/C++. I am not looking for a lint-like static code analyzer, I only would like to check against coding standards like variable naming, capitalization, spacing, identation, bracket placement, and so on.</p>
","<p>The only tool I know is <a href=""http://bitbucket.org/verateam/vera"" rel=""noreferrer"">Vera</a>. Haven't used it, though, so can't comment how viable it is. <a href=""http://www.inspirel.com/vera/ce/demo.html"" rel=""noreferrer"">Demo</a> looks promising.</p>
","93291"
"calling the base class constructor in the derived class constructor","97189","","<p>I have a question:</p>

<p>Say I have originally these classes which I can't change (let's say cause they're taken from a library which I'm using):</p>

<pre><code>class Animal_
{
public:
    Animal_();
    int getIdA()
    {
        return idA;
    };
    string getNameA()
    {
        return nameA;
    }
private:
    string nameA;
    int idA;
}

class Farm
{
public :
    Farm()
    {
        sizeF=0;
    }
    Animal_* getAnimal_(int i)
    {
        return animals_[i];
    }
    void addAnimal_(Animal_* newAnimal)
    {
        animals_[sizeF]=newAnimal;
        sizeF++;
    }

private:
    int sizeF;
    Animal_* animals_[max];
}
</code></pre>

<p>But then I needed a class where I just add couple of fields so I did this:</p>

<pre><code>class PetStore : public Farm
{
public :
    PetStore()
    {
     idF=0;
    };
private:
    int idF;
    string nameF;
}
</code></pre>

<p>But I can't initialize my derived class, I mean I did this Inheritance so I can add animals to my PetStore but now since sizeF is private how can I do that? I'm thinking maybe in the PetStore default constructor I can call Farm()... so any idea?</p>
","<p>The constructor of <code>PetStore</code> will call a constructor of <code>Farm</code>; there's
no way you can prevent it.  If you do nothing (as you've done), it will
call the default constructor (<code>Farm()</code>); if you need to pass arguments,
you'll have to specify the base class in the initializer list: </p>

<pre><code>PetStore::PetStore()
    : Farm( neededArgument )
    , idF( 0 )
{
}
</code></pre>

<p>(Similarly, the constructor of <code>PetStore</code> will call the constructor of
<code>nameF</code>.  The constructor of a class <em>always</em> calls the constructors of
all of its base classes and all of its members.)</p>
","10282879"
"How to initialize a private static const map in C++?","97130","","<p>I need just dictionary or associative array <code>string</code> => <code>int</code>.</p>

<p>There is type map C++ for this case.</p>

<p>But I need only one map forall instances(-> static) and this map can't be changed(-> const);</p>

<p>I have found this way with boost library</p>

<pre><code> std::map&lt;int, char&gt; example = 
      boost::assign::map_list_of(1, 'a') (2, 'b') (3, 'c');
</code></pre>

<p>Is there other solution without this lib?
I have tried something like this, but there are always some issues with map initialization.</p>

<pre><code>class myClass{
private:
    static map&lt;int,int&gt; create_map()
        {
          map&lt;int,int&gt; m;
          m[1] = 2;
          m[3] = 4;
          m[5] = 6;
          return m;
        }
    static map&lt;int,int&gt; myMap =  create_map();

};
</code></pre>
","<pre><code>#include &lt;map&gt;
using namespace std;

struct A{
    static map&lt;int,int&gt; create_map()
        {
          map&lt;int,int&gt; m;
          m[1] = 2;
          m[3] = 4;
          m[5] = 6;
          return m;
        }
    static const map&lt;int,int&gt; myMap;

};

const map&lt;int,int&gt; A:: myMap =  A::create_map();

int main() {
}
</code></pre>
","2636338"
"C++: splitting a string into an array","97126","","<p>I am trying to insert a string separated by spaces into an array of strings <em>without</em> using vector in C++. For example:</p>

<pre><code>using namespace std;
int main() {
    string line = ""test one two three."";
    string arr[4];

    //codes here to put each word in string line into string array arr
    for(int i = 0; i &lt; 4; i++) {
        cout &lt;&lt; arr[i] &lt;&lt; endl;
    }
}
</code></pre>

<p>I want the output to be:</p>

<pre><code>test
one
two
three.
</code></pre>

<p>I know there are already a lot of questions asking string > array in C++. I realize this might be a duplicate question, but I could not find any answer satisfying my conditions (splitting a string into an array WITHOUT using vector). I apologize in advanced if this was a repeated question.</p>
","<p>It is possible to turn the string into a stream by using the <a href=""http://www.cplusplus.com/reference/sstream/stringstream/"" rel=""noreferrer""><code>std::stringstream</code></a> class (its constructor takes a string as parameter). Once it's built, you can use the <code>&gt;&gt;</code> operator on it (like on regular file based streams), which will extract, or <em>tokenize</em> word from it:</p>

<pre><code>#include &lt;sstream&gt;

using namespace std;

int main(){
    string line = ""test one two three."";
    string arr[4];
    int i = 0;
    stringstream ssin(line);
    while (ssin.good() &amp;&amp; i &lt; 4){
        ssin &gt;&gt; arr[i];
        ++i;
    }
    for(i = 0; i &lt; 4; i++){
        cout &lt;&lt; arr[i] &lt;&lt; endl;
    }
}
</code></pre>
","16029565"
"What is ""cache-friendly"" code?","97099","","<p>What is the difference between ""cache unfriendly code"" and the ""cache friendly"" code?</p>

<p>How can I make sure I write cache-efficient code? </p>
","<h2>Preliminaries</h2>

<p>On modern computers, only the lowest level memory structures (the <strong>registers</strong>) can move data around in single clock cycles. However, registers are very expensive and most computer cores have less than a few dozen registers (few hundred to maybe a thousand <em>bytes</em> total).  At the other end of the memory spectrum (<strong>DRAM</strong>), the memory is very cheap (i.e. literally <em>millions of times cheaper</em>) but takes hundreds of cycles after a request to receive the data.  To bridge this gap between super fast and expensive and super slow and cheap are the <strong>cache memories</strong>, named L1, L2, L3 in decreasing speed and cost. The idea is that most of the executing code will be hitting a small set of variables often, and the rest (a much larger set of variables) infrequently. If the processor can't find the data in L1 cache, then it looks in L2 cache. If not there, then L3 cache, and if not there, main memory. Each of these ""misses"" is expensive in time.</p>

<p>(The analogy is cache memory is to system memory, as system memory is to hard disk storage. Hard disk storage is super cheap, but very slow).</p>

<p>Caching is one of the main methods to reduce the impact of <em>latency</em> (cfr. the Herb Sutter talk I linked at the start). To paraphrase Herb Sutter (cfr. links below): <strong>increasing bandwidth is easy, but we can't buy our way out of latency</strong>.</p>

<p>Data is always retrieved through the memory hierarchy (smallest == fastest to slowest). A <em>cache hit/miss</em> usually refers to a hit/miss in the highest level of cache in the CPU -- by highest level I mean the largest == slowest. The cache hit rate is crucial for performance, since every cache miss results in fetching data from RAM (or worse ...) which takes <strong><em>a lot</em></strong> of time (hundreds of cycles for RAM, tens of millions of cycles for HDD). In comparison, reading data from the (highest level) cache typically takes only a handful of cycles.</p>

<p>In modern computer architectures, the performance bottleneck is leaving the CPU die (e.g. accessing RAM or higher). This will only get worse over time. The increase in processor frequency is currently no longer relevant to increase performance. <strong>The problem is memory access.</strong> Hardware design efforts in CPUs therefore currently focus heavily on optimizing caches, prefetching, pipelines and concurrency. For instance, modern CPUs spend around 85% of die on caches and up to 99% for storing/moving data!</p>

<p>There is quite a lot to be said on the subject. Here are a few great references about caches, memory hierarchies and proper programming:</p>

<ul>
<li><a href=""http://www.agner.org/optimize/"" rel=""noreferrer"">Agner Fog's page</a>. In his excellent documents, you can find detailed examples covering languages ranging from assembly to C++. </li>
<li>If you are into videos, I strongly recommend to have a look at  <a href=""http://www.youtube.com/watch?v=L7zSU9HI-6I"" rel=""noreferrer"">Herb Sutter's talk on machine architecture (youtube)</a> (specifically check 12:00 and onwards!).</li>
<li><a href=""http://www.research.scea.com/research/pdfs/GDC2003_Memory_Optimization_18Mar03.pdf"" rel=""noreferrer"">Slides about memory optimization by Christer Ericson</a> (director of technology @ Sony)</li>
<li>LWN.net's article <a href=""http://lwn.net/Articles/250967/"" rel=""noreferrer"">""<em>What every programmer should know about memory</em>""</a></li>
</ul>

<h2>Main concepts for cache-friendly code</h2>

<p>A very important aspect of cache-friendly code is all about <strong><a href=""http://en.wikipedia.org/wiki/Locality_of_reference"" rel=""noreferrer"">the principle of locality</a></strong>, the goal of which is to place related data close in memory to allow efficient caching. In terms of the CPU cache, it's important to be aware of cache lines to understand how this works: <a href=""https://stackoverflow.com/questions/3928995/how-do-cache-lines-work"">How do cache lines work?</a> </p>

<p>The following particular aspects are of high importance to optimize caching:</p>

<ol>
<li><strong>Temporal locality</strong>: when a given memory location was accessed, it is likely that the same location is accessed again in the near future. Ideally, this information will still be cached at that point.</li>
<li><strong>Spatial locality</strong>: this refers to placing related data close to eachother. Caching happens on many levels, not just in the CPU. For example, when you read from RAM, typically a larger chunk of memory is fetched than what was specifically asked for because very often the program will require that data soon. HDD caches follow the same line of thought. Specifically for CPU caches, the notion of <em>cache lines</em> is important.</li>
</ol>

<p><strong>Use appropriate <a href=""/questions/tagged/c%2b%2b"" class=""post-tag"" title=""show questions tagged &#39;c++&#39;"" rel=""tag"">c++</a> containers</strong></p>

<p>A simple example of cache-friendly versus cache-unfriendly is <a href=""/questions/tagged/c%2b%2b"" class=""post-tag"" title=""show questions tagged &#39;c++&#39;"" rel=""tag"">c++</a>'s <code>std::vector</code> versus <code>std::list</code>. Elements of a <code>std::vector</code> are stored in contiguous memory, and as such accessing them is <em>much</em> more cache-friendly than accessing elements in a <code>std::list</code>, which stores its content all over the place. This is due to spatial locality.</p>

<p>A very nice illustration of this is given by Bjarne Stroustrup in <a href=""http://www.youtube.com/watch?v=YQs6IC-vgmo"" rel=""noreferrer"">this youtube clip</a> (thanks to @Mohammad Ali Baydoun for the link!).</p>

<p><strong>Don't neglect the cache in data structure and algorithm design</strong></p>

<p>Whenever possible, try to adapt your data structures and order of computations in a way that allows maximum use of the cache. An common technique in this regard is <a href=""http://www.cs.berkeley.edu/~richie/cs267/mg/report/node35.html"" rel=""noreferrer"">cache blocking</a> <a href=""https://web.archive.org/web/20140113145619/http://www.cs.berkeley.edu/~richie/cs267/mg/report/node35.html"" rel=""noreferrer"">(Archive.org version)</a>, which is of extreme importance in high-performance computing (cfr. for example <a href=""http://en.wikipedia.org/wiki/Automatically_Tuned_Linear_Algebra_Software"" rel=""noreferrer"">ATLAS</a>).</p>

<p><strong>Know and exploit the implicit structure of data</strong></p>

<p>Another simple example, which many people in the field sometimes forget is column-major (ex. <a href=""/questions/tagged/fortran"" class=""post-tag"" title=""show questions tagged &#39;fortran&#39;"" rel=""tag"">fortran</a>,<a href=""/questions/tagged/matlab"" class=""post-tag"" title=""show questions tagged &#39;matlab&#39;"" rel=""tag"">matlab</a>) vs. row-major ordering (ex. <a href=""/questions/tagged/c"" class=""post-tag"" title=""show questions tagged &#39;c&#39;"" rel=""tag"">c</a>,<a href=""/questions/tagged/c%2b%2b"" class=""post-tag"" title=""show questions tagged &#39;c++&#39;"" rel=""tag"">c++</a>) for storing two dimensional arrays. For example, consider the following matrix:</p>

<pre><code>1 2
3 4
</code></pre>

<p>In row-major ordering, this is stored in memory as <code>1 2 3 4</code>; in column-major ordering this would be stored as <code>1 3 2 4</code>. It is easy to see that implementations which do not exploit this ordering will quickly run into (easily avoidable!) cache issues. Unfortunately, I see stuff like this <em>very</em> often in my domain (machine learning). @MatteoItalia showed this example in more detail in his answer.</p>

<p>When fetching a certain element of a matrix from memory, elements near it will be fetched as well and stored in a cache line. If the ordering is exploited, this will result in fewer memory accesses (because the next few values which are needed for subsequent computations are already in a cache line). </p>

<p>For simplicity, assume the cache comprises a single cache line which can contain 2 matrix elements and that when a given element is fetched from memory, the next one is too. Say we want to take the sum over all elements in the example 2x2 matrix above (lets call it <code>M</code>):</p>

<p>Exploiting the ordering (e.g. changing column index first in <a href=""/questions/tagged/c%2b%2b"" class=""post-tag"" title=""show questions tagged &#39;c++&#39;"" rel=""tag"">c++</a>): </p>

<pre><code>M[0][0] (memory) + M[0][1] (cached) + M[1][0] (memory) + M[1][1] (cached)
= 1 + 2 + 3 + 4
--&gt; 2 cache hits, 2 memory accesses
</code></pre>

<p>Not exploiting the ordering (e.g. changing row index first in <a href=""/questions/tagged/c%2b%2b"" class=""post-tag"" title=""show questions tagged &#39;c++&#39;"" rel=""tag"">c++</a>):</p>

<pre><code>M[0][0] (memory) + M[1][0] (memory) + M[0][1] (memory) + M[1][1] (memory)
= 1 + 3 + 2 + 4
--&gt; 0 cache hits, 4 memory accesses
</code></pre>

<p>In this simple example, exploiting the ordering approximately doubles execution speed (since memory access requires much more cycles than computing the sums). In practice the performance difference can be <em>much</em> larger.</p>

<p><strong>Avoid unpredictable branches</strong></p>

<p>Modern architectures feature pipelines and compilers are becoming very good at reordering code to minimize delays due to memory access. When your critical code contains (unpredictable) branches, it is hard or impossible to prefetch data. This will indirectly lead to more cache misses.</p>

<p>This is explained <em>very</em> well here (thanks to @0x90 for the link): <a href=""https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array"">Why is it faster to process a sorted array than an unsorted array?</a></p>

<p><strong>Avoid virtual functions</strong></p>

<p>In the context of <a href=""/questions/tagged/c%2b%2b"" class=""post-tag"" title=""show questions tagged &#39;c++&#39;"" rel=""tag"">c++</a>, <code>virtual</code> methods represent a controversial issue with regard to cache misses (a general consensus exists that they should be avoided when possible in terms of performance). Virtual functions can induce cache misses during look up, but this only happens <em>if</em> the specific function is not called often (otherwise it would likely be cached), so this is regarded as a non-issue by some. For reference about this issue, check out: <a href=""https://stackoverflow.com/questions/667634/what-is-the-performance-cost-of-having-a-virtual-method-in-a-c-class"">What is the performance cost of having a virtual method in a C++ class?</a> </p>

<h2>Common problems</h2>

<p>A common problem in modern architectures with multiprocessor caches is called <a href=""http://en.wikipedia.org/wiki/False_sharing"" rel=""noreferrer"">false sharing</a>. This occurs when each individual processor is attempting to use data in another memory region and attempts to store it in the same <em>cache line</em>. This causes the cache line -- which contains data another processor can use -- to be overwritten again and again. Effectively, different threads make each other wait by inducing cache misses in this situation.
See also (thanks to @Matt for the link): <a href=""https://stackoverflow.com/questions/8469427/how-and-when-to-align-to-cache-line-size"">How and when to align to cache line size?</a></p>

<p>An extreme symptom of poor caching in RAM memory (which is probably not what you mean in this context) is so-called <a href=""http://en.wikipedia.org/wiki/Thrashing_%28computer_science%29"" rel=""noreferrer"">thrashing</a>. This occurs when the process continuously generates page faults (e.g. accesses memory which is not in the current page) which require disk access.</p>
","16699282"
"Colorizing text in the console with C++","96881","","<p>How can I write colored text to the console with C++? That is, how can I write different text with different colors?</p>
","<p><a href=""http://www.daniweb.com/code/snippet216345.html"" rel=""noreferrer"">Add a little Color to your Console Text</a></p>

<pre><code>  HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
  // you can loop k higher to see more color choices
  for(int k = 1; k &lt; 255; k++)
  {
    // pick the colorattribute k you want
    SetConsoleTextAttribute(hConsole, k);
    cout &lt;&lt; k &lt;&lt; "" I want to be nice today!"" &lt;&lt; endl;
  }
</code></pre>

<p><img src=""https://i.stack.imgur.com/ZG625.png"" alt=""alt text""></p>
","4053879"
"C++ class member callback simple examples","96863","","<p>I know this has been asked so many times, and because of that it's difficult to dig through the cruft and find a simple example of what works.</p>

<p>I've got this, it's simple and it works for <code>MyClass</code>...</p>

<pre><code>#include &lt;iostream&gt;
using std::cout;
using std::endl;

class MyClass
{
    public:
        MyClass();
        static void Callback(MyClass* instance, int x);
    private:
        int private_x;
};

class EventHandler
{
    public:
        void addHandler(MyClass* owner)
        {
            cout &lt;&lt; ""Handler added..."" &lt;&lt; endl;
            //Let's pretend an event just occured
            owner-&gt;Callback(owner,1);
        }
};

EventHandler* handler;

MyClass::MyClass()
{
    private_x = 5;
    handler-&gt;addHandler(this);
}

void MyClass::Callback(MyClass* instance, int x)
{
    cout &lt;&lt; x + instance-&gt;private_x &lt;&lt; endl;
}

int main(int argc, char** argv)
{
    handler = new EventHandler();
    MyClass* myClass = new MyClass();
}

class YourClass
{
    public:
        YourClass();
        static void Callback(YourClass* instance, int x);
};
</code></pre>

<p>How can that be rewritten so <code>EventHandler::addHandler()</code> will work with both <code>MyClass</code> and <code>YourClass</code>. I'm sorry but it's just the way my brain works, I need to see a simple example of what works before I can comprehend why/how it works. If you've got a favorite way to make this work now's the time to show it off, please markup that code and post it back.</p>

<p><strong>[edit]</strong></p>

<p>It was answered but the answer was deleted before I could give the checkmark.
The answer in my case was a templated function. Changed addHandler to this...</p>

<pre><code>class EventHandler
{
    public:
        template&lt;typename T&gt;
        void addHandler(T* owner)
        {
            cout &lt;&lt; ""Handler added..."" &lt;&lt; endl;
            //Let's pretend an event just occured
            owner-&gt;Callback(owner,1);
        }
};
</code></pre>
","<p>Instead of having static methods and passing around a pointer to the class instance, you could use functionality in the new C++11 standard: <a href=""http://en.cppreference.com/w/cpp/utility/functional/function""><code>std::function</code></a> and <a href=""http://en.cppreference.com/w/cpp/utility/functional/bind""><code>std::bind</code></a>:</p>

<pre><code>#include &lt;functional&gt;
class EventHandler
{
    public:
        void addHandler(std::function&lt;void(int)&gt; callback)
        {
            cout &lt;&lt; ""Handler added..."" &lt;&lt; endl;
            // Let's pretend an event just occured
            callback(1);
        }
};
</code></pre>

<p>The <code>addHandler</code> method now accepts a <code>std::function</code> argument, and this ""function object"" have no return value and takes an integer as argument.</p>

<p>To bind it to a specific function, you use <code>std::bind</code>:</p>

<pre><code>class MyClass
{
    public:
        MyClass();

        // Note: No longer marked `static`, and only takes the actual argument
        void Callback(int x);
    private:
        int private_x;
};

MyClass::MyClass()
{
    using namespace std::placeholders; // for `_1`

    private_x = 5;
    handler-&gt;addHandler(std::bind(&amp;MyClass::Callback, this, _1));
}

void MyClass::Callback(int x)
{
    // No longer needs an explicit `instance` argument,
    // as `this` is set up properly
    cout &lt;&lt; x + private_x &lt;&lt; endl;
}
</code></pre>

<p>You need to use <code>std::bind</code> when adding the handler, as you explicitly needs to specify the otherwise implicit <code>this</code> pointer as an argument. If you have a free-standing function, you don't have to use <code>std::bind</code>:</p>

<pre><code>void freeStandingCallback(int x)
{
    // ...
}

int main()
{
    // ...
    handler-&gt;addHandler(freeStandingCallback);
}
</code></pre>

<p>Having the event handler use <code>std::function</code> objects, also makes it possible to use the new C++11 <a href=""http://en.wikipedia.org/wiki/C++11#Lambda_functions_and_expressions"">lambda functions</a>:</p>

<pre><code>handler-&gt;addHandler([](int x) { std::cout &lt;&lt; ""x is "" &lt;&lt; x &lt;&lt; '\n'; });
</code></pre>
","14189561"
"Reset C int array to zero : the fastest way?","96736","","<p>Assuming that we have a <code>T myarray[100]</code> with T = int, unsigned int, long long int or unsigned long long int, what is the fastest way to reset all its content to zero (not only for initialization but to reset the content several times in my program)? Maybe with memset?</p>

<p>Same question for a dynamic array like <code>T *myarray = new T[100]</code>.</p>
","<p><code>memset</code> (from <code>&lt;string.h&gt;</code>) is probably the fastest standard way, since it's usually a routine written directly in assembly and optimized by hand.</p>

<pre><code>memset(myarray, 0, sizeof(myarray)); // for automatically-allocated arrays
memset(myarray, 0, N*sizeof(*myarray)); // for heap-allocated arrays, where N is the number of elements
</code></pre>

<hr>

<p>By the way, in C++ the idiomatic way would be to use <code>std::fill</code> (from <code>&lt;algorithm&gt;</code>):</p>

<pre><code>std::fill(myarray, myarray+N, 0);
</code></pre>

<p>which <em>may</em> be optimized automatically into a <code>memset</code>; I'm quite sure that it will work as fast as <code>memset</code> for <code>int</code>s, while it may perform slightly worse for smaller types if the optimizer isn't smart enough. Still, when in doubt, profile.</p>
","9146410"
"libpng warning: iCCP: known incorrect sRGB profile","96700","","<p>I'm trying to load a PNG file using SDL but the program doesn't work and this error appears in the console</p>

<p>""libpng warning: iCCP: known incorrect sRGB profile""</p>

<p>Why this warning appears?
what should I do to solve this problem?</p>
","<p>Libpng-1.6 is more stringent about checking ICC profiles than previous versions.  You can ignore the warning.  To get rid of it, remove the iCCP chunk from the PNG image.</p>

<p>Some applications treat warnings as errors; if you are using such an application you do have to remove the chunk.  You can do that with any of a variety of PNG editors such as ImageMagick's <code>convert in.png out.png</code>.</p>

<p>To remove the invalid iCCP chunk from all of the PNG files in a folder (directory), you can use ImageMagick's <code>mogrify *.png</code>, provided that your ImageMagick was built with libpng16 (run <code>convert -list format | grep PNG</code> to be sure of that).</p>

<p>If you'd like to find out which files need to be fixed instead of blindly processing all of them, you can run my <code>pngcrush -n -q *.png</code>
where the ""<code>-n</code>"" means don't rewrite the files and ""<code>-q</code>"" means suppress most of the output except for warnings. Sorry, there's no option yet in pngcrush to suppress everything but the warnings.</p>

<hr>

<p>Binary Releases of ImageMagick are <a href=""http://www.imagemagick.org/script/binary-releases.php"" rel=""noreferrer"">here</a></p>

<hr>

<p>For Android Projects (Android Studio) navigate into res folder.</p>

<p>For example:
<code>C:\AndroidProjects\{your_project_folder}\app\src\main\res\drawable-hdpi\mogrify *.png</code></p>
","22747902"
"How to read a value from the Windows registry","96593","","<p>Given the key for some registry value (e.g. HKEY_LOCAL_MACHINE\blah\blah\blah\foo) how can I:</p>

<ol>
<li>Safely determine that such a key exists.</li>
<li>Programmatically (i.e. with code) get its value.</li>
</ol>

<p>I have absolutely no intention of writing anything back to the registry (for the duration of my career if I can help it). So we can skip the lecture about every molecule in my body exploding at the speed of light if I write to the registry incorrectly. </p>

<p>Prefer answers in C++, but mostly just need to know what the special Windows API incantation to get at the value is.</p>
","<p><strong>Here is some pseudo-code to retrieve the following:</strong></p>

<ol>
<li>If a registry key exists</li>
<li>What the default value is for that registry key</li>
<li>What a string value is</li>
<li>What a DWORD value is</li>
</ol>

<p><strong>Example code:</strong></p>

<p>Include the library dependency: Advapi32.lib</p>

<pre><code>HKEY hKey;
LONG lRes = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L""SOFTWARE\\Perl"", 0, KEY_READ, &amp;hKey);
bool bExistsAndSuccess (lRes == ERROR_SUCCESS);
bool bDoesNotExistsSpecifically (lRes == ERROR_FILE_NOT_FOUND);
std::wstring strValueOfBinDir;
std::wstring strKeyDefaultValue;
GetStringRegKey(hKey, L""BinDir"", strValueOfBinDir, L""bad"");
GetStringRegKey(hKey, L"""", strKeyDefaultValue, L""bad"");

LONG GetDWORDRegKey(HKEY hKey, const std::wstring &amp;strValueName, DWORD &amp;nValue, DWORD nDefaultValue)
{
    nValue = nDefaultValue;
    DWORD dwBufferSize(sizeof(DWORD));
    DWORD nResult(0);
    LONG nError = ::RegQueryValueExW(hKey,
        strValueName.c_str(),
        0,
        NULL,
        reinterpret_cast&lt;LPBYTE&gt;(&amp;nResult),
        &amp;dwBufferSize);
    if (ERROR_SUCCESS == nError)
    {
        nValue = nResult;
    }
    return nError;
}


LONG GetBoolRegKey(HKEY hKey, const std::wstring &amp;strValueName, bool &amp;bValue, bool bDefaultValue)
{
    DWORD nDefValue((bDefaultValue) ? 1 : 0);
    DWORD nResult(nDefValue);
    LONG nError = GetDWORDRegKey(hKey, strValueName.c_str(), nResult, nDefValue);
    if (ERROR_SUCCESS == nError)
    {
        bValue = (nResult != 0) ? true : false;
    }
    return nError;
}


LONG GetStringRegKey(HKEY hKey, const std::wstring &amp;strValueName, std::wstring &amp;strValue, const std::wstring &amp;strDefaultValue)
{
    strValue = strDefaultValue;
    WCHAR szBuffer[512];
    DWORD dwBufferSize = sizeof(szBuffer);
    ULONG nError;
    nError = RegQueryValueExW(hKey, strValueName.c_str(), 0, NULL, (LPBYTE)szBuffer, &amp;dwBufferSize);
    if (ERROR_SUCCESS == nError)
    {
        strValue = szBuffer;
    }
    return nError;
}
</code></pre>
","35717"
"Initializing a two dimensional std::vector","96573","","<p>So, I have the following:</p>

<pre><code>std::vector&lt; std::vector &lt;int&gt; &gt; fog;
</code></pre>

<p>and I am initializing it very naively like:</p>

<pre><code>    for(int i=0; i&lt;A_NUMBER; i++)
    {
            std::vector &lt;int&gt; fogRow;
            for(int j=0; j&lt;OTHER_NUMBER; j++)
            {
                 fogRow.push_back( 0 );
            }
            fog.push_back(fogRow);
    }
</code></pre>

<p>And it feels very wrong... Is there another way of initializing a vector like this?</p>
","<p>Use the <a href=""http://en.cppreference.com/w/cpp/container/vector/vector"" rel=""noreferrer""><code>std::vector::vector(count, value)</code></a> constructor that accepts an initial size and a default value:</p>

<pre><code>std::vector&lt;std::vector&lt;int&gt; &gt; fog(
    A_NUMBER,
    std::vector&lt;int&gt;(OTHER_NUMBER)); // Defaults to zero initial value
</code></pre>

<p>If a value other zero, say <code>4</code> for example, was required to be the default then:</p>

<pre><code>std::vector&lt;std::vector&lt;int&gt; &gt; fog(
    A_NUMBER,
    std::vector&lt;int&gt;(OTHER_NUMBER, 4));
</code></pre>

<p>I should also mention uniform initialization is introduced in C++11, which permits the initialization of <code>vector</code>, and other containers, using <code>{}</code>:</p>

<pre><code>std::vector&lt;std::vector&lt;int&gt; &gt; fog { { 1, 1, 1 },
                                    { 2, 2, 2 } };
</code></pre>
","17663236"
"When should I use the new keyword in C++?","96495","","<p>I've been using C++ for a short while, and I've been wondering about the <em>new</em> keyword. Simply, should I be using it, or not?</p>

<p>1) With the <em>new</em> keyword...</p>

<pre><code>MyClass* myClass = new MyClass();
myClass-&gt;MyField = ""Hello world!"";
</code></pre>

<p>2) Without the <em>new</em> keyword...</p>

<pre><code>MyClass myClass;
myClass.MyField = ""Hello world!"";
</code></pre>

<p>From an implementation perspective, they don't seem that different (but I'm sure they are)... However, my primary language is C#, and of course the 1st method is what I'm used to.</p>

<p>The difficulty seems to be that method 1 is harder to use with the std C++ classes.</p>

<p>Which method should I use?</p>

<h3>Update 1:</h3>

<p>I recently used the <em>new</em> keyword for <em>heap</em> memory (or <em>free store</em>) for a large array which was going out of scope (i.e. being returned from a function). Where before I was using the stack, which caused half of the elements to be corrupt outside of scope, switching to heap usage ensured that the elements were in tact. Yay!</p>

<h3>Update 2:</h3>

<p>A friend of mine recently told me there's a simple rule for using the <code>new</code> keyword; every time you type <code>new</code>, type <code>delete</code>.</p>

<pre><code>Foobar *foobar = new Foobar();
delete foobar; // TODO: Move this to the right place.
</code></pre>

<p>This helps to prevent memory leaks, as you always have to put the delete somewhere (i.e. when you cut and paste it to either a destructor or otherwise).</p>
","<p><strong>Method 1 (using <code>new</code>)</strong> </p>

<ul>
<li>Allocates memory for the object on the <a href=""http://www.gotw.ca/gotw/009.htm"" rel=""noreferrer""><strong>free store</strong></a>  (This is frequently the same thing as the <strong>heap</strong>)</li>
<li>Requires you to explicitly <code>delete</code> your object later.  (If you don't delete it, you could create a memory leak)</li>
<li>Memory stays allocated until you <code>delete</code> it.  (i.e. you could <code>return</code> an object that you created using <code>new</code>)  </li>
<li>The example in the question will <a href=""http://en.wikipedia.org/wiki/Memory_leak"" rel=""noreferrer"">leak memory</a> unless the pointer is <code>delete</code>d; and it <strong>should always be deleted</strong>, regardless of which control path is taken, or if exceptions are thrown.</li>
</ul>

<p><strong>Method 2 (not using <code>new</code>)</strong> </p>

<ul>
<li>Allocates memory for the object on the <strong>stack</strong> (where all local variables go)  There is generally less memory available for the stack; if you allocate too many objects, you risk stack overflow.</li>
<li>You won't need to <code>delete</code> it later.</li>
<li>Memory is no longer allocated when it goes out of scope.  (i.e. you shouldn't <code>return</code> a pointer to an object on the stack)</li>
</ul>

<p>As far as which one to use; you choose the method that works best for you, given the above constraints.  </p>

<p><strong>Some easy cases:</strong></p>

<ul>
<li>If you don't want to worry about calling <code>delete</code>, (and the potential to cause <a href=""http://en.wikipedia.org/wiki/Memory_leak"" rel=""noreferrer"">memory leaks</a>) you shouldn't use <code>new</code>.</li>
<li>If you'd like to return a pointer to your object from a function, you must use <code>new</code></li>
</ul>
","655086"
"Proper way to initialize C++ structs","96406","","<p>Our code involves a POD (Plain Old Datastructure) struct (it is a basic c++ struct that has other structs and POD variables in it that needs to get initialized in the beginning.) </p>

<p>Based one what I've <a href=""https://stackoverflow.com/questions/2951586/default-struct-initialization-in-c"">read</a>, it seems that:</p>

<pre><code>myStruct = (MyStruct*)calloc(1, sizeof(MyStruct));
</code></pre>

<p>should initialize all the values to zero, as does:</p>

<pre><code>myStruct = new MyStruct();
</code></pre>

<p>However, when the struct is initialized in the second way, Valgrind later complains ""conditional jump or move depends on uninitialised value(s)"" when those variables are used. Is my understanding flawed here, or is Valgrind throwing false positives?</p>
","<p>In C++ classes/structs are identical (in terms of initialization).</p>

<p>A non POD struct may as well have a constructor so it can initialize members.<br>
If your struct is a POD then you can use an initializer.</p>

<pre><code>struct C
{
    int x; 
    int y;
};

C  c = {0}; // Zero initialize POD
</code></pre>

<p>Alternatively you can use the default constructor.</p>

<pre><code>C  c = C();      // Zero initialize using default constructor
C* c = new C();  // Zero initialize a dynamically allocated object.

// Note the difference between the above and the initialize version of the constructor.
// Note: All above comments apply to POD structures.
C  c;            // members are random
C* c = new C;    // members are random (more officially undefined).
</code></pre>

<p>I believe valgrind is complaining because that is how C++ used to work. (I am not exactly sure when C++ was upgraded with the zero initialization default construction). Your best bet is to add a constructor that initializes the object (structs are allowed constructors).</p>

<p>As a side note:<br>
A lot of beginners try to value init:</p>

<pre><code>C c(); // Unfortunately this is not a variable declaration.

// The correct way to do this is:
C c = C();
</code></pre>

<p>A quick search for the ""Most Vexing Parse"" will provide a better explanation than I can.</p>
","5914697"
"C++ error: ""Array must be initialized with a brace enclosed initializer""","96396","","<p>I am getting the following C++ error:</p>

<pre><code>array must be initialized with a brace enclosed initializer 
</code></pre>

<p>From this line of C++</p>

<pre><code>int cipher[Array_size][Array_size];
</code></pre>

<p>What is the problem here? What does the error mean? Below is the full code:</p>

<pre><code>string decryption(string todecrypt)
{
    int cipher[Array_size][Array_size] = 0;
    string ciphercode = todecrypt.substr(0,3);
    todecrypt.erase(0,3);
    decodecipher(ciphercode,cipher);
    string decrypted = """";
    while(todecrypt.length()&gt;0)
    {
        string unit_decrypt = todecrypt.substr(0,Array_size);
        todecrypt.erase(0,Array_size);
        int tomultiply[Array_size]=0;
        for(int i = 0; i &lt; Array_size; i++)
        {
            tomultiply[i] = int(unit_encrypt.substr(0,1));
            unit_encrypt.erase(0,1);
        }
        for(int i = 0; i &lt; Array_size; i++)
        {
            int resultchar = 0;
            for(int j = 0; j&lt;Array_size; j++)
            {
                resultchar += tomultiply[j]*cipher[i][j]; 
            }
            decrypted += char((resultchar%229)-26);
        }
    }
    return decrypted;
}
</code></pre>
","<p>The syntax to statically initialize an array uses curly braces, like this:</p>

<pre><code>int array[10] = { 0 };
</code></pre>

<p>This will zero-initialize the array.</p>

<p>For multi-dimensional arrays, you need nested curly braces, like this:</p>

<pre><code>int cipher[Array_size][Array_size]= { { 0 } };
</code></pre>

<p>Note that <code>Array_size</code> must be a compile-time constant for this to work.  If <code>Array_size</code> is not known at compile-time, you must use dynamic initialization.  (Preferably, an <code>std::vector</code>).</p>
","4329352"
"How to change text and background color?","96396","","<p>I want every character to be a different color.</p>

<p>for example,</p>

<pre><code>cout &lt;&lt; ""Hello world"" &lt;&lt; endl;
</code></pre>

<ul>
<li><strong>H</strong> would be red</li>
<li><strong>e</strong> would be blue</li>
<li><strong>l</strong> would be orange
and so on.</li>
</ul>

<p>I know this can be done, I just don't know the code for it.</p>

<p>and I want to change the background color to white. How would I do that? </p>
","<p>There is no (standard) cross-platform way to do this. On windows, try using <code>conio.h</code>.
It has the:</p>

<pre><code>textcolor(); // and
textbackground();
</code></pre>

<p>functions.</p>

<p>For example:</p>

<pre><code>textcolor(RED);
cprintf(""H"");
textcolor(BLUE);
cprintf(""e"");
// and so on.
</code></pre>
","9965832"
"Dividing two integers to produce a float result","96389","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/7571326/why-cant-i-return-a-double-from-two-ints-being-divided"">Why can&#39;t I return a double from two ints being divided</a>  </p>
</blockquote>



<p>My C++ program is truncating the output of my integer devision even when I try and place the output into a float. How can I prevent this whilst keeping those to variables (a &amp; b) as integers?</p>

<pre><code>user@box:~/c/precision$ cat precision.cpp
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std;

int main()
{
  int a = 10, b = 3;
  float ans = (a/b);
  cout&lt;&lt;fixed&lt;&lt;setprecision(3);
  cout &lt;&lt; (a/b) &lt;&lt; endl;
  cout &lt;&lt; ans &lt;&lt; endl;
  return 0;
}

user@box:~/c/precision$ g++ -o precision precision.cpp 
user@box:~/c/precision$ ./precision 
3
3.000
</code></pre>
","<p>Cast the operands to floats:</p>

<pre><code>float ans = (float)a / (float)b;
</code></pre>
","12447341"
"How to connect mySQL database using C++","96363","","<p>I'm trying to connect the database from my website and display some rows using C++.
So bascily I'm trying to make an application that does a select query from a table from my site database. Now, this must be possible because I've seen tons of applications doing it.</p>

<p>How do I do this? Can some one make an example and tell me what libraries I should be using?</p>
","<p>Clearly, you've not been looking in the right corners of the Internet, because I found <a href=""https://dev.mysql.com/doc/connector-cpp/en/connector-cpp-examples-complete-example-1.html"" rel=""noreferrer"">an example</a> in a few seconds:</p>

<pre><code>/* Standard C++ includes */
#include &lt;stdlib.h&gt;
#include &lt;iostream&gt;

/*
  Include directly the different
  headers from cppconn/ and mysql_driver.h + mysql_util.h
  (and mysql_connection.h). This will reduce your build time!
*/
#include ""mysql_connection.h""

#include &lt;cppconn/driver.h&gt;
#include &lt;cppconn/exception.h&gt;
#include &lt;cppconn/resultset.h&gt;
#include &lt;cppconn/statement.h&gt;

using namespace std;

int main(void)
{
cout &lt;&lt; endl;
cout &lt;&lt; ""Running 'SELECT 'Hello World!' »
   AS _message'..."" &lt;&lt; endl;

try {
  sql::Driver *driver;
  sql::Connection *con;
  sql::Statement *stmt;
  sql::ResultSet *res;

  /* Create a connection */
  driver = get_driver_instance();
  con = driver-&gt;connect(""tcp://127.0.0.1:3306"", ""root"", ""root"");
  /* Connect to the MySQL test database */
  con-&gt;setSchema(""test"");

  stmt = con-&gt;createStatement();
  res = stmt-&gt;executeQuery(""SELECT 'Hello World!' AS _message""); // replace with your statement
  while (res-&gt;next()) {
    cout &lt;&lt; ""\t... MySQL replies: "";
    /* Access column data by alias or column name */
    cout &lt;&lt; res-&gt;getString(""_message"") &lt;&lt; endl;
    cout &lt;&lt; ""\t... MySQL says it again: "";
    /* Access column fata by numeric offset, 1 is the first column */
    cout &lt;&lt; res-&gt;getString(1) &lt;&lt; endl;
  }
  delete res;
  delete stmt;
  delete con;

} catch (sql::SQLException &amp;e) {
  cout &lt;&lt; ""# ERR: SQLException in "" &lt;&lt; __FILE__;
  cout &lt;&lt; ""("" &lt;&lt; __FUNCTION__ &lt;&lt; "") on line "" »
     &lt;&lt; __LINE__ &lt;&lt; endl;
  cout &lt;&lt; ""# ERR: "" &lt;&lt; e.what();
  cout &lt;&lt; "" (MySQL error code: "" &lt;&lt; e.getErrorCode();
  cout &lt;&lt; "", SQLState: "" &lt;&lt; e.getSQLState() &lt;&lt; "" )"" &lt;&lt; endl;
}

cout &lt;&lt; endl;

return EXIT_SUCCESS;
}
</code></pre>
","16424893"
"c++ boost split string","96328","","<p>I'm using the <code>boost::split</code> method to split a string as this:</p>

<p>I first make sure to include the correct header to have access to <code>boost::split</code>:</p>

<pre><code>#include &lt;boost/algorithm/string.hpp&gt;
</code></pre>

<p>then:</p>

<pre><code>vector&lt;string&gt; strs;
boost::split(strs,line,boost::is_any_of(""\t""));
</code></pre>

<p>and the line is like</p>

<pre><code>""test   test2   test3""
</code></pre>

<p>This is how I consume the result string vector:</p>

<pre><code>void printstrs(vector&lt;string&gt; strs)
{
    for(vector&lt;string&gt;::iterator it = strs.begin();it!=strs.end();++it)
    {
        cout &lt;&lt; *it &lt;&lt; ""-------"";
    }

    cout &lt;&lt; endl;
}
</code></pre>

<p>But why in the result <code>strs</code> I only get <code>""test2""</code> and <code>""test3""</code>, shouldn't be <code>""test""</code>, <code>""test2""</code> and <code>""test3""</code>, there are <code>\t</code> (tab) in the string.</p>

<p><strong>Updated Apr 24th, 2011:</strong> It seemed after I changed one line of code at <code>printstrs</code> I can see the first string. I changed </p>

<pre><code>cout &lt;&lt; *it &lt;&lt; ""-------"";
</code></pre>

<p>to </p>

<pre><code>cout &lt;&lt; *it &lt;&lt; endl;
</code></pre>

<p>And it seemed <code>""-------""</code> covered the first string somehow.</p>
","<p>The problem is somewhere else in your code, because this works:</p>

<pre><code>string line(""test\ttest2\ttest3"");
vector&lt;string&gt; strs;
boost::split(strs,line,boost::is_any_of(""\t""));

cout &lt;&lt; ""* size of the vector: "" &lt;&lt; strs.size() &lt;&lt; endl;    
for (size_t i = 0; i &lt; strs.size(); i++)
    cout &lt;&lt; strs[i] &lt;&lt; endl;
</code></pre>

<p>and testing your approach, which uses a vector iterator also works:</p>

<pre><code>string line(""test\ttest2\ttest3"");
vector&lt;string&gt; strs;
boost::split(strs,line,boost::is_any_of(""\t""));

cout &lt;&lt; ""* size of the vector: "" &lt;&lt; strs.size() &lt;&lt; endl;
for (vector&lt;string&gt;::iterator it = strs.begin(); it != strs.end(); ++it)
{
    cout &lt;&lt; *it &lt;&lt; endl;
}
</code></pre>

<p>Again, your problem is somewhere else. Maybe what you think is a <code>\t</code> character on the string, isn't. I would fill the code with debugs, starting by monitoring the insertions on the vector to make sure everything is being inserted the way its supposed to be.</p>

<p>Output:</p>

<pre><code>* size of the vector: 3
test
test2
test3
</code></pre>
","5734491"
"How to implement static class member functions in *.cpp file?","96232","","<p>Is it possible to implement <code>static</code> class member functions in *.cpp file instead of doing
it in the header file ?</p>

<p>Are all <code>static</code> functions always <code>inline</code>?</p>
","<p>It is.</p>

<p>test.hpp:</p>

<pre><code>class A {
public:
    static int a(int i);
};
</code></pre>

<p>test.cpp:</p>

<pre><code>#include &lt;iostream&gt;
#include ""test.hpp""


int A::a(int i) {
    return i + 2;
}

using namespace std;
int main() {
    cout &lt;&lt; A::a(4) &lt;&lt; endl;
}
</code></pre>

<p>They're not always inline, no, but the compiler can make them.</p>
","5373143"
"std::map, how to sort by value, then by key","96208","","<p>I need to sort a map by value, then by key. I have a map with contents like this...</p>

<pre><code>  1  realistically
  8         really
  4         reason
  3     reasonable
  1     reasonably
  1     reassemble
  1    reassembled
  2      recognize
 92         record
 48        records
  7           recs
</code></pre>

<p>I need to get the values in order, but the kicker is that the keys need to be in alphabetical order after the values are in order. What is the best way to go about this?</p>
","<p><code>std::map</code> will sort its elements by <code>keys</code>. It doesn't care about the <code>values</code> when sorting.</p>

<p><s>
You can use <code>std::vector&lt;std::pair&lt;K,V&gt;&gt;</code> then sort it using <code>std::sort</code> followed by <code>std::stable_sort</code>:</p>

<pre><code>std::vector&lt;std::pair&lt;K,V&gt;&gt; items;

//fill items

//sort by value using std::sort
std::sort(items.begin(), items.end(), value_comparer);

//sort by key using std::stable_sort
std::stable_sort(items.begin(), items.end(), key_comparer);
</code></pre>

<p>The first sort should use <code>std::sort</code> since it is <code>nlog(n)</code>, and then use <code>std::stable_sort</code> which is <code>n(log(n))^2</code> in the worst case.</p>

<p>Note that while <code>std::sort</code> is chosen for performance reason, <code>std::stable_sort</code> is needed for correct ordering, as you want the order-by-value to be preserved.
</s></p>

<hr>

<p>@gsf noted in the comment, you could use <em>only</em> <code>std::sort</code> if you choose a comparer which compares <code>values</code> first, and IF they're equal, sort the <code>keys</code>.</p>

<pre><code>auto cmp = [](std::pair&lt;K,V&gt; const &amp; a, std::pair&lt;K,V&gt; const &amp; b) 
{ 
     return a.second != b.second?  a.second &lt; b.second : a.first &lt; b.first;
};
std::sort(items.begin(), items.end(), cmp);
</code></pre>

<p>That should be efficient. </p>

<p>But wait, there is a better approach: store <code>std::pair&lt;V,K&gt;</code> instead of <code>std::pair&lt;K,V&gt;</code> and then you don't need any comparer at all &mdash; the standard comparer for <code>std::pair</code> would be enough, as it compares <code>first</code> (which is <code>V</code>) first then <code>second</code> which is <code>K</code>:</p>

<pre><code>std::vector&lt;std::pair&lt;V,K&gt;&gt; items;
//...
std::sort(items.begin(), items.end());
</code></pre>

<p>That should work great.</p>
","19842086"
"passing object by reference in C++","96027","","<p>The usual way to <strong>pass a variable by reference</strong> in C++(also C) is as follows:</p>

<pre><code>void _someFunction(dataType *name){ // dataType e.g int,char,float etc.
/****
definition
*/
}

int main(){
    dataType v;
    _somefunction(&amp;v);  //address of variable v being passed
    return 0;
}
</code></pre>

<p>But to my surprise, I noticed when <strong>passing an object by reference</strong> the name of object itself serves the purpose(no <code>&amp;</code> symbol required) and that during declaration/definition of function no <code>*</code> symbol is required before the argument.
The following example should make it clear:</p>

<pre><code>// this
#include &lt;iostream&gt;
using namespace std;

class CDummy {
  public:
    int isitme (CDummy&amp; param);     //why not (CDummy* param);
};

int CDummy::isitme (CDummy&amp; param)
{
  if (&amp;param == this) return true;
  else return false;
}

int main () {
  CDummy a;
  CDummy* b = &amp;a;
  if ( b-&gt;isitme(a) )               //why not isitme(&amp;a)
    cout &lt;&lt; ""yes, &amp;a is b"";
  return 0;
}
</code></pre>

<p>I have problem understanding why is this special treatment done with class . Even structures which are almost like a class are not used this way. <strong>Is object name treated as address as in case of arrays?</strong></p>
","<p>What seems to be confusing you is the fact that functions that are declared to be pass-by-reference (using the <code>&amp;</code>) aren't called using actual addresses, i.e. <code>&amp;a</code>. </p>

<p>The simple answer is that declaring a function as pass-by-reference:</p>

<pre><code>void foo(int&amp; x);
</code></pre>

<p>is all we need. It's then passed by reference automatically.</p>

<p>You now call this function like so:</p>

<pre><code>int y = 5;
foo(y);
</code></pre>

<p>and <code>y</code> will be passed by reference.</p>

<p>You could also do it like this (but why would you? The mantra is: <em>Use references when possible, pointers when needed</em>) :</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

class CDummy {
public:
    int isitme (CDummy* param);
};


int CDummy::isitme (CDummy* param)
{
    if (param == this) return true;
    else return false;
}

int main () {
    CDummy a;
    CDummy* b = &amp;a;             // assigning address of a to b
    if ( b-&gt;isitme(&amp;a) )        // Called with &amp;a (address of a) instead of a
        cout &lt;&lt; ""yes, &amp;a is b"";
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>yes, &amp;a is b
</code></pre>
","18147466"
"What is external linkage and internal linkage?","95895","","<p>I want to understand the external linkage and internal linkage and their difference. </p>

<p>I also want to know the meaning of</p>

<blockquote>
  <p><code>const</code> variables internally link by default unless otherwise declared as <code>extern</code>.</p>
</blockquote>
","<p>When you write an implementation file (<code>.cpp</code>, <code>.cxx</code>, etc) your compiler generates a <strong>translation unit</strong>. This is the object file from your implementation file plus all the headers you <code>#include</code>d in it. </p>

<p><em>Internal linkage</em> refers to everything only <strong>in scope of a translation unit</strong>.</p>

<p><em>External linkage</em> refers to things that exist beyond a particular translation unit. In other words, <strong>accessible through the whole program</strong>, which is the combination of all translation units (or object files).</p>
","1358622"
"visual c++: #include files from other projects in the same solution","95871","","<p>I am working on a game using Visual C++. I have some components in separate projects, and have set the project dependencies. How do I #include a header file from a different project? I have no idea how to use classes from one project in another.</p>
","<h2>Settings for compiler</h2>

<p>In the project where you want to #include the header file from <em>another</em> project, you will need to add the path of the header file into the <strong>Additional Include Directories</strong> section in the project configuration.</p>

<p>To access the project configuration:</p>

<ol>
<li>Right-click on the project, and select Properties.</li>
<li>Select Configuration Properties->C/C++->General.</li>
<li>Set the path under Additional Include Directories.</li>
</ol>

<h2>How to include</h2>

<p>To <strong>include the header file</strong>, simply write the following in your code:</p>

<pre><code>#include ""filename.h""
</code></pre>

<p>Note that you don't need to specify the path here, because you include the directory in the Additional Include Directories already, so Visual Studio will know where to look for it.</p>

<p>If you don't want to add every header file location in the project settings, you could just include a directory up to a point, and then #include relative to that point:</p>

<pre><code>// In project settings
Additional Include Directories    ..\..\libroot

// In code
#include ""lib1/lib1.h""    // path is relative to libroot
#include ""lib2/lib2.h""    // path is relative to libroot
</code></pre>

<h2>Setting for linker</h2>

<p>If using static libraries (i.e. .lib file), you will also need to add the library to the linker input, so that at linkage time the symbols can be linked against (otherwise you'll get an unresolved symbol):</p>

<ol>
<li>Right-click on the project, and select Properties.</li>
<li>Select Configuration Properties->Linker->Input</li>
<li>Enter the library under Additional Dependencies.</li>
</ol>
","601285"
"Should C# or C++ be chosen for learning Games Programming (consoles)?","95685","","<p>I've basic game programming knowledge in c and c++. I'm learning c# nowadays. If I want to make a career in console games programming, which one I should use to proceed? I've noticed that a lot of game companies are using C++/C (probably because of legacy reasons). Also probably C++ enjoys more number of supported libraries?<br>
In which languages modern game engines(unreal/crysis etc) are written in?<br>
Which language is a better bet? and why?</p>
","<p>C++, for two reasons.</p>

<p>1) a lot of games are programmed in C++.  No mainstream game is, as yet, programmed in a managed language.</p>

<p>2) C++ is as hard as it gets.  You have to master manual memory management and generally no bounds checking (beyond the excellent Valgrind!).  If you master C++, you will find this transferable to managed procedural languages.  Less so the other way around.</p>

<p>C++ has a level of complexity close to <a href=""http://en.wikipedia.org/wiki/APL_%28programming_language%29"" rel=""noreferrer"">APL</a>!  You'll never get better by playing weaker opponents.</p>

<p><a href=""http://www.joelonsoftware.com/articles/ThePerilsofJavaSchools.html"" rel=""noreferrer"">Joel makes a very strong point about this</a>.  People who understand how the machine works make better programmers, <a href=""http://www.joelonsoftware.com/articles/LeakyAbstractions.html"" rel=""noreferrer"">because all abstractions are leaky</a>.</p>
","2203124"
"_DEBUG vs NDEBUG","95658","","<p>Which preprocessor define should be used to specify debug sections of code?</p>

<p>Use <code>#ifdef _DEBUG</code> or <code>#ifndef NDEBUG</code> or is there a better way to do it, e.g. <code>#define MY_DEBUG</code>?</p>

<p>I think <code>_DEBUG</code> is Visual Studio specific, is NDEBUG standard?</p>
","<p>Visual Studio defines <code>_DEBUG</code> when you specify the <code>/MTd</code> or <code>/MDd</code> option, <code>NDEBUG</code> disables standard-C assertions. Use them when appropriate, ie <code>_DEBUG</code> if you want your debugging code to be consistent with the <a href=""http://msdn.microsoft.com/en-us/library/zh712wwf%28VS.80%29.aspx"" rel=""nofollow noreferrer"">MS CRT debugging techniques</a> and <code>NDEBUG</code> if you want to be consistent with <code>assert()</code>.</p>

<p>If you define your own debugging macros (and you don't hack the compiler or C runtime), avoid starting names with an underscore, as these are reserved.</p>
","2290616"
"How can I specify a [DllImport] path at runtime?","95656","","<p>In fact, I got a C++ (working) DLL that I want to import into my C# project to call it's functions.</p>

<p>It does work when I specify the full path to the DLL, like this :</p>

<pre><code>string str = ""C:\\Users\\userName\\AppData\\Local\\myLibFolder\\myDLL.dll"";
[DllImport(str, CallingConvention = CallingConvention.Cdecl)]
public static extern int DLLFunction(int Number1, int Number2);
</code></pre>

<p>The problem is that it's gonna be an installable project, so the user's folder will not be the same (ex : pierre, paul, jack, mum, dad, ...) depending computer/session where it'd be runned on.</p>

<p>So I'd like my code to be a little more generic, like this : </p>

<pre><code>/* 
goes right to the temp folder of the user 
    ""C:\\Users\\userName\\AppData\\Local\\temp""
then go to parent folder
    ""C:\\Users\\userName\\AppData\\Local""
and finally go to the DLL's folder
    ""C:\\Users\\userName\\AppData\\Local\\temp\\myLibFolder""
*/

string str = Path.GetTempPath() + ""..\\myLibFolder\\myDLL.dll""; 
[DllImport(str, CallingConvention = CallingConvention.Cdecl)]
public static extern int DLLFunction(int Number1, int Number2);
</code></pre>

<p>The big deal is that ""DllImport"" desire a ""const string"" parameter for the DLL's directory.</p>

<p>So my question is ::
What could be done in this case ?</p>
","<p>Contrary to the suggestions by some of the other answers, using the <code>DllImport</code> attribute is still the correct approach.</p>

<p>I honestly don't understand why you can't do just like everyone else in the world and specify a <em>relative</em> path to your DLL. Yes, the path in which your application will be installed differs on different people's computers, but that's basically a universal rule when it comes to deployment. The <code>DllImport</code> mechanism is designed with this in mind.</p>

<p>In fact, it isn't even <code>DllImport</code> that handles it. It's the native Win32 DLL loading rules that govern things, regardless of whether you're using the handy managed wrappers (the P/Invoke marshaller just calls <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms684175.aspx""><code>LoadLibrary</code></a>). Those rules are enumerated in great detail <a href=""http://msdn.microsoft.com/en-us/library/ms682586.aspx"">here</a>, but the important ones are excerpted here:</p>

<blockquote>
  <p><strong>Before the system searches for a DLL, it checks the following:</strong></p>
  
  <ul>
  <li>If a DLL with the same module name is already loaded in memory, the system uses the loaded DLL, no matter which directory it is in. The system does not search for the DLL.</li>
  <li>If the DLL is on the list of known DLLs for the version of Windows on which the application is running, the system uses its copy of the known DLL (and the known DLL's dependent DLLs, if any). The system does not search for the DLL.  </li>
  </ul>
  
  <hr>
  
  <p><strong>If <code>SafeDllSearchMode</code> is enabled (the default), the search order is as follows:</strong></p>
  
  <ol>
  <li>The directory from which the application loaded.</li>
  <li>The system directory. Use the <code>GetSystemDirectory</code> function to get the path of this directory.</li>
  <li>The 16-bit system directory. There is no function that obtains the path of this directory, but it is searched.</li>
  <li>The Windows directory. Use the <code>GetWindowsDirectory</code> function to get the path of this directory.</li>
  <li>The current directory.</li>
  <li>The directories that are listed in the <code>PATH</code> environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.</li>
  </ol>
</blockquote>

<p>So, unless you're naming your DLL the same thing as a system DLL (which you should obviously not be doing, ever, under any circumstances), the default search order will start looking in the directory from which your application was loaded. If you place the DLL there during the install, it will be found. All of the complicated problems go away if you just use relative paths.</p>

<p>Just write:</p>

<pre><code>[DllImport(""MyAppDll.dll"")] // relative path; just give the DLL's name
static extern bool MyGreatFunction(int myFirstParam, int mySecondParam);
</code></pre>

<p>But if that <em>doesn't</em> work for whatever reason, and you need to force the application to look in a different directory for the DLL, you can modify the default search path using the <a href=""http://msdn.microsoft.com/en-us/library/ms686203.aspx""><code>SetDllDirectory</code> function</a>.<br>
Note that, as per the documentation:</p>

<blockquote>
  <p>After calling <code>SetDllDirectory</code>, the standard DLL search path is:</p>
  
  <ol>
  <li>The directory from which the application loaded.</li>
  <li>The directory specified by the <code>lpPathName</code> parameter.</li>
  <li>The system directory. Use the <code>GetSystemDirectory</code> function to get the path of this directory.</li>
  <li>The 16-bit system directory. There is no function that obtains the path of this directory, but it is searched.</li>
  <li>The Windows directory. Use the <code>GetWindowsDirectory</code> function to get the path of this directory.</li>
  <li>The directories that are listed in the <code>PATH</code> environment variable.</li>
  </ol>
</blockquote>

<p>So as long as you call this function before you call the function imported from the DLL for the first time, you can modify the default search path used to locate DLLs. The benefit, of course, is that you can pass a <em>dynamic</em> value to this function that is computed at run-time. That isn't possible with the <code>DllImport</code> attribute, so you will still use a relative path (the name of the DLL only) there, and rely on the new search order to find it for you.</p>

<p>You'll have to P/Invoke this function. The declaration looks like this:</p>

<pre><code>[DllImport(""kernel32.dll"", CharSet = CharSet.Auto, SetLastError = true)]
static extern bool SetDllDirectory(string lpPathName);
</code></pre>
","8861895"
"Cygwin Make bash command not found","95556","","<p>I installed cygwin with all the packages on windows 7 64 bit. For some reason the make command is giving me an error: bash make: command not found. I checked and in my bin folder, there is no make.exe. Can anyone help me on this? I really need make to work in CYGWIN. I dont wanna have to go to windows xp.</p>
","<p>You probably have not installed make. Restart the cygwin installer, search for make, select it and it should be installed. By default the cygwin installer does not install everything for what I remember.</p>
","4828533"
"Random number c++ in some range","95550","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/288739/generate-random-numbers-uniformly-over-entire-range"">Generate Random numbers uniformly over entire range</a>  </p>
</blockquote>



<p>I want to generate the random number in c++ with in some range let say i want to have number between 25 and 63.</p>

<p>How can i have that.</p>

<p>Thanks</p>
","<p>You can use the random functionality included within the additions to the standard library (TR1). Or you can use the same old technique that works in plain C:</p>

<pre><code>25 + ( std::rand() % ( 63 - 25 + 1 ) )
</code></pre>
","7560151"
"Interview question: Check if one string is a rotation of other string","95361","","<p>A friend of mine was asked the following question today at interview for the position of software developer:</p>

<p>Given two string <code>s1</code> and <code>s2</code> how will you check if <code>s1</code> is a <strong>rotated</strong> version of <code>s2</code> ?</p>

<p><strong><em>Example:</em></strong> </p>

<p>If <code>s1 = ""stackoverflow""</code> then the following are some of its rotated versions:</p>

<pre><code>""tackoverflows""
""ackoverflowst""
""overflowstack""
</code></pre>

<p>where as <code>""stackoverflwo""</code> is <strong><em>not</em></strong> a rotated version.</p>

<p>The answer he gave was:<br></p>

<blockquote>
  <p>Take <code>s2</code> and find the longest prefix that is a sub string of <code>s1</code>, that will give you the point of rotation. Once you find that point, break <code>s2</code> at that point to get <code>s2a</code> and <code>s2b</code>, then just check if <code>concatenate(s2a,s2b) == s1</code></p>
</blockquote>

<p>It looks like a good solution to me and my friend. But the interviewer thought otherwise. He asked for a simpler solution. Please help me by telling how would you do this in <code>Java/C/C++</code> ?</p>

<p>Thanks in advance.</p>
","<p>First make sure <code>s1</code> and <code>s2</code> are of the same length. Then check to see if <code>s2</code> is a substring of <code>s1</code> concatenated with <code>s1</code>:</p>

<pre><code>algorithm checkRotation(string s1, string s2) 
  if( len(s1) != len(s2))
    return false
  if( substring(s2,concat(s1,s1))
    return true
  return false
end
</code></pre>

<p>In Java:</p>

<pre><code>boolean isRotation(String s1,String s2) {
    return (s1.length() == s2.length()) &amp;&amp; ((s1+s1).indexOf(s2) != -1);
}
</code></pre>
","2553533"
"Delete all items from a c++ std::vector","95315","","<p>I'm trying to delete everything from a <code>std::vector</code> by using the following code</p>

<pre><code>vector.erase( vector.begin(), vector.end() );
</code></pre>

<p>but it doesn't work.</p>

<hr>

<p>Update: Doesn't clear destruct the elements held by the vector? I don't want that, as I'm still using the objects, I just want to empty the container</p>
","<p>I think you should use <a href=""http://en.cppreference.com/w/cpp/container/vector"" rel=""noreferrer""><code>std::vector::clear</code></a>:</p>

<pre><code>vec.clear();
</code></pre>

<hr>

<p>EDIT:</p>

<blockquote>
  <p>Doesn't clear destruct the elements
  held by the vector?</p>
</blockquote>

<p>Yes it does. It calls the destructor of every element in the vector before returning the memory. That depends on what ""elements"" you are storing in the vector. In the following example, I am storing the objects them selves inside the vector:</p>

<pre><code>class myclass
{
public:
    ~myclass()
    {

    }
...
};

std::vector&lt;myclass&gt; myvector;
...
myvector.clear(); // calling clear will do the following:
// 1) invoke the deconstrutor for every myclass
// 2) size == 0 (the vector contained the actual objects).
</code></pre>

<p>If you want to share objects between different containers for example, you could store pointers to them. In this case, when <code>clear</code> is called, only pointers memory is released, the actual objects are not touched:</p>

<pre><code>std::vector&lt;myclass*&gt; myvector;
...
myvector.clear(); // calling clear will do:
// 1) ---------------
// 2) size == 0 (the vector contained ""pointers"" not the actual objects).
</code></pre>

<p>For the question in the comment, I think <code>getVector()</code> is defined like this:</p>

<pre><code>std::vector&lt;myclass&gt; getVector();
</code></pre>

<p>Maybe you want to return a reference:</p>

<pre><code>// vector.getVector().clear() clears m_vector in this case
std::vector&lt;myclass&gt;&amp; getVector(); 
</code></pre>
","1525546"
"C++ passing an array pointer as a function argument","95261","","<p>I'm trying to use pointers of arrays to use as arguments for a function which generates an array.</p>

<pre><code>void generateArray(int *a[],  int *si){
  srand(time(0));
  for (int j=0;j&lt;*si;j++)
       *a[j]=(0+rand()%9);
} //end generateArray;

int main() {
  const int size=5;
  int a[size];

  generateArray(&amp;a, &amp;size);

  return 0;
} //end main
</code></pre>

<p>But when I compile this this message appears:</p>

<pre><code>cannot convert `int (*)[5]' to `int**' for argument `1' to `void generateArray(int**, int*)'
</code></pre>
","<p>You're over-complicating it - it just needs to be:</p>

<pre><code>void generateArray(int *a, int si)
{
    for (int j = 0; j &lt; si; j++)
        a[j] = rand() % 9;
}

int main()
{
    const int size=5;
    int a[size];

    generateArray(a, size);

    return 0;
}
</code></pre>

<p>When you pass an array as a parameter to a function it decays to a pointer to the first element of the array. So there is normally never a need to pass a pointer to an array.</p>
","11829889"
"How do I convert a long to a string in C++?","95149","","<p>How do I convert a <code>long</code> to a <code>string</code> in C++?</p>
","<p>You could use stringstream.</p>

<pre><code>#include &lt;sstream&gt;

// ...
std::string number;
std::stringstream strstream;
strstream &lt;&lt; 1L;
strstream &gt;&gt; number;
</code></pre>

<p>There is usually some proprietary C functions in the standard library for your compiler that does it too. I prefer the more ""portable"" variants though.</p>

<p>The C way to do it would be with sprintf, but that is not very secure. In some libraries there is new versions like sprintf_s which protects against buffer overruns.</p>
","947636"
"CRC32 C or C++ implementation","95146","","<p>I'm looking for an implementation of CRC32 in C or C++ that is explicitly licensed as being no cost or public domain.  The implementation <a href=""http://www.networkdls.com/Software/View/CRC32"" rel=""noreferrer"">here</a> seems nice, but the only thing it says about the license is ""source code"", which isn't good enough.  I'd prefer non LGPL so I don't have to fool around with a DLL (my app is closed source).  I saw the adler32 implementation in zlib, but I'm checking small chunks of data, which adler is not good for.  </p>
","<p>Use the <a href=""http://www.boost.org/"" rel=""noreferrer"">Boost C++ libraries</a>.  There is a <a href=""http://www.boost.org/doc/libs/release/libs/crc/index.html"" rel=""noreferrer"">CRC</a> included there and the <a href=""http://www.boost.org/LICENSE_1_0.txt"" rel=""noreferrer"">license</a> is good.</p>
","302932"
"How to get std::vector pointer to the raw data?","95146","","<p>I'm trying to use <code>std::vector</code> as a <code>char</code> array.</p>

<p>My function takes in a void pointer:</p>

<pre><code>void process_data(const void *data);
</code></pre>

<p>Before I simply just used this code:</p>

<pre><code>char something[] = ""my data here"";
process_data(something);
</code></pre>

<p>Which worked as expected.</p>

<p>But now I need the dynamicity of <code>std::vector</code>, so I tried this code instead:</p>

<pre><code>vector&lt;char&gt; something;
*cut*
process_data(something);
</code></pre>

<p>The question is, how do I pass the char vector to my function so I can access the vector raw data (no matter which format it is – floats, etc.)?</p>

<p>I tried this:</p>

<pre><code>process_data(&amp;something);
</code></pre>

<p>And this:</p>

<pre><code>process_data(&amp;something.begin());
</code></pre>

<p>But it returned a pointer to gibberish data, and the latter gave warning: <code>warning C4238: nonstandard extension used : class rvalue used as lvalue</code>.</p>
","<p><code>&amp;something</code> gives you the address of the <code>std::vector</code> object, not the address of the data it holds.  <code>&amp;something.begin()</code> gives you the address of the iterator returned by <code>begin()</code> (as the compiler warns, this is not technically allowed because <code>something.begin()</code> is an rvalue expression, so its address cannot be taken).</p>

<p>Assuming the container has at least one element in it, you need to get the address of the initial element of the container, which you can get via </p>

<ul>
<li><p><code>&amp;something[0]</code> or <code>&amp;something.front()</code> (the address of the element at index 0), or </p></li>
<li><p><code>&amp;*something.begin()</code> (the address of the element pointed to by the iterator returned by <code>begin()</code>).</p></li>
</ul>

<p>In C++11, a new member function was added to <code>std::vector</code>:  <code>data()</code>.  This member function returns the address of the initial element in the container, just like <code>&amp;something.front()</code>.  The advantage of this member function is that it is okay to call it even if the container is empty. </p>
","6485519"
"How to compile for Windows on Linux with gcc/g++?","95103","","<p>I have written some effects in C++ (g++) using freeglut on Linux, and I compile them with</p>

<pre><code>g++ -Wall -lglut part8.cpp -o part8
</code></pre>

<p>So I was wondering if it is possible to have g++ make static compiled Windows executables that contains everything needed?</p>

<p>I don't have Windows, so it would be really cool, if I could do that on Linux :)</p>
","<p>mingw32 exists as a package for Linux. You can cross-compile and -link Windows applications with it. There's a tutorial <a href=""http://forums.codeblocks.org/index.php?topic=3343.0"" rel=""noreferrer"">here at the Code::Blocks forum</a>. Mind that the command changes to <code>mingw32-gcc</code>, for example.</p>

<p><strong>EDIT:</strong> Debian Linux, for example, has MinGW in its repositories:</p>

<pre><code>$ apt-cache search mingw
mingw32 - Minimalist GNU win32 (cross) compiler
mingw32-binutils - Minimalist GNU win32 (cross) binutils
mingw32-runtime - Minimalist GNU win32 (cross) runtime
gcc-mingw32 - The GNU Compiler Collection (cross compiler for MingW32)
...
</code></pre>
","2034007"
"Pointer vs. Reference","95063","","<p>What would be better practice when giving a function the original variable to work with:</p>

<pre><code>unsigned long x = 4;

void func1(unsigned long&amp; val) {
     val = 5;            
}
func1(x);
</code></pre>

<p>or:</p>

<pre><code>void func2(unsigned long* val) {
     *val = 5;
}
func2(&amp;x);
</code></pre>

<p>IOW: Is there any reason to pick one over another?</p>
","<p>My rule of thumb is:</p>

<p>Use pointers if you want to do pointer arithmetic with them (e.g. incrementing the pointer address to step through an array) or if you ever have to pass a NULL-pointer.</p>

<p>Use references otherwise.</p>
","114189"
"error: strcpy was not declared in this scope","95045","","<p>I get this problem in a c++ problem compiling in Ubuntu g++ version 4.4.3.
I dont know the headers to include to solve this problem.. Thanks</p>

<pre><code>centro_medico.cpp: In constructor ‘Centro_medico::Centro_medico(char*, char*, int, int, float)’:
centro_medico.cpp:5: error: ‘strcpy’ was not declared in this scope
centro_medico.cpp:13: warning: deprecated conversion from string constant to ‘char*’
centro_medico.cpp:13: warning: deprecated conversion from string constant to ‘char*’
centro_medico.cpp: In member function ‘Centro_medico&amp; Centro_medico::operator=(const Centro_medico&amp;)’:
centro_medico.cpp:26: error: ‘strcpy’ was not declared in this scope
centro_medico.cpp:39: warning: deprecated conversion from string constant to ‘char*’
centro_medico.cpp:39: warning: deprecated conversion from string constant to ‘char*’
centro_medico.cpp: In member function ‘bool Centro_medico::quitar_medico(int)’:
centro_medico.cpp:92: warning: deprecated conversion from string constant to ‘char*’
centro_medico.cpp:92: warning: deprecated conversion from string constant to ‘char*’
centro_medico.cpp: In member function ‘void Centro_medico::mostrar_especialidades(std::ostream&amp;) const’:
centro_medico.cpp:123: error: ‘strcmpi’ was not declared in this scope
centro_medico.cpp: In member function ‘void Centro_medico::mostrar_horarios_consulta(char*) const’:
centro_medico.cpp:162: error: ‘strcmpi’ was not declared in this scope
centro_medico.cpp: In member function ‘void Centro_medico::crea_medicos()’:
centro_medico.cpp:321: warning: deprecated conversion from string constant to ‘char*’
centro_medico.cpp:321: warning: deprecated conversion from string constant to ‘char*’
</code></pre>

<hr>

<p>medico.cpp</p>

<pre><code>#include ""medico.h""
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;stdlib&gt;  
#include&lt;cstring&gt;
#include&lt;string&gt;

long Medico::total_consultas=0; 
Medico::Medico(char *nom,char * espe,int colegiado,int trabajo)
{
int i;
strcpy(nombre,nom);
strcpy(especialidad,espe);
num_colegiado=colegiado;
num_horas_diarias=trabajo;
citas_medico= new Cita*[5]; // 5 Días de las semana, de Lunes a Viernes.
for (i=0;i&lt;5;i++)
citas_medico[i]=new Cita[num_horas_diarias];
}



Medico::Medico(const Medico &amp;m){
  int i;
  citas_medico=new Cita*[5];
  for (i=0;i&lt;5;i++)
   citas_medico[i]=NULL;
 (*this) = m;
}

Medico &amp;Medico::operator=(const Medico &amp;m){
 int i,j;
 if (this != &amp;m) { // Para evitar la asignación de un objeto a sí mismo
     strcpy(nombre,m.nombre);
     strcpy(especialidad,m.especialidad);     
     num_colegiado=m.num_colegiado;
     num_horas_diarias=m.num_horas_diarias;
     for (i=0;i&lt;5;i++){
      delete citas_medico[i]; 
      citas_medico[i]=new Cita[num_horas_diarias];
      for(j=0;j&lt;num_horas_diarias;j++){
       citas_medico[i][j] = m.citas_medico[i][j] ;
       }
     }     
  }
 return *this;
}
</code></pre>

<hr>

<p>medico.h</p>

<pre><code>#pragma once
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
using namespace std;
#include ""cita.h""

class Medico
{
 private:
                char nombre[50];
                char especialidad[50];
                int num_colegiado;
                int num_horas_diarias;
                Cita **citas_medico;
                static long total_consultas;                
 public:
                void mostrar_calendario_citas(ostream &amp;o=cout) const;
                bool asignar_cita(int d, int hor,Paciente *p=NULL);
                void anular_cita(int d, int hor);
                bool consultar_cita(char dni[10], int modificar=0);
                void modificar_cita(int d, int hor);                
                void vaciar_calendario_citas();
                void borrar_calendario_citas();                
                char* get_especialidad(char espec[50]) const;
                char* get_nombre(char n[50]) const;
                int get_num_colegiado() const;
                int get_num_horas() const;
                void set_num_horas(int horas);
                void mostrar_info(ostream &amp;o=cout) const;
                static long get_total_consultas();
                Cita* operator[](int dia);
                void eliminar_calendario_citas();
                void crear_calendario_citas();    
                Medico(char *nom,char * espe,int colegiado,int trabajo);
                Medico(const Medico &amp;m);
                Medico &amp;operator=(const Medico &amp;c);
                void operator delete(void*);
                ~Medico();
 };
 ostream&amp; operator&lt;&lt;(ostream &amp;o, Medico &amp;c);
 ofstream&amp; operator&lt;&lt;(ofstream &amp;fichero, Medico &amp;m);
 ifstream&amp; operator&gt;&gt;(ifstream &amp;fichero, Medico &amp;m);
</code></pre>
","<p>Observations:</p>

<ul>
<li><code>#include &lt;cstring&gt;</code> should introduce std::strcpy().</li>
<li><code>using namespace std;</code> (as written in medico.h) introduces any identifiers from <code>std::</code> into the global namespace.</li>
</ul>

<p>Aside from <code>using namespace std;</code> being somewhat clumsy once the application grows larger (as it introduces one hell of a lot of identifiers into the global namespace), and that you should <strong>never</strong> use <code>using</code> in a header file (see below!), <code>using namespace</code> does not affect identifiers introduced <em>after</em> the statement.</p>

<p>(<code>using namespace std</code> is written in the header, which is included in medico.cpp, but <code>#include &lt;cstring&gt;</code> comes <em>after</em> that.)</p>

<p><strong>My advice:</strong> Put the <code>using namespace std;</code> into medico.cpp, <em>after any includes</em>, and use explicit <code>std::</code> in medico.h.</p>

<hr>

<p><code>strcmpi()</code> is not a standard function at all; while being defined on Windows, you have to solve case-insensitive compares differently on Linux.</p>

<p>(On general terms, I would like to point to <a href=""https://stackoverflow.com/questions/313970/how-to-convert-stdstring-to-lower-case/24063783#24063783"">this answer</a> with regards to ""proper"" string handling in C and C++ that takes Unicode into account, as every application should. Summary: The standard <em>cannot</em> handle these things correctly; <em>do</em> use <a href=""http://site.icu-project.org/"" rel=""nofollow noreferrer"">ICU</a>.)</p>

<hr>

<pre><code>warning: deprecated conversion from string constant to ‘char*’
</code></pre>

<p>A ""string constant"" is when you write a string literal (e.g. <code>""Hello""</code>) in your code. Its type is <code>const char[]</code>, i.e. array of <em>constant</em> characters (as you cannot change the characters). You can assign an array to a pointer, but assigning to <code>char *</code>, i.e. removing the <code>const</code> qualifier, generates the warning you are seeing.</p>

<hr>

<p>OT clarification: <code>using</code> in a header file changes visibility of identifiers for anyone including that header, which is usually not what the user of your header file wants. For example, I could use <code>std::string</code> and a self-written <code>::string</code> just perfectly in my code, <em>unless I include your medico.h</em>, because then the two classes will clash.</p>

<p>Don't use <code>using</code> in header files.</p>
","2220922"
"Checking for a null object in C++","95009","","<p>I've mostly only worked with C and am running into some unfamiliar issues in C++.</p>

<p>Let's say that I have some function like this in C, which would be very typical:</p>

<pre><code>int some_c_function(const char* var)
{
    if (var == NULL) {
        /* Exit early so we don't dereference a null pointer */
    }
    /* The rest of the code */
}
</code></pre>

<p>And let's say that I'm trying to write a similar function in C++:</p>

<pre><code>int some_cpp_function(const some_object&amp; str)
{
    if (str == NULL)  // This doesn't compile, probably because some_object doesn't overload the == operator

    if (&amp;str == NULL) // This compiles, but it doesn't work, and does this even mean anything?
}
</code></pre>

<p>Basically, all I'm trying to do is to prevent the program from crashing when some_cpp_function() is called with NULL.</p>

<ul>
<li><p>What is the most typical/common way of doing this with an object C++ (that doesn't involve overloading the <code>==</code> operator)?</p></li>
<li><p>Is this even the right approach? That is, should I not write functions that take an object as an argument, but rather, write member functions? (but even if so, please answer the original question)</p></li>
<li><p>Between a function that takes a reference to an object, or a function that takes a C-style pointer to an object, are there reasons to choose one over the other?</p></li>
</ul>
","<blockquote>
  <p>Basically, all I'm trying to do is to
  prevent the program from crashing when
  some_cpp_function() is called with
  NULL.</p>
</blockquote>

<p>It is not possible to call the function with NULL. One of the purpose of having the reference, it will point to some object always as you have to initialize it when defining it. Do not think reference as a fancy pointer, think of it as an alias name for the object itself. Then this type of confusion will not arise.</p>
","2099901"
"extra qualification error in C++","95007","","<p>I have a member function that is defined as follows:</p>

<pre><code>Value JSONDeserializer::ParseValue(TDR type, const json_string&amp; valueString);
</code></pre>

<p>When I compile the source, I get:</p>

<blockquote>
  <p>error: extra qualification 'JSONDeserializer::' on member 'ParseValue'</p>
</blockquote>

<p>What is this? How do I remove this error?</p>
","<p>This is because you have the following code:</p>

<pre><code>class JSONDeserializer
{
    Value JSONDeserializer::ParseValue(TDR type, const json_string&amp; valueString);
};
</code></pre>

<p>This is not valid C++ but Visual Studio seems to accept it. You need to change it to the following code to be able to compile it with a standard compliant compiler (gcc is more compliant to the standard on this point).</p>

<pre><code>class JSONDeserializer
{
    Value ParseValue(TDR type, const json_string&amp; valueString);
};
</code></pre>

<p>The error come from the fact that <code>JSONDeserializer::ParseValue</code> is a qualified name (a name with a namespace qualification), and such a name is forbidden as a method name in a class.</p>
","5642453"
"Difference between long and int data types","94934","","<p>Considering that the following statements return <code>4</code>, what is the difference between the <code>int</code> and <code>long</code> types in C++?</p>

<pre><code>sizeof(int)
sizeof(long)
</code></pre>
","<p>From <a href=""http://tsemba.org/c/inttypes.html"" rel=""noreferrer"">this</a> reference:</p>

<blockquote>
  <p>An int was originally intended to be
  the ""natural"" word size of the
  processor. Many modern processors can
  handle different word sizes with equal
  ease.</p>
</blockquote>

<p>Also, this bit:</p>

<blockquote>
  <p>On many (but not all) C and C++
  implementations, a long is larger than
  an int. Today's most popular desktop
  platforms, such as Windows and Linux,
  run primarily on 32 bit processors and
  most compilers for these platforms use
  a 32 bit int which has the same size
  and representation as a long.</p>
</blockquote>
","900243"
"'cl' is not recognized as an internal or external command,","94837","","<p>I am trying to compile a hello world program in Qt Using Qt Creator.</p>

<p>I am getting 'cl' is not recognized as an internal or external command.</p>

<p>I am using Windows 7 and Both Vs 2008 and 2010 installed in it.
When I use Mingw it is compiling fine but if use vs 2008 it is giving this error.</p>

<p>After Setting Env Path =..;..;C:\Program Files\Microsoft Visual Studio 9.0\VC\bin also it is showing the same error.</p>
","<p>I think <code>cl</code> isn't in your path. You need to add it there. The recommended way to do this is to launch a <em>developer command prompt</em>.</p>

<p>Quoting the article <em><a href=""https://msdn.microsoft.com/en-us/library/f2ccy3wt%28v=vs.140%29.aspx"" rel=""noreferrer"">Setting the Path and Environment Variables for Command-Line Builds</a></em>:</p>

<blockquote>
  <p>To open a Developer Command Prompt window</p>
  
  <ol>
  <li><p>With the Windows 8 Start screen showing, type <strong>Visual Studio Tools</strong>. Notice that the search results change as you type; when <strong>Visual Studio
  Tools</strong> appears, choose it.</p>
  
  <p>On earlier versions of Windows, choose <strong>Start</strong>, and then in the search box, type <strong>Visual Studio Tools</strong>. When <strong>Visual Studio Tools</strong> appears
  in the search results, choose it.</p></li>
  <li><p>In the <strong>Visual Studio Tools</strong> folder, open the <strong>Developer Command Prompt</strong> for your version of Visual Studio. (To run as administrator,
  open the shortcut menu for the Developer Command Prompt and choose <strong>Run
  as Administrator</strong>.)</p></li>
  </ol>
</blockquote>

<p>As the article notes, there are several different shortcuts for setting up different toolsets - you need to pick the suitable one.</p>

<p>If you already have a plain Command Prompt window open, you can run the batch file <code>vcvarsall.bat</code> with the appropriate argument to set up the environment variables. Quoting the same article:</p>

<blockquote>
  <p>To run vcvarsall.bat</p>
  
  <ol>
  <li><p>At the command prompt, change to the Visual C++ installation directory. (The location depends on the system and the Visual Studio
  installation, but a typical location is C:\Program Files
  (x86)\Microsoft Visual Studio version\VC.) For example, enter:</p>

<pre><code>cd ""\Program Files (x86)\Microsoft Visual Studio 12.0\VC""
</code></pre></li>
  <li><p>To configure this Command Prompt window for 32-bit x86 command-line builds, at the command prompt, enter:</p>

<pre><code>vcvarsall x86
</code></pre></li>
  </ol>
</blockquote>

<p>From the article, the possible arguments are the following:</p>

<ul>
<li><code>x86</code> (x86 32-bit native)</li>
<li><code>x86_amd64</code> (x64 on x86 cross)</li>
<li><code>x86_arm</code> (ARM on x86 cross)</li>
<li><code>amd64</code> (x64 64-bit native)</li>
<li><code>amd64_x86</code> (x86 on x64 cross)</li>
<li><code>amd64_arm</code> (ARM on x64 cross)</li>
</ul>
","8800422"
"How do I make Visual Studio pause after executing a console application in debug mode?","94790","","<p>I have a collection of Boost unit tests I want to run as a console application.</p>

<p>When I'm working on the project and I run the tests I would like to be able to debug the tests, and I would like to have the console stay open after the tests run.</p>

<p>I see that if I run in release mode the console window stays up after the program exits, but in debug mode this is not the case.</p>

<p>I do not want to add 'system(""pause"");' or any other hacks like reading a character to my program. I just want to make Visual Studio pause after running the tests with debugging like it would if I were running in release mode. I would also like it if the output of tests were captured in one of Visual Studio's output windows, but that also seems to be harder than it should be.</p>

<p>How can I do this?</p>
","<p>Boost test offers the following <a href=""http://www.boost.org/doc/libs/1_56_0/libs/test/doc/html/utf/usage-recommendations/dot-net-specific.html"" rel=""nofollow noreferrer"">usage recommendations for Visual Studio</a> that would enable you to run the unit tests automatically at the end of compilation and capture the output into the build window. </p>

<p>The nice side effect of this trick is it enable you to treat test failures as compilation errors. ""...you could jump through these errors using usual keyboard shortcuts/mouse clicks you use for compilation error analysis...""</p>
","193770"
"Rotating a point about another point (2D)","94782","","<p>I'm trying to make a card game where the cards fan out. Right now to display it Im using the Allegro API which has a function:</p>

<pre><code>al_draw_rotated_bitmap(OBJECT_TO_ROTATE,CENTER_X,CENTER_Y,X
        ,Y,DEGREES_TO_ROTATE_IN_RADIANS);
</code></pre>

<p>so with this I can make my fan effect easily. The problem is then knowing which card is under the mouse. To do this I thought of doing a polygon collision test. I'm just not sure how to rotate the 4 points on the card to make up the polygon. I basically need to do the same operation as Allegro.</p>

<p>for example, the 4 points of the card are:</p>

<pre><code>card.x

card.y

card.x + card.width

card.y + card.height
</code></pre>

<p>I would need a function like:</p>

<pre><code>POINT rotate_point(float cx,float cy,float angle,POINT p)
{
}
</code></pre>

<p>Thanks</p>
","<p>Oh, that's easy.. first subtract the pivot point (cx,cy), then rotate it, then add the point again.</p>

<p>untested:</p>

<pre><code>POINT rotate_point(float cx,float cy,float angle,POINT p)
{
  float s = sin(angle);
  float c = cos(angle);

  // translate point back to origin:
  p.x -= cx;
  p.y -= cy;

  // rotate point
  float xnew = p.x * c - p.y * s;
  float ynew = p.x * s + p.y * c;

  // translate point back:
  p.x = xnew + cx;
  p.y = ynew + cy;
  return p;
}
</code></pre>
","2259502"
"Using std::max_element on a vector<double>","94613","","<p>I'm trying to use <code>std::min_element</code> and <code>std::max_element</code> to return the min and max elements in a vector of doubles.  My compiler doesn't like how I'm currently trying to use them, and I don't understand the error message.  I could of course write my own procedure to find the min/max, but I'd like to understand how to use the functions.</p>

<pre><code>#include &lt;vector&gt;
#include &lt;algorithm&gt;

using namespace std;

int main(int argc, char** argv) {

    double cLower, cUpper;
    vector&lt;double&gt; C;

    // code to insert values in C not shown here

    cLower = min_element(C.begin(), C.end());
    cUpper = max_element(C.begin(), C.end());

    return 0;
}
</code></pre>

<p>Here is the compiler error:</p>

<pre><code>../MIXD.cpp:84: error: cannot convert '__gnu_cxx::__normal_iterator&lt;double*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;' to 'double' in assignment
../MIXD.cpp:85: error: cannot convert '__gnu_cxx::__normal_iterator&lt;double*, std::vector&lt;double, std::allocator&lt;double&gt; &gt; &gt;' to 'double' in assignment
</code></pre>

<p>Would someone please explain what I'm doing wrong?</p>
","<p><code>min_element</code> and <code>max_element</code> return iterators, not values. So you need <code>*min_element...</code> and <code>*max_element...</code>.</p>
","10158762"
"Detecting TCP Client Disconnect","94290","","<p>Let's say I'm running a simple server and have <code>accept()</code>ed a connection from a client.</p>

<p>What is the best way to tell when the client has disconnected? Normally, a client is supposed to send a close command, but what if it disconnects manually or loses network connection altogether? How can the server detect or handle this?</p>
","<p>select (with the read mask set) will return with the handle signalled, but when you use ioctl* to check the number of bytes pending to be read, it will be zero. This is a sign that the socket has been disconnected.</p>

<p>This is a great discussion on the various methods of checking that the client has disconnected: <a href=""http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html"" rel=""nofollow noreferrer"">Stephen Cleary, Detection of Half-Open (Dropped) Connections</a>.</p>

<p>* for Windows use ioctlsocket.</p>
","283387"
"Can I do Android Programming in C++, C?","94250","","<p>Can I do Android programming in C++, C? If the answer is ""yes"" then please tell how? And what's the procedure to set up?</p>

<p>I don't know Obj-C, Java, but well-versed in C, C++, Flash AS3, SDK released by Google.</p>

<p>Please do not tell about NVDIA SDK it's not fully developed :)</p>
","<p><strong>PLEASE NOTE: THE ANSWER BELOW IS HORRIBLY OUTDATED, AND MIGHT NOT BE ENTIRELY CORRECT ANYMORE.</strong></p>

<p>You can program in C/C++ using the <a href=""http://developer.android.com/sdk/ndk/index.html#overview"" rel=""noreferrer"">Android NDK</a>. You'll have to wrap your c++ codebase in a static library and load that through a Java wrapper &amp; JNI. </p>

<p>The standard NDK does not support RTTI and a lot of the functionality of standard c++ is also not available such as std::string, etc. To solve this you can recompile the NDK. Dmitry Moskalchuk supplies a modified version of the NDK that supports this at <a href=""http://www.crystax.net/android/ndk-r3.php"" rel=""noreferrer"">http://www.crystax.net/android/ndk-r3.php</a>. This modified version works on all Android phones that run on an ARM processor.</p>

<p>Depending on the kind of application you should decide to use Java or C/C++. I'd use C/C++ for anything that requires above average computational power and games -- Java for the rest. </p>

<p>Just pick one language and write the majority of your application in that language; JNI calls can decrease your performance by a lot. Java isn't that hard though -- if you know how to program in C/C++. The advantage of Java is that the application can run on any device running Android, where as NDK applications depend on the architecture it was compiled for.</p>
","2774138"
"Iterator Loop vs index loop","94216","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/131241/why-use-iterators-instead-of-array-indices"">Why use iterators instead of array indices?</a>  </p>
</blockquote>



<p>I'm reviewing my knowledge on C++ and I've stumbled upon iterators. One thing I want to know is what makes them so special and I want to know why this: </p>

<pre><code>using namespace std;

vector&lt;int&gt; myIntVector;
vector&lt;int&gt;::iterator myIntVectorIterator;

// Add some elements to myIntVector
myIntVector.push_back(1);
myIntVector.push_back(4);
myIntVector.push_back(8);

for(myIntVectorIterator = myIntVector.begin(); 
        myIntVectorIterator != myIntVector.end();
        myIntVectorIterator++)
{
    cout&lt;&lt;*myIntVectorIterator&lt;&lt;"" "";
    //Should output 1 4 8
}
</code></pre>

<p>is better than this: </p>

<pre><code>using namespace std;

vector&lt;int&gt; myIntVector;
// Add some elements to myIntVector
myIntVector.push_back(1);
myIntVector.push_back(4);
myIntVector.push_back(8);

for(int y=0; y&lt;myIntVector.size(); y++)
{
    cout&lt;&lt;myIntVector[y]&lt;&lt;"" "";
    //Should output 1 4 8
}
</code></pre>

<p>And yes I know that I shouldn't be using the std namespace. I just took this example off of the cprogramming website. So can you please tell me why the latter is worse? What's the big difference?</p>
","<p>The special thing about iterators is that they provide the glue between <a href=""https://stackoverflow.com/a/11948413/819272"">algorithms and containers</a>. For generic code, the recommendation would be to use a combination of STL algorithms (e.g. <code>find</code>, <code>sort</code>, <code>remove</code>, <code>copy</code>) etc. that carries out the computation that you have in mind on your data structure (<code>vector</code>, <code>list</code>, <code>map</code> etc.), and to supply that algorithm with iterators into your container.</p>

<p>Your particular example could be written as a combination of the <code>for_each</code> algorithm and the <code>vector</code> container (see option 3) below), but it's only one out of four distinct ways to iterate over a std::vector:</p>

<p><strong>1) index-based iteration</strong></p>

<pre><code>for (std::size_t i = 0; i != v.size(); ++i) {
    // access element as v[i]

    // any code including continue, break, return
}
</code></pre>

<p><em>Advantages</em>: familiar to anyone familiar with C-style code, can loop using different strides (e.g. <code>i += 2</code>).</p>

<p><em>Disadvantages</em>: only for sequential random access containers (<code>vector</code>, <code>array</code>, <code>deque</code>), doesn't work for <code>list</code>, <code>forward_list</code> or the associative containers. Also the loop control is a little verbose (init, check, increment). People need to be aware of the 0-based indexing in C++.</p>

<p><strong>2) iterator-based iteration</strong></p>

<pre><code>for (auto it = v.begin(); it != v.end(); ++it) {
    // if the current index is needed:
    auto i = std::distance(v.begin(), it); 

    // access element as *it

    // any code including continue, break, return
}
</code></pre>

<p><em>Advantages</em>: more generic, works for all containers (even the new unordered associative containers, can also use different strides (e.g. <code>std::advance(it, 2)</code>);</p>

<p><em>Disadvantages</em>: need extra work to get the index of the current element (could be O(N) for list or forward_list). Again, the loop control is a little verbose (init, check, increment). </p>

<p><strong>3) STL for_each algorithm + lambda</strong></p>

<pre><code>std::for_each(v.begin(), v.end(), [](T const&amp; elem) {
     // if the current index is needed:
     auto i = &amp;elem - &amp;v[0];

     // cannot continue, break or return out of the loop
});
</code></pre>

<p><em>Advantages</em>: same as 2) plus small reduction in loop control (no check and increment), this can greatly reduce your bug rate (wrong init, check or increment, off-by-one errors).</p>

<p><em>Disadvantages</em>: same as explicit iterator-loop plus restricted possibilities for flow control in the loop (cannot use continue, break or return) and no option for different strides (unless you use an iterator adapter that overloads <code>operator++</code>).</p>

<p><strong>4) range-for loop</strong></p>

<pre><code>for (auto&amp; elem: v) {
     // if the current index is needed:
     auto i = &amp;elem - &amp;v[0];

    // any code including continue, break, return
}
</code></pre>

<p><em>Advantages</em>: very compact loop control, direct access to the current element.</p>

<p><em>Disadvantages</em>: extra statement to get the index. Cannot use different strides.</p>

<p><strong>What to use?</strong> </p>

<p>For your particular example of iterating over <code>std::vector</code>: if you really need the index (e.g. access the previous or next element, printing/logging the index inside the loop etc.) or you need a stride different than 1, then I would go for the explicitly indexed-loop, otherwise I'd go for the range-for loop. </p>

<p>For generic algorithms on generic containers I'd go for the explicit iterator loop unless the code contained no flow control inside the loop and needed stride 1, in which case I'd go for the STL <code>for_each</code> + a lambda.</p>
","14374550"
"Does Arduino use C or C++?","94166","","<p>Coming from Python, the whole C/C++ thing is kind of alien to begin with... and then I see in one place that Arduino uses 'standard' C, and in another that it uses 'standard' C++, so on and so forth.  Which is it?  My admittedly crude understanding of the difference between the two is that C++ is (roughly) C with classes/objects.  How does that affect which language or dialect (C or C++) should I concentrate on learning for use primarily with Arduino?</p>
","<p>Arduino doesn't run either C or C++. It runs machine code compiled from either C, C++ or any other language that has a compiler for the Arduino instruction set.</p>

<p>C being a subset of C++, if Arduino can ""run"" C++ then it can ""run"" C.</p>

<p>If you don't already know C nor C++, you should probably start with C, just to get used to the whole ""pointer"" thing. You'll lose all the object inheritance capabilities though.</p>
","11812872"
"Static variables in C++","94164","","<p>I would like to know what is the difference between static variables in a header file vs declared in a class. When static variable is declared in a header file is its scope limited to .h file or across all units. Also generally static variable is initialized in .cpp file when declared in a class right? So that does mean static variable scope is limited to 2 compilation units?</p>
","<p>Excuse me when I answer your questions out-of-order, it makes it easier to understand this way.</p>

<blockquote>
  <p>When static variable is declared in a header file is its scope limited to .h file or across all units.</p>
</blockquote>

<p>There is no such thing as a ""header file scope"". The header file gets <em>included</em> into source files. The translation unit is the source file <em>including</em> the text from the header files. Whatever you write in a header file gets <em>copied</em> into each including source file.</p>

<p>As such, a static variable declared in a header file is like a static variable in each individual source file.</p>

<p>Since declaring a variable <code>static</code> this way means internal linkage, every translation unit <code>#include</code>ing your header file gets its <strong>own</strong>, <strong>individual</strong> variable (which is not visible outside your translation unit). This is usually not what you want.</p>

<blockquote>
  <p>I would like to know what is the difference between static variables in a header file vs declared in a class.</p>
</blockquote>

<p>In a class declaration, <code>static</code> means that all instances of the class <em>share</em> this member variable; i.e., you might have hundreds of objects of this type, but whenever one of these objects refers to the <code>static</code> (or ""class"") variable, it's the same value for all objects. You could think of it as a ""class global"".</p>

<blockquote>
  <p>Also generally static variable is initialized in .cpp file when declared in a class right ?</p>
</blockquote>

<p>Yes, <em>one</em> (and only <em>one</em>) translation unit must initialize the class variable.</p>

<blockquote>
  <p>So that does mean static variable scope is limited to 2 compilation units ?</p>
</blockquote>

<p>As I said:</p>

<ul>
<li>A header is not a compilation unit,</li>
<li><code>static</code> means completely different things depending on context.</li>
</ul>

<p>Global <code>static</code> limits scope to the translation unit. Class <code>static</code> means global to all instances.</p>

<p>I hope this helps.</p>

<p><strong>PS:</strong> Check the last paragraph of Chubsdad's answer, about how you shouldn't use <code>static</code> in C++ for indicating internal linkage, but anonymous namespaces. (Because he's right. ;-) )</p>
","3698179"
"How to printf uint64_t? Fails with: ""spurious trailing ‘%’ in format""","94155","","<p>I wrote a very simple test code of printf uint64_t:</p>

<pre><code>#include &lt;inttypes.h&gt;
#include &lt;stdio.h&gt;

int main()
{
  uint64_t ui64 = 90;
  printf(""test uint64_t : %"" PRIu64 ""\n"", ui64);
  return 0;
}
</code></pre>

<p>I use ubuntu 11.10 (64 bit) and gcc version 4.6.1 to compile it, but failed:</p>

<pre><code>main.cpp: In function ‘int main()’:
main.cpp:9:30: error: expected ‘)’ before ‘PRIu64’
main.cpp:9:47: warning: spurious trailing ‘%’ in format [-Wformat]
</code></pre>
","<p>The ISO C99 standard specifies that these macros must only be defined if explicitly requested.</p>

<pre><code>#define __STDC_FORMAT_MACROS
#include &lt;inttypes.h&gt;

... now PRIu64 will work
</code></pre>
","8132440"
"What is the simplest way to convert array to vector?","94033","","<p>What is the simplest way to convert array to vector?</p>

<pre><code>void test(vector&lt;int&gt; _array)
{
  ...
}

int x[3]={1, 2, 3};
test(x); // Syntax error.
</code></pre>

<p>I want to convert x from int array to vector in simplest way.</p>
","<p>Use the <code>vector</code> constructor that takes two iterators, note that pointers are valid iterators, and use the implicit conversion from arrays to pointers:</p>

<pre><code>int x[3] = {1, 2, 3};
std::vector&lt;int&gt; v(x, x + sizeof x / sizeof x[0]);
test(v);
</code></pre>

<p>or</p>

<pre><code>test(std::vector&lt;int&gt;(x, x + sizeof x / sizeof x[0]));
</code></pre>

<p>where <code>sizeof x / sizeof x[0]</code> is obviously <code>3</code> in this context; it's the generic way of getting the number of elements in an array. Note that <code>x + sizeof x / sizeof x[0]</code> points one element <em>beyond</em> the last element.</p>
","8777619"
"LNK2019: unresolved external symbol _main referenced in function ___tmainCRTStartup","94020","","<p>I have the following error LNK2019: unresolved external symbol _main referenced in function ___tmainCRTStartup, </p>

<p>There are a lot of threads relating to this error but none of those solutions worked for me. And, none explained why this error is here.</p>

<p>I tried:</p>

<ul>
<li>wWinMainCRTStartup as entry point in the linker properties <a href=""http://social.msdn.microsoft.com/Forums/en/vclanguage/thread/14e85604-6929-4707-a22e-8cdf596926a6"" rel=""nofollow noreferrer"">http://social.msdn.microsoft.com/Forums/en/vclanguage/thread/14e85604-6929-4707-a22e-8cdf596926a6</a></li>
<li>set the linker to ""Windows"" (same thread as above)</li>
<li>Right click on solution name->Add->Existing Item->file with main (same thread as above)</li>
<li><h1>include  <a href=""https://stackoverflow.com/questions/4845410/error-lnk2019-unresolved-external-symbol-main-referenced-in-function-tmainc"">error LNK2019: unresolved external symbol _main referenced in function ___tmainCRTStartup</a></h1></li>
<li>try Project + properties, C/C++, Code generation, Buffer security check = No <a href=""http://social.msdn.microsoft.com/Forums/hi-IN/vclanguage/thread/e2ea62c3-beb3-47a4-8963-60b799e3375a"" rel=""nofollow noreferrer"">http://social.msdn.microsoft.com/Forums/hi-IN/vclanguage/thread/e2ea62c3-beb3-47a4-8963-60b799e3375a</a></li>
<li>Options: C/C++, Code generation, Runtime library=/MTd; C/C++, Code generation, Basic Runtime Checks=default; C/C++, Code generation, Buffer security check=No; Linker, Advanced, Entry Point=main <a href=""http://social.msdn.microsoft.com/Forums/hi-IN/vclanguage/thread/e2ea62c3-beb3-47a4-8963-60b799e3375a"" rel=""nofollow noreferrer"">http://social.msdn.microsoft.com/Forums/hi-IN/vclanguage/thread/e2ea62c3-beb3-47a4-8963-60b799e3375a</a></li>
<li>commented out headers in main.cpp except 'using namespace std' and #include  - results in cascading and snowballing error from functions that referencing those headers</li>
<li>I deleted everything in main.cpp except test code and excluded all source files except main.cpp; as expected it worked, so a small step in the right direction. The problem must be with one of the header files.</li>
<li>create new project with Win32 Windows application template <a href=""http://social.msdn.microsoft.com/Forums/ar-SA/vcgeneral/thread/105a366f-c38d-4c1c-9278-eca64589e7ca"" rel=""nofollow noreferrer"">http://social.msdn.microsoft.com/Forums/ar-SA/vcgeneral/thread/105a366f-c38d-4c1c-9278-eca64589e7ca</a> and <a href=""http://social.msdn.microsoft.com/Forums/zh/Vsexpressvc/thread/341780c2-162e-4b36-9402-283c0cf7c0ac"" rel=""nofollow noreferrer"">http://social.msdn.microsoft.com/Forums/zh/Vsexpressvc/thread/341780c2-162e-4b36-9402-283c0cf7c0ac</a></li>
</ul>

<p>have not tried and suspect that these also will not work:</p>

<ul>
<li>use int main() (not sure what they mean, file name or main function name) <a href=""http://social.msdn.microsoft.com/Forums/zh/Vsexpressvc/thread/341780c2-162e-4b36-9402-283c0cf7c0ac"" rel=""nofollow noreferrer"">http://social.msdn.microsoft.com/Forums/zh/Vsexpressvc/thread/341780c2-162e-4b36-9402-283c0cf7c0ac</a></li>
<li>using cmake to build on windows 7 x64 <a href=""http://hdf-forum.184993.n3.nabble.com/error-LNK2019-unresolved-external-symbol-main-referenced-in-function-tmainCRTStartup-td3138042.html"" rel=""nofollow noreferrer"">http://hdf-forum.184993.n3.nabble.com/error-LNK2019-unresolved-external-symbol-main-referenced-in-function-tmainCRTStartup-td3138042.html</a></li>
</ul>

<p>why am I getting this error and what is the solution?</p>
","<p>What is your project type? If it's a ""Win32 project"", your entry point should be <code>(w)WinMain</code>. If it's a ""Win32 Console Project"", then it should be <code>(w)main</code>. The name <code>_tmain</code> is #defined to be either <code>main</code> or <code>wmain</code> depending on whether UNICODE is defined or not.</p>

<p>If it's a DLL, then <code>DllMain</code>.</p>

<p>The project type can be seen under project properties, Linker, System, Subsystem. It would say either ""Console"" or ""Windows"".</p>

<p>Note that the entry point name varies depending on whether UNICODE is defined or not. In VS2008, it's defined by default.</p>

<p>The proper prototype for main is either</p>

<pre><code>int _tmain(int argc, _TCHAR* argv[])
</code></pre>

<p>or </p>

<pre><code>int _tmain()
</code></pre>

<p>Make sure it's one of those.</p>

<p>EDIT:</p>

<p>If you're getting an error on _TCHAR, place an</p>

<pre><code>#include &lt;tchar.h&gt;
</code></pre>

<p>If you think the issue is with one of the headers, go to the properties of the file with main(), and under Preprocessor, enable generating of the preprocessed file. Then compile. You'll get a file with the same name a .i extension. Open it, and see if anything unsavory happened to the main() function. There can be rogue #defines in theory...</p>

<p>EDIT2:</p>

<p>With UNICODE defined (which is the default), the linker expects the entry point to be wmain(), not main(). _tmain has the advantage of being UNICODE-agnostic - it translates to either main or wmain.</p>

<p>Some time ago, there was a reason to maintain both an ANSI build and a Unicode build. Unicode support was sorely incomplete in Windows 95/98/Me. The primary APIs were ANSI, and Unicode versions existed here and there, but not pervasively. Also, the VS debugger had trouble displaying Unicode strings. In the NT kernel OSes (that's Windows 2000/XP/Vista/7/8/10), Unicode support is primary, and ANSI functions are added on top. So ever since VS2005, the default upon project creation is Unicode. That means - wmain. They could not keep the same entry point name because the parameter types are different. _TCHAR is #defined to be either char or wchar_t. So _tmain is either main(int argc, char **argv) or wmain(int argc, wchar_t **argv).</p>

<p>The reason you were getting an error at <code>_tmain</code> at some point was probably because you did not change the type of <code>argv</code> to <code>_TCHAR**</code>.</p>

<p>If you're not planning to ever support ANSI (probably not), you can reformulate your entry point as</p>

<pre><code>int wmain(int argc, wchar_t *argv[])
</code></pre>

<p>and remove the <code>tchar.h</code> include line.</p>
","11247914"
"How can I get a process handle by its name in C++?","93775","","<p>I'm trying to get the process handle of, say example.exe, so I can call <code>TerminateProcess</code> on it. How can I do this? Notice, it doesn't have a window so <code>FindWindow</code> won't work.</p>
","<pre><code>#include &lt;cstdio&gt;
#include &lt;windows.h&gt;
#include &lt;tlhelp32.h&gt;

int main( int, char *[] )
{
    PROCESSENTRY32 entry;
    entry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

    if (Process32First(snapshot, &amp;entry) == TRUE)
    {
        while (Process32Next(snapshot, &amp;entry) == TRUE)
        {
            if (stricmp(entry.szExeFile, ""target.exe"") == 0)
            {  
                HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, entry.th32ProcessID);

                // Do stuff..

                CloseHandle(hProcess);
            }
        }
    }

    CloseHandle(snapshot);

    return 0;
}
</code></pre>

<p>Also, if you'd like to use PROCESS_ALL_ACCESS in OpenProcess, you could try this:</p>

<pre><code>#include &lt;cstdio&gt;
#include &lt;windows.h&gt;
#include &lt;tlhelp32.h&gt;

void EnableDebugPriv()
{
    HANDLE hToken;
    LUID luid;
    TOKEN_PRIVILEGES tkp;

    OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken);

    LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;luid);

    tkp.PrivilegeCount = 1;
    tkp.Privileges[0].Luid = luid;
    tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

    AdjustTokenPrivileges(hToken, false, &amp;tkp, sizeof(tkp), NULL, NULL);

    CloseHandle(hToken); 
}

int main( int, char *[] )
{
    EnableDebugPriv();

    PROCESSENTRY32 entry;
    entry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

    if (Process32First(snapshot, &amp;entry) == TRUE)
    {
        while (Process32Next(snapshot, &amp;entry) == TRUE)
        {
            if (stricmp(entry.szExeFile, ""target.exe"") == 0)
            {  
                HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, entry.th32ProcessID);

                // Do stuff..

                CloseHandle(hProcess);
            }
        }
    }

    CloseHandle(snapshot);

    return 0;
}
</code></pre>
","865201"
"Safely override C++ virtual functions","93736","","<p>I have a base class with a virtual function and I want to override that function in a derived class. Is there some way to make the compiler check if the function I declared in the derived class actually overrides a function in the base class? I would like to add some macro or something that ensures that I didn't accidentally declare a new function, instead of overriding the old one.</p>

<p>Take this example:</p>

<pre><code>class parent {
public:
  virtual void handle_event(int something) const {
    // boring default code
  }
};

class child : public parent {
public:
  virtual void handle_event(int something) {
    // new exciting code
  }
};

int main() {
  parent *p = new child();
  p-&gt;handle_event(1);
}
</code></pre>

<p>Here <code>parent::handle_event()</code> is called instead of <code>child::handle_event()</code>, because the child's method misses the <code>const</code> declaration and therefore declares a new method. This could also be a typo in the function name or some minor difference in the parameters types. It can also easily happen if the interface of the base class changes and somewhere some derived class wasn't updated to reflect the change.</p>

<p>Is there some way to avoid this problem, can I somehow tell the compiler or some other tool to check this for me? Any helpful compiler flags (preferably for g++)? How do you avoid these problems?</p>
","<p>Since g++ 4.7 it does understand the new C++11 <code>override</code> keyword:</p>

<pre><code>class child : public parent {
    public:
      // force handle_event to override a existing function in parent
      // error out if the function with the correct signature does not exist
      void handle_event(int something) override;
};
</code></pre>
","11609941"
"Visual Studio 2013 error MS8020 Build tools v140 cannot be found","93650","","<p>I had previously been using VS2013 express without issue, but suddenly it began crashing whenever I tried edit the code while it ran existing code fine.</p>

<p>I tried uninstalling and switching over to VS2015, but it was crashing as well and wasn't compatible with some of my code. So I uninstalled VS2015 and reinstalled VS2013.</p>

<p>The new issue is whenever I try to build a solution it gives the error ""MS8020"".</p>

<p>The full error message is seen below </p>

<p>Error   1   error MSB8020: The build tools for v140 (Platform Toolset = 'v140') cannot be found. To build using the v140 build tools, please install v140 build tools.  Alternatively, you may upgrade to the current Visual Studio tools by selecting the Project menu or right-click the solution, and then selecting ""Upgrade Solution..."".  C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V120\Microsoft.Cpp.Platform.targets   64  5   Bevan</p>
","<p>That's the platform toolset for VS2015. You uninstalled it, therefore it is no longer available.</p>

<p>To change your Platform Toolset:</p>

<ol>
<li>Right click your project, go to Properties.</li>
<li>Under Configuration Properties, go to General.</li>
<li>Change your Platform Toolset to one of the available ones.</li>
</ol>
","31792767"
"C++: Print out enum value as text","93629","","<p>If i have an enum like this</p>

<pre><code>enum Errors
{ErrorA=0, ErrorB, ErrorC};
</code></pre>

<p>Then i want to print out to console</p>

<pre><code>Errors anError = ErrorA;
cout&lt;&lt;anError;/// 0 will be printed
</code></pre>

<p>but what i want is the text ""ErrorA"", can i do it without using if/switch?<br>
And what is your solution for this?</p>
","<p>Using map:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;

enum Errors {ErrorA=0, ErrorB, ErrorC};

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Errors value){
    static std::map&lt;Errors, std::string&gt; strings;
    if (strings.size() == 0){
#define INSERT_ELEMENT(p) strings[p] = #p
        INSERT_ELEMENT(ErrorA);     
        INSERT_ELEMENT(ErrorB);     
        INSERT_ELEMENT(ErrorC);             
#undef INSERT_ELEMENT
    }   

    return out &lt;&lt; strings[value];
}

int main(int argc, char** argv){
    std::cout &lt;&lt; ErrorA &lt;&lt; std::endl &lt;&lt; ErrorB &lt;&lt; std::endl &lt;&lt; ErrorC &lt;&lt; std::endl;
    return 0;   
}
</code></pre>

<p>Using array of structures with linear search:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

enum Errors {ErrorA=0, ErrorB, ErrorC};

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Errors value){
#define MAPENTRY(p) {p, #p}
    const struct MapEntry{
        Errors value;
        const char* str;
    } entries[] = {
        MAPENTRY(ErrorA),
        MAPENTRY(ErrorB),
        MAPENTRY(ErrorC),
        {ErrorA, 0}//doesn't matter what is used instead of ErrorA here...
    };
#undef MAPENTRY
    const char* s = 0;
    for (const MapEntry* i = entries; i-&gt;str; i++){
        if (i-&gt;value == value){
            s = i-&gt;str;
            break;
        }
    }

    return out &lt;&lt; s;
}

int main(int argc, char** argv){
    std::cout &lt;&lt; ErrorA &lt;&lt; std::endl &lt;&lt; ErrorB &lt;&lt; std::endl &lt;&lt; ErrorC &lt;&lt; std::endl;
    return 0;   
}
</code></pre>

<p>Using switch/case:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

enum Errors {ErrorA=0, ErrorB, ErrorC};

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Errors value){
    const char* s = 0;
#define PROCESS_VAL(p) case(p): s = #p; break;
    switch(value){
        PROCESS_VAL(ErrorA);     
        PROCESS_VAL(ErrorB);     
        PROCESS_VAL(ErrorC);
    }
#undef PROCESS_VAL

    return out &lt;&lt; s;
}

int main(int argc, char** argv){
    std::cout &lt;&lt; ErrorA &lt;&lt; std::endl &lt;&lt; ErrorB &lt;&lt; std::endl &lt;&lt; ErrorC &lt;&lt; std::endl;
    return 0;   
}
</code></pre>
","3342891"
"invalid use of incomplete type","93533","","<p>I'm trying to use a typedef from a subclass in my project, I've isolated my problem in the example below.</p>

<p>Does anyone know where I'm going wrong?</p>

<pre><code>template&lt;typename Subclass&gt;
class A {
    public:
        //Why doesn't it like this?
        void action(typename Subclass::mytype var) {
            (static_cast&lt;Subclass*&gt;(this))-&gt;do_action(var);
        }
};

class B : public A&lt;B&gt; {
    public:
        typedef int mytype;

        B() {}

        void do_action(mytype var) {
            // Do stuff
        }
};

int main(int argc, char** argv) {
    B myInstance;
    return 0;
}
</code></pre>

<p>This is the output I get:</p>

<pre><code>sean@SEAN-PC:~/Documents/LucadeStudios/experiments$ g++ -o test test.cpp
test.cpp: In instantiation of ‘A&lt;B&gt;’:
test.cpp:10:   instantiated from here
test.cpp:5: error: invalid use of incomplete type ‘class B’
test.cpp:10: error: forward declaration of ‘class B’
</code></pre>
","<p>The reason is that when instantiating a class template, all its declarations (not the definitions) of its member functions are instantiated too. The class template is instantiated precisely when the full definition of a specialization is required. That is the case when it is used as a base class for example, as in your case. </p>

<p>So what happens is that <code>A&lt;B&gt;</code> is instantiated at </p>

<pre><code>class B : public A&lt;B&gt;
</code></pre>

<p>at which point <code>B</code> is not a complete type yet (it is after the closing brace of the class definition). However, <code>A&lt;B&gt;::action</code>'s declaration requires <code>B</code> to be complete, because it is crawling in the scope of it:</p>

<pre><code>Subclass::mytype
</code></pre>

<p>What you need to do is delaying the instantiation to some point at which <code>B</code> is complete. One way of doing this is to modify the declaration of <code>action</code> to make it a member template.</p>

<pre><code>template&lt;typename T&gt;
void action(T var) {
    (static_cast&lt;Subclass*&gt;(this))-&gt;do_action(var);
}
</code></pre>

<p>It is still type-safe because if <code>var</code> is not of the right type, passing <code>var</code> to <code>do_action</code> will fail. </p>
","652249"
"how do I initialize a float to its max/min value?","93409","","<p>How do I hard code an absolute maximum or minimum value for a float or double? I want to search out the max/min of an array by simply iterating through and catching the largest.</p>

<p>There are also positive and negative infinity for floats, should I use those instead? If so, how do I denote that in my code?</p>
","<p>You can use <a href=""http://en.cppreference.com/w/cpp/types/numeric_limits"" rel=""noreferrer""><code>std::numeric_limits</code></a> which is defined in <code>&lt;limits&gt;</code> to  find the minimum or maximum value of types (As long as a specialization exists for the type). You can also use it to retrieve infinity (and put a <code>-</code> in front for negative infinity).</p>

<pre><code>#include &lt;limits&gt;

//...

std::numeric_limits&lt;float&gt;::max();
std::numeric_limits&lt;float&gt;::min();
std::numeric_limits&lt;float&gt;::infinity();
</code></pre>

<p>As noted in the comments, <code>min()</code> returns the lowest possible positive value. In other words the positive value closest to 0 that can be represented. The lowest possible value is the negative of the maximum possible value.</p>

<p>There is of course the <a href=""http://en.cppreference.com/w/cpp/algorithm/max_element"" rel=""noreferrer""><code>std::max_element</code></a> and min_element functions (defined in <code>&lt;algorithm&gt;</code>) which may be a better choice for finding the largest or smallest value in an array.</p>
","2684625"
"QString to char* conversion","93400","","<p>I was trying to convert a QString to char* type by the following methods, but they don't seem to work.</p>

<pre><code>//QLineEdit *line=new QLineEdit();{just to describe what is line here}

QString temp=line-&gt;text();
char *str=(char *)malloc(10);
QByteArray ba=temp.toLatin1();
strcpy(str,ba.data());
</code></pre>

<p>Can you elaborate the possible flaw with this method, or give an alternative method?</p>
","<p>Well, the <a href=""https://wiki.qt.io/Technical_FAQ#How_can_I_convert_a_QString_to_char.2A_and_vice_versa.3F"" rel=""noreferrer"">Qt FAQ</a> says:</p>

<pre><code>int main(int argc, char **argv)
{
 QApplication app(argc, argv);
 QString str1 = ""Test"";
 QByteArray ba = str1.toLatin1();
 const char *c_str2 = ba.data(); 
 printf(""str2: %s"", c_str2);
 return app.exec();
}
</code></pre>

<p>So perhaps you're having other problems. How exactly doesn't this work?</p>
","2523786"
"Update GCC on OSX","93201","","<p>So I am a new programmer and I just installed XCode on my Macbook to get the GCC. I think Xcode is the only way for getting GCC on OSX. Now when I run my Hello World application, in C++, g++ comes up saying it is version 4.0.1 but when I look for commands starting with g I also see g++-4.2. Is there any way of making 4.2 default rather than 4.0.1, and also is there a way to updating gcc to the latest version 4.4.0?</p>

<p>EDIT: Ok, so I installed macports and installed gcc4.4 and it shows up on terminal as gcc-mp-4.4 and how do I make it default with gcc_select, like what are the commands and stuff. Thanks.</p>
","<p>If you install macports you can install gcc select, and then choose your gcc version.</p>

<pre><code>/opt/local/bin/port install gcc_select
</code></pre>

<p>To see your versions use</p>

<pre><code>port select --list gcc
</code></pre>

<p>To select a version use </p>

<pre><code>sudo port select --set gcc gcc40
</code></pre>
","837996"
"c++ array assignment of multiple values","93125","","<p>so when you initialize an array, you can assign multiple values to it in one spot:</p>

<pre><code>int array [] = {1,3,34,5,6}
</code></pre>

<p>but what if the array is already initialized and I want to completely replace the values of the elements in that array in one line</p>

<p>so </p>

<pre><code>int array [] = {1,3,34,5,6}
array [] = {34,2,4,5,6}
</code></pre>

<p>doesn't seem to work...</p>

<p>is there a way to do so?</p>
","<p>There is a difference between <strong>initialization</strong> and <strong>assignment</strong>. What you want to do is not initialization, but assignment. But such assignment to array is not possible in C++.</p>

<p>Here is what you can do:</p>

<pre><code>#include &lt;algorithm&gt;

int array [] = {1,3,34,5,6};
int newarr [] = {34,2,4,5,6};
std::copy(newarr, newarr + 5, array);
</code></pre>

<hr>

<p>However, in C++0x, you can do this:</p>

<pre><code>std::vector&lt;int&gt; array = {1,3,34,5,6};
array = {34,2,4,5,6};
</code></pre>

<p>Of course, if you choose to use <code>std::vector</code> instead of raw array.</p>
","5732852"
"C/C++ Free alternative to Lint?","93008","","<p>I'm interested in a free tool that can statically check my C++ code like Lint does.
Any hints?</p>
","<p>Try <code>cppcheck</code>, found here: <a href=""http://cppcheck.sourceforge.net/"" rel=""noreferrer"">http://cppcheck.sourceforge.net/</a></p>

<p>Here's a sampling of some of the checks it can perform or that I've used it for:</p>

<ul>
<li>Array indices out of bounds</li>
<li>Memory/resource leaks</li>
<li>Improper new/delete</li>
<li>Failure to put virtual destructors on derived classes</li>
<li>Mismatching allocation and deallocation</li>
<li>Deallocating a deallocated pointer</li>
<li>Using variable after it is deallocated / released</li>
<li>Size mismatches</li>
<li>Invalid radix in call to <code>strtol</code> or <code>strtoul</code></li>
<li>Overlapping data buffers</li>
<li>Unsigned division; result may be wrong</li>
<li>Unusual pointer arithmetic</li>
<li>Returning pointer to local array variable</li>
<li>Same iterator is used with two containers</li>
<li>Dangerous usage of erase</li>
<li>After pushback or pushfront, iterator may be invalid</li>
<li>Buffer overruns</li>
<li>Dangerous usage of <code>strncat</code>, possible buffer overrun</li>
</ul>
","632085"
"fatal error C1083: Cannot open include file: 'xyz.h': No such file or directory?","92958","","<p>I am using visual studio 2005 to create a project. And I have folder structure in project as: a folder called code. this folder contains all *.cxx files. </p>

<p>Now, I have created a class xyz in header file xyz.h. And defined every thing in xyz.cxx which is placed in code folder. 
But now when I try to compile it with visual studio it throws me an error 
""fatal error C1083: Cannot open include file: 'xyz.h': No such file or directory"". how to rectify this problem. </p>
","<p>Either move the xyz.h file somewhere else so the preprocessor can find it, or else change the <code>#include</code> statement so the preprocessor finds it where it already is.</p>

<p>Where the preprocessor looks for included files is described <a href=""http://msdn.microsoft.com/en-us/library/36k2cdd4%28v=VS.90%29.aspx"" rel=""noreferrer"">here</a>.  One solution is to put the xyz.h file in a folder where the preprocessor is going to find it while following that search pattern.</p>

<p>Alternatively you can change the #include statement so that the preprocessor can find it.  You tell us the xyz.cxx file is is in the 'code' folder but you don't tell us where you've put the xyz.h file.  Let's say your file structure looks like this...</p>

<pre><code>&lt;some folder&gt;\xyz.h
&lt;some folder&gt;\code\xyz.cxx
</code></pre>

<p>In that case the #include statement in xyz.cxx should look something like this.. </p>

<pre><code>#include ""..\xyz.h""
</code></pre>

<p>On the other hand let's say your file structure looks like this...</p>

<pre><code>&lt;some folder&gt;\include\xyz.h
&lt;some folder&gt;\code\xyz.cxx
</code></pre>

<p>In that case the #include statement in xyz.cxx should look something like this.. </p>

<pre><code>#include ""..\include\xyz.h""
</code></pre>

<p><strong>Update:</strong> On the other other hand as @In silico points out in the comments, if you are using <code>#include &lt;xyz.h&gt;</code> you should probably change it to <code>#include ""xyz.h""</code></p>
","7790180"
"Convert char* to string C++","92863","","<p>I know the starting address of the string(e.g., <code>char* buf</code>) and the max length <code>int l;</code> of the string(i.e., total number of characters is less than or equal to <code>l</code>).</p>

<p>What is the simplest way to get the value of the <code>string</code> from the specified memory segment? In other words, how to implement <code>string retrieveString(char* buf, int l);</code>.</p>

<p><strong>EDIT</strong>: The memory is reserved for writing and reading string of variable length. In other words, <code>int l;</code>indicates the size of the memory and not the length of the string.</p>
","<pre><code>std::string str(buf, buf + l);
</code></pre>

<p>Or, if the string already exists:</p>

<pre><code>str.assign(buf, buf + l);
</code></pre>

<p><strong>Edit:</strong> I'm still not completely sure I understand the question.  But if it's something like what JoshG is suggesting, that you want up to <code>l</code> characters, or until a null terminator, whichever comes first, then you can use this:</p>

<pre><code>std::string str(buf, std::find(buf, buf + l, '\0'));
</code></pre>
","8438709"
"How do I make a fully statically linked .exe with Visual Studio Express 2005?","92804","","<p>My current preferred C++ environment is the free and largely excellent Microsoft Visual Studio 2005 Express edition. From time to time I have sent release .exe files to other people with pleasing results. However recently I made the disturbing discovery that the pleasing results were based on more luck that I would like. Attempting to run one of these programs on an old (2001 vintage, not scrupulously updated) XP box gave me nothing but a nasty ""System cannot run x.exe"" (or similar) message.</p>

<p>Some googling revealed that with this toolset, even specifying static linking results in a simple hello-world.exe actually relying on extra .dll files (msvcm80.dll etc.). An incredibly elaborate version scheming system (manifest files anyone?) then will not let the .exe run without exactly the right .dll versions. I don't want or need this stuff, I just want an old fashioned self contained .exe that does nothing but lowest common denominator Win32 operations and runs on any old win32 OS.</p>

<p>Does anyone know if its possible to do what I want to do with my existing toolset ?</p>

<p>Thank you.</p>
","<p>For the C-runtime go to the project settings, choose C/C++ then 'Code Generation'.  Change the 'runtime library' setting to 'multithreaded' instead of 'multithreaded dll'.</p>

<p>If you are using any other libraries you may need to tell the linker to ignore the dynamically linked CRT explicitly.</p>
","37402"
"Do I need to explicitly call the base virtual destructor?","92799","","<p>When overriding a class in C++ (with a virtual destructor) I am implementing the destructor again as virtual on the inheriting class, but do I need to call the base destructor?</p>

<p>If so I imagine it's something like this...</p>

<pre><code>MyChildClass::~MyChildClass() // virtual in header
{
    // Call to base destructor...
    this-&gt;MyBaseClass::~MyBaseClass();

    // Some destructing specific to MyChildClass
}
</code></pre>

<p>Am I right?</p>
","<p>No, destructors are called automatically in the reverse order of construction. (Base classes last).  Do not call base class destructors.</p>
","677626"
"std::string length() and size() member functions","92737","","<p>I was reading the answers for this <a href=""https://stackoverflow.com/questions/905355/c-string-length"">question</a> and found that there is actually method called length() for strings (I always used size()). Is there any specific reason for having this method in string class ? I read both MSDN and CppRefernce and they seem to indicate that there is no difference between size() and length(). If that is so, isn't it making more confusing for the user of the class?</p>
","<p>As per the <a href=""http://en.cppreference.com/w/cpp/string/basic_string"" rel=""noreferrer"">documentation</a>, these are just synonyms.  <code>size()</code> is there to be consistent with other STL containers (like <code>vector</code>, <code>map</code>, <em>etc.</em>) and <code>length()</code> is to be consistent with most peoples' intuitive notion of character strings.  People usually talk about a word, sentence or paragraph's <em>length</em>, not its size, so <code>length()</code> is there to make things more readable.</p>
","905487"
"Fast ceiling of an integer division in C / C++","92721","","<p>Given integer values <code>x</code> and <code>y</code>, C and C++ both return as the quotient <code>q = x/y</code> the floor of the floating point equivalent.  I'm interested in a method of returning the ceiling instead.  For example, <code>ceil(10/5)=2</code> and <code>ceil(11/5)=3</code>.</p>

<p>The obvious approach involves something like:</p>

<pre><code>q = x / y;
if (q * y &lt; x) ++q;
</code></pre>

<p>This requires an extra comparison and multiplication; and other methods I've seen (used in fact) involve casting as a <code>float</code> or <code>double</code>.  Is there a more direct method that avoids the additional multiplication (or a second division) and branch, and that also avoids casting as a floating point number?</p>
","<p>To round up ...</p>

<pre><code>q = (x + y - 1) / y;
</code></pre>

<p>or (avoiding overflow in x+y)</p>

<pre><code>q = 1 + ((x - 1) / y); // if x != 0
</code></pre>
","2745086"
"What does ""#pragma comment"" mean?","92647","","<p>What does <code>#pragma comment</code> mean in the following?</p>

<pre><code>#pragma comment(lib, ""kernel32"")
#pragma comment(lib, ""user32"")
</code></pre>
","<p><code>#pragma comment</code> is a compiler directive which indicates Visual C++ to leave a comment in the generated object file. The comment can then be read by the linker when it processes object files.</p>

<p><code>#pragma comment(lib, libname)</code> tells the linker to add the 'libname' library to the list of library dependencies, as if you had added it in the project properties at <code>Linker-&gt;Input-&gt;Additional dependencies</code></p>

<p>See <a href=""http://msdn.microsoft.com/en-us/library/7f0aews7(v=vs.120).aspx"" rel=""noreferrer"">#pragma comment</a> on MSDN</p>
","3484541"
"Why should I prefer to use member initialization list?","92533","","<p>I'm partial to using member initialization lists with my constructors... but I've long since forgotten the reasons behind this... </p>

<p>Do you use member initialization lists in your constructors? If so, why? If not, why not? </p>
","<p>For <a href=""https://stackoverflow.com/a/146454/626796"">POD</a> class members, it makes no difference, it's just a matter of style.  For class members which are classes, then it avoids an unnecessary call to a default constructor.  Consider:</p>

<pre><code>class A
{
public:
    A() { x = 0; }
    A(int x_) { x = x_; }
    int x;
};

class B
{
public:
    B()
    {
        a.x = 3;
    }
private:
    A a;
};
</code></pre>

<p>In this case, the constructor for <code>B</code> will call the default constructor for <code>A</code>, and then initialize <code>a.x</code> to 3.  A better way would be for <code>B</code>'s constructor to directly call <code>A</code>'s constructor in the initializer list:</p>

<pre><code>B()
  : a(3)
{
}
</code></pre>

<p>This would only call <code>A</code>'s <code>A(int)</code> constructor and not its default constructor.  In this example, the difference is negligible, but imagine if you will that <code>A</code>'s default constructor did more, such as allocating memory or opening files.  You wouldn't want to do that unnecessarily.</p>

<p>Furthermore, if a class doesn't have a default constructor, or you have a <code>const</code> member variable, you <em>must</em> use an initializer list:</p>

<pre><code>class A
{
public:
    A(int x_) { x = x_; }
    int x;
}

class B
{
public:
    B() : a(3), y(2)  // 'a' and 'y' MUST be initialized in an initializer list;
    {                 // it is an error not to do so
    }
private:
    A a;
    const int y;
};
</code></pre>
","926795"
"How to fix .pch file missing on build?","92390","","<p>When I build my c++ solution in Visual Studio it complains that the xxxxx.pch file is missing. Is there a setting I am missing to get the pre-compiled headers back?</p>

<p>here is the exact error for completeness:</p>

<pre><code>Error   1   fatal error C1083: Cannot open precompiled header file: 'Debug\xxxxx.pch': No such file or directory
</code></pre>
","<ol>
<li>Right-click on your project in the Solution Explorer.  </li>
<li>Click Properties at the bottom of the drop-down menu.</li>
<li>At the top left of the Properties Pages,
select All Configurations from the drop-down menu.</li>
<li>Open the C/C++ tree and select Precompiled Headers</li>
<li>Precompiled Header: Select Use (/Yu)</li>
<li>Fill in the Precompiled Header File field. Standard is stdafx.h</li>
<li><p>Click Okay</p></li>
<li><p>If you do not have stdafx.h in your Header Files put it there. Edit
it to #include all the headers you want precompiled.</p></li>
<li>Put a file named stdafx.cpp into your project. Put #include ""stdafx.h""
at the top of it, and nothing else.</li>
<li>Right-click on stdafx.cpp in Solution Explorer. Select Properties
and All configurations again as in step 4 ...</li>
<li>... but this time select Precompiled Header <strong>Create (/Yc).</strong> This will only 
bind to the one file stdafx.cpp.</li>
<li>Put #include ""stdafx.h"" at the very top of all your source files.</li>
</ol>

<p>Lucky 13. Cross your fingers and hit Build.</p>
","12325848"
"Choice between vector::resize() and vector::reserve()","92320","","<p>I am pre-allocating some memory to my a <code>vector</code> member variable. Below code is minimal part </p>

<pre><code>class A {
  vector&lt;string&gt; t_Names;
public:
  A () : t_Names(1000) {}
};
</code></pre>

<p>Now at some point of time, if the <code>t_Names.size()</code> equals <code>1000</code>. I am intending to increase the size by <code>100</code>. Then if it reaches <code>1100</code>, again increase by <code>100</code> and so on.</p>

<p>My question is, what to choose between <code>vector::resize()</code> and <code>vector::reserve()</code>. Is there any better choice in this kind of scenario ?</p>

<p><strong>Edit</strong>: I have sort of precise estimate for the <code>t_Names</code>. I estimate it to be around <code>700</code> to <code>800</code>. However in <em>certain</em> (seldom) situations, it can grow more than <code>1000</code>.</p>
","<p>The two functions do vastly different things!</p>

<p>The <a href=""http://en.cppreference.com/w/cpp/container/vector/resize""><code>resize()</code></a> method (and passing argument to constructor is equivalent to that) will insert or delete appropriate number of elements to the vector to make it given size (it has optional second argument to specify their value). It will affect the <code>size()</code>, iteration will go over all those elements, push_back will insert after them and you can directly access them using the <code>operator[]</code>.</p>

<p>The <a href=""http://en.cppreference.com/w/cpp/container/vector/reserve""><code>reserve()</code></a> method only allocates memory, but leaves it uninitialized. It only affects <code>capacity()</code>, but <code>size()</code> will be unchanged. There is no value for the objects, because nothing is added to the vector. If you then insert the elements, no reallocation will happen, because it was done in advance, but that's the only effect.</p>

<p>So it depends on what you want. If you want an array of 1000 default items, use <code>resize()</code>. If you want an array to which you expect to insert 1000 items and want to avoid a couple of allocations, use <code>reserve()</code>.</p>

<p><strong>EDIT:</strong> Blastfurnace's comment made me read the question again and realize, that in your case the correct answer is <strong>don't preallocate</strong> manually. Just keep inserting the elements at the end as you need. The vector will automatically reallocate as needed and will do it <em>more</em> efficiently than the manual way mentioned. The only case where <code>reserve()</code> makes sense is when you have reasonably precise estimate of the total size you'll need easily available in advance.</p>

<p><strong>EDIT2:</strong> Ad question edit: If you have initial estimate, then <code>reserve()</code> that estimate. If it turns out to be not enough, just let the vector do it's thing.</p>
","7397862"
"How do I clear the std::queue efficiently?","92173","","<p>I am using std::queue for implementing JobQueue class. ( Basically this class process each job in FIFO manner).
In one scenario, I want to clear the queue in one shot( delete all jobs from the queue).
I don't see any clear method available in std::queue class.</p>

<p>How do I efficiently implement the clear method for JobQueue class ?</p>

<p>I have one simple solution of popping in a loop but I am looking for better ways.</p>

<pre><code>//Clears the job queue
void JobQueue ::clearJobs()
 {
  // I want to avoid pop in a loop
    while (!m_Queue.empty())
    {
        m_Queue.pop();
    }
}
</code></pre>
","<p>A common idiom for clearing standard containers is swapping with an empty version of the container:</p>

<pre><code>void clear( std::queue&lt;int&gt; &amp;q )
{
   std::queue&lt;int&gt; empty;
   std::swap( q, empty );
}
</code></pre>

<p>It is also the only way of actually clearing the memory held inside some containers (std::vector)</p>
","709161"
"C/C++ maximum stack size of program","92169","","<p>I want to do DFS on a 100 X 100 array. (Say elements of array represents graph nodes) So assuming worst case, depth of recursive function calls can go upto 10000 with each call taking upto say 20 bytes. So is it feasible means is there a possibility of stackoverflow? </p>

<p>What is the maximum size of stack in C/C++?</p>

<blockquote>
  <p>Please specify for gcc for both<br>
  1) cygwin on Windows<br>
  2) Unix  </p>
</blockquote>

<p>What are the general limits?</p>
","<p>In Visual Studio the default stack size is 1 MB i think, so with a recursion depth of 10,000 each stack frame can be at most ~100 bytes which should be sufficient for a DFS algorithm.</p>

<p>Most compilers including Visual Studio let you specify the stack size. On some (all?) linux flavours the stack size isn't part of the executable but an environment variable in the OS. You can then check the stack size with <code>ulimit -s</code> and set it to a new value with for example <code>ulimit -s 16384</code>.</p>

<p>Here's a <a href=""http://www.cs.nyu.edu/exact/core/doc/stackOverflow.txt"" rel=""nofollow noreferrer"">link</a> with default stack sizes for gcc.</p>

<p>DFS without recursion:</p>

<pre><code>std::stack&lt;Node&gt; dfs;
dfs.push(start);
do {
    Node top = dfs.top();
    if (top is what we are looking for) {
       break;
    }
    dfs.pop();
    for (outgoing nodes from top) {
        dfs.push(outgoing node);
    }
} while (!dfs.empty())
</code></pre>
","1825996"
"""Cannot allocate an object of abstract type"" error","92102","","<p>Error is here:</p>

<pre><code>vector&lt;Graduate *&gt; graduates;
graduates.push_back(new AliceUniversity(identifier,id,salary,average));
</code></pre>

<p>Grandparent class:</p>

<pre><code>Graduate::Graduate(char identifier,
                   long id,
                   int salary,
                   double average)
    : _identifier(identifier),
      _id(id),_salary(salary),
      _average(average)
{
}
</code></pre>

<p>Parent class:</p>

<pre><code>UniversityGraduate::UniversityGraduate(char identifier,
                                       long id,
                                       int salary,
                                       double average)
    : Graduate(identifier,id,salary,average)
{
}
</code></pre>

<p>Actual/child class:</p>

<pre><code>AliceUniversity::AliceUniversity(char identifier,
                                 long id,
                                 int salary,
                                 double average)
    : UniversityGraduate(identifier,id,salary,average)
{
    _graduateNum++;
    _sumOfGrades += average;
    _avrA = getAverage();
}
</code></pre>

<p>I know it's a long shot, I cant write the entire code here…</p>
","<p>In C++ a class with at least one <a href=""https://stackoverflow.com/questions/2089083/pure-virtual-function-with-implementation"">pure virtual function</a> is called <strong>abstract class</strong>. You can not create objects of that class, but may only have pointers or references to it.</p>

<p>If you are deriving from an abstract class, then make sure you override and define all pure virtual functions for your class.</p>

<p>From your snippet Your class <code>AliceUniversity</code> seems to be an abstract class. It needs to override and define all the pure virtual functions of the classes <code>Graduate</code> and <code>UniversityGraduate</code>.</p>

<p>Pure virtual functions are the ones with <code>= 0;</code> at the end of declaration. </p>

<p>Example: <code>virtual void doSomething() = 0;</code>  </p>

<p>For a specific answer, you will need to post the definition of the class for which you get the error and the classes from which that class is deriving.</p>
","7352727"
"Checking if a folder exists (and creating folders) in Qt, C++","91818","","<p>In Qt, how do I check if a given folder exists in the current directory?<br>
If it doesn't exist, how do I then create an empty folder?</p>
","<p>To check if a directory named ""Folder"" exists use:</p>

<pre><code>QDir(""Folder"").exists();
</code></pre>

<p>To create a new folder named ""MyFolder"" use:</p>

<pre><code>QDir().mkdir(""MyFolder"");
</code></pre>
","2241818"
"rand() returns the same number each time the program is run","91793","","<p>In this rather basic C++ code snippet involving random number generation:</p>

<pre><code>include &lt;iostream&gt;
using namespace std;

int main() {
    cout &lt;&lt; (rand() % 100);
    return 0;
}
</code></pre>

<p>Why am I always getting an output of 41? I'm trying to get it to output some random number between 0 and 100. Maybe I'm not understanding something about how the rand function works?</p>
","<p>You need to ""seed"" the generator. Check out this short video, it will clear things up.</p>

<p><a href=""https://www.thenewboston.com/videos.php?cat=16&amp;video=17503"" rel=""noreferrer"">https://www.thenewboston.com/videos.php?cat=16&amp;video=17503</a></p>
","13896477"
"C++ - Hold the console window open?","91775","","<p>My question is super simple, but I'm transitioning from C# to C++, and I was wondering what command holds the console window open in C++?</p>

<p>I know in C#, the most basic way is:</p>

<pre><code>Console.ReadLine();
</code></pre>

<p>Or if you want to let the user press any key, its:</p>

<pre><code>Console.ReadKey(true);
</code></pre>

<p>How do you do this in C++? The only reason I ask this simple of a question here, is that I haven't been able to find a good and clear answer out there on the internet.</p>
","<p>How about <code>std::cin.get();</code> ?</p>

<p>Also, if you're using Visual Studio, you can run without debugging (CTRL-F5 by default) and it won't close the console at the end. If you run it with debugging, you could always put a breakpoint at the closing brace of <code>main()</code>.</p>
","1908536"
"How exactly does __attribute__((constructor)) work?","91610","","<p>It seems pretty clear that it is supposed to set things up.</p>

<ol>
<li>When exactly does it run?</li>
<li>Why are there two parentheses?</li>
<li>Is <code>__attribute__</code> a function? A macro? Syntax?</li>
<li>Does this work in C? C++?</li>
<li>Does the function it works with need to be static?</li>
<li>When does <code>__attribute__((destructor))</code> run?</li>
</ol>

<p><a href=""https://stackoverflow.com/questions/2046426/initialising-a-static-variable-in-objective-c-category/2046997#2046997"">Example in Objective C</a>:</p>

<pre><code>__attribute__((constructor))
static void initialize_navigationBarImages() {
  navigationBarImages = [[NSMutableDictionary alloc] init];
}

__attribute__((destructor))
static void destroy_navigationBarImages() {
  [navigationBarImages release];
}
</code></pre>
","<ol>
<li>It's run when a shared library is loaded, typically during program startup.</li>
<li>That's how all GCC attributes are; presumably to distinguish them from function calls.</li>
<li>GCC-specific syntax.</li>
<li>Yes, this also works in C an C++.</li>
<li>No, the function does not need to be static.</li>
<li>The destructor is run when the shared library is unloaded, typically at program exit.</li>
</ol>

<p>So, the way the constructors and destructors work is that the shared object file contains special sections (.ctors and .dtors on ELF) which contain references to the functions marked with the constructor and destructor attributes, respectively. When the library is loaded/unloaded the dynamic loader program (ld.so or somesuch) checks whether such sections exist, and if so, calls the functions referenced therein.</p>

<p>Come to think of it, there is probably some similar magic in the normal static linker, so that the same code is run on startup/shutdown regardless if the user chooses static or dynamic linking.</p>
","2053078"
"How to fix this Error: #include <gl/glut.h> ""Cannot open source file gl/glut.h""","91418","","<p>I was doing some OpenGL programming in C++.</p>

<p>This is part of my code:</p>

<pre><code>#include &lt;time.h&gt;
#include &lt;windows.h&gt;
#include &lt;gl/gl.h&gt;
#include &lt;gl/glu.h&gt;
#include &lt;gl/glut.h&gt; &lt;&lt;&lt; Error here ""Cannot open source file gl/glut.h""
</code></pre>

<p>How can I fix this?</p>

<p>EDIT: I am using Microsoft Visual C++ Express Edition. Sorry forgot to mention it</p>
","<p>You probably haven't installed GLUT:</p>

<ol>
<li>Install GLUT
If you do not have GLUT installed on your machine you can download it from:
<a href=""http://www.xmission.com/~nate/glut/glut-3.7.6-bin.zip"">http://www.xmission.com/~nate/glut/glut-3.7.6-bin.zip</a> (or whatever version)
GLUT Libraries and header files are
• glut32.lib
• glut.h</li>
</ol>

<p>Source: <a href=""http://cacs.usc.edu/education/cs596/OGL_Setup.pdf"">http://cacs.usc.edu/education/cs596/OGL_Setup.pdf</a></p>

<p><strong>EDIT:</strong></p>

<p>The quickest way is to download the latest header, and compiled DLLs for it, place it in your system32 folder or reference it in your project. Version 3.7 (latest as of this post) is here:
<a href=""http://www.opengl.org/resources/libraries/glut/glutdlls37beta.zip"">http://www.opengl.org/resources/libraries/glut/glutdlls37beta.zip</a></p>

<pre><code>Folder references:

glut.h: 'C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include\GL\'
glut32.lib: 'C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\lib\'
glut32.dll: 'C:\Windows\System32\'

For 64-bit machines, you will want to do this.
glut32.dll: 'C:\Windows\SysWOW64\'

Same pattern applies to freeglut and GLEW files with the header files in the GL folder, lib in the lib folder, and dll in the System32 (and SysWOW64) folder.
1. Under Visual C++, select Empty Project.
2. Go to Project -&gt; Properties. Select Linker -&gt; Input then add the following to the Additional Dependencies field:
opengl32.lib
glu32.lib
glut32.lib
</code></pre>

<p><a href=""http://visualambition.wordpress.com/2010/08/12/glut-and-visual-studio-2010/"">Reprinted from here</a> </p>
","10467488"
"Compile a DLL in C/C++, then call it from another program","91383","","<p>I want to make a simple, simple DLL which exports one or two functions, then try to call it from another program... Everywhere I've looked so far, is for complicated matters, different ways of linking things together, weird problems that I haven't even <i>begun</i> to realize exist yet... I just want to get started, by doing something like so:</p>

<p>Make a DLL which exports some functions, like,</p>

<pre><code>int add2(int num){
   return num + 2;
}

int mult(int num1, int num2){
   int product;
   product = num1 * num2;
   return product;
}
</code></pre>

<p>I'm compiling with MinGW, I'd like to do this in C, but if there's any real differences doing it in C++, I'd like to know those also. I want to know how to load that DLL into another C (and C++) program, and then call those functions from it.
My goal here, after playing around with DLLs for a bit, is to make a VB front-end for C(++) code, by loading DLLs into visual basic (I have visual studio 6, I just want to make some forms and events for the objects on those forms, which call the DLL).</p>

<p>I need to know how to call gcc (/g++) to make it create a DLL, but also how to write (/generate) an exports file... and what I can/cannot do in a DLL (like, can I take arguments by pointer/reference from the VB front-end? Can the DLL call a theoretical function in the front-end? Or have a function take a ""function pointer"" (I don't even know if that's possible) from VB and call it?) I'm fairly certain I can't pass a variant to the DLL...but that's all I know really.</p>

<h2>update again</h2>

<p>Okay, I figured out how to compile it with gcc, to make the dll I ran</p>

<pre><code>gcc -c -DBUILD_DLL dll.c
gcc -shared -o mydll.dll dll.o -Wl,--out-implib,libmessage.a
</code></pre>

<p>and then I had another program load it and test the functions, and it worked great,
thanks so much for the advice,
but I tried loading it with VB6, like this</p>

<pre><code>Public Declare Function add2 Lib ""C:\c\dll\mydll.dll"" (num As Integer) As Integer
</code></pre>

<p>then I just called add2(text1.text) from a form, but it gave me a runtime error:</p>

<p>""Can't find DLL entry point add2 in C:\c\dll\mydll.dll""</p>

<p>this is the code I compiled for the DLL:</p>

<pre><code>#ifdef BUILD_DLL
#define EXPORT __declspec(dllexport)
#else
#define EXPORT __declspec(dllimport)
#endif

EXPORT int __stdcall add2(int num){
  return num + 2;
}

EXPORT int __stdcall mul(int num1, int num2){
  return num1 * num2;
}
</code></pre>

<p>calling it from the C program like this worked, though:</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;windows.h&gt;

int main(){

  HANDLE ldll;
  int (*add2)(int);
  int (*mul)(int,int);

  ldll = LoadLibrary(""mydll.dll"");
  if(ldll&gt;(void*)HINSTANCE_ERROR){
    add2 = GetProcAddress(ldll, ""add2"");
    mul = GetProcAddress(ldll, ""mul"");
    printf(""add2(3): %d\nmul(4,5): %d"", add2(3), mul(4,5));
  } else {
    printf(""ERROR."");
  }

}
</code></pre>

<p>any ideas?</p>

<h2>solved it</h2>

<p>To solve the previous problem, I just had to compile it like so:</p>

<pre><code>gcc -c -DBUILD_DLL dll.c
gcc -shared -o mydll.dll dll.o -Wl,--add-stdcall-alias
</code></pre>

<p>and use this API call in VB6</p>

<pre><code>Public Declare Function add2 Lib ""C:\c\dll\mydll"" _
    (ByVal num As Integer) As Integer
</code></pre>

<p>I learned not to forget to specify ByVal or ByRef explicitly--I was just getting back the address of the argument I passed, it looked like, -3048.</p>
","<p>Regarding building a DLL using MinGW, here are some very brief instructions.</p>

<p>First, you need to mark your functions for export, so they can be used by callers of the DLL. To do this, modify them so they look like (for example)</p>

<pre><code>__declspec( dllexport ) int add2(int num){
   return num + 2;
}
</code></pre>

<p>then, assuming your functions are in a file called funcs.c, you can compile them:</p>

<pre><code>gcc -shared -o mylib.dll funcs.c
</code></pre>

<p>The -shared flag tells gcc to create a DLL.</p>

<p>To check if the DLL has actually exported the functions, get hold of the free <a href=""http://www.dependencywalker.com/"" rel=""noreferrer"">Dependency Walker</a> tool and use it to examine the DLL.</p>

<p>For a free IDE which will automate all the flags etc. needed to build DLLs, take a look at the excellent <a href=""http://www.codeblocks.org/"" rel=""noreferrer"">Code::Blocks</a>, which works very well with MinGW.</p>

<p><strong>Edit:</strong> For more details on this subject, see the article <a href=""http://www.mingw.org/wiki/Visual_Basic_DLL"" rel=""noreferrer"">Creating a MinGW DLL for Use with Visual Basic</a> on the MinGW Wiki.</p>
","847525"
"Get current cursor position","91361","","<p>I want to get the current mouse position of the window, and assign it to 2 variables <code>x</code> and <code>y</code> (co-ordinates relative to the window, not to the screen as a whole).</p>

<p>I'm using Win32 and C++.</p>

<p>And a quick bonus question: how would you go about hiding the cursor/unhiding it?</p>
","<p>You get the cursor position by calling <a href=""http://msdn.microsoft.com/en-us/library/ms648390%28VS.85%29.aspx""><code>GetCursorPos</code></a>.</p>

<pre><code>POINT p;
if (GetCursorPos(&amp;p))
{
    //cursor position now in p.x and p.y
}
</code></pre>

<p>This returns the cursor position relative to screen coordinates.  Call <a href=""http://msdn.microsoft.com/en-us/library/dd162952%28VS.85%29.aspx""><code>ScreenToClient</code></a> to map to window coordinates.</p>

<pre><code>if (ScreenToClient(hwnd, &amp;p))
{
    //p.x and p.y are now relative to hwnd's client area
}
</code></pre>

<hr>

<p>You hide and show the cursor with <a href=""http://msdn.microsoft.com/en-us/library/ms648396%28v=VS.85%29.aspx""><code>ShowCursor</code></a>.</p>

<pre><code>ShowCursor(FALSE);//hides the cursor
ShowCursor(TRUE);//shows it again
</code></pre>

<p>You must ensure that every call to hide the cursor is matched by one that shows it again.</p>
","6423739"
"Where do I find the current C or C++ standard documents?","91318","","<p>For many questions the answer seems to be found in ""the standard"". However, where do we find that? Preferably online.</p>

<p>Googling can sometimes feel futile, again especially for the C standards, since they are drowned in the flood of discussions on programming forums.</p>

<p>To get this started, since these are the ones I am searching for right now, where are there good online resources for:</p>

<ul>
<li>C89</li>
<li>C99</li>
<li>C11</li>
<li>C++98</li>
<li>C++03</li>
<li>C++11</li>
<li>C++14</li>
</ul>
","<h3>PDF versions of the standard</h3>

<p>As of 1st September 2014, the best locations by price for C and C++ standards documents in PDF are:</p>

<ul>
<li>C++14 &ndash; ISO/IEC 14882:2014: <a href=""http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2fISO%2fIEC+14882%3a2014+%282016%29"" rel=""noreferrer""><s>$265</s> $133 from ansi.org</a></li>
<li>C++11 &ndash; ISO/IEC 14882:2011: <a href=""http://www.techstreet.com/products/1852925"" rel=""noreferrer""><s>$60 from ansi.org</s> $60 from Techstreet</a></li>
<li>C++03 &ndash; ISO 14882:2003: <a href=""https://infostore.saiglobal.com/store/details.aspx?ProductID=712174"" rel=""noreferrer""><s>$30 from ansi.org</s> $48 from SAI Global</a></li>
<li><p>C++98 &ndash; ISO/IEC 14882:1998: <a href=""https://shop.standards.govt.nz/catalog/14882%3A1998%28ISO|IEC%29/view"" rel=""noreferrer"">$90 NZD (about $60 US) from Standards New Zealand</a></p></li>
<li><p>C11 &ndash; ISO/IEC 9899:2011: <a href=""http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2FISO%2FIEC+9899-2012"" rel=""noreferrer""><s>$30</s> $60 from ansi.org</a> / <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf"" rel=""noreferrer"">WG14 draft version N1570</a></p></li>
<li>C99 &ndash; ISO 9899:1999: <a href=""http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS/ISO/IEC%209899-1999%20%28R2005%29"" rel=""noreferrer""><s>$30</s> $60 from ansi.org</a> / <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf"" rel=""noreferrer"">WG14 draft version N1256</a></li>
<li>C90 &ndash; AS 3955-1991: <a href=""http://www.techstreet.com/products/1178768"" rel=""noreferrer""><s>$141 from ansi.org</s> $175 from Techstreet</a> (the Australian version of C90, identical to ISO 9899:1990)</li>
<li>C90 &ndash; 9899:1990 <a href=""https://infostore.saiglobal.com/store/Details.aspx?ProductID=434093"" rel=""noreferrer"">Hardcopy available from SAI Global ($115 + shipping)</a></li>
</ul>

<p>You cannot usually get old revisions of a standard (any standard) directly from the standards bodies shortly after a new edition of the standard is released.  Thus, standards for C89, C90, C99, C++98, C++03 will be hard to find for purchase from a standards body.  If you need an old revision of a standard, check <a href=""http://www.techstreet.com/"" rel=""noreferrer"">Techstreet</a> as one possible source.  For example, it can still provide the Canadian version CAN/CSA-ISO/IEC 9899:1990 standard in PDF, for a fee.</p>

<h3>Print versions of the standard</h3>

<p>Print copies of the standards are available from national standards bodies and <a href=""http://www.iso.ch/"" rel=""noreferrer"">ISO</a> but are very expensive.</p>

<p>If you want a hardcopy of the C90 standard for much less money than above, you may be able to find a cheap used copy of <a href=""http://jargonwiki.com/wiki/Bullschildt"" rel=""noreferrer"">Herb Schildt</a>'s book <a href=""http://www.davros.org/c/schildt.html"" rel=""noreferrer""><em>The Annotated ANSI Standard</em></a> at <a href=""http://rads.stackoverflow.com/amzn/click/0078819520"" rel=""noreferrer"">Amazon</a>, which contains the actual text of the standard (useful) and commentary on the standard (less useful).</p>

<p>The C99 and C++03 standards are available in book form from Wiley and the BSI (British Standards Institute):</p>

<ul>
<li><a href=""http://rads.stackoverflow.com/amzn/click/0470846747"" rel=""noreferrer"">C++03 Standard</a> on Amazon</li>
<li><a href=""http://rads.stackoverflow.com/amzn/click/0470845732"" rel=""noreferrer"">C99 Standard</a> on Amazon</li>
</ul>

<h3>Standards committee draft versions</h3>

<p>The working draft for future standards is often available from the committee websites:</p>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/"" rel=""noreferrer"">C++ committee website</a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg14/"" rel=""noreferrer"">C committee website</a></li>
</ul>

<p>Note that these documents are not the same as the standard, though the versions just prior to the meetings that decide on a standard are usually very close to what is in the final standard.  The FCD (Final Committee Draft) versions are password protected; you need to be on the standards committee to get them.</p>

<p>However, in my opinion, even though the draft versions might be very close to the final ratified versions of the standards, you should really get a copy of the actual documents — especially if you're planning on quoting them as references.  Of course, starving students should go ahead and use the drafts if strapped for cash.</p>

<hr>

<p>It appears that, if you are willing and able to wait a few months after ratification of a standard, to search for ""INCITS/ISO/IEC"" instead of ""ISO/IEC"" when looking for a standard is the key. This way I was able to find the C++11 standard at reasonable price and now the C11 standard. So, as an example you search for ""INCITS/ISO/IEC 9899:2011"" instead of ""ISO/IEC 9899:2011"" on <a href=""http://webstore.ansi.org"" rel=""noreferrer"">webstore.ansi.org</a> and you will find the reasonably priced PDF version.</p>
","83763"
"C++ variable has initializer but incomplete type?","91279","","<p>I am trying to compile 2 classes in C++ with the following command:</p>

<p><code>g++ Cat.cpp Cat_main.cpp -o Cat</code></p>

<p>But I receive the following error:</p>

<p><code>Cat_main.cpp:10:10: error: variable ‘Cat Joey’ has initializer but incomplete type</code></p>

<p>Could someone explain to me what this means? What my files basically do is create a class (<code>Cat.cpp</code>) and create an instance (<code>Cat_main.cpp</code>). Here is my source code:</p>

<p><strong>Cat.cpp:</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

class Cat;

using namespace std;

int main()
{
    Cat Joey(""Joey"");
    Joey.Meow();

    return 0;
}
</code></pre>

<p><strong>Cat_main.cpp:</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

using namespace std;

class Cat
{
    public:
        Cat(string str);
    // Variables
        string name;
    // Functions
        void Meow();
};

Cat::Cat(string str)
{
    this-&gt;name = str;
}

void Cat::Meow()
{
    cout &lt;&lt; ""Meow!"" &lt;&lt; endl;
    return;
}
</code></pre>
","<p>You use a forward declaration when you need a complete type.</p>

<p>You must have a full definition of the class in order to use it.</p>

<p>The usual way to go about this is:</p>

<p>1) create a file <code>Cat_main.h</code></p>

<p>2) move </p>

<pre><code>#include &lt;string&gt;

class Cat
{
    public:
        Cat(std::string str);
    // Variables
        std::string name;
    // Functions
        void Meow();
};
</code></pre>

<p>to <code>Cat_main.h</code>. Note that inside the header I removed <code>using namespace std;</code> and qualified string with <code>std::string</code>.</p>

<p>3) include this file in both <code>Cat_main.cpp</code> and <code>Cat.cpp</code>:</p>

<pre><code>#include ""Cat_main.h""
</code></pre>
","9771015"
"Modulo operator with negative values","91227","","<p>Why do such operations:</p>

<pre><code>std::cout &lt;&lt; (-7 % 3) &lt;&lt; std::endl;
std::cout &lt;&lt; (7 % -3) &lt;&lt; std::endl;
</code></pre>

<p>give different results?</p>

<pre><code>-1
1
</code></pre>
","<p>From ISO14882:2011(e) 5.6-4:</p>

<blockquote>
  <p>The binary / operator yields the quotient, and the binary % operator
  yields the remainder from the division of the first expression by the
  second. If the second operand of / or % is zero the behavior is
  undefined. For integral operands the / operator yields the algebraic quotient with any fractional part discarded; if the quotient a/b is
  representable in the type of the result, (a/b)*b + a%b is equal to a.</p>
</blockquote>

<p>The rest is basic math:</p>

<pre><code>(-7/3) =&gt; -2
-2 * 3 =&gt; -6
so a%b =&gt; -1

(7/-3) =&gt; -2
-2 * -3 =&gt; 6
so a%b =&gt; 1
</code></pre>

<p>Note that </p>

<blockquote>
  <p>If both operands are nonnegative then the remainder is nonnegative; if
  not, the sign of the remainder is implementation-defined.</p>
</blockquote>

<p>from ISO14882:2003(e) is no longer present in ISO14882:2011(e) </p>
","7594577"
"How can I get the class name from a C++ object?","91216","","<p>Is it possible to get the object name too?</p>

<pre><code>#include&lt;cstdio&gt;

class one {
public:
    int no_of_students;
    one() { no_of_students = 0; }
    void new_admission() { no_of_students++; }
};

int main() {
    one A;
    for(int i = 0; i &lt; 99; i++) {
        A.new_admission();
    }
    cout&lt;&lt;""class""&lt;&lt;[classname]&lt;&lt;"" ""&lt;&lt;[objectname]&lt;&lt;""has ""
        &lt;&lt;A.no_of_students&lt;&lt;"" students"";
}
</code></pre>

<p>where I can fetch the names, something like </p>

<pre><code>[classname] = A.classname() = one
[objectname] = A.objectname() = A
</code></pre>

<p><strong>Does C++ provide any mechanism to achieve this?</strong></p>
","<p>You can display the name of a variable by using the preprocessor. For instance</p>

<pre><code>#include &lt;iostream&gt;
#define quote(x) #x
class one {};
int main(){
    one A;
    std::cout&lt;&lt;typeid(A).name()&lt;&lt;""\t""&lt;&lt; quote(A) &lt;&lt;""\n"";
    return 0;
}
</code></pre>

<p>outputs </p>

<pre><code>3one    A
</code></pre>

<p>on my machine. The <code>#</code> changes a token into a string, after preprocessing the line is</p>

<pre><code>std::cout&lt;&lt;typeid(A).name()&lt;&lt;""\t""&lt;&lt; ""A"" &lt;&lt;""\n"";
</code></pre>

<p>Of course if you do something like</p>

<pre><code>void foo(one B){
    std::cout&lt;&lt;typeid(B).name()&lt;&lt;""\t""&lt;&lt; quote(B) &lt;&lt;""\n"";
}
int main(){
    one A;
    foo(A);
    return 0;
}
</code></pre>

<p>you will get</p>

<pre><code>3one B
</code></pre>

<p>as the compiler doesn't keep track of all of the variable's names.</p>

<p>As it happens in gcc the result of typeid().name() is the mangled class name, to get the <a href=""http://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_demangling.html"" rel=""noreferrer"">demangled version</a> use</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;cxxabi.h&gt;
#define quote(x) #x
template &lt;typename foo,typename bar&gt; class one{ };
int main(){
    one&lt;int,one&lt;double, int&gt; &gt; A;
    int status;
    char * demangled = abi::__cxa_demangle(typeid(A).name(),0,0,&amp;status);
    std::cout&lt;&lt;demangled&lt;&lt;""\t""&lt;&lt; quote(A) &lt;&lt;""\n"";
    free(demangled);
    return 0;
}
</code></pre>

<p>which gives me</p>

<pre><code>one&lt;int, one&lt;double, int&gt; &gt; A
</code></pre>

<p>Other compilers may use different naming schemes.</p>
","3649351"
"Iterate keys in a C++ map","91203","","<p>Is there a way to iterate over the keys, not the pairs of a C++ map?</p>
","<p>If you really need to hide the value that the ""real"" iterator returns (for example because you want to use your key-iterator with standard algorithms, so that they operate on the keys instead of the pairs), then take a look at Boost's <a href=""http://www.boost.org/doc/libs/1_40_0/libs/iterator/doc/transform_iterator.html"" rel=""noreferrer"">transform_iterator</a>.</p>

<p>[Tip: when looking at Boost documentation for a new class, read the ""examples"" at the end first. You then have a sporting chance of figuring out what on earth the rest of it is talking about :-)]</p>
","1443818"
"Checking input value is an integer","91201","","<p>I was typing this and it asks the user to input two integers which will then become variables.  From there it will carry out simple operations. </p>

<p>How do I get the computer to check if what is entered is an integer or not? And if not, ask the user to type an integer in.  For example: if someone inputs ""a"" instead of 2, then it will tell them to reenter a number.</p>

<p>Thanks</p>

<pre><code> #include &lt;iostream&gt;
using namespace std;

int main ()
{

    int firstvariable;
    int secondvariable;
    float float1;
    float float2;

    cout &lt;&lt; ""Please enter two integers and then press Enter:"" &lt;&lt; endl;
    cin &gt;&gt; firstvariable;
    cin &gt;&gt; secondvariable;

    cout &lt;&lt; ""Time for some simple mathematical operations:\n"" &lt;&lt; endl;

    cout &lt;&lt; ""The sum:\n "" &lt;&lt; firstvariable &lt;&lt; ""+"" &lt;&lt; secondvariable 
        &lt;&lt;""=""&lt;&lt; firstvariable + secondvariable &lt;&lt; ""\n "" &lt;&lt; endl;

}
</code></pre>
","<p>You can check like this:</p>

<pre><code>int x;
cin &gt;&gt; x;

if (cin.fail()) {
    //Not an int.
}
</code></pre>

<p>Furthermore, you can continue to get input until you get an int via:</p>

<pre><code>#include &lt;iostream&gt;



int main() {

    int x;
    std::cin &gt;&gt; x;
    while(std::cin.fail()) {
        std::cout &lt;&lt; ""Error"" &lt;&lt; std::endl;
        std::cin.clear();
        std::cin.ignore(256,'\n');
        std::cin &gt;&gt; x;
    }
    std::cout &lt;&lt; x &lt;&lt; std::endl;

    return 0;
}
</code></pre>

<p>EDIT:  To address the comment below regarding input like 10abc, one could modify the loop to accept a string as an input.  Then check the string for any character not a number and handle that situation accordingly.  One needs not clear/ignore the input stream in that situation.  Verifying the string is just numbers, convert the string back to an integer.  I mean, this was just off the cuff.  There might be a better way.  This won't work if you're accepting floats/doubles (would have to add '.' in the search string).</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

int main() {

    std::string theInput;
    int inputAsInt;

    std::getline(std::cin, theInput);

    while(std::cin.fail() || std::cin.eof() || theInput.find_first_not_of(""0123456789"") != std::string::npos) {

        std::cout &lt;&lt; ""Error"" &lt;&lt; std::endl;

        if( theInput.find_first_not_of(""0123456789"") == std::string::npos) {
            std::cin.clear();
            std::cin.ignore(256,'\n');
        }

        std::getline(std::cin, theInput);
    }

    std::string::size_type st;
    inputAsInt = std::stoi(theInput,&amp;st);
    std::cout &lt;&lt; inputAsInt &lt;&lt; std::endl;
    return 0;
}
</code></pre>
","18728791"
"Enum to String C++","91172","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/201593/is-there-a-simple-script-to-convert-c-enum-to-string"">Is there a simple script to convert C++ enum to string?</a>  </p>
</blockquote>



<p>I commonly find I need to convert an enum to a string in c++</p>

<p>I always end up doing:</p>

<pre><code>enum Enum{ Banana, Orange, Apple } ;

char * getTextForEnum( int enumVal )
{
  switch( enumVal )
  {
  case Enum::Banana:
    return ""bananas &amp; monkeys"";
  case Enum::Orange:
    return ""Round and orange"";
  case Enum::Apple:
    return ""APPLE"" ;

  default:
    return ""Not recognized.."";
  }
}
</code></pre>

<p>Is there a better or recognized idiom for doing this?</p>
","<pre><code>enum Enum{ Banana, Orange, Apple } ;
static const char * EnumStrings[] = { ""bananas &amp; monkeys"", ""Round and orange"", ""APPLE"" };

const char * getTextForEnum( int enumVal )
{
  return EnumStrings[enumVal];
}
</code></pre>
","6281535"
"What is the best free memory leak detector for a C/C++ program and its plug-in DLLs?","91146","","<p>I have a .exe and many plug-in .dll modules that the .exe loads. (I have source for both.) A cross-platform (with source) solution would be ideal, but the platform can be narrowed to WinXP and Visual Studio (7.1/2003 in my case).</p>

<p>The built-in VS leak detector only gives the line where new/malloc was called from, but I have a wrapper for allocations, so a full symbolic stack trace would be best.</p>

<p>The detector would also be able to detect for a leak in both the .exe and its accompanying plug-in .dll modules.</p>
","<p>I personally use <a href=""http://vld.codeplex.com"" rel=""noreferrer"">Visual Leak Detector</a>, though it can cause large delays when large blocks are leaked (it displays the contents of the entire leaked block).</p>
","25831"
"Pass by pointer & Pass by reference","91026","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/57483/what-are-the-differences-between-pointer-variable-and-reference-variable-in-c"">What are the differences between pointer variable and reference variable in C++?</a><br>
  <a href=""https://stackoverflow.com/questions/334856/are-there-benefits-of-passing-by-pointer-over-passing-by-reference-in-c"">Are there benefits of passing by pointer over passing by reference in C++?</a>  </p>
</blockquote>



<p>In both cases, I achieved the result.
So when is one preferred over the other? What are the reasons we use one over the other?</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;
void swap(int* x, int* y)
{
    int z = *x;
    *x=*y;
    *y=z;
}
void swap(int&amp; x, int&amp; y)
{
    int z = x;
    x=y;
    y=z;
}

int main()
{
    int a = 45;
    int b = 35;
    cout&lt;&lt;""Before Swap\n"";
    cout&lt;&lt;""a=""&lt;&lt;a&lt;&lt;"" b=""&lt;&lt;b&lt;&lt;""\n"";

    swap(&amp;a,&amp;b);
    cout&lt;&lt;""After Swap with pass by pointer\n"";
    cout&lt;&lt;""a=""&lt;&lt;a&lt;&lt;"" b=""&lt;&lt;b&lt;&lt;""\n"";

    swap(a,b);
    cout&lt;&lt;""After Swap with pass by reference\n"";
    cout&lt;&lt;""a=""&lt;&lt;a&lt;&lt;"" b=""&lt;&lt;b&lt;&lt;""\n"";
}
</code></pre>

<p>Output</p>

<pre><code>Before Swap
a=45 b=35
After Swap with pass by pointer
a=35 b=45

After Swap with pass by reference
a=45 b=35
</code></pre>
","<p>A reference is semantically the following:</p>

<p><code>T&amp; &lt;=&gt; *(T * const)</code></p>

<p><code>const T&amp; &lt;=&gt; *(T const * const)</code></p>

<p><code>T&amp;&amp; &lt;=&gt; [no C equivalent]</code> (C++11)</p>

<p>As with other answers, the following from the C++ FAQ is the one-line answer: references when possible, pointers when needed.</p>

<p>An advantage over pointers is that you need explicit casting in order to pass NULL.
It's still possible, though.
Of the compilers I've tested, none emit a warning for the following:</p>

<pre><code>int* p() {
    return 0;
}
void x(int&amp; y) {
  y = 1;
}
int main() {
   x(*p());
}
</code></pre>
","8571101"
"Difference between angle bracket < > and double quotes "" "" while including header files in C++?","90993","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename"">What is the difference between #include &lt;filename&gt; and #include “filename”?</a>  </p>
</blockquote>



<p>What is the difference between angle bracket <code>&lt; &gt;</code> and double quotes <code>"" ""</code> while including header files in C++?</p>

<p>I mean which files are supposed to be included using eg: <code>#include &lt;QPushButton&gt;</code> and which files are to be included using eg: <code>#include ""MyFile.h""</code>???</p>
","<p>It's compiler dependent.   That said, in general using <code>""</code> prioritizes headers in the current working directory over system headers.  <code>&lt;&gt;</code> usually is used for system headers.  From to the specification (Section 6.10.2):</p>

<blockquote>
  <p>A preprocessing directive of the form</p>

<pre><code>  # include &lt;h-char-sequence&gt; new-line
</code></pre>
  
  <p>searches a sequence of implementation-defined places for a header identified uniquely by the specified sequence between the <code>&lt;</code> and <code>&gt;</code> delimiters, and causes the replacement of that directive by the entire contents of the header. How the places are specified or the header identified is implementation-defined.</p>
  
  <p>A preprocessing directive of the form</p>

<pre><code>  # include ""q-char-sequence"" new-line
</code></pre>
  
  <p>causes the replacement of that directive by the entire contents of the source file identified by the specified sequence between the <code>""</code> delimiters. The named source file is searched for in an implementation-defined manner. If this search is not supported, or if the search fails, the directive is reprocessed as if it read</p>

<pre><code>  # include &lt;h-char-sequence&gt; new-line
</code></pre>
  
  <p>with the identical contained sequence (including <code>&gt;</code> characters, if any) from the original
  directive.    </p>
</blockquote>

<p>So on <em>most</em> compilers, using the <code>""""</code> first checks your local directory, and if it doesn't find a match then moves on to check the system paths.  Using <code>&lt;&gt;</code> starts the search with system headers.</p>
","3162067"
"I would like to see a hash_map example in C++","90857","","<p>I don't know how to use the hash function in C++, but I know that we can use <code>hash_map</code>. Does g++ support that by simply including <code>#include &lt;hash_map&gt;</code>? What is a simple example using <code>hash_map</code>?</p>
","<p>The current C++ standard does not have  hash maps, but the coming C++0x standard does, and these are already supported  by g++ in the shape of ""unordered maps"":</p>

<pre><code>#include &lt;unordered_map&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

int main() {
    unordered_map &lt;string, int&gt; m;
    m[""foo""] = 42;
    cout &lt;&lt; m[""foo""] &lt;&lt; endl;
}
</code></pre>

<p>In order to get this compile, you need to tell g++ that you are using C++0x:</p>

<pre><code>g++ -std=c++0x main.cpp
</code></pre>

<p>These maps work pretty much as std::map does, except that instead of providing a custom <code>operator&lt;()</code> for your own types, you need to provide  a custom hash function - suitable functions are provided for types like integers and strings.  </p>
","2179985"
"How to deal with bad_alloc in C++?","90824","","<p>There is a method called <code>foo</code> that sometimes returns the following error:</p>

<pre class=""lang-none prettyprint-override""><code>terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
Abort
</code></pre>

<p>Is there a way that I can use a <code>try</code>-<code>catch</code> block to stop this error from terminating my program (all I want to do is return <code>-1</code>)?</p>

<p>If so, what is the syntax for it?</p>

<p>How else can I deal with <code>bad_alloc</code> in C++?</p>
","<p>You can catch it like any other exception:</p>

<pre><code>try {
  foo();
}
catch (const std::bad_alloc&amp;) {
  return -1;
}
</code></pre>

<p>Quite what you can usefully do from this point is up to you, but it's definitely feasible technically.</p>
","9456754"
"Getting started with OpenCV 2.4 and MinGW on Windows 7","90789","","<p>How do I install OpenCV 2.4 and compile my code with MinGW?</p>
","<p><strong>1. Installing OpenCV 2.4.3</strong></p>

<p>First, get <a href=""http://sourceforge.net/projects/opencvlibrary/"" rel=""noreferrer"">OpenCV 2.4.3</a> from sourceforge.net. Its a self-file-extracting so just double click the file to start installation. Install it in a directory, say <em><code>C:\</code></em>.</p>

<p><img src=""https://i.stack.imgur.com/dllO3.png"" alt=""OpenCV self-extracting""></p>

<p>Wait until all files get extracted. It will create a new 
directory <em><code>C:\opencv</code></em> which contains OpenCV header files, libraries, code samples, etc.</p>

<p>Now you need to add <em><code>C:\opencv\build\x86\mingw\bin</code></em> directory to your system PATH. This directory contains OpenCV DLLs which is required for running your code.</p>

<p>Open <strong>Control Panel</strong> &rarr; <strong>System</strong> &rarr; <strong>Advanced system settings</strong> &rarr; <strong>Advanced Tab</strong> &rarr; <strong>Environment variables...</strong></p>

<p>You will see a window like shown below:</p>

<p><img src=""https://i.stack.imgur.com/uUuhK.png"" alt=""Add OpenCV DLL directory to system path""></p>

<p>On the System Variables section,<br>
select <strong>Path</strong> (1), click <strong>Edit...</strong> (2), add <em><code>C:\opencv\build\x86\mingw\bin</code></em> (3) then click <strong>Ok</strong>.</p>

<p>This will completes the OpenCV 2.4.3 installation on your computer.</p>

<hr>

<p><strong>2. Installing MinGW compiler suite</strong></p>

<p>I highly recommend you to use gcc (GNU Compiler Collection) for compiling your code. gcc is the compiler suite widely available in Linux systems and MinGW is the native port for Windows.</p>

<p>Download the <a href=""http://sourceforge.net/projects/mingw/"" rel=""noreferrer"">MinGW installer</a> from Sourceforge.net and double click to start installation. Just follow the wizard and select the directory to be installed, say <em><code>C:\MinGW</code></em>.</p>

<p><img src=""https://i.stack.imgur.com/ecxom.png"" alt=""Select directory in MinGW installation""></p>

<p>Select ""C Compiler"" and ""C++ Compiler"" to be installed.</p>

<p><img src=""https://i.stack.imgur.com/EZjWV.png"" alt=""Select components to be installed""></p>

<p>The installer will download some packages from the internet so you have to wait for a while. After the installation finished, add <em><code>C:\MinGW\bin</code></em> to your system path using the steps described before.</p>

<p><img src=""https://i.stack.imgur.com/KEgMX.png"" alt=""Add MinGW bin directory to system path""></p>

<p>To test if your MinGW installation is success, open a command-line box and type: <code>gcc</code>. If everything is ok, it will display this message:</p>

<pre><code>gcc: fatal error: no input files
compilation terminated
</code></pre>

<p>This completes the MinGW installation, now is the time to write your ""Hello, World!"" program.</p>

<hr>

<p><strong>3. Write a sample code</strong></p>

<p>Open your text editor and type the code below and save the file to <code>loadimg.cpp</code>.</p>

<pre><code>#include ""opencv2/highgui/highgui.hpp""
#include &lt;iostream&gt;

using namespace cv;
using namespace std;

int main(int argc, char** argv)
{
  Mat im = imread(argc == 2 ? argv[1] : ""lena.jpg"", 1);
  if (im.empty())
  {
    cout &lt;&lt; ""Cannot open image!"" &lt;&lt; endl;
    return -1;
  }

  imshow(""image"", im);
  waitKey(0);

  return 0;
}
</code></pre>

<p>Put <code>lena.jpg</code> or any image you like in the same directory with the file above. Open a command-line box and compile the code above by typing:</p>

<pre><code>g++ -I""C:\opencv\build\include"" -L""C:\opencv\build\x86\mingw\lib"" loadimg.cpp -lopencv_core243 -lopencv_highgui243 -o loadimg
</code></pre>

<p>If it compiles successfully, it will create an executable named <code>loadimg.exe</code>. </p>

<p>Type:</p>

<pre><code>loadimg
</code></pre>

<p>To execute the program. Result:</p>

<p><img src=""https://i.stack.imgur.com/O5g0J.png"" alt=""The result of your first OpenCV program""></p>

<hr>

<p><strong>4. Where to go from here?</strong></p>

<p>Now that your OpenCV environment is ready, what's next?</p>

<ol>
<li>Go to the samples dir &rarr; <em><code>C:\opencv\samples\cpp</code></em>.</li>
<li>Read and compile some code.</li>
<li>Write your own code.</li>
</ol>
","10860353"
"How can I initialize C++ object member variables in the constructor?","90766","","<p>I've got a class that has a couple of objects as member variables. I don't want the constructors for the objects to be called when declared, so I'm trying to hang onto a pointer to the object explicitly. I have no idea what I'm doing.  o_O</p>

<p>On stackoverflow, I seem to be able to find other examples of object member variables, but usually the constructor is called immediately, like this:</p>

<pre><code>class MyClass {
    public:
        MyClass(int n);
    private:
        AnotherClass another(100); // this constructs AnotherClass right away!
};
</code></pre>

<p>But I want the MyClass constructor to call the AnotherClass constructor. Here's what my code looks like:</p>

<p><strong>BigMommaClass.h</strong></p>

<pre><code>#include ""ThingOne.h""
#include ""ThingTwo.h""

class BigMommaClass {

        public:
                BigMommaClass(int numba1, int numba2);

        private:
                ThingOne* ThingOne;
                ThingTwo* ThingTwo;
};
</code></pre>

<p><strong>BigMommaClass.cpp</strong></p>

<pre><code>#include ""BigMommaClass.h""

BigMommaClass::BigMommaClass(int numba1, int numba2) {
        this-&gt;ThingOne = ThingOne(100);
        this-&gt;ThingTwo = ThingTwo(numba1, numba2);
}
</code></pre>

<p>Here's the error I'm getting when I try to compile:</p>

<pre><code>g++ -Wall -c -Iclasses -o objects/BigMommaClass.o classes/BigMommaClass.cpp
In file included from classes/BigMommaClass.cpp:1:0:
classes/BigMommaClass.h:12:8: error: declaration of âThingTwo* BigMommaClass::ThingTwoâ
classes/ThingTwo.h:1:11: error: changes meaning of âThingTwoâ from âclass ThingTwoâ
classes/BigMommaClass.cpp: In constructor âBigMommaClass::BigMommaClass(int, int)â:
classes/BigMommaClass.cpp:4:30: error: cannot convert âThingOneâ to âThingOne*â in assignment
classes/BigMommaClass.cpp:5:37: error: â((BigMommaClass*)this)-&gt;BigMommaClass::ThingTwoâ cannot be used as a function
make: *** [BigMommaClass.o] Error 1
</code></pre>

<p>Am I using the right approach but the wrong syntax? Or should I be coming at this from a different direction?</p>
","<p>You can specify how to initialize members in the member initializer list:</p>

<pre><code>BigMommaClass {
    BigMommaClass(int, int);

private:
    ThingOne thingOne;
    ThingTwo thingTwo;
};

BigMommaClass::BigMommaClass(int numba1, int numba2)
    : thingOne(numba1 + numba2), thingTwo(numba1, numba2) {}
</code></pre>
","12927220"
"How to generate different random numbers in a loop in C++?","90741","","<p>Is it possible to generate different random number, every time loop runs. For example, i have:</p>

<pre><code>for (int t=0;t&lt;10;t++)
{
    int random_x;
    srand ( time(NULL) );
    random_x = rand() % 100;
    cout&lt;&lt;""\nRandom X = ""&lt;&lt;random_x;
} 
</code></pre>

<p>But the problem is, it generates same random number everytime. Is it possible to generate different random numbers everytime loop runs?</p>

<p>IS there any possibility to reset random number initiallization as well?</p>
","<p>Don't use <code>srand</code> inside the loop, use it only once, e.g. at the start of <code>main()</code>. And <code>srand()</code> is exactly how you reset this.</p>
","4926654"
"Splitting a C++ std::string using tokens, e.g. "";""","90718","","<p>Best way to split a string in C++? The string can be assumed to be composed of words separated by the delimiter <code>;</code>.</p>

<p>From our guide lines point of view C string functions are not allowed and also Boost is also not allowed to use because of security concerns open source is not allowed.</p>

<p>The best solution I have right now is:</p>

<pre><code>string str(""denmark;sweden;india;us"");
</code></pre>

<p>Above <code>str</code>should be stored in vector as strings. how can we achieve this?</p>

<p>Thanks for inputs.</p>
","<p>I find std::getline() is often the simplest. The optional delimiter parameter means it's not just for reading ""lines"":</p>

<pre><code>#include &lt;sstream&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

int main() {
    vector&lt;string&gt; strings;
    istringstream f(""denmark;sweden;india;us"");
    string s;    
    while (getline(f, s, ';')) {
        cout &lt;&lt; s &lt;&lt; endl;
        strings.push_back(s);
    }
}
</code></pre>
","5167799"
"OpenCV C++/Obj-C: Detecting a sheet of paper / Square Detection","90650","","<p>I successfully implemented the OpenCV square-detection example in my test application, but now need to filter the output, because it's quiet messy - or is my code wrong?</p>

<p>I'm interested in the four corner points of the paper for skew reduction (like <a href=""https://stackoverflow.com/questions/7838487/executing-cvwarpperspective-for-a-fake-deskewing-on-a-set-of-cvpoint"">that</a>) and further processing …</p>

<p><strong>Input &amp; Output:</strong>
<a href=""https://i.stack.imgur.com/5e2Mv.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/5e2Mv.jpg"" alt=""Input &amp; Output""></a></p>

<p><strong>Original image:</strong></p>

<p><a href=""https://i.stack.imgur.com/MIm24.jpg"" rel=""noreferrer"">click</a></p>

<p><strong>Code:</strong></p>

<pre><code>double angle( cv::Point pt1, cv::Point pt2, cv::Point pt0 ) {
    double dx1 = pt1.x - pt0.x;
    double dy1 = pt1.y - pt0.y;
    double dx2 = pt2.x - pt0.x;
    double dy2 = pt2.y - pt0.y;
    return (dx1*dx2 + dy1*dy2)/sqrt((dx1*dx1 + dy1*dy1)*(dx2*dx2 + dy2*dy2) + 1e-10);
}

- (std::vector&lt;std::vector&lt;cv::Point&gt; &gt;)findSquaresInImage:(cv::Mat)_image
{
    std::vector&lt;std::vector&lt;cv::Point&gt; &gt; squares;
    cv::Mat pyr, timg, gray0(_image.size(), CV_8U), gray;
    int thresh = 50, N = 11;
    cv::pyrDown(_image, pyr, cv::Size(_image.cols/2, _image.rows/2));
    cv::pyrUp(pyr, timg, _image.size());
    std::vector&lt;std::vector&lt;cv::Point&gt; &gt; contours;
    for( int c = 0; c &lt; 3; c++ ) {
        int ch[] = {c, 0};
        mixChannels(&amp;timg, 1, &amp;gray0, 1, ch, 1);
        for( int l = 0; l &lt; N; l++ ) {
            if( l == 0 ) {
                cv::Canny(gray0, gray, 0, thresh, 5);
                cv::dilate(gray, gray, cv::Mat(), cv::Point(-1,-1));
            }
            else {
                gray = gray0 &gt;= (l+1)*255/N;
            }
            cv::findContours(gray, contours, CV_RETR_LIST, CV_CHAIN_APPROX_SIMPLE);
            std::vector&lt;cv::Point&gt; approx;
            for( size_t i = 0; i &lt; contours.size(); i++ )
            {
                cv::approxPolyDP(cv::Mat(contours[i]), approx, arcLength(cv::Mat(contours[i]), true)*0.02, true);
                if( approx.size() == 4 &amp;&amp; fabs(contourArea(cv::Mat(approx))) &gt; 1000 &amp;&amp; cv::isContourConvex(cv::Mat(approx))) {
                    double maxCosine = 0;

                    for( int j = 2; j &lt; 5; j++ )
                    {
                        double cosine = fabs(angle(approx[j%4], approx[j-2], approx[j-1]));
                        maxCosine = MAX(maxCosine, cosine);
                    }

                    if( maxCosine &lt; 0.3 ) {
                        squares.push_back(approx);
                    }
                }
            }
        }
    }
    return squares;
}
</code></pre>

<p><strong><em>EDIT 17/08/2012:</em></strong></p>

<p>To draw the detected squares on the image use this code:</p>

<pre><code>cv::Mat debugSquares( std::vector&lt;std::vector&lt;cv::Point&gt; &gt; squares, cv::Mat image )
{
    for ( int i = 0; i&lt; squares.size(); i++ ) {
        // draw contour
        cv::drawContours(image, squares, i, cv::Scalar(255,0,0), 1, 8, std::vector&lt;cv::Vec4i&gt;(), 0, cv::Point());

        // draw bounding rect
        cv::Rect rect = boundingRect(cv::Mat(squares[i]));
        cv::rectangle(image, rect.tl(), rect.br(), cv::Scalar(0,255,0), 2, 8, 0);

        // draw rotated rect
        cv::RotatedRect minRect = minAreaRect(cv::Mat(squares[i]));
        cv::Point2f rect_points[4];
        minRect.points( rect_points );
        for ( int j = 0; j &lt; 4; j++ ) {
            cv::line( image, rect_points[j], rect_points[(j+1)%4], cv::Scalar(0,0,255), 1, 8 ); // blue
        }
    }

    return image;
}
</code></pre>
","<p>This is a recurring subject in Stackoverflow and since I was unable to find a relevant implementation I decided to accept the challenge.</p>

<p>I made some modifications to the squares demo present in OpenCV and the resulting C++ code below is able to detect a sheet of paper in the image:</p>

<pre><code>void find_squares(Mat&amp; image, vector&lt;vector&lt;Point&gt; &gt;&amp; squares)
{
    // blur will enhance edge detection
    Mat blurred(image);
    medianBlur(image, blurred, 9);

    Mat gray0(blurred.size(), CV_8U), gray;
    vector&lt;vector&lt;Point&gt; &gt; contours;

    // find squares in every color plane of the image
    for (int c = 0; c &lt; 3; c++)
    {
        int ch[] = {c, 0};
        mixChannels(&amp;blurred, 1, &amp;gray0, 1, ch, 1);

        // try several threshold levels
        const int threshold_level = 2;
        for (int l = 0; l &lt; threshold_level; l++)
        {
            // Use Canny instead of zero threshold level!
            // Canny helps to catch squares with gradient shading
            if (l == 0)
            {
                Canny(gray0, gray, 10, 20, 3); // 

                // Dilate helps to remove potential holes between edge segments
                dilate(gray, gray, Mat(), Point(-1,-1));
            }
            else
            {
                    gray = gray0 &gt;= (l+1) * 255 / threshold_level;
            }

            // Find contours and store them in a list
            findContours(gray, contours, CV_RETR_LIST, CV_CHAIN_APPROX_SIMPLE);

            // Test contours
            vector&lt;Point&gt; approx;
            for (size_t i = 0; i &lt; contours.size(); i++)
            {
                    // approximate contour with accuracy proportional
                    // to the contour perimeter
                    approxPolyDP(Mat(contours[i]), approx, arcLength(Mat(contours[i]), true)*0.02, true);

                    // Note: absolute value of an area is used because
                    // area may be positive or negative - in accordance with the
                    // contour orientation
                    if (approx.size() == 4 &amp;&amp;
                            fabs(contourArea(Mat(approx))) &gt; 1000 &amp;&amp;
                            isContourConvex(Mat(approx)))
                    {
                            double maxCosine = 0;

                            for (int j = 2; j &lt; 5; j++)
                            {
                                    double cosine = fabs(angle(approx[j%4], approx[j-2], approx[j-1]));
                                    maxCosine = MAX(maxCosine, cosine);
                            }

                            if (maxCosine &lt; 0.3)
                                    squares.push_back(approx);
                    }
            }
        }
    }
}
</code></pre>

<p>After this procedure is executed, the sheet of paper will be the largest square in <code>vector&lt;vector&lt;Point&gt; &gt;</code>:</p>

<p><img src=""https://i.stack.imgur.com/JQ0DH.jpg"" alt=""opencv paper sheet detection""></p>

<p>I'm letting you write the function to find the largest square. ;)</p>
","8863060"
"Where is Round() in C++?","90619","","<h3>Duplicate of: <a href=""https://stackoverflow.com/questions/485525/round-for-float-in-c"">round() for float in C++</a></h3>

<hr>

<p>I'm using VS2008 and I've included math.h but I still can't find a round function.  Does it exist?  </p>

<p>I'm seeing a bunch of ""add 0.5 and cast to int"" solutions on google.  Is that the best practice?</p>
","<p>You may use C++11's <a href=""http://en.cppreference.com/w/cpp/numeric/math/round"" rel=""noreferrer""><code>std::round()</code></a>.</p>

<p>If you are still stuck with older standards, you may use <a href=""http://en.cppreference.com/w/cpp/numeric/math/floor"" rel=""noreferrer""><code>std::floor()</code></a>, which always rounds to the lower number, and <a href=""http://en.cppreference.com/w/cpp/numeric/math/ceil"" rel=""noreferrer""><code>std::ceil()</code></a>, which always rounds to the higher number.</p>

<p>To get the normal rounding behaviour, you would indeed use <code>floor(i + 0.5)</code>.</p>

<p>This way will give you problems with negative numbers, a workaround for that problem is by using ceil() for negative numbers:</p>

<pre><code>double round(double number)
{
    return number &lt; 0.0 ? ceil(number - 0.5) : floor(number + 0.5);
}</code></pre>

<p>Another, cleaner, but more resource-intensive, way is to make use of a stringstream and the input-/output-manipulators:</p>

<pre><code>#include &lt;iostream>
#include &lt;sstream&gt;

double round(double val, int precision)
{
    std::stringstream s;
    s &lt;&lt; std::setprecision(precision) &lt;&lt; std::setiosflags(std::ios_base::fixed) &lt;&lt; val;
    s &gt;&gt; val;
    return val;
}</code></pre>

<p>Only use the second approach if you are not low on resources and/or need to have control over the precision.</p>
","554215"
"How do I add additional libraries in C++?","90522","","<p>Allergro is an open souce C++ addon library for graphics manipulation. How do I add this library to my compiler?</p>

<p>The instructions don't work for me as I have Windows&nbsp;7. I don't know if the OS matters. I have the Visual Studio Express Edition. The library is a .dll file. How do I add it to my projects?</p>
","<p>For Visual Studio you'll want to right click on your project in the solution explorer and then click on <strong>Properties</strong>.  </p>

<p>Next open <strong>Configuration Properties</strong> and then <strong>Linker</strong>.</p>

<p>Now you want to add the folder you have the Allegro libraries in to <strong>Additional Library Directories</strong>,</p>

<p><strong>Linker</strong> -> <strong>Input</strong> you'll add the actual library files under <strong>Additional Dependencies</strong>.</p>

<p>For the Header Files you'll also want to include their directories under <strong>C/C++</strong>  -> <strong>Additional Include Directories</strong>.</p>

<p>If there is a dll have a copy of it in your main project folder, and done.</p>

<p>I would recommend putting the Allegro files in the your project folder and then using local references in for the library and header directories.  </p>

<p>Doing this will allow you to run the application on other computers without having to install Allergo on the other computer.</p>

<p>This was written for Visual Studio 2008.  For 2010 it should be roughly the same.</p>
","4446085"
"How to check if a file exists before creating a new file","90352","","<p>I want to input some contents to a file, but I'd like to check first if a file with the name I wish to create exists. If so, I don't want to create any file, even if the file is empty.  </p>

<p><strong>My attempt</strong></p>

<pre><code>bool CreateFile(char name[], char content[]){
     std::ofstream file(name);
     if(file){
         std::cout &lt;&lt; ""This account already exists"" &lt;&lt; std::endl;
        return false;
     }
     file &lt;&lt; content;
     file.close();
     return true;
}
</code></pre>

<p><strong>Is there any way to do what I want?</strong></p>
","<p>Assuming it is OK that the operation is not atomic, you can do:</p>

<pre><code>if (std::ifstream(name))
{
     std::cout &lt;&lt; ""File already exists"" &lt;&lt; std::endl;
     return false;
}
std::ofstream file(name);
if (!file)
{
     std::cout &lt;&lt; ""File could not be created"" &lt;&lt; std::endl;
     return false;
}
... 
</code></pre>

<p>Note that this doesn't work if you run multiple threads trying to create the same file, and certainly will not prevent a second process from ""interfering"" with the file creation because you have <a href=""http://en.wikipedia.org/wiki/Time_of_check_to_time_of_use"">TOCTUI</a> problems. [We first check if the file exists, and then create it - but someone else could have created it in between the check and the creation - if that's critical, you will need to do something else, which isn't portable]. </p>

<p>A further problem is if you have permissions such as the file is not readable (so we can't open it for read) but is writeable, it will overwrite the file. </p>

<p>In MOST cases, neither of these things matter, because all you care about is telling someone that ""you already have a file like that"" (or something like that) in a ""best effort"" approach. </p>
","17818217"
"deprecated conversion from string constant to 'char*'","90295","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/1524356/c-deprecated-conversion-from-string-constant-to-char"">C++ deprecated conversion from string constant to &#39;char*&#39;</a>  </p>
</blockquote>



<p>I want to pass a string via char* to a function.</p>

<pre><code> char *Type = new char[10];
 Type = ""Access"";  // ERROR
</code></pre>

<p>However I get this error:</p>

<pre><code> error: deprecated conversion from string constant to 'char*'
</code></pre>

<p>How can I fix that?</p>
","<p>If you really want to modify Type:</p>

<pre><code>char *Type = new char[10];
strcpy( Type, ""Access"" );
</code></pre>

<p>If you don't want to modify access:</p>

<pre><code>const char *Type = ""Access"";
</code></pre>

<p>Please note, that, however, arrays of char in C and in C++ come with a lot of problems. For example, you don't really know if the call to new has been successful, or whether it is going to throw an exception. Also, strcpy() could surpass the limit of 10 chars.</p>

<p>So you can consider, if you want to modify type later:</p>

<pre><code>std::string Type = ""Access"";
</code></pre>

<p>And if you don't want to modify it:</p>

<pre><code>const std::string Type = ""Access"";
</code></pre>

<p>... the benefit of using <code>std::string</code> is that it is able to cope with all these issues.</p>
","8126554"
"cin and getline skipping input","90056","","<p>earlier i posted a question about <code>cin</code> skipping input, and I got results to flush, and use <code>istringstream</code>, but now I tried every possible solution but none of them work.</p>

<p>here is my code:</p>

<pre><code>void createNewCustomer () {
    string name, address;

    cout &lt;&lt; ""Creating a new customer..."" &lt;&lt; endl;
    cout &lt;&lt; ""Enter the customer's name: ""; getline(cin, name);
    cout &lt;&lt; ""Enter the customer's address: ""; getline(cin, address);

    Customer c(name, address, 0);
    CustomerDB::addCustomer(c);

    cout &lt;&lt; endl;
}
</code></pre>

<p>but I'm still getting the same thing, skipping input, and when it does take input, it takes them and stores in name empty nothing, and in address it takes what i wrote in name but from the 2nd letter to the end</p>

<p>what is wrong with my code?</p>

<p>I tried the <code>cin.ignore()</code>, <code>cin.get()</code>, and <code>cin.clear()</code> all of them together and alone, none of them worked</p>

<p>EDIT:</p>

<p>main method in main.cpp invokes <code>mainMenu()</code> only</p>

<pre><code>void mainMenu () {
    char choice;

    do {
        system(""cls"");
        mainMenuDisplay();
        cin &gt;&gt; choice;
        system(""cls"");

        switch (choice) {
            case '1':
                customerMenu();
                break;

            case '2':
                dvdMenu();
                break;

            case '3':
                receiptMenu();
                break;

            case '4':
                outro();
                break;

            default:
                cout &lt;&lt; '\a';
        }

        cin.ignore();
        cin.get();
    } while (choice != '4');
}
</code></pre>

<p>i will choose 1 for the customer example, this is <code>customerMenu()</code></p>

<pre><code>void customerMenu () {
    char choice;

    do {
        system(""cls"");
        manageCustomerMenu();
        cin &gt;&gt; choice;
        system(""cls"");

        switch (choice) {
            case '1':
                createNewCustomer();
                break;

            case '2':
                deleteCustomer();
                break;

            case '3':
                updateCustomerStatus();
                break;

            case '4':
                viewCustomersList();
                break;

            case '5':
                mainMenu();
                break;

            default:
                cout &lt;&lt; '\a';
        }

        cin.ignore();
        cin.get();
    } while (choice != '5');
}
</code></pre>

<p>I choose 1 again to create a new customer object, which will now go to the MainFunctions.cpp which will invoke the function <code>createNewCustomer()</code> which is the first one.</p>

<pre><code>void createNewCustomer () {
    string name, address;

    cout &lt;&lt; ""Creating a new customer..."" &lt;&lt; endl;
    cout &lt;&lt; ""Enter the customer's name: ""; cin.getline(name,256);
    cout &lt;&lt; ""Enter the customer's address: ""; cin.getline(address,256);

    Customer c(name, address, 0);
    CustomerDB::addCustomer(c);

    cout &lt;&lt; endl;
}
</code></pre>
","<p>If you're using <code>getline</code> after <code>cin &gt;&gt; something</code>, you need to flush the newline out of the buffer in between.</p>

<p>My personal favourite for this if no characters past the newline are needed is <code>cin.sync()</code>. However, it is implementation defined, so it might not work the same way as it does for me. For something solid, use <code>cin.ignore()</code>. Or make use of <code>std::ws</code> to remove leading whitespace if desirable:</p>

<pre><code>int a;

cin &gt;&gt; a;
cin.ignore (std::numeric_limits&lt;std::streamsize&gt;::max(), '\n'); 
//discard characters until newline is found

//my method: cin.sync(); //discard unread characters

string s;
getline (cin, s); //newline is gone, so this executes

//other method: getline(cin &gt;&gt; ws, s); //remove all leading whitespace
</code></pre>
","10553849"
"M_PI works with math.h but not with cmath in Visual Studio","89881","","<p>I am using Visual Studio 2010. I have read that in C++ it is better to use <code>&lt;cmath&gt;</code> rather than <code>&lt;math.h&gt;</code>. </p>

<p>But in the program I am trying to write (Win32 console application, empty project) if I write:</p>

<pre><code>#define _USE_MATH_DEFINES
#include &lt;math.h&gt;
</code></pre>

<p>it compiles, while if I write</p>

<pre><code>#define _USE_MATH_DEFINES
#include &lt;cmath&gt;
</code></pre>

<p>it fails with </p>

<blockquote>
  <p>error C2065: 'M_PI' : undeclared identifier</p>
</blockquote>

<p>Is it normal? Does it matter if I use cmath or math.h? If yes, how can I make it work with cmath?</p>

<p><strong>UPDATE</strong>: if I define _USE_MATH_DEFINES in the GUI, it works. Any clue why this is happening?</p>
","<p>Interestingly I checked this on an app of mine and I got the same error.</p>

<p>I spent a while checking through headers to see if there was anything undef'ing the _USE_MATH_DEFINES and found nothing.</p>

<p>So I moved the </p>

<pre><code>#define _USE_MATH_DEFINES
#include &lt;cmath&gt;
</code></pre>

<p>to be the first thing in my file (I don't use PCHs so if you are you will have to have it after the #include ""stdafx.h"") and suddenly it compile perfectly.</p>

<p>Try moving it higher up the page.  Totally unsure as to why this would cause issues though.</p>

<p><strong>Edit</strong>: Figured it out.  The #include  occurs within cmath's header guards.  This means that something higher up the list of #includes is including cmath without the #define specified.  math.h is specifically designed so that you can include it again with that define now changed to add M_PI etc.  This is NOT the case with cmath.  So you need to make sure you #define _USE_MATH_DEFINES before you include anything else.  Hope that clears it up for you :)</p>

<p>Failing that just include math.h you are using non-standard C/C++ as already pointed out :)</p>

<p><strong>Edit 2</strong>: Or as David points out in the comments just make yourself a constant that defines the value and you have something more portable anyway :)</p>
","6563891"
"C++: Comparing two vectors","89764","","<p>Is there any way to compare two vectors?</p>

<pre><code>if (vector1 == vector2)
    DoSomething();
</code></pre>

<p><strong>Note:</strong> Currently, these vectors are not sorted and contain integer values.</p>
","<p>Check  <a href=""http://en.cppreference.com/w/cpp/algorithm/mismatch"" rel=""nofollow noreferrer""><code>std::mismatch</code></a> method of C++.</p>

<p>comparing vectors has been discussed on <strong>DaniWeb forum</strong> and also <strong>answered</strong>.</p>

<p><a href=""http://www.daniweb.com/software-development/cpp/threads/168611"" rel=""nofollow noreferrer"">C++: Comparing two vectors</a></p>

<p>Check the below SO post. will helpful for you. they have achieved the same with different-2 method.</p>

<p><a href=""https://stackoverflow.com/questions/5225820/compare-two-vectors-c"">Compare two vectors C++</a></p>
","6248053"
"how do I make cmake output into a 'bin' dir?","89701","","<p>I'm currently constructing a project with a plugin structure. I'm using cmake to compile the project. the plugins are compiled in seperate directories. My problem is that cmake compiles and saves the binaries and plugins,dynamic libraries, in the directory structure of the source. how do I make cmake save the files in something like a ./bin directory? </p>
","<p>As in Oleg's answer, I believe the correct variable to set is <a href=""https://cmake.org/cmake/help/v3.5/variable/CMAKE_RUNTIME_OUTPUT_DIRECTORY.html"" rel=""noreferrer"">CMAKE_RUNTIME_OUTPUT_DIRECTORY</a>. we use the following in our root CMakeLists.txt:</p>

<pre><code>set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
</code></pre>

<p>You can also specify the output directories on a per target basis:</p>

<pre><code>set_target_properties( targets...
    PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib""
    LIBRARY_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/lib""
    RUNTIME_OUTPUT_DIRECTORY ""${CMAKE_BINARY_DIR}/bin""
)
</code></pre>

<p>In both cases you can append <code>_[CONFIG]</code> to the variable/property name to make the output directory apply to a specific configuration (the standard values for config are <code>DEBUG</code>, <code>RELEASE</code>, <code>MINSIZEREL</code> and <code>RELWITHDEBINFO</code>).</p>
","6595001"
"What's the Use of '\r' escape sequence?","89685","","<p>I have C code like this:</p>

<pre><code>#include&lt;stdio.h&gt;
int main()
{
    printf(""Hey this is my first hello world \r"");
    return 0;
}
</code></pre>

<p>I have used the <code>\r</code> escape sequence as an experiment. When I run the code I get the output as:</p>

<pre><code>o world
</code></pre>

<p>Why is that, and what is the use of <code>\r</code> exactly? </p>

<p>If I run the same code in an online compiler I get the output as:</p>

<pre><code>Hey this is my first hello world
</code></pre>

<p>Why did the online compiler produce different output, ignoring the <code>\r</code>?</p>
","<p><code>\r</code> is a <em>carriage return</em> character; it tells your terminal emulator to move the cursor at the start of the line.</p>

<p>The <em>cursor</em> is the position where the next characters will be rendered.</p>

<p>So, printing a <code>\r</code> allows to override the current line of the terminal emulator.</p>

<p><a href=""https://stackoverflow.com/questions/7372918/whats-the-use-of-r-escape-sequence/7372959#7372959"">Tom Zych</a> figured why the output of your program is <code>o wolrd</code> while the <code>\r</code> is at the end of the line and you don't print anything after that:</p>

<p>When your program exits, the shell prints the command prompt. The terminal renders it where you left the cursor. Your program leaves the cursor at the start of the line, so the command prompt partly overrides the line you printed. This explains why you seen your command prompt followed by <code>o world</code>.</p>

<p>The <em>online compiler</em> you mention just prints the raw output to the browser. The browser ignores control characters, so the <code>\r</code> has no effect.</p>

<p>See <a href=""https://en.wikipedia.org/wiki/Carriage_return"" rel=""noreferrer"">https://en.wikipedia.org/wiki/Carriage_return</a></p>

<p>Here is a usage example of <code>\r</code>:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main()
{
        char chars[] = {'-', '\\', '|', '/'};
        unsigned int i;

        for (i = 0; ; ++i) {
                printf(""%c\r"", chars[i % sizeof(chars)]);
                fflush(stdout);
                usleep(200000);
        }

        return 0;
}
</code></pre>

<p>It repeatedly prints the characters <code>-</code> <code>\</code> <code>|</code> <code>/</code> at the same position to give the illusion of a rotating <code>|</code> in the terminal.</p>
","7372938"
"initialize a vector to zeros C++/C++11","89551","","<p>I know in C++11 they added the feature to initialize a variable to zero as such </p>

<pre><code>double number = {}; // number = 0
int data{};  // data = 0
</code></pre>

<p>Is there a similar way to initialize a <code>std::vector</code> of a fixed length to all zero's?</p>
","<p>You don't need initialization lists for that:</p>

<pre><code>std::vector&lt;int&gt; vector1(length, 0);
std::vector&lt;double&gt; vector2(length, 0.0);
</code></pre>
","13110148"
"Where is shared_ptr?","89542","","<p>I am so frustrated right now after several hours trying to find where shared_ptr is located. None of the examples I see show complete code to include the headers for <code>shared_ptr</code> (and working). Simply stating <code>std</code>, <code>tr1</code> and <code>&lt;memory&gt;</code> is not helping at all! I have downloaded boosts and all but still it doesn't show up!  Can someone help me by telling exactly where to find it?</p>

<p>Thanks for letting me vent my frustrations!</p>

<p>EDIT:
I see my title has been changed. Sorry about that.
So... it was also because it was not clear to me that shared_ptr is ""C++ version dependant"" --> that's why I did not state my environment --> therefore probably why it was so difficult for me to find it.</p>

<p>I am working on MSVS2008.</p>

<p>EDIT 2:
I don't know why,  but I was including [memory] and [boost/tr1/memory.hpp] and [boost/tr1/tr1/memory] while looking everywhere for the shared_ptr.. of course, i couldn't.</p>

<p>Thanks for all the responses.</p>
","<p>There are at least three places where you may find <code>shared_ptr</code>:</p>

<ol>
<li><p>If your C++ implementation supports C++11 (or at least the C++11 <code>shared_ptr</code>), then <code>std::shared_ptr</code> will be defined in <code>&lt;memory&gt;</code>.</p></li>
<li><p>If your C++ implementation supports the C++ TR1 library extensions, then <code>std::tr1::shared_ptr</code> will likely be in <code>&lt;memory&gt;</code> (Microsoft Visual C++) or <code>&lt;tr1/memory&gt;</code> (g++'s libstdc++).  Boost also provides a TR1 implementation that you can use.</p></li>
<li><p>Otherwise, you can obtain the Boost libraries and use <code>boost::shared_ptr</code>, which can be found in <code>&lt;boost/shared_ptr.hpp&gt;</code>.</p></li>
</ol>
","2918235"
"Why does modulus division (%) only work with integers?","89493","","<p>I recently ran into <a href=""https://stackoverflow.com/questions/6091837/sin-and-cos-are-slow-is-there-an-alternatve/6091846#6091846"">an issue</a> that could easily be solved using modulus division, but the input was a float:</p>

<blockquote>
  <p>Given a periodic function (e.g. <code>sin</code>) and a computer function that can only compute it within the period range (e.g. [-π, π]), make a function that can handle any input.</p>
</blockquote>

<p>The ""obvious"" solution is something like:</p>

<pre><code>#include &lt;cmath&gt;

float sin(float x){
    return limited_sin((x + M_PI) % (2 *M_PI) - M_PI);
}
</code></pre>

<p>Why doesn't this work? I get this error:</p>

 <pre class=""lang-none prettyprint-override""><code>error: invalid operands of types double and double to binary operator %
</code></pre>

<p>Interestingly, it does work in Python:</p>

 <pre class=""lang-python prettyprint-override""><code>def sin(x):
    return limited_sin((x + math.pi) % (2 * math.pi) - math.pi)
</code></pre>
","<p>Because the normal mathematical notion of ""remainder"" is only applicable to integer division. i.e. division that is required to generate integer quotient.</p>

<p>In order to extend the concept of ""remainder"" to real numbers you have to introduce a new kind of ""hybrid"" operation that would generate <em>integer</em> quotient for <em>real</em> operands. Core C language does not support such operation, but it is provided as a standard library <a href=""http://en.cppreference.com/w/c/numeric/math/fmod""><code>fmod</code></a> function, as well as <a href=""http://en.cppreference.com/w/c/numeric/math/remainder""><code>remainder</code></a> function in C99. (Note that these functions are not the same and have some peculiarities. In particular, they do not follow the rounding rules of integer division.)</p>
","6103040"
"cannot open shared object file: No such file or directory","89446","","<p>I met the share library not found on the head node of a cluster with torch. I have built the library as well as specify the correct path of the library while compiling my own program ""absurdity"" by g++. So it looks strange to me. Any idea? Thanks and regards!</p>

<pre><code>[tim@user1 release]$ make  
...  
...  
g++ -pipe -W -Wall -fopenmp -ggdb3 -O2    -I/home/tim/program_files/ICMCluster/ann_1.1.1/include -I/home/tim/program_files/ICMCluster/libsvm-2.89  -I/home/tim/program_files/ICMCluster/svm_light  -o absurdity  xxxxxx.o  -L/home/tim/program_files/ICMCluster/ann_1.1.1/release/lib -L/home/tim/program_files/ICMCluster/libsvm-2.89/release/lib -L/home/tim/program_files/ICMCluster/svm_light/release/lib -lm -ljpeg -lpng -lz -lANN -lpthread -lsvm -lsvmlight  

[tim@user1 release]$ ./absurdity  
./absurdity: error while loading shared libraries: libsvmlight.so: cannot open shared object file: No such file or directory  

[tim@user1 release]$ ls /home/tim/program_files/ICMCluster/svm_light/release/lib/libsvmlight.so -l  
-rwxr-xr-x 1 tim Brown 121407 Jan 31 12:14 /home/tim/program_files/ICMCluster/svm_light/release/lib/libsvmlight.so 

[tim@user1 release]$ LD_LIBRARY_PATH= /home/tim/program_files/ICMCluster/svm_light/release/lib:$LD_LIBRARY_PAT    
[tim@user1 release]$ export LD_LIBRARY_PATH 

[tim@user1 release]$ ./absurdity  
./absurdity: error while loading shared libraries: libsvmlight.so: cannot open shared object file: No such file or directory  

[tim@user1 release]$ ls  /home/tim/program_files/ICMCluster/svm_light/release/lib  
libsvmlight.a  libsvmlight.so  
</code></pre>
","<p>Your <code>LD_LIBRARY_PATH</code> doesn't include the path to <code>libsvmlight.so</code>.</p>

<pre><code>$ export LD_LIBRARY_PATH=/home/tim/program_files/ICMCluster/svm_light/release/lib:$LD_LIBRARY_PATH
</code></pre>
","2172631"
"Sorting Characters Of A C++ String","89408","","<p>If i have a string is there a built in function to sort the characters or would I have to write my own?</p>

<p>for example:</p>

<pre><code>string word = ""dabc"";
</code></pre>

<p>I would want to change it so that:</p>

<pre><code>string sortedWord = ""abcd"";
</code></pre>

<p>Maybe using char is a better option? How would I do this in C++?</p>
","<p>There is <a href=""http://en.cppreference.com/w/cpp/algorithm/sort"">a sorting algorithm</a> in the standard library, in the header <code>&lt;algorithm&gt;</code>. It sorts inplace, so if you do the following, your original word will become sorted.</p>

<pre><code>std::sort(word.begin(), word.end());
</code></pre>

<p>If you don't want to lose the original, make a copy first.</p>

<pre><code>std::string sortedWord = word;
std::sort(sortedWord.begin(), sortedWord.end());
</code></pre>
","9107552"
"Sum of Numbers C++","89395","","<p>I am supposed to write a program that asks the user for a positive integer value. The program should use a loop to get the sum of 
all the integers from 1 up to the number entered. For example, if the user enters 50, the loop will find the sum of 
1, 2, 3, 4, ... 50.</p>

<p>But for some reason it is not working, i am having trouble with my for loops but this is what i have down so far.</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

int main()
{
    int positiveInteger;
    int startingNumber = 1;
    int i = 0;

    cout &lt;&lt; ""Please input an integer up to 100."" &lt;&lt; endl;

    cin &gt;&gt; positiveInteger;

    for (int i=0; i &lt; positiveInteger; i++)
    {
        i = startingNumber + 1;
        cout &lt;&lt; i;
    }

    return 0;

}
</code></pre>

<p>I am just at a loss right now why it isn't working properly. </p>
","<p>try</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

int main()
{
    int positiveInteger;
    int startingNumber = 1;

    cout &lt;&lt; ""Please input an integer upto 100."" &lt;&lt; endl;

    cin &gt;&gt; positiveInteger;

    int result = 0 
    for (int i=startingNumber; i &lt;= positiveInteger; i++)
    {
        result += i
        cout &lt;&lt; result;
    }

    cout &lt;&lt; result;

    return 0;

}
</code></pre>
","7463544"
"How to avoid memory leaks when using a vector of pointers to dynamically allocated objects in C++?","89376","","<p>I'm using a vector of pointers to objects. These objects are derived from a base class, and are being dynamically allocated and stored.</p>

<p>For example, I have something like:</p>

<pre><code>vector&lt;Enemy*&gt; Enemies;
</code></pre>

<p>and I'll be deriving from the Enemy class and then dynamically allocating memory for the derived class, like this:</p>

<pre><code>enemies.push_back(new Monster());
</code></pre>

<p>What are things I need to be aware of to avoid memory leaks and other problems?</p>
","<p><a href=""http://en.cppreference.com/w/cpp/container/vector"" rel=""noreferrer""><code>std::vector</code></a> will manage the memory for you, like always, but this memory will be of pointers, not objects.</p>

<p>What this means is that your classes will be lost in memory once your vector goes out of scope. For example:</p>

<pre><code>#include &lt;vector&gt;

struct base
{
    virtual ~base() {}
};

struct derived : base {};

typedef std::vector&lt;base*&gt; container;

void foo()
{
    container c;

    for (unsigned i = 0; i &lt; 100; ++i)
        c.push_back(new derived());

} // leaks here! frees the pointers, doesn't delete them (nor should it)

int main()
{
    foo();
}
</code></pre>

<p>What you'd need to do is make sure you delete all the objects before the vector goes out of scope:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;vector&gt;

struct base
{
    virtual ~base() {}
};

struct derived : base {};

typedef std::vector&lt;base*&gt; container;

template &lt;typename T&gt;
void delete_pointed_to(T* const ptr)
{
    delete ptr;
}

void foo()
{
    container c;

    for (unsigned i = 0; i &lt; 100; ++i)
        c.push_back(new derived());

    // free memory
    std::for_each(c.begin(), c.end(), delete_pointed_to&lt;base&gt;);
}

int main()
{
    foo();
}
</code></pre>

<p>This is difficult to maintain, though, because we have to remember to perform some action. More importantly, if an exception were to occur in-between the allocation of elements and the deallocation loop, the deallocation loop would never run and you're stuck with the memory leak anyway! This is called exception safety and it's a critical reason why deallocation needs to be done automatically.</p>

<p>Better would be if the pointers deleted themselves. Theses are called smart pointers, and the standard library provides <a href=""http://en.cppreference.com/w/cpp/memory/unique_ptr"" rel=""noreferrer""><code>std::unique_ptr</code></a> and <a href=""http://en.cppreference.com/w/cpp/memory/shared_ptr"" rel=""noreferrer""><code>std::shared_ptr</code></a>.</p>

<p><code>std::unique_ptr</code> represents a unique (unshared, single-owner) pointer to some resource. This should be your default smart pointer, and overall complete replacement of any raw pointer use.</p>

<pre><code>auto myresource = /*std::*/make_unique&lt;derived&gt;(); // won't leak, frees itself
</code></pre>

<p><code>std::make_unique</code> is missing from the C++11 standard by oversight, but you can make one yourself. To directly create a <code>unique_ptr</code> (not recommended over <code>make_unique</code> if you can), do this:</p>

<pre><code>std::unique_ptr&lt;derived&gt; myresource(new derived());
</code></pre>

<p>Unique pointers have move semantics only; they cannot be copied:</p>

<pre><code>auto x = myresource; // error, cannot copy
auto y = std::move(myresource); // okay, now myresource is empty
</code></pre>

<p>And this is all we need to use it in a container:</p>

<pre><code>#include &lt;memory&gt;
#include &lt;vector&gt;

struct base
{
    virtual ~base() {}
};

struct derived : base {};

typedef std::vector&lt;std::unique_ptr&lt;base&gt;&gt; container;

void foo()
{
    container c;

    for (unsigned i = 0; i &lt; 100; ++i)
        c.push_back(make_unique&lt;derived&gt;());

} // all automatically freed here

int main()
{
    foo();
}
</code></pre>

<p><code>shared_ptr</code> has reference-counting copy semantics; it allows multiple owners sharing the object. It tracks how many <code>shared_ptr</code>s exist for an object, and when the last one ceases to exist (that count goes to zero), it frees the pointer. Copying simply increases the reference count (and moving transfers ownership at a lower, almost free cost). You make them with <code>std::make_shared</code> (or directly as shown above, but because <code>shared_ptr</code> has to internally make allocations, it's generally more efficient and technically more exception-safe to use <code>make_shared</code>).</p>

<pre><code>#include &lt;memory&gt;
#include &lt;vector&gt;

struct base
{
    virtual ~base() {}
};

struct derived : base {};

typedef std::vector&lt;std::shared_ptr&lt;base&gt;&gt; container;

void foo()
{
    container c;

    for (unsigned i = 0; i &lt; 100; ++i)
        c.push_back(std::make_shared&lt;derived&gt;());

} // all automatically freed here

int main()
{
    foo();
}
</code></pre>

<p>Remember, you generally want to use <code>std::unique_ptr</code> as a default because it's more lightweight. Additionally, <code>std::shared_ptr</code> can be constructed out of a <code>std::unique_ptr</code> (but not vice versa), so it's okay to start small.</p>

<p>Alternatively, you could use a container created to store pointers to objects, such as a <a href=""http://www.boost.org/libs/ptr_container/doc/ptr_container.html"" rel=""noreferrer""><code>boost::ptr_container</code></a>:</p>

<pre><code>#include &lt;boost/ptr_container/ptr_vector.hpp&gt;

struct base
{
    virtual ~base() {}
};

struct derived : base {};

// hold pointers, specially
typedef boost::ptr_vector&lt;base&gt; container;

void foo()
{
    container c;

    for (int i = 0; i &lt; 100; ++i)
        c.push_back(new Derived());

} // all automatically freed here

int main()
{
    foo();
}
</code></pre>

<p>While <code>boost::ptr_vector&lt;T&gt;</code> had obvious use in C++03, I can't speak of the relevance now because we can use <code>std::vector&lt;std::unique_ptr&lt;T&gt;&gt;</code> with probably little to no comparable overhead, but this claim should be tested.</p>

<p>Regardless, <em>never explicitly free things in your code</em>. Wrap things up to make sure resource management is dealt with automatically. You should have no raw owning pointers in your code.</p>

<p>As a default in a game, I would probably go with <code>std::vector&lt;std::shared_ptr&lt;T&gt;&gt;</code>. We expect sharing anyway, it's fast enough until profiling says otherwise, it's safe, and it's easy to use.</p>
","1361227"
"How to identify platform/compiler from preprocessor macros?","89369","","<p>I'm writing a cross-platform code, which should compile at linux, windows, Mac OS. On windows, I must support visual studio and mingw.</p>

<p>There are some pieces of platform-specific code, which I should place in <code>#ifdef .. #endif</code> environment. For example, here I placed win32 specific code:</p>

<pre><code>#ifdef WIN32
#include &lt;windows.h&gt;
#endif
</code></pre>

<p>But how do I recognize linux and mac OS? What are defines names (or etc.) I should use?</p>
","<p>For <strong>Mac OS</strong>:</p>

<pre><code>#ifdef __APPLE__
</code></pre>

<p>For <strong>MingW</strong> on Windows:</p>

<pre><code>#ifdef __MINGW32__
</code></pre>

<p>For <strong>Linux</strong>:</p>

<pre><code>#ifdef __linux__
</code></pre>

<p>For other Windows compilers, check <a href=""https://stackoverflow.com/questions/430424/how-can-i-detect-the-operating-system-in-c-c"">this thread</a> and <a href=""https://stackoverflow.com/questions/152016/detecting-cpu-architecture-compile-time/152067#152067"">this</a> for several other compilers and architectures.</p>
","4605893"
"Determine the line of code that causes a segmentation fault?","89354","","<p>How do we determine where the mistake is in our code that causes a <a href=""https://stackoverflow.com/questions/2346806/what-is-a-segmentation-fault"">segmentation fault</a>?</p>

<p>After writing some code, to determine where I have a segmentation fault, can my compiler (<code>gcc</code>) show me The location of the fault in my program?</p>
","<p>GCC can't do that but GDB sure can. Compile you program using the <code>-g</code> switch, like this:</p>

<pre><code>gcc program.c -g
</code></pre>

<p>Then use gdb:</p>

<pre><code>$ gdb ./a.out
(gdb) run
&lt;segfault happens here&gt;
(gdb) backtrace
&lt;offending code is shown here&gt;
</code></pre>

<p><a href=""http://www.unknownroad.com/rtfm/gdbtut/gdbtoc.html"" rel=""noreferrer"">Here</a> is a nice tutorial to get you started with GDB.</p>
","2876374"
"Pointers, smart pointers or shared pointers?","89286","","<p>I am programming with normal pointers, but I have heard about libraries like Boost that implement smart pointers. I have also seen that in Ogre3D rendering engine there is a deep use of shared pointers.</p>

<p>What exactly is the difference between the three, and should I stick on using just a type of them?</p>
","<p>Sydius outlined the types fairly well:</p>

<ul>
<li><strong>Normal pointers</strong> are just that - they point to some thing in memory somewhere. Who owns it? Only the comments will let you know. Who frees it? Hopefully the owner at some point.</li>
<li><strong>Smart pointers</strong> are a blanket term that cover many types; I'll assume you meant scoped pointer which uses the <a href=""http://en.wikipedia.org/wiki/Resource_acquisition_is_initialization"" rel=""noreferrer"">RAII</a> pattern. It is a stack-allocated object that wraps a pointer; when it goes out of scope, it calls delete on the pointer it wraps. It ""owns"" the contained pointer in that it is in charge of deleteing it at some point. They allow you to get a raw reference to the pointer they wrap for passing to other methods, as well as <em>releasing</em> the pointer, allowing someone else to own it. Copying them does not make sense.</li>
<li><strong>Shared pointers</strong> is a stack-allocated object that wraps a pointer so that you don't have to know who owns it. When the last shared pointer for an object in memory is destructed, the wrapped pointer will also be deleted.</li>
</ul>

<p>How about when you should use them? You will either make heavy use of scoped pointers or shared pointers. How many threads are running in your application? If the answer is ""potentially a lot"", shared pointers can turn out to be a performance bottleneck if used everywhere. The reason being that creating/copying/destructing a shared pointer needs to be an atomic operation, and this can hinder performance if you have many threads running. However, it won't always be the case - only testing will tell you for sure.</p>

<p>There is an argument (that I like) against shared pointers - by using them, you are allowing programmers to ignore who owns a pointer. This can lead to tricky situations with circular references (Java will detect these, but shared pointers cannot) or general programmer laziness in a large code base.</p>

<p>There are two reasons to use scoped pointers. The first is for simple exception safety and cleanup operations - if you want to guarantee that an object is cleaned up no matter what in the face of exceptions, and you don't want to stack allocate that object, put it in a scoped pointer. If the operation is a success, you can feel free to transfer it over to a shared pointer, but in the meantime save the overhead with a scoped pointer.</p>

<p>The other case is when you want clear object ownership. Some teams prefer this, some do not. For instance, a data structure may return pointers to internal objects. Under a scoped pointer, it would return a raw pointer or reference that should be treated as a weak reference - it is an error to access that pointer after the data structure that owns it is destructed, and it is an error to delete it. Under a shared pointer, the owning object can't destruct the internal data it returned if someone still holds a handle on it - this could leave resources open for much longer than necessary, or much worse depending on the code.</p>
","417635"
"What is use of c_str function In c++","89259","","<p>I have just started reading C++ and found c++ having rich functions for string manipulation which C does not have. I am reading these function and came across <code>c_str()</code> and from what I understand is <code>c_str</code> convert a string which may be null terminated or may not be to a null terminated string .Is it true?</p>

<p>Can anyone suggest me some example so that i can understand the use of <strong>c_str</strong> function??</p>
","<p><code>c_str</code> returns a <code>const char*</code> that points to a null-terminated string (i.e. a C-style string). It is useful when you want to pass the ""contents""¹ of an <code>std::string</code> to a function that expects to work with a C-style string.</p>

<p>For example, consider this code:</p>

<pre><code>std::string str(""Hello world!"");
int pos1 = str.find_first_of('w');

int pos2 = strchr(str.c_str(), 'w') - str.c_str();

if (pos1 == pos2) {
    printf(""Both ways give the same result.\n"");
}
</code></pre>

<p><strong><a href=""http://www.ideone.com/XW4F0"" rel=""noreferrer"">See it in action</a></strong>.</p>

<p>Notes:</p>

<p>¹ This is not entirely true because an <code>std::string</code> (unlike a C string) can contain the <code>\0</code> character. If it does, the code that receives the return value of <code>c_str()</code> will be fooled into thinking that the string is shorter than it really is, since it will interpret <code>\0</code> as the end of the string.</p>
","7416473"
"Creating a simple configuration file and parser in C++","89234","","<p>I am trying to create a simple configuration file that looks like this</p>

<pre><code>url = http://mysite.com
file = main.exe
true = 0
</code></pre>

<p>when the program runs, I would like it to load the configuration settings into the programs variables listed below.</p>

<pre><code>string url, file;
bool true_false;
</code></pre>

<p>I have done some research and <a href=""http://www.daniweb.com/software-development/cpp/threads/185995"" rel=""noreferrer"">this</a> link seemed to help (nucleon's post) but I can't seem to get it to work and it is too complicated to understand on my part. Is there a simple way of doing this? I can load the file using <code>ifstream</code> but that is as far as I can get on my own. Thanks!</p>
","<p>In general, it's easiest to parse such typical config files in two stages: first read the lines, and then parse those one by one.<br>
In C++, lines can be read from a stream using <code>std::getline()</code>. While by default it will read up to the next <code>'\n'</code> (which it will consume, but not return), you can pass it some other delimiter, too, which makes it a good candidate for reading up-to-some-char, like <code>=</code> in your example. </p>

<p>For simplicity, the following presumes that the <code>=</code> are <em>not</em> surrounded by whitespace. If you want to allow whitespaces at these positions, you will have to strategically place <code>is &gt;&gt; std::ws</code> before reading the value and remove trailing whitespaces from the keys. However, IMO the little added flexibility in the syntax is not worth the hassle for a config file reader. </p>

<pre><code>const char config[] = ""url=http://example.com\n""
                      ""file=main.exe\n""
                      ""true=0"";

std::istringstream is_file(config);

std::string line;
while( std::getline(is_file, line) )
{
  std::istringstream is_line(line);
  std::string key;
  if( std::getline(is_line, key, '=') )
  {
    std::string value;
    if( std::getline(is_line, value) ) 
      store_line(key, value);
  }
}
</code></pre>

<p><em>(Adding error handling is left as an exercise to the reader.)</em></p>
","6892829"
"Console output in a Qt GUI app?","89099","","<p>I have a Qt GUI application running on Windows that allows command-line options to be passed and under some circumstances I want to output a message to the console and then quit, for example:</p>

<pre><code>int main(int argc, char *argv[])
{
  QApplication a(argc, argv);

  if (someCommandLineParam)
  {
    std::cout &lt;&lt; ""Hello, world!"";
    return 0;
  }

  MainWindow w;
  w.show();

  return a.exec();
}
</code></pre>

<p>However, the console messages do not appear when I run the app from a command-prompt.  Does anyone know how I can get this to work?</p>
","<p>Windows does not really support dual mode applications. </p>

<p>To see console output you need to create a console application</p>

<pre><code>CONFIG += console
</code></pre>

<p>However, if you double click on the program to start the GUI mode version then you will get a console window appearing, which is probably not what you want. To prevent the console window appearing you have to create a GUI mode application in which case you get no output in the console.</p>

<p>One idea may be to create a second small application which is a console application and provides the output. This can call the second one to do the work. </p>

<p>Or you could put all the functionality in a DLL then create two versions of the .exe file which have very simple main functions which call into the DLL. One is for the GUI and one is for the console.</p>
","3370017"
"What are some uses of template template parameters in C++?","88960","","<p>I've seen some examples of C++ using template template parameters (that is templates which take templates as parameters) to do policy-based class design. What other uses does this technique have?</p>
","<p>I think you need to use template template syntax to pass a parameter whose type is a template dependent on another template like this:</p>

<pre><code>template &lt;template&lt;class&gt; class H, class S&gt;
void f(const H&lt;S&gt; &amp;value) {
}
</code></pre>

<p>Here, <code>H</code> is a template, but I wanted this function to deal with all specializations of <code>H</code>.</p>

<p><strong>NOTE</strong>: I've been programming c++ for many years and have only needed this once. I find that it is a rarely needed feature (of course handy when you need it!).</p>

<p>I've been trying to think of good examples, and to be honest, most of the time this isn't necessary, but let's contrive an example. Let's pretend that <code>std::vector</code> <em>doesn't</em> have a <code>typedef value_type</code>. </p>

<p>So how would you write a function which can create variables of the right type for the vectors elements? This would work.</p>

<pre><code>template &lt;template&lt;class, class&gt; class V, class T, class A&gt;
void f(V&lt;T, A&gt; &amp;v) {
    // This can be ""typename V&lt;T, A&gt;::value_type"",
    // but we are pretending we don't have it

    T temp = v.back();
    v.pop_back();
    // Do some work on temp

    std::cout &lt;&lt; temp &lt;&lt; std::endl;
}
</code></pre>

<p><strong>NOTE</strong>: we <code>std::vector</code> has two template parameters, type and allocator, so we had to accept both of them. Fortunately, because of type deduction, we won't need to write out the exact type explicitly.</p>

<p>which you can use like this:</p>

<pre><code>f&lt;std::vector, int&gt;(v); // v is of type std::vector&lt;int&gt; using any allocator
</code></pre>

<p>or better yet, we can just use:</p>

<pre><code>f(v); // everything is deduced, f can deal with a vector of any type!
</code></pre>

<p><strong>UPDATE</strong>: Even this contrived example, while illustrative, is no longer an amazing example due to c++11 introducing <code>auto</code>. Now the same function can be written as:</p>

<pre><code>template &lt;class Cont&gt;
void f(Cont &amp;v) {

    auto temp = v.back();
    v.pop_back();
    // Do some work on temp

    std::cout &lt;&lt; temp &lt;&lt; std::endl;
}
</code></pre>

<p>which is how I'd prefer to write this type of code.</p>
","213811"
"How do I call ::CreateProcess in c++ to launch a Windows executable?","88879","","<p>Looking for an example that:</p>

<ol>
<li>Launches an EXE</li>
<li>Waits for the EXE to finish.</li>
<li>Properly closes all the handles when the executable finishes.</li>
</ol>
","<p>Something like this:</p>

<pre><code>STARTUPINFO info={sizeof(info)};
PROCESS_INFORMATION processInfo;
if (CreateProcess(path, cmd, NULL, NULL, TRUE, 0, NULL, NULL, &amp;info, &amp;processInfo))
{
    WaitForSingleObject(processInfo.hProcess, INFINITE);
    CloseHandle(processInfo.hProcess);
    CloseHandle(processInfo.hThread);
}
</code></pre>
","42544"
"Why installing vcredist_x86.exe doesn't fix SideBySide error when I develop an EXE on one machine and run it on another one?","88806","","<p><strong>Issue</strong></p>

<p>I wrote a C++ project called 'Foo' using Microsoft Visual Studio 2005 Verison 8.0.50727.762 (SP.050727-7600) on Windows XP Professional Version 2002 Service Pack 3. I built the project into Foo.exe. Then, I copied the file Foo.exe to a Windows Server 2003 Enterprise Edition Service Pack 2. When I tried to run it, it failed with this error,</p>

<pre><code>C:\foo.exe
The application has failed to start because the application configuration is incorrect.
Reinstalling the application may fix the problem.
</code></pre>

<p>In Event Viewer > System, three events were logged.</p>

<p>Event ID: 32; Source: SideBySide</p>

<pre><code>Dependent Assembly Microsoft.VC80.CRT could not be found and Last Error was
The referenced assembly is not installed on your system.
</code></pre>

<p>Event ID: 59; Source: SideBySide</p>

<pre><code>Resolve Partial Assembly failed for Microsoft.VC80.CRT.
Reference error message: The referenced assembly is not installed on your system.
</code></pre>

<p>Event ID: 59; Source: SideBySide</p>

<pre><code>Generate Activation Context failed for C:\foo\Foo.exe.
Reference error message: The referenced assembly is not installed on your system.
</code></pre>

<p><strong>Installing Microsoft Visual C++ 2005 Redistributable didn't fix it</strong></p>

<ol>
<li>Downloaded vcredist_x86.exe from <a href=""http://www.microsoft.com/download/en/details.aspx?id=3387"" rel=""noreferrer"">http://www.microsoft.com/download/en/details.aspx?id=3387</a></li>
<li>Installed it. The installer created a folder called <code>C:\windows\winsxs\x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.42_x-ww_0de06acd</code>.</li>
</ol>

<p>The version of this software as found from 'Add or Remove Programs' was '8.0.50727.42'.</p>

<p>On trying to run C:\foo\foo.exe, I got the same errors I described above.</p>

<p><strong>Installing Microsoft Visual C++ 2005 SP1 Redistributable didn't fix it</strong></p>

<ol>
<li>Downloaded vcredist_x86.exe from <a href=""http://www.microsoft.com/download/en/details.aspx?id=5638"" rel=""noreferrer"">http://www.microsoft.com/download/en/details.aspx?id=5638</a></li>
<li>Installed it. The installer created a folder called: <code>C:\windows\winsxs\x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.762_x-ww_6b128700</code>.</li>
</ol>

<p>The version of this software as found from 'Add or Remove Programs' was '8.0.56336'.</p>

<p>On trying to run C:\foo\foo.exe, I got the same errors I described above.</p>

<p><strong>Copying CRT DLLs and manifest from the same machine (where I'm running the EXE) didn't fix it.</strong></p>

<ol>
<li>I copied <code>msvcm80.dll</code>, <code>msvcp80.dll</code> and <code>msvcr80.dll</code> from
<code>C:\WINDOWS\WinSxS\x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.42_x-ww_0de06acd</code>
to <code>C:\foo</code>.</li>
<li>Next, I copied
<code>C:\WINDOWS\WinSxS\Manifests\x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.42_x-ww_0de06acd.manifest</code>
to <code>C:\foo</code> and renamed it to <code>Microsoft.VC80.CRT.manifest</code>.</li>
</ol>

<p>The fourth line of the manifest file looked like this:</p>

<pre><code>&lt;assemblyIdentity type=""win32"" name=""Microsoft.VC80.CRT"" version=""8.0.50727.42""
                  processorArchitecture=""x86""
                  publicKeyToken=""1fc8b3b9a1e18e3b""&gt;&lt;/assemblyIdentity&gt;
</code></pre>

<p>When I tried running C:\foo\foo.exe this time, it didn't work. I repeated this thing again with the DLLs in <code>C:\windows\winsxs\x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.762_x-ww_6b128700</code> and the corresponding manifest file. It didn't help as well. I got the same error.</p>

<p>In both cases, I got the following errors in Event Viewer > System.</p>

<p>Event ID: 34; Source: SideBySide</p>

<pre><code>Component identity found in manifest does not match the identity of the component requested
</code></pre>

<p>Event ID: 58; Source: SideBySide</p>

<pre><code>Syntax error in manifest or policy file ""C:\foo\Microsoft.VC80.CRT.MANIFEST"" on line 4.
</code></pre>

<p>Event ID: 59; Source: SideBySide</p>

<pre><code>Generate Activation Context failed for C:\foo\Foo.exe. Reference error message: The manifest file contains one or more syntax errors.
</code></pre>

<p><strong>Copying CRT DLLs and manifest from the Windows XP machine (where I built the EXE) didn't fix it.</strong></p>

<ol>
<li>I copied <code>msvcm80.dll</code>, <code>msvcp80.dll</code> and <code>msvcr80.dll</code> from
<code>C:\winnt\winsxs\x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.762_x-ww_6b128700</code> of Windows XP machine (where I developed and built foo.exe)
to <code>C:\foo</code> of Windows Server 2003 (where I am trying to run foo.exe).</li>
<li>Next, I copied
<code>C:\winnt\winsxs\Manifests\x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.762_x-ww_6b128700.manifest</code>
to <code>C:\foo</code> and renamed it to <code>Microsoft.VC80.CRT.manifest</code>.</li>
</ol>

<p>The fourth line of the manifest file looked like this:</p>

<pre><code>&lt;assemblyIdentity type=""win32"" name=""Microsoft.VC80.CRT"" version=""8.0.50727.762""
                  processorArchitecture=""x86""
                  publicKeyToken=""1fc8b3b9a1e18e3b""&gt;&lt;/assemblyIdentity&gt;
</code></pre>

<p>On trying to run C:\foo\foo.exe now I got the same errors mentioned in the previous section.</p>

<p><strong>Copying CRT DLLs and manifest from Visual Studio folder fixed it.</strong></p>

<ol>
<li>Copied <code>msvcm80.dll</code>, <code>msvcp80.dll</code>, <code>msvcr80.dll</code> and <code>Microsoft.VC80.CRT.manifest</code> from <code>C:\Program Files\Microsoft Visual Studio 8\VC\redist\x86\Microsoft.VC80.CRT</code> of Windows XP machine (where I developed and built foo.exe) to <code>C:\foo</code> of Windows Server 2003 machine (where I am trying to run it).</li>
</ol>

<p>The fourth line of the manifest file looked like this:</p>

<pre><code>&lt;assemblyIdentity type=""win32"" name=""Microsoft.VC80.CRT"" version=""8.0.50727.6195""
                  processorArchitecture=""x86""
                  publicKeyToken=""1fc8b3b9a1e18e3b""&gt;&lt;/assemblyIdentity&gt;
</code></pre>

<p>This time I could run C:\foo\foo.exe without any issues.</p>

<p><strong>Question</strong></p>

<p>I was expecting that installing 'Microsoft Visual C++ 2005 SP1 Redistributable' (vcredist_x86.exe) as described in the second approach would fix it. But it didn't. Copying the DLLs and manifest files from the <code>C:\Program Files\Microsoft Visual Studio 8\VC\redist\x86\Microsoft.VC80.CRT</code> folder of the development machine fixed it. Why was it so?</p>

<p><strong>Build options</strong></p>

<p>In case, it helps you to answer my question. Here is the compiler and linker options I picked up from Visual Studio project properties:</p>

<p>Configuration properties > C/C++ > Command Line:</p>

<p><code>/O2 /GL /D ""_MBCS"" /FD /EHsc /MD /Fo""Release\\"" /Fd""Release\vc80.pdb"" /W3 /nologo /c /Wp64 /Zi /TP /errorReport:prompt</code></p>

<p>Configuration properties > Linker > Command Line:</p>

<p><code>/OUT:""C:\MixedBag\Release\Foo.exe"" /NOLOGO /MANIFEST /MANIFESTFILE:""Release\Foo.exe.intermediate.manifest"" /DEBUG /PDB:""c:\MixedBag\release\Foo.pdb"" /OPT:REF /OPT:ICF /LTCG /MACHINE:X86 /ERRORREPORT:PROMPT kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib</code></p>
","<p>I'll answer my own question. Comments to the question by Hans Passant and Luke helped.</p>

<p>I downloaded <a href=""http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=26347"" rel=""noreferrer"">Microsoft Visual C++ 2005 Service Pack 1 Redistributable Package MFC Security Update</a> and installed it on the system where I was trying to run <code>C:\foo\foo.exe</code>. The EXE ran fine after this.</p>

<p>The installer placed the CRT DLLs in <code>C:\windows\winsxs\x86_Microsoft.VC80.CRT_1fc8b3b9a1e18e3b_8.0.50727.6195_x-ww_44262b86</code>. So, yes, 8.0.50727.6195 was the version of the CRT DLLs I was looking for as Hans Passant rightly said.</p>

<p>The easiest way to figure this version was by looking at the manifest file generated by Visual Studio while building my project on the development system. Mine was located at <code>C:\Foo\Release\Foo.exe.intermediate.manifest</code>. It had a tag like this:</p>

<pre><code>&lt;assemblyIdentity type='win32' name='Microsoft.VC80.CRT' version='8.0.50727.6195'
                  processorArchitecture='x86'
                  publicKeyToken='1fc8b3b9a1e18e3b' /&gt;
</code></pre>

<p>So, this is a clue that I needed 8.0.50727.6195 version of the DLLs. The rest was a matter of searching for the right vcredist_x86.exe which happened to be in the URL I have mentioned in the second paragraph. The page in that URL contains a link to <a href=""http://support.microsoft.com/kb/2538242"" rel=""noreferrer"">KB2538242</a> which shows the version numbers of the DLLs that would be installed by the installer.</p>

<p>Note: As Elie has mentioned in <a href=""https://stackoverflow.com/a/13499886/303363"">a different answer</a> to this question, since this is a 32-bit application, it is necessary to install vcredist_x86.exe (not vcredist_x64.exe) on the system where this application is supposed to be run irrespective of whether that system is a 32-bit Windows system or a 64-bit Windows system. Once again, the .manifest file provides this clue in the <code>processorArchitecture</code> attribute.</p>
","8924693"
"Why in C++ do we use DWORD rather than unsigned int?","88777","","<p>I'm not afraid to admit that I'm somewhat of a C++ newbie, so this might seem like a silly question but....</p>

<p>I see DWORD used all over the place in code examples. When I look up what a DWORD truly means, its apparently just an unsigned int (0 to 4,294,967,295). So my question then is, why do we have DWORD? What does it give us that the integral type 'unsigned int' does not? Does it have something to do with portability and machine differences?</p>
","<p><code>DWORD</code> is not a C++ type, it's defined in <code>&lt;windows.h&gt;</code>.</p>

<p>The reason is that <code>DWORD</code> has a specific range and format Windows functions rely on, so if you require that specific range use that type. (Or as they say ""When in Rome, do as the Romans do."") For you, that happens to correspond to <code>unsigned int</code>, but that might not always be the case. To be safe, use <code>DWORD</code> when a <code>DWORD</code> is expected, regardless of what it may actually be.</p>

<p>For example, if they ever changed the range or format of <code>unsigned int</code> they could use a different type to underly <code>DWORD</code> to keep the same requirements, and all code using <code>DWORD</code> would be none-the-wiser. (Likewise, they could decide <code>DWORD</code> needs to be <code>unsigned long long</code>, change it, and all code using <code>DWORD</code> would be none-the-wiser.)</p>

<hr>

<p>Also note <code>unsigned int</code> does <em>not</em> necessary have the range 0 to 4,294,967,295. See <a href=""https://stackoverflow.com/questions/271076/what-is-the-difference-between-an-int-and-a-long-in-c/271132#271132"">here</a>.</p>
","2995258"
"Is the sizeof(some pointer) always equal to four?","88768","","<p>For example:
<code>sizeof(char*)</code> returns 4.  As does <code>int*</code>, <code>long long*</code>, everything that I've tried.  Are there any exceptions to this?</p>
","<p>The guarantee you get is that <code>sizeof(char) == 1</code>.  There are no other guarantees, including no guarantee that <code>sizeof(int *) == sizeof(double *)</code>.</p>

<p>In practice, pointers will be size 2 on a 16-bit system (if you can find one), 4 on a 32-bit system, and 8 on a 64-bit system, but there's nothing to be gained in relying on a given size.</p>
","399030"
"Simple 3x3 matrix inverse code (C++)","88584","","<p>What's the easiest way to compute a 3x3 matrix inverse?</p>

<p>I'm just looking for a short code snippet that'll do the trick for non-singular matrices, possibly using Cramer's rule.  It doesn't need to be highly optimized. I'd prefer simplicity over speed. I'd rather not link in additional libraries.</p>
","<p>Why don't you try to code it yourself? Take it as a challenge. :)</p>

<p>For a 3×3 matrix<p>
<a href=""http://mathworld.wolfram.com/images/equations/MatrixInverse/NumberedEquation3.gif"" rel=""noreferrer"">alt text http://mathworld.wolfram.com/images/equations/MatrixInverse/NumberedEquation3.gif</a></p>

<p>the matrix inverse is<p>
<a href=""http://mathworld.wolfram.com/images/equations/MatrixInverse/NumberedEquation4.gif"" rel=""noreferrer"">alt text http://mathworld.wolfram.com/images/equations/MatrixInverse/NumberedEquation4.gif</a></p>

<p>I'm assuming you know what the determinant of a matrix |A| is.</p>

<blockquote>
  <p>Images (c) <a href=""http://www.wolframalpha.com"" rel=""noreferrer"">Wolfram|Alpha</a> and
  <a href=""http://mathworld.wolfram.com"" rel=""noreferrer"">mathworld.wolfram</a> (06-11-09,
  22.06)</p>
</blockquote>
","984054"
"Is there a Java equivalent or methodology for the typedef keyword in C++?","88549","","<p>Coming from a C and C++ background, I found judicious use of <strong><code>typedef</code></strong> to be incredibly helpful.  Do you know of a way to achieve similar functionality in Java, whether that be a Java mechanism, pattern, or some other effective way you have used?</p>
","<p>Java has primitive types, objects and arrays and that's it. No typedefs.</p>
","1195221"
"How to initialise memory with new operator in C++?","88527","","<p>I'm just beginning to get into C++ and I want to pick up some good habits. If I have just allocated an array of type <code>int</code> with the <code>new</code> operator, how can I initialise them all to 0 without looping through them all myself? Should I just use <code>memset</code>? Is there a &ldquo;C++&rdquo; way to do it?</p>
","<p>It's a surprisingly little-known feature of C++ (as evidenced by the fact that no-one has given this as an answer yet), but it actually has special syntax for default-initializing an array (well, technically, it's called ""value-initialize"" in the Standard):</p>

<pre><code>new int[10]();
</code></pre>

<p>Note that you <em>must</em> use the empty parentheses - you cannot, for example, use <code>(0)</code> or any other expression (which is why this is only useful for default initialization). </p>

<p>This is explicitly permitted by ISO C++03 5.3.4[expr.new]/15, which says:</p>

<blockquote>
  <p>A new-expression that creates an object of type T initializes that object as follows:</p>
  
  <p>...</p>
  
  <ul>
  <li>If the new-initializer is of the form (), the item is value-initialized (8.5);</li>
  </ul>
</blockquote>

<p>and does not restrict the types for which this is allowed, whereas the <code>(expression-list)</code> form is explicitly restricted by further rules in the same section such that it does not allow array types.</p>
","2204380"
"c++ and opencv get and set pixel color to Mat","88513","","<p>I'm trying to set a new color value to some pixel into a cv::Mat image my code is below:</p>

<pre><code>    Mat image = img;
    for(int y=0;y&lt;img.rows;y++)
    {
        for(int x=0;x&lt;img.cols;x++)
        {
        Vec3b color = image.at&lt;Vec3b&gt;(Point(x,y));
        if(color[0] &gt; 150 &amp;&amp; color[1] &gt; 150 &amp;&amp; color[2] &gt; 150)
        {
            color[0] = 0;
            color[1] = 0;
            color[2] = 0;
            cout &lt;&lt; ""Pixel &gt;200 :"" &lt;&lt; x &lt;&lt; "","" &lt;&lt; y &lt;&lt; endl;
        }
        else
        {
            color.val[0] = 255;
            color.val[1] = 255;
            color.val[2] = 255;
        }
    }
    imwrite(""../images/imgopti""+to_string(i)+"".tiff"",image);
</code></pre>

<p>It seems to get the good pixel in output (with cout) however in the output image (with imwrite) the pixel concerned aren't modified. I have already tried using color.val[0].. I still can't figure out why the pixel colors in the output image dont change.
thanks</p>
","<p>You did everything except copy the new pixel value back to the image.</p>

<p>This line takes a copy of the pixel into a local variable:</p>

<pre><code>Vec3b color = image.at&lt;Vec3b&gt;(Point(x,y));
</code></pre>

<p>So, after changing <code>color</code> as you require, just set it back like this:</p>

<pre><code>image.at&lt;Vec3b&gt;(Point(x,y)) = color;
</code></pre>

<p>So, in full, something like this:</p>

<pre><code>Mat image = img;
for(int y=0;y&lt;img.rows;y++)
{
    for(int x=0;x&lt;img.cols;x++)
    {
        // get pixel
        Vec3b color = image.at&lt;Vec3b&gt;(Point(x,y));

        // ... do something to the color ....

        // set pixel
        image.at&lt;Vec3b&gt;(Point(x,y)) = color;
    }
}
</code></pre>
","23002034"
"read word by word from file in C++","88465","","<p>this function should read a file word by word
and it does work till the last word, where the run stops </p>

<pre><code>void readFile(  )
{
    ifstream file;
    file.open (""program.txt"");
    string word;
    char x ;
    word.clear();

    while ( ! file.eof() )
    {
        x = file.get();

        while ( x != ' ' )
        {
            word = word + x;
            x = file.get();
        }

            cout&lt;&lt; word &lt;&lt;endl;
            word.clear();

    }
}
</code></pre>

<p>any one see what is the problem and how it can be solved??</p>
","<p>First of all, don't loop <code>while (!eof())</code>, it will not work as you expect it to because the <code>eofbit</code> will not be set until <em>after</em> a failed read due to end of file.</p>

<p>Secondly, the normal input operator <code>&gt;&gt;</code> separates on whitespace and so can be used to read ""words"":</p>

<pre><code>std::string word;
while (file &gt;&gt; word)
{
    ...
}
</code></pre>
","20372777"
"How to output to the console in C++/Windows","88443","","<p>When using iostream in C++ on Linux, it displays the program output in the terminal, but in Windows, it just saves the output to a stdout.txt file. How can I, in Windows, make the output appear in the console?</p>
","<p>Since you mentioned stdout.txt I google'd it to see what exactly would create a stdout.txt; normally, even with a Windows app, console output goes to the allocated console, or nowhere if one is not allocated.</p>

<p>So, assuming you are using SDL (which is the only thing that brought up stdout.txt), you should follow the advice <a href=""http://wiki.libsdl.org/FAQWindows#How_do_I_avoid_creating_stdout.txt_and_stderr.txt.3F"" rel=""noreferrer"">here</a>. Either freopen stdout and stderr with ""CON"", or do the other linker/compile workarounds there.</p>

<p>In case the link gets broken again, here is exactly what was referenced from libSDL: </p>

<blockquote>
  <p>How do I avoid creating stdout.txt and stderr.txt?</p>
  
  <p>""I believe inside the Visual C++ project that comes with SDL there is a SDL_nostdio target >  you can build which does what you want(TM).""</p>
  
  <p>""If you define ""NO_STDIO_REDIRECT"" and recompile SDL, I think it will fix the problem."" >  >  (Answer courtesy of Bill Kendrick)</p>
</blockquote>
","587849"
"Determining 32 vs 64 bit in C++","88435","","<p>I'm looking for a way to reliably determine whether C++ code is being compiled in 32 vs 64 bit. We've come up with what we think is a reasonable solution using macros, but was curious to know if people could think of cases where this might fail or if there is a better way to do this. Please note we are trying to do this in a cross-platform, multiple compiler environment.</p>

<pre><code>#if ((ULONG_MAX) == (UINT_MAX))
# define IS32BIT
#else
# define IS64BIT
#endif

#ifdef IS64BIT
DoMy64BitOperation()
#else
DoMy32BitOperation()
#endif
</code></pre>

<p>Thanks.</p>
","<p>Unfortunately there is no cross platform macro which defines 32 / 64 bit across the major compilers.  I've found the most effective way to do this is the following.  </p>

<p>First I pick my own representation.  I prefer ENVIRONMENT64 / ENVIRONMENT32.  Then I find out what all of the major compilers use for determining if it's a 64 bit environment or not and use that to set my variables.  </p>

<pre><code>// Check windows
#if _WIN32 || _WIN64
#if _WIN64
#define ENVIRONMENT64
#else
#define ENVIRONMENT32
#endif
#endif

// Check GCC
#if __GNUC__
#if __x86_64__ || __ppc64__
#define ENVIRONMENT64
#else
#define ENVIRONMENT32
#endif
#endif
</code></pre>

<p>Another easier route is to simply set these variables from the compiler command line.  </p>
","1505631"
"DLL References in Visual C++","88349","","<p>I have had C++ experience but not MSVC.</p>

<p>What I am trying to do is incorporate a .dll from an open source project into my project. The code is available and I have built it. I have the .dll as well as the .lib which as I understand it is required for C++ projects.</p>

<p>Now unfortunately there is no simple ""Add Reference"", drop my .dll into an include directory and add that to my solution. I have edited the project property pages, the C/C++ Additional Include Directories option as well as adding the .lib as an additional linker dependency. I have created an include directory for the dll and lib inside my solution tree.</p>

<p>My problem is when I try to include the header files from the documentation, VS output spits out error messages. Now I realize that I am using the dll/lib combo and that the .h files are not present in my solution so how do I add the proper includes? I am using QT toolkit also which is working but how I add the other header / dll from the open source library eludes me. </p>

<p>Can someone please point me in the right direction.</p>
","<p>You need to do a couple of things to use the library:</p>

<ol>
<li><p>Make sure that you have both the *.lib and the *.dll from the library you want to use. If you don't have the *.lib, skip #2</p></li>
<li><p>Put a reference to the *.lib in the project.  Right click the project name in the Solution Explorer and then select Configuration Properties->Linker->Input and put the name of the lib in the Additional Dependencies property.</p></li>
<li><p>You have to make sure that VS can find the lib you just added so you have to go to the Tools menu and select Options... Then under Projects and Solutions select VC++ Directories,edit Library Directory option.  From within here you can set the directory that contains your new lib by selecting the 'Library Files' in the 'Show Directories For:' drop down box.  Just add  the path to your lib file in the list of directories.  If you dont have a lib you can omit this, but while your here you will also need to set the directory which contains your header files as well under the 'Include Files'.  Do it the same way you added the lib.</p></li>
</ol>

<p>After doing this you should be good to go and can use your library.  If you dont have a lib file you can still use the dll by importing it yourself.  During your applications startup you can explicitly load the dll by calling LoadLibrary (see: <a href=""http://msdn.microsoft.com/en-us/library/ms684175(VS.85).aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/ms684175(VS.85).aspx</a> for more info)</p>

<p>Cheers!</p>

<p>EDIT</p>

<p>Remember to use #include &lt; Foo.h > as opposed to #include ""foo.h"".  The former searches the include path.  The latter uses the local project files.</p>
","810109"
"Error QApplication: no such file or directory","88290","","<p>I have installed C++SDK that have Qt but when I try compiling a code linking QApplication it gives me the error:</p>

<pre><code>Error QApplication: no such file or directory
</code></pre>

<p>How do I link these libraries? I searched into the directories and there is a file named QApplication.h; So I tried to link it with -I (linking the directory) but it was still giving me that error.</p>
","<p>To start things off, the error <code>QApplication: no such file or directory</code> means your compiler was not able to find this header. It is not related to the linking process as you mentioned in the question.</p>

<p>The <code>-I</code> flag (uppercase <strong>i</strong>) is used to specify the include (headers) directory (which is what you need to do), while the <code>-L</code> flag is used to specify the libraries directory. The <code>-l</code> flag (lowercase L) is used to link your application with a specified library.</p>

<p>But you can <strong>use Qt to your advantage</strong>: Qt has a build system named <strong>qmake</strong> which makes things easier. For instance, when I want to compile <em>main.cpp</em> I create a <strong>main.pro</strong> file. For educational purposes, let's say this source code is a simple project that uses only <code>QApplication</code> and <code>QDeclarativeView</code>. An appropriate <em>.pro</em> file would be:</p>

<pre><code>TEMPLATE += app
QT += gui declarative
SOURCES += main.cpp
</code></pre>

<p>Then, execute the <code>qmake</code> inside that directory to create the Makefile that will be used to compile your application, and finally execute <code>make</code> to get the job done.</p>

<p>On my system this <code>make</code> outputs:</p>

<pre><code>g++ -c -pipe -O2 -Wall -W -D_REENTRANT -DQT_NO_DEBUG -DQT_DECLARATIVE_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED -I/opt/qt_47x/mkspecs/linux-g++ -I. -I/opt/qt_47x/include/QtCore -I/opt/qt_47x/include/QtGui -I/opt/qt_47x/include/QtDeclarative -I/opt/qt_47x/include -I/usr/X11R6/include -I. -o main.o main.cpp
g++ -Wl,-O1 -Wl,-rpath,/opt/qt_47x/lib -o main main.o -L/opt/qt_47x/lib -L/usr/X11R6/lib -lQtDeclarative -L/opt/qt_47x/lib -lQtScript -lQtSvg -L/usr/X11R6/lib -lQtSql -lQtXmlPatterns -lQtNetwork -lQtGui -lQtCore -lpthread
</code></pre>

<p>Note: I installed Qt in another directory --> <code>/opt/qt_47x</code></p>
","9112452"
"Linker error: ""linker input file unused because linking not done"", undefined reference to a function in that file","88217","","<p>I'm having trouble with the linking of my files.</p>

<p>Basically, my program consists of:</p>

<ul>
<li>The main program, <code>gen1</code>.</li>
<li><code>gen1</code> - receives input sends to <code>str2value</code> for
processing, outputs results <code>str2value</code>, breaks input into tokens
using ""tokenizer"" determines what sort of processing to do to each
token, and passes them off to <code>str2num</code>, or <code>str2cmd</code>. It then returns an
array of the results.</li>
<li><code>str2num</code> - does some processing</li>
<li><code>str2cmd</code> - ditto</li>
<li><code>author.py</code> - a python script that generates <code>str2cmd.c</code> and <code>str2cmd.h</code> from a header <code>cmdTable.h</code>.</li>
</ul>

<p>I'm pretty sure I have my includes right, I've checked a couple of times. I've also checked that there are no conditions <code>#ifndef</code> wrong in the headers.</p>

<p>Here is my Makefile:</p>

<pre><code>#CPP = g++ -lserial
CPP = g++ -DTESTMODE
C= gcc
DEFINES = LURC
CFLAGS = -Wall -fshort-enums -D$(DEFINES)
PROJECTFILES = gen1.cpp str2value.o

STR2VALUEFILES = str2value.cpp str2cmd.o str2num.o tokenizer.o str2value.h

gen1 : $(PROJECTFILES)
        $(CPP) $(CFLAGS) -o gen1 $(PROJECTFILES)



str2value.o : $(STR2VALUEFILES)
#       echo ""str2value""
        $(CPP) $(CFLAGS) -c $(STR2VALUEFILES)

str2num.o: str2num.cpp  str2value.h str2num.hpp
         $(C) $(CFLAGS) -c $^


tokenizer.o: tokenizer.cpp tokenizer.hpp
        $(CPP) $(CFLAGS) -c $^

str2cmd.o : authorCMDs.py cmdTable.h
        python authorCMDs.py cmdTable.h str2cmd #this uses the gcc -E cmdTable.h -DLURC
        $(C) $(CFLAGS) -c str2cmd.c str2cmd.h

#TODO: add a thing that checks str2cmd.h/.c has not been modified by hand



.PHONEY: clean
clean:
        rm *.o

.PHONEY: all
all:
        clear
        make clean
        make
</code></pre>

<p>Here is the output I recieve from make all:</p>

<pre><code>make clean
make[1]: Entering directory `/home/frames/LURC/gen1/gen1Source'
rm *.o
make[1]: Leaving directory `/home/frames/LURC/gen1/gen1Source'
make
make[1]: Entering directory `/home/frames/LURC/gen1/gen1Source'
python authorCMDs.py cmdTable.h str2cmd #this uses the gcc -E cmdTable.h -DLURC
str2cmd.c and str2cmd.h, generated from cmdTable.h

gcc  -Wall -fshort-enums -DLURC -c str2cmd.c str2cmd.h
gcc  -Wall -fshort-enums -DLURC -c str2num.cpp str2value.h str2num.hpp
g++ -DTESTMODE -Wall -fshort-enums -DLURC -c tokenizer.cpp tokenizer.hpp
g++ -DTESTMODE -Wall -fshort-enums -DLURC -c str2value.cpp str2cmd.o str2num.o tokenizer.o str2value.h
g++: str2cmd.o: linker input file unused because linking not done
g++: str2num.o: linker input file unused because linking not done
g++: tokenizer.o: linker input file unused because linking not done
g++ -DTESTMODE -Wall -fshort-enums -DLURC -o gen1 gen1.cpp str2value.o
str2value.o: In function `getValue(char*)':
str2value.cpp:(.text+0xbd): undefined reference to `str2cmd(char*)'
str2value.cpp:(.text+0x102): undefined reference to `str2num(char*)'
str2value.o: In function `getAllValues(char*)':
str2value.cpp:(.text+0x164): undefined reference to `tokenizer::tokenizer(char*)'
str2value.cpp:(.text+0x177): undefined reference to `tokenizer::getNumTokens(char const*)'
str2value.cpp:(.text+0x1a9): undefined reference to `tokenizer::getNextToken(char const*)'
str2value.cpp:(.text+0x1e9): undefined reference to `tokenizer::getNumTokens(char const*)'
str2value.cpp:(.text+0x201): undefined reference to `tokenizer::~tokenizer()'
str2value.cpp:(.text+0x25b): undefined reference to `tokenizer::~tokenizer()'
collect2: ld returned 1 exit status
make[1]: *** [gen1] Error 1
make[1]: Leaving directory `/home/frames/LURC/gen1/gen1Source'
make: *** [all] Error 2
</code></pre>

<p>Any suggestions about what this is about? <code>STR2VALUESFILES</code> has all the object files I need, to define the missing functions.</p>
","<p>I think you are confused about how the compiler puts things together. When you use <code>-c</code> flag, i.e. no linking is done, the input is C++ code, and the output is object code. The <code>.o</code> files thus don't mix with <code>-c</code>, and compiler warns you about that. Symbols from object file are <em>not</em> moved to other object files like that.</p>

<p>All object files should be on the final linker invocation, which is not the case here, so linker (called via <code>g++</code> front-end) complains about missing symbols.</p>

<p>Here's a small example (calling <code>g++</code> explicitly for clarity):</p>

<pre><code>PROG ?= myprog
OBJS = worker.o main.o

all: $(PROG)

.cpp.o:
        g++ -Wall -pedantic -ggdb -O2 -c -o $@ $&lt;

$(PROG): $(OBJS)
        g++ -Wall -pedantic -ggdb -O2 -o $@ $(OBJS)
</code></pre>

<p>There's also <a href=""http://www.manpagez.com/man/1/makedepend/"" rel=""noreferrer""><code>makedepend</code></a> utility that comes with X11 - helps a lot with source code dependencies. You might also want to look at the <code>-M</code> <code>gcc</code> option for building <code>make</code> rules.</p>
","2395187"
"How to use Visual Studio C++ Compiler?","88185","","<p>I recently installed Visual Studio 2013. I can create a new project (Visual C++), but the error I have to come across is that I cannot run the app. Here is the code that I'm trying to run on Visual Studio 2013. </p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

int main() {
    cout &lt;&lt; ""Hello World"";
    return 0;
}
</code></pre>

<p>I am sure this code would run, and will output <strong>hello world</strong>, but in Visual Studio it gives me issues, saying: </p>

<blockquote>
  <p>Values cannot be null,<br>
  Parameter name: solutionDirectory.</p>
</blockquote>

<p>What am I missing here?  </p>

<p>Here is an image for this: </p>

<p><img src=""https://i.stack.imgur.com/ZWafB.png"" alt=""enter image description here""></p>
","<p>In Visual Studio, you can't just open a <code>.cpp</code> file and expect it to run. You must create a project first, or open the .cpp in some existing project.</p>

<p>In your case, there is no project, so there is no <strong>project to build</strong>. </p>

<p>Go to <code>File --&gt; New --&gt; Project --&gt; Visual C++ --&gt; Win32 Console Application</code>. You can uncheck ""create a directory for solution"". On the next page, be sure to check ""Empty project"".</p>

<p>Then, You can add <code>.cpp</code> files you created outside the Visual Studio by right clicking in the <code>Solution explorer</code> on folder icon ""Source"" and Add->Existing Item.</p>

<p>Obviously You can create new .cpp this way too (Add --> New). The .cpp file will be created in your project directory.</p>

<p>Then you can press ctrl+F5 to compile without debugging and can see output on console window.</p>
","19503994"
"Send and Receive a file in socket programming in Linux with C/C++ (GCC/G++)","88156","","<p>I would like to implement a client-server architecture running on Linux using sockets and C/C++ language that is capable of sending and receiving files. Is there any library that makes this task easy? Could anyone please provide an example?</p>
","<p>The most portable solution is just to read the file in chunks, and then write the data out to the socket, in a loop (and likewise, the other way around when receiving the file). You allocate a buffer, <a href=""http://www.opengroup.org/onlinepubs/009695399/functions/read.html"" rel=""noreferrer""><code>read</code></a> into that buffer, and <a href=""http://www.opengroup.org/onlinepubs/009695399/functions/write.html"" rel=""noreferrer""><code>write</code></a> from that buffer into your socket (you could also use <code>send</code> and <code>recv</code>, which are socket-specific ways of writing and reading data). The outline would look something like this:</p>

<pre><code>while (1) {
    // Read data into buffer.  We may not have enough to fill up buffer, so we
    // store how many bytes were actually read in bytes_read.
    int bytes_read = read(input_file, buffer, sizeof(buffer));
    if (bytes_read == 0) // We're done reading from the file
        break;

    if (bytes_read &lt; 0) {
        // handle errors
    }

    // You need a loop for the write, because not all of the data may be written
    // in one call; write will return how many bytes were written. p keeps
    // track of where in the buffer we are, while we decrement bytes_read
    // to keep track of how many bytes are left to write.
    void *p = buffer;
    while (bytes_read &gt; 0) {
        int bytes_written = write(output_socket, p, bytes_read);
        if (bytes_written &lt;= 0) {
            // handle errors
        }
        bytes_read -= bytes_written;
        p += bytes_written;
    }
}
</code></pre>

<p>Make sure to read the documentation for <code>read</code> and <code>write</code> carefully, especially when handling errors. Some of the error codes mean that you should just try again, for instance just looping again with a <code>continue</code> statement, while others mean something is broken and you need to stop.</p>

<p>For sending the file to a socket, there is a system call, <a href=""http://www.kernel.org/doc/man-pages/online/pages/man2/sendfile.2.html"" rel=""noreferrer""><code>sendfile</code></a> that does just what you want. It tells the kernel to send a file from one file descriptor to another, and then the kernel can take care of the rest. There is a caveat that the source file descriptor must support <code>mmap</code> (as in, be an actual file, not a socket), and the destination must be a socket (so you can't use it to copy files, or send data directly from one socket to another); it is designed to support the usage you describe, of sending a file to a socket. It doesn't help with receiving the file, however; you would need to do the loop yourself for that. I cannot tell you why there is a <code>sendfile</code> call but no analogous <code>recvfile</code>.</p>

<p>Beware that <code>sendfile</code> is Linux specific; it is not portable to other systems. Other systems frequently have their own version of <code>sendfile</code>, but the exact interface may vary (<a href=""http://www.freebsd.org/cgi/man.cgi?query=sendfile&amp;sektion=2"" rel=""noreferrer"">FreeBSD</a>, <a href=""http://developer.apple.com/Mac/library/documentation/Darwin/Reference/ManPages/man2/sendfile.2.html"" rel=""noreferrer"">Mac OS X</a>, <a href=""http://docs.oracle.com/cd/E23824_01/html/821-1467/sendfile-3ext.html#scrolltoc"" rel=""noreferrer"">Solaris</a>).</p>

<p>In Linux 2.6.17, the <a href=""http://www.kernel.org/doc/man-pages/online/pages/man2/splice.2.html"" rel=""noreferrer""><code>splice</code></a> system call was <a href=""http://lwn.net/Articles/178199/"" rel=""noreferrer"">introduced</a>, and as of 2.6.23 is <a href=""http://kernelnewbies.org/Linux_2_6_23#head-c8fd2455c44d9559429c0f72dbc85cd54a62470d"" rel=""noreferrer"">used internally to implement <code>sendfile</code></a>. <code>splice</code> is a more general purpose API than <code>sendfile</code>. For a good description of <code>splice</code> and <code>tee</code>, see the rather good <a href=""http://kerneltrap.org/node/6505"" rel=""noreferrer"">explanation from Linus himself</a>. He points out how using <code>splice</code> is basically just like the loop above, using <code>read</code> and <code>write</code>, except that the buffer is in the kernel, so the data doesn't have to transferred between the kernel and user space, or may not even ever pass through the CPU (known as ""zero-copy I/O"").</p>
","2014066"
"Creating my own Iterators","88075","","<p>I'm trying to learn C++ so forgive me if this question demonstrates a lack of basic knowledge, you see, the fact is, I have a lack of basic knowledge.</p>

<p>I want some help working out how to create an iterator for a class I have created.</p>

<p>I have a class 'Shape' which has a container of Points. 
I have a class 'Piece' which references a Shape and defines a position for the Shape.
Piece does not have a Shape it just references a Shape.</p>

<p>I want it to seem like Piece is a container of Points which are the same as those of the Shape it references but with the offset of the Piece's position added.</p>

<p>I want to be able to iterate through the Piece's Points just as if Piece was a container itself. I've done a little reading around and haven't found anything which has helped me. I would be very grateful for any pointers.</p>
","<p>You should use Boost.Iterators. It contains a number of templates and concepts to implement new iterators and adapters for existing iterators. I have written <a href=""http://accu.org/index.php/journals/1527"" rel=""noreferrer"">an article about this very topic</a>; it's in the December 2008 ACCU magazine. It discusses an (IMO) elegant solution for exactly your problem: exposing member collections from an object, using Boost.Iterators.</p>

<p>If you want to use the stl only, the <a href=""http://www.josuttis.com/libbook/"" rel=""noreferrer"">Josuttis book</a> has a chapter on implementing your own STL iterators.</p>
","149207"
"OpenCV with Network Cameras","88073","","<p>I'm using openCV 1.1pre1 under Windows.
I have a network camera and I need to grab frames from openCV. That camera can stream a standard mpeg4 stream over RTSP or mjpeg over http.
I've seen many threads talking about using ffmpeg with openCV but I cannot make it work.</p>

<p>How I can grab frames from an IP camera with openCV?</p>

<p>Thanks</p>

<p>Andrea</p>
","<p>rtsp protocol did not work for me.
mjpeg worked first try.  I assume it is built into my camera (Dlink DCS 900).</p>

<p>Syntax found here:
<a href=""http://answers.opencv.org/question/133/how-do-i-access-an-ip-camera/"" rel=""nofollow"">http://answers.opencv.org/question/133/how-do-i-access-an-ip-camera/</a></p>

<p>I did not need to compile OpenCV with ffmpg support.</p>
","13615449"
"Calling functions in a DLL from C++","88036","","<p>I have a solution in VS 2008 with 2 projects in it. One is a DLL written in C++ and the other is a simple C++ console application created from a blank project. I would like know how to call the functions in the DLL from the application.</p>

<p>Assume I am starting with a blank C++ project and that I want to call a function called <code>int IsolatedFunction(int someParam)</code></p>

<p>How do I call it?</p>
","<p>There are many ways to do this but I think one of the easiest options is to link the application to the DLL at link time and then use a <em>definition file</em> to define the symbols to be exported from the DLL.</p>

<p><strong>CAVEAT:</strong> The definition file approach works bests for <em>undecorated</em> symbol names. If you want to export decorated symbols then it is probably better to <em>NOT USE</em> the definition file approach.</p>

<p>Here is an simple example on how this is done.</p>

<p><strong>Step 1:</strong> Define the function in the <em>export.h</em> file.</p>

<pre><code>int WINAPI IsolatedFunction(const char *title, const char *test);
</code></pre>

<p><strong>Step 2:</strong> Define the function in the <em>export.cpp</em> file.</p>

<pre><code>#include &lt;windows.h&gt;

int WINAPI IsolatedFunction(const char *title, const char *test)
{
    MessageBox(0, title, test, MB_OK);
    return 1;
}
</code></pre>

<p><strong>Step 3:</strong> Define the function as an export in the <em>export.def</em> defintion file.</p>

<pre><code>EXPORTS    IsolatedFunction          @1
</code></pre>

<p><strong>Step 4:</strong> Create a DLL project and add the <em>export.cpp</em> and <em>export.def</em> files to this project. Building this project will create an <em>export.dll</em> and an <em>export.lib</em> file.</p>

<p>The following two steps link to the DLL at link time. If you don't want to define the entry points at link time, ignore the next two steps and use the <strong>LoadLibrary</strong> and <strong>GetProcAddress</strong> to load the function entry point at runtime.</p>

<p><strong>Step 5:</strong> Create a <em>Test</em> application project to use the dll by adding the <em>export.lib</em> file to the project. Copy the <em>export.dll</em> file to ths same location as the <em>Test</em> console executable.</p>

<p><strong>Step 6:</strong> Call the <em>IsolatedFunction</em> function from within the Test application as shown below.</p>

<pre><code>#include ""stdafx.h""

// get the function prototype of the imported function
#include ""../export/export.h""

int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR     lpCmdLine,
                     int       nCmdShow)
{
    // call the imported function found in the dll
    int result = IsolatedFunction(""hello"", ""world"");

    return 0;
}
</code></pre>
","540039"
"How to use boost bind with a member function","87989","","<p>The following code causes cl.exe to crash (MS VS2005).<br>
I am trying to use boost bind to create a function to a calls a method of myclass:   </p>

<pre><code>#include ""stdafx.h""
#include &lt;boost/function.hpp&gt;
#include &lt;boost/bind.hpp&gt;
#include &lt;functional&gt;

class myclass {
public:
    void fun1()       { printf(""fun1()\n"");      }
    void fun2(int i)  { printf(""fun2(%d)\n"", i); }

    void testit() {
        boost::function&lt;void ()&gt;    f1( boost::bind( &amp;myclass::fun1, this ) );
        boost::function&lt;void (int)&gt; f2( boost::bind( &amp;myclass::fun2, this ) ); //fails

        f1();
        f2(111);
    }
};

int main(int argc, char* argv[]) {
    myclass mc;
    mc.testit();
    return 0;
}
</code></pre>

<p>What am I doing wrong?</p>
","<p>Use the following instead:</p>

<pre><code>boost::function&lt;void (int)&gt; f2( boost::bind( &amp;myclass::fun2, this, _1 ) );
</code></pre>

<p>This forwards the first parameter passed to the function object to the function using place-holders - you have to tell <em>Boost.Bind</em> how to handle the parameters. With your expression it would try to interpret it as a member function taking no arguments.<br>
See e.g. <a href=""http://www.boost.org/doc/libs/1_42_0/libs/bind/bind.html#with_functions"" rel=""noreferrer"">here</a> or <a href=""http://www.boost.org/doc/libs/1_42_0/libs/bind/bind.html#with_member_pointers"" rel=""noreferrer"">here</a> for common usage patterns.</p>

<p>Note that VC8s cl.exe regularly crashes on <em>Boost.Bind</em> misuses - if in doubt use a test-case with gcc and you will probably get good hints like the template parameters <em>Bind</em>-internals were instantiated with if you read through the output.</p>
","2304211"
"How do you open a file in C++?","87972","","<p>I want to open a file for reading, the C++ way. I need to be able to do it for:</p>

<ul>
<li><p>text files, which would involve some sort of read line function.</p></li>
<li><p>binary files, which would provide a way to read raw data into a <code>char*</code> buffer.</p></li>
</ul>
","<p>There are three ways to do this, depending on your needs. You could use the old-school C way and call fopen/fread/fclose, or you could use the C++ fstream facilities (ifstream/ofstream), or if you're using MFC, use the CFile class, which provides functions to accomplish actual file operations.</p>

<p>All of these are suitable for both text and binary, though none have a specific readline functionality. What you'd most likely do instead in that case is use the fstream classes (fstream.h) and use the stream operators (&lt;&lt; and >>) or the read function to read/write blocks of text:</p>

<pre><code>int nsize = 10;
char *somedata;
ifstream myfile;
myfile.open(""&lt;path to file&gt;"");
myfile.read(somedata,nsize);
myfile.close();
</code></pre>

<p>Note that, if you're using Visual Studio 2005 or higher, traditional fstream may not be available (there's a new Microsoft implementation, which is slightly different, but accomplishes the same thing).</p>
","7886"
"xxxxxx.exe is not a valid Win32 application","87939","","<p>I have small C/C++ project in Visual Studio 2012 RC</p>

<p>This applications parses the argv and then calling another .exe file with <code>ShellExecute</code></p>

<p>My application works perfect on Windows7 but on Windows XP x86 trhows Is not a valid Win32 application error.</p>

<p>I have compiled it with Mutli-thread(/MT) and Win32 Platform</p>

<p>This is my #includes</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;Windows.h&gt;
#include &lt;fstream&gt;
#include &lt;cstdio&gt;
#include &lt;vector&gt;
#include &lt;windowsx.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;stdio.h&gt;
#include &lt;tchar.h&gt;
#include &lt;direct.h&gt;
</code></pre>

<p>Thanks</p>
","<p>VS 2012 applications cannot be run under Windows XP.</p>

<p>See this <a href=""http://blogs.msdn.com/b/vcblog/archive/2012/06/15/10320645.aspx"" rel=""nofollow noreferrer"">VC++ blog</a> on why and how to make it work.</p>

<p>It seems to be supported/possible from Feb 2013. See <a href=""https://stackoverflow.com/a/14754251/551045"">noelicus answer below</a> on how to.</p>
","11305659"
"What is the difference between an int and a long in C++?","87894","","<p>Correct me if I am wrong,</p>

<p>int is 4 bytes, with a range of values from -2,147,483,648 to 2,147,483,647 (2^31)<br>
long is 4 bytes, with a range of values from -2,147,483,648 to 2,147,483,647 (2^31)</p>

<p>What is the difference in C++?  Can they be used interchangeably?</p>
","<p>It is implementation dependent.  </p>

<p>For example, under Windows they are the same, but for example on Alpha systems a long was 64 bits whereas an int was 32 bits.  This <a href=""http://software.intel.com/en-us/articles/size-of-long-integer-type-on-different-architecture-and-os"" rel=""noreferrer"">article</a> covers the rules for the Intel C++ compiler on variable platforms.  To summarize:</p>

<pre><code>  OS           arch           size
Windows       IA-32        4 bytes
Windows       Intel 64     4 bytes
Windows       IA-64        4 bytes
Linux         IA-32        4 bytes
Linux         Intel 64     8 bytes
Linux         IA-64        8 bytes
Mac OS X      IA-32        4 bytes
Mac OS X      Intel 64     8 bytes  
</code></pre>
","271087"
"How do I check if a C++ string is an int?","87793","","<p>When I use <code>getline</code>, I would input a bunch of strings or numbers, but I only want the while loop to output the ""word"" if it is not a number.
So is there any way to check if ""word"" is a number or not? I know I could use <code>atoi()</code> for
C-strings but how about for strings of the string class?</p>

<pre><code>int main () {
  stringstream ss (stringstream::in | stringstream::out);
  string word;
  string str;
  getline(cin,str);
  ss&lt;&lt;str;
  while(ss&gt;&gt;word)
    {
      //if(    )
        cout&lt;&lt;word&lt;&lt;endl;
    }
}
</code></pre>
","<p>Another version...</p>

<p>Use <a href=""http://en.cppreference.com/w/cpp/string/byte/strtol"" rel=""noreferrer""><code>strtol</code></a>, wrapping it inside a simple function to hide its complexity :</p>

<pre><code>inline bool isInteger(const std::string &amp; s)
{
   if(s.empty() || ((!isdigit(s[0])) &amp;&amp; (s[0] != '-') &amp;&amp; (s[0] != '+'))) return false ;

   char * p ;
   strtol(s.c_str(), &amp;p, 10) ;

   return (*p == 0) ;
}
</code></pre>

<h3>Why <code>strtol</code> ?</h3>

<p>As far as I love C++, sometimes the C API is the best answer as far as I am concerned:</p>

<ul>
<li>using exceptions is overkill for a test that is authorized to fail</li>
<li>the temporary stream object creation by the lexical cast is overkill and over-inefficient when the C standard library has a little known dedicated function that does the job.</li>
</ul>

<h3>How does it work ?</h3>

<p><code>strtol</code> seems quite raw at first glance, so an explanation will make the code simpler to read :</p>

<p><code>strtol</code> will parse the string, stopping at the first character that cannot be considered part of an integer. If you provide <code>p</code> (as I did above), it sets <code>p</code> right at this first non-integer character.</p>

<p>My reasoning is that if <code>p</code> is not set to the end of the string (the 0 character), then there is a non-integer character in the string <code>s</code>, meaning <code>s</code> is not a correct integer. </p>

<p>The first tests are there to eliminate corner cases (leading spaces, empty string, etc.).</p>

<p>This function should be, of course, customized to your needs (are leading spaces an error? etc.).</p>

<h3>Sources :</h3>

<p>See the description of <code>strtol</code> at: <a href=""http://en.cppreference.com/w/cpp/string/byte/strtol"" rel=""noreferrer"">http://en.cppreference.com/w/cpp/string/byte/strtol</a>.</p>

<p>See, too, the description of <code>strtol</code>'s sister functions (<code>strtod</code>, <code>strtoul</code>, etc.).</p>
","2845275"
"How do I put two increment statements in a C++ 'for' loop?","87716","","<p>I would like to increment two variables in a <code>for</code>-loop condition instead of one.</p>

<p>So something like:</p>

<pre><code>for (int i = 0; i != 5; ++i and ++j) 
    do_something(i, j);
</code></pre>

<p>What is the syntax for this?</p>
","<p>A common idiom is to use the <a href=""http://en.wikipedia.org/wiki/Comma_operator"" rel=""noreferrer"">comma operator</a> which evaluates both operands, and returns the second operand. Thus:</p>

<pre><code>for(int i = 0; i != 5; ++i,++j) 
    do_something(i,j);
</code></pre>

<h2>But is it really a comma operator?</h2>

<p>Now having wrote that, a commenter suggested it was actually some special syntactic sugar in the for statement, and not a comma operator at all. I checked that in GCC as follows:</p>

<pre><code>int i=0;
int a=5;
int x=0;

for(i; i&lt;5; x=i++,a++){
    printf(""i=%d a=%d x=%d\n"",i,a,x);
}
</code></pre>

<p>I was expecting x to pick up the original value of a, so it should have displayed 5,6,7.. for x. What I got was this</p>

<pre><code>i=0 a=5 x=0
i=1 a=6 x=0
i=2 a=7 x=1
i=3 a=8 x=2
i=4 a=9 x=3
</code></pre>

<p>However, if I bracketed the expression to force the parser into really seeing a comma operator, I get this</p>

<pre><code>int main(){
    int i=0;
    int a=5;
    int x=0;

    for(i=0; i&lt;5; x=(i++,a++)){
        printf(""i=%d a=%d x=%d\n"",i,a,x);
    }
}

i=0 a=5 x=0
i=1 a=6 x=5
i=2 a=7 x=6
i=3 a=8 x=7
i=4 a=9 x=8
</code></pre>

<p>Initially I thought that this showed it wasn't behaving as a comma operator at all, but as it turns out, this is simply a precedence issue - the comma operator has the <a href=""http://www.cppreference.com/wiki/operator_precedence"" rel=""noreferrer"">lowest possible precedence</a>, so the expression x=i++,a++ is effectively parsed as (x=i++),a++</p>

<p>Thanks for all the comments, it was an interesting learning experience, and I've been using C for many years!</p>
","1232195"
"Single quotes vs. double quotes in C or C++","87704","","<p>When should I use single quotes and double quotes in C or C++ programming?</p>
","<p>In C and in C++ single quotes identify a single character, while double quotes create a string literal. 'a' is a single a character literal, while ""a"" is a string literal containing an 'a' and a null terminator (that is a 2 char array).</p>

<p>In C++ the type of a character literal is <code>char</code>, but note that in C, the type of a character literal is <code>int</code>, that is <code>sizeof 'a'</code> is 4 in an architecture where ints are 32bit (and CHAR_BIT is 8), while <code>sizeof(char)</code> is 1 everywhere.</p>
","3683613"
"How to include header files in GCC search path?","87673","","<p>I have the following code in a sample file:</p>

<pre><code>#include ""SkCanvas.h""
#include ""SkDevice.h""
#include ""SkGLCanvas.h""
#include ""SkGraphics.h""
#include ""SkImageEncoder.h""
#include ""SkPaint.h""
#include ""SkPicture.h""
#include ""SkStream.h""
#include ""SkWindow.h""
</code></pre>

<p>However, this code is located in various folders within /home/me/development/skia (which includes core/ animator/ images/ ports/ svg/ and a lot more.)</p>

<p>How can I make GCC recognize this path?</p>
","<p>Try <code>gcc -c -I/home/me/development/skia sample.c</code>.  See <a href=""http://www.network-theory.co.uk/docs/gccintro/gccintro_22.html"" rel=""noreferrer"">here</a>.</p>
","973158"
"What is the easiest way to parse an INI File in C++?","87633","","<p>I'm trying to parse an INI file using C++. Any tips on what is the best way to achieve this? Should I use the Windows API tools for INI file processing (with which I am totally unfamiliar), an open-source solution or attempt to parse it manually?</p>
","<p>You can use the Windows API functions, such as <a href=""http://msdn.microsoft.com/en-us/library/ms724353.aspx"" rel=""noreferrer"">GetPrivateProfileString()</a> and <a href=""http://msdn.microsoft.com/en-us/library/ms724345.aspx"" rel=""noreferrer"">GetPrivateProfileInt()</a>.</p>
","12677"
"C++ template constructor","87550","","<p>I wish to have a non-template class with a template constructor with no arguments.</p>

<p>As far as I understand, it's impossible to have it (because it would conflict with the default constructor - <strong>am I right?</strong>), <em>and the workaround is the following:</em></p>

<pre><code>class A{
   template &lt;typename U&gt; A(U* dummy) {
   // Do something
   }
};
</code></pre>

<p>Maybe there is a better alternative for this (or a better workaround)?</p>

<p>Thank you.</p>
","<p>There is no way to explicitly specify the template arguments when calling a constructor template, so they have to be deduced through argument deduction.  This is because if you say:</p>

<pre><code>Foo&lt;int&gt; f = Foo&lt;int&gt;();
</code></pre>

<p>The <code>&lt;int&gt;</code> is the template argument list for the type <code>Foo</code>, not for its constructor.  There's nowhere for the constructor template's argument list to go.</p>

<p>Even with your workaround you still have to pass an argument in order to call that constructor template.  It's not at all clear what you are trying to achieve.</p>
","3960925"
"Sorting std::map using value","87534","","<p>i need to sort a std::map using its value rather than its key. is there a easy way to do it.<br/></p>

<p>i got one solution in the follwing thread:<br/>
<a href=""https://stackoverflow.com/questions/3992874/stdmap-sort-by-data"">std::map sort by data?</a> <br/>
is there any better solution.<br/></p>

<pre>
map&lt;long, double&gt; testMap;
// some code to generate the values in the map.

sort(testMap.begin(), testMap.end());  // is there any function like this to sort the map?

</pre>
","<p>Even though correct answers have already been posted, I thought I'd add a demo of how you can do this cleanly:</p>

<pre><code>template&lt;typename A, typename B&gt;
std::pair&lt;B,A&gt; flip_pair(const std::pair&lt;A,B&gt; &amp;p)
{
    return std::pair&lt;B,A&gt;(p.second, p.first);
}

template&lt;typename A, typename B&gt;
std::multimap&lt;B,A&gt; flip_map(const std::map&lt;A,B&gt; &amp;src)
{
    std::multimap&lt;B,A&gt; dst;
    std::transform(src.begin(), src.end(), std::inserter(dst, dst.begin()), 
                   flip_pair&lt;A,B&gt;);
    return dst;
}

int main(void)
{
    std::map&lt;int, double&gt; src;

    ...    

    std::multimap&lt;double, int&gt; dst = flip_map(src);
    // dst is now sorted by what used to be the value in src!
}
</code></pre>

<hr>

<p><strong>Generic Associative Source (requires C++11)</strong></p>

<p>If you're using an alternate to <code>std::map</code> for the source associative container (such as <code>std::unordered_map</code>), you could code a separate overload, but in the end the action is still the same, so a generalized associative container using variadic templates can be used for <em>either</em> mapping construct:</p>

<pre><code>// flips an associative container of A,B pairs to B,A pairs
template&lt;typename A, typename B, template&lt;class,class,class...&gt; class M, class... Args&gt;
std::multimap&lt;B,A&gt; flip_map(const M&lt;A,B,Args...&gt; &amp;src)
{
    std::multimap&lt;B,A&gt; dst;
    std::transform(src.begin(), src.end(),
                   std::inserter(dst, dst.begin()),
                   flip_pair&lt;A,B&gt;);
    return dst;
}
</code></pre>

<p>This will work for both <code>std::map</code> and <code>std::unordered_map</code>  as the source of the flip.</p>
","5056797"
"Unresolved external symbol on static class members","87499","","<p>Very simply put:</p>

<p>I have a class that consists mostly of static public members, so I can group similar functions together that still have to be called from other classes/functions.</p>

<p>Anyway, I have defined two static unsigned char variables in my class public scope, when I try to modify these values in the same class' constructor, I am getting an ""unresolved external symbol"" error at compilation.</p>

<pre><code>class test {

    public:

        static unsigned char X;
        static unsigned char Y;

        ...

        test();
};

test::test() {
    X = 1;
    Y = 2;
}
</code></pre>

<p>I'm new to C++ so go easy on me. Why can't I do this?</p>
","<p>You forgot to add the definitions to match your declarations of X and Y</p>

<pre><code>unsigned char test::X;
unsigned char test::Y;
</code></pre>

<p>somewhere.  You might want to also initialize a static member</p>

<pre><code>unsigned char test::X = 4;
</code></pre>

<p>and again, you do that in the definition (usually in a CXX file) not in the declaration (which is often in a .H file)</p>
","195209"
"How to print Unicode character in C++?","87442","","<p>I am trying to print a Russian ""ф"" (<a href=""http://www.unicode.org/charts/PDF/U0400.pdf"" rel=""noreferrer"">U+0444</a> CYRILLIC SMALL LETTER EF) character, which is given a code of decimal <a href=""http://en.wikipedia.org/wiki/%D0%A4"" rel=""noreferrer"">1092</a>. Using C++, how can I print out this character? I would have thought something along the lines of the following would work, yet...</p>

<pre><code>int main (){
   wchar_t f = '1060';
   cout &lt;&lt; f &lt;&lt; endl;
}
</code></pre>
","<p>To represent the character you can use Universal Character Names (UCNs). The character 'ф' has the Unicode value U+0444 and so in C++ you could write it '\u0444' or '\U00000444'. Also if the source code encoding supports this character then you can just write it literally in your source code.</p>

<pre><code>// both of these assume that the character can be represented with
// a single char in the execution encoding
char b = '\u0444';
char a = 'ф'; // this line additionally assumes that the source character encoding supports this character
</code></pre>

<p>Printing such characters out depends on what you're printing to. If you're printing to a Unix terminal emulator, the terminal emulator is using an encoding that supports this character, and that encoding matches the compiler's execution encoding, then you can do the following:</p>

<pre><code>#include &lt;iostream&gt;

int main() {
    std::cout &lt;&lt; ""Hello, ф or \u0444!\n"";
}
</code></pre>

<p>This program <em>does not</em> require that 'ф' can be represented in a single char. On OS X and most any modern Linux install this will work just fine, because the source, execution, and console encodings will all be UTF-8 (which supports all Unicode characters).</p>

<p>Things are harder with Windows and there are different possibilities with different tradeoffs.</p>

<p>Probably the best, if you don't need portable code (you'll be using wchar_t, which should really be avoided on every other platform), is to set the mode of the output file handle to take only UTF-16 data.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;io.h&gt;
#include &lt;fcntl.h&gt;

int main() {
    _setmode(_fileno(stdout), _O_U16TEXT);
    std::wcout &lt;&lt; L""Hello, \u0444!\n"";
}
</code></pre>

<p>Portable code is more difficult.</p>
","12015918"
"private constructor","87438","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2062560/what-is-the-use-of-making-constructor-private-in-a-class"">What is the use of making constructor private in a class?</a>  </p>
</blockquote>



<p>Where do we need private constructor?  How can we instantiate a class having private constructor?  </p>
","<p>Private constructor means a user cannot directly instantiate a class. Instead, you can create objects using something like the <a href=""https://isocpp.org/wiki/faq/ctors#named-ctor-idiom"" rel=""noreferrer"">Named Constructor Idiom</a>, where you have <code>static</code> class functions that can create and return instances of a class.</p>

<p>The Named Constructor Idiom is for more intuitive usage of a class. The example provided at the C++ FAQ is for a class that can be used to represent multiple coordinate systems.</p>

<p>This is pulled directly from the link. It is a class representing points in different coordinate systems, but it can used to represent both Rectangular and Polar coordinate points, so to make it more intuitive for the user, different functions are used to represent what coordinate system the returned <code>Point</code> represents.</p>

<pre><code> #include &lt;cmath&gt;               // To get std::sin() and std::cos()

 class Point {
 public:
   static Point rectangular(float x, float y);      // Rectangular coord's
   static Point polar(float radius, float angle);   // Polar coordinates
   // These static methods are the so-called ""named constructors""
   ...
 private:
   Point(float x, float y);     // Rectangular coordinates
   float x_, y_;
 };

 inline Point::Point(float x, float y)
   : x_(x), y_(y) { }

 inline Point Point::rectangular(float x, float y)
 { return Point(x, y); }

 inline Point Point::polar(float radius, float angle)
 { return Point(radius*std::cos(angle), radius*std::sin(angle)); }
</code></pre>

<p>There have been a lot of other responses that also fit the spirit of why private constructors are ever used in C++ (Singleton pattern among them).</p>

<p>Another thing you can do with it is to <a href=""https://isocpp.org/wiki/faq/strange-inheritance#final-classes"" rel=""noreferrer"">prevent inheritance of your class</a>, since derived classes won't be able to access your class' constructor. Of course, in this situation, you still need a function that creates instances of the class.</p>
","4648621"
"How do I print the elements of a C++ vector in GDB?","87423","","<p>I want to examine the contents of a <code>std::vector</code> in GDB, how do I do it?  Let's say it's a <code>std::vector&lt;int&gt;</code> for the sake of simplicity.</p>
","<p>To view vector std::vector myVector contents, just type in GDB:</p>

<pre><code>(gdb) print myVector
</code></pre>

<p>This will produce an output similar to:</p>

<pre><code>$1 = std::vector of length 3, capacity 4 = {10, 20, 30}
</code></pre>

<p>To achieve above, you need to have gdb 7 (I tested it on gdb 7.01) and some python pretty-printer. Installation process of these is described on <a href=""http://sourceware.org/gdb/wiki/STLSupport"" rel=""noreferrer"">gdb wiki</a>.</p>

<p>What is more, after installing above, this works well with <strong>Eclipse</strong> C++ debugger GUI (and any other IDE using GDB, as I think).</p>
","2123260"
"When to use ""new"" and when not to, in C++?","87353","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/655065/when-should-i-use-the-new-keyword-in-c"">When should I use the new keyword in C++?</a>  </p>
</blockquote>



<p>When should I use the ""new"" operator in C++? I'm coming from C#/Java background and instantiating objects is confusing for me.</p>

<p>If I've created a simple class called ""Point"", when I create a point should I:</p>

<pre><code>Point p1 = Point(0,0);
</code></pre>

<p>or </p>

<pre><code>Point* p1 = new Point(0, 0);
</code></pre>

<p>Can someone clarify for me when to use the new operator and when not to?</p>

<p><strong>Duplicate of:</strong></p>

<p><a href=""https://stackoverflow.com/questions/655065/when-should-i-use-the-new-keyword-in-c"">When should I use the new keyword in C++?</a></p>

<p><strong>Related:</strong></p>

<p><a href=""https://stackoverflow.com/questions/392455/about-constructors-destructors-and-new-delete-operators-in-c-for-custom-objects"">About constructors/destructors and new/delete operators in C++ for custom objects</a></p>

<p><a href=""https://stackoverflow.com/questions/599308/proper-stack-and-heap-usage-in-c"">Proper stack and heap usage in C++?</a></p>
","<p>You should use <code>new</code> when you wish an object to remain in existence until you <code>delete</code> it. If you do not use <code>new</code> then the object will be destroyed when it goes out of scope. Some examples of this are:</p>

<pre><code>void foo()
{
  Point p = Point(0,0);
} // p is now destroyed.

for (...)
{
  Point p = Point(0,0);
} // p is destroyed after each loop
</code></pre>

<p>Some people will say that the use of <code>new</code> decides whether your object is on the heap or the stack, but that is only true of variables declared within functions. </p>

<p>In the example below the location of 'p' will be where its containing object, Foo, is allocated. I prefer to call this 'in-place' allocation.</p>

<pre><code>class Foo
{

  Point p;
}; // p will be automatically destroyed when foo is.
</code></pre>

<p>Allocating (and freeing) objects with the use of <code>new</code> is far more expensive than if they are allocated in-place so its use should be restricted to where necessary.</p>

<p>A second example of when to allocate via <code>new</code> is for arrays. You cannot* change the size of an in-place or stack array at run-time so where you need an array of undetermined size it must be allocated via new.</p>

<p>E.g.</p>

<pre><code>void foo(int size)
{
   Point* pointArray = new Point[size];
   ...
   delete [] pointArray;
}
</code></pre>

<p>(*pre-emptive nitpicking - yes, there are extensions that allow variable sized stack allocations).</p>
","679580"
"how do I print an unsigned char as hex in c++ using ostream?","87338","","<p>I want to work with unsigned 8-bit variables in C++.  Either <code>unsigned char</code> or <code>uint8_t</code> do the trick as far as the arithmetic is concerned (which is expected, since AFAIK <code>uint8_t</code> is just an alias for <code>unsigned char</code>, or so the debugger presents it.</p>

<p>The problem is that if I print out the variables using ostream in C++ it treats it as char.  If I have:</p>

<pre><code>unsigned char a = 0;
unsigned char b = 0xff;
cout &lt;&lt; ""a is "" &lt;&lt; hex &lt;&lt; a &lt;&lt;""; b is "" &lt;&lt; hex &lt;&lt; b &lt;&lt; endl;
</code></pre>

<p>then the output is:</p>

<pre><code>a is ^@; b is 377
</code></pre>

<p>instead of </p>

<pre><code>a is 0; b is ff
</code></pre>

<p>I tried using <code>uint8_t</code>, but as I mentioned before, that's typedef'ed to <code>unsigned char</code>, so it does the same.  How can I print my variables correctly?</p>

<p><strong>Edit:</strong> I do this in many places throughout my code.  Is there any way I can do this <em>without</em> casting to <code>int</code> each time I want to print?</p>
","<p>I would suggest using the following technique:</p>

<pre><code>struct HexCharStruct
{
  unsigned char c;
  HexCharStruct(unsigned char _c) : c(_c) { }
};

inline std::ostream&amp; operator&lt;&lt;(std::ostream&amp; o, const HexCharStruct&amp; hs)
{
  return (o &lt;&lt; std::hex &lt;&lt; (int)hs.c);
}

inline HexCharStruct hex(unsigned char _c)
{
  return HexCharStruct(_c);
}

int main()
{
  char a = 131;
  std::cout &lt;&lt; hex(a) &lt;&lt; std::endl;
}
</code></pre>

<p>It's short to write, has the same efficiency as the original solution and it lets you choose to use the ""original"" character output. And it's type-safe (not using ""evil"" macros :-))</p>
","673389"
"C++ STL Vectors: Get iterator from index?","87316","","<p>So, I wrote a bunch of code that accesses elements in an stl vector by index[], but now I need to copy just a chunk of the vector. It looks like <code>vector.insert(pos, first, last)</code> is the function I want... except I only have first and last as ints. Is there any nice way I can get an iterator to these values?</p>
","<p>Try this:</p>

<pre><code>vector&lt;Type&gt;::iterator nth = v.begin() + index;
</code></pre>
","671427"
"dynamic_cast and static_cast in C++","87305","","<p>I am quite confused with the <code>dynamic_cast</code> keyword in C++.</p>

<pre><code>struct A {
    virtual void f() { }
};
struct B : public A { };
struct C { };

void f () {
    A a;
    B b;

    A* ap = &amp;b;
    B* b1 = dynamic_cast&lt;B*&gt; (&amp;a);  // NULL, because 'a' is not a 'B'
    B* b2 = dynamic_cast&lt;B*&gt; (ap);  // 'b'
    C* c = dynamic_cast&lt;C*&gt; (ap);   // NULL.

    A&amp; ar = dynamic_cast&lt;A&amp;&gt; (*ap); // Ok.
    B&amp; br = dynamic_cast&lt;B&amp;&gt; (*ap); // Ok.
    C&amp; cr = dynamic_cast&lt;C&amp;&gt; (*ap); // std::bad_cast
}
</code></pre>

<p>the definition says:   </p>

<blockquote>
  <p>The <code>dynamic_cast</code> keyword casts a datum from one pointer or reference 
      type to another, performing a runtime check to ensure the validity of the cast</p>
</blockquote>

<p>Can we write an equivalent of <code>dynamic_cast</code> of C++ in C so that I could better understand things?</p>
","<p>Here's a rundown on <code>static_cast&lt;&gt;</code> and <code>dynamic_cast&lt;&gt;</code> specifically as they pertain to pointers.  This is just a 101-level rundown, it does not cover all the intricacies.</p>

<h2>static_cast&lt; Type* >(ptr)</h2>

<p>This takes the pointer in <code>ptr</code> and tries to safely cast it to a pointer of type <code>Type*</code>.  This cast is done at compile time.  It will only perform the cast if the type types are related.  If the types are not related, you will get a compiler error.  For example:</p>

<pre><code>class B {};
class D : public B {};
class X {};

int main()
{
  D* d = new D;
  B* b = static_cast&lt;B*&gt;(d); // this works
  X* x = static_cast&lt;X*&gt;(d); // ERROR - Won't compile
  return 0;
}
</code></pre>

<h2>dynamic_cast&lt; Type* >(ptr)</h2>

<p>This again tries to take the pointer in <code>ptr</code> and safely cast it to a pointer of type <code>Type*</code>.  But this cast is executed at runtime, not compile time.  Because this is a run-time cast, it is useful especially when combined with polymorphic classes.  In fact, in certian cases the classes <em>must</em> be polymorphic in order for the cast to be legal.</p>

<p>Casts can go in one of two directions:  from base to derived (B2D) or from derived to base (D2B).  It's simple enough to see how D2B casts would work at runtime.  Either <code>ptr</code> was derived from <code>Type</code> or it wasn't.  In the case of D2B dynamic_cast&lt;>s, the rules are simple.  You can try to cast anything to anything else, and if <code>ptr</code> was in fact derived from <code>Type</code>, you'll get a <code>Type*</code> pointer back from <code>dynamic_cast</code>.  Otherwise, you'll get a NULL pointer.  </p>

<p>But B2D casts are a little more complicated.  Consider the following code:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

class Base
{
public:
    virtual void DoIt() = 0;    // pure virtual
    virtual ~Base() {};
};

class Foo : public Base
{
public:
    virtual void DoIt() { cout &lt;&lt; ""Foo""; }; 
    void FooIt() { cout &lt;&lt; ""Fooing It...""; }
};

class Bar : public Base
{
public :
    virtual void DoIt() { cout &lt;&lt; ""Bar""; }
    void BarIt() { cout &lt;&lt; ""baring It...""; }
};

Base* CreateRandom()
{
    if( (rand()%2) == 0 )
        return new Foo;
    else
        return new Bar;
}


int main()
{
    for( int n = 0; n &lt; 10; ++n )
    {
        Base* base = CreateRandom();

            base-&gt;DoIt();

        Bar* bar = (Bar*)base;
        bar-&gt;BarIt();
    }
  return 0;
}
</code></pre>

<p><code>main()</code> can't tell what kind of object <code>CreateRandom()</code> will return, so the C-style cast <code>Bar* bar = (Bar*)base;</code> is decidedly not type-safe.  How could you fix this?  One way would be to add a function like bool <code>AreYouABar() const = 0;</code> to the base class and return <code>true</code> from <code>Bar</code> and <code>false</code> from <code>Foo</code>.  But there is another way: use <code>dynamic_cast&lt;&gt;</code>:</p>

<pre><code>int main()
{
    for( int n = 0; n &lt; 10; ++n )
    {
        Base* base = CreateRandom();

        base-&gt;DoIt();

        Bar* bar = dynamic_cast&lt;Bar*&gt;(base);
        Foo* foo = dynamic_cast&lt;Foo*&gt;(base);
        if( bar )
            bar-&gt;BarIt();
        if( foo )
            foo-&gt;FooIt();
    }
  return 0;

}
</code></pre>

<p>The casts execute at runtime, and work by querying the object (no need to worry about how for now), asking it if it the type we're looking for.  If it is, <code>dynamic_cast&lt;Type*&gt;</code> returns a pointer; otherwise it returns NULL.</p>

<p>In order for this base-to-derived casting to work using <code>dynamic_cast&lt;&gt;</code>, Base, Foo and Bar must be what the Standard calls <em>polymorphic types</em>.  In order to be a polymorphic type, your class must have at least one <code>virtual</code> function.  If your classes are not polymorphic types, the base-to-derived use of <code>dynamic_cast</code> will not compile.  Example:</p>

<pre><code>class Base {};
class Der : public Base {};


int main()
{
    Base* base = new Der;
    Der* der = dynamic_cast&lt;Der*&gt;(base); // ERROR - Won't compile

    return 0;
}
</code></pre>

<p>Adding a virtual function to base, such as a virtual dtor, will make both Base and Der polymorphic types:</p>

<pre><code>class Base 
{
public:
    virtual ~Base(){};
};
class Der : public Base {};


int main()
{
    Base* base = new Der;
    Der* der = dynamic_cast&lt;Der*&gt;(base); // OK

    return 0;
}
</code></pre>
","2254183"
"What are the complexity guarantees of the standard containers?","87305","","<p>Apparently ;-) the standard containers provide some form of guarantees.</p>

<p>What type of guarantees and what exactly are the differences between the different types of container?</p>

<p>Working from <a href=""http://www.sgi.com/tech/stl/"" rel=""noreferrer"">the SGI page</a> (about <a href=""http://en.wikipedia.org/wiki/Standard_Template_Library"" rel=""noreferrer"">STL</a>) I have come up with this:</p>

<pre><code>Container Types:
================
Container:
    Forward Container
        Reverse Container
            Random Access Container
    Sequence
        Front Insert Sequence
        Back  Insert Sequence
    Associative Container
        Simple   Associative Container
        Pair     Associative Container
        Sorted   Associative Container
        Multiple Associative Container

Container Types mapped to Standard Containers
=============================================

std::vector:    Sequence    Back        Sequence                    Forward/Reverse/Random Container
std::deque:     Sequence    Front/Back  Sequence                    Forward/Reverse/Random Container
std::list:      Sequence    Front/Back  Seuqence                    Forward/Reverse Container
std::set:       Sorted/Simple/Unique    Associative Container       Forward Container
std::map:       Sorted/Pair/Unique      Associative Container       Forward Container
std::multiset:  Sorted/Simple/Multiple  Associative Container       Forward Container
std::multimap:  Sorted/Pair/Multiple    Associative Container       Forward Container


Container Guarantees:
=====================

                                                                                  Simp
                                                                                  or
                          For   Rev  Rand        Front  Back  Assoc        Sort   Mult
                    Cont: Cont: Cont Cont: Sequ: Sequ:  Sequ: Cont:        Cont:  Cont:
Copy    Const:      O(n)
Fill    Const:                             O(n)
begin()             O(1)
end()               O(1)
rbegin()                        O(1)
rend()                          O(1)
front()                                    O(1)
push_front()                                     O(1)
pop_front()                                      O(1)
push_back()                                             O(1)
pop_back()                                              O(1)
Insert()                                                                          O(ln(n))
Insert: fill                               O(n)
Insert: range                              O(n)                                   O(kln(n)+n)
size()              O(n)
swap()              O(1)
erase key                                                     O(ln(n))
erase element                                                 O(1)
erase range                                                   O(ln(n)+S)
count()                                                       O(log(n)+k)
find()                                                        O(ln(n))
equal range                                                   O(ln(n))
Lower Bound/Upper Bound                                                    O(ln(n))
Equality                  O(n)
InEquality                O(n)
Element Access                       O(1)
</code></pre>
","<p>Start here: <a href=""http://www.sgi.com/tech/stl/complexity.html"" rel=""noreferrer"">STL Complexity Specifications</a>. Then read through all the container types on that site, and look at the complexity requirements stated.</p>

<p>Hope this helps!</p>
","181705"
"How to remove all the occurrences of a char in c++ string","87298","","<p>I am using following:</p>

<pre><code>replace (str1.begin(), str1.end(), 'a' , '')
</code></pre>

<p>But this is giving compilation error.</p>
","<p>Basically, <code>replace</code> replaces a character with another and <code>''</code> is not a character. What you're looking for is <code>erase</code>.</p>

<p>See <a href=""https://stackoverflow.com/questions/5891610/how-to-remove-characters-from-a-string"">this question</a> which answers the same problem. In your case:</p>

<pre><code>#include &lt;algorithm&gt;
str.erase(std::remove(str.begin(), str.end(), 'a'), str.end());
</code></pre>

<p>Or use <code>boost</code> if that's an option for you, like:</p>

<pre><code>#include &lt;boost/algorithm/string.hpp&gt;
boost::erase_all(str, ""a"");
</code></pre>

<p>All of this is well-documented on <a href=""http://www.cplusplus.com/"" rel=""noreferrer"">reference</a> <a href=""http://en.cppreference.com/w/"" rel=""noreferrer"">websites</a>. But if you didn't know of these functions, you could easily do this kind of things by hand:</p>

<pre><code>std::string output;
output.reserve(str.size()); // optional, avoids buffer reallocations in the loop
for(size_t i = 0; i &lt; str.size(); ++i)
  if(str[i] != 'a') output += str[i];
</code></pre>
","20326454"
"C++ style cast from unsigned char * to const char *","87297","","<p>I have:</p>

<pre><code>unsigned char *foo();
std::string str;
str.append(static_cast&lt;const char*&gt;(foo()));
</code></pre>

<p>The error: <code>invalid static_cast from type ‘unsigned char*’ to type ‘const char*’</code></p>

<p>What's the correct way to cast here in C++ style?</p>
","<p>reinterpret_cast</p>
","658915"
"How can I catch a ctrl-c event? (C++)","87250","","<p>How do I catch a <kbd>Ctrl</kbd>+<kbd>C</kbd> event in C++?</p>
","<p><code>signal</code> isn't the most reliable way as it differs in implementations. I would recommend using <code>sigaction</code>. Tom's code would now look like this :</p>

<pre><code>#include &lt;signal.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

void my_handler(int s){
           printf(""Caught signal %d\n"",s);
           exit(1); 

}

int main(int argc,char** argv)
{

   struct sigaction sigIntHandler;

   sigIntHandler.sa_handler = my_handler;
   sigemptyset(&amp;sigIntHandler.sa_mask);
   sigIntHandler.sa_flags = 0;

   sigaction(SIGINT, &amp;sigIntHandler, NULL);

   pause();

   return 0;    
}
</code></pre>
","1641223"
"Can I assume (bool)true == (int)1 for any C++ compiler?","87214","","<p>Can I assume <code>(bool)true == (int)1</code> for any C++ compiler ?</p>
","<p>Yes. The casts are redundant. In your expression:</p>

<pre><code>true == 1
</code></pre>

<p>Integral promotion applies and the bool value will be promoted to an <code>int</code> and this promotion must yield 1.</p>

<p>Reference:  4.7 [conv.integral] / 4: If the source type is <code>bool</code>... <code>true</code> is converted to one.</p>
","2725063"
"invalid conversion from 'const char*' to 'char*'","87202","","<p>Have a code as shown below. I have problem passing the arguments.</p>

<pre><code>stringstream data;
char *addr=NULL;
strcpy(addr,retstring().c_str());
</code></pre>

<p>retstring() is a function that returns a string.</p>

<p>//more code</p>

<pre><code>printfunc(num,addr,data.str().c_str());
</code></pre>

<p>I get the error </p>

<p>invalid conversion from 'const char*' to 'char*' .</p>

<p>initializing argument 3 of 'void Printfunc(int, char*, char*)'on argument 3 of the function </p>

<p>on the above line. The function is called as shown below</p>

<pre><code>void Printfunc(int a,char *loc, char *stream)
</code></pre>

<p>please  let me know if I need to change any initialization.</p>
","<p>Well, <code>data.str().c_str()</code> yields a <code>char const*</code> but your function <code>Printfunc()</code> wants to have <code>char*</code>s. Based on the name, it doesn't change the arguments but merely prints them and/or uses them to name a file, in which case you should probably fix your declaration to be</p>

<pre><code>void Printfunc(int a, char const* loc, char const* stream)
</code></pre>

<p>The alternative might be to turn the <code>char const*</code> into a <code>char*</code> but fixing the declaration is preferable:</p>

<pre><code>Printfunc(num, addr, const_cast&lt;char*&gt;(data.str().c_str()));
</code></pre>
","20984255"
"Is there a simple way to convert C++ enum to string?","87165","","<p>Suppose we have some named enums:</p>

<pre><code>enum MyEnum {
      FOO,
      BAR = 0x50
};
</code></pre>

<p>What I googled for is a script (any language) that scans all the headers in my project and generates a header with one function per enum.</p>

<pre><code>char* enum_to_string(MyEnum t);
</code></pre>

<p>And a implementation with something like this:</p>

<pre><code>char* enum_to_string(MyEnum t){
      switch(t){
         case FOO:
            return ""FOO"";
         case BAR:
            return ""BAR"";
         default:
            return ""INVALID ENUM"";
      }
 }
</code></pre>

<p>The gotcha is really with typedefed enums, and unnamed C style enums. Does anybody know something for this?</p>

<p>EDIT: The solution should not modify my source, except for the generated functions. The enums are in an API, so using the solutions proposed until now is just not an option.</p>
","<p>You may want to check out <a href=""http://www.gccxml.org/HTML/Index.html"" rel=""noreferrer"">GCCXML</a>.</p>

<p>Running GCCXML on your sample code produces:</p>

<pre><code>&lt;GCC_XML&gt;
  &lt;Namespace id=""_1"" name=""::"" members=""_3 "" mangled=""_Z2::""/&gt;
  &lt;Namespace id=""_2"" name=""std"" context=""_1"" members="""" mangled=""_Z3std""/&gt;
  &lt;Enumeration id=""_3"" name=""MyEnum"" context=""_1"" location=""f0:1"" file=""f0"" line=""1""&gt;
    &lt;EnumValue name=""FOO"" init=""0""/&gt;
    &lt;EnumValue name=""BAR"" init=""80""/&gt;
  &lt;/Enumeration&gt;
  &lt;File id=""f0"" name=""my_enum.h""/&gt;
&lt;/GCC_XML&gt;
</code></pre>

<p>You could use any language you prefer to pull out the Enumeration and EnumValue tags and generate your desired code.</p>
","201795"
"Returning a const reference to an object instead of a copy","87165","","<p>Whilst refactoring some code I came across some getter methods that returns a std::string.  Something like this for example:</p>

<pre><code>class foo
{
private:
    std::string name_;
public:
    std::string name()
    {
        return name_;
    }
};
</code></pre>

<p>Surely the getter would be better returning a <code>const std::string&amp;</code>?  The current method is returning a copy which isn't as efficient.  Would returning a const reference instead cause any problems?</p>
","<p>The only way this can cause a problem is if the caller stores the reference, rather than copy the string, and tries to use it after the object is destroyed.  Like this:</p>

<pre><code>foo *pFoo = new foo;
const std::string &amp;myName = pFoo-&gt;getName();
delete pFoo;
cout &lt;&lt; myName;  // error! dangling reference
</code></pre>

<p>However, since your existing function returns a copy, then you would not break any of the existing code.</p>
","134777"
"How do I create a GUI for a windows application using C++?","87159","","<p>I am deciding on how to develop a GUI for a small c++/win32 api project (working Visual Studio C++ 2008). The project will only need a few components to start off the main process so it will be very light weight (just 1 button and a text box pretty much...). My question is this:</p>

<p>I don't have experience developing GUIs on windows but I can learn easily. So, what should I use? A Visual editor (drag and drop code generationg: my preference for desktop GUI designing by far (java/swing)). Or should I use a speicific library? Either way, WHICH library or visual editor should I use? I heard someone mention writing the GUI in C#, then calling the C++ code... the thing is, that this is such a simple GUI I would find it easier to just keep it all in C++, but I'm open to whatever the best suggestion is.</p>
","<p>If you're doing a very simple GUI and you're already using Visual Studio then it may make sense to just go with MFC.  You can just use the Visual Studio MFC wizard to create a dialog based application, drop two controls on it and away you go.</p>

<p>MFC is dated and has its fair share of annoyances, but it will certainly do the job for you if you're just talking about a button and a text box.</p>

<p>I don't have any experience with Qt, so I can't compare the two.</p>
","488880"
"Is there a C++ gdb GUI for Linux?","86991","","<p>Briefly: Does anyone know of a GUI for gdb that brings it on par or close to the feature set you get in the more recent version of Visual C++?</p>

<p>In detail:  As someone who has spent a lot of time programming in Windows, one of the larger stumbling blocks I've found whenever I have to code C++ in Linux is that debugging anything using commandline gdb takes me several times longer than it does in Visual Studio, and it does not seem to be getting better with practice.  Some things are just easier or faster to express graphically.</p>

<p>Specifically, I'm looking for a GUI that:</p>

<ul>
<li>Handles all the basics like stepping over &amp; into code, watch variables and breakpoints</li>
<li>Understands and can display the contents of complex &amp; nested C++ data types</li>
<li>Doesn't get confused by and preferably can intelligently step through templated code and data structures while displaying relevant information such as the parameter types</li>
<li>Can handle threaded applications and switch between different threads to step through or view the state of</li>
<li>Can handle attaching to an already-started process or reading a core dump, in addition to starting the program up in gdb</li>
</ul>

<p>If such a program does not exist, then I'd like to hear about experiences people have had with programs that meet at least some of the bullet points.
Does anyone have any recommendations?</p>

<p><strong>Edit:</strong><br>
Listing out the possibilities is great, and I'll take what I can get, but it would be even more helpful if you could include in your responses:<br>
(a) Whether or not you've actually used this GUI and if so, what positive/negative feedback you have about it.<br>
(b) If you know, which of the above-mentioned features are/aren't supported</p>

<p>Lists are easy to come by, sites like this are great because you can get an idea of people's personal experiences with applications.</p>
","<p>You won't find <em>anything</em> overlaying GDB which can compete with the raw power of the Visual Studio debugger. It's just too powerful, and it's just too well integrated inside the IDE. </p>

<p>For a Linux alternative, try DDD if free software is your thing.</p>
","79050"
"How do I terminate a thread in C++11?","86963","","<p>I don't need to terminate the thread correctly, or make it respond to a ""terminate"" command. I am interested in terminating the thread forcefully using pure C++11.</p>
","<ol>
<li><p>You could call <code>std::terminate()</code> from any thread and the thread you're referring to will forcefully end.</p></li>
<li><p>You could arrange for <code>~thread()</code> to be executed on the object of the target thread, without a intervening <code>join()</code> nor <code>detach()</code> on that object.  This will have the same effect as option 1.</p></li>
<li><p>You could design an exception which has a destructor which throws an exception.  And then arrange for the target thread to throw this exception when it is to be forcefully terminated.  The tricky part on this one is getting the target thread to throw this exception.</p></li>
</ol>

<p>Options 1 and 2 don't leak intra-process resources, but they terminate <em>every</em> thread.</p>

<p>Option 3 will probably leak resources, but is partially cooperative in that the target thread has to agree to throw the exception.</p>

<p>There is no portable way in C++11 (that I'm aware of) to non-cooperatively kill a single thread in a multi-thread program (i.e. without killing all threads).  There was no motivation to design such a feature.</p>

<p>A <code>std::thread</code> may have this member function:</p>

<pre><code>native_handle_type native_handle();
</code></pre>

<p>You might be able to use this to call an OS-dependent function to do what you want.  For example on Apple's OS's, this function exists and <code>native_handle_type</code> is a <code>pthread_t</code>.  If you are successful, you are likely to leak resources.</p>
","12207835"
"C++ array initialization","86912","","<p>is this form  of intializing an array to all 0s </p>

<p><code>char myarray[ARRAY_SIZE] = {0}</code>   supported by all compilers? , </p>

<p>if so, is there similar syntax to other types? for example </p>

<pre><code>bool myBoolArray[ARRAY_SIZE] = {false} 
</code></pre>
","<p>Yes, this form of initialization is supported by all C++ compilers. It is a part of C++ language. In fact, it is an idiom that came to C++ from C language. In C language <code>= { 0 }</code> is an idiomatic <em>universal zero-initializer</em>. This is also <em>almost</em> the case in C++.</p>

<p>Since this initalizer is universal, for <code>bool</code> array you don't really need a different ""syntax"". <code>0</code> works as an initializer for <code>bool</code> type as well, so</p>

<pre><code>bool myBoolArray[ARRAY_SIZE] = { 0 };
</code></pre>

<p>is guaranteed to initialize the entire array with <code>false</code>. As well as</p>

<pre><code>char* myPtrArray[ARRAY_SIZE] = { 0 };
</code></pre>

<p>in guaranteed to initialize the whole array with null-pointers of type <code>char *</code>. </p>

<p>If you believe it improves readability, you can certainly use</p>

<pre><code>bool myBoolArray[ARRAY_SIZE] = { false };
char* myPtrArray[ARRAY_SIZE] = { nullptr };
</code></pre>

<p>but the point is that <code>= { 0 }</code> variant gives you <em>exactly</em> the same result.</p>

<p>However, in C++ <code>= { 0 }</code> might not work for all types, like enum types, for example, which cannot be initialized with integral <code>0</code>. But C++ supports the shorter form</p>

<pre><code>T myArray[ARRAY_SIZE] = {};
</code></pre>

<p>i.e. just an empty pair of <code>{}</code>. This will default-initialize an array of any type (assuming the elements allow default initialization), which means that for basic (scalar) types the entire array will be properly zero-initialized. </p>
","1920481"
"Calling a java method from c++ in Android","86899","","<p>I'm trying to get a simple Java method call from C++ while Java calls native method. Here's the Java code:</p>

<pre><code>public class MainActivity extends Activity {
    private static String LIB_NAME = ""name"";

    static {
        System.loadLibrary(LIB_NAME);
    }

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        TextView tv = (TextView) findViewById(R.id.textview);
        tv.setText(this.getJniString());
    }

    public void messageMe(String text) {
        System.out.println(text);
    }

    public native String getJniString();
}
</code></pre>

<p>I'm trying to call <code>messageMe</code> method from native code in the process of <code>getJniString*</code> method call from Java to native.</p>

<p>native.cpp:</p>

<pre><code>#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;jni.h&gt;

jstring Java_the_package_MainActivity_getJniString( JNIEnv* env, jobject obj, jint depth ){

//    JavaVM *vm;
//    JNIEnv *env;
//    JavaVMInitArgs vm_args;
//    vm_args.version = JNI_VERSION_1_2;
//    vm_args.nOptions = 0;
//    vm_args.ignoreUnrecognized = 1;
//
//    // Construct a VM
//    jint res = JNI_CreateJavaVM(&amp;vm, (void **)&amp;env, &amp;vm_args);

    // Construct a String
    jstring jstr = env-&gt;NewStringUTF(""This string comes from JNI"");
    // First get the class that contains the method you need to call
    jclass clazz = env-&gt;FindClass(""the/package/MainActivity"");
    // Get the method that you want to call
    jmethodID messageMe = env-&gt;GetMethodID(clazz, ""messageMe"", ""(Ljava/lang/String;)V"");
    // Call the method on the object
    jobject result = env-&gt;CallObjectMethod(jstr, messageMe);
    // Get a C-style string
    const char* str = env-&gt;GetStringUTFChars((jstring) result, NULL);
    printf(""%s\n"", str);
        // Clean up
    env-&gt;ReleaseStringUTFChars(jstr, str);

//    // Shutdown the VM.
//    vm-&gt;DestroyJavaVM();

    return env-&gt;NewStringUTF(""Hello from JNI!"");
}
</code></pre>

<p>After clean compilation app stops with next message:</p>

<pre><code>ERROR/AndroidRuntime(742): FATAL EXCEPTION: main
        java.lang.NoSuchMethodError: messageMe
        at *.android.t3d.MainActivity.getJniString(Native Method)
        at *.android.t3d.MainActivity.onCreate(MainActivity.java:22)
</code></pre>

<p>Apparently it means that method name is wrong, but it looks OK to me. </p>
","<p>If it's an object method, you need to pass the object to <code>CallObjectMethod</code>:</p>

<pre><code>jobject result = env-&gt;CallObjectMethod(obj, messageMe, jstr);
</code></pre>

<p>What you were doing was the equivalent of <code>jstr.messageMe()</code>.</p>

<p>Since your is a void method, you should call:</p>

<p><code>env-&gt;CallVoidMethod(obj, messageMe, jstr);</code></p>

<p>If you want to return a result, you need to change your JNI signature (the <code>()V</code> means a method of <code>void</code> return type) and also the return type in your Java code.</p>
","5198130"
"How do I find a particular value in an array and return its index?","86795","","<p>Pseudo Code:</p>

<pre><code>int arr[ 5 ] = { 4, 1, 3, 2, 6 }, x;

x = find(3).arr ; 
</code></pre>

<p>x would then return 2. </p>
","<p>The syntax you have there for your function doesn't make sense (why would the return value have a member called <code>arr</code>?).</p>

<p>To find the index, use <code>std::distance</code> and <code>std::find</code> from the <code>&lt;algorithm&gt;</code> header.</p>

<pre><code>int x = std::distance(arr, std::find(arr, arr + 5, 3));
</code></pre>

<p>Or you can make it into a more generic function:</p>

<pre><code>template &lt;typename Iter&gt;
size_t index_of(Iter first, Iter last, typename const std::iterator_traits&lt;Iter&gt;::value_type&amp; x)
{
    size_t i = 0;
    while (first != last &amp;&amp; *first != x)
      ++first, ++i;
    return i;
}
</code></pre>

<p>Here, I'm returning the length of the sequence if the value is not found (which is consistent with the way the STL algorithms return the last iterator). Depending on your taste, you may wish to use some other form of failure reporting.</p>

<p>In your case, you would use it like so:</p>

<pre><code>size_t x = index_of(arr, arr + 5, 3);
</code></pre>
","3909788"
"C++: Rounding up to the nearest multiple of a number","86775","","<p>OK - I'm almost embarrassed posting this here (and I will delete if anyone votes to close) as it seems like a basic question.</p>

<p>Is this the correct way to round up to a multiple of a number in C++? </p>

<p>I know there are other questions related to this but I am specficially interested to know what is the best way to do this in C++:</p>

<pre><code>int roundUp(int numToRound, int multiple)
{
 if(multiple == 0)
 {
  return numToRound;
 }

 int roundDown = ( (int) (numToRound) / multiple) * multiple;
 int roundUp = roundDown + multiple; 
 int roundCalc = roundUp;
 return (roundCalc);
}
</code></pre>

<p>Update:
Sorry I probably didn't make intention clear.  Here are some examples:</p>

<pre><code>roundUp(7, 100)
//return 100

roundUp(117, 100)
//return 200

roundUp(477, 100)
//return 500

roundUp(1077, 100)
//return 1100

roundUp(52, 20)
//return 60

roundUp(74, 30)
//return 90
</code></pre>

<p>EDIT:  Thanks for all the replies.  Here is what I went for:</p>

<pre><code>int roundUp(int numToRound, int multiple)  
{  
 if(multiple == 0)  
 {  
  return numToRound;  
 }  

 int remainder = numToRound % multiple; 
 if (remainder == 0)
  {
    return numToRound; 
  }

 return numToRound + multiple - remainder; 
}  
</code></pre>
","<p>This works for positive numbers, not sure about negative. It only uses integer math.</p>

<pre><code>int roundUp(int numToRound, int multiple)
{
    if (multiple == 0)
        return numToRound;

    int remainder = numToRound % multiple;
    if (remainder == 0)
        return numToRound;

    return numToRound + multiple - remainder;
}
</code></pre>

<p>Edit: Here's a version that works with negative numbers, if by ""up"" you mean a result that's always >= the input.</p>

<pre><code>int roundUp(int numToRound, int multiple)
{
    if (multiple == 0)
        return numToRound;

    int remainder = abs(numToRound) % multiple;
    if (remainder == 0)
        return numToRound;

    if (numToRound &lt; 0)
        return -(abs(numToRound) - remainder);
    else
        return numToRound + multiple - remainder;
}
</code></pre>
","3407254"
"How to get source code of a Windows executable?","86756","","<p>I've got some old Windows executable files. How can I edit them with Visual Studio 2010? What are the ways to see an exe's source code?</p>
","<p>You can't get the C++ source from an exe, and you can only get some version of the C# source via reflection.  Neither will be of much use to you, judging from the way you asked the question. </p>
","2659529"
"How do I Search/Find and Replace in a standard string?","86746","","<p>Is there a way to replace all occurrences of a substring with another string in <code>std::string</code>?</p>

<p>For instance:</p>

<pre><code>void SomeFunction(std::string&amp; str)
{
   str = str.replace(""hello"", ""world""); //&lt; I'm looking for something nice like this
}
</code></pre>
","<p>Why not implement your own replace?</p>

<pre><code>void myReplace(std::string&amp; str,
               const std::string&amp; oldStr,
               const std::string&amp; newStr)
{
  std::string::size_type pos = 0u;
  while((pos = str.find(oldStr, pos)) != std::string::npos){
     str.replace(pos, oldStr.length(), newStr);
     pos += newStr.length();
  }
}
</code></pre>
","1494435"
"C++, how to declare a struct in a header file","86724","","<p>I've been trying to include a structure called ""student"" in a <code>student.h</code> file, but I'm not quite sure how to do it.</p>

<p>My <code>student.h</code> file code consists of entirely:</p>

<pre><code>#include&lt;string&gt;
using namespace std;

struct Student;
</code></pre>

<p>while the <code>student.cpp</code> file consists of entirely:</p>

<pre><code>#include&lt;string&gt;
using namespace std;

struct Student {
    string lastName, firstName;
    //long list of other strings... just strings though
};
</code></pre>

<p>Unfortunately, files that use <code>#include ""student.h""</code> come up with numerous errors like </p>

<pre><code>error C2027: use of undefined type 'Student'

error C2079: 'newStudent' uses undefined struct 'Student'  (where newStudent is a function with a `Student` parameter)

error C2228: left of '.lastName' must have class/struct/union 
</code></pre>

<p>It appears the compiler (VC++) does not recognize struct Student from ""student.h""?</p>

<p>How can I declare struct Student in ""student.h"" so that I can just #include ""student.h"" and start using the struct?</p>
","<p>You should not place an <code>using</code> directive in an header file, it can give you problems in future.</p>

<p>Also you need an <a href=""http://en.wikipedia.org/wiki/Include_guard"" rel=""noreferrer"">include guard</a> in your header.</p>

<p>EDIT: of course, after having fixed the include guard issue, you also need a complete declaration of student in the header file. As pointed out by others the forward declaration is not sufficient in your case.</p>
","2733015"
"How do I call the base class constructor? ","86687","","<p>latley I spent much programming in Java. There you call the class you Inherited from with <code>super();</code> (you all probably know that)</p>

<p>Now I have a class in C++ which has a default constructor which takes some arguments. Example:</p>

<pre><code>class BaseClass {
public:
    BaseClass(char *name); .... 
</code></pre>

<p>If I inherit the class it gives me the warning, that there is no appropriate default constructor available. So is there something like <code>super()</code> in C++, or do I have to define a function where I initialize all variables?</p>
","<p>You do this in the initializer-list of the constructor of the subclass.</p>

<pre><code>class Foo : public BaseClass {
public:
    Foo() : BaseClass(""asdf"") {}
};
</code></pre>

<p>Base-class constructors that take arguments have to be called there before any members are initialized.</p>
","6923755"
"NULL vs nullptr (Why was it replaced?)","86623","","<p>I know that in C++ <code>0x</code> or <code>NULL</code> was replaced by <code>nullptr</code> in pointer-based applications.  I'm just curious of the exact reason why they made this replacement?</p>

<p>In what scenario is using <code>nullptr</code> over <code>NULL</code> beneficial when dealing with pointers?</p>
","<p><code>nullptr</code> is always a pointer type.  <code>0</code> (aka. C's NULL bridged over into C++) could cause ambiguity in overloaded function resolution, among other things:</p>

<pre><code>f(int);
f(foo *);
</code></pre>
","20509811"
"minimum double value in C/C++","86575","","<p>Is there a standard and/or portable way to represent the smallest negative value (e.g. to use negative infinity) in a C(++) program?</p>

<p>DBL_MIN in float.h is the smallest <em>positive</em> number.</p>
","<p><code>-DBL_MAX</code> <a href=""http://www.csse.uwa.edu.au/programming/ansic-library.html#float"" rel=""noreferrer"">in ANSI C</a>, which is defined in float.h.</p>
","1153585"
"std::vector versus std::array in C++","86572","","<p>What are the difference between a <code>std::vector</code> and an <code>std::array</code> in C++? When should one be preferred over another? What are the pros and cons of each? All my textbook does is list how they are the same.</p>
","<p><code>std::vector</code> is a template class that encapsulate a dynamic array<sup>1</sup>, stored in the heap, that grows and shrinks automatically if elements are added or removed. It provides all the hooks (<code>begin()</code>, <code>end()</code>, iterators, etc) that make it work fine with the rest of the STL. It also has several useful methods that let you perform operations that on a normal array would be cumbersome, like e.g. inserting elements in the middle of a vector (it handles all the work of moving the following elements behind the scenes).</p>

<p>Since it stores the elements in memory allocated on the heap, it has some overhead in respect to static arrays.</p>

<p><code>std::array</code> is a template class that encapsulate a statically-sized array, stored inside the object itself, which means that, if you instantiate the class on the stack, the array itself will be on the stack. Its size has to be known at compile time (it's passed as a template parameter), and it cannot grow or shrink.</p>

<p>It's more limited than <code>std::vector</code>, but it's often more efficient, especially for small sizes, because in practice it's mostly a lightweight wrapper around a C-style array. However, it's more secure, since the implicit conversion to pointer is disabled, and it provides much of the STL-related functionality of <code>std::vector</code> and of the other containers, so you can use it easily with STL algorithms &amp; co. Anyhow, for the very limitation of fixed size it's much less flexible than <code>std::vector</code>.</p>

<p>For an introduction to <code>std::array</code>, have a look at <a href=""http://www.devx.com/cplus/Article/42114/0/page/"" rel=""noreferrer"">this article</a>; for a quick introduction to <code>std::vector</code> and to the the operations that are possible on it, you may want to look at its <a href=""http://en.cppreference.com/w/cpp/container/vector"" rel=""noreferrer"">documentation</a>.</p>

<hr />

<ol>
<li><s>Actually, I think that in the standard they are described in terms of maximum complexity of the different operations (e.g. random access in constant time, iteration over all the elements in linear time, add and removal of elements at the end in constant amortized time, etc), but AFAIK there's no other method of fulfilling such requirements other than using a dynamic array.</s> As stated by @Lucretiel, the standard actually requires that the elements are stored contiguously, so <em>it is</em> a dynamic array, stored where the associated allocator puts it.</li>
</ol>
","4424658"
"How to find substring from string?","86504","","<p>How do I find a substring from the string path ""/user/desktop/abc/post/"" using C/C++? I want to check if folder ""abc"" is present or not in that path.</p>

<p>Path is character pointer <code>char *ptr = ""/user/desktop/abc/post/"";</code></p>
","<p>In C, use the <code><a href=""http://linux.die.net/man/3/strstr"">strstr()</a></code> standard library function:</p>

<pre><code>const char *str = ""/user/desktop/abc/post/"";
const int exists = strstr(str, ""/abc/"") != NULL;
</code></pre>

<p>Take care to not accidentally find a too-short substring (this is what the starting and ending slashes are for).</p>
","13195376"
"What causes signal 'SIGILL'?","86504","","<p>I'm porting some C++ code to Android using NDK and GCC. The code basically runs. At one point, when debugging in Eclipse, the call</p>

<p><code>Dabbler::Android::Factory* pFactory = new Dabbler::Android::Factory;</code></p>

<p>causes this error:</p>

<p><code>Thread [1] (Suspended: Signal 'SIGILL' received. Description: Illegal instruction.)<br>
    1 &lt;symbol is not available&gt; 0x812feb44</code></p>

<p>What does that mean? Has the compiler generated illegal code for some reason? I have a breakpoint in the constructor (which does nothing), and it's not hit. I have already done a full rebuild.</p>

<p>What could I be doing wrong to cause this problem?</p>
","<p>It works now. For anyone else struggling with Android/NDK/GCC/Eclipse, here's how I solved it:</p>

<ol>
<li>Bury a dead cat at midnight when full moon</li>
<li>Restart the Android device emulator</li>
</ol>

<p>Haven't verified if both steps are really necessary, and if not, which one is redundant.</p>
","7902285"
"Autocompletion in Vim","86502","","<p>In a nutshell, I'm searching for a <strong>working</strong> autocompletion feature for the Vim editor. I've <a href=""https://stackoverflow.com/questions/24109/c-ide-for-linux/24119#24119"">argued before</a> that Vim completely replaces an IDE under Linux and while that's certainly true, it lacks one important feature: autocompletion.</p>

<p>I know about <kbd>Ctrl</kbd>+<kbd>N</kbd>, <a href=""http://ctags.sourceforge.net/"" rel=""noreferrer"">Exuberant Ctags integration</a>, <a href=""http://vim-taglist.sourceforge.net/"" rel=""noreferrer"">Taglist</a>, <a href=""http://www.vim.org/scripts/script.php?script_id=527"" rel=""noreferrer"">cppcomplete</a> and <a href=""http://www.vim.org/scripts/script.php?script_id=1520"" rel=""noreferrer"">OmniCppComplete</a>. Alas, none of these fits my description of “working autocompletion:”</p>

<ul>
<li><strong><kbd>Ctrl</kbd>+<kbd>N</kbd></strong> works nicely (only) if you've forgotton how to spell <code>class</code>, or <code>while</code>. Oh well.</li>
<li><strong>Ctags</strong> gives you the rudiments but has a lot of drawbacks.</li>
<li><strong>Taglist</strong> is just a Ctags wrapper and as such, inherits most of its drawbacks (although it works well for <em>listing</em> declarations).</li>
<li><strong>cppcomplete</strong> simply doesn't work as promised, and I can't figure out what I did wrong, or if it's “working” correctly and the limitations are by design.</li>
<li><strong>OmniCppComplete</strong> seems to have the same problems as cppcomplete, i.e. auto-completion doesn't work properly. Additionally, the <code>tags</code> file once again needs to be updated manually.</li>
</ul>

<p>I'm aware of the fact that not even modern, full-blown IDEs offer good C++ code completion. That's why I've accepted Vim's lack in this area until now. But I think a fundamental level of code completion isn't too much to ask, and is in fact required for productive usage. So I'm searching for something that can accomplish at least the following things.</p>

<ul>
<li><p><strong>Syntax awareness</strong>. cppcomplete promises (but doesn't deliver for me), correct, scope-aware auto-completion of the following:</p>

<pre><code>variableName.abc
variableName-&gt;abc
typeName::abc
</code></pre>

<p>And really, anything else is completely useless.</p></li>
<li><p><strong>Configurability</strong>. I need to specify (easily) where the source files are, and hence where the script gets its auto-completion information from. In fact, I've got a Makefile in my directory which specifies the required include paths. Eclipse can interpret the information found therein, why not a Vim script as well?</p></li>
<li><p><strong>Up-to-dateness</strong>. As soon as I change something in my file, I want the auto-completion to reflect this. I do <em>not</em> want to manually trigger <code>ctags</code> (or something comparable). Also, changes should be <em>incremental</em>, i.e. when I've changed just one file it's completely <em>unacceptable</em> for <code>ctags</code> to re-parse the whole directory tree (which may be huge).</p></li>
</ul>

<p>Did I forget anything? Feel free to update.</p>

<p>I'm comfortable with quite a lot of configuration and/or tinkering but I don't want to program a solution from scratch, and I'm not good at debugging Vim scripts.</p>

<p>A final note, I'd really like something similar for Java and C# but I guess that's too much to hope for: <code>ctags</code> only parses code files and both Java and C# have huge, precompiled frameworks that would need to be indexed. Unfortunately, <a href=""http://greengoo.de/243/developing-dotnet-without-an-ide"" rel=""noreferrer"">developing .NET without an IDE</a> is even more of a PITA than C++.</p>
","<p>Try <a href=""http://valloric.github.com/YouCompleteMe/"">YouCompleteMe</a>. It uses Clang through the libclang interface, offering semantic C/C++/Objective-C completion. It's much like clang_complete, but substantially faster and with fuzzy-matching.</p>

<p>In addition to the above, YCM also provides semantic completion for C#, Python, Go, TypeScript etc. It also provides non-semantic, identifier-based completion for languages for which it doesn't have semantic support.</p>
","14764809"
"How to use bitmask?","86481","","<p>How do i use it in C++ ?
when is it useful to use ?<br>
Please give me an example of a problem where bitmask is used , how it actually works .
Thanks!</p>
","<p>Bit masking is ""useful"" to use when you want to store (and subsequently extract) different data within a single data value.</p>

<p>An example application I've used before is imagine you were storing colour RGB values in a 16 bit value. So something that looks like this:</p>

<pre><code>RRRR RGGG GGGB BBBB
</code></pre>

<p>You could then use bit masking to retrieve the colour components as follows:</p>

<pre><code>  const unsigned short redMask   = 0xF800;
  const unsigned short greenMask = 0x07E0;
  const unsigned short blueMask  = 0x001F;

  unsigned short lightGray = 0x7BEF;

  unsigned short redComponent   = (lightGray &amp; redMask) &gt;&gt; 11;
  unsigned short greenComponent = (lightGray &amp; greenMask) &gt;&gt; 5;
  unsigned short blueComponent =  (lightGray &amp; blueMask);
</code></pre>
","18591990"
"Writing BMP image in pure c/c++ without other libraries","86448","","<p>In my algorithm i need create information output. I must to write boolean matrix in bmp file.
It must be monocromic image, where pixel is white if matrix on such element is true.
Main problem is bmp header and how to write this.</p>
","<p>Without the use of any other library you can look at the <a href=""https://web.archive.org/web/20080912171714/http://www.fortunecity.com/skyscraper/windows/364/bmpffrmt.html"" rel=""nofollow noreferrer"">BMP file format</a>.  I've implemented it in the past and it can be done without too much work.</p>

<blockquote>
  <p>Bitmap-File Structures</p>
  
  <p>Each bitmap file contains a
  bitmap-file header, a
  bitmap-information header, a color
  table, and an array of bytes that
  defines the bitmap bits. The file has
  the following form:</p>
  
  <p>BITMAPFILEHEADER bmfh;<br>
  BITMAPINFOHEADER bmih;<br>
  RGBQUAD aColors[];<br>
  BYTE aBitmapBits[];    </p>
</blockquote>

<p>... see the file format for more details</p>
","2654491"
"When should you use constexpr capability in C++11?","86439","","<p>It seems to me that having a ""function that always returns 5"" is breaking or diluting the meaning of ""calling a function"".  There must be a reason, or a need for this capability or it wouldn't be in C++11.  Why is it there? </p>

<pre><code>// preprocessor.
#define MEANING_OF_LIFE 42

// constants:
const int MeaningOfLife = 42;

// constexpr-function:
constexpr int MeaningOfLife () { return 42; }
</code></pre>

<p>It seems to me that if I wrote a function that return a literal value, and I came up to a code-review, someone would tell me, I should then, declare a constant value instead of writing return 5.</p>
","<p>Suppose it does something a little more complicated.</p>

<pre><code>constexpr int MeaningOfLife ( int a, int b ) { return a * b; }

const int meaningOfLife = MeaningOfLife( 6, 7 );
</code></pre>

<p>Now you have something that can be evaluated down to a constant while maintaining good readability and allowing slightly more complex processing than just setting a constant to a number.</p>

<p>It basically provides a good aid to maintainability as it becomes more obvious what you are doing.  Take <code>max( a, b )</code> for example:</p>

<pre><code>template&lt; typename Type &gt; constexpr Type max( Type a, Type b ) { return a &lt; b ? b : a; }
</code></pre>

<p>Its a pretty simple choice there but it does mean that if you call <code>max</code> with constant values it is explicitly calculated at compile time and not at runtime.</p>

<p>Another good example would be a <code>DegreesToRadians</code> function.  Everyone finds degrees easier to read than radians.  While you may know that 180 degrees is in radians it is much clearer written as follows:</p>

<pre><code>const float oneeighty = DegreesToRadians( 180.0f );
</code></pre>

<p>Lots of good info here:</p>

<p><a href=""http://en.cppreference.com/w/cpp/language/constexpr"" rel=""noreferrer"">http://en.cppreference.com/w/cpp/language/constexpr</a></p>
","4748291"
"vector erase iterator","86420","","<p>I have this code:</p>

<pre><code>int main()
{
    vector&lt;int&gt; res;
    res.push_back(1);
    vector&lt;int&gt;::iterator it = res.begin();
    for( ; it != res.end(); it++)
    {
        it = res.erase(it);
        //if(it == res.end())
        //  return 0;
    }
}
</code></pre>

<p>""A random access iterator pointing to the new location of the element that followed the last element erased by the function call, which is the vector end if the operation erased the last element in the sequence.""</p>

<p>This code crashes but if i use the if(it == res.end()) and then returns it works. How come?
Does the for loop cash the res.end() so the not equal operator fails?</p>
","<p><code>res.erase(it)</code> always returns the next valid iterator, if you erase the last element it will point to <code>.end()</code></p>

<p>At the end of the loop <code>++it</code> is always called, so you increment <code>.end()</code> which is not allowed. </p>

<p>Simply checking for <code>.end()</code> still leaves a bug though, as you always skip an element on every iteration (<code>it</code> gets 'incremented' by the return from <code>.erase()</code>, and then again by the loop)</p>

<p>You probably want something like:</p>

<pre><code> while (it != res.end()) {
        it = res.erase(it);    
 }
</code></pre>

<p>to erase each element</p>

<p>(for completeness: I assume this is a simplified example, if you simply want every element gone without having to perform an operation on it (e.g. delete) you should simply call <code>res.clear()</code>)</p>

<p>When you only conditionally erase elements, you probably want something like</p>

<pre><code>for ( ; it != res.end(); ) {
  if (condition) {
    it = res.erase(it);
  } else {
    ++it;
  }
}
</code></pre>
","4645727"
"Pointer to incomplete class type is not allowed","86350","","<p>For some reason I cannot use functions attached to the object I want to use. I added a comment to the line that is not working. As an error I get ""Error; pointer to incomplete class type is not allowed"" Please help</p>

<p>This is code in dokter.ccp</p>

<pre><code>int counter = 0;        
for (list&lt;Wielrenner*&gt;::iterator it = wielrenners.begin(); it != wielrenners.end(); it++){
    Wielrenner* wielrennerOB = *it;
    cout &lt;&lt; ""\nID: "" &lt;&lt; counter;
    cout &lt;&lt; ""List size: "" &lt;&lt; persons.size() &lt;&lt; endl;

    wielrennerOB-&gt;print();  // This is not working
    counter++;
 }  
</code></pre>

<p>This is code in wielrenner.h</p>

<pre><code>#ifndef WIELRENNER_H_

#define WIELRENNER_H_

//#include &lt;fstream&gt;

#include ""persoon.h""

#include ""Onderzoek.h""

class Wielrenner :
public Persoon
{
public:
    Wielrenner(string, string, Adres, string, Datum, Datum, string, int, float, float, float,list&lt;Onderzoek&gt;* );
    ~Wielrenner(void);
    int     getLengte() const;
    float   getGewicht() const;
    float   getVo2max() const;
    float   getMaxVermogen() const;
    list&lt;Onderzoek&gt; getOnderzoekenList();

    void    setLengte(int);
    void    setGewicht(float);
    void    setVo2max(float);
    void    setMaxVermogen(float);
    void    voegOnderzoekToeList(Onderzoek);
    void    showOnderzoeksList();
    void    setOnderzoeksLijst(list&lt;Onderzoek&gt;&amp;);
    void    print();
    void    printFile(ofstream&amp;);


private:
int     lengte;
float   gewicht;
float   vo2max;
float   maxVermogen;
list&lt;Onderzoek&gt; onderzoeken;
};

#endif /* WIELRENNER_H_ */
</code></pre>

<p>code in wielrenner.CCP</p>

<pre><code>using namespace std;
#include &lt;string&gt;

#include ""Wielrenner.h""
/*
#include ""Onderzoek.h""

*/
Wielrenner::Wielrenner(string voornaam, string achternaam, Adres adres, string telefoon, Datum datumInDienst, Datum geboorteDatum, 
                    string persoonType, int lengte, float gewicht, float vo2max, float maxVermogen,list&lt;Onderzoek&gt;* onderzoeken)
        : lengte(lengte), 
    gewicht(gewicht), 
    vo2max(vo2max), 
    maxVermogen(maxVermogen),
    Persoon(voornaam, achternaam, adres, telefoon, datumInDienst, geboorteDatum, persoonType)
{
}


Wielrenner::~Wielrenner(void)
{
}

//setten van gegevens
void    Wielrenner::setLengte(int newLengte){
lengte = newLengte;
}
void    Wielrenner::setGewicht(float newGewicht){
gewicht = newGewicht;
}
void    Wielrenner::setVo2max(float newVo2max){
vo2max = newVo2max;
}
void    Wielrenner::setMaxVermogen(float newMaxVermogen){
maxVermogen = newMaxVermogen;
}
void    Wielrenner::voegOnderzoekToeList(Onderzoek newOnderzoek){
onderzoeken.push_back(newOnderzoek);            
}

void    Wielrenner::showOnderzoeksList(){
int teller=0;

for (list&lt;Onderzoek&gt;::iterator it = onderzoeken.begin(); it != onderzoeken.end();     it++){
    Onderzoek onderzoekOB = *it;
    cout &lt;&lt; teller &lt;&lt; "" - "";
    onderzoekOB.print();
    teller++;
 }  
}

void    Wielrenner::setOnderzoeksLijst(list&lt;Onderzoek&gt;&amp; newOnderzoeksLijst){
onderzoeken = newOnderzoeksLijst;
}

void    Wielrenner::print(){

cout &lt;&lt; ""("" &lt;&lt; persoonID &lt;&lt; "") Persoon: "" &lt;&lt; endl;
cout &lt;&lt; persoonType &lt;&lt; endl;
cout &lt;&lt; voornaam &lt;&lt; "" "" &lt;&lt; achternaam &lt;&lt; endl;
adres.print();
cout &lt;&lt; telefoon &lt;&lt; endl;
cout &lt;&lt; ""Datum in dienst: "";
datumInDienst.print();
cout &lt;&lt; ""Geboortedatum: "";
geboorteDatum.print();
cout &lt;&lt; ""&gt; Extra wielrenner gegevens: "" &lt;&lt; endl;
cout &lt;&lt; ""Lengte: "" &lt;&lt; lengte &lt;&lt; endl;
cout &lt;&lt; ""Gewicht: "" &lt;&lt; gewicht &lt;&lt; endl;
cout &lt;&lt; ""vo2max: "" &lt;&lt; vo2max &lt;&lt; endl;
cout &lt;&lt; ""maxVermogen: "" &lt;&lt; maxVermogen &lt;&lt; endl;
}
void Wielrenner::printFile(ofstream &amp;myfile){

myfile &lt;&lt;  persoonID &lt;&lt; ""\n"";
myfile &lt;&lt; persoonType &lt;&lt; ""\n"";
myfile &lt;&lt; voornaam &lt;&lt; "" "" &lt;&lt; achternaam &lt;&lt; ""\n"";
adres.printFile(myfile);
myfile &lt;&lt; telefoon &lt;&lt; ""\n"";
datumInDienst.printFile(myfile);
geboorteDatum.printFile(myfile);
myfile &lt;&lt; lengte &lt;&lt; ""\n"";
myfile &lt;&lt; gewicht &lt;&lt; ""\n"";
myfile &lt;&lt; vo2max &lt;&lt; ""\n"";
myfile &lt;&lt; maxVermogen &lt;&lt; ""\n"";
}
// returnen van gegevens

int     Wielrenner::getLengte() const{
return lengte;
}
float   Wielrenner::getGewicht() const{
return gewicht;
}
float   Wielrenner::getVo2max() const{
return vo2max;
}   
float   Wielrenner::getMaxVermogen() const{
return maxVermogen;
}
list&lt;Onderzoek&gt; Wielrenner::getOnderzoekenList(){
return onderzoeken;
}
</code></pre>
","<p>An ""incomplete class"" is one declared but not defined. E.g.</p>

<pre><code>class Wielrenner;
</code></pre>

<p>as opposed to</p>

<pre><code>class Wielrenner
{
    /* class members */
};
</code></pre>

<p>You need to <code>#include ""wielrenner.h""</code> in <code>dokter.ccp</code></p>
","12027678"
"what is the difference between atan and atan2 in c++?","86347","","<p>what is the difference between <code>atan</code> and <code>atan2</code> in c++ ?</p>
","<p><a href=""http://en.cppreference.com/w/cpp/numeric/math/atan2"" rel=""noreferrer""><code>std::atan2</code></a> allows calculating the arctangent of all four quadrants. <a href=""http://en.cppreference.com/w/cpp/numeric/math/atan"" rel=""noreferrer""><code>std::atan</code></a> only allows calculating from, if I remember right, quadrants 1 and 4.</p>
","283408"
"How to use the priority queue STL for objects?","86306","","<pre><code>class Person
{
public:
    int age;
};
</code></pre>

<p>I want to store objects of the class Person in a priority queue.</p>

<pre><code>priority_queue&lt; Person, vector&lt;Person&gt;, ??? &gt;
</code></pre>

<p>I think I need to define a class for the comparison thing, but I am not sure about it.</p>

<p>Also, when we write,</p>

<pre><code>priority_queue&lt; int, vector&lt;int&gt;, greater&lt;int&gt; &gt; 
</code></pre>

<p>How does the greater work?</p>
","<p>You need to provide a valid strict weak ordering comparison for the type stored in the queue, <code>Person</code> in this case. The default is to use <code>std::less&lt;T&gt;</code>, which resolves to something equivalent to <code>operator&lt;</code>. This relies on it's own stored type having one. So if you were to implement</p>

<pre><code>bool operator&lt;(const Person&amp; lhs, const Person&amp; rhs); 
</code></pre>

<p>it should work without any further changes. The implementation could be</p>

<pre><code>bool operator&lt;(const Person&amp; lhs, const Person&amp; rhs)
{
  return lhs.age &lt; rhs.age;
}
</code></pre>

<p>If the the type does not have a natural ""less than"" comparison, it would make more sense to provide your own predicate, instead of the default <code>std::less&lt;Person&gt;</code>. For example,</p>

<pre><code>struct LessThanByAge
{
  bool operator()(const Person&amp; lhs, const Person&amp; rhs) const
  {
    return lhs.age &lt; rhs.age;
  }
};
</code></pre>

<p>then instantiate the queue like this:</p>

<pre><code>std::priority_queue&lt;Person, std::vector&lt;Person&gt;, LessThanByAge&gt; pq;
</code></pre>

<p>Concerning the use of <code>std::greater&lt;Person&gt;</code> as comparator, this would use the equivalent of <code>operator&gt;</code> and have the effect of creating a queue with the priority inverted WRT the default case. It would require the presence of an <code>operator&gt;</code> that can operate on two <code>Person</code> instances.</p>
","19535699"
"What is the difference between ""new"" and ""malloc"" and ""calloc"" in C++?","86145","","<p>What is the difference between ""new"" and ""malloc""  and ""calloc"" and others in family?</p>

<p>(When) Do I need anything other than ""new"" ?</p>

<p>Is one of them implemented using any other?</p>
","<p><code>new</code> and <code>delete</code> are C++ specific features. They didn't exist in C. <code>malloc</code> is the old school C way to do things. Most of the time, you won't need to use it in C++.</p>

<ul>
<li><code>malloc</code> allocates uninitialized memory. The allocated memory has to be released with <code>free</code>.</li>
<li><code>calloc</code> is like <code>malloc</code> but initializes the allocated memory with a constant (0). It needs to be freed with <code>free</code>.</li>
<li><code>new</code> initializes the allocated memory by calling the constructor (if it's an object). Memory allocated with <code>new</code> should be released with <code>delete</code> (which in turn calls the destructor). It does not need you to manually specify the size you need and cast it to the appropriate type. Thus, it's more modern and less prone to errors.</li>
</ul>
","807949"
"How to initialize std::vector from C-style array?","86095","","<p>What is the cheapest way to initialize a <code>std::vector</code> from a C-style array?</p>

<p>Example: In the following class, I have a <code>vector</code>, but due to outside restrictions, the data will be passed in as C-style array:</p>

<pre><code>class Foo {
  std::vector&lt;double&gt; w_;
public:
  void set_data(double* w, int len){
   // how to cheaply initialize the std::vector?
}
</code></pre>

<p>Obviously, I can call <code>w_.resize()</code> and then loop over the elements, or call <code>std::copy()</code>. Are there any better methods?</p>
","<p>Don't forget that you can treat pointers as iterators:</p>

<pre><code>w_.assign(w, w + len);
</code></pre>
","2434208"
"Writing function definition in header files in C++","86055","","<p>I have a class which has many small functions. By small functions, I mean functions that doesn't do any processing but just return a literal value. Something like:</p>

<pre><code>string Foo::method() const{
    return ""A"";
}
</code></pre>

<p>I have created a header file ""Foo.h"" and source file ""Foo.cpp"". But since the function is very small, I am thinking about putting it in the header file itself. I have the following questions:</p>

<ol>
<li>Is there any performance or other issues if I put these function definition in header file? I will have many functions like this.</li>
<li>My understanding is when the compilation is done, compiler will expand the header file and place it where it is included. Is that correct?</li>
</ol>
","<p>If the function is small (the chance you would change it often is low), and if the function can be put into the header without including myriads of other headers (because your function depends on them), it is perfectly valid to do so. If you declare them extern inline, then the compiler is required to give it the same address for every compilation unit:</p>

<p><em>headera.h</em>:</p>

<pre><code>inline string method() {
    return something;
}
</code></pre>

<p>Member functions are implicit inline provided they are defined inside their class. The same stuff is true for them true: If they can be put into the header without hassle, you can indeed do so. </p>

<p>Because the code of the function is put into the header and visible, the compiler is able to inline calls to them, that is, putting code of the function directly at the call site (not so much because you put inline before it, but more because the compiler decides that way, though. Putting inline only is a hint to the compiler regarding that). That can result in a performance improvement, because the compiler now sees where arguments match variables local to the function, and where argument doesn't alias each other - and last but not least, function frame allocation isn't needed anymore.</p>

<blockquote>
  <p>My understanding is when the compilation is done, compiler will expand the header file and place it where it is included. Is that correct?</p>
</blockquote>

<p>Yes, that is correct. The function will be defined in every place where you include its header. The compiler will care about putting only one instance of it into the resulting program, by eliminating the others. </p>
","453387"
"how-to initialize 'const std::vector<T>' like a c array","85963","","<p>Is there an elegant way to create and initialize a <code>const std::vector&lt;const T&gt;</code> like <code>const T a[] = { ... }</code> to a fixed (and small) number of values?<br>
I need to call a function frequently which expects a <code>vector&lt;T&gt;</code>, but these values will never change in my case.</p>

<p>In principle I thought of something like</p>

<pre><code>namespace {
  const std::vector&lt;const T&gt; v(??);
}
</code></pre>

<p>since v won't be used outside of this compilation unit.</p>
","<p>You either have to wait for C++0x or use something like <a href=""http://www.boost.org/doc/libs/1_36_0/libs/assign/doc/index.html"" rel=""noreferrer"">Boost.Assign</a> to do that.</p>

<p>e.g.:</p>

<pre><code>#include &lt;boost/assign/std/vector.hpp&gt;
using namespace boost::assign; // bring 'operator+=()' into scope

vector&lt;int&gt; v;
v += 1,2,3,4,5;
</code></pre>

<p>for C++11:</p>

<pre><code>vector&lt;int&gt; luggage_combo = { 1, 2, 3, 4, 5 };
</code></pre>
","231495"
"Why should C++ programmers minimize use of 'new'?","85875","","<p>I stumbled upon Stack Overflow question <a href=""https://stackoverflow.com/q/3428750/211563"">Memory leak with std::string when using std::list&lt;std::string&gt;</a>, and <a href=""https://stackoverflow.com/q/3428750/211563#comment3570156_3428750"">one of the comments</a> says this:</p>

<blockquote>
  <p>Stop using <code>new</code> so much. I can't see any reason you used new anywhere
  you did. You can create objects by value in C++ and it's one of the
  huge advantages to using the language. You do not have to allocate
  everything on the stack*. Stop thinking like a Java programmer.</p>
</blockquote>

<p>I'm not really sure what he means by that. Why should objects be created by value in C++ as often as possible, and what difference does it make internally? Did I misinterpret the answer?</p>

<hr>

<p><sup>* The comment originally said ""stack"", this has since been corrected by a moderator to the intended ""heap"".</sup></p>
","<p>There are two widely-used memory allocation techniques: automatic allocation and dynamic allocation.  Commonly, there is a corresponding region of memory for each: the stack and the heap.</p>

<h3>Stack</h3>

<p>The stack always allocates memory in a sequential fashion.  It can do so because it requires you to release the memory in the reverse order (First-In, Last-Out: FILO).  This is the memory allocation technique for local variables in many programming languages.  It is very, very fast because it requires minimal bookkeeping and the next address to allocate is implicit.</p>

<p>In C++, this is called <em>automatic storage</em> because the storage is claimed automatically at the end of scope.  As soon as execution of current code block (delimited using <code>{}</code>) is completed, memory for all variables in that block is automatically collected.  This is also the moment where <em>destructors</em> are invoked to clean up resources.</p>

<h3>Heap</h3>

<p>The heap allows for a more flexible memory allocation mode.  Bookkeeping is more complex and allocation is slower.  Because there is no implicit release point, you must release the memory manually, using <code>delete</code> or <code>delete[]</code> (<code>free</code> in C).  However, the absence of an implicit release point is the key to the heap's flexibility.</p>

<h3>Reasons to use dynamic allocation</h3>

<p>Even if using the heap is slower and potentially leads to memory leaks or memory fragmentation, there are perfectly good use cases for dynamic allocation, as it's less limited.</p>

<p>Two key reasons to use dynamic allocation:</p>

<ul>
<li><p>You don't know how much memory you need at compile time.  For instance, when reading a text file into a string, you usually don't know what size the file has, so you can't decide how much memory to allocate until you run the program.</p></li>
<li><p>You want to allocate memory which will persist after leaving the current block.  For instance, you may want to write a function <code>string readfile(string path)</code> that returns the contents of a file.  In this case, even if the stack could hold the entire file contents, you could not return from a function and keep the allocated memory block.</p></li>
</ul>

<h3>Why dynamic allocation is often unnecessary</h3>

<p>In C++ there's a neat construct called a <em>destructor</em>.  This mechanism allows you to manage resources by aligning the lifetime of the resource with the lifetime of a variable. This technique is called <a href=""http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization"">RAII</a> and is the distinguishing point of C++. It ""wraps"" resources into objects.  <code>std::string</code> is a perfect example.  This snippet:</p>

<pre><code>int main ( int argc, char* argv[] )
{
    std::string program(argv[0]);
}
</code></pre>

<p>actually allocates a variable amount of memory.  The <code>std::string</code> object allocates memory using the heap and releases it in its destructor.  In this case, you did <em>not</em> need to manually manage any resources and still got the benefits of dynamic memory allocation.</p>

<p>In particular, it implies that in this snippet:</p>

<pre><code>int main ( int argc, char* argv[] )
{
    std::string * program = new std::string(argv[0]);  // Bad!
    delete program;
}
</code></pre>

<p>there is unneeded dynamic memory allocation.  The program requires more typing (!) and introduces the risk of forgetting to deallocate the memory.  It does this with no apparent benefit.</p>

<h3>Why you should use automatic storage as often as possible</h3>

<p>Basically, the last paragraph sums it up.  Using automatic storage as often as possible makes your programs:</p>

<ul>
<li>faster to type;</li>
<li>faster when run;</li>
<li>less prone to memory/resource leaks.</li>
</ul>

<h3>Bonus points</h3>

<p>In the referenced question, there are additional concerns.  In particular, the following class:</p>

<pre><code>class Line {
public:
    Line();
    ~Line();
    std::string* mString;
};

Line::Line() {
    mString = new std::string(""foo_bar"");
}

Line::~Line() {
    delete mString;
}
</code></pre>

<p>Is actually a lot more risky to use than the following one:</p>

<pre><code>class Line {
public:
    Line();
    std::string mString;
};

Line::Line() {
    mString = ""foo_bar"";
    // note: there is a cleaner way to write this.
}
</code></pre>

<p>The reason is that <code>std::string</code> properly defines a copy constructor.  Consider the following program:</p>

<pre><code>int main ()
{
    Line l1;
    Line l2 = l1;
}
</code></pre>

<p>Using the original version, this program will likely crash, as it uses <code>delete</code> on the same string twice.  Using the modified version, each <code>Line</code> instance will own its own string <em>instance</em>, each with its own memory and both will be released at the end of the program.</p>

<h3>Other notes</h3>

<p>Extensive use of <a href=""http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization"">RAII</a> is considered a best practice in C++ because of all the reasons above.  However, there is an additional benefit which is not immediately obvious.  Basically, it's better than the sum of its parts.  The whole mechanism <em>composes</em>.  It scales.</p>

<p>If you use the <code>Line</code> class as a building block:</p>

<pre><code> class Table
 {
      Line borders[4];
 };
</code></pre>

<p>Then</p>

<pre><code> int main ()
 {
     Table table;
 }
</code></pre>

<p>allocates four <code>std::string</code> instances, four <code>Line</code> instances, one <code>Table</code> instance and all the string's contents and <em>everything is freed automagically</em>.</p>
","6500497"
"linux/videodev.h : no such file or directory  - OpenCV on ubuntu 11.04","85805","","<p>I tried to install OpenCV2.2 on Ubuntu 11.04. But OpenCV compilation fails stating an error related to linux/videodev.h file. 
File available in /user/includes/linux is named videodev2.h.</p>

<pre><code>/home/user/OpenCV-2.2.0/modules/highgui/src/cap_v4l.cpp:217:28: fatal error:    linux/videodev.h: No such file or directory
compilation terminated.
make[2]: *** [modules/highgui/CMakeFiles/opencv_highgui.dir/src/cap_v4l.o] Error 1
make[1]: *** [modules/highgui/CMakeFiles/opencv_highgui.dir/all] Error 2
make: *** [all] Error 2
</code></pre>

<p>Is there a solution for this ?</p>

<p>thank you.</p>
","<pre><code>sudo apt-get install libv4l-dev
</code></pre>

<p><strong>Editing for RH based systems</strong> :</p>

<p>On a Fedora 16 to install pygame 1.9.1 (in a virtualenv):</p>

<pre><code>sudo yum install libv4l-devel
sudo ln -s /usr/include/libv4l1-videodev.h   /usr/include/linux/videodev.h 
</code></pre>
","5898792"
"How can I use a C++ library from node.js?","85767","","<p>How can I use a C++ library from node.js?</p>
","<p>Look at <a href=""https://github.com/rbranson/node-ffi"" rel=""noreferrer"">node-ffi</a>.</p>

<blockquote>
  <p>node-ffi is a Node.js addon for loading and calling dynamic libraries using pure JavaScript. It can be used to create bindings to native libraries without writing any C++ code.</p>
</blockquote>
","9631700"
"Generate random numbers uniformly over an entire range","85759","","<p>I need to generate random numbers within a specified interval, [max;min].</p>

<p>Also, the random numbers should be uniformly distributed over the interval, not located to a particular point.</p>

<p>Currenly I am generating as:</p>

<pre><code>for(int i=0; i&lt;6; i++)
{
    DWORD random = rand()%(max-min+1) + min;
}
</code></pre>

<p>From my tests, random numbers are generated around one point only.</p>

<pre><code>Example
min = 3604607;
max = 7654607;
</code></pre>

<p>Random numbers generated:</p>

<pre><code>3631594
3609293
3630000
3628441
3636376
3621404
</code></pre>

<p>From answers below: OK, RAND_MAX is 32767. I am on C++ Windows platform. Is there any other method to generate random numbers with a uniform distribution?</p>
","<h2>Why <code>rand</code> is a bad idea</h2>

<p>Most of the answers you got here make use of the <code>rand</code> function and the modulus operator. That method <a href=""http://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful"">may not generate numbers uniformly</a> (it depends on the range and the value of <code>RAND_MAX</code>), and is therefore discouraged.</p>

<h2>C++11 and generation over a range</h2>

<p>With C++11 multiple other options have risen. One of which fits your requirements, for generating a random number in a range, pretty nicely: <a href=""http://en.cppreference.com/w/cpp/numeric/random/uniform_int_distribution""><code>std::uniform_int_distribution</code></a>. Here's an example:</p>

<pre><code>const int range_from  = 0;
const int range_to    = 10;
std::random_device                  rand_dev;
std::mt19937                        generator(rand_dev());
std::uniform_int_distribution&lt;int&gt;  distr(range_from, range_to);

std::cout &lt;&lt; distr(generator) &lt;&lt; '\n';
</code></pre>

<p>And <a href=""http://coliru.stacked-crooked.com/a/c5b94870fdcd13f2"">here</a>'s the running example.</p>

<h3>Other random generators</h3>

<p>The <a href=""http://en.cppreference.com/w/cpp/numeric/random""><code>&lt;random&gt;</code> header</a> offers innumerable other random number generators with different kind of distributions including Bernoulli, Poisson and normal.</p>

<h3>How can I shuffle a container?</h3>

<p>The standard provides <a href=""http://en.cppreference.com/w/cpp/algorithm/random_shuffle""><code>std::random_shuffle</code></a>, which can be used as follows:</p>

<pre><code>std::vector&lt;int&gt; vec = {4, 8, 15, 16, 23, 42};

std::random_device random_dev;
std::mt19937       generator(random_dev());

std::shuffle(vec.begin(), vec.end(), generator);
</code></pre>

<p>The algorithm will reorder the elements randomly, with a linear complexity.</p>

<h2>Boost.Random</h2>

<p>Another alternative, in case you don't have access to a C++11+ compiler, is to use <a href=""http://www.boost.org/doc/libs/1_55_0/doc/html/boost_random.html"">Boost.Random</a>. Its interface is very similar to the C++11 one.</p>
","20136256"
"Where is `%p` useful with printf?","85750","","<p>After all, both these statements do the same thing...</p>

<pre><code>int a = 10;
int *b = &amp;a;
printf(""%p\n"",b);
printf(""%08X\n"",b);
</code></pre>

<p>For example (with different addresses):</p>

<pre><code>0012FEE0
0012FEE0
</code></pre>

<p>It is trivial to format the pointer as desired with <code>%x</code>, so is there some good use of the <code>%p</code> option?</p>
","<p>They do not do the same thing. The latter <a href=""http://en.cppreference.com/w/cpp/io/c/fprintf"" rel=""noreferrer""><code>printf</code></a> statement interprets <code>b</code> as an <code>unsigned int</code>, which is wrong, as <code>b</code> is a pointer.</p>

<p>Pointers and <code>unsigned int</code>s are not always the same size, so these are not interchangeable. When they aren't the same size (an increasingly common case, as 64-bit CPUs and operating systems become more common), <code>%x</code> will only print half of the address. On a Mac (and probably some other systems), that <em>will</em> ruin the address; the output will be wrong.</p>

<p>Always use <code>%p</code> for pointers.</p>
","2369593"
"How do you generate a random double uniformly distributed between 0 and 1 from C++?","85723","","<p>How do you generate a random double uniformly distributed between 0 and 1 from C++?</p>

<p>Of course I can think of some answers, but I'd like to know what the standard practice is, to have:</p>

<ul>
<li>Good standards compliance</li>
<li>Good randomness</li>
<li>Good speed</li>
</ul>

<p>(speed is more important than randomness for my application).</p>

<p>Thanks a lot!</p>

<p>PS: In case that matters, my target platforms are Linux and Windows.</p>
","<p>In C++11 and C++14 we have much better options with the <a href=""http://en.cppreference.com/w/cpp/numeric/random"">random header</a>. The presentation <a href=""http://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful"">rand() Considered Harmful</a>  by <em>Stephan T. Lavavej</em>  explains why we should eschew the use of <code>rand()</code> in C++ in favor of the <code>random</code> header and <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3924.pdf"">N3924: Discouraging rand() in C++14</a> further reinforces this point.</p>

<p>The example below is a modified version of the sample code on the cppreference site and uses the <a href=""http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine"">std::mersenne_twister_engine</a> engine and the <a href=""http://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution"">std::uniform_real_distribution</a> which generates numbers in the <code>[0,1)</code> range (<em><a href=""http://rextester.com/MIZJR22834"">see it live</a></em>):</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;map&gt;
#include &lt;random&gt;

int main()
{
    std::random_device rd;


    std::mt19937 e2(rd());

    std::uniform_real_distribution&lt;&gt; dist(0, 1);

    std::map&lt;int, int&gt; hist;
    for (int n = 0; n &lt; 10000; ++n) {
        ++hist[std::round(dist(e2))];
    }

    for (auto p : hist) {
        std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(1) &lt;&lt; std::setw(2)
                  &lt;&lt; p.first &lt;&lt; ' ' &lt;&lt; std::string(p.second/200, '*') &lt;&lt; '\n';
    }
}
</code></pre>

<p>output will be similar to the following:</p>

<pre><code>0 ************************
1 *************************
</code></pre>

<p>Since the post mentioned that speed was important then we should consider the cppreference section that describes the different random number engines (<em>emphasis mine</em>):</p>

<blockquote>
  <p>The choice of which engine to use <strong>involves a number of tradeoffs*: the
  **linear congruential engine is moderately fast</strong> and has a very small
  storage requirement for state. The <strong>lagged Fibonacci generators are
  very fast even on processors without advanced arithmetic instruction</strong>
  sets, at the expense of greater state storage and sometimes less
  desirable spectral characteristics. The <strong>Mersenne twister is slower and
  has greater state storage requirements</strong> but with the right parameters
  has the longest non-repeating sequence with the most desirable
  spectral characteristics (for a given definition of desirable).</p>
</blockquote>

<p>So if there is a desire for a faster generator perhaps <a href=""http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine"">ranlux24_base</a> or <a href=""http://en.cppreference.com/w/cpp/numeric/random/subtract_with_carry_engine"">ranlux48_base</a> are better choices over <a href=""http://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine"">mt19937</a>.</p>

<p><B>rand()</B></p>

<p>If you forced to use <code>rand()</code> then the <em>C FAQ</em> for a guide on <a href=""http://c-faq.com/lib/fprand.html"">How can I generate floating-point random numbers?</a>, gives us an example similar to this for generating an on the interval <code>[0,1)</code>:</p>

<pre><code>#include &lt;stdlib.h&gt;

double randZeroToOne()
{
    return rand() / (RAND_MAX + 1.);
}
</code></pre>

<p>and to generate a random number in the range from <code>[M,N)</code>:</p>

<pre><code>double randMToN(double M, double N)
{
    return M + (rand() / ( RAND_MAX / (N-M) ) ) ;  
}
</code></pre>
","26853142"
"Do the parentheses after the type name make a difference with new?","85655","","<p>If 'Test' is an ordinary class, is there any difference between:</p>

<pre><code>Test* test = new Test;
</code></pre>

<p>and</p>

<pre><code>Test* test = new Test();
</code></pre>
","<p>Let's get pedantic, because there are differences that can actually affect your code's behavior. Much of the following is taken from comments made to an <a href=""http://blogs.msdn.com/oldnewthing/archive/2006/12/14/1285437.aspx"" rel=""noreferrer"">""Old New Thing"" article</a>.</p>

<p>Sometimes the memory returned by the new operator will be initialized, and sometimes it won't depending on whether the type you're newing up is a <a href=""https://stackoverflow.com/questions/146452/what-are-pod-types-in-c"">POD (plain old data)</a>, or if it's a class that contains POD members and is using a compiler-generated default constructor.</p>

<ul>
<li>In C++1998 there are 2 types of initialization: zero and default</li>
<li>In C++2003 a 3rd type of initialization, value initialization was added.</li>
</ul>

<p>Assume:</p>

<pre><code>struct A { int m; }; // POD
struct B { ~B(); int m; }; // non-POD, compiler generated default ctor
struct C { C() : m() {}; ~C(); int m; }; // non-POD, default-initialising m
</code></pre>

<p>In a C++98 compiler, the following should occur:</p>

<ul>
<li><code>new A</code>   - indeterminate value</li>
<li><p><code>new A()</code> - zero-initialize</p></li>
<li><p><code>new B</code>   - default construct (B::m is uninitialized)</p></li>
<li><p><code>new B()</code> - default construct (B::m is uninitialized)</p></li>
<li><p><code>new C</code>   - default construct (C::m is zero-initialized)</p></li>
<li><code>new C()</code> - default construct (C::m is zero-initialized)</li>
</ul>

<p>In a C++03 conformant compiler, things should work like so:</p>

<ul>
<li><code>new A</code>    - indeterminate value</li>
<li><p><code>new A()</code>  - value-initialize A, which is zero-initialization since it's a POD.</p></li>
<li><p><code>new B</code>    - default-initializes (leaves B::m uninitialized)</p></li>
<li><p><code>new B()</code>  - value-initializes B which zero-initializes all fields since its default ctor is compiler generated as opposed to user-defined.</p></li>
<li><p><code>new C</code>    - default-initializes C, which calls the default ctor.</p></li>
<li><code>new C()</code>  - value-initializes C, which calls the default ctor.</li>
</ul>

<p>So in all versions of C++ there's a difference between <code>new A</code> and <code>new A()</code> because A is a POD.</p>

<p>And there's a difference in behavior between C++98 and C++03 for the case <code>new B()</code>.</p>

<p>This is one of the dusty corners of C++ that can drive you crazy. When constructing an object, sometimes you want/need the parens, sometimes you absolutely cannot have them, and sometimes it doesn't matter.</p>
","620402"
"Calling constructors in c++ without new","85559","","<p>I've often seen that people create objects in C++ using</p>

<pre><code>Thing myThing(""asdf"");
</code></pre>

<p>Instead of this:</p>

<pre><code>Thing myThing = Thing(""asdf"");
</code></pre>

<p>This seems to work (using gcc), at least as long as there are no templates involved. My question now, is the first line correct and if so should I use it?</p>
","<p>Both lines are in fact correct but do subtly different things.  </p>

<p>The first line creates a new object on the stack by calling a constructor of the format <code>Thing(const char*)</code>.  </p>

<p>The second one is a bit more complex.  It essentially does the following</p>

<ol>
<li>Create an object of type <code>Thing</code> using the constructor <code>Thing(const char*)</code></li>
<li>Create an object of type <code>Thing</code> using the constructor <code>Thing(const Thing&amp;)</code></li>
<li>Call <code>~Thing()</code> on the object created in step #1</li>
</ol>
","2722898"
"C++ code in header files","85504","","<p>My personal style with C++ has always to put class declarations in an include file, and definitions in a .cpp file, very much like stipulated in <a href=""https://stackoverflow.com/a/280048"">Loki's answer to <em>C++ Header Files, Code Separation</em></a>. Admittedly, part of the reason I like this style probably has to do with all the years I spent coding Modula-2 and Ada, both of which have a similar scheme with specification files and body files.</p>

<p>I have a coworker, much more knowledgeable in C++ than I, who is insisting that all C++ declarations should, where possible, include the definitions right there in the header file. He's not saying this is a valid alternate style, or even a slightly better style, but rather this is the new universally-accepted style that everyone is now using for C++.</p>

<p>I'm not as limber as I used to be, so I'm not really anxious to scrabble up onto this bandwagon of his until I see a few more people up there with him. So how common is this idiom really? </p>

<p>Just to give some structure to the answers: Is it now <strong>The Way</strong>, very common, somewhat common, uncommon, or bug-out crazy?</p>
","<p>Your coworker is wrong, the common way is and always has been to put code in .cpp files (or whatever extension you like) and declarations in headers.</p>

<p>There is occasionally some merit to putting code in the header, this can allow more clever inlining by the compiler. But at the same time, it can destroy your compile times since all code has to be processed every time it is included by the compiler.</p>

<p>Finally, it is often annoying to have circular object relationships (sometimes desired) when all the code is the headers.</p>

<p>Bottom line, you were right, he is wrong.</p>

<p><strong>EDIT:</strong> I have been thinking about your question. There is <strong>one</strong> case where what he says is true. templates. Many newer ""modern"" libraries such as boost make heavy use of templates and often are ""header only."" However, this should only be done when dealing with templates as it is the only way to do it when dealing with them.</p>

<p><strong>EDIT:</strong> Some people would like a little more clarification, here's some thoughts on the downsides to writing ""header only"" code:</p>

<p>If you search around, you will see quite a lot of people trying to find a way to reduce compile times when dealing with boost. For example: <a href=""https://stackoverflow.com/questions/2258967/how-to-reduce-compilation-times-with-boost-asio"">How to reduce compilation times with Boost Asio</a>, which is seeing a 14s compile of a single 1K file with boost included. 14s may not seem to be ""exploding"", but it is certainly a lot longer than typical and can add up quite quickly. When dealing with a large project. Header only libraries do affect compile times in a quite measurable way. We just tolerate it because boost is so useful.</p>

<p>Additionally, there are many things which cannot be done in headers only (even boost has libraries you need to link to for certain parts such as threads, filesystem, etc). A Primary example is that you cannot have simple global objects in header only libs (unless you resort to the abomination that is a singleton) as you will run into multiple definition errors. <strong>NOTE:</strong> C++17's inline variables will make this particular example doable in the future.</p>

<p>As a final point, when using boost as an example of header only code, a huge detail often gets missed.</p>

<p>Boost is library, not user level code. so it doesn't change that often. In user code, if you put everything in headers, every little change will cause you to have to recompile the entire project. That's a monumental waste of time (and is not the case for libraries that don't change from compile to compile). When you split things between header/source and better yet, use forward declarations to reduce includes, you can save hours of recompiling when added up across a day.</p>
","583271"
"Variable declarations in header files - static or not?","85475","","<p>When refactoring away some <code>#defines</code> I came across declarations similar to the following in a C++ header file:</p>

<pre><code>static const unsigned int VAL = 42;
const unsigned int ANOTHER_VAL = 37;
</code></pre>

<p>The question is, what difference, if any, will the static make?  Note that multiple inclusion of the headers isn't possible due to the classic <code>#ifndef HEADER</code> <code>#define HEADER</code> <code>#endif</code> trick (if that matters).</p>

<p>Does the static mean only one copy of <code>VAL</code> is created, in case the header is included by more than one source file?</p>
","<p>The <code>static</code> means that there will be one copy of <code>VAL</code> created for each source file it is included in.  But it also means that multiple inclusions will not result in multiple definitions of <code>VAL</code> that will collide at link time.  In C, without the <code>static</code> you would need to ensure that only one source file defined <code>VAL</code> while the other source files declared it <code>extern</code>. Usually one would do this by defining it (possibly with an initializer) in a source file and put the <code>extern</code> declaration in a header file.</p>

<p><code>static</code> variables at global level are only visible in their own source file whether they got there via an include or were in the main file.</p>

<hr>

<p><em>Editor's note:</em> In C++, <code>const</code> objects with neither the <code>static</code> nor <code>extern</code> keywords in their declaration are implicitly <code>static</code>.</p>
","92641"
"What’s the best way to check if a file exists in C++? (cross platform)","85475","","<p>I have read the answers for <a href=""https://stackoverflow.com/questions/230062/whats-the-best-way-to-check-if-a-file-exists-in-c-cross-platform"">What's the best way to check if a file exists in C? (cross platform)</a>, but I'm wondering if there is a better way to do this using standard c++ libs? Preferably without trying to open the file at all. </p>

<p>Both <code>stat</code> and <code>access</code> are pretty much ungoogleable. What should I <code>#include</code> to use these?</p>
","<p>Use <a href=""http://www.boost.org/doc/libs/1_37_0/libs/filesystem/doc/index.htm"" rel=""noreferrer"">boost::filesystem</a>:</p>

<pre><code>#include &lt;boost/filesystem.hpp&gt;

if ( !boost::filesystem::exists( ""myfile.txt"" ) )
{
  std::cout &lt;&lt; ""Can't find my file!"" &lt;&lt; std::endl;
}
</code></pre>
","268047"
"Visual Studio debugger error: Unable to start program Specified file cannot be found","85396","","<p>I have a solution in C:\full path here\VS2010\blender.sln</p>

<p>This solution contains many projects(around 100). When I compile them, they all work fine. I can run them without any problem, and (quite) everything works (there are some bugs).
One of the projects is ALL_BUILD, but it gives the same error if I try to debug INSTALL(another project). I'm compiling with RELWithDebInfo as configuration, and if I execute the program manually it works. It is outputted in C:\full path here\VS2010\bin\RelWithDebInfo</p>

<p>But if I try to run the compiler, it says </p>

<blockquote>
  <p>""Unable to start program 
  C:\full path here\VS2010\RelWithDebInfo\ALL_BUILD
  Specified file cannot be found""</p>
</blockquote>

<p>I tried to copy the compiled program into the path required by VS, but it raised the same error.</p>

<p>What should I do to solve this? Right now I set up cmake to generate also a mingw project and I compile it and debug it with gdb, but this is a really a slow and impractical workflow, and I would like to use the VS debugger.</p>

<p>I must say that if I compile with Debug as configuration, the program doesn't even start.</p>

<p>I'm using VS2010 Express on Win7 64bit</p>

<p>(This is a big open source program, so I don't know exactly whatever it does)</p>
","<p>Guessing from the information I have, you're not actually compiling the program, but trying to run it. That is, BUILD_ALL is set as your startup project. (It should be in a bold font, unlike the other projects in your solution) If you then try to run/debug, you will get the error you describe, because there is simply nothing to run.</p>

<p>The project is most likely generated via CMAKE and included in your Visual Studio solution. Set any of the projects that do generate a .exe as the startup project (by right-clicking on the project and selecting ""set as startup project"") and you will most likely will be able to start those from within Visual Studio.</p>
","7013665"
"What is the difference between a .cpp file and a .h file?","85388","","<p>Because I've made .cpp files then transfered them into .h files, the only difference I can find is that you can't #include .cpp files.  Is there any difference that I am missing?</p>
","<p>The C++ build system (compiler) knows no difference, so it's all one of conventions.</p>

<p>The convention is that .h files are declarations, and .cpp files are definitions.</p>

<p>That's why .h files are #included -- we include the declarations.</p>
","875489"
"Default value of function parameter","85329","","<p><strong>1.</strong></p>

<pre><code>int Add (int a, int b = 3);
int Add (int a, int b)
{

}
</code></pre>

<p><strong>2.</strong></p>

<pre><code>int Add (int a, int b);
int Add (int a, int b = 3)
{

}
</code></pre>

<p>Both work; which is the standard way and <strong>why</strong>?</p>
","<p>If you put the declaration in a header file, and the definition in a separate <code>.cpp</code> file, and <code>#include</code> the header from a different <code>.cpp</code> file, you will be able to see the difference.</p>

<p>Specifically, suppose:</p>

<h1>lib.h</h1>

<pre><code>int Add(int a, int b);
</code></pre>

<h1>lib.cpp</h1>

<pre><code>int Add(int a, int b = 3) {
   ...
}
</code></pre>

<h1>test.cpp</h1>

<pre><code>#include ""lib.h""

int main() {
    Add(4);
}
</code></pre>

<p>The compilation of <code>test.cpp</code> will not see the default parameter declaration, and will fail with an error.</p>

<p>For this reason, the default parameter definition is usually specified in the function <em>declaration</em>:</p>

<h1>lib.h</h1>

<pre><code>int Add(int a, int b = 3);
</code></pre>
","2842942"
"Why is enum class preferred over plain enum?","85307","","<p>I heard a few people recommending to use enum <em>classes</em> in C++ because of their <strong>type safety</strong>. </p>

<p>But what does that really mean?</p>
","<p>C++ has two kinds of <code>enum</code>:</p>

<ol>
<li><code>enum class</code>es</li>
<li>Plain <code>enum</code>s </li>
</ol>

<p>Here are a couple of examples how to declare them:</p>

<pre><code> enum class Color { red, green, blue }; // enum class
 enum Animal { dog, cat, bird, human }; // plain enum 
</code></pre>

<p><strong>What is the difference between two?</strong></p>

<ul>
<li><p><code>enum class</code>es - enumerator names are <strong>local</strong> to the enum and their values do <em>not</em> implicitly convert to other types (like another <code>enum</code> or <code>int</code>)</p></li>
<li><p>Plain <code>enum</code>s - where enumerator names are in the same scope as the enum and their
values implicitly convert to integers and other types</p></li>
</ul>

<p>Example:</p>

<pre><code>enum Color { red, green, blue };                    // plain enum 
enum Card { red_card, green_card, yellow_card };    // another plain enum 
enum class Animal { dog, deer, cat, bird, human };  // enum class
enum class Mammal { kangaroo, deer, human };        // another enum class

void fun() {

    // examples of bad use of plain enums:
    Color color = Color::red;
    Card card = Card::green_card;

    int num = color;    // no problem

    if (color == Card::red_card) // no problem (bad)
        cout &lt;&lt; ""bad"" &lt;&lt; endl;

    if (card == Color::green)   // no problem (bad)
        cout &lt;&lt; ""bad"" &lt;&lt; endl;

    // examples of good use of enum classes (safe)
    Animal a = Animal::deer;
    Mammal m = Mammal::deer;

    int num2 = a;   // error
    if (m == a)         // error (good)
        cout &lt;&lt; ""bad"" &lt;&lt; endl;

    if (a == Mammal::deer) // error (good)
        cout &lt;&lt; ""bad"" &lt;&lt; endl;

}
</code></pre>

<h2>Conclusion:</h2>

<p><code>enum class</code>es should be preferred because they cause fewer surprises that could potentially lead to bugs.</p>
","18335862"
"How to find and replace string?","85287","","<p>If <code>s</code> is a <code>std::string</code>, then is there a function like the following?</p>

<pre><code>s.replace(""text to replace"", ""new text"");
</code></pre>
","<p>Try a combination of <a href=""http://en.cppreference.com/w/cpp/string/basic_string/find"" rel=""nofollow noreferrer""><code>std::string::find</code></a> and <a href=""http://en.cppreference.com/w/cpp/string/basic_string/replace"" rel=""nofollow noreferrer""><code>std::string::replace</code></a>.</p>

<p>This gets the position:</p>

<pre><code>size_t f = s.find(""text to replace"");
</code></pre>

<p>And this replaces the <em>first</em> occurrence:</p>

<pre><code>s.replace(f, std::string(""text to replace"").length(), ""new text"");
</code></pre>

<hr>

<p>Now you can simply create a function for your convenience:</p>

<pre><code>std::string replaceFirstOccurrence(std::string&amp; s,
    const std::string&amp; toReplace,
    const std::string&amp; replaceWith)
{
    std::size_t pos = s.find(toReplace);
    if (pos == std::string::npos) return s;
    return s.replace(pos, toReplace.length(), replaceWith);
}
</code></pre>
","5878802"
"Permutation of array","85265","","<p>For example I have this array:</p>

<pre><code>int a[] = new int[]{3,4,6,2,1};
</code></pre>

<p>I need list of all permutations such that  if one is like this, <code>{3,2,1,4,6}</code>, others must not be the same. I know that if the length of the array is <em>n</em> then there are <em>n!</em> possible combinations. How can this algorithm be written?</p>

<p>Update: thanks, but I need a pseudo code algorithm like:</p>

<pre><code>for(int i=0;i&lt;a.length;i++){
    // code here
}
</code></pre>

<p>Just algorithm. Yes, API functions are good, but it does not help me too much.</p>
","<p>If you're using C++, you can use std::next_permutation from algorithm header:</p>

<pre><code>int a[] = {3,4,6,2,1};
int size = sizeof(a)/sizeof(a[0]);
std::sort(a, a+size);
do {
  // print a's elements
} while(std::next_permutation(a, a+size));
</code></pre>
","2920347"
"How to pass variable number of arguments to printf/sprintf","85260","","<p>I have a class that holds an ""error"" function that will format some text.  I want to accept a variable number of arguments and then format them using printf.</p>

<p><strong>Example:</strong></p>

<pre><code>class MyClass
{
public:
    void Error(const char* format, ...);
};
</code></pre>

<p>The Error method should take in the parameters, call printf/sprintf to format it and then do something with it.  I don't want to write all the formatting myself so it makes sense to try and figure out how to use the existing formatting.</p>
","<h2>Bad</h2>

<pre><code>void Error(const char* format, ...)
{
    char dest[1024 * 16];
    va_list argptr;
    va_start(argptr, format);
    vsprintf(dest, format, argptr);
    va_end(argptr);
    printf(dest);
}
</code></pre>

<p>This code is not so good. It uses a fixed-size character buffer which can lead to a buffer overrun error if the string is pathologically long. The arbitrary large <code>1024*16</code> size should set off a flag in your head. Also, the <code>printf</code> call could run into problems if <code>dest</code> ends up containing formatting codes. Better would be <code>printf(""%s"", dest)</code>. But even better still would be using <a href=""http://en.cppreference.com/w/cpp/io/c/vfprintf"" rel=""noreferrer""><code>vprintf</code></a> or <code>vfprintf</code>:</p>

<h2>Good</h2>

<pre><code>void Error(const char* format, ...)
{
    va_list argptr;
    va_start(argptr, format);
    vfprintf(stderr, format, argptr);
    va_end(argptr);
}
</code></pre>

<p>If you want to manipulate the string before you display it and really do need it stored in a buffer first, please please please use <strong><code>vsnprintf</code></strong> instead of <code>vsprintf</code>. <code>vsnprintf</code> will prevent an accidental buffer overflow error.</p>
","1056442"
"Passing structs to functions","84849","","<p>I am having trouble understanding how to pass in a struct (by reference) to a function so that the struct's member functions can be populated. So far I have written:</p>

<pre><code>bool data(struct *sampleData)
{

}

int main(int argc, char *argv[]) {

      struct sampleData {

        int N;
        int M;
        string sample_name;
        string speaker;
     };
         data(sampleData);

}
</code></pre>

<p>The error I get is:</p>

<blockquote>
  <p>C++ requires a type specifier for all declarations
  bool data(const &amp;testStruct)</p>
</blockquote>

<p>I have tried some examples explained here: <a href=""https://stackoverflow.com/questions/2212354/simple-way-to-pass-temporary-struct-by-value-in-c"">Simple way to pass temporary struct by value in C++?</a></p>

<p>Hope someone can Help me.</p>
","<p>First, the signature of your data() function:</p>

<pre><code>bool data(struct *sampleData)
</code></pre>

<p>cannot possibly work, because the argument lacks a name. When you declare a function argument that you intent to actually access, it needs a name. So change it to something like:</p>

<pre><code>bool data(struct sampleData *samples)
</code></pre>

<p>But in C++, you don't need to use <code>struct</code> at all actually. So this can simply become:</p>

<pre><code>bool data(sampleData *samples)
</code></pre>

<hr>

<p>Second, the <code>sampleData</code> struct is not known to data() at that point. So you should declare it before that:</p>

<pre><code>struct sampleData {
    int N;
    int M;
    string sample_name;
    string speaker;
};

bool data(sampleData *samples)
{
    samples-&gt;N = 10;
    samples-&gt;M = 20;
    // etc.
}
</code></pre>

<p>And finally, you need to create a variable of type <code>sampleData</code>. For example, in your main() function:</p>

<pre><code>int main(int argc, char *argv[]) {
    sampleData samples;
    data(&amp;samples);
}
</code></pre>

<p>Note that you need to pass the address of the variable to the data() function, since it accepts a pointer.</p>

<p>However, note that in C++ you can directly pass arguments by reference and don't need to ""emulate"" it with pointers. You can do this instead:</p>

<pre><code>// Note that the argument is taken by reference (the ""&amp;"" in front
// of the argument name.)
bool data(sampleData &amp;samples)
{
    samples.N = 10;
    samples.M = 20;
    // etc.
}

int main(int argc, char *argv[]) {
    sampleData samples;

    // No need to pass a pointer here, since data() takes the
    // passed argument by reference.
    data(samples);
}
</code></pre>
","15181807"
"C++ pass an array by reference","84843","","<p>is this allowed to pass an array by reference ?</p>

<pre><code> void foo(double&amp; *bar) 
</code></pre>

<p>Seems that my compiler says no. Why? What is the proper way to pass an array by reference? Or a work around? I have an array argument that my method should modify and that I should retrieve afterwards. Alternatively, I could make this array a class member, which works fine, but it has many drawbacks for other part of my code (that I would like to avoid).</p>

<p>Thanks and regards.</p>
","<p>Arrays can only be passed by reference, actually:</p>

<pre><code>void foo(double (&amp;bar)[10])
{
}
</code></pre>

<p>This prevents you from doing things like:</p>

<pre><code>double arr[20];
foo(arr); // won't compile
</code></pre>

<p>To be able to pass an arbitrary size array to <code>foo</code>, make it a template and capture the size of the array at compile time:</p>

<pre><code>template&lt;typename T, size_t N&gt;
void foo(T (&amp;bar)[N])
{
    // use N here
}
</code></pre>

<p>You should seriously consider using <code>std::vector</code>, or if you have a compiler that supports c++11, <code>std::array</code>.</p>
","10008405"
"Returning unique_ptr from functions","84813","","<p><code>unique_ptr&lt;T&gt;</code> does not allow copy construction, instead it supports move semantics. Yet, I can return a <code>unique_ptr&lt;T&gt;</code> from a function and assign the returned value to a variable.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;memory&gt;

using namespace std;

unique_ptr&lt;int&gt; foo()
{
  unique_ptr&lt;int&gt; p( new int(10) );

  return p;                   // 1
  //return move( p );         // 2
}

int main()
{
  unique_ptr&lt;int&gt; p = foo();

  cout &lt;&lt; *p &lt;&lt; endl;
  return 0;
}
</code></pre>

<p>The code above compiles and works as intended. So how is it that line <code>1</code> doesn't invoke the copy constructor and result in compiler errors? If I had to use line <code>2</code> instead it'd make sense (using line <code>2</code> works as well, but we're not required to do so).</p>

<p>I know C++0x allows this exception to <code>unique_ptr</code> since the return value is a temporary object that will be destroyed as soon as the function exits, thus guaranteeing the uniqueness of the returned pointer. I'm curious about how this is implemented, is it special cased in the compiler or is there some other clause in the language specification that this exploits?</p>
","<blockquote>
  <p>is there some other clause in the language specification that this exploits?</p>
</blockquote>

<p>Yes, see 12.8 §34 and §35:</p>

<blockquote>
  <p>When certain criteria are met, an implementation is allowed to omit the copy/move construction of a class object [...]
  This elision of copy/move operations, called <em>copy elision</em>, is permitted [...]
  in a return statement in a function with a class return type, <strong>when the expression is the name of
  a non-volatile automatic object</strong> with the same cv-unqualified type as the function return type [...]</p>
  
  <p>When the criteria for elision of a copy operation are met and the object to be copied is designated by an lvalue,
  overload resolution to select the constructor for the copy is first performed <strong>as if the object were designated by an rvalue</strong>.</p>
</blockquote>

<hr>

<p>Just wanted to add one more point that returning by value should be the default choice here because a named value in the return statement in the worst case, i.e. without elisions in C++11, C++14 and C++17 is treated as an rvalue.  So for example the following function compiles with the <code>-fno-elide-constructors</code> flag</p>

<pre><code>std::unique_ptr&lt;int&gt; get_unique() {
  auto ptr = std::unique_ptr&lt;int&gt;{new int{2}}; // &lt;- 1
  return ptr; // &lt;- 2, moved into the to be returned unique_ptr
}

...

auto int_uptr = get_unique(); // &lt;- 3
</code></pre>

<p>With the flag set on compilation there are two moves (1 and 2) happening in this function and then one move later on (3).  </p>
","4316948"
"Finding all the subsets of a set","84795","","<p>I need an algorithm to find all of the subsets of a set where the number of elements in a set is <code>n</code>.</p>

<pre><code>S={1,2,3,4...n}
</code></pre>

<p>Edit: I am having trouble understanding the answers provided so far. I would like to have step-by-step examples of how the answers work to find the subsets.</p>

<p>For example,</p>

<pre><code>S={1,2,3,4,5}
</code></pre>

<p>How do you know <code>{1}</code> and <code>{1,2}</code> are subsets?</p>

<p>Could Someone help me with a simple function in c++ to find subsets of {1,2,3,4,5}</p>
","<p>It's very simple to do this recursively. The basic idea is that for each element, the set of subsets can be divided equally into those that contain that element and those that don't, and those two sets are otherwise equal.</p>

<ul>
<li>For n=1, the set of subsets is {{}, {1}}</li>
<li>For n>1, find the set of subsets of 1,...,n-1 and make two copies of it. For one of them, add n to each subset. Then take the union of the two copies.</li>
</ul>

<p><strong>Edit</strong> To make it crystal clear:</p>

<ul>
<li>The set of subsets of {1} is {{}, {1}}</li>
<li>For {1, 2}, take {{}, {1}}, add 2 to each subset to get {{2}, {1, 2}} and take the union with {{}, {1}} to get {{}, {1}, {2}, {1, 2}}</li>
<li>Repeat till you reach n</li>
</ul>
","729603"
"Undefined behavior and sequence points","84737","","<p>What are ""sequence points""?</p>

<p>What is the relation between undefined behaviour and sequence points?</p>

<p>I often use funny and convoluted expressions like <code>a[++i] = i;</code>, to make myself feel better. Why should I stop using them?</p>

<p>If you've read this, be sure to visit the follow-up question <em><a href=""https://stackoverflow.com/questions/4638364"">Undefined behavior and sequence points reloaded</a></em>.</p>

<p><sub>
<em>(Note: This is meant to be an entry to <a href=""https://stackoverflow.com/questions/tagged/c++-faq"">Stack Overflow's C++ FAQ</a>. If you want to critique the idea of providing an FAQ in this form, then <a href=""https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag"">the posting on meta that started all this</a> would be the place to do that. Answers to that question are monitored in the <a href=""http://chat.stackoverflow.com/rooms/10/c-lounge"">C++ chatroom</a>, where the FAQ idea started out in the first place, so your answer is very likely to get read by those who came up with the idea.)</em>
</sub></p>
","<h3>C++98 and C++03</h3>

<p>This answer is for the older versions of the C++ standard.  The C++11 and C++14 versions of the standard do not formally contain 'sequence points'; operations are 'sequenced before' or 'unsequenced' or 'indeterminately sequenced' instead.  The net effect is essentially the same, but the terminology is different.</p>

<hr>

<p><strong>Disclaimer</strong> : Okay. This answer is a bit long. So have patience while reading it. If you already know these things, reading them again won't make you crazy. </p>

<p><strong>Pre-requisites</strong> : An elementary knowledge of <a href=""http://www.open-std.org/jtc1/sc22/wg21/"" rel=""nofollow noreferrer"">C++ Standard</a> </p>

<hr>

<h2>What are Sequence Points?</h2>

<p>The Standard says </p>

<blockquote>
  <p>At  certain specified points in the execution sequence called <strong>sequence points</strong>, all <em>side effects</em> of previous evaluations 
  shall be complete and no <em>side effects</em> of subsequent evaluations shall have taken place. (§1.9/7)</p>
</blockquote>

<h2>Side effects? What are side effects?</h2>

<p>Evaluation  of  an  expression produces something and if in addition there is a change in the state of the execution environment it is said that the expression (its evaluation) has some side effect(s).</p>

<p>For example:</p>

<pre><code>int x = y++; //where y is also an int
</code></pre>

<p>In addition to the initialization operation the value of <code>y</code> gets changed due to the side effect of <code>++</code> operator. </p>

<p>So far so good. Moving on to sequence points. An alternation definition of seq-points given by the comp.lang.c author <code>Steve Summit</code>:</p>

<blockquote>
  <p>Sequence point is a point in time at which the dust has settled and all side effects which have been seen so far are guaranteed to be complete.</p>
</blockquote>

<hr>

<h2>What are the common sequence points listed in the C++ Standard ?</h2>

<p>Those are:</p>

<ul>
<li>at the end of the evaluation of full expression (<code>§1.9/16</code>) (A full-expression is an expression that is not a subexpression of another expression.)<sup>1</sup></li>
</ul>

<p>Example :</p>

<pre><code>int a = 5; // ; is a sequence point here
</code></pre>

<ul>
<li><p>in the evaluation of each of the following expressions after the evaluation of the first expression(<code>§1.9/18</code>) <sup>2</sup></p>

<ul>
<li><code>a &amp;&amp; b (§5.14)</code> </li>
<li><code>a || b (§5.15)</code></li>
<li><code>a ? b : c (§5.16)</code></li>
<li><code>a , b (§5.18)</code> (here a , b is a comma operator; in <code>func(a,a++)</code> <code>,</code> is not a comma operator, it's merely a separator between the arguments <code>a</code> and <code>a++</code>. Thus the behaviour is undefined in that case (if <code>a</code> is considered to be a primitive type)) <br></li>
</ul></li>
<li><p>at a function call (whether or not the function is inline), after the evaluation of all function arguments (if any) which 
takes place before execution of any expressions or statements in the function body (<code>§1.9/17</code>).</p></li>
</ul>

<p><sub>1 : Note : the evaluation of a full-expression can include the evaluation of subexpressions that are not lexically
part of the full-expression.  For example, subexpressions involved in evaluating default argument expressions (8.3.6) are considered to be created in the expression that calls the function, not the expression that defines the default argument</sub></p>

<p><sub>2 : The operators indicated are the built-in operators, as described in clause 5.  When one of these operators is overloaded (clause 13) in a valid context, thus designating a user-defined operator function, the expression designates a function invocation and the operands form an argument list, without an implied sequence point between them.</sub></p>

<hr>

<h2>What is Undefined Behaviour?</h2>

<p>The Standard defines Undefined Behaviour in Section <code>§1.3.12</code> as</p>

<blockquote>
  <p>behaviour, such as might arise upon use of an erroneous program construct or erroneous data, for which this International Standard imposes <strong>no  requirements <sup>3</sup></strong>.</p>
  
  <p>Undefined  behaviour  may  also  be  expected  when  this
  International Standard omits the description of any explicit definition of behavior.</p>
</blockquote>

<p><sub> 3 : permissible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or with-
out the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message).</sub></p>

<p>In short, undefined behaviour means <strong>anything</strong> can happen from daemons flying out of your nose to  your girlfriend getting pregnant.</p>

<hr>

<h2>What is the relation between Undefined Behaviour and Sequence Points?</h2>

<p>Before I get into that you must know the difference(s) between <a href=""https://stackoverflow.com/questions/2397984/undefined-unspecified-and-implementation-defined-behavior"">Undefined Behaviour, Unspecified Behaviour and Implementation Defined Behaviour</a>.</p>

<p>You must also know that <code>the order of evaluation of operands of individual operators and subexpressions of individual expressions, and the order in which side effects take place, is unspecified</code>.</p>

<p>For example:</p>

<pre><code>int x = 5, y = 6;

int z = x++ + y++; //it is unspecified whether x++ or y++ will be evaluated first.
</code></pre>

<p>Another example <a href=""https://stackoverflow.com/questions/3457967/what-belongs-in-an-educational-tool-to-demonstrate-the-unwarranted-assumptions-pe/3458842#3458842"">here</a>.</p>

<hr>

<p>Now the Standard in <code>§5/4</code> says</p>

<ul>
<li>1) <strong>Between the previous and next sequence point a scalar object shall have its stored value modified at most once by the evaluation of an expression.</strong>  </li>
</ul>

<p>What does it mean?</p>

<p>Informally it means that between two sequence points a variable must not be modified more than once.
In an expression statement, the <code>next sequence point</code> is usually at the terminating semicolon, and the <code>previous sequence point</code> is at the end of the previous statement. An expression may also contain intermediate <code>sequence points</code>.</p>

<p>From the above sentence the following expressions invoke Undefined Behaviour:</p>

<pre><code>i++ * ++i;   // UB, i is modified more than once btw two SPs
i = ++i;     // UB, same as above
++i = 2;     // UB, same as above
i = ++i + 1; // UB, same as above
++++++i;     // UB, parsed as (++(++(++i)))

i = (i, ++i, ++i); // UB, there's no SP between `++i` (right most) and assignment to `i` (`i` is modified more than once btw two SPs)
</code></pre>

<p>But the following expressions are fine:</p>

<pre><code>i = (i, ++i, 1) + 1; // well defined (AFAIK)
i = (++i, i++, i);   // well defined 
int j = i;
j = (++i, i++, j*i); // well defined
</code></pre>

<hr>

<ul>
<li>2) <strong>Furthermore, the prior value shall be accessed only to determine the value to be stored.</strong></li>
</ul>

<p>What does it mean? It means if an object is written to within a full expression, any and all accesses to it within the same expression <strong>must be directly involved in the computation of the value to be written</strong>. </p>

<p>For example in <code>i = i + 1</code> all the access of <code>i</code> (in L.H.S and in R.H.S) are <strong>directly involved in computation</strong> of the value to be written. So it is fine.</p>

<p>This rule effectively constrains legal expressions to those in which the accesses demonstrably precede the modification.</p>

<p>Example 1:</p>

<pre><code>std::printf(""%d %d"", i,++i); // invokes Undefined Behaviour because of Rule no 2
</code></pre>

<p>Example 2:</p>

<pre><code>a[i] = i++ // or a[++i] = i or a[i++] = ++i etc
</code></pre>

<p>is disallowed because one of the accesses of <code>i</code> (the one in <code>a[i]</code>) has nothing to do with the value which ends up being stored in i (which happens over in <code>i++</code>), and so there's no good way to define--either for our understanding or the compiler's--whether the access should take place before or after the incremented value is stored. So the behaviour is undefined.</p>

<p>Example 3 :</p>

<pre><code>int x = i + i++ ;// Similar to above
</code></pre>

<hr>

<p><strong>Follow up answer <a href=""https://stackoverflow.com/questions/4176328/faq-undefined-behavior-and-sequence-points/4183735#4183735"">here</a>.</strong> </p>
","4176333"
"Howto throw std::exceptions with variable messages?","84694","","<p>This is an example of what I often do when I want to add some information to an exception:</p>

<pre><code>std::stringstream errMsg;
errMsg &lt;&lt; ""Could not load config file '"" &lt;&lt; configfile &lt;&lt; ""'"";
throw std::exception(errMsg.str().c_str());
</code></pre>

<p>Is there a nicer way to do it?</p>
","<p>Here is my solution:</p>

<pre><code>class Formatter
{
public:
    Formatter() {}
    ~Formatter() {}

    template &lt;typename Type&gt;
    Formatter &amp; operator &lt;&lt; (const Type &amp; value)
    {
        stream_ &lt;&lt; value;
        return *this;
    }

    std::string str() const         { return stream_.str(); }
    operator std::string () const   { return stream_.str(); }

    enum ConvertToString 
    {
        to_str
    };
    std::string operator &gt;&gt; (ConvertToString) { return stream_.str(); }

private:
    std::stringstream stream_;

    Formatter(const Formatter &amp;);
    Formatter &amp; operator = (Formatter &amp;);
};
</code></pre>

<p>Example:</p>

<pre><code>throw std::runtime_error(Formatter() &lt;&lt; foo &lt;&lt; 13 &lt;&lt; "", bar"" &lt;&lt; myData);   // implicitly cast to std::string
throw std::runtime_error(Formatter() &lt;&lt; foo &lt;&lt; 13 &lt;&lt; "", bar"" &lt;&lt; myData &gt;&gt; Formatter::to_str);    // explicitly cast to std::string
</code></pre>
","12262626"
"Cleaning up an STL list/vector of pointers","84623","","<p>What is the shortest chunk of C++ you can come up with to safely clean up a vector or list of pointers?  (assuming you have to call delete on the pointers?)</p>

<pre><code>list&lt;Foo*&gt; foo_list;
</code></pre>

<p>I'd rather not use Boost or wrap my pointers with smart pointers. </p>
","<p>Since we are throwing down the gauntlet here... ""Shortest chunk of C++""</p>

<pre><code>static bool deleteAll( Foo * theElement ) { delete theElement; return true; }

foo_list . remove_if ( deleteAll );
</code></pre>

<p>I think we can trust the folks who came up with STL to have efficient algorithms. Why reinvent the wheel?</p>
","307360"
"Why does dividing two int not yield the right value when assigned to double?","84509","","<p>How come that in the following snippet</p>

<pre><code>int a = 7;
int b = 3;
double c = 0;
c = a / b;
</code></pre>

<p><code>c</code> ends up having the value 2, rather than 2.3333, as one would expect. If <code>a</code> and <code>b</code> are doubles, the answer does turn to 2.333. But surely because <code>c</code>  already is a double it should have worked with integers?</p>

<p>So how come <code>int/int=double</code> doesn't work?</p>
","<p>This is because you are using the integer division version of <code>operator/</code>, which takes 2 <code>int</code>s and returns an <code>int</code>.  In order to use the <code>double</code> version, which returns a <code>double</code>, at least one of the <code>int</code>s must be explicitly casted to a <code>double</code>.</p>

<pre><code>c = a/(double)b;
</code></pre>
","7571378"
"Using Boost to read and write XML files","84455","","<p>Is there any good way (and a simple way too) using Boost to read and write XML files?</p>

<p>I can't seem to find any simple sample to read XML files using Boost. Can you point me a simple sample that uses Boost for reading and writing XML files?</p>

<p>If not Boost, is there any good and simple library to read and write XML files that you can recommend? (it must be a C++ library)</p>
","<p>You should Try <a href=""http://pugixml.org/"" rel=""noreferrer"">pugixml</a> <em>Light-weight, simple and fast XML parser for C++</em></p>

<p>The nicest thing about pugixml is the <strong>XPath</strong> support, which TinyXML and RapidXML lack.</p>

<p>Quoting RapidXML's author ""I would like to thank Arseny Kapoulkine for his work on pugixml, which was an inspiration for this project"" and ""5% - 30% faster than pugixml, the fastest XML parser I know of"" He had tested against version 0.3 of pugixml, which has reached recently version 0.42.</p>

<p>Here is an excerpt from pugixml documentation:</p>

<p>The main features are:</p>

<ul>
<li>low memory consumption and fragmentation (the win over pugxml is ~1.3 times, TinyXML - ~2.5 times, Xerces (DOM) - ~4.3 times 1). Exact numbers can be seen in Comparison with existing parsers section.</li>
<li>extremely high parsing speed (the win over pugxml is ~6 times, TinyXML - ~10 times, Xerces-DOM - ~17.6 times 1</li>
<li>extremely high parsing speed (well, I'm repeating myself, but it's so fast, that it outperforms Expat by 2.8 times on test XML) 2</li>
<li>more or less standard-conformant (it will parse any standard-compliant file correctly, with the exception of DTD related issues)</li>
<li>pretty much error-ignorant (it will not choke on something like You &amp; Me, like expat will; it will parse files with data in wrong encoding; and so on)</li>
<li>clean interface (a heavily refactored pugxml's one)</li>
<li>more or less Unicode-aware (actually, it assumes UTF-8 encoding of the input data, though it will readily work with ANSI - no UTF-16 for now (see Future work), with helper conversion functions (UTF-8 &lt;-> UTF-16/32 (whatever is the default for std::wstring &amp; wchar_t))</li>
<li>fully standard compliant C++ code (approved by Comeau strict mode); the library is multiplatform (see reference for platforms list)</li>
<li>high flexibility. You can control many aspects of file parsing and DOM tree building via parsing options. </li>
</ul>

<p>Okay, you might ask - what's the catch? Everything is so cute - it's small, fast, robust, clean solution for parsing XML. What is missing? Ok, we are fair developers - so here is a misfeature list:</p>

<ul>
<li>memory consumption. It beats every DOM-based parser that I know of - but when SAX parser comes, there is no chance. You can't process a 2 Gb XML file with less than 4 Gb of memory - and do it fast. Though pugixml behaves better, than all other DOM-based parser, so if you're stuck with DOM, it's not a problem.</li>
<li>memory consumption. Ok, I'm repeating myself. Again. When other parsers will allow you to provide XML file in a constant storage (or even as a memory mapped area), pugixml will not. So you'll have to copy the entire data into a non-constant storage. Moreover, it should persist during the parser's lifetime (the reasons for that and more about lifetimes is written below). Again, if you're ok with DOM - it should not be a problem, because the overall memory consumption is less (well, though you'll need a contiguous chunk of memory, which can be a problem).</li>
<li>lack of validation, DTD processing, XML namespaces, proper handling of encoding. If you need those - go take MSXML or XercesC or anything like that.</li>
</ul>
","1448859"
"How to link C++ program with Boost using CMake","84361","","<p>What should my cmake file should look like for linking my program with boost library under Ubuntu?</p>

<p>The errors show during running make:</p>

<pre><code>main.cpp:(.text+0x3b): undefined reference to `boost::program_options::options_description::m_default_line_length'
</code></pre>

<p>The main file is really simple:</p>

<pre><code>#include &lt;boost/program_options/options_description.hpp&gt;
#include &lt;boost/program_options/option.hpp&gt;
using namespace std;
#include &lt;iostream&gt;

namespace po = boost::program_options;

int main(int argc, char** argv) {

    po::options_description desc(""Allowed options"");
    desc.add_options()
        (""help"", ""produce help message"")
        ;

    return 0;
}
</code></pre>

<hr>

<p>I've managed to do that, the only lines that I've added to my cmake files were:</p>

<pre><code>target_link_libraries(
my_target_file
${Boost_PROGRAM_OPTIONS_LIBRARY}
)
</code></pre>
","<p>In CMake you could use <code>find_package</code> to find libraries you need.
There usually is a <code>FindBoost.cmake</code> along with your CMake-Installation.</p>

<p>As far as I remember it will be installed to <code>/usr/share/cmake/Modules/</code> along with other find-scripts for common libraries.
You could just check the documentation in that file for more info about how it works.</p>

<p>I'm not at work now, so I could just provide an example out of my head:</p>

<pre><code>FIND_PACKAGE( Boost 1.40 COMPONENTS program_options REQUIRED )
INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )

ADD_EXECUTABLE( anyExecutable myMain.cpp )

TARGET_LINK_LIBRARIES( anyExecutable LINK_PUBLIC ${Boost_LIBRARIES} )
</code></pre>

<p>Hope this code helps.</p>

<ul>
<li>Here's the official <a href=""http://www.cmake.org/cmake/help/git-master/module/FindBoost.html"" rel=""noreferrer"">documentation about FindBoost.cmake</a>.</li>
<li>And the actual <a href=""https://github.com/Kitware/CMake/blob/master/Modules/FindBoost.cmake"" rel=""noreferrer"">FindBoost.cmake</a> (hosted on Github)</li>
</ul>
","3917033"
"Function for C++ struct","84208","","<p>Usually we can define a variable for a C++ struct, as in</p>

<pre><code>struct foo {
  int bar;
};
</code></pre>

<p>Can we also define functions for a struct? How would we use those functions?</p>
","<p>Yes, a <code>struct</code> is identical to a <code>class</code> except for the default access level (member-wise and inheritance-wise). (and the extra meaning <code>class</code> carries when used with a template)</p>

<p>Every functionality supported by a class is consequently supported by a struct. You'd use methods the same as you'd use them for a class.</p>

<pre><code>struct foo {
  int bar;
  foo() : bar(3) {}   //look, a constructor
  int getBar() 
  { 
    return bar; 
  }
};

foo f;
int y = f.getBar(); // y is 3
</code></pre>
","13125960"
"Qt c++ aggregate 'std::stringstream ss' has incomplete type and cannot be defined","84157","","<p>I have this function in my program that converts integers to strings:</p>

<pre><code>    QString Stats_Manager::convertInt(int num)
    {
        stringstream ss;
        ss &lt;&lt; num;
        return ss.str();
    }
</code></pre>

<p>But when ever i run this i get the error:</p>

<pre><code>aggregate 'std::stringstream ss' has incomplete type and cannot be defined
</code></pre>

<p>Im not really sure what that means. But if you now how to fix it or need any more code please just comment. Thanks.</p>
","<p>You probably have a forward declaration of the class, but haven't included the header:</p>

<pre><code>#include &lt;sstream&gt;

//...
QString Stats_Manager::convertInt(int num)
{
    std::stringstream ss;   // &lt;-- also note namespace qualification
    ss &lt;&lt; num;
    return ss.str();
}
</code></pre>
","11751527"
"Simple hashmap implementation in C++","84156","","<p>I'm relatively new to C++. In Java, it's easy for me to instantiate and use a hashmap. I'd like to know how to do it in a simple way in C++, since I saw many different implementations and none of them looked simple to me.</p>
","<p>Most compilers should define <code>std::hash_map</code> for you; in the coming <code>C++0x</code> standard, it will be part of the standard library as <a href=""http://en.cppreference.com/w/cpp/container/unordered_map"" rel=""noreferrer""><code>std::unordered_map</code></a>. The <a href=""http://www.sgi.com/tech/stl/hash_map.html"" rel=""noreferrer"">STL Page</a> on it is fairly standard. If you use Visual Studio, <a href=""http://msdn.microsoft.com/en-us/library/6x7w9f6z(VS.71).aspx"" rel=""noreferrer"">Microsoft</a> has a page on it.</p>

<p>If you want to use your class as the value, not as the key, then you don't need to do anything special. All primitive types (things like <code>int</code>, <code>char</code>, <code>bool</code> and even <code>char *</code>) should ""just work"" as keys in a <code>hash_map</code>. However, for anything else you will have to define your own hashing and equality functions and then write ""functors"" that wrap them in a class.</p>

<p>Assuming your class is called <code>MyClass</code> and you have already defined:</p>

<pre><code>size_t MyClass::HashValue() const { /* something */ }
bool MyClass::Equals(const MyClass&amp; other) const { /* something */ }
</code></pre>

<p>You will need to define two functors to wrap those methods in objects.</p>

<pre><code>struct MyClassHash {
  size_t operator()(const MyClass&amp; p) const {
    return p.HashValue();
  }
};

struct MyClassEqual {
  bool operator()(const MyClass&amp; c1, const MyClass&amp; c2) const {
    return c1.Equals(c2);
  }
};
</code></pre>

<p>And instantiate your <code>hash_map</code>/<code>hash_set</code> as:</p>

<pre><code>hash_map&lt;MyClass, DataType, MyClassHash, MyClassEqual&gt; my_hash_map;
hash_set&lt;MyClass, MyClassHash, MyClassEqual&gt; my_hash_set;
</code></pre>

<p>Everything should work as expected after that.</p>
","266233"
"Testing pointers for validity (C/C++)","84113","","<p>Is there any way to determine (programatically, of course) if a given pointer is ""valid""? Checking for NULL is easy, but what about things like 0x00001234? When trying to dereference this kind of pointer an exception/crash occurs.</p>

<p>A cross-platform method is preferred, but platform-specific (for Windows and Linux) is also ok.</p>

<p><strong>Update for clarification:</strong>
The problem is not with stale/freed/uninitialized pointers; instead, I'm implementing an API that takes pointers from the caller (like a pointer to a string, a file handle, etc.). The caller can send (in purpose or by mistake) an invalid value as the pointer. How do I prevent a crash?</p>
","<blockquote>
  <p><strong>Update for clarification:</strong> The problem is not with stale, freed or uninitialized pointers; instead, I'm implementing an API that takes pointers from the caller (like a pointer to a string, a file handle, etc.). The caller can send (in purpose or by mistake) an invalid value as the pointer. How do I prevent a crash?</p>
</blockquote>

<p>You can't make that check. There is simply no way you can check whether a pointer is ""valid"". You have to trust that when people use a function that takes a pointer, those people know what they are doing. If they pass you 0x4211 as a pointer value, then you have to trust it points to address 0x4211. And if they ""accidentally"" hit an object, then even if you would use some scary operation system function (IsValidPtr or whatever), you would still slip into a bug and not fail fast.</p>

<p>Start using null pointers for signaling this kind of thing and tell the user of your library that they should not use pointers if they tend to accidentally pass invalid pointers, seriously :)</p>
","551124"
"C++ vector of char array","84025","","<p>I am trying to write a program that has a vector of char arrays and am have some problems.</p>

<pre><code>char test [] = { 'a', 'b', 'c', 'd', 'e' };

vector&lt;char[]&gt; v;

v.push_back(test);
</code></pre>

<p>Sorry this has to be a char array because I need to be able to generate lists of chars as I am  trying to get an output something like.</p>

<p>a a
a b
a c
a d
a e
b a
b c</p>

<p>Can anyone point me in the right direction?</p>

<p>Thanks</p>
","<p>You cannot store arrays in vectors (or in any other standard library container). The things that standard library containers store must be copyable and assignable, and arrays are neither of these.</p>

<p>If you really need to put an array in a vector (and you probably don't - using a vector of vectors or  a vector of strings is more likely what you need), then you can wrap the array in a struct:</p>

<pre><code>struct S {
  char a[10];
};
</code></pre>

<p>and then create a vector of structs:</p>

<pre><code>vector &lt;S&gt; v;
S s;
s.a[0] = 'x';
v.push_back( s );
</code></pre>
","2392319"
"Unsigned keyword in C++","83943","","<p>Does the unsigned keyword default to a specific data type in C++?  I am trying to write a function for a class for the prototype:</p>

<pre><code>unsigned Rotate(unsigned object, int count)
</code></pre>

<p>But I don't really get what <code>unsigned</code> means. Shouldn't it be like <code>unsigned int</code> or something?</p>
","<p>From the <a href=""http://en.cppreference.com/w/cpp/language/types"" rel=""noreferrer"">link</a> above:</p>

<blockquote>
  <p>Several of these types can be modified using the keywords signed, unsigned, short, and long. When one of these type modifiers is used by itself, a data type of int is assumed</p>
</blockquote>

<p>This means that you can assume the author is using ints.</p>
","2099873"
"Is it better in C++ to pass by value or pass by constant reference?","83757","","<p>Is it better in C++ to pass by value or pass by constant reference?</p>

<p>I am wondering which is better practice.  I realize that pass by constant reference should provide for better performance in the program because you are not making a copy of the variable.  </p>
","<p>It used to be generally recommended best practice<sup>1</sup> to <strong>use pass by const ref for <em>all types</em>, except for builtin types (<code>char</code>, <code>int</code>, <code>double</code>, etc.), for iterators and for function objects</strong> (lambdas, classes deriving from <code>std::*_function</code>).</p>

<p>This was especially true before the existence of <em>move semantics</em>. The reason is simple: if you passed by value, a copy of the object had to be made and, except for very small objects, this is always more expensive than passing a reference.</p>

<p>With C++11, we have gained <a href=""https://stackoverflow.com/q/3106110/1968""><em>move semantics</em></a>. In a nutshell, move semantics permit that, in some cases, an object can be passed “by value” without copying it. In particular, this is the case when the object that you are passing is an <a href=""https://stackoverflow.com/q/3601602/1968""><em>rvalue</em></a>.</p>

<p>In itself, moving an object is still at least as expensive as passing by reference. However, in many cases a function will internally copy an object anyway — i.e. it will take <em>ownership</em> of the argument.<sup>2</sup></p>

<p>In these situations we have the following (simplified) trade-off:</p>

<ol>
<li>We can pass the object by reference, then copy internally.</li>
<li>We can pass the object by value.</li>
</ol>

<p>“Pass by value” still causes the object to be copied, unless the object is an rvalue. In the case of an rvalue, the object can be moved instead, so that the second case is suddenly no longer “copy, then move” but “move, then (potentially) move again”.</p>

<p>For large objects that implement proper move constructors (such as vectors, strings …), the second case is then <em>vastly</em> more efficient than the first. Therefore, it is recommended to <strong>use pass by value if the function takes ownership of the argument, and if the object type supports efficient moving</strong>.</p>

<hr>

<p>A historical note:</p>

<p>In fact, any modern compiler should be able to figure out when passing by value is expensive, and implicitly convert the call to use a const ref if possible.</p>

<p><em>In theory.</em> In practice, compilers can’t always change this without breaking the function’s binary interface. In some special cases (when the function is inlined) the copy will actually be elided if the compiler can figure out that the original object won’t be changed through the actions in the function.</p>

<p>But in general the compiler can’t determine this, and the advent of move semantics in C++ has made this optimisation much less relevant.</p>

<hr>

<p><sup>1</sup> E.g. in Scott Meyers, <em>Effective C++</em>.</p>

<p><sup>2</sup> This is especially often true for object constructors, which may take arguments and store them internally to be part of the constructed object’s state.</p>
","270435"
"Struct with template variables in C++","83625","","<p>I'm playing around with templates. I'm not trying to reinvent the std::vector, I'm trying to get a grasp of templateting in C++.</p>

<p>Can I do the following?</p>

<pre><code>template &lt;typename T&gt;
typedef struct{
  size_t x;
  T *ary;
}array;
</code></pre>

<p>What I'm trying to do is a basic templated version of:</p>

<pre><code>typedef struct{
  size_t x;
  int *ary;
}iArray;
</code></pre>

<p>It looks like it's working if I use a class instead of struct, so is it not possible with typedef structs?</p>
","<p>The problem is you can't template a typedef, also there is no need to typedef structs in C++.</p>

<p>The following will do what you need</p>

<pre><code>template &lt;typename T&gt; 
struct array { 
  size_t x; 
  T *ary; 
}; 
</code></pre>
","2448307"
"Convert char * to LPWSTR","83616","","<p>I am trying to convert a program for multibyte character to Unicode.</p>

<p>I have gone through the program and preceded the string literals with <code>L</code> so they look like <code>L""string""</code>.</p>

<p>This has worked but I am now left with a C style string that won't conform. I have tried the <code>L</code> and putting it in <code>TEXT()</code> but the <code>L</code> gets added to the variable name -- not the string -- if I use <code>TEXT()</code>.</p>

<p>I have tried making it a <code>TCHAR</code> but then it complains that it cannot convert a <code>TCHAR</code> to a <code>char *</code>. </p>

<p>What options am I left with?</p>

<p>Before you downvote like crazy I know C and C++ are different. It is an old in-house C library that has been used in C++ projects for several years now.</p>
","<p>The <a href=""http://en.cppreference.com/w/cpp/string/multibyte/mbstowcs""><code>std::mbstowcs</code></a> function is what you are looking for:</p>

<pre><code> char text[] = ""something"";
 wchar_t wtext[20];
 mbstowcs(wtext, text, strlen(text)+1);//Plus null
 LPWSTR ptr = wtext;
</code></pre>

<p>--> ED: The ""L"" prefix only works on string literals, not variables. &lt;--  </p>
","6858585"
"64-bit version of Boost for 64-bit windows","83583","","<p>Is there a version of 64-bit Boost library for VS2008 ?
Or do I have to compile one myself? if, so, does anyone have experience with it?</p>
","<p>As a short answer:</p>

<pre><code>bjam --toolset=msvc-9.0 address-model=64 --build-type=complete
</code></pre>

<p>As a longer answer, here are my build notes for having VS .NET 2008 32-bit and 64-bit boost libraries in the same hierarchy (which is I suspect a common use case):</p>

<ol>
<li><p>Build the win32 binaries</p>

<pre><code>bjam --toolset=msvc-9.0 --build-type=complete stage
</code></pre></li>
<li><p>Create the directory lib\win32</p></li>
<li>Move the contents of stage\lib to lib\win32</li>
<li>Remove the directories bin.v2 and stage</li>
<li><p>Build the x64 binaries</p>

<pre><code>bjam --toolset=msvc-9.0 address-model=64 --build-type=complete stage
</code></pre></li>
<li><p>Create the directory lib\x64</p></li>
<li>Move the contents of stage\lib to lib\x64</li>
<li>Remove the directories bin.v2 and stage</li>
</ol>
","2326485"
"How do I make a C++ macro behave like a function?","83563","","<p>Let's say that for some reason you need to write a macro: <code>MACRO(X,Y)</code>.  <strong>(Let's assume there's a good reason you can't use an inline function.)</strong>  You want this macro to emulate a call to a function with no return value.</p>

<hr>

<h3>Example 1: This should work as expected.</h3>

<pre><code>if (x &gt; y)
  MACRO(x, y);
do_something();
</code></pre>

<h3>Example 2: This should not result in a compiler error.</h3>

<pre><code>if (x &gt; y)
  MACRO(x, y);
else
  MACRO(y - x, x - y);
</code></pre>

<h3>Example 3: This should <em>not</em> compile.</h3>

<pre><code>do_something();
MACRO(x, y)
do_something();
</code></pre>

<hr>

<p>The naïve way to write the macro is like this:</p>

<pre><code>#define MACRO(X,Y)                       \
cout &lt;&lt; ""1st arg is:"" &lt;&lt; (X) &lt;&lt; endl;    \
cout &lt;&lt; ""2nd arg is:"" &lt;&lt; (Y) &lt;&lt; endl;    \
cout &lt;&lt; ""Sum is:"" &lt;&lt; ((X)+(Y)) &lt;&lt; endl;
</code></pre>

<p>This is a very bad solution which fails all three examples, and I shouldn't need to explain why.</p>

<p><strong>Ignore what the macro actually does, that's not the point.</strong></p>

<hr>

<p>Now, the way I most often see macros written is to enclose them in curly braces, like this:</p>

<pre><code>#define MACRO(X,Y)                         \
{                                          \
  cout &lt;&lt; ""1st arg is:"" &lt;&lt; (X) &lt;&lt; endl;    \
  cout &lt;&lt; ""2nd arg is:"" &lt;&lt; (Y) &lt;&lt; endl;    \
  cout &lt;&lt; ""Sum is:"" &lt;&lt; ((X)+(Y)) &lt;&lt; endl;  \
}
</code></pre>

<p>This solves example 1, because the macro is in one statement block.  But example 2 is broken because we put a semicolon after the call to the macro.  This makes the compiler think the semicolon is a statement by itself, which means the else statement doesn't correspond to any if statement!  And lastly, example 3 compiles OK, even though there is no semicolon, because a code block doesn't need a semicolon.</p>

<hr>

<p>Is there a way to write a macro so that it pass all three examples?</p>

<hr>

<p><i>Note: I am submitting my own answer as part of the <a href=""https://stackoverflow.com/questions/162246/is-stack-overflow-appropriate-for-sharing-knowledge-tips-tricks-and-interesting"">accepted way of sharing a tip</a>, but if anyone has a better solution feel free to post it here, it may get more votes than my method. :)</i></p>
","<p>Macros should generally be avoided; prefer inline functions to them at all times. Any compiler worth its salt should be capable of inlining a small function as if it were a macro, and an inline function will respect namespaces and other scopes, as well as evaluating all the arguments once.</p>

<p>If it must be a macro, a while loop (already suggested) will work, or you can try the comma operator:</p>

<pre><code>#define MACRO(X,Y) \
 ( \
  (cout &lt;&lt; ""1st arg is:"" &lt;&lt; (X) &lt;&lt; endl), \
  (cout &lt;&lt; ""2nd arg is:"" &lt;&lt; (Y) &lt;&lt; endl), \
  (cout &lt;&lt; ""3rd arg is:"" &lt;&lt; ((X) + (Y)) &lt;&lt; endl), \
  (void)0 \
 )
</code></pre>

<p>The <code>(void)0</code> causes the statement to evaluate to one of <code>void</code> type, and the use of commas rather than semicolons allows it to be used inside a statement, rather than only as a standalone. I would still recommend an inline function for a host of reasons, the least of which being scope and the fact that <code>MACRO(a++, b++)</code> will increment <code>a</code> and <code>b</code> twice.</p>
","163417"
"Passing Arrays to Function in C++","83418","","<pre><code>#include &lt;iostream&gt;
using namespace std;

void printarray (int arg[], int length) {
    for (int n = 0; n &lt; length; n++) {
        cout &lt;&lt; arg[n] &lt;&lt; "" "";
        cout &lt;&lt; ""\n"";
    }
}

int main ()
{
     int firstarray[] = {5, 10, 15};
     int secondarray[] = {2, 4, 6, 8, 10};
     printarray(firstarray, 3);
     printarray(secondarray, 5);

     return 0;
}
</code></pre>

<p>This code works, but I want to understand how is the array being passed.</p>

<p>When a call is made to the <code>printarray</code> function from the main function, the name of the array is being passed. The name of the array refers to the address of the first element of the array. How does this equate to <code>int arg[]</code>?</p>
","<p>The syntaxes</p>

<pre><code>int[]
</code></pre>

<p>and</p>

<pre><code>int[X] // Where X is a compile-time positive integer
</code></pre>

<p>Are exactly the same as</p>

<pre><code>int*
</code></pre>

<p>When in a function parameter list (I left out the optional names).</p>

<p>Additionally, an array name decays to a pointer to the first element when passed to a function (and not passed by reference) so both <code>int firstarray[3]</code> and <code>int secondarray[5]</code> decay to <code>int*</code>s.</p>

<p>It also happens that both an array dereference and a pointer dereference with subscript syntax (subscript syntax is <code>x[y]</code>) yield an lvalue to the same element when you use the same index.</p>

<p>These three rules combine to make the code legal and work how you expect; it just passes pointers to the function, along with the length of the arrays which you cannot know after the arrays decay to pointers.</p>
","14309142"
"read input separated by whitespace(s) or newline...?","83406","","<p>I'm grabbing input from a standard input stream. Such as,</p>

<pre><code>1 2 3 4 5
</code></pre>

<p>or</p>

<pre><code>1
2
3
4
5
</code></pre>

<p>I'm using:</p>

<pre><code>std::string in;
std::getline(std::cin, in);
</code></pre>

<p>But that just grabs upto the newline, correct? How can I get input whether they are separated by newline OR whitespace(s) using only iosteam, string, and cstdlib?</p>
","<p>Just use:</p>

<pre><code>your_type x;
while (std::cin &gt;&gt; x)
{
    // use x
}
</code></pre>

<p><code>operator&gt;&gt;</code> will skip whitespace by default.  You can chain things to read several variables at once:</p>

<pre><code>if (std::cin &gt;&gt; my_string &gt;&gt; my_number)
    // use them both
</code></pre>

<p><code>getline()</code> reads everything on a single line, returning that whether it's empty or contains dozens of space-separated elements.  If you provide the optional alternative delimiter ala <code>getline(std::cin, my_string, ' ')</code> it still won't do what you seem to want, e.g. tabs will be read into <code>my_string</code>.</p>

<p>Probably not needed for this, but a fairly common requirement that you may be interested in sometime soon is to read a single newline-delimited line, then split it into components...</p>

<pre><code>std::string line;
while (std::getline(std::cin, line))
{
    std::istringstream iss(line);
    first_type first_on_line;
    second_type second_on_line;
    third_type third_on_line;
    if (iss &gt;&gt; first_on_line &gt;&gt; second_on_line &gt;&gt; third_on_line)
        ...
}
</code></pre>
","5738922"
"C++ queue - simple example","83214","","<p>I can't find simple example how to use queues in C++ for pointers to some myclass objects. I have code like this:</p>

<pre><code>class myclass{
  string s;
};

myclass *p = new myclass();

my_queue.push(p);

//something....

p = my_queue.front();
my_queue.pop();

std::cout &lt;&lt; p-&gt;s;
</code></pre>

<p>What should be <strong>declaration of my_queue</strong>? Should I use queue or another data structure?</p>

<p>I need c++ just for small program, <strong>thanks</strong> for answers.</p>
","<p>Simply declare it as below if you want to us the STL queue container.</p>

<pre><code>std::queue&lt;myclass*&gt; my_queue;
</code></pre>
","4592942"
"What is the size of a pointer?","83213","","<p>Is the size of a pointer the same as the size as the type its pointing to, or do pointers always have a fixed size?  For example...</p>

<pre><code>int x = 10;
int * xPtr = &amp;x;
char y = 'a';
char * yPtr = &amp;y;

std::cout &lt;&lt; sizeof(x) &lt;&lt; ""\n"";
std::cout &lt;&lt; sizeof(xPtr) &lt;&lt; ""\n"";
std::cout &lt;&lt; sizeof(y) &lt;&lt; ""\n"";
std::cout &lt;&lt; sizeof(yPtr) &lt;&lt; ""\n"";
</code></pre>

<p>What would the output of this be?  Would <code>sizeof(xPtr)</code> return 4 and <code>sizeof(yPtr)</code> return 1, or would the 2 pointers actually return the same size?  The reason I ask this is because the pointers are storing a memory address and not the values of their respective stored addresses.</p>
","<p>Pointers generally have a fixed size, for ex. on a 32-bit executable they're usually 32-bit.  There are some exceptions, like on old 16-bit windows when you had to distinguish between 32-bit pointers and 16-bit...  It's usually pretty safe to assume they're going to be uniform within a given executable on modern desktop OS's.</p>

<p>Edit: Even so, I would strongly caution against making this assumption <em>in your code</em>.  If you're going to write something that absolutely has to have a pointers of a certain size, you'd better check it!</p>

<p>Function pointers are a different story -- see <a href=""https://stackoverflow.com/a/6751914/2642059"">Jens' answer</a> for more info.</p>
","6751809"
"Advantage of switch over if-else statement","83180","","<p>What's the best practice for using a <code>switch</code> statement vs using an <code>if</code> statement for 30 <code>unsigned</code> enumerations where about 10 have an expected action (that presently is the same action). Performance and space need to be considered but are not critical.  I've abstracted the snippet so don't hate me for the naming conventions.</p>

<p><code>switch</code> statement:</p>

<pre><code>// numError is an error enumeration type, with 0 being the non-error case
// fire_special_event() is a stub method for the shared processing

switch (numError)
{  
  case ERROR_01 :  // intentional fall-through
  case ERROR_07 :  // intentional fall-through
  case ERROR_0A :  // intentional fall-through
  case ERROR_10 :  // intentional fall-through
  case ERROR_15 :  // intentional fall-through
  case ERROR_16 :  // intentional fall-through
  case ERROR_20 :
  {
     fire_special_event();
  }
  break;

  default:
  {
    // error codes that require no additional action
  }
  break;       
}
</code></pre>

<p><code>if</code> statement:</p>

<pre><code>if ((ERROR_01 == numError)  ||
    (ERROR_07 == numError)  ||
    (ERROR_0A == numError)  || 
    (ERROR_10 == numError)  ||
    (ERROR_15 == numError)  ||
    (ERROR_16 == numError)  ||
    (ERROR_20 == numError))
{
  fire_special_event();
}
</code></pre>
","<p>Use switch.</p>

<p>In the worst case the compiler will generate the same code as a if-else chain, so you don't lose anything. If in doubt put the most common cases first into the switch statement.</p>

<p>In the best case the optimizer may find a better way to generate the code. Common things a compiler does is to build a binary decision tree (saves compares and jumps in the average case) or simply build a jump-table (works without compares at all).</p>
","98024"
"""Multiple definition of"" C++ compiler error","83166","","<p>I can't seem to get rid of these seemingly random compiles errors in one of my classes.
I get about 4 errors such as:</p>

<pre><code>multiple definition of `draw_line(float, float, float, float)'
</code></pre>

<p>and</p>

<pre><code>multiple definition of `near_far_clip(float, float, float*, float*, float*, float*, float*, float*)'
</code></pre>

<p>that are flagged in the middle of the method.</p>

<p>I also consistently get <code>multiple definition of `stack'</code> in the middle of another method. <code>stack</code> is a global variable in a totally different file. It isn't even mentioned in the file I'm getting the error in.</p>

<p>I tried separating the error prone file into .h and .cpp files (was originally just a .cpp) and nothing about the error changed...</p>

<p>I don't have duplicate methods. I only have one <code>#include</code> of lines.h and there is an <code>#ifndef</code> clause at the beginning. All these errors appear in the .cpp file.</p>

<p>Any ideas what it could be?</p>

<p>Alright, I got the code up:</p>

<ul>
<li><a href=""http://code.bulix.org/wrmmiw-70109"" rel=""noreferrer"">lines.cpp</a>  </li>
<li><a href=""http://code.bulix.org/l2milw-70110"" rel=""noreferrer"">ThreeD.cpp</a>  </li>
<li><a href=""http://code.bulix.org/e50rga-70111"" rel=""noreferrer"">ThreeD.h</a>  </li>
<li><a href=""http://code.bulix.org/3ctuqy-70112"" rel=""noreferrer"">makefile</a>  </li>
</ul>

<p>The lines.cpp is a converted .c file I received from my instructor. I included the makefile just in case, because I always have problems with it. I also annotated exactly where the errors were flagged in the file, but they seem pretty random so I don't know if it's particularly important. I abandoned the .h file because it wasn't solving anything or helping. I believe it will be easier to find the mistake without it.</p>

<p>Here is the requested <a href=""http://code.bulix.org/9img79-70113"" rel=""noreferrer"">main.cpp file</a> (there is no .h).</p>

<hr>

<p>I remade the lines.h file due to and I'm still receiving the:</p>

<pre><code>multiple definition of `draw_line(float, float, float, float)'
</code></pre>

<p>and</p>

<pre><code>multiple definition of `near_far_clip(float, float, float*, float*, float*, float*, float*, float*)'
</code></pre>

<p>errors in the lines.cpp file, but the <code>multiple definition of `stack'</code> error is now in a random place in the ThreeD.cpp file (and is marked by a comment now). <strong>Update:</strong> This error has been fixed and the files have been revised to show this:</p>

<ul>
<li><a href=""http://code.bulix.org/pl0ha3-70114"" rel=""noreferrer"">lines.h</a></li>
<li><a href=""http://code.bulix.org/en2iiq-70124"" rel=""noreferrer"">lines.cpp</a></li>
<li><a href=""http://code.bulix.org/ec1l4c-70125"" rel=""noreferrer"">ThreeD.cpp</a></li>
<li><a href=""http://code.bulix.org/cm691a-70117"" rel=""noreferrer"">ThreeD.h</a></li>
</ul>

<p>I messed around with labeling some the global variables extern, but it didn't seem to affect anything.</p>
","<p>Why do you #include lines.cpp in ThreeD.cpp?  This is very unusual.</p>

<p>Your makefile wants lines.o, so you're going to compile lines.cpp.  Anything defined in lines.cpp will be in lines.o and also in ThreeD.o.</p>

<p>There is an intriguing comment in lines.cpp:</p>

<pre><code>Don't forget to put declarations in your .h files. 
</code></pre>

<p>I think the instructor wants you to break lines.cpp into a .h and a .cpp.</p>

<p>Excerpt from lines.cpp:</p>

<pre><code>/* These go in your .h file or in lines.h */
/*

Line drawing header.

*/


void draw_line(float, float, float, float);
int near_far_clip(float, float, float *, float *, float *, float *,
                  float *, float *);
</code></pre>

<p>I suspect that these two declarations are the only thing that should be in lines.h.</p>
","685727"
"Installing Raspberry Pi Cross-Compiler","83147","","<p>I am attempting to get cross-compiling for Raspberry Pi working on my Ubuntu machine. </p>

<p>During my initial attempts I was using the arm-linux-gnueabi compiler, which is available in the Ubuntu repo. I got this working. I was able to build all my dependencies and use the cross-compiler in my cmake project.</p>

<p>However, I believe I should be using the hf version, so I switched to arm-linux-gnueabihf. Then I realized that this does not work with Raspberry Pi since it is armv6.</p>

<p>After some Googling, I then found the pre-built toolchain from GitHub: <a href=""https://github.com/raspberrypi/tools"">https://github.com/raspberrypi/tools</a>. </p>

<p>I downloaded the toolchain, but I don't really understand how to ""install"" it. I extracted the files to my home directory. The directory structure looks like this:</p>

<pre><code>/gcc-linearo-arm-linux-gnueabihf-raspbian
    /arm-linux-gnueabihf
        /bin
            (contains g++, gcc, etc)
        /lib
            (contains libstdc++ library)
    /bin
        (contains arm-linux-gnueabihf-g++, arm-linux-gnueabihf-...)
    /lib
        (gcc lib stuff)
</code></pre>

<p>If I change directory to the INNER bin folder I am able to compile a test program from the terminal without any problems.</p>

<pre><code>~/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/
arm-linux-gnueabihf/bin$ g++ test.cpp -o test
</code></pre>

<p>I then tried to compile a test program in the OUTER bin folder, which contains the prefixed versions of the tools.</p>

<pre><code> ~/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin$ 
 arm-linux-gnueabihf-g++ test.cpp -o test
</code></pre>

<p>However, when I try to use the compiler now (from outside the inner bin directory), it is unable to find the libstdc++ shared library that comes with the toolchain:</p>

<pre><code>arm-linux-gnueabihf-gcc: error while loading shared libraries: 
libstdc++.so.6: cannot open shared object file: No such file or directory.
</code></pre>

<p>Furthermore, I want to be able to use the compiler without having to navigate to the bin directory. So I tried adding the OUTER bin directory (since I want the prefixed versions) and both lib directories to my PATH:</p>

<pre><code>export PATH=$PATH:~/tools/.../bin
export PATH=$PATH:~/tools/.../lib
export PATH=$PATH:~/tools/.../.../lib
</code></pre>

<p>However, this results in the same error. How should I ""install"" the toolchain so that I can use the toolchain from everywhere, just like I can when I use the cross-compilers from the Ubuntu repo?</p>
","<p>I'm gonna try to write this as a tutorial for you so it becomes easy to follow.</p>

<h2>Pre-requirements</h2>

<p>Before you start you need to make sure the following is installed:</p>

<pre><code>apt-get install git rsync cmake ia32-libs
</code></pre>

<h2>Let's cross compile a Pie!</h2>

<p>Start with making a folder in your home directory called <code>raspberrypi</code>.</p>

<p>Go in to this folder and pull down the ENTIRE tools folder you mentioned above:</p>

<pre><code>git clone git://github.com/raspberrypi/tools.git
</code></pre>

<p>You wanted to use the following of the 3 ones, <code>gcc-linaro-arm-linux-gnueabihf-raspbian</code>, if I did not read wrong.</p>

<p>Go into your home directory and add:</p>

<pre><code>export PATH=$PATH:$HOME/raspberrypi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin
</code></pre>

<p>to the end of the file named <code>~/.bashrc</code></p>

<p>Now you can either log out and log back in (i.e. restart your terminal session), or run <code>. ~/.bashrc</code> in your terminal to pick up the <code>PATH</code> addition in your current terminal session.</p>

<p>Now, verify that you can access the compiler <code>arm-linux-gnueabihf-gcc -v</code>. You should get something like this:</p>

<pre><code>Using built-in specs.
COLLECT_GCC=arm-linux-gnueabihf-gcc
COLLECT_LTO_WRAPPER=/home/tudhalyas/raspberrypi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin/../libexec/gcc/arm-linux-gnueabihf/4.7.2/lto-wrapper
Target: arm-linux-gnueabihf
Configured with: /cbuild/slaves/oort61/crosstool-ng/builds/arm-linux-gnueabihf-raspbian-linux/.b
 uild/src/gcc-linaro-4.7-2012.08/configure --build=i686-build_pc-linux-gnu --host=i686-build_pc-
 linux-gnu --target=arm-linux-gnueabihf --prefix=/cbuild/slaves/oort61/crosstool-ng/builds/arm-l
 inux-gnueabihf-raspbian-linux/install --with-sysroot=/cbuild/slaves/oort61/crosstool-ng/builds/
 arm-linux-gnueabihf-raspbian-linux/install/arm-linux-gnueabihf/libc --enable-languages=c,c++,fo
 rtran --disable-multilib --with-arch=armv6 --with-tune=arm1176jz-s --with-fpu=vfp --with-float=
 hard --with-pkgversion='crosstool-NG linaro-1.13.1+bzr2458 - Linaro GCC 2012.08' --with-bugurl=
 https://bugs.launchpad.net/gcc-linaro --enable-__cxa_atexit --enable-libmudflap --enable-libgom
 p --enable-libssp --with-gmp=/cbuild/slaves/oort61/crosstool-ng/builds/arm-linux-gnueabihf-rasp
 bian-linux/.build/arm-linux-gnueabihf/build/static --with-mpfr=/cbuild/slaves/oort61/crosstool-
 ng/builds/arm-linux-gnueabihf-raspbian-linux/.build/arm-linux-gnueabihf/build/static --with-mpc
 =/cbuild/slaves/oort61/crosstool-ng/builds/arm-linux-gnueabihf-raspbian-linux/.build/arm-linux-
 gnueabihf/build/static --with-ppl=/cbuild/slaves/oort61/crosstool-ng/builds/arm-linux-gnueabihf
 -raspbian-linux/.build/arm-linux-gnueabihf/build/static --with-cloog=/cbuild/slaves/oort61/cros
 stool-ng/builds/arm-linux-gnueabihf-raspbian-linux/.build/arm-linux-gnueabihf/build/static --wi
 th-libelf=/cbuild/slaves/oort61/crosstool-ng/builds/arm-linux-gnueabihf-raspbian-linux/.build/a
 rm-linux-gnueabihf/build/static --with-host-libstdcxx='-L/cbuild/slaves/oort61/crosstool-ng/bui
 lds/arm-linux-gnueabihf-raspbian-linux/.build/arm-linux-gnueabihf/build/static/lib -lpwl' --ena
 ble-threads=posix --disable-libstdcxx-pch --enable-linker-build-id --enable-plugin --enable-gol
 d --with-local-prefix=/cbuild/slaves/oort61/crosstool-ng/builds/arm-linux-gnueabihf-raspbian-li
 nux/install/arm-linux-gnueabihf/libc --enable-c99 --enable-long-long
Thread model: posix
gcc version 4.7.2 20120731 (prerelease) (crosstool-NG linaro-1.13.1+bzr2458 - Linaro GCC 2012.08
 )
</code></pre>

<h2>But hey! I did that and the libs still don't work!</h2>

<p>We're not done yet! So far, we've only done the basics.</p>

<p>In your <code>raspberrypi</code> folder, make a folder called <code>rootfs</code>.</p>

<p>Now you need to copy the entire <code>/lib</code>and <code>/usr</code> directory to this newly created folder. I usually bring the rpi image up and copy it via rsync:</p>

<pre><code>rsync -rl --delete-after --safe-links pi@192.168.1.PI:/{lib,usr} $HOME/raspberrypi/rootfs
</code></pre>

<p>where <code>192.168.1.PI</code> is replaced by the IP of your Raspberry Pi.</p>

<p>Now, we need to write a <code>cmake</code> config file. Open <code>~/home/raspberrypi/pi.cmake</code> in your favorite editor and insert the following:</p>

<pre><code>SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_VERSION 1)
SET(CMAKE_C_COMPILER $ENV{HOME}/raspberrypi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin/arm-linux-gnueabihf-gcc)
SET(CMAKE_CXX_COMPILER $ENV{HOME}/raspberrypi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin/arm-linux-gnueabihf-g++)
SET(CMAKE_FIND_ROOT_PATH $ENV{HOME}/raspberrypi/rootfs)
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
</code></pre>

<p>Now you should be able to compile your <code>cmake</code> programs simply by adding this extra flag: <code>-D CMAKE_TOOLCHAIN_FILE=$HOME/raspberrypi/pi.cmake</code>. </p>

<p>Using a <a href=""https://github.com/jameskbride/cmake-hello-world"">cmake hello world</a> example:</p>

<pre><code>git clone https://github.com/jameskbride/cmake-hello-world.git 
cd cmake-hello-world
mkdir build
cd build
cmake -D CMAKE_TOOLCHAIN_FILE=$HOME/raspberrypi/pi.cmake ../
make
scp CMakeHelloWorld pi@192.168.1.PI:/home/pi/
ssh pi@192.168.1.PI ./CMakeHelloWorld
</code></pre>
","19269715"
"pointer to array c++","83146","","<p>What is the following code doing?</p>

<pre><code>int g[] = {9,8};
int (*j) = g;
</code></pre>

<p>From my understanding its creating a pointer to an array of 2 ints.
But then why does this work:</p>

<pre><code>int x = j[0];
</code></pre>

<p>and this not work:</p>

<pre><code>int x = (*j)[0];
</code></pre>
","<p>The parenthesis are superfluous in your example. The pointer doesn't care whether there's an array involved - it only knows that its pointing to an <strong>int</strong></p>

<pre><code>  int g[] = {9,8};
  int (*j) = g;
</code></pre>

<p>could also be rewritten as </p>

<pre><code>  int g[] = {9,8};
  int *j = g;
</code></pre>

<p>which could also be rewritten as</p>

<pre><code>  int g[] = {9,8};
  int *j = &amp;g[0];
</code></pre>

<p>a pointer-to-an-array would look like</p>

<pre><code>  int g[] = {9,8};
  int (*j)[2] = &amp;g;

  //Dereference 'j' and access array element zero
  int n = (*j)[0];
</code></pre>

<p>There's a good read on pointer declarations (and how to grok them) at this link here: <a href=""http://www.codeproject.com/Articles/7042/How-to-interpret-complex-C-C-declarations"">http://www.codeproject.com/Articles/7042/How-to-interpret-complex-C-C-declarations</a></p>
","10252927"
"Get current time in milliseconds using C++ and Boost","83005","","<p>In my thread (using boost::thread) I need to retrieve the current time in ms or less and to convert into ms:</p>

<p>Actually, reading here I've found this:</p>

<pre><code>tick = boost::posix_time::second_clock::local_time();
now  = boost::posix_time::second_clock::local_time();
</code></pre>

<p>And seems to work, but after I need to have a long value of the milliseconds of the now...</p>

<p>How can I do it?</p>
","<p>You can use <code>boost::posix_time::time_duration</code> to get the time range. E.g like this</p>

<pre><code>boost::posix_time::time_duration diff = tick - now;
diff.total_milliseconds();
</code></pre>

<p>And to get a higher resolution you can change the clock you are using. For example to the <code>boost::posix_time::microsec_clock</code>, though this can be OS dependent. On Windows, for example, <code>boost::posix_time::microsecond_clock</code> has milisecond resolution, not microsecond.</p>

<p>An example which is a little dependent on the hardware.</p>

<pre><code>int main(int argc, char* argv[])
{
    boost::posix_time::ptime t1 = boost::posix_time::second_clock::local_time();
    boost::this_thread::sleep(boost::posix_time::millisec(500));
    boost::posix_time::ptime t2 = boost::posix_time::second_clock::local_time();
    boost::posix_time::time_duration diff = t2 - t1;
    std::cout &lt;&lt; diff.total_milliseconds() &lt;&lt; std::endl;

    boost::posix_time::ptime mst1 = boost::posix_time::microsec_clock::local_time();
    boost::this_thread::sleep(boost::posix_time::millisec(500));
    boost::posix_time::ptime mst2 = boost::posix_time::microsec_clock::local_time();
    boost::posix_time::time_duration msdiff = mst2 - mst1;
    std::cout &lt;&lt; msdiff.total_milliseconds() &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>On my win7 machine. The first out is either 0 or 1000. Second resolution.
The second one is nearly always 500, because of the higher resolution of the clock. I hope that help a little.</p>
","6734434"
"How large is a DWORD with 32- and 64-bit code?","82987","","<p>In Visual C++ a DWORD is just an unsigned long that is machine, platform, and SDK dependent.  However, since DWORD is a double word (that is 2 * 16), is a DWORD still 32-bit on 64-bit architectures?</p>
","<p>Actually, on 32-bit computers a word is 32-bit, but the DWORD type is a leftover from the good old days of 16-bit.</p>

<p>In order to make it easier to port programs to the newer system, Microsoft has decided all the old types will not change size.</p>

<p>You can find the official list here:
<a href=""http://msdn.microsoft.com/en-us/library/aa383751(VS.85).aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/library/aa383751(VS.85).aspx</a></p>

<p>All the platform-dependent types that changed with the transition from 32-bit to 64-bit end with _PTR (DWORD_PTR will be 32-bit on 32-bit Windows and 64-bit on 64-bit Windows).</p>
","39441"
"Why can I not push_back a unique_ptr into a vector?","82982","","<p>What is wrong with this program?</p>

<pre><code>#include &lt;memory&gt;
#include &lt;vector&gt;

int main()
{
    std::vector&lt;std::unique_ptr&lt;int&gt;&gt; vec;

    int x(1);
    std::unique_ptr&lt;int&gt; ptr2x(&amp;x);
    vec.push_back(ptr2x); //This tiny command has a vicious error.

    return 0;
}
</code></pre>

<p>The error:</p>

<pre><code>$ g++ -std=gnu++0x main.cpp
In file included from c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c+
+/mingw32/bits/c++allocator.h:34:0,
                 from c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c+
+/bits/allocator.h:48,
                 from c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c+
+/memory:64,
                 from main.cpp:6:
c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c++/bits/unique_ptr.h: I
n member function 'void __gnu_cxx::new_allocator&lt;_Tp&gt;::construct(_Tp*,
 const _Tp&amp;) [with _Tp = std::unique_ptr&lt;int&gt;, _Tp* = std::unique_ptr&lt;
int&gt;*]':
c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c++/bits/stl_vector.h:74
5:6:   instantiated from 'void std::vector&lt;_Tp, _Alloc&gt;::push_back(con
st value_type&amp;) [with _Tp = std::unique_ptr&lt;int&gt;, _Alloc = std::alloca
tor&lt;std::unique_ptr&lt;int&gt; &gt;, value_type = std::unique_ptr&lt;int&gt;]'
main.cpp:16:21:   instantiated from here
c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c++/bits/unique_ptr.h:20
7:7: error: deleted function 'std::unique_ptr&lt;_Tp, _Tp_Deleter&gt;::uniqu
e_ptr(const std::unique_ptr&lt;_Tp, _Tp_Deleter&gt;&amp;) [with _Tp = int, _Tp_D
eleter = std::default_delete&lt;int&gt;, std::unique_ptr&lt;_Tp, _Tp_Deleter&gt; =
 std::unique_ptr&lt;int&gt;]'
c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c++/ext/new_allocator.h:
105:9: error: used here
In file included from c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c+
+/vector:69:0,
                 from main.cpp:7:
c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c++/bits/unique_ptr.h: I
n member function 'void std::vector&lt;_Tp, _Alloc&gt;::_M_insert_aux(std::v
ector&lt;_Tp, _Alloc&gt;::iterator, _Args&amp;&amp; ...) [with _Args = {const std::u
nique_ptr&lt;int&gt;&amp;}, _Tp = std::unique_ptr&lt;int&gt;, _Alloc = std::allocator&lt;
std::unique_ptr&lt;int&gt; &gt;, std::vector&lt;_Tp, _Alloc&gt;::iterator = __gnu_cxx
::__normal_iterator&lt;std::unique_ptr&lt;int&gt;*, std::vector&lt;std::unique_ptr
&lt;int&gt; &gt; &gt;, typename std::vector&lt;_Tp, _Alloc&gt;::_Base::_Tp_alloc_type::p
ointer = std::unique_ptr&lt;int&gt;*]':
c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c++/bits/stl_vector.h:74
9:4:   instantiated from 'void std::vector&lt;_Tp, _Alloc&gt;::push_back(con
st value_type&amp;) [with _Tp = std::unique_ptr&lt;int&gt;, _Alloc = std::alloca
tor&lt;std::unique_ptr&lt;int&gt; &gt;, value_type = std::unique_ptr&lt;int&gt;]'
main.cpp:16:21:   instantiated from here
c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c++/bits/unique_ptr.h:20
7:7: error: deleted function 'std::unique_ptr&lt;_Tp, _Tp_Deleter&gt;::uniqu
e_ptr(const std::unique_ptr&lt;_Tp, _Tp_Deleter&gt;&amp;) [with _Tp = int, _Tp_D
eleter = std::default_delete&lt;int&gt;, std::unique_ptr&lt;_Tp, _Tp_Deleter&gt; =
 std::unique_ptr&lt;int&gt;]'
c:\mingw\bin\../lib/gcc/mingw32/4.5.0/include/c++/bits/vector.tcc:314:
4: error: used here
</code></pre>
","<p>You need to move the <a href=""http://en.cppreference.com/w/cpp/memory/unique_ptr"" rel=""noreferrer""><code>unique_ptr</code></a>:</p>

<pre><code>vec.push_back(std::move(ptr2x));
</code></pre>

<p><code>unique_ptr</code> guarantees that a single <code>unique_ptr</code> container has ownership of the held pointer.  This means that you can't make copies of a <code>unique_ptr</code> (because then two <code>unique_ptr</code>s would have ownership), so you can only move it.</p>

<p>Note, however, that your current use of <code>unique_ptr</code> is incorrect.  You cannot use it to manage a pointer to a local variable.  The lifetime of a local variable is managed automatically:  local variables are destroyed when the block ends (e.g., when the function returns, in this case).  You need to dynamically allocate the object:</p>

<pre><code>std::unique_ptr&lt;int&gt; ptr(new int(1));
</code></pre>
","3283795"
"OpenMP set_num_threads() is not working","82973","","<p>I am writing a parallel program using OpenMP in C++.</p>

<p>I want to control the number of threads in the program using <code>omp_set_num_threads()</code>, but it does not work.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;omp.h&gt;
#include ""mpi.h""

using namespace std;

int myrank;
int groupsize;
double sum;
double t1,t2;
int n = 10000000;

int main(int argc, char *argv[])
{
    MPI_Init( &amp;argc, &amp;argv);
    MPI_Comm_rank( MPI_COMM_WORLD, &amp;myrank );
    MPI_Comm_size(MPI_COMM_WORLD,&amp;groupsize);

    omp_set_num_threads(4);

    sum = 0;
    #pragma omp for  reduction(+:sum)
    for (int i = 0; i &lt; n; i++)
        sum+= i/(n/10);

    cout&lt;&lt;""sum=""&lt;&lt;sum&lt;&lt;endl;
    cout&lt;&lt;""threads=""&lt;&lt;omp_get_num_threads()&lt;&lt;endl;

    MPI_Finalize();
    return 0;
}
</code></pre>

<p>The program outputs:</p>

<pre><code>sum = 4.5e+007
threads=1
</code></pre>

<p>How to control the number of threads?</p>
","<p>Besides calling <code>omp_get_num_threads()</code> outside of the parallel region in your case, calling <code>omp_set_num_threads()</code> still doesn't guarantee that the OpenMP runtime will use exactly the specified number of threads. <code>omp_set_num_threads()</code> is used to override the value of the environment variable <code>OMP_NUM_THREADS</code> and they both control the <em>upper limit</em> of the size of the thread team that OpenMP would spawn for all parallel regions (in the case of <code>OMP_NUM_THREADS</code>) or for any consequent parallel region (after a call to <code>omp_set_num_threads()</code>). There is something called dynamic teams that could still pick smaller number of threads if the run-time system deems it more appropriate. You can disable dynamic teams by calling <code>omp_set_dynamic(0)</code> or by setting the environment variable <code>OMP_DYNAMIC</code> to <code>false</code>.</p>

<p>To enforce a given number of threads you should disable dynamic teams and specify the desired number of threads with either <code>omp_set_num_threads()</code>:</p>

<pre><code>omp_set_dynamic(0);     // Explicitly disable dynamic teams
omp_set_num_threads(4); // Use 4 threads for all consecutive parallel regions
#pragma omp parallel ...
{
    ... 4 threads used here ...
}
</code></pre>

<p>or with the <code>num_threads</code> OpenMP clause:</p>

<pre><code>omp_set_dynamic(0);     // Explicitly disable dynamic teams
// Spawn 4 threads for this parallel region only
#pragma omp parallel ... num_threads(4)
{
    ... 4 threads used here ...
}
</code></pre>
","11096742"
"throwing exceptions out of a destructor","82960","","<p>Most people say <em>never</em> throw an exception out of a destructor - doing so results in undefined behavior. Stroustrup makes the point that <em>""the vector destructor explicitly invokes the destructor for every element. This implies that if an element destructor throws, the vector destruction fails... There is really no good way to protect against exceptions thrown from destructors, so the library makes no guarantees if an element destructor throws"" (from Appendix E3.2)</em>.</p>

<p><a href=""http://www.kolpackov.net/projects/c++/eh/dtor-1.xhtml"" rel=""noreferrer"">This article</a> seems to say otherwise - that throwing destructors are more or less okay.</p>

<p><em>So my question is this - if throwing from a destructor results in undefined behavior, how do you handle errors that occur during a destructor?</em></p>

<p>If an error occurs during a cleanup operation, do you just ignore it? If it is an error that can potentially be handled up the stack but not right in the destructor, doesn't it make sense to throw an exception out of the destructor?</p>

<p>Obviously these kinds of errors are rare, but possible.</p>
","<p>Throwing an exception out of a destructor is dangerous.<br>
If another exception is already propagating the application will terminate.</p>

<pre><code>#include &lt;iostream&gt;

class Bad
{
    public:
        // Added the noexcept(false) so the code keeps its original meaning.
        // Post C++11 destructors are by default `noexcept(true)` and
        // this will (by default) call terminate if an exception is
        // escapes the destructor.
        //
        // But this example is designed to show that terminate is called
        // if two exceptions are propagating at the same time.
        ~Bad() noexcept(false)
        {
            throw 1;
        }
};
class Bad2
{
    public:
        ~Bad2()
        {
            throw 1;
        }
};


int main(int argc, char* argv[])
{
    try
    {
        Bad   bad;
    }
    catch(...)
    {
        std::cout &lt;&lt; ""Print This\n"";
    }

    try
    {
        if (argc &gt; 3)
        {
            Bad   bad; // This destructor will throw an exception that escapes (see above)
            throw 2;   // But having two exceptions propagating at the
                       // same time causes terminate to be called.
        }
        else
        {
            Bad2  bad; // The exception in this destructor will
                       // cause terminate to be called.
        }
    }
    catch(...)
    {
        std::cout &lt;&lt; ""Never print this\n"";
    }

}
</code></pre>

<p>This basically boils down to:</p>

<p>Anything dangerous (i.e. that could throw an exception) should be done via public methods (not necessarily directly). The user of your class can then potentially handle these situations by using the public methods and catching any potential exceptions.</p>

<p>The destructor will then finish off the object by calling these methods (if the user did not do so explicitly), but any exceptions throw are caught and dropped (after attempting to fix the problem).</p>

<p>So in affect you pass the responsibility onto the user. If the user is in a position to correct exceptions they will manually call the appropriate functions and processes any errors. If the user of the object is not worried (as the object will be destroyed) then the destructor is left to take care of business.</p>

<h1>An example:</h1>

<p>std::fstream</p>

<p>The close() method can potentially throw an exception.
The destructs calls close() if the file has been opened but makes sure that any exceptions do not propagate out of the destructor.</p>

<p>So if the user of a file object wants to do special handling for problems associated to closing the file they will manually call close() and handle any exceptions. If on the other hand they do not care then the destructor will be left to handle the situation.</p>

<p>Scott Myers has an excellent article about the subject in his book ""Effective C++""  </p>

<h3>Edit:</h3>

<p>Apparently also in ""More Effective C++""<br>
<a href=""http://bin-login.name/ftp/pub/docs/programming_languages/cpp/cffective_cpp/MEC/MI11_FR.HTM"" rel=""noreferrer"">Item 11:  Prevent exceptions from leaving destructors</a></p>
","130123"
"Getting a directory name from a filename","82945","","<p>I have a filename (C:\folder\foo.txt) and I need to retrieve the folder name (C:\folder) in unmanaged C++. In C# I would do something like this:</p>

<pre><code>string folder = new FileInfo(""C:\folder\foo.txt"").DirectoryName;
</code></pre>

<p>Is there a function that can be used in unmanaged C++ to extract the path from the filename?</p>
","<p>There is a standard Windows function for this, <a href=""https://msdn.microsoft.com/en-us/library/bb773748.aspx"" rel=""nofollow noreferrer"">PathRemoveFileSpec</a>. If you only support Windows 8 and later, it is highly recommended to use <a href=""https://msdn.microsoft.com/en-us/library/hh707092.aspx"" rel=""nofollow noreferrer"">PathCchRemoveFileSpec</a> instead. Among other improvements, it is no longer limited to <code>MAX_PATH</code> (260) characters.</p>
","3071729"
"What is *.o file?","82923","","<p>I'm compiling own project. And it halted by this error:</p>

<blockquote>
  <p>LINK||fatal error LNK1181: cannot open
  input file
  'obj\win\release\src\lua\bindings.o'|</p>
</blockquote>

<p>Compiling using Code::Blocks with VS 2005/2008 compiler under win7.
There are also lot of another empty directories where *.o files are missing.</p>

<p>What do they do?</p>
","<p>A file ending in .o is an <em>object file</em>. The compiler creates an object file for each source file, before linking them together, into the final executable.</p>
","2186252"
"Why use #ifndef CLASS_H and #define CLASS_H in .h file but not in .cpp?","82907","","<p>I have always seen people write</p>

<p>class.h</p>

<pre><code>#ifndef CLASS_H
#define CLASS_H

//blah blah blah

#endif
</code></pre>

<p>The question is, why don't they also do that for the .cpp file that contain definitions for class functions?</p>

<p>Let's say I have  <code>main.cpp</code>, and <code>main.cpp</code> includes <code>class.h</code>. The <code>class.h</code> file does not import anything, so how does <code>main.cpp</code> know what is in the <code>class.cpp</code>?</p>
","<p>First, to address your first inquiry:</p>

<p>When you see this in <strong>.h</strong> file:</p>

<pre><code>#ifndef FILE_H
#define FILE_H

/* ... Declarations etc here ... */

#endif
</code></pre>

<p>This is a preprocessor technique of preventing a header file from being included multiple times, which can be problematic for various reasons.  During compilation of your project, each <strong>.cpp</strong> file (usually) is compiled.  In simple terms, this means the compiler will take your <strong>.cpp</strong> file, open any files <code>#included</code> by it, concatenate them all into one massive text file, and then perform syntax analysis and finally it will convert it to some intermediate code, optimize/perform other tasks, and finally generate the assembly output for the target architecture.  Because of this, if a file is <code>#included</code> multiple times under one <strong>.cpp</strong> file, the compiler will append its file contents twice, so if there are definitions within that file, you will get a compiler error telling you that you redefined a variable.  When the file is processed by the preprocessor step in the compilation process, the first time its contents are reached the first two lines will check if <code>FILE_H</code> has been defined for the preprocessor.  If not, it will define <code>FILE_H</code> and continue processing the code between it and the <code>#endif</code> directive.  The next time that file's contents are seen by the preprocessor, the check against <code>FILE_H</code> will be false, so it will immediately scan down to the <code>#endif</code> and continue after it.  This prevents redefinition errors.</p>

<p>And to address your second concern:</p>

<p>In C++ programming as a general practice we separate development into two file types.  One is with an extension of <strong>.h</strong> and we call this a ""header file.""  They usually provide a declaration of functions, classes, structs, global variables, typedefs, preprocessing macros and definitions, etc.  Basically, they just provide you with information about your code.  Then we have the <strong>.cpp</strong> extension which we call a ""code file.""  This will provide definitions for those functions, class members, any struct members that need definitions, global variables, etc.  So the <strong>.h</strong> file declares code, and the <strong>.cpp</strong> file implements that declaration.  For this reason, we generally during compilation compile each <strong>.cpp</strong> file into an object and then link those objects (because you almost never see one <strong>.cpp</strong> file include another <strong>.cpp</strong> file).</p>

<p>How these externals are resolved is a job for the linker.  When your compiler processes <strong>main.cpp</strong>, it gets declarations for the code in <strong>class.cpp</strong> by including <strong>class.h</strong>.  It only needs to know what these functions or variables look like (which is what a declaration gives you).  So it compiles your <strong>main.cpp</strong> file into some object file (call it <strong>main.obj</strong>).  Similarly, <strong>class.cpp</strong> is compiled into a <strong>class.obj</strong> file.  To produce the final executable, a linker is invoked to link those two object files together.  For any unresolved external variables or functions, the compiler will place a stub where the access happens.  The linker will then take this stub and look for the code or variable in another listed object file, and if it's found, it combines the code from the two object files into an output file and replaces the stub with the final location of the function or variable.  This way, your code in main.cpp can call functions and use variables in <strong>class.cpp</strong> IF AND ONLY IF THEY ARE DECLARED IN <strong>class.h</strong>.</p>

<p>I hope this was helpful.</p>
","3247093"
"Determining if a number is prime","82805","","<p>I have perused a lot of code on this topic, but most of them produce the numbers that are prime all the way up to the input number.  However, I need code which only checks whether the given input number is prime.</p>

<p>Here is what I was able to write, but it does not work:</p>

<pre><code>void primenumber(int number)
{
    if(number%2!=0)
      cout&lt;&lt;""Number is prime:""&lt;&lt;endl;
    else 
      cout&lt;&lt;""number is NOt prime""&lt;&lt;endl;
}
</code></pre>

<p>I would appreciate if someone could give me advice on how to make this work properly.</p>

<h3>Update</h3>

<p>I modified it to check on all the numbers in a for loop.</p>

<pre><code>void primenumber(int number)
{
    for(int i=1; i&lt;number; i++)
    {
       if(number%i!=0)
          cout&lt;&lt;""Number is prime:""&lt;&lt;endl;
       else 
          cout&lt;&lt;""number is NOt prime""&lt;&lt;endl;
    }  
}
</code></pre>
","<p>You need to do some more checking. Right now, you are only checking if the number is divisible by 2. Do the same for 2, 3, 4, 5, 6, ... up to <code>number</code>. Hint: use a <strong>loop</strong>.</p>

<p>After you resolve this, try looking for optimizations.
Hint: You only have to check all numbers up to the square root of the number</p>
","4424392"
"Why does C++ compilation take so long?","82667","","<p>Compiling a C++ file takes a very long time when compared to C# and Java. It takes significantly longer to compile a C++ file than it would to run a normal size Python script. I'm currently using VC++ but it's the same with any compiler. Why is this?</p>

<p>The two reasons I could think of were loading header files and running the preprocessor, but that doesn't seem like it should explain why it takes so long.</p>
","<p>Several reasons:</p>

<ul>
<li><p><strong>Header files:</strong> Every single compilation unit requires hundreds or even thousands of headers to be 1: loaded, and 2: compiled. Every one of them typically has to be recompiled for every compilation unit, because the preprocessor ensure that the result of compiling a header <em>might</em> vary between every compilation unit. (A macro may be defined in one compilation unit which changes the content of the header).</p>

<p>This is probably <em>the</em> main reason, as it requires huge amounts of code to be compiled for every compilation unit, and additionally, every header has to be compiled multiple times (once for every compilation unit that includes it)</p></li>
<li><p><strong>Linking:</strong> Once compiled, all the object files have to be linked together. This is basically a monolithic process that can't very well be parallelized, and has to process your entire project. </p></li>
<li><p><strong>Parsing:</strong> The syntax is extremely complicated to parse, depends heavily on context, and is very hard to disambiguate. This takes a lot of time</p></li>
<li><p><strong>Templates:</strong> In C#, <code>List&lt;T&gt;</code> is the only type that is compiled, no matter how many instantiations of List you have in your program. In C++, <code>vector&lt;int&gt;</code> is a completely separate type from <code>vector&lt;float&gt;</code>, and each one will have to be compiled separately.</p>

<p>Add to this that templates make up a full turing-complete ""sub-language"" that the compiler has to interpret, and this can become ridiculously complicated. Even relatively simple template metaprogramming code can define recursive templates that create dozens and dozens of template instantiations. Templates may also result in extremely complex types, with ridiculously long names, adding a lot of extra work to the linker. (It has to compare a lot of symbol names, and if these names can grow into many thousand characters, that can become fairly expensive). </p>

<p>And of course, they exacerbate the problems with header files, because templates generally have to be defined in headers, which means far more code has to be parsed and compiled for every compilation unit. In plain C code, a header typically only contains forward declarations, but very little actual code. In C++, it is not uncommon for almost all the code to reside in header files.</p></li>
<li><p><strong>Optimization:</strong> C++ allows for some very dramatic optimizations. C# or Java don't allow classes to be completely eliminated (they have to be there for reflection purposes), but even a simple C++ template metaprogram can easily generate dozens or hundreds of classes, all of which are inlined and eliminated again in the optimization phase.</p>

<p>Moreover, a C++ program must be fully optimized by the compiler. A C# program can rely on the JIT compiler to perform additional optimizations at load-time, C++ doesn't get any such ""second chances"". What the compiler generates is as optimized as it's going to get.</p></li>
<li><p><strong>Machine code:</strong> C++ is compiled to machine code which may be somewhat more complicated than the bytecode Java or .NET use (especially in the case of x86).<br>
(This is mentioned out of completeness only because it was mentioned in comments and such. In practice, this step is unlikely to take more than a tiny fraction of the total compilation time.)</p></li>
</ul>

<p>Most of these factors are shared by C code, which actually compiles fairly efficiently. The parsing step is a lot more complicated in C++, and can take up significantly more time, but the main offender is probably templates. They're useful, and make C++ a far more powerful language, but they also take their toll in terms of compilation speed.</p>
","318440"
"Calling Objective-C method from C++ method?","82501","","<p>I have a class (<code>EAGLView</code>) which calls a method of a <code>C++</code> class without problems. Now, the problem is that I need to call in that <code>C++</code> class a <code>objective-C</code> <code>function</code> <code>[context renderbufferStorage:GL_RENDERBUFFER fromDrawable:(CAEAGLLayer*)self.layer];</code> which I cannot do in <code>C++</code> syntax.</p>

<p>I could wrap this <code>Objective-C</code> call to the same <code>Objective-C</code> class which in the first place called the C++ class, but then I need to somehow call that method from <code>C++</code>, and I cannot figure out how to do it.</p>

<p>I tried to give a pointer to <code>EAGLView</code> object to the C++ method and include the ""<code>EAGLView.h</code>"" in my <code>C++</code> class header but I got 3999 errors.. </p>

<p>So.. how should I do this? An example would be nice.. I only found pure <code>C</code> examples of doing this.</p>
","<p>You can mix C++ with Objective-C if you do it carefully. There are a few caveats but generally speaking they can be mixed. If you want to keep them separate, you can set up a standard C wrapper function that gives the Objective-C object a usable C-style interface from non-Objective-C code (pick better names for your files, I have picked these names for verbosity):</p>

<h3>MyObject-C-Interface.h</h3>

<pre><code>#ifndef __MYOBJECT_C_INTERFACE_H__
#define __MYOBJECT_C_INTERFACE_H__

// This is the C ""trampoline"" function that will be used
// to invoke a specific Objective-C method FROM C++
int MyObjectDoSomethingWith (void *myObjectInstance, void *parameter);
#endif
</code></pre>

<h3>MyObject.h</h3>

<pre><code>#import ""MyObject-C-Interface.h""

// An Objective-C class that needs to be accessed from C++
@interface MyObject : NSObject
{
    int someVar;
}

// The Objective-C member function you want to call from C++
- (int) doSomethingWith:(void *) aParameter;
@end
</code></pre>

<h3>MyObject.mm</h3>

<pre><code>#import ""MyObject.h""

@implementation MyObject

// C ""trampoline"" function to invoke Objective-C method
int MyObjectDoSomethingWith (void *self, void *aParameter)
{
    // Call the Objective-C method using Objective-C syntax
    return [(id) self doSomethingWith:aParameter];
}

- (int) doSomethingWith:(void *) aParameter
{
    // The Objective-C function you wanted to call from C++.
    // do work here..
    return 21 ; // half of 42
}
@end
</code></pre>

<h3>MyCPPClass.cpp</h3>

<pre><code>#include ""MyCPPClass.h""
#include ""MyObject-C-Interface.h""

int MyCPPClass::someMethod (void *objectiveCObject, void *aParameter)
{
    // To invoke an Objective-C method from C++, use
    // the C trampoline function
    return MyObjectDoSomethingWith (objectiveCObject, aParameter);
}
</code></pre>

<p>The wrapper function <strong><em>does not need</em></strong> to be in the same <code>.m</code> file as the Objective-C class, but the file that it does exist in <strong><em>needs to be compiled as Objective-C code</em></strong>. The header that declares the wrapper function needs to be included in both CPP and Objective-C code.</p>

<p>(NOTE: if the Objective-C implementation file is given the extension "".m"" it will not link under Xcode.  The "".mm"" extension tells Xcode to expect a combination of Objective-C and C++, i.e., Objective-C++.)</p>

<hr>

<p>You can implement the above in an Object-Orientented manner by using the <a href=""http://c2.com/cgi/wiki?PimplIdiom"" rel=""noreferrer"">PIMPL idiom</a>.  The implementation is only slightly different.  In short, you place the wrapper functions (declared in ""MyObject-C-Interface.h"") inside a class with a (private) void pointer to an instance of MyClass.</p>

<h3>MyObject-C-Interface.h <em>(PIMPL)</em></h3>

<pre><code>#ifndef __MYOBJECT_C_INTERFACE_H__
#define __MYOBJECT_C_INTERFACE_H__

class MyClassImpl
{
public:
    MyClassImpl ( void );
    ~MyClassImpl( void );

    void init( void );
    int  doSomethingWith( void * aParameter );
    void logMyMessage( char * aCStr );

private:
    void * self;
};

#endif
</code></pre>

<p>Notice the wrapper methods no longer require the void pointer to an instance of MyClass; it is now a private member of MyClassImpl.  The init method is used to instantiate a MyClass instance;</p>

<h3>MyObject.h <em>(PIMPL)</em></h3>

<pre><code>#import ""MyObject-C-Interface.h""

@interface MyObject : NSObject
{
    int someVar;
}

- (int)  doSomethingWith:(void *) aParameter;
- (void) logMyMessage:(char *) aCStr;

@end
</code></pre>

<h3>MyObject.mm <em>(PIMPL)</em></h3>

<pre><code>#import ""MyObject.h""

@implementation MyObject

MyClassImpl::MyClassImpl( void )
    : self( NULL )
{   }

MyClassImpl::~MyClassImpl( void )
{
    [(id)self dealloc];
}

void MyClassImpl::init( void )
{    
    self = [[MyObject alloc] init];
}

int MyClassImpl::doSomethingWith( void *aParameter )
{
    return [(id)self doSomethingWith:aParameter];
}

void MyClassImpl::logMyMessage( char *aCStr )
{
    [(id)self doLogMessage:aCStr];
}

- (int) doSomethingWith:(void *) aParameter
{
    int result;

    // ... some code to calculate the result

    return result;
}

- (void) logMyMessage:(char *) aCStr
{
    NSLog( aCStr );
}

@end
</code></pre>

<p>Notice that MyClass is instantiated with a call to MyClassImpl::init.  You could instantiate MyClass in MyClassImpl's constructor, but that generally isn't a good idea.  The MyClass instance is destructed from MyClassImpl's destructor.  As with the C-style implementation, the wrapper methods simply defer to the respective methods of MyClass.</p>

<h3>MyCPPClass.h <em>(PIMPL)</em></h3>

<pre><code>#ifndef __MYCPP_CLASS_H__
#define __MYCPP_CLASS_H__

class MyClassImpl;

class MyCPPClass
{
    enum { cANSWER_TO_LIFE_THE_UNIVERSE_AND_EVERYTHING = 42 };
public:
    MyCPPClass ( void );
    ~MyCPPClass( void );

    void init( void );
    void doSomethingWithMyClass( void );

private:
    MyClassImpl * _impl;
    int           _myValue;
};

#endif
</code></pre>

<h3>MyCPPClass.cpp <em>(PIMPL)</em></h3>

<pre><code>#include ""MyCPPClass.h""
#include ""MyObject-C-Interface.h""

MyCPPClass::MyCPPClass( void )
    : _impl ( NULL )
{   }

void MyCPPClass::init( void )
{
    _impl = new MyClassImpl();
}

MyCPPClass::~MyCPPClass( void )
{
    if ( _impl ) { delete _impl; _impl = NULL; }
}

void MyCPPClass::doSomethingWithMyClass( void )
{
    int result = _impl-&gt;doSomethingWith( _myValue );
    if ( result == cANSWER_TO_LIFE_THE_UNIVERSE_AND_EVERYTHING )
    {
        _impl-&gt;logMyMessage( ""Hello, Arthur!"" );
    }
    else
    {
        _impl-&gt;logMyMessage( ""Don't worry."" );
    }
}
</code></pre>

<p>You now access calls to MyClass through a private implementation of MyClassImpl. This approach can be advantageous if you were developing a portable application; you could simply swap out the implementation of MyClass with one specific to the other platform ... but honestly, whether this is a better implementation is more a matter of taste and needs.</p>
","1061576"
"c++ compiler error ""was not declared in this scope""","82449","","<p>I'm getting a bizarre compiler error when trying to compile a c++ UDP client program.</p>

<blockquote>
  <p>g++ -o client Udp.cpp ClientMain.c -I. -lpthread</p>
  
  <p>In file included from ClientMain.c:1:0:</p>
  
  <p>Udp.h: In destructor ‘CUdpMsg::~CUdpMsg()’:</p>
  
  <p>Udp.h:103:43: error: ‘free’ was not declared in this scope</p>
  
  <p>Udp.h: In member function ‘void CUdpMsg::Add(in_addr_t, const void*, size_t)’:</p>
  
  <p>Udp.h:109:34: error: ‘malloc’ was not declared in this scope</p>
  
  <p>Udp.h:109:41: error: ‘memcpy’ was not declared in this scope</p>
  
  <p>ClientMain.c: In function ‘int main(int, char**)’:</p>
  
  <p>ClientMain.c:28:57: error: ‘memcpy’ was not declared in this scope</p>
  
  <p>ClientMain.c:29:61: error: ‘printf’ was not declared in this scope</p>
  
  <p>ClientMain.c:30:17: error: ‘stdout’ was not declared in this scope</p>
  
  <p>ClientMain.c:30:23: error: ‘fflush’ was not declared in this scope</p>
  
  <p>ClientMain.c:34:68: error: ‘printf’ was not declared in this scope</p>
  
  <p>ClientMain.c:35:17: error: ‘stdout’ was not declared in this scope</p>
  
  <p>ClientMain.c:35:23: error: ‘fflush’ was not declared in this scope</p>
  
  <p>ClientMain.c:37:30: error: ‘usleep’ was not declared in this scope</p>
</blockquote>

<p>I have the following declared at the beginning of my cpp file.</p>

<pre><code>#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;ifaddrs.h&gt;
#include &lt;net/if.h&gt;
#include &lt;cstdlib&gt; 
#include &lt;string&gt;
#include &lt;stdlib.h&gt;
#include &lt;cstring&gt;

#include &lt;errno.h&gt;
</code></pre>

<p>functions like 'memcpy' should be declared in string.h... I have it (and string and cstring) all declared, and I'm still getting these compiler errors. Does anyone have a clue why this is happening? Thanks.</p>
","<p>If you have multiple files, then you need the appropriate includes in each file. Also maybe its not within namespace? </p>
","6748653"
"What is __gxx_personality_v0 for?","82387","","<p>This is a second-hand question from an OS development site, but it made me curious since I couldn't find a decent explanation anywhere.</p>

<p>When compiling and linking a free-standing C++ program using gcc, sometimes a linker error like this occurs:</p>

<pre><code>out/kernel.o:(.eh_frame+0x11): undefined reference to `__gxx_personality_v0'
</code></pre>

<p>This is apparently because this symbol is defined in libstdc++, which is missing in a free-standing environment. Fixing the problem simply requires defining this symbol somewhere:</p>

<pre><code>void *__gxx_personality_v0;
</code></pre>

<p>Which is nice, but I don't like things that just magically work... So the question is, what is the purpose of this symbol?</p>
","<p>It is used in the stack unwiding tables, which you can see for instance in the assembly output of <a href=""https://stackoverflow.com/questions/307610/how-do-exceptions-work-behind-the-scenes-in-c#307716"">my answer to another question</a>. As mentioned on that answer, its use is defined by the <a href=""https://itanium-cxx-abi.github.io/cxx-abi"" rel=""nofollow noreferrer"">Itanium C++ ABI</a>, where it is called the <a href=""https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html#base-personality"" rel=""nofollow noreferrer"">Personality Routine</a>.</p>

<p>The reason it ""works"" by defining it as a global NULL void pointer is probably because nothing is throwing an exception. When something tries to throw an exception, then you will see it misbehave.</p>

<p>Of course, if nothing is using exceptions, you can disable them with <code>-fno-exceptions</code> (and if nothing is using RTTI, you can also add <code>-fno-rtti</code>). If you are using them, you have to (as other answers already noted) link with <code>g++</code> instead of <code>gcc</code>, which will add <code>-lstdc++</code> for you.</p>
","329195"
"Is there any use for unique_ptr with array?","82377","","<p><code>std::unique_ptr</code> has support for arrays, for instance:</p>

<pre><code>std::unique_ptr&lt;int[]&gt; p(new int[10]);
</code></pre>

<p>but is it needed? probably it is more convenient to use <code>std::vector</code> or <code>std::array</code>.</p>

<p>Do you find any use for that construct?</p>
","<p>Some people do not have the luxury of using <code>std::vector</code>, even with allocators. Some people need a dynamically sized array, so <code>std::array</code> is out. And some people get their arrays from other code that is known to return an array; and that code isn't going to be rewritten to return a <code>vector</code> or something.</p>

<p>By allowing <code>unique_ptr&lt;T[]&gt;</code>, you service those needs.</p>

<p>In short, you use <code>unique_ptr&lt;T[]&gt;</code> when you <em>need</em> to. When the alternatives simply aren't going to work for you. It's a tool of last resort.</p>
","16711846"
"How do I reverse a C++ vector?","82305","","<p>Is there a built-in vector function in C++ to reverse a vector in place?</p>

<p>Or do you just have to do it manually?</p>
","<p>There's a function <code>std::reverse</code> in the <code>algorithm</code> header for this purpose.</p>

<pre><code>#include &lt;vector&gt;
#include &lt;algorithm&gt;

int main() {
  std::vector&lt;int&gt; a;
  std::reverse(a.begin(), a.end());
  return 0;
}
</code></pre>
","8877465"
"Windows threading: _beginthread vs _beginthreadex vs CreateThread C++","82113","","<p>What's a better way to start a thread, <code>_beginthread</code>, <code>_beginthreadx</code> or <code>CreateThread</code>?</p>

<p>I'm trying to determine what are the advantages/disadvantages of <code>_beginthread</code>, <code>_beginthreadex</code> and <code>CreateThread</code>.  All of these functions return a thread handle to a newly created thread, I already know that CreateThread provides a little extra information when an error occurs (it can be checked by calling <code>GetLastError</code>)... but what are some things I should consider when I'm using these functions?</p>

<p>I'm working with a windows application, so cross-platform compatibility is already out of the question.</p>

<p>I have gone through the msdn documentation and I just can't understand, for example, why anybody would decide to use _beginthread instead of CreateThread or vice versa.</p>

<p>Cheers!</p>

<p>Update:
OK, thanks for all the info, I've also read in a couple of places that I can't call <code>WaitForSingleObject()</code> if I used <code>_beginthread()</code>, but if I call <code>_endthread()</code> in the thread shouldn't that work? What's the deal there?</p>
","<p><code>CreateThread()</code> is a raw Win32 API call for creating another thread of control at the kernel level.</p>

<p><code>_beginthread()</code> &amp; <code>_beginthreadex()</code> are C runtime library calls that call <code>CreateThread()</code> behind the scenes.  Once <code>CreateThread()</code> has returned, <code>_beginthread/ex()</code> takes care of additional bookkeeping to make the C runtime library usable &amp; consistent in the new thread.</p>

<p>In C++ you should almost certainly use <code>_beginthreadex()</code> unless you won't be linking to the C runtime library at all (aka MSVCRT*.dll/.lib).</p>
","331567"
"Is delete this allowed?","82092","","<p>Is it allowed to <code>delete this;</code> if the delete-statement is the last statement that will be executed on that instance of the class? Of course I'm sure that the object represented by the <code>this</code>-pointer is <code>new</code>ly-created.</p>

<p>I'm thinking about something like this:</p>

<pre><code>void SomeModule::doStuff()
{
    // in the controller, ""this"" object of SomeModule is the ""current module""
    // now, if I want to switch over to a new Module, eg:

    controller-&gt;setWorkingModule(new OtherModule());

    // since the new ""OtherModule"" object will take the lead, 
    // I want to get rid of this ""SomeModule"" object:

    delete this;
}
</code></pre>

<p>Can I do this?</p>
","<p>The C++ FAQ Lite has a entry specifically for this</p>

<ul>
<li><a href=""https://isocpp.org/wiki/faq/freestore-mgmt#delete-this"" rel=""noreferrer"">https://isocpp.org/wiki/faq/freestore-mgmt#delete-this</a></li>
</ul>

<p>I think this quote sums it up nicely </p>

<blockquote>
  <p>As long as you're careful, it's OK for an object to commit suicide (delete this).</p>
</blockquote>
","3150965"
"Using member variable in lambda capture list inside a member function","82074","","<p>The following code compiles with gcc 4.5.1 but not with VS2010 SP1:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;utility&gt;
#include &lt;set&gt;
#include &lt;algorithm&gt;

using namespace std;
class puzzle
{
        vector&lt;vector&lt;int&gt;&gt; grid;
        map&lt;int,set&lt;int&gt;&gt; groups;
public:
        int member_function();
};

int puzzle::member_function()
{
        int i;
        for_each(groups.cbegin(),groups.cend(),[grid,&amp;i](pair&lt;int,set&lt;int&gt;&gt; group){
                i++;
                cout&lt;&lt;i&lt;&lt;endl;
        });
}
int main()
{
        return 0;
}
</code></pre>

<p>This is the error:</p>

<pre><code>error C3480: 'puzzle::grid': a lambda capture variable must be from an enclosing function scope
warning C4573: the usage of 'puzzle::grid' requires the compiler to capture 'this' but the current default capture mode does not allow it
</code></pre>

<p>So,</p>

<p>1> which compiler is right?</p>

<p>2> How can I use member variables inside a lambda in VS2010?</p>
","<p>I believe VS2010 to be right this time, and I'd check if I had the standard handy, but currently I don't.</p>

<p>Now, it's exactly like the error message says: You can't capture stuff outside of the enclosing scope of the lambda.<sup>†</sup> <code>grid</code> is not in the enclosing scope, but <code>this</code> is (every access to <code>grid</code> actually happens as <code>this-&gt;grid</code> in member functions). For your usecase, capturing <code>this</code> works, since you'll use it right away and you don't want to copy the <code>grid</code></p>

<pre><code>auto lambda = [this](){ std::cout &lt;&lt; grid[0][0] &lt;&lt; ""\n""; }
</code></pre>

<p>If however, you want to store the grid and copy it for later access, where your <code>puzzle</code> object might already be destroyed, you'll need to make an intermediate, local copy:</p>

<pre><code>vector&lt;vector&lt;int&gt; &gt; tmp(grid);
auto lambda = [tmp](){}; // capture the local copy per copy
</code></pre>

<hr>

<p>† I'm simplifying - Google for ""reaching scope"" or see §5.1.2 for all the gory details.</p>
","7896206"
"cannot convert parameter 1 from 'char' to 'LPCWSTR'","82047","","<p>I keep getting this error:
<code>cannot convert parameter 1 from 'char' to 'LPCWSTR'</code></p>

<pre><code>int main(int argc, char argv[])    
{

   // open port for I/O
   HANDLE h = CreateFile(argv[1],GENERIC_READ|GENERIC_WRITE,0,NULL,OPEN_EXISTING,0,NULL);

   if(h == INVALID_HANDLE_VALUE) {
       PrintError(""E012_Failed to open port"");
</code></pre>

<p>can someone help?</p>
","<p>It should be</p>

<pre><code>int main(int argc, char* argv[]) 
</code></pre>

<p>And</p>

<pre><code>HANDLE h = CreateFileA(argv[1],GENERIC_READ|GENERIC_WRITE,0,NULL,OPEN_EXISTING,0,NULL);
</code></pre>
","3924979"
"Linker returns ""relocation has an invalid symbol at symbol index...""","82010","","<p>I am trying out some code on Ubuntu. I'm trying to run the following code </p>

<pre class=""lang-c++ prettyprint-override""><code>#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;ctime&gt;
#include ""random.h""

using namespace std;

/* Function prototype! */
void initRandomSeed();

int randomInteger(int low,int high){
    initRandomSeed();
    double d= rand()/(double(RAND_MAX)+1);
    double s= d*(double(high)-low+1);
    return int(floor(low)+s);    
}

double  randomReal(int low,int high){
    initRandomSeed();
    double d=rand()/(double(RAND_MAX)+1);
    double s=d*(double(high)-low+1);
    return low+s;
}    

bool randomChance(double p){
    initRandomSeed();
    return randomReal(0,1)&lt;p;
}            

void setRandomSeed(int seed){    
    initRandomSeed();
    srand(seed);
}    

void initRandomSeed(){
    // to retain updated values across different stack frames! nice!
    static bool initialized=false;

    // this is executed only very first time and random value obtained from system clock!
    if(!initialized){
        srand(int(time(NULL)));
        initialized=true;
    }
}
</code></pre>

<p>And when I try to compile the above code using <code>g++</code>,  I get the following error</p>

<pre class=""lang-none prettyprint-override""><code>@ubuntu:~/Chardway$ g++ random.cpp
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 0 has invalid symbol index 10
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 1 has invalid symbol index 11
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 2 has invalid symbol index 2
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 3 has invalid symbol index 2
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 4 has invalid symbol index 10
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 5 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 6 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 7 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 8 has invalid symbol index 2
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 9 has invalid symbol index 2
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 10 has invalid symbol index 11
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 11 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 12 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 13 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 14 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 15 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 16 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 17 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 18 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 19 has invalid symbol index 12
/usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 20 has invalid symbol index 19
/usr/lib/gcc/x86_64-linux-gnu/4.6/../../../x86_64-linux-gnu/crt1.o: In function `_start':
(.text+0x20): undefined reference to `main'
collect2: ld returned 1 exit status
</code></pre>

<p>Any help or links to questions that help would be really helpful! Thanks! </p>
","<p>I'm not sure about your invalid relocation errors but the obvious thing missing is that you have no <code>main</code> function. You need to define an entry point to your application called <code>main</code>, defined at global scope such as:</p>

<pre><code>int main()
{
    // TODO: implementation
}
</code></pre>
","10766287"
"Iterator invalidation rules","81975","","<p>What are the iterator invalidation rules for C++ containers?</p>

<p>Preferably in a summary list format.</p>

<p><sub>
<em>(Note: This is meant to be an entry to <a href=""https://stackoverflow.com/questions/tagged/c++-faq"">Stack Overflow's C++ FAQ</a>. If you want to critique the idea of providing an FAQ in this form, then <a href=""https://meta.stackexchange.com/questions/68647/setting-up-a-faq-for-the-c-tag"">the posting on meta that started all this</a> would be the place to do that. Answers to that question are monitored in the <a href=""http://chat.stackoverflow.com/rooms/10/c-lounge"">C++ chatroom</a>, where the FAQ idea started out in the first place, so your answer is very likely to get read by those who came up with the idea.)</em>
</sub></p>
","<p><strong>C++11</strong> (Source: <a href=""http://kera.name/articles/2011/06/iterator-invalidation-rules-c0x/"" rel=""noreferrer"">Iterator Invalidation Rules (C++0x)</a>)</p>

<hr>

<h1>Insertion</h1>

<p><em>Sequence containers</em></p>

<ul>
<li><code>vector</code>: all iterators and references before the point of insertion are unaffected, unless the new container size is greater than the previous capacity (in which case all iterators and references are invalidated) [23.3.6.5/1]</li>
<li><code>deque</code>: all iterators and references are invalidated, unless the inserted member is at an end (front or back) of the deque (in which case all iterators are invalidated, but references to elements are unaffected) [23.3.3.4/1]</li>
<li><code>list</code>: all iterators and references unaffected [23.3.5.4/1]</li>
<li><code>forward_list</code>: all iterators and references unaffected <em>(applies to <code>insert_after</code>)</em> [23.3.4.5/1]</li>
<li><code>array</code>: <em>(n/a)</em></li>
</ul>

<p><em>Associative containers</em></p>

<ul>
<li><code>[multi]{set,map}</code>: all iterators and references unaffected [23.2.4/9]</li>
</ul>

<p><em>Unsorted associative containers</em></p>

<ul>
<li><code>unordered_[multi]{set,map}</code>: all iterators invalidated when rehashing occurs, but references unaffected [23.2.5/8]. Rehashing does not occur if the insertion does not cause the container's size to exceed <code>z * B</code> where <code>z</code> is the maximum load factor and <code>B</code> the current number of buckets. [23.2.5/14]</li>
</ul>

<p><em>Container adaptors</em></p>

<ul>
<li><code>stack</code>: inherited from underlying container</li>
<li><code>queue</code>: inherited from underlying container</li>
<li><code>priority_queue</code>: inherited from underlying container</li>
</ul>

<hr>

<h1>Erasure</h1>

<p><em>Sequence containers</em></p>

<ul>
<li><code>vector</code>: every iterator and reference at or after the point of erase is invalidated [23.3.6.5/3]</li>
<li><code>deque</code>: erasing the last element invalidates only iterators and references to the erased elements and the past-the-end iterator; erasing the first element invalidates only iterators and references to the erased elements; erasing any other elements invalidates all iterators and references (including the past-the-end iterator) [23.3.3.4/4]</li>
<li><code>list</code>: only the iterators and references to the erased element is invalidated [23.3.5.4/3]</li>
<li><code>forward_list</code>: only the iterators and references to the erased element is invalidated <em>(applies to <code>erase_after</code>)</em> [23.3.4.5/1]</li>
<li><code>array</code>: <em>(n/a)</em></li>
</ul>

<p><em>Associative containers</em></p>

<ul>
<li><code>[multi]{set,map}</code>: only iterators and references to the erased elements are invalidated [23.2.4/9]</li>
</ul>

<p><em>Unordered associative containers</em></p>

<ul>
<li><code>unordered_[multi]{set,map}</code>: only iterators and references to the erased elements are invalidated [23.2.5/13]</li>
</ul>

<p><em>Container adaptors</em></p>

<ul>
<li><code>stack</code>: inherited from underlying container</li>
<li><code>queue</code>: inherited from underlying container</li>
<li><code>priority_queue</code>: inherited from underlying container</li>
</ul>

<hr>

<h1>Resizing</h1>

<ul>
<li><code>vector</code>: as per insert/erase [23.3.6.5/12]</li>
<li><code>deque</code>: as per insert/erase [23.3.3.3/3]</li>
<li><code>list</code>: as per insert/erase [23.3.5.3/1]</li>
<li><code>forward_list</code>: as per insert/erase [23.3.4.5/25]</li>
<li><code>array</code>: (n/a)</li>
</ul>

<hr>

<h2>Note 1</h2>

<blockquote>
  <p><strong>Unless otherwise specified</strong> (either
  explicitly or by defining a function
  in terms of other functions), invoking
  a container member function or passing
  a container as an argument to <strong>a
  library function shall not invalidate
  iterators</strong> to, or change the values of,
  objects within that container.
  [23.2.1/11]</p>
</blockquote>

<h2>Note 2</h2>

<blockquote>
  <p><strong>no swap() function invalidates any
  references, pointers, or iterators</strong>
  referring to the elements of the
  containers being swapped. [ Note: <strong>The
  end() iterator</strong> does not refer to any
  element, so it <strong>may be invalidated</strong>.
  —end note ] [23.2.1/10]</p>
</blockquote>

<h2>Note 3</h2>

<p>Other than the above caveat regarding <code>swap()</code>, <a href=""https://stackoverflow.com/questions/6440392/end-iterator-invalidation-rules"">it's not clear whether ""end"" iterators are subject to the above listed per-container rules</a>; you should assume, anyway, that they are.</p>

<h2>Note 4</h2>

<p><code>vector</code> and all <em>unordered associative containers</em> support <code>reserve(n)</code> which guarantees that no automatic resizing will occur at least until the size of the container grows to <code>n</code>. Caution should be taken with <em>unordered associative containers</em> because a future proposal will allow the specification of a minimum load factor, which would allow rehashing to occur on <code>insert</code> after enough <code>erase</code> operations reduce the container size below the minimum; the guarantee should be considered potentially void after an <code>erase</code>.</p>
","6442829"
"int to unsigned int conversion","81974","","<p>I'm just amazed to know that I can't convert signed to unsigned int by casting!</p>

<pre><code>int i = -62;
unsigned int j = (unsigned int)i;
</code></pre>

<p>I thought I already knew this since I started to use casts, but I can't do it!</p>
","<p>You can convert an <code>int</code> to an <code>unsigned int</code>.  The conversion is valid and well-defined.</p>

<p>Since the value is negative, <code>UINT_MAX + 1</code> is added to it so that the value is a valid unsigned quantity.  (Technically, 2<sup>N</sup> is added to it, where N is the number of bits used to represent the unsigned type.) </p>

<p>In this case, since <code>int</code> on your platform has a width of 32 bits, 62 is subtracted from 2<sup>32</sup>, yielding 4,294,967,234.</p>
","4975363"
"Advantages of std::for_each over for loop","81875","","<p>Are there any advantages of <a href=""http://en.cppreference.com/w/cpp/algorithm/for_each"" rel=""noreferrer""><code>std::for_each</code></a> over <code>for</code> loop? To me, <code>std::for_each</code> only seems to hinder the readability of code. Why do then some coding standards recommend its use? </p>
","<p>The nice thing with <a href=""https://en.wikipedia.org/wiki/C%2B%2B11#Range-based_for_loop"" rel=""noreferrer"">C++11</a> (previously called C++0x), is that this tiresome debate will be settled.</p>

<p>I mean, no one in their right mind, who wants to iterate over a whole collection, will still use this</p>

<pre><code>for(auto it = collection.begin(); it != collection.end() ; ++it)
{
   foo(*it);
}
</code></pre>

<p>Or this</p>

<pre><code>for_each(collection.begin(), collection.end(), [](Element&amp; e)
{
   foo(e);
});
</code></pre>

<p>when the <em>range-based <code>for</code> loop</em> syntax is available:</p>

<pre><code>for(Element&amp; e : collection)
{
   foo(e);
}
</code></pre>

<p>This kind of syntax has been available in Java and C# for some time now, and actually there are way more <code>foreach</code> loops than classical <code>for</code> loops in every recent Java or C# code I saw.</p>
","2048377"
"How to determine the Boost version on a system?","81682","","<p>Is there a quick way to determine the version of the Boost C++ libraries on a system?</p>
","<p><a href=""http://www.boost.org/doc/libs/1_44_0/libs/config/doc/html/boost_config/boost_macro_reference.html#boost_config.boost_macro_reference.boost_informational_macros"" rel=""noreferrer"">Boost Informational Macros</a>. You need: <code>BOOST_VERSION</code></p>
","3708718"
"How to implement big int in C++","81638","","<p>I'd like to implement a big int class in C++ as a programming exercise&mdash;a class that can handle numbers bigger than a long int.  I know that there are several open source implementations out there already, but I'd like to write my own.  I'm trying to get a feel for what the right approach is.</p>

<p>I understand that the general strategy is get the number as a string, and then break it up into smaller numbers (single digits for example), and place them in an array.  At this point it should be relatively simple to implement the various comparison operators.  My main concern is how I would implement things like addition and multiplication.</p>

<p>I'm looking for a general approach and advice as opposed to actual working code.</p>
","<p>Things to consider for a big int class:</p>

<ol>
<li><p>Mathematical operators: +, -, /,
*, %  Don't forget that your class may be on either side of the
operator, that the operators can be
chained, that one of the operands
could be an int, float, double, etc.</p></li>
<li><p>I/O operators: >>, &lt;&lt; This is
where you figure out how to properly
create your class from user input, and how to format it for output as well.</p></li>
<li><p>Conversions/Casts: Figure out
what types/classes your big int
class should be convertible to, and
how to properly handle the
conversion. A quick list would
include double and float, and may
include int (with proper bounds
checking) and complex (assuming it
can handle the range).</p></li>
</ol>
","269289"
"Swapping two variable value without using third variable","81638","","<p>One of the very tricky questions asked in an interview.</p>

<p>Swap the values of two variables like <code>a=10</code> and <code>b=15</code>.</p>

<p>Generally to swap two variables values, we need 3rd variable like:</p>

<pre><code>temp=a;
a=b;
b=temp;
</code></pre>

<p>Now the requirement is, swap values of two variables without using 3rd variable.</p>
","<p>Using the <a href=""http://en.wikipedia.org/wiki/XOR_swap_algorithm"" rel=""noreferrer"">xor swap algorithm</a></p>

<pre><code>void xorSwap (int* x, int* y) {
    if (x != y) { //ensure that memory locations are different
       *x ^= *y;
       *y ^= *x;
       *x ^= *y;
    }
}
</code></pre>

<p><br />
<strong>Why the test?</strong>  </p>

<p>The test is to ensure that x and y have different memory locations (rather than different values). This is because <code>(p xor p) = 0</code> and if both x and y share the same memory location, when one is set to 0, both are set to 0.
When both *x and *y are 0, all other xor operations on *x and *y will equal 0 (as they are the same), which means that the function will set both *x and *y set to 0.</p>

<p>If they have the same values but not the same memory location, everything works as expected</p>

<pre><code>*x = 0011
*y = 0011
//Note, x and y do not share an address. x != y

*x = *x xor *y  //*x = 0011 xor 0011
//So *x is 0000

*y = *x xor *y  //*y = 0000 xor 0011
//So *y is 0011

*x = *x xor *y  //*x = 0000 xor 0011
//So *x is 0011
</code></pre>

<p><br />
<strong>Should this be used?</strong>  </p>

<p>In general cases, no. The compiler will optimize away the temporary variable and given that swapping is a common procedure it should output the optimum machine code for your platform.</p>

<p>Take for example this quick test program written in C.</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

#define USE_XOR 

void xorSwap(int* x, int *y){
    if ( x != y ){
        *x ^= *y;
        *y ^= *x;
        *x ^= *y;
    }
}

void tempSwap(int* x, int* y){
    int t;
    t = *y;
    *y = *x;
    *x = t;
}


int main(int argc, char* argv[]){
    int x = 4;
    int y = 5;
    int z = pow(2,28); 
    while ( z-- ){
#       ifdef USE_XOR
            xorSwap(&amp;x,&amp;y);
#       else
            tempSwap(&amp;x, &amp;y);
#       endif
    }
    return x + y;    
}
</code></pre>

<p>Compiled using:</p>

<pre><code>gcc -Os main.c -o swap
</code></pre>

<p>The xor version takes </p>

<pre><code>real    0m2.068s
user    0m2.048s
sys  0m0.000s
</code></pre>

<p>Where as the version with the temporary variable takes:</p>

<pre><code>real    0m0.543s
user    0m0.540s
sys  0m0.000s
</code></pre>
","1826175"
"Example for boost shared_mutex (multiple reads/one write)?","81556","","<p>I have a multithreaded app that has to read some data often, and occasionally that data is updated. Right now a mutex keeps access to that data safe, but it's expensive because I would like multiple threads to be able to read simultaneously, and only lock them out when an update is needed (the updating thread could wait for the other threads to finish).</p>

<p>I think this is what <code>boost::shared_mutex</code> is supposed to do, but I'm not clear on how to use it, and haven't found a clear example.</p>

<p>Does anyone have a simple example I could use to get started?</p>
","<p>It looks like you would do something like this:</p>

<pre><code>boost::shared_mutex _access;
void reader()
{
  // get shared access
  boost::shared_lock&lt;boost::shared_mutex&gt; lock(_access);

  // now we have shared access
}

void writer()
{
  // get upgradable access
  boost::upgrade_lock&lt;boost::shared_mutex&gt; lock(_access);

  // get exclusive access
  boost::upgrade_to_unique_lock&lt;boost::shared_mutex&gt; uniqueLock(lock);
  // now we have exclusive access
}
</code></pre>
","989816"
"How do you initialise a dynamic array in C++?","81534","","<p>How do I achieve the dynamic equivalent of this static array initialisation:</p>

<pre><code>char c[2] = {};  // Sets all members to '\0';
</code></pre>

<p>In other words, create a dynamic array with all values initialised to the termination character:</p>

<pre><code>char* c = new char[length]; // how do i amend this? 
</code></pre>
","<pre><code>char* c = new char[length]();
</code></pre>
","2030018"
"Fastest way to reset every value of std::vector<int> to 0","81501","","<p>What's the fastest way to reset every value of a <code>std::vector&lt;int&gt;</code> to 0 and keeping the vectors initial size ? </p>

<p>A for loop with the [] operator ? </p>
","<pre><code>std::fill(v.begin(), v.end(), 0);
</code></pre>
","8848612"
"What's the difference between size_t and int in C++?","81482","","<p>In several C++ examples I see a use of the type size_t where I would have used a simple int. What's the difference, and why size_t should be better?</p>
","<p>From <a href=""http://en.wikipedia.org/wiki/Size_t#Member_data_types"" rel=""noreferrer"">the friendly Wikipedia</a>:</p>

<blockquote>
  <p>The stdlib.h and stddef.h header files define a datatype called <strong>size_t</strong> which is used to represent the size of an object. Library functions that take sizes expect them to be of type size_t, and the sizeof operator evaluates to size_t.</p>
  
  <p>The actual type of size_t is platform-dependent; a common mistake is to assume size_t is the same as unsigned int, which can lead to programming errors, particularly as 64-bit architectures become more prevalent.</p>
</blockquote>

<p>Also, check <a href=""http://www.embedded.com/electronics-blogs/programming-pointers/4026076/Why-size-t-matters"" rel=""noreferrer"">Why size_t matters</a></p>
","502862"
"How to declare a static const char* in your header file?","81463","","<p>I'd like to define a constant char* in my header file for my .cpp file to use.  So I've tried this:</p>

<pre><code>private:
    static const char *SOMETHING = ""sommething"";
</code></pre>

<p>Which brings me with the following compiler error:</p>

<blockquote>
  <p>error C2864: 'SomeClass::SOMETHING' :
  only static const integral data
  members can be initialized within a
  class</p>
</blockquote>

<p>I'm new to C++.  What is going on here?  Why is this illegal?  And how can you do it alternatively?</p>
","<p>You need to define static variables in a translation unit, unless they are of integral types.</p>

<p>In your header:</p>

<pre><code>private:
    static const char *SOMETHING;
    static const int MyInt = 8; // would be ok
</code></pre>

<p>In the .cpp file:    </p>

<pre><code>const char *YourClass::SOMETHING = ""something"";
</code></pre>

<p>C++ standard, 9.4.2/4:</p>

<blockquote>
  <p>If a static data member is of const
  integral or const enumeration type,
  its declaration in the class
  definition can specify a
  constant-initializer which shall be an
  integral constant expression. In that
  case, the member can appear in
  integral constant expressions within
  its scope. The member shall still be
  defined in a namespace scope if it is
  used in the program and the namespace
  scope definition shall not contain an
  initializer.</p>
</blockquote>
","1639164"
"bool to int conversion","81420","","<p>How portable is this conversion. Can I be sure that both assertions pass?</p>

<pre><code>int x = 4&lt;5;
assert(x==1);

x = 4&gt;5;
assert(x==0);
</code></pre>

<p>Don't ask why. I know that it is ugly. Thank you.</p>
","<pre><code>int x = 4&lt;5;
</code></pre>

<p>Completely portable. Standard conformant. <code>bool</code> to <code>int</code> conversion is implicit!</p>

<p>§4.7/4 from the C++ Standard says (Integral <em>Conversion</em>)</p>

<blockquote>
  <p>If the source type is bool, the value <strong><code>false</code> is converted to zero</strong> and
  the value <strong><code>true</code> is converted to one</strong>.</p>
</blockquote>

<hr>

<p>As for C, as far as I know there is no <code>bool</code> in C. (before 1999) So <code>bool</code> to <code>int</code> conversion is relevant in C++ only. In C, <code>4&lt;5</code> evaluates to <code>int</code> value, in this case the value is <code>1</code>,  <code>4&gt;5</code>  would evaluate to <code>0</code>.</p>

<p>EDIT: Jens in the comment said, C99 has <code>_Bool</code> type. <code>bool</code> is a macro defined in <code>stdbool.h</code> header file. <code>true</code> and <code>false</code> are also macro defined in <code>stdbool.h</code>.</p>

<p>§7.16 from C99 says,</p>

<blockquote>
  <p>The macro <strong><code>bool</code></strong> expands to _Bool.</p>
  
  <p>[..] <strong><code>true</code></strong> which expands to the integer constant <strong><code>1</code></strong>, <strong><code>false</code></strong>
  which expands to the integer constant <strong><code>0</code></strong>,[..]</p>
</blockquote>
","5369783"
"How do I see a C/C++ source file after preprocessing in Visual Studio?","81310","","<p>Let's say I have a source file with many preprocessor directives. Is it possible to see how it looks after the preprocessor is done with it?</p>
","<p><code>cl.exe</code>, the command line interface to Microsoft Visual C++, has three different options for outputting the preprocessed file (hence the inconsistency in the previous responses about Visual C++):</p>

<ul>
<li><code>/E</code>: <a href=""http://msdn.microsoft.com/en-us/library/3xkfswhy.aspx"" rel=""noreferrer"">preprocess to stdout</a> (similar to GCC's -E option)</li>
<li><code>/P</code>: <a href=""http://msdn.microsoft.com/en-us/library/8z9z0bx6.aspx"" rel=""noreferrer"">preprocess to file</a></li>
<li><code>/EP</code>: <a href=""http://msdn.microsoft.com/en-us/library/becb7sys.aspx"" rel=""noreferrer"">preprocess to stdout without #line directives</a></li>
</ul>

<p>If you want to preprocess to a file without #line directives, combine the <code>/P</code> and <code>/EP</code> options.</p>
","277362"
"library not found for.....?","81224","","<p>i added new framework(3rd party) and build.</p>

<p>Unfortunately, since the execution was not.</p>

<p>How do I solve this problem?
The whole four nights were spent.:(</p>

<pre><code>Ld /Users/hansehee/Library/Developer/Xcode/DerivedData/iBaseballManager-dbrtdyfdzzunktexlyibuzjbftoy/Build/Products/Distribution-iphoneos/iBaseballManager.app/iBaseballManager normal armv7s
    cd /DevLibs/BaseballManager_KOR/iBaseballManager
    setenv IPHONEOS_DEPLOYMENT_TARGET 6.0
    setenv PATH ""/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin""
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++ -arch armv7s -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk -L/Users/hansehee/Library/Developer/Xcode/DerivedData/iBaseballManager-dbrtdyfdzzunktexlyibuzjbftoy/Build/Products/Distribution-iphoneos -L/DevLibs/BaseballManager_KOR/iBaseballManager/Classes/BaseballManager/kakaoUtil/kakao-ios-sdk -F/Users/hansehee/Library/Developer/Xcode/DerivedData/iBaseballManager-dbrtdyfdzzunktexlyibuzjbftoy/Build/Products/Distribution-iphoneos -filelist /Users/hansehee/Library/Developer/Xcode/DerivedData/iBaseballManager-dbrtdyfdzzunktexlyibuzjbftoy/Build/Intermediates/iBaseballManager.build/Distribution-iphoneos/iBaseballManager_Device.build/Objects-normal/armv7s/iBaseballManager.LinkFileList -dead_strip -fobjc-link-runtime -miphoneos-version-min=6.0 -framework StoreKit -framework SystemConfiguration -framework CoreData -weak_framework AdSupport -framework MediaPlayer -framework CoreTelephony -framework Security -lzlib -lstdc++ -lCxImage -lj2k -ljasper -lkakao-ios-sdk-i386-armv7-armv7s -ljbig -ljpeg -lpng -ltiff -framework AudioToolbox -framework AVFoundation -framework Foundation -framework UIKit -framework CoreGraphics -framework OpenAL -framework OpenGLES -framework QuartzCore -liClet -Xlinker -dependency_info -Xlinker /Users/hansehee/Library/Developer/Xcode/DerivedData/iBaseballManager-dbrtdyfdzzunktexlyibuzjbftoy/Build/Intermediates/iBaseballManager.build/Distribution-iphoneos/iBaseballManager_Device.build/Objects-normal/armv7s/iBaseballManager_dependency_info.dat -o /Users/hansehee/Library/Developer/Xcode/DerivedData/iBaseballManager-dbrtdyfdzzunktexlyibuzjbftoy/Build/Products/Distribution-iphoneos/iBaseballManager.app/iBaseballManager
</code></pre>

<p><strong>ld: library not found for -lzlib
clang: error: linker command failed with exit code 1 (use -v to see invocation)</strong></p>
","<p>I changed <code>-all_load</code> to <code>-force_load</code></p>
","19353002"
"Compilation fails with ""relocation R_X86_64_32 against `.rodata.str1.8' can not be used when making a shared object""","81195","","<p>I'm trying to compile this source code from the makefile in a VPS, but its not working. The VPS is a 64 Cent OS</p>

<p>Here's the full error</p>

<pre><code># make
gcc -c -O3 -w -DLINUX -I../SDK/amx/ ../SDK/amx/*.c
g++ -c -O3 -w -DLINUX -I../SDK/amx/ ../SDK/*.cpp
g++ -c -O3 -w -DLINUX -I../SDK/amx/ *.cpp
g++ -O2 -fshort-wchar -shared -o ""TCP_V1.so"" *.o
/usr/bin/ld: TCP-LINUX_V1.o: relocation R_X86_64_32 against `.rodata.str1.8' can not be     used when making a shared object; recompile with -fPIC
TCP-LINUX_V1.o: could not read symbols: Bad value
collect2: ld returned 1 exit status
make: *** [all] Error 1
</code></pre>

<p>Here's my makefile:</p>

<pre><code>GPP=g++
GCC=gcc
OUTFILE=""TCP_V1.so""

COMPILE_FLAGS=-c -O3 -w -DLINUX -I../SDK/amx/

all:
    $(GCC) $(COMPILE_FLAGS) ../SDK/amx/*.c
    $(GPP) $(COMPILE_FLAGS) ../SDK/*.cpp
    $(GPP) $(COMPILE_FLAGS) *.cpp
    $(GPP) -O2 -fshort-wchar -shared -o $(OUTFILE) *.o
</code></pre>

<p>Anyone know what's wrong?</p>
","<p>Do what the compiler tells you to do, i.e. recompile with <code>-fPIC</code>. To learn what does this flag do and why you need it in this case, see <strong><a href=""http://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#Code-Gen-Options"">Code Generation Options</a></strong> of the GCC manual.</p>

<p>In brief, the term <strong>position independent code</strong> (PIC) refers to the generated machine code which is memory address agnostic, i.e. does not make any assumptions about where it was loaded into RAM. Only position independent code is supposed to be included into shared objects (SO) as they should have an ability to dynamically change their location in RAM.</p>

<p>Finally, you can read about it on <strong><a href=""http://en.wikipedia.org/wiki/Position-independent_code"">Wikipedia</a></strong> too.</p>
","19365454"
"How do I create a simple Qt console application in C++?","81152","","<p>I was trying to create a simple console application to try out Qt's XML parser. I started a project in VS2008 and got this template:</p>

<pre><code>int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    return a.exec();
}
</code></pre>

<p>Since I don't need event processing, I was wondering whether I may get into trouble if I neglect to create a QCoreApplication and running the event loop. The docs state that it's recommended in most cases.</p>

<p>For the sake of curiosity however, I am wondering how could I make some generic task execute on the event loop and then terminate the application. I was unable to google a relevant example.</p>
","<p>Here is one simple way you could structure an application if you want an event loop running.</p>

<pre><code>// main.cpp
#include &lt;QtCore&gt;

class Task : public QObject
{
    Q_OBJECT
public:
    Task(QObject *parent = 0) : QObject(parent) {}

public slots:
    void run()
    {
        // Do processing here

        emit finished();
    }

signals:
    void finished();
};

#include ""main.moc""

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    // Task parented to the application so that it
    // will be deleted by the application.
    Task *task = new Task(&amp;a);

    // This will cause the application to exit when
    // the task signals finished.    
    QObject::connect(task, SIGNAL(finished()), &amp;a, SLOT(quit()));

    // This will run the task from the application event loop.
    QTimer::singleShot(0, task, SLOT(run()));

    return a.exec();
}
</code></pre>
","4182144"
"What open source C++ static analysis tools are available?","81123","","<p>Java has some very good open source static analysis tools such as <a href=""http://findbugs.sf.net/"" rel=""noreferrer"">FindBugs</a>, <a href=""http://checkstyle.sf.net/"" rel=""noreferrer"">Checkstyle</a> and <a href=""http://pmd.sf.net/"" rel=""noreferrer"">PMD</a>.  Those tools are easy to use, very helpful, runs on multiple operating systems and <em>free</em>.</p>

<p>Commercial C++ static analysis products are available from vendors <a href=""http://www.klocwork.com/"" rel=""noreferrer"">Klocwork</a>, <a href=""http://www.gimpel.com/"" rel=""noreferrer"">Gimpel</a> and <a href=""http://www.coverity.com/"" rel=""noreferrer"">Coverity</a>. Also there is less-known <a href=""http://viva64.com"" rel=""noreferrer"">PVS-Studio</a> analyzer. Although having such products are great, the cost is just way too much for students and it is usually rather hard to get trial version.</p>

<p>The alternative is to find open source C++ static analysis tools that will run on multiple platforms (Windows and Unix). By using an open source tool, it could be modified to fit certain needs.  Finding the tools has not been easy task.</p>

<p>Below is a short list of C++ static analysis tools that were found or suggested by others.  </p>

<ul>
<li>C++ Check <a href=""http://sf.net/projects/cppcheck/"" rel=""noreferrer"">http://sf.net/projects/cppcheck/</a></li>
<li>Oink <a href=""http://danielwilkerson.com/oink/index.html"" rel=""noreferrer"">http://danielwilkerson.com/oink/index.html</a></li>
<li>C and C++ Code Counter <a href=""http://sourceforge.net/projects/cccc/"" rel=""noreferrer"">http://sourceforge.net/projects/cccc/</a></li>
<li>Splint (from answers)</li>
<li>Mozilla's Pork (from answers) (This is now part of Oink)</li>
<li>Mozilla's Dehydra (from answers)</li>
<li>Use option <code>-Weffc++</code> for GNU g++ (from answers)</li>
</ul>

<p>What are some <strong>other</strong> portable open source C++ static analysis tools that anyone knows of and can be recommended?</p>

<p>Some related links.</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/97454/c-static-code-analysis-tool-on-windows"">C++ static code analysis tool on Windows</a></li>
<li><a href=""http://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis"" rel=""noreferrer"">http://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis</a></li>
<li><a href=""http://www.chris-lott.org/resources/cmetrics/"" rel=""noreferrer"">http://www.chris-lott.org/resources/cmetrics/</a></li>
<li><a href=""https://stackoverflow.com/questions/93260/a-free-tool-to-check-cc-source-code-against-a-set-of-coding-standards"">A free tool to check C/C++ source code against a set of coding standards?</a></li>
<li><a href=""http://spinroot.com/static/"" rel=""noreferrer"">http://spinroot.com/static/</a></li>
<li><a href=""https://stackoverflow.com/questions/2873/choosing-a-static-code-analysis-tool"">Choosing a static code analysis tool</a></li>
</ul>
","<p>Oink is a tool built on top of the Elsa C++ front-end.  Mozilla's Pork is a fork of Elsa/Oink.</p>

<p>See: <a href=""http://danielwilkerson.com/oink/index.html"" rel=""nofollow noreferrer"">http://danielwilkerson.com/oink/index.html</a></p>
","285538"
"Why use virtual functions?","80980","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2391679/can-someone-explain-c-virtual-methods"">Can someone explain C++ Virtual Methods?</a>  </p>
</blockquote>



<p>I have a question regarding to the C++ virtual functions.  </p>

<p>Why and when do we use virtual functions? Can anyone give me a real time implementation or use of virtual functions?</p>
","<p>You use virtual functions when you want to override a certain behavior (read method) for your derived class rather than the one implemented for the base class and you want to do so at run-time through a pointer to the base class.    </p>

<p>The classic example is when you have a base class called <code>Shape</code> and concrete shapes (classes) that derive from it. Each concrete class overrides (implements a virtual method) called <code>Draw()</code>.   </p>

<p>The class hierarchy is as follows:     </p>

<p><img src=""https://i.stack.imgur.com/qF8qz.png"" alt=""Class hierarchy""></p>

<p>The following snippet shows the usage of the example; it creates an array of <code>Shape</code> class pointers wherein each points to a distinct derived class object. At run-time, invoking the <code>Draw()</code> method results in the calling of the method overridden by that derived class and the particular <code>Shape</code> is drawn (or rendered).</p>

<pre><code>Shape *basep[] = { &amp;line_obj, &amp;tri_obj,
                   &amp;rect_obj, &amp;cir_obj};
for (i = 0; i &lt; NO_PICTURES; i++)
    basep[i] -&gt; Draw ();
</code></pre>

<p>The above program just uses the pointer to the base class to store addresses of the derived class objects. This provides a loose coupling because the program does not have to change drastically if a new concrete derived class of <code>shape</code> is added anytime. The reason is that there are minimal code segments that actually use (depend) on the concrete <code>Shape</code> type.    </p>

<p>The above is a good example of the <a href=""http://en.wikipedia.org/wiki/Open/closed_principle"" rel=""noreferrer"">Open Closed Principle</a> of the famous <a href=""http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29"" rel=""noreferrer"">SOLID</a> design principles.</p>
","8824404"
"Why use prefixes on member variables in C++ classes","80969","","<p>A lot of C++ code uses syntactical conventions for marking up member variables. Common examples include</p>

<ul>
<li>m_<em>memberName</em> for public members (where public members are used at all)</li>
<li>_<em>memberName</em> for private members or all members</li>
</ul>

<p>Others try to enforce using this-><em>member</em> whenever a member variable is used.</p>

<p>In my experience, most larger code bases fail at applying such rules consistently.</p>

<p>In other languages, these conventions are far less widespread. I see it only occasionally in Java or C# code. I think I have never seen it in Ruby or Python code. Thus, there seems to be a trend with more modern languages to not use special markup for member variables.</p>

<p>Is this convention still useful today in C++ or is it just an anachronism. Especially as it is used so inconsistently across libraries. Haven't the other languages shown that one can do without member prefixes?</p>
","<p>You have to be careful with using a leading underscore.  A leading underscore before a capital letter in a word is reserved.
For example:</p>

<p>_Foo</p>

<p>_L</p>

<p>are all reserved words while</p>

<p>_foo</p>

<p>_l</p>

<p>are not.  There are other situations where leading underscores before lowercase letters are not allowed.  In my specific case, I found the _L happened to be reserved by Visual C++ 2005 and the clash created some unexpected results.</p>

<p>I am on the fence about how useful it is to mark up local variables.</p>

<p>Here is a link about which identifiers are reserved:
<a href=""https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier"">What are the rules about using an underscore in a C++ identifier?</a></p>
","1228199"
"Simple pthread! C++","80952","","<p>I have no idea why this doesn't work</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;pthread.h&gt;
using namespace std;

void *print_message(){

    cout &lt;&lt; ""Threading\n"";
}



int main() {

    pthread_t t1;

    pthread_create(&amp;t1, NULL, &amp;print_message, NULL);
    cout &lt;&lt; ""Hello"";

    return 0;
}
</code></pre>

<p>The error:</p>

<blockquote>
  <p>[Description, Resource, Path, Location, Type] initializing argument 3
  of 'int pthread_create(pthread_t*, const pthread_attr_t*, void*
  (*)(void*), void*)' threading.cpp   threading/src   line 24 C/C++
  Problem</p>
</blockquote>
","<p>You should declare the thread main as:</p>

<pre><code>void* print_message(void*) // takes one parameter, unnamed if you aren't using it
</code></pre>
","1135994"
"pthread function from a class","80796","","<p>Let's say I have a class such as</p>

<pre><code>class c { 
    // ...
    void *print(void *){ cout &lt;&lt; ""Hello""; }
}
</code></pre>

<p>And then I have a vector of c</p>

<pre><code>vector&lt;c&gt; classes; pthread_t t1;
classes.push_back(c());
classes.push_back(c());
</code></pre>

<p>Now, I want to create a thread on <code>c.print();</code></p>

<p>And the following is giving me the problem below: <code>pthread_create(&amp;t1, NULL, &amp;c[0].print, NULL);</code></p>

<blockquote>
  <p>Error Ouput: cannot convert ‘void* (tree_item::<em>)(void</em>)’ to ‘void*
  (<em>)(void</em>)’  for argument ‘3’ to ‘int pthread_create(pthread_t*, const
  pthread_attr_t*, void* (<em>)(void</em>), void*)’</p>
</blockquote>
","<p>You can't do it the way you've written it because C++ class member functions have a hidden <code>this</code> parameter passed in.  <code>pthread_create()</code> has no idea what value of <code>this</code> to use, so if you try to get around the compiler by casting the method to a function pointer of the appropriate type, you'll get a segmetnation fault.  You have to use a static class method (which has no <code>this</code> parameter), or a plain ordinary function to bootstrap the class:</p>

<pre><code>class C
{
public:
    void *hello(void)
    {
        std::cout &lt;&lt; ""Hello, world!"" &lt;&lt; std::endl;
        return 0;
    }

    static void *hello_helper(void *context)
    {
        return ((C *)context)-&gt;hello();
    }
};
...
C c;
pthread_t t;
pthread_create(&amp;t, NULL, &amp;C::hello_helper, &amp;c);
</code></pre>
","1151638"
"How do I link to a library with Code::Blocks?","80762","","<p><a href=""https://stackoverflow.com/questions/2180755/c-gui-tutorial-undefined-reference-to-textout/2180782#2180782"">C++ GUI Tutorial: undefined reference to TextOut</a></p>

<p>I have the same problem, but I'm new to programming and Code::Blocks, and I want to use the GDI32 library. How can I install it? I'm very confused because I can use the windows.h header, but some functions like <code>TextOut</code> aren't available.</p>
","<p>The gdi32 library is already installed on your computer, few programs will run without it. Your compiler will (if installed properly) normally come with an import library, which is what the linker uses to make a binding between your program and the file in the system. (In the unlikely case that your compiler does not come with import libraries for the system libs, you will need to download the Microsoft Windows Platform SDK.)</p>

<p>To link with gdi32:</p>

<p><img src=""https://i.stack.imgur.com/O3Moc.png"" alt=""enter image description here""></p>

<p>This will reliably work with MinGW-gcc for all system libraries (it <em>should work</em> if you use any other compiler too, but I can't talk about things I've not tried). You can also write the library's full name, but writing <code>libgdi32.a</code> has no advantage over <code>gdi32</code> other than being more type work.<br>
If it does <em>not</em> work for some reason, you may have to provide a different name (for example the library is named <code>gdi32.lib</code> for MSVC).</p>

<p>For libraries in some odd locations or project subfolders, you will need to provide a proper pathname (click on the ""..."" button for a file select dialog).</p>
","5881751"
"What is Linux’s native GUI API?","80655","","<p>I hope this doesn’t come across as a stupid question but it’s always something I have wondered. Both Windows (Win32 API) and OS X (Cocoa) have their own APIs to handle windows, events and other OS stuff. I have never really got a clear answer as to what Linux’s equivalent is.</p>

<p>I have heard some people say GTK+, but GTK+ being cross platform, how can it be native?</p>
","<p>In Linux the graphical user interface is not a part of the operating system. The graphical user interface found on most Linux desktops is provided by software called the <a href=""http://en.wikipedia.org/wiki/X_Window_System"" rel=""noreferrer"">X Window System</a>, which defines a device independent way of dealing with screens, keyboards and pointer devices.</p>

<p>X Window defines a network protocol for communication, and any program that knows how to ""speak"" this protocol can use it. There is a C library called <a href=""http://en.wikipedia.org/wiki/Xlib"" rel=""noreferrer"">Xlib</a> that makes it easier to use this protocol, so Xlib is kind of <em>the</em> native GUI API. Xlib is not the only way to access an X Window server; there is also <a href=""http://en.wikipedia.org/wiki/XCB"" rel=""noreferrer"">XCB</a>.</p>

<p>Toolkit libraries such as <a href=""http://www.gtk.org/"" rel=""noreferrer"">GTK+</a> (used by <a href=""http://www.gnome.org/"" rel=""noreferrer"">GNOME</a>) and <a href=""http://www.qt.io/"" rel=""noreferrer"">Qt</a> (used by <a href=""http://www.kde.org/"" rel=""noreferrer"">KDE</a>), built on top of Xlib, are used because they are easier to program with. For example they give you a consistent look and feel across applications, make it easier to use drag-and-drop, provide components standard to a modern desktop environment, and so on.</p>

<p>How X draws on the screen internally depends on the implementation. <a href=""http://www.x.org"" rel=""noreferrer"">X.org</a> has a device independent part and a device dependent part. The former manages screen resources such as windows, while the latter communicates with the graphics card driver, usually a kernel module. The communication may happen over <a href=""http://en.wikipedia.org/wiki/Direct_memory_access"" rel=""noreferrer"">direct memory access</a> or through <a href=""http://en.wikipedia.org/wiki/System_call"" rel=""noreferrer"">system calls</a> to the kernel. The driver translates the commands into a form that the hardware on the card understands.</p>

<p>As of 2013, a new window system called <a href=""http://wayland.freedesktop.org/"" rel=""noreferrer"">Wayland</a> is starting to become usable, and many distributions have said they will at some point migrate to it, though there is still no clear schedule. This system is based on OpenGL/ES API, which means that in the future OpenGL will be the ""native GUI API"" in Linux. Work is being done to port GTK+ and QT to Wayland, so that current popular applications and desktop systems would need minimal changes. The applications that cannot be ported will be supported through an X11 server, much like OS X supports X11 apps through Xquartz. The GTK+ port is <a href=""https://live.gnome.org/Wayland"" rel=""noreferrer"">expected to be finished within a year</a>, while Qt 5 already has complete Wayland support.</p>

<p>To further complicate matters, Ubuntu has announced they are developing a new system called <a href=""https://wiki.ubuntu.com/Mir"" rel=""noreferrer"">Mir</a> because of problems they perceive with Wayland. This window system is also based on the OpenGL/ES API.</p>
","12717284"
"Function stoi not declared","80625","","<p>I'm trying to use stoi to convert a string to an integer, however it says it's not declared. I have the standard library and the  included, but it still says ""[Error] 'stoi' was not declared in this scope""</p>

<p>The code is the following:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string&gt;

using namespace std;

int main()
{
string end, init;
cout &lt;&lt; ""Introduction"" &lt;&lt; endl;
cout &lt;&lt; ""Start time (xx:yy)"" &lt;&lt; endl;
cin &gt;&gt; init;
string hours0 = init.substr(0,2);
int hours = stoi(hours0);
cout &lt;&lt; hours &lt;&lt; endl;
system(""pause"");
return 0;

}
</code></pre>

<p>Either tell me why it isn't working, or give me a second option to do it, please.</p>
","<p><a href=""http://en.cppreference.com/w/cpp/string/basic_string/stol""><code>std::stoi</code></a> was introduced in C++11. Make sure your compiler settings are correct and/or your compiler supports C++11.</p>
","22084828"
"What is the difference between a concrete class and an abstract class?","80419","","<p>I am learning C++, but I am confused about abstract class and concrete class. Some real world examples would be appreciated.</p>
","<p>An abstract class is a class for which one or more methods are declared but not defined, meaning that the compiler knows these methods are part of the class, but not what code to execute for that method. These are called abstract methods. Here is an example of an abstract class.</p>

<pre><code>class shape {
public:
  virtual void draw() = 0;
};
</code></pre>

<p>This declares an abstract class which specifies that any descendants of the class should implement the draw method if the class is to be concrete. You cannot instantiate this class because it is abstract, after all, the compiler wouldn't know what code to execute if you called member draw. So you can not do the following:</p>

<pre><code>shape my_shape();
my_shape.draw();
</code></pre>

<p>To be able to actually use the draw method you would need to derive classes from this abstract class, which do implement the draw method, making the classes concrete:</p>

<pre><code>class circle : public shape {
public:
  circle(int x, int y, int radius) {
    /* set up the circle */
  }
  virtual draw() {
    /* do stuff to draw the circle */
  }
};

class rectangle : public shape {
public:
  rectangle(int min_x, int min_y, int max_x, int max_y) {
    /* set up rectangle */
  }
  virtual draw() {
    /* do stuff to draw the rectangle */
  }
};
</code></pre>

<p>Now you can instantiate the concrete objects circle and rectangle and use their draw methods:</p>

<pre><code>circle my_circle(40, 30, 10);
rectangle my_rectangle(20, 10, 50, 15);
my_circle.draw();
my_rectangle.draw();
</code></pre>

<p>Now of course the question is, why would you want to do this? Couldn't you just as well have defined the circle and rectangle classes and have done away with the whole shape class? You could, but then you wouldn't be able to take advantage of their inheritance:</p>

<pre><code>std::vector&lt;shape*&gt; my_scene;
my_scene.push_back(new circle(40, 30, 10));
my_scene.push_back(new rectangle(20, 10, 50, 15));
std::for_each(my_scene.begin(), my_scene.end(), std::mem_fun_ref(&amp;shape::draw)
</code></pre>

<p>This code let's you collect all your shapes into one container. This makes it a lot easier if you have a lot of shapes and many different shapes in your scene. For example we can now draw all the shapes in one go, and the code that does so doesn't even need to know about the different types of shapes we have.</p>

<p>Now finally we need to know why the draw function of shape is abstract, and not just an empty function, i.e. why didn't we just define:</p>

<pre><code>class shape {
public:
  virtual void draw() {
    /* do nothing */
  }
};
</code></pre>

<p>The reason for this is that we don't really want objects of type shape, they wouldn't be real things anyway, they would be abstract. So it doesn't make any sense to define an implementation for the draw method, even an empty one. Making the shape class abstract prevents us from mistakenly instantiating the shape class, or mistakenly calling the empty draw function of the base class instead of the draw function of the derived classes. In effect we define an interface for any class that would like to behave like a shape, we say that any such class should have a draw method that looks like we have specified it should.</p>

<p>To answer you last question, there isn't any such thing as a 'normal derived class' every class is either abstract or concrete. A class that has any abstract methods is abstract, any class that doesn't is concrete. It's just a way to differentiate the two types of classes. A base class can be either abstract or concrete and a derived class can be either abstract or concrete:</p>

<pre><code>class abstract_base {
public:
  virtual void abstract_method1() = 0;
  virtual void abstract_method2() = 0;
};

class concrete_base {
public:
  void concrete_method1() {
    /* do something */
  }
};

class abstract_derived1 : public abstract_base {
public:
  virtual void abstract_method3() = 0;
};

class abstract_derived2 : public concrete_base {
public:
  virtual void abstract_method3() = 0;
};

class abstract_derived3 : public abstract_base {
public:
  virtual abstract_method1() {
    /* do something */
  }
  /* note that we do not provide an implementation for
     abstract_method2 so the class is still abstract */
};

class concrete_derived1 : public concrete_base {
public:
  void concrete_method2() {
    /* do something */
  }
};

class concrete_derived2 : public abstract_base {
public:
  virtual void abstract_method1() {
    /* do something */
  }
  virtual void abstract_method2() {
    /* do something */
  }
  /* This class is now concrete because no abstract methods remain */
};
</code></pre>
","2149488"
"Read text file into string. C++ ifstream","80406","","<pre><code>void docDB(){
     int sdb = 0;
     ifstream dacb(""kitudacbiet.txt"");
     if(!dacb.is_open())
         cout&lt;&lt;""Deo doc dc file""&lt;&lt;endl;
     else{
          while(!dacb.eof()){
               dacb&gt;&gt;dbiet[sdb].kitu;
               dacb&gt;&gt;dbiet[sdb].mota;
               //getline(dacb,dbiet[sdb].mota);
               /*
               string a="""";
               while((dacb&gt;&gt;a)!= '\n'){
                //strcat(dbiet[sdb].mota,a);
                dbiet[sdb].mota+=a;
               }
               */
               sdb++;
          }
     }

}
</code></pre>

<p>Text file: ""kitudacbiet.txt""</p>

<pre><code>\ Dau xuyet phai
@ Dau @
# Dau #
$ Ky hieu $
( Dau mo ngoac
) Dau dong ngoac
</code></pre>

<p><img src=""https://i.stack.imgur.com/oL8Ly.png"" alt=""Screen""></p>

<p>I want read firt string of line into dbiet[sdb].kitu and the rest of line into dbiet[sdb].mota </p>

<p>Example: line 1 =   \ Dau xuyet phai </p>

<p>dbiet[sdb].kitu = ""\"" and dbiet[sdb].mota = ""Dau xuyet phai""</p>

<p>I would like to read line by line until i met downline character ('\n'). How to do this.
Sorry my english not good.Thank</p>
","<p>To read a whole line from a file into a string, use <code>std::getline</code> like so:</p>

<pre><code> std::ifstream file(""my_file"");
 std::string temp;
 std::getline(file, temp);
</code></pre>

<p>You can do this in a loop to until the end of the file like so:</p>

<pre><code> std::ifstream file(""my_file"");
 std::string temp;
 while(std::getline(file, temp)) {
      //Do with temp
 }
</code></pre>

<h2>References</h2>

<p><a href=""http://en.cppreference.com/w/cpp/string/basic_string/getline"">http://en.cppreference.com/w/cpp/string/basic_string/getline</a></p>

<p><a href=""http://en.cppreference.com/w/cpp/string/basic_string"">http://en.cppreference.com/w/cpp/string/basic_string</a></p>
","13551954"
"""string could not resolved"" error in Eclipse for C++ (Eclipse can't resolve standard library)","80233","","<p>I have the following code in eclipse for c++ and it's underlining <code>string</code> and <code>cout</code> and saying could not be resolved.</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std;


int main()
{
    string s;
    s = ""hello world"";
    cout &lt;&lt; s;
    return 0;

}
</code></pre>

<p>Anyone know why?</p>

<p>edit: screenshot</p>

<p><strong>Edit:</strong> I have found a solution thanks everyone (see answers).</p>

<p><img src=""https://i.stack.imgur.com/n1FIm.png"" alt=""enter image description here""></p>
","<p>The problem was that I needed to have both <a href=""http://www.mingw.org/wiki/InstallationHOWTOforMinGW"" rel=""noreferrer"">minGW and MSY</a>S installed and added to PATH.</p>

<p>The problem is now fixed.</p>
","7905229"
"Write code to convert given number into words (eg 1234 as input should output one thousand two hundred and thirty four)","80101","","<p>Write C/C++/Java code to convert given number into words.</p>

<p>eg:-
Input:
1234</p>

<p>Output:
One thousand two hundred thirty-four.</p>

<p>Input:
10</p>

<p>Output:
Ten</p>

<p>Does it require a complete switch case for digits 0 to 10.</p>

<p>Adding ""teen"" after every number name (eg: 14: four ""teen"".) from 14 to 19.</p>

<p>And than adding ""ty"" and the digits name for a number in the range 20 to 99.</p>

<p>And so on. </p>

<p>I think there must be some far better approach for solving this.</p>

<p>C code is preferred.</p>
","<pre><code>#include&lt;iostream&gt;
using namespace std;
void expand(int);
int main()
{
    int num;
    cout&lt;&lt;""Enter a number : "";
    cin&gt;&gt;num;
    expand(num);
}
void expand(int value)
{
    const char * const ones[20] = {""zero"", ""one"", ""two"", ""three"",""four"",""five"",""six"",""seven"",
    ""eight"",""nine"",""ten"",""eleven"",""twelve"",""thirteen"",""fourteen"",""fifteen"",""sixteen"",""seventeen"",
    ""eighteen"",""nineteen""};
    const char * const tens[10] = {"""", ""ten"", ""twenty"", ""thirty"",""forty"",""fifty"",""sixty"",""seventy"",
    ""eighty"",""ninety""};

    if(value&lt;0)
    {
        cout&lt;&lt;""minus "";
        expand(-value);
    }
    else if(value&gt;=1000)
    {
        expand(value/1000);
        cout&lt;&lt;"" thousand"";
        if(value % 1000)
        {
            if(value % 1000 &lt; 100)
            {
                cout &lt;&lt; "" and"";
            }
            cout &lt;&lt; "" "" ;
            expand(value % 1000);
        }
    }
    else if(value &gt;= 100)
    {
        expand(value / 100);
        cout&lt;&lt;"" hundred"";
        if(value % 100)
        {
            cout &lt;&lt; "" and "";
            expand (value % 100);
        }
    }
    else if(value &gt;= 20)
    {
        cout &lt;&lt; tens[value / 10];
        if(value % 10)
        {
            cout &lt;&lt; "" "";
            expand(value % 10);
        }
    }
    else
    {
        cout&lt;&lt;ones[value];
    }
    return;
}
</code></pre>
","13579961"
"How can I resolve ""error LNK2019: unresolved external symbol""?","79870","","<p>I've got this MFC application I'm working on that needs to have an embedded database. So I went hunting for a slick, fast ""embeddable"" database for it and stumbled accross SQLite.</p>

<p>I created a DB with it, and I created a static library project with Visual Studio 2008. the library project will be used in another main project.</p>

<p>In the library project, I created a class <code>DBClass</code> with a method <code>AddFeedToDB(CFeed f)</code>. The library project uses the <code>.lib</code> file from codeproject (<code>cppsqlite3.lib</code>).</p>

<p>When compiling the static library, no error is detected, but when I try to use the library project file in the main project, I get these type of errors:</p>

<pre><code>error LNK2019: unresolved external symbol ""public:void __thiscall
   CppSQLite3DB::close(void)"" (?close@CppSQLite3DB@@QAEXXZ 
   referenced in function ""public: int __thiscall
   CTalkingFeedsDB::AddFeedToDB(class CFeed,char const*)"" (?
   AddFeedToDB@CTalkingFeedsDB@@QAEHVCFeed@@PDB@Z
</code></pre>

<p>What am I missing?</p>
","<p>It happened to me more than once that I thought symbol <code>XXX</code> (i.e. <code>?close@CppSQLite3DB@@QAEXXZ</code>) <em>was</em> in the import lib, while the actual symbol was <code>__impXXX</code> (i.e. <code>__imp?close@CppSQLite3DB@@QAEXXZ</code>).</p>

<p>The reason for the linker error is then to be found in the compilation step: the compiler will generate the <code>?close@CppSQLite3DB@@QAEXXZ</code> symbol to be imported, where it <em>should</em> generate <code>__imp?close@CppSQLite3DB@@QAEXXZ</code>. This often means that the function declaration itself didn't have <code>__declspec( dllimport )</code>. Which may be caused by some preprocessor symbol not being defined. Or the <code>__declspec</code> not being there at all...</p>
","854480"
"C++ Loop through Map","79819","","<p>I want to iterate through each element in the <code>map&lt;string, int&gt;</code> without knowing any of its string-int values or keys.</p>

<p>What I have so far:</p>

<pre><code>void output(map&lt;string, int&gt; table)
{
       map&lt;string, int&gt;::iterator it;
       for (it = table.begin(); it != table.end(); it++)
       {
            //How do I access each element?  
       }
}
</code></pre>
","<p>You can achieve this like following :</p>

<pre><code>map&lt;string, int&gt;::iterator it;

for ( it = symbolTable.begin(); it != symbolTable.end(); it++ )
{
    std::cout &lt;&lt; it-&gt;first  // string (key)
              &lt;&lt; ':'
              &lt;&lt; it-&gt;second   // string's value 
              &lt;&lt; std::endl ;
}
</code></pre>

<hr>

<p>With <em>C++11</em> <sub>( and onwards )</sub>, </p>

<pre><code>for (auto const&amp; x : symbolTable)
{
    std::cout &lt;&lt; x.first  // string (key)
              &lt;&lt; ':' 
              &lt;&lt; x.second // string's value 
              &lt;&lt; std::endl ;
}
</code></pre>

<hr>

<p>With <em>C++17</em> <sub>( and onwards )</sub>,</p>

<pre><code>for( auto const&amp; [key, val] : symbolTable )
{
    std::cout &lt;&lt; key         // string (key)
              &lt;&lt; ':'  
              &lt;&lt; val        // string's value
              &lt;&lt; std::endl ;
}
</code></pre>
","26282004"
"How to find sum of several integers input by user using do/while, While statement or For statement","79794","","<p>Please help out here. I want to create a program whereby a user inputs several numbers (let's say 6 numbers from his/ her head). The program should then go ahead and calculate the sum of all these numbers. I however have to use a loop statement, either For statement, While statement or do/while statement. This is what I have so far:</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

int main()
{
    int count = 1;
    int sum = 0;
    int number;
    int numberitems;

    cout &lt;&lt; ""Enter number of items: \n"";
    cin &gt;&gt; numberitems;

    cout &lt;&lt; ""Enter number: \n"";
    cin &gt;&gt; number;

    do {

        sum = sum + number;

        count++;
    } while (count &lt;= 6);
}
</code></pre>

<p>AND HERE IS THE OTHER CODE USING WHILE STATEMENT</p>

<pre><code>#include &lt;iostream&gt;

using namespace std;

int main()
{
    int count = 1;
    int sum = 0;
    int number;

    cout &lt;&lt; ""Enter number: \n"";
    cin &gt;&gt; number;

    while (count &lt;= 6) {
        sum = sum += number;

        count++;
    }
    cout &lt;&lt; sum &lt;&lt; endl;
}
</code></pre>

<p>I know this is beginner stuff, well am a beginner so help out a sister politely. 
THANKS</p>
","<p>The FOR loop worked well, I modified it a tiny bit: </p>

<pre><code>#include&lt;iostream&gt;
using namespace std;
int main ()
{

    int sum = 0;
    int number;
    int numberitems;


    cout &lt;&lt; ""Enter number of items: \n"";
    cin &gt;&gt; numberitems;

    for(int i=0;i&lt;numberitems;i++)
    {
        cout &lt;&lt; ""Enter number: \n"";
        cin &gt;&gt; number; 

        sum=sum+number;

    }
    cout&lt;&lt;""sum is: ""&lt;&lt; sum&lt;&lt;endl;
}
</code></pre>

<p>HOWEVER, the WHILE loop has got some errors on line 11 (Count was not declared in this scope). What could be the issue? Also, if you would have a solution using DO,WHILE loop it would be wonderful. Thanks</p>
","21855367"
"std::queue iteration","79774","","<p>I need to iterate over <code>std::queue</code>.
www.cplusplus.com says:</p>

<blockquote>
  <p>By default, if no container class is specified for a particular queue class, the standard container class template deque is used.</p>
</blockquote>

<p>So can I somehow get to the queue's underlying deque and iterate over it?</p>
","<p>If you need to iterate over a <code>queue</code> then you need something more than a queue. The point of the standard container adapters is to provide a minimal interface. If you need to do iteration as well, why not just use a deque (or list) instead?</p>
","1259125"
"When should I write the keyword 'inline' for a function/method?","79769","","<p>When should I write the keyword <code>inline</code> for a function/method in C++?</p>

<p>After seeing some answers, some related questions:</p>

<ul>
<li><p>When should I <strong>not</strong> write the keyword 'inline' for a function/method in C++?</p></li>
<li><p>When will the compiler not know when to make a function/method 'inline'?</p></li>
<li><p>Does it matter if an application is <strong>multithreaded</strong> when one writes 'inline' for a function/method?</p></li>
</ul>
","<p>Oh man, one of my pet peeves.</p>

<p><code>inline</code> is more like <code>static</code> or <code>extern</code> than a directive telling the compiler to inline your functions.  <code>extern</code>, <code>static</code>, <code>inline</code> are linkage directives, used almost exclusively by the linker, not the compiler.</p>

<p>It is said that <code>inline</code> hints to the compiler that you think the function should be inlined.  That may have been true in 1998, but a decade later the compiler needs no such hints.  Not to mention humans are usually wrong when it comes to optimizing code, so most compilers flat out ignore the 'hint'.</p>

<ul>
<li><p><strong><code>static</code></strong> - the variable/function name cannot be used in other compilation units.  Linker needs to make sure it doesn't accidentally use a statically defined variable/function from another compilation unit.</p></li>
<li><p><strong><code>extern</code></strong> - use this variable/function name in this compilation unit but don't complain if it isn't defined.  The linker will sort it out and make sure all the code that tried to use some extern symbol has its address.</p></li>
<li><p><strong><code>inline</code></strong> - this function will be defined in multiple compilation units, don't worry about it.  The linker needs to make sure all compilation units use a single instance of the variable/function.</p></li>
</ul>

<p><strong>Note:</strong> Generally, declaring templates <code>inline</code> is pointless, as they have the linkage semantics of <code>inline</code> already. However, <code>explicit</code> specialization and instantiation of templates <a href=""https://stackoverflow.com/a/10536588/183120"">require <code>inline</code></a> to be used.</p>

<hr>

<p>Specific answers to your questions:</p>

<ul>
<li><blockquote>
  <p>When should I write the keyword 'inline' for a function/method in C++?</p>
</blockquote>

<p>Only when you want the function to be defined in a header.  More exactly only when the function's definition can show up in multiple compilation units.  It's a good idea to define small (as in one liner) functions in the header file as it gives the compiler more information to work with while optimizing your code.  It also increases compilation time.</p></li>
<li><blockquote>
  <p>When should I not write the keyword 'inline' for a function/method in C++?</p>
</blockquote>

<p>Don't add inline just because you think your code will run faster if the compiler inlines it.</p></li>
<li><blockquote>
  <p>When will the compiler not know when to make a function/method 'inline'?</p>
</blockquote>

<p>Generally, the compiler will be able to do this better than you.  However, the compiler doesn't have the option to inline code if it doesn't have the function definition.  In maximally optimized code usually all <code>private</code> methods are inlined whether you ask for it or not.</p>

<p>As an aside to prevent inlining in GCC, use <code>__attribute__(( noinline ))</code>, and in Visual Studio, use <code>__declspec(noinline)</code>.</p></li>
<li><blockquote>
  <p>Does it matter if an application is multithreaded when one writes 'inline' for a function/method?</p>
</blockquote>

<p>Multithreading doesn't affect inlining in any way.</p></li>
</ul>
","1759575"
"C++ Remove new line from multiline string","79754","","<p>Whats the most efficient way of removing a 'newline' from a std::string?</p>
","<pre><code>#include &lt;algorithm&gt;
#include &lt;string&gt;

std::string str;

str.erase(std::remove(str.begin(), str.end(), '\n'), str.end());
</code></pre>

<p>The behavior of std::remove may not quite be what you'd expect.  See an explanation of it <a href=""http://www.cppreference.com/wiki/stl/algorithm/remove"" rel=""noreferrer"">here</a>.</p>
","1488815"
"#ifdef vs #if - which is better/safer as a method for enabling/disabling compilation of particular sections of code?","79753","","<p>This may be a matter of style, but there's a bit of a divide in our dev team and I wondered if anyone else had any ideas on the matter...</p>

<p>Basically, we have some debug print statements which we turn off during normal development. Personally I prefer to do the following:</p>

<pre><code>//---- SomeSourceFile.cpp ----

#define DEBUG_ENABLED (0)

...

SomeFunction()
{
    int someVariable = 5;

#if(DEBUG_ENABLED)
    printf(""Debugging: someVariable == %d"", someVariable);
#endif
}
</code></pre>

<p>Some of the team prefer the following though:</p>

<pre><code>// #define DEBUG_ENABLED

...

SomeFunction()
{
    int someVariable = 5;

#ifdef DEBUG_ENABLED
    printf(""Debugging: someVariable == %d"", someVariable);
#endif
}
</code></pre>

<p>...which of those methods sounds better to you and why? My feeling is that the first is safer because there is always something defined and there's no danger it could destroy other defines elsewhere.</p>
","<p>My initial reaction was <em><code>#ifdef</code>, of course</em>, but I think <code>#if</code> actually has some significant advantages for this - here's why:</p>

<p>First, you can use <code>DEBUG_ENABLED</code> in preprocessor <em>and</em> compiled tests. Example - Often, I want longer timeouts when debug is enabled, so using <code>#if</code>, I can write this</p>

<pre><code>  DoSomethingSlowWithTimeout(DEBUG_ENABLED? 5000 : 1000);
</code></pre>

<p>... instead of ...</p>

<pre><code>#ifdef DEBUG_MODE
  DoSomethingSlowWithTimeout(5000);
#else
  DoSomethingSlowWithTimeout(1000);
#endif
</code></pre>

<p>Second, you're in a better position if you want to migrate from a <code>#define</code> to a global constant. <code>#define</code>s are usually frowned on by most C++ programmers.</p>

<p>And, Third, you say you've a divide in your team. My guess is this means different members have already adopted different approaches, and you need to standardise. Ruling that <code>#if</code> is the preferred choice means that code using <code>#ifdef</code> will compile -and run- even when <code>DEBUG_ENABLED</code> is false. And it's <em>much</em> easier to track down and remove debug output that is produced when it shouldn't be than vice-versa.</p>

<p>Oh, and a minor readability point. You should be able to use true/false rather than 0/1 in your <code>#define</code>, and because the value is a single lexical token, it's the one time you don't need parentheses around it. </p>

<pre><code>#define DEBUG_ENABLED true
</code></pre>

<p>instead of </p>

<pre><code>#define DEBUG_ENABLED (1)
</code></pre>
","135454"
"Using custom std::set comparator","79724","","<p>I am trying to change the default order of the items in a set of integers to be lexicographic instead of numeric, and I can't get the following to compile with g++:</p>

<p>file.cpp:</p>

<pre><code>bool lex_compare(const int64_t &amp;a, const int64_t &amp;b) 
{
    stringstream s1,s2;
    s1 &lt;&lt; a;
    s2 &lt;&lt; b;
    return s1.str() &lt; s2.str();
}

void foo()
{
    set&lt;int64_t, lex_compare&gt; s;
    s.insert(1);
    ...
}
</code></pre>

<p>I get the following error:</p>

<pre><code>error: type/value mismatch at argument 2 in template parameter list for ‘template&lt;class _Key, class _Compare, class _Alloc&gt; class std::set’
error:   expected a type, got ‘lex_compare’
</code></pre>

<p>what am I doing wrong?</p>
","<p>You are using a function where as you should use a functor (a class that overloads the () operator so it can be called like a function).</p>

<pre><code>struct lex_compare {
    bool operator() (const int64_t&amp; lhs, const int64_t&amp; rhs) const {
        stringstream s1, s2;
        s1 &lt;&lt; lhs;
        s2 &lt;&lt; rhs;
        return s1.str() &lt; s2.str();
    }
};
</code></pre>

<p>You then use the class name as the type parameter</p>

<pre><code>set&lt;int64_t, lex_compare&gt; s;
</code></pre>

<p>If you want to avoid the functor boilerplate code you can also use a function pointer (assuming <code>lex_compare</code> is a function).</p>

<pre><code>set&lt;int64_t, bool(*)(const int64_t&amp; lhs, const int64_t&amp; rhs)&gt; s(&amp;lex_compare);
</code></pre>
","2620889"
"++i or i++ in for loops ??","79682","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/24901/is-there-a-performance-difference-between-i-and-i-in-c"">Is there a performance difference between i++ and ++i in C++?</a>  </p>
</blockquote>



<p>Is there a reason some programmers write <code>++i</code> in a normal for loop instead of writing <code>i++</code>?</p>
","<p>For integers, there is no difference between pre- and post-increment.</p>

<p>If <code>i</code> is an object of a non-trivial class, then <code>++i</code> is generally preferred, because the object is modified and then evaluated, whereas <code>i++</code> modifies after evaluation, so requires a copy to be made.</p>
","4261742"