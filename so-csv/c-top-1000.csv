title,viewcount,title,body,body,acceptedanswerid
"How to initialize all members of an array to the same value?","1445269","","<p>I have a large array in C (not C++ if that makes a difference). I want to initialize all members to the same value. I could swear I once knew a simple way to do this. I could use <code>memset()</code> in my case, but isn't there a way to do this that is built right into the C syntax?</p>
","<p>Unless that value is 0 (in which case you can omit some part of the initializer
and the corresponding elements will be initialized to 0), there's no easy way.</p>

<p>Don't overlook the obvious solution, though:</p>

<pre><code>int myArray[10] = { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 };
</code></pre>

<p>Elements with missing values will be initialized to 0:</p>

<pre><code>int myArray[10] = { 1, 2 }; // initialize to 1,2,0,0,0...
</code></pre>

<p>So this will initialize all elements to 0:</p>

<pre><code>int myArray[10] = { 0 }; // all elements 0
</code></pre>

<p>In C++, an empty initialization list will also initialize every element to 0.
This is <a href=""https://stackoverflow.com/a/17589839"">not allowed</a> with C:</p>

<pre><code>int myArray[10] = {}; // all elements 0 in C++
</code></pre>

<p>Remember that objects with static storage duration will initialize to 0 if no
initializer is specified:</p>

<pre><code>static int myArray[10]; // all elements 0
</code></pre>

<p>And that ""0"" doesn't necessarily mean ""all-bits-zero"", so using the above is
better and more portable than memset(). (Floating point values will be
initialized to +0, pointers to null value, etc.)</p>
","201116"
"How do I determine the size of my array in C?","1156246","","<p>How do I determine the size of my array in C? </p>

<p>That is, the number of elements the array can hold?</p>
","<p>Executive summary:</p>

<pre><code>int a[17];
n = sizeof(a)/sizeof(a[0]);
</code></pre>

<p>To determine the size of your array in bytes, you can use the <code>sizeof</code>
operator:</p>

<pre><code>int a[17];
int n = sizeof(a);
</code></pre>

<p>On my computer, ints are 4 bytes long, so n is 68.</p>

<p>To determine the number of elements in the array, we can divide
the total size of the array by the size of the array element.
You could do this with the type, like this:</p>

<pre><code>int a[17];
int n = sizeof(a) / sizeof(int);
</code></pre>

<p>and get the proper answer (68 / 4 = 17), but if the type of
<code>a</code> changed you would have a nasty bug if you forgot to change
the <code>sizeof(int)</code> as well.</p>

<p>So the preferred divisor is <code>sizeof(a[0])</code>, the size of the
zeroeth element of the array.</p>

<pre><code>int a[17];
int n = sizeof(a) / sizeof(a[0]);
</code></pre>

<p>Another advantage is that you can now easily parameterize
the array name in a macro and get:</p>

<pre><code>#define NELEMS(x)  (sizeof(x) / sizeof((x)[0]))

int a[17];
int n = NELEMS(a);
</code></pre>
","37539"
"How to generate a random number in C?","1133318","","<p>Is there a function to generate a random number in C?  Or will I have to use a third party library?</p>
","<blockquote>
  <p><strong>Note</strong>: Don't use <code>rand()</code> for security. If you need a cryptographically secure number, <a href=""https://stackoverflow.com/a/39475626/2224584"">see this answer</a> instead.</p>
</blockquote>

<pre><code>#include &lt;time.h&gt;
#include &lt;stdlib.h&gt;

srand(time(NULL));   // should only be called once
int r = rand();      // returns a pseudo-random integer between 0 and RAND_MAX
</code></pre>
","822368"
"Using boolean values in C","903047","","<p>C doesn't have any built-in boolean types. What's the best way to use them in C?</p>
","<p><strong>Option 1</strong></p>

<pre><code>typedef int bool;
#define true 1
#define false 0
</code></pre>

<p><strong>Option 2</strong></p>

<pre><code>typedef int bool;
enum { false, true };
</code></pre>

<p><strong>Option 3</strong></p>

<pre><code>typedef enum { false, true } bool;
</code></pre>

<p><strong>Option 4 (C99)</strong></p>

<pre><code>#include &lt;stdbool.h&gt;
</code></pre>

<h1>Explanation</h1>

<ul>
<li>Options 1, 2 and 3 will have in practice the same identical behavior. #2 and #3 don't use #defines though, which in my opinion is better.</li>
<li>Option 4 will work only if you use C99 and it's the ""standard way"" to do it. Choose this if possible.</li>
</ul>

<p>If you are undecided, go with #3!</p>
","1921557"
"How do you set, clear, and toggle a single bit?","828117","","<p>How do you set, clear, and toggle a bit in C/C++?</p>
","<h1>Setting a bit</h1>

<p>Use the bitwise OR operator (<code>|</code>) to set a bit.</p>

<pre><code>number |= 1UL &lt;&lt; x;
</code></pre>

<p>That will set bit <code>x</code>.</p>

<p>Use <code>1ULL</code> if <code>number</code> is wider than <code>unsigned long</code>; promotion of <code>1UL &lt;&lt; x</code> doesn't happen until after evaluating <code>1UL &lt;&lt; x</code> where it's UB to shift by more than the width of a <code>long</code>.  The same applies to all the rest of the examples.</p>

<h1>Clearing a bit</h1>

<p>Use the bitwise AND operator (<code>&amp;</code>) to clear a bit.</p>

<pre><code>number &amp;= ~(1UL &lt;&lt; x);
</code></pre>

<p>That will clear bit <code>x</code>. You must invert the bit string with the bitwise NOT operator (<code>~</code>), then AND it.</p>

<h1>Toggling a bit</h1>

<p>The XOR operator (<code>^</code>) can be used to toggle a bit.</p>

<pre><code>number ^= 1UL &lt;&lt; x;
</code></pre>

<p>That will toggle bit <code>x</code>.</p>

<h1>Checking a bit</h1>

<p>You didn't ask for this but I might as well add it.</p>

<p>To check a bit, shift the number x to the right, then bitwise AND it:</p>

<pre><code>bit = (number &gt;&gt; x) &amp; 1U;
</code></pre>

<p>That will put the value of bit <code>x</code> into the variable <code>bit</code>.</p>

<h1>Changing the <em>n</em>th bit to <em>x</em></h1>

<p>Setting the <code>n</code>th bit to either <code>1</code> or <code>0</code> can be achieved with the following on a 2's complement C++ implementation:</p>

<pre><code>number ^= (-x ^ number) &amp; (1UL &lt;&lt; n);
</code></pre>

<p>Bit <code>n</code> will be set if <code>x</code> is <code>1</code>, and cleared if <code>x</code> is <code>0</code>.  If <code>x</code> has some other value, you get garbage.  <code>x = !!x</code> will booleanize it to 0 or 1.</p>

<p>To make this independent of 2's complement negation behaviour (where <code>-1</code> has all bits set, unlike on a 1's complement or sign/magnitude C++ implementation), use unsigned negation.</p>

<pre><code>number ^= (-(unsigned long)x ^ number) &amp; (1UL &lt;&lt; n);
</code></pre>

<p>or</p>

<pre><code>unsigned long newbit = !!x;    // also booleanize to force 0 or 1
number ^= (-newbit ^ number) &amp; (1UL &lt;&lt; n);
</code></pre>

<p>It's generally a good idea to use unsigned types for portable bit manipulation.</p>
","47990"
"How to convert integer to string in C?","781767","","<p>I tried this example:</p>

<pre><code>/* itoa example */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main ()
{
    int i;
    char buffer [33];
    printf (""Enter a number: "");
    scanf (""%d"",&amp;i);
    itoa (i,buffer,10);
    printf (""decimal: %s\n"",buffer);
    itoa (i,buffer,16);
    printf (""hexadecimal: %s\n"",buffer);
    itoa (i,buffer,2);
    printf (""binary: %s\n"",buffer);
    return 0;
}
</code></pre>

<p>but the example there doesn't work (it says the function <code>itoa</code> doesn't exist)</p>
","<p>Use <a href=""http://en.cppreference.com/w/c/io/fprintf"" rel=""noreferrer""><code>sprintf()</code></a>:</p>

<pre><code>int someInt = 368;
char str[12];
sprintf(str, ""%d"", someInt);
</code></pre>

<p>All numbers that are representable by <code>int</code> will fit in a 12-char-array without overflow, unless your compiler is somehow using more than 32-bits for <code>int</code>. When using numbers with greater bitsize, e.g. <code>long</code> with most 64-bit compilers, you need to increase the array size—at least 21 characters for 64-bit types.</p>
","9655242"
"How do I concatenate const/literal strings in C?","718485","","<p>I'm working in C, and I have to concatenate a few things.</p>

<p>Right now I have this:</p>

<pre><code>message = strcat(""TEXT "", var);

message2 = strcat(strcat(""TEXT "", foo), strcat("" TEXT "", bar));
</code></pre>

<p>Now if you have experience in C I'm sure you realize that this gives you a segmentation fault when you try to run it. So how do I work around that?</p>
","<p>In C, ""strings"" are just plain <code>char</code> arrays. Therefore, you can't directly concatenate them with other ""strings"". </p>

<p>You can use the <code>strcat</code> function, which appends the string pointed to by <code>src</code> to the end of the string pointed to by <code>dest</code>:</p>

<pre><code>char *strcat(char *dest, const char *src);
</code></pre>

<p>Here is an <a href=""http://www.cplusplus.com/reference/clibrary/cstring/strcat.html"" rel=""noreferrer"">example from cplusplus.com</a>:</p>

<pre><code>char str[80];
strcpy(str, ""these "");
strcat(str, ""strings "");
strcat(str, ""are "");
strcat(str, ""concatenated."");
</code></pre>

<p>For the first parameter, you need to provide the destination buffer itself.  The destination buffer must be a char array buffer.  E.g.: <code>char buffer[1024];</code></p>

<p><strong>Make sure</strong> that the first parameter has enough space to store what you're trying to copy into it.  If available to you, it is safer to use functions like: <code>strcpy_s</code> and <code>strcat_s</code> where you explicitly have to specify the size of the destination buffer. </p>

<p><em>Note</em>: A string literal cannot be used as a buffer, since it is a constant. Thus, you always have to allocate a char array for the buffer.</p>

<p>The return value of <code>strcat</code> can simply be ignored, it merely returns the same pointer as was passed in as the first argument. It is there for convenience, and allows you to chain the calls into one line of code:</p>

<pre><code>strcat(strcat(str, foo), bar);
</code></pre>

<p>So your problem could be solved as follows:</p>

<pre><code>char *foo = ""foo"";
char *bar = ""bar"";
char str[80];
strcpy(str, ""TEXT "");
strcat(str, foo);
strcat(str, bar);
</code></pre>
","308712"
"Difference between float and double","682208","","<p>I know, I've read about the difference between double precision and single precision, etc. But they should give the same results on most cases right?</p>

<p>I was solving a problem on a programming contest and there were calculations with floating point numbers that were not really big, so I decided to use float instead of double, and I checked it - I was getting the correct results. But when I send the solution, it said only 1 of 10 tests was correct. I checked again and again, until I found that using float is not the same using double. I put double for the calculations and double for the output, and the program gave the SAME results, but this time it passed all the 10 tests correctly.</p>

<p>I repeat, the output was the SAME, the results were the SAME, but putting float didn't work - only double. The values were not so big too, and the program gave the same results on the same tests both with float and double, but the online judge accepted only the double-provided solution.</p>

<p>Why? What is the difference?</p>
","<p>Huge difference.</p>

<p>As the name implies, a <a href=""http://en.wikipedia.org/wiki/Double_precision_floating-point_format"" rel=""noreferrer""><code>double</code></a> has 2x the precision of <a href=""http://en.wikipedia.org/wiki/Single_precision_floating-point_format"" rel=""noreferrer""><code>float</code></a><sup>[1]</sup>. In general a <code>double</code> has 15 decimal digits of precision, while <code>float</code> has 7.</p>

<p>Here's how the number of digits are calculated:</p>

<blockquote>
  <p><code>double</code> has 52 mantissa bits + 1 hidden bit: log(2<sup>53</sup>)÷log(10) = 15.95 digits</p>
  
  <p><code>float</code> has 23 mantissa bits + 1 hidden bit: log(2<sup>24</sup>)÷log(10) = 7.22 digits</p>
</blockquote>

<p>This precision loss could lead to truncation errors much easier to float up, e.g.</p>

<pre><code>    float a = 1.f / 81;
    float b = 0;
    for (int i = 0; i &lt; 729; ++ i)
            b += a;
    printf(""%.7g\n"", b);   // prints 9.000023
</code></pre>

<p>while</p>

<pre><code>    double a = 1.0 / 81;
    double b = 0;
    for (int i = 0; i &lt; 729; ++ i)
            b += a;
    printf(""%.15g\n"", b);   // prints 8.99999999999996
</code></pre>

<p>Also, the maximum value of float is about <code>3e38</code>, but double is about <code>1.7e308</code>, so using <code>float</code> can hit Infinity much more easily than double for something simple e.g. computing 60 factorial.</p>

<p>Maybe their test case contains these huge numbers which causes your program to fail.</p>

<hr>

<p>Of course sometimes even <code>double</code> isn't accurate enough, hence we sometimes have <code>long double</code><sup>[1]</sup> (the above example gives 9.000000000000000066 on Mac), but all floating point types suffer from round-off errors, so if precision is very important (e.g. money processing) you should use <code>int</code> or a fraction class.</p>

<hr>

<p>BTW, don't use <code>+=</code> to sum lots of floating point numbers as the errors accumulate quickly. If you're using Python, use <code>fsum</code>. Otherwise, try to implement the <a href=""http://en.wikipedia.org/wiki/Kahan_summation_algorithm"" rel=""noreferrer"">Kahan summation algorithm</a>.</p>

<hr>

<p><sup>[1]: The C and C++ standards do not specify the representation of <code>float</code>, <code>double</code> and <code>long double</code>. It is possible that all three are implemented as IEEE double-precision. Nevertheless, for most architectures (gcc, MSVC; x86, x64, ARM) <code>float</code> <em>is</em> indeed a IEEE single-precision floating point number (binary32), and <code>double</code> <em>is</em> a IEEE double-precision floating point number (binary64).</sup></p>
","2386882"
"Correct format specifier for double in printf","642350","","<p>What is the correct format specifier for <code>double</code> in printf? Is it <code>%f</code> or is it <code>%lf</code>? I believe it's <code>%f</code>, but I am not sure.</p>

<h3>Code sample</h3>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
   double d = 1.4;
   printf(""%lf"", d); // Is this wrong?
}
</code></pre>
","<p><code>""%f""</code> is the (or at least one) correct format for a double. There <em>is</em> no format for a <code>float</code>, because if you attempt to pass a <code>float</code> to <code>printf</code>, it'll be promoted to <code>double</code> before <code>printf</code> receives it<sup>1</sup>. <code>""%lf""</code> is also acceptable under the current standard -- the <code>l</code> is specified as having no effect if followed by the <code>f</code> conversion specifier (among others).</p>

<p>Note that this is one place that <code>printf</code> format strings differ substantially from <code>scanf</code> (and <code>fscanf</code>, etc.) format strings. For output, you're passing a <em>value</em>, which will be promoted from <code>float</code> to <code>double</code> when passed as a variadic parameter. For input you're passing a <em>pointer</em>, which is not promoted, so you have to tell <code>scanf</code> whether you want to read a <code>float</code> or a <code>double</code>, so for <code>scanf</code>, <code>%f</code> means you want to read a <code>float</code> and <code>%lf</code> means you want to read a <code>double</code> (and, for what it's worth, for a <code>long double</code>, you use <code>%Lf</code> for either <code>printf</code> or <code>scanf</code>).</p>

<hr>

<p><sub>
1. C99, §6.5.2.2/6: ""If the expression that denotes the called function has a type that does not include a prototype, the integer promotions are performed on each argument, and arguments that have type float are promoted to double. These are called the default argument promotions."" In C++ the wording is somewhat different (e.g., it doesn't use the word ""prototype"") but the effect is the same: all the variadic parameters undergo default promotions before they're received by the function.
</sub></p>
","4264154"
"What does ""static"" mean in C?","641436","","<p>I've seen the word <code>static</code> used in different places in C code; is this like a static function/class in C# (where the implementation is shared across objects)?  </p>
","<ol>
<li>A static variable inside a function keeps its value between invocations.</li>
<li>A static global variable or a function is ""seen"" only in the file it's declared in</li>
</ol>

<p>(1) is the more foreign topic if you're a newbie, so here's an example:</p>

<pre><code>#include &lt;stdio.h&gt;

void foo()
{
    int a = 10;
    static int sa = 10;

    a += 5;
    sa += 5;

    printf(""a = %d, sa = %d\n"", a, sa);
}


int main()
{
    int i;

    for (i = 0; i &lt; 10; ++i)
        foo();
}
</code></pre>

<p>This prints:</p>

<pre><code>a = 15, sa = 15
a = 15, sa = 20
a = 15, sa = 25
a = 15, sa = 30
a = 15, sa = 35
a = 15, sa = 40
a = 15, sa = 45
a = 15, sa = 50
a = 15, sa = 55
a = 15, sa = 60
</code></pre>

<p>This is useful for cases where a function needs to keep some state between invocations, and you don't want to use global variables. Beware, however, this feature should be used very sparingly - it makes your code not thread-safe and harder to understand.</p>

<p>(2) Is used widely as an ""access control"" feature. If you have a .c file implementing some functionality, it usually exposes only a few ""public"" functions to users. The rest of its functions should be made <code>static</code>, so that the user won't be able to access them. This is encapsulation, a good practice.</p>

<p>Quoting <a href=""http://en.wikipedia.org/wiki/Static_variable"" rel=""noreferrer"">Wikipedia</a>:</p>

<blockquote>
  <p>In the C programming language, static
  is used with global variables and
  functions to set their scope to the
  containing file. In local variables,
  static is used to store the variable
  in the statically allocated memory
  instead of the automatically allocated
  memory. While the language does not
  dictate the implementation of either
  type of memory, statically allocated
  memory is typically reserved in data
  segment of the program at compile
  time, while the automatically
  allocated memory is normally
  implemented as a transient call stack.</p>
</blockquote>

<p>See <a href=""http://os.camden.rutgers.edu/c_resources/c_manual/C/CONCEPT/storage_class.html"" rel=""noreferrer"">here</a> and <a href=""http://os.camden.rutgers.edu/c_resources/c_manual/C/SYNTAX/static.htm"" rel=""noreferrer"">here</a> for more details.</p>

<p>And to answer your second question, it's not like in C#.</p>

<p>In C++, however, <code>static</code> is also used to define class attributes (shared between all objects of the same class) and methods. In C there are no classes, so this feature is irrelevant.</p>
","572550"
"How do function pointers in C work?","635818","","<p>I had some experience lately with function pointers in C.</p>

<p>So going on with the tradition of answering your own questions, I decided to make a small summary of the very basics, for those who need a quick dive-in to the subject.</p>
","<h1>Function pointers in C</h1>

<p>Let's start with a basic function which we will be <em>pointing to</em>:</p>

<pre><code>int addInt(int n, int m) {
    return n+m;
}
</code></pre>

<p>First thing, let's define a pointer to a function which receives 2 <code>int</code>s and returns an <code>int</code>:</p>

<pre><code>int (*functionPtr)(int,int);
</code></pre>

<p>Now we can safely point to our function:</p>

<pre><code>functionPtr = &amp;addInt;
</code></pre>

<p>Now that we have a pointer to the function, let's use it:</p>

<pre><code>int sum = (*functionPtr)(2, 3); // sum == 5
</code></pre>

<p>Passing the pointer to another function is basically the same:</p>

<pre><code>int add2to3(int (*functionPtr)(int, int)) {
    return (*functionPtr)(2, 3);
}
</code></pre>

<p>We can use function pointers in return values as well (try to keep up, it gets messy):</p>

<pre><code>// this is a function called functionFactory which receives parameter n
// and returns a pointer to another function which receives two ints
// and it returns another int
int (*functionFactory(int n))(int, int) {
    printf(""Got parameter %d"", n);
    int (*functionPtr)(int,int) = &amp;addInt;
    return functionPtr;
}
</code></pre>

<p>But it's much nicer to use a <code>typedef</code>:</p>

<pre><code>typedef int (*myFuncDef)(int, int);
// note that the typedef name is indeed myFuncDef

myFuncDef functionFactory(int n) {
    printf(""Got parameter %d"", n);
    myFuncDef functionPtr = &amp;addInt;
    return functionPtr;
}
</code></pre>
","840504"
"What is the difference between ++i and i++?","613536","","<p>In C, what is the difference between using <code>++i</code> and <code>i++</code>, and which should be used in the incrementation block of a <code>for</code> loop?</p>
","<ul>
<li><p><code>++i</code> will increment the value of <code>i</code>, and then return the incremented value.</p>

<pre><code> i = 1;
 j = ++i;
 (i is 2, j is 2)
</code></pre></li>
<li><p><code>i++</code> will increment the value of <code>i</code>, but return the original value that <code>i</code> held before being incremented.</p>

<pre><code> i = 1;
 j = i++;
 (i is 2, j is 1)
</code></pre></li>
</ul>

<p>For a <code>for</code> loop, either works. <code>++i</code> seems more common, perhaps because that is what is used in <a href=""https://en.wikipedia.org/wiki/The_C_Programming_Language"" rel=""noreferrer"">K&amp;R</a>.</p>

<p>In any case, follow the guideline ""prefer <code>++i</code> over <code>i++</code>"" and you won't go wrong.</p>

<p>There's a couple of comments regarding the efficiency of <code>++i</code> and <code>i++</code>. In any non-student-project compiler, there will be no performance difference.  You can verify this by looking at the generated code, which will be identical.</p>

<p>The efficiency question is interesting... here's my attempt at an answer:
<a href=""https://stackoverflow.com/questions/24886/is-there-a-performance-difference-between-i-and-i"">Is there a performance difference between i++ and ++i in C?</a></p>

<p>As <em>On Freund</em> notes, it's different for a C++ object, since <code>operator++()</code> is a function and the compiler can't know to optimize away the creation of a temporary object to hold the intermediate value.</p>
","24858"
"How to convert a string to integer in C?","604777","","<p>I am trying to find out if there is an alternative way of converting string to integer in C.</p>

<p>I regularly pattern the following in my code.</p>

<pre><code>char s[] = ""45"";

int num = atoi(s);
</code></pre>

<p>So, is there a better way or another way?</p>
","<p>There is <a href=""http://en.cppreference.com/w/c/string/byte/strtol"" rel=""noreferrer""><code>strtol</code></a> which is better IMO. Also I have taken a liking in <a href=""http://www.freebsd.org/cgi/man.cgi?query=strtonum"" rel=""noreferrer""><code>strtonum</code></a>, so use it if you have it (but remember it's not portable):</p>

<pre><code>long long
     strtonum(const char *nptr, long long minval, long long maxval,
     const char **errstr);
</code></pre>

<h3>EDIT</h3>

<p>You might also be interested in <a href=""http://en.cppreference.com/w/c/string/byte/strtoimax"" rel=""noreferrer""><code>strtoumax</code> and <code>strtoimax</code></a> which are standard functions in C99. For example you could say:</p>

<pre><code>uintmax_t num = strtoumax(s, NULL, 10);
if (num == UINTMAX_MAX &amp;&amp; errno == ERANGE)
    /* Could not convert. */
</code></pre>

<p>Anyway, stay away from <code>atoi</code>:</p>

<blockquote>
  <p>The call atoi(str) shall be equivalent to:</p>

<pre><code>(int) strtol(str, (char **)NULL, 10)
</code></pre>
  
  <p>except that the handling of errors may differ. <strong>If the value cannot be
  represented, the behavior is undefined</strong>.</p>
</blockquote>
","7021750"
"How can I get a file's size in C?","589393","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/8236/how-do-you-determine-the-size-of-a-file-in-c"">How do you determine the size of a file in C?</a>  </p>
</blockquote>



<p>How can I find out the size of a file? I opened with an application written in C. 
I would like to know the size, because I want to put the content of the loaded file into a string, which I alloc using <code>malloc()</code>. Just writing <code>malloc(10000*sizeof(char));</code> is IMHO a bad idea. </p>
","<p>You need to seek to the end of the file and then ask for the position:</p>

<pre><code>fseek(fp, 0L, SEEK_END);
sz = ftell(fp);
</code></pre>

<p>You can then seek back, e.g.:</p>

<pre><code>fseek(fp, 0L, SEEK_SET);
</code></pre>

<p>or (if seeking to go to the beginning)</p>

<pre><code>rewind(fp);
</code></pre>
","238607"
"How can I get the list of files in a directory using C or C++?","586667","","<p>How can I determine the list of files in a directory from inside my C or C++ code?</p>

<p>I'm not allowed to execute the <code>'ls'</code> command and parse the results from within my program.</p>
","<p>In small and simple tasks I do not use boost, I use <strong>dirent.h</strong> which is also available for windows:</p>

<pre><code>DIR *dir;
struct dirent *ent;
if ((dir = opendir (""c:\\src\\"")) != NULL) {
  /* print all the files and directories within directory */
  while ((ent = readdir (dir)) != NULL) {
    printf (""%s\n"", ent-&gt;d_name);
  }
  closedir (dir);
} else {
  /* could not open directory */
  perror ("""");
  return EXIT_FAILURE;
}
</code></pre>

<p>It is just a small header file and does most of the simple stuff you need without using a big template-based approach like boost(no offence, I like boost!).</p>

<p>The author of the windows compatibility layer is Toni Ronkko. In Unix, it is a standard header.</p>

<p><strong>UPDATE 2017</strong>:</p>

<p>In C++17 there is now an official way to list files of your file system: <code>std::filesystem</code>. There is an excellent answer from <a href=""https://stackoverflow.com/a/37494654/23264""><strong>Shreevardhan</strong></a> below with this source code:</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;filesystem&gt;
namespace fs = std::filesystem;

int main()
{
    std::string path = ""path_to_directory"";
    for (auto &amp; p : fs::directory_iterator(path))
        std::cout &lt;&lt; p &lt;&lt; std::endl;
}
</code></pre>

<p>Consider upvoting his answer, if you are using the C++17 approach.</p>
","612176"
"How do you printf an unsigned long long int(the format specifier for unsigned long long int)?","578347","","<pre><code>#include &lt;stdio.h&gt;
int main() {
    unsigned long long int num = 285212672; //FYI: fits in 29 bits
    int normalInt = 5;
    printf(""My number is %d bytes wide and its value is %ul. A normal number is %d.\n"", sizeof(num), num, normalInt);
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>My number is 8 bytes wide and its value is 285212672l. A normal number is 0.
</code></pre>

<p>I assume this unexpected result is from printing the <code>unsigned long long int</code>. How do you <code>printf()</code> an <code>unsigned long long int</code>?</p>
","<p>Use the ll (el-el) long-long modifier with the u (unsigned) conversion. (Works in windows, GNU).</p>

<pre><code>printf(""%llu"", 285212672);
</code></pre>
","2850"
"What is the argument for printf that formats a long?","504974","","<p>The <code>printf</code> function takes an argument type, such as <code>%d</code> or <code>%i</code> for a <code>signed int</code>. However, I don't see anything for a <code>long</code> value.</p>
","<p>Put an <code>l</code> (lowercased letter L) directly before the specifier.  </p>

<pre><code>unsigned long n;
long m;

printf(""%lu %ld"", n, m);
</code></pre>
","38570"
"How to initialize a struct in accordance with C programming language standards","499822","","<p>I want to initialize a struct element, split in declaration and initialization. This is what I have:</p>

<pre><code>typedef struct MY_TYPE {
  boolean flag;
  short int value;
  double stuff;
} MY_TYPE;

void function(void) {
  MY_TYPE a;
  ...
  a = { true, 15, 0.123 }
}
</code></pre>

<p>Is this the way to declare and initialize a local variable of <code>MY_TYPE</code> in accordance with C programming language standards (C89, C90, C99, C11, etc.)? Or is there anything better or at least working?</p>

<p><strong>Update</strong> I ended up having a static initialization element where I set every subelement according to my needs.</p>
","<p>In (ANSI) C99, you can use a <strong>designated initializer</strong> to initialize a structure: </p>

<pre><code>MY_TYPE a = { .flag = true, .value = 123, .stuff = 0.456 };
</code></pre>

<p>Edit: Other members are initialized as zero: ""Omitted field members are implicitly initialized the same as objects that have static storage duration."" (<a href=""https://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html"" rel=""noreferrer"">https://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html</a>)</p>
","330867"
"How to printf ""unsigned long"" in C?","496493","","<p>I can never understand how to print <code>unsigned long</code> datatype in C.</p>

<p>Suppose <code>unsigned_foo</code> is an <code>unsigned long</code>, then I try:</p>

<ul>
<li><code>printf(""%lu\n"", unsigned_foo)</code></li>
<li><code>printf(""%du\n"", unsigned_foo)</code></li>
<li><code>printf(""%ud\n"", unsigned_foo)</code></li>
<li><code>printf(""%ll\n"", unsigned_foo)</code></li>
<li><code>printf(""%ld\n"", unsigned_foo)</code></li>
<li><code>printf(""%dl\n"", unsigned_foo)</code></li>
</ul>

<p>And all of them print some kind of <code>-123123123</code> number instead of <code>unsigned long</code> that I have.</p>
","<p><code>%lu</code> is the correct format for <code>unsigned long</code>. Sounds like there are other issues at play here, such as memory corruption or an uninitialized variable. Perhaps show us a larger picture?</p>
","3209915"
"In C++ source, what is the effect of extern ""C""?","494434","","<p>What exactly does putting <code>extern ""C""</code> into C++ code do?</p>

<p>For example:</p>

<pre><code>extern ""C"" {
   void foo();
}
</code></pre>
","<p>extern ""C"" makes a function-name in C++ have 'C' linkage (compiler does not mangle the name) so that client C code can link to (i.e use) your function using a 'C' compatible header file that contains just the declaration of your function. Your function definition is contained in a binary format (that was compiled by your C++ compiler) that the client 'C' linker will then link to using the 'C' name.</p>

<p>Since C++ has overloading of function names and C does not, the C++ compiler cannot just use the function name as a unique id to link to, so it mangles the name by adding information about the arguments.  A C compiler does not need to mangle the name since you can not overload function names in C.  When you state that a function has extern ""C"" linkage in C++, the C++ compiler does not add argument/parameter type information to the name used for linkage.</p>

<p>Just so you know, you can specify ""C"" linkage to each individual declaration/definition explicitly or use a block to group a sequence of declarations/definitions to have a certain linkage:</p>

<pre><code>extern ""C"" void foo(int);
extern ""C""
{
   void g(char);
   int i;
}
</code></pre>

<p>If you care about the technicalities, they are listed in section 7.5 of the C++03 standard, here is a brief summary (with emphasis on extern ""C""):</p>

<ul>
<li>extern ""C"" is a linkage-specification</li>
<li>Every compiler is <em>required</em> to provide ""C"" linkage</li>
<li>a linkage specification shall occur only in namespace scope</li>
<li><strike> all function types, function names and variable names have a language linkage </strike> <b><a href=""https://stackoverflow.com/questions/1041866/in-c-source-what-is-the-effect-of-extern-c#comment20842899_1041880"">See Richard's Comment:</a></b> Only function names and variable names with external linkage have a language linkage</li>
<li>two function types with distinct language linkages are distinct types even if otherwise identical</li>
<li>linkage specs nest, inner one determines the final linkage</li>
<li>extern ""C"" is ignored for class members </li>
<li>at most one function with a particular name can have ""C"" linkage (regardless of namespace)</li>
<li><strike> extern ""C"" forces a function to have external linkage (cannot make it static) </strike> <b> See Richard's comment: </b>   'static' inside 'extern ""C""' is valid; an entity so declared has internal linkage, and so does not have a language linkage </li>
<li>Linkage from C++ to objects defined in other languages and to objects defined in C++ from other languages is implementation-defined and language-dependent. Only where the object layout strategies of two language implementations are similar enough can such linkage be achieved  </li>
</ul>
","1041880"
"What is size_t in C?","471929","","<p>I am getting confused with <code>size_t</code> in C. I know that it is returned by the <code>sizeof</code> operator. But what exactly is it? Is it a data type?</p>

<p>Let's say I have a <code>for</code> loop:</p>

<pre><code>for(i = 0; i &lt; some_size; i++)
</code></pre>

<p>Should I use <code>int i;</code> or <code>size_t i;</code>?</p>
","<p><a href=""http://en.wikipedia.org/wiki/Size_t"" rel=""noreferrer"">From Wikipedia</a>:</p>

<blockquote>
  <p>According to the 1999 ISO C standard
  (C99), <code>size_t</code> is an unsigned integer
  type of at least 16 bit (see sections
  7.17 and 7.18.3).</p>
  
  <p><code>size_t</code>is an unsigned data type
  defined by several C/C++ standards,
  e.g. the C99 ISO/IEC 9899 standard,
  that is defined in <code>stddef.h</code>.<a href=""http://en.wikipedia.org/wiki/Size_t"" rel=""noreferrer"">1</a> It can
  be further imported by inclusion of
  <code>stdlib.h</code> as this file internally sub
  includes <code>stddef.h</code>.</p>
  
  <p>This type is used to represent the
  size of an object. Library functions
  that take or return sizes expect them
  to be of type or have the return type
  of <code>size_t</code>. Further, the most
  frequently used compiler-based
  operator sizeof should evaluate to a
  constant value that is compatible with
  <code>size_t</code>.</p>
</blockquote>

<p>As an implication, <code>size_t</code> is a type guaranteed to hold any array index.</p>
","2550799"
"MIN and MAX in C","458895","","<p>Where are <code>MIN</code> and <code>MAX</code> defined in C, if at all?</p>

<p>What is the best way to implement these, as generically and type safely as possible? (Compiler extensions/builtins for mainstream compilers preferred.)</p>
","<blockquote>
  <p>Where are <code>MIN</code> and <code>MAX</code> defined in C, if at all?</p>
</blockquote>

<p>They aren't.</p>

<blockquote>
  <p>What is the best way to implement these, as generically and type safe as possible (compiler extensions/builtins for mainstream compilers preferred).</p>
</blockquote>

<p>As functions. I wouldn't use macros like <code>#define MIN(X, Y) (((X) &lt; (Y)) ? (X) : (Y))</code>, especially if you plan to deploy your code. Either write your own, use something like standard <a href=""http://en.cppreference.com/w/c/numeric/math/fmax"" rel=""noreferrer""><code>fmax</code></a> or <a href=""http://en.cppreference.com/w/c/numeric/math/fmin"" rel=""noreferrer""><code>fmin</code></a>, or fix the macro using <a href=""http://gcc.gnu.org/onlinedocs/gcc-4.9.2/gcc/Typeof.html#Typeof"" rel=""noreferrer"">GCC's typeof</a> (you get typesafety bonus too):</p>

<pre><code> #define max(a,b) \
   ({ __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     _a &gt; _b ? _a : _b; })
</code></pre>

<p>Everyone says ""oh I know about double evaluation, it's no problem"" and a few months down the road, you'll be debugging the silliest problems for hours on end.</p>

<p>Note the use of <code>__typeof__</code> instead of <code>typeof</code>:</p>

<blockquote>
  <p>If you are writing a header file that
  must work when included in ISO C
  programs, write <code>__typeof__</code> instead of
  <code>typeof</code>.</p>
</blockquote>
","3437484"
"What is a ""static"" function?","458824","","<p>The question was about plain <a href=""/questions/tagged/c"" class=""post-tag"" title=""show questions tagged &#39;c&#39;"" rel=""tag"">c</a> functions, not <a href=""/questions/tagged/c%2b%2b"" class=""post-tag"" title=""show questions tagged &#39;c++&#39;"" rel=""tag"">c++</a> <code>static</code> methods, as clarified in comments.</p>

<p>Ok, I understand what a <code>static</code> variable is, but what is a <code>static</code> function?</p>

<p>And why is it that if I declare a function, let's say <code>void print_matrix</code>, in let's say <code>a.c</code> (WITHOUT <code>a.h</code>) and include <code>""a.c""</code> -  I get <code>""print_matrix@@....) already defined in a.obj""</code>, BUT if I declare it as <code>static void print_matrix</code> then it compiles?</p>

<p><strong>UPDATE</strong> Just to clear things up - I know that including <code>.c</code> is bad, as many of you pointed out. I just do it to temporarily clear space in <code>main.c</code> until I have a better idea of how to group all those functions into proper <code>.h</code> and <code>.c</code> files. Just a temporary, quick solution.</p>
","<p><code>static</code> functions are functions that are only visible to other functions in the same file (more precisely <em>the same <a href=""http://en.wikipedia.org/wiki/Translation_unit_%28programming%29"" rel=""noreferrer"">translation unit</a></em>).</p>

<p><strong>EDIT</strong>: For those who thought, that the author of the questions meant a 'class method': As the question is tagged <code>C</code> he means a plain old C function. For (C++/Java/...) class methods, <code>static</code> means that this method can be called on the class itself, no instance of that class necessary.</p>
","558132"
"typedef struct vs struct definitions","457129","","<p>I'm a beginner in C programming, but I was wondering what's the difference between using typedef when defining a structure versus not using typedef. It seems to me like there's really no difference, they accomplish the same.</p>

<pre><code>struct myStruct{
    int one;
    int two;
};
</code></pre>

<p>vs.</p>

<pre><code>typedef struct{
    int one;
    int two;
}myStruct;
</code></pre>
","<p>The common idiom is using both: </p>

<pre><code>typedef struct X { 
    int x; 
} X;
</code></pre>

<p>They are different definitions. To make the discussion clearer I will split the sentence:</p>

<pre><code>struct S { 
    int x; 
};

typedef struct S S;
</code></pre>

<p>In the first line you are defining the identifier <code>S</code> within the struct name space (not in the C++ sense). You can use it and define variables or function arguments of the newly defined type by defining the type of the argument as <code>struct S</code>:</p>

<pre><code>void f( struct S argument ); // struct is required here
</code></pre>

<p>The second line adds a type alias <code>S</code> in the global name space and thus allows you to just write:</p>

<pre><code>void f( S argument ); // struct keyword no longer needed
</code></pre>

<p>Note that since both identifier name spaces are different, defining <code>S</code> both in the structs and global spaces is not an error, as it is not redefining the same identifier, but rather creating a different identifier in a different place.</p>

<p>To make the difference clearer:</p>

<pre><code>typedef struct S { 
    int x; 
} T;

void S() { } // correct

//void T() {} // error: symbol T already defined as an alias to 'struct S'
</code></pre>

<p>You can define a function with the same name of the struct as the identifiers are kept in different spaces, but you cannot define a function with the same name as a <code>typedef</code> as those identifiers collide.</p>

<p>In C++, it is slightly different as the rules to locate a symbol have changed subtly. C++ still keeps the two different identifier spaces, but unlike in C, when you only define the symbol within the class identifier space, you are not required to provide the struct/class keyword:</p>

<pre><code> // C++
struct S { 
    int x; 
}; // S defined as a class

void f( S a ); // correct: struct is optional
</code></pre>

<p>What changes are the search rules, not where the identifiers are defined. The compiler will search the global identifier table and after <code>S</code> has not been found it will search for <code>S</code> within the class identifiers.</p>

<p>The code presented before behaves in the same way:</p>

<pre><code>typedef struct S { 
    int x; 
} T;

void S() {} // correct [*]

//void T() {} // error: symbol T already defined as an alias to 'struct S'
</code></pre>

<p>After the definition of the <code>S</code> function in the second line, the struct S cannot be resolved automatically by the compiler, and to create an object or define an argument of that type you must fall back to including the <code>struct</code> keyword:</p>

<pre><code>// previous code here...
int main() {
    S(); 
    struct S s;
}
</code></pre>
","1675446"
"What is an unsigned char?","441834","","<p>In C/C++, what an <code>unsigned char</code> is used for? How is it different from a regular <code>char</code>?</p>
","<p>In C++, there are three <em>distinct</em> character types:</p>

<ul>
<li><code>char</code></li>
<li><code>signed char</code></li>
<li><code>unsigned char</code></li>
</ul>

<p>If you are using character types for <em>text</em>, use the unqualified <code>char</code>:</p>

<ul>
<li>it is the type of character literals like <code>'a'</code> or <code>'0'</code>.</li>
<li>it is the type that makes up C strings like <code>""abcde""</code></li>
</ul>

<p>It also works out as a number value, but it is unspecified whether that value is treated as signed or unsigned. Beware character comparisons through inequalities - although if you limit yourself to ASCII (0-127) you're just about safe.</p>

<p>If you are using character types as <em>numbers</em>, use:</p>

<ul>
<li><code>signed char</code>, which gives you <em>at least</em> the -127 to 127 range. (-128 to 127 is common)</li>
<li><code>unsigned char</code>, which gives you <em>at least</em> the 0 to 255 range.</li>
</ul>

<p>""At least"", because the C++ standard only gives the minimum range of values that each numeric type is required to cover. <code>sizeof (char)</code> is required to be 1 (i.e. one byte), but a byte could in theory be for example 32 bits. <strong><code>sizeof</code> would still be report its size as <code>1</code></strong> - meaning that you <em>could</em> have <code>sizeof (char) == sizeof (long) == 1</code>.</p>
","87648"
"How to define an enumerated type (enum) in C?","440145","","<p>I'm not sure what is the proper syntax for using C enums. I have the following code:</p>

<pre><code>enum {RANDOM, IMMEDIATE, SEARCH} strategy;
strategy = IMMEDIATE;
</code></pre>

<p>But this does not compile, with the following error:</p>

<pre><code>error: conflicting types for ‘strategy’
error: previous declaration of ‘strategy’ was here
</code></pre>

<p>What am I doing wrong?</p>
","<p>Declaring an enum variable is done like this:</p>

<pre><code>enum strategy {RANDOM, IMMEDIATE, SEARCH};
enum strategy my_strategy = IMMEDIATE;
</code></pre>

<p>However, you can use a <code>typedef</code> to shorten the variable declarations, like so:</p>

<pre><code>typedef enum {RANDOM, IMMEDIATE, SEARCH} strategy;
strategy my_strategy = IMMEDIATE;
</code></pre>

<p>Having a naming convention to distinguish between types and variables is a good idea:</p>

<pre><code>typedef enum {RANDOM, IMMEDIATE, SEARCH} strategy_type;
strategy_type my_strategy = IMMEDIATE;
</code></pre>
","1102556"
"Use of exit() function","423814","","<p>I want to know how and when can I use the <code>exit()</code> function like the program in my book:</p>

<pre><code>#include&lt;stdio.h&gt;

void main()
{
    int goals;
    printf(""enter number of goals scored"");
    scanf(""%d"",&amp;goals);

    if(goals&lt;=5)
        goto sos;
    else
    {
        printf(""hehe"");
        exit( );
    }
    sos:
    printf(""to err is human"");
}
</code></pre>

<p>When I run it, it shows ERROR: <em>call to undefined function exit()</em>.</p>

<p>Also, I want to know how I can create an option to close the window in which the program runs? For example, I made a menu-driven program which had several options and one of them was <em>""exit the menu""</em>. How can I make this exit the program (i.e. close the window)?</p>
","<p>Try using <code>exit(0);</code> instead. The <a href=""http://man7.org/linux/man-pages/man3/exit.3.html"" rel=""noreferrer""><code>exit</code></a> function expects an integer parameter. And don't forget to <code>#include &lt;stdlib.h&gt;</code>.</p>
","2425223"
"Write to .txt file?","416465","","<p>How can I write a little piece of text into a <code>.txt</code> file?
I've been Googling for over 3-4 hours, but can't find out how to do it.</p>

<p><code>fwrite();</code> has so many arguments, and I don't know how to use it.</p>

<p>What's the easiest function to use when you only want to write a name and a few numbers to a <code>.txt</code> file?</p>

<p>Edit: Added a piece of my code.</p>

<pre><code>    char name;
    int  number;
    FILE *f;
    f = fopen(""contacts.pcl"", ""a"");

    printf(""\nNew contact name: "");
    scanf(""%s"", &amp;name);
    printf(""New contact number: "");
    scanf(""%i"", &amp;number);


    fprintf(f, ""%c\n[ %d ]\n\n"", name, number);
    fclose(f);
</code></pre>
","<pre><code>FILE *f = fopen(""file.txt"", ""w"");
if (f == NULL)
{
    printf(""Error opening file!\n"");
    exit(1);
}

/* print some text */
const char *text = ""Write this to the file"";
fprintf(f, ""Some text: %s\n"", text);

/* print integers and floats */
int i = 1;
float py = 3.1415927;
fprintf(f, ""Integer: %d, float: %f\n"", i, py);

/* printing single chatacters */
char c = 'A';
fprintf(f, ""A character: %c\n"", c);

fclose(f);
</code></pre>
","11574035"
"Split string with delimiters in C","416131","","<p>How do I write a function to split and return an array for a string with delimiters in the C programming language?</p>

<pre><code>char* str = ""JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC"";
str_split(str,',');
</code></pre>
","<p>You can use the <a href=""http://en.cppreference.com/w/c/string/byte/strtok""><code>strtok()</code></a> function to split a string (and specify the delimiter to use). Note that <code>strtok()</code> will modify the string passed into it. If the original string is required elsewhere make a copy of it and pass the copy to <code>strtok()</code>.</p>

<p>EDIT:</p>

<p>Example (note it does not handle consecutive delimiters, ""JAN,,,FEB,MAR"" for example):</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;

char** str_split(char* a_str, const char a_delim)
{
    char** result    = 0;
    size_t count     = 0;
    char* tmp        = a_str;
    char* last_comma = 0;
    char delim[2];
    delim[0] = a_delim;
    delim[1] = 0;

    /* Count how many elements will be extracted. */
    while (*tmp)
    {
        if (a_delim == *tmp)
        {
            count++;
            last_comma = tmp;
        }
        tmp++;
    }

    /* Add space for trailing token. */
    count += last_comma &lt; (a_str + strlen(a_str) - 1);

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;

    result = malloc(sizeof(char*) * count);

    if (result)
    {
        size_t idx  = 0;
        char* token = strtok(a_str, delim);

        while (token)
        {
            assert(idx &lt; count);
            *(result + idx++) = strdup(token);
            token = strtok(0, delim);
        }
        assert(idx == count - 1);
        *(result + idx) = 0;
    }

    return result;
}

int main()
{
    char months[] = ""JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC"";
    char** tokens;

    printf(""months=[%s]\n\n"", months);

    tokens = str_split(months, ',');

    if (tokens)
    {
        int i;
        for (i = 0; *(tokens + i); i++)
        {
            printf(""month=[%s]\n"", *(tokens + i));
            free(*(tokens + i));
        }
        printf(""\n"");
        free(tokens);
    }

    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./main.exe
months=[JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC]

month=[JAN]
month=[FEB]
month=[MAR]
month=[APR]
month=[MAY]
month=[JUN]
month=[JUL]
month=[AUG]
month=[SEP]
month=[OCT]
month=[NOV]
month=[DEC]
</code></pre>
","9210560"
"In C, how should I read a text file and print all strings","405039","","<p>I have a text file named <code>test.txt</code></p>

<p>I want to write a C program that can read this file and print the content to the console (assume the file contains only ASCII text).</p>

<p>I don't know how to get the size of my string variable. Like this:</p>

<pre><code>char str[999];
FILE * file;
file = fopen( ""test.txt"" , ""r"");
if (file) {
    while (fscanf(file, ""%s"", str)!=EOF)
        printf(""%s"",str);
    fclose(file);
}
</code></pre>

<p>The size <code>999</code> doesn't work because the string returned by <code>fscanf</code> can be larger than that.  How can I solve this?</p>
","<p>The simplest way is to read a character, and print it right after reading:</p>

<pre><code>int c;
FILE *file;
file = fopen(""test.txt"", ""r"");
if (file) {
    while ((c = getc(file)) != EOF)
        putchar(c);
    fclose(file);
}
</code></pre>

<p><code>c</code> is <code>int</code> above, since <code>EOF</code> is a negative number, and a plain <code>char</code> may be <code>unsigned</code>.</p>

<p>If you want to read the file in chunks, but without dynamic memory allocation, you can do:</p>

<pre><code>#define CHUNK 1024 /* read 1024 bytes at a time */
char buf[CHUNK];
FILE *file;
size_t nread;

file = fopen(""test.txt"", ""r"");
if (file) {
    while ((nread = fread(buf, 1, sizeof buf, file)) &gt; 0)
        fwrite(buf, 1, nread, stdout);
    if (ferror(file)) {
        /* deal with error */
    }
    fclose(file);
}
</code></pre>

<p>The second method above is essentially how you will read a file with a dynamically allocated array:</p>

<pre><code>char *buf = malloc(chunk);

if (buf == NULL) {
    /* deal with malloc() failure */
}

/* otherwise do this.  Note 'chunk' instead of 'sizeof buf' */
while ((nread = fread(buf, 1, chunk, file)) &gt; 0) {
    /* as above */
}
</code></pre>

<p>Your method of <code>fscanf()</code> with <code>%s</code> as format loses information about whitespace in the file, so it is not exactly copying a file to <code>stdout</code>.</p>
","3463793"
"Difference between malloc and calloc?","401380","","<p>What is the difference between doing:</p>

<pre><code>ptr = (char **) malloc (MAXELEMS * sizeof(char *));
</code></pre>

<p>or:</p>

<pre><code>ptr = (char **) calloc (MAXELEMS, sizeof(char*));
</code></pre>

<p>When is it a good idea to use calloc over malloc or vice versa?</p>
","<p><code>calloc()</code> zero-initializes the buffer, while <code>malloc()</code> leaves the memory uninitialized.</p>

<p><strong>EDIT:</strong></p>

<p>Zeroing out the memory may take a little time, so you probably want to use <code>malloc()</code> if that performance is an issue.  If initializing the memory is more important, use <code>calloc()</code>.  For example, <code>calloc()</code> might save you a call to <code>memset()</code>.</p>
","1538427"
"How do I get the directory that a program is running from?","396325","","<p>Is there a platform-agnostic and filesystem-agnostic method to obtain the full path of the directory from where a program is running using C/C++? Not to be confused with the current working directory. (Please don't suggest libraries unless they're standard ones like clib or STL.)</p>

<p>(If there's no platform/filesystem-agnostic method, suggestions that work in Windows and Linux for specific filesystems are welcome too.)</p>
","<p>Here's code to get the full path to the executing app:</p>

<p>Windows:</p>

<pre><code>int bytes = GetModuleFileName(NULL, pBuf, len);
if(bytes == 0)
    return -1;
else
    return bytes;
</code></pre>

<p>Linux:</p>

<pre><code>char szTmp[32];
sprintf(szTmp, ""/proc/%d/exe"", getpid());
int bytes = MIN(readlink(szTmp, pBuf, len), len - 1);
if(bytes &gt;= 0)
    pBuf[bytes] = '\0';
return bytes;
</code></pre>
","198099"
"What is a segmentation fault?","396242","","<p>What is a segmentation fault? Is it different in C and C++? How are segmentation faults and dangling pointers related?</p>
","<p>Segmentation fault is a specific kind of error caused by accessing memory that “does not belong to you.” It’s a helper mechanism that keeps you from corrupting the memory and introducing hard-to-debug memory bugs. Whenever you get a segfault you know you are doing something wrong with memory – accessing variable that has already been freed, writing to a read-only portion of the memory, etc. Segmentation fault is essentially the same in most languages that let you mess with the memory management, there is no principial difference between segfaults in C and C++.</p>

<p>There are many ways to get a segfault, at least in the lower-level languages such as C(++). A common way to get a segfault is to dereference a null pointer:</p>

<pre><code>int *p = NULL;
*p = 1;
</code></pre>

<p>Another segfault happens when you try to write to a portion of memory that was marked as read-only:</p>

<pre><code>char *str = ""Foo""; // Compiler marks the constant string as read-only
*str = 'b'; // Which means this is illegal and results in a segfault
</code></pre>

<p>Dangling pointer points to a thing that does not exist any more, like here:</p>

<pre><code>char *p = NULL;
{
    char c;
    p = &amp;c;
}
// Now p is dangling
</code></pre>

<p>The pointer <code>p</code> dangles because it points to character variable <code>c</code> that ceased to exist after the block ended. And when you try to dereference dangling pointer (like <code>*p='A'</code>), you would probably get a segfault.</p>
","2346849"
"How do you pass a function as a parameter in C?","394242","","<p>I want to create a function that performs a function passed by parameter on a set of data. How do you pass a function as a parameter in C?</p>
","<p><strong>Declaration</strong></p>

<p>A prototype for a function which takes a function parameter looks like the following:</p>

<pre><code>void func ( void (*f)(int) );
</code></pre>

<p>This states that the parameter <code>f</code> will be a pointer to a function which has a <code>void</code> return type and which takes a single <code>int</code> parameter. The following function (<code>print</code>) is an example of a function which could be passed to <code>func</code> as a parameter because it is the proper type:</p>

<pre><code>void print ( int x ) {
  printf(""%d\n"", x);
}
</code></pre>

<p><strong>Function Call</strong></p>

<p>When calling a function with a function parameter, the value passed must be a pointer to a function. Use the function's name (without parentheses) for this:</p>

<pre><code>func(print);
</code></pre>

<p>would call <code>func</code>, passing the print function to it.</p>

<p><strong>Function Body</strong></p>

<p>As with any parameter, func can now use the parameter's name in the function body to access the value of the parameter. Let's say that func will apply the function it is passed to the numbers 0-4. Consider, first, what the loop would look like to call print directly:</p>

<pre><code>for ( int ctr = 0 ; ctr &lt; 5 ; ctr++ ) {
  print(ctr);
}
</code></pre>

<p>Since <code>func</code>'s parameter declaration says that <code>f</code> is the name for a pointer to the desired function, we recall first that if <code>f</code> is a pointer then <code>*f</code> is the thing that <code>f</code> points to (i.e. the function <code>print</code> in this case). As a result, just replace every occurrence of print in the loop above with <code>*f</code>:</p>

<pre><code>void func ( void (*f)(int) ) {
  for ( int ctr = 0 ; ctr &lt; 5 ; ctr++ ) {
    (*f)(ctr);
  }
}
</code></pre>

<p>From <a href=""http://math.hws.edu/bridgeman/courses/331/f05/handouts/c-c++-notes.html"" rel=""noreferrer"">http://math.hws.edu/bridgeman/courses/331/f05/handouts/c-c++-notes.html</a></p>
","9413"
"How to compile and run C/C++ in a Unix console/Mac terminal?","392198","","<p>How can I compile/run C or C++ in Unix console or a Mac terminal?</p>

<p>(I know it, forget it, and relearn it again. Time to write it down.)</p>
","<p>If it is a simple single source program:</p>

<pre><code>make foo
</code></pre>

<p>where the source file is foo.c or foo.cpp, etc.</p>

<p>You dont even need a makefile. Make has enough built-in rules to build your source file into an executable of the same name, minus extension.</p>
","221257"
"warning: implicit declaration of function","384489","","<p>My compiler (GCC) is giving me the warning:</p>

<blockquote>
  <p>warning: implicit declaration of function</p>
</blockquote>

<p>Please help me understand why is it coming.</p>
","<p>You are using a function for which the compiler has not seen a declaration (""<em>prototype</em>"") yet.</p>

<p>For example:</p>

<pre><code>int main()
{
    fun(2, ""21""); /* The compiler has not seen the declaration. */       
    return 0;
}

int fun(int x, char *p)
{
    /* ... */
}
</code></pre>

<p>You need to declare your function before main, like this, either directly or in a header:</p>

<pre><code>int fun(int x, char *p);
</code></pre>
","8440833"
"Why should we typedef a struct so often in C?","377314","","<p>I have seen many programs consisting of structures like the one below</p>

<pre><code>typedef struct 
{
    int i;
    char k;
} elem;

elem user;
</code></pre>

<p>Why is it needed so often? Any specific reason or applicable area?</p>
","<p>As Greg Hewgill said, the typedef means you no longer have to write <code>struct</code> all over the place. That not only saves keystrokes, it also can make the code cleaner since it provides a smidgen more abstraction.</p>

<p>Stuff like</p>

<pre><code>typedef struct {
  int x, y;
} Point;

Point point_new(int x, int y)
{
  Point a;
  a.x = x;
  a.y = y;
  return a;
}
</code></pre>

<p>becomes cleaner when you don't need to see the ""struct"" keyword all over the place, it looks more as if there really is a type called ""Point"" in your language. Which, after the <code>typedef</code>, is the case I guess.</p>

<p>Also note that while your example (and mine) omitted naming the <code>struct</code>  itself, actually naming it is also useful for when you want to provide an opaque type. Then you'd have code like this in the header, for instance:</p>

<pre><code>typedef struct Point Point;

Point * point_new(int x, int y);
</code></pre>

<p>and then provide the <code>struct</code> declaration in the implementation file:</p>

<pre><code>struct Point
{
  int x, y;
};

Point * point_new(int x, int y)
{
  Point *p;
  if((p = malloc(sizeof *p)) != NULL)
  {
    p-&gt;x = x;
    p-&gt;y = y;
  }
  return p;
}
</code></pre>

<p>In this latter case, you cannot return the Point by value, since its declaration is hidden from users of the header file. This is a technique used widely in <a href=""http://www.gtk.org/"" rel=""noreferrer"">GTK+</a>, for instance.</p>

<p><strong>UPDATE</strong> Note that there are also highly-regarded C projects where this use of <code>typedef</code> to hide <code>struct</code> is considered a bad idea, the Linux kernel is probably the most well-known such project. See Chapter 5 of <a href=""https://www.kernel.org/doc/html/latest/process/coding-style.html#typedefs"" rel=""noreferrer"">The Linux Kernel CodingStyle document</a> for Linus' angry words. :) My point is that the ""should"" in the question is perhaps not set in stone, after all.</p>
","252810"
"'float' vs. 'double' precision","374594","","<p>The code</p>

<pre><code>float x  = 3.141592653589793238;
double z = 3.141592653589793238;
printf(""x=%f\n"", x);
printf(""z=%f\n"", z);
printf(""x=%20.18f\n"", x);
printf(""z=%20.18f\n"", z);
</code></pre>

<p>will give you the output</p>

<pre><code>x=3.141593
z=3.141593
x=3.141592741012573242
z=3.141592653589793116
</code></pre>

<p>where on the third line of output <code>741012573242</code> is garbage and on the fourth line <code>116</code> is garbage. Do doubles always have 16 significant figures while floats always have 7 significant figures? Why don't doubles have 14 significant figures?</p>
","<p>Floating point numbers in C use <a href=""http://en.wikipedia.org/wiki/IEEE_754-2008"" rel=""noreferrer"">IEEE 754</a> encoding.</p>

<p>This type of encoding uses a sign, a significand, and an exponent.</p>

<p>Because of this encoding, many numbers will have small changes to allow them to be stored.</p>

<p>Also, the number of significant digits can change slightly since it is a binary representation, not a decimal one.</p>

<p>Single precision (float) gives you 23 bits of significand, 8 bits of exponent, and 1 sign bit.</p>

<p>Double precision (double) gives you 52 bits of significand, 11 bits of exponent, and 1 sign bit.</p>
","5098598"
"what is Segmentation fault (core dumped)?","371815","","<p>I am trying to write a C program in linux that having sqrt of the argument, Here's the code:</p>

<pre><code>#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;math.h&gt;

int main(char *argv[]){
    float k;
    printf(""this is consumer\n"");
    k=(float)sqrt(atoi(argv[1]));
    printf(""%s\n"",k);
    return 0;
}
</code></pre>

<p>After I type in my input at the ""shell> "" prompt, gcc gives me the following error:</p>

<pre><code>Segmentation fault (core dumped)
</code></pre>
","<p>""Segmentation fault"" means that you tried to access memory that you do not have access to.</p>

<p>The first problem is with your arguments of <code>main</code>. The <code>main</code> function should be <code>int main(int argc, char *argv[])</code>, and you should check that <code>argc</code> is at least 2 before accessing <code>argv[1]</code>.</p>

<p>Also, since you're passing in a <code>float</code> to <code>printf</code> (which, by the way, gets converted to a <code>double</code> when passing to <code>printf</code>), you should use the <code>%f</code> format specifier. The <code>%s</code> format specifier is for strings (<code>'\0'</code>-terminated character arrays).</p>
","19641654"
"Get a substring of a char*","370596","","<p>For example, I have this</p>

<pre><code>char *buff = ""this is a test string"";
</code></pre>

<p>and want to get <code>""test""</code>. How can I do that?</p>
","<pre><code>char subbuff[5];
memcpy( subbuff, &amp;buff[10], 4 );
subbuff[4] = '\0';
</code></pre>

<p>Job done :)</p>
","4214350"
"Fastest way to check if a file exist using standard C++/C++11/C?","367642","","<p>I would like to find the fastest way to check if a file exist in standard C++11, C++, or C. I have thousands of files and before doing something on them I need to check if all of them exist. What can I write instead of <code>/* SOMETHING */</code> in the following function?  </p>

<pre><code>inline bool exist(const std::string&amp; name)
{
    /* SOMETHING */
}
</code></pre>
","<p>Well I threw together a test program that ran each of these methods 100,000 times, half on files that existed and half on files that didn't.</p>

<pre><code>#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string&gt;

inline bool exists_test0 (const std::string&amp; name) {
    ifstream f(name.c_str());
    return f.good();
}

inline bool exists_test1 (const std::string&amp; name) {
    if (FILE *file = fopen(name.c_str(), ""r"")) {
        fclose(file);
        return true;
    } else {
        return false;
    }   
}

inline bool exists_test2 (const std::string&amp; name) {
    return ( access( name.c_str(), F_OK ) != -1 );
}

inline bool exists_test3 (const std::string&amp; name) {
  struct stat buffer;   
  return (stat (name.c_str(), &amp;buffer) == 0); 
}
</code></pre>

<p>Results for total time to run the 100,000 calls averaged over 5 runs,</p>

<pre><code>Method exists_test0 (ifstream): **0.485s**
Method exists_test1 (FILE fopen): **0.302s**
Method exists_test2 (posix access()): **0.202s**
Method exists_test3 (posix stat()): **0.134s**
</code></pre>

<p>The stat() function provided the best performance on my system (Linux, compiled with g++), with a standard fopen call being your best bet if you for some reason refuse to use POSIX functions. </p>
","12774387"
"What does ""dereferencing"" a pointer mean?","357660","","<p>Please include an example with the explanation.</p>
","<h2>Reviewing the basic terminology</h2>

<p>It's <em>usually</em> good enough - unless you're programming assembly - to envisage a <strong><em>pointer</em></strong> containing a numeric memory address, with 1 referring to the second byte in the process's memory, 2 the third, 3 the fourth and so on....</p>

<ul>
<li>What happened to 0 and the first byte?  Well, we'll get to that later - see <em>null pointers</em> below.</li>
<li>For a more accurate definition of what pointers store, and how memory and addresses relate, see <em>""More about memory addresses, and why you probably don't need to know""</em>.</li>
</ul>

<p>When you want to access the data/value in the memory that the pointer points to - the contents of the address with that numerical index - then you <strong><em>dereference</em></strong> the pointer.</p>

<p>Different computer languages have different notations to tell the compiler or interpreter that you're now interested in the pointed-to value - I focus below on C and C++.</p>

<h2>A pointer scenario</h2>

<p>Consider in C, given a pointer such as <code>p</code> below...</p>

<pre><code>const char* p = ""abc"";
</code></pre>

<p>...four bytes with the numerical values used to encode the letters 'a', 'b', 'c', and a 0 byte to denote the end of the textual data, are stored somewhere in memory and the numerical address of that data is stored in <code>p</code>.</p>

<p>For example, if the string literal happened to be at address 0x1000 and <code>p</code> a 32-bit pointer at 0x2000, the memory content would be:</p>

<pre><code>Memory Address (hex)    Variable name    Contents
1000                                     'a' == 97 (ASCII)
1001                                     'b' == 98
1002                                     'c' == 99
1003                                     0
...
2000-2003               p                1000 hex
</code></pre>

<p>Note that there is no variable name/identifier for address 0x1000, but we can indirectly refer to the string literal using a pointer storing its address: <code>p</code>.</p>

<h2>Dereferencing the pointer</h2>

<p>To refer to the characters <code>p</code> points to, we dereference <code>p</code> using one of these notations (again, for C):</p>

<pre><code>assert(*p == 'a');  // The first character at address p will be 'a'
assert(p[1] == 'b'); // p[1] actually dereferences a pointer created by adding
                     // p and 1 times the size of the things to which p points:
                     // In this case they're char which are 1 byte in C...
assert(*(p + 1) == 'b');  // Another notation for p[1]
</code></pre>

<p>You can also move pointers through the pointed-to data, dereferencing them as you go:</p>

<pre><code>++p;  // Increment p so it's now 0x1001
assert(*p == 'b');  // p == 0x1001 which is where the 'b' is...
</code></pre>

<p>If you have some data that can be written to, then you can do things like this:</p>

<pre><code>int x = 2;
int* p_x = &amp;x;  // Put the address of the x variable into the pointer p_x
*p_x = 4;       // Change the memory at the address in p_x to be 4
assert(x == 4); // Check x is now 4
</code></pre>

<p>Above, you must have known at compile time that you would need a variable called <code>x</code>, and the code asks the compiler to arrange where it should be stored, ensuring the address will be available via <code>&amp;x</code>.</p>

<h2>Dereferencing and accessing a structure data member</h2>

<p>In C, if you have a variable that is a pointer to a structure with data members, you can access those members using the <code>-&gt;</code> dereferencing operator:</p>

<pre><code>typedef struct X { int i_; double d_; } X;
X x;
X* p = &amp;x;
p-&gt;d_ = 3.14159;  // Dereference and access data member x.d_
(*p).d_ *= -1;    // Another equivalent notation for accessing x.d_
</code></pre>

<h2>Multi-byte data types</h2>

<p>To use a pointer, a computer program also needs some insight into the type of data that is being pointed at - if that data type needs more than one byte to represent, then the pointer normally points to the lowest-numbered byte in the data.</p>

<p>So, looking at a slightly more complex example:</p>

<pre><code>double sizes[] = { 10.3, 13.4, 11.2, 19.4 };
double* p = sizes;
assert(p[0] == 10.3);  // Knows to look at all the bytes in the first double value
assert(p[1] == 13.4);  // Actually looks at bytes from address p + 1 * sizeof(double)
                       // (sizeof(double) is almost always eight bytes)
assert(++p);           // Advance p by sizeof(double)
assert(*p == 13.4);    // The double at memory beginning at address p has value 13.4
*(p + 2) = 29.8;       // Change sizes[3] from 19.4 to 29.8
                       // Note: earlier ++p and + 2 here =&gt; sizes[3]
</code></pre>

<h2>Pointers to dynamically allocated memory</h2>

<p>Sometimes you don't know how much memory you'll need until your program is running and sees what data is thrown at it... then you can dynamically allocate memory using <code>malloc</code>. It is common practice to store the address in a pointer...</p>

<pre><code>int* p = malloc(sizeof(int)); // Get some memory somewhere...
*p = 10;            // Dereference the pointer to the memory, then write a value in
fn(*p);             // Call a function, passing it the value at address p
(*p) += 3;          // Change the value, adding 3 to it
free(p);            // Release the memory back to the heap allocation library
</code></pre>

<p>In C++, memory allocation is normally done with the <code>new</code> operator, and deallocation with <code>delete</code>:</p>

<pre><code>int* p = new int(10); // Memory for one int with initial value 10
delete p;

p = new int[10];      // Memory for ten ints with unspecified initial value
delete[] p;

p = new int[10]();    // Memory for ten ints that are value initialised (to 0)
delete[] p;
</code></pre>

<p>See also <em>C++ smart pointers</em> below.</p>

<h2>Losing and leaking addresses</h2>

<p>Often a pointer may be the only indication of where some data or buffer exists in memory. If ongoing use of that data/buffer is needed, or the ability to call <code>free()</code> or <code>delete</code> to avoid leaking the memory, then the programmer must operate on a copy of the pointer...</p>

<pre><code>const char* p = asprintf(""name: %s"", name);  // Common but non-Standard printf-on-heap

// Replace non-printable characters with underscores....
for (const char* q = p; *q; ++q)
    if (!isprint(*q))
        *q = '_';

printf(""%s\n"", p); // Only q was modified
free(p);
</code></pre>

<p>...or carefully orchestrate reversal of any changes...</p>

<pre><code>const size_t n = ...;
p += n;
...
p -= n;  // Restore earlier value...
</code></pre>

<h2>C++ smart pointers</h2>

<p>In C++, it's best practice to use <a href=""http://en.wikipedia.org/wiki/Smart_pointer"" rel=""noreferrer"">smart pointer</a> objects to store and manage the pointers, automatically deallocating them when the smart pointers' destructors run. Since C++11 the Standard Library provides two, <a href=""http://en.cppreference.com/w/cpp/memory/unique_ptr"" rel=""noreferrer""><code>unique_ptr</code></a> for when there's a single owner for an allocated object...</p>

<pre><code>{
    std::unique_ptr&lt;T&gt; p{new T(42, ""meaning"")};
    call_a_function(p);
    // The function above might throw, so delete here is unreliable, but...
} // p's destructor's guaranteed to run ""here"", calling delete
</code></pre>

<p>...and <a href=""http://en.cppreference.com/w/cpp/memory/shared_ptr"" rel=""noreferrer""><code>shared_ptr</code></a> for share ownership (using <a href=""http://en.wikipedia.org/wiki/Reference_counting"" rel=""noreferrer"">reference counting</a>)...</p>

<pre><code>{
    std::shared_ptr&lt;T&gt; p(new T(3.14, ""pi""));
    number_storage.may_add(p); // Might copy p into its container
} // p's destructor will only delete the T if number_storage didn't copy
</code></pre>

<h2>Null pointers</h2>

<p>In C, <code>NULL</code> and <code>0</code> - and additionally in C++ <code>nullptr</code> - can be used to indicate that a pointer doesn't currently hold the memory address of a variable, and shouldn't be dereferenced or used in pointer arithmetic. For example:</p>

<pre><code>const char* p_filename = NULL; // Or ""= 0"", or ""= nullptr"" in C++
char c;
while ((c = getopt(argc, argv, ""f:"")) != EOF)
    switch (c) {
      case f: p_filename = optarg; break;
    }
if (p_filename)  // Only NULL converts to false
    ...   // Only get here if -f flag specified
</code></pre>

<p>In C and C++, just as inbuilt numeric types don't necessarily default to <code>0</code>, nor <code>bools</code> to <code>false</code>, pointers are not always set to <code>NULL</code>. All these are set to 0/false/NULL when they're <code>static</code> variables or (C++ only) direct or indirect member variables of static objects or their bases, or undergo zero initialisation (e.g. <code>new T();</code> and <code>new T(x, y, z);</code> perform zero-initialisation on T's members including pointers, whereas <code>new T;</code> does not).</p>

<p>Further, when you assign <code>0</code>, <code>NULL</code> and <code>nullptr</code> to a pointer the bits in the pointer are not necessarily all reset: the pointer may not contain ""0"" at the hardware level, or refer to address 0 in your virtual address space. The compiler is allowed to store something else there if it has reason to, but whatever it does - if you come along and compare the pointer to <code>0</code>, <code>NULL</code>, <code>nullptr</code> or another pointer that was assigned any of those, the comparison must work as expected. So, below the source code at the compiler level, ""NULL"" is potentially a bit ""magical"" in the C and C++ languages...</p>

<h2>More about memory addresses, and why you probably don't need to know</h2>

<p>More strictly, initialised pointers store a bit-pattern identifying either <code>NULL</code> or a (often <a href=""http://en.wikipedia.org/wiki/Virtual_address_space"" rel=""noreferrer"">virtual</a>) memory address.</p>

<p>The simple case is where this is a numeric offset into the process's entire virtual address space; in more complex cases the pointer may be relative to some specific memory area, which the CPU may select based on CPU ""segment"" registers or some manner of segment id encoded in the bit-pattern, and/or looking in different places depending on the machine code instructions using the address.</p>

<p>For example, an <code>int*</code> properly initialised to point to a <code>int</code> variable might - after casting to a <code>float*</code> - access a value in ""GPU"" memory quite distinct from the <code>int</code> variable, then once cast to a function pointer might refer to distinct memory holding the machine opcodes for the function.</p>

<p>3GL programming languages like C and C++ tend to hide this complexity, such that:</p>

<ul>
<li><p>If the compiler gives you a pointer to a variable or function, you can dereference it freely (as long as the variable's not destructed/deallocated meanwhile) and it's the compiler's problem whether e.g. a particular CPU register needs to be restored beforehand, or a distinct machine code instruction used</p></li>
<li><p>If you get a pointer to an element in an array, you can use pointer arithmetic to move anywhere else in the array, or even to form an address one-past-the-end of the array that's legal to compare with other pointers to elements in the array (or that have similarly been moved by pointer arithmetic to the same one-past-the-end value); again in C and C++, it's up to the compiler to ensure this ""just works""</p></li>
<li><p>Specific OS functions for e.g. shared memory mapping may give you pointers, and they'll ""just work"" within the range of addresses that makes sense for them</p></li>
<li><p>Attempts to move legal pointers beyond these boundaries, or to cast arbitrary numbers to pointers, or use pointers cast to unrelated types, typically have <a href=""http://en.wikipedia.org/wiki/Undefined_behavior"" rel=""noreferrer""><em>undefined behaviour</em></a>, so should be avoided in higher level libraries and applications, but code for OSes, device drivers, etc. may need to rely on behaviour left undefined by C or C++, that is never-the-less well defined by their specific hardware.</p></li>
</ul>
","4955297"
"What's the best way to check if a file exists in C? (cross platform)","352884","","<p>Is there a better way than simply trying to open the file?</p>

<pre><code>int exists(const char *fname)
{
    FILE *file;
    if ((file = fopen(fname, ""r""))
    {
        fclose(file);
        return 1;
    }
    return 0;
}
</code></pre>
","<p>Look up the <code>access()</code> function, found in <code>unistd.h</code>. You can replace your function with</p>

<pre><code>if( access( fname, F_OK ) != -1 ) {
    // file exists
} else {
    // file doesn't exist
}
</code></pre>

<p>You can also use <code>R_OK</code>, <code>W_OK</code>, and <code>X_OK</code> in place of <code>F_OK</code> to check for read permission, write permission, and execute permission (respectively) rather than existence, and you can OR any of them together (i.e. check for both read <em>and</em> write permission using <code>R_OK|W_OK</code>)</p>

<p><em>Update</em>: Note that on Windows, you can't use <code>W_OK</code> to reliably test for write permission, since the access function does not take DACLs into account. <code>access( fname, W_OK )</code> may return 0 (success) because the file does not have the read-only attribute set, but you still may not have permission to write to the file.</p>
","230068"
"What is the printf format specifier for bool?","351220","","<p>Since ANSI C99 there is <code>_Bool</code> or <code>bool</code> via <code>stdbool.h</code>. But is there also a <code>printf</code> format specifier for bool?</p>

<p>I mean something like in that pseudo code:</p>

<pre><code>bool x = true;
printf(""%B\n"", x);
</code></pre>

<p>which would print:</p>

<pre><code>true
</code></pre>
","<p>There isn't. But since any integral type shorter than <code>int</code> is promoted to <code>int</code> when passed down to <code>printf()</code>s variadic arguments, you can use <code>%d</code>:</p>

<pre><code>bool x = true;
printf(""%d\n"", x); // prints 1
</code></pre>

<p>But why not</p>

<pre><code>printf(x ? ""true"" : ""false"");
</code></pre>

<p>or better</p>

<pre><code>printf(""%s"", x ? ""true"" : ""false"");
</code></pre>

<p>or even better</p>

<pre><code>fputs(x ? ""true"" : ""false"", stdout);
</code></pre>

<p>instead?</p>
","17307307"
"C pointer to array/array of pointers disambiguation","351186","","<p>What is the difference between the following declarations:</p>

<pre><code>int* arr1[8];
int (*arr2)[8];
int *(arr3[8]);
</code></pre>

<p>What is the general rule for understanding more complex declarations?</p>
","<pre><code>int* arr[8]; // An array of int pointers.
int (*arr)[8]; // A pointer to an array of integers
</code></pre>

<p>The third one is same as the first.</p>

<p>The general rule is <a href=""http://unixwiz.net/techtips/reading-cdecl.html"" rel=""noreferrer"">operator precedence</a>. It can get even much more complex as function pointers come into the picture.</p>
","859650"
"Reading string from input with space character?","350529","","<p>I'm using Ubuntu and I'm also using Geany and CodeBlock as my IDE.
What I'm trying to do is reading a string (like <code>""Barack Obama""</code>) and put it in a variable:</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;

int main(void)
{
    char name[100];

    printf(""Enter your name: "");
    scanf(""%s"", name);
    printf(""Your Name is: %s"", name);

    return 0;
}
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>Enter your name: Barack Obama
Your Name is: Barack
</code></pre>

<p>How can I make the program read the whole name?</p>
","<p>Use:</p>

<pre><code>fgets (name, 100, stdin);
</code></pre>

<p><code>100</code> is the max length of the buffer. You should adjust it as per your need.</p>

<p>Use:</p>

<pre><code>scanf (""%[^\n]%*c"", name);
</code></pre>

<p>The <code>[]</code> is the scanset character. <code>[^\n]</code> tells that while the input is <em>not</em> a newline (<code>'\n'</code>) take input. Then with the <code>%*c</code> it reads the newline character from the input buffer (which is not read), and the <code>*</code> indicates that this read in input is discarded (assignment suppression), as you do not need it, and this newline in the buffer does not create any problem for next inputs that you might take.</p>

<p>Read here about the <a href=""http://pubs.opengroup.org/onlinepubs/009695399/functions/scanf.html"">scanset</a> and the <a href=""http://pubs.opengroup.org/onlinepubs/009695399/functions/scanf.html"">assignment suppression</a> operators.</p>

<p>Note you can also use <code>gets</code> but ....</p>

<blockquote>
  <p>Never use <code>gets()</code>.  Because it is impossible to tell without knowing the data  in  advance  how  many  characters  gets() will read, and because <code>gets()</code> will continue to store characters past the end of the buffer, it is  extremely  dangerous  to  use.   It has been used to break computer security. Use <code>fgets()</code> instead.</p>
</blockquote>
","6282236"
"C char array initialization","343971","","<p>I'm not sure what will be in the char array after initialization in the following ways.    </p>

<p>1.<code>char buf[10] = """";</code><br>
2. <code>char buf[10] = "" "";</code><br>
3. <code>char buf[10] = ""a"";</code>  </p>

<p>For case 2, I think <code>buf[0]</code> should be <code>' '</code>, <code>buf[1]</code> should be <code>'\0'</code>, and from <code>buf[2]</code> to <code>buf[9]</code> will be random content. For case 3, I think <code>buf[0]</code> should be <code>'a'</code>, <code>buf[1]</code> should be '\0', and from <code>buf[2]</code> to <code>buf[9]</code> will be random content.</p>

<p>Is that correct?</p>

<p>And for the case 1, what will be in the <code>buf</code>? <code>buf[0] == '\0'</code> and from <code>buf[1]</code> to <code>buf[9]</code> will be random content?</p>
","<p>This is not how you initialize an array, but for:</p>

<ol>
<li><p>The first declaration:</p>

<pre><code>char buf[10] = """";
</code></pre>

<p>is equivalent to</p>

<pre><code>char buf[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
</code></pre></li>
<li><p>The second declaration:</p>

<pre><code>char buf[10] = "" "";
</code></pre>

<p>is equivalent to</p>

<pre><code>char buf[10] = {' ', 0, 0, 0, 0, 0, 0, 0, 0, 0};
</code></pre></li>
<li><p>The third declaration:</p>

<pre><code>char buf[10] = ""a"";
</code></pre>

<p>is equivalent to</p>

<pre><code>char buf[10] = {'a', 0, 0, 0, 0, 0, 0, 0, 0, 0};
</code></pre></li>
</ol>

<p>As you can see, no random content: if there are fewer initializers, the remaining of the array is initialized with <code>0</code>. This the case even if the array is declared inside a function.</p>
","18688992"
"Reading a string with scanf","343523","","<p>I'm a little bit confused about something. I was under the impression that the correct way of reading a C string with scanf() went along the lines of</p>

<p>(never mind the possible buffer overflow, it's just a simple example)</p>

<pre><code>char string[256];
scanf( ""%s"" , string );
</code></pre>

<p>However, the following seems to work too,</p>

<pre><code>scanf( ""%s"" , &amp;string );
</code></pre>

<p>Is this just my compiler (gcc), pure luck, or something else?</p>

<p>Thanks in advance</p>
","<p>An array ""decays"" into a pointer to its first element, so <code>scanf(""%s"", string)</code> is equivalent to <code>scanf(""%s"", &amp;string[0])</code>. On the other hand, <code>scanf(""%s"", &amp;string)</code> passes a pointer-to-<code>char[256]</code>, but it points to the same place.</p>

<p>Then <code>scanf</code>, when processing the tail of its argument list, will try to pull out a <code>char *</code>. That's the Right Thing when you've passed in <code>string</code> or <code>&amp;string[0]</code>, but when you've passed in <code>&amp;string</code> you're depending on something that the language standard doesn't guarantee, namely that the pointers <code>&amp;string</code> and <code>&amp;string[0]</code> -- pointers to objects of different types and sizes that start at the same place -- are represented the same way.</p>

<p>I don't believe I've ever encountered a system on which that doesn't work, and in practice you're probably safe. None the less, it's wrong, and it could fail on some platforms. (Hypothetical example: a ""debugging"" implementation that includes type information with every pointer. I <em>think</em> the C implementation on the Symbolics ""Lisp Machines"" did something like this.)</p>
","5407121"
"How to declare strings in C","342373","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/4680431/memory-allocation-char-and-char"">Memory Allocation char* and char[]</a>  </p>
</blockquote>



<p>Can anyone explain me what is a difference between these lines of code</p>

<pre><code>char *p = ""String"";
char p2[] = ""String"";
char p3[7] = ""String"";
</code></pre>

<p>In what case should I use each of the above ?</p>
","<p><a href=""http://www.lysator.liu.se/c/c-faq/c-2.html"" rel=""noreferrer"">This link</a> should satisfy your curiosity.</p>

<p>Basically (forgetting your third example which is bad), the different between 1 and 2 is that 1 allocates space for a pointer to the array.</p>

<p>But in the code, you can manipulate them as pointers all the same -- only thing, you cannot reallocate the second.</p>
","8732380"
"Regarding 'main(int argc, char *argv[])'","324987","","<blockquote>
  <p><strong>Possible Duplicates:</strong><br>
  <a href=""https://stackoverflow.com/questions/3734111/what-are-the-arguments-to-main-for"">What are the arguments to main() for?</a><br>
  <a href=""https://stackoverflow.com/questions/3024197/what-does-int-argc-char-argv-mean"">What does int argc, char *argv[] mean?</a>  </p>
</blockquote>



<p>Every program is starting with the <code>main(int argc, char *argv[])</code> definition. </p>

<p>I don't understand what it means. I would be very glad if somebody could explain why we use these arguments if we don't use them in the program? Why not just: <code>int main()</code>?</p>

<p>Is the name of the program one of the elements of <code>*argv[]</code> and <code>argc</code> is the count of the number of arguments in <code>*argv[]</code>? What are the other arguments sent to <code>*argv[]</code>? How do we send them?</p>
","<p>The arguments <code>argc</code> and <code>argv</code> of <code>main</code> is used as a way to send arguments to a program, the possibly most familiar way is to use the good ol' terminal where an user could type <kbd><code>cat file</code></kbd>. Here the word <code>cat</code> is a program that takes a file and outputs it to standard output (<code>stdout</code>).</p>

<p>The program receives the number of arguments in <code>argc</code> and the vector of arguments in <code>argv</code>, in the above the <strong>arg</strong>ument <strong>c</strong>ount would be two (The program name counts as the first argument) and the <strong>arg</strong>ument <strong>v</strong>ector would contain [<code>cat</code>,<code>file</code>,<em>null</em>]. While the last element being a null-pointer.</p>

<p>Commonly, you would write it like this:</p>

<pre><code>int  // Specifies that type of variable the function returns.
     // main() must return an integer
main ( int argc, char **argv ) {
     // code
     return 0; // Indicates that everything went well.
}
</code></pre>

<p>If your program does not require any arguments, it is equally valid to write a <code>main</code>-function in the following fashion:</p>

<pre><code>int main() {
  // code
  return 0; // Zero indicates success, while any 
  // Non-Zero value indicates a failure/error
}
</code></pre>

<p>In the early versions of the C language, there was no <code>int</code> before <code>main</code> as this was implied. Today, this is considered to be an error.</p>

<p>On <strong>POSIX</strong>-compliant systems (and Windows), there exists the possibility to use a third parameter <code>char **envp</code> which contains a vector of the programs <a href=""http://en.wikipedia.org/wiki/Environment_variable"" rel=""noreferrer""><strong>env</strong>ironment  variables</a>. Further variations of the argument list of the <code>main</code> function exists, but I will not detail it here since it is non-standard.</p>

<p>Also, the naming of the variables is a <em>convention</em> and has no actual meaning. It is always a good idea to adhere to this so that you do not confuse others, but it would be equally valid to define <code>main</code> as</p>

<pre><code>int main(int c, char **v, char **e) {
   // code
   return 0;
}
</code></pre>

<p>And for your second question, there are several ways to send arguments to a program. I would recommend you to look at the <a href=""http://linux.die.net/man/3/exec"" rel=""noreferrer""><code>exec*()</code>family of functions</a> which is <strong>POSIX</strong>-standard, but it is probably <strong>easier</strong> to just use <a href=""http://linux.die.net/man/3/system"" rel=""noreferrer""><code>system</code></a><code>(""command arg1 arg2"")</code>, but the use of <code>system()</code> is usually frowned upon as it is not guaranteed to work on every system. I have not tested it myself; but if there is no <code>bash</code>,<code>zsh</code>, or other shell installed on a *NIX-system, <code>system()</code> will fail.</p>
","3898070"
"C compiler for Windows?","320633","","<p>I'm fine working on Linux using gcc as my C compiler but would like a Windows solution. Any ideas? I've looked at <a href=""http://en.wikipedia.org/wiki/Dev-C%2B%2B"" rel=""noreferrer"">Dev-C++ from Bloodshed</a> but looking for more options.</p>
","<p>You can use GCC on Windows by downloading <a href=""http://www.mingw.org/"" rel=""noreferrer"">MinGW</a>.</p>
","116382"
"strdup() - what does it do in C?","320262","","<p>What is the purpose of the <code>strdup()</code> function in C?</p>
","<p>Exactly what it sounds like (assuming you're used to the abbreviated way in which C and UNIX assigns words), it <strong>duplicates strings</strong>.</p>

<p>Keeping in mind it's actually not part of the ISO C standard itself (it's a POSIX thing), it's effectively doing the same as the following code:</p>

<pre><code>char *strdup (const char *s) {
    char *d = malloc (strlen (s) + 1);   // Space for length plus nul
    if (d == NULL) return NULL;          // No memory
    strcpy (d,s);                        // Copy the characters
    return d;                            // Return the new string
}
</code></pre>

<p>In other words:</p>

<ol>
<li>It tries to allocate enough memory to hold the old string (plus a null character to mark the end of the string).</li>
<li>If the allocation failed, it sets <code>errno</code> to <code>ENOMEM</code> and returns <code>NULL</code> immediately (setting of <code>errno</code> to <code>ENOMEM</code> is something <code>malloc</code> does so we don't need to explicitly do it in our <code>strdup</code>).</li>
<li>Otherwise the allocation worked so we copy the old string to the new string and return the new address (which the caller is responsible for freeing at some point).</li>
</ol>

<p>Keep in mind that's the conceptual definition. Any library writer worth their salary may have provided heavily optimised code targeting the particular processor being used.</p>

<p>If you're part of the crowd that abhors multiple exit points in functions (I don't unless it affects readability, which I don't believe to be the case for such a short function), you can write the code as:</p>

<pre><code>char *strdup (const char *s) {
    char *d = malloc (strlen (s) + 1);   // Allocate memory
    if (d != NULL) strcpy (d,s);         // Copy string if okay
    return d;                            // Return new memory
}
</code></pre>
","252802"
"Improve INSERT-per-second performance of SQLite?","318742","","<p>Optimizing SQLite is tricky. Bulk-insert performance of a C application can vary from 85 inserts per second to over 96,000 inserts per second!</p>

<p><strong>Background:</strong> We are using SQLite as part of a desktop application. We have large amounts of configuration data stored in XML files that are parsed and loaded into an SQLite database for further processing when the application is initialized. SQLite is ideal for this situation because it's fast, it requires no specialized configuration, and the database is stored on disk as a single file.</p>

<p><strong>Rationale:</strong> <em>Initially I was disappointed with the performance I was seeing.</em> It turns-out that the performance of SQLite can vary significantly (both for bulk-inserts and selects) depending on how the database is configured and how you're using the API. It was not a trivial matter to figure out what all of the options and techniques were, so I thought it prudent to create this community wiki entry to share the results with Stack&nbsp;Overflow readers in order to save others the trouble of the same investigations.</p>

<p><strong>The Experiment:</strong> Rather than simply talking about performance tips in the general sense (i.e. <em>""Use a transaction!""</em>), I thought it best to write some C code and <em>actually measure</em> the impact of various options. We're going to start with some simple data:</p>

<ul>
<li>A 28 MB TAB-delimited text file (approximately 865,000 records) of the <a href=""http://www.toronto.ca/open/datasets/ttc-routes"" rel=""noreferrer"">complete transit schedule for the city of Toronto</a></li>
<li>My test machine is a 3.60 GHz P4 running Windows XP.</li>
<li>The code is compiled with <a href=""http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions"" rel=""noreferrer"">Visual C++</a> 2005 as ""Release"" with ""Full Optimization"" (/Ox) and Favor Fast Code (/Ot).</li>
<li>I'm using the SQLite ""Amalgamation"", compiled directly into my test application. The SQLite version I happen to have is a bit older (3.6.7), but I suspect these results will be comparable to the latest release (please leave a comment if you think otherwise).</li>
</ul>

<p><em>Let's write some code!</em></p>

<p><strong>The Code:</strong> A simple C program that reads the text file line-by-line, splits the string into values and then will inserts the data into an SQLite database. In this ""baseline"" version of the code, the database is created, but we won't actually insert data:</p>

<pre><code>/*************************************************************
    Baseline code to experiment with SQLite performance.

    Input data is a 28 MB TAB-delimited text file of the
    complete Toronto Transit System schedule/route info
    from http://www.toronto.ca/open/datasets/ttc-routes/

**************************************************************/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
#include &lt;string.h&gt;
#include ""sqlite3.h""

#define INPUTDATA ""C:\\TTC_schedule_scheduleitem_10-27-2009.txt""
#define DATABASE ""c:\\TTC_schedule_scheduleitem_10-27-2009.sqlite""
#define TABLE ""CREATE TABLE IF NOT EXISTS TTC (id INTEGER PRIMARY KEY, Route_ID TEXT, Branch_Code TEXT, Version INTEGER, Stop INTEGER, Vehicle_Index INTEGER, Day Integer, Time TEXT)""
#define BUFFER_SIZE 256

int main(int argc, char **argv) {

    sqlite3 * db;
    sqlite3_stmt * stmt;
    char * sErrMsg = 0;
    char * tail = 0;
    int nRetCode;
    int n = 0;

    clock_t cStartClock;

    FILE * pFile;
    char sInputBuf [BUFFER_SIZE] = ""\0"";

    char * sRT = 0;  /* Route */
    char * sBR = 0;  /* Branch */
    char * sVR = 0;  /* Version */
    char * sST = 0;  /* Stop Number */
    char * sVI = 0;  /* Vehicle */
    char * sDT = 0;  /* Date */
    char * sTM = 0;  /* Time */

    char sSQL [BUFFER_SIZE] = ""\0"";

    /*********************************************/
    /* Open the Database and create the Schema */
    sqlite3_open(DATABASE, &amp;db);
    sqlite3_exec(db, TABLE, NULL, NULL, &amp;sErrMsg);

    /*********************************************/
    /* Open input file and import into Database*/
    cStartClock = clock();

    pFile = fopen (INPUTDATA,""r"");
    while (!feof(pFile)) {

        fgets (sInputBuf, BUFFER_SIZE, pFile);

        sRT = strtok (sInputBuf, ""\t"");     /* Get Route */
        sBR = strtok (NULL, ""\t"");            /* Get Branch */
        sVR = strtok (NULL, ""\t"");            /* Get Version */
        sST = strtok (NULL, ""\t"");            /* Get Stop Number */
        sVI = strtok (NULL, ""\t"");            /* Get Vehicle */
        sDT = strtok (NULL, ""\t"");            /* Get Date */
        sTM = strtok (NULL, ""\t"");            /* Get Time */

        /* ACTUAL INSERT WILL GO HERE */

        n++;
    }
    fclose (pFile);

    printf(""Imported %d records in %4.2f seconds\n"", n, (clock() - cStartClock) / (double)CLOCKS_PER_SEC);

    sqlite3_close(db);
    return 0;
}
</code></pre>

<hr>

<h2>The ""Control""</h2>

<p>Running the code as-is doesn't actually perform any database operations, but it will give us an idea of how fast the raw C file I/O and string processing operations are.</p>

<blockquote>
  <p>Imported 864913 records in 0.94
  seconds</p>
</blockquote>

<p>Great! We can do 920,000 inserts per second, provided we don't actually do any inserts :-)</p>

<hr>

<h2>The ""Worst-Case-Scenario""</h2>

<p>We're going to generate the SQL string using the values read from the file and invoke that SQL operation using sqlite3_exec:</p>

<pre><code>sprintf(sSQL, ""INSERT INTO TTC VALUES (NULL, '%s', '%s', '%s', '%s', '%s', '%s', '%s')"", sRT, sBR, sVR, sST, sVI, sDT, sTM);
sqlite3_exec(db, sSQL, NULL, NULL, &amp;sErrMsg);
</code></pre>

<p>This is going to be slow because the SQL will be compiled into VDBE code for every insert and every insert will happen in its own transaction. <em>How slow?</em></p>

<blockquote>
  <p>Imported 864913 records in 9933.61
  seconds</p>
</blockquote>

<p>Yikes! 2 hours and 45 minutes! That's only <strong>85 inserts per second.</strong></p>

<h2>Using a Transaction</h2>

<p>By default, SQLite will evaluate every INSERT / UPDATE statement within a unique transaction. If performing a large number of inserts, it's advisable to wrap your operation in a transaction:</p>

<pre><code>sqlite3_exec(db, ""BEGIN TRANSACTION"", NULL, NULL, &amp;sErrMsg);

pFile = fopen (INPUTDATA,""r"");
while (!feof(pFile)) {

    ...

}
fclose (pFile);

sqlite3_exec(db, ""END TRANSACTION"", NULL, NULL, &amp;sErrMsg);
</code></pre>

<blockquote>
  <p>Imported 864913 records in 38.03
  seconds</p>
</blockquote>

<p>That's better. Simply wrapping all of our inserts in a single transaction improved our performance to <strong>23,000 inserts per second.</strong></p>

<h2>Using a Prepared Statement</h2>

<p>Using a transaction was a huge improvement, but recompiling the SQL statement for every insert doesn't make sense if we using the same SQL over-and-over. Let's use <code>sqlite3_prepare_v2</code> to compile our SQL statement once and then bind our parameters to that statement using <code>sqlite3_bind_text</code>:</p>

<pre><code>/* Open input file and import into the database */
cStartClock = clock();

sprintf(sSQL, ""INSERT INTO TTC VALUES (NULL, @RT, @BR, @VR, @ST, @VI, @DT, @TM)"");
sqlite3_prepare_v2(db,  sSQL, BUFFER_SIZE, &amp;stmt, &amp;tail);

sqlite3_exec(db, ""BEGIN TRANSACTION"", NULL, NULL, &amp;sErrMsg);

pFile = fopen (INPUTDATA,""r"");
while (!feof(pFile)) {

    fgets (sInputBuf, BUFFER_SIZE, pFile);

    sRT = strtok (sInputBuf, ""\t"");   /* Get Route */
    sBR = strtok (NULL, ""\t"");        /* Get Branch */
    sVR = strtok (NULL, ""\t"");        /* Get Version */
    sST = strtok (NULL, ""\t"");        /* Get Stop Number */
    sVI = strtok (NULL, ""\t"");        /* Get Vehicle */
    sDT = strtok (NULL, ""\t"");        /* Get Date */
    sTM = strtok (NULL, ""\t"");        /* Get Time */

    sqlite3_bind_text(stmt, 1, sRT, -1, SQLITE_TRANSIENT);
    sqlite3_bind_text(stmt, 2, sBR, -1, SQLITE_TRANSIENT);
    sqlite3_bind_text(stmt, 3, sVR, -1, SQLITE_TRANSIENT);
    sqlite3_bind_text(stmt, 4, sST, -1, SQLITE_TRANSIENT);
    sqlite3_bind_text(stmt, 5, sVI, -1, SQLITE_TRANSIENT);
    sqlite3_bind_text(stmt, 6, sDT, -1, SQLITE_TRANSIENT);
    sqlite3_bind_text(stmt, 7, sTM, -1, SQLITE_TRANSIENT);

    sqlite3_step(stmt);

    sqlite3_clear_bindings(stmt);
    sqlite3_reset(stmt);

    n++;
}
fclose (pFile);

sqlite3_exec(db, ""END TRANSACTION"", NULL, NULL, &amp;sErrMsg);

printf(""Imported %d records in %4.2f seconds\n"", n, (clock() - cStartClock) / (double)CLOCKS_PER_SEC);

sqlite3_finalize(stmt);
sqlite3_close(db);

return 0;
</code></pre>

<blockquote>
  <p>Imported 864913 records in 16.27
  seconds</p>
</blockquote>

<p>Nice! There's a little bit more code (don't forget to call <code>sqlite3_clear_bindings</code> and <code>sqlite3_reset</code>), but we've more than doubled our performance to <strong>53,000 inserts per second.</strong></p>

<h2>PRAGMA synchronous = OFF</h2>

<p>By default, SQLite will pause after issuing a OS-level write command. This guarantees that the data is written to the disk. By setting <code>synchronous = OFF</code>, we are instructing SQLite to simply hand-off the data to the OS for writing and then continue. There's a chance that the database file may become corrupted if the computer suffers a catastrophic crash (or power failure) before the data is written to the platter:</p>

<pre><code>/* Open the database and create the schema */
sqlite3_open(DATABASE, &amp;db);
sqlite3_exec(db, TABLE, NULL, NULL, &amp;sErrMsg);
sqlite3_exec(db, ""PRAGMA synchronous = OFF"", NULL, NULL, &amp;sErrMsg);
</code></pre>

<blockquote>
  <p>Imported 864913 records in 12.41
  seconds</p>
</blockquote>

<p>The improvements are now smaller, but we're up to <strong>69,600 inserts per second.</strong></p>

<h2>PRAGMA journal_mode = MEMORY</h2>

<p>Consider storing the rollback journal in memory by evaluating <code>PRAGMA journal_mode = MEMORY</code>. Your transaction will be faster, but if you lose power or your program crashes during a transaction you database could be left in a corrupt state with a partially-completed transaction:</p>

<pre><code>/* Open the database and create the schema */
sqlite3_open(DATABASE, &amp;db);
sqlite3_exec(db, TABLE, NULL, NULL, &amp;sErrMsg);
sqlite3_exec(db, ""PRAGMA journal_mode = MEMORY"", NULL, NULL, &amp;sErrMsg);
</code></pre>

<blockquote>
  <p>Imported 864913 records in 13.50
  seconds</p>
</blockquote>

<p>A little slower than the previous optimization at <strong>64,000 inserts per second.</strong></p>

<h2>PRAGMA synchronous = OFF <em>and</em> PRAGMA journal_mode = MEMORY</h2>

<p>Let's combine the previous two optimizations. It's a little more risky (in case of a crash), but we're just importing data (not running a bank):</p>

<pre><code>/* Open the database and create the schema */
sqlite3_open(DATABASE, &amp;db);
sqlite3_exec(db, TABLE, NULL, NULL, &amp;sErrMsg);
sqlite3_exec(db, ""PRAGMA synchronous = OFF"", NULL, NULL, &amp;sErrMsg);
sqlite3_exec(db, ""PRAGMA journal_mode = MEMORY"", NULL, NULL, &amp;sErrMsg);
</code></pre>

<blockquote>
  <p>Imported 864913 records in 12.00
  seconds</p>
</blockquote>

<p>Fantastic! We're able to do <strong>72,000 inserts per second.</strong></p>

<h2>Using an In-Memory Database</h2>

<p>Just for kicks, let's build upon all of the previous optimizations and redefine the database filename so we're working entirely in RAM:</p>

<pre><code>#define DATABASE "":memory:""
</code></pre>

<blockquote>
  <p>Imported 864913 records in 10.94
  seconds</p>
</blockquote>

<p>It's not super-practical to store our database in RAM, but it's impressive that we can perform <strong>79,000 inserts per second.</strong></p>

<h2>Refactoring C Code</h2>

<p>Although not specifically an SQLite improvement, I don't like the extra <code>char*</code> assignment operations in the <code>while</code> loop. Let's quickly refactor that code to pass the output of <code>strtok()</code> directly into <code>sqlite3_bind_text()</code>, and let the compiler try to speed things up for us:</p>

<pre><code>pFile = fopen (INPUTDATA,""r"");
while (!feof(pFile)) {

    fgets (sInputBuf, BUFFER_SIZE, pFile);

    sqlite3_bind_text(stmt, 1, strtok (sInputBuf, ""\t""), -1, SQLITE_TRANSIENT); /* Get Route */
    sqlite3_bind_text(stmt, 2, strtok (NULL, ""\t""), -1, SQLITE_TRANSIENT);    /* Get Branch */
    sqlite3_bind_text(stmt, 3, strtok (NULL, ""\t""), -1, SQLITE_TRANSIENT);    /* Get Version */
    sqlite3_bind_text(stmt, 4, strtok (NULL, ""\t""), -1, SQLITE_TRANSIENT);    /* Get Stop Number */
    sqlite3_bind_text(stmt, 5, strtok (NULL, ""\t""), -1, SQLITE_TRANSIENT);    /* Get Vehicle */
    sqlite3_bind_text(stmt, 6, strtok (NULL, ""\t""), -1, SQLITE_TRANSIENT);    /* Get Date */
    sqlite3_bind_text(stmt, 7, strtok (NULL, ""\t""), -1, SQLITE_TRANSIENT);    /* Get Time */

    sqlite3_step(stmt);        /* Execute the SQL Statement */
    sqlite3_clear_bindings(stmt);    /* Clear bindings */
    sqlite3_reset(stmt);        /* Reset VDBE */

    n++;
}
fclose (pFile);
</code></pre>

<p><strong>Note: We are back to using a real database file. In-memory databases are fast, but not necessarily practical</strong></p>

<blockquote>
  <p>Imported 864913 records in 8.94
  seconds</p>
</blockquote>

<p>A slight refactoring to the string processing code used in our parameter binding has allowed us to perform <strong>96,700 inserts per second.</strong> I think it's safe to say that this is <em>plenty fast</em>. As we start to tweak other variables (i.e. page size, index creation, etc.) this will be our benchmark.</p>

<hr>

<h2>Summary (so far)</h2>

<p><em>I hope you're still with me!</em> The reason we started down this road is that bulk-insert performance varies so wildly with SQLite, and it's not always obvious what changes need to be made to speed-up our operation. Using the same compiler (and compiler options), the same version of SQLite and the same data we've optimized our code and our usage of SQLite to go <strong>from a worst-case scenario of 85 inserts per second to over 96,000 inserts per second!</strong></p>

<hr>

<h2>CREATE INDEX then INSERT vs. INSERT then CREATE INDEX</h2>

<p>Before we start measuring <code>SELECT</code> performance, we know that we'll be creating indexes. It's been suggested in one of the answers below that when doing bulk inserts, it is faster to create the index after the data has been inserted (as opposed to creating the index first then inserting the data). Let's try:</p>

<p><strong>Create Index then Insert Data</strong></p>

<pre><code>sqlite3_exec(db, ""CREATE  INDEX 'TTC_Stop_Index' ON 'TTC' ('Stop')"", NULL, NULL, &amp;sErrMsg);
sqlite3_exec(db, ""BEGIN TRANSACTION"", NULL, NULL, &amp;sErrMsg);
...
</code></pre>

<blockquote>
  <p>Imported 864913 records in 18.13
  seconds</p>
</blockquote>

<p><strong>Insert Data then Create Index</strong></p>

<pre><code>...
sqlite3_exec(db, ""END TRANSACTION"", NULL, NULL, &amp;sErrMsg);
sqlite3_exec(db, ""CREATE  INDEX 'TTC_Stop_Index' ON 'TTC' ('Stop')"", NULL, NULL, &amp;sErrMsg);
</code></pre>

<blockquote>
  <p>Imported 864913 records in 13.66
  seconds</p>
</blockquote>

<p>As expected, bulk-inserts are slower if one column is indexed, but it does make a difference if the index is created after the data is inserted. Our no-index baseline is 96,000 inserts per second. <strong>Creating the index first then inserting data gives us 47,700 inserts per second, whereas inserting the data first then creating the index gives us 63,300 inserts per second.</strong></p>

<hr>

<p>I'd gladly take suggestions for other scenarios to try... And will be compiling similar data for SELECT queries soon.</p>
","<p>Several tips:</p>

<ol>
<li>Put inserts/updates in a transaction.</li>
<li>For older versions of SQLite - Consider a less paranoid journal mode (<code>pragma journal_mode</code>). There is <code>NORMAL</code>, and then there <code>OFF</code> which can significantly increase insert speed if you're not too worried about the database possibly getting corrupted if the OS crashes. If your application crashes the data should be fine. Note that in newer versions, the <code>OFF/MEMORY</code> settings are not safe for application level crashes.</li>
<li>Playing with page sizes makes a difference as well (<code>PRAGMA page_size</code>). Having larger page sizes can make reads and writes go a bit faster as larger pages are held in memory. Note that more memory will be used for your database.</li>
<li>If you have indices, consider calling <code>CREATE INDEX</code> after doing all your inserts. This is significantly faster than creating the index and then doing your inserts.</li>
<li>You have to be quite careful if you have concurrent access to SQLite, as the whole database is locked when writes are done, and although multiple readers are possible, writes will be locked out. This has been improved somewhat with the addition of a WAL in newer SQLite versions.</li>
<li>Take advantage of saving space...smaller databases go faster. For instance, if you have key value pairs, try making the key an <code>INTEGER PRIMARY KEY</code> if possible, which will replace the implied unique row number column in the table.</li>
<li>If you are using multiple threads, you can try using the <a href=""http://sqlite.org/c3ref/enable_shared_cache.html"" rel=""noreferrer"">shared page cache</a>, which will allow loaded pages to be shared between threads, which can avoid expensive I/O calls.</li>
<li><a href=""https://stackoverflow.com/q/5431941/6850771"">Don't use <code>!feof(file)</code>!</a></li>
</ol>

<p>I've also asked similar questions <a href=""https://stackoverflow.com/questions/784173/what-are-the-performance-characteristics-of-sqlite-with-very-large-database-files"">here</a> and <a href=""https://stackoverflow.com/questions/768708/are-there-known-issues-with-using-sqlite-and-file-locking-on-different-platforms"">here</a>.</p>
","1712873"
"What is the difference between const int*, const int * const, and int const *?","318129","","<p>I always mess up how to use <code>const int*</code>, <code>const int * const</code>, and <code>int const *</code> correctly. Is there a set of rules defining what you can and cannot do?</p>

<p>I want to know all the do's and all don'ts in terms of assignments, passing to the functions, etc.</p>
","<p>Read it backwards (as driven by <a href=""http://c-faq.com/decl/spiral.anderson.html"" rel=""noreferrer"">Clockwise/Spiral Rule</a>)... </p>

<ul>
<li><code>int*</code> - pointer to int</li>
<li><code>int const *</code> - pointer to const int</li>
<li><code>int * const</code> - const pointer to int</li>
<li><code>int const * const</code> - const pointer to const int</li>
</ul>

<p>Now the first const can be on either side of the type so:</p>

<ul>
<li><code>const int *</code> == <code>int const *</code></li>
<li><code>const int * const</code> == <code>int const * const</code></li>
</ul>

<p>If you want to go really crazy you can do things like this:</p>

<ul>
<li><code>int **</code> - pointer to pointer to int</li>
<li><code>int ** const</code> - a const pointer to a pointer to an int</li>
<li><code>int * const *</code> - a pointer to a const pointer to an int</li>
<li><code>int const **</code> - a pointer to a pointer to a const int</li>
<li><code>int * const * const</code> - a const pointer to a const pointer to an int</li>
<li>...</li>
</ul>

<p>And to make sure we are clear on the meaning of const</p>

<pre><code>const int* foo;
int *const bar; //note, you actually need to set the pointer 
                //here because you can't change it later ;)
</code></pre>

<p><code>foo</code> is a variable pointer to a constant int. This lets you change what you point to but not the value that you point to. Most often this is seen with cstrings where you have a pointer to a <code>const char</code>. You may change which string you point to but you can't change the content of these strings. This is important when the string itself is in the data segment of a program and shouldn't be changed.</p>

<p><code>bar</code> is a const or fixed pointer to a value that can be changed. This is like a reference without the extra syntactic sugar. Because of this fact, usually you would use a reference where you would use a <code>T* const</code> pointer unless you need to allow null pointers.</p>
","1143272"
"How do you make an array of structs in C?","314555","","<p>I'm trying to make an array of structs where each struct represents a celestial body for the problem that I'm working on in my class.  I don't have that much experience with structs, which is why I decided to try to use them instead of a whole bunch of arrays, however, I keep on running into numerous different errors, even though I've tried to implement the techniques that I've seen on various threads and on stackoverflow (such as at <a href=""https://stackoverflow.com/questions/2575921/array-of-structs-in-c"">Array of structs in C</a> and <a href=""https://stackoverflow.com/questions/4173518/c-initialize-array-of-structs"">C - initialize array of structs</a>), however not all of them were applicable, so I wasn't able to completely copy the way to do it.  Just a forewarning before I show you what I'm trying to do, I won't be able to reply to comments/questions/answers for several hours as I need to go to bed since I've been awake for far too long, I'm truly sorry about this, but I'm really tired after having had a busy day and having worked on this problem for several hours.  </p>

<p>Further information for those who have read this far: I don't need any of this to be dynamic, I know/define the size of everything beforehand.  I also need this to be a global array (<em>gasp</em> <strong>GLOBAL VARIABLES</strong>) as I'm accessing this in several different methods which have defined arguments (i.e. GLUT methods).  </p>

<p>This is how I'm defining the struct in my header:</p>

<pre><code>struct body
{
    double p[3];//position
    double v[3];//velocity
    double a[3];//acceleration
    double radius;
    double mass;
};
</code></pre>

<p>I have a list of other global variables that I'm defining before I define the interior of the struct, and one of those is the array of this struct (basically, if I'm being too unclear in my fogged speak, the line below is above the stuff above):</p>

<pre><code>struct body bodies[n];
</code></pre>

<p>Just so you know, <code>n</code> is something that I've legitimately defined (i.e. <code>#define n 1</code>).  </p>

<p>I use this array in several different methods, but the easiest and least space consuming one is a simplified form of my main where I initialize all of the variables in each of the structs, just to set the variables for certain before I modify them in some way:</p>

<pre><code>  int a, b;
 for(a = 0; a &lt; n; a++)
 {
        for(b = 0; b &lt; 3; b++)
        {
            bodies[a].p[b] = 0;
            bodies[a].v[b] = 0;
            bodies[a].a[b] = 0;
        }
        bodies[a].mass = 0;
        bodies[a].radius = 1.0;
 }
</code></pre>

<p>The current error that I'm facing is <code>nbody.c:32:13: error: array type has incomplete element type</code> where line 32 is where I'm making the array of the structs.  </p>

<p>Thank you for any and all help that you deign to give, I promise that I will get back to you at the very latest, 12 hours from now.  </p>

<p>One last clarification, by header I mean the space above <code>int main(void)</code> but in the same *.c file.  </p>
","<pre><code>#include&lt;stdio.h&gt;
#define n 3
struct body
{
    double p[3];//position
    double v[3];//velocity
    double a[3];//acceleration
    double radius;
    double mass;
};

struct body bodies[n];

int main()
{
    int a, b;
     for(a = 0; a &lt; n; a++)
     {
            for(b = 0; b &lt; 3; b++)
            {
                bodies[a].p[b] = 0;
                bodies[a].v[b] = 0;
                bodies[a].a[b] = 0;
            }
            bodies[a].mass = 0;
            bodies[a].radius = 1.0;
     }

    return 0;
}
</code></pre>

<p>this works fine. your question was not very clear by the way, so match the layout of your source code with the above.</p>
","10468181"
"Strings and character with printf","309923","","<p>I was confused with usage of <code>%c</code> and <code>%s</code> in the following C program</p>

<pre><code>#include&lt;stdio.h&gt;

    void main()
    {
     char name[]=""siva"";
     printf(""%s\n"",name);
     printf(""%c\n"",*name);
    }
</code></pre>

<p>Output is</p>

<pre><code>siva
s
</code></pre>

<p>Why we need to use pointer to display a character %c, and pointer is not needed for a string</p>

<p>I am getting error when i use</p>

<pre><code>printf(""%c\n"", name);
</code></pre>

<p>Error i got is</p>

<pre><code>str.c: In function ‘main’:
str.c:9:2: warning: format ‘%c’ expects type ‘int’, but argument 2 has type ‘char *’
</code></pre>
","<p>If you try this:</p>

<pre><code>#include&lt;stdio.h&gt;

void main()
{
 char name[]=""siva"";
 printf(""name = %p\n"", name);
 printf(""&amp;name[0] = %p\n"", &amp;name[0]);
 printf(""name printed as %%s is %s\n"",name);
 printf(""*name = %c\n"",*name);
 printf(""name[0] = %c\n"", name[0]);
}
</code></pre>

<p>Output is:</p>

<pre><code>name = 0xbff5391b  
&amp;name[0] = 0xbff5391b
name printed as %s is siva
*name = s
name[0] = s
</code></pre>

<p>So 'name' is actually a pointer to the array of characters in memory. If you try reading the first four bytes at 0xbff5391b, you will see 's', 'i', 'v' and 'a'</p>

<pre><code>Location     Data
=========   ======

0xbff5391b    0x73  's'  ---&gt; name[0]
0xbff5391c    0x69  'i'  ---&gt; name[1]
0xbff5391d    0x76  'v'  ---&gt; name[2]
0xbff5391e    0x61  'a'  ---&gt; name[3]
0xbff5391f    0x00  '\0' ---&gt; This is the NULL termination of the string
</code></pre>

<p>To print a character you need to pass the value of the character to printf. The value can be referenced as name[0] or *name (since for an array name = &amp;name[0]).</p>

<p>To print a string you need to pass a pointer to the string to printf (in this case 'name' or '&amp;name[0]').</p>
","8019747"
"clearing a char array c","308290","","<p>I thought by setting the first element to a null would clear the entire contents of a char array.</p>

<pre><code>char my_custom_data[40] = ""Hello!"";
my_custom_data[0] = '\0';
</code></pre>

<p>However, this only sets the first element to null.</p>

<p>or</p>

<pre><code>my_custom_data[0] = 0; 
</code></pre>

<p>rather than use <code>memset</code>, I thought the 2 examples above should clear all the data.</p>
","<p>It depends on how you want to view the array.  If you are viewing the array as a series of char's then the only way to clear out the data is to touch every entry.  memset is probably the most effective way to achieve this.</p>

<p>On the other hand if you are choosing to view this as a C/C++ null terminated string, setting the first byte to 0 will effectively clear the string.  </p>
","632860"
"How do I check if an integer is even or odd?","303374","","<p>How can I check if a given number is even or odd in C?</p>
","<p>Use the modulo (%) operator to check if there's a remainder when dividing by 2:</p>

<pre><code>if (x % 2) { /* x is odd */ }
</code></pre>

<p>A few people have criticized my answer above stating that using x &amp; 1 is ""faster"" or ""more efficient"". I do not believe this to be the case. </p>

<p>Out of curiosity, I created two trivial test case programs:</p>

<pre><code>/* modulo.c */
#include &lt;stdio.h&gt;

int main(void)
{
    int x;
    for (x = 0; x &lt; 10; x++)
        if (x % 2)
            printf(""%d is odd\n"", x);
    return 0;
}

/* and.c */
#include &lt;stdio.h&gt;

int main(void)
{
    int x;
    for (x = 0; x &lt; 10; x++)
        if (x &amp; 1)
            printf(""%d is odd\n"", x);
    return 0;
}
</code></pre>

<p>I then compiled these with gcc 4.1.3 on one of my machines 5 different times:</p>

<ul>
<li>With no optimization flags.</li>
<li>With -O</li>
<li>With -Os</li>
<li>With -O2</li>
<li>With -O3</li>
</ul>

<p>I examined the assembly output of each compile (using gcc -S) and found that in each case, the output for and.c and modulo.c were identical (they both used the andl $1, %eax instruction). I doubt this is a ""new"" feature, and I suspect it dates back to ancient versions. I also doubt any modern (made in the past 20 years) non-arcane compiler, commercial or open source, lacks such optimization. I would test on other compilers, but I don't have any available at the moment.</p>

<p>If anyone else would care to test other compilers and/or platform targets, and gets a different result, I'd be very interested to know.</p>

<p>Finally, the modulo version is <strong>guaranteed</strong> by the standard to work whether the integer is positive, negative or zero, regardless of the implementation's representation of signed integers. The bitwise-and version is not. Yes, I realise two's complement is somewhat ubiquitous, so this is not really an issue.</p>
","160935"
"Initialization of a normal array with one default value","302971","","<p><a href=""http://www.fredosaurus.com/notes-cpp/arrayptr/array-initialization.html"" rel=""noreferrer"">C++ Notes: Array Initialization</a> has a nice list over initialization of arrays. I have a</p>

<pre><code>int array[100] = {-1};
</code></pre>

<p>expecting it to be full with -1's but its not, only first value is and the rest are 0's mixed with random values.</p>

<p>The code</p>

<pre><code>int array[100] = {0};
</code></pre>

<p>works just fine and sets each element to 0.</p>

<p>What am I missing here.. Can't one initialize it if the value isn't zero ?</p>

<p>2: Is the default initialization (as above ) faster than the usual loop through the whole array and assign a value or does it do the same thing?</p>
","<p>Using the syntax that you used,</p>

<pre><code>int array[100] = {-1};
</code></pre>

<p>says ""set the first element to <code>-1</code> and the rest to <code>0</code>"" since all omitted elements are set to <code>0</code>.</p>

<p>In C++, to set them all to <code>-1</code>, you can use something like <a href=""http://en.cppreference.com/w/cpp/algorithm/fill_n"" rel=""nofollow noreferrer""><code>std::fill_n</code></a> (from <code>&lt;algorithm&gt;</code>):</p>

<pre><code>std::fill_n(array, 100, -1);
</code></pre>

<p>In portable C, you have to roll your own loop. There are compiler-extensions or you can depend on implementation-defined behavior as a shortcut if that's acceptable.</p>
","1065800"
"Difference between a Structure and a Union","302963","","<p>Is there any good example to give the difference between a <code>struct</code> and a <code>union</code>?
Basically I know that <code>struct</code> uses all the memory of its member and <code>union</code> uses the largest members memory space. Is there any other OS level difference? </p>
","<p>With a union, you're only supposed to use one of the elements, because they're all stored at the same spot. This makes it useful when you want to store something that could be one of several types. A struct, on the other hand, has a separate memory location for each of its elements and they all can be used at once.</p>

<p>To give a concrete example of their use, I was working on a Scheme interpreter a little while ago and I was essentially overlaying the Scheme data types onto the C data types. This involved storing in a struct an enum indicating the type of value and a union to store that value.</p>

<pre><code>union foo {
  int a;   // can't use both a and b at once
  char b;
} foo;

struct bar {
  int a;   // can use both a and b simultaneously
  char b;
} bar;

union foo x;
x.a = 3; // OK
x.b = 'c'; // NO! this affects the value of x.a!

struct bar y;
y.a = 3; // OK
y.b = 'c'; // OK
</code></pre>

<p><strong>edit:</strong> If you're wondering what setting x.b to 'c' changes the value of x.a to, technically speaking it's undefined. On most modern machines a char is 1 byte and an int is 4 bytes, so giving x.b the value 'c' also gives the first byte of x.a that same value:</p>

<pre><code>union foo x;
x.a = 3;
x.b = 'c';
printf(""%i, %i\n"", x.a, x.b);
</code></pre>

<p>prints</p>

<pre><code>99, 99
</code></pre>

<p>Why are the two values the same? Because the last 3 bytes of the int 3 are all zero, so it's also read as 99. If we put in a larger number for x.a, you'll see that this is not always the case:</p>

<pre><code>union foo x;
x.a = 387439;
x.b = 'c';
printf(""%i, %i\n"", x.a, x.b);
</code></pre>

<p>prints</p>

<pre><code>387427, 99
</code></pre>

<p>To get a closer look at the actual memory values, let's set and print out the values in hex:</p>

<pre><code>union foo x;
x.a = 0xDEADBEEF;
x.b = 0x22;
printf(""%x, %x\n"", x.a, x.b);
</code></pre>

<p>prints</p>

<pre><code>deadbe22, 22
</code></pre>

<p>You can clearly see where the 0x22 overwrote the 0xEF.</p>

<p><strong>BUT</strong></p>

<p>In C, the order of bytes in an int are <strong>not defined.</strong> This program overwrote the 0xEF with 0x22 on my Mac, but there are other platforms where it would overwrite the 0xDE instead because the order of the bytes that make up the int were reversed. Therefore, when writing a program, you should never rely on the behavior of overwriting specific data in a union because it's not portable.</p>

<p>For more reading on the ordering of bytes, check out <a href=""http://en.wikipedia.org/wiki/Endian"" rel=""noreferrer"">endianness</a>.</p>
","346541"
"How to print the array?","299359","","<pre><code>int main() {  
  int my array[3][3] =
    10, 23, 42,    
    1, 654, 0,  
    40652, 22, 0  
  };  

  printf(""%d\n"", my_array[3][3]);  
  return 0;
}
</code></pre>

<p>I am not able to get the array to print.. Any ideas why? I am a beginning programmer so any words of advice are appreciated. </p>
","<p>What you are doing is printing the value in the array at spot [3][3], which is invalid for a 3by3 array, you need to loop over all the spots and print them.</p>

<pre><code>for(int i = 0; i &lt; 3; i++) {
    for(int j = 0; j &lt; 3; j++) {
        printf(""%d "", array[i][j]);
    }
    printf(""\n"");
} 
</code></pre>

<p>This will print it in the following format</p>

<pre><code>10 23 42
1 654 0
40652 22 0
</code></pre>

<p>if you want more exact formatting you'll have to change how the printf is formatted.</p>
","9726975"
"What does void mean in C, C++, and C#?","297950","","<p>Looking to get the fundamentals on where the term VOID comes from and why it would be called void. The intention of the question is to assist someone who has no C experience and is suddenly looking at a C-based codebase. </p>
","<p>Basically it means ""nothing"" or ""no type""</p>

<p>There are 3 basic ways that void is used:</p>

<ol>
<li><p>Function argument: <code>int myFunc(void)</code>
-- the function takes nothing. </p></li>
<li><p>Function return value: <code>void myFunc(int)</code>
-- the function returns nothing</p></li>
<li><p>Generic data pointer: <code>void* data</code>
-- 'data' is a pointer to data of unknown type, and cannot be dereferenced</p></li>
</ol>

<p>Note: the <code>void</code> in a function argument is optional in C++, so <code>int myFunc()</code> is exactly the same as <code>int myFunc(void)</code>, and it is left out completely in C#. It is always required for a return value.</p>
","1043107"
"warning: incompatible implicit declaration of built-in function ‘xyz’","294529","","<p>I'm getting a number of these warnings when compiling a few binaries: </p>

<pre><code>warning: incompatible implicit declaration of built-in function ‘strcpy’
warning: incompatible implicit declaration of built-in function ‘strlen’
warning: incompatible implicit declaration of built-in function ‘exit’
</code></pre>

<p>To try to resolve this, I have added</p>

<pre><code>#include &lt;stdlib.h&gt;
</code></pre>

<p>at the top of the C files associated with this warning, in addition to compiling with the following flags:</p>

<pre><code>CFLAGS = -fno-builtin-exit -fno-builtin-strcat -fno-builtin-strncat -fno-builtin-strcpy -fno-builtin-strlen -fno-builtin-calloc
</code></pre>

<p>I am using GCC 4.1.2:</p>

<pre><code>$ gcc --version
gcc (GCC) 4.1.2 20080704
</code></pre>

<p>What should I do to resolve these warnings?</p>
","<p>In C, using a previously undeclared function constitutes an implicit declaration of the function.  In an implicit declaration, the return type is <code>int</code> if I recall correctly.  Now, GCC has built-in definitions for some standard functions.  If an implicit declaration does not match the built-in definition, you get this warning.</p>

<p>To fix the problem, you have to declare the functions before using them; normally you do this by including the appropriate header.  I recommend not to use the -fno-builtin-* flags if possible.</p>

<p>Instead of stdlib.h, you should try</p>

<pre><code>#include &lt;string.h&gt;
</code></pre>

<p>That's where <code>strcpy</code> and <code>strncpy</code> are defined, at least according to the strcpy(2) man page.</p>

<p>The <code>exit</code> function is defined in stdlib.h, though, so I don't know what's going on there.</p>
","977260"
"How do you reverse a string in place in C or C++?","294289","","<p>How do you reverse a string in C or C++ without requiring a separate buffer to hold the reversed string?</p>
","<p>Evil C:</p>

<pre><code>#include &lt;stdio.h&gt;

void strrev(char *p)
{
  char *q = p;
  while(q &amp;&amp; *q) ++q;
  for(--q; p &lt; q; ++p, --q)
    *p = *p ^ *q,
    *q = *p ^ *q,
    *p = *p ^ *q;
}

int main(int argc, char **argv)
{
  do {
    printf(""%s "",  argv[argc-1]);
    strrev(argv[argc-1]);
    printf(""%s\n"", argv[argc-1]);
  } while(--argc);

  return 0;
}
</code></pre>

<p>(This is XOR-swap thing. Take care to note that you <em>must avoid</em> swapping with self, because a^a==0.)</p>

<hr>

<h2>Ok, fine, let's fix the UTF-8 chars...</h2>

<pre><code>#include &lt;bits/types.h&gt;
#include &lt;stdio.h&gt;

#define SWP(x,y) (x^=y, y^=x, x^=y)

void strrev(char *p)
{
  char *q = p;
  while(q &amp;&amp; *q) ++q; /* find eos */
  for(--q; p &lt; q; ++p, --q) SWP(*p, *q);
}

void strrev_utf8(char *p)
{
  char *q = p;
  strrev(p); /* call base case */

  /* Ok, now fix bass-ackwards UTF chars. */
  while(q &amp;&amp; *q) ++q; /* find eos */
  while(p &lt; --q)
    switch( (*q &amp; 0xF0) &gt;&gt; 4 ) {
    case 0xF: /* U+010000-U+10FFFF: four bytes. */
      SWP(*(q-0), *(q-3));
      SWP(*(q-1), *(q-2));
      q -= 3;
      break;
    case 0xE: /* U+000800-U+00FFFF: three bytes. */
      SWP(*(q-0), *(q-2));
      q -= 2;
      break;
    case 0xC: /* fall-through */
    case 0xD: /* U+000080-U+0007FF: two bytes. */
      SWP(*(q-0), *(q-1));
      q--;
      break;
    }
}

int main(int argc, char **argv)
{
  do {
    printf(""%s "",  argv[argc-1]);
    strrev_utf8(argv[argc-1]);
    printf(""%s\n"", argv[argc-1]);
  } while(--argc);

  return 0;
}
</code></pre>

<ul>
<li>Why, yes, if the input is borked, this will cheerfully swap outside the place.</li>
<li>Useful link when vandalising in the UNICODE: <a href=""http://www.macchiato.com/unicode/chart/"" rel=""noreferrer"">http://www.macchiato.com/unicode/chart/</a></li>
<li>Also, UTF-8 over 0x10000 is untested (as I don't seem to have any font for it, nor the patience to use a hexeditor)</li>
</ul>

<p>Examples:</p>

<pre><code>$ ./strrev Räksmörgås ░▒▓○◔◑◕●

░▒▓○◔◑◕● ●◕◑◔○▓▒░

Räksmörgås sågrömskäR

./strrev verrts/.
</code></pre>
","198264"
"Get the current time in C","294136","","<p>I want to get the current time of my system. For that I'm using the following code in C:</p>

<pre><code>time_t now;
struct tm *mytime = localtime(&amp;now); 
if ( strftime(buffer, sizeof buffer, ""%X"", mytime) )
{
    printf(""time1 = \""%s\""\n"", buffer);
}
</code></pre>

<p>The problem is that this code is giving some random time. Also, the random time is different everytime. I want the current time of my system.</p>
","<p>Copy-pasted from <a href=""http://www.cplusplus.com/reference/clibrary/ctime/localtime/"" rel=""noreferrer"">here</a>:</p>

<pre><code>/* localtime example */
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main ()
{
  time_t rawtime;
  struct tm * timeinfo;

  time ( &amp;rawtime );
  timeinfo = localtime ( &amp;rawtime );
  printf ( ""Current local time and date: %s"", asctime (timeinfo) );

  return 0;
}
</code></pre>

<p>(just add ""void"" to the main() arguments list in order for this to work in C)</p>
","5142028"
"Preventing console window from closing on Visual Studio C/C++ Console application","293960","","<p>This is a probably an embarasing question as no doubt the answer is blindingly obvious.</p>

<p>I've used Visual Studio for years, but this is the first time I've done any 'Console Application' development.</p>

<p>When I run my application the console window pops up, the program output appears and then the window closes as the application exits.</p>

<p>Is there a way to either keep it open until I have checked the output, or view the results after the window has closed?</p>
","<p>If you run without debugging (Ctrl+F5) then by default it prompts your to press return to close the window. If you want to use the debugger, you should put a breakpoint on the last line.</p>
","1775870"
"Write applications in C or C++ for Android?","293278","","<p>I'm trying to develop/port a game to Android, but it's in C, and Android supports Java, but I'm sure there must be a way to get a C app on there, anyone knows of a good tutorial on the subject?</p>

<p>Thanks!</p>
","<p>For anyone coming to this via Google, note that starting from SDK 1.6 Android now has an official native SDK. </p>

<p>You can download the Android NDK (Native Development Kit) from here: 
<a href=""https://developer.android.com/ndk/downloads/index.html"" rel=""noreferrer"">https://developer.android.com/ndk/downloads/index.html</a></p>

<p>Also there is an blog post about the NDK:<br>
<a href=""http://android-developers.blogspot.com/2009/06/introducing-android-15-ndk-release-1.html"" rel=""noreferrer"">http://android-developers.blogspot.com/2009/06/introducing-android-15-ndk-release-1.html</a></p>
","1571635"
"Execution time of C program","291430","","<p>I have a C program that aims to be run in parallel on several processors. I need to be able to record the execution time (which could be anywhere from 1 second to several minutes). I have searched for answers, but they all seem to suggest using the <code>clock()</code> function, which then involves calculating the number of clocks the program took divided by the <code>Clocks_per_second</code> value.</p>

<p>I'm not sure how the <code>Clocks_per_second</code> value is calculated? </p>

<p>In Java, I just take the current time in milliseconds before and after execution. </p>

<p>Is there a similar thing in C? I've had a look, but I can't seem to find a way of getting anything better than a second resolution. </p>

<p>I'm also aware a profiler would be an option, but am looking to implement a timer myself.</p>

<p>Thanks</p>
","<p><code>CLOCKS_PER_SEC</code> is a constant which is declared in <code>&lt;time.h&gt;</code>. To get the CPU time used by a task within a C application, use:</p>

<pre><code>clock_t begin = clock();

/* here, do your time-consuming job */

clock_t end = clock();
double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
</code></pre>

<p>Note that this returns the time as a floating point type. This can be more precise than a second (e.g. you measure 4.52 seconds). Precision depends on the architecture; on modern systems you easily get 10ms or lower, but on older Windows machines (from the Win98 era) it was closer to 60ms.</p>

<p><code>clock()</code> is standard C; it works ""everywhere"". There are system-specific functions, such as <code>getrusage()</code> on Unix-like systems.</p>

<p>Java's <code>System.currentTimeMillis()</code> does not measure the same thing. It is a ""wall clock"": it can help you measure how much time it took for the program to execute, but it does not tell you how much CPU time was used. On a multitasking systems (i.e. all of them), these can be widely different.</p>
","5249150"
"""static const"" vs ""#define"" vs ""enum""","283285","","<p>Which one is better to use among the below statements in C?</p>

<pre><code>static const int var = 5;
</code></pre>

<p>or </p>

<pre><code>#define var 5
</code></pre>

<p>or</p>

<pre><code>enum { var = 5 };
</code></pre>
","<p>Generally speaking:</p>

<pre><code>static const
</code></pre>

<p>Because it respects scope and is type-safe.</p>

<p>The only caveat I could see: if you want the variable to be possibly defined on the command line. There is still an alternative:</p>

<pre><code>#ifdef VAR // Very bad name, not long enough, too general, etc..
  static int const var = VAR;
#else
  static int const var = 5; // default value
#endif
</code></pre>

<p>Whenever possible, instead of macros / ellipsis, use a type-safe alternative.</p>

<p>If you really NEED to go with a macro (for example, you want <code>__FILE__</code> or <code>__LINE__</code>), then you'd better name your macro VERY carefully: in its <a href=""http://www.boost.org/development/requirements.html"" rel=""noreferrer"">naming convention</a> <a href=""http://en.wikipedia.org/wiki/Boost_C++_Libraries"" rel=""noreferrer"">Boost</a> recommends all upper-case, beginning by the name of the project (here BOOST_), while perusing the library you will notice this is (generally) followed by the name of the particular area (library) then with a meaningful name.</p>

<p>It generally makes for lengthy names :)</p>
","1674040"
"Can I use a binary literal in C or C++?","282309","","<p>I need to work with a binary number.</p>

<p>I tried writing:</p>

<pre><code>const x = 00010000;
</code></pre>

<p>But it didn't work.</p>

<p>I know that I can use an hexadecimal number that has the same value as <code>00010000</code>, but I want to know if there is a type in C++ for binary numbers and if there isn't, is there another solution for my problem?</p>
","<p>You can <a href=""http://www.boost.org/doc/libs/1_42_0/libs/utility/utility.htm#BOOST_BINARY"" rel=""nofollow noreferrer"">use <strong><code>BOOST_BINARY</code></strong></a> while waiting for C++0x. :)  <code>BOOST_BINARY</code> arguably has an advantage over template implementation insofar as it <strong>can be used in C programs as well</strong> (it is 100% preprocessor-driven.)</p>

<h3>UPDATE</h3>

<p>To do the converse (i.e. print out a number in binary form), you can use the non-portable <a href=""http://www.cplusplus.com/reference/clibrary/cstdlib/itoa/"" rel=""nofollow noreferrer""><code>itoa</code> function</a>, or <a href=""http://www.jb.man.ac.uk/~slowe/cpp/itoa.html"" rel=""nofollow noreferrer"">implement your own</a>.</p>

<p>Unfortunately you cannot do base 2 formatting with STL streams (since <a href=""http://en.cppreference.com/w/cpp/io/manip/setbase"" rel=""nofollow noreferrer""><code>setbase</code></a> will only honour bases 8, 10 and 16), but you <em>can</em> use either a <code>std::string</code> version of <code>itoa</code>, or (the more concise, yet marginally less efficient) <code>std::bitset</code>.</p>

<p><em>(Thank you <a href=""https://stackoverflow.com/users/54262/roger-pate"">Roger</a> for the <code>bitset</code> tip!)</em></p>

<pre><code>#include &lt;boost/utility/binary.hpp&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;bitset&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;

using namespace std;

int main() {
  unsigned short b = BOOST_BINARY( 10010 );
  char buf[sizeof(b)*8+1];
  printf(""hex: %04x, dec: %u, oct: %06o, bin: %16s\n"", b, b, b, itoa(b, buf, 2));
  cout &lt;&lt; setfill('0') &lt;&lt;
    ""hex: "" &lt;&lt; hex &lt;&lt; setw(4) &lt;&lt; b &lt;&lt; "", "" &lt;&lt;
    ""dec: "" &lt;&lt; dec &lt;&lt; b &lt;&lt; "", "" &lt;&lt;
    ""oct: "" &lt;&lt; oct &lt;&lt; setw(6) &lt;&lt; b &lt;&lt; "", "" &lt;&lt;
    ""bin: "" &lt;&lt; bitset&lt; 16 &gt;(b) &lt;&lt; endl;
  return 0;
}
</code></pre>

<p>produces:</p>

<pre><code>hex: 0012, dec: 18, oct: 000022, bin:            10010
hex: 0012, dec: 18, oct: 000022, bin: 0000000000010010
</code></pre>

<p>Also read Herb Sutter's <em><a href=""http://www.gotw.ca/publications/mill19.htm"" rel=""nofollow noreferrer"">The String Formatters of Manor Farm</a></em> for an interesting discussion.</p>
","2611883"
"How to convert an int to string in C","282075","","<p>How do you convert an <code>int</code> (integer) to a string? I'm trying to make a function that converts the data of a <code>struct</code> into a string to save it in a file.</p>
","<p><strong>EDIT:</strong>  As pointed out in the comment, <code>itoa()</code> is not a standard, so better use sprintf() approach suggested in the rivaling answer!</p>

<hr>

<p>You can use <code>itoa()</code> function to <strong>convert</strong> your integer value to a string.</p>

<p>Here is an example:</p>

<pre><code>int num = 321;
char snum[5];

// convert 123 to string [buf]
itoa(num, snum, 10);

// print our string
printf(""%s\n"", snum);
</code></pre>

<hr>

<p>If you want to output your structure into a file there is no need to convert any value beforehand. You can just use the <a href=""http://www.cplusplus.com/reference/clibrary/cstdio/printf/"" rel=""noreferrer"">printf format specification</a> to indicate how to output your values and use any of the operators from <a href=""http://www.tenouk.com/clabworksheet/labworksheet4.html"" rel=""noreferrer"">printf family</a> to output your data.</p>
","8257754"
"Unit Testing C Code","280825","","<p>I worked on an embedded system this summer written in straight C.  It was an existing project that the company I work for had taken over.  I have become quite accustomed to writing unit tests in Java using JUnit but was at a loss as to the best way to write unit tests for existing code (which needed refactoring) as well as new code added to the system.</p>

<p>Is there any way to make unit testing plain C code as easy as unit testing Java code with, for example, <em>JUnit</em>?  Any insight that would apply specifically to embedded development (cross-compiling to arm-linux platform) would be greatly appreciated.</p>
","<p>One unit testing framework in C is <a href=""https://libcheck.github.io/check/"" rel=""noreferrer"">Check</a>; a list of unit testing frameworks in C can be found <a href=""http://check.sourceforge.net/doc/check_html/check_2.html#SEC3"" rel=""noreferrer"">here</a> and is reproduced below.  Depending on how many standard library functions your runtime has, you may or not be able to use one of those.</p>

<blockquote>
  <h3>AceUnit</h3>
  
  <p>AceUnit (Advanced C and Embedded Unit) bills itself as a comfortable C code unit test framework. It tries to mimick JUnit 4.x and includes reflection-like capabilities. AceUnit can be used in resource constraint environments, e.g. embedded software development, and importantly it runs fine in environments where you cannot include a single standard header file and cannot invoke a single standard C function from the ANSI / ISO C libraries. It also has a Windows port. It does not use forks to trap signals, although the authors have expressed interest in adding such a feature. See the <a href=""http://aceunit.sourceforge.net/"" rel=""noreferrer"">AceUnit homepage</a>.</p>
  
  <h3>GNU Autounit</h3>
  
  <p>Much along the same lines as Check, including forking to run unit tests in a separate address space (in fact, the original author of Check borrowed the idea from GNU Autounit). GNU Autounit uses GLib extensively, which means that linking and such need special options, but this may not be a big problem to you, especially if you are already using GTK or GLib. See the <a href=""http://autounit.tigris.org/"" rel=""noreferrer"">GNU Autounit homepage</a>.</p>
  
  <h3>cUnit</h3>
  
  <p>Also uses GLib, but does not fork to protect the address space of unit tests.</p>
  
  <h3>CUnit</h3>
  
  <p>Standard C, with plans for a Win32 GUI implementation. Does not currently fork or otherwise protect the address space of unit tests. In early development. See the <a href=""http://cunit.sourceforge.net/"" rel=""noreferrer"">CUnit homepage</a>.</p>
  
  <h3>CuTest</h3>
  
  <p>A simple framework with just one .c and one .h file that you drop into your source tree. See the <a href=""http://cutest.sourceforge.net/"" rel=""noreferrer"">CuTest homepage</a>.</p>
  
  <h3>CppUnit</h3>
  
  <p>The premier unit testing framework for C++; you can also use it to test C code. It is stable, actively developed, and has a GUI interface. The primary reasons not to use CppUnit for C are first that it is quite big, and second you have to write your tests in C++, which means you need a C++ compiler. If these don’t sound like concerns, it is definitely worth considering, along with other C++ unit testing frameworks. See the <a href=""http://cppunit.sourceforge.net/doc/cvs/index.html"" rel=""noreferrer"">CppUnit homepage</a>.</p>
  
  <h3>embUnit</h3>
  
  <p>embUnit (Embedded Unit) is another unit test framework for embedded systems. This one appears to be superseded by AceUnit. <a href=""http://sourceforge.net/projects/embunit/"" rel=""noreferrer"">Embedded Unit homepage</a>.</p>
  
  <h3>MinUnit</h3>
  
  <p>A minimal set of macros and that’s it! The point is to show how easy it is to unit test your code. See the <a href=""http://www.jera.com/techinfo/jtns/jtn002.html"" rel=""noreferrer"">MinUnit homepage</a>.</p>
  
  <h3>CUnit for Mr. Ando</h3>
  
  <p>A CUnit implementation that is fairly new, and apparently still in early development. See the <a href=""http://park.ruru.ne.jp/ando/work/CUnitForAndo/html/"" rel=""noreferrer"">CUnit for Mr. Ando homepage</a>.</p>
  
  <p>This list was last updated in March 2008.</p>
</blockquote>

<p>Others:</p>

<h3>CMocka</h3>

<p>CMocka is a test framework for C with support for mock objects. It's easy to use and setup. <a href=""https://cmocka.org/"" rel=""noreferrer"">CMocka</a> official homepage.</p>

<h3>Criterion</h3>

<p>Criterion is a cross-platform C unit testing framework supporting automatic test registration, parameterized tests, theories, and that can output to multiple formats, including TAP and JUnit XML. Each test is run in its own process, so signals and crashes can be reported or tested if needed. See the <a href=""https://github.com/Snaipe/Criterion"" rel=""noreferrer"">Criterion homepage</a> for more information.</p>

<h3>HWUT</h3>

<p>HWUT is a general Unit Test tool with great support for C. It can help to create Makefiles, generate massive test cases coded in minimal 'iteration tables', walk along state machines, generate C-stubs and more. The general approach is pretty unique: Verdicts are based on 'good stdout/bad stdout'. The comparison function, though, is flexible. Thus, any type of script may be used for checking. It may be applied to any language that can produce standard output. See <a href=""http://hwut.sourceforge.net/"" rel=""noreferrer"">HWUT</a> homepage.</p>
","65845"
"Typedef function pointer?","279986","","<p>I'm learning how to dynamically load DLL's but what I don't understand is this line</p>

<pre><code>typedef void (*FunctionFunc)();
</code></pre>

<p>I have a few questions. If someone is able answer them I would be grateful.</p>

<ol>
<li>Why is <code>typedef</code> used?</li>
<li>The syntax looks odd; after <code>void</code> should there not be a function name or something? It looks like an anonymous function.</li>
<li>Is a function pointer created to store the memory address of a function?</li>
</ol>

<p>So I'm confused at the moment; can you clarify things for me?</p>
","<p><code>typedef</code> is a language construct that associates a name to a type.<br/>
You use it the same way you would use the original type, for instance</p>

<pre><code>  typedef int myinteger;
  typedef char *mystring;
  typedef void (*myfunc)();
</code></pre>

<p>using them like</p>

<pre><code>  myinteger i;   // is equivalent to    int i;
  mystring s;    // is the same as      char *s;
  myfunc f;      // compile equally as  void (*f)();
</code></pre>

<p>As you can see, you could just replace the <em>typedefed</em> name with its definition given above.<br/></p>

<p>The difficulty lies in the pointer to functions syntax and readability in C and C++, and the <code>typedef</code> can improve the readability of such declarations. However, the syntax is appropriate, since functions - unlike other simpler types - may have a return value and parameters, thus the sometimes lengthy and complex declaration of a pointer to function.</p>

<p>The readability may start to be really tricky with pointers to functions arrays, and some other even more indirect flavors.</p>

<p>To answer your three questions</p>

<ul>
<li><p><strong>Why is typedef used?</strong>
To ease the reading of the code - especially for pointers to functions, or structure names. </p></li>
<li><p><strong>The syntax looks odd (in the pointer to function declaration)</strong>
That syntax is not obvious to read, at least when beginning. Using a <code>typedef</code> declaration instead eases the reading</p></li>
<li><p><strong>Is a function pointer created to store the memory address of a function?</strong>
Yes, a function pointer stores the address of a function. This has nothing to do with the <code>typedef</code> construct which only ease the writing/reading of a program ; the compiler just expands the typedef definition before compiling the actual code.</p></li>
</ul>

<p>Example:</p>

<pre><code>typedef int (*t_somefunc)(int,int);

int product(int u, int v) {
  return u*v;
}

t_somefunc afunc = &amp;product;
...
int x2 = (*afunc)(123, 456); // call product() to calculate 123*456
</code></pre>
","4295495"
"What can be the reasons of connection refused errors?","275012","","<p>I'm trying to write a server program in C, 
using another client, I get this error when I try to connect through port 2080 for example.</p>

<pre><code>connection refused
</code></pre>

<p>What can be the reasons of this error?</p>
","<p>There could be many reasons, but the most common are:</p>

<ol>
<li><p>The port is not open on the destination machine.</p></li>
<li><p>The port is open on the destination machine, but its backlog of pending connections is full.</p></li>
<li><p>A firewall between the client and server is blocking access (also check local firewalls).</p></li>
</ol>

<p>After checking for firewalls and that the port is open, use telnet to connect to the ip/port to test connectivity. This removes any potential issues from your application.</p>
","2333446"
"Difference between ""while"" loop and ""do while"" loop","270208","","<p>What is the difference between while loop and do while loop. I used to think both are completely same.Then I came across following piece of code :</p>

<pre><code>do {
        printf(""Word length... "");
        scanf(""%d"", &amp;wdlen);
    } while(wdlen&lt;2);
</code></pre>

<p>This code works perfectly. It prints word length and tascans the input. But when I changed it to</p>

<pre><code>while(wdlen&lt;2){
        printf(""Word length... "");
        scanf(""%d"", &amp;wdlen);
    } 
</code></pre>

<p>It gives a blank screen. It do not work. So there is some functional difference between both loops. Can anybody explain it? Thanks in advance.</p>

<p>EDIT : Is there any other difference in these two ?</p>
","<p>The <strong>do while</strong> loop executes the content of the loop once before checking the condition of the while. </p>

<p>Whereas a <strong>while</strong> loop will check the condition first before executing the content.</p>

<p>In this case you are waiting for user input with scanf(), which will never execute in the <strong>while</strong> loop as wdlen is not initialized and may just contain a garbage value which may be greater than 2.</p>
","3625771"
"how to open, read, and write from serial port in C","267422","","<p>I am a little bit confused about reading and writing to a serial port. I have a USB device in Linux that uses the FTDI USB serial device converter driver. When I plug it in, it creates: /dev/ttyUSB1. </p>

<p>I thought itd be simple to open and read/write from it in C. I know the baud rate and parity information, but it seems like there is no standard for this?</p>

<p>Am I missing something, or can someone point me in the right direction?</p>
","<p>I wrote this a long time ago, and just copy and paste the bits needed into each project.</p>

<pre><code>#include &lt;errno.h&gt;
#include &lt;fcntl.h&gt; 
#include &lt;string.h&gt;
#include &lt;termios.h&gt;
#include &lt;unistd.h&gt;

int
set_interface_attribs (int fd, int speed, int parity)
{
        struct termios tty;
        memset (&amp;tty, 0, sizeof tty);
        if (tcgetattr (fd, &amp;tty) != 0)
        {
                error_message (""error %d from tcgetattr"", errno);
                return -1;
        }

        cfsetospeed (&amp;tty, speed);
        cfsetispeed (&amp;tty, speed);

        tty.c_cflag = (tty.c_cflag &amp; ~CSIZE) | CS8;     // 8-bit chars
        // disable IGNBRK for mismatched speed tests; otherwise receive break
        // as \000 chars
        tty.c_iflag &amp;= ~IGNBRK;         // disable break processing
        tty.c_lflag = 0;                // no signaling chars, no echo,
                                        // no canonical processing
        tty.c_oflag = 0;                // no remapping, no delays
        tty.c_cc[VMIN]  = 0;            // read doesn't block
        tty.c_cc[VTIME] = 5;            // 0.5 seconds read timeout

        tty.c_iflag &amp;= ~(IXON | IXOFF | IXANY); // shut off xon/xoff ctrl

        tty.c_cflag |= (CLOCAL | CREAD);// ignore modem controls,
                                        // enable reading
        tty.c_cflag &amp;= ~(PARENB | PARODD);      // shut off parity
        tty.c_cflag |= parity;
        tty.c_cflag &amp;= ~CSTOPB;
        tty.c_cflag &amp;= ~CRTSCTS;

        if (tcsetattr (fd, TCSANOW, &amp;tty) != 0)
        {
                error_message (""error %d from tcsetattr"", errno);
                return -1;
        }
        return 0;
}

void
set_blocking (int fd, int should_block)
{
        struct termios tty;
        memset (&amp;tty, 0, sizeof tty);
        if (tcgetattr (fd, &amp;tty) != 0)
        {
                error_message (""error %d from tggetattr"", errno);
                return;
        }

        tty.c_cc[VMIN]  = should_block ? 1 : 0;
        tty.c_cc[VTIME] = 5;            // 0.5 seconds read timeout

        if (tcsetattr (fd, TCSANOW, &amp;tty) != 0)
                error_message (""error %d setting term attributes"", errno);
}


...
char *portname = ""/dev/ttyUSB1""
 ...
int fd = open (portname, O_RDWR | O_NOCTTY | O_SYNC);
if (fd &lt; 0)
{
        error_message (""error %d opening %s: %s"", errno, portname, strerror (errno));
        return;
}

set_interface_attribs (fd, B115200, 0);  // set speed to 115,200 bps, 8n1 (no parity)
set_blocking (fd, 0);                // set no blocking

write (fd, ""hello!\n"", 7);           // send 7 character greeting

usleep ((7 + 25) * 100);             // sleep enough to transmit the 7 plus
                                     // receive 25:  approx 100 uS per char transmit
char buf [100];
int n = read (fd, buf, sizeof buf);  // read up to 100 characters if ready to read
</code></pre>

<p>The values for speed are <code>B115200</code>, <code>B230400</code>, <code>B9600</code>, <code>B19200</code>, <code>B38400</code>, <code>B57600</code>, <code>B1200</code>, <code>B2400</code>, <code>B4800</code>, etc.  The values for parity are <code>0</code> (meaning no parity), <code>PARENB|PARODD</code> (enable parity and use odd), <code>PARENB</code> (enable parity and use even), <code>PARENB|PARODD|CMSPAR</code> (mark parity), and <code>PARENB|CMSPAR</code> (space parity).</p>

<p>""Blocking"" sets whether a <code>read()</code> on the port waits for the specified number of characters to arrive.  Setting <em>no blocking</em> means that a <code>read()</code> returns however many characters are available without waiting for more, up to the buffer limit.</p>

<hr>

<p>Addendum:</p>

<p><code>CMSPAR</code> is needed only for choosing mark and space parity, which is uncommon.  For most applications, it can be omitted.  My header file <code>/usr/include/bits/termios.h</code> enables definition of <code>CMSPAR</code> only if the preprocessor symbol <code>__USE_MISC</code> is defined.  That definition occurs (in <code>features.h</code>) with</p>

<pre><code>#if defined _BSD_SOURCE || defined _SVID_SOURCE
 #define __USE_MISC     1
#endif
</code></pre>

<p>The introductory comments of <code>&lt;features.h&gt;</code> says:</p>

<pre><code>/* These are defined by the user (or the compiler)
   to specify the desired environment:

...
   _BSD_SOURCE          ISO C, POSIX, and 4.3BSD things.
   _SVID_SOURCE         ISO C, POSIX, and SVID things.
...
 */
</code></pre>
","6947758"
"How do I properly compare strings?","264374","","<p>I am trying to get a program to let a user enter a word or character, store it, and then print it until the user types it again, exiting the program. My code looks like this:</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
    char input[40];
    char check[40];
    int i=0;
    printf(""Hello!\nPlease enter a word or character:\n"");
    gets(input);
    printf(""I will now repeat this until you type it back to me.\n"");

    while (check != input)
    {
        printf(""%s\n"", input);
        gets(check); 
    }

    printf(""Good bye!"");


    return 0;
}
</code></pre>

<p>The problem is that I keep getting the printing of the input string, even when the input by the user (check) matches the original (input). Am I comparing the two incorrectly?</p>
","<p>You can't (usefully) compare strings using <code>!=</code> or <code>==</code>, you need to use <code>strcmp</code>:</p>

<pre><code>while (strcmp(check,input) != 0)
</code></pre>

<p>The reason for this is because <code>!=</code> and <code>==</code> will only compare the base addresses of those strings. Not the contents of the strings themselves.</p>
","8004250"
"How to copy a char array in C?","263393","","<p>In C, I have two char arrays:</p>

<pre><code>char array1[18] = ""abcdefg"";
char array2[18];
</code></pre>

<p>How to copy the value of <code>array1</code> to <code>array2</code> ? Can I just do this: <code>array2 = array1</code>?</p>
","<p>You can't directly do <code>array1 = array2</code>. Because in this case you would manipulate the addresses (<code>char *</code>) of the arrays and not their values.</p>

<p>For this kind of situation, it is recommended to use <a href=""http://www.cplusplus.com/reference/cstring/strncpy/?kw=strncpy""><code>strncpy</code></a> to avoid a <a href=""http://en.wikipedia.org/wiki/Buffer_overflow"">buffer overflow</a>, especially if <code>array1</code> is filled from user input (keyboard, network, etc.). Like so:</p>

<pre><code>// Will copy 18 characters from array1 to array2
strncpy(array2, array1, 18);
</code></pre>

<p>As @Prof. Falken mentioned in a comment, <code>strncpy</code> <a href=""http://blogs.msdn.com/b/michael_howard/archive/2004/11/02/251296.aspx"">can be evil</a>. Make sure your target buffer is big enough to contain the source buffer (including the <code>\0</code> at the end of the string).</p>
","16645642"
"How to find the 'sizeof' (a pointer pointing to an array)?","261942","","<p>First off, here is some code:</p>

<pre><code>int main() 
{
    int days[] = {1,2,3,4,5};
    int *ptr = days;
    printf(""%u\n"", sizeof(days));
    printf(""%u\n"", sizeof(ptr));

    return 0;
}
</code></pre>

<p>Is there a way to find out the size of the array that <code>ptr</code> is pointing to (instead of just giving its size, which is four bytes on a 32-bit system)? </p>
","<p>No, you can't.  The compiler doesn't know what the pointer is pointing to.  There are tricks, like ending the array with a known out-of-band value and then counting the size up until that value, but that's not using sizeof.  </p>

<p>Another trick is the one mentioned by <a href=""https://stackoverflow.com/users/13422/zan-lynx"">Zan</a>, which is to stash the size somewhere.  For example, if you're dynamically allocating the array, allocate a block one int bigger than the one you need, stash the size in the first int, and return ptr+1 as the pointer to the array.  When you need the size, decrement the pointer and peek at the stashed value.  Just remember to free the whole block starting from the beginning, and not just the array.</p>
","492410"
"Check substring exists in a string in C","261228","","<p>I'm trying to check whether a string contains a substring in C like:</p>

<pre><code>char *sent = ""this is my sample example"";
char *word = ""sample"";
if (/* sentence contains word */) {
    /* .. */
}
</code></pre>

<p>What is something to use instead of <code>string::find</code> in C++?</p>
","<pre><code>if(strstr(sent, word) != NULL) {
    /* ... */
}
</code></pre>

<p>Note that <code>strstr</code> returns a pointer to the start of the word in <code>sent</code> if the word <code>word</code> is found.</p>
","12784812"
"Printing prime numbers from 1 through 100","260197","","<p>This c++ code prints out the following prime numbers:   <strong>3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97.</strong></p>

<p>But I don't think that's the way my book wants it to be written. It mentions something about square root of a number. So I did try changing my 2nd loop to <code>for (int j=2; j&lt;sqrt(i); j++)</code> but it did not give me the result I needed.</p>

<p>How would I need to change this code to the way my book wants it to be?</p>

<pre><code>int main () 
{
    for (int i=2; i&lt;100; i++) 
        for (int j=2; j&lt;i; j++)
        {
            if (i % j == 0) 
                break;
            else if (i == j+1)
                cout &lt;&lt; i &lt;&lt; "" "";

        }   
    return 0;
}
</code></pre>

<blockquote>
  <p>A prime integer number is one that has
  exactly two different divisors, 
  namely 1 and the number itself. Write,
  run, and test a C++ program that 
  finds and prints all the prime numbers
  less than 100. (Hint: 1 is a  prime
  number. For each number from 2 to 100,
  find Remainder = Number % n, where n
  ranges from 2 to sqrt(number). \ If n
  is greater than sqrt(number), the
  number is not equally divisible by n. 
  Why? If any Remainder equals 0, the
  number is no a prime number.)</p>
</blockquote>
","<p>Three ways:</p>

<p>1.</p>

<pre><code>int main () 
{
    for (int i=2; i&lt;100; i++) 
        for (int j=2; j*j&lt;=i; j++)
        {
            if (i % j == 0) 
                break;
            else if (j+1 &gt; sqrt(i)) {
                cout &lt;&lt; i &lt;&lt; "" "";

            }

        }   

    return 0;
}
</code></pre>

<p>2.</p>

<pre><code>int main () 
{
    for (int i=2; i&lt;100; i++) 
    {
        bool prime=true;
        for (int j=2; j*j&lt;=i; j++)
        {
            if (i % j == 0) 
            {
                prime=false;
                break;    
            }
        }   
        if(prime) cout &lt;&lt; i &lt;&lt; "" "";
    }
    return 0;
}
</code></pre>

<p>3.</p>

<pre><code>#include &lt;vector&gt;
int main()
{
    std::vector&lt;int&gt; primes;
    primes.push_back(2);
    for(int i=3; i &lt; 100; i++)
    {
        bool prime=true;
        for(int j=0;j&lt;primes.size() &amp;&amp; primes[j]*primes[j] &lt;= i;j++)
        {
            if(i % primes[j] == 0)
            {
                prime=false;
                break;
            }
        }
        if(prime) 
        {
            primes.push_back(i);
            cout &lt;&lt; i &lt;&lt; "" "";
        }
    }

    return 0;
}
</code></pre>

<p>Edit: In the third example, we keep track of all of our previously calculated primes. If a number is divisible by a non-prime number, there is also some prime &lt;= that divisor which it is also divisble by. This reduces computation by a factor of primes_in_range/total_range.</p>
","5200931"
"core dumped - but core file is not in current directory?","257896","","<p>While running a C program, It says <em>""(core dumped)""</em> but I can't see any files under current path.</p>

<p>I have set and verified the <code>ulimit</code>:</p>

<pre><code>ulimit -c unlimited 
ulimit -a 
</code></pre>

<p>I also tried to find file named ""core"", but didn't get the core dumped file?<br>
Any help, where is my core file?</p>
","<p>Read <a href=""http://www.kernel.org/doc/Documentation/sysctl/kernel.txt"" rel=""noreferrer"">/usr/src/linux/Documentation/sysctl/kernel.txt</a>.</p>

<blockquote>
  <p>[/proc/sys/kernel/]core_pattern is used to specify a core dumpfile pattern name.</p>
  
  <ul>
  <li>If the first character of the pattern is a '|', the kernel will treat
  the rest of the pattern as a command to run.  The core dump will be
  written to the standard input of that program instead of to a file.</li>
  </ul>
</blockquote>

<p>Instead of writing the core dump to disk, your system is configured to send it to the <code>abrt</code> program instead.  <a href=""https://github.com/abrt/abrt/wiki/ABRT-Project"" rel=""noreferrer"">Automated Bug Reporting Tool</a> is possibly not as documented as it <a href=""https://bugzilla.redhat.com/show_bug.cgi?id=546049"" rel=""noreferrer"">should</a> be...</p>

<p>In any case, the quick answer is that you should be able to find your core file in <code>/var/cache/abrt</code>, where <code>abrt</code> stores it after being invoked.  Similarly, other systems using <a href=""https://wiki.ubuntu.com/Apport"" rel=""noreferrer"">Apport</a> may squirrel away cores in <code>/var/crash</code>, and so on.</p>
","2067406"
"Calling C/C++ from Python?","254081","","<p>What would be the quickest way to construct a Python binding to a C or C++ library?</p>

<p>(I am using Windows if this matters.)</p>
","<p>You should have a look at <a href=""http://www.boost.org/doc/libs/1_49_0/libs/python/doc/"" rel=""noreferrer"">Boost.Python</a>. Here is the short introduction taken from their website:</p>

<blockquote>
  <p>The Boost Python Library is a framework for interfacing Python and
  C++. It allows you to quickly and seamlessly expose C++ classes
  functions and objects to Python, and vice-versa, using no special
  tools -- just your C++ compiler. It is designed to wrap C++ interfaces
  non-intrusively, so that you should not have to change the C++ code at
  all in order to wrap it, making Boost.Python ideal for exposing
  3rd-party libraries to Python. The library's use of advanced
  metaprogramming techniques simplifies its syntax for users, so that
  wrapping code takes on the look of a kind of declarative interface
  definition language (IDL).</p>
</blockquote>
","145436"
"What should main() return in C and C++?","252240","","<p>What is the correct (most efficient) way to define the <code>main()</code> function in C and C++ — <code>int main()</code> or <code>void main()</code> — and why? 
If <code>int main()</code> then <code>return 1</code> or <code>return 0</code>?</p>

<hr>

<p><em>There are numerous duplicates of this question, including:</em></p>

<ul>
<li><a href=""https://stackoverflow.com/questions/2108192/what-are-the-valid-signatures-for-cs-main-function/"">What are the valid signatures for C's <code>main()</code> function?</a></li>
<li><a href=""https://stackoverflow.com/questions/17715008/the-return-type-of-main-function/"">The return type of <code>main()</code> function</a></li>
<li><a href=""https://stackoverflow.com/questions/636829/difference-between-void-main-and-int-main"">Difference between <code>void main()</code> and <code>int main()</code>?</a></li>
<li><a href=""https://stackoverflow.com/questions/1621574/mains-signature-in-c""><code>main()</code>'s signature in C++</a></li>
<li><a href=""https://stackoverflow.com/questions/4207134/what-is-the-proper-declaration-of-main"">What is the proper declaration of <code>main()</code>?</a> — For C++, with a very good answer indeed.</li>
<li><a href=""https://stackoverflow.com/questions/8692120/styles-of-main-functions-in-c"">Styles of <code>main()</code> functions in C</a></li>
<li><a href=""https://stackoverflow.com/questions/10915713/return-type-of-main-method-in-c"">Return type of <code>main()</code> method in C</a></li>
<li><a href=""https://stackoverflow.com/questions/9356510/int-main-vs-void-main-in-c""><code>int main()</code> vs <code>void main()</code> in C</a></li>
</ul>

<p>Related:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/5191965/c-int-mainint-argc-char-argv"">C++ — <code>int main(int argc, char **argv)</code></a></li>
<li><a href=""https://stackoverflow.com/questions/5217395/c-int-mainint-argc-char-argv"">C++ — <code>int main(int argc, char *argv[])</code></a></li>
<li><a href=""https://stackoverflow.com/questions/10321435/is-char-envp-as-a-third-argument-to-main-portable"">Is <code>char *envp[]</code> as a third argument to <code>main()</code> portable?</a></li>
<li><a href=""https://stackoverflow.com/questions/18402853/must-the-int-main-function-return-a-value-in-all-compilers"">Must the <code>int main()</code> function return a value in all compilers?</a></li>
<li><a href=""https://stackoverflow.com/questions/5296163/why-is-the-type-of-the-main-function-in-c-and-c-left-to-the-user-to-define"">Why is the type of the <code>main()</code> function in C and C++ left to the user to define?</a></li>
<li><a href=""https://stackoverflow.com/questions/22239/why-does-int-main-compile"">Why does <code>int main(){}</code> compile?</a></li>
<li><a href=""https://stackoverflow.com/questions/26470912/legal-definitions-of-main-in-c14"">Legal definitions of <code>main()</code> in C++14?</a></li>
</ul>
","<p>The return value for <code>main</code> should indicate how the program exited. Normal exit is generally represented by a 0 return value from <code>main</code>. Abnormal termination is usually signalled by a non-zero return but there is no standard for how non-zero codes are interpreted. Also as noted by others, <code>void main()</code> is explicitly prohibited by the C++ standard and shouldn't be used. The valid C++ <code>main</code> signatures are:</p>

<pre><code>int main()
</code></pre>

<p>and</p>

<pre><code>int main(int argc, char* argv[])
</code></pre>

<p>which is equivalent to</p>

<pre><code>int main(int argc, char** argv)
</code></pre>

<p>It's also worth noting that in C++, <code>int main()</code> can be left without a return value at which point it defaults to returning 0. This is also true with a C99 program. Whether return 0 should be omitted or not is open to debate. The range of valid C program main signatures is much greater.  </p>

<p>Also, efficiency is not an issue with the <code>main</code> function. It can only be entered and left once (marking program start and termination) according to the C++ standard. For C, the case is different and re-entering <code>main()</code> is allowed, but should probably be avoided. </p>
","204483"
"Debug vs Release in CMAKE","252104","","<p>In a GCC compiled project,</p>

<ul>
<li>how to run <code>cmake</code> for each target type (debug/release)?</li>
<li>how to specify debug and release C/C++ flags using <code>cmake</code>?</li>
<li>how to express that the main executable will be compiled with <code>g++</code> and one nested library with <code>gcc</code>?</li>
</ul>
","<p>It's generally best to do an ""out of source"" build.  Create your <code>CMakeLists.txt</code> in the root of your project.  Then from the root of your project:</p>

<pre><code>mkdir Release
cd Release
cmake -DCMAKE_BUILD_TYPE=Release ..
make
</code></pre>

<p>And for Debug (again from the root of your project):</p>

<pre><code>mkdir Debug
cd Debug
cmake -DCMAKE_BUILD_TYPE=Debug ..
make
</code></pre>

<p><code>Debug</code> will add the debug flags appropriate for your compiler.  See
<a href=""http://www.cmake.org/Wiki/CMake_FAQ#Out-of-source_build_trees"" rel=""noreferrer"">this FAQ</a> for more details.</p>

<hr>

<p>You can modify/add to the flags in your <code>CMakeLists.txt</code> via <code>CMAKE_C_FLAGS_DEBUG</code> and <code>CMAKE_C_FLAGS_RELEASE</code> variables, e.g.: </p>

<pre><code>set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -Wall"")
set(CMAKE_CXX_FLAGS_RELEASE ""${CMAKE_CXX_FLAGS_RELEASE} -Wall"")
</code></pre>

<p>See <a href=""http://cmake.org/Wiki/CMake_Useful_Variables"" rel=""noreferrer"">this link</a> under <code>CMAKE_BUILD_TYPE</code> for more details. </p>

<hr>

<p>As for your 3rd question, I'm not sure what you are asking exactly. CMake should automatically detect and use the compiler appropriate for your different source files.</p>
","7725055"
"Is there a good Valgrind substitute for Windows?","252022","","<p>I was looking into Valgrind to help improve my C coding/debugging when I discovered it is only for Linux - I have no other need or interest in moving my OS to Linux so I was wondering if there is a equally good program for Windows.</p>
","<p>Some more good commercial tools:</p>

<ul>
<li><a href=""http://www-01.ibm.com/software/awdtools/purify/"" rel=""noreferrer"">Purify</a></li>
<li><a href=""http://www.parasoft.com/jsp/products/home.jsp?product=Insure"" rel=""noreferrer"">Insure++</a></li>
</ul>
","413842"
"How do I concatenate two strings in C?","251624","","<p>How do I add two strings?</p>

<p>I tried <code>name = ""derp"" + ""herp"";</code>, but I got an error:</p>

<blockquote>
  <p>Expression must have integral or enum type</p>
</blockquote>
","<p>C does not have the support for strings that some other languages have. A string in C is just a pointer to an array of <code>char</code> that is terminated by the first null character. There is no string concatenation operator in C.</p>

<p>Use <code>strcat</code> to concatenate two strings. You could use the following function to do it:</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

char* concat(const char *s1, const char *s2)
{
    char *result = malloc(strlen(s1)+strlen(s2)+1);//+1 for the null-terminator
    //in real code you would check for errors in malloc here
    strcpy(result, s1);
    strcat(result, s2);
    return result;
}
</code></pre>

<p>This is not the fastest way to do this, but you shouldn't be worrying about that now. Note that the function returns a block of heap allocated memory to the caller and passes on ownership of that memory. It is the responsibility of the caller to <code>free</code> the memory when it is no longer needed.</p>

<p>Call the function like this:</p>

<pre><code>char* s = concat(""derp"", ""herp"");
//do things with s
free(s);//deallocate the string
</code></pre>

<p>If you did happen to be bothered by performance then you would want to avoid repeatedly scanning the input buffers looking for the null-terminator.</p>

<pre><code>char* concat(const char *s1, const char *s2)
{
    const size_t len1 = strlen(s1);
    const size_t len2 = strlen(s2);
    char *result = malloc(len1+len2+1);//+1 for the null-terminator
    //in real code you would check for errors in malloc here
    memcpy(result, s1, len1);
    memcpy(result+len1, s2, len2+1);//+1 to copy the null-terminator
    return result;
}
</code></pre>

<p>If you are planning to do a lot of work with strings then you may be better off using a different language that has first class support for strings.</p>
","8465083"
"Why aren't programs written in Assembly more often?","250277","","<p>It seems to be a mainstream opinion that assembly programming takes longer and is more difficult to program in than a higher level language such as C. Therefore it seems to be recommend or assumed that it is better to write in a higher level language for these reasons and for the reason of better portability.</p>

<p>Recently I've been writing in x86 assembly and it has dawned on me that perhaps these reasons are not really true, except perhaps portability. Perhaps it is more of a matter of familiarity and knowing how to write assembly well. I also noticed that programming in assembly is quite different than programming in an HLL. Perhaps a good and experienced assembly programmer could write programs just as easily and as quickly as an experienced C programmer writing in C.</p>

<p>Perhaps it is because assembly programming is quite different than HLLs, and so requires different thinking, methods and ways, which makes it seem very awkward to program in for the unfamiliar, and so gives it its bad name for writing programs in.</p>

<p>If portability isn't an issue, then really, what would C have over a good assembler such as NASM?</p>

<p><b>Edit:</b>
Just to point out. When you are writing in assembly, you don't have to write just in instruction codes. You can use macros and procedures and your own conventions to make various abstractions to make programs more modular, more maintainable and easier to read. This is where being familiar with how to write good assembly comes in.</p>
","<p>ASM has <strong>poor legibility</strong> and <strong>isn't really maintainable</strong> compared to higher-level languages.</p>

<p>Also, there are many <strong>fewer ASM developers</strong> than for other more popular languages, such as C.</p>

<p>Furthermore, if you use a higher-level language and <strong>new ASM instructions become available</strong> (SSE for example), you just need to update your compiler and your old code can easily make use of the new instructions.</p>

<p>What if the next CPU has twice as many registers?</p>

<p>The converse of this question would be: <em>What functionality do compilers provide?</em></p>

<p>I doubt you can/want to/should optimize your ASM better than <code>gcc -O3</code> can.</p>
","2684384"
"Why does scanf() need ""%lf"" for doubles, when printf() is okay with just ""%f""?","250224","","<p>Why is it that <code>scanf()</code> needs the <code>l</code> in ""<code>%lf</code>"" when reading a <code>double</code>, when <code>printf()</code> can use ""<code>%f</code>"" regardless of whether its argument is a <code>double</code> or a <code>float</code>?</p>

<p>Example code:</p>

<pre><code>double d;
scanf(""%lf"", &amp;d);
printf(""%f"", d);
</code></pre>
","<p>Because C will promote floats to doubles for functions that take variable arguments. Pointers aren't promoted to anything, so you should be using <code>%lf</code>, <code>%lg</code> or <code>%le</code> (or <code>%la</code> in C99) to read in doubles.</p>
","210591"
"What is the difference between char s[] and char *s?","248356","","<p>In C, one can use a string literal in a declaration like this:</p>

<pre><code>char s[] = ""hello"";
</code></pre>

<p>or like this:</p>

<pre><code>char *s = ""hello"";
</code></pre>

<p>So what is the difference? I want to know what actually happens in terms of storage duration, both at compile and run time. </p>
","<p>The difference here is that </p>

<pre><code>char *s = ""Hello world"";
</code></pre>

<p>will place <code>""Hello world""</code> in the <em>read-only parts of the memory</em>, and making <code>s</code> a pointer to that makes any writing operation on this memory illegal. </p>

<p>While doing:</p>

<pre><code>char s[] = ""Hello world"";
</code></pre>

<p>puts the literal string in read-only memory and copies the string to newly allocated memory on the stack. Thus making</p>

<pre><code>s[0] = 'J';
</code></pre>

<p>legal.</p>
","1704433"
"How to print a int64_t type in C","247923","","<p>C99 standard has integer types with bytes size like int64_t. I am using the following code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
int64_t my_int = 999999999999999999;
printf(""This is my_int: %I64d\n"", my_int);
</code></pre>

<p>and I get this compiler warning:</p>

<pre><code>warning: format ‘%I64d’ expects type ‘int’, but argument 2 has type ‘int64_t’
</code></pre>

<p>I tried with:</p>

<pre><code>printf(""This is my_int: %lld\n"", my_int); // long long decimal
</code></pre>

<p>But I get the same warning. I am using this compiler:</p>

<pre><code>~/dev/c$ cc -v
Using built-in specs.
Target: i686-apple-darwin10
Configured with: /var/tmp/gcc/gcc-5664~89/src/configure --disable-checking --enable-werror --prefix=/usr --mandir=/share/man --enable-languages=c,objc,c++,obj-c++ --program-transform-name=/^[cg][^.-]*$/s/$/-4.2/ --with-slibdir=/usr/lib --build=i686-apple-darwin10 --program-prefix=i686-apple-darwin10- --host=x86_64-apple-darwin10 --target=i686-apple-darwin10 --with-gxx-include-dir=/include/c++/4.2.1
Thread model: posix
gcc version 4.2.1 (Apple Inc. build 5664)
</code></pre>

<p>Which format should I use to print my_int variable without having a warning?</p>
","<p>For <code>int64_t</code> type:</p>

<pre><code>#include &lt;inttypes.h&gt;
int64_t t;
printf(""%"" PRId64 ""\n"", t);
</code></pre>

<p>for <code>uint64_t</code> type:</p>

<pre><code>#include &lt;inttypes.h&gt;
uint64_t t;
printf(""%"" PRIu64 ""\n"", t);
</code></pre>

<p>you can also use <code>PRIx64</code> to print in hexadecimal.</p>

<p><a href=""http://en.cppreference.com/w/cpp/types/integer"" rel=""noreferrer"">cppreference.com has a full listing</a> of available macros for all types including <code>intptr_t</code> (<code>PRIxPTR</code>).  There are separate macros for scanf, like <code>SCNd64</code>.</p>

<hr>

<p>A typical definition of PRIu16 would be <code>""hu""</code>, so implicit string-constant concatenation happens at compile time.</p>

<p>For your code to be fully portable, you must use <code>PRId32</code> and so on for printing <code>int32_t</code>, and <code>""%d""</code> or similar for printing <code>int</code>.</p>
","9225648"
"Is there a standard sign function (signum, sgn) in C/C++?","247591","","<p>I want a function that returns -1 for negative numbers and +1 for positive numbers.
<a href=""http://en.wikipedia.org/wiki/Sign_function"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Sign_function</a>
It's easy enough to write my own, but it seems like something that ought to be in a standard library somewhere.</p>

<p>Edit: Specifically, I was looking for a function working on floats.</p>
","<p>Surprised no one has posted the branchless, type-safe C++ version yet:</p>

<pre><code>template &lt;typename T&gt; int sgn(T val) {
    return (T(0) &lt; val) - (val &lt; T(0));
}
</code></pre>

<p>Benefits:</p>

<ul>
<li>Actually implements signum (-1, 0, or 1). Implementations here using copysign only return -1 or 1, which is not signum. Also, some implementations here are returning a float (or T) rather than an int, which seems wasteful.</li>
<li>Works for ints, floats, doubles, unsigned shorts, or any custom types constructible from integer 0 and orderable.</li>
<li>Fast! <code>copysign</code> is slow, especially if you need to promote and then narrow again. This is branchless and optimizes excellently</li>
<li>Standards-compliant! The bitshift hack is neat, but only works for some bit representations, and doesn't work when you have an unsigned type. It could be provided as a manual specialization when appropriate.</li>
<li>Accurate! Simple comparisons with zero can maintain the machine's internal high-precision representation (e.g. 80 bit on x87), and avoid a premature round to zero.</li>
</ul>

<p>Caveats:</p>

<ul>
<li>It's a template so it'll take forever to compile.</li>
<li>Apparently some people think use of a new, somewhat esoteric, and very slow standard library function <em>that doesn't even really implement signum</em> is more understandable.</li>
<li><p>The <code>&lt; 0</code> part of the check triggers GCC's <code>-Wtype-limits</code> warning when instantiated for an unsigned type. You can avoid this by using some overloads:</p>

<pre><code>template &lt;typename T&gt; inline constexpr
int signum(T x, std::false_type is_signed) {
    return T(0) &lt; x;
}

template &lt;typename T&gt; inline constexpr
int signum(T x, std::true_type is_signed) {
    return (T(0) &lt; x) - (x &lt; T(0));
}

template &lt;typename T&gt; inline constexpr
int signum(T x) {
    return signum(x, std::is_signed&lt;T&gt;());
}
</code></pre>

<p>(Which is a good example of the first caveat.)</p></li>
</ul>
","4609795"
"How to reverse a singly linked list using only two pointers?","246628","","<p>I would be wondered if there exists some logic to reverse the linked list using only two pointers.</p>

<p>The following is used to reverse the single linked list using three pointers namely p, q, r:</p>

<pre><code>struct node
{
    int data;
    struct node *link;
};

void reverse()
{
    struct node *p = first,
                *q = NULL,
                *r;
    while (p != NULL)
    {
        r = q;
        q = p;
        p = p-&gt;link;
        q-&gt;link = r;
    }
    q = first;
}
</code></pre>

<p>Is there any other alternate to reverse the linked list?  what would be the best logic to reverse a singly linked list, in terms of time complexity?</p>
","<p>Any alternative?  No, this is as simple as it gets, and there's no fundamentally-different way of doing it.  This algorithm is already O(n) time, and you can't get any faster than that, as you must modify every node.</p>

<p>It looks like your code is on the right track, but it's not quite working in the form above.  Here's a working version:</p>

<pre><code>#include &lt;stdio.h&gt;

typedef struct Node {
  char data;
  struct Node* next;
} Node;

void print_list(Node* root) {
  while (root) {
    printf(""%c "", root-&gt;data);
    root = root-&gt;next;
  }
  printf(""\n"");
}

Node* reverse(Node* root) {
  Node* new_root = 0;
  while (root) {
    Node* next = root-&gt;next;
    root-&gt;next = new_root;
    new_root = root;
    root = next;
  }
  return new_root;
}

int main() {
  Node d = { 'd', 0 };
  Node c = { 'c', &amp;d };
  Node b = { 'b', &amp;c };
  Node a = { 'a', &amp;b };

  Node* root = &amp;a;
  print_list(root);
  root = reverse(root);
  print_list(root);

  return 0;
}
</code></pre>
","1801703"
"How to generate a random number from within a range","246564","","<p>This is a follow on from a previously posted question:</p>

<p><a href=""https://stackoverflow.com/questions/822323/how-to-generate-a-random-number-in-c"">How to generate a random number in C?</a></p>

<p>I wish to be able to generate a random number from within a particular range, such as 1 to 6 to mimic the sides of a die.</p>

<p>How would I go about doing this?</p>
","<p>All the answers so far are mathematically wrong.  Returning <code>rand() % N</code> does not uniformly give a number in the range <code>[0, N)</code> unless <code>N</code> divides the length of the interval into which <code>rand()</code> returns (i.e. is a power of 2).  Furthermore, one has no idea whether the moduli of <code>rand()</code> are independent: it's possible that they go <code>0, 1, 2, ...</code>, which is uniform but not very random.  The only assumption it seems reasonable to make is that <code>rand()</code> puts out a Poisson distribution: any two nonoverlapping subintervals of the same size are equally likely and independent.  For a finite set of values, this implies a uniform distribution and also ensures that the values of <code>rand()</code> are nicely scattered.</p>

<p>This means that the only correct way of changing the range of <code>rand()</code> is to divide it into boxes; for example, if <code>RAND_MAX == 11</code> and you want a range of <code>1..6</code>, you should assign <code>{0,1}</code> to 1, <code>{2,3}</code> to 2, and so on.  These are disjoint, equally-sized intervals and thus are uniformly and independently distributed.</p>

<p>The suggestion to use floating-point division is mathematically plausible but suffers from rounding issues in principle.  Perhaps <code>double</code> is high-enough precision to make it work; perhaps not.  I don't know and I don't want to have to figure it out; in any case, the answer is system-dependent.</p>

<p>The correct way is to use integer arithmetic.  That is, you want something like the following:</p>

<pre><code>#include &lt;stdlib.h&gt; // For random(), RAND_MAX

// Assumes 0 &lt;= max &lt;= RAND_MAX
// Returns in the closed interval [0, max]
long random_at_most(long max) {
  unsigned long
    // max &lt;= RAND_MAX &lt; ULONG_MAX, so this is okay.
    num_bins = (unsigned long) max + 1,
    num_rand = (unsigned long) RAND_MAX + 1,
    bin_size = num_rand / num_bins,
    defect   = num_rand % num_bins;

  long x;
  do {
   x = random();
  }
  // This is carefully written not to overflow
  while (num_rand - defect &lt;= (unsigned long)x);

  // Truncated division is intentional
  return x/bin_size;
}
</code></pre>

<p>The loop is necessary to get a perfectly uniform distribution.  For example, if you are given random numbers from 0 to 2 and you want only ones from 0 to 1, you just keep pulling until you don't get a 2; it's not hard to check that this gives 0 or 1 with equal probability.  This method is also described in the link that nos gave in their answer, though coded differently.  I'm using <code>random()</code> rather than <code>rand()</code> as it has a better distribution (as noted by the man page for <code>rand()</code>).</p>

<p>If you want to get random values outside the default range <code>[0, RAND_MAX]</code>, then you have to do something tricky.  Perhaps the most expedient is to define a function <code>random_extended()</code> that pulls <code>n</code> bits (using <code>random_at_most()</code>) and returns in <code>[0, 2**n)</code>, and then apply <code>random_at_most()</code> with <code>random_extended()</code> in place of <code>random()</code> (and <code>2**n - 1</code> in place of <code>RAND_MAX</code>) to pull a random value less than <code>2**n</code>, assuming you have a numerical type that can hold such a value.  Finally, of course, you can get values in <code>[min, max]</code> using <code>min + random_at_most(max - min)</code>, including negative values.</p>
","6852396"
"Range of values in C Int and Long 32 - 64 bits","245978","","<p>I'm confused with range of values of Int variable in C.</p>

<p>I know that a 32bits unsigned int have a range of: 0 to 65,535.
So long has 0 to 4,294,967,295</p>

<p>This is fine in 32bits machine. But now in 64bits machines all thing keep the same?
Or maybe my int capacity is different?</p>

<p>I understand this questions as newbie, but I'm really confused. 
This method signature is not helping too. :)</p>

<pre><code>unsigned long long int atomicAdd(unsigned long long int* address, unsigned long long int val);
</code></pre>
","<p>In C and C++ you have these least requirements (i.e actual implementations can have larger magnitudes)</p>

<pre><code>signed char: -2^07+1 to +2^07-1
short:       -2^15+1 to +2^15-1
int:         -2^15+1 to +2^15-1
long:        -2^31+1 to +2^31-1
long long:   -2^63+1 to +2^63-1
</code></pre>

<p>Now, on particular implementations, you have a variety of bit ranges. The <a href=""http://en.wikipedia.org/wiki/64bit#64-bit_data_models"">wikipedia article</a> describes this nicely.</p>
","6155838"
"How do I list the symbols in a .so file","245856","","<p>How do list the symbols being exported from a .so file. If possible, I'd also like to know their source (e.g. if they are pulled in from a static library).</p>

<p>I'm using gcc 4.0.2, if that makes a difference</p>
","<p>The standard tool for listing symbols is <code>nm</code>, you can use it simply like this:</p>

<pre><code>nm -g yourLib.so
</code></pre>

<p>If you want to see symbols of a C++ library, add the ""-C"" option which demangle the symbols (it's far more readable demangled).</p>

<pre><code>nm -gC yourLib.so
</code></pre>

<p>If your .so file is in elf format, you have two options:</p>

<p>Either <code>objdump</code> (<code>-C</code> is also useful for demangling C++):</p>

<pre><code>$ objdump -TC libz.so

libz.so:     file format elf64-x86-64

DYNAMIC SYMBOL TABLE:
0000000000002010 l    d  .init  0000000000000000              .init
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 free
0000000000000000      DF *UND*  0000000000000000  GLIBC_2.2.5 __errno_location
0000000000000000  w   D  *UND*  0000000000000000              _ITM_deregisterTMCloneTable
</code></pre>

<p>Or use <code>readelf</code>:</p>

<pre><code>$ readelf -Ws libz.so
Symbol table '.dynsym' contains 112 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND
     1: 0000000000002010     0 SECTION LOCAL  DEFAULT   10
     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND free@GLIBC_2.2.5 (14)
     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __errno_location@GLIBC_2.2.5 (14)
     4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTable
</code></pre>
","34796"
"Arrow operator (->) usage in C","244625","","<p>I am currently learning C by reading a good beginner's book called ""Teach Yourself C in 21 Days"" (I have already learned Java and C# so I am moving at a much faster pace). I was reading the chapter on pointers and the -> (arrow) operator came up without explanation. I think that it is used to call members and functions (like the equivalent of the . (dot) operator, but for pointers instead of members). But I am not entirely sure. Could I please get an explanation and a code sample?</p>
","<p><code>foo-&gt;bar</code> is equivalent to <code>(*foo).bar</code>, i.e. it gets the member called <code>bar</code> from the struct that <code>foo</code> points to.</p>
","2575050"
"Printing 1 to 1000 without loop or conditionals","243327","","<p><strong>Task</strong>: Print numbers from 1 to 1000 without using any loop or conditional statements. Don't just write the <code>printf()</code> or <code>cout</code> statement 1000 times.</p>

<p>How would you do that using C or C++?</p>
","<p>Compile time recursion! :P</p>

<pre><code>#include &lt;iostream&gt;
template&lt;int N&gt;
struct NumberGeneration{
  static void out(std::ostream&amp; os)
  {
    NumberGeneration&lt;N-1&gt;::out(os);
    os &lt;&lt; N &lt;&lt; std::endl;
  }
};
template&lt;&gt;
struct NumberGeneration&lt;1&gt;{
  static void out(std::ostream&amp; os)
  {
    os &lt;&lt; 1 &lt;&lt; std::endl;
  }
};
int main(){
   NumberGeneration&lt;1000&gt;::out(std::cout);
}
</code></pre>
","4568650"
"Passing by reference in C","243148","","<p>If C does not support passing a variable by reference, why does this work?</p>

<pre><code>#include &lt;stdio.h&gt;

void f(int *j) {
  (*j)++;
}

int main() {
  int i = 20;
  int *p = &amp;i;
  f(p);
  printf(""i = %d\n"", i);

  return 0;
}
</code></pre>

<h3>Output</h3>

<pre>
$ gcc -std=c99 test.c
$ a.exe
i = 21 
</pre>
","<p>Because you're passing <strong>the value</strong> of the pointer to the method and then dereferencing it to get the integer that is pointed to.</p>
","2229521"
"Char array vs char pointer in C","241709","","<p>I am trying to understand pointers in C but I am currently confused with the following:</p>

<ul>
<li><pre><code>char *p = ""hello""
</code></pre>

<p>This is a char pointer pointing at the character array, starting at <em>h</em>.</p></li>
<li><pre><code>char p[] = ""hello""
</code></pre>

<p>This is an array that stores <em>hello</em>.</p></li>
</ul>

<p>What is the difference when I pass both these variables into this function?</p>

<pre><code>void printSomething(char *p)
{
    printf(""p: %s"",p);
}
</code></pre>

<p>I do not understand how they are different.</p>
","<p><code>char*</code> and <code>char[]</code> <em>are different types</em>, but it's not immediately apparent in all cases. This is because arrays <em>decay into pointers</em>, meaning that if an expression of type <code>char[]</code> is provided where one of type <code>char*</code> is expected, the compiler automatically converts the array into a pointer to its first element.</p>

<p>Your example function <code>printSomething</code> expects a pointer, so if you try to pass an array to it like this:</p>

<pre><code>char s[10] = ""hello"";
printSomething(s);
</code></pre>

<p>The compiler pretends that you wrote this:</p>

<pre><code>char s[10] = ""hello"";
printSomething(&amp;s[0]);
</code></pre>
","10186799"
"Best C/C++ Network Library","241582","","<p>I haven't done work in C/C++ for a little bit and was just wondering what people's favorite cross platform libraries are to use.  </p>

<p>I'm looking for something that is a good quick and dirty library as well as a library that is a little more robust.  Often those are two different libraries and that's okay.</p>
","<p>Aggregated List of Libraries</p>

<ul>
<li><a href=""http://www.boost.org/doc/libs/release/doc/html/boost_asio.html"" rel=""noreferrer"">Boost.Asio</a> is really good.</li>
<li><a href=""http://think-async.com/Asio/"" rel=""noreferrer"">Asio</a> is also available as a stand-alone library.</li>
<li><a href=""http://www.cs.wustl.edu/~schmidt/ACE.html"" rel=""noreferrer"">ACE</a> is also good, a bit more mature and has a <a href=""https://rads.stackoverflow.com/amzn/click/0201604647"" rel=""noreferrer"">couple</a> of <a href=""https://rads.stackoverflow.com/amzn/click/0201795256"" rel=""noreferrer"">books</a> to support it.</li>
<li><a href=""http://cpp-netlib.org/index.html"" rel=""noreferrer"">C++ Network Library</a></li>
<li><a href=""http://pocoproject.org/"" rel=""noreferrer"">POCO</a></li>
<li><a href=""http://www.qt.io/developers/"" rel=""noreferrer"">Qt</a></li>
<li><a href=""http://www.jenkinssoftware.com/"" rel=""noreferrer"">Raknet</a></li>
<li><a href=""http://www.zeromq.org/"" rel=""noreferrer"">ZeroMQ</a> (C++)</li>
<li><a href=""http://nanomsg.org/"" rel=""noreferrer"">nanomsg</a> (C Library)</li>
<li><a href=""https://github.com/nanomsg/nng"" rel=""noreferrer"">nng</a> (C Library)</li>
<li>Berkeley Sockets</li>
<li><a href=""http://libevent.org/"" rel=""noreferrer"">libevent</a></li>
<li><a href=""http://apr.apache.org/"" rel=""noreferrer"">Apache APR</a></li>
<li><a href=""https://github.com/glycerine/yield"" rel=""noreferrer"">yield</a></li>
<li>Winsock2(Windows only)</li>
<li><a href=""http://code.google.com/p/wvstreams/"" rel=""noreferrer"">wvstreams</a></li>
<li><a href=""https://zeroc.com/"" rel=""noreferrer"">zeroc</a></li>
<li><a href=""http://curl.haxx.se/libcurl/"" rel=""noreferrer"">libcurl</a></li>
<li><a href=""https://github.com/libuv/libuv"" rel=""noreferrer"">libuv</a> (Cross-platform C library)</li>
<li><a href=""http://www.sfml-dev.org/tutorials/2.3/#network-module"" rel=""noreferrer"">SFML's Network Module</a></li>
<li><a href=""https://github.com/microsoft/cpprestsdk"" rel=""noreferrer"">C++ Rest SDK (Casablanca)</a></li>
<li><a href=""http://www.deltavsoft.com/doc/rcf_user_guide/Intro.html#rcf_user_guide.Intro.WhatIsRcf"" rel=""noreferrer"">RCF</a></li>
<li><a href=""https://github.com/corvusoft/restbed"" rel=""noreferrer"">Restbed (HTTP Asynchronous Framework)</a></li>
<li><a href=""http://github.com/zenol/sednl"" rel=""noreferrer"">SedNL</a></li>
<li><a href=""https://www.libsdl.org/projects/SDL_net/"" rel=""noreferrer"">SDL_net</a></li>
<li><a href=""http://www.prismtech.com/vortex/vortex-opensplice"" rel=""noreferrer"">OpenSplice|DDS</a></li>
<li><a href=""http://facil.io"" rel=""noreferrer"">facil.io</a> (C, with optional HTTP and Websockets, Linux / BSD / macOS)</li>
<li><a href=""https://developer.gnome.org/gio/stable/gio-gnetworking.h.html"" rel=""noreferrer"">GLib Networking</a></li>
<li><a href=""http://www.grpc.io/"" rel=""noreferrer"">grpc</a> from Google</li>
</ul>
","118968"
"How do I trim leading/trailing whitespace in a standard way?","241499","","<p>Is there a clean, preferably standard method of trimming leading and trailing whitespace from a string in C? I'd roll my own, but I would think this is a common problem with an equally common solution.</p>
","<p>If you can modify the string:</p>

<pre><code>// Note: This function returns a pointer to a substring of the original string.
// If the given string was allocated dynamically, the caller must not overwrite
// that pointer with the returned value, since the original pointer must be
// deallocated using the same allocator with which it was allocated.  The return
// value must NOT be deallocated using free() etc.
char *trimwhitespace(char *str)
{
  char *end;

  // Trim leading space
  while(isspace((unsigned char)*str)) str++;

  if(*str == 0)  // All spaces?
    return str;

  // Trim trailing space
  end = str + strlen(str) - 1;
  while(end &gt; str &amp;&amp; isspace((unsigned char)*end)) end--;

  // Write new null terminator
  *(end+1) = 0;

  return str;
}
</code></pre>

<p>If you can't modify the string, then you can use basically the same method:</p>

<pre><code>// Stores the trimmed input string into the given output buffer, which must be
// large enough to store the result.  If it is too small, the output is
// truncated.
size_t trimwhitespace(char *out, size_t len, const char *str)
{
  if(len == 0)
    return 0;

  const char *end;
  size_t out_size;

  // Trim leading space
  while(isspace((unsigned char)*str)) str++;

  if(*str == 0)  // All spaces?
  {
    *out = 0;
    return 1;
  }

  // Trim trailing space
  end = str + strlen(str) - 1;
  while(end &gt; str &amp;&amp; isspace((unsigned char)*end)) end--;
  end++;

  // Set output size to minimum of trimmed string length and buffer size minus 1
  out_size = (end - str) &lt; len-1 ? (end - str) : len-1;

  // Copy trimmed string and add null terminator
  memcpy(out, str, out_size);
  out[out_size] = 0;

  return out_size;
}
</code></pre>
","122721"
"Why does printf not flush after the call unless a newline is in the format string?","240882","","<p>Why does <code>printf</code> not flush after the call unless a newline is in the format string? Is this POSIX behavior? How might I have <code>printf</code> immediately flush every time?</p>
","<p>The <code>stdout</code> stream is buffered, so will only display what's in the buffer after it reaches a newline (or when it's told to). You have a few options to print immediately:</p>

<p>Print to stderr instead using <code>fprintf</code>:</p>

<pre><code>fprintf(stderr, ""I will be printed immediately"");
</code></pre>

<p>Flush stdout whenever you need it to using <code>fflush</code>:</p>

<pre><code>printf(""Buffered, will be flushed"");
fflush(stdout); // Will now print everything in the stdout buffer
</code></pre>

<p><strong>Edit</strong>: From Andy Ross's comment below, you can also disable buffering on stdout by using <code>setbuf</code>:</p>

<pre><code>setbuf(stdout, NULL);
</code></pre>
","1716621"
"Printing leading 0's in C?","240461","","<p>I'm trying to find a good way to print leading 0's, such as 01001 for a zipcode.  While the number would be stored as 1001, what is a good way to do it?</p>

<p>I thought of using either case statements/if then to figure out how many digits the number is and then convert it to an char array with extra 0's for printing but I can't help but think there may be a way to do this with the printf format syntax that is eluding me.  </p>
","<pre><code>printf(""%05d"", zipCode);
</code></pre>

<p></p>
","153895"
"What is the difference between a definition and a declaration?","239982","","<p>The meaning of both eludes me.</p>
","<p>A <strong><em>declaration</em></strong> introduces an identifier and describes its type, be it a type, object, or function. A declaration is <strong><em>what the compiler needs</em></strong> to accept references to that identifier. These are declarations: </p>

<pre><code>extern int bar;
extern int g(int, int);
double f(int, double); // extern can be omitted for function declarations
class foo; // no extern allowed for type declarations
</code></pre>

<p>A <strong><em>definition</em></strong> actually instantiates/implements this identifier. It's <strong><em>what the linker needs</em></strong> in order to link references to those entities. These are definitions corresponding to the above declarations: </p>

<pre><code>int bar;
int g(int lhs, int rhs) {return lhs*rhs;}
double f(int i, double d) {return i+d;}
class foo {};
</code></pre>

<p>A definition can be used in the place of a declaration. </p>

<p>An identifier can be <em>declared</em> as often as you want. Thus, the following is legal in C and C++: </p>

<pre><code>double f(int, double);
double f(int, double);
extern double f(int, double); // the same as the two above
extern double f(int, double);
</code></pre>

<p>However, it must be <em>defined</em> exactly once. If you forget to define something that's been declared and referenced somewhere, then the linker doesn't know what to link references to and complains about a missing symbols. If you define something more than once, then the linker doesn't know <em>which</em> of the definitions to link references to and complains about duplicated symbols. </p>

<hr>

<p>Since the debate what is a class <em>declaration</em> vs. a class <em>definition</em> in C++ keeps coming up (in answers and comments to other questions) , I'll paste a quote from the C++ standard here.<br>
At 3.1/2, C++03 says:</p>

<blockquote>
  <p>A declaration is a definition unless it [...] is a class name declaration [...].</p>
</blockquote>

<p>3.1/3 then gives a few examples. Amongst them:</p>

<pre>
[Example: [...]
struct S { int a; int b; }; // defines S, S::a, and S::b [...]
struct S; // declares S
—end example
</pre>

<p>To sum it up: The C++ standard considers <code>struct x;</code> to be a <em>declaration</em> and <code>struct x {};</code> a <em>definition</em>. (In other words, <strong><em>""forward declaration"" a misnomer</em></strong>, since there are no other forms of class declarations in C++.) </p>

<p>Thanks to <a href=""https://stackoverflow.com/users/34509/johannes-schaub-litb"">litb (Johannes Schaub)</a> who dug out the actual chapter and verse in one of his answers. </p>
","1410632"
"What does the question mark and the colon (?: ternary operator) mean in objective-c?","237788","","<p>What does this line of code mean?</p>

<pre><code>label.frame = (inPseudoEditMode) ? kLabelIndentedRect : kLabelRect;
</code></pre>

<p>The <code>?</code> and <code>:</code> confuse me.</p>
","<p>This is the C <a href=""http://en.wikipedia.org/wiki/Ternary_operation"" rel=""noreferrer"">ternary operator</a> (Objective-C is a superset of C):</p>

<pre><code>label.frame = (inPseudoEditMode) ? kLabelIndentedRect : kLabelRect;
</code></pre>

<p>is semantically equivalent to</p>

<pre><code>if(inPseudoEditMode) {
 label.frame = kLabelIndentedRect;
} else {
 label.frame = kLabelRect;
}
</code></pre>

<p>The ternary with no first element (e.g. <code>variable ?: anotherVariable</code>) means the same as <code>(valOrVar != 0) ? valOrVar : anotherValOrVar</code></p>
","2595403"
"How do you allow spaces to be entered using scanf?","236696","","<p>Using the following code:</p>

<pre><code>char *name = malloc(sizeof(char) + 256); 

printf(""What is your name? "");
scanf(""%s"", name);

printf(""Hello %s. Nice to meet you.\n"", name);
</code></pre>

<p>A user can enter their name but when they enter a name with a space like <code>Lucas Aardvark</code>, <code>scanf()</code> just cuts off everything after <code>Lucas</code>. How do I make <code>scanf()</code> allow spaces</p>
","<p>People (and <em>especially</em> beginners) should never use <code>scanf(""%s"")</code> or <code>gets()</code> or any other functions that do not have buffer overflow protection, unless you know for certain that the input will always be of a specific format (and perhaps not even then).</p>

<p>Remember than <code>scanf</code> stands for ""scan formatted"" and there's precious little <em>less</em> formatted than user-entered data. It's ideal if you have total control of the input data format but generally unsuitable for user input.</p>

<p>Use <code>fgets()</code> (which <em>has</em> buffer overflow protection) to get your input into a string and <code>sscanf()</code> to evaluate it. Since you just want what the user entered without parsing, you don't really need <code>sscanf()</code> in this case anyway:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

/* Maximum name size + 1. */

#define MAX_NAME_SZ 256

int main(int argC, char *argV[]) {
    /* Allocate memory and check if okay. */

    char *name = malloc(MAX_NAME_SZ);
    if (name == NULL) {
        printf(""No memory\n"");
        return 1;
    }

    /* Ask user for name. */

    printf(""What is your name? "");

    /* Get the name, with size limit. */

    fgets(name, MAX_NAME_SZ, stdin);

    /* Remove trailing newline, if there. */

    if ((strlen(name) &gt; 0) &amp;&amp; (name[strlen (name) - 1] == '\n'))
        name[strlen (name) - 1] = '\0';

    /* Say hello. */

    printf(""Hello %s. Nice to meet you.\n"", name);

    /* Free memory and exit. */

    free (name);
    return 0;
}
</code></pre>
","1248017"
"How do you clear the console screen in C?","236486","","<p>Is there a ""proper"" way to clear the console window in C, besides using <code>system(""cls"")</code>?</p>
","<p>Well, C doesn't understand the concept of screen. So any code would fail to be portable. Maybe take a look at <a href=""http://wikipedia.org/wiki/Conio.h"" rel=""noreferrer"">conio.h</a> or
<a href=""http://wikipedia.org/wiki/Curses_(programming_library)"" rel=""noreferrer"">curses</a>, according to your needs?</p>

<p>Portability is an issue, no matter what library is used.</p>
","2347811"
"How do I fix ""for loop initial declaration used outside C99 mode"" GCC error?","232159","","<p>I'm trying to solve <a href=""http://uva.onlinejudge.org/external/1/100.pdf"" rel=""noreferrer"">the 3n+1 problem</a> and I have a <code>for</code> loop that looks like this: </p>

<pre><code>for(int i = low; i &lt;= high; ++i)
        {
                res = runalg(i);
                if (res &gt; highestres)
                {
                        highestres = res;
                }

        }
</code></pre>

<p>Unfortunately I'm getting this error when I try to compile with GCC:</p>

<blockquote>
  <p>3np1.c:15: error: 'for' loop initial
  declaration used outside C99 mode</p>
</blockquote>

<p>I don't know what C99 mode is. Any ideas?</p>
","<p>I'd try to declare <code>i</code> outside of the loop!</p>

<p>Good luck on solving 3n+1 :-)</p>

<p>Here's an example: </p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;

int main() {

   int i;

   /* for loop execution */
   for (i = 10; i &lt; 20; i++) {
       printf(""i: %d\n"", i);
   }   

   return 0;
}
</code></pre>

<p>Read more on for loops in C <a href=""https://www.tutorialspoint.com/cprogramming/c_for_loop.htm"" rel=""noreferrer"">here</a>.</p>
","24882"
"Stack smashing detected","231871","","<p>I am executing my a.out file. After execution the program runs for some time then exits with the message:</p>

<pre><code>**** stack smashing detected ***: ./a.out terminated*
*======= Backtrace: =========*
*/lib/tls/i686/cmov/libc.so.6(__fortify_fail+0x48)Aborted*
</code></pre>

<p>What could be the possible reasons for this and how do I rectify it?</p>
","<p>Stack Smashing here is actually caused due to a protection mechanism used by gcc to detect buffer overflow errors. For example in the following snippet:</p>

<pre><code>#include &lt;stdio.h&gt;

void func()
{
    char array[10];
    gets(array);
}

int main(int argc, char **argv)
{
    func();
}
</code></pre>

<p>The compiler, (in this case gcc) adds protection variables (called canaries) which have known values. An input string of size greater than 10 causes corruption of this variable resulting in SIGABRT to terminate the program.</p>

<p>To get some insight, you can try disabling this protection of gcc using option  <code> -fno-stack-protector </code> while compiling. In that case you will get a different error, most likely a segmentation fault as you are trying to access an illegal memory location.  Note that <code>-fstack-protector</code> should always be turned on for release builds as it is a security feature.</p>

<p>You can get some information about the point of overflow by running the program with a debugger. Valgrind doesn't work well with stack-related errors, but like a debugger, it may help you pin-point the location and reason for the crash.</p>
","1347464"
"How to clear input buffer in C?","230551","","<p>I have the following program:</p>

<pre><code>int main(int argc, char *argv[])
{
  char ch1, ch2;
  printf(""Input the first character:""); // Line 1
  scanf(""%c"", &amp;ch1); 
  printf(""Input the second character:""); // Line 2
  ch2 = getchar();

  printf(""ch1=%c, ASCII code = %d\n"", ch1, ch1);
  printf(""ch2=%c, ASCII code = %d\n"", ch2, ch2);

  system(""PAUSE"");  
  return 0;
}
</code></pre>

<p>As the author of the above code have explained:
The program will not work properly because at Line 1, when the user presses Enter, it will leave in the input buffer 2 character: <code>Enter key (ASCII code 13)</code> and <code>\n (ASCII code 10)</code>. Therefore, at Line 2, it will read the <code>\n</code> and will not wait for the user to enter a character.</p>

<p>OK, I got this. But my first question is: Why the second <code>getchar()</code> (<code>ch2 = getchar();</code>) does not read the <code>Enter key (13)</code>, rather than <code>\n</code> character?</p>

<p>Next, the author proposed 2 ways to solve such probrems:</p>

<ol>
<li><p>use <code>fflush()</code></p></li>
<li><p>write a function like this:</p>

<pre><code>void
clear (void)
{    
  while ( getchar() != '\n' );
}
</code></pre></li>
</ol>

<p>This code worked actually. But I cannot explain myself how it works? Because in the while statement, we use <code>getchar() != '\n'</code>, that means read any single character except <code>'\n'</code>? if so, in the input buffer still remains the <code>'\n'</code> character?</p>
","<blockquote>
  <p>The program will not work properly because at Line 1, when the user presses Enter, it will leave in the input buffer 2 character: Enter key (ASCII code 13) and \n (ASCII code 10).  Therefore, at Line 2, it will read the \n and will not wait for the user to enter a character.</p>
</blockquote>

<p>The behavior you see at line 2 is correct, but that's not quite the correct explanation.  With text-mode streams, it doesn't matter what line-endings your platform uses (whether carriage return (0x0D) + linefeed (0x0A), a bare CR, or a bare LF).  The C runtime library will take care of that for you: your program will see just <code>'\n'</code> for newlines.</p>

<p>If you typed a character and pressed enter, then that input character would be read by line 1, and then <code>'\n'</code> would be read by line 2.  See <a href=""http://c-faq.com/stdio/scanfc.html"" rel=""noreferrer"">I'm using <code>scanf %c</code> to read a Y/N response, but later input gets skipped.</a> from the comp.lang.c FAQ.</p>

<p>As for the proposed solutions, see (again from the comp.lang.c FAQ):</p>

<ul>
<li><a href=""http://c-faq.com/stdio/stdinflush.html"" rel=""noreferrer"">How can I flush pending input so that a user's typeahead isn't read at the next prompt? Will <code>fflush(stdin)</code> work? </a></li>
<li><a href=""http://c-faq.com/stdio/stdinflush2.html"" rel=""noreferrer"">If <code>fflush</code> won't work, what can I use to flush input?</a></li>
</ul>

<p>which basically state that the only portable approach is to do:</p>

<pre><code>while ((c = getchar()) != '\n' &amp;&amp; c != EOF) { }
</code></pre>

<p>Your <code>getchar() != '\n'</code> loop works because once you call <code>getchar()</code>, the returned character already has been removed from the input stream.</p>

<p>Also, I feel obligated to discourage you from using <code>scanf</code> entirely: <a href=""http://c-faq.com/stdio/scanfprobs.html"" rel=""noreferrer"">Why does everyone say not to use <code>scanf</code>? What should I use instead?</a> </p>
","7898516"
"What are .a and .so files?","230043","","<p>I'm currently trying to port a C application to <a href=""https://en.wikipedia.org/wiki/IBM_AIX"" rel=""noreferrer"">AIX</a> and am getting confused. What are .a and .so files and how are they used when building/running an application?</p>
","<p>Archive libraries (.a) are statically linked i.e when you compile your program with -c option in gcc. So, if there's any change in library, you need to compile and build your code again. </p>

<p>The advantage of .so (shared object) over .a library is that they are linked during the runtime i.e. after creation of your .o file -o option in gcc. So, if there's any change in .so file, you don't need to recompile your main program. 
But make sure that your main program is linked to the new .so file with ln command.</p>

<p>This will help you to build the .so files.
<a href=""http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html"" rel=""noreferrer"">http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html</a></p>

<p>Hope this helps.</p>
","9810368"
"How does strtok() split the string into tokens in C?","229088","","<p>Please explain me the working of <code>strtok()</code> function.The manual says it breaks the string into tokens. I am unable to understand from the manual what actually it does.</p>

<p>I added watches on <code>str</code> and <code>*pch</code> to check its working, when the first while loop occurred, the contents of <code>str</code> were only ""this"". How did the output shown below printed on the screen?</p>

<pre><code>/* strtok example */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main ()
{
  char str[] =""- This, a sample string."";
  char * pch;
  printf (""Splitting string \""%s\"" into tokens:\n"",str);
  pch = strtok (str,"" ,.-"");
  while (pch != NULL)
  {
    printf (""%s\n"",pch);
    pch = strtok (NULL, "" ,.-"");
  }
  return 0;
}
</code></pre>

<p><strong>Output:</strong></p>

<pre>
Splitting string ""- This, a sample string."" into tokens:
This
a
sample
string
</pre>
","<p>strtok() divides the string into tokens. i.e. starting from any one of the delimiter to next one would be your one token. In your case, the starting token will be from ""-"" and end with next space "" "". Then next token will start from "" "" and end with "","". Here you get ""This"" as output. Similarly the rest of the string gets split into tokens from space to space and finally ending the last token on "".""</p>
","3890056"
"How to send a simple string between two programs using pipes?","228985","","<p>I tried searching on the net, but there are hardly any resources. A small example would suffice.</p>

<p>EDIT
I mean, two different C programs communicating with each other. One program should send ""Hi"" and the other should receive it. Something like that. </p>
","<p>A regular pipe can only connect two related processes.  It is created by a process and will vanish when the last process closes it.</p>

<p>A <a href=""http://en.wikipedia.org/wiki/Named_pipe"" rel=""noreferrer""><strong>named pipe</strong></a>, also called a FIFO for its behavior, can be used to connect two unrelated processes and exists independently of the processes; meaning it can exist even if no one is using it.  A FIFO is created using the <a href=""http://www.opengroup.org/onlinepubs/009695399/functions/mkfifo.html"" rel=""noreferrer""><code>mkfifo()</code></a> library function.</p>

<h2>Example</h2>

<p><strong>writer.c</strong></p>

<pre><code>#include &lt;fcntl.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;

int main()
{
    int fd;
    char * myfifo = ""/tmp/myfifo"";

    /* create the FIFO (named pipe) */
    mkfifo(myfifo, 0666);

    /* write ""Hi"" to the FIFO */
    fd = open(myfifo, O_WRONLY);
    write(fd, ""Hi"", sizeof(""Hi""));
    close(fd);

    /* remove the FIFO */
    unlink(myfifo);

    return 0;
}
</code></pre>

<p><strong>reader.c</strong></p>

<pre><code>#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;

#define MAX_BUF 1024

int main()
{
    int fd;
    char * myfifo = ""/tmp/myfifo"";
    char buf[MAX_BUF];

    /* open, read, and display the message from the FIFO */
    fd = open(myfifo, O_RDONLY);
    read(fd, buf, MAX_BUF);
    printf(""Received: %s\n"", buf);
    close(fd);

    return 0;
}
</code></pre>

<p><sub>Note: Error checking was omitted from the above code for simplicity.</sub></p>
","2789967"
"uint8_t vs unsigned char","226409","","<p>What is the advantage of using <code>uint8_t</code> over <code>unsigned char</code> in C?</p>

<p>I know that on almost every system <code>uint8_t</code> is just a typedef for <code>unsigned char</code>,
so why use it?</p>
","<p>It documents your intent - you will be storing small numbers, rather than a character.</p>

<p>Also it looks nicer if you're using other typedefs such as <code>uint16_t</code> or <code>int32_t</code>.</p>
","1725867"
"What is the behavior of integer division?","223246","","<p>For example,</p>

<pre><code>int result;

result = 125/100;
</code></pre>

<p>or </p>

<pre><code>result = 43/100;
</code></pre>

<p>Will result always be the floor of the division? What is the defined behavior?</p>
","<blockquote>
  <p>Will result always be the floor of the division? What is the defined bahavior? </p>
</blockquote>

<p>Yes, integer quotient of the two operands.</p>

<blockquote>
  <p><strong>6.5.5 Multiplicative operators</strong></p>
  
  <p><strong>6</strong> When integers are divided, the result of the / operator is the algebraic quotient with any
  fractional part discarded.<sup>88)</sup> If the quotient a/b is representable, the expression
  (a/b)*b + a%b shall equal a.</p>
</blockquote>

<p>and the corresponding footnote:</p>

<blockquote>
  <p>88) This is often called ‘‘truncation toward zero’’.</p>
</blockquote>

<p>Of course two points to note are:</p>

<blockquote>
  <p><strong>3</strong> The usual arithmetic conversions are performed on the operands.</p>
</blockquote>

<p>and:</p>

<blockquote>
  <p><strong>5</strong> The result of the / operator is the
  quotient from the division of the
  first operand by the second; the
  result of the % operator is the
  remainder. <em>In both operations, if the
  value of the second operand is zero,
  the behavior is undefined.</em></p>
</blockquote>

<p>[Note: Emphasis mine]</p>
","3602857"
"Convert a character digit to the corresponding integer in C","223056","","<p>Is there a way to convert a character to an integer in C? </p>

<p>For example, from <code>'5'</code> to 5?</p>
","<p>As per other replies, this is fine:</p>

<pre><code>char c = '5';
int x = c - '0';
</code></pre>

<p>Also, for error checking, you may wish to check isdigit(c) is true first. Note that you cannot completely portably do the same for letters, for example:</p>

<pre><code>char c = 'b';
int x = c - 'a'; // x is now not necessarily 1
</code></pre>

<p>The standard guarantees that the char values for the digits '0' to '9' are contiguous, but makes no guarantees for other characters like letters of the alphabet.</p>
","628778"
"How to know what the 'errno' means?","221867","","<p>When calling <code>execl(...)</code>, I get an <code>errno=2</code>. What does it mean? How can I know the meaning of this <code>errno</code>?</p>
","<p>You can use <a href=""http://en.cppreference.com/w/c/string/byte/strerror"" rel=""noreferrer""><code>strerror()</code></a> to get a human-readable string for the error number. This is the same string printed by <a href=""http://en.cppreference.com/w/c/io/perror"" rel=""noreferrer""><code>perror()</code></a> but it's useful if you're formatting the error message for something other than standard error output.</p>

<p>For example:</p>

<pre><code>#include &lt;errno.h&gt;
#include &lt;string.h&gt;

/* ... */

if(read(fd, buf, 1)==-1) {
    printf(""Oh dear, something went wrong with read()! %s\n"", strerror(errno));
}
</code></pre>

<p>Linux also supports the explicitly-threadsafe variant <code>strerror_r()</code>.</p>
","504039"
"Is bool a native C type?","220323","","<p>I've noticed that the Linux kernel code uses bool, but I thought that bool was a C++ type. Is bool a standard C extension (e.g., ISO C90) or a GCC extension?</p>
","<p><code>bool</code> exists in the current C - C99, but not in C89/90.</p>

<p>In C99 the native type is actually called <code>_Bool</code>, while <code>bool</code> is a standard library macro defined in <code>stdbool.h</code> (which expectedly resolves to <code>_Bool</code>). Objects of type <code>_Bool</code> hold either 0 or 1, while <code>true</code> and <code>false</code> are also macros from <code>stdbool.h</code>.</p>
","1608350"
"What is a ""callback"" in C and how are they implemented?","219964","","<p>From the reading that I have done, Core Audio relies heavily on callbacks (and C++, but that's another story).  </p>

<p>I understand the concept (sort of) of setting up a function that is called by another function repeatedly to accomplish a task.  I just don't understand how they get set up and how they actually work.  Any examples would be appreciated.</p>
","<p>There is no ""callback"" in C - not more than any other generic programming concept.</p>

<p>They're implemented using function pointers. Here's an example:</p>

<pre><code>void populate_array(int *array, size_t arraySize, int (*getNextValue)(void))
{
    for (size_t i=0; i&lt;arraySize; i++)
        array[i] = getNextValue();
}

int getNextRandomValue(void)
{
    return rand();
}

int main(void)
{
    int myarray[10];
    populate_array(myarray, 10, getNextRandomValue);
    ...
}
</code></pre>

<p>Here, the <code>populate_array</code> function takes a function pointer as its third parameter, and calls it to get the values to populate the array with. We've written the callback <code>getNextRandomValue</code>, which returns a random-ish value, and passed a pointer to it to <code>populate_array</code>. <code>populate_array</code> will call our callback function 10 times and assign the returned values to the elements in the given array.</p>
","142809"
"How to empty a char array?","219651","","<p>Have an array of chars like char members[255]. How can I empty it completely without using a loop?</p>

<pre><code>char members[255];
</code></pre>

<p>By ""empty"" I mean that if it had some values stored in it then it should not. For example if I do strcat then old value should not remain</p>

<pre><code>members = ""old value"";

//empty it efficiently
strcat(members,""new""); // should return only new and not ""old value new""
</code></pre>
","<p>using</p>

<pre><code>  memset(members, 0, 255);
</code></pre>

<p>in general</p>

<pre><code>  memset(members, 0, sizeof members);
</code></pre>

<p>if the array is in scope, or </p>

<pre><code>  memset(members, 0, nMembers * (sizeof members[0]) );
</code></pre>

<p>if you only have the pointer value, and nMembers is the number of elements in the array.</p>

<hr>

<p>EDIT Of course, now the requirement has changed from the generic task of clearing an array to purely resetting a string, <code>memset</code> is overkill and just zeroing the first element suffices (as noted in other answers).</p>

<hr>

<p>EDIT In order to use <em>memset</em>, you have to <strong>include string.h</strong>.</p>
","1559506"
"Regular expressions in C: examples?","215201","","<p>I'm after some simple examples and best practices of how to use regular expressions in ANSI C. <code>man regex.h</code> does not provide that much help.</p>
","<p>Regular expressions actually aren't part of ANSI C. It sounds like you might be talking about the POSIX regular expression library, which comes with most (all?) *nixes. Here's an example of using POSIX regexes in C (based on <a href=""http://web.archive.org/web/20160308115653/http://peope.net/old/regex.html"" rel=""noreferrer"">this</a>):</p>

<pre><code>#include &lt;regex.h&gt;        
regex_t regex;
int reti;
char msgbuf[100];

/* Compile regular expression */
reti = regcomp(&amp;regex, ""^a[[:alnum:]]"", 0);
if (reti) {
    fprintf(stderr, ""Could not compile regex\n"");
    exit(1);
}

/* Execute regular expression */
reti = regexec(&amp;regex, ""abc"", 0, NULL, 0);
if (!reti) {
    puts(""Match"");
}
else if (reti == REG_NOMATCH) {
    puts(""No match"");
}
else {
    regerror(reti, &amp;regex, msgbuf, sizeof(msgbuf));
    fprintf(stderr, ""Regex match failed: %s\n"", msgbuf);
    exit(1);
}

/* Free memory allocated to the pattern buffer by regcomp() */
regfree(&amp;regex);
</code></pre>

<p>Alternatively, you may want to check out <a href=""http://www.pcre.org/"" rel=""noreferrer"">PCRE</a>, a library for Perl-compatible regular expressions in C. The Perl syntax is pretty much that same syntax used in Java, Python, and a number of other languages. The POSIX syntax is the syntax used by <code>grep</code>, <code>sed</code>, <code>vi</code>, etc.</p>
","1085120"
"Can you write object-oriented code in C?","214594","","<p>Can you write object-oriented code in C? Especially with regard to polymorphism.</p>

<hr/>

<p>See also Stack Overflow question <em><a href=""https://stackoverflow.com/questions/415452/object-orientation-in-c"">Object-orientation in C</a></em>.</p>
","<p>Yes. In fact Axel Schreiner provides <a href=""http://www.cs.rit.edu/~ats/books/ooc.pdf"" rel=""noreferrer"">his book</a> ""Object-oriented Programming in ANSI-C"" for free which covers the subject quite thoroughly. </p>
","351756"
"What is ultimately a time_t typedef to?","213993","","<p>I searched in linux box and saw it being typedef to </p>

<pre><code>typedef __time_t time_t;
</code></pre>

<p>But could not find the __time_t  definition.</p>
","<p>The <a href=""http://en.wikipedia.org/w/index.php?title=Time_t&amp;oldid=450752800"" rel=""noreferrer"">time_t Wikipedia article</a> article sheds some light on this. The bottom line is that the type of <code>time_t</code> is not guaranteed in the C specification.</p>

<blockquote>
  <p>The <code>time_t</code> datatype is a data type in
  the ISO C library defined for storing
  system time values. Such values are
  returned from the standard <code>time()</code>
  library function. This type is a
  typedef defined in the standard
   header. <strong>ISO C defines
  time_t as an arithmetic type, but does
  not specify any particular type</strong>,
  range, resolution, or encoding for it.
  Also unspecified are the meanings of
  arithmetic operations applied to time
  values.</p>
  
  <p><strong>Unix and POSIX-compliant systems implement the <code>time_t</code> type as a <code>signed
  integer</code> (typically 32 or 64 bits wide)
  which represents the number of seconds
  since the start of the Unix epoch</strong>:
  midnight UTC of January 1, 1970 (not
  counting leap seconds). Some systems
  correctly handle negative time values,
  while others do not. Systems using a
  32-bit <code>time_t</code> type are susceptible to
  the <a href=""http://en.wikipedia.org/wiki/Year_2038_problem"" rel=""noreferrer"">Year 2038 problem</a>.</p>
</blockquote>
","471287"
"How do you get assembler output from C/C++ source in gcc?","212566","","<p>How does one do this?</p>

<p>If I want to analyze how something is getting compiled, how would I get the emitted assembly code?</p>
","<p>Use the <code>-S</code> option to gcc (or g++).</p>

<pre><code>gcc -S helloworld.c
</code></pre>

<p>This will run the preprocessor (cpp) over helloworld.c, perform the initial compilation and then stop before the assembler is run.</p>

<p>By default this will output a file <code>helloworld.s</code>. The output file can be still be set by using the <code>-o</code> option.</p>

<pre><code>gcc -S -o my_asm_output.s helloworld.c
</code></pre>

<p>Of course this only works if you have the original source.
An alternative if you only have the resultant object file is to use <code>objdump</code>, by setting the <code>--disassemble</code> option (or <code>-d</code> for the abbreviated form).</p>

<pre><code>objdump -S --disassemble helloworld &gt; helloworld.dump
</code></pre>

<p>This option works best if debugging option is enabled for the object file (<code>-g</code> at compilation time) and the file hasn't been stripped.</p>

<p>Running <code>file helloworld</code> will give you some indication as to the level of detail that you will get by using objdump.</p>
","137074"
"Difference between char* and const char*?","212386","","<p>What's the difference between </p>

<pre><code>char* name
</code></pre>

<p>which points to a constant string literal, and </p>

<pre><code>const char* name
</code></pre>
","<ul>
<li><p><code>const char*</code><br>is a <strong>mutable</strong> pointer to an <strong>immutable</strong> character/string. You cannot change the contents of the location(s) this pointer points to. Also, compilers are required to give error messages when you try to do so. For the same reason, conversion from <code>const char *</code> to <code>char*</code> is deprecated.</p></li>
<li><p><code>char* const</code><br>is an <strong>immutable</strong> pointer (it cannot point to any other location) <strong>but</strong> the contents of location at which it points are <strong>mutable</strong>.</p></li>
<li><p><code>const char* const</code><br>is an <strong>immutable</strong> pointer to an <strong>immutable</strong> character/string.</p></li>
<li><p><code>char*</code><br>is entirely permissive.</p></li>
</ul>
","9834194"
"segmentation fault : 11","212066","","<p>I'm having a problem with some program, I have searched about segmentation faults, by I don't understand them quite well, the only thing I know is that presumably I am trying to access some memory I shouldn't. The problem is that I see my code and don't understand what I am doing wrong. </p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;math.h&gt;
#include&lt;stdlib.h&gt;

#define   lambda   2.0
#define   g        1.0
#define   Lx       100
#define   F0       1.0
#define   Tf       10
#define   h       0.1
#define   e       0.00001

FILE   *file;

double F[1000][1000000];

void Inicio(double D[1000][1000000]) {
int i;
for (i=399; i&lt;600; i++) {
    D[i][0]=F0;
}
}

void Iteration (double A[1000][1000000]) {
long int i,k;
for (i=1; i&lt;1000000; i++) {
    A[0][i]= A[0][i-1] + e/(h*h*h*h)*g*g*(A[2][i-1] - 4.0*A[1][i-1] + 6.0*A[0][i-1]-4.0*A[998][i-1] + A[997][i-1]) + 2.0*g*e/(h*h)*(A[1][i-1] - 2*A[0][i-1] + A[998][i-1]) + e*A[0][i-1]*(lambda-A[0][i-1]*A[0][i-1]);
    A[1][i]= A[1][i-1] + e/(h*h*h*h)*g*g*(A[3][i-1] - 4.0*A[2][i-1] + 6.0*A[1][i-1]-4.0*A[0][i-1] + A[998][i-1]) + 2.0*g*e/(h*h)*(A[2][i-1] - 2*A[1][i-1] + A[0][i-1]) + e*A[1][i-1]*(lambda-A[1][i-1]*A[1][i-1]);
    for (k=2; k&lt;997; k++) {
        A[k][i]= A[k][i-1] + e/(h*h*h*h)*g*g*(A[k+2][i-1] - 4.0*A[k+1][i-1] + 6.0*A[k][i-1]-4.0*A[k-1][i-1] + A[k-2][i-1]) + 2.0*g*e/(h*h)*(A[k+1][i-1] - 2*A[k][i-1] + A[k-1][i-1]) + e*A[k][i-1]*(lambda-A[k][i-1]*A[k][i-1]);
    }
    A[997][i] = A[997][i-1] + e/(h*h*h*h)*g*g*(A[0][i-1] - 4*A[998][i-1] + 6*A[997][i-1] - 4*A[996][i-1] + A[995][i-1]) + 2.0*g*e/(h*h)*(A[998][i-1] - 2*A[997][i-1] + A[996][i-1]) + e*A[997][i-1]*(lambda-A[997][i-1]*A[997][i-1]);
    A[998][i] = A[998][i-1] + e/(h*h*h*h)*g*g*(A[1][i-1] - 4*A[0][i-1] + 6*A[998][i-1] - 4*A[997][i-1] + A[996][i-1]) + 2.0*g*e/(h*h)*(A[0][i-1] - 2*A[998][i-1] + A[997][i-1]) + e*A[998][i-1]*(lambda-A[998][i-1]*A[998][i-1]);
    A[999][i]=A[0][i];
}
}

main() {
long int i,j;
Inicio(F);
Iteration(F);
file = fopen(""P1.txt"",""wt"");
for (i=0; i&lt;1000000; i++) {
    for (j=0; j&lt;1000; j++) {
        fprintf(file,""%lf \t %.4f \t %lf\n"", 1.0*j/10.0, 1.0*i, F[j][i]);
    }
}
fclose(file);
}
</code></pre>

<p>Thanks for your time. </p>
","<p>This declaration:</p>

<pre><code>double F[1000][1000000];
</code></pre>

<p>would occupy 8 * 1000 * 1000000 bytes on a typical x86 system. This is about 7.45 GB. Chances are your system is running out of memory when trying to execute your code, which results in a segmentation fault.</p>
","12762993"
"What is a bus error?","211852","","<p>What does the ""bus error"" message mean, and how does it differ from a segfault?</p>
","<p>Bus errors are rare nowadays on x86 and occur when your processor cannot even attempt the memory access requested, typically:</p>

<ul>
<li>using a processor instruction with an address that does not satisfy its alignment requirements.</li>
</ul>

<p>Segmentation faults occur when accessing memory which does not belong to your process, they are very common and are typically the result of:</p>

<ul>
<li>using a pointer to something that was deallocated.</li>
<li>using an uninitialized hence bogus pointer.</li>
<li>using a null pointer.</li>
<li>overflowing a buffer.</li>
</ul>

<p>PS: To be more precise this is not manipulating the pointer itself that will cause issues, it's accessing the memory it points to (dereferencing).</p>
","212585"
"What is the LD_PRELOAD trick?","210172","","<p>I came across a reference to it recently on <a href=""http://www.reddit.com/r/programming/comments/7o8d9/tcmalloca_faster_malloc_than_glibcs_open_sourced/c06wjka"" rel=""noreferrer"">proggit</a> and (as of now) it is not explained.</p>

<p>I suspect <a href=""https://stackoverflow.com/questions/335108/hide-symbols-in-shared-object-from-ld#335253"">this</a> might be it, but I don't know for sure.</p>
","<p>If you set <code>LD_PRELOAD</code> to the path of a shared object, that file will be loaded <strong>before</strong> any other library (including the C runtime, <code>libc.so</code>). So to run <code>ls</code> with your special <code>malloc()</code> implementation, do this:</p>

<pre><code>$ LD_PRELOAD=/path/to/my/malloc.so /bin/ls
</code></pre>
","426260"
"Why are elementwise additions much faster in separate loops than in a combined loop?","209326","","<p>Suppose <code>a1</code>, <code>b1</code>, <code>c1</code>, and <code>d1</code> point to heap memory and my numerical code has the following core loop.</p>

<pre><code>const int n = 100000;

for (int j = 0; j &lt; n; j++) {
    a1[j] += b1[j];
    c1[j] += d1[j];
}
</code></pre>

<p>This loop is executed 10,000 times via another outer <code>for</code> loop. To speed it up, I changed the code to:</p>

<pre><code>for (int j = 0; j &lt; n; j++) {
    a1[j] += b1[j];
}

for (int j = 0; j &lt; n; j++) {
    c1[j] += d1[j];
}
</code></pre>

<p>Compiled on MS <a href=""http://en.wikipedia.org/wiki/Visual_C++#32-bit_versions"" rel=""noreferrer"">Visual C++ 10.0</a> with full optimization and <a href=""http://en.wikipedia.org/wiki/SSE2"" rel=""noreferrer"">SSE2</a> enabled for 32-bit on a <a href=""http://en.wikipedia.org/wiki/Intel_Core_2"" rel=""noreferrer"">Intel Core 2</a> Duo (x64), the first example takes 5.5&nbsp;seconds and the double-loop example takes only 1.9&nbsp;seconds. My question is: (Please refer to the my rephrased question at the bottom)</p>

<p>PS: I am not sure, if this helps:</p>

<p>Disassembly for the first loop basically looks like this (this block is repeated about five times in the full program):</p>

<pre><code>movsd       xmm0,mmword ptr [edx+18h]
addsd       xmm0,mmword ptr [ecx+20h]
movsd       mmword ptr [ecx+20h],xmm0
movsd       xmm0,mmword ptr [esi+10h]
addsd       xmm0,mmword ptr [eax+30h]
movsd       mmword ptr [eax+30h],xmm0
movsd       xmm0,mmword ptr [edx+20h]
addsd       xmm0,mmword ptr [ecx+28h]
movsd       mmword ptr [ecx+28h],xmm0
movsd       xmm0,mmword ptr [esi+18h]
addsd       xmm0,mmword ptr [eax+38h]
</code></pre>

<p>Each loop of the double loop example produces this code (the following block is repeated about three times):</p>

<pre><code>addsd       xmm0,mmword ptr [eax+28h]
movsd       mmword ptr [eax+28h],xmm0
movsd       xmm0,mmword ptr [ecx+20h]
addsd       xmm0,mmword ptr [eax+30h]
movsd       mmword ptr [eax+30h],xmm0
movsd       xmm0,mmword ptr [ecx+28h]
addsd       xmm0,mmword ptr [eax+38h]
movsd       mmword ptr [eax+38h],xmm0
movsd       xmm0,mmword ptr [ecx+30h]
addsd       xmm0,mmword ptr [eax+40h]
movsd       mmword ptr [eax+40h],xmm0
</code></pre>

<p><strong>EDIT:</strong> The question turned out to be of no relevance, as the behavior severely depends on the sizes of the arrays (n) and the CPU cache. So if there is further interest, I rephrase the question:</p>

<p><strong>Could you provide some solid insight into the details that lead to the different cache behaviors as illustrated by the five regions on the following graph?</strong></p>

<p><strong>It might also be interesting to point out the differences between CPU/cache architectures, by providing a similar graph for these CPUs.</strong></p>

<p>PPS: Here is the full code. It uses <a href=""https://www.threadingbuildingblocks.org/"" rel=""noreferrer"">TBB</a> <code>Tick_Count</code> for higher resolution timing, which can be disabled by not defining the <code>TBB_TIMING</code> Macro:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;cmath&gt;
#include &lt;string&gt;

//#define TBB_TIMING

#ifdef TBB_TIMING   
#include &lt;tbb/tick_count.h&gt;
using tbb::tick_count;
#else
#include &lt;time.h&gt;
#endif

using namespace std;

//#define preallocate_memory new_cont

enum { new_cont, new_sep };

double *a1, *b1, *c1, *d1;


void allo(int cont, int n)
{
    switch(cont) {
      case new_cont:
        a1 = new double[n*4];
        b1 = a1 + n;
        c1 = b1 + n;
        d1 = c1 + n;
        break;
      case new_sep:
        a1 = new double[n];
        b1 = new double[n];
        c1 = new double[n];
        d1 = new double[n];
        break;
    }

    for (int i = 0; i &lt; n; i++) {
        a1[i] = 1.0;
        d1[i] = 1.0;
        c1[i] = 1.0;
        b1[i] = 1.0;
    }
}

void ff(int cont)
{
    switch(cont){
      case new_sep:
        delete[] b1;
        delete[] c1;
        delete[] d1;
      case new_cont:
        delete[] a1;
    }
}

double plain(int n, int m, int cont, int loops)
{
#ifndef preallocate_memory
    allo(cont,n);
#endif

#ifdef TBB_TIMING   
    tick_count t0 = tick_count::now();
#else
    clock_t start = clock();
#endif

    if (loops == 1) {
        for (int i = 0; i &lt; m; i++) {
            for (int j = 0; j &lt; n; j++){
                a1[j] += b1[j];
                c1[j] += d1[j];
            }
        }
    } else {
        for (int i = 0; i &lt; m; i++) {
            for (int j = 0; j &lt; n; j++) {
                a1[j] += b1[j];
            }
            for (int j = 0; j &lt; n; j++) {
                c1[j] += d1[j];
            }
        }
    }
    double ret;

#ifdef TBB_TIMING   
    tick_count t1 = tick_count::now();
    ret = 2.0*double(n)*double(m)/(t1-t0).seconds();
#else
    clock_t end = clock();
    ret = 2.0*double(n)*double(m)/(double)(end - start) *double(CLOCKS_PER_SEC);
#endif

#ifndef preallocate_memory
    ff(cont);
#endif

    return ret;
}


void main()
{   
    freopen(""C:\\test.csv"", ""w"", stdout);

    char *s = "" "";

    string na[2] ={""new_cont"", ""new_sep""};

    cout &lt;&lt; ""n"";

    for (int j = 0; j &lt; 2; j++)
        for (int i = 1; i &lt;= 2; i++)
#ifdef preallocate_memory
            cout &lt;&lt; s &lt;&lt; i &lt;&lt; ""_loops_"" &lt;&lt; na[preallocate_memory];
#else
            cout &lt;&lt; s &lt;&lt; i &lt;&lt; ""_loops_"" &lt;&lt; na[j];
#endif

    cout &lt;&lt; endl;

    long long nmax = 1000000;

#ifdef preallocate_memory
    allo(preallocate_memory, nmax);
#endif

    for (long long n = 1L; n &lt; nmax; n = max(n+1, long long(n*1.2)))
    {
        const long long m = 10000000/n;
        cout &lt;&lt; n;

        for (int j = 0; j &lt; 2; j++)
            for (int i = 1; i &lt;= 2; i++)
                cout &lt;&lt; s &lt;&lt; plain(n, m, j, i);
        cout &lt;&lt; endl;
    }
}
</code></pre>

<p>(It shows FLOP/s for different values of <code>n</code>.)</p>

<p><img src=""https://i.stack.imgur.com/keuWU.gif"" alt=""enter image description here""></p>
","<p>Upon further analysis of this, I believe this is (at least partially) caused by data alignment of the four pointers. This will cause some level of cache bank/way conflicts.</p>

<p>If I've guessed correctly on how you are allocating your arrays, they <strong><em>are likely to be aligned to the page line</em></strong>.</p>

<p>This means that all your accesses in each loop will fall on the same cache way. However, Intel processors have had 8-way L1 cache associativity for a while. But in reality, the performance isn't completely uniform. Accessing 4-ways is still slower than say 2-ways.</p>

<p><strong>EDIT : It does in fact look like you are allocating all the arrays separately.</strong>
Usually when such large allocations are requested, the allocator will request fresh pages from the OS. Therefore, there is a high chance that large allocations will appear at the same offset from a page-boundary.</p>

<p><strong>Here's the test code:</strong></p>

<pre><code>int main(){
    const int n = 100000;

#ifdef ALLOCATE_SEPERATE
    double *a1 = (double*)malloc(n * sizeof(double));
    double *b1 = (double*)malloc(n * sizeof(double));
    double *c1 = (double*)malloc(n * sizeof(double));
    double *d1 = (double*)malloc(n * sizeof(double));
#else
    double *a1 = (double*)malloc(n * sizeof(double) * 4);
    double *b1 = a1 + n;
    double *c1 = b1 + n;
    double *d1 = c1 + n;
#endif

    //  Zero the data to prevent any chance of denormals.
    memset(a1,0,n * sizeof(double));
    memset(b1,0,n * sizeof(double));
    memset(c1,0,n * sizeof(double));
    memset(d1,0,n * sizeof(double));

    //  Print the addresses
    cout &lt;&lt; a1 &lt;&lt; endl;
    cout &lt;&lt; b1 &lt;&lt; endl;
    cout &lt;&lt; c1 &lt;&lt; endl;
    cout &lt;&lt; d1 &lt;&lt; endl;

    clock_t start = clock();

    int c = 0;
    while (c++ &lt; 10000){

#if ONE_LOOP
        for(int j=0;j&lt;n;j++){
            a1[j] += b1[j];
            c1[j] += d1[j];
        }
#else
        for(int j=0;j&lt;n;j++){
            a1[j] += b1[j];
        }
        for(int j=0;j&lt;n;j++){
            c1[j] += d1[j];
        }
#endif

    }

    clock_t end = clock();
    cout &lt;&lt; ""seconds = "" &lt;&lt; (double)(end - start) / CLOCKS_PER_SEC &lt;&lt; endl;

    system(""pause"");
    return 0;
}
</code></pre>

<hr>

<p><strong>Benchmark Results:</strong></p>

<h1>EDIT: Results on an <em>actual</em> Core 2 architecture machine:</h1>

<p><strong>2 x Intel Xeon X5482 Harpertown @ 3.2 GHz:</strong></p>

<pre><code>#define ALLOCATE_SEPERATE
#define ONE_LOOP
00600020
006D0020
007A0020
00870020
seconds = 6.206

#define ALLOCATE_SEPERATE
//#define ONE_LOOP
005E0020
006B0020
00780020
00850020
seconds = 2.116

//#define ALLOCATE_SEPERATE
#define ONE_LOOP
00570020
00633520
006F6A20
007B9F20
seconds = 1.894

//#define ALLOCATE_SEPERATE
//#define ONE_LOOP
008C0020
00983520
00A46A20
00B09F20
seconds = 1.993
</code></pre>

<p>Observations:</p>

<ul>
<li><p><strong>6.206 seconds</strong> with one loop and <strong>2.116 seconds</strong> with two loops. This reproduces the OP's results exactly.</p></li>
<li><p><strong>In the first two tests, the arrays are allocated separately.</strong> You'll notice that they all have the same alignment relative to the page.</p></li>
<li><p><strong>In the second two tests, the arrays are packed together to break that alignment.</strong> Here you'll notice both loops are faster. Furthermore, the second (double) loop is now the slower one as you would normally expect.</p></li>
</ul>

<p>As @Stephen Cannon points out in the comments, there is very likely possibility that this alignment causes <strong><em>false aliasing</em></strong> in the load/store units or the cache. I Googled around for this and found that Intel actually has a hardware counter for <strong><em>partial address aliasing</em></strong> stalls:</p>

<p><a href=""http://software.intel.com/sites/products/documentation/doclib/stdxe/2013/~amplifierxe/pmw_dp/events/partial_address_alias.html"">http://software.intel.com/sites/products/documentation/doclib/stdxe/2013/~amplifierxe/pmw_dp/events/partial_address_alias.html</a></p>

<hr>

<h1>5 Regions - Explanations</h1>

<p><strong>Region 1:</strong></p>

<p>This one is easy. The dataset is so small that the performance is dominated by overhead like looping and branching.</p>

<p><strong>Region 2:</strong></p>

<p><strike>Here, as the data sizes increases, the amount of relative overhead goes down and the performance ""saturates"". Here two loops is slower because it has twice as much loop and branching overhead.</strike></p>

<p>I'm not sure exactly what's going on here... Alignment could still play an effect as Agner Fog mentions <a href=""http://www.agner.org/optimize/blog/read.php?i=142"">cache bank conflicts</a>. (That link is about Sandy Bridge, but the idea should still be applicable to Core 2.)</p>

<p><strong>Region 3:</strong></p>

<p>At this point, the data no longer fits in L1 cache. So performance is capped by the L1 &lt;-> L2 cache bandwidth.</p>

<p><strong>Region 4:</strong></p>

<p>The performance drop in the single-loop is what we are observing. And as mentioned, this is due to the alignment which (most likely) causes <strong><em>false aliasing</em></strong> stalls in the processor load/store units.</p>

<p>However, in order for false aliasing to occur, there must be a large enough stride between the datasets. This is why you don't see this in region 3.</p>

<p><strong>Region 5:</strong></p>

<p>At this point, nothing fits in cache. So you're bound by memory bandwidth.</p>

<hr>

<p><img src=""https://i.stack.imgur.com/ElCGL.png"" alt=""2 x Intel X5482 Harpertown @ 3.2 GHz"">
<img src=""https://i.stack.imgur.com/QMpwj.png"" alt=""Intel Core i7 870 @ 2.8 GHz"">
<img src=""https://i.stack.imgur.com/NpyhG.png"" alt=""Intel Core i7 2600K @ 4.4 GHz""></p>
","8547993"
"C: printf a float value","208459","","<p>I want to print a float value which has 2 integer digits and 6 decimal digits after the comma. If I just use <code>printf(""%f"", myFloat)</code> I'm getting a truncated value.</p>

<p>I don't know if this always happens in C, or it's just because I'm using C for microcontrollers (CCS to be exact), but at the reference it tells that <code>%f</code> get just that: a truncated float.</p>

<p>If my float is <code>44.556677</code>, I'm printing out <code>""44.55""</code>, only the first two decimal digits.</p>

<p>So the question is... how can I print my 6 digits (and just the six of them, just in case I'm having zeros after that or something)?</p>
","<p>You can do it like this:</p>

<pre><code>printf(""%.6f"", myFloat);
</code></pre>

<p>6 represents the number of digits after the dot.</p>

<p>P.S. Thanks <strong>@caf</strong> for correcting me.</p>
","8345605"
"What is the ""assert"" function?","208159","","<p>I've been studying OpenCV tutorials and came across the <code>assert</code> function; what does it do?</p>
","<p><code>assert</code> will terminate the program (usually with a message quoting the assert statement) if its argument turns out to be false. It's commonly used during debugging to make the program fail more obviously if an unexpected condition occurs.</p>

<p>For example:</p>

<pre><code>assert(length &gt;= 0);  // die if length is negative.
</code></pre>

<p>You can also add a more informative message to be displayed if it fails like so:</p>

<pre><code>assert(length &gt;= 0 &amp;&amp; ""Whoops, length can't possibly be negative! (didn't we just check 10 lines ago?) Tell jsmith"");
</code></pre>

<p>Or else like this:</p>

<pre><code>assert((""Length can't possibly be negative! Tell jsmith"", length &gt;= 0));
</code></pre>

<p>When you're doing a release (non-debug) build, you can also remove the overhead of evaluating <code>assert</code> statements by defining the <code>NDEBUG</code> macro, usually with a compiler switch. The corollary of this is that your program should <em>never</em> rely on the assert macro running.</p>

<pre><code>// BAD
assert(x++);

// GOOD
assert(x);    
x++;

// Watch out! Depends on the function:
assert(foo());

// Here's a safer way:
int ret = foo();
assert(ret);
</code></pre>

<p>From the combination of the program calling abort() and not being guaranteed to do anything, asserts should only be used to test things that the developer has assumed rather than, for example, the user entering a number rather than a letter (which should be handled by other means).</p>
","1571360"
"What is the proper #include for the function 'sleep' in C?","208001","","<p>I am using the Big Nerd Ranch book Objective-C Programming, and it starts out by having us write in C in the first few chapters. In one of my programs it has me create, I use the sleep function. In the book it told me to put <code>#include &lt;stdlib.h&gt;</code> under the <code>#include &lt;stdio.h&gt;</code> part. This is supposed to get rid of the warning that says ""Implicit declaration of function 'sleep' is invalid in C99"". But for some reason after I put <code>#include &lt;stdlib.h&gt;</code>, the warning does not go away.. This problem does not stop the program from running fine, but I was just curious on which <code>#include</code> I needed to use!</p>
","<p>The sleep <a href=""http://linux.die.net/man/3/sleep"">man page</a> says it is declared in <code>&lt;unistd.h&gt;</code>.  Have you included this in your program?</p>
","14818099"
"Where is the itoa function in Linux?","207351","","<p><code>itoa()</code> is a really handy function to convert a number to a string. Linux does not seem to have <code>itoa()</code>, is there an equivalent function or do I have to use <code>sprintf(str, ""%d"", num)</code>?</p>
","<p>EDIT: Sorry, I should have remembered that this machine is decidedly non-standard, having plugged in various non-standard <code>libc</code> implementations for academic purposes ;-)</p>

<p>As <code>itoa()</code> is indeed non-standard, as mentioned by several helpful commenters, it is best to use <code>sprintf(target_string,""%d"",source_int)</code> or (better yet, because it's safe from buffer overflows) <code>snprintf(target_string, size_of_target_string_in_bytes, ""%d"", source_int)</code>.  I know it's not quite as concise or cool as <code>itoa()</code>, but at least you can Write Once, Run Everywhere (tm) ;-)</p>

<h2>Here's the old (edited) answer</h2>

<p>You are correct in stating that the default <code>gcc libc</code> does not include <code>itoa()</code>, like several other platforms, due to it not technically being a part of the standard.  See <a href=""http://www.cplusplus.com/reference/clibrary/cstdlib/itoa.html"" rel=""noreferrer"">here</a> for a little more info.  Note that you have to </p>

<pre><code>#include &lt;stdlib.h&gt;
</code></pre>

<p>Of course you already know this, because you wanted to <em>use</em> <code>itoa()</code> on Linux after presumably using it on another platform, but... the code (stolen from the link above) would look like:</p>

<p><strong>Example</strong></p>

<pre><code>/* itoa example */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main ()
{
  int i;
  char buffer [33];
  printf (""Enter a number: "");
  scanf (""%d"",&amp;i);
  itoa (i,buffer,10);
  printf (""decimal: %s\n"",buffer);
  itoa (i,buffer,16);
  printf (""hexadecimal: %s\n"",buffer);
  itoa (i,buffer,2);
  printf (""binary: %s\n"",buffer);
  return 0;
}
</code></pre>

<p><strong>Output:</strong></p>

<blockquote>
<pre><code>Enter a number: 1750
decimal: 1750
hexadecimal: 6d6
binary: 11011010110
</code></pre>
</blockquote>

<p>Hope this helps!</p>
","190235"
"Convert an int to ASCII character","206980","","<p>I have </p>

<pre><code>int i = 6;
</code></pre>

<p>and I want </p>

<pre><code>char c = '6'
</code></pre>

<p>by conversion. Any simple way to suggest?</p>

<p><strong>EDIT:</strong>
also i need to generate a random number, and convert to a char, then add a '.txt' and access it in an ifstream.</p>
","<p><em>Straightforward way:</em></p>

<pre><code>char digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
char aChar = digits[i];
</code></pre>

<p><em>Safer way:</em></p>

<pre><code>char aChar = '0' + i;
</code></pre>

<p><em>Generic way:</em></p>

<pre><code>itoa(i, ...)
</code></pre>

<p><em>Handy way:</em> </p>

<pre><code>sprintf(myString, ""%d"", i)
</code></pre>

<p><em>C++ way:</em> (taken from Dave18 answer)</p>

<pre><code>std::ostringstream oss;
oss &lt;&lt; 6;
</code></pre>

<p><em>Boss way:</em></p>

<blockquote>
  <p>Joe, write me an int to char converter</p>
</blockquote>

<p><em>Studboss way:</em></p>

<blockquote>
  <p>char aChar = '6';</p>
</blockquote>

<p><em>Joe's way:</em></p>

<blockquote>
  <p>char aChar = '6'; //int i = 6;</p>
</blockquote>

<p><em>Nasa's way:</em></p>

<blockquote>
  <p>//Waiting for reply from satellite...</p>
</blockquote>

<p><em>Alien's way: '9'</em></p>

<blockquote>
  <p>//Greetings.</p>
</blockquote>

<p><em>God's way:</em></p>

<blockquote>
  <p>Bruh I built this</p>
</blockquote>

<p><em>Peter Pan's way:</em></p>

<pre><code>char aChar;

switch (i)
{
  case 0:
    aChar = '0';
    break;
  case 1:
    aChar = '1';
    break;
  case 2:
    aChar = '2';
    break;
  case 3:
    aChar = '3';
    break;
  case 4:
    aChar = '4';
    break;
  case 5:
    aChar = '5';
    break;
  case 6:
    aChar = '6';
    break;
  case 7:
    aChar = '7';
    break;
  case 8:
    aChar = '8';
    break;
  case 9:
    aChar = '9';
    break;
  default:
    aChar = '?';
    break;
}
</code></pre>

<p><em>Santa Claus's way:</em></p>

<pre><code>//Wait till Christmas!
sleep(457347347);
</code></pre>

<p><em>Gravity's way:</em></p>

<blockquote>
  <p>//What</p>
</blockquote>

<p><em>'6' (Jersey) Mikes'™ way:</em></p>

<blockquote>
  <p>//</p>
</blockquote>

<p><em>SO way:</em></p>

<blockquote>
  <p>Guys, how do I avoid reading
  beginner's guide to C++?</p>
</blockquote>

<p><em>My way:</em></p>

<blockquote>
  <p>or the highway.</p>
</blockquote>

<p>Comment: I've added Handy way and C++ way (to have a complete collection) and I'm saving this as a wiki. </p>

<p>Edit: satisfied?</p>
","4629196"
"Printing hexadecimal characters in C","205831","","<p>I'm trying to read in a line of characters, then print out the hexadecimal equivalent of the characters.</p>

<p>For example, if I have a string that is <code>""0xc0 0xc0 abc123""</code>, where the first 2 characters are <code>c0</code> in hex and the remaining characters are <code>abc123</code> in ASCII, then I should get </p>

<pre><code>c0 c0 61 62 63 31 32 33
</code></pre>

<p>However, <code>printf</code> using <code>%x</code> gives me</p>

<pre><code>ffffffc0 ffffffc0 61 62 63 31 32 33
</code></pre>

<p>How do I get the output I want without the <code>""ffffff""</code>? And why is it that only c0 (and 80) has the <code>ffffff</code>, but not the other characters?</p>
","<p>You are seeing the <code>ffffff</code> because <code>char</code> is signed on your system. In C, vararg functions such as <code>printf</code> will promote all integers smaller than <code>int</code> to <code>int</code>. Since <code>char</code> is an integer (8-bit signed integer in your case), your chars are being promoted to <code>int</code> via sign-extension.</p>

<p>Since <code>c0</code> and <code>80</code> have a leading 1-bit (and are negative as an 8-bit integer), they are being sign-extended while the others in your sample don't.</p>

<pre><code>char    int
c0 -&gt; ffffffc0
80 -&gt; ffffff80
61 -&gt; 00000061
</code></pre>

<p>Here's a solution:</p>

<pre><code>char ch = 0xC0;
printf(""%x"", ch &amp; 0xff);
</code></pre>

<p>This will mask out the upper bits and keep only the lower 8 bits that you want.</p>
","8060195"
"makefile:4: *** missing separator. Stop","205415","","<p>This is my makefile:</p>

<pre><code>all:ll

ll:ll.c   
  gcc  -c  -Wall -Werror -02 c.c ll.c  -o  ll  $@  $&lt;

clean :
  \rm -fr ll
</code></pre>

<p>When I try to <code>make clean</code> or <code>make make</code>, I get this error:</p>

<pre><code>:makefile:4: *** missing separator.  Stop.
</code></pre>

<p>How can I fix it?</p>
","<p>makefile has a very stupid relation  with tabs , all actions of every rule are identified by tabs ...... and No 4 spaces dont make a tab , only a tab makes a tab...</p>

<p>to check i use the command <code>cat -e -t -v  makefile_name</code></p>

<p>it shows the presence of tabs with ^I and line endings with $  both are vital to ensure that dependencies end properly and tabs mark the action for the rules so that they are easily identifiable to the make utility.....</p>

<p>example : </p>

<pre><code>Kaizen ~/so_test $ cat -e -t -v  mk.t
all:ll$      ## here the $ is end of line ...                   
$
ll:ll.c   $
^Igcc  -c  -Wall -Werror -02 c.c ll.c  -o  ll  $@  $&lt;$ 
## the ^I above means a tab was there before the action part, so this lines ok .
 $
clean :$
   \rm -fr ll$
## see here there is no ^I which means , tab is not present .... 
## in this case you need to open the file again and edit/ensure a tab 
## starts the action part
</code></pre>

<p>hope this helps !!</p>
","16945143"
"Going through a text file line by line in C","204661","","<p>I have been working on a small exercise for my CIS class and am very confused by the methods C uses to read from a file. All that I really need to do is read through a file line by line and use the information gathered from each line to do a few manipulations. I tried using the getline method and others with no luck. 
My code is currently as follows:</p>

<pre><code>int main(char *argc, char* argv[]){
      const char *filename = argv[0];
      FILE *file = fopen(filename, ""r"");
      char *line = NULL;

      while(!feof(file)){
        sscanf(line, filename, ""%s"");
        printf(""%s\n"", line);
      }
    return 1;
}
</code></pre>

<p>Right now I am getting a seg fault with the sscanf method and I am not sure why. I am a total C noob and just wondering if there was some big picture thing that I was missing. 
Thanks</p>
","<p>So many problems in so few lines. I probably forget some:</p>

<ul>
<li>argv[0] is the program name, not the first argument;</li>
<li>if you want to read in a variable, you have to allocate its memory</li>
<li>one never loops on feof, one loops on an IO function until it fails, feof then serves to determinate the reason of failure,</li>
<li>sscanf is there to parse a line, if you want to parse a file, use fscanf,</li>
<li>""%s"" will stop at the first space as a format for the ?scanf family</li>
<li>to read a line, the standard function is fgets,</li>
<li>returning 1 from main means failure</li>
</ul>

<p>So</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char* argv[])
{
    char const* const fileName = argv[1]; /* should check that argc &gt; 1 */
    FILE* file = fopen(fileName, ""r""); /* should check the result */
    char line[256];

    while (fgets(line, sizeof(line), file)) {
        /* note that fgets don't strip the terminating \n, checking its
           presence would allow to handle lines longer that sizeof(line) */
        printf(""%s"", line); 
    }
    /* may check feof here to make a difference between eof and io failure -- network
       timeout for instance */

    fclose(file);

    return 0;
}
</code></pre>
","9206332"
"How to compile C programming in Windows 7?","204372","","<p>I am looking for free tools to compile C programs on Windows 7. I've always compiled C code on Ubuntu using gcc in the past. So, how can I compile C code on Windows 7? Please teach me. :)</p>
","<p><strong><a href=""http://www.mingw.org/"" rel=""noreferrer"">MinGW</a></strong> uses a fairly old version of GCC (3.4.5, I believe), and hasn't been updated in a while. If you're already comfortable with the GCC toolset and just looking to get your feet wet in Windows programming, this may be a good option for you. There are lots of great IDEs available that use this compiler.</p>

<p><em>Edit:</em> Apparently I was wrong; that's what I get for talking about something I know very little about. Tauran points out that there is a project that aims to provide the MinGW toolkit with the current version of GCC. You can download it from <a href=""http://mingw-w64.sourceforge.net/"" rel=""noreferrer"">their website</a>.</p>

<p><br>
However, I'm not sure that I can recommend it for serious Windows development. If you're not a idealistic fanboy who can't stomach the notion of ever using Microsoft software, I <em>highly</em> recommend investigating <strong>Visual Studio</strong>, which comes bundled with Microsoft's C/C++ compiler. The <strong><a href=""http://www.microsoft.com/express/Downloads/#2010-Visual-CPP"" rel=""noreferrer"">Express version</a></strong> (which includes the same compiler as all the paid-for editions) is absolutely free for download. In addition to the compiler, Visual Studio also provides a world-class IDE that makes developing Windows-specific applications much easier. Yes, detractors will ramble on about the fact that it's not fully standards-compliant, but such is the world of writing Windows applications. They're never going to be truly portable once you include <code>windows.h</code>, so most of the idealistic dedication just ends up being a waste of time.</p>
","5691846"
"How to code a modulo (%) operator in C/C++/Obj-C that handles negative numbers","204207","","<p>One of my pet hates of C-derived languages (as a mathematician)  is that</p>

<pre><code>(-1) % 8 // comes out as -1, and not 7

fmodf(-1,8) // fails similarly
</code></pre>

<p>What's the best solution?  </p>

<p>C++ allows the possibility of templates and operator overloading, but both of these are murky waters for me. examples gratefully received.</p>
","<p>First of all I'd like to note that you cannot even rely on the fact that <code>(-1) % 8 == -1</code>. the only thing you can rely on is that <code>(x / y) * y + ( x % y) == x</code>. However whether or not the remainder is negative is <em>implementation-defined</em>. </p>

<p>Now why use templates here? An overload for ints and longs would do.</p>

<pre><code>int mod (int a, int b)
{
   int ret = a % b;
   if(ret &lt; 0)
     ret+=b;
   return ret;
}
</code></pre>

<p>and now you can call it like mod(-1,8) and it will appear to be 7. </p>

<p>Edit: I found a bug in my code. It won't work if b is negative. So I think this is better:</p>

<pre><code>int mod (int a, int b)
{
   if(b &lt; 0) //you can check for b == 0 separately and do what you want
     return mod(a, -b);   
   int ret = a % b;
   if(ret &lt; 0)
     ret+=b;
   return ret;
}
</code></pre>

<p>Reference: C++03 paragraph 5.6 clause 4:</p>

<blockquote>
  <p>The binary / operator yields the quotient, and the binary % operator yields the remainder from the division of the first expression by the second. If the second operand of / or % is zero the behavior is undefined; otherwise (a/b)*b + a%b is equal to a. If both operands are nonnegative then the remainder is nonnegative; <strong><em>if not, the sign of the remainder is implementation-defined</em></strong>.</p>
</blockquote>
","4003287"
"End of File (EOF) in C","203774","","<p>I am currently reading the book C Programming Language by Ritchie &amp; Kernighan. And I am pretty confused about the usage of EOF in the <code>getchar()</code> function. </p>

<p>First, I want to know why the value of EOF is -1 and why the value of <code>getchar()!=EOF</code> is 0. Pardon me for my question but I really don't understand. I really tried but I can't. </p>

<p>Then I tried to run the example on the book that can count the number of characters using the code below but it seems that I never get out of the loop even if I press enter so I am wondering when would I reach the EOF?</p>

<pre><code>main(){
   long nc;
   nc = 0;
   while (getchar() != EOF)
       ++nc;
   printf(""%ld\n"", nc);
}
</code></pre>

<p>Then, I read the same problem at <a href=""https://stackoverflow.com/questions/1622092/problem-with-eof-in-c"">Problem with EOF in C</a>. Most people advised that instead of using EOF, use the terminator \n or the null terminator '\0' which makes a lot of sense.</p>

<p>Does it mean that the example on the book serves another purpose? </p>
","<p>EOF indicates ""end of file"". A newline (which is what happens when you press enter) isn't the end of a <em>file</em>, it's the end of a <em>line</em>, so a newline doesn't terminate this loop.</p>

<p>The code isn't wrong[*], it just doesn't do what you seem to expect. It reads to the end of the input, but you seem to want to read only to the end of a line.</p>

<p>The value of EOF is -1 because it has to be different from any return value from <code>getchar</code> that is an actual character. So <code>getchar</code> returns any character value as an unsigned char, converted to int, which will therefore be non-negative.</p>

<p>If you're typing at the terminal and you want to provoke an end-of-file, use CTRL-D (unix-style systems) or CTRL-Z (Windows). Then after all the input has been read, <code>getchar()</code> will return <code>EOF</code>, and hence <code>getchar() != EOF</code> will be false, and the loop will terminate.</p>

<p>[*] well, it has undefined behavior if the input is more than LONG_MAX characters due to integer overflow, but we can probably forgive that in a simple example.</p>
","4358765"
"What does the C ??!??! operator do?","203662","","<p>I saw a line of C that looked like this:</p>

<pre><code>!ErrorHasOccured() ??!??! HandleError();
</code></pre>

<p>It compiled correctly and seems to run ok. It seems like it's checking if an error has occurred, and if it has, it handles it. But I'm not really sure what it's actually doing or how it's doing it. It does look like the programmer is trying express their feelings about errors.</p>

<p>I have never seen the <code>??!??!</code> before in any programming language, and I can't find documentation for it anywhere. (Google doesn't help with search terms like <code>??!??!</code>). What does it do and how does the code sample work?</p>
","<p><code>??!</code> is a <a href=""http://en.wikipedia.org/wiki/Digraphs_and_trigraphs#C"" rel=""noreferrer"">trigraph</a> that translates to <code>|</code>. So it says:</p>

<pre><code>!ErrorHasOccured() || HandleError();
</code></pre>

<p>which, due to short circuiting, is equivalent to:</p>

<pre><code>if (ErrorHasOccured())
    HandleError();
</code></pre>

<p><a href=""http://www.gotw.ca/gotw/086.htm"" rel=""noreferrer"">Guru of the Week</a> (deals with C++ but relevant here), where I picked this up.</p>

<p><a href=""http://www.archivum.info/comp.std.c/2007-11/00083/Re-extended-operators.html"" rel=""noreferrer"">Possible origin of trigraphs</a> or as @DwB points out in the comments it's more likely due to EBCDIC being difficult (again). <a href=""http://www.ibm.com/developerworks/forums/thread.jspa?messageID=14505849"" rel=""noreferrer"">This</a> discussion on the IBM developerworks board seems to support that theory.</p>

<p>From ISO/IEC 9899:1999 §5.2.1.1, footnote 12 (h/t @Random832):</p>

<blockquote>
  <p>The trigraph sequences enable the input of characters that are not defined in the Invariant Code Set as
  described in ISO/IEC 646, which is a subset of the seven-bit US ASCII code set.</p>
</blockquote>
","7825075"
"maximum value of int","202703","","<p>Is there any code to find the maximum value of integer (accordingly to the compiler) in C/C++ like <code>Integer.MaxValue</code> function in java?</p>
","<p>In C++:</p>

<pre><code>#include &lt;limits&gt;
</code></pre>

<p>then use</p>

<pre><code>int imin = std::numeric_limits&lt;int&gt;::min(); // minimum value
int imax = std::numeric_limits&lt;int&gt;::max();
</code></pre>

<p><code>std::numeric_limits</code> is a template type which can be instantiated with other types:</p>

<pre><code>float fmin = std::numeric_limits&lt;float&gt;::min(); // minimum positive value
float fmax = std::numeric_limits&lt;float&gt;::max();
</code></pre>

<hr>

<p>In C:</p>

<pre><code>#include &lt;limits.h&gt;
</code></pre>

<p>then use</p>

<pre><code>int imin = INT_MIN; // minimum value
int imax = INT_MAX;
</code></pre>

<p>or</p>

<pre><code>#include &lt;float.h&gt;

float fmin = FLT_MIN;  // minimum positive value
double dmin = DBL_MIN; // minimum positive value

float fmax = FLT_MAX;
double dmax = DBL_MAX;
</code></pre>
","1855465"
"Size of character ('a') in C/C++","202620","","<p>What is the size of character in C and C++ ? As far as I know the size of char is 1 byte in both C and C++.</p>

<p><strong><a href=""http://www.ideone.com/e3Yo1Kyf"" rel=""noreferrer"">In C:</a></strong></p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
  printf(""Size of char : %d\n"",sizeof(char));
  return 0;
}
</code></pre>

<p><strong><a href=""http://www.ideone.com/uG4Qodfo"" rel=""noreferrer"">In C++:</a></strong></p>

<pre><code>#include &lt;iostream&gt;
int main()
{
  std::cout&lt;&lt;""Size of char : ""&lt;&lt;sizeof(char)&lt;&lt;""\n"";
  return 0;
}
</code></pre>

<p>No surprises, both of them gives the output : <code>Size of char : 1</code></p>

<p>Now we know that characters are represented as <code>'a'</code>,<code>'b'</code>,<code>'c'</code>,<code>'|'</code>,... So I just modified the above codes to these:</p>

<p><strong>In C:</strong></p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
  char a = 'a';
  printf(""Size of char : %d\n"",sizeof(a));
  printf(""Size of char : %d\n"",sizeof('a'));
  return 0;
}
</code></pre>

<p><strong><a href=""http://www.ideone.com/Y11gm1lw"" rel=""noreferrer"">Output:</a></strong></p>

<pre><code>Size of char : 1
Size of char : 4
</code></pre>

<p><strong>In C++:</strong></p>

<pre><code>#include &lt;iostream&gt;
int main()
{
  char a = 'a';
  std::cout&lt;&lt;""Size of char : ""&lt;&lt;sizeof(a)&lt;&lt;""\n"";
  std::cout&lt;&lt;""Size of char : ""&lt;&lt;sizeof('a')&lt;&lt;""\n"";
  return 0;
}
</code></pre>

<p><strong><a href=""http://www.ideone.com/b00pdptc"" rel=""noreferrer"">Output:</a></strong></p>

<pre><code>Size of char : 1
Size of char : 1
</code></pre>

<p><strong>Why the <code>sizeof('a')</code> returns different values in C and C++?</strong></p>
","<p>In C, the type of a character <em>constant</em> like <code>'a'</code> is actually an <code>int</code>, with size of 4 (or some other implementation-dependent value). In C++, the type is <code>char</code>, with size of 1. This is one of many small differences between the two languages.</p>
","2172948"
"Is there a replacement for unistd.h for Windows (Visual C)?","202008","","<p>I'm porting a relatively simple console program written for Unix to the Windows platform (<a href=""http://en.wikipedia.org/wiki/Visual_C++#32-bit_versions"" rel=""noreferrer"">Visual C++ 8.0</a>). All the source files include ""unistd.h"", which doesn't exist.  Removing it, I get complaints about misssing prototypes for 'srandom', 'random', and 'getopt'.
I know I can replace the random functions, and I'm pretty sure I can find/hack-up a getopt implementation.  </p>

<p>But I'm sure others have run into the same challenge. 
My question is: is there a port of ""unistd.h"" to Windows? At least one containg those functions which do have a native Windows implementation - I don't need pipes or forking.</p>

<p><strong>EDIT</strong>:</p>

<p>I know I can create my very own ""unistd.h"" which contains replacements for the things I need - especially in this case, since it is a limited set. But since it seems like a common problem, I was wondering if someone had done the work already for a bigger subset of the functionality.</p>

<p>Switching to a different compiler or environment isn't possible at work - I'm stuck with Visual Studio.</p>
","<p>Since we can't find a version on the Internet, let's start one here.<br>
Most ports to Windows probably only need a subset of the complete Unix file.<br>
Here's a starting point. Please add definitions as needed.</p>

<pre><code>#ifndef _UNISTD_H
#define _UNISTD_H    1

/* This is intended as a drop-in replacement for unistd.h on Windows.
 * Please add functionality as neeeded.
 * https://stackoverflow.com/a/826027/1202830
 */

#include &lt;stdlib.h&gt;
#include &lt;io.h&gt;
#include &lt;getopt.h&gt; /* getopt at: https://gist.github.com/ashelly/7776712 */
#include &lt;process.h&gt; /* for getpid() and the exec..() family */
#include &lt;direct.h&gt; /* for _getcwd() and _chdir() */

#define srandom srand
#define random rand

/* Values for the second argument to access.
   These may be OR'd together.  */
#define R_OK    4       /* Test for read permission.  */
#define W_OK    2       /* Test for write permission.  */
//#define   X_OK    1       /* execute permission - unsupported in windows*/
#define F_OK    0       /* Test for existence.  */

#define access _access
#define dup2 _dup2
#define execve _execve
#define ftruncate _chsize
#define unlink _unlink
#define fileno _fileno
#define getcwd _getcwd
#define chdir _chdir
#define isatty _isatty
#define lseek _lseek
/* read, write, and close are NOT being #defined here, because while there are file handle specific versions for Windows, they probably don't work for sockets. You need to look at your app and consider whether to call e.g. closesocket(). */

#ifdef _WIN64
#define ssize_t __int64
#else
#define ssize_t long
#endif

#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2
/* should be in some equivalent to &lt;sys/types.h&gt; */
typedef __int8            int8_t;
typedef __int16           int16_t; 
typedef __int32           int32_t;
typedef __int64           int64_t;
typedef unsigned __int8   uint8_t;
typedef unsigned __int16  uint16_t;
typedef unsigned __int32  uint32_t;
typedef unsigned __int64  uint64_t;

#endif /* unistd.h  */
</code></pre>
","826027"
"Reading file using fscanf() in C","200984","","<p>I need to read and print data from a file.<br>
I wrote the program like below,  </p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
int main(void)
{
char item[9], status;

FILE *fp;

if( (fp = fopen(""D:\\Sample\\database.txt"", ""r+"")) == NULL)
{
    printf(""No such file\n"");
    exit(1);
}  

 if (fp == NULL)
{
    printf(""Error Reading File\n"");
}

while(fscanf(fp,""%s %c"",item,&amp;status) == 1)  
{  
       printf(""\n%s \t %c"", item,status);  
}  
if(feof(fp))  
{            
         puts(""EOF"");     
}  
else  
{  
 puts(""CAN NOT READ"");  
}  
getch();  
return 0;  
}  
</code></pre>

<p>the database.txt file contains<br>
Test1 A<br>
Test2 B<br>
Test3 C  </p>

<p>When I run the code, it prints </p>

<blockquote>
  <p>CAN NOT READ. </p>
</blockquote>

<p>Please help me to find out the problem.</p>
","<p>First of all, you're testing <code>fp</code> twice. so <code>printf(""Error Reading File\n"");</code> never gets executed.</p>

<p>Then, the output of <code>fscanf</code> should be equal to <code>2</code> since you're reading two values.</p>
","3351839"
"Removing trailing newline character from fgets() input","198325","","<p>I am trying to get some data from the user and send it to another function in gcc. The code is something like this.</p>

<pre><code>printf(""Enter your Name: "");
if (!(fgets(Name, sizeof Name, stdin) != NULL)) {
    fprintf(stderr, ""Error reading Name.\n"");
    exit(1);
}
</code></pre>

<p>However, I find that it has a newline <code>\n</code> character in the end. So if I enter <code>John</code> it ends up sending <code>John\n</code>. How do I remove that <code>\n</code> and send a proper string.</p>
","<p>The slightly ugly way: </p>

<pre><code>char *pos;
if ((pos=strchr(Name, '\n')) != NULL)
    *pos = '\0';
else
    /* input too long for buffer, flag error */
</code></pre>

<p>The slightly strange way:</p>

<pre><code>strtok(Name, ""\n"");
</code></pre>

<p>Note that the <code>strtok</code> function doesn't work as expected if the user enters an empty string (i.e. presses only Enter). It leaves the <code>\n</code> character intact.</p>

<p>There are others as well, of course.</p>
","2693826"
"How to display hexadecimal numbers in C?","198083","","<p>I have a list of numbers as below:</p>

<blockquote>
  <p>0, 16, 32, 48 ...</p>
</blockquote>

<p>I need to output those numbers in hexadecimal as:</p>

<blockquote>
  <p>0000,0010,0020,0030,0040 ...</p>
</blockquote>

<p>I have tried solution such as:</p>

<pre><code>printf(""%.4x"",a); // where a is an integer
</code></pre>

<p>but the result that I got is:</p>

<blockquote>
  <p>0000, 0001, 0002, 0003, 0004 ...</p>
</blockquote>

<p>I think I'm close there. Can anybody help as I'm not
so good at <code>printf</code> in C.</p>

<p>Thanks.</p>
","<p>Try:</p>

<pre><code>printf(""%04x"",a);
</code></pre>

<ul>
<li><code>0</code> - Left-pads the number with
zeroes (0) instead of spaces, where
padding is specified.</li>
<li><code>4</code> (width) - Minimum number of
characters to be printed. If the
value to be printed is shorter than
this number, the result is right justified 
within this width by padding on the left 
with the pad character.  By default this is 
a blank space, but the leading zero we used 
specifies a zero as the pad char.
The value is not truncated even if the result is
larger.</li>
<li><code>x</code> - Specifier for hexadecimal
integer.</li>
</ul>

<p>More <a href=""http://www.cplusplus.com/reference/clibrary/cstdio/printf/"" rel=""noreferrer"">here</a></p>
","3649040"
"how does array[100] = {0} set the entire array to 0?","197703","","<p>How does the compiler fill values in <code>char array[100] = {0};</code>? What's the magic behind it?</p>

<p>I wanted to know how internally compiler initializes.</p>
","<p>It's not magic. </p>

<p>The behavior of this code in C is described in section 6.7.8.21 of the C specification (<a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf"" rel=""nofollow noreferrer"">online draft of C spec</a>): for the elements that don't have a specified value, the compiler initializes pointers to NULL and arithmetic types to zero (and recursively applies this to aggregates). </p>

<p>The behavior of this code in C++ is described in section 8.5.1.7 of the C++ specification (<a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3797.pdf#subsection.8.5.1"" rel=""nofollow noreferrer"">online draft of C++ spec</a>): the compiler aggregate-initializes the elements that don't have a specified value.</p>

<p>Also, note that in C++ (but not C), you can use an empty initializer list, causing the compiler to aggregate-initialize all of the elements of the array:</p>

<pre><code>char array[100] = {};
</code></pre>

<p>As for what sort of code the compiler might generate when you do this, take a look at this question: <a href=""https://stackoverflow.com/questions/531477/strange-assembly-from-array-0-initialization/531490"">Strange assembly from array 0-initialization</a></p>
","629063"
"What does %s and %d mean in printf in the C language?","197063","","<p>I don't understand what the <code>%s</code> and <code>d%</code> do in this C code:</p>

<pre><code>for (i=0;i&lt;sizeof(code)/sizeof(char*); i++) {
    printf(""%s%d%s%d\n"", ""Length of String "", i, "" is "", strlen(code[i]));
    str = code[i];
    printf(""%s%d%s%c\n"",""The first character in string "", i, "" is "", str[0]);
}
</code></pre>

<p>I'm new to the C language and my background is in Java.</p>

<ul>
<li>What do the <code>%s%d%s%d</code> symbols denote?</li>
<li>Why are there so many of them?</li>
<li>Is the comma used here for concatenation instead of a <code>+</code>?</li>
</ul>
","<p>The printf() family of functions uses <code>%</code> character as a placeholder.  When a <code>%</code> is encountered, printf reads the characters following the <code>%</code> to determine what to do:</p>

<pre><code>%s - Take the next argument and print it as a string
%d - Take the next argument and print it as an int
</code></pre>

<p>See this Wikipedia article for a nice picture: <a href=""http://en.wikipedia.org/wiki/Printf_format_string"" rel=""noreferrer"">printf format string</a></p>

<p>The <code>\n</code> at the end of the string is for a newline/carriage-return character.</p>
","9027033"
"Difference between static memory allocation and dynamic memory allocation","196337","","<p>I would like to know what is the difference between static memory allocation and dynamic memory allocation?</p>

<p>Could you explain this with any example?</p>
","<p>There are three types of allocation — static, automatic, and dynamic.</p>

<p><strong>Static Allocation</strong> means, that the memory for your variables is allocated when the program starts.  The size is fixed when the program is created.  It applies to global variables, file scope variables, and variables qualified with <code>static</code> defined inside functions.</p>

<p><strong>Automatic memory allocation</strong> occurs for (non-static) variables defined inside functions, and is usually stored on the <em>stack</em> (though the C standard doesn't mandate that a stack is used). You do not have to reserve extra memory using them, but on the other hand, have also limited control over the lifetime of this memory. E.g: automatic variables in a function are only there until the function finishes.</p>

<pre><code>void func() {
    int i; /* `i` only exists during `func` */
}
</code></pre>

<p><strong>Dynamic memory allocation</strong> is a bit different. You now control the exact size and the lifetime of these memory locations. If you don't free it, you'll run into memory leaks, which may cause your application to crash, since at some point of time, system cannot allocate more memory.</p>

<pre><code>int* func() {
    int* mem = malloc(1024);
    return mem;
}

int* mem = func(); /* still accessible */
</code></pre>

<p>In the upper example, the allocated memory is still valid and accessible, even though the function terminated. When you are done with the memory, you have to free it:</p>

<pre><code>free(mem);
</code></pre>
","8385488"
"How to get the length of array in C? is ""sizeof"" is one of the solution?","196094","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/1975128/sizeof-an-array-in-the-c-programming-language"">Sizeof an array in the C programming language?</a><br>
  <a href=""https://stackoverflow.com/questions/2950332/why-does-a-c-array-have-a-wrong-sizeof-value-when-its-passed-to-a-function"">Why does a C-Array have a wrong sizeof() value when it&#39;s passed to a function?</a>  </p>
</blockquote>



<p>See the below code and suggest me that what is the difference of ""<strong>sizeof</strong>"" keyword when I used like this:</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
void show(int ar[]);
void main()
{
    int arr[]={1,2,3,4,5};
    clrscr();
    printf(""Length: %d\n"",sizeof(arr));
    printf(""Length: %d\n"",sizeof(arr)/sizeof(int));
    show(arr);
    getch();
}
void show(int ar[])
{
   printf(""Length: %d"", sizeof(ar));
   printf(""Length: %d"", sizeof(ar)/sizeof(int));
}
</code></pre>

<p>But the output is like this:</p>

<blockquote>
  <p>Output is:</p>
  
  <p>Length: 10 </p>
  
  <p>Length: 5</p>
  
  <p>Length: 2</p>
  
  <p>Length: 1</p>
</blockquote>

<p>why I am getting like this; If I want to take the entire data from one array to another array the how can I do?</p>

<p>Suggest me If anyone knows.</p>
","<p>Arrays decay to pointers in function calls. It's not possible to compute the size of an array which is only represented as a pointer in any way, including using <code>sizeof</code>.</p>

<p>You must add an explicit argument:</p>

<pre><code>void show(int *data, size_t count);
</code></pre>

<p>In the call, you can use <code>sizeof</code> to compute the number of elements, for actual arrays:</p>

<pre><code>int arr[] = { 1,2,3,4,5 };

show(arr, sizeof arr / sizeof *arr);
</code></pre>

<p>Note that <code>sizeof</code> gives you the size in units of <code>char</code>, which is why the division by what is essentially <code>sizeof (int)</code> is needed, or you'd get a way too high value.</p>

<p>Also note, as a point of interest and cleanliness, that <code>sizeof</code> is <em>not</em>  a function. The parentheses are only needed when the argument is a type name, since the argument then is a cast-like expression (e.g. <code>sizeof (int)</code>). You can often get away without naming actual types, by doing <code>sizeof</code> on data instead.</p>
","9413060"
"How to read a line from the console in C?","195991","","<p>What is the simplest way to read a full line in a C console program
The text entered might have a variable length and we can't make any assumption about its content.</p>
","<p>You need dynamic memory management, and use the <code>fgets</code> function to read your line. However, there seems to be no way to see how many characters it read. So you use fgetc:</p>

<pre><code>char * getline(void) {
    char * line = malloc(100), * linep = line;
    size_t lenmax = 100, len = lenmax;
    int c;

    if(line == NULL)
        return NULL;

    for(;;) {
        c = fgetc(stdin);
        if(c == EOF)
            break;

        if(--len == 0) {
            len = lenmax;
            char * linen = realloc(linep, lenmax *= 2);

            if(linen == NULL) {
                free(linep);
                return NULL;
            }
            line = linen + (line - linep);
            linep = linen;
        }

        if((*line++ = c) == '\n')
            break;
    }
    *line = '\0';
    return linep;
}
</code></pre>

<p><strong>Note</strong>: Never use gets ! It does not do bounds checking and can overflow your buffer</p>
","314422"
"What is the difference between NULL, '\0' and 0","195700","","<p>In C, there appear to be differences between various values of zero -- <code>NULL</code>, <code>NUL</code> and <code>0</code>.</p>

<p>I know that the ASCII character <code>'0'</code> evaluates to <code>48</code> or <code>0x30</code>.</p>

<p>The <code>NULL</code> pointer is usually defined as:</p>

<pre><code>#define NULL 0
</code></pre>

<p>Or</p>

<pre><code>#define NULL (void *)0
</code></pre>

<p>In addition, there is the <code>NUL</code> character <code>'\0'</code> which seems to evaluate to <code>0</code> as well.</p>

<p>Are there times when these three values can not be equal?</p>

<p>Is this also true on 64 bit systems?</p>
","<p><strong>Note:</strong> This answer applies to the C language, not C++.</p>

<hr>

<h2>Null Pointers</h2>

<p>The integer constant literal <code>0</code> has different meanings depending upon the context in which it's used. In all cases, it is still an integer constant with the value <code>0</code>, it is just described in different ways.</p>

<p>If a pointer is being compared to the constant literal <code>0</code>, then this is a check to see if the pointer is a null pointer. This <code>0</code> is then referred to as a null pointer constant. The C standard defines that <code>0</code> cast to the type <code>void *</code> is both a null pointer and a null pointer constant.</p>

<p>Additionally, to help readability, the macro <code>NULL</code> is provided in the header file <code>stddef.h</code>. Depending upon your compiler it might be possible to <code>#undef NULL</code> and redefine it to something wacky.</p>

<p>Therefore, here are some valid ways to check for a null pointer:</p>

<pre><code>if (pointer == NULL)
</code></pre>

<p><code>NULL</code> is defined to compare equal to a null pointer.  It is implementation defined what the actual definition of <code>NULL</code> is, as long as it is a valid null pointer constant.</p>

<pre><code>if (pointer == 0)
</code></pre>

<p><code>0</code> is another representation of the null pointer constant.</p>

<pre><code>if (!pointer)
</code></pre>

<p>This <code>if</code> statement implicitly checks ""is not 0"", so we reverse that to mean ""is 0"".</p>

<p>The following are INVALID ways to check for a null pointer:</p>

<pre><code>int mynull = 0;
&lt;some code&gt;
if (pointer == mynull)
</code></pre>

<p>To the compiler this is not a check for a null pointer, but an equality check on two variables. This <em>might</em> work if mynull never changes in the code and the compiler optimizations constant fold the 0 into the if statement, but this is not guaranteed and the compiler has to produce at least one diagnostic message (warning or error) according to the C Standard.</p>

<p>Note that what is a null pointer in the C language. It does not matter on the underlying architecture. If the underlying architecture has a null pointer value defined as address 0xDEADBEEF, then it is up to the compiler to sort this mess out.</p>

<p>As such, even on this funny architecture, the following ways are still valid ways to check for a null pointer:</p>

<pre><code>if (!pointer)
if (pointer == NULL)
if (pointer == 0)
</code></pre>

<p>The following are INVALID ways to check for a null pointer:</p>

<pre><code>#define MYNULL (void *) 0xDEADBEEF
if (pointer == MYNULL)
if (pointer == 0xDEADBEEF)
</code></pre>

<p>as these are seen by a compiler as normal comparisons. </p>

<h2>Null Characters</h2>

<p><code>'\0'</code> is defined to be a null character - that is a character with all bits set to zero. This has nothing to do with pointers. However you may see something similar to this code:</p>

<pre><code>if (!*string_pointer)
</code></pre>

<p>checks if the string pointer is pointing at a null character</p>

<pre><code>if (*string_pointer)
</code></pre>

<p>checks if the string pointer is pointing at a non-null character</p>

<p>Don't get these confused with null pointers. Just because the bit representation is the same, and this allows for some convenient cross over cases, they are not really the same thing. </p>

<p>Additionally, <code>'\0'</code> is (like all character literals) an integer constant, in this case with the value zero.  So <code>'\0'</code> is completely equivalent to an unadorned <code>0</code> integer constant - the only difference is in the <em>intent</em> that it conveys to a human reader (""I'm using this as a null character."").</p>

<h2>References</h2>

<p>See <a href=""http://c-faq.com/null/ptrtest.html"" rel=""noreferrer"">Question 5.3 of the comp.lang.c FAQ</a> for more.
See <a href=""http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1124.pdf"" rel=""noreferrer"">this pdf</a> for the C standard. Check out sections 6.3.2.3 Pointers, paragraph 3.</p>
","1296865"
"""Unresolved inclusion"" error with Eclipse CDT for C standard library headers","194747","","<p>I set up CDT for eclipse and wrote a simple hello world C program:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void){
    puts(""Hello, world."");
    return 0;
}
</code></pre>

<p>The program builds and runs correctly, but eclipse keeps showing this yellow question mark by the side of inclusion statement that says <code>""Unresolved inclusion: &lt;stdio.h&gt;""</code> when I put mouse over it.</p>

<p>It doesn't affect running of the program but I find it rather annoying.</p>

<p>Does anyone have any idea how to remove it ?</p>
","<p>The compiler Eclipse is using is able to resolve the symbols just fine, so the code will compile fine.</p>

<p>But the code-completion/preprocessor Eclipse is using doesn't know where stdio.h exists.</p>

<p>You need to specify the filesystem path where stdio.h is located.</p>

<p>See: <a href=""http://help.eclipse.org/galileo/index.jsp?topic=/org.eclipse.cdt.doc.user/tasks/cdt_t_proj_paths.htm"" rel=""noreferrer"">http://help.eclipse.org/galileo/index.jsp?topic=/org.eclipse.cdt.doc.user/tasks/cdt_t_proj_paths.htm</a></p>
","9337926"
"How to print binary number via printf","194008","","<blockquote>
  <p><strong>Possible Duplicate:</strong> <br/>
  <a href=""https://stackoverflow.com/questions/111928/is-there-a-printf-converter-to-print-in-binary-format"">Is there a printf converter to print in binary format?</a></p>
</blockquote>



<p>Here is my program</p>

<pre><code>#include&lt;stdio.h&gt;
int main ()
{
    int i,a=2;
    i=~a;
    printf(""a=%d\ni=%d\n"",a,i);

    return 0;
}
</code></pre>

<p>The output is</p>

<pre><code>a=2
i=-3
</code></pre>

<p>I want this to print in binary. There are %x, %o, and %d which are for hexadecimal, octal, and decimal number, but what is for printing binary in printf?</p>
","<p>printf() doesn't directly support that. Instead you have to make your own function.</p>

<p>Something like:</p>

<pre><code>while (n) {
    if (n &amp; 1)
        printf(""1"");
    else
        printf(""0"");

    n &gt;&gt;= 1;
}
printf(""\n"");
</code></pre>
","6373240"
"C/C++ check if one bit is set in, i.e. int variable","193646","","<pre><code>int temp = 0x5E; // in binary 0b1011110.
</code></pre>

<p>Is there such a way to check if bit 3 in temp is 1 or 0 without bit shifting and masking.</p>

<p>Just want to know if there is some built in function for this, or am I forced to write one myself.</p>
","<p>In C, if you want to hide bit manipulation, you can write a macro:</p>

<pre><code>#define CHECK_BIT(var,pos) ((var) &amp; (1&lt;&lt;(pos)))
</code></pre>

<p>and use it this way:</p>

<pre><code>CHECK_BIT(temp, 3)
</code></pre>

<p>In C++, you can use <a href=""http://www.cppreference.com/wiki/stl/bitset/start"" rel=""noreferrer"">std::bitset</a>.</p>
","523737"
"Is there a function to copy an array in C/C++?","192996","","<p>I am a Java programmer learning C/C++. So I know that Java has a function like System.arraycopy(); to copy an array. I was wondering if there is a function in C or C++ to copy an array. I was only able to find implementation to copy an array by using for loop, pointers,etc. Is there a function that I can use to copy an array?</p>
","<p>Since C++11, you can copy arrays directly with <code>std::array</code>:</p>

<pre><code>std::array&lt;int,4&gt; A = {10,20,30,40};
std::array&lt;int,4&gt; B = A; //copy array A into array B
</code></pre>

<p>Here is the documentation about <a href=""http://en.cppreference.com/w/cpp/container/array"">std::array</a></p>
","16137997"
"How to use shared memory with Linux in C","192974","","<p>I have a bit of an issue with one of my projects. </p>

<p>I have been trying to find a well documented example of using shared memory with <code>fork()</code> but to no success.</p>

<p>Basically the scenario is that when the user starts the program, I need to store two values in shared memory: <strong>current_path</strong> which is a <em>char*</em> and a <strong>file_name</strong> which is also <em>char*</em>.</p>

<p>Depending on the command arguments, a new process is kicked off with <code>fork()</code> and that process needs to read and modify the <strong>current_path</strong> variable stored in shared memory while the <strong>file_name</strong> variable is read only.</p>

<p>Is there a good tutorial on shared memory with example code (if possible) that you can direct me to?</p>

<p>Thanks,
bleepzter</p>
","<p>There are two approaches: <code>shmget</code> and <code>mmap</code>. I'll talk about <code>mmap</code>, since it's more modern and flexible, but you can take a look at <code>man shmget</code> (<a href=""http://www.cs.cf.ac.uk/Dave/C/node27.html"" rel=""noreferrer"">or this tutorial</a>) if you'd rather use the old-style tools.</p>

<p>The <code>mmap()</code> function can be used to allocate memory buffers with highly customizable parameters to control access and permissions, and to back them with file-system storage if necessary.</p>

<p>The following function creates an in-memory buffer that a process can share with its children:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/mman.h&gt;

void* create_shared_memory(size_t size) {
  // Our memory buffer will be readable and writable:
  int protection = PROT_READ | PROT_WRITE;

  // The buffer will be shared (meaning other processes can access it), but
  // anonymous (meaning third-party processes cannot obtain an address for it),
  // so only this process and its children will be able to use it:
  int visibility = MAP_ANONYMOUS | MAP_SHARED;

  // The remaining parameters to `mmap()` are not important for this use case,
  // but the manpage for `mmap` explains their purpose.
  return mmap(NULL, size, protection, visibility, 0, 0);
}
</code></pre>

<p>The following is an example program that uses the function defined above to allocate a buffer. The parent process will write a message, fork, and then wait for its child to modify the buffer. Both processes can read and write the shared memory.</p>

<pre><code>#include &lt;string.h&gt;
#include &lt;unistd.h&gt;

int main() {
  char* parent_message = ""hello"";  // parent process will write this message
  char* child_message = ""goodbye""; // child process will then write this one

  void* shmem = create_shared_memory(128);

  memcpy(shmem, parent_message, sizeof(parent_message));

  int pid = fork();

  if (pid == 0) {
    printf(""Child read: %s\n"", shmem);
    memcpy(shmem, child_message, sizeof(child_message));
    printf(""Child wrote: %s\n"", shmem);

  } else {
    printf(""Parent read: %s\n"", shmem);
    sleep(1);
    printf(""After 1s, parent read: %s\n"", shmem);
  }
}
</code></pre>
","5656561"
"C compile : collect2: error: ld returned 1 exit status","192811","","<p>I tried to search for that bug online but all the posts are for C++.</p>

<p>This is the message:</p>

<blockquote>
  <p>test1.o: In function <code>ReadDictionary':
  /home/johnny/Desktop/haggai/test1.c:13: undefined reference to</code>CreateDictionary'
  collect2: error: ld returned 1 exit status
  make: *** [test1] Error 1</p>
</blockquote>

<p>super simple code and can't understand what's the problem</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include ""dict.h""
#include ""hash.h""


pHash ReadDictionary() {
    /* This function reads a dictionary line by line from the standard input. */
    pHash dictionary;
    char entryLine[100] = """";
    char *word, *translation;

    dictionary = CreateDictionary();
    while (scanf(""%s"", entryLine) == 1) { // Not EOF
        word = strtok(entryLine, ""="");
        translation = strtok(NULL, ""="");
        AddTranslation(dictionary, word, translation);
    }
    return dictionary;
}

int main() {
    pHash dicti;
...
</code></pre>

<p>now this is the header dict.h</p>

<pre><code>#ifndef _DICT_H_
#define _DICT_H_

#include ""hash.h""

pHash CreateDictionary();
...

#endif
</code></pre>

<p>and here is the dict.c</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include ""hash.h""
#include ""dict.h""


pHash CreateDectionary()
{
    pHash newDict;
    newDict= HashCreate(650, HashWord, PrintEntry, CompareWords, GetEntryKey, DestroyEntry);
    return newDict;
}
</code></pre>

<p>and if you wanna check hash.h</p>

<pre><code>#ifndef _HASH_H_
#define _HASH_H_

//type defintions//
typedef enum {FAIL = 0, SUCCESS} Result;
typedef enum {SAME = 0, DIFFERENT} CompResult;

typedef struct _Hash Hash, *pHash;

typedef void* pElement;
typedef void* pKey;

//function types//
typedef int (*HashFunc) (pKey key, int size);
typedef Result (*PrintFunc) (pElement element);
typedef CompResult (*CompareFunc) (pKey key1, pKey key2);
typedef pKey (*GetKeyFunc) (pElement element);
typedef void (*DestroyFunc)(pElement element);
...

//interface functions//

#endif
</code></pre>

<p>Maybe it will be easier if I give you the files here?</p>

<p>Any way, I will be happy for tips on how to understand the problem</p>
","<p>Your problem is the typo in the function CreateD<strong>e</strong>ctionary().You should change it to CreateD<strong>i</strong>ctionary(). 
 collect2: error: ld returned 1 exit status is the same problem in both C and C++, usually it means that you have unresolved symbols. In your case is the typo that i mentioned before.</p>
","27593367"
"Is there an alternative sleep function in C to milliseconds?","192184","","<p>I have some source code that was compiled on Windows. I am converting it to run on Red Hat Linux. </p>

<p>The source code has included the <code>&lt;windows.h&gt;</code> header file and the programmer has used the <code>Sleep()</code> function to wait for a period of milliseconds. This won't work on the Linux.</p>

<p>However, I can use the <code>sleep(seconds)</code> function, but that uses integer in seconds. I don't want to convert milliseconds to seconds. Is there a alternative sleep function that I can use with gcc compiling on Linux?</p>
","<p>Yes - older <a href=""http://en.wikipedia.org/wiki/POSIX"" rel=""noreferrer"">POSIX</a> standards defined <a href=""http://man7.org/linux/man-pages/man3/usleep.3.html"" rel=""noreferrer""><code>usleep()</code></a>, so this is available on Linux:</p>

<blockquote>
<pre><code>   int usleep(useconds_t usec);
</code></pre>
  
  <p>DESCRIPTION</p>
  
  <p>The  usleep()  function  suspends execution of the calling process for
         (at least) usec microseconds.  The sleep may be lengthened slightly by
         any system activity or by the time spent processing the call or by the
         granularity of system timers.</p>
</blockquote>

<p><code>usleep()</code> takes <strong>microseconds</strong>, so you will have to multiply the input by 1000 in order to sleep in milliseconds.</p>

<hr>

<p><code>usleep()</code> has since been deprecated and subsequently removed from POSIX; for new code, <a href=""http://man7.org/linux/man-pages/man2/nanosleep.2.html"" rel=""noreferrer""><code>nanosleep()</code></a> is preferred:</p>

<blockquote>
<pre><code>   #include &lt;time.h&gt;

   int nanosleep(const struct timespec *req, struct timespec *rem);
</code></pre>
  
  <p>DESCRIPTION</p>
  
  <p><code>nanosleep()</code> suspends the execution of the calling thread until either at least the time specified in <code>*req</code> has elapsed, or the
  delivery of a signal that triggers the invocation of a handler in the
  calling thread or that terminates the process.</p>
  
  <p>The structure timespec is used to specify intervals of time with nanosecond precision.  It is defined as follows:</p>

<pre><code>       struct timespec {
           time_t tv_sec;        /* seconds */
           long   tv_nsec;       /* nanoseconds */
       };
</code></pre>
</blockquote>
","1157217"
"Use of min and max functions in C++","192180","","<p>From C++, are <code>min</code> and <code>max</code> preferable over <code>fmin</code> and <code>fmax</code>?  For comparing two integers, do they provide basically the same functionality? </p>

<p>Do you tend to use one of these sets of functions or do you prefer to write your own (perhaps to improve efficiency, portability, flexibility, etc.)?</p>

<p><strong><em>Notes:</em></strong></p>

<ol>
<li><p>The C++ Standard Template Library (STL) declares the <code>min</code> and <code>max</code> functions in the standard C++ <a href=""http://en.wikipedia.org/wiki/Algorithm_(C%2B%2B)"" rel=""noreferrer"">algorithm</a> header.  </p></li>
<li><p>The C standard (C99) provides the <code>fmin</code> and <code>fmax</code> function in the standard C <a href=""http://en.wikipedia.org/wiki/Math.h"" rel=""noreferrer"">math.h</a> header.</p></li>
</ol>

<p>Thanks in advance!</p>
","<p><code>fmin</code> and <code>fmax</code> are specifically for use with floating point numbers (hence the ""f""). If you use it for ints, you may suffer performance or precision losses due to conversion, function call overhead, etc. depending on your compiler/platform.</p>

<p><code>std::min</code> and <code>std::max</code> are template functions (defined in header <a href=""http://en.cppreference.com/w/cpp/header/algorithm"" rel=""noreferrer""><code>&lt;algorithm&gt;</code></a>) which work on any type with a less-than (<code>&lt;</code>) operator, so they can operate on any data type that allows such a comparison. You can also provide your own comparison function if you don't want it to work off <code>&lt;</code>.</p>

<p>This is safer since you have to explicitly convert arguments to match when they have different types. The compiler won't let you accidentally convert a 64-bit int into a 64-bit float, for example. This reason alone should make the templates your default choice. (Credit to Matthieu M &amp; bk1e)</p>

<p>Even when used with floats the template <strong><em>may</em></strong> win in performance. A compiler always has the option of inlining calls to template functions since the source code is part of the compilation unit. Sometimes it's <em>impossible</em> to inline a call to a library function, on the other hand (shared libraries, absence of link-time optimization, etc.).</p>
","1632175"
"Most Efficient Algorithm for Bit Reversal ( from MSB->LSB to LSB->MSB) in C","192150","","<p>What is the best algorithm to achieve the following:</p>

<p><code>0010 0000 =&gt; 0000 0100</code></p>

<p>The conversion is from MSB->LSB to LSB->MSB.  All bits must be reversed; that is, this is <em>not</em> endianness-swapping.</p>
","<p><strong>NOTE</strong>: All algorithms below are in C, but should be portable to your language of choice (just don't look at me when they're not as fast :)</p>

<h2>Options</h2>

<p><strong>Low Memory (32-bit <code>int</code>, 32-bit machine)(from <a href=""http://aggregate.org/MAGIC/#Bit%20Reversal"" rel=""noreferrer"">here</a>):</strong></p>

<pre><code>unsigned int
reverse(register unsigned int x)
{
    x = (((x &amp; 0xaaaaaaaa) &gt;&gt; 1) | ((x &amp; 0x55555555) &lt;&lt; 1));
    x = (((x &amp; 0xcccccccc) &gt;&gt; 2) | ((x &amp; 0x33333333) &lt;&lt; 2));
    x = (((x &amp; 0xf0f0f0f0) &gt;&gt; 4) | ((x &amp; 0x0f0f0f0f) &lt;&lt; 4));
    x = (((x &amp; 0xff00ff00) &gt;&gt; 8) | ((x &amp; 0x00ff00ff) &lt;&lt; 8));
    return((x &gt;&gt; 16) | (x &lt;&lt; 16));

}
</code></pre>

<p>From the famous <a href=""http://graphics.stanford.edu/~seander/bithacks.html"" rel=""noreferrer"">Bit Twiddling Hacks page</a>:</p>

<p><strong>Fastest (lookup table)</strong>:</p>

<pre><code>static const unsigned char BitReverseTable256[] = 
{
  0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0, 
  0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8, 0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8, 
  0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4, 
  0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC, 
  0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2, 0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2, 
  0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
  0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6, 
  0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE, 0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
  0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
  0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9, 
  0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5, 0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
  0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
  0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3, 
  0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB, 0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
  0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7, 
  0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
};

unsigned int v; // reverse 32-bit value, 8 bits at time
unsigned int c; // c will get v reversed

// Option 1:
c = (BitReverseTable256[v &amp; 0xff] &lt;&lt; 24) | 
    (BitReverseTable256[(v &gt;&gt; 8) &amp; 0xff] &lt;&lt; 16) | 
    (BitReverseTable256[(v &gt;&gt; 16) &amp; 0xff] &lt;&lt; 8) |
    (BitReverseTable256[(v &gt;&gt; 24) &amp; 0xff]);

// Option 2:
unsigned char * p = (unsigned char *) &amp;v;
unsigned char * q = (unsigned char *) &amp;c;
q[3] = BitReverseTable256[p[0]]; 
q[2] = BitReverseTable256[p[1]]; 
q[1] = BitReverseTable256[p[2]]; 
q[0] = BitReverseTable256[p[3]];
</code></pre>

<p>You can extend this idea to 64-bit <code>int</code>s, or trade off memory for speed (assuming your L1 Data Cache is large enough), and reverse 16-bits at a time with a 64K-entry lookup table.</p>

<hr>

<h2>Others</h2>

<p><strong>Simple</strong></p>

<pre><code>unsigned int v;     // input bits to be reversed
unsigned int r = v &amp; 1; // r will be reversed bits of v; first get LSB of v
int s = sizeof(v) * CHAR_BIT - 1; // extra shift needed at end

for (v &gt;&gt;= 1; v; v &gt;&gt;= 1)
{   
  r &lt;&lt;= 1;
  r |= v &amp; 1;
  s--;
}
r &lt;&lt;= s; // shift when v's highest bits are zero
</code></pre>

<p><strong>Faster (32-bit processor)</strong></p>

<pre><code>unsigned char b = x;
b = ((b * 0x0802LU &amp; 0x22110LU) | (b * 0x8020LU &amp; 0x88440LU)) * 0x10101LU &gt;&gt; 16; 
</code></pre>

<p><strong>Faster (64-bit processor)</strong></p>

<pre><code>unsigned char b; // reverse this (8-bit) byte
b = (b * 0x0202020202ULL &amp; 0x010884422010ULL) % 1023;
</code></pre>

<p>If you want to do this on a 32-bit <code>int</code>, just reverse the bits in each bytes, and reverse the order of the bytes.  That is:</p>

<pre><code>unsigned int toReverse;
unsigned int reversed;
unsigned char inByte0 = (toReverse &amp; 0xFF);
unsigned char inByte1 = (toReverse &amp; 0xFF00) &gt;&gt; 8;
unsigned char inByte2 = (toReverse &amp; 0xFF0000) &gt;&gt; 16;
unsigned char inByte3 = (toReverse &amp; 0xFF000000) &gt;&gt; 24;
reversed = (reverseBits(inByte0) &lt;&lt; 24) | (reverseBits(inByte1) &lt;&lt; 16) | (reverseBits(inByte2) &lt;&lt; 8) | (reverseBits(inByte3);
</code></pre>

<hr>

<h2>Results</h2>

<p>I benchmarked the two most promising solutions, the lookup table, and bitwise-AND (the first one).  The test machine is a laptop w/ 4GB of DDR2-800 and a Core 2 Duo T7500 @ 2.4GHz, 4MB L2 Cache; YMMV.  I used <em>gcc</em> 4.3.2 on 64-bit Linux.  OpenMP (and the GCC bindings) were used for high-resolution timers.</p>

<p><strong>reverse.c</strong></p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;omp.h&gt;

unsigned int
reverse(register unsigned int x)
{
    x = (((x &amp; 0xaaaaaaaa) &gt;&gt; 1) | ((x &amp; 0x55555555) &lt;&lt; 1));
    x = (((x &amp; 0xcccccccc) &gt;&gt; 2) | ((x &amp; 0x33333333) &lt;&lt; 2));
    x = (((x &amp; 0xf0f0f0f0) &gt;&gt; 4) | ((x &amp; 0x0f0f0f0f) &lt;&lt; 4));
    x = (((x &amp; 0xff00ff00) &gt;&gt; 8) | ((x &amp; 0x00ff00ff) &lt;&lt; 8));
    return((x &gt;&gt; 16) | (x &lt;&lt; 16));

}

int main()
{
    unsigned int *ints = malloc(100000000*sizeof(unsigned int));
    unsigned int *ints2 = malloc(100000000*sizeof(unsigned int));
    for(unsigned int i = 0; i &lt; 100000000; i++)
      ints[i] = rand();

    unsigned int *inptr = ints;
    unsigned int *outptr = ints2;
    unsigned int *endptr = ints + 100000000;
    // Starting the time measurement
    double start = omp_get_wtime();
    // Computations to be measured
    while(inptr != endptr)
    {
      (*outptr) = reverse(*inptr);
      inptr++;
      outptr++;
    }
    // Measuring the elapsed time
    double end = omp_get_wtime();
    // Time calculation (in seconds)
    printf(""Time: %f seconds\n"", end-start);

    free(ints);
    free(ints2);

    return 0;
}
</code></pre>

<p><strong>reverse_lookup.c</strong></p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;omp.h&gt;

static const unsigned char BitReverseTable256[] = 
{
  0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0, 
  0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8, 0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8, 
  0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4, 
  0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC, 
  0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2, 0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2, 
  0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
  0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6, 
  0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE, 0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
  0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
  0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9, 
  0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5, 0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
  0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
  0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3, 
  0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB, 0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
  0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7, 
  0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
};

int main()
{
    unsigned int *ints = malloc(100000000*sizeof(unsigned int));
    unsigned int *ints2 = malloc(100000000*sizeof(unsigned int));
    for(unsigned int i = 0; i &lt; 100000000; i++)
      ints[i] = rand();

    unsigned int *inptr = ints;
    unsigned int *outptr = ints2;
    unsigned int *endptr = ints + 100000000;
    // Starting the time measurement
    double start = omp_get_wtime();
    // Computations to be measured
    while(inptr != endptr)
    {
    unsigned int in = *inptr;  

    // Option 1:
    //*outptr = (BitReverseTable256[in &amp; 0xff] &lt;&lt; 24) | 
    //    (BitReverseTable256[(in &gt;&gt; 8) &amp; 0xff] &lt;&lt; 16) | 
    //    (BitReverseTable256[(in &gt;&gt; 16) &amp; 0xff] &lt;&lt; 8) |
    //    (BitReverseTable256[(in &gt;&gt; 24) &amp; 0xff]);

    // Option 2:
    unsigned char * p = (unsigned char *) &amp;(*inptr);
    unsigned char * q = (unsigned char *) &amp;(*outptr);
    q[3] = BitReverseTable256[p[0]]; 
    q[2] = BitReverseTable256[p[1]]; 
    q[1] = BitReverseTable256[p[2]]; 
    q[0] = BitReverseTable256[p[3]];

      inptr++;
      outptr++;
    }
    // Measuring the elapsed time
    double end = omp_get_wtime();
    // Time calculation (in seconds)
    printf(""Time: %f seconds\n"", end-start);

    free(ints);
    free(ints2);

    return 0;
}
</code></pre>

<p>I tried both approaches at several different optimizations, ran 3 trials at each level, and each trial reversed 100 million random unsigned ints.  For the lookup table option, I tried both schemes (options 1 and 2) given on the bitwise hacks page.  Results are shown below.</p>

<p><strong>Bitwise AND</strong></p>

<pre><code>mrj10@mjlap:~/code$ gcc -fopenmp -std=c99 -o reverse reverse.c
mrj10@mjlap:~/code$ ./reverse
Time: 2.000593 seconds
mrj10@mjlap:~/code$ ./reverse
Time: 1.938893 seconds
mrj10@mjlap:~/code$ ./reverse
Time: 1.936365 seconds
mrj10@mjlap:~/code$ gcc -fopenmp -std=c99 -O2 -o reverse reverse.c
mrj10@mjlap:~/code$ ./reverse
Time: 0.942709 seconds
mrj10@mjlap:~/code$ ./reverse
Time: 0.991104 seconds
mrj10@mjlap:~/code$ ./reverse
Time: 0.947203 seconds
mrj10@mjlap:~/code$ gcc -fopenmp -std=c99 -O3 -o reverse reverse.c
mrj10@mjlap:~/code$ ./reverse
Time: 0.922639 seconds
mrj10@mjlap:~/code$ ./reverse
Time: 0.892372 seconds
mrj10@mjlap:~/code$ ./reverse
Time: 0.891688 seconds
</code></pre>

<p><strong>Lookup Table (option 1)</strong></p>

<pre><code>mrj10@mjlap:~/code$ gcc -fopenmp -std=c99 -o reverse_lookup reverse_lookup.c
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.201127 seconds              
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.196129 seconds              
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.235972 seconds              
mrj10@mjlap:~/code$ gcc -fopenmp -std=c99 -O2 -o reverse_lookup reverse_lookup.c
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 0.633042 seconds              
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 0.655880 seconds              
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 0.633390 seconds              
mrj10@mjlap:~/code$ gcc -fopenmp -std=c99 -O3 -o reverse_lookup reverse_lookup.c
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 0.652322 seconds              
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 0.631739 seconds              
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 0.652431 seconds  
</code></pre>

<p><strong>Lookup Table (option 2)</strong></p>

<pre><code>mrj10@mjlap:~/code$ gcc -fopenmp -std=c99 -o reverse_lookup reverse_lookup.c
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.671537 seconds
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.688173 seconds
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.664662 seconds
mrj10@mjlap:~/code$ gcc -fopenmp -std=c99 -O2 -o reverse_lookup reverse_lookup.c
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.049851 seconds
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.048403 seconds
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.085086 seconds
mrj10@mjlap:~/code$ gcc -fopenmp -std=c99 -O3 -o reverse_lookup reverse_lookup.c
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.082223 seconds
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.053431 seconds
mrj10@mjlap:~/code$ ./reverse_lookup
Time: 1.081224 seconds
</code></pre>

<h2>Conclusion</h2>

<p><strong>Use the lookup table, with option 1</strong> (byte addressing is unsurprisingly slow) if you're concerned about performance.  If you need to squeeze every last byte of memory out of your system (and you might, if you care about the performance of bit reversal), the optimized versions of the bitwise-AND approach aren't too shabby either.</p>

<h2>Caveat</h2>

<p>Yes, I know the benchmark code is a complete hack.  Suggestions on how to improve it are more than welcome.  Things I know about:</p>

<ul>
<li>I don't have access to ICC.  This may be faster (please respond in a comment if you can test this out).</li>
<li>A 64K lookup table may do well on some modern microarchitectures with large L1D.</li>
<li>-mtune=native didn't work for -O2/-O3 (<code>ld</code> blew up with some crazy symbol redefinition error), so I don't believe the generated code is tuned for my microarchitecture.</li>
<li>There may be a way to do this slightly faster with SSE.  I have no idea how, but with fast replication, packed bitwise AND, and swizzling instructions, there's got to be something there.</li>
<li>I know only enough x86 assembly to be dangerous; here's the code GCC generated on -O3 for option 1, so somebody more knowledgable than myself can check it out:</li>
</ul>

<p><strong>32-bit</strong></p>

<pre><code>.L3:
movl    (%r12,%rsi), %ecx
movzbl  %cl, %eax
movzbl  BitReverseTable256(%rax), %edx
movl    %ecx, %eax
shrl    $24, %eax
mov     %eax, %eax
movzbl  BitReverseTable256(%rax), %eax
sall    $24, %edx
orl     %eax, %edx
movzbl  %ch, %eax
shrl    $16, %ecx
movzbl  BitReverseTable256(%rax), %eax
movzbl  %cl, %ecx
sall    $16, %eax
orl     %eax, %edx
movzbl  BitReverseTable256(%rcx), %eax
sall    $8, %eax
orl     %eax, %edx
movl    %edx, (%r13,%rsi)
addq    $4, %rsi
cmpq    $400000000, %rsi
jne     .L3
</code></pre>

<p>EDIT: I also tried using uint64_t's on my machine to see if there was any performance boost.  Performance was about 10% faster than 32-bit, and was nearly identical whether you were just using 64-bit types to reverse bits on two 32-bit ints at a time, or whether you were actually reversing bits in half as many 64-bit values.  The assembly code is shown below (for the former case, reversing bits for 2 32-bit ints at a time):</p>

<pre><code>.L3:
movq    (%r12,%rsi), %rdx
movq    %rdx, %rax
shrq    $24, %rax
andl    $255, %eax
movzbl  BitReverseTable256(%rax), %ecx
movzbq  %dl,%rax
movzbl  BitReverseTable256(%rax), %eax
salq    $24, %rax
orq     %rax, %rcx
movq    %rdx, %rax
shrq    $56, %rax
movzbl  BitReverseTable256(%rax), %eax
salq    $32, %rax
orq     %rax, %rcx
movzbl  %dh, %eax
shrq    $16, %rdx
movzbl  BitReverseTable256(%rax), %eax
salq    $16, %rax
orq     %rax, %rcx
movzbq  %dl,%rax
shrq    $16, %rdx
movzbl  BitReverseTable256(%rax), %eax
salq    $8, %rax
orq     %rax, %rcx
movzbq  %dl,%rax
shrq    $8, %rdx
movzbl  BitReverseTable256(%rax), %eax
salq    $56, %rax
orq     %rax, %rcx
movzbq  %dl,%rax
shrq    $8, %rdx
movzbl  BitReverseTable256(%rax), %eax
andl    $255, %edx
salq    $48, %rax
orq     %rax, %rcx
movzbl  BitReverseTable256(%rdx), %eax
salq    $40, %rax
orq     %rax, %rcx
movq    %rcx, (%r13,%rsi)
addq    $8, %rsi
cmpq    $400000000, %rsi
jne     .L3
</code></pre>
","746203"
"C error: undefined reference to function, but it IS defined","191264","","<p>Just a simple program, but I keep getting this compiler error. I'm using MinGW for the compiler.</p>

<p>Here's the header file, <strong>point.h</strong>:</p>

<pre><code>//type for a Cartesian point
typedef struct {
  double x;
  double y;
} Point;

Point create(double x, double y);
Point midpoint(Point p, Point q);
</code></pre>

<p>And here's <strong>point.c</strong>:</p>

<pre><code>//This is the implementation of the point type
#include ""point.h""

int main() {
  return 0;
}
Point create(double x, double y) {
  Point p;
  p.x = x;
  p.y = y;
  return p;
}

Point midpoint(Point p, Point q) {
  Point mid;
  mid.x = (p.x + q.x) / 2;
  mid.y = (p.y + q.y) / 2;
  return mid;
}
</code></pre>

<p>And here's where the compiler issue comes in. I keep getting:</p>

<blockquote>
  <p>testpoint.c: undefined reference to 'create(double x, double y)'</p>
</blockquote>

<p>While it is defined in point.c.</p>

<p>This is a separate file called <strong>testpoint.c</strong>:</p>

<pre><code>#include ""point.h""
#include &lt;assert.h&gt;
#include &lt;stdio.h&gt;
int main() {
  double x = 1;
  double y = 1;
  Point p = create(x, y);

  assert(p.x == 1);
  return 0;
}
</code></pre>

<p>I'm at a loss as to what the issue could be.</p>
","<p>How are you doing the compiling and linking? You'll need to specify both files, something like:</p>

<pre><code>gcc testpoint.c point.c
</code></pre>

<p>...so that it knows to link the functions from both together. With the code as it's written right now, however, you'll then run into the opposite problem: multiple definitions of <code>main</code>. You'll need/want to eliminate one (undoubtedly the one in point.c).</p>

<p>Edit: In a larger program, you typically compile and link separately to avoid re-compiling anything that hasn't changed. You normally specify what needs to be done via a makefile, and use <code>make</code> to do the work. In this case you'd have something like this:</p>

<pre><code>OBJS=testpoint.o point.o

testpoint.exe: $(OBJS)
    gcc $(OJBS)
</code></pre>

<p>The first is just a macro for the names of the object files. You get is expanded with <code>$(OBJS)</code>. The second is a rule to tell make 1) that the executable depends on the object files, and 2) telling it how to create the executable when/if it's out of date compared to an object file.</p>

<p>Most versions of make (including the one in MinGW I'm pretty sure) have a built-in ""implicit rule"" to tell them how to create an object file from a C source file. It normally looks roughly like this:</p>

<pre><code>.c.o:
    $(CC) -c $(CFLAGS) $&lt;
</code></pre>

<p>This assumes the name of the C compiler is in a macro named CC (implicitly defined like <code>CC=gcc</code>) and allows you to specify any flags you care about in a macro named <code>CFLAGS</code> (e.g., <code>CFLAGS=-O3</code> to turn on optimization) and <code>$&lt;</code> is a special macro that expands to the name of the source file.</p>

<p>You typically store this in a file named <code>Makefile</code>, and to build your program, you just type <code>make</code> at the command line. It implicitly looks for a file named <code>Makefile</code>, and runs whatever rules it contains.</p>

<p>The good point of this is that <code>make</code> automatically looks at the timestamps on the files, so it will only re-compile the files that have changed since the last time you compiled them (i.e., files where the "".c"" file has a more recent time-stamp than the matching "".o"" file).</p>

<p>Also note that 1) there are lots of variations in how to use make when it comes to large projects, and 2) there are also lots of alternatives to make. I've only hit on the bare minimum of high points here.</p>
","5559274"
"How to correctly use the extern keyword in C","191097","","<p>My question is about when a function should be referenced with the <code>extern</code> keyword in C.</p>

<p>I am failing to see when this should be used in practice.  As I am writing a program all of the functions that I use are made available through the header files I have included.  So why would it be useful to <code>extern</code> to get access to something that was not exposed in the header file?</p>

<p>I could be thinking about how <code>extern</code> works incorrectly, and if so please correct me.</p>

<p><strong>Edit:</strong> Should you <code>extern</code> something when it is the default declaration without the keyword in a header file?</p>
","<p>""<code>extern</code>"" changes the linkage. With the keyword, the function / variable is assumed to be available somewhere else and the resolving is deferred to the linker.</p>

<p>There's a difference between ""extern"" on functions and on variables: on variables it doesn't instantiate the variable itself, i.e. doesn't allocate any memory. This needs to be done somewhere else. Thus it's important if you want to import the variable from somewhere else. For functions, this only tells the compiler that linkage is extern. As this is the default (you use the keyword ""static"" to indicate that a function is not bound using extern linkage) you don't need to use it explicitly.</p>
","496476"
"What is the format specifier for unsigned short int?","190649","","<p>I have the following program </p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    unsigned short int length = 10; 

    printf(""Enter length : "");
    scanf(""%u"", &amp;length);

    printf(""value is %u \n"", length);

    return 0;
}
</code></pre>

<p>Which when compiled using <code>gcc filename.c</code> issued the following warning (in the <code>scanf()</code> line). </p>

<p><code>warning: format ‘%u’ expects argument of type ‘unsigned int *’, but argument 2 has type ‘short unsigned int *’ [-Wformat]</code></p>

<p>I then referred the <code>C99 specification - 7.19.6 Formatted input/output functions</code> and couldn't understand the correct format specifier when using the length modifiers (like <code>short</code>, <code>long</code>, etc) with <code>unsigned</code> for <code>int</code> data type.</p>

<p>Is <code>%u</code> the correct specifier <code>unsigned short int</code>? If so why am I getting the above mentioned warning?! </p>

<p>EDIT: 
Most of the time, I was trying <code>%uh</code> and it was still giving the warning. </p>
","<p>Try using the <code>""%h""</code> modifier:</p>

<pre><code>scanf(""%hu"", &amp;length);
        ^
</code></pre>

<blockquote>
  <p>ISO/IEC 9899:201x - 7.21.6.1-7</p>
  
  <p>Specifies that a following d , i , o , u , x , X , or n conversion
  specifier applies to an argument with type <strong>pointer to short or
  unsigned short</strong>.</p>
</blockquote>
","8699826"
"Print the Address a Pointer Contains in C","190081","","<p>I want to do something that seems fairly simple. I get results but the problem is, I have no way to know if the results are correct.</p>

<p>I'm working in C and I have two pointers; I want to print the contents of the pointer. I don't want to dereference the pointer to get the value pointed at, I just want the address that the pointer has stored. </p>

<p>I wrote the following code and what I need to know is if it is right and if not, how can I correct it.</p>

<pre><code>/* item one is a parameter and it comes in as: const void* item1   */
const Emp* emp1 = (const Emp*) item1; 

printf(""\n comp1-&gt; emp1 = %p; item1 = %p \n"", emp1, item1 );
</code></pre>

<p>While I'm posting this (and the reason it is important that it is correct) is that I eventually need to do this for a pointer-to-a-pointer. That is:</p>

<pre><code>const Emp** emp1 = (const Emp**) item1; 
</code></pre>
","<p>What you have is correct.  Of course, you'll see that emp1 and item1 have the same pointer value.</p>
","1055971"
"How to measure time in milliseconds using ANSI C?","189527","","<p>Using only ANSI C, is there any way to measure time with milliseconds precision or more? I was browsing time.h but I only found second precision functions.</p>
","<p>There is no ANSI C function that provides better than 1 second time resolution but the POSIX function <a href=""http://www.opengroup.org/onlinepubs/000095399/functions/gettimeofday.html"" rel=""noreferrer""><code>gettimeofday</code></a> provides microsecond resolution.  The clock function only measures the amount of time that a process has spent executing and is not accurate on many systems.</p>

<p>You can use this function like this:</p>

<pre><code>struct timeval tval_before, tval_after, tval_result;

gettimeofday(&amp;tval_before, NULL);

// Some code you want to time, for example:
sleep(1);

gettimeofday(&amp;tval_after, NULL);

timersub(&amp;tval_after, &amp;tval_before, &amp;tval_result);

printf(""Time elapsed: %ld.%06ld\n"", (long int)tval_result.tv_sec, (long int)tval_result.tv_usec);
</code></pre>

<p>This returns <code>Time elapsed: 1.000870</code> on my machine.</p>
","361492"
"How to read string from keyboard using C? getting segmentation fault passing in char *","188513","","<p>I want to read a string entered by the user. I don't know the length of the string. As there are no strings in C I declared a pointer:</p>

<pre><code>char * word;
</code></pre>

<p>and used <code>scanf</code> to read input from the keyboard:</p>

<pre><code>scanf(""%s"" , word) ;
</code></pre>

<p>but I got a segmentation fault.</p>

<p>How can I read input from the keyboard in C when the length is unknown ?</p>
","<p>You have no storage allocated for <code>word</code> - it's just a <a href=""http://en.wikipedia.org/wiki/Dangling_pointer"" rel=""noreferrer"">dangling pointer</a>.</p>

<p>Change:</p>

<pre><code>char * word;
</code></pre>

<p>to:</p>

<pre><code>char word[256];
</code></pre>

<p>Note that 256 is an arbitrary choice here - the size of this buffer needs to be greater than the largest possible string that you might encounter.</p>

<p>Note also that <a href=""http://linux.die.net/man/3/fgets"" rel=""noreferrer"">fgets</a> is a better (safer) option then <a href=""http://linux.die.net/man/3/scanf"" rel=""noreferrer"">scanf</a> for reading arbitrary length strings, in that it takes a <code>size</code> argument, which in turn helps to prevent buffer overflows:</p>

<pre><code> fgets(word, sizeof(word), stdin);
</code></pre>
","7709467"
"Returning an array using C","188167","","<p>I am relatively new to C and I need some help with methods dealing with arrays. Coming from Java programming, I am used to being able to say <code>int [] method()</code>in order to return an array. However, I have found out that with C you have to use pointers for arrays when you return them. Being a new programmer, I really do not understand this at all, even with the many forums I have looked through. </p>

<p>Basically, I am trying to write a method that returns a char array in C. I will provide the method (lets call it returnArray) with an array. It will create a new array from the previous array and return a pointer to it. I just need some help on how to get this started and how to read the pointer once it is sent out of the array. Any help explaining this is appreciated.</p>

<p><strong>Proposed Code Format for Array Returning Function</strong></p>

<pre><code>char *returnArray(char array []){
 char returned [10];
 //methods to pull values from array, interpret them, and then create new array
 return &amp;(returned[0]); //is this correct?
} 
</code></pre>

<p><strong>Caller of the Function</strong></p>

<pre><code>int main(){
 int i=0;
 char array []={1,0,0,0,0,1,1};
 char arrayCount=0;
 char* returnedArray = returnArray(&amp;arrayCount); ///is this correct?
 for (i=0; i&lt;10;i++)
  printf(%d, "","", returnedArray[i]);  //is this correctly formatted?
}
</code></pre>

<p><em>I have not tested this yet as my C compiler is not working at the moment but I would like to figure this out</em></p>
","<p>You can't return arrays from functions in C.  You also can't (shouldn't) do this:</p>

<pre><code>char *returnArray(char array []){
 char returned [10];
 //methods to pull values from array, interpret them, and then create new array
 return &amp;(returned[0]); //is this correct?
} 
</code></pre>

<p><code>returned</code> is created with automatic storage duration and references to it will become invalid once it leaves its declaring scope, i.e., when the function returns.</p>

<p>You will need to dynamically allocate the memory inside of the function or fill a preallocated buffer provided by the caller.</p>

<p><strong>Option 1:</strong> </p>

<p>dynamically allocate the memory inside of the function (caller responsible for deallocating <code>ret</code>)</p>

<pre><code>char *foo(int count) {
    char *ret = malloc(count);
    if(!ret)
        return NULL;

    for(int i = 0; i &lt; count; ++i) 
        ret[i] = i;

    return ret;
}
</code></pre>

<p>Call it like so:</p>

<pre><code>int main() {
    char *p = foo(10);
    if(p) {
        // do stuff with p
        free(p);
    }

    return 0;
}
</code></pre>

<p><strong>Option 2:</strong> </p>

<p>fill a preallocated buffer provided by the caller (caller allocates <code>buf</code> and passes to the function)</p>

<pre><code>void foo(char *buf, int count) {
    for(int i = 0; i &lt; count; ++i)
        buf[i] = i;
}
</code></pre>

<p>And call it like so:</p>

<pre><code>int main() {
    char arr[10] = {0};
    foo(arr, 10);
    // No need to deallocate because we allocated 
    // arr with automatic storage duration.
    // If we had dynamically allocated it
    // (i.e. malloc or some variant) then we 
    // would need to call free(arr)
}
</code></pre>
","11656585"
"how to get date and time value in C program","185585","","<p>I have something like this:</p>

<pre><code>char *current_day, *current_time;
system(""date +%F"");
system(""date +%T"");
</code></pre>

<p>It prints the current day and time in the stdout, but I want to get this output or assign them to the <code>current_day</code> and <code>current_time</code> variables, so that I can do some processing with those values later on.</p>

<pre><code>current_day ==&gt; current day
current_time ==&gt; current time
</code></pre>

<p>The only solution that I can think of now is to direct the output to some file, and then read the file and then assign the values of date and time to <code>current_day</code> and <code>current_time</code>. But I think this is not a good way. Is there any other short and elegant way?</p>
","<p>Use <a href=""http://en.cppreference.com/w/c/chrono/time"" rel=""noreferrer""><code>time()</code></a> and <a href=""http://en.cppreference.com/w/c/chrono/localtime"" rel=""noreferrer""><code>localtime()</code></a> to get the time:</p>

<pre><code>#include &lt;time.h&gt;

time_t t = time(NULL);
struct tm tm = *localtime(&amp;t);

printf(""now: %d-%d-%d %d:%d:%d\n"", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);
</code></pre>
","1442131"
"How to escape the % (percent) sign in C's printf?","185424","","<p>How do you escape the % sign when using <code>printf</code> in C?</p>

<pre><code>printf(""hello\%""); /* not like this */
</code></pre>
","<p>You can escape it by posting a double '%' like this: <code>%%</code></p>

<p>Using your example:</p>

<pre><code>printf(""hello%%"");
</code></pre>

<p>Escaping '%' sign is only for printf. If you do:</p>

<pre><code>char a[5];
strcpy(a, ""%%"");
printf(""This is a's value: %s\n"", a);
</code></pre>

<p>It will print: <code>This is a's value: %%</code></p>
","1860164"
"C compiling - ""undefined reference to""?","184446","","<p>I am making a reliable data transfer protocol and have the function prototype</p>

<pre><code>void tolayer5(int, char data[]);
</code></pre>

<p>With the <code>structs</code></p>

<pre><code>struct msg {
  char data[20];
};

struct pkt {
   int seqnum;
   int acknum;
   int checksum;
   char payload[20];
};
</code></pre>

<p>And when I call the function in this format:</p>

<pre><code>tolayer5(A, packet.payload);
</code></pre>

<p>Where <code>A</code> is an <code>int</code> and <code>packet.payload</code> is a <code>struct pkt</code>, I get the error ""undefined reference to <code>'tolayer5(int, char*)'</code>. Can you help me see what I'm missing here?</p>

<pre><code>void tolayer5(int AorB, char data[])
{
  int i;
  if (TRACE&gt;2)
  {
     printf(""TOLAYER5: data received:"");
     for (i=0; i&lt;20; i++)
        printf(""%c"",data[i]);
     printf(""\n"");
  }
}
</code></pre>

<hr>

<p>Thank you all for helping with the original issue! :) When trying to fix that one, however, I ran into an infinite loop that I think has something to do with me addressing characters in an array incorrectly (it's been awhile since I've done <code>C</code> like this. Can you help me to find where I'm creating an infinite loop?</p>

<p>I have updated the above code to what I'm now working with. Notice the main changes have been to my function:</p>

<pre><code>void tolayer5(int AorB, char data[])
</code></pre>

<p>And this line inside the function: <code>printf(""%c"",msgReceived.data[i]);</code> since now it's just:</p>

<pre><code>printf(""%c"",data[i]);
</code></pre>
","<p>seems you need to link with the obj file that implements tolayer5()</p>

<p>Update:
your function declaration doesn't match the implementation:</p>

<pre><code>      void tolayer5(int AorB, struct msg msgReceived)
      void tolayer5(int, char data[])
</code></pre>

<p>So compiler would treat them as two different functions (you are using c++). and it cannot find the implementation for the one you called in main().</p>
","19393720"
"Launch Failed. Binary not found. CDT on Eclipse Helios","184329","","<p>I'm using Eclipse Helios on Ubuntu 10.04, and I'm trying to install CDT plugin on it. I download it from here <a href=""http://www.eclipse.org/downloads/download.php?file=/tools/cdt/releases/helios/dist/cdt-master-7.0.1.zip"" rel=""noreferrer"">here</a>. </p>

<p>And then I go to <strong>Install New Software</strong> and select the zip file (<em>I don't extract it, just select the zip file</em>). And its ok, it installs, everything works fine, it shows optional features, <em>blah blah blah</em>.</p>

<p>And then I create a new HelloWorld project. And when I try to run it, it shows an error and says:</p>

<p>Launch failed. Binary not found.</p>

<p>Can anyone explain me how to fix it?</p>

<p>Thanks.</p>
","<p>You must build an executable file before you can run it. So if you don't “BUILD” your file, then it will not be able to link and load that object file, and hence it does not have the required binary numbers to execute.</p>

<p>So basically right click on the <code>Project -&gt; Build Project -&gt; Run As Local C/C++ Application</code> should do the trick</p>
","8765552"
"printf and long double","183208","","<p>I am using the latest gcc with Netbeans on Windows. Why doesn't <code>long double</code> work? Is the <code>printf</code> specifier <code>%lf</code> wrong?</p>

<p>Code:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    float aboat = 32000.0;
    double abet = 5.32e-5;
    long double dip = 5.32e-5;

    printf(""%f can be written %e\n"", aboat, aboat);
    printf(""%f can be written %e\n"", abet, abet);
    printf(""%lf can be written %le\n"", dip, dip);

    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>32000.000000 can be written 3.200000e+004
0.000053 can be written 5.320000e-005
-1950228512509697500000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000.000000
can be written 2.725000e+002
Press [Enter] to close the terminal ...
</code></pre>
","<p>In addition to the wrong modifier, which port of gcc to Windows?  mingw uses the Microsoft C library and I seem to remember that that this library has no support for 80bits long double (microsoft C compiler use 64 bits long double for various reasons).</p>
","4089304"
"Timer function to provide time in nano seconds using C++","182976","","<p>I wish to calculate the time it took for an API to return a value.
The time taken for such an action is in the space of nano seconds. As the API is a C++ class/function, I am using the timer.h to caculate the same:</p>

<pre><code>  #include &lt;ctime&gt;
  #include &lt;cstdio&gt;

  using namespace std;

  int main(int argc, char** argv) {

      clock_t start;
      double diff;
      start = clock();
      diff = ( std::clock() - start ) / (double)CLOCKS_PER_SEC;
      cout&lt;&lt;""printf: ""&lt;&lt; diff &lt;&lt;'\n';

      return 0;
  }
</code></pre>

<p>The above code gives the time in seconds. How do I get the same in nano seconds and with more precision?</p>
","<p>What others have posted about running the function repeatedly in a loop is correct.</p>

<p>For Linux (and BSD) you want to use <A href=""http://opengroup.org/onlinepubs/007908799/xsh/clock_gettime.html"" rel=""nofollow noreferrer"">clock_gettime()</A>.</p>

<pre><code>#include &lt;sys/time.h&gt;

int main()
{
   timespec ts;
   // clock_gettime(CLOCK_MONOTONIC, &amp;ts); // Works on FreeBSD
   clock_gettime(CLOCK_REALTIME, &amp;ts); // Works on Linux
}
</code></pre>

<p>For windows you want to use the <A href=""http://support.microsoft.com/kb/172338"" rel=""nofollow noreferrer"">QueryPerformanceCounter</A>. And here is more on <A href=""http://msdn.microsoft.com/en-us/library/ms979201.aspx"" rel=""nofollow noreferrer"">QPC</A></p>

<p>Apparently there is a known <A href=""http://support.microsoft.com/kb/274323"" rel=""nofollow noreferrer"">issue</A> with QPC on some chipsets, so you may want to make sure you do not have those chipset. Additionally some dual core AMDs may also cause a <A href=""http://forum.beyond3d.com/showthread.php?t=47951"" rel=""nofollow noreferrer"">problem</A>. See the second post by sebbbi, where he states:</p>

<blockquote>
  <p>QueryPerformanceCounter() and
  QueryPerformanceFrequency() offer a
  bit better resolution, but have
  different issues. For example in
  Windows XP, all AMD Athlon X2 dual
  core CPUs return the PC of either of
  the cores ""randomly"" (the PC sometimes
  jumps a bit backwards), unless you
  specially install AMD dual core driver
  package to fix the issue. We haven't
  noticed any other dual+ core CPUs
  having similar issues (p4 dual, p4 ht,
  core2 dual, core2 quad, phenom quad).</p>
</blockquote>

<p><strong>EDIT 2013/07/16:</strong></p>

<p>It looks like there is some controversy on the efficacy of QPC under certain circumstances as stated in <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ee417693(v=vs.85).aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/windows/desktop/ee417693(v=vs.85).aspx</a></p>

<blockquote>
  <p>...While QueryPerformanceCounter and QueryPerformanceFrequency typically adjust for
  multiple processors, bugs in the BIOS or drivers may result in these routines returning
  different values as the thread moves from one processor to another...</p>
</blockquote>

<p>However this StackOverflow answer <a href=""https://stackoverflow.com/a/4588605/34329"">https://stackoverflow.com/a/4588605/34329</a> states that QPC should work fine on any MS OS after Win XP service pack 2.</p>

<p>This article shows that Windows 7 can determine if the processor(s) have an invariant TSC and falls back to an external timer if they don't. <a href=""http://performancebydesign.blogspot.com/2012/03/high-resolution-clocks-and-timers-for.html"" rel=""nofollow noreferrer"">http://performancebydesign.blogspot.com/2012/03/high-resolution-clocks-and-timers-for.html</a> Synchronizing across processors is still an issue.</p>

<p>Other fine reading related to timers:</p>

<ul>
<li><a href=""https://blogs.oracle.com/dholmes/entry/inside_the_hotspot_vm_clocks"" rel=""nofollow noreferrer"">https://blogs.oracle.com/dholmes/entry/inside_the_hotspot_vm_clocks</a></li>
<li><a href=""http://lwn.net/Articles/209101/"" rel=""nofollow noreferrer"">http://lwn.net/Articles/209101/</a></li>
<li><a href=""http://performancebydesign.blogspot.com/2012/03/high-resolution-clocks-and-timers-for.html"" rel=""nofollow noreferrer"">http://performancebydesign.blogspot.com/2012/03/high-resolution-clocks-and-timers-for.html</a></li>
<li><a href=""https://stackoverflow.com/questions/7287663/queryperformancecounter-status"">QueryPerformanceCounter Status?</a></li>
</ul>

<p>See the comments for more details.</p>
","275231"
"Are the shift operators (<<, >>) arithmetic or logical in C?","182889","","<p>In C, are the shift operators (<code>&lt;&lt;</code>, <code>&gt;&gt;</code>) arithmetic or logical?</p>
","<p>According to <a href=""http://rads.stackoverflow.com/amzn/click/0131103628"" rel=""noreferrer"">K&amp;R 2nd edition</a> the results are implementation-dependent for right shifts of signed values.</p>

<p><a href=""http://en.wikipedia.org/wiki/Arithmetic_shift"" rel=""noreferrer"">Wikipedia</a> says that C/C++ 'usually' implements an arithmetic shift on signed values.</p>

<p>Basically you need to either test your compiler or not rely on it. My VS2008 help for the current MS C++ compiler says that their compiler does an arithmetic shift.</p>
","7636"
"Printing chars and their ASCII-code in C","181995","","<p>How do I print a char and its equivalent ASCII value in C?</p>
","<p>This prints out all ASCII values:</p>

<pre><code>int main()
{
    int i;
    i=0;
    do
    {
        printf(""%d %c \n"",i,i);
        i++;
    }
    while(i&lt;=255);
    return 0;
}
</code></pre>

<p>and this prints out the ASCII value for a given character:</p>

<pre><code>int main()
{
    int e;
    char ch;
    clrscr();
    printf(""\n Enter a character : "");
    scanf(""%c"",&amp;ch);
    e=ch;
    printf(""\n The ASCII value of the character is : %d"",e);
    getch();
    return 0;
}
</code></pre>
","1472602"
"What causes the Broken Pipe Error?","181665","","<p>I know that broken pipe error is thrown when the socket on the peer side is closed.</p>

<p>But, in my test I have noted that an immediate 'send' call on this side when the peer side is closed doesn't always lead to a broken pipe error.</p>

<p>E.g.:</p>

<p>After closing the socket on peer side (I have tried clean closing by calling close and also abnormal closing by killing the peer), if I try to send 40 bytes, then I don't get a broken pipe, but, if I try to send 40000 bytes then it immediately gives broken pipe error.</p>

<p>What exactly causes broken pipe and can it's behavior be predicted?</p>
","<p>It can take time for the network close to be observed - the total time is nominally about 2 minutes (yes, minutes!) after a close before the packets destined for the port are all assumed to be dead.  The error condition is detected at some point.  With a small write, you are inside the MTU of the system, so the message is queued for sending.  With a big write, you are bigger than the MTU and the system spots the problem quicker.  If you ignore the SIGPIPE signal, then the functions will return EPIPE error on a broken pipe - at some point when the broken-ness of the connection is detected.</p>
","4586432"
"Passing an array by reference in C?","181612","","<p>How can I pass an array of structs by reference in C?</p>

<p>As an example:</p>

<pre><code>struct Coordinate {
   int X;
   int Y;
};
SomeMethod(Coordinate *Coordinates[]){
   //Do Something with the array
}
int main(){ 
   Coordinate Coordinates[10];
   SomeMethod(&amp;Coordinates);
}
</code></pre>
","<p>In C arrays are passed as a pointer to the first element. They are the only element that is not really passed by value (the pointer is passed by value, but the array is not copied). That allows the called function to modify the contents.</p>

<pre><code>void reset( int *array, int size) {
   memset(array,0,size * sizeof(*array));
}
int main()
{
   int array[10];
   reset( array, 10 ); // sets all elements to 0
}
</code></pre>

<p>Now, if what you want is changing the array itself (number of elements...) you cannot do it with stack or global arrays, only with dynamically allocated memory in the heap. In that case,  if you want to change the pointer you must pass a pointer to it:</p>

<pre><code>void resize( int **p, int size ) {
   free( *p );
   *p = (int*) malloc( size * sizeof(int) );
}
int main() {
   int *p = (int*) malloc( 10 * sizeof(int) );
   resize( &amp;p, 20 );
}
</code></pre>

<p>In the question edit you ask specifically about passing an array of structs. You have two solutions there: declare a typedef, or make explicit that you are passing an struct:</p>

<pre><code>struct Coordinate {
   int x;
   int y;
};
void f( struct Coordinate coordinates[], int size );
typedef struct Coordinate Coordinate;  // generate a type alias 'Coordinate' that is equivalent to struct Coordinate
void g( Coordinate coordinates[], int size ); // uses typedef'ed Coordinate
</code></pre>

<p>You can typedef the type as you declare it (and it is a common idiom in C):</p>

<pre><code>typedef struct Coordinate {
   int x;
   int y;
} Coordinate;
</code></pre>
","1106977"
"How can I multiply and divide using only bit shifting and adding? ","181585","","<p>How can I multiply and divide using only bit shifting and adding? </p>
","<p>To multiply in terms of adding and shifting you want to decompose one of the numbers by powers of two, like so:</p>

<pre><code>21 * 5 = 10101_2 * 101_2             (Initial step)
       = 10101_2 * (1 * 2^2  +  0 * 2^1  +  1 * 2^0)
       = 10101_2 * 2^2 + 10101_2 * 2^0 
       = 10101_2 &lt;&lt; 2 + 10101_2 &lt;&lt; 0 (Decomposed)
       = 10101_2 * 4 + 10101_2 * 1
       = 10101_2 * 5
       = 21 * 5                      (Same as initial expression)
</code></pre>

<p>(<code>_2</code> means base 2)</p>

<p>As you can see, multiplication can be decomposed into adding and shifting and back again. This is also why multiplication takes longer than bit shifts or adding - it's O(n^2) rather than O(n) in the number of bits. Real computer systems (as opposed to theoretical computer systems) have a finite number of bits, so multiplication takes a constant multiple of time compared to addition and shifting. If I recall correctly, modern processors, if pipelined properly, can do multiplication just about as fast as addition, by messing with the utilization of the ALUs (arithmetic units) in the processor.</p>
","2777225"
"Returning C string from a function","180405","","<p>I am trying to return a C string from a function but its not working. Here is my code.</p>

<pre><code>char myFunction()
{
    return ""My String"";
}
</code></pre>

<p>In main I am calling it like this:</p>

<pre><code>int main()
{
  printf(""%s"",myFunction());
}
</code></pre>

<p>I have also tried some other ways for <code>myFunction</code> but they are not working. E.g:</p>

<pre><code>char myFunction()
{
  char array[] = ""my string"";
  return array;
}
</code></pre>

<p>Note: I am not allowed to use pointers!</p>

<p>Little background on this problem:
There is function which is finding out which month it is e.g; if its 1 then it return January etc etc.</p>

<p>So when its going to print, it's doing like this. <code>printf(""Month: %s"",calculateMonth(month));</code>. Now the problem is how to return that string from the <code>calculateMonth</code> function.</p>
","<p>your function signature needs to be:</p>

<pre><code>const char * myFunction()
{
    return ""My String"";
}
</code></pre>

<p><strong>Edit:</strong></p>

<p><strong>Background:</strong></p>

<p>It's been years since this post &amp; never thought it would be voted up, because it's so fundamental to C &amp; C++. Nevertheless, a little more discussion should be in order.</p>

<p>In C (&amp; C++ for that matter), a string is just an array of bytes terminated with a zero byte-- hence the term ""string-zero"" is used to represent this particular flavour of string. There are other kinds of strings, but in C (&amp; C++), this flavour is inherently understood by the language itself. Other languages (Java, Pascal, etc) use different methodologies to understand ""my string"".</p>

<p>If you ever use the Windows API (which is in C++), you'll see quite regularly function parameters like: ""LPCSTR lpszName"". The 'sz' part represents this notion of 'string-zero': an array of bytes with a null (/zero) terminator.</p>

<p><strong>Clarification:</strong></p>

<p>For the sake of this 'intro', I use the word 'bytes' and 'characters' interchangeably, because it's easier to learn this way. Be aware that there are other methods (wide-characters, and multi-byte character systems--mbcs) that are used to cope with international characters. UTF-8 is an example of a mbcs. For the sake of intro, I quietly 'skip over' all of this.</p>

<p><strong>Memory:</strong></p>

<p>What this means is that a string like ""my string"" actually uses 9+1 (=10!) bytes. This is important to know when you finally get around to allocating strings dynamically.
So, without this 'terminating zero', you don't have a string. You have an array of characters (also called a buffer) hanging around in memory.</p>

<p><strong>Longevity of data:</strong></p>

<p>The use of the function this way:</p>

<pre><code>const char * myFunction()
{
    return ""My String"";
}
int main() 
{
    const char* szSomeString = myFunction(); // fraught with problems
    printf(""%s"", szSomeString);
}
</code></pre>

<p>... will generally land you with random unhandled-exceptions/segment faults and the like, especially 'down the road'. </p>

<p>In short, although my answer is correct -- 9 times out of 10 you'll end up with a program that crashes if you use it that way, especially if you think it's 'good practice' to do it that way. In short: It's generally not.</p>

<p>For example, imagine some time in the future, the string now needs to be manipulated in some way. Generally, a coder will 'take the easy path' and (try to) write code like this:</p>

<pre><code>const char * myFunction(const char* name)
{
    char szBuffer[255];
    snprintf(szBuffer, sizeof(szBuffer), ""Hi %s"", name);
    return szBuffer;
}
</code></pre>

<p>That is, your program will crash because the compiler (may/may not) have released the memory used by <code>szBuffer</code> by the time the <code>printf()</code> in <code>main()</code> is called. (Your compiler should also warn you of such problems beforehand). </p>

<p>There are two ways to return strings that won't barf so readily.</p>

<ol>
<li>returning buffers (static or dynamically allocated) that live for a while. In C++ use 'helper classes' (eg. <code>std::string</code>) to handle the longevity of data (which requires changing the function's return value), or</li>
<li>pass a buffer to the function that gets filled in with information.</li>
</ol>

<p>Note that it is impossible to use strings without using pointers in C. As I have shown, they are synonymous. Even in C++ with template classes, there are always buffers (ie pointers) being used in the background. </p>

<p>So, to better answer the (now modified question). (there are sure to be a variety of 'other answers' that can be provided).</p>

<p><strong>Safer Answers:</strong></p>

<p>eg 1. using statically allocated strings:</p>

<pre><code>const char* calculateMonth(int month) 
{
    static char* months[] = {""Jan"", ""Feb"", ""Mar"" .... }; 
    static char badFood[] = ""Unknown"";
    if (month&lt;1 || month&gt;12) 
        return badFood; // choose whatever is appropriate for bad input. Crashing is never appropriate however.
    else
        return months[month-1];
}
int main()
{
    printf(""%s"", calculateMonth(2)); // prints ""Feb""
}
</code></pre>

<p>What the 'static' does here (many programmers do not like this type of 'allocation') is that the strings get put into the data segment of the program. That is, it's permanently allocated.</p>

<p>If you move over to C++ you'll use similar strategies:</p>

<pre><code>class Foo 
{
    char _someData[12];
public:
    const char* someFunction() const
    { // the final 'const' is to let the compiler know that nothing is changed in the class when this function is called.
        return _someData;
    }   
}
</code></pre>

<p>... but it's probably easier to use helper classes, such as <code>std::string</code>, if you're writing the code for your own use (and not part of a library to be shared with others).</p>

<p>eg 2. using caller-defined buffers:</p>

<p>This is the more 'fool proof' way of passing strings around. The data returned isn't subject to manipulation by the calling party. That is, eg 1 can easily be abused by a calling party and expose you to application faults. This way, it's much safer (albeit uses more lines of code):</p>

<pre><code>void calculateMonth(int month, char* pszMonth, int buffersize) 
{
    const char* months[] = {""Jan"", ""Feb"", ""Mar"" .... }; // allocated dynamically during the function call. (Can be inefficient with a bad compiler)
    if (!pszMonth || buffersize&lt;1) 
        return; // bad input. Let junk deal with junk data.
    if (month&lt;1 || month&gt;12)
    {
        *pszMonth = '\0'; // return an 'empty' string 
        // OR: strncpy(pszMonth, ""Bad Month"", buffersize-1);
    }
    else
    {
        strncpy(pszMonth, months[month-1], buffersize-1);
    }
    pszMonth[buffersize-1] = '\0'; // ensure a valid terminating zero! Many people forget this!
}

int main()
{
    char month[16]; // 16 bytes allocated here on the stack.
    calculateMonth(3, month, sizeof(month));
    printf(""%s"", month); // prints ""Mar""
}
</code></pre>

<p>There are lots of reasons why the 2nd method is better, particularly if you're writing a library to be used by others (you don't need to lock into a particular allocation/deallocation scheme, 3rd parties can't break your code, you don't need to link to a specific memory management library), but like all code, it's up to you on what you like best. For that reason, most people opt for eg 1 until they've been burnt so many times that they refuse to write it that way anymore ;)</p>

<p><strong>disclaimer:</strong></p>

<p>I retired several years back and my C is a bit rusty now. This demo code should all compile properly with C (it is ok for any C++ compiler though).</p>
","1496328"
"Checking for NULL pointer in C/C++","180257","","<p>In a recent code review, a contributor is trying to enforce that all <code>NULL</code> checks on pointers be performed in the following manner:</p>

<pre><code>int * some_ptr;
// ...
if (some_ptr == NULL)
{
    // Handle null-pointer error
}
else
{
    // Proceed
}
</code></pre>

<p>instead of</p>

<pre><code>int * some_ptr;
// ...
if (some_ptr)
{
    // Proceed
}
else
{
    // Handle null-pointer error
}
</code></pre>

<p>I agree that his way is a little more clear in the sense that it's explicitly saying ""Make sure this pointer is not NULL"", but I would counter that by saying that anyone who's working on this code would understand that using a pointer variable in an <code>if</code> statement is implicitly checking for <code>NULL</code>.  Also I feel the second method has a smaller chance of introducing a bug of the ilk:</p>

<pre><code>if (some_ptr = NULL)
</code></pre>

<p>which is just an absolute pain to find and debug.</p>

<p>Which way do you prefer and why?</p>
","<p>In my experience, tests of the form <code>if (ptr)</code> or <code>if (!ptr)</code> are preferred. They do not depend on the definition of the symbol <code>NULL</code>. They do not expose the opportunity for the accidental assignment. And they are clear and succinct. </p>

<p><strong>Edit:</strong> As SoapBox points out in a comment, they are compatible with C++ classes such as <code>auto_ptr</code> that are objects that act as pointers and which provide a conversion to <code>bool</code> to enable exactly this idiom. For these objects, an explicit comparison to <code>NULL</code> would have to invoke a conversion to pointer which may have other semantic side effects or be more expensive than the simple existence check that the <code>bool</code> conversion implies.</p>

<p>I have a preference for code that says what it means without unneeded text. <code>if (ptr != NULL)</code> has the same meaning as <code>if (ptr)</code> but at the cost of redundant specificity. The next logical thing is to write <code>if ((ptr != NULL) == TRUE)</code> and that way lies madness. The C language is clear that a boolean tested by <code>if</code>, <code>while</code> or the like has a specific meaning of non-zero value is true and zero is false. Redundancy does not make it clearer.</p>
","3825704"
"Static linking vs dynamic linking","180023","","<p>Are there any compelling performance reasons to choose static linking over dynamic linking or vice versa in certain situations? I've heard or read the following, but I don't know enough on the subject to vouch for its veracity.</p>

<p>1) The difference in runtime performance between static linking and dynamic linking is usually negligible.</p>

<p>2) (1) is not true if using a profiling compiler that uses profile data to optimize program hotpaths because with static linking, the compiler can optimize both your code and the library code. With dynamic linking only your code can be optimized. If most of the time is spent running library code, this can make a big difference. Otherwise, (1) still applies.</p>
","<ul>
<li><strong>Dynamic</strong> linking can <strong>reduce total resource consumption</strong> (if more than one process shares the same library (including the version in ""the same"", of course)). I believe this is the argument that drives it its presence in most environments. Here ""resources"" includes disk space, RAM, and cache space. Of course, if your dynamic linker is insufficiently flexible there is a risk of <a href=""http://en.wikipedia.org/wiki/DLL_Hell"" rel=""noreferrer"">DLL hell</a>.</li>
<li><strong>Dynamic</strong> linking means that bug fixes and upgrades to libraries <strong>propagate</strong> to improve <em>your</em> product without requiring you to ship anything.</li>
<li><strong>Plugins</strong> always call for <strong>dynamic</strong> linking.</li>
<li><strong>Static</strong> linking, means that you can know the code will run in very <strong>limited environments</strong> (early in the boot process, or in rescue mode).</li>
<li><strong>Static</strong> linking can make binaries <strong>easier to distribute</strong> to diverse user environments (at the cost of sending a large and more resource hungry program).</li>
<li><strong>Static</strong> linking may allow slightly <strong>faster startup</strong> times, but this depends to some degree on both the size and complexity of your program <em>and</em> on the details of the OSs loading strategy.</li>
</ul>

<hr>

<p>Some edits to include the very relevant suggestions in the comments and in other answers. I'd like to note that the way you break on this depends a lot on what environment you plan to run in. Minimal embedded systems may not have enough resources to support dynamic linking. Slightly larger small systems may well support linking, because their memory is small enough to make the RAM savings from dynamic linking very attractive. Full blown consumer PCs have, as Mark notes, enormous resources, and you can probably let the convenience issues drive you thinking on this matter.</p>

<hr>

<p>To address the performance and efficiency issues: <strong>it depends</strong>.</p>

<p>Classically, dynamic libraries require a some kind of glue layer which often means double dispatch or an extra layer of indirection in function addressing and can cost a little speed (but is function calling time actually a big part of your running time???).</p>

<p>However, if you are running multiple processes which all call the same library a lot, you can end up saving cache lines (and thus winning on running performance) when using dynamic linking relative using static linking. (Unless modern OS's are smart enough to notice identical segments in statically linked binaries. Seems hard, anyone know?)</p>

<p>Another issue: loading time. You pay loading costs at some point. When you pay this cost depends on how the OS works as well as what linking you use. Maybe you'd rather put off paying it until you know you need it.</p>

<p>Note that static-vs--dynamic linking is traditionally <em>not</em> a optimization issue, because they both involve separate compilation down to object files. However, this is not required: a compiler can in principle, ""compile"" ""static libraries"" to a digested AST form initially, and ""link"" them by adding those ASTs to the ones generated for the main code, thus empowering global optimization. None of the systems I use do this, so I can't comment on how well it works.</p>

<p>The way to answer performance questions is <em>always</em> by testing (and use an test environment as much like the deployment environment as possible).</p>
","1993407"
"Check if input is integer type in C","179807","","<p>The catch is that I cannot use atoi or any other function like that (I'm pretty sure we're supposed to rely on mathematical operations).</p>

<pre><code> int num; 
 scanf(""%d"",&amp;num);
 if(/* num is not integer */) {
  printf(""enter integer"");
  return;
 }
</code></pre>

<p>I've tried:</p>

<pre><code>(num*2)/2 == num
num%1==0
if(scanf(""%d"",&amp;num)!=1)
</code></pre>

<p>but none of these worked.</p>

<p>Any ideas?</p>
","<p><code>num</code> will always contain an integer because it's an <code>int</code>. The <em>real</em> problem with your code is that you don't check the <code>scanf</code> return value. <a href=""http://www.cplusplus.com/reference/clibrary/cstdio/scanf/"" rel=""noreferrer""><code>scanf</code></a> returns the number of successfully read items, so in this case it must return 1 for valid values. If not, an invalid integer value was entered and the <code>num</code> variable did probably not get changed (i.e. still has an arbitrary value because you didn't initialize it).</p>

<p>As of your comment, you only want to allow the user to enter an integer followed by the enter key. Unfortunately, this can't be simply achieved by <code>scanf(""%d\n"")</code>, but here's a trick to do it:</p>

<pre><code>int num;
char term;
if(scanf(""%d%c"", &amp;num, &amp;term) != 2 || term != '\n')
    printf(""failure\n"");
else
    printf(""valid integer followed by enter key\n"");
</code></pre>
","4072483"
"Split string in C every white space","179531","","<p>I want to write a program in C that displays each word of a whole sentence (taken as input) at a seperate line. This is what i have done so far:</p>

<hr>

<pre><code>void manipulate(char *buffer);
int get_words(char *buffer);

int main(){
    char buff[100];

    printf(""sizeof %d\nstrlen %d\n"", sizeof(buff), strlen(buff));   // Debugging reasons

    bzero(buff, sizeof(buff));

    printf(""Give me the text:\n"");
    fgets(buff, sizeof(buff), stdin);

    manipulate(buff);
    return 0;
}

int get_words(char *buffer){                                        // Function that gets the word count, by counting the spaces.
    int count;
    int wordcount = 0;
    char ch;

    for (count = 0; count &lt; strlen(buffer); count ++){
        ch = buffer[count];
        if((isblank(ch)) || (buffer[count] == '\0')){                   // if the character is blank, or null byte add 1 to the wordcounter
            wordcount += 1;
        }
    }
    printf(""%d\n\n"", wordcount);
    return wordcount;
}

void manipulate(char *buffer){
    int words = get_words(buffer);
    char *newbuff[words];
    char *ptr;
    int count = 0;
    int count2 = 0;
    char ch = '\n';

    ptr = buffer;
    bzero(newbuff, sizeof(newbuff));

    for (count = 0; count &lt; 100; count ++){
        ch = buffer[count];
        if (isblank(ch) || buffer[count] == '\0'){
            buffer[count] = '\0';
            if((newbuff[count2] = (char *)malloc(strlen(buffer))) == NULL) {
                printf(""MALLOC ERROR!\n"");
                exit(-1);
            }
            strcpy(newbuff[count2], ptr);
            printf(""\n%s\n"",newbuff[count2]);
            ptr = &amp;buffer[count + 1];
            count2 ++;
        }
    }
}
</code></pre>

<hr>

<p>Although the output is what i want, i have really many black spaces after the final word displayed, and the malloc() returns NULL so the MALLOC ERROR! is displayed in the end. 
I can understand that there is a mistake at my malloc() implementation but i do not know what it is. </p>

<p>Is there another more elegant - generally better way to do it?</p>

<p>Thanks in advance.</p>
","<p><a href=""http://www.cplusplus.com/reference/clibrary/cstring/strtok/"" rel=""noreferrer"">http://www.cplusplus.com/reference/clibrary/cstring/strtok/</a></p>

<p>Take a look at this, and use whitespace characters as the delimiter.  If you need more hints let me know.</p>

<p>From the website:</p>

<pre><code>char * strtok ( char * str, const char * delimiters );
</code></pre>

<blockquote>
  <p>On a first call, the function expects a C string as argument for str, whose first character is used as the starting location to scan for tokens. In subsequent calls, the function expects a null pointer and uses the position right after the end of last token as the new starting location for scanning.</p>
  
  <p>Once the terminating null character of str is found in a call to strtok, all subsequent calls to this function (with a null pointer as the first argument) return a null pointer.</p>
  
  <h1>Parameters</h1>
  
  <ul>
  <li>str
  
  <ul>
  <li>C string to truncate.</li>
  <li>Notice that this string is modified by being broken into smaller strings (tokens).
  Alternativelly [sic], a null pointer may be specified, in which case the function continues scanning where a previous successful call to the function ended.</li>
  </ul></li>
  <li>delimiters
  
  <ul>
  <li>C string containing the delimiter characters.</li>
  <li>These may vary from one call to another.</li>
  </ul></li>
  </ul>
  
  <h1>Return Value</h1>
  
  <p>A pointer to the last token found in string.
  A null pointer is returned if there are no tokens left to retrieve.</p>
  
  <h1>Example</h1>
</blockquote>

<pre><code>/* strtok example */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main ()
{
  char str[] =""- This, a sample string."";
  char * pch;
  printf (""Splitting string \""%s\"" into tokens:\n"",str);
  pch = strtok (str,"" ,.-"");
  while (pch != NULL)
  {
    printf (""%s\n"",pch);
    pch = strtok (NULL, "" ,.-"");
  }
  return 0;
}
</code></pre>
","4513437"
"close vs shutdown socket?","177352","","<p>In C, I understood that if we close a socket, it means the socket will be destroyed and can be re-used later.</p>

<p>How about shutdown? The description said it closes half of a duplex connection to that socket. But will that socket be destroyed like <code>close</code> system call? </p>
","<p>This is <a href=""http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html#closedown"" rel=""noreferrer"">explained</a> in Beej's networking guide.  <code>shutdown</code> is a flexible way to block communication in one or both directions.  When the second parameter is <code>SHUT_RDWR</code>, it will block both sending and receiving (like <code>close</code>).  However, <code>close</code> is the way to actually destroy a socket.</p>

<p>With <code>shutdown</code>, you will still be able to receive pending data the peer already sent (thanks to Joey Adams for noting this).</p>
","4160356"
"Algorithm: efficient way to remove duplicate integers from an array","177315","","<p>I got this problem from an interview with Microsoft.</p>

<blockquote>
  <p>Given an array of random integers,
  write an algorithm in C that removes
  duplicated numbers and return the unique numbers in the original
  array.</p>
</blockquote>

<p>E.g Input: <code>{4, 8, 4, 1, 1, 2, 9}</code>  Output: <code>{4, 8, 1, 2, 9, ?, ?}</code></p>

<p>One caveat is that the expected algorithm should not required the array to be sorted first. And when an element has been removed, the following elements must be shifted forward as well. Anyway, value of elements at the tail of the array where elements were shifted forward are negligible. </p>

<p><strong>Update:</strong> The result must be returned in the original array and helper data structure (e.g. hashtable) should not be used. However, I guess order preservation is not necessary.</p>

<p><strong>Update2:</strong> For those who wonder why these impractical constraints, this was an interview question and all these constraints are discussed during the thinking process to see how I can come up with different ideas.</p>
","<p>How about:</p>

<pre><code>void rmdup(int *array, int length)
{
    int *current , *end = array + length - 1;

    for ( current = array + 1; array &lt; end; array++, current = array + 1 )
    {
        while ( current &lt;= end )
        {
            if ( *current == *array )
            {
                *current = *end--;
            }
            else
            {
                current++;
            }
        }
    }
}
</code></pre>

<p>Should be O(n^2) or less.</p>
","1533109"
"How can one print a size_t variable portably using the printf family?","177083","","<p>I have a variable of type <code>size_t</code>, and I want to print it using <code>printf()</code>. What format specifier do I use to print it portably? </p>

<p>In 32-bit machine, <code>%u</code> seems right. I compiled with g++ -g -W -Wall -Werror -ansi -pedantic, and there was no warning. But when I compile that code in 64-bit machine, it produces warning. </p>

<pre><code>size_t x = &lt;something&gt;;
printf( ""size = %u\n"", x );

warning: format '%u' expects type 'unsigned int', 
    but argument 2 has type 'long unsigned int'
</code></pre>

<p>The warning goes away, as expected, if I change that to <code>%lu</code>.</p>

<p>The question is, how can I write the code, so that it compiles warning free on both 32- and 64- bit machines?</p>

<p>Edit: I guess one answer might be to ""cast"" the variable into an <code>unsigned long</code>, and print using <code>%lu</code>. That would work in both cases. I am looking if there is any other idea.</p>
","<p>Use the <code>z</code> modifier:</p>

<pre><code>size_t x = ...;
ssize_t y = ...;
printf(""%zu\n"", x);  // prints as unsigned decimal
printf(""%zx\n"", x);  // prints as hex
printf(""%zd\n"", y);  // prints as signed decimal
</code></pre>
","2524675"
"Difference between signed / unsigned char","176432","","<p>So I know that the difference between a signed and unsigned int is that a bit is used to signify if the number if positive or negative, but how does this apply to a char? How can a character be positive or negative?</p>
","<p>There's no dedicated ""character type"" in C language. <code>char</code> is an integer type, same (in that regard) as <code>int</code>, <code>short</code> and other integer types. <code>char</code> just happens to be the smallest integer type. So, just like any other integer type, it can be signed or unsigned.</p>

<p>It is true that (as the name suggests) <code>char</code> is mostly intended to be used to represent characters. But characters in C are represented by their integer ""codes"", so there's nothing unusual in the fact that an integer type <code>char</code> is used to serve that purpose.</p>

<p>The only general difference between <code>char</code> and other integer types is that plain <code>char</code> is generally not synonymous with <code>signed char</code>, while with other integer types the <code>signed</code> modifier is optional/implied.</p>
","4337252"
"How to use EOF to run through a text file in C?","176057","","<p>I have a text file that has strings on each line. I want to increment a number for each line in the text file, but when it reaches the end of the file it obviously needs to stop. I've tried doing some research on EOF, but couldn't really understand how to use it properly.</p>

<p>I'm assuming I need a while loop, but I'm not sure how to do it.</p>
","<p>How you detect EOF depends on what you're using to read the stream:</p>

<pre><code>function                  result on EOF or error                    
--------                  ----------------------
fgets()                   NULL
fscanf()                  number of succesful conversions
                            less than expected
fgetc()                   EOF
fread()                   number of elements read
                            less than expected
</code></pre>

<p>Check the result of the input call for the appropriate condition above, then call <code>feof()</code> to determine if the result was due to hitting EOF or some other error.  </p>

<p>Using <code>fgets()</code>:</p>

<pre><code> char buffer[BUFFER_SIZE];
 while (fgets(buffer, sizeof buffer, stream) != NULL)
 {
   // process buffer
 }
 if (feof(stream))
 {
   // hit end of file
 }
 else
 {
   // some other error interrupted the read
 }
</code></pre>

<p>Using <code>fscanf()</code>:</p>

<pre><code>char buffer[BUFFER_SIZE];
while (fscanf(stream, ""%s"", buffer) == 1) // expect 1 successful conversion
{
  // process buffer
}
if (feof(stream)) 
{
  // hit end of file
}
else
{
  // some other error interrupted the read
}
</code></pre>

<p>Using <code>fgetc()</code>:</p>

<pre><code>int c;
while ((c = fgetc(stream)) != EOF)
{
  // process c
}
if (feof(stream))
{
  // hit end of file
}
else
{
  // some other error interrupted the read
}
</code></pre>

<p>Using <code>fread()</code>:</p>

<pre><code>char buffer[BUFFER_SIZE];
while (fread(buffer, sizeof buffer, 1, stream) == 1) // expecting 1 
                                                     // element of size
                                                     // BUFFER_SIZE
{
   // process buffer
}
if (feof(stream))
{
  // hit end of file
}
else
{
  // some other error interrupted read
}
</code></pre>

<p>Note that the form is the same for all of them: check the result of the read operation; if it failed, <em>then</em> check for EOF.  You'll see a lot of examples like:</p>

<pre><code>while(!feof(stream))
{
  fscanf(stream, ""%s"", buffer);
  ...
}
</code></pre>

<p>This form doesn't work the way people think it does, because <code>feof()</code> won't return true until <em>after</em> you've attempted to read past the end of the file.  As a result, the loop executes one time too many, which may or may not cause you some grief.  </p>
","1836454"
"How can I do GUI programming in C?","175447","","<p>I want to do Graphics programming in C. I had searched a lot about the compiler that provides a rich set of functions for doing GUI programming in C, but I couldn't find anything.</p>

<p>Basically I want to draw buttons and then accept the choice from the user and take an appropriate action. It would be helpful if you can suggest a C compiler, or a library that I can add to my compiler. I am working on the Windows operating system.</p>

<p>Presently, I am using TURBO C compiler that does not support direct methods for creating buttons. Any help would be appreciated.</p>
","<p>This is guaranteed to have <em>nothing</em> to do with the compiler. All compilers do is compile the code that they are given. What you're looking for is a GUI library, which you can write code against using any compiler that you want.</p>

<p>Of course, that being said, your first order of business should be to ditch Turbo C. That compiler is about 20 years old and continuing to use it isn't doing you any favors. You can't write <em>modern</em> GUI applications, as it will only produce 16-bit code. All modern operating systems are 32-bit, and many are now 64-bit. It's also worth noting that 64-bit editions of Windows will not run 16-bit applications natively. You'll need an emulator for that; it's not really going to engender much feeling of accomplishment if you can only write apps that work in a DOS emulator. :-)</p>

<p>Microsoft's Visual Studio Express C++ <a href=""http://www.microsoft.com/express/Downloads/#2010-Visual-CPP"" rel=""noreferrer"">is available as a free download</a>. It includes the same compiler available in the full version of the suite. The C++ package also compiles pure C code.</p>

<p>And since you're working in Windows, the Windows API is a natural choice. It allows you to write native Windows applications that have access to the full set of GUI controls. You'll find <a href=""http://www.winprog.org/tutorial/start.html"" rel=""noreferrer"">a nice tutorial here</a> on writing WinAPI applications in C. If you choose to go with Visual Studio, it also includes boilerplate code for a blank WinAPI application that will get you up and running quickly.</p>

<p>If you really care about learning to do this, Charles Petzold's <a href=""http://www.charlespetzold.com/pw5/"" rel=""noreferrer"">Programming Windows</a> is the canonical resource of the subject, and definitely worth a read. The entire Windows API was written in C, and it's entirely possible to write full-featured Windows applications in C. You don't need no stinkin' C++.</p>

<p>That's the way <em>I'd</em> do it, at least. As the other answers suggest, <a href=""http://www.gtk.org/"" rel=""noreferrer"">GTK</a> is also an option. But the applications it generates are just downright horrible-looking on Windows.</p>

<hr>

<p><strong>EDIT:</strong> Oh dear... It looks like you're not alone in wanting to write ""GUI"" applications using an antiquated compiler. A Google search turns up the following library: <a href=""https://planet-source-code.com/vb/scripts/ShowCode.asp?txtCodeId=7776&amp;lngWId=3"" rel=""noreferrer"">TurboGUI: A GUI Framework for Turbo C/C++</a>:</p>

<p>&nbsp;<img src=""https://i.stack.imgur.com/iWyXY.jpg"" alt=""TurboGUI interface sample""></p>

<p>If you're another one of those poor people stuck in the hopelessly out-of-date Indian school system and forced to use Turbo C to complete your education, this might be an option. I'm loathe to recommend it, as learning to work around its limitations will be <em>completely useless</em> to you once you graduate, but apparently it's out there for you if you're interested.</p>
","5450081"
"Mutex example / tutorial?","174983","","<p>I'm new to multithreading, and was trying to understand how mutexes work. Did a lot of Googling and <a href=""http://www.yolinux.com/TUTORIALS/LinuxTutorialPosixThreads.html"" rel=""noreferrer"">I found a decent tutorial</a>, but it still left some doubts of how it works because I created my own program in which locking didn't work.</p>

<p>One absolutely non-intuitive syntax of the mutex is <code>pthread_mutex_lock( &amp;mutex1 );</code>, where it looks like the mutex is being locked, when what I really want to lock is some other variable. Does this syntax mean that locking a mutex locks a region of code until the mutex is unlocked? Then how do threads know that the region is locked? [<em>UPDATE: Threads know that the region is locked, by</em> <a href=""http://en.wikipedia.org/wiki/Memory_barrier#Multithreaded_programming_and_memory_visibility"" rel=""noreferrer"">Memory Fencing</a> ]. And isn't such a phenomenon supposed to be called critical section? [<em>UPDATE: Critical section objects are available in Windows only, where the objects are faster than mutexes and are visible only to the thread which implements it. Otherwise, critical section just refers to the area of code protected by a mutex</em>]</p>

<p>In short, could you please help with the simplest possible mutex <strong>example program</strong> and the simplest possible <strong>explanation</strong> on the logic of how it works? I'm sure this will help <strong><em>plenty</em></strong> of other newbies.</p>
","<p><em>Edits to the explanation and code are most welcome (to make it clearer/shorter/simpler/more correct).<br>
Here goes my humble attempt to explain the concept to newbies around the world: (a <a href=""http://nrecursions.blogspot.in/2014/08/mutex-tutorial-and-example.html"" rel=""noreferrer"">colour coded version</a> on my blog too)</em>  </p>

<p>A lot of people run to a lone phone booth (no mobiles) to talk to their loved ones. The first person to catch the door-handle of the booth, is the one who is allowed to use the phone. He has to keep holding on to the handle of the door as long as he uses the phone, otherwise someone else will catch hold of the handle, throw him out and talk to his wife :) There's no queue system as such. When the person finishes his call, comes out of the booth and leaves the door handle, the next person to get hold of the door handle will be allowed to use the phone.  </p>

<p>A <strong>thread</strong> is     : Each person<br>
The <strong>mutex</strong> is    : The door handle<br>
The <strong>lock</strong> is     : The person's hand<br>
The <strong>resource</strong> is : The phone  </p>

<p>Any thread which has to execute some lines of code which should not be modified by other threads at the same time (using the phone to talk to his wife), has to first acquire a lock on a mutex (clutching the door handle of the booth). Only then will a thread be able to run those lines of code (making the phone call).  </p>

<p>Once the thread has executed that code, it should release the lock on the mutex so that another thread can acquire a lock on the mutex (other people being able to access the phone booth).</p>

<p>[<em>The concept of having a mutex is a bit absurd when considering real-world exclusive access, but in the programming world I guess there was no other way to let the other threads 'see' that a thread was already executing some lines of code. There are concepts of recursive mutexes etc, but this example was only meant to show you the basic concept. Hope the example gives you a clear picture of the concept.</em>]  </p>

<p><strong>With C++11 threading:</strong></p>

<pre><code>#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;mutex&gt;

std::mutex m;//you can use std::lock_guard if you want to be exception safe
int i = 0;

void makeACallFromPhoneBooth() 
{
    m.lock();//man gets a hold of the phone booth door and locks it. The other men wait outside
      //man happily talks to his wife from now....
      std::cout &lt;&lt; i &lt;&lt; "" Hello Wife"" &lt;&lt; std::endl;
      i++;//no other thread can access variable i until m.unlock() is called
      //...until now, with no interruption from other men
    m.unlock();//man lets go of the door handle and unlocks the door
}

int main() 
{
    //This is the main crowd of people uninterested in making a phone call

    //man1 leaves the crowd to go to the phone booth
    std::thread man1(makeACallFromPhoneBooth);
    //Although man2 appears to start second, there's a good chance he might
    //reach the phone booth before man1
    std::thread man2(makeACallFromPhoneBooth);
    //And hey, man3 also joined the race to the booth
    std::thread man3(makeACallFromPhoneBooth);

    man1.join();//man1 finished his phone call and joins the crowd
    man2.join();//man2 finished his phone call and joins the crowd
    man3.join();//man3 finished his phone call and joins the crowd
    return 0;
}
</code></pre>

<p>Compile and run using <code>g++ -std=c++0x -pthread -o thread thread.cpp;./thread</code></p>

<p><strong>With TBB:</strong>
You'll need <a href=""http://threadingbuildingblocks.org/download.php"" rel=""noreferrer"">TBB</a> to run the below program, but the intent of posting TBB code is that you understand the sequence of locking and unlocking just by looking at the simple code (could've shown scoped locking by not using acquire and release - <a href=""https://stackoverflow.com/questions/4989451/mutex-example-tutorial/5156479#5156479"">which also is exception safe</a> -, but this is clearer).</p>

<pre><code>#include &lt;iostream&gt;
#include ""/tbb/mutex.h""
#include ""/tbb/tbb_thread.h""
using namespace tbb;

typedef mutex myMutex;
static myMutex sm;
int i = 0;

void someFunction() 
{ 
      //Note: Since a scoped lock is used below, you should know that you 
      //can specify a scope for the mutex using curly brackets, instead of 
      //using lock.acquire() and lock.release(). The lock will automatically 
      //get released when program control goes beyond the scope.
      myMutex::scoped_lock lock;//create a lock
      lock.acquire(sm);//Method acquire waits until it can acquire a lock on the mutex
         //***only one thread can access the lines from here...***
         ++i;//incrementing i is safe (only one thread can execute the code in this scope) because the mutex locked above protects all lines of code until the lock release.
         sleep(1);//simply creating a delay to show that no other thread can increment i until release() is executed
         std::cout&lt;&lt;""In someFunction ""&lt;&lt;i&lt;&lt;""\n"";
         //***...to here***
      lock.release();//releases the lock (duh!)      
}

int main()
{
   tbb_thread my_thread1(someFunction);//create a thread which executes 'someFunction'
   tbb_thread my_thread2(someFunction);
   tbb_thread my_thread3(someFunction);

   my_thread1.join();//This command causes the main thread (which is the 'calling-thread' in this case) to wait until thread1 completes its task.
   my_thread2.join();
   my_thread3.join();
}
</code></pre>

<p>Note that <code>tbb_thread.h</code> is deprecated. The replacement is shown <a href=""http://www.threadingbuildingblocks.org/docs/help/reference/appendices/compatibility_features/tbb_thread_cls.htm"" rel=""noreferrer"">here</a>.<br>
Also, instead of explicitly using <code>lock</code> and <code>unlock</code>, you can use brackets <a href=""https://software.intel.com/en-us/node/527509"" rel=""noreferrer"">as shown here</a>, if you are using a scoped lock <a href=""https://stackoverflow.com/questions/15179553/boost-scoped-lock-vs-plain-lock-unlock"">for the advantage it provides</a>.  </p>
","5154174"
"How to set up a cron job to run an executable every hour?","174825","","<p>I need to set up a cron job that runs an executable compiled using gcc once every hour.</p>

<p>I logged in as root and typed <code>crontab -e</code></p>

<p>Then I entered the following and saved the file.</p>

<pre><code>0 * * * *  /path_to_executable
</code></pre>

<p>However, the cron job does not work.</p>

<p>I see that when I type <code>/...path_to_executable</code> I get a segmentation fault.
I can only execute the executable from the folder it is located in.
Is there a way I can solve this problem?</p>
","<pre><code>0 * * * * cd folder_containing_exe &amp;&amp; ./exe_name
</code></pre>

<p>should work unless there is something else that needs to be setup for the program to run.</p>
","3478888"
"'uint32_t' identifier not found error","174504","","<p>I'm porting code from Linux C to Visual C++ for windows.</p>

<p>Visual C++ doesn't know <code>#include &lt;stdint.h&gt;</code> so I commented it out.</p>

<p>Later, I found a lot of those <code>'uint32_t': identifier not found</code> errors. How can it be solved?</p>
","<p>This type is defined in the C header <code>&lt;stdint.h&gt;</code> which is part of the C++11 standard but not standard in C++03.  According to <a href=""http://en.wikipedia.org/wiki/Stdint.h"" rel=""nofollow noreferrer"">the Wikipedia page on the header</a>, it hasn't shipped with Visual Studio until VS2010.</p>

<p>In the meantime, you could probably fake up your own version of the header by adding <code>typedef</code>s that map <a href=""http://msdn.microsoft.com/en-us/library/29dh1w7z.aspx"" rel=""nofollow noreferrer"">Microsoft's custom integer types</a> to the types expected by C.  For example:</p>

<pre><code>typedef __int32 int32_t;
typedef unsigned __int32 uint32_t;
/* ... etc. ... */
</code></pre>

<p>Hope this helps!</p>
","5162801"
"Create a pointer to two-dimensional array","174471","","<p>I need a pointer to a static 2-dimensional array. How is this done?</p>

<pre><code>static uint8_t l_matrix[10][20];

void test(){
   uint8_t **matrix_ptr = l_matrix; //wrong idea 
}
</code></pre>

<p>I get all kinds of errors like:</p>

<ul>
<li>warning: assignment from incompatible pointer type</li>
<li>subscripted value is neither array nor pointer</li>
<li>error: invalid use of flexible array member</li>
</ul>
","<p>Here you wanna make a pointer to the first element of the array</p>

<pre><code>uint8_t (*matrix_ptr)[20] = l_matrix;
</code></pre>

<p>With typedef, this looks cleaner</p>

<pre><code>typedef uint8_t array_of_20_uint8_t[20];
array_of_20_uint8_t *matrix_ptr = l_matrix;
</code></pre>

<p>Then you can enjoy life again :)</p>

<pre><code>matrix_ptr[0][1] = ...;
</code></pre>

<p>Beware of the <a href=""https://stackoverflow.com/questions/274865/pointer-question-in-c/274943#274943"">pointer/array world</a> in C, much confusion is around this.</p>

<hr>

<h3>Edit</h3>

<p>Reviewing some of the other answers here, because the comment fields are too short to do there. Multiple alternatives were proposed, but it wasn't shown how they behave. Here is how they do</p>

<pre><code>uint8_t (*matrix_ptr)[][20] = l_matrix;
</code></pre>

<p>If you fix the error and add the address-of operator <code>&amp;</code> like in the following snippet</p>

<pre><code>uint8_t (*matrix_ptr)[][20] = &amp;l_matrix;
</code></pre>

<p>Then that one creates a pointer to an incomplete array type of elements of type array of 20 uint8_t. Because the pointer is to an array of arrays, you have to access it with</p>

<pre><code>(*matrix_ptr)[0][1] = ...;
</code></pre>

<p>And because it's a pointer to an incomplete array, you <em>cannot</em> do as a shortcut</p>

<pre><code>matrix_ptr[0][0][1] = ...;
</code></pre>

<p>Because indexing requires the element type's size to be known (indexing implies an addition of an integer to the pointer, so it won't work with incomplete types). Note that this only works in <code>C</code>, because <code>T[]</code> and <code>T[N]</code> are compatible types. C++ does not have a concept of <em>compatible types</em>, and so it will reject that code, because <code>T[]</code> and <code>T[10]</code> are different types. </p>

<hr>

<p>The following alternative doesn't work at all, because the element type of the array, when you view it as a one-dimensional array, is <em>not</em> <code>uint8_t</code>, but <code>uint8_t[20]</code></p>

<pre><code>uint8_t *matrix_ptr = l_matrix; // fail
</code></pre>

<hr>

<p>The following is a good alternative</p>

<pre><code>uint8_t (*matrix_ptr)[10][20] = &amp;l_matrix;
</code></pre>

<p>You access it with </p>

<pre><code>(*matrix_ptr)[0][1] = ...;
matrix_ptr[0][0][1] = ...; // also possible now
</code></pre>

<p>It has the benefit that it preserves the outer dimension's size. So you can apply sizeof on it</p>

<pre><code>sizeof (*matrix_ptr) == sizeof(uint8_t) * 10 * 20
</code></pre>

<hr>

<p>There is one other answer that makes use of the fact that items in an array are contiguously stored</p>

<pre><code>uint8_t *matrix_ptr = l_matrix[0];
</code></pre>

<p>Now, that formally only allows you to access the elements of the first element of the two dimensional array. That is, the following condition hold</p>

<pre><code>matrix_ptr[0] = ...; // valid
matrix_ptr[19] = ...; // valid

matrix_ptr[20] = ...; // undefined behavior
matrix_ptr[10*20-1] = ...; // undefined behavior
</code></pre>

<p>You will notice it probably works up to <code>10*20-1</code>, but if you throw on alias analysis and other aggressive optimizations, some compiler could make an assumption that may break that code. Having said that, i've never encountered a compiler that fails on it (but then again, i've not used that technique in real code), and even the C FAQ has that technique contained (with a warning about its UB'ness), and if you cannot change the array type, this is a last option to save you :)</p>
","1052837"
"Convert a hexadecimal string to an integer efficiently in C?","174307","","<p>In C, what is the most efficient way to convert a string of hex digits into a binary <code>unsigned int</code> or <code>unsigned long</code>?</p>

<p>For example, if I have <code>0xFFFFFFFE</code>, I want an <code>int</code> with the base10 value <code>4294967294</code>.</p>
","<p>You want <a href=""http://www.cplusplus.com/reference/clibrary/cstdlib/strtol.html"" rel=""noreferrer""><code>strtol</code></a> or <a href=""http://en.cppreference.com/w/c/string/byte/strtoul"" rel=""noreferrer""><code>strtoul</code></a>.  See also the <a href=""http://man7.org/linux/man-pages/man3/strtoul.3.html"" rel=""noreferrer"">Unix man page</a></p>
","10327"
"Using malloc for allocation of multi-dimensional arrays with different row lengths","174125","","<p>I have the following <code>C</code> code :</p>

<pre><code>int *a;
size_t size = 2000*sizeof(int);
a = (int *) malloc(size);
</code></pre>

<p>which works fine. But if I have the following :</p>

<pre><code>char **b = malloc(2000*sizeof *b);
</code></pre>

<p>where every element of <code>b</code> has different length.</p>

<p>How is it possible to do the same thing for <code>b</code> as i did for <code>a</code>; i.e. the following code would hold correct?</p>

<pre><code>char *c;
size_t size = 2000*sizeof(char *);
c = (char *) malloc(size);
</code></pre>
","<p>First, you need to allocate array of pointers like <code>char **c = malloc( N * sizeof( char* ))</code>, then allocate each row with a separate call to <code>malloc</code>, probably in the loop:</p>

<pre><code>
/* N is the number of rows  */
/* note: c is char** */
if (( c = malloc( N*sizeof( char* ))) == NULL )
{ /* error */ }

for ( i = 0; i &lt; N; i++ )
{
  /* x_i here is the size of given row, no need to
   * multiply by sizeof( char ), it's always 1
   */
  if (( c[i] = malloc( x_i )) == NULL )
  { /* error */ }

  /* probably init the row here */
}

/* access matrix elements: c[i] give you a pointer
 * to the row array, c[i][j] indexes an element
 */
c[i][j] = 'a';
</code></pre>

<p>If you know the total number of elements (e.g. <code>N*M</code>) you can do this in a single allocation.</p>
","1970735"
"C string append","171766","","<p>I want to append two strings. I used the following command:</p>

<pre><code>new_str = strcat(str1, str2);
</code></pre>

<p>This command changes the value of <code>str1</code>. I want <code>new_str</code> to be the concatanation of <code>str1</code> and <code>str2</code> and at the same time <code>str1</code> is not to be changed.</p>
","<p>You need to allocate new space as well.  Consider this code fragment:</p>

<pre><code>char * new_str ;
if((new_str = malloc(strlen(str1)+strlen(str2)+1)) != NULL){
    new_str[0] = '\0';   // ensures the memory is an empty string
    strcat(new_str,str1);
    strcat(new_str,str2);
} else {
    fprintf(STDERR,""malloc failed!\n"");
    // exit?
}
</code></pre>

<p>You might want to consider <code>strnlen(3)</code> which is slightly safer.</p>

<p><em>Updated</em>, see above.  In some versions of the C runtime, the memory returned by <code>malloc</code> isn't initialized to 0.  I believe the newer C spec actually requires malloc to do so, but just in case, setting the first byte of <code>new_str</code> to zero ensures that it looks like an empty string to strcat.</p>
","5901241"
"How do I return multiple values from a function in C?","171067","","<p>If I have a function that produces a result <code>int</code> and a result <code>string</code>, how do I return them both from a function?</p>

<p>As far as I can tell I can only return one thing, as determined by the type preceding the function name.</p>
","<p>I don't know what your <code>string</code> is, but I'm going to assume that it manages its own memory.</p>

<p>You have two solutions:</p>

<p>1: Return a <code>struct</code> which contains all the types you need.</p>

<pre><code>struct Tuple {
    int a;
    string b;
};

struct Tuple getPair() {
    Tuple r = { 1, getString() };
    return r;
}

void foo() {
    struct Tuple t = getPair();
}
</code></pre>

<p>2: Use pointers to pass out values.</p>

<pre><code>void getPair(int* a, string* b) {
    // Check that these are not pointing to NULL
    assert(a);
    assert(b);
    *a = 1;
    *b = getString();
}

void foo() {
    int a, b;
    getPair(&amp;a, &amp;b);
}
</code></pre>

<p>Which one you choose to use depends largely on personal preference as to whatever semantics you like more.</p>
","2620158"
"Why can't I find <conio.h> on Linux?","170917","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/3276546/how-to-implement-getch-function-of-c-in-linux"">How to implement getch() function of C in Linux?</a>  </p>
</blockquote>



<p>I've been searching for a <code>Linux</code> version of the <code>conio.h</code> Header file, but haven't found any...</p>

<p>I'm using <code>gcc</code> and the Text-Editor <code>Geany</code> to compile my <code>C</code> Code.</p>

<p>Is there a way to replace its functions? For example, <code>getch()</code></p>

<p>Thank You</p>
","<p><code>conio.h</code> is a <code>C</code> header file used in old MS-DOS compilers to create text user interfaces. Compilers that targeted non-DOS operating systems, such as Linux, Win32 and OS/2, provided different implementations of these functions.</p>

<p>The <code>#include &lt;curses.h&gt;</code> will give you almost all the functionalities that was provided in <code>conio.h</code></p>

<p>nucurses need to be installed at the first place</p>

<p>In deb based Distros use </p>

<p><code>sudo apt-get install libncurses5-dev libncursesw5-dev</code></p>

<p>And in rpm based distros use </p>

<p><code>sudo yum install ncurses-devel ncurses</code></p>

<p>For <code>getch()</code> class of functions, you can try <a href=""http://tldp.org/HOWTO/NCURSES-Programming-HOWTO/scanw.html#GETCHCLASS"" rel=""noreferrer"">this</a></p>
","8792443"
"How to get the current directory in a C program?","170586","","<p>I'm making a C program where I need to get the directory that the program is started from.  This program is written for UNIX computers. I've been looking at <code>opendir()</code> and <code>telldir()</code>, but <code>telldir()</code> returns a <code>off_t (long int)</code>, so it really doesn't help me. </p>

<p>How can I get the current path in a string (char array)?</p>
","<p>Have you had a look at <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/functions/getcwd.html"" rel=""noreferrer""><code>getcwd()</code></a>?</p>

<pre><code>#include &lt;unistd.h&gt;
char *getcwd(char *buf, size_t size);
</code></pre>

<p>Simple example:</p>

<pre><code>#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;

int main() {
   char cwd[1024];
   if (getcwd(cwd, sizeof(cwd)) != NULL)
       fprintf(stdout, ""Current working dir: %s\n"", cwd);
   else
       perror(""getcwd() error"");
   return 0;
}
</code></pre>
","298518"
"Difference between static and shared libraries?","170425","","<p>What is the difference between static and shared libraries?</p>

<p>I use Eclipse and there are several project types including Static Libraries and Shared Libraries? Does one have an advantage over the other?</p>
","<p>Shared libraries are .so (or in Windows .dll, or in OS X .dylib) files. All the code relating to the library is in this file, and it is referenced by programs using it at run-time. A program using a shared library only makes reference to the code that it uses in the shared library.</p>

<p>Static libraries are .a (or in Windows .lib) files. All the code relating to the library is in this file, and it is directly linked into the program at compile time. A program using a static library takes copies of the code that it uses from the static library and makes it part of the program. [Windows also has .lib files which are used to reference .dll files, but they act the same way as the first one].</p>

<p>There are advantages and disadvantages in each method.</p>

<p>Shared libraries reduce the amount of code that is duplicated in each program that makes use of the library, keeping the binaries small. It also allows you to replace the shared object with one that is functionally equivalent, but may have added performance benefits without needing to recompile the program that makes use of it. Shared libraries will, however have a small additional cost for the execution of the functions as well as a run-time loading cost as all the symbols in the library need to be connected to the things they use. Additionally, shared libraries can be loaded into an application at run-time, which is the general mechanism for implementing binary plug-in systems.</p>

<p>Static libraries increase the overall size of the binary, but it means that you don't need to carry along a copy of the library that is being used. As the code is connected at compile time there are not any additional run-time loading costs. The code is simply there.</p>

<p>Personally, I prefer shared libraries, but use static libraries when needing to ensure that the binary does not have many external dependencies that may be difficult to meet, such as specific versions of the C++ standard library or specific versions of the Boost C++ library.</p>
","2649430"
"How do you implement a circular buffer in C?","170230","","<p>I have a need for a fixed-size (selectable at run-time when creating it, not compile-time) circular buffer which can hold objects of any type and it needs to be <em>very</em> high performance. I don't think there will be resource contention issues since, although it's in a multi-tasking embedded environment, it's a co-operative one so the tasks themselves can manage that.</p>

<p>My initial thought were to store a simple struct in the buffer which would contain the type (simple enum/define) and a void pointer to the payload but I want this to be as fast as possible so I'm open to suggestions that involve bypassing the heap.</p>

<p>Actually I'm happy to bypass any of the standard library for raw speed - from what I've seen of the code, it's not heavily optimized for the CPU : it looks like they just compiled C code for things like <code>strcpy()</code> and such, there's no hand-coded assembly.</p>

<p>Any code or ideas would be greatly appreciated. The operations required are:</p>

<ul>
<li>create a buffer with specific size.</li>
<li>put at the tail.</li>
<li>get from the head.</li>
<li>return the count.</li>
<li>delete a buffer.</li>
</ul>
","<p>Can you enumerate the types needed at the time you code up the buffer, or do you need to be able to add types at run time via dynamic calls?  If the former, then I would create the buffer as a heap-allocated array of n structs, where each struct consists of two elements: an enum tag identifying the data type, and a union of all the data types.  What you lose in terms of extra storage for small elements, you make up in terms of not having to deal with allocation/deallocation and the resulting memory fragmentation.  Then you just need to keep track of the start and end indices that define the head and tail elements of the buffer, and make sure to compute mod n when incrementing/decrementing the indices.</p>
","827812"
"C - determine if a number is prime","169781","","<p>I am trying to come up with a method that takes an integer and returns a boolean to say if the number is prime or not and I don't know much C; would anyone care to give me some pointers?</p>

<p>Basically, I would do this in C# like this:</p>

<pre><code>static bool IsPrime(int number)
{
    for (int i = 2; i &lt; number; i++)
    {
        if (number % i == 0 &amp;&amp; i != number)
            return false;
    }
    return true;
}
</code></pre>
","<p>OK, so forget about C.  Suppose I give you a number and ask you to determine if it's prime.  How do you do it?  Write down the steps clearly, <em>then</em> worry about translating them into code.</p>

<p>Once you have the algorithm determined, it will be much easier for you to figure out how to write a program, and for others to help you with it.</p>

<p><strong>edit:</strong> Here's the C# code you posted:</p>

<pre><code>static bool IsPrime(int number) {
    for (int i = 2; i &lt; number; i++) {
        if (number % i == 0 &amp;&amp; i != number) return false;
    }
    return true;
}
</code></pre>

<p>This is <em>very nearly</em> valid C as is; there's no <code>bool</code> type in C, and no <code>true</code> or <code>false</code>, so you need to modify it a little bit (edit: Kristopher Johnson correctly points out that C99 added the stdbool.h header).  Since some people don't have access to a C99 environment (but you should use one!), let's make that very minor change:</p>

<pre><code>int IsPrime(int number) {
    int i;
    for (i=2; i&lt;number; i++) {
        if (number % i == 0 &amp;&amp; i != number) return 0;
    }
    return 1;
}
</code></pre>

<p>This is a perfectly valid C program that does what you want.  We can improve it a little bit without too much effort.  First, note that <code>i</code> is always less than <code>number</code>, so the check that <code>i != number</code> always succeeds; we can get rid of it.</p>

<p>Also, you don't actually need to try divisors all the way up to <code>number - 1</code>; you can stop checking when you reach sqrt(number).  Since <code>sqrt</code> is a floating-point operation and that brings a whole pile of subtleties, we won't actually compute <code>sqrt(number)</code>.  Instead, we can just check that <code>i*i &lt;= number</code>:</p>

<pre><code>int IsPrime(int number) {
    int i;
    for (i=2; i*i&lt;=number; i++) {
        if (number % i == 0) return 0;
    }
    return 1;
}
</code></pre>

<p>One last thing, though; there was a small bug in your original algorithm!  If <code>number</code> is negative, or zero, or one, this function will claim that the number is prime.  You likely want to handle that properly, and you may want to make <code>number</code> be unsigned, since you're more likely to care about positive values only:</p>

<pre><code>int IsPrime(unsigned int number) {
    if (number &lt;= 1) return 0; // zero and one are not prime
    unsigned int i;
    for (i=2; i*i&lt;=number; i++) {
        if (number % i == 0) return 0;
    }
    return 1;
}
</code></pre>

<p>This definitely isn't the fastest way to check if a number is prime, but it works, and it's pretty straightforward.  We barely had to modify your code at all!</p>
","1538653"
"unsigned int vs. size_t","169620","","<p>I notice that modern C and C++ code seems to use <code>size_t</code> instead of <code>int</code>/<code>unsigned int</code> pretty much everywhere - from parameters for C string functions to the STL.  I am curious as to the reason for this and the benefits it brings.</p>
","<p>The <code>size_t</code> type is the unsigned integer type that is the result of the <code>sizeof</code> operator (and the <code>offsetof</code> operator), so it is guaranteed to be big enough to contain the size of the biggest object your system can handle (e.g., a static array of 8Gb).</p>

<p>The <code>size_t</code> type may be bigger than, equal to, or smaller than an <code>unsigned int</code>, and your compiler might make assumptions about it for optimization.</p>

<p>You may find more precise information in the C99 standard, section 7.17, a draft of which is available on the Internet in <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf"" rel=""noreferrer"">pdf</a> format, or in the C11 standard, section 7.19, also available as a <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf"" rel=""noreferrer"">pdf draft</a>.</p>
","131833"
"Return a `struct` from a function in C","169105","","<p>Today I was teaching a couple of friends how to use C <code>struct</code>s. One of them asked if you could return a <code>struct</code> from a function, to which I replied: ""No! You'd return pointers to dynamically <code>malloc</code>ed <code>struct</code>s instead.""</p>

<p>Coming from someone who primarily does C++, I was expecting not be able to return <code>struct</code>s by values. In C++ you can overload the <code>operator =</code> for your objects and makes complete sense to have a function to return your object by value. In C, however, you do not have that option and so it got me thinking what the compiler is actually doing. Consider the following:</p>

<pre><code>struct MyObj{
    double x, y;
};

struct MyObj foo(){
    struct MyObj a;

    a.x = 10;
    a.y = 10;

    return a;
}        

int main () {

    struct MyObj a;

    a = foo();    // This DOES work
    struct b = a; // This does not work

    return 0;
}    
</code></pre>

<p>I understand why <code>struct b = a;</code> should not work -- you cannot overload <code>operator =</code> for your data type. How is it that <code>a = foo();</code> compiles fine? Does it mean something other than <code>struct b = a;</code>? Maybe the question to ask is: What exactly does the <code>return</code> statement in conjunction to <code>=</code> sign do?</p>

<p>[edit]: Ok, I was just pointed <code>struct b = a</code> is a syntax error -- that's correct and I'm an idiot! But that makes it even more complicated! Using <code>struct MyObj b = a</code> does indeed work! What am I missing here?</p>
","<p>You can return a structure from a function (or use the <code>=</code> operator) without any problems.  It's a well-defined part of the language.  The only problem with <code>struct b = a</code> is that you didn't provide a complete type.  <code>struct MyObj b = a</code> will work just fine.  You can pass structures <em>to</em> functions as well - a structure is exactly the same as any built-in type for purposes of parameter passing, return values, and assignment.</p>

<p>Here's a simple demonstration program that does all three - passes a structure as a parameter, returns a structure from a function, and uses structures in assignment statements:</p>

<pre><code>#include &lt;stdio.h&gt;

struct a {
   int i;
};

struct a f(struct a x)
{
   struct a r = x;
   return r;
}

int main(void)
{
   struct a x = { 12 };
   struct a y = f(x);
   printf(""%d\n"", y.i);
   return 0;
}
</code></pre>

<p>The next example is pretty much exactly the same, but uses the built-in <code>int</code> type for demonstration purposes.  The two programs have the same behaviour with respect to pass-by-value for parameter passing, assignment, etc.:</p>

<pre><code>#include &lt;stdio.h&gt;

int f(int x) 
{
  int r = x;
  return r;
}

int main(void)
{
  int x = 12;
  int y = f(x);
  printf(""%d\n"", y);
  return 0;
}
</code></pre>
","9653083"
"C programming: Dereferencing pointer to incomplete type error","167973","","<p>I have a struct defined as:  </p>

<pre><code>struct {
 char name[32];
 int  size;
 int  start;
 int  popularity;
} stasher_file;
</code></pre>

<p>and an array of pointers to those structs:  </p>

<pre><code>struct stasher_file *files[TOTAL_STORAGE_SIZE];
</code></pre>

<p>In my code, I'm making a pointer to the struct and setting its members, and adding it to the array:</p>

<pre><code> ...
 struct stasher_file *newFile;
 strncpy(newFile-&gt;name, name, 32);
 newFile-&gt;size = size;
 newFile-&gt;start = first_free;
 newFile-&gt;popularity = 0;
 files[num_files] = newFile;
 ...
</code></pre>

<p>I'm getting the following error:</p>

<blockquote>
  <p>error: dereferencing pointer to incomplete type</p>
</blockquote>

<p>whenever I try to access the members inside <code>newFile</code>. What am I doing wrong?</p>
","<p>You haven't defined <code>struct stasher_file</code> by your first definition. What you have defined is an <em>nameless</em> struct type and a variable <code>stasher_file</code> of that type. Since there's no definition for such type as <code>struct stasher_file</code> in your code, the compiler complains about incomplete type.</p>

<p>In order to define <code>struct stasher_file</code>, you should have done it as follows</p>

<pre><code>struct stasher_file {
 char name[32];
 int  size;
 int  start;
 int  popularity;
};
</code></pre>

<p>Note where the <code>stasher_file</code> name is placed in the definition.</p>
","2576572"
"How do I compile a .c file on my Mac?","167318","","<p>How do I compile a .c file on my Mac? </p>
","<p>You will need to install the <a href=""http://developer.apple.com/technologies/tools/"" rel=""noreferrer"">Apple Developer Tools</a>. Once you have done that, the easiest thing is to either use the Xcode IDE or use <code>gcc</code> from the command line.</p>

<p>According to Apple's site, the latest version of Xcode (3.2.1) only runs on Snow Leopard (10.6) so if you have an earlier version of OS X you will need to use an older version of Xcode. Your Mac should have come with a Developer Tools DVD which will contain a version that should run on your system. Also, the Apple Developer Tools site still has older versions available for download. Xcode 3.1.4 should run on Leopard (10.5).</p>
","2603502"
"What does the \0 symbol mean in a C string?","166509","","<p>Consider following code:</p>

<pre><code>char str[]= ""Hello\0"";
</code></pre>

<p>What is the length of str array, and with how much 0s it is ending?</p>
","<p><code>sizeof str</code> is 7 - five bytes for the ""Hello"" text, plus the explicit NUL terminator, plus the implicit NUL terminator.</p>

<p><code>strlen(str)</code> is 5 - the five ""Hello"" bytes only.</p>

<p>The key here is that the implicit nul terminator is <em>always</em> added - even if the string literal just happens to end with <code>\0</code>. Of course, <code>strlen</code> just stops at the first <code>\0</code> - it can't tell the difference.</p>

<p>There is one exception to the implicit NUL terminator rule - if you explicitly specify the array size, the string will be truncated to fit:</p>

<pre><code>char str[6] = ""Hello\0""; // strlen(str) = 5, sizeof(str) = 6 (with one NUL)
char str[7] = ""Hello\0""; // strlen(str) = 5, sizeof(str) = 7 (with two NULs)
char str[8] = ""Hello\0""; // strlen(str) = 5, sizeof(str) = 8 (with three NULs per C99 6.7.8.21)
</code></pre>

<p>This is, however, rarely useful, and prone to miscalculating the string length and ending up with an unterminated string. It is also forbidden in C++.</p>
","4711475"
"Convert int to float","166503","","<pre><code>int total=0, number=0;
float percentage=0.0;

percentage=(number/total)*100;
printf(""%.2f"",percentage);
</code></pre>

<p>If the value of number is 50 and total is 100, I should get 50.00 for percentage, at least that is what I want. but I keep getting 0.00 as the answer and tried many changes to the types as well but no avail.</p>
","<p>Integer division truncates, so <code>(50/100)</code> results in 0. You can cast to <code>float</code> (better <code>double</code>) or multiply with <code>100.0</code> (for <code>double</code> precision, <code>100.0f</code> for <code>float</code> precision) first,</p>

<pre><code>double percentage;
// ...
percentage = 100.0*number/total;
// percentage = (double)number/total * 100;
</code></pre>

<p>or</p>

<pre><code>float percentage;
// ...
percentage = (float)number/total * 100;
// percentage = 100.0f*number/total;
</code></pre>

<p>Since floating point arithmetic is not associative, the results of <code>100.0*number/total</code> and <code>(double)number/total * 100</code> may be slightly different (the same holds for <code>float</code>), but it's extremely unlikely to influence the first two places after the decimal point, so it probably doesn't matter which way you choose.</p>
","13530287"
"How to split a string to 2 strings in C","163696","","<p>I was wondering how you could take 1 string, split it into 2 with a delimiter, such as space, and assign the 2 parts to 2 separate strings.  I've tried using <code>strtok()</code> but to no avail. </p>
","<pre><code>#include &lt;string.h&gt;

char *token;
char line[] = ""SEVERAL WORDS"";
char *search = "" "";


// Token will point to ""SEVERAL"".
token = strtok(line, search);


// Token will point to ""WORDS"".
token = strtok(NULL, search);
</code></pre>

<hr>

<h3>Update</h3>

<p>Note that on some operating systems, <code>strtok</code> man page mentions:</p>

<blockquote>
  <p>This interface is obsoleted by strsep(3).</p>
</blockquote>

<p>An example with <code>strsep</code> is shown below:</p>

<pre><code>char* token;
char* string;
char* tofree;

string = strdup(""abc,def,ghi"");

if (string != NULL) {

  tofree = string;

  while ((token = strsep(&amp;string, "","")) != NULL)
  {
    printf(""%s\n"", token);
  }

  free(tofree);
}
</code></pre>
","2523494"
"Why is “while ( !feof (file) )” always wrong?","163408","","<p>I've seen people trying to read files like this in a lot of posts lately.</p>

<p><strong><em>Code</em></strong></p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(int argc, char **argv)
{
    char * path = argc &gt; 1 ? argv[1] : ""input.txt"";

    FILE * fp = fopen(path, ""r"");
    if( fp == NULL ) {
        perror(path);
        return EXIT_FAILURE;
    }

    while( !feof(fp) ) {  /* THIS IS WRONG */
        /* Read and process data from file… */
    }
    fclose(fp);
    return EXIT_SUCCESS;
}
</code></pre>

<p>What is wrong with this <code>while( !feof(fp))</code> loop?</p>
","<p>I'd like to provide an abstract, high-level perspective.</p>

<h3>Concurrency and simultaneity</h3>

<p>I/O operations interact with the environment. The environment is not part of your program, and not under your control. The environment truly exists ""concurrently"" with your program. As with all things concurrent, questions about the ""current state"" don't make sense: There is no concept of ""simultaneity"" across concurrent events. Many properties of state simply don't <em>exist</em> concurrently.</p>

<p>Let me make this more precise: Suppose you want to ask, ""do you have more data"". You could ask this of a concurrent container, or of your I/O system. But the answer is generally unactionable, and thus meaningless. So what if the container says ""yes"" &ndash; by the time you try reading, it may no longer have data. Similarly, if the answer is ""no"", by the time you try reading, data may have arrived. The conclusion is that there simply <em>is</em> no property like ""I have data"", since you cannot act meaningfully in response to any possible answer. (The situation is slightly better with buffered input, where you might conceivably get a ""yes, I have data"" that constitutes some kind of guarantee, but you would still have to be able to deal with the opposite case. And with output the situation is certainly just as bad as I described: you never know if that disk or that network buffer is full.)</p>

<p>So we conclude that it is impossible, and in fact un<em>reasonable</em>, to ask an I/O system whether it <em>will be</em> able to perform an I/O operation. The only possible way we can interact with it (just as with a concurrent container) is to <em>attempt</em> the operation and check whether it succeeded or failed. At that moment where you interact with the environment, then and only then can you know whether the interaction was actually possible, and at that point you must commit to performing the interaction. (This is a ""synchronisation point"", if you will.)</p>

<h3>EOF</h3>

<p>Now we get to EOF. EOF is the <em>response</em> you get from an <em>attempted</em> I/O operation. It means that you were trying to read or write something, but when doing so you failed to read or write any data, and instead the end of the input or output was encountered. This is true for essentially all the I/O APIs, whether it be the C standard library, C++ iostreams, or other libraries. As long as the I/O operations succeed, you simply <em>cannot know</em> whether further, future operations will succeed. You <em>must</em> always first try the operation and then respond to success or failure.</p>

<h3>Examples</h3>

<p>In each of the examples, note carefully that we <em>first</em> attempt the I/O operation and <em>then</em> consume the result if it is valid. Note further that we <em>always</em> must use the result of the I/O operation, though the result takes different shapes and forms in each example.</p>

<ul>
<li><p>C stdio, read from a file:</p>

<pre><code>for (;;) {
    size_t n = fread(buf, 1, bufsize, infile);
    consume(buf, n);
    if (n &lt; bufsize) { break; }
}
</code></pre>

<p>The result we must use is <code>n</code>, the number of elements that were read (which may be as little as zero).</p></li>
<li><p>C stdio, <code>scanf</code>:</p>

<pre><code>for (int a, b, c; scanf(""%d %d %d"", &amp;a, &amp;b, &amp;c) == 3; ) {
    consume(a, b, c);
}
</code></pre>

<p>The result we must use is the return value of <code>scanf</code>, the number of elements converted.</p></li>
<li><p>C++, iostreams formatted extraction:</p>

<pre><code>for (int n; std::cin &gt;&gt; n; ) {
    consume(n);
}
</code></pre>

<p>The result we must use is <code>std::cin</code> itself, which can be evaluated in a boolean context and tells us whether the stream is still in the <code>good()</code> state.</p></li>
<li><p>C++, iostreams getline:</p>

<pre><code>for (std::string line; std::getline(std::cin, line); ) {
    consume(line);
}
</code></pre>

<p>The result we must use is again <code>std::cin</code>, just as before.</p></li>
<li><p>POSIX, <code>write(2)</code> to flush a buffer:</p>

<pre><code>char const * p = buf;
ssize_t n = bufsize;
for (ssize_t k = bufsize; (k = write(fd, p, n)) &gt; 0; p += k, n -= k) {}
if (n != 0) { /* error, failed to write complete buffer */ }
</code></pre>

<p>The result we use here is <code>k</code>, the number of bytes written. The point here is that we can only know how many bytes were written <em>after</em> the write operation.</p></li>
<li><p>POSIX <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/functions/getline.html"" rel=""noreferrer""><code>getline()</code></a></p>

<pre><code>char *buffer = NULL;
size_t bufsiz = 0;
ssize_t nbytes;
while ((nbytes = getline(&amp;buffer, &amp;bufsiz, fp)) != -1)
{
    /* Use nbytes of data in buffer */
}
free(buffer);
</code></pre>

<p>The result we must use is <code>nbytes</code>, the number of bytes up to and including the newline (or EOF if the file did not end with a newline).</p>

<p>Note that the function explicitly returns <code>-1</code> (and not EOF!) when an error occurs or it reaches EOF.</p></li>
</ul>

<p>You may notice that we very rarely spell out the actual word ""EOF"". We usually detect the error condition in some other way that is more immediately interesting to us (e.g. failure to perform as much I/O as we had desired). In every example there is some API feature that could tell us explicitly that the EOF state has been encountered, but this is in fact not a terribly useful piece of information. It is much more of a detail than we often care about. What matters is whether the I/O succeeded, more-so than how it failed.</p>

<ul>
<li><p>A final example that actually queries the EOF state: Suppose you have a string and want to test that it represents an integer in its entirety, with no extra bits at the end except whitespace. Using C++ iostreams, it goes like this:</p>

<pre><code>std::string input = ""   123   "";   // example

std::istringstream iss(input);
int value;
if (iss &gt;&gt; value &gt;&gt; std::ws &amp;&amp; iss.get() == EOF) {
    consume(value);
} else {
    // error, ""input"" is not parsable as an integer
}
</code></pre>

<p>We use two results here. The first is <code>iss</code>, the stream object itself, to check that the formatted extraction to <code>value</code> succeeded. But then, after also consuming whitespace, we perform another I/O/ operation, <code>iss.get()</code>, and expect it to fail as EOF, which is the case if the entire string has already been consumed by the formatted extraction.</p>

<p>In the C standard library you can achieve something similar with the <code>strto*l</code> functions by checking that the end pointer has reached the end of the input string.</p></li>
</ul>

<h3>The answer</h3>

<p><code>while(!eof)</code> is wrong because it tests for something that is irrelevant and fails to test for something that you need to know. The result is that you are erroneously executing code that assumes that it is accessing data that was read successfully, when in fact this never happened.</p>
","26557243"
"To the power of in C?","162206","","<p>So in python, all I have to do is</p>

<pre><code>print(3**4) 
</code></pre>

<p>Which gives me 81</p>

<p>How do I do this in C? I searched a bit and say the <code>exp()</code> function, but have no clue how to use it, thanks in advance</p>
","<p>You need <code>pow();</code> function from <code>math.h</code> header.<br>
<strong>syntax</strong>  </p>

<pre><code>   #include &lt;math.h&gt;

   double pow(double x, double y);
   float powf(float x, float y);
   long double powl(long double x, long double y);
</code></pre>

<p>Here x is base and y is exponent.  result is <code>x^y</code>.   </p>

<p><strong>usage</strong>  </p>

<pre><code>pow(2,4);  

result is 2^4 = 16. //this is math notation only   
// In c ^ is a bitwise operator
</code></pre>

<p>And make sure you include <code>math.h</code>  to avoid warning  (""<code>incompatible implicit declaration of built in function 'pow'</code> ""). </p>

<p>Link math library by using <code>-lm</code> while compiling. This is dependent on Your environment.<br>
For example if you use Windows it's not required to do so, but it is in UNIX based systems.</p>
","18733753"
"Structure padding and packing","161979","","<p>Consider:</p>

<pre><code>struct mystruct_A
{
   char a;
   int b;
   char c;
} x;

struct mystruct_B
{
   int b;
   char a;
} y;
</code></pre>

<p>The sizes of the structures are 12 and 8 respectively.</p>

<p>Are these structures padded or packed?</p>

<p>When does padding or packing take place?</p>
","<p><strong>Padding</strong> <a href=""http://en.wikipedia.org/wiki/Data_structure_alignment"" rel=""noreferrer"">aligns</a> structure members to ""natural"" address boundaries - say, <code>int</code> members would have offsets, which are <code>mod(4) == 0</code> on 32-bit platform. Padding is on by default. It inserts the following ""gaps"" into your first structure:</p>

<pre><code>struct mystruct_A {
    char a;
    char gap_0[3]; /* inserted by compiler: for alignment of b */
    int b;
    char c;
    char gap_1[3]; /* -""-: for alignment of the whole struct in an array */
} x;
</code></pre>

<p><strong>Packing</strong>, on the other hand prevents compiler from doing padding - this has to be explicitly requested - under GCC it's <code>__attribute__((__packed__))</code>, so the following:</p>

<pre><code>struct __attribute__((__packed__)) mystruct_A {
    char a;
    int b;
    char c;
};
</code></pre>

<p>would produce structure of size <code>6</code> on a 32-bit architecture.</p>

<p>A note though - unaligned memory access is slower on architectures that allow it (like x86 and amd64), and is explicitly prohibited on <em>strict alignment architectures</em> like SPARC.</p>
","4306269"
"Passing command line arguments in Visual Studio 2010?","161378","","<p>I am currently working on a C project and could not figure out how to pass command line arguments to my main function in Visual Studio 2010 Express Edition. I want to debug - how do these command line arguments work?</p>
","<ul>
<li>Right click your project in Solution Explorer and select Properties from the menu</li>
<li>Go to Configuration Properties -> Debugging</li>
<li>Set the Command Arguments in the property list.</li>
</ul>

<p><img src=""https://i.stack.imgur.com/EI9FU.png"" alt=""Adding Command Line Arguments""></p>
","3697320"
"Why are hexadecimal numbers prefixed with 0x?","161319","","<p>Why are hexadecimal numbers prefixed as <code>0x</code>?
 I understand the usage of the prefix but I don't understand the significance of why <code>0x</code> was chosen.</p>
","<p><strong>Short story:</strong> The <code>0</code> tells the parser it's dealing with a constant (and not an identifier/reserved word). Something is still needed to specify the number base: the <code>x</code> is an arbitrary choice.</p>

<p><strong>Long story:</strong> In the 60's, the prevalent programming number systems were decimal and <em>octal</em> — mainframes had 12, 24 or 36 bits per byte, which is nicely divisible by 3 = log2(8).</p>

<p>The BCPL language used the syntax <code>8 1234</code> for octal numbers. When Ken Thompson created B from BCPL, he used the <code>0</code> prefix instead. This is great because</p>

<ol>
<li>an integer constant now always consists of a single token,</li>
<li>the parser can still tell right away it's got a constant,</li>
<li>the parser can immediately tell the base (<code>0</code> is the same in both bases),</li>
<li>it's mathematically sane (<code>00005 == 05</code>), and</li>
<li>no precious special characters are needed (as in <code>#123</code>).</li>
</ol>

<p>When C was created from B, the need for hexadecimal numbers arose (the PDP-11 had 16-bit words) and all of the points above were still valid. Since octals were still needed for other machines, <code>0x</code> was arbitrarily chosen (<code>00</code> was probably ruled out as awkward).</p>

<p>C# is a descendant of C, so it inherits the syntax.</p>
","4581351"
"C programming in Visual Studio","160561","","<p>Can I use Visual Studio to learn C programming? In the new project menu I can choose between Visual Basic, Visual C#, Visual C++, Visual F# and others but I don't see ""C"" or ""Visual C"".</p>
","<p>Short answer: Yes, you need to rename .cpp files to c, so you can write C:
<a href=""https://msdn.microsoft.com/en-us/library/bb384838.aspx?f=255&amp;MSPPError=-2147217396"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/bb384838.aspx?f=255&amp;MSPPError=-2147217396</a></p>

<p>From the link above:</p>

<blockquote>
  <p>By default, the Visual C++ compiler treats all files that end in .c as C source code, and all files that end in .cpp as C++ source code. To force the compiler to treat all files as C regardless of file name extension, use the /Tc compiler option.</p>
</blockquote>

<p>That being said, I do not recommend learning C language in Visual Studio, why VS? It does have lots of features you are not going to use while learning C</p>
","20821436"
"How to use boolean datatype in C?","160381","","<p>I was just writing code in C and it turns out it doesn't have a boolean/bool datatype. Is there any C library which I can include to give me the ability to return a boolean/bool datatype?</p>
","<p>If you have a compiler that supports C99 you can</p>

<pre><code>#include &lt;stdbool.h&gt;
</code></pre>

<p>Otherwise, you can define your own if you'd like.  Depending on how you want to use it (and whether you want to be able to compile your code as C++), your implementation could be as simple as:</p>

<pre><code>#define bool int
#define true 1
#define false 0
</code></pre>

<p>In my opinion, though, you may as well just use <code>int</code> and use zero to mean false and nonzero to mean true.  That's how it's usually done in C.</p>
","4159725"
"shared global variables in C","160221","","<p>How can I create global variables that are shared in C? If I put it in a header file, then the linker complains that the variables are already defined. Is the only way to declare the variable in one of my C files and to manually put in <code>extern</code>s at the top of all the other C files that want to use it? That sounds not ideal.</p>
","<p>In the header file write it with <code>extern</code>.
And at the global scope of one of the c files declare it without <code>extern</code>.</p>
","3010658"
"How to split a string literal across multiple lines in C / Objective-C?","159849","","<p>I have a pretty long sqlite query:</p>

<pre><code>const char *sql_query = ""SELECT statuses.word_id FROM lang1_words, statuses WHERE statuses.word_id = lang1_words.word_id ORDER BY lang1_words.word ASC"";
</code></pre>

<p>How can I break it in a number of lines to make it easier to read?
If I do the following:</p>

<pre><code>const char *sql_query = ""SELECT word_id
                        FROM table1, table2
                        WHERE table2.word_id = table1.word_id
                        ORDER BY table1.word ASC"";
</code></pre>

<p>I am getting a error.</p>

<p>Is there a way to write queries in multiple lines?</p>
","<p>There are two ways to split strings over multiple lines:</p>

<h2>Using \</h2>

<p>All lines in C can be split into multiple lines using \.</p>

<p>Plain C:</p>

<pre><code>char *my_string = ""Line 1 \
                   Line 2"";
</code></pre>

<p>Objective-C:</p>

<pre><code>NSString *my_string = @""Line1 \
                        Line2"";
</code></pre>

<h2>Better approach</h2>

<p>There's a better approach that works just for strings.</p>

<p>Plain C:</p>

<pre><code>char *my_string = ""Line 1 ""
                  ""Line 2"";
</code></pre>

<p>Objective-C:</p>

<pre><code>NSString *my_string = @""Line1 ""
                       ""Line2"";    // the second @ is optional
</code></pre>

<p>The second approach is better, because there isn't a lot of whitespace included. For a SQL query however, both are possible.</p>

<p>NOTE: With a #define, you have to add an extra '\' to concatenate the two strings:</p>

<p>Plain C:</p>

<pre><code>#define kMyString ""Line 1""\
                  ""Line 2""
</code></pre>
","797351"
"Objective-C : BOOL vs bool","159833","","<p>I saw the ""new type"" <code>BOOL</code> (<code>YES</code>, <code>NO</code>).</p>

<p>I read that this type is almost like a char.</p>

<p>For testing I did :</p>

<pre><code>NSLog(@""Size of BOOL %d"", sizeof(BOOL));
NSLog(@""Size of bool %d"", sizeof(bool));
</code></pre>

<p>Good to see that both logs display ""1"" (sometimes in C++ bool is an int and its sizeof is 4)</p>

<p>So I was just wondering if there were some issues with the bool type or something ?</p>

<p>Can I just use bool (that seems to work) without losing speed?</p>
","<p>From the definition in <code>objc.h</code>:</p>

<pre><code>#if (TARGET_OS_IPHONE &amp;&amp; __LP64__)  ||  TARGET_OS_WATCH
typedef bool BOOL;
#else
typedef signed char BOOL; 
// BOOL is explicitly signed so @encode(BOOL) == ""c"" rather than ""C"" 
// even if -funsigned-char is used.
#endif

#define YES ((BOOL)1)
#define NO  ((BOOL)0)
</code></pre>

<p>So, yes, you can assume that BOOL is a char. You can use the (C99) <code>bool</code> type, but all of Apple's Objective-C frameworks and most Objective-C/Cocoa code uses BOOL, so you'll save yourself headache if the typedef ever changes by just using BOOL.</p>
","544250"
"c - convert a mixed-case string to all lower case","159734","","<p>What is the best/cleanest way to convert a mixed case string to a lowercase one in C?</p>
","<p>It's in the standard library, and that's the most straight forward way I can see to implement such a function. So yes, just loop through the string and convert each character to lowercase. </p>

<p>Something trivial like this:</p>

<pre><code>for(int i = 0; str[i]; i++){
  str[i] = tolower(str[i]);
}
</code></pre>

<p>or if you prefer one liners, then you can use this one by J.F. Sebastian:</p>

<pre><code>for ( ; *p; ++p) *p = tolower(*p);
</code></pre>
","2661788"
"What do \t and \b do?","158637","","<p>I expect this simple line of code</p>

<pre><code>printf(""foo\b\tbar\n"");
</code></pre>

<p>to replace ""o"" with ""\t"" and to produce the following output</p>

<pre><code>fo     bar
</code></pre>

<p>(assuming that tab stop occurs every 8 characters).
On the contrary I get</p>

<pre><code>foo    bar
</code></pre>

<p>It seems that my shell interprets \b as ""move the cursors one position back"" and \t as ""move cursor to the next tab stop"". Is this behaviour specific to the shell in which I'm running the code? Should I expect different behaviour on different systems?</p>
","<p>Backspace and tab both move the cursor position.  Neither is truly a 'printable' character.</p>

<p>Your code says:</p>

<ol>
<li>print ""foo""</li>
<li>move the cursor back one space</li>
<li>move the cursor forward to the next tabstop</li>
<li>output ""bar"".</li>
</ol>

<p>To get the output you expect, you need <code>printf(""foo\b \tbar"")</code>.  Note the extra 'space'.  That says:</p>

<ol>
<li>output ""foo""</li>
<li>move the cursor back one space</li>
<li>output a ' ' (this replaces the second 'o').</li>
<li>move the cursor forward to the next tabstop</li>
<li>output ""bar"".</li>
</ol>

<p>Most of the time it is inappropriate to use tabs and backspace for formatting your program output.  Learn to use <code>printf()</code> formatting specifiers.  Rendering of tabs can vary drastically depending on how the output is viewed.</p>

<p>This little script shows one way to alter your terminal's tab rendering.  Tested on Ubuntu + gnome-terminal:</p>

<pre><code>#!/bin/bash
tabs -8 
echo -e ""\tnormal tabstop""
for x in `seq 2 10`; do
  tabs $x
  echo -e ""\ttabstop=$x""
 done

tabs -8
echo -e ""\tnormal tabstop""
</code></pre>

<p>Also see  <code>man setterm</code> and <code>regtabs</code>.</p>

<p>And if you redirect your output or just write to a file, tabs will quite commonly be displayed as fewer than the standard 8 chars, especially in ""programming"" editors and IDEs.</p>

<p>So in otherwords:</p>

<pre><code>printf(""%-8s%s"", ""foo"", ""bar""); /* this will ALWAYS output ""foo     bar"" */
printf(""foo\tbar""); /* who knows how this will be rendered */
</code></pre>

<p>IMHO, tabs in general are rarely appropriate for anything.  An exception might be generating output for a program that requires tab-separated-value input files (similar to comma separated value).</p>

<p>Backspace <code>'\b'</code> is a different story... it should never be used to create a text file since it will just make a text editor spit out garbage.  But it does have many applications in writing interactive command line programs that cannot be accomplished with format strings alone.  If you find yourself needing it a lot, check out ""ncurses"", which gives you much better control over where your output goes on the terminal screen.  And typically, since it's 2011 and not 1995, a GUI is usually easier to deal with for highly interactive programs.  But again, there are exceptions. Like writing a telnet server or console for a new scripting language.</p>
","8659076"
"dereferencing pointer to incomplete type","158561","","<p>I've seen a lot of questions on this but I'm going to ask the question differently without specific code.  Is there a way of <strong><em>EASILY</em></strong> determining what is causing the type to be incomplete?  In my case I'm using someone elses code and I'm completely sure I don't have the headers right, but (since computers do this stuff much faster and better than human eyeballs) is there a way to get the compiler to say, ""hey you <em>think</em> you have type X at line 34 but that's actually <em>missing</em>.""  The error itself only shows up when you assign, which isn't very helpful.</p>
","<p>I saw a question the other day where someone inadvertently used an incomplete type by specifying something like <code>struct a { int q; }; struct A *x; x-&gt;q = 3;</code>. The compiler knew that <code>struct A</code> was a struct, despite <code>A</code> being totally undefined, by virtue of the <code>struct</code> keyword.</p>

<p>That was in C++, where such usage of <code>struct</code> is atypical (and, it turns out, can lead to foot-shooting). In C if you do</p>

<pre><code>typedef struct a {
    ...
} a;
</code></pre>

<p>then you can use <code>a</code> as the typename and omit the <code>struct</code> later. This will lead the compiler to give you an undefined identifier error later, rather than incomplete type, if you mistype the name or forget a header.</p>
","2700689"
"Why is my power operator (^) not working?","158512","","<pre><code>#include ""stdio.h""
#include ""math.h""

void main(void)
{
    int a;
    int result;
    int sum=0;
    printf(""Enter a Number : "");
    scanf(""%d"",&amp;a);
    for(int i=1;i&lt;=4;i++)
    {
        result = a^i;

        sum =sum+result;
    }
    printf(""%d\n"",sum);
}
</code></pre>

<p>I don't know why this '^' is not working as power.</p>
","<p>Well, first off, the <code>^</code> operator in C/C++ is the bit-wise XOR. It has nothing to do with powers.</p>

<p>Now, regarding your problem with using the <code>pow()</code> function, <a href=""http://social.msdn.microsoft.com/forums/en-US/vcgeneral/thread/ce3c5584-a2fc-4955-9f9c-d8b53ed1ed07"" rel=""noreferrer"">some googling</a> shows that casting one of the arguments to double helps:</p>

<pre><code>result = (int) pow((double) a,i);
</code></pre>

<p>Note that I also cast the result to <code>int</code> as all <code>pow()</code> overloads return double, not <code>int</code>. I don't have a MS compiler available so I couldn't check the code above, though.</p>

<p>Since C99, <a href=""http://en.cppreference.com/w/c/numeric/math/pow"" rel=""noreferrer"">there are also <code>float</code> and <code>long double</code> functions called <code>powf</code> and <code>powl</code> respectively</a>, if that is of any help.</p>
","4843444"
"How to initialize array to 0 in C?","158281","","<p>I need a big null array in C as a global. Is there any way to do this besides typing out</p>

<pre><code>char ZEROARRAY[1024] = {0, 0, 0, /* ... 1021 more times... */ };
</code></pre>

<p>?</p>
","<p>Global variables and static variables are automatically initialized to zero. If you have simply</p>

<pre><code>char ZEROARRAY[1024];
</code></pre>

<p>at global scope it will be all zeros at runtime. But actually there <em>is</em> a shorthand syntax if you had a local array. <a href=""http://publib.boulder.ibm.com/infocenter/comphelp/v8v101/index.jsp?topic=/com.ibm.xlcpp8a.doc/language/ref/aryin.htm"" rel=""noreferrer"">If an array is partially initialized, elements that are not initialized receive the value 0 of the appropriate type.</a> You could write:</p>

<pre><code>char ZEROARRAY[1024] = {0};
</code></pre>

<p>The compiler would fill the unwritten entries with zeros. Alternatively you could use <code>memset</code> to initialize the array at program startup:</p>

<pre><code>memset(ZEROARRAY, 0, 1024);
</code></pre>

<p>That would be useful if you had changed it and wanted to reset it back to all zeros.</p>
","2589751"
"How to compile and run C files from within Notepad++ using NppExec plugin?","158214","","<p>How can I configure the NppExec plugin for Notepad++?</p>

<p>I would like NppExec to compile my C files, run them, and show their output, all within Notepad++.</p>
","<p>Here's a procedure for perl, just adapt it for C. Hope it helps.</p>

<ul>
<li>Open Notepad++</li>
<li>Type F6 to open the execute window</li>
<li>Write the following commands:

<ul>
<li><code>npp_save</code> &lt;-- Saves the current document</li>
<li><code>CD $(CURRENT_DIRECTORY)</code> &lt;-- Moves to the current directory</li>
<li><code>perl.exe -c -w ""$(FILE_NAME)""</code> &lt;-- executes the command perl.exe -c -w , example: perl.exe -c -w test.pl (-c = compile -w = warnings) </li>
</ul></li>
<li>Click on Save</li>
<li>Type a name to save the script (ie Perl Compile)</li>
<li>Go to Menu Plugins -> Nppexec -> advanced options -> Menu Item (Note: this is right BELOW 'Menu Items *')</li>
<li>In the combobox titled 'Associated Script' select the script recently created in its dropdown menu, select 'Add/Modify' and click ok -> ok</li>
<li>Restart Notepad++</li>
<li>Go to Settings -> Shortcut mapper -> Plugins -> search for the script name</li>
<li>Select the shortcut to use (ie ctrl + 1), click ok</li>
<li>Verify that you can now run the script created with the shortcut selected. </li>
</ul>
","2526708"
"How to prevent SIGPIPEs (or handle them properly)","158163","","<p>I have a small server program that accepts connections on a TCP or local UNIX socket, reads a simple command and, depending on the command, sends a reply. The problem is that the client may have no interest in the answer sometimes and exits early, so writing to that socket will cause a SIGPIPE and make my server crash. What's the best practice to prevent the crash here? Is there a way to check if the other side of the line is still reading? (select() doesn't seem to work here as it always says the socket is writable). Or should I just catch the SIGPIPE with a handler and ignore it?</p>
","<p>You generally want to ignore the <code>SIGPIPE</code> and handle the error directly in your code.  This is because signal handlers in C have many restrictions on what they can do.</p>

<p>The most portable way to do this is to set the <code>SIGPIPE</code> handler to <code>SIG_IGN</code>.  This will prevent any socket or pipe write from causing a <code>SIGPIPE</code> signal.</p>

<p>To ignore the <code>SIGPIPE</code> signal, use the following code:</p>

<pre><code>signal(SIGPIPE, SIG_IGN);
</code></pre>

<p>If you're using the <code>send()</code> call, another option is to use the <code>MSG_NOSIGNAL</code> option, which will turn the <code>SIGPIPE</code> behavior off on a per call basis.  Note that not all operating systems support the <code>MSG_NOSIGNAL</code> flag.</p>

<p>Lastly, you may also want to consider the <code>SO_SIGNOPIPE</code> socket flag that can be set with <code>setsockopt()</code> on some operating systems.  This will prevent <code>SIGPIPE</code> from being caused by writes just to the sockets it is set on.</p>
","108192"
"Create a basic matrix in C (input by user !)","157703","","<p>I'm trying to ask the user to enter the number of columns and rows they want in a matrix, and then enter the values in the matrix... I'm going to let them insert numbers one row at a time.</p>

<p>How can I create such function ?</p>

<pre><code>#include&lt;stdio.h&gt;
main(){

int mat[10][10],i,j;

for(i=0;i&lt;2;i++)
  for(j=0;j&lt;2;j++){
  scanf(""%d"",&amp;mat[i][j]);
  } 
for(i=0;i&lt;2;i++)
  for(j=0;j&lt;2;j++)
  printf(""%d"",mat[i][j]);

}
</code></pre>

<p>This works for entering the numbers, but it displays them all in one line... The issue here is that I don't know how many columns or rows the user wants, so I cant print out %d %d %d in a matrix form...</p>

<p>Any thoughts?</p>

<p>Thanks :)</p>
","<p>How about the following?</p>

<p>First ask the user for the number of rows and columns, store that in say, <code>nrows</code> and <code>ncols</code> (i.e. <code>scanf(""%d"", &amp;nrows);</code>) and then <a href=""http://pleasemakeanote.blogspot.com/2008/06/2d-arrays-in-c-using-malloc.html"" rel=""noreferrer"">allocate memory for a 2D array</a> of size <em>nrows x ncols</em>. Thus you can have a matrix of a size specified by the user, and not fixed at some dimension you've hardcoded!</p>

<p>Then store the elements with <code>for(i = 0;i &lt; nrows; ++i) ...</code> and display the elements in the same way except you throw in newlines after every row, i.e.</p>

<pre><code>for(i = 0; i &lt; nrows; ++i)
{
   for(j = 0; j &lt; ncols ; ++j) 
   {
      printf(""%d\t"",mat[i][j]);
   }
printf(""\n"");
}
</code></pre>
","2776452"
"How to write log base(2) in c/c++","157225","","<p>Is there any way to write log(base 2) function?</p>

<p>The  C language has 2 built in function -->></p>

<p>1.<code>log</code> which is base e.</p>

<p>2.<code>log10</code> base 10;</p>

<p>But I need log function of base 2.How to calculate this.</p>
","<p>Simple math:</p>

<p>    log<sub>2</sub> (<em>x</em>) = log<sub><em>y</em></sub> (<em>x</em>) / log<sub><em>y</em></sub> (2)</p>

<p>where <em>y</em> can be anything, which for standard log functions is either 10 or <em>e</em>.</p>
","3064939"
"What is "":-!!"" in C code?","157121","","<p>I bumped into this strange macro code in <a href=""https://github.com/torvalds/linux/blob/ff2d8b19a3a62559afba1c53360c8577a7697714/include/linux/kernel.h#L677-L682"" rel=""noreferrer"">/usr/include/linux/kernel.h</a>:</p>

<pre><code>/* Force a compilation error if condition is true, but also produce a
   result (of value 0 and type size_t), so the expression can be used
   e.g. in a structure initializer (or where-ever else comma expressions
   aren't permitted). */
#define BUILD_BUG_ON_ZERO(e) (sizeof(struct { int:-!!(e); }))
#define BUILD_BUG_ON_NULL(e) ((void *)sizeof(struct { int:-!!(e); }))
</code></pre>

<p>What does <code>:-!!</code> do?</p>
","<p>This is, in effect, <strong>a way to check whether the expression e can be evaluated to be 0, and if not, to fail the build</strong>.</p>

<p>The macro is somewhat misnamed; it should be something more like <code>BUILD_BUG_OR_ZERO</code>, rather than <code>...ON_ZERO</code>. (There have been <strong><a href=""http://lkml.indiana.edu/hypermail/linux/kernel/0703.1/1546.html"" rel=""noreferrer"">occasional discussions about whether this is a confusing name</a></strong>.)</p>

<p>You should read the expression like this:</p>

<pre><code>sizeof(struct { int: -!!(e); }))
</code></pre>

<ol>
<li><p><code>(e)</code>: Compute expression <code>e</code>.</p></li>
<li><p><code>!!(e)</code>: Logically negate twice: <code>0</code> if <code>e == 0</code>; otherwise <code>1</code>.</p></li>
<li><p><code>-!!(e)</code>: Numerically negate the expression from step 2: <code>0</code> if it was <code>0</code>; otherwise <code>-1</code>.</p></li>
<li><p><code>struct{int: -!!(0);} --&gt; struct{int: 0;}</code>: If it was zero, then we declare a struct with an anonymous integer bitfield that has width zero. Everything is fine and we proceed as normal.</p></li>
<li><p><code>struct{int: -!!(1);} --&gt; struct{int: -1;}</code>: On the other hand, if it <em>isn't</em> zero, then it will be some negative number. Declaring any bitfield with <em>negative</em> width is a compilation error.</p></li>
</ol>

<p>So we'll either wind up with a bitfield that has width 0 in a struct, which is fine, or a bitfield with negative width, which is a compilation error. Then we take <code>sizeof</code> that field, so we get a <code>size_t</code> with the appropriate width (which will be zero in the case where <code>e</code> is zero).</p>

<hr/>

<p>Some people have asked: <strong>Why not just use an <code>assert</code>?</strong></p>

<p><a href=""https://stackoverflow.com/a/9230305/75170"">keithmo's answer</a> here has a good response:</p>

<blockquote>
  <p>These macros implement a compile-time test, while assert() is a run-time test.</p>
</blockquote>

<p>Exactly right. You don't want to detect problems in your <em>kernel</em> at runtime that could have been caught earlier! It's a critical piece of the operating system. To whatever extent problems can be detected at compile time, so much the better.</p>
","9229793"
"Converting int to string in C","156848","","<p>I am using the <code>itoa()</code> function to convert an <code>int</code> into <code>string</code>, but it is giving an error:</p>

<pre><code>undefined reference to `itoa'
collect2: ld returned 1 exit status
</code></pre>

<p>What is the reason? Is there some other way to perform this conversion?</p>
","<p>Use <code>snprintf</code>, it is more portable than <code>itoa</code>.</p>

<p><a href=""http://www.cplusplus.com/reference/clibrary/cstdlib/itoa/"" rel=""noreferrer"">itoa is not part of standard C, nor is it part of standard C++</a>; but, a lot of compilers and associated libraries support it.</p>

<p>Example of <code>sprintf</code></p>

<pre><code>char* buffer = ... allocate a buffer ...
int value = 4564;
sprintf(buffer, ""%d"", value);
</code></pre>

<p>Example of <code>snprintf</code></p>

<pre><code>char buffer[10];
int value = 234452;
snprintf(buffer, 10, ""%d"", value);
</code></pre>

<p>Both functions are similar to <code>fprintf</code>, but output is written into an array rather than to a stream. The difference between <code>sprintf</code> and <code>snprintf</code> is that <code>snprintf</code> guarantees no buffer overrun by writing up to a maximum number of characters that can be stored in the <code>buffer</code>.</p>
","5242536"
"What is the difference between exit(0) and exit(1) in C?","156688","","<p>Can anyone tell me? What is the difference between <code>exit(0)</code> and <code>exit(1)</code> in C language?</p>
","<p><strong>What is the difference between <code>exit(0)</code> and <code>exit(1)</code> in C language?</strong></p>

<p><code>exit(0)</code> indicates successful program termination &amp; it is fully portable, While<br>
<code>exit(1)</code> (usually) indicates unsucessful termination. However, it's usage is non-portable.</p>

<p>Note that the C standard defines <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code> to return termination status from a C program.</p>

<p><code>0</code> and <code>EXIT_SUCCESS</code> are the values specified by the standard to indicate successful termination, however, only <code>EXIT_FAILURE</code> is the standard value for returning unsucessful termination. <code>1</code> is used for the same in many implementations though.</p>

<hr>

<p>Reference:    </p>

<p><strong>C99 Standard:    7.20.4.3 The <code>exit</code> function</strong><br>
<strong>Para 5</strong>    </p>

<blockquote>
  <p>Finally, control is returned to the host environment. If the value of status is zero or
  <code>EXIT_SUCCESS</code>, an implementation-deﬁned form of the status successful termination is
  returned. If the value of status is <code>EXIT_FAILURE</code> , an implementation-deﬁned form
  of the status unsuccessful termination is returned. Otherwise the status returned is
  implementation-deﬁned.</p>
</blockquote>
","9944880"
"What does ""request for member '*******' in something not a structure or union"" mean?","156493","","<p>Is there an easy explanation for what this error means?</p>

<pre><code>request for member '*******' in something not a structure or union
</code></pre>

<p>I've encountered it several times in the time that I've been learning C, but I haven't got a clue as to what it means.</p>
","<p>It also happens if you're trying to access an instance when you have a pointer, and vice versa:</p>

<pre><code>struct foo
{
  int x, y, z;
};

struct foo a, *b = &amp;a;

b.x = 12;  /* This will generate the error, should be b-&gt;x or (*b).x */
</code></pre>

<p>As pointed out in a comment, this can be made excruciating if someone goes and <code>typedef</code>s a pointer, i.e. includes the <code>*</code> in a typedef, like so:</p>

<pre><code>typedef struct foo* Foo;
</code></pre>

<p>Because then you get code that <em>looks</em> like it's dealing with instances, when in fact it's dealing with pointers:</p>

<pre><code>Foo a_foo = get_a_brand_new_foo();
a_foo-&gt;field = FANTASTIC_VALUE;
</code></pre>

<p>Note how the above looks as if it should be written <code>a_foo.field</code>, but that would fail since <code>Foo</code> is a pointer to struct. I strongly recommend <strong>against</strong> <code>typedef</code>:ed pointers in C. Pointers are important, don't hide your asterisks. Let them shine.</p>
","2184493"
"concatenate char array in C","155974","","<p>I have a a char array:</p>

<pre><code>char* name = ""hello"";
</code></pre>

<p>I want to add an extension to that name to make it</p>

<pre><code>hello.txt
</code></pre>

<p>How can I do this?</p>

<p><code>name += "".txt""</code> won't work</p>
","<p>Have a look at the <a href=""http://www.cplusplus.com/reference/clibrary/cstring/strcat/"" rel=""noreferrer"">strcat</a> function.</p>

<p>In particular, you could try this:</p>

<pre><code>const char* name = ""hello"";
const char* extension = "".txt"";

char* name_with_extension;
name_with_extension = malloc(strlen(name)+1+4); /* make space for the new string (should check the return value ...) */
strcpy(name_with_extension, name); /* copy name into the new var */
strcat(name_with_extension, extension); /* add the extension */
</code></pre>
","2218295"
"Capture characters from standard input without waiting for enter to be pressed","155862","","<p>I can never remember how I do this because it comes up so infrequently for me. But in C or C++, what is the best way to read a character from standard input without waiting for a newline (press enter).</p>

<p>Also ideally it wouldn't echo the input character to the screen. I just want to capture keystrokes with out effecting the console screen.</p>
","<p>That's not possible portably in pure C++, because it depends too much on the terminal used that may be connected with stdin (they are usually line buffered). You can, however use a library for that:</p>

<ol>
<li>conio available with windows compilers. Use the function <code>_getch()</code> to give you a character without waiting for the enter key. I'm not a frequent windows developer, but i've seen my classmates just include <code>conio.h</code> and use it. See <a href=""http://en.wikipedia.org/wiki/Conio.h"" rel=""noreferrer"">conio.h</a> at wikipedia. It lists <code>getch</code>, which is declared deprecated in Visual C++. </li>
<li>curses available for linux, compatible curses implementations are available for windows too. It has also a <code>getch</code> function. (try <code>man getch</code> to view its manpage). See <a href=""http://en.wikipedia.org/wiki/Curses_%28programming_library%29"" rel=""noreferrer"">Curses</a> at wikipedia. </li>
</ol>

<p>I would recommend you to use curses if you aim for cross platform compatibility. That said, I'm sure there are functions that you can use to switch off line buffering (i believe that's called ""raw mode"", as opposed to ""cooked mode"" (look into <code>man stty</code>)). Curses would handle that for you in a portable manner if i'm not mistaken. </p>
","421871"
"Length of array in function argument","155783","","<p>This is well known code to compute array length in C:</p>

<pre><code>sizeof(array)/sizeof(type)
</code></pre>

<p>But I can't seem to find out the length of the array passed as an argument to a function:</p>

<pre><code>#include &lt;stdio.h&gt;

int length(const char* array[]) {
  return sizeof(array)/sizeof(char*);
}

int main() {
  const char* friends[] = { ""John"", ""Jack"", ""Jim"" };
  printf(""%d %d"", sizeof(friends)/sizeof(char*), length(friends)); // 3 1
}
</code></pre>

<p>I assume that array is copied by value to the function argument as constant pointer and reference to it should solve this, but this declaration is not valid:</p>

<pre><code>int length(const char**&amp; array);
</code></pre>

<p>I find passing the array length as second argument to be redundant information, but why is the standard declaration of <code>main</code> like this:</p>

<pre><code>int main(int argc, char** argv);
</code></pre>

<p>Please explain if it is possible to find out the array length in function argument, and if so, why is there the redundancy in <code>main</code>.</p>

<hr>
","<p><code>sizeof</code> only works to find the length of the array if you apply it to the original array.</p>

<pre><code>int a[5]; //real array. NOT a pointer
sizeof(a); // :)
</code></pre>

<p>However, by the time the array decays into a pointer, sizeof will give the size of the pointer and not of the array.</p>

<pre><code>int a[5];
int * p = a;
sizeof(p); // :(
</code></pre>

<p>As you have already smartly pointed out main receives the length of the array as an argument (argc). <em>Yes, this is out of necessity and is not redundant</em>. (Well, it is kind of reduntant since argv is conveniently terminated by a null pointer but I digress)</p>

<p>There is some reasoning as to why this would take place. How could we make things so that a C array also knows its length?</p>

<p>A first idea would be not having arrays decaying into pointers when they are passed to a function and continuing to keep the array length in the type system. The bad thing about this is that you would need to have a separate function for every possible array length and doing so is not a good idea. (Pascal did this and some people think this is one of the reasons it ""lost"" to C)</p>

<p>A second idea is storing the array length next to the array, just like any modern programming language does:</p>

<pre><code>a -&gt; [5];[0,0,0,0,0]
</code></pre>

<p>But then you are just creating an invisible <code>struct</code> behind the scenes and the C philosophy does not approve of this kind of overhead. That said, creating such a struct yourself is often a good idea for some sorts of problems:</p>

<pre><code>struct {
    size_t length;
    int * elements;
}
</code></pre>

<hr>

<p>Another thing you can think about is how strings in C are null terminated instead of storing a length (as in Pascal). To store a length without worrying about limits need a <em>whopping</em> four bytes, an unimaginably expensive amount (at least back then). One could wonder if arrays could be also null terminated like that but then how would you allow the array to store a null?</p>
","8269159"
"Declaring and initializing arrays in C","155305","","<p>Is there a way to declare first and then initialize an array in C?</p>

<p>So far I have been initializing an array like this:</p>

<pre><code>int myArray[SIZE] = {1,2,3,4....};
</code></pre>

<p>But I need to do something like this</p>

<pre><code>int myArray[SIZE];

myArray = {1,2,3,4....};
</code></pre>
","<p>In C99 you can do it using a compound literal in combination with <code>memcpy</code></p>

<pre><code>memcpy(myarray, (int[]) { 1, 2, 3, 4 }, sizeof myarray);
</code></pre>

<p>(assuming that the size of the source and the size of the target is the same). </p>

<p>In C89/90 you can emulate that by declaring an additional ""source"" array</p>

<pre><code>const int SOURCE[SIZE] = { 1, 2, 3, 4 }; /* maybe `static`? */
int myArray[SIZE];
...
memcpy(myarray, SOURCE, sizeof myarray);
</code></pre>
","3137701"
"Passing struct to function","155275","","<p>I'm a new C programmer and I wanted to know how I can pass a <code>struct</code> through to a function. I'm getting an error and can't figure out the correct syntax to do it. Here is the code for it....</p>

<p><code>struct</code>:</p>

<pre><code>struct student{
        char firstname[30];
        char surname[30];
    };

    struct student person;
</code></pre>

<p>call:</p>

<pre><code>addStudent(person);
</code></pre>

<p>prototype:</p>

<pre><code>void addStudent(struct student);
</code></pre>

<p>and the actual function:</p>

<pre><code>void addStudent(person)
{
    return;
}
</code></pre>

<p>compiler errors:</p>

<blockquote>
<pre><code>line 21: warning: dubious tag declaration: struct student
line 223: argument #1 is incompatible with prototype:
</code></pre>
</blockquote>
","<p>The line function implementation should be:</p>

<pre><code>void addStudent(struct student person) {

}
</code></pre>

<p><code>person</code> is not a type but a variable, you cannot use it as the type of a function parameter.</p>

<p>Also, make sure your struct is defined before the prototype of the function <code>addStudent</code> as the prototype uses it.</p>
","10370056"
"Convert Python program to C/C++ code?","155174","","<p>is it possible to convert a Python program to C/C++?</p>

<p>I need to implement a couple of algorithms, and I'm not sure if the performance gap is big enough to justify all the pain I'd go through when doing it in C/C++ (which I'm not good at). I thought about writing one simple algorithm and benchmark it against such a converted solution. If that alone is significantly faster than the Python version, then I'll have no other choice than doing it in C/C++.</p>
","<p>Yes. Look at <a href=""http://cython.org/"">Cython</a>. It does just that: Converts Python to C for speedups.</p>
","4650280"
"What does this error mean: ""error: expected specifier-qualifier-list before 'type_name'""?","154949","","<p>I've been working on the Cell processor and I'm trying to create a struct that will hold an <code>spe_context_ptr_t</code>, which will be used within the thread to launch an spe context and will also hold a pointer to something else that will be passed to the spu context from within the thread (currently I'm trying to just make it a generic pointer, but in actuality it will be a pointer to another structure I've defined). When I try and compile, I get the following error:</p>

<pre><code>spu/../common.h:38: error: expected specifier-qualifier-list before 'spe_context_ptr_t'

// here is the offending line(s)

typedef struct _PTHREAD_BLOCK {
    spe_context_ptr_t * context; // Error happens here
    uintptr32_t  args; 
 } PTHREAD_BLOCK;
</code></pre>
","<p>The compiler doesn't know that spe_context_ptr_t is a type.  Check that the appropriate typedef is in scope when this code is compiled.  You may have forgotten to include the appropriate header file.</p>
","608185"
"Printing all global variables/local variables?","154777","","<p>How can I print all global variables/local variables? Is that possible in gdb?</p>
","<p>Type <a href=""http://sourceware.org/gdb/current/onlinedocs/gdb/Symbols.html#index-info-variables-918""><code>info variables</code></a> to list ""All global and static variable names"".</p>

<p>Type <a href=""http://sourceware.org/gdb/current/onlinedocs/gdb/Frame-Info.html#index-info-locals-435""><code>info locals</code></a> to list ""Local variables of current stack frame"" (names and values), including static variables in that function.</p>

<p>Type <a href=""https://sourceware.org/gdb/current/onlinedocs/gdb/Frame-Info.html#index-info-args""><code>info args</code></a> to list ""Arguments of the current stack frame"" (names and values).</p>
","6261502"
"Do I cast the result of malloc?","154541","","<p>In <a href=""http://stackoverflow.com/questions/571945/getting-a-stack-overflow-exception-when-declaring-a-large-array"">this question</a>, someone suggested in a <a href=""http://stackoverflow.com/questions/571945/getting-a-stack-overflow-exception-when-declaring-a-large-array#comment388297_571961"">comment</a> that I should <strong><em>not</em></strong> cast the result of <code>malloc</code>, i.e.</p>

<pre><code>int *sieve = malloc(sizeof(int) * length);
</code></pre>

<p>rather than:</p>

<pre><code>int *sieve = (int *) malloc(sizeof(int) * length);
</code></pre>

<p>Why would this be the case?</p>
","<p><strong>No</strong>; you <em>don't</em> cast the result, since:</p>

<ul>
<li>It is unnecessary, as <code>void *</code> is automatically and safely promoted to any other pointer type in this case.</li>
<li>It adds clutter to the code, casts are not very easy to read (especially if the pointer type is long).</li>
<li>It makes you repeat yourself, which is generally bad.</li>
<li>It can hide an error if you forgot to include <code>&lt;stdlib.h&gt;</code>. This can cause crashes (or, worse, <em>not</em> cause a crash until way later in some totally different part of the code). Consider what happens if pointers and integers are differently sized; then you're hiding a warning by casting and might lose bits of your returned address. Note: as of C11 implicit functions are gone from C, and this point is no longer relevant since there's no automatic assumption that undeclared functions return <code>int</code>.</li>
</ul>

<p>As a clarification, note that I said ""you don't cast"", not ""you don't <em>need</em> to cast"". In my opinion, it's a failure to include the cast, even if you got it right. There are simply no benefits to doing it, but a bunch of potential risks, and including the cast indicates that you don't know about the risks.</p>

<p>Also note, as commentators point out, that the above talks about straight C, not C++. I very firmly believe in C and C++ as separate languages.</p>

<p>To add further, your code needlessly repeats the type information (<code>int</code>) which can cause errors. It's better to dereference the pointer being used to store the return value, to ""lock"" the two together:</p>

<pre><code>int *sieve = malloc(length * sizeof *sieve);
</code></pre>

<p>This also moves the <code>length</code> to the front for increased visibility, and drops the redundant parentheses with <code>sizeof</code>; they <em>are only needed</em> when the argument is a type name. Many people seem to not know (or ignore) this, which makes their code more verbose. Remember: <code>sizeof</code> is not a function! :) </p>

<hr>

<p>While moving <code>length</code> to the front <em>may</em> increase visibility in some rare cases, one should also pay attention that in the general case, it should be better to write the expression as:</p>

<pre><code>int *sieve = malloc(sizeof *sieve * length);
</code></pre>

<p>Since keeping the <code>sizeof</code> first, in this case, ensures multiplication is done with at least <code>size_t</code> math.</p>

<p>Compare: <code>malloc(sizeof *sieve * length * width)</code> vs. <code>malloc(length * width * sizeof *sieve)</code> the second may overflow the <code>length * width</code> when <code>width</code> and <code>length</code> are smaller types than <code>size_t</code>.</p>
","605858"
"Assignment makes pointer from integer without cast","154133","","<p>Coming from a Java background I'm learning C, but I find those vague compiler error messages increasingly frustrating. Here's my code:</p>

<pre><code>/*
 * PURPOSE
 *      Do case-insensetive string comparison.
 */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;

int compareString(char cString1[], char cString2[]);
char strToLower(char cString[]);

int main() {
    // Declarations
    char cString1[50], cString2[50];
    int isEqual;

    // Input
    puts(""Enter string 1: "");
    gets(cString1);
    puts(""Enter string 2: "");
    gets(cString2);

    // Call
    isEqual = compareString(cString1, cString2);
    if (isEqual == 0)
        printf(""Equal!\n"");
    else
        printf(""Not equal!\n"");

    return 0;
}

// WATCH OUT
//      This method *will* modify its input arrays.
int compareString(char cString1[], char cString2[]) {
    // To lowercase
    cString1 = strToLower(cString1);
    cString2 = strToLower(cString2);

    // Do regular strcmp
    return strcmp(cString1, cString2);
}

// WATCH OUT
//      This method *will* modify its input arrays.
char strToLower(char cString[]) {
    // Declarations
    int iTeller;

    for (iTeller = 0; cString[iTeller] != '\0'; iTeller++)
        cString[iTeller] = (char)tolower(cString[iTeller]);

    return cString;
}
</code></pre>

<p>This generates two warnings.</p>

<ul>
<li>assignment makes pointer from integer without a cast

<ul>
<li>cString1 = strToLower(cString1);</li>
<li>cString2 = strToLower(cString2);</li>
</ul></li>
<li>return makes integer from pointer without a cast

<ul>
<li>return cString;</li>
</ul></li>
</ul>

<p>Can someone explain these warnings?</p>
","<p>C strings are not anything like Java strings. They're essentially arrays of characters.</p>

<p>You are getting the error because strToLower returns a char. A char is a form of integer in C. You are assigning it into a char[] which is a pointer. Hence ""converting integer to pointer"".</p>

<p>Your strToLower makes all its changes in place, there is no reason for it to return anything, especially not a char. You should ""return"" void, or a char*.</p>

<p>On the call to strToLower, there is also no need for assignment, you are essentially just passing the memory address for cString1. </p>

<p>In my experience, Strings in C are the hardest part to learn for anyone coming from Java/C# background back to C. People can get along with memory allocation (since even in Java you often allocate arrays). If your eventual goal is C++ and not C, you may prefer to focus less on C strings, make sure you understand the basics, and just use the C++ string from STL.</p>
","2074016"
"The most efficient way to implement an integer based power function pow(int, int)","153921","","<p>What is the most efficient way given to raise an integer to the power of another integer in C?</p>

<pre><code>// 2^3
pow(2,3) == 8

// 5^5
pow(5,5) == 3125
</code></pre>
","<p>Exponentiation by squaring.</p>

<pre><code>int ipow(int base, int exp)
{
    int result = 1;
    while (exp)
    {
        if (exp &amp; 1)
            result *= base;
        exp &gt;&gt;= 1;
        base *= base;
    }

    return result;
}
</code></pre>

<p>This is the standard method for doing modular exponentiation for huge numbers in asymmetric cryptography.</p>
","101613"
"Where are static variables stored (in C/C++)?","152754","","<p>In what segment (.BSS, .DATA, other) of an executable file are static variables stored so that they don't have name collision?
For example:</p>

<pre><code>
foo.c:                         bar.c:
static int foo = 1;            static int foo = 10;
void fooTest() {               void barTest() {
  static int bar = 2;            static int bar = 20;
  foo++;                         foo++;
  bar++;                         bar++;
  printf(""%d,%d"", foo, bar);     printf(""%d, %d"", foo, bar);
}                              }
</code></pre>

<p>If I compile both files and link it to a main that calls fooTest() and barTest repeatedly, the printf statements increment independently.  Makes sense since the foo and bar variables are local to the translation unit.</p>

<p>But where is the storage allocated?</p>

<p>To be clear, the assumption is that you have a toolchain that would output a file in ELF format.  Thus, I <em>believe</em> that there <strong>has</strong> to be some space reserved in the executable file for those static variables.<br>
For discussion purposes, lets assume we use the GCC toolchain.</p>
","<p>Where your statics go depends on if they are 0 initialized or not.  0 initialized static data goes in <a href=""http://en.wikipedia.org/wiki/.bss"" rel=""noreferrer"">.BSS (Block Started by Symbol)</a>, non 0 initialized data goes in <a href=""http://en.wikipedia.org/wiki/Data_segment"" rel=""noreferrer"">.DATA</a></p>
","93411"
"Error ""initializer element is not constant"" when trying to initialize variable with const","152521","","<p>I get an error on line 6 (initialize my_foo to foo_init) of the following program and I'm not sure I understand why.</p>

<pre><code>typedef struct foo_t {
    int a, b, c;
} foo_t;

const foo_t foo_init = { 1, 2, 3 };
foo_t my_foo = foo_init;

int main()
{
    return 0;
}
</code></pre>

<p>Keep in mind this is a simplified version of a larger, multi-file project I'm working on.  The goal was to have a single constant in the object file, that multiple files could use to initialize a state structure.  Since it's an embedded target with limited resources and the struct isn't that small, I don't want multiple copies of the source.  I'd prefer not to use:</p>

<pre><code>#define foo_init { 1, 2, 3 }
</code></pre>

<p>I'm also trying to write portable code, so I need a solution that's valid C89 or C99.</p>

<p>Does this have to do with the ORGs in an object file?  That initialized variables go into one ORG and are initialized by copying the contents of a second ORG?</p>

<p>Maybe I'll just need to change my tactic, and have an initializing function do all of the copies at startup.  Unless there are other ideas out there?</p>
","<p>In C language objects with static storage duration have to be initialized with <em>constant expressions</em> or with aggregate initializers containing constant expressions.</p>

<p>A ""large"" object is never a constant expression in C, even if the object is declared as <code>const</code>. </p>

<p>Moreover, in C language the term ""constant"" refers to <em>literal constants</em> (like <code>1</code>, <code>'a'</code>, <code>0xFF</code> and so on) and enum members. Const-qualified objects (of any type) are <em>not constants</em> in C language terminology. They cannot be used in initializers of objects with static storage duration, regardless of their type.</p>

<p>For example, this is <em>NOT</em> a constant</p>

<pre><code>const int N = 5; /* `N` is not a constant in C */
</code></pre>

<p>The above <code>N</code> would be a constant in C++, but it is not a constant in C. So, if you try doing </p>

<pre><code>static int j = N; /* ERROR */
</code></pre>

<p>you will get the same error: an attempt to initialize a static object with a non-constant.</p>

<p>This is the reason why in C language we predominantly use <code>#define</code> to declare named constants, and also resort to <code>#define</code> to create named aggregate initializers.</p>
","3025106"
"How do I define and use an ENUM in Objective-C?","151531","","<p>I declared an enum in my implementation file as shown below, and declared a variable of that type in my interface as PlayerState thePlayerState; and used the variable in my methods. But I am getting errors stating that it is undeclared. How do I correctly declare and use a variable of type PlayerState in my methods?:</p>

<p>In the .m file</p>

<pre><code>@implementation View1Controller

    typedef enum playerStateTypes
        {
            PLAYER_OFF,
            PLAYER_PLAYING,
            PLAYER_PAUSED
        } PlayerState;
</code></pre>

<p>in the .h file:</p>

<pre><code>@interface View1Controller : UIViewController {

    PlayerState thePlayerState;
</code></pre>

<p>in some method in .m file:</p>

<pre><code>-(void)doSomethin{

thePlayerState = PLAYER_OFF;

}
</code></pre>
","<p>Your <code>typedef</code> needs to be in the header file (or some other file that's <code>#import</code>ed into your header), because otherwise the compiler won't know what size to make the <code>PlayerState</code> ivar.  Other than that, it looks ok to me.</p>
","2212086"
"Generate random numbers following a normal distribution in C/C++","151348","","<p>Does anyone know how I could easily generate random numbers following a normal distribution in C/C++ ?</p>

<p><a href=""http://www.mathworks.com/access/helpdesk/help/toolbox/stats/normrnd.html"" rel=""noreferrer"">http://www.mathworks.com/access/helpdesk/help/toolbox/stats/normrnd.html</a></p>

<p>I don't want to use any of Boost.</p>

<p>I know that Knuth talks about this at length but I don't have his books at hand right now.</p>
","<p>The <a href=""http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform"" rel=""noreferrer"">Box-Muller</a> transform is what is commonly used.  This correctly produces values with a normal distribution.</p>

<p><a href=""http://en.wikipedia.org/wiki/Normal_distribution#Generating_values_from_normal_distribution"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Normal_distribution#Generating_values_from_normal_distribution</a></p>

<p><a href=""http://en.wikipedia.org/wiki/Box_Muller_transform"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Box_Muller_transform</a></p>

<p>The math is easy.  You generate two uniform numbers and from those you get two normally distributed numbers.  Return one, save the other for the next request of a random number.</p>
","2325531"
"What's a good C decompiler?","151336","","<p>I am searching for a decompiler for a C program. The binary is a 32-bit x86 Linux executable. Objdump works fine, so basically I am searching for something which attempts to reconstruct the C source from the asm source.</p>
","<p>Seconding Hex-rays, but if you can't justify that cost, <a href=""http://boomerang.sourceforge.net/"" rel=""noreferrer"">Boomerang</a> might work.</p>
","193900"
"How do I make a simple makefile for gcc on Linux?","150974","","<p>I have three files: <code>program.c</code>, <code>program.h</code> and <code>headers.h</code>.</p>

<p><code>program.c</code> includes <code>program.h</code> and <code>headers.h</code>.</p>

<p>I need to compile this on Linux using <em>gcc</em> compiler.  I'm not sure how to do this. Netbeans created one for me, but it's empty.</p>
","<p>Interesting, I didn't know make would default to using the C compiler given rules regarding source files.</p>

<p>Anyway, a simple solution that demonstrates simple Makefile concepts would be:</p>

<pre><code>HEADERS = program.h headers.h

default: program

program.o: program.c $(HEADERS)
    gcc -c program.c -o program.o

program: program.o
    gcc program.o -o program

clean:
    -rm -f program.o
    -rm -f program
</code></pre>

<p><em>(bear in mind that make requires tab instead of space indentation, so be sure to fix that when copying)</em></p>

<p>However, to support more C files, you'd have to make new rules for each of them.  Thus, to improve:</p>

<pre><code>HEADERS = program.h headers.h
OBJECTS = program.o

default: program

%.o: %.c $(HEADERS)
    gcc -c $&lt; -o $@

program: $(OBJECTS)
    gcc $(OBJECTS) -o $@

clean:
    -rm -f $(OBJECTS)
    -rm -f program
</code></pre>

<p>I tried to make this as simple as possible by omitting variables like $(CC) and $(CFLAGS) that are usually seen in makefiles.  If you're interested in figuring that out, I hope I've given you a good start on that.</p>

<p>Here's the Makefile I like to use for C source.  Feel free to use it:</p>

<pre><code>TARGET = prog
LIBS = -lm
CC = gcc
CFLAGS = -g -Wall

.PHONY: default all clean

default: $(TARGET)
all: default

OBJECTS = $(patsubst %.c, %.o, $(wildcard *.c))
HEADERS = $(wildcard *.h)

%.o: %.c $(HEADERS)
    $(CC) $(CFLAGS) -c $&lt; -o $@

.PRECIOUS: $(TARGET) $(OBJECTS)

$(TARGET): $(OBJECTS)
    $(CC) $(OBJECTS) -Wall $(LIBS) -o $@

clean:
    -rm -f *.o
    -rm -f $(TARGET)
</code></pre>

<p>It uses the wildcard and patsubst features of the make utility to automatically include .c and .h files in the current directory, meaning when you add new code files to your directory, you won't have to update the Makefile.  However, if you want to change the name of the generated executable, libraries, or compiler flags, you can just modify the variables.</p>

<p>In either case, don't use autoconf, please.  I'm begging you!  :)</p>
","1484873"
"Getting ""conflicting types for function"" in C, why?","150719","","<p>I'm using the below code:</p>

<pre><code>char dest[5];
char src[5] = ""test"";

printf(""String: %s\n"", do_something(dest, src));

char *do_something(char *dest, const char *src)
{
    return dest;
}
</code></pre>

<p>The implementation of <code>do_something</code> is not important here.
When I try to compile the above I get these two exception:</p>

<blockquote>
  <p>error: conflicting types for 'do_something' (at the printf call)<br>
  error: previous implicit declaration of 'do_something' was here (at the prototype line)</p>
</blockquote>

<p>Why?</p>
","<p>You are trying to call do_something before you declare it.  You need to add a function prototype before your printf line:</p>

<pre><code>char* do_something(char*, const char*);
</code></pre>

<p>Or you need to move the function definition above the printf line.  You can't use a function before it is declared.</p>
","1549636"
"Create a file if one doesn't exist - C","150444","","<p>I want my program to open a file if it exists, or else create the file. I'm trying the following code but I'm getting a debug assertion at freopen.c. Would I be better off using fclose and then fopen immediately afterward?</p>

<pre><code>FILE *fptr;
    fptr = fopen(""scores.dat"", ""rb+"");
    if(fptr == NULL) //if file does not exist, create it
    {
        freopen(""scores.dat"", ""wb"", fptr);
    } 
</code></pre>
","<p>You typically have to do this in a single syscall, or else you will get a race condition.</p>

<p>This will open for reading and writing, creating the file if necessary.</p>

<pre><code>FILE *fp = fopen(""scores.dat"", ""ab+"");
</code></pre>

<p>If you want to read it and then write a new version from scratch, then do it as two steps.</p>

<pre><code>FILE *fp = fopen(""scores.dat"", ""rb"");
if (fp) {
    read_scores(fp);
}

// Later...

// truncates the file
FILE *fp = fopen(""scores.dat"", ""wb"");
if (!fp)
    error();
write_scores(fp);
</code></pre>
","9840678"
"Programmatically find the number of cores on a machine","150213","","<p>Is there a way to determine how many cores a machine has from C/C++ in a platform-independent way? If no such thing exists, what about determining it per-platform (Windows/*nix/Mac)?</p>
","<h1>C++11</h1>

<pre><code>//may return 0 when not able to detect
unsigned concurentThreadsSupported = std::thread::hardware_concurrency();
</code></pre>

<p>Reference: <a href=""http://en.cppreference.com/w/cpp/thread/thread/hardware_concurrency"" rel=""noreferrer"">std::thread::hardware_concurrency</a></p>

<hr>

<p>In C++ prior to C++11, there's no portable way.  Instead, you'll need to use one or more of the following methods (guarded by appropriate <code>#ifdef</code> lines):</p>

<ul>
<li><h3>Win32</h3>

<pre><code>SYSTEM_INFO sysinfo;
GetSystemInfo(&amp;sysinfo);
int numCPU = sysinfo.dwNumberOfProcessors;
</code></pre></li>
<li><h3>Linux, Solaris, AIX and Mac OS X >=10.4 (i.e. Tiger onwards)</h3>

<pre><code>int numCPU = sysconf(_SC_NPROCESSORS_ONLN);
</code></pre></li>
<li><h3>FreeBSD, MacOS X, NetBSD, OpenBSD, etc.</h3>

<pre><code>int mib[4];
int numCPU;
std::size_t len = sizeof(numCPU); 

/* set the mib for hw.ncpu */
mib[0] = CTL_HW;
mib[1] = HW_AVAILCPU;  // alternatively, try HW_NCPU;

/* get the number of CPUs from the system */
sysctl(mib, 2, &amp;numCPU, &amp;len, NULL, 0);

if (numCPU &lt; 1) 
{
    mib[1] = HW_NCPU;
    sysctl(mib, 2, &amp;numCPU, &amp;len, NULL, 0);
    if (numCPU &lt; 1)
        numCPU = 1;
}
</code></pre></li>
<li><h3>HPUX</h3>

<pre><code>int numCPU = mpctl(MPC_GETNUMSPUS, NULL, NULL);
</code></pre></li>
<li><h3>IRIX</h3>

<pre><code>int numCPU = sysconf(_SC_NPROC_ONLN);
</code></pre></li>
<li><h3>Objective-C (Mac OS X >=10.5 or iOS)</h3>

<pre><code>NSUInteger a = [[NSProcessInfo processInfo] processorCount];
NSUInteger b = [[NSProcessInfo processInfo] activeProcessorCount];
</code></pre></li>
</ul>
","150971"
"function overloading in C","149359","","<p>Is there any way to achieve function overloading in C? I am looking at simple functions to be overloaded like  </p>

<pre><code>foo (int a)  
foo (char b)  
foo (float c , int d)
</code></pre>

<p>I think there is no straight forward way; I'm looking for workarounds if any exist.   </p>
","<p>There are few possibilities:</p>

<ol>
<li>printf style functions (type as an argument)</li>
<li>opengl style functions (type in function name)</li>
<li>c subset of c++ (if You can use a c++ compiler)</li>
</ol>
","479212"
"How do you do exponentiation in C?","148964","","<p>I tried ""x = y ** e"", but that didn't work.</p>
","<p>use the <code>pow</code> function (it takes <code>float</code>s/<code>double</code>s though).</p>

<p><code>man pow</code>:</p>

<pre><code>   #include &lt;math.h&gt;

   double pow(double x, double y);
   float powf(float x, float y);
   long double powl(long double x, long double y);
</code></pre>

<p>EDIT: BTW, for the special case of positive integer powers of <code>2</code>, you can use bit shifting: <code>(1 &lt;&lt; x)</code> will equal <code>2</code> to the power <code>x</code>. There are some potential gotchas with this, but generally it would be correct.</p>
","213043"
"What is the strict aliasing rule?","147980","","<p>When asking about <a href=""https://stackoverflow.com/questions/98340/what-are-the-common-undefinedunspecified-behavior-for-c-that-you-run-into"">common undefined behavior in C</a>, souls more enlightened than I referred to the strict aliasing rule.<br>
What are they talking about?</p>
","<p>A typical situation you encounter strict aliasing problems is when overlaying a struct (like a device/network msg) onto a buffer of the word size of your system (like a pointer to <code>uint32_t</code>s or <code>uint16_t</code>s). When you overlay a struct onto such a buffer, or a buffer onto such a struct through pointer casting you can easily violate strict aliasing rules.</p>

<p>So in this kind of setup, if I want to send a message to something I'd have to have two incompatible pointers pointing to the same chunk of memory. I might then naively code something like this:</p>

<pre><code>struct Msg
{
    unsigned int a;
    unsigned int b;
};

void SendWord(uint32_t);

int main()
{
    // Get a 32-bit buffer from the system
    uint32_t* buff = malloc(sizeof(Msg));

    // Alias that buffer through message
    Msg* msg = (Msg*)(buff);

    // Send a bunch of messages    
    for (int i =0; i &lt; 10; ++i)
    {
        msg-&gt;a = i;
        msg-&gt;b = i+1;
        SendWord(buff[0]);
        SendWord(buff[1]);   
    }
}
</code></pre>

<p>The strict aliasing rule makes this setup illegal: dereferencing a pointer that aliases another of an <a href=""http://en.cppreference.com/w/c/language/type"" rel=""noreferrer"">incompatible type</a> is undefined behavior. Unfortunately, you can still code this way, <em>maybe</em> get some warnings, have it compile fine, only to have weird unexpected behavior when you run the code. </p>

<p>(GCC appears somewhat inconsistent in its ability to give aliasing warnings, sometimes giving us a friendly warning and sometimes not.)</p>

<p>To see why this behavior is undefined, we have to think about what the strict aliasing rule buys the compiler. Basically, with this rule, it doesn't have to think about inserting instructions to refresh the contents of <code>buff</code> every run of the loop. Instead, when optimizing, with some annoyingly unenforced assumptions about aliasing, it can omit those instructions, load <code>buff[0]</code> and <code>buff[1</code>] into CPU registers once before the loop is run, and speed up the body of the loop. Before strict aliasing was introduced, the compiler had to live in a state of paranoia that the contents of <code>buff</code> could change at anytime from anywhere by anybody. So to get an extra performance edge, and assuming most people don't type-pun pointers, the strict aliasing rule was introduced.</p>

<p>Keep in mind, if you think the example is contrived, this might even happen if you're passing a buffer to another function doing the sending for you, if instead you have.</p>

<pre><code>void SendMessage(uint32_t* buff, size_t size32)
{
    for (int i = 0; i &lt; size32; ++i) 
    {
        SendWord(buff[i]);
    }
}
</code></pre>

<p>And rewrote our earlier loop to take advantage of this convenient function</p>

<pre><code>for (int i =0; i &lt; 10; ++i)
{
    msg-&gt;a = i;
    msg-&gt;b = i+1;
    SendMessage(buff, 2);
}
</code></pre>

<p>The compiler may or may not be able to or smart enough to try to inline SendMessage and it may or may not decide to load or not load buff again. If <code>SendMessage</code> is part of another API that's compiled separately, it probably has instructions to load buff's contents. Then again, maybe you're in C++ and this is some templated header only implementation that the compiler thinks it can inline. Or maybe it's just something you wrote in your .c file for your own convenience. Anyway undefined behavior might still ensue. Even when we know some of what's happening under the hood, it's still a violation of the rule so no well defined behavior is guaranteed. So just by wrapping in a function that takes our word delimited buffer doesn't necessarily help.</p>

<p><strong>So how do I get around this?</strong></p>

<ul>
<li><p>Use a union. Most compilers support this without complaining about strict aliasing. This is allowed in C99 and explicitly allowed in C11.</p>

<pre>
union {
    Msg msg;
    unsigned int asBuffer[sizeof(Msg)/sizeof(unsigned int)];
};
</pre></li>
<li><p>You can disable strict aliasing in your compiler (<a href=""http://gcc.gnu.org/onlinedocs/gcc-4.6.1/gcc/Optimize-Options.html#index-fstrict_002daliasing-825"" rel=""noreferrer"">f[no-]strict-aliasing</a> in gcc)) </p></li>
<li><p>You can use <code>char*</code> for aliasing instead of your system's word. The rules allow an exception for <code>char*</code> (including <code>signed char</code> and <code>unsigned char</code>). It's always assumed that <code>char*</code> aliases other types. However this won't work the other way: there's no assumption that your struct aliases a buffer of chars.</p></li>
</ul>

<p><strong>Beginner beware</strong></p>

<p>This is only one potential minefield when overlaying two types onto each other. You should also learn about <a href=""http://en.wikipedia.org/wiki/Endianness"" rel=""noreferrer"">endianness</a>, <a href=""http://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Data/aligned.html"" rel=""noreferrer"">word alignment</a>, and how to deal with alignment issues through <a href=""http://grok2.tripod.com/structure_packing.html"" rel=""noreferrer"">packing structs</a> correctly.</p>
","99010"
"Best way to check if a character array is empty","147882","","<p>Which is the most reliable way to check if a character array is empty?</p>

<pre><code>char text[50];

if(strlen(text) == 0) {}
</code></pre>

<p>or</p>

<pre><code>if(text[0] == '\0') {}
</code></pre>

<p>or do i need to do </p>

<pre><code> memset(text, 0, sizeof(text));
 if(strlen(text) == 0) {}
</code></pre>

<p>Whats the most efficient way to go about this?</p>
","<p>Given this code:</p>

<pre><code>char text[50];
if(strlen(text) == 0) {}
</code></pre>

<p>Followed by a question about this code:</p>

<pre><code> memset(text, 0, sizeof(text));
 if(strlen(text) == 0) {}
</code></pre>

<p>I smell confusion.  Specifically, in this case:</p>

<pre><code>char text[50];
if(strlen(text) == 0) {}
</code></pre>

<p>... the contents of <code>text[]</code> will be uninitialized and undefined.  Thus, <code>strlen(text)</code> will return an undefined result.</p>

<p>The easiest/fastest way to ensure that a C string is initialized to the empty string is to simply set the first byte to 0.</p>

<pre><code>char text[50];
text[0] = 0;
</code></pre>

<p>From then, both <code>strlen(text)</code> and the very-fast-but-not-as-straightforward <code>(text[0] == 0)</code> tests will both detect the empty string.</p>
","1793901"
"C default arguments","147501","","<p>Is there a way to specify default arguments to a function in C?</p>
","<p>Not really.  The only way would be to <a href=""https://en.wikipedia.org/wiki/Variadic_function#Example_in_C"" rel=""noreferrer"">write a varargs function</a> and manually fill in default values for arguments which the caller doesn't pass.</p>
","1472151"
"Reading numbers from a text file into an array in C","147500","","<p>I'm a programming noob so please bear with me.</p>

<p>I'm trying to read numbers from a text file into an array. The text file, ""somenumbers.txt"" simply holds 16 numbers as so ""5623125698541159"".</p>

<pre><code>#include &lt;stdio.h&gt;
main()
{

    FILE *myFile;
    myFile = fopen(""somenumbers.txt"", ""r"");

    //read file into array
    int numberArray[16];
    int i;

    for (i = 0; i &lt; 16; i++)
    {
        fscanf(myFile, ""%d"", &amp;numberArray[i]);
    }

    for (i = 0; i &lt; 16; i++)
    {
        printf(""Number is: %d\n\n"", numberArray[i]);
    }


}
</code></pre>

<p>The program doesn't work. It compiles but outputs:</p>

<p>Number is: -104204697</p>

<p>Number is: 0</p>

<p>Number is: 4200704</p>

<p>Number is: 2686672</p>

<p>Number is: 2686728</p>

<p>Number is: 2686916</p>

<p>Number is: 2004716757</p>

<p>Number is: 1321049414</p>

<p>Number is: -2</p>

<p>Number is: 2004619618</p>

<p>Number is: 2004966340</p>

<p>Number is: 4200704</p>

<p>Number is: 2686868</p>

<p>Number is: 4200798</p>

<p>Number is: 4200704</p>

<p>Number is: 8727656</p>

<p>Process returned 20 (0x14)   execution time : 0.118 s
Press any key to continue.</p>
","<p>change to</p>

<pre><code>fscanf(myFile, ""%1d"", &amp;numberArray[i]);
</code></pre>
","20378729"
"error: expected declaration or statement at end of input in c","146368","","<pre><code>void mi_start_curr_serv(void){
#if 0
 //stmt
#endif    
}
</code></pre>

<p>I'm getting an error as ""error: expected declaration or statement at end of input"" in my compiler. I could not find any error with the above function. Please help me to understand this error.</p>
","<p>Normally that error occurs when a <code>}</code> was missed somewhere in the code, for example:</p>

<pre><code>void mi_start_curr_serv(void){
    #if 0
    //stmt
    #endif
</code></pre>

<p>would fail with this error due to the missing <code>}</code> at the end of the function. The code you posted doesn't have this error, so it is likely coming from some other part of your source.</p>
","8707921"
"How do you convert a byte array to a hexadecimal string in C?","146052","","<p>I have:</p>

<pre><code>uint8 buf[] = {0, 1, 10, 11};
</code></pre>

<p>I want to convert the byte array to a string such that I can print the string using printf:</p>

<pre><code>printf(""%s\n"", str);
</code></pre>

<p>and get (the colons aren't necessary):</p>

<pre><code>""00:01:0A:0B""
</code></pre>

<p>Any help would be greatly appreciated.</p>
","<pre><code>printf(""%02X:%02X:%02X:%02X"", buf[0], buf[1], buf[2], buf[3]);
</code></pre>

<p>for a more generic way:</p>

<pre><code>int i;
for (i = 0; i &lt; x; i++)
{
    if (i &gt; 0) printf("":"");
    printf(""%02X"", buf[i]);
}
printf(""\n"");
</code></pre>

<p>to concatenate to a string, there are a few ways you can do this... i'd probably keep a pointer to the end of the string and use sprintf.  you should also keep track of the size of the array to make sure it doesnt get larger than the space allocated:</p>

<pre><code>int i;
char* buf2 = stringbuf;
char* endofbuf = stringbuf + sizeof(stringbuf);
for (i = 0; i &lt; x; i++)
{
    /* i use 5 here since we are going to add at most 
       3 chars, need a space for the end '\n' and need
       a null terminator */
    if (buf2 + 5 &lt; endofbuf)
    {
        if (i &gt; 0)
        {
            buf2 += sprintf(buf2, "":"");
        }
        buf2 += sprintf(buf2, ""%02X"", buf[i]);
    }
}
buf2 += sprintf(buf2, ""\n"");
</code></pre>
","6357065"
"Build a simple HTTP server in C","145731","","<p>I need to build a simple HTTP server in C. Any guidance? Links? Samples?</p>
","<p>I suggest you take a look at <a href=""http://tinyhttpd.sourceforge.net/"" rel=""noreferrer"">tiny httpd</a>.  If you want to write it from scratch, then you'll want to <em>thoroughly</em> read <a href=""http://tools.ietf.org/html/rfc2616"" rel=""noreferrer"">RFC 2616</a>.  Use <a href=""http://en.wikipedia.org/wiki/Berkeley_sockets"" rel=""noreferrer"">BSD sockets</a> to access the network at a really low level.</p>
","176422"
"How to allocate aligned memory only using the standard library?","145638","","<p>I just finished a test as part of a job interview, and one question stumped me - even using google for reference. I'd like to see what the stackoverflow crew can do with it:</p>

<p><strong>The “memset_16aligned” function requires a 16byte aligned pointer passed to it, or it will crash.</strong></p>

<p>a) How would you allocate 1024 bytes of memory, and align it to a 16 byte boundary?<br>
b) Free the memory after the memset_16aligned has executed.</p>

<pre><code>{

   void *mem;

   void *ptr;

   // answer a) here

   memset_16aligned(ptr, 0, 1024);

   // answer b) here

}
</code></pre>
","<h3>Original answer</h3>

<pre><code>{
    void *mem = malloc(1024+16);
    void *ptr = ((char *)mem+16) &amp; ~ 0x0F;
    memset_16aligned(ptr, 0, 1024);
    free(mem);
}
</code></pre>

<h3>Fixed answer</h3>

<pre><code>{
    void *mem = malloc(1024+15);
    void *ptr = ((uintptr_t)mem+15) &amp; ~ (uintptr_t)0x0F;
    memset_16aligned(ptr, 0, 1024);
    free(mem);
}
</code></pre>

<h3>Explanation as requested</h3>

<p>The first step is to allocate enough spare space, just in case.  Since the memory must be 16-byte aligned (meaning that the leading byte address needs to be a multiple of 16), adding 16 extra bytes guarantees that we have enough space.  Somewhere in the first 16 bytes, there is a 16-byte aligned pointer.  (Note that <code>malloc()</code> is supposed to return a pointer that is sufficiently well aligned for <em>any</em> purpose.  However, the meaning of 'any' is primarily for things like basic types — <code>long</code>, <code>double</code>, <code>long double</code>, <code>long long</code>, and pointers to objects and pointers to functions.  When you are doing more specialized things, like playing with graphics systems, they can need more stringent alignment than the rest of the system — hence questions and answers like this.)</p>

<p>The next step is to convert the void pointer to a char pointer; GCC notwithstanding, you are not supposed to do pointer arithmetic on void pointers (and GCC has warning options to tell you when you abuse it).  Then add 16 to the start pointer.  Suppose <code>malloc()</code> returned you an impossibly badly aligned pointer: 0x800001.  Adding the 16 gives 0x800011. Now I want to round down to the 16-byte boundary — so I want to reset the last 4 bits to 0.  0x0F has the last 4 bits set to one; therefore, <code>~0x0F</code> has all bits set to one except the last four.  Anding that with 0x800011 gives 0x800010.  You can iterate over the other offsets and see that the same arithmetic works.</p>

<p>The last step, <code>free()</code>, is easy: you always, and only, return to <code>free()</code> a value that one of <code>malloc()</code>, <code>calloc()</code> or <code>realloc()</code> returned to you — anything else is a disaster.  You correctly provided <code>mem</code> to hold that value — thank you.  The free releases it.</p>

<p>Finally, if you know about the internals of your system's <code>malloc</code> package, you could guess that it might well return 16-byte aligned data (or it might be 8-byte aligned).  If it was 16-byte aligned, then you'd not need to dink with the values.  However, this is dodgy and non-portable — other <code>malloc</code> packages have different minimum alignments, and therefore assuming one thing when it does something different would lead to core dumps.  Within broad limits, this solution is portable.</p>

<p>Someone else mentioned <code>posix_memalign()</code> as another way to get the aligned memory; that isn't available everywhere, but could often be implemented using this as a basis.  Note that it was convenient that the alignment was a power of 2; other alignments are messier.</p>

<p>One more comment — this code does not check that the allocation succeeded.</p>

<h3>Amendment</h3>

<p><a href=""https://stackoverflow.com/users/23705/windows-programmer"">Windows Programmer</a> pointed out that you can't do bit mask operations on pointers, and, indeed, GCC (3.4.6 and 4.3.1 tested) does complain like that.  So, an amended version of the basic code — converted into a main program, follows.  I've also taken the liberty of adding just 15 instead of 16, as has been pointed out.  I'm using <code>uintptr_t</code> since C99 has been around long enough to be accessible on most platforms.  If it wasn't for the use of <code>PRIXPTR</code> in the <code>printf()</code> statements, it would be sufficient to <code>#include &lt;stdint.h&gt;</code> instead of using <code>#include &lt;inttypes.h&gt;</code>. <em>[This code includes the fix pointed out by <a href=""https://stackoverflow.com/users/832878/c-r"">C.R.</a>, which was reiterating a point first made by <a href=""https://stackoverflow.com/users/12943/bill-k"">Bill K</a> a number of years ago, which I managed to overlook until now.]</em></p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;inttypes.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

static void memset_16aligned(void *space, char byte, size_t nbytes)
{
    assert((nbytes &amp; 0x0F) == 0);
    assert(((uintptr_t)space &amp; 0x0F) == 0);
    memset(space, byte, nbytes);  // Not a custom implementation of memset()
}

int main(void)
{
    void *mem = malloc(1024+15);
    void *ptr = (void *)(((uintptr_t)mem+15) &amp; ~ (uintptr_t)0x0F);
    printf(""0x%08"" PRIXPTR "", 0x%08"" PRIXPTR ""\n"", (uintptr_t)mem, (uintptr_t)ptr);
    memset_16aligned(ptr, 0, 1024);
    free(mem);
    return(0);
}
</code></pre>

<p>And here is a marginally more generalized version, which will work for sizes which are a power of 2:</p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;inttypes.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

static void memset_16aligned(void *space, char byte, size_t nbytes)
{
    assert((nbytes &amp; 0x0F) == 0);
    assert(((uintptr_t)space &amp; 0x0F) == 0);
    memset(space, byte, nbytes);  // Not a custom implementation of memset()
}

static void test_mask(size_t align)
{
    uintptr_t mask = ~(uintptr_t)(align - 1);
    void *mem = malloc(1024+align-1);
    void *ptr = (void *)(((uintptr_t)mem+align-1) &amp; mask);
    assert((align &amp; (align - 1)) == 0);
    printf(""0x%08"" PRIXPTR "", 0x%08"" PRIXPTR ""\n"", (uintptr_t)mem, (uintptr_t)ptr);
    memset_16aligned(ptr, 0, 1024);
    free(mem);
}

int main(void)
{
    test_mask(16);
    test_mask(32);
    test_mask(64);
    test_mask(128);
    return(0);
}
</code></pre>

<p>To convert <code>test_mask()</code> into a general purpose allocation function, the single return value from the allocator would have to encode the release address, as several people have indicated in their answers.</p>

<h3>Problems with interviewers</h3>

<p><a href=""https://stackoverflow.com/users/23072/uri"">Uri</a> commented: Maybe I am having [a] reading comprehension problem this morning, but if the interview question specifically says: ""How would you allocate 1024 bytes of memory"" and you clearly allocate more than that. Wouldn't that be an automatic failure from the interviewer?</p>

<p>My response won't fit into a 300-character comment...</p>

<p>It depends, I suppose.  I think most people (including me) took the question to mean ""How would you allocate a space in which 1024 bytes of data can be stored, and where the base address is a multiple of 16 bytes"".  If the interviewer really meant how can you allocate 1024 bytes (only) and have it 16-byte aligned, then the options are more limited.</p>

<ul>
<li>Clearly, one possibility is to allocate 1024 bytes and then give that address the 'alignment treatment'; the problem with that approach is that the actual available space is not properly determinate (the usable space is between 1008 and 1024 bytes, but there wasn't a mechanism available to specify which size), which renders it less than useful.</li>
<li>Another possibility is that you are expected to write a full memory allocator and ensure that the 1024-byte block you return is appropriately aligned.  If that is the case, you probably end up doing an operation fairly similar to what the proposed solution did, but you hide it inside the allocator.</li>
</ul>

<p>However, if the interviewer expected either of those responses, I'd expect them to recognize that this solution answers a closely related question, and then to reframe their question to point the conversation in the correct direction.  (Further, if the interviewer got really stroppy, then I wouldn't want the job; if the answer to an insufficiently precise requirement is shot down in flames without correction, then the interviewer is not someone for whom it is safe to work.)</p>

<h3>The world moves on</h3>

<p>The title of the question has changed recently.  It was <em>Solve the memory alignment in C interview question that stumped me</em>.  The revised title (<em>How to allocate aligned memory only using the standard library?</em>) demands a slightly revised answer — this addendum provides it.</p>

<p>C11 (ISO/IEC 9899:2011) added function <code>aligned_alloc()</code>:</p>

<blockquote>
  <p><strong>7.22.3.1 The <code>aligned_alloc</code> function</strong></p>
  
  <p><strong>Synopsis</strong>  </p>

<pre><code>#include &lt;stdlib.h&gt;
void *aligned_alloc(size_t alignment, size_t size);
</code></pre>
  
  <p><strong>Description</strong><br>
  The <code>aligned_alloc</code> function allocates space for an object whose alignment is
  specified by <code>alignment</code>, whose size is specified by <code>size</code>, and whose value is
  indeterminate. The value of <code>alignment</code> shall be a valid alignment supported by the implementation and the value of <code>size</code> shall be an integral multiple of <code>alignment</code>.</p>
  
  <p><strong>Returns</strong><br>
  The <code>aligned_alloc</code> function returns either a null pointer or a pointer to the allocated space.</p>
</blockquote>

<p>And POSIX defines <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/functions/posix_memalign.html"" rel=""noreferrer""><code>posix_memalign()</code></a>:</p>

<blockquote>
<pre><code>#include &lt;stdlib.h&gt;

int posix_memalign(void **memptr, size_t alignment, size_t size);
</code></pre>
  
  <p>DESCRIPTION</p>
  
  <p>The <code>posix_memalign()</code> function shall allocate <code>size</code> bytes aligned on a boundary specified by <code>alignment</code>, and shall return a pointer to the allocated memory in <code>memptr</code>. The value of <code>alignment</code> shall be a power of two multiple of <code>sizeof(void *)</code>.</p>
  
  <p>Upon successful completion, the value pointed to by <code>memptr</code> shall be a multiple of <code>alignment</code>.</p>
  
  <p>If the size of the space requested is 0, the behavior is implementation-defined; the value returned in <code>memptr</code> shall be either a null pointer or a unique pointer.</p>
  
  <p>The <code>free()</code> function shall deallocate memory that has previously been allocated by <code>posix_memalign()</code>.</p>
  
  <p>RETURN VALUE</p>
  
  <p>Upon successful completion, <code>posix_memalign()</code> shall return zero; otherwise, an error number shall be returned to indicate the error.</p>
</blockquote>

<p>Either or both of these could be used to answer the question now, but only the POSIX function was an option when the question was originally answered.</p>

<p>Behind the scenes, the new aligned memory function do much the same job as outlined in the question, except they have the ability to force the alignment more easily, and keep track of the start of the aligned memory internally so that the code doesn't have to deal with specially — it just frees the memory returned by the allocation function that was used.</p>
","227900"
"How does one represent the empty char?","145624","","<p>I'm currently writing a little program but I keep getting this error when compiling</p>

<blockquote>
  <p>error: empty character constant</p>
</blockquote>

<p>I realize it's because I'm trying to replace a valid char with empty space <code>c[i]=''</code> but I have not been able to find another way to represent it.</p>
","<p>You can use <code>c[i]= '\0'</code> or simply <code>c[i] = (char) 0</code>.</p>

<p>The null/empty char is simply a value of zero, but can also be represented as a character with an escaped zero.</p>
","18410258"
"Effects of the extern keyword on C functions","145194","","<p>In C, I did not notice any effect of the <code>extern</code> keyword used before function declaration.
At first, I thought that when defining <code>extern int f();</code> in a single file <strong>forces</strong> you to implement it outside of the file's scope.  However I found out that both:</p>

<pre><code>extern int f();
int f() {return 0;}
</code></pre>

<p>and</p>

<pre><code>extern int f() {return 0;}
</code></pre>

<p>compile just fine, with no warnings from gcc. I used <code>gcc -Wall -ansi</code>; it wouldn't even accept <code>//</code> comments.</p>

<p>Are there any effects for using <code>extern</code> <strong>before function definitions</strong>? Or is it just an optional keyword with no side effects for functions.</p>

<p>In the latter case I don't understand why did the standard designers chose to litter the grammar with superfluous keywords.</p>

<p><strong>EDIT:</strong> To clarify, I know there's usage for <code>extern</code> in variables, but I'm only asking about <code>extern</code> in <strong>functions</strong>.</p>
","<p>We have two files, foo.c and bar.c.</p>

<p>Here is foo.c</p>

<pre><code>#include &lt;stdio.h&gt;

volatile unsigned int stop_now = 0;
extern void bar_function(void);

int main(void)
{
  while (1) {
     bar_function();
     stop_now = 1;
  }
  return 0;
}
</code></pre>

<p>Now, here is bar.c</p>

<pre><code>#include &lt;stdio.h&gt;

extern volatile unsigned int stop_now;

void bar_function(void)
{
   while (! stop_now) {
      printf(""Hello, world!\n"");
      sleep(30);
   }
}
</code></pre>

<p>As you can see, we have no shared header between foo.c and bar.c , however bar.c needs something declared in foo.c when it's linked, and foo.c needs a function from bar.c when it's linked.</p>

<p>By using 'extern', you are telling the compiler that whatever follows it will be found (non-static) at link time, don't reserve anything for it since it will be encountered later.</p>

<p>It's very useful if you need to share some global between modules and don't want to put / initialize it in a header. </p>

<p>Technically, every function in a library public header is 'extern', however labeling them as such has very little to no benefit, depending on the compiler. Most compilers can figure that out on their own. As you see, those functions are actually defined somewhere else.</p>

<p>In the above example, main() would print hello world only once, but continue to enter bar_function(). Also note, bar_function() is not going to return in this example (since it's just a simple example). Just imagine stop_now being modified when a signal is serviced (hence, volatile) if this doesn't seem practical enough.</p>

<p>Externs are very useful for things like signal handlers, a mutex that you don't want to put in a header or structure, etc. Most compilers will optimize to ensure that they don't reserve any memory for external objects, since they know they'll be reserving it in the module where the object is defined. However, again, there's little point in specifying it with modern compilers when prototyping public functions.</p>

<p>Hope that helps :)</p>
","856736"
"Append Char To String in C?","144563","","<p>How do I append a single char to a string in C?</p>

<p>i.e </p>

<pre><code>char* str = ""blablabla"";
char c = 'H';
str_append(str,c); /* blablablaH */
</code></pre>
","<pre><code>char* str = ""blablabla"";     
</code></pre>

<p>You should not modify this string at all. It resides in implementation defined read only region. Modifying it causes <strong>Undefined Behavior</strong>.     </p>

<p>You need a char array not a string literal.     </p>

<p>Good Read:<br>
<a href=""https://stackoverflow.com/questions/9460260/what-is-the-difference-between-char-a-string-and-char-p-string/9631091#9631091"">What is the difference between char a[] = ""string""; and char *p = ""string"";</a></p>
","10279752"
"Post-increment and pre-increment within a 'for' loop produce same output","143328","","<p>The following for loops produce identical results even though one uses post increment and the other pre-increment.</p>

<p>Here is the code:</p>

<pre><code>for(i=0; i&lt;5; i++) {
    printf(""%d"", i);
}

for(i=0; i&lt;5; ++i) {
    printf(""%d"", i);
}
</code></pre>

<p>I get the same output for both 'for' loops.  Am I missing something?</p>
","<p>After evaluating <code>i++</code> or <code>++i</code>, the new value of <code>i</code> will be the same in both cases.  The difference between pre- and post-increment is in the result of evaluating the expression itself.</p>

<p><code>++i</code> increments <code>i</code> and evaluates to the new value of <code>i</code>.</p>

<p><code>i++</code> evaluates to the old value of <code>i</code>, and increments <code>i</code>.</p>

<p>The reason this doesn't matter in a for loop is that the flow of control works roughly like this:</p>

<ol>
<li>test the condition</li>
<li>if it is false, terminate</li>
<li>if it is true, execute the body</li>
<li>execute the incrementation step</li>
</ol>

<p>Because (1) and (4) are decoupled, either pre- or post-increment can be used.</p>
","4706225"
"typedef fixed length array","142527","","<p>I have to define a 24-bit data type.I am using <code>char[3]</code> to represent the type. Can I typedef <code>char[3]</code> to <code>type24</code>? I tried it in a code sample. I put <code>typedef char[3] type24;</code> in my header file. The compiler did not complain about it. But when I defined a function <code>void foo(type24 val) {}</code> in my C file, it did complain. I would like to be able to define functions like <code>type24_to_int32(type24 val)</code> instead of <code>type24_to_int32(char value[3])</code>.</p>
","<p>The typedef would be</p>

<pre><code>typedef char type24[3];
</code></pre>

<p>However, this is probably a very bad idea, because the resulting type is an array type, but users of it won't see that it's an array type. If used as a function argument, it will be passed by reference, not by value, and the <code>sizeof</code> for it will then be wrong.</p>

<p>A better solution would be</p>

<pre><code>typedef struct type24 { char x[3]; } type24;
</code></pre>

<p>You probably also want to be using <code>unsigned char</code> instead of <code>char</code>, since the latter has implementation-defined signedness.</p>
","4523537"
"Left-pad printf with spaces","142073","","<p>How can I pad a string with spaces on the left when using printf?</p>

<p>For example, I want to print ""Hello"" with 40 spaces preceding it.</p>

<p>Also, the string I want to print consists of multiple lines.  Do I need to print each line separately?</p>

<p>EDIT: Just to be clear, I want exactly 40 spaces printed before every line.</p>
","<p>If you want the word ""Hello"" to print in a column that's 40 characters wide, with spaces padding the left, use the following.</p>

<pre><code>char *ptr = ""Hello"";
printf(""%40s\n"", ptr);
</code></pre>

<p>That will give you 35 spaces, then the word ""Hello"".  This is how you format stuff when you know how wide you want the column, but the data changes (well, it's <em>one</em> way you can do it).</p>

<p>If you know you want exactly 40 spaces then some text, just save the 40 spaces in a constant and print them.  If you need to print multiple lines, either use multiple <code>printf</code> statements like the one above, or do it in a loop, changing the value of <code>ptr</code> each time.</p>
","293448"
"Passing variable number of arguments around","141700","","<p>Say I have a C function which takes a variable number of arguments: How can I call another function which expects a variable number of arguments from inside of it, passing all the arguments that got into the first function?</p>

<p>Example:</p>

<pre><code>void format_string(char *fmt, ...);

void debug_print(int dbg_lvl, char *fmt, ...) {
    format_string(fmt, /* how do I pass all the arguments from '...'? */);
    fprintf(stdout, fmt);
 }
</code></pre>
","<p>To pass the ellipses on, you have to convert them to a va_list and use that va_list in your second function. Specifically;</p>

<pre><code>void format_string(char *fmt,va_list argptr, char *formatted_string);


void debug_print(int dbg_lvl, char *fmt, ...) 
{    
 char formatted_string[MAX_FMT_SIZE];

 va_list argptr;
 va_start(argptr,fmt);
 format_string(fmt, argptr, formatted_string);
 va_end(argptr);
 fprintf(stdout, ""%s"",formatted_string);
}
</code></pre>
","205584"
"Combining C++ and C - how does #ifdef __cplusplus work?","140909","","<p>I'm working on a project that has a lot of legacy <strong>C</strong> code.  We've started writing in C++, with the intent to eventually convert the legacy code, as well.  I'm a little confused about how the <strong>C</strong> and C++ interact.  I understand that by wrapping the <strong>C</strong> code with <code>extern ""C""</code> the C++ compiler will not mangle the <strong>C</strong> code's names, but I'm not entirely sure how to implement this.</p>

<p>So, at the top of each <strong>C</strong> header file (after the include guards), we have</p>

<pre><code>#ifdef __cplusplus
extern ""C"" {
#endif
</code></pre>

<p>and at the bottom, we write</p>

<pre><code>#ifdef __cplusplus
}
#endif
</code></pre>

<p>In between the two, we have all of our includes, typedefs, and function prototypes.  I have a few questions, to see if I'm understanding this correctly:</p>

<ol>
<li><p>If I have a C++ file A.hh which
includes a <strong>C</strong> header file B.h,
includes another <strong>C</strong> header file C.h,
how does this work?  I think that
when the compiler steps into B.h,
<code>__cplusplus</code> will be defined, so it
will wrap the code with <code>extern ""C""</code>
(and <code>__cplusplus</code> will not be
defined inside this block).  So,
when it steps into C.h,
<code>__cplusplus</code> will not be defined
and the code will not be wrapped in
<code>extern ""C""</code>.  Is this correct?</p></li>
<li><p>Is there anything wrong with
wrapping a piece of code with
<code>extern ""C"" { extern ""C"" { .. } }</code>? 
What will the second <code>extern ""C""</code>
do?</p></li>
<li><p>We don't put this wrapper around the .c files, just the .h files.  So, what happens if a function doesn't have a prototype? Does the compiler think that it's a C++ function?</p></li>
<li><p>We are also using some third-party
code which is written in <strong>C</strong>, and does
not have this sort of wrapper around
it.  Any time I include a header
from that library, I've been putting
an <code>extern ""C""</code> around the #include.
Is this the right way to deal with
that?</p></li>
<li><p>Finally, is this set up a good idea?
Is there anything else we should do?
We're going to be mixing <strong>C</strong> and C++
for the foreseeable future, and I
want to make sure we're covering all
our bases.</p></li>
</ol>
","<p><code>extern ""C""</code> doesn't really change the way that the compiler reads the code.  If your code is in a .c file, it will be compiled as C, if it is in a .cpp file, it will be compiled as C++ (unless you do something strange to your configuration).</p>

<p>What <code>extern ""C""</code> does is affect linkage.  C++ functions, when compiled, have their names mangled -- this is what makes overloading possible.  The function name gets modified based on the types and number of parameters, so that two functions with the same name will have different symbol names.</p>

<p>Code inside an <code>extern ""C""</code> is still C++ code.  There are limitations on what you can do in an extern ""C"" block, but they're all about linkage.  You can't define any new symbols that can't be built with C linkage.  That means no classes or templates, for example.</p>

<p><code>extern ""C""</code> blocks nest nicely.  There's also <code>extern ""C++""</code> if you find yourself hopelessly trapped inside of <code>extern ""C""</code> regions, but it isn't such a good idea from a cleanliness perspective.</p>

<p>Now, specifically regarding your numbered questions:</p>

<p>Regarding #1: __cplusplus should be defined inside of <code>extern ""C""</code> blocks.  This doesn't matter, though, since the blocks should nest neatly.</p>

<p>Regarding #2: __cplusplus will be defined for any compilation unit that is being run through the C++ compiler.  Generally, that means .cpp files and any files being included by that .cpp file.  The same .h (or .hh or .hpp or what-have-you) could be interpreted as C or C++ at different times, if different compilation units include them.  If you want the prototypes in the .h file to refer to C symbol names, then they must have <code>extern ""C""</code> when being interpreted as C++, and they should not have <code>extern ""C""</code> when being interpreted as C -- hence the <code>#ifdef __cplusplus</code> checking.</p>

<p>To answer your question #3:  functions without prototypes will have C++ linkage if they are in .cpp files and not inside of an <code>extern ""C""</code> block.  This is fine, though, because if it has no prototype, it can only be called by other functions in the same file, and then you don't generally care what the linkage looks like, because you aren't planning on having that function be called by anything outside the same compilation unit anyway.</p>

<p>For #4, you've got it exactly.  If you are including a header for code that has C linkage (such as code that was compiled by a C compiler), then you must <code>extern ""C""</code> the header -- that way you will be able to link with the library.  (Otherwise, your linker would be looking for functions with names like <code>_Z1hic</code> when you were looking for <code>void h(int, char)</code></p>

<p>5:  This sort of mixing is a common reason to use <code>extern ""C""</code>, and I don't see anything wrong with doing it this way -- just make sure you understand what you are doing.</p>
","3789553"
"const char* concatenation","140242","","<p>I need to concatenate two const chars like these:</p>

<pre><code>const char *one = ""Hello "";
const char *two = ""World"";
</code></pre>

<p>How might I go about doing that?</p>

<p>I am passed these <code>char*</code>s from a third-party library with a C interface so I can't simply use <code>std::string</code> instead.</p>
","<p>In your example <em>one</em> and <em>two</em> are char pointers, pointing to char constants. You cannot change the char constants pointed to by these pointers. So anything like:</p>

<pre><code>strcat(one,two); // append string two to string one.
</code></pre>

<p>will not work. Instead you should have a separate variable(char array) to hold the result. Something like this:</p>

<pre><code>char result[100];   // array to hold the result.

strcpy(result,one); // copy string one into the result.
strcat(result,two); // append string two to the result.
</code></pre>
","1995057"
"how to read string entered by user in c","139466","","<p>I want to read the name entered by my user using C programmes</p>

<p>For this I wrote:</p>

<pre><code>char name[20];

printf(""Enter name:"");
gets(name);
</code></pre>

<p>but using <code>gets</code> is not good so suggest me a better way.</p>
","<p>You should <em>never</em> use <code>gets</code> (or <code>scanf</code> with an unbounded string size) since that opens you up to buffer overflows. Use the <code>fgets</code> with a <code>stdin</code> handle since it allows you to limit the data that will be placed in your buffer.</p>

<p>Here's a little snippet I use for line input from the user:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define OK       0
#define NO_INPUT 1
#define TOO_LONG 2
static int getLine (char *prmpt, char *buff, size_t sz) {
    int ch, extra;

    // Get line with buffer overrun protection.
    if (prmpt != NULL) {
        printf (""%s"", prmpt);
        fflush (stdout);
    }
    if (fgets (buff, sz, stdin) == NULL)
        return NO_INPUT;

    // If it was too long, there'll be no newline. In that case, we flush
    // to end of line so that excess doesn't affect the next call.
    if (buff[strlen(buff)-1] != '\n') {
        extra = 0;
        while (((ch = getchar()) != '\n') &amp;&amp; (ch != EOF))
            extra = 1;
        return (extra == 1) ? TOO_LONG : OK;
    }

    // Otherwise remove newline and give string back to caller.
    buff[strlen(buff)-1] = '\0';
    return OK;
}
</code></pre>

<p>This allows me to set the maximum size, will detect if too much data is entered on the line, and will flush the rest of the line as well so it doesn't affect the next input operation.</p>

<p>You can test it with something like:</p>

<pre><code>// Test program for getLine().

int main (void) {
    int rc;
    char buff[10];

    rc = getLine (""Enter string&gt; "", buff, sizeof(buff));
    if (rc == NO_INPUT) {
        // Extra NL since my system doesn't output that on EOF.
        printf (""\nNo input\n"");
        return 1;
    }

    if (rc == TOO_LONG) {
        printf (""Input too long [%s]\n"", buff);
        return 1;
    }

    printf (""OK [%s]\n"", buff);

    return 0;
}
</code></pre>
","4023921"
"How to print an unsigned char in C?","139319","","<p>I am trying to print char as positive value:</p>

<pre><code>char ch = 212;
printf(""%u"", ch);
</code></pre>

<p>but I get:</p>

<pre><code>4294967252
</code></pre>

<p>How I can get <code>212</code> in the output?</p>
","<p>Declare your <code>ch</code> as</p>

<pre><code>unsigned char ch = 212 ;
</code></pre>

<p>And your printf will work.</p>
","15736525"
"Finding the length of a Character Array in C","139314","","<p>What is a way in C that someone could find the length of a Character array? </p>

<p>I will happily accept psuedo-code, but am not averse to someone writing it out if they'd like to :)</p>
","<p>Provided the char array is <code>null</code> terminated,</p>

<pre><code>char chararray[10];
size_t len = strlen(chararray);
</code></pre>
","4180826"
"How to make a variadic macro (variable number of arguments)","139030","","<p>I want to write a macro in C that accepts any number of parameters, not a specific number</p>

<p>example:</p>

<pre><code>#define macro( X )  something_complicated( whatever( X ) )
</code></pre>

<p>where <code>X</code> is any number of parameters</p>

<p>I need this because <code>whatever</code> is overloaded and can be called with 2 or 4 parameters.</p>

<p>I tried defining the macro twice, but the second definition overwrote the first one!</p>

<p>The compiler I'm working with is g++ (more specifically, mingw)</p>
","<p>C99 way, also supported by VC++ compiler.</p>

<pre><code>#define FOO(fmt, ...) printf(fmt, ##__VA_ARGS__)
</code></pre>
","679993"
"Difference between fprintf, printf and sprintf?","138934","","<p>Can anyone explain in simple English about the differences between <code>printf</code>,  <code>fprintf</code>, and <code>sprintf</code> with examples?</p>

<p>What stream is it in?</p>

<p>I'm really confused between the three of these while reading about ""File Handling in C"".</p>
","<p>In C, a ""stream"" is an abstraction; from the program's perspective it is simply a producer (input stream) or consumer (output stream) of bytes.  It can correspond to a file on disk, to a pipe, to your terminal, or to some other device such as a printer or tty.  The <code>FILE</code> type contains information about the stream.  Normally, you don't mess with a <code>FILE</code> object's contents directly, you just pass a pointer to it to the various I/O routines.  </p>

<p>There are three standard streams: <code>stdin</code> is a pointer to the standard input stream, <code>stdout</code> is a pointer to the standard output stream, and <code>stderr</code> is a pointer to the standard error output stream.  In an interactive session, the three usually refer to your console, although you can redirect them to point to other files or devices:</p>

<pre><code>$ myprog &lt; inputfile.dat &gt; output.txt 2&gt; errors.txt
</code></pre>

<p>In this example, <code>stdin</code> now points to <code>inputfile.dat</code>, <code>stdout</code> points to <code>output.txt</code>, and <code>stderr</code> points to <code>errors.txt</code>.  </p>

<p><code>fprintf</code> writes formatted text to the output stream you specify.   </p>

<p><code>printf</code> is equivalent to writing <code>fprintf(stdout, ...)</code> and writes formatted text to wherever the standard output stream is currently pointing.</p>

<p><code>sprintf</code> writes formatted text to an array of <code>char</code>, as opposed to a stream.  </p>
","4628144"
"Signed to unsigned conversion in C - is it always safe?","138931","","<p>Suppose I have the following C code.</p>

<pre><code>unsigned int u = 1234;
int i = -5678;

unsigned int result = u + i;
</code></pre>

<p>What implicit conversions are going on here, and is this code safe for all values of <code>u</code> and <code>i</code>? (Safe, in the sense that even though <em>result</em> in this example will overflow to some huge positive number, I could cast it back to an <em>int</em> and get the real result.)</p>
","<p><strong>Short Answer</strong></p>

<p>Your <code>i</code> will be <em>converted</em> to an unsigned integer by adding <code>UINT_MAX + 1</code>, then the addition will be carried out with the unsigned values, resulting in a large <code>result</code> (depending on the values of <code>u</code> and <code>i</code>).</p>

<p><strong>Long Answer</strong></p>

<p>According to the C99 Standard:</p>

<blockquote>
  <p>6.3.1.8 Usual arithmetic conversions</p>
  
  <ol>
  <li>If both operands have the same type, then no further conversion is needed.</li>
  <li>Otherwise, if both operands have signed integer types or both have unsigned integer types, the operand with the type of lesser integer conversion rank is converted to the type of the operand with greater rank.</li>
  <li>Otherwise, if the operand that has unsigned integer type has rank greater or equal to the rank of the type of the other operand, then the operand with signed integer type is converted to the type of the operand with unsigned integer type.</li>
  <li>Otherwise, if the type of the operand with signed integer type can represent all of the values of the type of the operand with unsigned integer type, then the operand with unsigned integer type is converted to the type of the operand with signed integer type.</li>
  <li>Otherwise, both operands are converted to the unsigned integer type corresponding to the type of the operand with signed integer type.</li>
  </ol>
</blockquote>

<p>In your case, we have one unsigned int (<code>u</code>) and signed int (<code>i</code>). Referring to (3) above, since both operands have the same rank, your <code>i</code> will need to be <em>converted</em> to an unsigned integer.</p>

<blockquote>
  <p>6.3.1.3 Signed and unsigned integers</p>
  
  <ol>
  <li>When a value with integer type is converted to another integer type other than _Bool, if the value can be represented by the new type, it is unchanged.</li>
  <li>Otherwise, if the new type is unsigned, the value is converted by repeatedly adding or subtracting one more than the maximum value that can be represented in the new type until the value is in the range of the new type.</li>
  <li>Otherwise, the new type is signed and the value cannot be represented in it; either the result is implementation-defined or an implementation-defined signal is raised.</li>
  </ol>
</blockquote>

<p>Now we need to refer to (2) above. Your <code>i</code> will be converted to an unsigned value by adding <code>UINT_MAX + 1</code>. So the result will depend on how <code>UINT_MAX</code> is defined on your implementation. It will be large, but it will not overflow, because:</p>

<blockquote>
  <p>6.2.5 (9)</p>
  
  <p>A computation involving unsigned operands can never overflow, because a result that cannot be represented by the resulting unsigned integer type is reduced modulo the number that is one greater than the largest value that can be represented by the resulting type.</p>
</blockquote>

<p><strong>Bonus: Arithmetic Conversion Semi-WTF</strong></p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
  unsigned int plus_one = 1;
  int minus_one = -1;

  if(plus_one &lt; minus_one)
    printf(""1 &lt; -1"");
  else
    printf(""boring"");

  return 0;
}
</code></pre>

<p>You can use this link to try this online: <a href=""http://codepad.org/yPhYCMFO"" rel=""noreferrer"">http://codepad.org/yPhYCMFO</a></p>

<p><strong>Bonus: Arithmetic Conversion Side Effect</strong></p>

<p>Arithmetic conversion rules can be used to get the value of <code>UINT_MAX</code> by initializing an unsigned value to <code>-1</code>, ie:</p>

<pre><code>unsigned int umax = -1; // umax set to UINT_MAX
</code></pre>

<p>This is guaranteed to be portable regardless of the signed number representation of the system because of the conversion rules described above. See this SO question for more information: <a href=""https://stackoverflow.com/questions/809227/is-it-safe-to-use-1-to-set-all-bits-to-true"">Is it safe to use -1 to set all bits to true?</a></p>
","50632"
"Comparing user-inputted characters in C","138362","","<p>The following code snippets are from a C program.</p>

<p>The user enters Y or N.</p>

<pre><code>char *answer = '\0';

scanf ("" %c"", answer);

if (*answer == ('Y' || 'y'))
    // do work
</code></pre>

<p>I can't figure out why this <code>if</code> statement doesn't evaluate to true.</p>

<p>I checked for the y or n input with a <code>printf</code> and it is there, so I know I'm getting the user input. Also when I replace the the condition of the if statement with 1 (making it true), it evaluates properly.</p>
","<p>I see two problems:</p>

<p>The pointer <code>answer</code> is a <code>null</code> pointer and you are trying to dereference it in <code>scanf</code>, this leads to <em>undefined behavior</em>. </p>

<p>You don't need a <code>char</code> pointer here. You can just use a <code>char</code> variable as:</p>

<pre><code>char answer;
scanf("" %c"",&amp;answer);
</code></pre>

<p>Next to see if the read character is <code>'y'</code> or <code>'Y'</code> you should do:</p>

<pre><code>if( answer == 'y' || answer == 'Y') {
  // user entered y or Y.
}
</code></pre>

<p>If you <em>really</em> need to use a char pointer you can do something like:</p>

<pre><code>char var;
char *answer = &amp;var; // make answer point to char variable var.
scanf ("" %c"", answer);
if( *answer == 'y' || *answer == 'Y') {
</code></pre>
","3911673"
"Where do I find the definition of size_t?","138040","","<p>I see variables defined with this type but I don't know where it comes from, nor what is its purpose. Why not use int or unsigned int? (What about other ""similar"" types? Void_t, etc).</p>
","<p>From <a href=""http://en.wikipedia.org/wiki/Stdlib.h"" rel=""noreferrer"">Wikipedia</a></p>

<blockquote>
  <p>The <code>stdlib.h</code> and <code>stddef.h</code> header files define a datatype called <code>size_t</code><a href=""http://en.wikipedia.org/wiki/Stdlib.h"" rel=""noreferrer"">1</a> which is used to represent the size of an object. Library functions that take sizes expect them to be of type <code>size_t</code>, and the sizeof operator evaluates to <code>size_t</code>.</p>
  
  <p>The actual type of <code>size_t</code> is platform-dependent; a common mistake is to assume <code>size_t</code> is the same as unsigned int, which can lead to programming errors,<a href=""http://open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf#page=266"" rel=""noreferrer"">2</a> particularly as 64-bit architectures become more prevalent.</p>
</blockquote>

<p>From <a href=""http://open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf#page=266"" rel=""noreferrer"">C99 7.17.1/2</a></p>

<blockquote>
  <p>The following types and macros are defined in the standard header <code>stddef.h</code></p>
  
  <p>&lt;snip&gt;</p>
  
  <p><code>size_t</code></p>
  
  <p>which is the unsigned integer type of the result of the sizeof operator</p>
</blockquote>
","1119390"
"printf format specifiers for uint32_t and size_t","137907","","<p>I have the following</p>

<pre><code>size_t   i = 0;
uint32_t k = 0;

printf(""i [ %lu ] k [ %u ]\n"", i, k);
</code></pre>

<p>I get the following warning when compiling:</p>

<pre><code>format ‘%lu’ expects type ‘long unsigned int’, but argument has type ‘uint32_t’
</code></pre>

<p>When I ran this using splint I got the following:</p>

<pre><code>Format argument 1 to printf (%u) expects unsigned int gets size_t: k
</code></pre>

<p>Many thanks for any advice,</p>
","<p>Sounds like you're expecting <code>size_t</code> to be the same as <code>unsigned long</code> (possibly 64 bits) when it's actually an <code>unsigned int</code> (32 bits). Try using <code>%zu</code> in both cases.</p>

<p>I'm not entirely certain though.</p>
","3168293"
"Correct format specifier to print pointer (address)?","137761","","<p>Which format specifier should I be using to print the address of a variable? I am confused between the below lot.</p>

<blockquote>
  <p>%u - unsigned integer</p>
  
  <p>%x - hexadecimal value</p>
  
  <p>%p - void pointer</p>
</blockquote>

<p>Which would be the optimum format to print an address?</p>
","<p>The simplest answer, assuming you don't mind the vagaries and variations in format between different platforms, is the standard <code>%p</code> notation.</p>

<p>The C99 standard (ISO/IEC 9899:1999) says in §7.19.6.1 ¶8:</p>

<blockquote>
  <p><code>p</code> The argument shall be a pointer to <code>void</code>. The value of the pointer is
  converted to a sequence of printing characters, in an implementation-defined
  manner.</p>
</blockquote>

<p>(In C11 — ISO/IEC 9899:2011 — the information is in §7.21.6.1 ¶8.)</p>

<p>On some platforms, that will include a leading <code>0x</code> and on others it won't, and the letters could be in lower-case or upper-case, and the C standard doesn't even define that it shall be hexadecimal output though I know of no implementation where it is not.</p>

<p>It is somewhat open to debate whether you should explicitly convert the pointers with a <code>(void *)</code> cast.  It is being explicit, which is usually good (so it is what I do), and the standard says 'the argument shall be a pointer to <code>void</code>'.  On most machines, you would get away with omitting an explicit cast.  However, it would matter on a machine where the bit representation of a <code>char *</code> address for a given memory location is different from the '<em>anything else pointer</em>' address for the same memory location.  This would be a word-addressed, instead of byte-addressed, machine.  Such machines are not common (probably not available) these days, but the first machine I worked on after university was one such (ICL Perq).</p>

<p>If you aren't happy with the implementation-defined behaviour of <code>%p</code>, then use C99 <code>&lt;inttypes.h&gt;</code> and <code>uintptr_t</code> instead:</p>

<pre><code>printf(""0x%"" PRIXPTR ""\n"", (uintptr_t)your_pointer);
</code></pre>

<p>This allows you to fine-tune the representation to suit yourself.  I chose to have the hex digits in upper-case so that the number is uniformly the same height and the characteristic dip at the start of <code>0xA1B2CDEF</code> appears thus, not like <code>0xa1b2cdef</code> which dips up and down along the number too.  Your choice though, within very broad limits.  The <code>(uintptr_t)</code> cast is unambiguously recommended by GCC when it can read the format string at compile time.  I think it is correct to request the cast, though I'm sure there are some who would ignore the warning and get away with it most of the time.</p>

<hr>

<p>Kerrek asks in the comments:</p>

<blockquote>
  <p>I'm a bit confused about standard promotions and variadic arguments. Do all pointers get standard-promoted to void*? Otherwise, if <code>int*</code> were, say, two bytes, and <code>void*</code> were 4 bytes, then it'd clearly be an error to read four bytes from the argument, non?</p>
</blockquote>

<p>I was under the illusion that the C standard says that all object pointers must be the same size, so <code>void *</code> and <code>int *</code> cannot be different sizes.  However, what I think is the relevant section of the C99 standard is not so emphatic (though I don't know of an implementation where what I suggested is true is actually false):</p>

<blockquote>
  <p>§6.2.5 Types</p>
  
  <p>¶26 A pointer to void shall have the same representation and alignment requirements as a pointer to a character type.<sup>39)</sup> Similarly, pointers to qualified or unqualified versions of compatible types shall have the same representation and alignment requirements. All pointers to structure types shall have the same representation and alignment requirements as each other. All pointers to union types shall have the same representation and alignment requirements as each other. Pointers to other types need not have the same representation or alignment requirements.</p>
  
  <p><sup>39)</sup> The same representation and alignment requirements are meant to imply interchangeability as arguments to functions, return values from functions, and members of unions.</p>
</blockquote>

<p>(C11 says exactly the same in the section §6.2.5, ¶28, and footnote 48.)</p>

<p>So, all pointers to structures must be the same size as each other, and must share the same alignment requirements, even though the structures the pointers point at may have different alignment requirements.  Similarly for unions.  Character pointers and void pointers must have the same size and alignment requirements.  Pointers to variations on <code>int</code> (meaning <code>unsigned int</code> and <code>signed int</code>) must have the same size and alignment requirements as each other; similarly for other types.  But the C standard doesn't formally say that <code>sizeof(int *) == sizeof(void *)</code>.  Oh well, SO is good for making you inspect your assumptions.</p>

<p>The C standard definitively does not require function pointers to be the same size as object pointers.  That was necessary not to break the different memory models on DOS-like systems.  There you could have 16-bit data pointers but 32-bit function pointers, or vice versa.  This is why the C standard does not mandate that function pointers can be converted to object pointers and vice versa.</p>

<p>Fortunately (for programmers targetting POSIX), POSIX steps into the breach and does mandate that function pointers and data pointers are the same size:</p>

<blockquote>
  <p>§2.12.3 <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_12"">Pointer Types</a></p>
  
  <p>All function pointer types shall have the same representation as the type pointer to void. Conversion of a function pointer to <code>void *</code> shall not alter the representation. A <code>void *</code> value resulting from such a conversion can be converted back to the original function pointer type, using an explicit cast, without loss of information.</p>
  
  <p>Note:
  The ISO C standard does not require this, but it is required for POSIX conformance.</p>
</blockquote>

<p>So, it does seem that explicit casts to <code>void *</code> are strongly advisable for maximum reliability in the code when passing a pointer to a variadic function such as <code>printf()</code>.  On POSIX systems, it is safe to cast a function pointer to a void pointer for printing.  On other systems, it is not necessarily safe to do that, nor is it necessarily safe to pass pointers other than <code>void *</code> without a cast.</p>
","9053835"
"Are types like uint32, int32, uint64, int64 defined in any stdlib header?","137377","","<p>I often see source code using types like uint32, uint64 and I wonder if they should be defined by the programmer in its application code or it's defined in a standard lib header.</p>

<p>What's the best way to have these types on my application source code?</p>
","<p>The C99 <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdint.h.html""><code>stdint.h</code></a> defines these:</p>

<ul>
<li><code>int8_t</code></li>
<li><code>int16_t</code></li>
<li><code>int32_t</code></li>
<li><code>uint8_t</code></li>
<li><code>uint16_t</code></li>
<li><code>uint32_t</code></li>
</ul>

<p>And, if the architecture supports them:</p>

<ul>
<li><code>int64_t</code></li>
<li><code>uint64_t</code></li>
</ul>

<p>There are various other integer typedefs in <code>stdint.h</code> as well.</p>

<p>If you're stuck without a C99 environment then you should probably supply your own typedefs and use the C99 ones anyway.</p>

<p>The <code>uint32</code> and <code>uint64</code> (i.e. without the <code>_t</code> suffix) are probably application specific.</p>
","6013417"
"Determine if char is a num or letter","136903","","<p>How do I determine if a <code>char</code> in C such as <code>a</code> or <code>9</code> is a number or a letter?</p>

<p>Is it better to use:</p>

<pre><code>int a = Asc(theChar);
</code></pre>

<p>or this?</p>

<pre><code>int a = (int)theChar
</code></pre>
","<p>You'll want to use the <code>isalpha()</code> and <code>isdigit()</code> standard functions in <code>&lt;ctype.h&gt;</code>.</p>

<pre><code>char c = 'a'; // or whatever

if (isalpha(c)) {
    puts(""it's a letter"");
} else if (isdigit(c)) {
    puts(""it's a digit"");
} else {
    puts(""something else?"");
}
</code></pre>
","8611823"
"What is the difference between char * const and const char *?","136750","","<p>What's the difference between:</p>

<pre><code>char * const 
</code></pre>

<p>and</p>

<pre><code>const char *
</code></pre>
","<p>The difference is that <code>const char *</code> is a pointer to a <code>const char</code>, while <code>char * const</code> is a constant pointer to a <code>char</code>. </p>

<p>The first, the value being pointed to can't be changed but the pointer can be. The second, the value being pointed at can change but the pointer can't (similar to a reference).</p>

<p>There is also a</p>

<pre><code>const char * const
</code></pre>

<p>which is a constant pointer to a constant char (so nothing about it can be changed).</p>

<p>Note:</p>

<p>The following two forms are equivalent:</p>

<pre><code>const char *
</code></pre>

<p>and</p>

<pre><code>char const *
</code></pre>

<p>The exact reason for this is described in the C++ standard, but it's important to note and avoid the confusion. I know several coding standards that prefer:</p>

<pre><code>char const
</code></pre>

<p>over</p>

<pre><code>const char
</code></pre>

<p>(with or without pointer) so that the placement of the <code>const</code> element is the same as with a pointer <code>const</code>.</p>
","890560"
"What does 'const static' mean in C and C++?","136571","","<pre><code>const static int foo = 42;
</code></pre>

<p>I saw this in some code here on StackOverflow and I couldn't figure out what it does. Then I saw some confused answers on other forums. My best guess is that it's used in C to hide the constant <code>foo</code> from other modules. Is this correct? If so, why would anyone use it in a C++ context where you can just make it <code>private</code>?</p>
","<p>It has uses in both C and C++.</p>

<p>As you guessed, the <code>static</code> part limits its scope to that <a href=""https://stackoverflow.com/questions/1106149/what-is-a-translation-unit-in-c"">compilation unit</a>. It also provides for static initialization. <code>const</code> just tells the compiler to not let anybody modify it. This variable is either put in the data or bss segment depending on the architecture, and might be in memory marked read-only.</p>

<p>All that is how C treats these variables (or how C++ treats namespace variables). In C++, a member marked <code>static</code> is shared by all instances of a given class. Whether it's private or not doesn't affect the fact that one variable is shared by multiple instances. Having <code>const</code> on there will warn you if any code would try to modify that.</p>

<p>If it was strictly private, then each instance of the class would get its own version (optimizer notwithstanding).</p>
","177451"
"How to get the string size in bytes?","136492","","<p>As the title implies, my question is how to get the size of a string in <code>C</code>. Is it good to use <code>sizeof</code> if I've declared it (the string) in a function without <code>malloc</code> in it? Or, if I've declared it as a pointer? What if I initialized it with <code>malloc</code>? I would like to have an exhaustive response.</p>
","<p>You can use <a href=""http://www.cplusplus.com/reference/cstring/strlen/"" rel=""noreferrer"">strlen</a>. Size is determined by the terminating null-character, so passed string should be valid.</p>

<p>If you want to get size of memory buffer, that contains your string, and you have pointer to it:</p>

<ul>
<li>If it is dynamic array(created with malloc), it is impossible to get
it size, since compiler doesn't know what pointer is pointing at.
(<a href=""https://stackoverflow.com/questions/492384/how-to-find-the-sizeofa-pointer-pointing-to-an-array"">check this</a>)</li>
<li>If it is static array, you can use <code>sizeof</code> to get its size.</li>
</ul>

<p>If you are confused about difference between dynamic and static arrays, check <a href=""https://stackoverflow.com/questions/2672085/c-static-array-vs-dynamic-array"">this</a>.</p>
","15000609"
"Work on a remote project with Eclipse via SSH","136394","","<p>I have the following boxes:</p>

<ol>
<li>A Windows box with Eclipse CDT,  </li>
<li>A Linux box, accessible for me only via SSH.</li>
</ol>

<p>Both the compiler and the hardware required to build and run my project is only on machine B.</p>

<p>I'd like to work ""transparently"" from a Windows box on that project using Eclipse CDT and be able to build, run and debug the project remotely from within the IDE.</p>

<p>How do I set up that:</p>

<ul>
<li>The building will work? Any simpler solutions than writing a local makefile which would <code>rsync</code> the project and then call a remote makefile to initiate the actual build? Does Eclipse managed build have a feature for that?</li>
<li>The debugging will work?</li>
<li>Preferably - the Eclipse CDT code indexing will work? Do I have to copy all required header files from machine B to machine A and add them to include path manually?</li>
</ul>
","<p>Try the <a href=""http://tmober.blogspot.com/2006/11/remote-system-explorer-10-is-released.html"">Remote System Explorer</a> (RSE). It's a set of plug-ins to do exactly what you want. </p>

<p>RSE may already be included in your current Eclipse installation. To check in Eclipse Indigo go to <strong>Window</strong> > <strong>Open Perspective</strong> > <strong>Other...</strong> and choose <strong>Remote System Explorer</strong> from the <em>Open Perspective</em> dialog to open the RSE perspective.</p>

<p>To create an SSH remote project from the RSE perspective in Eclipse:</p>

<ol>
<li>Define a new connection and choose SSH Only from the Select Remote System Type screen in the New Connection dialog.</li>
<li>Enter the connection information then choose Finish.</li>
<li>Connect to the new host. (Assumes SSH keys are already setup.)</li>
<li>Once connected, drill down into the host's <em>Sftp Files</em>, choose a folder and select <strong>Create Remote Project</strong> from the item's context menu. (Wait as the remote project is created.)</li>
</ol>

<p>If done correctly, there should now be a new remote project accessible from the Project Explorer and other perspectives within eclipse. With the SSH connection set-up correctly passwords can be made an optional part of the normal SSH authentication process. A remote project with Eclipse via SSH is now created.</p>
","4216878"
"What is the difference between printf() and puts() in C?","136038","","<p>I know you can print with <code>printf()</code> and <code>puts()</code>. I can also see that <code>printf()</code> allows you to interpolate variables and do formatting.</p>

<p>Is <code>puts()</code> merely a primitive version of <code>printf()</code>. Should it be used for every possible <code>printf()</code> without string interpolation?</p>
","<p><code>puts</code> is simpler than <code>printf</code> but be aware that the former automatically appends a newline.  If that's not what you want, you can <code>fputs</code> your string to stdout or use <code>printf</code>.</p>
","2454491"
"Undefined reference to `pow' and `floor'","136010","","<p>I'm trying to make a simple fibonacci calculator in C but when compiling <code>gcc</code> tells me that I'm missing the pow and floor functions. What's wrong?</p>

<p>Code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

int fibo(int n);

int main() {
        printf(""Fib(4) = %d"", fibo(4));
        return 0;
}

int fibo(int n) {
        double phi = 1.61803399;

        return (int)(floor((float)(pow(phi, n) / sqrt(5)) + .5f));
}
</code></pre>

<p>Output:</p>

<pre><code>gab@testvm:~/work/c/fibo$ gcc fib.c -o fibo
/tmp/ccNSjm4q.o: In function `fibo':
fib.c:(.text+0x4a): undefined reference to `pow'
fib.c:(.text+0x68): undefined reference to `floor'
collect2: ld returned 1 exit status
</code></pre>
","<p>You need to compile with the flag <code>-lm</code>, like this:</p>

<pre><code>gcc fib.c -lm -o fibo
</code></pre>

<p>This will tell gcc to link your code against the math lib. Just be sure to put the flag <strong>after</strong> the objects you want to link. </p>
","8671381"
"malloc for struct and pointer in C","135974","","<p>Suppose I want to define a structure representing length of the vector and its values as:</p>

<pre><code>struct Vector{
    double* x;
    int n;
};
</code></pre>

<p>Now, suppose I want to define a vector y and allocate memory for it.</p>

<pre><code>struct Vector *y = (struct Vector*)malloc(sizeof(struct Vector));
</code></pre>

<p>My search over the internet show that I should allocate the memory for x separately.</p>

<pre><code>y-&gt;x = (double*)malloc(10*sizeof(double));
</code></pre>

<p>But, it seems that I am allocating the memory for y->x twice, one while allocating memory for y and the other while allocating memory for y->x, and it seems a waste of memory.
It is very much appreciated if let me know what compiler really do and what would be the right way to 
initialize both y, and y->x.</p>

<p>Thanks in advance.</p>
","<p>No, you're <em>not</em> allocating memory for <code>y-&gt;x</code> twice.</p>

<p>Instead, you're allocating memory for the structure (which includes a pointer) <em>plus</em> something for that pointer to point to.</p>

<p>Think of it this way:</p>

<pre><code>         1          2
        +-----+    +------+
y------&gt;|  x------&gt;|  *x  |
        |  n  |    +------+
        +-----+
</code></pre>

<p>So you actually need the two allocations (<code>1</code> and <code>2</code>) to store everything.</p>

<p>Additionally, your type should be <code>struct Vector *y</code> since it's a pointer, and you should never cast the return value from <code>malloc</code> in C since it can hide certain problems you don't want hidden - C is perfectly capable of implicitly converting the <code>void*</code> return value to any other pointer.</p>

<p>And, of course, you probably want to encapsulate the creation of these vectors to make management of them easier, such as with:</p>

<pre><code>struct Vector {
    double *data;    // no place for x and n in readable code :-)
    size_t size;
};

struct Vector *newVector (size_t sz) {
    // Try to allocate vector structure.

    struct Vector *retVal = malloc (sizeof (struct Vector));
    if (retval == NULL)
        return NULL;

    // Try to allocate vector data, free structure if fail.

    retVal-&gt;data = malloc (sz * sizeof (double));
    if (retVal-&gt;data == NULL) {
        free (retVal);
        return NULL;
    }

    // Set size and return.

    retVal-&gt;size = sz;
    return retVal;
}

void delVector (struct Vector *vector) {
    // Can safely assume vector is NULL or fully built.

    if (vector != NULL) {
        free (vector-&gt;data);
        free (vector);
    }
}
</code></pre>

<p>By encapsulating the creation like that, you ensure that vectors are either fully built or not built at all - there's no chance of them being half-built. It also allows you to totally change the underlying data structures in future without affecting clients (for example, if you wanted to make them sparse arrays to trade off space for speed).</p>
","14768280"
"What does ""collect2: error: ld returned 1 exit status"" mean?","135895","","<p>I see the error <code>collect2: error: ld returned 1 exit status</code> very often. For example, I was executing the following snippet of code:</p>

<pre><code>void main() {
  char i;

  printf(""ENTER i"");
  scanf(""%c"",&amp;i);

  clrscr();

  switch(i) {
    default:
      printf(""\nHi..\n"");
      break;
    case 1:
      printf(""\n\na"");
      break;
    case 2:
      printf(""\nb\n"");
      break;
    case 3:
      printf(""\nc"");
      break;
  }
}
</code></pre>

<p>and I got this:</p>

<pre><code>main.c:(.text+0x33): undefined reference to `clrscr'                       
collect2: error: ld returned 1 exit status 
</code></pre>

<p>What does it mean?</p>
","<p>The ""ld returned 1 exit status"" error is the consequence of previous errors. In your example there is an earlier error - ""undefined reference to `clrscr'"" - and this is the real one. The exit status error just signals that the linking step in the build process encountered some errors. Normally exit status 0 means success, and exit status > 0 means errors. In many cases tools return as the exit status the number of errors they found. When you build your program, many separate tools may be run to create the final executable. One of those tools is ""ld"", which first reports the error it found (clrscr reference missing), and then it returns the exit status to its caller. The caller sees that ""ld"" returned non-zero exit status and reports it.</p>
","27272651"
"What is the size of an enum in C?","135811","","<p>I'm creating a set of enum values, but I need each enum value to be 64 bits wide. If I recall correctly, an enum is generally the same size as an int; but I thought I read somewhere that (at least in GCC) the compiler can make the enum any width they need to be to hold their values. So, is it possible to have an enum that is 64 bits wide?</p>
","<p>An <code>enum</code> is only guaranteed to be large enough to hold <code>int</code> values.  The compiler is free to choose the actual type used based on the enumeration constants defined so it can choose a smaller type if it can represent the values you define.  If you need enumeration constants that don't fit into an <code>int</code> you will need to use compiler-specific extensions to do so.</p>
","366026"
"Reading in double values with scanf in c","135753","","<p>I try to read-in 2 values using scanf() in C, but the values the system writes into memory are not equal to my entered values. Here is the code:</p>

<pre><code>double a,b;
printf(""--------\n""); //seperate lines
scanf(""%ld"",&amp;a);
printf(""--------\n""); 
scanf(""%ld"",&amp;b);
printf(""%d %d"",a,b);
</code></pre>

<p>If I enter 1 and 2, CMD returns a correct, but b = -858993460 Here is what I already tried:
using float or int instead of double, using scanf_s, using scanf(""%d or %f for %i or %li or %lf or %e or %g ), using fflush(stdin) to clear keyboard buffer, reading in b first, trying like all possible combinations. I found out that there is a problem with the length of double on 32 bit OS, so that you are forced to use scanf(""%lf"", &amp;f) to read in a double. No matter what I do, second value is always wrong.</p>

<p>I use MS VS express 2012 for Desktop on Windows 7 32 bit OS.</p>
","<p>Use the <code>%lf</code> format specifier to read a double:</p>

<pre><code>double a;
scanf(""%lf"",&amp;a);
</code></pre>

<p>Wikipedia has a <a href=""http://en.wikipedia.org/wiki/Scanf_format_string"">decent reference</a> for available format specifiers.</p>

<p>You'll need to use the <code>%lf</code> format specifier to print out the results as well:</p>

<pre><code>printf(""%lf %lf"",a,b);
</code></pre>
","13730228"
"Xcode - Warning: Implicit declaration of function is invalid in C99","135476","","<p>Getting a warning : Implicit declaration of function 'Fibonacci' is invalid in C99.
What's wrong?</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, const char * argv[])
{
    int input;
    printf(""Please give me a number : "");
    scanf(""%d"", &amp;input);
    getchar();
    printf(""The fibonacci number of %d is : %d"", input, Fibonacci(input)); //!!!

}/* main */

int Fibonacci(int number)
{
    if(number&lt;=1){
        return number;
    }else{
        int F = 0;
        int VV = 0;
        int V = 1;
        for (int I=2; I&lt;=getal; I++) {
            F = VV+V;
            VV = V;
            V = F;
        }
        return F;
    }
}/*Fibonacci*/
</code></pre>
","<p>The function has to be declared before it's getting called. This could be done in various ways:</p>

<ul>
<li><p>Write down the prototype in a header<br>
Use this if the function shall be callable from several source files. Just write your prototype<br>
<code>int Fibonacci(int number);</code><br>
down in a <code>.h</code> file (e.g. <code>myfunctions.h</code>) and then <code>#include ""myfunctions.h""</code> in the C code.</p></li>
<li><p>Move the function before it's getting called the first time<br>
This means, write down the function<br>
<code>int Fibonacci(int number){..}</code><br>
before your <code>main()</code> function</p></li>
<li><p>Explicitly declare the function before it's getting called the first time<br>
This is the combination of the above flavors: type the prototype of the function in the C file before your <code>main()</code> function</p></li>
</ul>

<p>As an additional note: if the function <code>int Fibonacci(int number)</code> shall only be used in the file where it's implemented, it shall be declared <code>static</code>, so that it's only visible in that translation unit.</p>
","15850385"
"What is EOF in the C programming language?","135240","","<p>How do you get to see the last print? In other words what to put in for EOF? I checked the definitions and it says EOF is -1. </p>

<p>And if you enter Ctrl-D you won't see anything.</p>

<pre><code>#include &lt;stdio.h&gt;

int main() {
 int c;
 while((c = getchar() != EOF)) {
  printf(""%d\n"", c);
 }
 printf(""%d - at EOF\n"", c);
}
</code></pre>
","<p>On Linux systems and OS X, the character to input to cause an EOF is <kbd>Ctrl</kbd>-<kbd>D</kbd>.  For Windows, it's <kbd>Ctrl</kbd>-<kbd>Z</kbd>.</p>

<p>Depending on the operating system, this character will only work if it's the first character on a line, i.e. the first character after an <kbd>Enter</kbd>. Since console input is often line-oriented, the system may also not recognize the EOF character until after you've followed it up with an <kbd>Enter</kbd>.</p>

<p>And yes, if that character is recognized as an EOF, then your program will never see the actual character. Instead, a C program will get a <code>-1</code> from <code>getchar()</code>.</p>
","1782134"
"What is exactly the base pointer and stack pointer? To what do they point?","134676","","<p>Using <a href=""http://en.wikipedia.org/wiki/Call_stack"" rel=""noreferrer"">this example</a> coming from wikipedia, in which DrawSquare() calls DrawLine(),</p>

<p><img src=""https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Call_stack_layout.svg/342px-Call_stack_layout.svg.png"" alt=""alt text""></p>

<p>(Note that this diagram has high addresses at the bottom and low addresses at the top.)</p>

<p>Could anyone explain me what <code>ebp</code> and <code>esp</code> are in this context?</p>

<p>From what I see, I'd say the stack pointer points always to the top of the stack, and the base pointer to the beginning of the the current function? Or what?</p>

<hr>

<p>edit: I mean this in the context of windows programs</p>

<p><strong>edit2: And how does <code>eip</code> work, too?</strong></p>

<p><strong>edit3:</strong> I have the following code from MSVC++:</p>

<pre><code>var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
hInstance= dword ptr  8
hPrevInstance= dword ptr  0Ch
lpCmdLine= dword ptr  10h
nShowCmd= dword ptr  14h
</code></pre>

<p>All of them seem to be dwords, thus taking 4 bytes each. So I can see there is a gap from hInstance to var_4 of 4 bytes. What are they? I assume it is the return address, as can be seen in wikipedia's picture?</p>

<hr>

<p>(editor's note: removed a long quote from Michael's answer, which doesn't belong in the question, but a followup question was edited in):</p>

<p>This is because the flow of the function call is:</p>

<pre><code>* Push parameters (hInstance, etc.)
* Call function, which pushes return address
* Push ebp
* Allocate space for locals
</code></pre>

<p><strong>My question (last, i hope!) now is, what is exactly what happens from the instant I pop the arguments of the function i want to call up to the end of the prolog? I want to know how the ebp, esp evolve during those moments(I already understood how the prolog works, I just want to know what is happening after i pushed the arguments on the stack and before the prolog).</strong></p>
","<p><code>esp</code> is as you say it is, the top of the stack.</p>

<p><code>ebp</code> is usually set to <code>esp</code> at the start of the function. Function parameters and local variables are accessed by adding and subtracting, respectively, a constant offset from <code>ebp</code>.  All x86 calling conventions define <code>ebp</code> as being preserved across function calls.  <code>ebp</code> itself actually points to the previous frame's base pointer, which enables stack walking in a debugger and viewing other frames local variables to work.  </p>

<p>Most function prologs look something like:</p>

<pre class=""lang-none prettyprint-override""><code>push ebp      ; Preserve current frame pointer
mov ebp, esp  ; Create new frame pointer pointing to current stack top
sub esp, 20   ; allocate 20 bytes worth of locals on stack.
</code></pre>

<p>Then later in the function you may have code like (presuming both local variables are 4 bytes)</p>

<pre class=""lang-none prettyprint-override""><code>mov [ebp-4], eax    ; Store eax in first local
mov ebx, [ebp - 8]  ; Load ebx from second local
</code></pre>

<p>FPO or <em>frame pointer omission</em> optimization which you can enable will actually eliminate this and use <code>ebp</code> as another register and access locals directly off of <code>esp</code>, but this makes debugging a bit more difficult since the debugger can no longer directly access the stack frames of earlier function calls.</p>

<p>EDIT:</p>

<p>For your updated question, the missing two entries in the stack are:</p>

<pre class=""lang-none prettyprint-override""><code>var_C = dword ptr -0Ch
var_8 = dword ptr -8
var_4 = dword ptr -4
*savedFramePointer = dword ptr 0*
*return address = dword ptr 4*
hInstance = dword ptr  8h
PrevInstance = dword ptr  0C
hlpCmdLine = dword ptr  10h
nShowCmd = dword ptr  14h
</code></pre>

<p>This is because the flow of the function call is:</p>

<ul>
<li>Push parameters (<code>hInstance</code>, etc.)</li>
<li>Call function, which pushes return address</li>
<li>Push <code>ebp</code></li>
<li>Allocate space for locals</li>
</ul>
","1395646"
"How do you declare string constants in C?","134453","","<p>I know it's quite idiomatic, or good style at least, in C to declare numeric constants as <code>enum</code>s instead of <code>#define</code>ing them.</p>

<pre><code>/* bad style */
#define MAXLINE 1024

/* good/better style */
enum {
    MAX_LINE = 1024
};
</code></pre>

<p>Is there an equivalent rule for the definition of string constants?</p>

<pre><code>/* is this good style? */
#define HELLO ""Hello World""

/* or is this better? */
const char *HELLO2 = ""Howdy"";
</code></pre>

<p>What do you prefer? If possible show some drawbacks of either method.</p>
","<p>There's one more (at least) road to Rome:</p>

<pre><code>static const char HELLO3[] = ""Howdy"";
</code></pre>

<p>(<code>static</code> — optional — is to prevent it from conflicting with other files). I'd prefer this one over <code>const char*</code>, because then you'll be able to use <code>sizeof(HELLO3)</code> and therefore you don't have to postpone till runtime what you can do at compile time.</p>

<p>The define has an advantage of compile-time concatenation, though (think <code>HELLO "", World!""</code>) and you can <code>sizeof(HELLO)</code> as well.</p>

<p>But then you can also prefer <code>const char*</code> and use it across multiple files, which would save you a morsel of memory.</p>

<p><em>In short — it depends.</em></p>
","1431607"
"Char to int conversion in C","134421","","<p>If I want to convert a single numeric <code>char</code> to it's numeric value, for example, if:</p>

<pre><code>char c = '5';
</code></pre>

<p>and I want <code>c</code> to hold <code>5</code> instead of <code>'5'</code>, is it 100% portable doing it like this?</p>

<pre><code>c = c - '0';
</code></pre>

<p>I heard that all character sets store the numbers in consecutive order so I assume so, but I'd like to know if there is an organized library function to do this conversion, and how it is done conventionally. I'm a real beginner :)</p>
","<p>Yes, this is a safe conversion. C requires it to work. This guarantee is in section 5.2.1 paragraph 2 of the latest ISO C standard, a recent draft of which is <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf"" rel=""noreferrer"">N1570</a>:</p>

<blockquote>
  <p>Both the basic source and basic execution character sets shall have the following
  members:<br>
  [...]<br>
  the 10 decimal <em>digits</em><br>
         <code>0 1 2 3 4 5 6 7 8 9</code><br>
  [...]<br>
  In both the source and execution basic character sets, the
  value of each character after 0 in the above list of decimal digits shall be one greater than
  the value of the previous.</p>
</blockquote>

<p>Both ASCII and EBCDIC, and character sets derived from them, satisfy this requirement, which is why the C standard was able to impose it. Note that letters are <em>not</em> contiguous iN EBCDIC, and C doesn't require them to be.</p>

<p>There is no library function to do it for a single <code>char</code>, you would need to build a string first:</p>

<pre><code>int digit_to_int(char d)
{
 char str[2];

 str[0] = d;
 str[1] = '\0';
 return (int) strtol(str, NULL, 10);
}
</code></pre>

<p>You could also use the <code><a href=""http://www.manpagez.com/man/3/atoi/"" rel=""noreferrer"">atoi()</a></code> function to do the conversion, once you have a string, but <code><a href=""http://linux.die.net/man/3/strtol"" rel=""noreferrer"">strtol()</a></code> is better and safer.</p>

<p>As commenters have pointed out though, it is extreme overkill to call a function to do this conversion; your initial approach to subtract '0' is the proper way of doing this. I just wanted to show how the recommended standard approach of converting a number as a string to a ""true"" number would be used, here.</p>
","781704"
"C #define macro for debug printing","134392","","<p>Trying to create a macro which can be used for print debug messages when DEBUG is defined, like the following pseudo code:</p>

<pre><code>#define DEBUG 1
#define debug_print(args ...) if (DEBUG) fprintf(stderr, args)
</code></pre>

<p>How is this accomplished with a macro?</p>
","<h3>If you use a C99 compiler</h3>

<pre><code>#define debug_print(fmt, ...) \
            do { if (DEBUG) fprintf(stderr, fmt, __VA_ARGS__); } while (0)
</code></pre>

<p>It assumes you are using C99 (the variable argument list notation is not supported in earlier versions).  The <code>do { ... } while (0)</code> idiom ensures that the code acts like a statement (function call).  The unconditional use of the code ensures that the compiler always checks that your debug code is valid &mdash; but the optimizer will remove the code when DEBUG is 0.</p>

<p>If you want to work with #ifdef DEBUG, then change the test condition:</p>

<pre><code>#ifdef DEBUG
#define DEBUG_TEST 1
#else
#define DEBUG_TEST 0
#endif
</code></pre>

<p>And then use DEBUG_TEST where I used DEBUG.</p>

<p>If you insist on a string literal for the format string (probably a good idea anyway), you can also introduce things like <code>__FILE__</code>, <code>__LINE__</code> and <code>__func__</code> into the output, which can improve the diagnostics:</p>

<pre><code>#define debug_print(fmt, ...) \
        do { if (DEBUG) fprintf(stderr, ""%s:%d:%s(): "" fmt, __FILE__, \
                                __LINE__, __func__, __VA_ARGS__); } while (0)
</code></pre>

<p>This relies on string concatenation to create a bigger format string than the programmer writes.</p>

<h3>If you use a C89 compiler</h3>

<p>If you are stuck with C89 and no useful compiler extension, then there isn't a particularly clean way to handle it.  The technique I used to use was:</p>

<pre><code>#define TRACE(x) do { if (DEBUG) dbg_printf x; } while (0)
</code></pre>

<p>And then, in the code, write:</p>

<pre><code>TRACE((""message %d\n"", var));
</code></pre>

<p>The double-parentheses are crucial &mdash; and are why you have the funny notation in the macro expansion.  As before, the compiler always checks the code for syntactic validity (which is good) but the optimizer only invokes the printing function if the DEBUG macro evaluates to non-zero.</p>

<p>This does require a support function &mdash; dbg_printf() in the example &mdash; to handle things like 'stderr'.  It requires you to know how to write varargs functions, but that isn't hard:</p>

<pre><code>#include &lt;stdarg.h&gt;
#include &lt;stdio.h&gt;

void dbg_printf(const char *fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    va_end(args);
}
</code></pre>

<p>You can also use this technique in C99, of course, but the <code>__VA_ARGS__</code> technique is neater because it uses regular function notation, not the double-parentheses hack.</p>

<h3>Why is it crucial that the compiler always see the debug code?</h3>

<p>[<em>Rehashing comments made to another answer.</em>]</p>

<p>One central idea behind both the C99 and C89 implementations above is that the compiler proper always sees the debugging printf-like statements.  This is important for long-term code &mdash; code that will last a decade or two.</p>

<p>Suppose a piece of code has been mostly dormant (stable) for a number of years, but now needs to be changed.  You re-enable debugging trace - but it is frustrating to have to debug the debugging (tracing) code because it refers to variables that have been renamed or retyped, during the years of stable maintenance. If the compiler (post pre-processor) always sees the print statement, it ensures that any surrounding changes have not invalidated the diagnostics. If the compiler does not see the print statement, it cannot protect you against your own carelessness (or the carelessness of your colleagues or collaborators). See '<a href=""http://www.cs.princeton.edu/~bwk/tpop.webpage/"" rel=""noreferrer"">The Practice of Programming</a>' by Kernighan and Pike, especially Chapter 8 (see also Wikipedia on <a href=""https://en.wikipedia.org/wiki/The_Practice_of_Programming#External_links"" rel=""noreferrer"">TPOP</a>). </p>

<p>This is 'been there, done that' experience &mdash; I used essentially the technique described in other answers where the non-debug build does not see the printf-like statements for a number of years (more than a decade). But I came across the advice in TPOP (see my previous comment), and then did enable some debugging code after a number of years, and ran into problems of changed context breaking the debugging. Several times, having the printing always validated has saved me from later problems.</p>

<p>I use NDEBUG to control assertions only, and a separate macro (usually DEBUG) to control whether debug tracing is built into the program. Even when the debug tracing is built in, I frequently do not want debug output to appear unconditionally, so I have mechanism to control whether the output appears (debug levels, and instead of calling fprintf() directly, I call a debug print function that only conditionally prints so the same build of the code can print or not print based on program options).  I also have a 'multiple-subsystem' version of the code for bigger programs, so that I can have different sections of the program producing different amounts of trace - under runtime control.</p>

<p>I am advocating that for all builds, the compiler should see the diagnostic statements; however, the compiler won't generate any code for the debugging trace statements unless debug is enabled.  Basically, it means that all of your code is checked by the compiler every time you compile - whether for release or debugging.  This is a good thing!</p>

<h3>debug.h - version 1.2 (1990-05-01)</h3>

<pre><code>/*
@(#)File:            $RCSfile: debug.h,v $
@(#)Version:         $Revision: 1.2 $
@(#)Last changed:    $Date: 1990/05/01 12:55:39 $
@(#)Purpose:         Definitions for the debugging system
@(#)Author:          J Leffler
*/

#ifndef DEBUG_H
#define DEBUG_H

/* -- Macro Definitions */

#ifdef DEBUG
#define TRACE(x)    db_print x
#else
#define TRACE(x)
#endif /* DEBUG */

/* -- Declarations */

#ifdef DEBUG
extern  int     debug;
#endif

#endif  /* DEBUG_H */
</code></pre>

<h3>debug.h - version 3.6 (2008-02-11)</h3>

<pre><code>/*
@(#)File:           $RCSfile: debug.h,v $
@(#)Version:        $Revision: 3.6 $
@(#)Last changed:   $Date: 2008/02/11 06:46:37 $
@(#)Purpose:        Definitions for the debugging system
@(#)Author:         J Leffler
@(#)Copyright:      (C) JLSS 1990-93,1997-99,2003,2005,2008
@(#)Product:        :PRODUCT:
*/

#ifndef DEBUG_H
#define DEBUG_H

#ifdef HAVE_CONFIG_H
#include ""config.h""
#endif /* HAVE_CONFIG_H */

/*
** Usage:  TRACE((level, fmt, ...))
** ""level"" is the debugging level which must be operational for the output
** to appear. ""fmt"" is a printf format string. ""..."" is whatever extra
** arguments fmt requires (possibly nothing).
** The non-debug macro means that the code is validated but never called.
** -- See chapter 8 of 'The Practice of Programming', by Kernighan and Pike.
*/
#ifdef DEBUG
#define TRACE(x)    db_print x
#else
#define TRACE(x)    do { if (0) db_print x; } while (0)
#endif /* DEBUG */

#ifndef lint
#ifdef DEBUG
/* This string can't be made extern - multiple definition in general */
static const char jlss_id_debug_enabled[] = ""@(#)*** DEBUG ***"";
#endif /* DEBUG */
#ifdef MAIN_PROGRAM
const char jlss_id_debug_h[] = ""@(#)$Id: debug.h,v 3.6 2008/02/11 06:46:37 jleffler Exp $"";
#endif /* MAIN_PROGRAM */
#endif /* lint */

#include &lt;stdio.h&gt;

extern int      db_getdebug(void);
extern int      db_newindent(void);
extern int      db_oldindent(void);
extern int      db_setdebug(int level);
extern int      db_setindent(int i);
extern void     db_print(int level, const char *fmt,...);
extern void     db_setfilename(const char *fn);
extern void     db_setfileptr(FILE *fp);
extern FILE    *db_getfileptr(void);

/* Semi-private function */
extern const char *db_indent(void);

/**************************************\
** MULTIPLE DEBUGGING SUBSYSTEMS CODE **
\**************************************/

/*
** Usage:  MDTRACE((subsys, level, fmt, ...))
** ""subsys"" is the debugging system to which this statement belongs.
** The significance of the subsystems is determined by the programmer,
** except that the functions such as db_print refer to subsystem 0.
** ""level"" is the debugging level which must be operational for the
** output to appear. ""fmt"" is a printf format string. ""..."" is
** whatever extra arguments fmt requires (possibly nothing).
** The non-debug macro means that the code is validated but never called.
*/
#ifdef DEBUG
#define MDTRACE(x)  db_mdprint x
#else
#define MDTRACE(x)  do { if (0) db_mdprint x; } while (0)
#endif /* DEBUG */

extern int      db_mdgetdebug(int subsys);
extern int      db_mdparsearg(char *arg);
extern int      db_mdsetdebug(int subsys, int level);
extern void     db_mdprint(int subsys, int level, const char *fmt,...);
extern void     db_mdsubsysnames(char const * const *names);

#endif /* DEBUG_H */
</code></pre>

<h3>Single argument C99 variant</h3>

<p>Kyle Brandt asked:</p>

<blockquote>
  <p>Anyway to do this so <code>debug_print</code> still works even if there are no arguments? For example:</p>

<pre><code>    debug_print(""Foo"");
</code></pre>
</blockquote>

<p>There's one simple, old-fashioned hack:</p>

<pre><code>debug_print(""%s\n"", ""Foo"");
</code></pre>

<p>The GCC-only solution also provides support for that.</p>

<p>However, you can do it with the straight C99 system by using:</p>

<pre><code>#define debug_print(...) \
            do { if (DEBUG) fprintf(stderr, __VA_ARGS__); } while (0)
</code></pre>

<p>Compared to the first version, you lose the limited checking that requires the 'fmt' argument, which means that someone could call 'debug_print()' with no arguments.  Whether the loss of checking is a problem at all is debatable.</p>

<h3>GCC-specific Technique</h3>

<p>Some compilers may offer extensions for other ways of handling variable-length argument lists in macros.  Specifically, as first noted in the comments by <a href=""https://stackoverflow.com/users/558647/hugo-ideler"">Hugo Ideler</a>, GCC allows you to omit the comma that would normally appear after the last 'fixed' argument to the macro.  It also allows you to use <a href=""http://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html"" rel=""noreferrer""><code>##__VA_ARGS__</code></a> in the macro replacement text, which deletes the comma preceding the notation if, but only if, the previous token is a comma:</p>

<pre><code>#define debug_print(fmt, ...) \
            do { if (DEBUG) fprintf(stderr, fmt, ##__VA_ARGS__); } while (0)
</code></pre>

<p>This solution retains the benefit of requiring the format argument while accepting optional arguments after the format.</p>

<p>This technique is also supported by <a href=""https://clang.llvm.org/"" rel=""noreferrer"">Clang</a> for GCC compatibility.</p>

<hr>

<h3>Why the do-while loop?</h3>

<blockquote>
  <p>What's the purpose of the <code>do while</code> here?</p>
</blockquote>

<p>You want to be able to use the macro so it looks like a function call, which means it will be followed by a semi-colon.  Therefore, you have to package the macro body to suit.  If you use an <code>if</code> statement without the surrounding <code>do { ... } while (0)</code>, you will have:</p>

<pre><code>/* BAD - BAD - BAD */
#define debug_print(...) \
            if (DEBUG) fprintf(stderr, __VA_ARGS__)
</code></pre>

<p>Now, suppose you write:</p>

<pre><code>if (x &gt; y)
    debug_print(""x (%d) &gt; y (%d)\n"", x, y);
else
    do_something_useful(x, y);
</code></pre>

<p>Unfortunately, that indentation doesn't reflect the actual control of flow, because the preprocessor produces code equivalent to this (indented and braces added to emphasize the actual meaning):</p>

<pre><code>if (x &gt; y)
{
    if (DEBUG)
        fprintf(stderr, ""x (%d) &gt; y (%d)\n"", x, y);
    else
        do_something_useful(x, y);
}
</code></pre>

<p>The next attempt at the macro might be:</p>

<pre><code>/* BAD - BAD - BAD */
#define debug_print(...) \
            if (DEBUG) { fprintf(stderr, __VA_ARGS__); }
</code></pre>

<p>And the same code fragment now produces:</p>

<pre><code>if (x &gt; y)
    if (DEBUG)
    {
        fprintf(stderr, ""x (%d) &gt; y (%d)\n"", x, y);
    }
; // Null statement from semi-colon after macro
else
    do_something_useful(x, y);
</code></pre>

<p>And the <code>else</code> is now a syntax error.  The <code>do { ... } while(0)</code> loop avoids both these problems.</p>

<p>There's one other way of writing the macro which might work:</p>

<pre><code>/* BAD - BAD - BAD */
#define debug_print(...) \
            ((void)((DEBUG) ? fprintf(stderr, __VA_ARGS__) : 0))
</code></pre>

<p>This leaves the program fragment shown as valid.  The <code>(void)</code> cast prevents it being used in contexts where a value is required &mdash; but it could be used as the left operand of a comma operator where the <code>do { ... } while (0)</code> version cannot.  If you think you should be able to embed debug code into such expressions, you might prefer this.  If you prefer to require the debug print to act as a full statement, then the <code>do { ... } while (0)</code> version is better.  Note that if the body of the macro involved any semi-colons (roughly speaking), then you can only use the <code>do { ... } while(0)</code> notation.  It always works; the expression statement mechanism can be more difficult to apply.  You might also get warnings from the compiler with the expression form that you'd prefer to avoid; it will depend on the compiler and the flags you use.</p>

<hr>

<p><sup>
<em>TPOP was previously at <a href=""http://plan9.bell-labs.com/cm/cs/tpop"" rel=""noreferrer"">http://plan9.bell-labs.com/cm/cs/tpop</a> and <a href=""http://cm.bell-labs.com/cm/cs/tpop"" rel=""noreferrer"">http://cm.bell-labs.com/cm/cs/tpop</a> but both are now (2015-08-10) broken.</em>
</sup></p>
","1644898"
"How do I print the full value of a long string in gdb?","133831","","<p>I want to print the full length of a C-string in GDB.  By default it's being abbreviated, how do I force GDB to print the whole string?</p>
","<pre><code>set print elements 0
</code></pre>

<p><a href=""http://ftp.gnu.org/old-gnu/Manuals/gdb-5.1.1/html_node/gdb_57.html#IDX353"" rel=""noreferrer"">From the GDB manual</a>: </p>

<blockquote><code>set print elements </code><i><code>number-of-elements</code></i></blockquote>

<blockquote>
Set a limit on how many elements of an array GDB will print. If GDB is printing a large array, it stops printing after it has printed the number of elements set by the <code>set print elements</code> command. This limit also applies to the display of strings. When GDB starts, this limit is set to 200. <b>Setting <i>number-of-elements</i> to zero means that the printing is unlimited</b>.
</blockquote>
","233339"
"Convert char array to a int number in C","133714","","<p>I want to convert a char array[] like:</p>

<pre><code>char myarray[4] = {'-','1','2','3'}; //where the - means it is negative
</code></pre>

<p>So it should be the integer: -1234
using <strong>standard</strong> libaries in <strong>C</strong>. I could not find any elegant way to do that.</p>

<p>I can append the '\0' for sure.</p>
","<p>I personally don't like <code>atoi</code> function. I would suggest <code>sscanf</code>:</p>

<pre><code>char myarray[5] = {'-', '1', '2', '3', '\0'};
int i;
sscanf(myarray, ""%d"", &amp;i);
</code></pre>

<p>It's very standard, it's in the <code>stdio.h</code> library :)</p>

<p>And in my opinion, it allows you much more freedom than <code>atoi</code>, arbitrary formatting of your number-string, and probably also allows for non-number characters at the end.</p>

<p><strong>EDIT</strong>
I just found this wonderful <a href=""https://stackoverflow.com/questions/3420629/convert-string-to-integer-sscanf-or-atoi"">question</a> here on the site that explains and compares 3 different ways to do it - <code>atoi</code>, <code>sscanf</code> and <code>strtol</code>. Also, there is a nice more-detailed insight into <code>sscanf</code> (actually, the whole family of <code>*scanf</code> functions).</p>

<p><strong>EDIT2</strong>
Looks like it's not just me personally disliking the <code>atoi</code> function. Here's a <a href=""https://stackoverflow.com/a/1488584/884412"">link</a> to an answer explaining that the <code>atoi</code> function is deprecated and should not be used in newer code.</p>
","10204663"
"How to set socket timeout in C when making multiple connections?","132909","","<p>I'm writing a simple program that makes multiple connections to different servers for status check. All these connections are constructed on-demand; up to 10 connections can be created simultaneously. I don't like the idea of one-thread-per-socket, so I made all these client sockets Non-Blocking, and throw them into a select() pool.</p>

<p>It worked great, until my client complained that the waiting time is too long before they can get the error report when target servers stopped responding.</p>

<p>I've checked several topics in the forum. Some had suggested that one can use alarm() signal or set a timeout in the select() function call. But I'm dealing with multiple connections, instead of one. When a process wide timeout signal happens, I've no way to distinguish the timeout connection among all the other connections.</p>

<p>Is there anyway to change the system-default timeout duration ? </p>
","<p>You can use the SO_RCVTIMEO and SO_SNDTIMEO socket options to set timeouts for any socket operations, like so:</p>

<pre><code>    struct timeval timeout;      
    timeout.tv_sec = 10;
    timeout.tv_usec = 0;

    if (setsockopt (sockfd, SOL_SOCKET, SO_RCVTIMEO, (char *)&amp;timeout,
                sizeof(timeout)) &lt; 0)
        error(""setsockopt failed\n"");

    if (setsockopt (sockfd, SOL_SOCKET, SO_SNDTIMEO, (char *)&amp;timeout,
                sizeof(timeout)) &lt; 0)
        error(""setsockopt failed\n"");
</code></pre>

<p><strong>Edit:</strong> from the <code>setsockopt</code> <a href=""http://www.freebsd.org/cgi/man.cgi?query=setsockopt&amp;sektion=2"" rel=""noreferrer"">man page</a>:</p>

<p><code>SO_SNDTIMEO</code> is an option to set a timeout value for output operations. It accepts a struct timeval parameter with the number of seconds and microseconds used to limit waits for output operations to complete.  If a send operation has blocked for this much time, it returns with a partial count or with the error EWOULDBLOCK if no data were sent.  In the current implementation, this timer is restarted each time additional data are delivered to the protocol, implying that the limit applies to output portions ranging in size from the low-water mark to the high-water mark for output.</p>

<p><code>SO_RCVTIMEO</code> is an option to set a timeout value for input operations. It accepts a struct timeval parameter with the number of seconds and microseconds used to limit waits for input operations to complete. In the current implementation, this timer is restarted each time additional data are received by the protocol, and thus the limit is in effect an inactivity timer. If a receive operation has been blocked for this much time without receiving additional data, it returns with a short count or with the error EWOULDBLOCK if no data were received. The struct timeval parameter must represent a positive time interval; otherwise, setsockopt() returns with the error EDOM.</p>
","4182564"
"Default values in a C Struct","132886","","<p>I have a data structure like this:</p>

<pre>
    struct foo {
        int id;
        int route;
        int backup_route;
        int current_route;
    }
</pre>

<p>and a function called update() that is used to request changes in it. </p>

<pre>
  update(42, dont_care, dont_care, new_route);
</pre>

<p>this is really long and if I add something to the structure I have to add a 'dont_care' to EVERY call to update( ... ). 
<p>
I am thinking about passing it a struct instead but filling in the struct with 'dont_care' beforehand is even more tedious than just spelling it out in the function call. Can I create the struct somewhere with default values of dont care and just set the fields I care about after I declare it as a local variable?</p>

<pre>
    struct foo bar = { .id = 42, .current_route = new_route };
    update(&bar);
</pre>

<p>What is the most elegant way to pass just the information I wish to express to the update function? </p>

<p>and I want everything else to default to -1 (the secret code for 'dont care')</p>
","<p>While macros and/or functions (as already suggested) will work (and might have other positive effects (i.e. debug hooks)), they are more complex than needed. The simplest and possibly most elegant solution is to just define a constant that you use for variable initialisation:</p>

<pre><code>const struct foo FOO_DONT_CARE = { // or maybe FOO_DEFAULT or something
    dont_care, dont_care, dont_care, dont_care
};
...
struct foo bar = FOO_DONT_CARE;
bar.id = 42;
bar.current_route = new_route;
update(&amp;bar);
</code></pre>

<p>This code has virtually no mental overhead of understanding the indirection, and it is very clear which fields in <code>bar</code> you set explicitly while (safely) ignoring those you do not set.</p>
","749690"
"How to compile .c file with OpenSSL includes?","132245","","<p>I am trying to compile a small .c file that has the following includes:</p>

<pre><code>#include &lt;openssl/ssl.h&gt;
#include &lt;openssl/rsa.h&gt;
#include &lt;openssl/x509.h&gt;
#include &lt;openssl/evp.h&gt;
</code></pre>

<p>In the same folder where i have the .c file I have a /openssl with all those files (and more), also in synaptic package manager I see OpenSSL installed, I am trying to compile with this:</p>

<pre><code>gcc -o Opentest Opentest.c -lcrypto
</code></pre>

<p>but I always get the errors:</p>

<pre><code>error: openssl/ssl.h: No such file or directory
error: openssl/rsa.h: No such file or directory
error: openssl/x509.h: No such file or directory
error: openssl/evp.h: No such file or directory
</code></pre>

<p>The file I want to compile is only a .c file, doesnt have Makefile or ./configure.</p>

<p>I already tried:</p>

<pre><code>env CFLAGS=-I/path/to/openssl/
</code></pre>

<p>and tried to compile again but i get the same errors.</p>

<p>What should I do in order to compile with openssl includes?</p>
","<p>Your include paths indicate that you should be compiling against the <em>system's</em> OpenSSL installation.  You shouldn't have the <code>.h</code> files in your package directory - it should be picking them up from <code>/usr/include/openssl</code>.</p>

<p>The plain OpenSSL package (<code>libssl</code>) doesn't include the <code>.h</code> files - you need to install the development package as well (<code>libssl-dev</code>).</p>
","3369403"
"Pointers in C: when to use the ampersand and the asterisk?","132030","","<p>I'm just starting out with pointers, and I'm slightly confused. I know <code>&amp;</code> means the address of a variable and that <code>*</code> can be used in front of a pointer variable to get the value of the object that is pointed to by the pointer. But things work differently when you're working with arrays, strings or when you're calling functions with a pointer copy of a variable. It's difficult to see a pattern of logic inside all of this.</p>

<p>When should I use <code>&amp;</code> and <code>*</code>?</p>
","<p>You have pointers and values:</p>

<pre><code>int* p; // variable p is pointer to integer type
int i; // integer value
</code></pre>

<p>You turn a pointer into a value with <code>*</code>:</p>

<pre><code>int i2 = *p; // integer i2 is assigned with integer value that pointer p is pointing to
</code></pre>

<p>You turn a value into a pointer with <code>&amp;</code>:</p>

<pre><code>int* p2 = &amp;i; // pointer p2 will point to the address of integer i
</code></pre>

<p>Edit:
In the case of arrays, they are treated very much like pointers.  If you think of them as pointers, you'll be using <code>*</code> to get at the values inside of them as explained above, but there is also another, more common way using the <code>[]</code> operator:</p>

<pre><code>int a[2];  // array of integers
int i = *a; // the value of the first element of a
int i2 = a[0]; // another way to get the first element
</code></pre>

<p>To get the second element:</p>

<pre><code>int a[2]; // array
int i = *(a + 1); // the value of the second element
int i2 = a[1]; // the value of the second element
</code></pre>

<p>So the <code>[]</code> indexing operator is a special form of the <code>*</code> operator, and it works like this:</p>

<pre><code>a[i] == *(a + i);  // these two statements are the same thing
</code></pre>
","2094715"
"Why does ENOENT mean ""No such file or directory""?","132012","","<p>What is ""ENT"" short for?  </p>

<p>The error ""No such file or directory"" should just be named by ""ENOFILE"".</p>

<p>Is there any story or reason?</p>
","<p>It's an abbreviation of Error NO ENTry (or Error NO ENTity), and can actually be used for more than files/directories.</p>
","19902850"
"How to increment a pointer address and pointer's value?","131557","","<p>Let us assume,</p>

<pre><code>int *p;
int a = 100;
p = &amp;a;
</code></pre>

<p>What will the following code will do actually and how?    </p>

<pre><code>p++;
++p;
++*p;
++(*p);
++*(p);
*p++;
(*p)++;
*(p)++;
*++p;
*(++p);
</code></pre>

<p>I know, this is kind of messy in terms of coding, but I want to know what will actually happen when we code like this. </p>

<p>Note : Lets assume that the address of <code>a=5120300</code>, it is stored in pointer <code>p</code> whose address is <code>3560200</code>. Now, what will be the value of <code>p &amp; a</code> after the execution of each statement?</p>
","<p>First, the * operator takes precedence over the ++ operator, and the () operators take precedence over everything else. EDIT(things are more complicated than that, see bottom edit)</p>

<p>Second, the ++number operator is the same as the number++ operator if you're not assigning them to anything. The difference is number++ returns number and then increments number, and ++number increments first and then returns it.</p>

<p>Third, by increasing the value of a pointer, you're incrementing it by the sizeof its contents, that is you're incrementing it as if you were iterating in an array.</p>

<p>So, to sum it all up:</p>

<pre><code>ptr++;    // Pointer moves to the next int position (as if it was an array)
++ptr;    // Pointer moves to the next int position (as if it was an array)
++*ptr;   // The value of ptr is incremented
++(*ptr); // The value of ptr is incremented
++*(ptr); // The value of ptr is incremented
*ptr++;   // Pointer moves to the next int position (as if it was an array). But returns the old content
(*ptr)++; // The value of ptr is incremented
*(ptr)++; // Pointer moves to the next int position (as if it was an array). But returns the old content
*++ptr;   // Pointer moves to the next int position, and then get's accessed, with your code, segfault
*(++ptr); // Pointer moves to the next int position, and then get's accessed, with your code, segfault
</code></pre>

<p>As there are a lot of cases in here, I might have made some mistake, please correct me if I'm wrong.</p>

<p>EDIT:</p>

<p>So I was wrong, the precedence is a little more complicated than what I wrote, view it here:
<a href=""http://en.cppreference.com/w/cpp/language/operator_precedence"">http://en.cppreference.com/w/cpp/language/operator_precedence</a></p>
","8208106"
"Flushing buffers in C","131455","","<p>Should <code>fflush()</code> not be used to flush a buffer even if it is an output stream?</p>

<p>What is it useful for? How do we flush a buffer in general?</p>
","<p>I've never heard not to flush the output buffer, and I would be interested to hear your source on that. Flushing the output buffers:</p>

<pre><code>printf(""Buffered, will be flushed"");
fflush(stdout); // Prints to screen or whatever your standard out is
</code></pre>

<p>or</p>

<pre><code>fprintf(fd, ""Buffered, will be flushed"");
fflush(fd);  //Prints to a file
</code></pre>

<p>Can be a very helpful technique. Why would you want to flush an output buffer? Usually when I do it, it's because the code is crashing and I'm trying to debug something. The standard buffer will not print everytime you call <code>printf()</code> it waits until it's full then dumps a bunch at once. So if you're trying to check if you're making it to a function call before a crash, it's helpful to <code>printf</code> something like ""got here!"", and sometimes the buffer hasn't been flushed before the crash happens and you can't tell how far you've really gotten.</p>

<p>Another time that it's helpful, is in multi-process or multi-thread code. Again, the buffer doesn't always flush on a call to a <code>printf()</code>, so if you want to know the true order of execution of multiple processes you should fflush the buffer after every print.</p>

<p>I make a habit to do it, it saves me a lot of headache in debugging. The only downside I can think of to doing so is that <code>printf()</code> is an expensive operation (which is why it doesn't by default flush the buffer).</p>

<hr>

<p>As far as flushing the input buffer (<code>stdin</code>), you should not do that. Flushing <code>stdin</code> is undefined behavior according to the C11 standard §7.21.5.2 part 2:</p>

<blockquote>
  <p>If stream points to an output stream ... the fflush function causes any unwritten data for that stream ... to be written to the file; otherwise, the behavior is undefined.</p>
</blockquote>

<p>On some systems, Linux being one as you can see in the man page for <a href=""http://linux.die.net/man/3/fflush""><code>fflush()</code></a>, there's a defined behavior but it's system dependent so your code will not be portable.</p>

<p>Now if you're worried about garbage ""stuck"" in the input buffer you can use <code>fpurge()</code> on that.
See <a href=""http://www.manpagez.com/man/3/fpurge/"">here</a> for more on <code>fflush()</code> and <code>fpurge()</code></p>
","12450125"
"Reversing a string in C","131318","","<p>I have developed a reverse-string program. I am wondering if there is a better way to do this, and if my code has any potential problems. I am looking to practice some advanced features of C. </p>

<pre><code>char* reverse_string(char *str)
{
    char temp;
    size_t len = strlen(str) - 1;
    size_t i;
    size_t k = len;

    for(i = 0; i &lt; len; i++)
    {
        temp = str[k];
        str[k] = str[i];
        str[i] = temp;
        k--;

        /* As 2 characters are changing place for each cycle of the loop
           only traverse half the array of characters */
        if(k == (len / 2))
        {
            break;
        }
    }
}
</code></pre>
","<p>If you want to practice advanced features of C, how about pointers?
We can toss in macros and xor-swap for fun too!</p>

<pre><code>#include &lt;string.h&gt; // for strlen()

// reverse the given null-terminated string in place
void inplace_reverse(char * str)
{
  if (str)
  {
    char * end = str + strlen(str) - 1;

    // swap the values in the two given variables
    // XXX: fails when a and b refer to same memory location
#   define XOR_SWAP(a,b) do\
    {\
      a ^= b;\
      b ^= a;\
      a ^= b;\
    } while (0)

    // walk inwards from both ends of the string, 
    // swapping until we get to the middle
    while (str &lt; end)
    {
      XOR_SWAP(*str, *end);
      str++;
      end--;
    }
#   undef XOR_SWAP
  }
}
</code></pre>

<p>A <strong>pointer</strong> (e.g. <code>char *</code>, read from right-to-left as a <em>pointer to a <code>char</code></em>) is a data type in C that is used
to refer to location in memory of another value.  In this case,
the location where a <code>char</code> is stored.  We can <em>dereference</em>
pointers by prefixing them with an <code>*</code>, which gives us the value
stored at that location.  So the value stored at <code>str</code> is <code>*str</code>.</p>

<p>We can do simple arithmetic with pointers.  When we increment (or decrement)
a pointer, we simply move it to refer to the next (or previous)
memory location for that type of value.  Incrementing pointers of
different types may move the pointer by a different number of
bytes because different values have different byte sizes in C.</p>

<p>Here, we use one pointer to refer to the first unprocessed
<code>char</code> of the string (<code>str</code>) and another to refer to the last (<code>end</code>).
We swap their values (<code>*str</code> and <code>*end</code>), and move the pointers
inwards to the middle of the string.  Once <code>str &gt;= end</code>, either
they both point to the same <code>char</code>, which means our original string had an
odd length (and the middle <code>char</code> doesn't need to be reversed), or
we've processed everything.</p>

<p>To do the swapping, I've defined a <strong>macro</strong>.  Macros are text substitution
done by the C preprocessor.  They are very different from functions,
and it's important to know the difference.  When you call a function,
the function operates on a copy of the values you give it.  When you call
a macro, it simply does a textual substitution - so the arguments you give
it are used directly.</p>

<p>Since I only used the <code>XOR_SWAP</code> macro once, it was probably overkill to define it,
but it made more clear what I was doing.  After the C preprocessor expands the macro,
the while loop looks like this:</p>

<pre><code>    while (str &lt; end)
    {
      do { *str ^= *end; *end ^= *str; *str ^= *end; } while (0);
      str++;
      end--;
    }
</code></pre>

<p>Note that the macro arguments show up once for each time they're used in the 
macro definition.   This can be very useful - but can also break your code
if used incorrectly.  For example, if I had compressed the increment/decrement
instructions and the macro call into a single line, like</p>

<pre><code>      XOR_SWAP(*str++, *end--);
</code></pre>

<p>Then this would expand to</p>

<pre><code>      do { *str++ ^= *end--; *end-- ^= *str++; *str++ ^= *end--; } while (0);
</code></pre>

<p>Which has <em>triple</em> the increment/decrement operations, and doesn't actually
do the swap it's supposed to do.</p>

<p>While we're on the subject, you should know what <strong>xor</strong> (<code>^</code>) means.  It's a basic
arithmetic operation - like addition, subtraction, multiplication, division, except
it's not usually taught in elementary school.  It combines two integers bit by bit
- like addition, but we don't care about the carry-overs.  <code>1^1 = 0</code>, <code>1^0 = 1</code>,
<code>0^1 = 1</code>, <code>0^0 = 0</code>.</p>

<p>A well known trick is to use xor to swap two values.  This works because of three basic
properties of xor: <code>x ^ 0 = x</code>, <code>x ^ x = 0</code> and <code>x ^ y = y ^ x</code> for all values <code>x</code> and <code>y</code>.  So say we have two
variables <code>a</code> and <code>b</code> that are initially storing two values
<code>v<sub>a</sub></code> and <code>v<sub>b</sub></code>.</p>

<pre>
  // initially:
  // a == v<sub>a</sub>
  // b == v<sub>b</sub>
  a ^= b;
  // now: a == v<sub>a</sub> ^ v<sub>b</sub>
  b ^= a;
  // now: b == v<sub>b</sub> ^ (v<sub>a</sub> ^ v<sub>b</sub>)
  //        == v<sub>a</sub> ^ (v<sub>b</sub> ^ v<sub>b</sub>)
  //        == v<sub>a</sub> ^ 0
  //        == v<sub>a</sub>
  a ^= b;
  // now: a == (v<sub>a</sub> ^ v<sub>b</sub>) ^ v<sub>a</sub>
  //        == (v<sub>a</sub> ^ v<sub>a</sub>) ^ v<sub>b</sub>
  //        == 0 ^ v<sub>b</sub>
  //        == v<sub>b</sub>
</pre>

<p>So the values are swapped.  This does have one bug - when <code>a</code> and <code>b</code> are the same variable:</p>

<pre>
  // initially:
  // a == v<sub>a</sub>
  a ^= a;
  // now: a == v<sub>a</sub> ^ v<sub>a</sub>
  //        == 0
  a ^= a;
  // now: a == 0 ^ 0
  //        == 0
  a ^= a;
  // now: a == 0 ^ 0
  //        == 0
</pre>

<p>Since we <code>str &lt; end</code>, this never happens in the above code, so we're okay.</p>

<p>While we're concerned about correctness we should check our edge cases.  The <code>if (str)</code> line should make sure we weren't given a <code>NULL</code> pointer for string.  What about the empty string <code>""""</code>?  Well <code>strlen("""") == 0</code>, so we'll initialize <code>end</code> as <code>str - 1</code>, which means that the <code>while (str &lt; end)</code> condition is never true, so we don't do anything.  Which is correct.</p>

<p>There's a bunch of C to explore.  Have fun with it!</p>

<p><strong>Update:</strong> <a href=""https://stackoverflow.com/users/92202/mmw"">mmw</a> brings up a good point, which is you do have to be slightly careful how you invoke this, as it does operate in-place.</p>

<pre><code> char stack_string[] = ""This string is copied onto the stack."";
 inplace_reverse(stack_string);
</code></pre>

<p>This works fine, since <code>stack_string</code> is an array, whose contents are initialized to the given string constant.  However</p>

<pre><code> char * string_literal = ""This string is part of the executable."";
 inplace_reverse(string_literal);
</code></pre>

<p>Will cause your code to flame and die at runtime.  That's because <code>string_literal</code> merely points to the string that is stored as part of your executable - which is normally memory that you are not allowed to edit by the OS.  In a happier world, your compiler would know this, and cough an error when you tried to compile, telling you that <code>string_literal</code> needs to be of type <code>char const *</code> since you can't modify the contents.  However, this is not the world my compiler lives in.</p>

<p>There are some hacks you could try to make sure that some memory is on the stack or in the heap (and is therefore editable), but they're not necessarily portable, and it could be pretty ugly.  However, I'm more than happy to throw responsibility for this to the function invoker.  I've told them that this function does in place memory manipulation, it's their responsibility to give me an argument that allows that.</p>
","784538"
"Why should you use strncpy instead of strcpy?","131051","","<p><strong>Edit: I've added the source for the example.</strong></p>

<p>I came across <a href=""http://publib.boulder.ibm.com/infocenter/iadthelp/v7r0/index.jsp?topic=/com.ibm.etools.iseries.langref.doc/rzan5mst269.htm"" rel=""noreferrer"">this example</a>:</p>

<pre><code>char source[MAX] = ""123456789"";
char source1[MAX] = ""123456789"";
char destination[MAX] = ""abcdefg"";
char destination1[MAX] = ""abcdefg"";
char *return_string;
int index = 5;

/* This is how strcpy works */
printf(""destination is originally = '%s'\n"", destination);
return_string = strcpy(destination, source);
printf(""after strcpy, dest becomes '%s'\n\n"", destination);

/* This is how strncpy works */
printf( ""destination1 is originally = '%s'\n"", destination1 );
return_string = strncpy( destination1, source1, index );
printf( ""After strncpy, destination1 becomes '%s'\n"", destination1 );
</code></pre>

<p>Which produced this output:</p>

<pre>destination is originally = 'abcdefg'
After strcpy, destination becomes '123456789'

destination1 is originally = 'abcdefg'
After strncpy, destination1 becomes '12345fg'
</pre>

<p>Which makes me wonder why anyone would want this effect. It looks like it would be confusing. This program makes me think you could basically copy over someone's name (eg. Tom Brokaw) with Tom Bro763.  </p>

<p><strong>What are the advantages of using</strong> <code>strncpy()</code> <strong>over</strong> <code>strcpy()</code>?</p>
","<p><code>strncpy</code> combats buffer overflow by requiring you to put a length in it. <code>strcpy</code> depends on a trailing <code>\0</code>, which may not always occur.</p>

<p>Secondly, why you chose to only copy 5 characters on 7 character string is beyond me, but it's producing expected behavior. It's only copying over the first <code>n</code> characters, where <code>n</code> is the third argument.</p>

<p>The <code>n</code> functions are all used as defensive coding against buffer overflows. Please use them in lieu of older functions, such as <code>strcpy</code>.</p>
","1258556"
"Examples of good gotos in C or C++","130702","","<p>In this thread, we look at examples of good uses of <code>goto</code> in C or C++.  It's inspired by <a href=""https://stackoverflow.com/questions/244445/best-refactoring-for-the-dreaded-while-true-loop#244644"">an answer</a> which people voted up because they thought I was joking.</p>

<p>Summary (label changed from original to make intent even clearer):</p>

<pre><code>infinite_loop:

    // code goes here

goto infinite_loop;
</code></pre>

<p>Why it's better than the alternatives:</p>

<ul>
<li>It's specific.  <code>goto</code> is the
language construct which causes an
unconditional branch.  Alternatives
depend on using structures
supporting conditional branches,
with a degenerate always-true
condition.</li>
<li>The label documents the intent
without extra comments.</li>
<li>The reader doesn't have to scan the
intervening code for early <code>break</code>s
(although it's still possible for an
unprincipled hacker to simulate
<code>continue</code> with an early <code>goto</code>).</li>
</ul>

<p><strong>Rules:</strong></p>

<ul>
<li>Pretend that the gotophobes didn't
win.  It's understood that the above
can't be used in real code because
it goes against established idiom.</li>
<li>Assume that we have all heard of
'Goto considered harmful' and know
that goto can be used to write
spaghetti code.</li>
<li>If you disagree with an example,
criticize it on technical merit
alone ('Because people don't like
goto' is not a technical reason).</li>
</ul>

<p>Let's see if we can talk about this like grown ups.</p>

<p><strong>Edit</strong></p>

<p>This question seems finished now.  It generated some high quality answers.  Thanks to everyone,
 especially those who took my little loop example seriously.  Most skeptics were concerned
 by the lack of block scope.  As @quinmars pointed out in a comment, you can always put braces around the 
loop body.  I note in passing that <code>for(;;)</code> and <code>while(true)</code> don't give you the braces 
for free either (and omitting them can cause vexing bugs).  Anyway, I won't waste any more
of your brain power on this trifle - I can live with the harmless and idiomatic <code>for(;;)</code> and <code>while(true)</code> (just as well if I want to keep my job).  </p>

<p>Considering the other responses, I see that many people view <code>goto</code> as something you always 
have to rewrite in another way.  Of course you can avoid a <code>goto</code> by introducing a loop,
 an extra flag, a stack of nested <code>if</code>s, or whatever, but why not consider whether <code>goto</code> is 
perhaps the best tool for the job? Put another way, how much ugliness are people prepared to endure to avoid using a built-in language feature for its intended purpose? My take is that
even adding a flag is too high a price to pay.  I like my variables to represent things in 
the problem or solution domains. 'Solely to avoid a <code>goto</code>' doesn't cut it.</p>

<p>I'll accept the first answer which gave the C pattern for branching to a cleanup block. IMO, this makes the strongest case for a <code>goto</code> of all the posted answers, certainly 
if you measure it by the contortions a hater has to go through to avoid it.</p>
","<p>Heres one trick I've heard of people using. I've never seen it in the wild though. And it only applies to C because C++ has RAII to do this more idiomatically. </p>

<pre><code>void foo()
{
    if (!doA())
        goto exit;
    if (!doB())
        goto cleanupA;
    if (!doC())
        goto cleanupB;

    /* everything has succeeded */
    return;

cleanupB:
    undoB();
cleanupA:
    undoA();
exit:
    return;
}
</code></pre>
","245761"
"The real difference between ""int"" and ""unsigned int""","130231","","<p><strong>int</strong>:</p>

<p>The 32-bit int data type can hold integer values in the range of
 −2,147,483,648 to 2,147,483,647. You may also refer to this data type
 as signed int or signed.</p>

<p><strong>unsigned int</strong> : </p>

<p>The 32-bit unsigned int data
 type can hold integer values in the range of 0 to 4,294,967,295. You
 may also refer to this data type simply as unsigned.</p>

<p>Ok, but, in practice:</p>

<pre><code>int x = 0xFFFFFFFF;
unsigned int y = 0xFFFFFFFF;
printf(""%d, %d, %u, %u"", x, y, x, y);
// -1, -1, 4294967295, 4294967295
</code></pre>

<p>no difference, O.o. I'm a bit confused.</p>
","<p>Hehe. You have an implicit cast here, because you're telling <code>printf</code> what type to expect.</p>

<p>Try this on for size instead:</p>

<pre><code>unsigned int x = 0xFFFFFFFF;
int y = 0xFFFFFFFF;

if (x &lt; 0)
    printf(""one\n"");
else
    printf(""two\n"");
if (y &lt; 0)
    printf(""three\n"");
else
    printf(""four\n"");
</code></pre>
","9045458"
"ld.exe: cannot open output file ... : Permission denied","130024","","<p>I recently installed CodeBlocks with mingw32 on Windows 7 Ultimate 32bit in order to dust off my c skills, but this problem has me somewhat stumped.</p>

<p>I decided to fire off a short Fibonacci generator to make sure my setup was working, but I ran into a hurdle. </p>

<p>The program compiles, links and whatnot like a charm and I get a corresponding executable which runs as expected.</p>

<p>The problems occur if I try to compile again, then I get the following:</p>

<pre><code>c:/codeblocks/mingw/bin/../lib/gcc/mingw32/4.4.1/../../../../mingw32/bin/ld.exe: cannot open output file bin\Debug\Fibonacci.exe: Permission denied
</code></pre>

<p>I can't even edit the permissions of the generated executable.</p>

<p>I've checked the usual suspects:</p>

<ul>
<li>Executable is verily not running.</li>
<li>Path to executable is read/writable to mingw32 (otherwise it wouldn't be able to build in the first place)</li>
<li>I'm not running cygwin in any shape or form.</li>
</ul>

<p>And now for the funny bit: Usually after a few minutes, any executables generated by mingw32 which are displaying this Access Denied behaviour will automatically vanish without any intervention from me.</p>

<p>I've googled this somewhat, but most of the other results were either vague or inapplicable.</p>

<p>I wonder whether there is some Windows 7 security setting playing havoc with my .exe's, but I'm not that knowledgeable about Win 7 as to know where to begin searching.</p>

<p>Any one have any ideas?</p>
","<p>I had exactly the same problem right after switching off some (in my opinion unneccessary) windows services. It turned out that when I switched ON again the ""Application Experience"" everything resumed working fine.</p>

<p>May be you simply have to turn on this service? To switch ON Application Experience:</p>

<ol>
<li><p>Click the Windows start button, lower left.</p></li>
<li><p>In the box labeled ""Search programs and files"" type services.msc and click the search button. A new window with title ""Services"" opens.</p></li>
<li><p>Right click on ""Application Experience"" line and select ""Properties"" from popup menu</p></li>
<li><p>Change Starup type to ""Automatic (delayed start)""</p></li>
<li><p>Restart computer</p></li>
</ol>

<p>Application Experiences should prevent the problem in the future.</p>
","7904469"
"What is the best IDE for C Development / Why use Emacs over an IDE?","129879","","<p>so as per one of my previous questions, I'm brushing up on my C skills.</p>

<p><strong>My question is, what do people use for developing C?</strong></p>

<p>Lots of people use Emacs, and have done so for years, but <strong>is it better to learn emacs than just use an IDE</strong> such as Geany or KDevelop?</p>

<p>Would also be interested to hear from those <strong>still using emacs</strong>, and <strong>why they use it</strong> over other apps?</p>

<p>Please note that I'm only really interested in the <strong>free IDEs / editors</strong>.</p>

<p><strong>EDIT:</strong></p>

<p>Thanks for posting links which answer some of my questions, but I guess what I'm really wondering about is:</p>

<p>Whether learning to edit using emacs / vim and compiling / debugging using the gcc-toolchain is worth it instead of just using an IDE, and why?</p>

<p>What are peoples reasons for not migrating to an IDE?</p>

<p>Has anyone moved from terminal-centric development to IDE development, and why did they move?</p>
","<p>I started off by using IDEs, Microsoft or not. Then, while working on QNX some long time ago, I was forced to do with a text editor + compiler/linker. Now I prefer this simple combination––a syntax highlighting editor + C compiler and linker cli + make––to any IDEs, even if environment allows for them.</p>

<p>The reasons are, for me:</p>

<ol>
<li><p>it's everywhere. If you program in C, you do have the compiler, and usually you can get yourself an editor. The first thing I do––I get myself nedit on Linux or Notepad++ on Windows. I would go with vi, but GUI editors provide for a better fonts, and that is important when you look at code all day</p></li>
<li><p>you can program remotely, via ssh, when you need to. And it does help a lot sometimes to be able to ssh into the target and do some quick things there</p></li>
<li><p>it keeps me close to CLI, preferably UNIX/Linux CLI. So all the commands are on my fingertips, and when I need them I don't have to go read a reference book. And UNIX CLI can do things IDEs often can't––because their developers didn't think you'd need them</p></li>
<li><p>most importantly, it is very much like seeing the Matrix in raw code. I operate files, so I'm forced to keep them manageable. I'm finding things in my code manually, which makes me keep it simple and organized. I do Config Management explicitly, so I know when I'm synced and how. I know my Makefiles because I write them, and they only do what I tell them to</p>

<p>(if you wonder if that works in ""really big projects""––it does work, and the bigger the project the more performance it gains me)</p></li>
<li><p>when people ask me to look at their code, I don't have to learn the IDE they use</p></li>
</ol>
","618512"
"How to get the current time in milliseconds in C Programming","129874","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/361363/how-to-measure-time-in-milliseconds-using-ansi-c"">How to measure time in milliseconds using ANSI C?</a><br>
  <a href=""https://stackoverflow.com/questions/3729169/how-can-i-get-the-windows-system-time-with-millisecond-resolution"">How can I get the Windows system time with millisecond resolution?</a>  </p>
</blockquote>



<p>We want to calculate the time which a player have taken to finish the game.
But with time.h we could only calculate in seconds. but that is not exact. Is it possible to get the time in milliseconds? 
and what is the %? to printf?</p>
","<p>quick answer</p>

<pre><code>#include&lt;stdio.h&gt;   
#include&lt;time.h&gt;   

int main()   
{   
    clock_t t1, t2;  
    t1 = clock();   
    int i;
    for(i = 0; i &lt; 1000000; i++)   
    {   
        int x = 90;  
    }   

    t2 = clock();   

    float diff = ((float)(t2 - t1) / 1000000.0F ) * 1000;   
    printf(""%f"",diff);   

    return 0;   
}
</code></pre>
","8558645"
"Open source PDF library for C/C++ application?","129828","","<p>I want to be able to generate PDF ouput from my (native) C++ Windows application. Are there any free/open source libraries available to do this?</p>

<p>I looked at the answers to <a href=""https://stackoverflow.com/questions/177/how-do-i-programmatically-create-a-pdf-in-my-net-application"">this question</a>, but they mostly relate to .Net.</p>
","<p><a href=""https://github.com/libharu/libharu"" rel=""noreferrer"">LibHaru</a></p>

<blockquote>
  <p>Haru is a free, cross platform,
  open-sourced software library for
  generating PDF written in ANSI-C. It
  can work as both a static-library (.a,
  .lib) and a shared-library (.so,
  .dll).</p>
</blockquote>

<p>Didn't try it myself, but maybe it can help you</p>
","58737"
"Why isn't sizeof for a struct equal to the sum of sizeof of each member?","129392","","<p>Why does the 'sizeof' operator return a size larger for a structure than the total sizes of the structure's members?</p>
","<p>This is because of padding added to satisfy alignment constraints. <a href=""http://en.wikipedia.org/wiki/Data_structure_alignment"" rel=""noreferrer"">Data structure alignment</a> impacts both performance and correctness of programs:</p>

<ul>
<li>Mis-aligned access might be a hard error (often <code>SIGBUS</code>).</li>
<li>Mis-aligned access might be a soft error.

<ul>
<li>Either corrected in hardware, for a modest performance-degradation.</li>
<li>Or corrected by emulation in software, for a severe performance-degradation.</li>
<li>In addition, atomicity and other concurrency-guarantees might be broken, leading to subtle errors.</li>
</ul></li>
</ul>

<p>Here's an example using typical settings for an x86 processor (all used 32 and 64 bit modes):</p>

<pre><code>struct X
{
    short s; /* 2 bytes */
             /* 2 padding bytes */
    int   i; /* 4 bytes */
    char  c; /* 1 byte */
             /* 3 padding bytes */
};

struct Y
{
    int   i; /* 4 bytes */
    char  c; /* 1 byte */
             /* 1 padding byte */
    short s; /* 2 bytes */
};

struct Z
{
    int   i; /* 4 bytes */
    short s; /* 2 bytes */
    char  c; /* 1 byte */
             /* 1 padding byte */
};

const int sizeX = sizeof(struct X); /* = 12 */
const int sizeY = sizeof(struct Y); /* = 8 */
const int sizeZ = sizeof(struct Z); /* = 8 */
</code></pre>

<p>One can minimize the size of structures by sorting members by alignment (sorting by size suffices for that in basic types) (like structure <code>Z</code> in the example above).</p>

<p>IMPORTANT NOTE: Both the C and C++ standards state that structure alignment is implementation-defined.  Therefore each compiler may choose to align data differently, resulting in different and incompatible data layouts.  For this reason, when dealing with libraries that will be used by different compilers, it is important to understand how the compilers align data.  Some compilers have command-line settings and/or special <code>#pragma</code> statements to change the structure alignment settings.</p>
","119128"
"How to remove the character at a given index from a string in C?","129071","","<p>How do I remove a character from a string?  </p>

<p>If I have the string <code>""abcdef""</code> and I want to remove <code>""b""</code> how do I do that?</p>

<p>Removing the <strong>first</strong> character is easy with this code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int main()
{
   char word[] = ""abcdef"";
   char word2[10];

   strcpy(word2,&amp;word[1]);

   printf(""%s\n"", word2);

   return 0;
}
</code></pre>

<p>and</p>

<pre><code>strncpy(word2,word,strlen(word)-1);
</code></pre>

<p>will give me the string without the <strong>last</strong> character, but I still didn't figure out how to remove a char in the <strong>middle</strong> of a string.</p>
","<p><a href=""http://home.fhtw-berlin.de/~junghans/cref/MAN/memmove.htm"" rel=""noreferrer"">Memmove</a> can handle overlapping areas, I would try something like that (not tested, maybe +-1 issue)</p>

<pre><code>char word[] = ""abcdef"";  
int idxToDel = 2; 
memmove(&amp;word[idxToDel], &amp;word[idxToDel + 1], strlen(word) - idxToDel);
</code></pre>

<p>Before: ""abcdef""</p>

<p>After: ""abdef""</p>
","5457726"
"Printf width specifier to maintain precision of floating-point value","128174","","<p>Is there a <code>printf</code> width specifier which can be applied to a floating point specifier that would automatically format the output to the necessary number of <em>significant digits</em> such that when scanning the string back in, the original floating point value is acquired?</p>

<p>For example, suppose I print a <code>float</code> to a precision of <code>2</code> decimal places:</p>

<pre><code>float foobar = 0.9375;
printf(""%.2f"", foobar);    // prints out 0.94
</code></pre>

<p>When I scan the output <code>0.94</code>, I have no standards-compliant guarantee that I'll get the original <code>0.9375</code> floating-point value back (in this example, I probably won't).</p>

<p>I would like a way tell <code>printf</code> to automatically print the floating-point value to the necessary number of <em>significant digits</em> to ensure that it can be scanned back to the original value passed to <code>printf</code>.</p>

<p>I could use some of the macros in <code>float.h</code> to <a href=""https://stackoverflow.com/a/1701272/1806289"">derive the maximum width</a> to pass to <code>printf</code>, but is there already a specifier to automatically print to the necessary number of <em>significant digits</em> -- or at least to the maximum width?</p>
","<p>I recommend @Jens Gustedt hexadecimal solution: use %a.</p>

<p>OP wants “print with maximum precision (or at least to the most significant decimal)”.</p>

<p>A simple example would be to print one seventh as in:</p>

<pre><code>#include &lt;float.h&gt;
int Digs = DECIMAL_DIG;
double OneSeventh = 1.0/7.0;
printf(""%.*e\n"", Digs, OneSeventh);
// 1.428571428571428492127e-01
</code></pre>

<hr>

<p>But let's dig deeper ...</p>

<p>Mathematically, the answer is ""0.142857 142857 142857 ..."", but we are using finite precision floating point numbers.
Let's assume <a href=""http://en.wikipedia.org/wiki/Double_precision_floating-point_format"">IEEE 754 double-precision binary</a>. 
So the <code>OneSeventh = 1.0/7.0</code> results in the value below.  Also shown are the preceding and following representable <code>double</code> floating point numbers.</p>

<pre><code>OneSeventh before = 0.1428571428571428 214571170656199683435261249542236328125
OneSeventh        = 0.1428571428571428 49212692681248881854116916656494140625
OneSeventh after  = 0.1428571428571428 769682682968777953647077083587646484375
</code></pre>

<p>Printing the <em>exact</em> decimal representation of a <code>double</code> has limited uses.</p>

<p>C has 2 families of macros in <code>&lt;float.h&gt;</code> to help us.<br>
The first set is the number of <em>significant</em> digits to print in a string in decimal so when scanning the string back,
we get the original floating point.  There are shown with the C spec's <em>minimum</em> value and a <em>sample</em> C11 compiler.</p>

<pre><code>FLT_DECIMAL_DIG   6,  9 (float)                           (C11)
DBL_DECIMAL_DIG  10, 17 (double)                          (C11)
LDBL_DECIMAL_DIG 10, 21 (long double)                     (C11)
DECIMAL_DIG      10, 21 (widest supported floating type)  (C99)
</code></pre>

<p>The second set is the number of <em>significant</em> digits a string may be scanned into a floating point and then the FP printed, still retaining the same string presentation.  There are shown with the C spec's <em>minimum</em> value and a <em>sample</em> C11 compiler.  I believe available pre-C99.</p>

<pre><code>FLT_DIG   6, 6 (float)
DBL_DIG  10, 15 (double)
LDBL_DIG 10, 18 (long double)
</code></pre>

<p>The first set of macros seems to meet OP's goal of <em>significant</em> digits.  But that <em>macro</em> is not always available.</p>

<pre><code>#ifdef DBL_DECIMAL_DIG
  #define OP_DBL_Digs (DBL_DECIMAL_DIG)
#else  
  #ifdef DECIMAL_DIG
    #define OP_DBL_Digs (DECIMAL_DIG)
  #else  
    #define OP_DBL_Digs (DBL_DIG + 3)
  #endif
#endif
</code></pre>

<p>The ""+ 3"" was the crux of my previous answer.
Its centered on if knowing the round-trip conversion string-FP-string (set #2 macros available C89), how would one determine the digits for FP-string-FP (set #1 macros available post C89)?  In general, add 3 was the result.</p>

<p>Now how many <em>significant</em> digits to print is known and driven via <code>&lt;float.h&gt;</code>.  </p>

<p>To print N <em>significant</em> decimal digits one may use various formats.  </p>

<p>With <code>""%e""</code>, the <em>precision</em> field is the number of digits <em>after</em> the lead digit and decimal point.
So <code>- 1</code> is in order.  Note: This <code>-1 is not in the initial</code>int Digs = DECIMAL_DIG;`</p>

<pre><code>printf(""%.*e\n"", OP_DBL_Digs - 1, OneSeventh);
// 1.4285714285714285e-01
</code></pre>

<p>With <code>""%f""</code>, the <em>precision</em> field is the number of digits <em>after</em> the decimal point.
For a number like <code>OneSeventh/1000000.0</code>, one would need <code>OP_DBL_Digs + 6</code> to see all the <em>significant</em> digits.</p>

<pre><code>printf(""%.*f\n"", OP_DBL_Digs    , OneSeventh);
// 0.14285714285714285
printf(""%.*f\n"", OP_DBL_Digs + 6, OneSeventh/1000000.0);
// 0.00000014285714285714285
</code></pre>

<p>Note: Many are use to <code>""%f""</code>.  That displays 6 digits after the decimal point; 6 is the display default, not the precision of the number.</p>
","19897395"
"How to read from stdin with fgets()?","127921","","<p>I've written the following code to read a line from a terminal window, the problem is the code gets stuck in an infinite loop. The line/sentence  is of undefined length, therefore I plan to read it in parts into the buffer, then concatenate it to another string which can be extended via <code>realloc</code> accordingly. Please can somebody spot my mistake or suggest a better way of achieving this?</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define BUFFERSIZE 10

int main (int argc, char *argv[])
{
    char buffer[BUFFERSIZE];
    printf(""Enter a message: \n"");
    while(fgets(buffer, BUFFERSIZE , stdin) != NULL)
    {
        printf(""%s\n"", buffer);
    }
    return 0;
}
</code></pre>
","<p>here a concatenation solution:</p>

<pre><code>char *text = calloc(1,1), buffer[BUFFERSIZE];
printf(""Enter a message: \n"");
while( fgets(buffer, BUFFERSIZE , stdin) ) /* break with ^D or ^Z */
{
  text = realloc( text, strlen(text)+1+strlen(buffer) );
  if( !text ) ... /* error handling */
  strcat( text, buffer ); /* note a '\n' is appended here everytime */
  printf(""%s\n"", buffer);
}
printf(""\ntext:\n%s"",text);
</code></pre>
","3919126"
"How to calculate the CPU usage of a process by PID in Linux from C?","127572","","<p>I want to programmatically [in C] calculate CPU usage % for a given process ID in Linux.</p>

<p>How can we get the realtime CPU usage % for a given process?</p>

<p>To make it further clear:</p>

<ul>
<li>I should be able to determine the CPU usage for the provided processid or process.  </li>
<li>The process need not be the child process.  </li>
<li>I want the solution in 'C' language.</li>
</ul>
","<p>You need to parse out the data from <code>/proc/&lt;PID&gt;/stat</code>.  These are the first few fields (from <code>Documentation/filesystems/proc.txt</code> in your kernel source):</p>

<pre><code>Table 1-3: Contents of the stat files (as of 2.6.22-rc3)
..............................................................................
 Field          Content
  pid           process id
  tcomm         filename of the executable
  state         state (R is running, S is sleeping, D is sleeping in an
                uninterruptible wait, Z is zombie, T is traced or stopped)
  ppid          process id of the parent process
  pgrp          pgrp of the process
  sid           session id
  tty_nr        tty the process uses
  tty_pgrp      pgrp of the tty
  flags         task flags
  min_flt       number of minor faults
  cmin_flt      number of minor faults with child's
  maj_flt       number of major faults
  cmaj_flt      number of major faults with child's
  utime         user mode jiffies
  stime         kernel mode jiffies
  cutime        user mode jiffies with child's
  cstime        kernel mode jiffies with child's
</code></pre>

<p>You're probably after <code>utime</code> and/or <code>stime</code>.  You'll also need to read the <code>cpu</code> line from <code>/proc/stat</code>, which looks like:</p>

<pre><code>cpu  192369 7119 480152 122044337 14142 9937 26747 0 0
</code></pre>

<p>This tells you the cumulative CPU time that's been used in various categories, in units of jiffies.  You need to take the sum of the values on this line to get a <code>time_total</code> measure.</p>

<p>Read both <code>utime</code> and <code>stime</code> for the process you're interested in, and read <code>time_total</code> from <code>/proc/stat</code>.  Then sleep for a second or so, and read them all again.  You can now calculate the CPU usage of the process over the sampling time, with:</p>

<pre><code>user_util = 100 * (utime_after - utime_before) / (time_total_after - time_total_before);
sys_util = 100 * (stime_after - stime_before) / (time_total_after - time_total_before);
</code></pre>

<p>Make sense?</p>
","1424556"
"Bind failed: Address already in use","127281","","<p>I am attempting to bind a socket to a port below:  </p>

<pre><code>if( bind(socket_desc,(struct sockaddr *) &amp;server, sizeof(server)) &lt; 0)
{
    perror(""bind failed. Error"");
    return 1;
}
puts(""bind done"");
</code></pre>

<p>But it gives:</p>

<pre><code>$ ./serve   
Socket created    
bind failed. Error: Address already in use
</code></pre>

<p>Why does this error occur?</p>
","<p>The error usually means that the port you are trying to open is being already used by another application try using netstat to see which ports are open and then use an available port.</p>

<p>Also check if you are binding to the right ip address (I am assuming it would be localhost)</p>
","15198907"
"Easiest way to flip a boolean value?","127132","","<p>I just want to flip a boolean based on what it already is. If it's true - make it false. If it's false - make it true.</p>

<p>Here is my code excerpt:</p>

<pre><code>switch(wParam) {

case VK_F11:
  if (flipVal == true) {
     flipVal = false;
  } else {
    flipVal = true;
  }
break;

case VK_F12:
  if (otherVal == true) {
     otherValVal = false;
  } else {
    otherVal = true;
  }
break;

default:
break;
}
</code></pre>
","<p>You can flip a value like so:</p>

<pre><code>myVal = !myVal;
</code></pre>

<p>so your code would shorten down to:</p>

<pre><code>switch(wParam) {
    case VK_F11:
    flipVal = !flipVal;
    break;

    case VK_F12:
    otherVal = !otherVal;
    break;

    default:
    break;
}
</code></pre>
","610919"
"Convert double/float to string","126891","","<p>I need to convert a floating point number to an equivalent string in decimal (or other base). Conversion at first needs to be done in the format <code>xE+0</code> where <code>x</code> is the floating point number.</p>

<p>The idea I have is to first truncate the floating point number into a temporary integer and then convert that integer into string, and then consider the fractional part, multiply it with <code>10</code> while the fractional part does not become <code>0</code>. After the fractional part is transferred into the left side of the decimal point, apply the integer to string function again and convert the fraction part to string. Is there a better way, which will be faster than this? Will this method induce any kind of side effects?</p>

<p>To convert the floating point number into exponential representation shall I do the same as above and then adjust the power? Or directly bitmask the <a href=""https://en.wikipedia.org/wiki/IEEE_754"" rel=""nofollow noreferrer"">IEEE&nbsp;754</a> floating point representation and convert each part into string.</p>

<p><em>Note: No other functions could be used, because I have access to absolutely no library functions. This code goes into a toy kernel.</em></p>
","<p>The only exact solution is to perform arbitrary-precision decimal arithmetic for the base conversion, since the exact value can be <strong>very</strong> long - for 80-bit <code>long double</code>, up to about 10000 decimal places. Fortunately it's ""only"" up to about 700 places or so for IEEE <code>double</code>.</p>

<p>Rather than working with individual decimal digits, it's helpful to instead work base-1-billion (the highest power of 10 that fits in a 32-bit integer) and then convert these ""base-1-billion digits"" to 9 decimal digits each at the end of your computation.</p>

<p>I have a very dense (rather hard to read) but efficient implementation here, under <strike>LGPL</strike> MIT license:</p>

<p><a href=""http://git.musl-libc.org/cgit/musl/blob/src/stdio/vfprintf.c?h=v1.1.6"" rel=""noreferrer"">http://git.musl-libc.org/cgit/musl/blob/src/stdio/vfprintf.c?h=v1.1.6</a></p>

<p>If you strip out all the hex float support, infinity/nan support, <code>%g</code>/<code>%f</code>/<code>%e</code> variation support, rounding (which will never be needed if you only want exact answers), and other things you might not need, the remaining code is rather simple.</p>
","7231988"
"gcc/g++: ""No such file or directory""","126830","","<p><code>g++</code> gives me errors of the form:</p>

<pre><code>foo.cc:&lt;line&gt;:&lt;column&gt;: fatal error: &lt;bar&gt;: No such file or directory
compilation terminated.
</code></pre>

<p>It is the same when compiling C-programs with <code>gcc</code>.</p>

<p>Why is that?</p>

<hr>

<p><sup><strong>Please note:</strong> This question has been asked many times before, but each time it was specific to the askers situation. This question's purpose is <strong>to have a question that others can be closed as duplicates of</strong>, once and for all; a <em>FAQ</em>.</sup></p>
","<p>Your compiler just tried to compile the file named <code>foo.cc</code>. Upon hitting line number <code>line</code>, the compiler finds:</p>

<pre><code>#include ""bar""
</code></pre>

<p>or</p>

<pre><code>#include &lt;bar&gt;
</code></pre>

<p>The compiler then tries to find that file. For this, it uses a set of directories to look into, but within this set, there is no file <code>bar</code>. For an explanation of the difference between the versions of the include statement look <a href=""https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename"">here</a>.</p>

<h2>How to tell the compiler where to find it</h2>

<p><code>g++</code> has an option <code>-I</code>. It lets you add include search paths to the command line. Imagine that your file <code>bar</code> is in a folder named <code>frobnicate</code>, relative to <code>foo.cc</code> (assume you are compiling from the directory where <code>foo.cc</code> is located):</p>

<pre><code>g++ -Ifrobnicate foo.cc
</code></pre>

<p>You can add more include-paths; each you give is relative to the current directory. Microsoft's compiler has a correlating option <code>/I</code> that works in the same way, or in Visual Studio, the folders can be set in the Property Pages of the Project, under Configuration Properties->C/C++->General->Additional Include Directories.  </p>

<p>Now imagine you have multiple version of <code>bar</code> in different folders, given:</p>

<hr>

<pre><code>// A/bar
#include&lt;string&gt;
std::string which() { return ""A/bar""; }
</code></pre>

<hr>

<pre><code>// B/bar
#include&lt;string&gt;
std::string which() { return ""B/bar""; }
</code></pre>

<hr>

<pre><code>// C/bar
#include&lt;string&gt;
std::string which() { return ""C/bar""; }
</code></pre>

<hr>

<pre><code>// foo.cc
#include ""bar""
#include &lt;iostream&gt;

int main () {
    std::cout &lt;&lt; which() &lt;&lt; std::endl;
}
</code></pre>

<hr>

<p>The priority with <code>#include ""bar""</code> is leftmost:</p>

<pre><code>$ g++ -IA -IB -IC foo.cc
$ ./a.out
A/bar
</code></pre>

<p>As you see, when the compiler started looking through <code>A/</code>, <code>B/</code> and <code>C/</code>, it stopped at the first or leftmost hit.</p>

<p>This is true of both forms, <code>include &lt;&gt;</code> and <code>incude """"</code>.</p>

<h2>Difference between <code>#include &lt;bar&gt;</code> and <code>#include ""bar""</code></h2>

<p>Usually, the <code>#include &lt;xxx&gt;</code> makes it look into system folders first, the <code>#include ""xxx""</code> makes it look into the current or custom folders first.</p>

<p>E.g.:</p>

<p>Imagine you have the following files in your project folder:</p>

<pre><code>list
main.cc
</code></pre>

<p>with <code>main.cc</code>:</p>

<pre><code>#include ""list""
....
</code></pre>

<p>For this, your compiler will <code>#include</code> the file <code>list</code> in your project folder, because it currently compiles <code>main.cc</code> and there is that file <code>list</code> in the current folder.</p>

<p>But with <code>main.cc</code>:</p>

<pre><code>#include &lt;list&gt;
....
</code></pre>

<p>and then <code>g++ main.cc</code>, your compiler will look into the system folders first, and because <code>&lt;list&gt;</code> is a standard header, it will <code>#include</code> the file named <code>list</code> that comes with your C++ platform as part of the standard library.</p>

<p>This is all a bit simplified, but should give you the basic idea.</p>

<h2>Details on <code>&lt;&gt;</code>/<code>""""</code>-priorities and <code>-I</code></h2>

<p>According to the <a href=""http://gcc.gnu.org/onlinedocs/cpp/Search-Path.html"" rel=""noreferrer"">gcc-documentation</a>, the priority for <code>include &lt;&gt;</code> is, on a ""normal Unix system"", as follows:</p>

<pre><code> /usr/local/include
 libdir/gcc/target/version/include
 /usr/target/include
 /usr/include
</code></pre>

<blockquote>
  <p>For C++ programs, it will also look in /usr/include/c++/version, first. In the above, target is the canonical name of the system GCC was configured to compile code for; [...]. </p>
</blockquote>

<p>The documentation also states:</p>

<blockquote>
  <p>You can add to this list with the -Idir command line option. All the directories named by -I are searched, in left-to-right order, <strong>before the default directories</strong>. The only exception is when dir is already searched by default. In this case, the option is ignored and the search order for system directories remains unchanged. </p>
</blockquote>

<p>To continue our <code>#include&lt;list&gt; / #include""list""</code> example (same code):</p>

<pre><code>g++ -I. main.cc
</code></pre>

<p>and</p>

<pre><code>#include&lt;list&gt;
int main () { std::list&lt;int&gt; l; }
</code></pre>

<p>and indeed, the <code>-I.</code> prioritizes the folder <code>.</code> over the system includes and we get a compiler error.</p>
","12919082"
"C dynamically growing array","126780","","<p>I have a program that reads a ""raw"" list of in-game entities, and I intend to make an array holding an index number (int) of an indeterminate number of entities, for processing various things. I would like to avoid using too much memory or CPU for keeping such indexes...</p>

<p>A quick and dirty solution I use so far is to declare, in the main processing function (local focus) the array with a size of the maximum game entities, and another integer to keep track of how many have been added to the list.
This isn't satisfactory, as every list holds 3000+ arrays, which isn't that much, but feels like a waste, since I'll possible use the solution for 6-7 lists for varying functions.</p>

<p>I haven't found any C (not C++ or C#) specific solutions to achieve this. I can use pointers, but I am a bit afraid of using them (unless it's the only possible way).</p>

<p>The arrays do not leave the local function scope (they are to be passed to a function, then discarded), in case that changes things.</p>

<p>If pointers are the only solution, how can I keep track of them to avoid leaks?</p>
","<blockquote>
  <p>I can use pointers, but I am a bit afraid of using them.</p>
</blockquote>

<p>If you need a dynamic array, you can't escape pointers. Why are you afraid though? They won't bite (as long as you're careful, that is). There's no built-in dynamic array in C, you'll just have to write one yourself. In C++, you can use the built-in <a href=""http://en.cppreference.com/w/cpp/container/vector"" rel=""noreferrer""><code>std::vector</code></a> class. C# and just about every other high-level language also have some similar class that manages dynamic arrays for you.</p>

<p>If you do plan to write your own, here's something to get you started: most dynamic array implementations work by starting off with an array of some (small) default size, then whenever you run out of space when adding a new element, double the size of the array. As you can see in the example below, it's not very difficult at all: (I've omitted safety checks for brevity)</p>

<pre><code>typedef struct {
  int *array;
  size_t used;
  size_t size;
} Array;

void initArray(Array *a, size_t initialSize) {
  a-&gt;array = (int *)malloc(initialSize * sizeof(int));
  a-&gt;used = 0;
  a-&gt;size = initialSize;
}

void insertArray(Array *a, int element) {
  // a-&gt;used is the number of used entries, because a-&gt;array[a-&gt;used++] updates a-&gt;used only *after* the array has been accessed.
  // Therefore a-&gt;used can go up to a-&gt;size 
  if (a-&gt;used == a-&gt;size) {
    a-&gt;size *= 2;
    a-&gt;array = (int *)realloc(a-&gt;array, a-&gt;size * sizeof(int));
  }
  a-&gt;array[a-&gt;used++] = element;
}

void freeArray(Array *a) {
  free(a-&gt;array);
  a-&gt;array = NULL;
  a-&gt;used = a-&gt;size = 0;
}
</code></pre>

<p>Using it is just as simple:</p>

<pre><code>Array a;
int i;

initArray(&amp;a, 5);  // initially 5 elements
for (i = 0; i &lt; 100; i++)
  insertArray(&amp;a, i);  // automatically resizes as necessary
printf(""%d\n"", a.array[9]);  // print 10th element
printf(""%d\n"", a.used);  // print number of elements
freeArray(&amp;a);
</code></pre>
","3536261"
"Finding the length of an integer in C","126719","","<p>I would like to know how I can find the length of an integer in C.</p>

<p>For instance:</p>

<ul>
<li>1 => 1 </li>
<li>25 => 2 </li>
<li>12512 => 5</li>
<li>0 => 1</li>
</ul>

<p>and so on.</p>

<p>How can I do this in C?</p>
","<h2>C:</h2>

<p>Why not just take the base-10 log of the absolute value of the number, round it down, and add one? This works for positive and negative numbers that aren't 0, and avoids having to use any string conversion functions.</p>

<p>The <code>log10</code>, <code>abs</code>, and <code>floor</code> functions are provided by <code>math.h</code>. For example:</p>

<pre><code>int nDigits = floor(log10(abs(the_integer))) + 1;
</code></pre>

<p>You should wrap this in a clause ensuring that <code>the_integer != 0</code>, since <code>log10(0)</code> returns <code>-HUGE_VAL</code> according to <code>man 3 log</code>.</p>

<p>Additionally, you may want to add one to the final result if the input is negative, if you're interested in the length of the number including its negative sign.</p>

<h2>Java:</h2>

<pre><code>int nDigits = Math.floor(Math.log10(Math.abs(the_integer))) + 1;
</code></pre>

<hr>

<p><strong>N.B.</strong> The floating-point nature of the calculations involved in this method may cause it to be slower than a more direct approach. See the comments for Kangkan's answer for some discussion of efficiency.</p>
","3068420"
"Where in memory are my variables stored in C?","126599","","<p>By considering that the memory is divided into four segments: data, heap, stack, and code, where do global variables, static variables, constant data types, local variables (defined and declared in functions), variables (in main function), pointers, and dynamically allocated space (using malloc and calloc) get stored in memory?</p>

<p>I think they would be allocated as follows:</p>

<ul>
<li>Global variables  ------->  <strong>heap</strong>(both static and global variables are stored in heap according to <strong>Robert Lafore's Book object oriented programming in C++</strong></li>
<li>Static variables  ------->  <strong>heap</strong></li>
<li>Constant data types ----->  code</li>
<li>Local variables (declared and defined in functions)  -------->  stack</li>
<li>Variables declared and defined in main function  ----->  heap</li>
<li>Pointers (for example, <code>char *arr</code>, <code>int *arr</code>) ------->  heap</li>
<li>Dynamically allocated space (using malloc and calloc) --------> stack</li>
</ul>

<p>I am referring to these variables only from the C perspective.</p>

<p>Please correct me if I am wrong as I am new to C.</p>
","<p>You got some of these right, but whoever wrote the questions tricked you on at least one question:</p>

<ul>
<li>global variables -------> data (correct)</li>
<li>static variables -------> data (correct)</li>
<li>constant data types -----> code and/or data. Consider string literals for a situation when a constant itself would be stored in the data segment, and references to it would be embedded in the code</li>
<li>local variables(declared and defined in functions) --------> stack (correct)</li>
<li>variables declared and defined in <code>main</code> function -----> <strike>heap</strike> also stack (the teacher was trying to trick you)</li>
<li>pointers(ex: <code>char *arr</code>, <code>int *arr</code>) -------> <strike>heap</strike> data or stack, depending on the context. C lets you declare a global or a <code>static</code> pointer, in which case the pointer itself would end up in the data segment.</li>
<li>dynamically allocated space(using <code>malloc</code>, <code>calloc</code>, <code>realloc</code>) --------> <strike>stack</strike> heap</li>
</ul>

<p>It is worth mentioning that ""stack"" is officially called ""automatic storage class"".</p>
","14588866"
"Linux C Serial Port Reading/Writing","126373","","<p>I'm trying to <strong>send/receive data over an USB Port using FTDI</strong>, so I need to handle serial communication using C/C++. I'm working on <strong>Linux</strong> (Ubuntu).</p>

<p>Basically, I am connected to a device which is listening for incoming commands. I need to send those commands and read device's response. Both commands and response are <strong>ASCII characters</strong>.</p>

<p>Everything works fine using GtkTerm but, when I switch to C programming, I encounter problems.</p>

<p>Here's my code:</p>

<pre><code>#include &lt;stdio.h&gt;      // standard input / output functions
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;     // string function definitions
#include &lt;unistd.h&gt;     // UNIX standard function definitions
#include &lt;fcntl.h&gt;      // File control definitions
#include &lt;errno.h&gt;      // Error number definitions
#include &lt;termios.h&gt;    // POSIX terminal control definitions

/* Open File Descriptor */
int USB = open( ""/dev/ttyUSB0"", O_RDWR| O_NONBLOCK | O_NDELAY );

/* Error Handling */
if ( USB &lt; 0 )
{
cout &lt;&lt; ""Error "" &lt;&lt; errno &lt;&lt; "" opening "" &lt;&lt; ""/dev/ttyUSB0"" &lt;&lt; "": "" &lt;&lt; strerror (errno) &lt;&lt; endl;
}

/* *** Configure Port *** */
struct termios tty;
memset (&amp;tty, 0, sizeof tty);

/* Error Handling */
if ( tcgetattr ( USB, &amp;tty ) != 0 )
{
cout &lt;&lt; ""Error "" &lt;&lt; errno &lt;&lt; "" from tcgetattr: "" &lt;&lt; strerror(errno) &lt;&lt; endl;
}

/* Set Baud Rate */
cfsetospeed (&amp;tty, B9600);
cfsetispeed (&amp;tty, B9600);

/* Setting other Port Stuff */
tty.c_cflag     &amp;=  ~PARENB;        // Make 8n1
tty.c_cflag     &amp;=  ~CSTOPB;
tty.c_cflag     &amp;=  ~CSIZE;
tty.c_cflag     |=  CS8;
tty.c_cflag     &amp;=  ~CRTSCTS;       // no flow control
tty.c_lflag     =   0;          // no signaling chars, no echo, no canonical processing
tty.c_oflag     =   0;                  // no remapping, no delays
tty.c_cc[VMIN]      =   0;                  // read doesn't block
tty.c_cc[VTIME]     =   5;                  // 0.5 seconds read timeout

tty.c_cflag     |=  CREAD | CLOCAL;     // turn on READ &amp; ignore ctrl lines
tty.c_iflag     &amp;=  ~(IXON | IXOFF | IXANY);// turn off s/w flow ctrl
tty.c_lflag     &amp;=  ~(ICANON | ECHO | ECHOE | ISIG); // make raw
tty.c_oflag     &amp;=  ~OPOST;              // make raw

/* Flush Port, then applies attributes */
tcflush( USB, TCIFLUSH );

if ( tcsetattr ( USB, TCSANOW, &amp;tty ) != 0)
{
cout &lt;&lt; ""Error "" &lt;&lt; errno &lt;&lt; "" from tcsetattr"" &lt;&lt; endl;
}

/* *** WRITE *** */

unsigned char cmd[] = {'I', 'N', 'I', 'T', ' ', '\r', '\0'};
int n_written = write( USB, cmd, sizeof(cmd) -1 );

/* Allocate memory for read buffer */
char buf [256];
memset (&amp;buf, '\0', sizeof buf);

/* *** READ *** */
int n = read( USB, &amp;buf , sizeof buf );

/* Error Handling */
if (n &lt; 0)
{
     cout &lt;&lt; ""Error reading: "" &lt;&lt; strerror(errno) &lt;&lt; endl;
}

/* Print what I read... */
cout &lt;&lt; ""Read: "" &lt;&lt; buf &lt;&lt; endl;

close(USB);
</code></pre>

<p>What happens is that <code>read()</code> returns 0 (no bytes read at all) or block until timeout (<code>VTIME</code>). I'm assuming this happens because <code>write()</code> does not send anything. In that case, device wouldn't receive command and I cannot receive response. In fact, turning off the device while my program is blocked on reading actually succeded in getting a response (device sends something while shutting down).</p>

<p>Strange thing is that adding this </p>

<pre><code>cout &lt;&lt; ""I've written: "" &lt;&lt; n_written &lt;&lt; ""bytes"" &lt;&lt; endl; 
</code></pre>

<p>right after <code>write()</code> call, I receive:</p>

<pre><code>I've written 6 bytes
</code></pre>

<p>which is exactly what I expect. Only my program doesn't work as it should, like <strong>my device cannot receive what I'm actually writing</strong> on port.</p>

<p>I've tried different things and solution, also regarding data types (I've tried using std::string, such as <code>cmd = ""INIT \r""</code> or <code>const char</code>) but nothing really worked.</p>

<p>Can someone tell me where I'm wrong?</p>

<p>Thank you in advance.</p>

<p><strong>EDIT:</strong>
Previously version of this code used </p>

<p><code>unsigned char cmd[] = ""INIT \n""</code></p>

<p>and also <code>cmd[] = ""INIT \r\n""</code>. I changed it because command sintax for my device is reported as </p>

<p><code>&lt;command&gt;&lt;SPACE&gt;&lt;CR&gt;</code>. </p>

<p>I've also tried avoiding the <code>O_NONBLOCK</code> flag on reading, but then I only block until forever. I've tried using <code>select()</code> but nothing happens. Just for a try, I've created a waiting loop until data is avaliable, but my code never exit the loop. Btw, waiting or <code>usleep()</code> is something I need to avoid. Reported one is only an excerpt of my code. <strong>Complete code needs to work in a real-time environment</strong> (specifically OROCOS) so I don't really want sleep-like function.</p>
","<p>I've solved my problems, so I post here the correct code in case someone needs similar stuff.</p>

<p><strong>Open Port</strong></p>

<pre><code>int USB = open( ""/dev/ttyUSB0"", O_RDWR| O_NOCTTY );
</code></pre>

<p><strong>Set parameters</strong></p>

<pre><code>struct termios tty;
struct termios tty_old;
memset (&amp;tty, 0, sizeof tty);

/* Error Handling */
if ( tcgetattr ( USB, &amp;tty ) != 0 ) {
   std::cout &lt;&lt; ""Error "" &lt;&lt; errno &lt;&lt; "" from tcgetattr: "" &lt;&lt; strerror(errno) &lt;&lt; std::endl;
}

/* Save old tty parameters */
tty_old = tty;

/* Set Baud Rate */
cfsetospeed (&amp;tty, (speed_t)B9600);
cfsetispeed (&amp;tty, (speed_t)B9600);

/* Setting other Port Stuff */
tty.c_cflag     &amp;=  ~PARENB;            // Make 8n1
tty.c_cflag     &amp;=  ~CSTOPB;
tty.c_cflag     &amp;=  ~CSIZE;
tty.c_cflag     |=  CS8;

tty.c_cflag     &amp;=  ~CRTSCTS;           // no flow control
tty.c_cc[VMIN]   =  1;                  // read doesn't block
tty.c_cc[VTIME]  =  5;                  // 0.5 seconds read timeout
tty.c_cflag     |=  CREAD | CLOCAL;     // turn on READ &amp; ignore ctrl lines

/* Make raw */
cfmakeraw(&amp;tty);

/* Flush Port, then applies attributes */
tcflush( USB, TCIFLUSH );
if ( tcsetattr ( USB, TCSANOW, &amp;tty ) != 0) {
   std::cout &lt;&lt; ""Error "" &lt;&lt; errno &lt;&lt; "" from tcsetattr"" &lt;&lt; std::endl;
}
</code></pre>

<p><strong>Write</strong></p>

<pre><code>unsigned char cmd[] = ""INIT \r"";
int n_written = 0,
    spot = 0;

do {
    n_written = write( USB, &amp;cmd[spot], 1 );
    spot += n_written;
} while (cmd[spot-1] != '\r' &amp;&amp; n_written &gt; 0);
</code></pre>

<p>It was definitely not necessary to write byte per byte, also <code>int n_written = write( USB, cmd, sizeof(cmd) -1)</code> worked fine.</p>

<p>At last, <strong>read</strong>:</p>

<pre><code>int n = 0,
    spot = 0;
char buf = '\0';

/* Whole response*/
char response[1024];
memset(response, '\0', sizeof response);

do {
    n = read( USB, &amp;buf, 1 );
    sprintf( &amp;response[spot], ""%c"", buf );
    spot += n;
} while( buf != '\r' &amp;&amp; n &gt; 0);

if (n &lt; 0) {
    std::cout &lt;&lt; ""Error reading: "" &lt;&lt; strerror(errno) &lt;&lt; std::endl;
}
else if (n == 0) {
    std::cout &lt;&lt; ""Read nothing!"" &lt;&lt; std::endl;
}
else {
    std::cout &lt;&lt; ""Response: "" &lt;&lt; response &lt;&lt; std::endl;
}
</code></pre>

<p>This one worked for me. Thank you all!</p>
","18134892"
"Converting an int into a 4 byte char array (C)","126084","","<p>Hey, I'm looking to convert a int that is inputed by the user into 4 bytes, that I am assigning to a character array. How can this be done?</p>

<p>Example:</p>

<p>Convert a user inputs of 175 to</p>

<p><code>00000000 00000000 00000000 10101111</code></p>

<hr>

<p>Issue with all of the answers so far, converting 255 should result in <code>0 0 0 ff</code> although it prints out as: <code>0 0 0 ffffffff</code></p>

<pre><code>unsigned int value = 255;   

buffer[0] = (value &gt;&gt; 24) &amp; 0xFF;
buffer[1] = (value &gt;&gt; 16) &amp; 0xFF;
buffer[2] = (value &gt;&gt; 8) &amp; 0xFF;
buffer[3] = value &amp; 0xFF;

union {
    unsigned int integer;
    unsigned char byte[4];
} temp32bitint;

temp32bitint.integer = value;
buffer[8] = temp32bitint.byte[3];
buffer[9] = temp32bitint.byte[2];
buffer[10] = temp32bitint.byte[1];
buffer[11] = temp32bitint.byte[0];
</code></pre>

<p>both result in <code>0 0 0 ffffffff</code> instead of <code>0 0 0 ff</code></p>

<p>Just another example is 175 as the input prints out as <code>0, 0, 0, ffffffaf</code> when it should just be <code>0, 0, 0, af</code></p>
","<p>The <em>portable</em> way to do this (ensuring that you get <code>0x00 0x00 0x00 0xaf</code> everywhere) is to use shifts:</p>

<pre><code>unsigned char bytes[4];
unsigned long n = 175;

bytes[0] = (n &gt;&gt; 24) &amp; 0xFF;
bytes[1] = (n &gt;&gt; 16) &amp; 0xFF;
bytes[2] = (n &gt;&gt; 8) &amp; 0xFF;
bytes[3] = n &amp; 0xFF;
</code></pre>

<p>The methods using unions and <code>memcpy()</code> will get a different result on different machines.</p>

<hr>

<p>The issue you are having is with the printing rather than the conversion.  I presume you are using <code>char</code> rather than <code>unsigned char</code>, and you are using a line like this to print it:</p>

<pre><code>printf(""%x %x %x %x\n"", bytes[0], bytes[1], bytes[2], bytes[3]);
</code></pre>

<p>When any types narrower than <code>int</code> are passed to <code>printf</code>, they are promoted to <code>int</code> (or <code>unsigned int</code>, if <code>int</code> cannot hold all the values of the original type).  If <code>char</code> is signed on your platform, then <code>0xff</code> likely does not fit into the range of that type, and it is being set to -1 instead (which has the representation <code>0xff</code> on a 2s-complement machine).</p>

<p>-1 is promoted to an <code>int</code>, and has the representation <code>0xffffffff</code> as an <code>int</code> on your machine, and that is what you see.</p>

<p>Your solution is to either actually use <code>unsigned char</code>, or else cast to <code>unsigned char</code> in the <code>printf</code> statement:</p>

<pre><code>printf(""%x %x %x %x\n"", (unsigned char)bytes[0],
                        (unsigned char)bytes[1],
                        (unsigned char)bytes[2],
                        (unsigned char)bytes[3]);
</code></pre>
","3784478"
"Concatenating strings in C, which method is more efficient?","125988","","<p>I came across these two methods to concatenate strings:</p>

<p>Common part:</p>

<pre><code>char* first= ""First"";
char* second = ""Second"";
char* both = malloc(strlen(first) + strlen(second) + 2);
</code></pre>

<p>Method 1:</p>

<pre><code>strcpy(both, first);
strcat(both, "" "");       // or space could have been part of one of the strings
strcat(both, second);
</code></pre>

<p>Method 2:</p>

<pre><code>sprintf(both, ""%s %s"", first, second);
</code></pre>

<p>In both cases the content of <code>both</code> would be <code>""First Second""</code>.</p>

<p>I would like to know which one is more efficient (I have to perform several concatenation operations), or if you know a better way to do it.</p>
","<p>For readability, I'd go with</p>

<pre><code>char * s = malloc(snprintf(NULL, 0, ""%s %s"", first, second) + 1);
sprintf(s, ""%s %s"", first, second);
</code></pre>

<p>If your platform supports GNU extensions,  you could also use <code>asprintf()</code>:</p>

<pre><code>char * s = NULL;
asprintf(&amp;s, ""%s %s"", first, second);
</code></pre>

<p>If you're stuck with the MS C Runtime, you have to use <code>_scprintf()</code> to determine the length of the resulting string:</p>

<pre><code>char * s = malloc(_scprintf(""%s %s"", first, second) + 1);
sprintf(s, ""%s %s"", first, second);
</code></pre>

<p>The following will most likely be the fastest solution:</p>

<pre><code>size_t len1 = strlen(first);
size_t len2 = strlen(second);

char * s = malloc(len1 + len2 + 2);
memcpy(s, first, len1);
s[len1] = ' ';
memcpy(s + len1 + 1, second, len2 + 1); // includes terminating null
</code></pre>
","1383685"
"Divide a number by 3 without using *, /, +, -, % operators","125817","","<p>How would you divide a number by 3 without using <code>*</code>, <code>/</code>, <code>+</code>, <code>-</code>, <code>%</code>,  operators?</p>

<p>The number may be signed or unsigned.</p>
","<p>This is a <a href=""http://web.archive.org/web/20121103111129/http://forums.hscripts.com/viewtopic.php?f=13&amp;t=1358"" rel=""noreferrer"">simple function</a> which performs the desired operation. But it requires the <code>+</code> operator, so all you have left to do is to add the values with bit-operators:</p>

<pre><code>// replaces the + operator
int add(int x, int y)
{
    while (x) {
        int t = (x &amp; y) &lt;&lt; 1;
        y ^= x;
        x = t;
    }
    return y;
}

int divideby3 (int num)
{
    int sum = 0;
    while (num &gt; 3) {
        sum = add(num &gt;&gt; 2, sum);
        num = add(num &gt;&gt; 2, num &amp; 3);
    }
    if (num == 3)
        sum = add(sum, 1);
    return sum; 
}
</code></pre>

<p>As Jim commented this works because:</p>

<ul>
<li><code>n = 4 * a + b</code></li>
<li><code>n / 3 = a + (a + b) / 3</code> </li>
<li><p><code>So sum += a, n = a + b</code>, and iterate </p></li>
<li><p>When <code>a == 0 (n &lt; 4)</code>, <code>sum += floor(n / 3);</code> i.e. 1, <code>if n == 3, else 0</code></p></li>
</ul>
","11694778"
"Why am I getting ""undefined reference to sqrt"" error even though I include math.h header?","125745","","<p>I'm very new to C and I have this code: </p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
int main(void)
{
  double x = 0.5;
  double result = sqrt(x);
  printf(""The square root of %lf is %lf\n"", x, result);
  return 0;
}
</code></pre>

<p>But when I compile this with:</p>

<pre><code>gcc test.c -o test
</code></pre>

<p>I get an error like this:</p>

<pre><code>/tmp/cc58XvyX.o: In function `main':
test.c:(.text+0x2f): undefined reference to `sqrt'
collect2: ld returned 1 exit status
</code></pre>

<p>Why does this happen? Is <code>sqrt()</code> not in the <code>math.h</code> header file? I get the same error with <code>cosh</code> and other trigonometric functions. Why?</p>
","<p>The math library must be linked in when building the executable.  How to do this varies by environment, but in Linux/Unix, just add <code>-lm</code> to the command:</p>

<pre><code>gcc test.c -o test -lm
</code></pre>

<p>The math library is named <code>libm.so</code>, and the <code>-l</code> command option assumes a <code>lib</code> prefix and <code>.a</code> or <code>.so</code> suffix.</p>
","10409061"
"Undefined reference to main - collect2: ld returned 1 exit status","125565","","<p>I'm trying to compile a program (called es3), but, when I write from terminal:</p>

<p><code>gcc es3.c -o es3</code></p>

<p>it appears this message:</p>

<pre><code>/usr/lib/gcc/i686-linux-gnu/4.4.5/../../../../lib/crt1.o: In function `_start':
(.text+0x18): undefined reference to `main'
collect2: ld returned 1 exit status
</code></pre>

<p>What could I do?</p>
","<p>It means that <code>es3.c</code> does not define a <code>main</code> function, and you are attempting to create an executable out of it. An executable needs to have an entry point, thereby the linker complains.</p>

<p>To compile only to an object file, use the <code>-c</code> option:</p>

<pre><code>gcc es3.c -c
gcc es3.o main.c -o es3
</code></pre>

<p>The above compiles <code>es3.c</code> to an object file, then compiles a file <code>main.c</code> that would contain the <code>main</code> function, and the linker merges <code>es3.o</code> and <code>main.o</code> into an executable called <code>es3</code>.</p>
","7965472"
"How to get the real and total length of char * (char array)?","125406","","<p>For a <code>char []</code>, I can easily get its length by:</p>

<pre><code>char a[] = ""aaaaa"";
int length = sizeof(a)/sizeof(char); // length=6
</code></pre>

<p>However, I cannot do like this to get the length of a <code>char *</code> by:</p>

<pre><code>char *a = new char[10];
int length = sizeof(a)/sizeof(char);
</code></pre>

<p>because, I know, <code>a</code> here is a pointer, such that <code>length</code> here will be always be <code>4</code> (or something other in different systems).</p>

<p>My question is that how can I get the length of a <code>char *</code> afterwards? <em>I know someone may challenge me that you already know its <code>10</code> because you just created it. I want to know this because this step of getting its length may come long long way from its creation and I don't want to come long long way back to check this number. Moreover, I also want to know its real length.</em></p>

<p>To be more specific</p>

<ul>
<li>how can I get its real <code>length=5</code>?</li>
<li>how can I get its total <code>length=10</code>?</li>
</ul>

<p>for the following example:</p>

<pre><code>char *a = new char[10]; 
strcpy(a, ""hello"");
</code></pre>
","<p>You can't. Not with 100% accuracy, anyway. The pointer <em>has no length/size but its own</em>. All it does is point to a particular place in memory that holds a char. If that char is part of a string, then you can use <code>strlen</code> to determine what chars follow the one currently being pointed to, but that doesn't mean the <em>array</em> in your case is that big.<br/>
Basically:</p>

<p>A <strong><em>pointer</em></strong> is not an <strong><em>array</em></strong>, so it doesn't <em>need</em> to know what the size of the array is. A pointer can point to a single value, so a pointer can exist without there even being an array. It doesn't even care where the memory it points to is situated (Read only, heap or stack... doesn't matter). A pointer doesn't have a length other than itself. A pointer just is...<br/>
Consider this:</p>

<pre><code>char beep = '\a';
void alert_user(const char *msg, char *signal);//for some reason
alert_user(""Hear my super-awsome noise!"", &amp;beep);//passing pointer to single char!
//
void alert_user(const char *msg, char *signal)
{
    printf(""%s%c\n"", msg, *signal);
}
</code></pre>

<p>A pointer can be a single char aswell as the beginning, end or middle of an array...<Br/>
Think of chars as structs. You sometimes allocate a single struct on the heap. That, too, creates a pointer without an array.</p>

<p>Using only a pointer, to determine how big an array it is pointing to is impossible. The closest you can get to it is using <code>calloc</code> and counting the number of consecutive \0 chars you can find through the pointer. Of course, that doesn't work once you've assigned/reassigned stuff to that array's keys and it also fails if the memory just <em>outside</em> of the array happens to hold <code>\0</code>, too. So using this method is unreliable, dangerous and just generally silly. Don't. Do. It.</p>

<p><em>Another analogy:</em><br/>
Think of a pointer as a road sign, it points to <em>Town X</em>. The sign doesn't know what that town looks like, and it doesn't know or care (or can care) who lives there. It's job is to tell you where to find <em>Town X</em>. It can only tell you how far that town is, but not how big it is. That information is deemed irrelevant for road-signs. That's something that you can only find out by looking at the town itself, not at the road-signs that are pointing you in its direction</p>

<p>So, using a pointer the only thing you can do is:</p>

<pre><code>char a_str[] = ""hello"";//{h,e,l,l,o,\0}
char *arr_ptr = &amp;a_str[0];
printf(""Get length of string -&gt; %d\n"", strlen(arr_ptr));
</code></pre>

<p>But this, of course, only works if the array/string is \0-terminated.</p>

<p>As an asside:</p>

<pre><code>int length = sizeof(a)/sizeof(char);//sizeof char is guaranteed 1, so sizeof(a) is enough
</code></pre>

<p>is actually assigning <code>size_t</code> (the return type of <code>sizeof</code>) to an <code>int</code>, best write:</p>

<pre><code>size_t length = sizeof(a)/sizeof(*a);//best use ptr's type -&gt; good habit
</code></pre>

<p>Since <code>size_t</code> is an unsigned type, if <code>sizeof</code> returns bigger values, the value of <code>length</code> might be something you didn't expect...</p>
","21022815"
"Sleep function in Windows, using C","124834","","<p>I need to sleep my program in Windows. What header file has the sleep function?</p>
","<p>Use:</p>

<pre><code>#include &lt;windows.h&gt;

Sleep(sometime_in_millisecs); // Note uppercase S
</code></pre>

<p>And here's a small example that compiles with <a href=""http://en.wikipedia.org/wiki/MinGW"" rel=""nofollow noreferrer"">MinGW</a> and does what it says on the tin:</p>

<pre><code>#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

int main() {
    printf( ""starting to sleep...\n"" );
    Sleep(3000); // Sleep three seconds
    printf(""sleep ended\n"");
}
</code></pre>
","3379146"
"C - gettimeofday for computing time?","124764","","<p>do you know how to use gettimeofday for measuring computing time? I can measure one time by this code:</p>

<pre><code>  char buffer[30];
  struct timeval tv;

  time_t curtime;



 gettimeofday(&amp;tv, NULL); 
 curtime=tv.tv_sec;

 strftime(buffer,30,""%m-%d-%Y  %T."",localtime(&amp;curtime));
 printf(""%s%ld\n"",buffer,tv.tv_usec);
</code></pre>

<p>This one is made before computing, second one after. But do you know how to subtracts it?</p>

<p>Edit: I need result in miliseconds. And BTW, why I can't comment and see buttons when editing and creating new questions?</p>
","<p>Your <code>curtime</code> variable holds the number of seconds since the epoch.  If you get one before and one after, the later one minus the earlier one is the elapsed time in seconds.  You can subtract <code>time_t</code> values just fine.</p>
","5362608"
"How to print time in format: 2009‐08‐10 18:17:54.811","124515","","<p>What's the best method to print out time in C in the format <code>2009‐08‐10  18:17:54.811</code>?</p>
","<p>Use <a href=""http://en.cppreference.com/w/c/chrono/strftime"" rel=""noreferrer"">strftime()</a>.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main()
{
    time_t timer;
    char buffer[26];
    struct tm* tm_info;

    time(&amp;timer);
    tm_info = localtime(&amp;timer);

    strftime(buffer, 26, ""%Y-%m-%d %H:%M:%S"", tm_info);
    puts(buffer);

    return 0;
}
</code></pre>

<p>For milliseconds part, have a look at this question. <a href=""https://stackoverflow.com/questions/361363/how-to-measure-time-in-milliseconds-using-ansi-c"">How to measure time in milliseconds using ANSI C?</a></p>
","3673291"
"Why use double pointer? or Why use pointers to pointers?","124500","","<p>When should a double pointer be used in C? Can anyone explain with a example?</p>

<p>What I know is that a double pointer is a pointer to a pointer.  Why would I need a pointer to a pointer?</p>
","<p>If you want to have a list of characters (a word), you can use <code>char *word</code></p>

<p>If you want a list of words (a sentence), you can use <code>char **sentence</code></p>

<p>If you want a list of sentences (a monologue), you can use <code>char ***monologue</code></p>

<p>If you want a list of monologues (a biography), you can use <code>char ****biography</code></p>

<p>If you want a list of biographies (a bio-library), you can use <code>char *****biolibrary</code></p>

<p>If you want a list of bio-libraries (a ??lol), you can use <code>char ******lol</code></p>

<p>... ...</p>

<p><sup><em>yes, I know these might not be the best data structures</em></sup></p>
","5580952"
"2D array values C++","124346","","<p>I wanted to declare a 2D array and assign values to it, without running a for loop.</p>

<p>I thought I could used the following idea </p>

<pre><code>int array[5] = {1,2,3,4,5};
</code></pre>

<p>Which works fine to initialize the 2D array as well. But apparently my compiler doesn't like this.</p>

<pre><code>/*
 1   8  12  20  25
 5   9  13  24  26
*/

#include &lt;iostream.h&gt;

int main()
{
    int arr[2][5] = {0};   // This actually initializes everything to 0.
    arr [1] [] = {1,8,12,20,25}; // Line 11
    arr [2] [] = {5,9,13,24,26};
    return 0;
}
</code></pre>

<blockquote>
  <p>J:\CPP\Grid>bcc32.exe Grid.cpp</p>
  
  <p>Borland C++ 5.5.1 for Win32 Copyright (c) 1993, 2000 Borland</p>
  
  <p>Grid.cpp:</p>
  
  <p>Error E2188 Grid.cpp 11: Expression syntax in function main()</p>
  
  <p>Error E2188 Grid.cpp 12: Expression syntax in function main()</p>
  
  <p>Warning W8004 Grid.cpp 14: 'arr' is assigned a value that is never used in funct
  ion main()</p>
  
  <p><strong>* 2 errors in Compile *</strong></p>
</blockquote>

<p>Please help as to what is the right way to initialize the 2d array with my set of values.</p>
","<p>Like this:</p>

<pre><code>int main()
{
    int arr[2][5] =
    {
        {1,8,12,20,25},
        {5,9,13,24,26}
    };
}
</code></pre>

<p>This should be covered by your C++ textbook: which one are you using?</p>

<p>Anyway, better, consider using <code>std::vector</code> or some ready-made matrix class e.g. from Boost.</p>
","4981220"
"How do I work with dynamic multi-dimensional arrays in C?","123870","","<p>Does someone know how I can use dynamically allocated multi-dimensional arrays using C? Is that possible?</p>
","<p>With dynamic allocation, using malloc:</p>

<pre><code>int** x;

x = malloc(dimension1_max * sizeof(int*));
for (int i = 0; i &lt; dimension1_max; i++) {
  x[i] = malloc(dimension2_max * sizeof(int));
}

[...]

for (int i = 0; i &lt; dimension1_max; i++) {
  free(x[i]);
}
free(x);
</code></pre>

<p>This allocates an 2D array of size <code>dimension1_max</code> * <code>dimension2_max</code>. So, for example, if you want a 640*480 array (f.e. pixels of an image), use <code>dimension1_max</code> = 640, <code>dimension2_max</code> = 480. You can then access the array using <code>x[d1][d2]</code> where <code>d1</code> = 0..639, <code>d2</code> = 0..479.</p>

<p>But a search on SO or Google also reveals other possibilities, for example <a href=""https://stackoverflow.com/questions/365782/how-do-i-best-handle-dynamic-multi-dimensional-arrays-in-c-c"">in this SO question</a></p>

<p>Note that your array won't allocate a contiguous region of memory (640*480 bytes) in that case which could give problems with functions that assume this. So to get the array satisfy the condition, replace the malloc block above with this:</p>

<pre><code>int** x;
int* temp;

x = malloc(dimension1_max * sizeof(int*));
temp = malloc(dimension1_max * dimension2_max * sizeof(int));
for (int i = 0; i &lt; dimension1_max; i++) {
  x[i] = temp + (i * dimension2_max);
}

[...]

free(temp);
free(x);
</code></pre>
","917824"
"hash function for string","123376","","<p>I'm working on hash table in C language and I'm testing hash function for string.</p>

<p>The first function I've tried is to add ascii code and use modulo (%100) but i've got poor results with the first test of data: 40 collisions for 130 words. </p>

<p>The final input data will contain 8 000 words (it's a dictionnary stores in a file). The hash table is declared as int table[10000] and contains the position of the word in a txt file.</p>

<p>The first question is which is the best algorithm for hashing string ? and how to determinate the size of hash table ?</p>

<p>thanks in advance !</p>

<p>:-)</p>
","<p>I've had nice results with <a href=""http://www.cse.yorku.ca/~oz/hash.html""><code>djb2</code></a> by Dan Bernstein.</p>

<pre><code>unsigned long
hash(unsigned char *str)
{
    unsigned long hash = 5381;
    int c;

    while (c = *str++)
        hash = ((hash &lt;&lt; 5) + hash) + c; /* hash * 33 + c */

    return hash;
}
</code></pre>
","7666577"
"Difference between static, auto, global and local variable in the context of c and c++","123190","","<p>I’ve a bit confusion about static, auto, global and local variables. Somewhere I read that a static variable can only be accessed within the function, but they still exist (remain in the memory) after the function returns. However, I also know that a local variable also does the same, so what is the difference?</p>
","<p>There are two separate concepts here:</p>

<ul>
<li><em>scope</em>, which determines where a name can be accessed, and</li>
<li><em>storage duration</em>, which determines when a variable is created and destroyed.</li>
</ul>

<p><em>Local</em> variables (pedantically, variables with <em>block scope</em>) are only accessible within the block of code in which they are declared:</p>

<pre><code>void f() {
    int i;
    i = 1; // OK: in scope
}
void g() {
    i = 2; // Error: not in scope
}
</code></pre>

<p><em>Global</em> variables (pedantically, variables with <em>file scope</em> (in C) or <em>namespace scope</em> (in C++)) are accessible at any point after their declaration:</p>

<pre><code>int i;
void f() {
    i = 1; // OK: in scope
}
void g() {
    i = 2; // OK: still in scope
}
</code></pre>

<p>(In C++, the situation is more complicated since namespaces can be closed and reopened, and scopes other than the current one can be accessed, and names can also have class scope. But that's getting very off-topic.)</p>

<p><em>Automatic</em> variables (pedantically, variables with <em>automatic storage duration</em>) are local variables whose lifetime ends when execution leaves their scope, and are recreated when the scope is reentered.</p>

<pre><code>for (int i = 0; i &lt; 5; ++i) {
    int n = 0;
    printf(""%d "", ++n);  // prints 1 1 1 1 1  - the previous value is lost
}
</code></pre>

<p><em>Static</em> variables (pedantically, variables with <em>static storage duration</em>) have a lifetime that lasts until the end of the program. If they are local variables, then their value persists when execution leaves their scope.</p>

<pre><code>for (int i = 0; i &lt; 5; ++i) {
    static int n = 0;
    printf(""%d "", ++n);  // prints 1 2 3 4 5  - the value persists
}
</code></pre>

<p>Note that the <code>static</code> keyword has various meanings apart from static storage duration. On a global variable or function, it gives it <em>internal linkage</em> so that it's not accessible from other translation units; on a C++ class member, it means there's one instance per class rather than one per object. Also, in C++ the <code>auto</code> keyword no longer means automatic storage duration; it now means automatic type, deduced from the variable's initialiser.</p>
","13415659"
"Two decimal places using printf( )","123037","","<p>I'm trying to write a number to two decimal places using <code>printf()</code> as follows:</p>

<pre><code>#include &lt;cstdio&gt;
int main()
{
  printf(""When this number: %d is assigned to 2 dp, it will be: 2%f "", 94.9456, 94.9456);
  return 0;
}
</code></pre>

<p>When I run the program, I get the following output:</p>

<pre class=""lang-none prettyprint-override""><code># ./printf
When this number: -1243822529 is assigned to 2 db, it will be: 2-0.000000
</code></pre>

<p>Why is that?</p>

<p>Thanks.</p>
","<p>What you want is <code>%.2f</code>, not <code>2%f</code>.</p>

<p>Also, you might want to replace your <code>%d</code> with a <code>%f</code> ;)</p>

<pre><code>#include &lt;cstdio&gt;
int main()
{
printf(""When this number: %f is assigned to 2 dp, it will be: %.2f "", 94.9456, 94.9456);
return 0;
}
</code></pre>

<p>This will output:</p>

<blockquote>
  <p>When this number: 94.945600 is assigned to 2 dp, it will be: 94.95 </p>
</blockquote>

<p>See here for a full description of the printf formatting options: <a href=""http://en.cppreference.com/w/c/io/printf"" rel=""nofollow noreferrer""><code>printf</code></a></p>
","4784359"
"Strings in C, how to get subString","122430","","<p>I have a string:</p>

<pre><code>char * someString;
</code></pre>

<p>If I want the first five letters of this string and want to set it to <code>otherString</code>, how would I do it?</p>
","<pre><code>#include &lt;string.h&gt;
...
char otherString[6]; // note 6, not 5, there's one there for the null terminator
...
strncpy(otherString, someString, 5);
otherString[5] = '\0'; // place the null terminator
</code></pre>
","2114388"
"How does C compute sin() and other math functions?","121927","","<p>I've been poring through .NET disassemblies and the GCC source code, but can't seem to find anywhere the actual implementation of <code>sin()</code> and other math functions... they always seem to be referencing something else.</p>

<p>Can anyone help me find them?  I feel like it's unlikely that ALL hardware that C will run on supports trig functions in hardware, so there must be a software algorithm <em>somewhere</em>, right? </p>

<hr>

<p>I'm aware of several ways that functions <em>can</em> be calculated, and have written my own routines to compute functions using taylor series for fun.  I'm curious about how real, production languages do it, since all of my implementations are always several orders of magnitude slower, even though I think my algorithms are pretty clever (obviously they're not).</p>
","<p>In GNU libm, the implementation of <code>sin</code> is system-dependent. Therefore you can find the implementation, for each platform, somewhere in the appropriate subdirectory of <a href=""http://sourceware.org/git/?p=glibc.git;a=tree;f=sysdeps;hb=HEAD"" rel=""noreferrer"">sysdeps</a>.</p>

<p>One directory includes an implementation in C, contributed by IBM. Since October 2011, this is the code that actually runs when you call <code>sin()</code> on a typical x86-64 Linux system. It is apparently faster than the <code>fsin</code> assembly instruction. Source code: <a href=""https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/ieee754/dbl-64/s_sin.c;hb=HEAD#l281"" rel=""noreferrer"">sysdeps/ieee754/dbl-64/s_sin.c</a>, look for <code>__sin (double x)</code>.</p>

<p>This code is very complex. No one software algorithm is as fast as possible and also accurate over the whole range of <em>x</em> values, so the library implements many different algorithms and its first job is to look at <em>x</em> and decide which algorithm to use. In some regions it uses what looks like the familiar Taylor series. Several of the algorithms first compute a quick result, then if that's not accurate enough, discard it and fall back on a slower algorithm.</p>

<p>Older 32-bit versions of GCC/glibc used the <code>fsin</code> instruction, which is surprisingly inaccurate for some inputs. There's a <a href=""http://randomascii.wordpress.com/2014/10/09/intel-underestimates-error-bounds-by-1-3-quintillion/"" rel=""noreferrer"">fascinating blog post illustrating this with just 2 lines of code</a>.</p>

<p>fdlibm's implementation of <code>sin</code> in pure C is much simpler than glibc's and is nicely commented. Source code: <a href=""http://www.netlib.org/fdlibm/s_sin.c"" rel=""noreferrer"">fdlibm/s_sin.c</a> and <a href=""http://www.netlib.org/fdlibm/k_sin.c"" rel=""noreferrer"">fdlibm/k_sin.c</a></p>
","2285277"
"What is the newline character in the C language: \r or \n?","121446","","<p>What is the newline character in C? I know that different OS have different line-ending characters, but they get translated into the C newline character. What is that character?</p>
","<p>It's <code>\n</code>. When you're reading or writing text mode files, or to stdin/stdout etc, you must use <code>\n</code>, and C will handle the translation for you. When you're dealing with binary files, by definition you are on your own.</p>
","18381664"
"printf not printing on console","121348","","<p>I’m getting started in the C language. I am using eclipse (juno) as my IDE and installed CDT plugin. I have also unpacked mingw64 (GCC Compiler). I wrote a very simple program to see if it works. This is my code:</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
    int age;
    printf(""Hello, please enter your age:\n"");
    scanf(""%d"", &amp;age);
    printf(""Your age is %d"", age);
    return 0;
}
</code></pre>

<p>The problem is that the output buffer is filled with the string value of the first <code>printf</code> but does not output it to the console. I have to enter a number, and only then the buffer pours all the data to the console so I see the console something like this:</p>

<pre><code>1
Hello, please enter your age:
Your age is 1
</code></pre>

<p>instead of what is expected that is:</p>

<pre><code>Hello, please enter your age:
1
Your age is 1
</code></pre>

<p>Now, I found that I can use <code>fflush(stdout)</code> after the first <code>printf</code> but I don't think that this solution is elegant and even necessary. Any ideas on how I can overcome this? </p>

<p><strong>EDIT</strong> - because I'm learning this in my university, I can't use anything that wasn't learned in the course so I can <strong>only</strong> use <code>printf</code> and <code>scanf</code></p>

<p><strong>NEW EDIT</strong> - I think I have found an explanation for this. As I said, I am outputting to the console view inside Eclipse. The strange thing is that if I compile and run the program from the command line of Windows, I get the wanted result. Therefore, I think that eclipse is actually writing the output to a file and presenting it in the console window. How can I force eclipse to open a real command line window in my run configurations?</p>
","<p>Apparently this is a known bug of Eclipse. This bug is resolved with the resolution of WONT-FIX. I have no idea why though. here is the link:
<a href=""https://bugs.eclipse.org/bugs/show_bug.cgi?id=173732"" rel=""nofollow noreferrer"">Eclipse C Console Bug</a>.</p>
","13103838"
"How to convert an enum type variable to a string?","121159","","<p>How to make printf to show the values of variables which are of an enum type? For instance:</p>

<pre><code>typedef enum {Linux, Apple, Windows} OS_type; 
OS_type myOS = Linux;
</code></pre>

<p>and what I need is something like </p>

<pre><code>printenum(OS_type, ""My OS is %s"", myOS);
</code></pre>

<p>which must show a string ""Linux"", not an integer.</p>

<p>I suppose, first I have to create a value-indexed array of strings. But I don't know if that is the most beautiful way to do it. Is it possible at all?</p>
","<p>There really is no beautiful way of doing this. Just set up an array of strings indexed by the enum.</p>

<p>If you do a lot of output, you can define an operator&lt;&lt; that takes an enum parameter and does the lookup for you.</p>
","5093643"
"Assigning strings to arrays of characters","121023","","<p>I am a little surprised by the following.</p>

<p>Example 1:</p>

<pre><code>char s[100] = ""abcd""; // declare and initialize - WORKS
</code></pre>

<p>Example 2:</p>

<pre><code>char s[100]; // declare
s = ""hello""; // initalize - DOESN'T WORK ('lvalue required' error)
</code></pre>

<p>I'm wondering why the second approach doesn't work. It seems natural that it should (it works with other data types)? Could someone explain me the logic behind this?</p>
","<p>When initializing an array, C allows you to fill it with values. so</p>

<pre><code>char s[100] = ""abcd"";
</code></pre>

<p>is basically the same as</p>

<pre><code>int s[3] = { 1, 2, 3 };
</code></pre>

<p>but it doesn't allow you to do the assignmend since s is an array and not a free pointer. the meaning of </p>

<pre><code>s = ""abcd"" 
</code></pre>

<p>is to assign the pointer value of ""abcd"" to 's' but you can't change s since then nothing will point to the array.<br>
This can and does work if s is a <code>char*</code> - a pointer that can point to anything.</p>

<p>if you want to copy the string simple use strcpy</p>
","579758"
"constant pointer vs pointer on a constant value","120485","","<p>What is the difference between the following declarations?</p>

<pre><code>char * const a;
const char * a;
</code></pre>

<p>In order to understand the difference I wrote this small program:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;


int main (int argc, char **argv)
{
    char a = 'x';
    char b = 'y';

    char * const pc1 = &amp;a;
    const char * pc2 = &amp;a;

    printf (""Before\n"");
    printf (""pc1=%p\n"", pc1);
    printf (""*pc1=%c\n"", *pc1);
    printf (""pc2=%p\n"", pc2);
    printf (""*pc2=%c\n"", *pc2);

    *pc1 = b;
/*     pc1 = &amp;b; */

/*     *pc2 = b; */
    pc2 = &amp;b;

    printf (""\n\n"");

    printf (""After\n"");
    printf (""pc1=%p\n"", pc1);
    printf (""*pc1=%c\n"", *pc1);
    printf (""pc2=%p\n"", pc2);
    printf (""*pc2=%c\n"", *pc2);

    return EXIT_SUCCESS;
}
</code></pre>

<p>I compiled the program (with gcc 3.4) and ran it. The output highlights the difference rather well:</p>

<pre><code>Before
pc1=ffbfd7e7
*pc1=x
pc2=ffbfd7e7
*pc2=x


After
pc1=ffbfd7e7
*pc1=y
pc2=ffbfd7e6
*pc2=x
</code></pre>

<p>However, I had to write the small program to get the answer. In case I'm away from the machine (at an interview for instance), I wouldn't be able to answer the question.</p>

<p>Can someone please explain, by commenting the above example, how the <code>const</code> keyword operates?</p>
","<pre><code>char * const a;
</code></pre>

<p>means that the pointer is constant and immutable but the pointed data is not.<br>
You could use <code>const_cast</code>(in C++) or c-style cast to cast away the constness in this case as data itself is not constant.</p>

<pre><code>const char * a;
</code></pre>

<p>means that the pointed data cannot be written to using the pointer a.
Using a <code>const_cast</code>(C++) or c-style cast  to cast away the constness in this case causes <strong>Undefined Behavior</strong>.</p>
","10091869"
"memcpy() vs memmove()","120125","","<p>I am trying to understand the difference between <a href=""http://en.cppreference.com/w/c/string/byte/memcpy"" rel=""noreferrer""><code>memcpy()</code></a> and <a href=""http://en.cppreference.com/w/c/string/byte/memmove"" rel=""noreferrer""><code>memmove()</code></a>, and I have read the text that <code>memcpy()</code> doesn't take care of the overlapping source and destination whereas <code>memmove()</code> does.</p>

<p>However, when I execute these two functions on overlapping memory blocks, they both give the same result. For instance, take the following MSDN example on the <code>memmove()</code> help page:-</p>

<p>Is there a better example to understand the drawbacks of <code>memcpy</code> and how <code>memmove</code> solves it?</p>

<pre><code>// crt_memcpy.c
// Illustrate overlapping copy: memmove always handles it correctly; memcpy may handle
// it correctly.

#include &lt;memory.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

char str1[7] = ""aabbcc"";

int main( void )
{
    printf( ""The string: %s\n"", str1 );
    memcpy( str1 + 2, str1, 4 );
    printf( ""New string: %s\n"", str1 );

    strcpy_s( str1, sizeof(str1), ""aabbcc"" );   // reset string

    printf( ""The string: %s\n"", str1 );
    memmove( str1 + 2, str1, 4 );
    printf( ""New string: %s\n"", str1 );
}
</code></pre>

<h3>Output:</h3>

<pre><code>The string: aabbcc
New string: aaaabb
The string: aabbcc
New string: aaaabb
</code></pre>
","<p>I'm not entirely surprised that your example exhibits no strange behaviour. Try copying <code>str1</code> to <code>str1+2</code> instead and see what happens then. (May not actually make a difference, depends on compiler/libraries).</p>

<p>In general, memcpy is implemented in a simple (but fast manner). Simplistically, it just loops over the data (in order), copying from one location to the other. This can result in the source being overwritten while it's being read.</p>

<p>Memmove does more work to ensure it handles the overlap correctly.</p>

<p>EDIT:</p>

<p>(unfortunately, I can't find decent examples, but these will do). Contrast the <a href=""http://clc-wiki.net/wiki/memcpy"" rel=""noreferrer"">memcpy</a> and <a href=""http://clc-wiki.net/wiki/memmove"" rel=""noreferrer"">memmove</a> implementations shown here. memcpy just loops, while memmove performs a test to determine which direction to loop in to avoid corrupting the data. These implementations are rather simple. Most high-performance implementations are more complicated (involving copying word-size blocks at a time rather than bytes).</p>
","4415926"
"Where does linux store my syslog?","119855","","<p>I wrote a simple test application to log something in a log file. I am using <b>linux mint</b> and after the application executes I try to view the log using this command: </p>

<pre><code>tail -n 100 /var/log/messages
</code></pre>

<p>but the file messages does not exist neither tested or something. Below you can find my code. Maybe I am doing something wrong, the file isn't stored there or I need to enable logging in linux mint.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;syslog.h&gt;

void init_log()
{
    setlogmask(LOG_UPTO(LOG_NOTICE));
    openlog(""testd"",LOG_CONS | LOG_PID | LOG_NDELAY, LOG_LOCAL1);
}

int main(void) {

    init_log();
    printf(""Session started!"");
    syslog(LOG_NOTICE, ""Session started!!"");
    closelog();

    return EXIT_SUCCESS;
}
</code></pre>
","<p>On my Ubuntu machine, I can see the output at <code>/var/log/syslog</code>.</p>

<p>As noted by others, your <code>syslog()</code> output would be logged by the <code>/var/log/syslog</code> file.<br>
You can see system, user, and other logs at <code>/var/log</code>.</p>

<p>For more details: here's an <a href=""http://www.cyberciti.biz/faq/linux-log-files-location-and-how-do-i-view-logs-files/"">interesting link</a>.</p>
","10979779"
"Should I learn C before learning C++?","119798","","<p>I visited a university CS department open day today and in the labs tour we sat down to play with a couple of final-year projects from undergraduate students. One was particularly good - a sort of FPS asteroids game. I decided to take a peek in the <code>src</code> directory to find it was done in C++ (most of the other projects were Java 3D apps).</p>

<p>I haven't done any C before but I have looked through some C code before. From what I saw in the .cpp code in this game it didn't look very different.</p>

<p>I'm interested in learning either C or C++ but will probably learn the other later on. <strong>Is there any advantage to me learning one before the other</strong> and <strong>if so, which one?</strong></p>
","<p>There is no need to learn C before learning C++.  </p>

<p><strong>They are different languages</strong>.  It is a common misconception that C++ is in some way dependent on C and not a fully specified language on its own. </p>

<p>Just because C++ shares a lot of the same syntax and a lot of the same semantics, does not mean you need to learn C first.   </p>

<p>If you learn C++ you will eventually learn most of C with some differences between the languages that you will learn over time.  In fact its a very hard thing to write proper C++ because intermediate C++ programmers tend to write C/C++.That is true whether or not you started with C or started with C++.</p>

<p>If you know C first, then that is good plus to learning C++.  You will start with knowing a chunk of the language.  If you do not know C first then there is no point focusing on a different language.  There are plenty of good books and tutorials available that start you from knowing nothing and will cover anything you would learn from C which applies to C++ as well. </p>

<p><a href=""https://stackoverflow.com/questions/145096/is-it-true-that-there-is-no-need-to-learn-c-because-c-contains-everything/145098#145098"">Please see further reasoning in this answer</a>.</p>
","598555"
"how to get thread id of a pthread in linux c program?","119719","","<p>In linux c program, how to print thread id of a thread created by pthread library?<br>
for ex: we can get pid of a process by <code>getpid()</code></p>
","<p><code>pthread_self()</code> function will give the thread id of current thread. </p>

<pre><code>pthread_t pthread_self(void);
</code></pre>

<p>The <code>pthread_self()</code> function returns the Pthread handle of the calling thread. The pthread_self() function does NOT return the integral thread of the calling thread. You must use <code>pthread_getthreadid_np()</code> to return an integral identifier for the thread.</p>

<p>NOTE:</p>

<pre><code>pthread_id_np_t   tid;
tid = pthread_getthreadid_np();
</code></pre>

<p>is significantly faster than these calls, but provides the same behavior.</p>

<pre><code>pthread_id_np_t   tid;
pthread_t         self;
self = pthread_self();
pthread_getunique_np(&amp;self, &amp;tid);
</code></pre>
","21206357"
"Incompatible implicit declaration of built-in function ‘malloc’","119370","","<p>I'm getting this error:</p>

<blockquote>
  <p>warning: incompatible implicit declaration of built-in function ‘malloc’</p>
</blockquote>

<p>I am trying to do this:</p>

<pre><code>fileinfo_list* tempList = malloc(sizeof(fileinfo_list));
</code></pre>

<p>Just for the reference the struct used at hand is:</p>

<pre><code>typedef struct {
    fileinfo** filedata;
    size_t nFiles;
    size_t size;
    size_t fileblock;
} fileinfo_list;
</code></pre>

<p>I don't see anything wrong with what I've done. I'm just creating a <code>tempList</code> with the size of 1 x <code>fileinfo_list</code>.</p>
","<p>You likely forgot to include <code>&lt;stdlib.h&gt;</code>.</p>
","7050806"
"Rounding up to next power of 2","118819","","<p>I want to write a function that returns the nearest next power of 2 number. For example if my input is 789, the output should be 1024. Is there any way of achieving this without using any loops but just using some bitwise operators?</p>
","<p>Check the <a href=""https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2"" rel=""noreferrer"">Bit Twiddling Hacks</a>. You need to get the base 2 logarithm, then add 1 to that.</p>

<blockquote>
  <p>Round up to the next highest power of 2</p>

<pre><code>unsigned int v; // compute the next highest power of 2 of 32-bit v

v--;
v |= v &gt;&gt; 1;
v |= v &gt;&gt; 2;
v |= v &gt;&gt; 4;
v |= v &gt;&gt; 8;
v |= v &gt;&gt; 16;
v++;
</code></pre>
</blockquote>
","466242"
"Initializing entire 2D array with one value","118444","","<p>With the following declaration </p>

<pre><code>int array[ROW][COLUMN]={0};
</code></pre>

<p>I get the array with all zeroes but with the following one</p>

<pre><code>int array[ROW][COLUMN]={1};
</code></pre>

<p>I don’t get the array with all one value. The default value is still 0.</p>

<p>Why this behavior and how can I initialize with all 1?</p>

<p>EDIT: I have just understood that using <code>memset</code> with value as 1, will set each byte as 1 and hence the actual value of each array cell wont be 1 but <code>16843009</code>. How do I set it to 1?</p>
","<p>You get this behavior, because <code>int array [ROW][COLUMN] = {1};</code> does <strong><em>not</em></strong> mean ""set all items to one"". Let me try to explain how this works step by step.</p>

<p>The explicit, overly clear way of initializing your array would be like this:</p>

<pre><code>#define ROW 2
#define COLUMN 2

int array [ROW][COLUMN] =
{
  {0, 0},
  {0, 0}
};
</code></pre>

<p>However, C allows you to leave out some of the items in an array (or struct/union). You could for example write:</p>

<pre><code>int array [ROW][COLUMN] =
{
  {1, 2}
};
</code></pre>

<p>This means, initialize the first elements to 1 and 2, and the rest of the elements ""as if they had static storage duration"". There is a rule in C saying that all objects of static storage duration, that are not explicitly initialized by the programmer, must be set to zero.</p>

<p>So in the above example, the first row gets set to 1,2 and the next to 0,0 since we didn't give them any explicit values.</p>

<p>Next, there is a rule in C allowing lax brace style. The first example could as well be written as</p>

<pre><code>int array [ROW][COLUMN] = {0, 0, 0, 0};
</code></pre>

<p>although of course this is poor style, it is harder to read and understand. But this rule is convenient, because it allows us to write</p>

<pre><code>int array [ROW][COLUMN] = {0};
</code></pre>

<p>which means: ""initialize the very first column in the first row to 0, and all other items as if they had static storage duration, ie set them to zero.""</p>

<p>therefore, if you attempt</p>

<pre><code>int array [ROW][COLUMN] = {1};
</code></pre>

<p>it means ""initialize the very first column in the first row to 1 and set all other items to zero"".</p>
","15521368"
"Reading a file character by character in C","118130","","<p>Hey everyone, I'm writing a BF interpreter in C and I've run into a problem reading files. I used to use scanf in order to read the first string, but then you couldn't have spaces or comments in your BF code.</p>

<p>Right now here is what I have.</p>

<pre><code>char *readFile(char *fileName)
{
  FILE *file;
  char *code = malloc(1000 * sizeof(char));
  file = fopen(fileName, ""r"");
  do 
  {
    *code++ = (char)fgetc(file);

  } while(*code != EOF);
  return code;
}
</code></pre>

<p>I know the problem arises in how I'm assigning the next char in the file to the code pointer but I'm just not sure what that is.<br>
My pointer knowledge is lacking  which is the point of this exercise.
The interpreter works fine, all using pointers, I'm just having a problem reading files in to it.</p>

<p>(I'm going to implement only reading ""+->&lt;[].,"" into the file later, although if anyone has a good way to do it, it would be great if you'd let me know!) </p>

<p>Thanks in advance</p>
","<p>There are a number of things wrong with your code:</p>

<pre><code>char *readFile(char *fileName)
{
    FILE *file;
    char *code = malloc(1000 * sizeof(char));
    file = fopen(fileName, ""r"");
    do 
    {
      *code++ = (char)fgetc(file);

    } while(*code != EOF);
    return code;
}
</code></pre>

<ol>
<li>What if the file is greater than 1,000 bytes?</li>
<li>You are increasing <code>code</code> each time you read a character, and you return <code>code</code> back to the caller (even though it is no longer pointing at the first byte of the memory block as it was returned by <code>malloc</code>).</li>
<li>You are casting the result of <code>fgetc(file)</code> to <code>char</code>. You need to check for <code>EOF</code> before casting the result to <code>char</code>.</li>
</ol>

<p>It is important to maintain the original pointer returned by <code>malloc</code> so that you can free it later. If we disregard the file size, we can achieve this still with the following:</p>

<pre><code>char *readFile(char *fileName)
{
    FILE *file = fopen(fileName, ""r"");
    char *code;
    size_t n = 0;
    int c;

    if (file == NULL)
        return NULL; //could not open file

    code = malloc(1000);

    while ((c = fgetc(file)) != EOF)
    {
        code[n++] = (char) c;
    }

    // don't forget to terminate with the null character
    code[n] = '\0';        

    return code;
}
</code></pre>

<p>There are various system calls that will give you the size of a file; a common one is <a href=""http://pubs.opengroup.org/onlinepubs/009695399/functions/stat.html"" rel=""noreferrer""><code>stat</code></a>.</p>
","4823209"
"How to convert an ascii character into an int in C","118075","","<p>How can I convert an ascii character into an int in C?</p>
","<p>What about:</p>

<pre><code>int a_as_int = (int)'a';
</code></pre>
","5322080"
"Creating a daemon in Linux","118056","","<p>In Linux I want to add a daemon that cannot be stopped and which monitors filesystem changes.
If any changes are detected, it should write the path to the console where it was started plus a newline.</p>

<p>I already have the filesystem changing code almost ready but I cannot figure out how to create a daemon.</p>

<p>My code is from here: <a href=""http://www.yolinux.com/TUTORIALS/ForkExecProcesses.html"">http://www.yolinux.com/TUTORIALS/ForkExecProcesses.html</a></p>

<p>What to do after the fork?</p>

<pre><code>int main (int argc, char **argv) {

  pid_t pID = fork();
  if (pID == 0)  {              // child
          // Code only executed by child process    
      sIdentifier = ""Child Process: "";
    }
    else if (pID &lt; 0) {
        cerr &lt;&lt; ""Failed to fork"" &lt;&lt; endl;
        exit(1);
       // Throw exception
    }
    else                                   // parent
    {
      // Code only executed by parent process

      sIdentifier = ""Parent Process:"";
    }       

    return 0;
}
</code></pre>
","<blockquote>
  <p>In Linux i want to add a daemon that cannot be stopped and which monitors filesystem changes. If any changes would be detected it should write the path to the console where it was started + a newline.</p>
</blockquote>

<p>Daemons work in the background and (usually...) don't belong to a TTY that's why you can't use stdout/stderr in the way you probably want.
Usually a syslog daemon (<em>syslogd</em>) is used for logging messages to files (debug, error,...).</p>

<p>Besides that, there are a few <em>required steps</em> to daemonize a process.</p>

<hr>

<p>If I remember correctly these steps are:</p>

<ul>
<li><strong>fork</strong> off the parent process &amp; let it terminate if forking was successful. -> Because the parent process has terminated, the child process now runs in the background.</li>
<li><strong>setsid</strong> - Create a new session. The calling process becomes the leader of the new session and the process group leader of the new process group. The process is now detached from its controlling terminal (CTTY).</li>
<li><strong>Catch signals</strong> - Ignore and/or handle signals.</li>
<li><strong>fork again</strong> &amp; let the parent process terminate to ensure that you get rid of the session leading process. (Only session leaders may get a TTY again.)</li>
<li><strong>chdir</strong> - Change the working directory of the daemon.</li>
<li><strong>umask</strong> - Change the file mode mask according to the needs of the daemon.</li>
<li><strong>close</strong> - Close all open file descriptors that may be inherited from the parent process.</li>
</ul>

<hr>

<p>To give you a starting point: Look at this skeleton code that shows the basic steps:</p>

<pre class=""lang-c prettyprint-override""><code>/*
 * daemonize.c
 * This example daemonizes a process, writes a few log messages,
 * sleeps 20 seconds and terminates afterwards.
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;signal.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;syslog.h&gt;

static void skeleton_daemon()
{
    pid_t pid;

    /* Fork off the parent process */
    pid = fork();

    /* An error occurred */
    if (pid &lt; 0)
        exit(EXIT_FAILURE);

    /* Success: Let the parent terminate */
    if (pid &gt; 0)
        exit(EXIT_SUCCESS);

    /* On success: The child process becomes session leader */
    if (setsid() &lt; 0)
        exit(EXIT_FAILURE);

    /* Catch, ignore and handle signals */
    //TODO: Implement a working signal handler */
    signal(SIGCHLD, SIG_IGN);
    signal(SIGHUP, SIG_IGN);

    /* Fork off for the second time*/
    pid = fork();

    /* An error occurred */
    if (pid &lt; 0)
        exit(EXIT_FAILURE);

    /* Success: Let the parent terminate */
    if (pid &gt; 0)
        exit(EXIT_SUCCESS);

    /* Set new file permissions */
    umask(0);

    /* Change the working directory to the root directory */
    /* or another appropriated directory */
    chdir(""/"");

    /* Close all open file descriptors */
    int x;
    for (x = sysconf(_SC_OPEN_MAX); x&gt;=0; x--)
    {
        close (x);
    }

    /* Open the log file */
    openlog (""firstdaemon"", LOG_PID, LOG_DAEMON);
}
</code></pre>

 <pre class=""lang-c prettyprint-override""><code>int main()
{
    skeleton_daemon();

    while (1)
    {
        //TODO: Insert daemon code here.
        syslog (LOG_NOTICE, ""First daemon started."");
        sleep (20);
        break;
    }

    syslog (LOG_NOTICE, ""First daemon terminated."");
    closelog();

    return EXIT_SUCCESS;
}
</code></pre>

<p><br></p>

<ul>
<li>Compile the code: <code>gcc -o firstdaemon daemonize.c</code></li>
<li>Start the daemon: <code>./firstdaemon</code></li>
<li><p>Check if everything is working properly: <code>ps -xj | grep firstdaemon</code></p></li>
<li><p>The output should be similar to this one:</p></li>
</ul>

<pre>
+------+------+------+------+-----+-------+------+------+------+-----+
| PPID | PID  | PGID | SID  | TTY | TPGID | STAT | UID  | TIME | CMD |
+------+------+------+------+-----+-------+------+------+------+-----+
|    1 | 3387 | 3386 | 3386 | ?   |    -1 | S    | 1000 | 0:00 | ./  |
+------+------+------+------+-----+-------+------+------+------+-----+
</pre>

<p><strong>What you should see here is:</strong></p>

<ul>
<li>The daemon has no controlling terminal (<strong>TTY = ?</strong>)</li>
<li>The parent process ID (<strong>PPID</strong>) is <strong>1</strong> (The init process)</li>
<li>The <strong>PID != SID</strong> which means that our process is NOT the session leader<br>
(because of the second fork())</li>
<li>Because PID != SID our process <strong>can't take control of a TTY again</strong></li>
</ul>

<p><strong>Reading the syslog:</strong></p>

<ul>
<li>Locate your syslog file. Mine is here: <code>/var/log/syslog</code></li>
<li><p>Do a: <code>grep firstdaemon /var/log/syslog</code></p></li>
<li><p>The output should be similar to this one:</p></li>
</ul>

<pre>
  firstdaemon[3387]: First daemon started.
  firstdaemon[3387]: First daemon terminated.
</pre>

<p><br>
<strong>A note:</strong>
In reality you would also want to implement a signal handler and set up the logging properly (Files, log levels...).</p>

<p><strong>Further reading:</strong></p>

<ul>
<li><a href=""http://openbook.galileocomputing.de/linux_unix_programmierung/Kap07-000.htm#Xxx999234"" rel=""noreferrer"">Linux-UNIX-Programmierung - German</a></li>
<li><a href=""http://www.enderunix.org/docs/eng/daemon.php"" rel=""noreferrer"">Unix Daemon Server Programming</a></li>
</ul>
","17955149"
"C fopen vs open","118025","","<p>Is there any reason (other than syntactic ones) that you'd want to use </p>

<pre><code>FILE *fdopen(int fd, const char *mode);
</code></pre>

<p>or</p>

<pre><code>FILE *fopen(const char *path, const char *mode);
</code></pre>

<p>instead of </p>

<pre><code>int open(const char *pathname, int flags, mode_t mode);
</code></pre>

<p>when using C in a Linux environment?</p>
","<p>There are four main reasons to use fopen instead of open.</p>

<ol>
<li><code>fopen</code> provides you with buffering IO that may turn out to be a lot faster than what you're doing with <code>open</code>.</li>
<li><code>fopen</code> does line ending translation if the file is not opened in binary mode, which can be very helpful if your program is ever ported to a non-Unix environment.</li>
<li>A <code>FILE *</code> gives you the ability to use <code>fscanf</code> and other stdio functions.</li>
<li>Your code may someday need to be ported to some other platform that only supports ANSI C and does not support the <code>open</code> function.</li>
</ol>

<p>In my opinion the line ending translation more often gets in your way than helps you, and the parsing of fscanf is so weak that you inevitably end up tossing it out in favor of something more useful.</p>

<p>And most platforms that support C have an <code>open</code> function.</p>

<p>That leaves the buffering question.  In places where you are mainly reading or writing a file sequentially, the buffering support is really helpful and a big speed improvement.  But it can lead to some interesting problems in which data does not end up in the file when you expect it to be there.  You have to remember to <code>fclose</code> or <code>fflush</code> at the appropriate times.</p>

<p>If you're doing seeks, the usefulness of buffering quickly goes down.</p>

<p>Of course, my bias is that I tend to work with sockets a whole lot, and there the fact that you really want to be doing non-blocking IO (which <code>FILE *</code> totally fails to support in any reasonable way) with no buffering at all and often have complex parsing requirements really color my perceptions.</p>
","1658517"
"How to work with complex numbers in C?","117697","","<p>How can I work with complex numbers in C? I see there is a <code>complex.h</code> header file, but it doesn't give me much information about how to use it. How to access real and imaginary parts in an efficient way? Is there native functions to get module and phase?</p>
","<p>This code will help you, and it's fairly self-explanatory:</p>

<pre><code>#include &lt;stdio.h&gt;      /* Standard Library of Input and Output */
#include &lt;complex.h&gt;    /* Standard Library of Complex Numbers */

int main() {

    double complex z1 = 1.0 + 3.0 * I;
    double complex z2 = 1.0 - 4.0 * I;

    printf(""Working with complex numbers:\n\v"");

    printf(""Starting values: Z1 = %.2f + %.2fi\tZ2 = %.2f %+.2fi\n"", creal(z1), cimag(z1), creal(z2), cimag(z2));

    double complex sum = z1 + z2;
    printf(""The sum: Z1 + Z2 = %.2f %+.2fi\n"", creal(sum), cimag(sum));

    double complex difference = z1 - z2;
    printf(""The difference: Z1 - Z2 = %.2f %+.2fi\n"", creal(difference), cimag(difference));

    double complex product = z1 * z2;
    printf(""The product: Z1 x Z2 = %.2f %+.2fi\n"", creal(product), cimag(product));

    double complex quotient = z1 / z2;
    printf(""The quotient: Z1 / Z2 = %.2f %+.2fi\n"", creal(quotient), cimag(quotient));

    double complex conjugate = conj(z1);
    printf(""The conjugate of Z1 = %.2f %+.2fi\n"", creal(conjugate), cimag(conjugate));

    return 0;
}
</code></pre>

<p>&nbsp;
with:</p>

<p><strong><code>creal(z1)</code>:</strong> get the real part (for float <code>crealf(z1)</code>, for long double <code>creall(z1)</code>)</p>

<p><strong><code>cimag(z1)</code>:</strong> get the imaginary part (for float <code>cimagf(z1)</code>, for long double <code>cimagl(z1)</code>)</p>

<p>Another important point to remember when working with complex numbers is that functions like <code>cos()</code>, <code>exp()</code> and <code>sqrt()</code> must be replaced with their complex forms, e.g. <code>ccos()</code>, <code>cexp()</code>, <code>csqrt()</code>. </p>
","9860772"
"Getting multiple values with scanf()","117623","","<p>I am using scanf() to get a set of ints from the user. But I would like the user to supply all 4 ints at once instead of 4 different promps. I know I can get one value by doing:</p>

<pre><code>scanf( ""%i"", &amp;minx);
</code></pre>

<p>But I would like the user to be able to do something like:</p>

<pre><code>Enter Four Ints: 123 234 345 456
</code></pre>

<p>Is it possible to do this?</p>
","<p>You can do this with a single call, like so:</p>

<pre><code>scanf( ""%i %i %i %i"", &amp;minx, &amp;maxx, &amp;miny, &amp;maxy);
</code></pre>
","1412524"
"How to pass 2D array (matrix) in a function in C?","117440","","<p>I need to do this to persist operations on the matrix as well. Does that mean that it needs to be passed by reference? </p>

<p>Will this suffice?</p>

<p><code>void operate_on_matrix(char matrix[][20]);</code></p>
","<p>C does not really have multi-dimensional arrays, but there are several ways to simulate them. The way to pass such arrays to a function depends on the way used to simulate the multiple dimensions:</p>

<p>1) Use an array of arrays. This can only be used if your array bounds are fully determined at compile time, or if your compiler supports <a href=""http://en.wikipedia.org/wiki/Variable-length_array"" rel=""noreferrer"">VLA's</a>:</p>

<pre><code>#define ROWS 4
#define COLS 5

void func(int array[ROWS][COLS])
{
  int i, j;

  for (i=0; i&lt;ROWS; i++)
  {
    for (j=0; j&lt;COLS; j++)
    {
      array[i][j] = i*j;
    }
  }
}

void func_vla(int rows, int cols, int array[rows][cols])
{
  int i, j;

  for (i=0; i&lt;rows; i++)
  {
    for (j=0; j&lt;cols; j++)
    {
      array[i][j] = i*j;
    }
  }
}

int main()
{
  int x[ROWS][COLS];

  func(x);
  func_vla(x, rows, cols);
}
</code></pre>

<p>2) Use a (dynamically allocated) array of pointers to (dynamically allocated) arrays. This is used mostly when the array bounds are not known until runtime.</p>

<pre><code>void func(int** array, int rows, int cols)
{
  int i, j;

  for (i=0; i&lt;rows; i++)
  {
    for (j=0; j&lt;cols; j++)
    {
      array[i][j] = i*j;
    }
  }
}

int main()
{
  int rows, cols, i;
  int **x;

  /* obtain values for rows &amp; cols */

  /* allocate the array */
  x = malloc(rows * sizeof *x);
  for (i=0; i&lt;rows; i++)
  {
    x[i] = malloc(cols * sizeof *x[i]);
  }

  /* use the array */
  func(x, rows, cols);

  /* deallocate the array */
  for (i=0; i&lt;rows; i++)
  {
    free(x[i]);
  }
  free(x);
}
</code></pre>

<p>3) Use a 1-dimensional array and fixup the indices. This can be used with both statically allocated (fixed-size) and dynamically allocated arrays:</p>

<pre><code>void func(int* array, int rows, int cols)
{
  int i, j;

  for (i=0; i&lt;rows; i++)
  {
    for (j=0; j&lt;cols; j++)
    {
      array[i*cols+j]=i*j;
    }
  }
}

int main()
{
  int rows, cols;
  int *x;

  /* obtain values for rows &amp; cols */

  /* allocate the array */
  x = malloc(rows * cols * sizeof *x);

  /* use the array */
  func(x, rows, cols);

  /* deallocate the array */
  free(x);
}
</code></pre>
","3912959"
"True and False for && logic and || Logic table","117135","","<h1>Table true/false for C Language</h1>

<p>I have heard of a table true false for C Language for and &amp;&amp; or || is kind of the mathematics one for which they say if true+true=true and false+true=false</p>

<p>I'm just kind of confuse on this and I tried to do the research but couldn't find any of the table</p>

<p>I just wish to have this table for my notes since I will do more in C language</p>

<p>if someone could bring me to the site or resources where they explain about this more</p>

<hr>

<p>I've edited my original question to make it a note for my own study. Thanks @thiton for the great references and the rest for an awesome answer/resources.</p>

<p><strong><code>Logical AND (&amp;&amp;)</code></strong></p>

<p><code>false &amp;&amp; false: false</code></p>

<p><code>false &amp;&amp; true: false</code></p>

<p><code>true &amp;&amp; false: false</code></p>

<p><code>true &amp;&amp; true: true</code></p>

<p><strong>Logical OR (||)</strong></p>

<p><code>false || false: false</code></p>

<p><code>false || true: true</code></p>

<p><code>true || false: true</code></p>

<p><code>true || true: true</code></p>

<p><strong>Logical NOT (!)</strong></p>

<p><code>!false: true</code></p>

<p><code>!true: false</code></p>
","<p>You probably mean a truth table for the boolean operators, which displays the result of the usual boolean operations (&amp;&amp;, ||). This table is not language-specific, but can be found e.g. <a href=""http://www.java2s.com/Tutorial/Cpp/0040__Data-Types/Logicaloperators.htm"" rel=""noreferrer"">here</a>.</p>
","7583895"
".c vs .cc vs. .cpp vs .hpp vs .h vs .cxx","117072","","<blockquote>
  <p><strong>Possible Duplicates:</strong><br>
  <a href=""https://stackoverflow.com/questions/152555/h-or-hpp-for-your-class-definitions"">*.h or *.hpp for your class definitions</a><br>
  <a href=""https://stackoverflow.com/questions/1545080/correct-c-code-file-extension-cc-vs-cpp"">Correct C++ code file extension? .cc vs .cpp</a>  </p>
</blockquote>



<p>I used to think that it used to be that:</p>

<ul>
<li><code>.h</code> files are header files for C and C++, and usually only contain declarations.</li>
<li><code>.c</code> files are C source code.</li>
<li><code>.cpp</code> files are C++ source code (which can also be C source code).</li>
</ul>

<p>then files like <code>.hpp</code>, <code>.cc</code>, and <code>.cxx</code> came along, and I got totally confused... what's the difference(s) between those? When do you use the ""new"" ones?</p>
","<p>Historically, the first extensions used for C++ were <code>.c</code> and <code>.h</code>, exactly like for C.  This caused practical problems, especially the <code>.c</code> which didn't allow build systems to easily differentiate C++ and C files.</p>

<p>Unix, on which C++ has been developed, has case sensitive file systems.  So some used <code>.C</code> for C++ files.  Other used <code>.c++</code>, <code>.cc</code> and <code>.cxx</code>.  <code>.C</code> and <code>.c++</code> have the problem that they aren't available on other file systems and their use quickly dropped. DOS and Windows C++ compilers tended to use <code>.cpp</code>, and some of them make the choice difficult, if not impossible, to configure.  Portability consideration made that choice the most common, even outside MS-Windows.</p>

<p>Headers have used the corresponding <code>.H</code>, <code>.h++</code>, <code>.hh</code>, <code>.hxx</code> and <code>.hpp</code>. But unlike the main files, <code>.h</code> remains to this day a popular choice for C++ even with the disadvantage that it doesn't allow to know if the header can be included in C context or not. Standard headers now have no extension at all.</p>

<p>Additionally, some are using <code>.ii</code>, <code>.ixx</code>, <code>.ipp</code>, <code>.inl</code> for headers providing inline definitions and <code>.txx</code>, <code>.tpp</code> and <code>.tpl</code> for template definitions.  Those are either included in the headers providing the definition, or manually in the contexts where they are needed.</p>

<p>Compilers and tools usually don't care about what extensions are used, but using an extension that they associate with C++ prevents the need to track out how to configure them so they correctly recognize the language used.</p>

<p>2017 edit: the experimental module support of Visual Studio recognize <code>.ixx</code> as a default extension for module interfaces, clang++ is recognizing <code>.c++m</code>, <code>.cppm</code> and <code>.cxxm</code> for the same purpose.</p>
","5171821"
"Pass arguments into C program from command line","116993","","<p>So I'm in Linux and I want to have a program accept arguments when you execute it from the command line.</p>

<p>For example, </p>

<p><code>./myprogram 42 -b -s</code></p>

<p>So then the program would store that number 42 as an int and execute certain parts of code depending on what arguments it gets like -b or -s.</p>
","<p>You could use <a href=""http://www.gnu.org/software/libtool/manual/libc/Getopt.html"" rel=""noreferrer"">getopt</a>.</p>

<pre><code> #include &lt;ctype.h&gt;
 #include &lt;stdio.h&gt;
 #include &lt;stdlib.h&gt;
 #include &lt;unistd.h&gt;

 int
 main (int argc, char **argv)
 {
   int bflag = 0;
   int sflag = 0;
   int index;
   int c;

   opterr = 0;

   while ((c = getopt (argc, argv, ""bs"")) != -1)
     switch (c)
       {
       case 'b':
         bflag = 1;
         break;
       case 's':
         sflag = 1;
         break;
       case '?':
         if (isprint (optopt))
           fprintf (stderr, ""Unknown option `-%c'.\n"", optopt);
         else
           fprintf (stderr,
                    ""Unknown option character `\\x%x'.\n"",
                    optopt);
         return 1;
       default:
         abort ();
       }

   printf (""bflag = %d, sflag = %d\n"", bflag, sflag);

   for (index = optind; index &lt; argc; index++)
     printf (""Non-option argument %s\n"", argv[index]);
   return 0;
 }
</code></pre>
","498326"
"What should be the sizeof(int) on a 64-bit machine?","116976","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/589575/size-of-int-long-etc"">size of int, long, etc</a><br>
  <a href=""https://stackoverflow.com/questions/2331751/does-the-size-of-an-int-depend-on-the-compiler-and-or-processor"">Does the size of an int depend on the compiler and/or processor?</a><br>
  <a href=""https://stackoverflow.com/questions/9689049/what-decides-the-sizeof-an-integer"">What decides the sizeof an integer?</a>  </p>
</blockquote>



<p>I'm using a <code>64-bit</code> machine.</p>

<pre><code>$ uname -m
x86_64
$ file /usr/bin/file
/usr/bin/file: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, stripped
$ 
</code></pre>

<p>When I ran the following program, I got the <code>sizeof(int)</code> as <code>4-bytes</code>.</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    printf(""sizeof(int) = %d bytes\n"", (int) sizeof(int));

    return 0;
}
</code></pre>

<p>If I'm running a <code>16-</code>, <code>32-</code> and <code>64-</code> bit machine, then doesn't it mean that the size of an <code>integer</code> is <code>16-</code>, <code>32-</code> and <code>64-</code> bit respectively?</p>

<p>In my machine, I found the <code>WORD_BIT</code> is <code>32</code>. Shouldn't it be <code>64</code> on a <code>64-bit</code> machine? </p>

<pre><code>$ getconf WORD_BIT
32
$ 
</code></pre>

<p>And, shouldn't the <code>sizeof(int)</code> be <code>64-bits</code> (<code>8 bytes</code>) in the above case?</p>
","<p>Doesn't have to be; ""64-bit machine"" can mean many things, but typically means that the CPU has registers that big.  The sizeof a type is determined by the compiler, which doesn't have to have anything to do with the actual hardware (though it typically does); in fact, different compilers on the same machine can have different values for these.</p>
","10197311"
"#pragma pack effect","116942","","<p>I was wondering if someone could explain to me what the <code>#pragma pack</code> preprocessor statement does, and more importantly, why one would want to use it.</p>

<p>I checked out the <a href=""http://msdn.microsoft.com/en-us/library/2e70t5y1%28VS.80%29.aspx"" rel=""noreferrer"">MSDN page</a>, which offered some insight, but I was hoping to hear more from people with experience. I've seen it in code before, though I can't seem to find where anymore.</p>
","<p><code>#pragma pack</code> instructs the compiler to pack structure members with particular alignment.  Most compilers, when you declare a struct, will insert padding between members to ensure that they are aligned to appropriate addresses in memory (usually a multiple of the type's size).  This avoids the performance penalty (or outright error) on some architectures associated with accessing variables that are not aligned properly.  For example, given 4-byte integers and the following struct:</p>

<pre><code>struct Test
{
   char AA;
   int BB;
   char CC;
};
</code></pre>

<p>The compiler could choose to lay the struct out in memory like this:</p>

<pre><code>|   1   |   2   |   3   |   4   |  

| AA(1) | pad.................. |
| BB(1) | BB(2) | BB(3) | BB(4) | 
| CC(1) | pad.................. |
</code></pre>

<p>and <code>sizeof(Test)</code> would be 4 &times; 3 = 12, even though it only contains 6 bytes of data.  The most common use case for the <code>#pragma</code> (to my knowledge) is when working with hardware devices where you need to ensure that the compiler does not insert padding into the data and each member follows the previous one.  With <code>#pragma pack(1)</code>, the struct above would be laid out like this:</p>

<pre><code>|   1   |

| AA(1) |
| BB(1) |
| BB(2) |
| BB(3) |
| BB(4) |
| CC(1) |
</code></pre>

<p>And <code>sizeof(Test)</code> would be 1 &times; 6 = 6.</p>

<p>With <code>#pragma pack(2)</code>, the struct above would be laid out like this:</p>

<pre><code>|   1   |   2   | 

| AA(1) | pad.. |
| BB(1) | BB(2) |
| BB(3) | BB(4) |
| CC(1) | pad.. |
</code></pre>

<p>And <code>sizeof(Test)</code> would be 2 &times; 4 =  8.</p>
","3318475"
"In C - check if a char exists in a char array","116491","","<p>I'm trying to check if a character belongs to a list/array of invalid characters.</p>

<p>Coming from a Python background, I used to be able to just say :</p>

<pre><code>for c in string:
    if c in invalid_characters:
        #do stuff, etc
</code></pre>

<p>How can I do this with regular C char arrays?</p>
","<p>The equivalent C code looks like this:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

// This code outputs: h is in ""This is my test string""
int main(int argc, char* argv[])
{
   const char *invalid_characters = ""hz"";
   char *mystring = ""This is my test string"";
   char *c = mystring;
   while (*c)
   {
       if (strchr(invalid_characters, *c))
       {
          printf(""%c is in \""%s\""\n"", *c, mystring);
       }

       c++;
   }

   return 0;
}
</code></pre>

<p>Note that invalid_characters is a C string, ie. a null-terminated <code>char</code> array.</p>
","1071555"
"How to install pywin32 module in windows 7","116436","","<p>I am trying to install pywin32 module. I downloaded it from sourceforge.net. When i run</p>

<pre><code>setup.py install
</code></pre>

<p>It showed ""Unable to find vcvarsall.bat"". I googled about it and found that I have to install mingW and set path then run </p>

<pre><code>python setup.py build --compiler=mingw32
</code></pre>

<p>but it's showing </p>

<pre><code>Can't find a version in Windows.h
</code></pre>

<p>I tried to google it but can't solve the problem. Can anybody help me in this?
(I have visual studio 2010 ultimate trial version installed and mingw c and c++ compilor installed.)  operating system : windows 7.</p>

<p>Can anybody tell me a source from where I can download python binaries already compiled in mingW , so I don't have to do all this. Or if I can get a python which already have windows modules. Thanks in advance.</p>
","<p>are you just trying to install it, or are you looking to build from source?</p>

<p>If you just need to install, the easiest way is to use the MSI installers provided here:</p>

<p><a href=""http://sourceforge.net/projects/pywin32/files/pywin32/"">http://sourceforge.net/projects/pywin32/files/pywin32/</a>
(for updated versions)</p>

<p>make sure you get the correct version (matches Python version, 32bit/64bit, etc)</p>
","4864271"
"Using GCC to produce readable assembly?","116312","","<p>I was wondering how to use <a href=""http://en.wikipedia.org/wiki/GNU_Compiler_Collection"" rel=""noreferrer"">GCC</a> on my C source file to dump a mnemonic version of the machine code so I could see what my code was being compiled into. You can do this with Java but I haven't been able to find a way with GCC.</p>

<p>I am trying to re-write a C method in assembly and seeing how GCC does it would be a big help.</p>
","<p>If you compile with debug symbols, you can use <code>objdump</code> to produce a more readable disassembly.</p>

<pre><code>&gt;objdump --help
[...]
-S, --source             Intermix source code with disassembly
-l, --line-numbers       Include line numbers and filenames in output
</code></pre>

<hr>

<p>Example:</p>

<pre><code>&gt; gcc -g -c test.c
&gt; objdump -d -M intel -S test.o

test.o:     file format elf32-i386


Disassembly of section .text:

00000000 &lt;main&gt;:
#include &lt;stdio.h&gt;

int main(void)
{
   0:   55                      push   ebp
   1:   89 e5                   mov    ebp,esp
   3:   83 e4 f0                and    esp,0xfffffff0
   6:   83 ec 10                sub    esp,0x10
    puts(""test"");
   9:   c7 04 24 00 00 00 00    mov    DWORD PTR [esp],0x0
  10:   e8 fc ff ff ff          call   11 &lt;main+0x11&gt;

    return 0;
  15:   b8 00 00 00 00          mov    eax,0x0
}
  1a:   c9                      leave  
  1b:   c3                      ret
</code></pre>
","1289907"
"How do you compare structs for equality in C?","116262","","<p>How do you compare two instances of structs for equality in standard C?</p>
","<p>C provides no language facilities to do this - you have to do it yourself and compare each structure member by member.</p>
","141724"
"How do I measure a time interval in C?","116106","","<p>I would like to measure time in C, and I am having a tough time figuring it out, all I want is something like this:</p>

<ul>
<li>start a timer</li>
<li>run a method</li>
<li>stop the timer</li>
<li>report the time taken (at least to micro accuracy)</li>
</ul>

<p>Any help would be appreciated.</p>

<p>(I am compiling in windows using mingw)</p>
","<p>High resolution timers that provide a resolution of 1 microsecond are system-specific, so you will have to use different methods to achieve this on different OS platforms. You may be interested in checking out the following article, which implements a cross-platform C++ timer class based on the functions described below:</p>

<ul>
<li><a href=""http://www.songho.ca/misc/timer/timer.html"" rel=""noreferrer"">Song Ho Ahn - High Resolution Timer</a></li>
</ul>

<hr>

<p><strong>Windows</strong></p>

<p>The Windows API provides extremely high resolution timer functions: <code>QueryPerformanceCounter()</code>, which returns the current elapsed ticks, and <code>QueryPerformanceFrequency()</code>, which returns the number of ticks per second. </p>

<p>Example:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;windows.h&gt;                // for Windows APIs
using namespace std;

int main()
{
    LARGE_INTEGER frequency;        // ticks per second
    LARGE_INTEGER t1, t2;           // ticks
    double elapsedTime;

    // get ticks per second
    QueryPerformanceFrequency(&amp;frequency);

    // start timer
    QueryPerformanceCounter(&amp;t1);

    // do something
    // ...

    // stop timer
    QueryPerformanceCounter(&amp;t2);

    // compute and print the elapsed time in millisec
    elapsedTime = (t2.QuadPart - t1.QuadPart) * 1000.0 / frequency.QuadPart;
    cout &lt;&lt; elapsedTime &lt;&lt; "" ms.\n"";

    return 0;
}
</code></pre>

<p><strong>Linux, Unix, and Mac</strong></p>

<p>For Unix or Linux based system, you can use <code>gettimeofday()</code>. This function is declared in ""sys/time.h"".</p>

<p>Example:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;sys/time.h&gt;                // for gettimeofday()
using namespace std;

int main()
{
    struct timeval t1, t2;
    double elapsedTime;

    // start timer
    gettimeofday(&amp;t1, NULL);

    // do something
    // ...

    // stop timer
    gettimeofday(&amp;t2, NULL);

    // compute and print the elapsed time in millisec
    elapsedTime = (t2.tv_sec - t1.tv_sec) * 1000.0;      // sec to ms
    elapsedTime += (t2.tv_usec - t1.tv_usec) / 1000.0;   // us to ms
    cout &lt;&lt; elapsedTime &lt;&lt; "" ms.\n"";

    return 0;
}
</code></pre>

<hr>

<p>Note that the above examples need to be compiled with C++, which <a href=""http://www.mingw.org/"" rel=""noreferrer"">mingw</a> supports.</p>
","2150334"
"How to make child process die after parent exits?","116065","","<p>Suppose I have a process which spawns exactly one child process. Now when the parent process exits for whatever reason (normally or abnormally, by kill, ^C, assert failure or anything else) I want the child process to die. How to do that correctly?</p>

<hr>

<p>Some similar question on stackoverflow:</p>

<ul>
<li>(asked earlier) <a href=""https://stackoverflow.com/questions/269494/how-can-i-cause-a-child-process-to-exit-when-the-parent-does"">How can I cause a child process to exit when the parent does?</a></li>
<li>(asked later) <a href=""https://stackoverflow.com/questions/395877/are-child-processes-created-with-fork-automatically-killed-when-the-parent-is-k"">Are child processes created with fork() automatically killed when the parent is killed?</a></li>
</ul>

<hr>

<p>Some similar question on stackoverflow for <strong>Windows</strong>:  </p>

<ul>
<li><a href=""https://stackoverflow.com/questions/53208/how-do-i-automatically-destroy-child-processes-in-windows"">How do I automatically destroy child processes in Windows?</a>  </li>
<li><a href=""https://stackoverflow.com/questions/3342941/kill-child-process-when-parent-process-is-killed"">Kill child process when parent process is killed</a></li>
</ul>
","<p>Child can ask kernel to deliver <code>SIGHUP</code> (or other signal) when parent dies by specifying option <code>PR_SET_PDEATHSIG</code> in <code>prctl()</code> syscall like this:</p>

<p><code>prctl(PR_SET_PDEATHSIG, SIGHUP);</code></p>

<p>See <code>man 2 prctl</code> for details.</p>

<p>Edit: This is Linux-only</p>
","284443"
"C - The %x format specifier","115724","","<p>I have a small question.  I know that the %x format specifier can be used to read values from the stack in a format string attack.</p>

<p>I found the following code:</p>

<pre><code>%08x%08x%08x%08x
</code></pre>

<p>What does the 08 mean?  What is it doing exactly?  Thanks :)</p>
","<p>Break-down:</p>

<ul>
<li><code>8</code> says that you want to show 8 digits</li>
<li><code>0</code> that you want to prefix with <code>0</code>'s instead of just blank spaces</li>
<li><code>x</code> that you want to print in lower-case hexadecimal.</li>
</ul>

<p>Quick example (thanks to Grijesh Chauhan):</p>

<pre><code>#include &lt;stdio.h&gt;
int main() {
    int data = 29;
    printf(""%x\n"", data);    // just print data
    printf(""%0x\n"", data);   // just print data ('0' on its own has no effect)
    printf(""%8x\n"", data);   // print in 8 width and pad with blank spaces
    printf(""%08x\n"", data);  // print in 8 width and pad with 0's

    return 0;
}
</code></pre>

<p>Output:  </p>

<pre><code>1d
1d
      1d
0000001d
</code></pre>

<p>Also see <a href=""http://www.cplusplus.com/reference/cstdio/printf/"">http://www.cplusplus.com/reference/cstdio/printf/</a> for reference.</p>
","15108990"
"gdb: ""No symbol table is loaded""","115576","","<p>I keep getting this error mesage when trying to add a breakpoint in gdb.</p>

<p>I've used these commands to compile:</p>

<pre><code>gcc -g main.c utmpib2.c -o main.o
and:
cc -g main.c utmpib2.c -o main.o
and also:
g++ -g main.c utmpib2.c -o main.o
</code></pre>

<p>I also tried ""-ggdb"" instead of ""-g"" and I still get that error message.</p>

<p>I then execute gdb:</p>

<pre><code>$gdb
</code></pre>

<p>In gdb:</p>

<pre><code>(gdb)exec-file main.o
(gdb)break 59
No symbol table is loaded. Use the ""file"" command.
</code></pre>
","<p>First of all, what you have is a fully compiled program, not an object file, so drop the <code>.o</code> extension. Now, pay attention to what the error message says, it tells you <em>exactly</em> how to fix your problem: ""No symbol table is loaded. <strong><em>Use the ""file"" command</em></strong>.""</p>

<pre><code>(gdb) exec-file test
(gdb) b 2
No symbol table is loaded.  Use the ""file"" command.
(gdb) file test
Reading symbols from /home/user/test/test...done.
(gdb) b 2
Breakpoint 1 at 0x80483ea: file test.c, line 2.
(gdb) 
</code></pre>

<p>Or just pass the program on the command line.</p>

<pre><code>$ gdb test
GNU gdb (GDB) 7.4
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
[...]
Reading symbols from /home/user/test/test...done.
(gdb) b 2
Breakpoint 1 at 0x80483ea: file test.c, line 2.
(gdb) 
</code></pre>
","9246374"
"C99 stdint.h header and MS Visual Studio","115507","","<p>To my amazement I just discovered that the C99 stdint.h is missing from MS Visual Studio 2003 upwards.  I'm sure they have their reasons, but does anyone know where I can download a copy?  Without this header I have no definitions for useful types such as uint32_t, etc.</p>
","<p>Turns out you can download a MS version of this header from:</p>

<p><a href=""https://github.com/mattn/gntp-send/blob/master/include/msinttypes/stdint.h"" rel=""nofollow noreferrer"">https://github.com/mattn/gntp-send/blob/master/include/msinttypes/stdint.h</a></p>

<p>A portable one can be found here:</p>

<p><a href=""http://www.azillionmonkeys.com/qed/pstdint.h"" rel=""nofollow noreferrer"">http://www.azillionmonkeys.com/qed/pstdint.h</a></p>

<p>Thanks to the <a href=""http://stephendoyle.blogspot.com/2008/03/c-tr1-stdinth-still-missing-from-visual.html"" rel=""nofollow noreferrer"">Software Rambling</a>s blog.</p>
","126285"
"Correct way of passing 2 dimensional array into a function","115427","","<p>I have a 2-dimensional array and I am passing it into a function to carry out certain operations.  I'd like to know the correct way of doing it...</p>

<pre><code>#define numRows 3
#define numCols 7
#define TotalNum (numRows*numCols)
int arr[numRows][numCols] = {{0,1,2,3,4,5,6}, {7,8,9,10,11,12,13},{14,15,16,17,18,19,20}};

void display(int **p)
{
    printf(""\n"");
    for (int i = 0; i&lt; numRows;i++)
    {
        for ( int j = 0;j&lt; numCols;j++)
        {
            printf(""%i\t"",p[i][j]);
        }
        printf(""\n"");
    }
}

int main() {
    display(arr);
}
</code></pre>

<p>I get an error message:</p>

<pre><code>'display': cannot convert parameter1 from 'int' to 'int*'
</code></pre>

<p>Is this the correct way of passing a 2-dimensional array into a function?  If not, what is the correct way?</p>
","<p>You should declare your function like this:</p>

<pre><code>void display(int p[][numCols])
</code></pre>

<p>This <a href=""http://c-faq.com/aryptr/pass2dary.html"">C FAQ</a> thoroughly explains why. The gist of it is that arrays decay into pointers <strong>once</strong>, it doesn't happen recursively. An array of arrays decays into a pointer to an array, not into a pointer to a pointer.</p>
","9446729"
"How to define relative paths in Visual Studio Project?","115114","","<p>I have a library and a console application that uses a library. The library has a folder with source and header files.</p>

<p>My project is in a child/inner directory but that library directory that I want to include is in a parent/upper directory.</p>

<p>My project directory:</p>

<pre><code>H:\Gmail_04\gsasl-1.0\lib\libgsaslMain
</code></pre>

<p>Includes files are here:</p>

<pre><code>H:\Gmail_04\gsasl-1.0\src
</code></pre>

<p>How can I use paths relative to the project directory, to include folders that are in a parent/upper directory?</p>
","<p>If I get you right, you need  <code>..\..\src</code></p>
","6895484"
"Why this ""Implicit declaration of function 'X'""?","114858","","<p>I wrote a simple program to find the Sum, average, biggest and smallest number of 3 numbers.
It lets the user to input three (integer) numbers and return the sum, average, max and min.
It has no errors but a warning. Here is my source code:</p>

<p>main.c:</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
    int num1, num2, num3, sum, max, min, avg;

    printf(""Enter Three \""Integer\"" Numbers:"");

    scanf(""%i%i%i"", &amp;num1, &amp;num2, &amp;num3);

    sum = summation(&amp;num1, &amp;num2, &amp;num3);
    avg = average(&amp;sum);
    max = max_val(&amp;num1, &amp;num2, &amp;num3);
    min = min_val(&amp;num1, &amp;num2, &amp;num3);

    printf(""Sum: %i Avg: %i MAX: %i MIN: %i"", sum, avg, max, min);

    return 0;
}

int summation(int *n1, int *n2, int *n3)
{
    int s;
    s = *n1 + *n2 + *n3;

    return s;
}

int average(int *s)
{
    int a;
    a = *s / 3;

    return a;
}

int max_val(int *n1, int *n2, int *n3)
{
    int MAX;

    if (*n1 &gt; *n2) MAX = *n1;
    else if (*n2 &gt; *n3) MAX = *n2;
    else MAX = *n3;

    return MAX;
}

int min_val(int *n1, int *n2, int *n3)
{
    int MIN;

    if (*n1 &lt; *n2) MIN = *n1;
    else if (*n2 &lt; *n3) MIN = *n2;
    else MIN = *n3;

    return MIN;
}
</code></pre>

<p>I think there is no need to make a header file because all functions are in type of ""int"".</p>

<p>When I compile this</p>

<pre><code>gcc main.c -o test
</code></pre>

<p>It says</p>

<pre><code>main.c: In function 'main':
main.c:34:5: warning: implicit declaration of function 'summation' [-Wimplicit-function-declaration]
</code></pre>

<p>Why this warning? I can't find any wrong in that declaration.
What's that?</p>
","<p><code>summation</code> and your other functions are defined <em>after</em> they're used in <code>main</code>, and so the compiler has made a guess about it's signature; in other words, an <em>implicit declaration</em> has been assumed.</p>

<p>You should declare the function before it's used and get rid of the warning. In the C99 specification, this is an error.</p>

<p>Either move the function bodies <em>before</em> <code>main</code>, or include method signatures before <code>main</code>, e.g.:</p>

<pre><code>#include &lt;stdio.h&gt;

int summation(int *, int *, int *);

int main()
{
    // ...
</code></pre>
","12127373"
"How do I get bit-by-bit data from an integer value in C?","114737","","<p>I want to extract bits of a decimal number.</p>

<p>For example, 7 is binary 0111, and I want to get 0 1 1 1  all bits stored in bool. How can I do so?</p>

<p>OK, a loop is not a good option, can I do something else for this?</p>
","<p>If you want the k-th bit of n, then do </p>

<pre><code>(n &amp; ( 1 &lt;&lt; k )) &gt;&gt; k
</code></pre>

<p>Here we create a mask, apply the mask to n, and then right shift the masked value to get just the bit we want. We could write it out more fully as:</p>

<pre><code>    int mask =  1 &lt;&lt; k;
    int masked_n = n &amp; mask;
    int thebit = masked_n &gt;&gt; k;
</code></pre>

<p>You can read more about bit-masking <a href=""http://en.wikipedia.org/wiki/Mask_(computing)"" rel=""noreferrer"">here</a>. </p>

<p>Here is a program:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int *get_bits(int n, int bitswanted){
  int *bits = malloc(sizeof(int) * bitswanted);

  int k;
  for(k=0; k&lt;bitswanted; k++){
    int mask =  1 &lt;&lt; k;
    int masked_n = n &amp; mask;
    int thebit = masked_n &gt;&gt; k;
    bits[k] = thebit;
  }

  return bits;
}

int main(){
  int n=7;

  int  bitswanted = 5;

  int *bits = get_bits(n, bitswanted);

  printf(""%d = "", n);

  int i;
  for(i=bitswanted-1; i&gt;=0;i--){
    printf(""%d "", bits[i]);
  }

  printf(""\n"");
}
</code></pre>
","2249738"
"C/C++ Macro string concatenation","114635","","<pre><code>#define STR1      ""s""
#define STR2      ""1""
#define STR3      STR1 ## STR2
</code></pre>

<p>Is it possible to concatenate have STR3 == ""s1""?
You can do this by passing args to another Macro function.  But is there a direct way?</p>
","<p>If they're both strings you can just do:</p>

<pre><code>#define STR3 STR1 STR2
</code></pre>

<p>The preprocessor automatically concatenates adjacent strings.</p>

<p><strong>EDIT:</strong></p>

<p>As noted below, it's not the preprocessor but the compiler that does the concatenation.</p>
","5256426"
"What is the difference between AF_INET and PF_INET in socket programming?","114171","","<p>What is the difference between AF_INET and PF_INET in socket programming?</p>

<p>I'm confused between using AF_INET and PF_INET in <code>socket()</code> and <code>bind()</code>.</p>

<p>Also, how to give ip-address in <code>sin_addr</code> field?</p>
","<p><a href=""http://beej.us/net2/html/syscalls.html"" rel=""noreferrer"">Beej's famous network programming guide</a> gives a nice explanation:</p>

<blockquote>
  <p>In some documentation, you'll see mention of a mystical ""PF_INET"".
  This is a weird etherial beast that is rarely seen in nature, but I
  might as well clarify it a bit here. Once a long time ago, it was
  thought that maybe a address family (what the ""AF"" in ""AF_INET"" stands
  for) might support several protocols that were referenced by their
  protocol family (what the ""PF"" in ""PF_INET"" stands for).<br>
  That didn't happen. Oh well. So the correct thing to do is to use AF_INET in your
  struct sockaddr_in and PF_INET in your call to socket(). But
  practically speaking, you can use AF_INET everywhere. And, since
  that's what W. Richard Stevens does in his book, that's what I'll do
  here.</p>
</blockquote>
","6737450"
"Algorithm to convert RGB to HSV and HSV to RGB in range 0-255 for both","114035","","<p>I am looking for color space converter from RGB to HSV, specifically for the range 0 to 255 for both color spaces.</p>
","<p>I've used these for a long time - no idea where they came from at this point... Note that the inputs and outputs, except for the angle in degrees, are in the range of 0 to 1.0.</p>

<p>NOTE: this code does no real sanity checking on inputs. Proceed with caution!</p>

<pre><code>typedef struct {
    double r;       // a fraction between 0 and 1
    double g;       // a fraction between 0 and 1
    double b;       // a fraction between 0 and 1
} rgb;

typedef struct {
    double h;       // angle in degrees
    double s;       // a fraction between 0 and 1
    double v;       // a fraction between 0 and 1
} hsv;

static hsv   rgb2hsv(rgb in);
static rgb   hsv2rgb(hsv in);

hsv rgb2hsv(rgb in)
{
    hsv         out;
    double      min, max, delta;

    min = in.r &lt; in.g ? in.r : in.g;
    min = min  &lt; in.b ? min  : in.b;

    max = in.r &gt; in.g ? in.r : in.g;
    max = max  &gt; in.b ? max  : in.b;

    out.v = max;                                // v
    delta = max - min;
    if (delta &lt; 0.00001)
    {
        out.s = 0;
        out.h = 0; // undefined, maybe nan?
        return out;
    }
    if( max &gt; 0.0 ) { // NOTE: if Max is == 0, this divide would cause a crash
        out.s = (delta / max);                  // s
    } else {
        // if max is 0, then r = g = b = 0              
        // s = 0, h is undefined
        out.s = 0.0;
        out.h = NAN;                            // its now undefined
        return out;
    }
    if( in.r &gt;= max )                           // &gt; is bogus, just keeps compilor happy
        out.h = ( in.g - in.b ) / delta;        // between yellow &amp; magenta
    else
    if( in.g &gt;= max )
        out.h = 2.0 + ( in.b - in.r ) / delta;  // between cyan &amp; yellow
    else
        out.h = 4.0 + ( in.r - in.g ) / delta;  // between magenta &amp; cyan

    out.h *= 60.0;                              // degrees

    if( out.h &lt; 0.0 )
        out.h += 360.0;

    return out;
}


rgb hsv2rgb(hsv in)
{
    double      hh, p, q, t, ff;
    long        i;
    rgb         out;

    if(in.s &lt;= 0.0) {       // &lt; is bogus, just shuts up warnings
        out.r = in.v;
        out.g = in.v;
        out.b = in.v;
        return out;
    }
    hh = in.h;
    if(hh &gt;= 360.0) hh = 0.0;
    hh /= 60.0;
    i = (long)hh;
    ff = hh - i;
    p = in.v * (1.0 - in.s);
    q = in.v * (1.0 - (in.s * ff));
    t = in.v * (1.0 - (in.s * (1.0 - ff)));

    switch(i) {
    case 0:
        out.r = in.v;
        out.g = t;
        out.b = p;
        break;
    case 1:
        out.r = q;
        out.g = in.v;
        out.b = p;
        break;
    case 2:
        out.r = p;
        out.g = in.v;
        out.b = t;
        break;

    case 3:
        out.r = p;
        out.g = q;
        out.b = in.v;
        break;
    case 4:
        out.r = t;
        out.g = p;
        out.b = in.v;
        break;
    case 5:
    default:
        out.r = in.v;
        out.g = p;
        out.b = q;
        break;
    }
    return out;     
}
</code></pre>
","6930407"
"What does the ""undefined reference to varName"" in C mean?","113603","","<p>I have 2 files: <code>a.c</code> and <code>b.c</code></p>

<p>In <code>a.c</code> I am sending a signal to a function located in <code>b.c</code></p>

<pre><code>signal(SIGUSR1,doSomething);
</code></pre>

<p>On top of the a.c file, I have:</p>

<pre><code>extern void doSomething (int    sig);
</code></pre>

<p>When I compile, however, I get an error:</p>

<blockquote>
  <p>/tmp/ccCw9Yun.o: In function <code>main':<br>
  a.c:(.text+0xba): undefined reference to</code>doSomething'<br>
  collect2: ld returned 1 exit status</p>
</blockquote>

<p>The following headers are included:</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;
</code></pre>

<p>How do I fix this?</p>
","<p>You need to link both <code>a.o</code> and <code>b.o</code>:</p>

<pre><code>gcc -o program a.c b.c
</code></pre>

<hr>

<p>If you have a <code>main()</code> in each file, you cannot link them together.</p>

<p>However, your <code>a.c</code> file contains a reference to <code>doSomething()</code> and expects to be linked with a source file that defines <code>doSomething()</code> and does not define any function that is defined in <code>a.c</code> (such as <code>main()</code>).</p>

<p>You cannot call a function in Process B from Process A.  You cannot send a signal to a function; you send signals to processes, using the <code>kill()</code> system call.</p>

<p>The <code>signal()</code> function specifies which function in your current process (program) is going to handle the signal when your process receives the signal.</p>

<p>You have some serious work to do understanding how this is going to work - how ProgramA is going to know which process ID to send the signal to.  The code in <code>b.c</code> is going to need to call <code>signal()</code> with <code>dosomething</code> as the signal handler.  The code in <code>a.c</code> is simply going to send the signal to the other process.</p>
","5892081"
"Difference between uint32 and uint32_t","113565","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/11786113/difference-between-different-integer-types"">Difference between different integer types</a>  </p>
</blockquote>



<p>What is the difference between uint32 and uint32_t in C/C++?</p>

<p>Are they OS dependent?</p>

<p>In which case should I use one or another?</p>

<p>Thanks</p>
","<p><code>uint32_t</code> is standard, <code>uint32</code> is not.  That is, if you include <code>&lt;inttypes.h&gt;</code> or <code>&lt;stdint.h&gt;</code>, you will get a definition of <code>uint32_t</code>.  <code>uint32</code> is a typedef in some local code base, but you should not expect it to exist unless you define it yourself.  And defining it yourself is a bad idea.</p>
","13362099"
"fork() and wait() with two child processes","113276","","<p>I need to use the fork() and wait() functions to complete an assignment. We are modelling non-deterministic behaviour and need the program to fork() if there is more than one possible transition.</p>

<p>In order to try and work out how fork and wait work, I have just made a simple program. I think I understand now how the calls work and would be fine if the program only branched once because the parent process could use the exit status from the single child process to determine whether the child process reached the accept state or not.</p>

<p>As you can see from the code that follows though, I want to be able to handle situations where there must be more than one child processes. My problem is that you seem to only be able to set the status using an _exit function once. So, as in my example the exit status that the parent process tests for shows that the first child process issued 0 as it's exit status, but has no information on the second child process.</p>

<p>I tried simply not _exit()-ing on a reject, but then that child process would carry on, and in effect there would seem to be two parent processes.</p>

<p>Sorry for the waffle, but I would be grateful if someone could tell me how my parent process could obtain the status information on more than one child process, or I would be happy for the parent process to only notice accept status's from the child processes, but in that case I would successfully need to exit from the child processes which have a reject status.</p>

<p>My test code is as follows:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;errno.h&gt;
#include &lt;sys/wait.h&gt;

int main(void)  {

    pid_t child_pid, wpid, pid;
    int status = 0;
    int i;

    int a[3] = {1, 2, 1};
    for(i = 1; i &lt; 3; i++)  {
        printf(""i = %d\n"", i);
        pid = getpid();
        printf(""pid after i = %d\n"", pid);
        if((child_pid = fork()) == 0)  {
            printf(""In child process\n"");
            pid = getpid();
            printf(""pid in child process is %d\n"", pid);
            /* Is a child process */
            if(a[i] &lt; 2)  {
                printf(""Should be accept\n"");
                _exit(1);
            } else  {
                printf(""Should be reject\n"");
                _exit(0);
            }
        }
    }

    if(child_pid &gt; 0)  {
        /* Is the parent process */
        pid = getpid();
        printf(""parent_pid = %d\n"", pid);
        wpid = wait(&amp;status);
        if(wpid != -1)  {
            printf(""Child's exit status was %d\n"", status);
            if(status &gt; 0)  {
                printf(""Accept\n"");
            } else  {
                printf(""Complete parent process\n"");
                if(a[0] &lt; 2)  {
                    printf(""Accept\n"");
                } else  {
                    printf(""Reject\n"");
                }
            }
        }
    }
    return 0;
}
</code></pre>
","<p>It looks to me as though the basic problem is that you have one <code>wait()</code> call rather than a loop that waits until there are no more children.  You also only wait if the last <code>fork()</code> is successful rather than if at least one <code>fork()</code> is successful.</p>

<p>You should only use <code>_exit()</code> if you don't want normal cleanup operations - such as flushing open file streams including <code>stdout</code>.  There are occasions to use <code>_exit()</code>; this is not one of them.  (In this example, you could also, of course, simply have the children return instead of calling <code>exit()</code> directly because returning from <code>main()</code> is equivalent to exiting with the returned status.  However, most often you would be doing the forking and so on in a function other than <code>main()</code>, and then <code>exit()</code> is often appropriate.)</p>

<hr>

<p>Hacked, simplified version of your code that gives the diagnostics I'd want.  Note that your <code>for</code> loop skipped the first element of the array (mine doesn't).</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/wait.h&gt;

int main(void)
{
    pid_t child_pid, wpid;
    int status = 0;
    int i;
    int a[3] = {1, 2, 1};

    printf(""parent_pid = %d\n"", getpid());
    for (i = 0; i &lt; 3; i++)
    {
        printf(""i = %d\n"", i);
        if ((child_pid = fork()) == 0)
        {
            printf(""In child process (pid = %d)\n"", getpid());
            if (a[i] &lt; 2)
            {
                printf(""Should be accept\n"");
                exit(1);
            }
            else
            {
                printf(""Should be reject\n"");
                exit(0);
            }
            /*NOTREACHED*/
        }
    }

    while ((wpid = wait(&amp;status)) &gt; 0)
    {
        printf(""Exit status of %d was %d (%s)\n"", (int)wpid, status,
               (status &gt; 0) ? ""accept"" : ""reject"");
    }
    return 0;
}
</code></pre>

<p>Example output (MacOS X 10.6.3):</p>

<pre><code>parent_pid = 15820
i = 0
i = 1
In child process (pid = 15821)
Should be accept
i = 2
In child process (pid = 15822)
Should be reject
In child process (pid = 15823)
Should be accept
Exit status of 15823 was 256 (accept)
Exit status of 15822 was 0 (reject)
Exit status of 15821 was 256 (accept)
</code></pre>
","2708512"
"Differences between fork and exec","113153","","<p>What are the differences between <code>fork</code> and <code>exec</code>?</p>
","<p>The use of <code>fork</code> and <code>exec</code> exemplifies the spirit of UNIX in that it provides a very simple way to start new processes.</p>

<p>The <code>fork</code> call basically makes a duplicate of the current process, identical in <em>almost</em> every way (not everything is copied over, for example, resource limits in some implementations but the idea is to create as close a copy as possible).</p>

<p>The new process (child) gets a different process ID (PID) and has the PID of the old process (parent) as its parent PID (PPID). Because the two processes are now running exactly the same code, they can tell which is which by the return code of <code>fork</code> - the child gets 0, the parent gets the PID of the child. This is all, of course, assuming the <code>fork</code> call works - if not, no child is created and the parent gets an error code.</p>

<p>The <code>exec</code> call is a way to basically replace the entire current process with a new program. It loads the program into the current process space and runs it from the entry point.</p>

<p>So, <code>fork</code> and <code>exec</code> are often used in sequence to get a new program running as a child of a current process. Shells typically do this whenever you try to run a program like <code>find</code> - the shell forks, then the child loads the <code>find</code> program into memory, setting up all command line arguments, standard I/O and so forth.</p>

<p>But they're not required to be used together. It's perfectly acceptable for a program to <code>fork</code> itself without <code>exec</code>ing if, for example, the program contains both parent and child code (you need to be careful what you do, each implementation may have restrictions). This was used quite a lot (and still is) for daemons which simply listen on a TCP port and <code>fork</code> a copy of themselves to process a specific request while the parent goes back to listening.</p>

<p>Similarly, programs that know they're finished and just want to run another program don't need to <code>fork</code>, <code>exec</code> and then <code>wait</code> for the child. They can just load the child directly into their process space.</p>

<p>Some UNIX implementations have an optimized <code>fork</code> which uses what they call copy-on-write. This is a trick to delay the copying of the process space in <code>fork</code> until the program attempts to change something in that space. This is useful for those programs using only <code>fork</code> and not <code>exec</code> in that they don't have to copy an entire process space.</p>

<p>If the <code>exec</code> <em>is</em> called following <code>fork</code> (and this is what happens mostly), that causes a write to the process space and it is then copied for the child process.</p>

<p>Note that there is a whole family of <code>exec</code> calls (<code>execl</code>, <code>execle</code>, <code>execve</code> and so on) but <code>exec</code> in context here means any of them.</p>

<p>The following diagram illustrates the typical <code>fork/exec</code> operation where the <code>bash</code> shell is used to list a directory with the <code>ls</code> command:</p>

<pre><code>+--------+
| pid=7  |
| ppid=4 |
| bash   |
+--------+
    |
    | calls fork
    V
+--------+             +--------+
| pid=7  |    forks    | pid=22 |
| ppid=4 | ----------&gt; | ppid=7 |
| bash   |             | bash   |
+--------+             +--------+
    |                      |
    | waits for pid 22     | calls exec to run ls
    |                      V
    |                  +--------+
    |                  | pid=22 |
    |                  | ppid=7 |
    |                  | ls     |
    V                  +--------+
+--------+                 |
| pid=7  |                 | exits
| ppid=4 | &lt;---------------+
| bash   |
+--------+
    |
    | continues
    V
</code></pre>
","1653415"
"Is Fortran easier to optimize than C for heavy calculations?","112635","","<p>From time to time I read that Fortran is or can be faster then C for heavy calculations. Is that really true? I must admit that I hardly know Fortran, but the Fortran code I have seen so far did not show that the language has features that C doesn't have.</p>

<p>If it is true, please tell me why. Please don't tell me what languages or libs are good for number crunching, I don't intend to write an app or lib to do that, I'm just curious.</p>
","<p>The languages have similar feature-sets. The performance difference comes from the fact that Fortran says aliasing is not allowed. Any code that has aliasing is not valid Fortran, but it is up to the programmer and not the compiler to detect these errors. Thus Fortran compilers ignore possible aliasing of memory pointers and allow them to generate more efficient code. Take a look at this little example in C:</p>

<pre><code>void transform (float *output, float const * input, float const * matrix, int *n)
{
    int i;
    for (i=0; i&lt;*n; i++)
    {
        float x = input[i*2+0];
        float y = input[i*2+1];
        output[i*2+0] = matrix[0] * x + matrix[1] * y;
        output[i*2+1] = matrix[2] * x + matrix[3] * y;
    }
}
</code></pre>

<p>This function would run slower than the Fortran counterpart after optimization. Why so? If you write values into the output array, you may change the values of matrix. After all, the pointers could overlap and point to the same chunk of memory (including the <code>int</code> pointer!). The C compiler is forced to reload the four matrix values from memory for all computations.</p>

<p>In Fortran the compiler can load the matrix values once and store them in registers. It can do so because the Fortran compiler assumes pointers/arrays do not overlap in memory.</p>

<p>Fortunately, the restrict keyword and strict-aliasing have been introduced to the C99 standard to address this problem. It's well supported in most C++ compilers these days as well. The keyword allows you to give the compiler a hint that the programmer promises that a pointer does not alias with any other pointer. The strict-aliasing means that the programmer promises that pointers of different type will never overlap, for example a <code>double*</code> will not overlap with an <code>int*</code> (with the specific exception that <code>char*</code> and <code>void*</code> can overlap with anything).</p>

<p>If you use them you will get the same speed from C and Fortran. However, the ability to use the restrict keyword only with performance critical functions means that C (and C++) programs are much safer and easier to write. For example, consider the invalid Fortran code: <code>CALL TRANSFORM(A(1, 30), A(2, 31), A(3, 32), 30)</code>, which most Fortran compilers will happily compile without any warning but introduces a bug that only shows up on some compilers, on some hardware and with some optimization options.</p>
","146186"
"C - function inside struct","112337","","<p>Im trying to create a function inside a structure, so far i have this code:</p>

<pre><code>typedef struct client_t client_t, *pno;
struct client_t
{
        pid_t pid;
        char password[TAM_MAX]; // -&gt; 50 chars
        pno next;

        pno AddClient() 

        {
            /* code */
        }

};

int main()
{

    client_t client;

    //code ..

    client.AddClient();

}
</code></pre>

<p><strong>Error</strong>: <em>client.h:24:2: error: expected ‘:’, ‘,’, ‘;’, ‘}’ or ‘<strong>attribute</strong>’ before ‘{’ token.</em></p>

<p>Which is the correct way to do it ?</p>
","<p>It can't be done directly, but you can emulate the same thing using function pointers and explicitly passing the ""this"" parameter:</p>

<pre><code>typedef struct client_t client_t, *pno;
struct client_t
{
        pid_t pid;
        char password[TAM_MAX]; // -&gt; 50 chars
        pno next;

        pno (*AddClient)(client_t *);    
};

pno client_t_AddClient(client_t *self) { /* code */ }

int main()
{

    client_t client;
    client.AddClient = client_t_AddClient; // probably really done in some init fn

    //code ..

    client.AddClient(&amp;client);

}
</code></pre>

<p>It turns out that doing this, however, doesn't really buy you an awful lot. As such, you won't see many C APIs implemented in this style, since you may as well just call your external function and pass the instance.</p>
","17052566"
"Static variable inside of a function in C","112229","","<pre><code>void foo()
{
    static int x = 5;
    x++;
    printf(""%d"", x);
}

int main()
{
    foo();
    foo();
    return 0;
}
</code></pre>

<p>What will be printed out? 6 6 or 6 7</p>

<p>And why?</p>
","<p>There are two issues here, lifetime and scope.</p>

<p>The scope of variable is where the variable name can be seen.  Here, x is visible only inside function foo().</p>

<p>The lifetime of a variable is the period over which it exists.  If x were defined without the keyword static, the lifetime would be from the entry into foo() to the return from foo(); so it would be re-initialized to 5 on every call.</p>

<p>The keyword static acts to extend the lifetime of a variable to the lifetime of the programme; e.g. initialization occurs once and once only and then the variable retains its value - whatever it has come to be - over all future calls to foo().</p>
","5033656"
"Speed comparison with Project Euler: C vs Python vs Erlang vs Haskell","112109","","<p>I have taken <a href=""http://projecteuler.net/index.php?section=problems&amp;id=12"" rel=""noreferrer"">Problem #12</a> from <a href=""http://projecteuler.net/"" rel=""noreferrer"">Project Euler</a> as a programming exercise and to compare my (surely not optimal) implementations in C, Python, Erlang and Haskell. In order to get some higher execution times, I search for the first triangle number with more than 1000 divisors instead of 500 as stated in the original problem.</p>

<p>The result is the following:</p>

<p><strong>C:</strong></p>

<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ gcc -lm -o euler12.bin euler12.c
lorenzo@enzo:~/erlang$ time ./euler12.bin
842161320

real    0m11.074s
user    0m11.070s
sys 0m0.000s
</code></pre>

<p><strong>Python:</strong></p>

<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ time ./euler12.py 
842161320

real    1m16.632s
user    1m16.370s
sys 0m0.250s
</code></pre>

<p><strong>Python with PyPy:</strong></p>

<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/Downloads/pypy-c-jit-43780-b590cf6de419-linux64/bin$ time ./pypy /home/lorenzo/erlang/euler12.py 
842161320

real    0m13.082s
user    0m13.050s
sys 0m0.020s
</code></pre>

<p><strong>Erlang:</strong></p>

<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ erlc euler12.erl 
lorenzo@enzo:~/erlang$ time erl -s euler12 solve
Erlang R13B03 (erts-5.7.4) [source] [64-bit] [smp:4:4] [rq:4] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.7.4  (abort with ^G)
1&gt; 842161320

real    0m48.259s
user    0m48.070s
sys 0m0.020s
</code></pre>

<p><strong>Haskell:</strong></p>

<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ ghc euler12.hs -o euler12.hsx
[1 of 1] Compiling Main             ( euler12.hs, euler12.o )
Linking euler12.hsx ...
lorenzo@enzo:~/erlang$ time ./euler12.hsx 
842161320

real    2m37.326s
user    2m37.240s
sys 0m0.080s
</code></pre>

<p><strong>Summary:</strong></p>

<ul>
<li>C: 100%</li>
<li>Python: 692% (118% with PyPy)</li>
<li>Erlang: 436% (135% thanks to RichardC)</li>
<li>Haskell: 1421%</li>
</ul>

<p>I suppose that C has a big advantage as it uses long for the calculations and not arbitrary length integers as the other three. Also it doesn't need to load a runtime first (Do the others?).</p>

<p><strong>Question 1:</strong>
Do Erlang, Python and Haskell lose speed due to using arbitrary length integers or don't they as long as the values are less than <code>MAXINT</code>?</p>

<p><strong>Question 2:</strong>
Why is Haskell so slow? Is there a compiler flag that turns off the brakes or is it my implementation? (The latter is quite probable as Haskell is a book with seven seals to me.)</p>

<p><strong>Question 3:</strong>
Can you offer me some hints how to optimize these implementations without changing the way I determine the factors? Optimization in any way: nicer, faster, more ""native"" to the language.</p>

<p><strong>EDIT:</strong></p>

<p><strong>Question 4:</strong>
Do my functional implementations permit LCO (last call optimization, a.k.a tail recursion elimination) and hence avoid adding unnecessary frames onto the call stack?</p>

<p>I really tried to implement the same algorithm as similar as possible in the four languages, although I have to admit that my Haskell and Erlang knowledge is very limited.</p>

<hr>

<p>Source codes used:</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

int factorCount (long n)
{
    double square = sqrt (n);
    int isquare = (int) square;
    int count = isquare == square ? -1 : 0;
    long candidate;
    for (candidate = 1; candidate &lt;= isquare; candidate ++)
        if (0 == n % candidate) count += 2;
    return count;
}

int main ()
{
    long triangle = 1;
    int index = 1;
    while (factorCount (triangle) &lt; 1001)
    {
        index ++;
        triangle += index;
    }
    printf (""%ld\n"", triangle);
}
</code></pre>

<hr>

<pre class=""lang-py prettyprint-override""><code>#! /usr/bin/env python3.2

import math

def factorCount (n):
    square = math.sqrt (n)
    isquare = int (square)
    count = -1 if isquare == square else 0
    for candidate in range (1, isquare + 1):
        if not n % candidate: count += 2
    return count

triangle = 1
index = 1
while factorCount (triangle) &lt; 1001:
    index += 1
    triangle += index

print (triangle)
</code></pre>

<hr>

<pre class=""lang-erlang prettyprint-override""><code>-module (euler12).
-compile (export_all).

factorCount (Number) -&gt; factorCount (Number, math:sqrt (Number), 1, 0).

factorCount (_, Sqrt, Candidate, Count) when Candidate &gt; Sqrt -&gt; Count;

factorCount (_, Sqrt, Candidate, Count) when Candidate == Sqrt -&gt; Count + 1;

factorCount (Number, Sqrt, Candidate, Count) -&gt;
    case Number rem Candidate of
        0 -&gt; factorCount (Number, Sqrt, Candidate + 1, Count + 2);
        _ -&gt; factorCount (Number, Sqrt, Candidate + 1, Count)
    end.

nextTriangle (Index, Triangle) -&gt;
    Count = factorCount (Triangle),
    if
        Count &gt; 1000 -&gt; Triangle;
        true -&gt; nextTriangle (Index + 1, Triangle + Index + 1)  
    end.

solve () -&gt;
    io:format (""~p~n"", [nextTriangle (1, 1) ] ),
    halt (0).
</code></pre>

<hr>

<pre class=""lang-hs prettyprint-override""><code>factorCount number = factorCount' number isquare 1 0 - (fromEnum $ square == fromIntegral isquare)
    where square = sqrt $ fromIntegral number
          isquare = floor square

factorCount' number sqrt candidate count
    | fromIntegral candidate &gt; sqrt = count
    | number `mod` candidate == 0 = factorCount' number sqrt (candidate + 1) (count + 2)
    | otherwise = factorCount' number sqrt (candidate + 1) count

nextTriangle index triangle
    | factorCount triangle &gt; 1000 = triangle
    | otherwise = nextTriangle (index + 1) (triangle + index + 1)

main = print $ nextTriangle 1 1
</code></pre>
","<p>Using <code>GHC 7.0.3</code>, <code>gcc 4.4.6</code>, <code>Linux 2.6.29</code> on an x86_64 Core2 Duo (2.5GHz) machine, compiling using <code>ghc -O2 -fllvm -fforce-recomp</code> for Haskell and <code>gcc -O3 -lm</code> for C.</p>

<ul>
<li>Your C routine runs in 8.4 seconds (faster than your run probably because of <code>-O3</code>)</li>
<li>The Haskell solution runs in 36 seconds (due to the <code>-O2</code> flag)</li>
<li>Your <code>factorCount'</code> code isn't explicitly typed and defaulting to <code>Integer</code> (thanks to Daniel for correcting my misdiagnosis here!).  Giving an explicit type signature (which is standard practice anyway) using <code>Int</code> and the time changes to <strong>11.1 seconds</strong></li>
<li>in <code>factorCount'</code> you have needlessly called <code>fromIntegral</code>. A fix results in no change though (the compiler is smart, lucky for you).</li>
<li>You used <code>mod</code> where <code>rem</code> is faster and sufficient. This changes the time to <strong>8.5 seconds</strong>.</li>
<li><code>factorCount'</code> is constantly applying two extra arguments that never change (<code>number</code>, <code>sqrt</code>).  A worker/wrapper transformation gives us:</li>
</ul>

<pre class=""lang-hs prettyprint-override""><code> $ time ./so
 842161320  

 real    0m7.954s  
 user    0m7.944s  
 sys     0m0.004s  
</code></pre>

<p>That's right, <strong>7.95 seconds</strong>.  Consistently <strong>half a second faster than the C solution</strong>.  Without the <code>-fllvm</code> flag I'm still getting <code>8.182 seconds</code>, so the NCG backend is doing well in this case too.</p>

<p>Conclusion: Haskell is awesome.</p>

<p><strong>Resulting Code</strong></p>

<pre class=""lang-hs prettyprint-override""><code>factorCount number = factorCount' number isquare 1 0 - (fromEnum $ square == fromIntegral isquare)
    where square = sqrt $ fromIntegral number
          isquare = floor square

factorCount' :: Int -&gt; Int -&gt; Int -&gt; Int -&gt; Int
factorCount' number sqrt candidate0 count0 = go candidate0 count0
  where
  go candidate count
    | candidate &gt; sqrt = count
    | number `rem` candidate == 0 = go (candidate + 1) (count + 2)
    | otherwise = go (candidate + 1) count

nextTriangle index triangle
    | factorCount triangle &gt; 1000 = triangle
    | otherwise = nextTriangle (index + 1) (triangle + index + 1)

main = print $ nextTriangle 1 1
</code></pre>

<p>EDIT: So now that we've explored that, lets address the questions</p>

<blockquote>
  <p>Question 1: Do erlang, python and haskell lose speed due to using
  arbitrary length integers or don't they as long as the values are less
  than MAXINT?</p>
</blockquote>

<p>In Haskell, using <code>Integer</code> is slower than <code>Int</code> but how much slower depends on the computations performed.  Luckily (for 64 bit machines) <code>Int</code> is sufficient.  For portability sake you should probably rewrite my code to use <code>Int64</code> or <code>Word64</code> (C isn't the only language with a <code>long</code>).</p>

<blockquote>
  <p>Question 2: Why is haskell so slow? Is there a compiler flag that
  turns off the brakes or is it my implementation? (The latter is quite
  probable as haskell is a book with seven seals to me.)</p>
  
  <p>Question 3: Can you offer me some hints how to optimize these
  implementations without changing the way I determine the factors?
  Optimization in any way: nicer, faster, more ""native"" to the language.</p>
</blockquote>

<p>That was what I answered above.   The answer was </p>

<ul>
<li>0) Use optimization via <code>-O2</code> </li>
<li>1) Use fast  (notably: unbox-able) types when possible </li>
<li>2) <code>rem</code> not <code>mod</code> (a frequently forgotten optimization) and </li>
<li>3) worker/wrapper transformation (perhaps the most common optimization).</li>
</ul>

<blockquote>
  <p>Question 4: Do my functional implementations permit LCO and hence
  avoid adding unnecessary frames onto the call stack?</p>
</blockquote>

<p>Yes, that wasn't the issue.  Good work and glad you considered this.</p>
","6964760"
"Scanf/Printf double variable C","111791","","<p>Let's say I have this following bit of code in C:</p>

<pre><code>double var;
scanf(""%lf"", &amp;var);
printf(""%lf"", var);
printf(""%f"", var);
</code></pre>

<p>It reads from stdin variable 'var' and then prints twice in stdout 'var'.
I understand that's how you read a double variable from stdin, but my questions are:</p>

<ol>
<li>Why can you print a double with %lf?</li>
<li>Why can you print a double with %f?</li>
<li>Which one is better and correct to use?</li>
</ol>
","<p>For variable argument functions like <code>printf</code> and <code>scanf</code>, the arguments are promoted, for example, any smaller integer types are promoted to <code>int</code>, <code>float</code> is promoted to <code>double</code>.</p>

<p><code>scanf</code> takes parameters of pointers, so the promotion rule takes no effect. It must use <code>%f</code> for <code>float*</code> and <code>%lf</code> for <code>double*</code>.</p>

<p><code>printf</code> will never see a <code>float</code> argument, <code>float</code> is always promoted to <code>double</code>. The format specifier is <code>%f</code>. But C99 also says <code>%lf</code> is the same as <code>%f</code> in <code>printf</code>:</p>

<blockquote>
  <p>C99 §7.19.6.1 The <code>fprintf</code> function</p>
  
  <p><code>l</code> (ell) Specifies that a following <code>d</code>, <code>i</code>, <code>o</code>, <code>u</code>, <code>x</code>, or <code>X</code> conversion specifier applies to a <code>long int</code> or <code>unsigned long int</code> argument; that a following <code>n</code> conversion specifier applies to a pointer to a <code>long int</code> argument; that a following <code>c</code> conversion specifier applies to a <code>wint_t</code> argument; that a following <code>s</code> conversion specifier applies to a pointer to a <code>wchar_t</code> argument; or <strong>has no effect on a following <code>a</code>, <code>A</code>, <code>e</code>, <code>E</code>, <code>f</code>, <code>F</code>, <code>g</code>, or <code>G</code> conversion specifier.</strong></p>
</blockquote>
","19954756"
"What is the difference between sscanf or atoi to convert a string to an integer?","111661","","<p>gcc 4.4.4 c89</p>

<p>What is better to convert a string to an integer value.</p>

<p>I have tried 2 different methods atoi and sscanf. Both work as expected.</p>

<pre><code>char digits[3] = ""34"";
int device_num = 0;

if(sscanf(digits, ""%d"", &amp;device_num) == EOF) {
    fprintf(stderr, ""WARNING: Incorrect value for device\n"");
    return FALSE;
}
</code></pre>

<p>or using atoi</p>

<pre><code>device_num = atoi(digits);
</code></pre>

<p>I was thinking that the sscanf would be better as you can check for errors. However, atoi doesn't doing any checking.</p>
","<p>You have 3 choices:</p>

<ol>
<li><code>atoi</code></li>
</ol>

<p>This is probably the fastest if you're using it in performance-critical code, but it does no error reporting. If the string does not begin with an integer, it will return 0. If the string contains junk after the integer, it will convert the initial part and ignore the rest. If the number is too big to fit in <code>int</code>, the behaviour is unspecified.</p>

<ol start=""2"">
<li><code>sscanf</code></li>
</ol>

<p>Some error reporting, and you have a lot of flexibility for what type to store (signed/unsigned versions of <code>char/short/int/long/long long/size_t/ptrdiff_t/intmax_t</code>). </p>

<p>The return value is the number of conversions that succeed, so scanning for <code>""%d""</code> will return 0 if the string does not begin with an integer. You can use <code>""%d%n""</code> to store the index of the first character after the integer that's read in another variable, and thereby check to see if the entire string was converted or if there's junk afterwards. However, like <code>atoi</code>, behaviour on integer overflow is unspecified.</p>

<ol start=""3"">
<li><code>strtol</code> and family</li>
</ol>

<p>Robust error reporting, provided you set <code>errno</code> to 0 before making the call. Return values are specified on overflow and <code>errno</code> will be set. You can choose any number base from 2 to 36, or specify 0 as the base to auto-interpret leading <code>0x</code> and <code>0</code> as hex and octal, respectively. Choices of type to convert to are signed/unsigned versions of <code>long/long long/intmax_t</code>. </p>

<p>If you need a smaller type you can always store the result in a temporary <code>long</code> or <code>unsigned long</code> variable and check for overflow yourself. </p>

<p>Since these functions take a pointer to pointer argument, you also get a pointer to the first character following the converted integer, for free, so you can tell if the entire string was an integer or parse subsequent data in the string if needed.</p>

<hr>

<p>Personally, I would recommend the <code>strtol</code> family for <strong>most</strong> purposes. If you're doing something quick-and-dirty, atoi might meet your needs.</p>

<p>As an aside, sometimes I find I need to parse numbers where leading whitespace, sign, etc. are not supposed to be accepted. In this case it's pretty damn easy to roll your own for loop, eg., </p>

<pre><code>for (x=0; (unsigned)*s-'0'&lt;10; s++) 
    x=10*x+(*s-'0');
</code></pre>

<p>Or you can use (for robustness):</p>

<pre><code>if (isdigit(*s))
    x=strtol(s, &amp;s, 10);
else /* error */ 
</code></pre>
","3421555"
"How can I autoformat/indent C code in vim?","111606","","<p>When I copy code from another file, the formatting is messed up, like this:</p>

<pre><code>fun()
{
for(...)
{
for(...)
{
if(...)
{
}
}
}
}
</code></pre>

<p>How can I autoformat this code in vim?</p>
","<p>Try the following keystrokes:</p>

<pre><code>gg=G
</code></pre>

<p>Explanation: <code>gg</code> goes to the top of the file, <code>=</code> is a command to fix the indentation and <code>G</code> tells it to perform the operation to the end of the file.</p>
","2355848"
"Function to Calculate a CRC16 Checksum","111404","","<p>I'm working on a library to provide simple reliable communication over an RS232 or RS485 connection.  Part of this code involves using a CRC16 checksum on the data to detect corruption from line noise.  I've created a function to calculate a CRC16 checksum, but it doesn't seem to be outputting correct values.</p>

<p>The relevant code I've written is below (it can also be found <a href=""https://gist.github.com/2666368"" rel=""nofollow noreferrer"">here</a>).</p>

<pre><code>#include &lt;stdint.h&gt;

#define CRC16 0x8005

uint16_t gen_crc16(const uint8_t *data, uint16_t size)
{
    uint16_t out = 0;
    int bits_read = 0, bit_flag;

    /* Sanity check: */
    if(data == NULL)
        return 0;

    while(size &gt; 0)
    {
        bit_flag = out &gt;&gt; 15;

        /* Get next bit: */
        out &lt;&lt;= 1;
        out |= (*data &gt;&gt; (7 - bits_read)) &amp; 1;

        /* Increment bit counter: */
        bits_read++;
        if(bits_read &gt; 7)
        {
            bits_read = 0;
            data++;
            size--;
        }

        /* Cycle check: */
        if(bit_flag)
            out ^= CRC16;
    }

    return out;
}
</code></pre>

<p>I'm checking my output against <a href=""http://www.lammertbies.nl/comm/info/crc-calculation.html"" rel=""nofollow noreferrer"">this online CRC calculator</a>.</p>

<p>I've come to the conclusion that either my understanding of how to calculate a CRC16 is wrong, or the online calculator is wrong (the former seems more likely).  Can someone tell me where I might be going wrong?</p>
","<p>There are several details you need to 'match up' with for a particular CRC implementation - even using the same polynomial there can be different results because of minor differences in how data bits are handled, using a particular initial value for the CRC (sometimes it's zero, sometimes 0xffff), and/or inverting the bits of the CRC. For example, sometimes one implementation will work from the low order bits of the data bytes up, while sometimes they'll work from the high order bits down (as yours currently does).</p>

<p>Also, you need to 'push out' the last bits of the CRC after you've run all the data bits through.</p>

<p>Keep in mind that CRC algorithms were designed to be implemented in hardware, so some of how bit ordering is handled may not make so much sense from a software point of view.</p>

<p>If you want to match the CRC16 with polynomial 0x8005 as shown on the lammertbies.nl CRC calculator page, you need to make the following changes to your CRC function:</p>

<ul>
<li>a) run the data bits through the CRC loop starting from the least significant bit instead of from the most significant bit</li>
<li>b) push the last 16 bits of the CRC out of the CRC register after you've finished with the input data</li>
<li>c) reverse the CRC bits (I'm guessing this bit is a carry over from hardware implementations)</li>
</ul>

<p>So, your function might look like:</p>

<pre><code>#define CRC16 0x8005

uint16_t gen_crc16(const uint8_t *data, uint16_t size)
{
    uint16_t out = 0;
    int bits_read = 0, bit_flag;

    /* Sanity check: */
    if(data == NULL)
        return 0;

    while(size &gt; 0)
    {
        bit_flag = out &gt;&gt; 15;

        /* Get next bit: */
        out &lt;&lt;= 1;
        out |= (*data &gt;&gt; bits_read) &amp; 1; // item a) work from the least significant bits

        /* Increment bit counter: */
        bits_read++;
        if(bits_read &gt; 7)
        {
            bits_read = 0;
            data++;
            size--;
        }

        /* Cycle check: */
        if(bit_flag)
            out ^= CRC16;

    }

    // item b) ""push out"" the last 16 bits
    int i;
    for (i = 0; i &lt; 16; ++i) {
        bit_flag = out &gt;&gt; 15;
        out &lt;&lt;= 1;
        if(bit_flag)
            out ^= CRC16;
    }

    // item c) reverse the bits
    uint16_t crc = 0;
    i = 0x8000;
    int j = 0x0001;
    for (; i != 0; i &gt;&gt;=1, j &lt;&lt;= 1) {
        if (i &amp; out) crc |= j;
    }

    return crc;
}
</code></pre>

<p>That function returns <code>0xbb3d</code> for me when I pass in <code>""123456789""</code>.</p>
","10569892"
"error: unknown type name ‘bool’","111132","","<p>I downloaded the source code and wanted to compile the file of scanner.  It produces this error:</p>

<pre><code>[meepo@localhost cs143-pp1]$ gcc -o lex.yy.o lex.yy.c -ll
In file included from scanner.l:15:0:
scanner.h:59:5: error: unknown type name ‘bool’
In file included from scanner.l:16:0:
utility.h:64:38: error: unknown type name ‘bool’
utility.h:74:1: error: unknown type name ‘bool’
In file included from scanner.l:17:0:
errors.h:16:18: fatal error: string: No such file or directory
compilation terminated.
</code></pre>

<p>And I tried to use different complier to compile it, but it appeared different errors.</p>

<pre><code>[meepo@localhost cs143-pp1]$ g++ -o scan lex.yy.c -ll
/usr/bin/ld: cannot find -ll
collect2: ld returned 1 exit status
</code></pre>

<p>My os is 3.0-ARCH, I don't know why this happened. How do I fix the error?</p>
","<p>C90 does not support the boolean data type.</p>

<p>C99 does include it with this include:</p>

<pre><code>#include &lt;stdbool.h&gt;
</code></pre>
","8133121"
"Try catch statements in C","111096","","<p>I was thinking today about the try/catch blocks existent in another languages. Googled for a while this but with no result. From what I know, there is not such a thing as try/catch in C. However, is there a way to ""simulate"" them?<br>
Sure, there is assert and other tricks but nothing like try/catch, that also catch the raised exception. Thank you</p>
","<p>C itself doesn't support exceptions but you can simulate them to a degree with <code>setjmp</code> and <code>longjmp</code> calls.</p>

<pre><code>static jmp_buf s_jumpBuffer;

void Example() { 
  if (setjmp(s_jumpBuffer)) {
    // The longjmp was executed and returned control here
    printf(""Exception happened\n"");
  } else {
    // Normal code execution starts here
    Test();
  }
}

void Test() {
  // Rough equivalent of `throw`
  longjump(s_jumpBuffer, 42);
}
</code></pre>

<p>This website has a nice tutorial on how to simulate exceptions with <code>setjmp</code> and <code>longjmp</code> </p>

<ul>
<li><a href=""http://www.di.unipi.it/~nids/docs/longjump_try_trow_catch.html"" rel=""noreferrer"">http://www.di.unipi.it/~nids/docs/longjump_try_trow_catch.html</a></li>
</ul>
","10586093"
"Initialize/reset struct to zero/null","111094","","<pre><code>struct x {
    char a[10];
    char b[20];
    int i;
    char *c;
    char *d[10];
};
</code></pre>

<p>I am filling this struct and then using the values. On the next iteration, I want to reset all the fields to <code>0</code> or <code>null</code> before I start reusing it. </p>

<p>How can I do that? Can I use <code>memset</code> or I have to go through all the members and then do it individually?</p>
","<p>Define a const static instance of the struct with the initial values and then simply assign this value to your variable whenever you want to reset it.</p>

<p>For example:</p>

<pre><code>static const struct x EmptyStruct;
</code></pre>

<p>Here I am relying on <a href=""https://stackoverflow.com/questions/10927274/gcc-uninitialized-global-variables/10927409#10927409"">static initialization</a> to set my initial values, but you could use a struct initializer if you want different initial values.</p>

<p>Then, each time round the loop you can write:</p>

<pre><code>myStructVariable = EmptyStruct;
</code></pre>
","6891731"
"error LNK2005: xxx already defined in MSVCRT.lib(MSVCR100.dll)	C:\something\LIBCMT.lib(setlocal.obj)","110848","","<p>I'm using DCMTK library for reading Dicom files (Image format used in medical image processing.) I'm having a problem in compiling this DCMTK source code. DCMTK uses some additional external libraries (zlib, tiff, libpng, libxml2, libiconv). I know that all libraries should be generated with same Code Generation Options.</p>

<p>I've downloaded the compiled versions of these support libraries which are compiled with ""Multithreaded DLL"" runtime options (/MD). In each project of DCMTK source code I ensured that runtime options are ""Multithreaded DLL"" (/MD). But still I'm getting these errors:</p>

<pre><code>Error   238 error LNK2005: ___iob_func already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmp2pgm
Error   239 error LNK2005: __lock_file already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmp2pgm
Error   240 error LNK2005: __unlock_file already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmp2pgm
Error   241 error LNK2005: __initterm_e already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmp2pgm
Error   242 error LNK2005: _exit already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmp2pgm
Error   243 error LNK2005: __exit already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmp2pgm
Error   244 error LNK2005: __cexit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmp2pgm
Error   245 error LNK2005: __amsg_exit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmp2pgm
Error   246 error LNK2005: _fflush already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(fflush.obj)   dcmp2pgm
Error   247 error LNK2005: __errno already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(dosmap.obj)   dcmp2pgm
Error   248 error LNK2005: __invoke_watson already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(invarg.obj)   dcmp2pgm
Error   249 error LNK2005: ""void __cdecl terminate(void)"" (?terminate@@YAXXZ) already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(hooks.obj)    dcmp2pgm
Error   250 error LNK2005: ___xi_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmp2pgm
Error   251 error LNK2005: ___xi_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmp2pgm
Error   252 error LNK2005: ___xc_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmp2pgm
Error   253 error LNK2005: ___xc_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmp2pgm
Error   254 error LNK2005: __unlock already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmp2pgm
Error   255 error LNK2005: __lock already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmp2pgm
Error   256 error LNK2005: __XcptFilter already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(winxfltr.obj) dcmp2pgm
Error   257 error LNK2005: _mainCRTStartup already defined in MSVCRT.lib(crtexe.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0.obj) dcmp2pgm
Error   258 error LNK2005: ___set_app_type already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(errmode.obj)  dcmp2pgm
Error   259 error LNK2005: __configthreadlocale already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(setlocal.obj) dcmp2pgm
Error   260 error LNK2005: _getenv already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(getenv.obj)   dcmp2pgm
Error   261 error LNK2005: __isctype already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(isctype.obj)  dcmp2pgm
Error   262 error LNK2005: __strnicmp already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(strnicmp.obj) dcmp2pgm
Error   263 error LNK2005: __close already defined in LIBCMT.lib(close.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   264 error LNK2005: __fileno already defined in LIBCMT.lib(fileno.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   265 error LNK2005: _calloc already defined in LIBCMT.lib(calloc.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   266 error LNK2005: _atol already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   267 error LNK2005: _strcspn already defined in LIBCMT.lib(strcspn.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   268 error LNK2005: __stricmp already defined in LIBCMT.lib(stricmp.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   269 error LNK2005: _atoi already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   270 error LNK2005: __lseek already defined in LIBCMT.lib(lseek.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   271 error LNK2005: __read already defined in LIBCMT.lib(read.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   272 error LNK2005: __write already defined in LIBCMT.lib(write.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   273 error LNK2005: __open already defined in LIBCMT.lib(open.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   274 error LNK2005: __get_osfhandle already defined in LIBCMT.lib(osfinfo.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmp2pgm
Error   278 error LNK1169: one or more multiply defined symbols found   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\Release\dcmp2pgm.exe 1   1   dcmp2pgm
Error   201 error LNK2005: ___iob_func already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscp
Error   202 error LNK2005: __lock_file already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscp
Error   203 error LNK2005: __unlock_file already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscp
Error   204 error LNK2005: __initterm_e already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscp
Error   205 error LNK2005: _exit already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscp
Error   206 error LNK2005: __exit already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscp
Error   207 error LNK2005: __cexit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscp
Error   208 error LNK2005: __amsg_exit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscp
Error   209 error LNK2005: _fflush already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(fflush.obj)   dcmprscp
Error   210 error LNK2005: __errno already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(dosmap.obj)   dcmprscp
Error   211 error LNK2005: __invoke_watson already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(invarg.obj)   dcmprscp
Error   212 error LNK2005: ""void __cdecl terminate(void)"" (?terminate@@YAXXZ) already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(hooks.obj)    dcmprscp
Error   213 error LNK2005: ___xi_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscp
Error   214 error LNK2005: ___xi_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscp
Error   215 error LNK2005: ___xc_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscp
Error   216 error LNK2005: ___xc_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscp
Error   217 error LNK2005: __unlock already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmprscp
Error   218 error LNK2005: __lock already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmprscp
Error   219 error LNK2005: __XcptFilter already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(winxfltr.obj) dcmprscp
Error   220 error LNK2005: __stricmp already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(stricmp.obj)  dcmprscp
Error   221 error LNK2005: _mainCRTStartup already defined in MSVCRT.lib(crtexe.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0.obj) dcmprscp
Error   222 error LNK2005: ___set_app_type already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(errmode.obj)  dcmprscp
Error   223 error LNK2005: __configthreadlocale already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(setlocal.obj) dcmprscp
Error   224 error LNK2005: _getenv already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(getenv.obj)   dcmprscp
Error   225 error LNK2005: __isctype already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(isctype.obj)  dcmprscp
Error   226 error LNK2005: __strnicmp already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(strnicmp.obj) dcmprscp
Error   227 error LNK2005: __close already defined in LIBCMT.lib(close.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   228 error LNK2005: __fileno already defined in LIBCMT.lib(fileno.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   229 error LNK2005: __lseek already defined in LIBCMT.lib(lseek.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   230 error LNK2005: __read already defined in LIBCMT.lib(read.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   231 error LNK2005: __write already defined in LIBCMT.lib(write.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   232 error LNK2005: __open already defined in LIBCMT.lib(open.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   233 error LNK2005: __get_osfhandle already defined in LIBCMT.lib(osfinfo.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscp
Error   237 error LNK1169: one or more multiply defined symbols found   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\Release\dcmprscp.exe 1   1   dcmprscp
Error   160 error LNK2005: ___iob_func already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscu
Error   161 error LNK2005: __lock_file already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscu
Error   162 error LNK2005: __unlock_file already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmprscu
Error   163 error LNK2005: __initterm_e already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscu
Error   164 error LNK2005: _exit already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscu
Error   165 error LNK2005: __exit already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscu
Error   166 error LNK2005: __cexit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscu
Error   167 error LNK2005: __amsg_exit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmprscu
Error   168 error LNK2005: _fflush already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(fflush.obj)   dcmprscu
Error   169 error LNK2005: __errno already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(dosmap.obj)   dcmprscu
Error   170 error LNK2005: __invoke_watson already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(invarg.obj)   dcmprscu
Error   171 error LNK2005: ""void __cdecl terminate(void)"" (?terminate@@YAXXZ) already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(hooks.obj)    dcmprscu
Error   172 error LNK2005: ___xi_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscu
Error   173 error LNK2005: ___xi_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscu
Error   174 error LNK2005: ___xc_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscu
Error   175 error LNK2005: ___xc_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmprscu
Error   176 error LNK2005: __unlock already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmprscu
Error   177 error LNK2005: __lock already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmprscu
Error   178 error LNK2005: __XcptFilter already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(winxfltr.obj) dcmprscu
Error   179 error LNK2005: _mainCRTStartup already defined in MSVCRT.lib(crtexe.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0.obj) dcmprscu
Error   180 error LNK2005: ___set_app_type already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(errmode.obj)  dcmprscu
Error   181 error LNK2005: __configthreadlocale already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(setlocal.obj) dcmprscu
Error   182 error LNK2005: _getenv already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(getenv.obj)   dcmprscu
Error   183 error LNK2005: __isctype already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(isctype.obj)  dcmprscu
Error   184 error LNK2005: __strnicmp already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(strnicmp.obj) dcmprscu
Error   185 error LNK2005: __close already defined in LIBCMT.lib(close.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   186 error LNK2005: __fileno already defined in LIBCMT.lib(fileno.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   187 error LNK2005: _calloc already defined in LIBCMT.lib(calloc.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   188 error LNK2005: _atol already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   189 error LNK2005: _strcspn already defined in LIBCMT.lib(strcspn.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   190 error LNK2005: __stricmp already defined in LIBCMT.lib(stricmp.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   191 error LNK2005: _atoi already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   192 error LNK2005: __lseek already defined in LIBCMT.lib(lseek.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   193 error LNK2005: __read already defined in LIBCMT.lib(read.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   194 error LNK2005: __write already defined in LIBCMT.lib(write.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   195 error LNK2005: __open already defined in LIBCMT.lib(open.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   196 error LNK2005: __get_osfhandle already defined in LIBCMT.lib(osfinfo.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmprscu
Error   200 error LNK1169: one or more multiply defined symbols found   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\Release\dcmprscu.exe dcmprscu
Error   119 error LNK2005: ___iob_func already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmpsprt
Error   120 error LNK2005: __lock_file already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmpsprt
Error   121 error LNK2005: __unlock_file already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(_file.obj)    dcmpsprt
Error   122 error LNK2005: __initterm_e already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmpsprt
Error   123 error LNK2005: _exit already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmpsprt
Error   124 error LNK2005: __exit already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmpsprt
Error   125 error LNK2005: __cexit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmpsprt
Error   126 error LNK2005: __amsg_exit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0dat.obj)  dcmpsprt
Error   127 error LNK2005: _fflush already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(fflush.obj)   dcmpsprt
Error   128 error LNK2005: __errno already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(dosmap.obj)   dcmpsprt
Error   129 error LNK2005: __invoke_watson already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(invarg.obj)   dcmpsprt
Error   130 error LNK2005: ""void __cdecl terminate(void)"" (?terminate@@YAXXZ) already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(hooks.obj)    dcmpsprt
Error   131 error LNK2005: ___xi_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmpsprt
Error   132 error LNK2005: ___xi_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmpsprt
Error   133 error LNK2005: ___xc_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmpsprt
Error   134 error LNK2005: ___xc_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0init.obj) dcmpsprt
Error   135 error LNK2005: __unlock already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmpsprt
Error   136 error LNK2005: __lock already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(mlock.obj)    dcmpsprt
Error   137 error LNK2005: __XcptFilter already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(winxfltr.obj) dcmpsprt
Error   138 error LNK2005: _mainCRTStartup already defined in MSVCRT.lib(crtexe.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(crt0.obj) dcmpsprt
Error   139 error LNK2005: ___set_app_type already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(errmode.obj)  dcmpsprt
Error   140 error LNK2005: __configthreadlocale already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(setlocal.obj) dcmpsprt
Error   141 error LNK2005: _getenv already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(getenv.obj)   dcmpsprt
Error   142 error LNK2005: __isctype already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(isctype.obj)  dcmpsprt
Error   143 error LNK2005: __strnicmp already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\LIBCMT.lib(strnicmp.obj) dcmpsprt
Error   144 error LNK2005: __close already defined in LIBCMT.lib(close.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   145 error LNK2005: __fileno already defined in LIBCMT.lib(fileno.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   146 error LNK2005: _calloc already defined in LIBCMT.lib(calloc.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   147 error LNK2005: _atol already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   148 error LNK2005: _strcspn already defined in LIBCMT.lib(strcspn.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   149 error LNK2005: __stricmp already defined in LIBCMT.lib(stricmp.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   150 error LNK2005: _atoi already defined in LIBCMT.lib(atox.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   151 error LNK2005: __lseek already defined in LIBCMT.lib(lseek.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   152 error LNK2005: __read already defined in LIBCMT.lib(read.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   153 error LNK2005: __write already defined in LIBCMT.lib(write.obj) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   154 error LNK2005: __open already defined in LIBCMT.lib(open.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   155 error LNK2005: __get_osfhandle already defined in LIBCMT.lib(osfinfo.obj)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\MSVCRT.lib(MSVCR100.dll) dcmpsprt
Error   159 error LNK1169: one or more multiply defined symbols found   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmpstat\apps\Release\dcmpsprt.exe 1   1   dcmpsprt
Error   61  error LNK2005: ___iob_func already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(_file.obj)   dsr2html
Error   62  error LNK2005: __lock_file already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(_file.obj)   dsr2html
Error   63  error LNK2005: __unlock_file already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(_file.obj)   dsr2html
Error   64  error LNK2005: __initterm_e already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0dat.obj) dsr2html
Error   65  error LNK2005: _exit already defined in MSVCRT.lib(MSVCR100.dll)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0dat.obj) dsr2html
Error   66  error LNK2005: __exit already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0dat.obj) dsr2html
Error   67  error LNK2005: __cexit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0dat.obj) dsr2html
Error   68  error LNK2005: __amsg_exit already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0dat.obj) dsr2html
Error   69  error LNK2005: _fflush already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(fflush.obj)  dsr2html
Error   70  error LNK2005: __errno already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(dosmap.obj)  dsr2html
Error   71  error LNK2005: __invoke_watson already defined in MSVCRT.lib(MSVCR100.dll)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(invarg.obj)  dsr2html
Error   72  error LNK2005: ""void __cdecl terminate(void)"" (?terminate@@YAXXZ) already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(hooks.obj)   dsr2html
Error   73  error LNK2005: ___xi_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0init.obj)    dsr2html
Error   74  error LNK2005: ___xi_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0init.obj)    dsr2html
Error   75  error LNK2005: ___xc_a already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0init.obj)    dsr2html
Error   76  error LNK2005: ___xc_z already defined in MSVCRT.lib(cinitexe.obj)  C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0init.obj)    dsr2html
Error   77  error LNK2005: __unlock already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(mlock.obj)   dsr2html
Error   78  error LNK2005: __lock already defined in MSVCRT.lib(MSVCR100.dll)   C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(mlock.obj)   dsr2html
Error   79  error LNK2005: __XcptFilter already defined in MSVCRT.lib(MSVCR100.dll) C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(winxfltr.obj)    dsr2html
Error   80  error LNK2005: _mainCRTStartup already defined in MSVCRT.lib(crtexe.obj)    C:\dcmtk-3.5.4-src\CMakeBinaries\dcmsr\apps\LIBCMT.lib(crt0.obj)    dsr2html
Error   81  error LNK2005: ___set_app_type already defined in 
</code></pre>

<p><strong>EDIT:</strong></p>

<p>Observations:</p>

<ol>
<li>There are conflicts only between LIBCMT.LIB &amp; MSVCRT.LIB</li>
<li>These two LIB files doesn't exist at the locations shown in the errors.</li>
</ol>

<p><strong>EDIT2:</strong></p>

<p>Yes, the problem was because some of the support libraries weren't built with /MD. So, I myself built all the support libraries with /MD and my problem was solved.</p>
","<p>You are mixing code that was compiled with /MD (use DLL version of CRT) with code that was compiled with /MT (use static CRT library).  That cannot work, all source code files must be compiled with the same setting.  Given that you use libraries that were pre-compiled with /MD, almost always the correct setting, you must compile your own code with this setting as well.</p>

<p>Project + Properties, C/C++, Code Generation, Runtime Library.</p>

<p>Beware that these libraries were probably compiled with an earlier version of the CRT, msvcr100.dll is quite new.  Not sure if that will cause trouble, you may have to prevent the linker from generating a manifest.  You must also make sure to deploy the DLLs you need to the target machine, including msvcr100.dll</p>
","2729823"
"print call stack in C or C++","110542","","<p>Is there any way to dump the call stack in a running process in C or C++ every time a certain function is called?  What I have in mind is something like this:</p>

<pre><code>void foo()
{
   print_stack_trace();

   // foo's body

   return
}
</code></pre>

<p>Where <code>print_stack_trace</code> works similarly to <a href=""http://perldoc.perl.org/functions/caller.html"" rel=""noreferrer""><code>caller</code></a> in Perl.</p>

<p>Or something like this:</p>

<pre><code>int main (void)
{
    // will print out debug info every time foo() is called
    register_stack_trace_function(foo); 

    // etc...
}
</code></pre>

<p>where <code>register_stack_trace_function</code> puts some sort of internal breakpoint that will cause a stack trace to be printed whenever <code>foo</code> is called.</p>

<p>Does anything like this exist in some standard C library?</p>

<p>I am working on Linux, using GCC.</p>

<hr>

<h2>Background</h2>

<p>I have a test run that behaves differently based on some commandline switches that shouldn't affect this behavior.  My code has a pseudo-random number generator that I assume is being called differently based on these switches.  I want to be able to run the test with each set of switches and see if the random number generator is called differently for each one.</p>
","<p>For a linux-only solution you can use <a href=""http://www.kernel.org/doc/man-pages/online/pages/man3/backtrace.3.html"" rel=""noreferrer"">backtrace(3)</a> that simply returns an array of <code>void *</code> (in fact each of these point to the return address from the corresponding stack frame). To translate these to something of use, there's <a href=""http://linux.die.net/man/3/backtrace_symbols"" rel=""noreferrer"">backtrace_symbols(3)</a>.</p>

<p>Pay attention to the <a href=""http://www.kernel.org/doc/man-pages/online/pages/man3/backtrace.3.html#NOTES"" rel=""noreferrer"">notes section in backtrace(3)</a>:</p>

<blockquote>
  <p>The symbol names may be unavailable
  without the use of special linker
  options.
         For systems using the GNU linker, it is necessary to use the
  -rdynamic linker
         option.  Note that names of ""static"" functions are not exposed,
  and won't be
         available in the backtrace.</p>
</blockquote>
","3899916"
"Simple C example of doing an HTTP POST and consuming the response","110517","","<p>I would like to create a very simple C application that does an HTTP post.  It will take a few parameters, and use these to construct a URL.  I'd just like to do a simple HTTP POST and get the response without the use of curl (the libraries are not and will not be installed on the machine this needs to run).</p>

<p>Pseudo-code:</p>

<ol>
<li><p>Process 2 args</p></li>
<li><p>Put args into template URL: <a href=""http://api.somesite.com/apikey=ARG1&amp;command=ARG2"">http://api.somesite.com/apikey=ARG1&amp;command=ARG2</a></p></li>
<li><p>Do POST on generated URL</p></li>
<li><p>Consume response</p></li>
</ol>

<p>My Google and SO searches haven't yielded anything on this matter.</p>
","<p>Sorry it took me so long to do this - I was away for the weekend.</p>

<p>A message has a header part and a message body separated by a blank line.  The blank line is ALWAYS needed even if there is no message body.  The header starts with a command and has additional lines of key value pairs separated by a colon and a space.  If there is a message body, it can be anything you want it to be.</p>

<p>Lines in the header and the blank line at the end of the header must end with a carraige return and linefeed pair (see <a href=""https://stackoverflow.com/questions/5757290/http-header-line-break-style"">HTTP header line break style</a>) so that's why those lines have \r\n at the end.</p>

<p>A URL has the form of <code>http://host:port/path?query_string</code></p>

<p>There are two main ways of submitting a request to a website:</p>

<ul>
<li><p>GET: The query string is optional but, if specified, must be reasonably short. Because of this the header could just be the GET command and nothing else. A sample message could be:</p>

<pre><code>GET /path?query_string HTTP/1.0\r\n
\r\n
</code></pre></li>
<li><p>POST: What would normally be in the query string is in the body of the message instead. Because of this the header needs to include the Content-Type: and Content-Length: attributes as well as the POST command.  A sample message could be:</p>

<pre><code>POST /path HTTP/1.0\r\n
Content-Type: text/plain\r\n
Content-Length: 12\r\n
\r\n
query_string
</code></pre></li>
</ul>

<p>So, to answer your question: if the URL you are interested in POSTing to is <a href=""http://api.somesite.com/apikey=ARG1&amp;command=ARG2"" rel=""noreferrer"">http://api.somesite.com/apikey=ARG1&amp;command=ARG2</a> then there is no body or query string and, consequently, no reason to POST because there is nothing to put in the body of the message and so nothing to put in the Content-Type: and Content-Length:</p>

<p>I guess you could POST if you really wanted to.  In that case your message would look like:</p>

<pre><code>POST /apikey=ARG1&amp;command=ARG2 HTTP/1.0\r\n
\r\n
</code></pre>

<p>So to send the message the C program needs to:</p>

<ul>
<li>create a socket</li>
<li>lookup the IP address </li>
<li>open the socket</li>
<li>send the request</li>
<li>wait for the response</li>
<li>close the socket</li>
</ul>

<p>The send and receive calls won't necessarily send/receive ALL the data you give them - they will return the number of bytes actually sent/received.  It is up to you to call them in a loop and send/receive the remainder of the message.</p>

<p>What I did not do in this sample is any sort of real error checking - when something fails I just exit the program.  Let me know if it works for you:</p>

<pre><code>#include &lt;stdio.h&gt; /* printf, sprintf */
#include &lt;stdlib.h&gt; /* exit */
#include &lt;unistd.h&gt; /* read, write, close */
#include &lt;string.h&gt; /* memcpy, memset */
#include &lt;sys/socket.h&gt; /* socket, connect */
#include &lt;netinet/in.h&gt; /* struct sockaddr_in, struct sockaddr */
#include &lt;netdb.h&gt; /* struct hostent, gethostbyname */

void error(const char *msg) { perror(msg); exit(0); }

int main(int argc,char *argv[])
{
    /* first what are we going to send and where are we going to send it? */
    int portno =        80;
    char *host =        ""api.somesite.com"";
    char *message_fmt = ""POST /apikey=%s&amp;command=%s HTTP/1.0\r\n\r\n"";

    struct hostent *server;
    struct sockaddr_in serv_addr;
    int sockfd, bytes, sent, received, total;
    char message[1024],response[4096];

    if (argc &lt; 3) { puts(""Parameters: &lt;apikey&gt; &lt;command&gt;""); exit(0); }

    /* fill in the parameters */
    sprintf(message,message_fmt,argv[1],argv[2]);
    printf(""Request:\n%s\n"",message);

    /* create the socket */
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd &lt; 0) error(""ERROR opening socket"");

    /* lookup the ip address */
    server = gethostbyname(host);
    if (server == NULL) error(""ERROR, no such host"");

    /* fill in the structure */
    memset(&amp;serv_addr,0,sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(portno);
    memcpy(&amp;serv_addr.sin_addr.s_addr,server-&gt;h_addr,server-&gt;h_length);

    /* connect the socket */
    if (connect(sockfd,(struct sockaddr *)&amp;serv_addr,sizeof(serv_addr)) &lt; 0)
        error(""ERROR connecting"");

    /* send the request */
    total = strlen(message);
    sent = 0;
    do {
        bytes = write(sockfd,message+sent,total-sent);
        if (bytes &lt; 0)
            error(""ERROR writing message to socket"");
        if (bytes == 0)
            break;
        sent+=bytes;
    } while (sent &lt; total);

    /* receive the response */
    memset(response,0,sizeof(response));
    total = sizeof(response)-1;
    received = 0;
    do {
        bytes = read(sockfd,response+received,total-received);
        if (bytes &lt; 0)
            error(""ERROR reading response from socket"");
        if (bytes == 0)
            break;
        received+=bytes;
    } while (received &lt; total);

    if (received == total)
        error(""ERROR storing complete response from socket"");

    /* close the socket */
    close(sockfd);

    /* process response */
    printf(""Response:\n%s\n"",response);

    return 0;
}
</code></pre>

<p>Like the other answer pointed out, 4096 bytes is not a very big response.  I picked that number at random assuming that the response to your request would be short.  If it can be big you have two choices:</p>

<ul>
<li>read the Content-Length: header from the response and then dynamically allocate enough memory to hold the whole response.</li>
<li>write the response to a file as the pieces arrive</li>
</ul>

<p>Additional information to answer the question asked in the comments:</p>

<p>What if you want to POST data in the body of the message?  Then you do need to include the Content-Type: and Content-Length: headers.  The Content-Length: is the actual length of everything after the blank line that separates the header from the body.</p>

<p>Here is a sample that takes the following command line arguments:</p>

<ul>
<li>host</li>
<li>port</li>
<li>command (GET or POST)</li>
<li>path (not including the query data)</li>
<li>query data (put into the query string for GET and into the body for POST) </li>
<li>list of headers (Content-Length: is automatic if using POST)</li>
</ul>

<p>So, for the original question you would run:</p>

<pre><code>a.out api.somesite.com 80 GET ""/apikey=ARG1&amp;command=ARG2""
</code></pre>

<p>And for the question asked in the comments you would run:</p>

<pre><code>a.out api.somesite.com 80 POST / ""name=ARG1&amp;value=ARG2"" ""Content-Type: application/x-www-form-urlencoded""
</code></pre>

<p>Here is the code:</p>

<pre><code>#include &lt;stdio.h&gt; /* printf, sprintf */
#include &lt;stdlib.h&gt; /* exit, atoi, malloc, free */
#include &lt;unistd.h&gt; /* read, write, close */
#include &lt;string.h&gt; /* memcpy, memset */
#include &lt;sys/socket.h&gt; /* socket, connect */
#include &lt;netinet/in.h&gt; /* struct sockaddr_in, struct sockaddr */
#include &lt;netdb.h&gt; /* struct hostent, gethostbyname */

void error(const char *msg) { perror(msg); exit(0); }

int main(int argc,char *argv[])
{
    int i;

    /* first where are we going to send it? */
    int portno = atoi(argv[2])&gt;0?atoi(argv[2]):80;
    char *host = strlen(argv[1])&gt;0?argv[1]:""localhost"";

    struct hostent *server;
    struct sockaddr_in serv_addr;
    int sockfd, bytes, sent, received, total, message_size;
    char *message, response[4096];

    if (argc &lt; 5) { puts(""Parameters: &lt;host&gt; &lt;port&gt; &lt;method&gt; &lt;path&gt; [&lt;data&gt; [&lt;headers&gt;]]""); exit(0); }

    /* How big is the message? */
    message_size=0;
    if(!strcmp(argv[3],""GET""))
    {
        message_size+=strlen(""%s %s%s%s HTTP/1.0\r\n"");        /* method         */
        message_size+=strlen(argv[3]);                         /* path           */
        message_size+=strlen(argv[4]);                         /* headers        */
        if(argc&gt;5)
            message_size+=strlen(argv[5]);                     /* query string   */
        for(i=6;i&lt;argc;i++)                                    /* headers        */
            message_size+=strlen(argv[i])+strlen(""\r\n"");
        message_size+=strlen(""\r\n"");                          /* blank line     */
    }
    else
    {
        message_size+=strlen(""%s %s HTTP/1.0\r\n"");
        message_size+=strlen(argv[3]);                         /* method         */
        message_size+=strlen(argv[4]);                         /* path           */
        for(i=6;i&lt;argc;i++)                                    /* headers        */
            message_size+=strlen(argv[i])+strlen(""\r\n"");
        if(argc&gt;5)
            message_size+=strlen(""Content-Length: %d\r\n"")+10; /* content length */
        message_size+=strlen(""\r\n"");                          /* blank line     */
        if(argc&gt;5)
            message_size+=strlen(argv[5]);                     /* body           */
    }

    /* allocate space for the message */
    message=malloc(message_size);

    /* fill in the parameters */
    if(!strcmp(argv[3],""GET""))
    {
        if(argc&gt;5)
            sprintf(message,""%s %s%s%s HTTP/1.0\r\n"",
                strlen(argv[3])&gt;0?argv[3]:""GET"",               /* method         */
                strlen(argv[4])&gt;0?argv[4]:""/"",                 /* path           */
                strlen(argv[5])&gt;0?""?"":"""",                      /* ?              */
                strlen(argv[5])&gt;0?argv[5]:"""");                 /* query string   */
        else
            sprintf(message,""%s %s HTTP/1.0\r\n"",
                strlen(argv[3])&gt;0?argv[3]:""GET"",               /* method         */
                strlen(argv[4])&gt;0?argv[4]:""/"");                /* path           */
        for(i=6;i&lt;argc;i++)                                    /* headers        */
            {strcat(message,argv[i]);strcat(message,""\r\n"");}
        strcat(message,""\r\n"");                                /* blank line     */
    }
    else
    {
        sprintf(message,""%s %s HTTP/1.0\r\n"",
            strlen(argv[3])&gt;0?argv[3]:""POST"",                  /* method         */
            strlen(argv[4])&gt;0?argv[4]:""/"");                    /* path           */
        for(i=6;i&lt;argc;i++)                                    /* headers        */
            {strcat(message,argv[i]);strcat(message,""\r\n"");}
        if(argc&gt;5)
            sprintf(message+strlen(message),""Content-Length: %d\r\n"",strlen(argv[5]));
        strcat(message,""\r\n"");                                /* blank line     */
        if(argc&gt;5)
            strcat(message,argv[5]);                           /* body           */
    }

    /* What are we going to send? */
    printf(""Request:\n%s\n"",message);

    /* create the socket */
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd &lt; 0) error(""ERROR opening socket"");

    /* lookup the ip address */
    server = gethostbyname(host);
    if (server == NULL) error(""ERROR, no such host"");

    /* fill in the structure */
    memset(&amp;serv_addr,0,sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(portno);
    memcpy(&amp;serv_addr.sin_addr.s_addr,server-&gt;h_addr,server-&gt;h_length);

    /* connect the socket */
    if (connect(sockfd,(struct sockaddr *)&amp;serv_addr,sizeof(serv_addr)) &lt; 0)
        error(""ERROR connecting"");

    /* send the request */
    total = strlen(message);
    sent = 0;
    do {
        bytes = write(sockfd,message+sent,total-sent);
        if (bytes &lt; 0)
            error(""ERROR writing message to socket"");
        if (bytes == 0)
            break;
        sent+=bytes;
    } while (sent &lt; total);

    /* receive the response */
    memset(response,0,sizeof(response));
    total = sizeof(response)-1;
    received = 0;
    do {
        bytes = read(sockfd,response+received,total-received);
        if (bytes &lt; 0)
            error(""ERROR reading response from socket"");
        if (bytes == 0)
            break;
        received+=bytes;
    } while (received &lt; total);

    if (received == total)
        error(""ERROR storing complete response from socket"");

    /* close the socket */
    close(sockfd);

    /* process response */
    printf(""Response:\n%s\n"",response);

    free(message);
    return 0;
}
</code></pre>
","22135885"
"%i or %d to print integer in c using printf()?","110411","","<p>I am just learning C and I have a little knowledge of Objective-C due to dabbling in iOS development, however, in Objective-C I was using <code>NSLog(@""%i"", x);</code> to print the variable <em>x</em> to the console however I have been reading a few C tutorials and they are saying to use <code>%d</code> instead of <code>%i</code>.</p>

<p><code>printf(""%d"", x);</code>
and <code>printf(""%i"", x);</code> both print <em>x</em> to the console correctly. </p>

<p>These both seem to get me to the same place so I am asking the experienced developers which is preferred? Is one more semantically correct or is <em>right</em>? </p>
","<p>They are completely equivalent when used with <code>printf()</code>. Personally, I prefer <code>%d</code>, it's used more often (should I say ""it's the idiomatic conversion specifier for <code>int</code>""?).</p>

<p>(One difference between <code>%i</code> and <code>%d</code> is that when used with <code>scanf()</code>, then <code>%d</code> always expects a decimal integer, whereas <code>%i</code> recognizes the <code>0</code> and <code>0x</code> prefixes as octal and hexadecimal, but no sane programmer uses <code>scanf()</code> anyway so this should not be a concern.)</p>
","17329670"
"How to read a line from a text file in c/c++?","110315","","<p>After exhaustive googling and visiting many forums, I am yet to find a good comprehensive answer for this question. A lot of the forums suggest using the get line 
<code>istream&amp; getline (char* s, streamsize n )</code> function. My question is what if I don't know what the length of each line is and cannot predict what the size may be? Also what is it's equivalent in C?</p>

<p>Is there any specific function in c /c++ to read one single line each time from a text file ? </p>

<p>Explanation , with Code snippets will help me a lot.</p>
","<p>In c, you could use fopen, and getch. Usually, if you can't be exactly sure of the length of the longest line, you could allocate a large buffer (e.g. 8kb) and almost be guaranteed of getting all lines.</p>

<p>If there's a chance you may have really really long lines and you have to process line by line, you could malloc a resonable buffer, and use realloc to double it's size each time you get close to filling it.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void handle_line(char *line) {
  printf(""%s"", line);
}

int main(int argc, char *argv[]) {
    int size = 1024, pos;
    int c;
    char *buffer = (char *)malloc(size);

    FILE *f = fopen(""myfile.txt"", ""r"");
    if(f) {
      do { // read all lines in file
        pos = 0;
        do{ // read one line
          c = fgetc(f);
          if(c != EOF) buffer[pos++] = (char)c;
          if(pos &gt;= size - 1) { // increase buffer length - leave room for 0
            size *=2;
            buffer = (char*)realloc(buffer, size);
          }
        }while(c != EOF &amp;&amp; c != '\n');
        buffer[pos] = 0;
        // line is now in buffer
        handle_line(buffer);
      } while(c != EOF); 
      fclose(f);           
    }
    free(buffer);
    return 0;
}
</code></pre>
","3081405"
"static function in C","109855","","<p>What is the point of making a function static in C?</p>
","<p>Making a function <code>static</code> hides it from other translation units, which helps provide <a href=""https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)"">encapsulation</a>.</p>

<p><strong>helper_file.c</strong></p>

<pre><code>int f1(int);        /* prototype */
static int f2(int); /* prototype */

int f1(int foo) {
    return f2(foo); /* ok, f2 is in the same translation unit */
                    /* (basically same .c file) as f1         */
}

int f2(int foo) {
    return 42 + foo;
}
</code></pre>

<p><strong>main.c</strong>:</p>

<pre><code>int f1(int); /* prototype */
int f2(int); /* prototype */

int main(void) {
    f1(10); /* ok, f1 is visible to the linker */
    f2(12); /* nope, f2 is not visible to the linker */
    return 0;
}
</code></pre>
","5319370"
"Printing pointers in C","109565","","<p>I was trying to understand something with pointers, so I wrote this code:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)
{
    char s[] = ""asd"";
    char **p = &amp;s;

    printf(""The value of s is: %p\n"", s);
    printf(""The direction of s is: %p\n"", &amp;s);

    printf(""The value of p is: %p\n"", p);
    printf(""The direction of p is: %p\n"", &amp;p);

    printf(""The direction of s[0] is: %p\n"", &amp;s[0]);
    printf(""The direction of s[1] is: %p\n"", &amp;s[1]);
    printf(""The direction of s[2] is: %p\n"", &amp;s[2]);

    return 0;
}
</code></pre>

<p>When compiling it with gcc I get these warnings:</p>

<pre><code>$ gcc main.c -o main-bin -ansi -pedantic -Wall -lm
main.c: In function ‘main’:
main.c:6: warning: initialization from incompatible pointer type
main.c:9: warning: format ‘%p’ expects type ‘void *’, but argument 2 has type ‘char (*)[4]’
main.c:11: warning: format ‘%p’ expects type ‘void *’, but argument 2 has type ‘char **’
main.c:12: warning: format ‘%p’ expects type ‘void *’, but argument 2 has type ‘char ***’
</code></pre>

<p>(The flags for gcc are because I must be C89)</p>

<p>Why incompatible types of pointer? Isn't the name of an array a pointer to it's first element? So if s is a pointer to 'a', <code>&amp;s</code> must be a <code>char **</code>, no?
And why do I get the other warnings? Do I have to cast the pointers with (<code>void *</code>) in order to print them? </p>

<p>And when running I get something like this:</p>

<pre><code>$ ./main-bin
The value of s is: 0xbfb7c860
The direction of s is: 0xbfb7c860
The value of p is: 0xbfb7c860
The direction of p is: 0xbfb7c85c
The direction of s[0] is: 0xbfb7c860
The direction of s[1] is: 0xbfb7c861
The direction of s[2] is: 0xbfb7c862
</code></pre>

<p>How can the value of s and it's direction (and of course the value of <code>p</code>) be the same?</p>
","<p>""s"" is not a ""char*"", it's a ""char[4]"".  And so, ""&amp;s"" is not a ""char**"", but actually ""a pointer to an array of 4 characater"".  Your compiler may treat ""&amp;s"" as if you had written ""&amp;s[0]"", which is roughly the same thing, but is a ""char*"".</p>

<p>When you write ""char** p = &s;"" you are trying to say ""I want p to be set to the address of the thing which currently points to ""asd"".  But currently there is nothing which <em>points</em> to ""asd"".  There is just an array which <em>holds</em> ""asd"";</p>

<pre><code>char s[] = ""asd"";
char *p = &amp;s[0];  // alternately you could use the shorthand char*p = s;
char **pp = &amp;p;
</code></pre>
","197824"
"How to detect reliably Mac OS X, iOS, Linux, Windows in C preprocessor?","109507","","<p>If there's some cross-platform C/C++ code that should be compiled on Mac OS X, iOS, Linux, Windows, how can I detect them reliably during preprocessor process?</p>
","<p>There are predefined macros that are used by most compilers, you can find the list <a href=""http://sourceforge.net/p/predef/wiki/OperatingSystems/"" rel=""noreferrer"">[here]</a>. GCC compiler predefined macros can be found <a href=""http://gcc.gnu.org/onlinedocs/cpp/Predefined-Macros.html"" rel=""noreferrer"">[here]</a>.
Here is an example for gcc:</p>

<pre><code>#ifdef _WIN32
   //define something for Windows (32-bit and 64-bit, this part is common)
   #ifdef _WIN64
      //define something for Windows (64-bit only)
   #else
      //define something for Windows (32-bit only)
   #endif
#elif __APPLE__
    #include ""TargetConditionals.h""
    #if TARGET_IPHONE_SIMULATOR
         // iOS Simulator
    #elif TARGET_OS_IPHONE
        // iOS device
    #elif TARGET_OS_MAC
        // Other kinds of Mac OS
    #else
    #   error ""Unknown Apple platform""
    #endif
#elif __linux__
    // linux
#elif __unix__ // all unices not caught above
    // Unix
#elif defined(_POSIX_VERSION)
    // POSIX
#else
#   error ""Unknown compiler""
#endif
</code></pre>

<p>This defined macroses depends on compiler that you are going to use.</p>

<p>The <code>_WIN64</code> <code>#ifdef</code> can be nested into the <code>_WIN32</code> <code>#ifdef</code> because <code>_WIN32</code> is defined when targeting Windows, not only the x86 version. This prevents code duplication if some includes are common to both.</p>
","5920028"
"difference between return 1, return 0 and return -1 and exit?","109466","","<p>for example consider following code</p>

<pre><code>int main(int argc,char *argv[])
{
   int *p,*q;
   p = (int *)malloc(sizeof(int)*10);
   q = (int *)malloc(sizeof(int)*10);
   if (p == 0)
{
    printf(""ERROR: Out of memory\n"");
        return 1;
}


   if (q == 0)
{
    printf(""ERROR: Out of memory\n"");
        exit(0);
}

   return 0;
}
</code></pre>

<p>what does return 0,return 1,exit(0) do in above program..
exit(0) will exit total program and control comes out of loop but what happens in case of return 0,return 1,return -1. </p>
","<p><code>return</code> from <code>main()</code> is equivalent to <code>exit</code></p>

<p>the program terminates immediately execution with <strong>exit status</strong> set as the value passed to <code>return</code> or <code>exit</code></p>

<p><code>return</code> in an inner function (not <code>main</code>) will terminate immediately the execution of the specific function returning the given result to the calling function.</p>

<p><code>exit</code> from anywhere on your code will terminate program execution immediately.</p>

<hr>

<p>status 0 means the program succeeded.</p>

<p>status different from 0 means the program exited due to error or anomaly.</p>

<p>If you exit with a status different from 0 you're supposed to print an error message to <code>stderr</code> so instead of using <code>printf</code> better something like</p>

<pre><code>if(errorOccurred) {
    fprintf(stderr, ""meaningful message here\n"");
    return -1;
}
</code></pre>

<p>note that (depending on the OS you're on) there are some conventions about return codes.</p>

<p>Google for ""exit status codes"" or similar and you'll find plenty of information on SO and elsewhere.</p>

<hr>

<p>Worth mentioning that the OS itself may terminate your program with specific exit status codes if you attempt to do some invalid operations like reading memory you have no access to.</p>
","22604382"
"Get IP address of an interface on Linux","109466","","<p>How can I get the <a href=""http://en.wikipedia.org/wiki/IPv4"" rel=""noreferrer"">IPv4</a> address of an interface on Linux from C code?</p>

<p>For example, I'd like to get the IP address (if any) assigned to eth0.</p>
","<p>Try this:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt; /* for strncpy */

#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/ioctl.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;net/if.h&gt;
#include &lt;arpa/inet.h&gt;

int
main()
{
 int fd;
 struct ifreq ifr;

 fd = socket(AF_INET, SOCK_DGRAM, 0);

 /* I want to get an IPv4 IP address */
 ifr.ifr_addr.sa_family = AF_INET;

 /* I want IP address attached to ""eth0"" */
 strncpy(ifr.ifr_name, ""eth0"", IFNAMSIZ-1);

 ioctl(fd, SIOCGIFADDR, &amp;ifr);

 close(fd);

 /* display result */
 printf(""%s\n"", inet_ntoa(((struct sockaddr_in *)&amp;ifr.ifr_addr)-&gt;sin_addr));

 return 0;
}
</code></pre>

<p>The code sample is taken from <a href=""http://www.geekpage.jp/en/programming/linux-network/get-ipaddr.php"" rel=""noreferrer"">here</a>.</p>
","2283541"
"C Programming: How to read the whole file contents into a buffer","109221","","<p>I want to write the full contents of a file into a buffer. The file actually only contains a string which i need to compare with a string.</p>

<p>What would be the most efficient option which is portable even on linux.</p>

<p>ENV: Windows</p>
","<p>Portability between Linux and Windows is a big headache, since Linux is a POSIX-conformant system with - generally - a proper, high quality toolchain for C, whereas Windows doesn't even provide a lot of functions in the C standard library.</p>

<p>However, if you want to stick to the standard, you can write something like this:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

FILE *f = fopen(""textfile.txt"", ""rb"");
fseek(f, 0, SEEK_END);
long fsize = ftell(f);
fseek(f, 0, SEEK_SET);  //same as rewind(f);

char *string = malloc(fsize + 1);
fread(string, fsize, 1, f);
fclose(f);

string[fsize] = 0;
</code></pre>

<p>Here <code>string</code> will contain the contents of the text file as a properly 0-terminated C string. This code is just standard C, it's not POSIX-specific (although that it doesn't gurantee it will work/compile on Windows...)</p>
","14002993"
"Creating a new directory in C","108321","","<p>I want to write a program that checks for the existence of a directory; if that directory does not exist then it creates the directory and a log file inside of it, but if the directory already exists, then it just creates a new log file in that folder.</p>

<p>How would I do this in C with Linux?</p>
","<p>Look at <a href=""http://linux.die.net/man/2/stat""><code>stat</code></a> for checking if the directory exists,</p>

<p>And <a href=""http://linux.die.net/man/2/mkdir""><code>mkdir</code></a>, to create a directory.</p>

<pre><code>#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;

struct stat st = {0};

if (stat(""/some/directory"", &amp;st) == -1) {
    mkdir(""/some/directory"", 0700);
}
</code></pre>

<p>You can see the manual of these functions with the <code>man 2 stat</code> and <code>man 2 mkdir</code> commands.</p>
","7430262"
"Assign one struct to another in C","108314","","<p>Can you assign one instance of a struct to another, like so:</p>

<pre><code>struct Test t1;
struct Test t2;
t2 = t1;
</code></pre>

<p>I have seen it work for simple structures, bu does it work for complex structures?<br>
How does the compiler know how to copy data items depending on their type, i.e. differentiating between an <code>int</code> and string?</p>
","<p>Yes if the structure is of the same type. Think it as a memory copy.</p>
","2302359"
"How to compile C program on command line using MinGW?","107976","","<p>What command does one have to enter at the command line in Windows 7 to compile a basic C program?</p>

<p>Like I am literally wondering what you type in the command prompt, to compile a .c file.</p>

<p>I tried:</p>

<pre><code>&gt; gcc foo.c
</code></pre>

<p>But it says: </p>

<pre><code>'gcc' is not recognized as an internal or external command, 
 operable program or batch file.
</code></pre>

<p>I also tried:</p>

<pre><code>&gt; minGW foo.c
</code></pre>

<p>But I got back:         </p>

<pre><code> 'minGW' is not recognized as an internal or external command, 
  operable program or batch file.
</code></pre>

<p>I have a path environment variable set to where MinGW is installed:</p>

<pre><code>C:\Program Files (x86)\CodeBlocks\MinGW\bin
</code></pre>

<p>I can't really find any information on where I'm going wrong, and can't find anything in the official MinGW documentation, as it seems like this is something so simple, sort of an embarrassing question, that it's figured people know what to do?</p>
","<p>It indicates it couldn't find <code>gcc.exe</code>.</p>

<blockquote>
  <p>I have a path environment variable set to where MinGW is installed</p>
</blockquote>

<p>Maybe you haven't set the path correctly?</p>

<pre><code>echo %path%
</code></pre>

<p>shows the path to gcc.exe? Otherwise, compilation is similar to Unix:</p>

<pre><code>gcc filename.c -o filename
</code></pre>
","10661754"
"Why would anybody use C over C++?","107754","","<p>Although people seem to like to <a href=""http://odgaard.org/jeod/funny/interview.html"" rel=""noreferrer"">complain</a> about C++, I haven't been able to find much evidence as to why you would want to choose C over C++. C doesn't seem to get nearly as much flak and if C++ has all these problems why can't you just restrict yourself to the C subset? What are your thoughts/experience?</p>
","<p>Joel's answer is good for reasons you might <em>have</em> to use C, though there are a few others:</p>

<ul>
<li>You must meet industry guidelines, which are easier to prove and test for in C.</li>
<li>You have tools to work with C, but not C++ (think not just about the compiler, but all the support tools, coverage, analysis, etc)</li>
<li>Your target developers are C gurus</li>
<li>You're writing drivers, kernels, or other low level code</li>
<li>You know the C++ compiler isn't good at optimizing the kind of code you need to write</li>
<li>Your app not only doesn't lend itself to be object oriented, but would be harder to write in that form</li>
</ul>

<p>In some cases, though, you might <em>want</em> to use C rather than C++:</p>

<ul>
<li>You want the performance of assembler without the trouble of coding in assembler (C++ is, in theory, capable of 'perfect' performance, but the compilers aren't as good at seeing optimizations a good C programmer will see)</li>
<li>The software you're writing is trivial, or nearly so - whip out the tiny C compiler, write a few lines of code, compile and you're all set - no need to open a huge editor with helpers, no need to write practically empty and useless classes, deal with namespaces, etc.  You can do nearly the same thing with a C++ compiler and simply use the C subset, but the C++ compiler is slower, even for tiny programs.</li>
<li>You need extreme performance or small code size, and know the C++ compiler will actually make it harder to accomplish due to the size and performance of the libraries</li>
</ul>

<p>You contend that you could just use the C subset and compile with a C++ compiler, but you'll find that if you do that you'll get slightly different results depending on the compiler.</p>

<p>Regardless, if you're doing that, you're using C.  Is your question really ""Why don't C programmers use C++ compilers?""  If it is, then you either don't understand the language differences, or you don't understand compiler theory.</p>
","497869"
"How do I get the unix timestamp in C as an int?","107706","","<p>I would like to get the current timestamp and print it out using fprintf.</p>
","<p>For 32-bit systems:</p>

<pre><code>fprintf(stdout, ""%u\n"", (unsigned)time(NULL)); 
</code></pre>

<p>For 64-bit systems:</p>

<pre><code>fprintf(stdout, ""%lu\n"", (unsigned long)time(NULL)); 
</code></pre>
","11765384"
"stdlib and colored output in C","106603","","<p>I am making a simple application which requires colored output. How can I make my output colored like emacs and bash do?</p>

<p>I don't care about Windows, as my application is only for UNIX systems.</p>
","<p>All modern terminal emulators use ANSI escape codes to show colours and other things.<br>
Don't bother with libraries, the code is really simple.</p>

<p>More info is <a href=""http://en.wikipedia.org/wiki/ANSI_escape_code#Colors"" rel=""noreferrer"">here</a>.</p>

<p>Example in C:</p>

<pre><code>#include &lt;stdio.h&gt;

#define ANSI_COLOR_RED     ""\x1b[31m""
#define ANSI_COLOR_GREEN   ""\x1b[32m""
#define ANSI_COLOR_YELLOW  ""\x1b[33m""
#define ANSI_COLOR_BLUE    ""\x1b[34m""
#define ANSI_COLOR_MAGENTA ""\x1b[35m""
#define ANSI_COLOR_CYAN    ""\x1b[36m""
#define ANSI_COLOR_RESET   ""\x1b[0m""

int main (int argc, char const *argv[]) {

  printf(ANSI_COLOR_RED     ""This text is RED!""     ANSI_COLOR_RESET ""\n"");
  printf(ANSI_COLOR_GREEN   ""This text is GREEN!""   ANSI_COLOR_RESET ""\n"");
  printf(ANSI_COLOR_YELLOW  ""This text is YELLOW!""  ANSI_COLOR_RESET ""\n"");
  printf(ANSI_COLOR_BLUE    ""This text is BLUE!""    ANSI_COLOR_RESET ""\n"");
  printf(ANSI_COLOR_MAGENTA ""This text is MAGENTA!"" ANSI_COLOR_RESET ""\n"");
  printf(ANSI_COLOR_CYAN    ""This text is CYAN!""    ANSI_COLOR_RESET ""\n"");

  return 0;
}
</code></pre>
","3219471"
"Usage of \b and \r in C","106590","","<p><code>\b</code> and <code>\r</code> are rarely used in practice. I just found out that I misunderstood these two escape sequences. A simple test:</p>

<pre><code>printf(""foo\bbar\n"");
</code></pre>

<p>I expected it to output <code>fobar</code>, because <code>\b</code> will backspace the cursor, and <code>b</code> will overwrite the second <code>o</code>, but instead it outputs: <code>foobar</code></p>

<p>The same is with <code>\r</code>:</p>

<pre><code>printf(""foo\rbar\n"");
</code></pre>

<p>I thought <code>\r</code> will move the cursor to the beginning of the current line, so <code>bar</code> will replace <code>foo</code>, so the final output should be <code>bar</code>. However, it actually outputs:</p>

<pre><code>foo
bar
</code></pre>
","<p>The characters will get send just like that to the underlying output device (in your case probably a terminal emulator).</p>

<p>It is up to the terminal's implementation then how those characters get actually displayed. For example, a bell (<code>\a</code>) could trigger a beep sound on some terminals, a flash of the screen on others, or it will be completely ignored. It all depends on how the terminal is configured.</p>
","17236371"
"do { ... } while (0) — what is it good for?","106194","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/154136/why-are-there-sometimes-meaningless-do-while-and-if-else-statements-in-c-c-macr"">Why are there sometimes meaningless do/while and if/else statements in C/C++ macros?</a>  </p>
</blockquote>



<p>I've been seeing that expression for over 10 years now. I've been trying to think what it's good for. Since I see it mostly in #defines, I assume it's good for inner scope variable declaration and for using breaks (instead of gotos.)</p>

<p>Is it good for anything else? Do you use it?</p>
","<p>It's the only construct in C that you can use to <code>#define</code> a multistatement operation, put a semicolon after, and still use within an <code>if</code> statement. An example might help:</p>

<pre><code>#define FOO(x) foo(x); bar(x)

if (condition)
    FOO(x);
else // syntax error here
    ...;
</code></pre>

<p>Even using braces doesn't help:</p>

<pre><code>#define FOO(x) { foo(x); bar(x); }
</code></pre>

<p>Using this in an <code>if</code> statement would require that you omit the semicolon, which is counterintuitive:</p>

<pre><code>if (condition)
    FOO(x)
else
    ...
</code></pre>

<p>If you define FOO like this:</p>

<pre><code>#define FOO(x) do { foo(x); bar(x); } while (0)
</code></pre>

<p>then the following is syntactically correct:</p>

<pre><code>if (condition)
    FOO(x);
else
    ....
</code></pre>
","257425"
"Opensource C/C++ decompiler","106002","","<p>Duplicate of <a href=""https://stackoverflow.com/questions/193896/whats-a-good-c-decompiler"">What&#39;s a good C decompiler?</a> and <a href=""https://stackoverflow.com/questions/205059/is-there-a-c-decompiler"">Is there a C++ decompiler?</a> taken together.</p>

<p>Does somebody know any opensource <strong>C/C++</strong> decompiler? I don't want to use any commercial solution like <strong>IDA Pro</strong>.</p>
","<p>Check out <a href=""http://boomerang.sourceforge.net/"" rel=""noreferrer"">Boomerang</a>.</p>
","711236"
"Rounding integer division (instead of truncating)","105939","","<p>I was curious to know how I can round a number to the nearest <s>tenth</s> whole number. For instance, if I had:</p>

<pre><code>int a = 59 / 4;
</code></pre>

<p>which would be 14.75 calculated in floating point; how can I store the number as 15 in ""a""?</p>
","<pre><code>int a = 59.0f / 4.0f + 0.5f;
</code></pre>

<p>This only works when assigning to an int as it discards anything after the '.'</p>

<p><strong>Edit:</strong>
This solution will only work in the simplest of cases. A more robust solution would be:</p>

<pre><code>unsigned int round_closest(unsigned int dividend, unsigned int divisor)
{
    return (dividend + (divisor / 2)) / divisor;
}
</code></pre>
","2422723"
"How to correctly assign a new string value?","105607","","<p>I'm trying to understand how to solve this trivial problem in C, in the cleanest/safest way. Here's my example:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
    typedef struct
    {
        char name[20];
        char surname[20];
        int unsigned age;
    } person;

    //Here i can pass strings as values...how does it works?
    person p = {""John"", ""Doe"",30};

    printf(""Name: %s; Age: %d\n"",p.name,p.age);
    // This works as expected...
    p.age = 25;
    //...but the same approach doesn't work with a string
    p.name = ""Jane"";

    printf(""Name: %s; Age: %d\n"",p.name,p.age);

    return 1;
}
</code></pre>

<p>The compiler's error is:</p>

<blockquote>
  <p>main.c: In function ‘main’: main.c:18:
  error: incompatible types when
  assigning to type ‘char[20]’ from type
  ‘char *’</p>
</blockquote>

<p>I understand that C (not C++) has no String type and instead uses arrays of chars, so another way to do this was to alter the example struct to hold pointers of chars:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
    typedef struct
    {
        char *name;
        char *surname;
        int unsigned age;
    } person;

    person p = {""John"", ""Doe"",30};

    printf(""Name: %s; Age: %d\n"",p.name,p.age);

    p.age = 25;

    p.name = ""Jane"";

    printf(""Name: %s; Age: %d\n"",p.name,p.age);

    return 1;
}
</code></pre>

<p>This works as expected but I wonder if there a better way to do this. Thanks.</p>
","<p>The first example doesn't work because you can't assign values to arrays - arrays work (sort of) like const pointers in this respect. What you can do though is copy a new value into the array:</p>

<pre><code>strcpy(p.name, ""Jane"");
</code></pre>

<p>Char arrays are fine to use if you know the maximum size of the string in advance, e.g. in the first example you are 100% sure that the name will fit into 19 characters (not 20 because one character is always needed to store the terminating zero value).</p>

<p>Conversely, pointers are better if you don't know the possible maximum size of your string, and/or you want to optimize your memory usage, e.g. avoid reserving 512 characters for the name ""John"". However, with pointers you need to dynamically allocate the buffer they point to, and free it when not needed anymore, to avoid memory leaks.</p>

<p><strong>Update:</strong> example of dynamically allocated buffers (using the struct definition in your 2nd example):</p>

<pre><code>char* firstName = ""Johnnie"";
char* surname = ""B. Goode"";
person p;

p.name = malloc(strlen(firstName) + 1);
p.surname = malloc(strlen(surname) + 1);

p.age = 25;
strcpy(p.name, firstName);
strcpy(p.surname, surname);

printf(""Name: %s; Age: %d\n"",p.name,p.age);

free(p.surname);
free(p.name);
</code></pre>
","3131362"
"Copying one structure to another","105566","","<p>I know that I can copy the structure member by member, instead of that can I do a <code>memcpy</code> on structures?</p>

<p>Is it advisable to do so?</p>

<p>In my structure, I have a string also as member which I have to copy to another structure having the same member. How do I do that?</p>
","<p>Copying by plain assignment is best, since it's shorter, easier to read, and has a higher level of abstraction. Instead of saying (to the human reader of the code) ""copy these bits from here to there"", and requiring the reader to think about the size argument to the copy, you're just doing a plain assignment (""copy this value from here to here""). There can be no hesitation about whether or not the size is correct.</p>

<p>Also, if the structure is heavily padded, assignment might make the compiler emit something more efficient, since it doesn't have to copy the padding (and it knows where it is), but <code>mempcy()</code> doesn't so it will always copy the exact number of bytes you tell it to copy.</p>

<p>If your string is an actual array, i.e.:</p>

<pre><code>struct {
  char string[32];
  size_t len;
} a, b;

strcpy(a.string, ""hello"");
a.len = strlen(a.string);
</code></pre>

<p>Then you can still use plain assignment:</p>

<pre><code>b = a;
</code></pre>

<p>To get a complete copy. For variable-length data modelled like this though, this is not the most efficient way to do the copy since the entire array will always be copied.</p>

<p>Beware though, that copying structs that contain pointers to heap-allocated memory can be a bit dangerous, since by doing so you're <em>aliasing</em> the pointer, and typically making it ambiguous who owns the pointer after the copying operation.</p>

<p>For these situations a ""deep copy"" is really the only choice, and that needs to go in a function.</p>
","4931171"
"C program to check little vs. big endian","105485","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2100331/c-macro-definition-to-determine-big-endian-or-little-endian-machine"">C Macro definition to determine big endian or little endian machine?</a>  </p>
</blockquote>



<pre><code>int main()
{
  int x = 1;

  char *y = (char*)&amp;x;

  printf(""%c\n"",*y+48);
}
</code></pre>

<p>If it's little endian it will print 1.  If it's big endian it will print 0.  Is that correct?  Or will setting a char* to int x always point to the least significant bit, regardless of endianness?</p>
","<p>In short, yes.</p>

<p>Suppose we are on a 32-bit machine.</p>

<p>If it is little endian, the <code>x</code> in the memory will be something like:</p>

<pre><code>       higher memory
          -----&gt;
    +----+----+----+----+
    |0x01|0x00|0x00|0x00|
    +----+----+----+----+
    A
    |
   &amp;x
</code></pre>

<p>so <code>(char*)(*x) == 1</code>, and <code>*y+48 == '1'</code>.</p>

<p>If it is big endian, it will be:</p>

<pre><code>    +----+----+----+----+
    |0x00|0x00|0x00|0x01|
    +----+----+----+----+
    A
    |
   &amp;x
</code></pre>

<p>so this one will be <code>'0'</code>.</p>
","12792301"
"How to use nanosleep() in C? What are `tim.tv_sec` and `tim.tv_nsec`?","105307","","<p>What is the use of <code>tim.tv_sec</code> and <code>tim.tv_nsec</code> in the following?</p>

<p>How can I sleep execution for <code>500000</code> microseconds?</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main()
{
   struct timespec tim, tim2;
   tim.tv_sec = 1;
   tim.tv_nsec = 500;

   if(nanosleep(&amp;tim , &amp;tim2) &lt; 0 )   
   {
      printf(""Nano sleep system call failed \n"");
      return -1;
   }

   printf(""Nano sleep successfull \n"");

   return 0;
}
</code></pre>
","<p>Half a second is 500,000,000 nanoseconds, so your code should read:</p>

<pre><code>tim.tv_sec  = 0;
tim.tv_nsec = 500000000L;
</code></pre>

<p>As things stand, you code is sleeping for 1.0000005s (1s + 500ns).</p>
","7684384"
"What do .c and .h file extensions mean to C?","105126","","<p>It's all in the title; super-simple I reckon, but it's so hard to search for syntactical things anywhere.</p>

<p>These are two library files that I'm copying from <a href=""https://manual.cs50.net/library/"" rel=""noreferrer"">CS50.net</a>, and I'm wondering why they have two different extensions.</p>
","<p>.c : c file (where the real action is, in general)</p>

<p>.h : header file (to be included with a preprocessor <code>#include</code> directive). Contains stuff that is normally deemed to be shared with other parts of your code, like function prototypes, #define'd stuff, extern declaration for global variables (oh, the horror) and the like.</p>

<p>Technically, you could put everything in a single file. A whole C program. million of lines. But we humans tend to organize things. So you create different C files, each one containing particular functions. That's all nice and clean. Then suddenly you realize that a <strong>declaration</strong> you have into a given C file should exist also in another C file. So you would duplicate them. The best is therefore to extract the declaration and put it into a common file, which is the .h</p>

<p>For example, in the cs50.h you find what are called ""forward declarations"" of your functions.
A forward declaration is a quick way to tell the compiler how a function should be called (e.g. what input params) and what it returns, so it can perform proper checking (for example if you call a function with the wrong number of parameters, it will complain).</p>

<p>Another example. Suppose you write a .c file containing a function performing regular expression matching. You want your function to accept the regular expression, the string to match, and a parameter that tells if the comparison has to be case insensitive.</p>

<p>in the .c you will therefore put </p>

<pre><code>bool matches(string regexp, string s, int flags) { the code }
</code></pre>

<p>Now, assume you want to pass the following flags:</p>

<p>0: if the search is case sensitive</p>

<p>1: if the search is case insensitive</p>

<p>And you want to keep yourself open to new flags, so you did not put a boolean.
playing with numbers is hard, so you define useful names for these flags</p>

<pre><code>#define MATCH_CASE_SENSITIVE 0
#define MATCH_CASE_INSENSITIVE 1
</code></pre>

<p>This info goes into the .h, because if any program wants to use these labels, it has no way of knowing them unless you include the info. Of course you can put them in the .c, but then you would have to include the .c code (whole!) which is a waste of time and a source of trouble.</p>
","1695230"
"Time in milliseconds","105009","","<p>Using the following code:</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;time.h&gt;
int main()
{
    clock_t start, stop;
    int i;
    start = clock();
    for(i=0; i&lt;2000;i++)
    {
        printf(""%d"", (i*1)+(1^4));
    }
    printf(""\n\n"");
    stop = clock();

    //(double)(stop - start) / CLOCKS_PER_SEC

    printf(""%6.3f"", start);
    printf(""\n\n%6.3f"", stop);
    return 0;
}
</code></pre>

<p>I get the following output:</p>

<pre>


  2.169

  2.169
</pre>

<ol>
<li><p>Start and stop times are the same. Does it mean that the program hardly takes time to complete execution?</p></li>
<li><p>If 1. is false, then atleast the no.of digits beyond the (.) should differ, which does not happen here. Is my logic correct?</p></li>
</ol>

<p><strong>Note:</strong> I need to calculate the time taken for execution, and hence the above code.</p>
","<p>Yes, this program has likely used less than a millsecond. Try using microsecond resolution with <code>timeval</code>.</p>

<p>e.g:</p>

<pre><code>#include &lt;sys/time.h&gt;

struct timeval stop, start;
gettimeofday(&amp;start, NULL);
//do stuff
gettimeofday(&amp;stop, NULL);
printf(""took %lu\n"", stop.tv_usec - start.tv_usec);
</code></pre>

<p>You can then query the difference (in microseconds) between <code>stop.tv_usec - start.tv_usec</code>. Note that this will only work for subsecond times (as <code>tv_usec</code> will loop). For the general case use a combination of <code>tv_sec</code> and <code>tv_usec</code>.</p>

<p><strong>Edit 2016-08-19</strong></p>

<p>A more appropriate approach on system with <code>clock_gettime</code> support would be:</p>

<pre><code>struct timespec start, end;
clock_gettime(CLOCK_MONOTONIC_RAW, &amp;start);
//do stuff
clock_gettime(CLOCK_MONOTONIC_RAW, &amp;end);

uint64_t delta_us = (end.tv_sec - start.tv_sec) * 1000000 + (end.tv_nsec - start.tv_nsec) / 1000;
</code></pre>
","10192994"
"Parsing JSON using C","104930","","<p>I'm trying to find a good way to parse JSON in C.  I really don't need a huge library or anything, I would rather have something small and lightweight with a bare minimum of features, but good documentation. </p>

<p>Does anyone have anything they can point me to?</p>
","<p>Json isn't a huge language to start with, so libraries for it are likely to be small(er than Xml libraries, at least).</p>

<p>There a whole ton of <a href=""http://www.json.org/"">C libraries linked at Json.org</a>.  Maybe one of them will work well for you.</p>
","6673986"
"Multiple arguments to function called by pthread_create()?","104839","","<p>I need to pass multiple arguments to a function that I would like to call on a separate thread. I've <a href=""https://computing.llnl.gov/tutorials/pthreads/#PassingArguments"" rel=""noreferrer"">read</a> that the typical way to do this is to define a struct, pass the function a pointer to that, and dereference it for the arguments. However, I am unable to get this to work:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;pthread.h&gt;

struct arg_struct {
    int arg1;
    int arg2;
};

void *print_the_arguments(void *arguments)
{
    struct arg_struct *args = (struct arg_struct *)args;
    printf(""%d\n"", args -&gt; arg1);
    printf(""%d\n"", args -&gt; arg2);
    pthread_exit(NULL);
    return NULL;
}

int main()
{
    pthread_t some_thread;
    struct arg_struct args;
    args.arg1 = 5;
    args.arg2 = 7;

    if (pthread_create(&amp;some_thread, NULL, &amp;print_the_arguments, (void *)&amp;args) != 0) {
        printf(""Uh-oh!\n"");
        return -1;
    }

    return pthread_join(some_thread, NULL); /* Wait until thread is finished */
}
</code></pre>

<p>The output for this should be:</p>

<pre><code>5
7
</code></pre>

<p>But when I run it I actually get:</p>

<pre><code>141921115
-1947974263
</code></pre>

<p>Anyone know what I'm doing wrong?</p>
","<p>Because you say </p>

<p><code>struct arg_struct *args = (struct arg_struct *)args;</code> </p>

<p>instead of </p>

<p><code>struct arg_struct *args = arguments;</code></p>
","1352767"
"gcc: undefined reference to","104606","","<p>I would like to compile this.</p>

<p><strong>program.c</strong></p>

<pre><code>#include &lt;libavcodec/avcodec.h&gt;

int main(){
    int i = avpicture_get_size(AV_PIX_FMT_RGB24,300,300);
}
</code></pre>

<p>Running this </p>

<pre><code>gcc -I$HOME/ffmpeg/include program.c
</code></pre>

<p>gives error</p>

<pre><code>/tmp/ccxMLBme.o: In function `main':
program.c:(.text+0x18): undefined reference to `avpicture_get_size'
collect2: ld returned 1 exit status
</code></pre>

<p>However, avpicture_get_size is defined. Why is this happening?</p>
","<blockquote>
  <p>However, avpicture_get_size is defined. </p>
</blockquote>

<p>No, as the header  (<code>&lt;libavcodec/avcodec.h&gt;</code>)  just <strong>declares</strong> it.</p>

<p>The <strong>definition</strong> is in the library itself.</p>

<p>So you might like to add the linker option to link <code>libavcodec</code> when invoking gcc:</p>

<pre><code>-lavcodec
</code></pre>

<hr>

<p>Please also note that libraries need to be specified on the command line <strong>after</strong> the files needing them:</p>

<pre><code>gcc -I$HOME/ffmpeg/include program.c -lavcodec
</code></pre>

<p><strong>Not</strong> like this:</p>

<pre><code>gcc -lavcodec -I$HOME/ffmpeg/include program.c
</code></pre>

<hr>

<p><strong>Update:</strong></p>

<p>Referring to <em><a href=""https://stackoverflow.com/users/226975/wyzard"">Wyzard</a></em>'s comment the complete command might look like this:</p>

<pre><code>gcc -I$HOME/ffmpeg/include program.c -L$HOME/ffmpeg/lib -lavcodec
</code></pre>

<p>For libraries not stored in the linkers standard location the option <code>-L</code> specifies an addtional search path to lookup libraries specified using the <code>-l</code> option, that is <code>libavcodec.x.y.z</code> in this case.</p>

<hr>

<p>For a detailed reference on gcc's linker option, <a href=""http://gcc.gnu.org/onlinedocs/gcc/Link-Options.html"" rel=""noreferrer"">please read here</a>.</p>
","22426590"
"CreateProcess: No such file or directory","104439","","<p>I am getting this error whenever I try to run GCC outside of its installation directory (E:\MinGW\bin). </p>

<p>So, let's say I am in E:\code and have a file called one.c. Running:
<code>gcc one.c -o one.exe</code> will give me this error:</p>

<pre><code>gcc: CreateProcess: No such file or directory
</code></pre>

<p>The only workaround is to navigate to its installation directory, run gcc from there, and specify all the other paths. My environmental variable ""Path"" contains <code>E:\MinGW\bin</code>.</p>

<p>Any suggestions to fixing this problem? I am running Windows XP SP3.</p>
","<p>Its specifically told that you need to reboot after you set the environmental variables in windows for migwin. </p>
","4447561"
"Difference between shared objects (.so), static libraries (.a), and DLL's (.so)?","104147","","<p>I have been involved in some debate with respect to libraries in Linux, and would like to confirm some things.</p>

<p>It is to my understanding (please correct me if I am wrong and I will edit my post later), that there are two ways of using libraries when building an application:</p>

<ol>
<li>Static libraries (.a files): At link time, a copy of the entire library is put into the final application so that the functions within the library are always available to the calling application</li>
<li>Shared objects (.so files): At link time, the object is just verified against its API via the corresponding header (.h) file. The library isn't actually used until run time, where it is needed.</li>
</ol>

<p>The obvious advantage of static libraries is that they allow the entire application to be self-contained, while the benefit of dynamic libraries is that the "".so"" file can be replaced (ie: in case it needs to be updated due to a security bug) without requiring the base application to be recompiled.</p>

<p>I have heard some people make a distinction between shared objects and dynamic linked libraries (DLL's), even though they are both "".so"" files. Is there any distinction between shared objects and DLLs when it comes to C/C++ development on Linux or any other POSIX compliant OS (ie: MINIX, UNIX, QNX, etc)? I am told that one key difference (so far) is that shared objects are just used at run time, while DLL's must be opened first using the dlopen() call within the application.</p>

<p>Finally, I have also heard some developers mention ""shared archives"", which, to my understanding, are also static libraries themselves, but are never used by an application directly. Instead, other static libraries will link against the ""shared archives"" to pull some (but not all) functions/resources from the shared archive into the static library being built.</p>

<p>Thank you all in advance for your assistance.</p>

<h1>Update</h1>

<hr>

<p>In the context in which these terms were provided to me, I've found out the slight differences in these terms, which may even be just colloquialisms in my industry:</p>

<ol>
<li>Shared Object: A library that is automatically linked into a program when the program starts, and exists as a standalone file. The library is included in the linking list at compile time (ie: LDOPTS+=-lmylib for a library file named mylib.so). <strong>The library must be present at compile time, and when the application starts.</strong></li>
<li>Static Library: A library that is merged into the actual program itself at build time for a single (larger) application containing the application code and the library code that is automatically linked into a program when the program is built, and the final binary containing both the main program and the library itself exists as a single standalone binary file. The library is included in the linking list at compile time (ie: LDOPTS+=-lmylib for a library file named mylib.a). <strong>The library must be present at compile time.</strong></li>
<li>DLL: Essentially the same as a shared object, but rather than being included in the linking list at compile time, the library is loaded via <code>dlopen()</code>/<code>dlsym()</code> commands so that the library does not need to be present at build time for the program to compile. <strong>Also, the library does not need to be present (necessarily) at application startup or compile time</strong>, as it is only needed at the moment the <code>dlopen</code>/<code>dlsym</code> calls are made.</li>
<li>Shared Archive: Essentially the same as a static library, but is compiled with the ""export-shared"" and ""-fPIC"" flags. The library is included in the linking list at compile time (ie: LDOPTS+=-lmylib<code>S</code> for a library file named mylib<code>S</code>.a). The distinction between the two is that this additional flag is required if a shared object or DLL wants to statically link the shared archive into its own code AND be able to make the functions in the shared object available to other programs, rather than just using them internal to the DLL. This is useful in the case when someone provides you with a static library, and you wish to repackage it as an SO. <strong>The library must be present at compile time.</strong></li>
</ol>

<h1>Additional Update</h1>

<p>The distinction between ""<code>DLL</code>"" and ""<code>shared library</code>"" was just a (lazy, inaccurate) colloquialism in the company I worked in at the time (Windows developers being forced to shift to Linux development, and the term stuck), adhering to the descriptions noted above.</p>

<p>Additionally, the trailing ""<code>S</code>"" literal after the library name, in the case of ""shared archives"" was just a convention used at that company, and not in industry in general.</p>
","<p>I've always thought that DLLs and shared objects are just different terms for the same thing - Windows calls them DLLs, while on UNIX systems they're shared objects, with the general term - dynamically linked library - covering both (even the function to open a .so on UNIX is called <code>dlopen()</code> after 'dynamic library').</p>

<p>They are indeed only linked at application startup, however your notion of verification against the header file is incorrect. The header file defines prototypes which are required in order to compile the code which uses the library, but at link time the linker looks inside the library itself to make sure the functions it needs are actually there. The linker has to find the function bodies somewhere at link time or it'll raise an error. It ALSO does that at runtime, because as you rightly point out the library itself might have changed since the program was compiled. This is why ABI stability is so important in platform libraries, as the ABI changing is what breaks existing programs compiled against older versions.</p>

<p>Static libraries are just bundles of object files straight out of the compiler, just like the ones that you are building yourself as part of your project's compilation, so they get pulled in and fed to the linker in exactly the same way, and unused bits are dropped in exactly the same way.</p>
","9688338"
"What's the difference between a null pointer and a void pointer?","104146","","<p>Whats the difference between a <strong>Null pointer</strong> &amp; a <strong>Void pointer</strong>?</p>
","<p><em>Null pointer</em> is a special reserved <strong>value</strong> of a pointer. A pointer of any type has such a reserved value. Formally, each specific pointer type (<code>int *</code>, <code>char *</code> etc.) has its own dedicated null-pointer value. Conceptually, when a pointer has that null value it is not pointing anywhere.</p>

<p><em>Void pointer</em> is a specific pointer <strong>type</strong> - <code>void *</code> - a pointer that points to some data location in storage, which doesn't have any specific type.</p>

<p>So, once again, <em>null pointer</em> is a <strong>value</strong>, while <em>void pointer</em> is a <strong>type</strong>. These concepts are totally different and non-comparable. That essentially means that your question, as stated, is not exactly valid. It is like asking, for example, ""What is the difference between a triangle and a car?"".</p>
","3581630"
"Char array declaration and initialization in C","104010","","<p>I was curious about why this is not allowed in C:</p>

<pre><code>char myarray[4];

myarray = ""abc"";
</code></pre>

<p>And this is allowed:</p>

<pre><code>char myarray[4] = ""abc"";
</code></pre>

<p>I know that in the first case I should use <strong>strcpy</strong>:</p>

<pre><code>char myarray[4];

strcpy(myarray, ""abc"");
</code></pre>

<p>But why declaration and later initialization is not allowed and declaration and simultaneous initialization is allowed? Does it relate to memory mapping of C programs?</p>

<p>Thanks!</p>
","<p>That's because your first code snippet is not performing <em>initialization</em>, but <em>assignment</em>:</p>

<pre><code>char myarray[4] = ""abc"";  // Initialization.

myarray = ""abc"";          // Assignment.
</code></pre>

<p>And arrays are not directly assignable in C.</p>

<p>The name <code>myarray</code> actually resolves to the address of its first element (<code>&amp;myarray[0]</code>), which is not an <a href=""http://en.wikipedia.org/wiki/Value_%28computer_science%29"" rel=""noreferrer"">lvalue</a>, and as such cannot be the target of an assignment.</p>
","4978088"
"Difference between int32, int, int32_t, int8 and int8_t","103909","","<p>I came across the data type <code>int32_t</code> in a C program recently.  I know that it stores 32 bits, but don't <code>int</code> and <code>int32</code> do the same?</p>

<p>Also, I want to use <code>char</code> in a program.  Can I use <code>int8_t</code> instead? What is the difference?</p>

<p>To summarize: <strong>what is the difference between int32, int, int32_t, int8 and int8_t in C?</strong></p>
","<p>Between <code>int32</code> and <code>int32_t</code>, (and likewise between <code>int8</code> and <code>int8_t</code>) the difference is pretty simple: the C standard defines <code>int8_t</code> and <code>int32_t</code>, but does not define anything named <code>int8</code> or <code>int32</code> -- the latter (if they exist at all) is probably from some other header or library (most likely predates the addition of <code>int8_t</code> and <code>int32_t</code> in C99).</p>

<p>Plain <code>int</code> is quite a bit different from the others. Where <code>int8_t</code> and <code>int32_t</code> each have a specified size, <code>int</code> can be any size >= 16 bits. At different times, both 16 bits and 32 bits have been reasonably common (and for a 64-bit implementation, it should probably be 64 bits).</p>

<p>On the other hand, <code>int</code> is guaranteed to be present in every implementation of C, where <code>int8_t</code> and <code>int32_t</code> are not. It's probably open to question whether this matters to you though. If you use C on small embedded systems and/or older compilers, it may be a problem. If you use it primarily with a modern compiler on desktop/server machines, it probably won't be.</p>

<p>Oops -- missed the part about <code>char</code>. You'd use <code>int8_t</code> instead of char if (and only if) you want an integer type guaranteed to be exactly 8 bits in size. If you want to store characters, you probably want to use <code>char</code> instead. Its size can vary (in terms of number of bits) but it's guaranteed to be exactly one byte. One slight oddity though: there's no guarantee about whether a plain <code>char</code> is signed or unsigned (and many compilers can make it either one, depending on a compile-time flag). If you need to ensure its being either signed or unsigned, you need to specify that explicitly.</p>
","14515936"
"How to use function srand() with time.h?","103841","","<p>My program contains code that should generate a random positive integer number every time I execute it. It generates random numbers but only once. After that, when I execute same code, it gives me same values, and it is making my code useless.</p>

<p>I started with the <strong>rand</strong> function, and then I used the <strong>srand()</strong> function with the <strong>time.h</strong> header file, but still it is not working properly.</p>

<pre><code>#define size 10
for(i=0;i&lt;size;i++)
    Arr[i] = rand()%size;
</code></pre>

<p>First call (random):</p>

<pre><code>6 0 2 0 6 7 5 5 8 6
</code></pre>

<p>Second call (random but same as previous):</p>

<pre><code>6 0 2 0 6 7 5 5 8 6
</code></pre>

<hr>

<p>Later I visited Stack Overflow questions and I read about the srand() function, and I used it as:</p>

<pre><code>#include&lt;time.h&gt;
for(i=0;i&lt;size;i++)
    Arr[i] = srand(time(NULL));
</code></pre>

<p><strong>First call:</strong></p>

<pre><code>-10327 -10327 -10327 -10327 -10327 -10327 -10327 -10327 -10327 -10327
</code></pre>

<p><strong>Second call:</strong></p>

<pre><code>-10326 -10326 -10326 -10326 -10326 -10326 -10326 -10326 -10326 -10326
</code></pre>

<p>It is giving me different (but not random values). I've defined <strong>Arr[i] as unsigned int</strong>, and still I am getting negative values.</p>
","<p>You need to call <code>srand()</code> <em>once</em>, to randomize the seed, and then call <code>rand()</code> in your loop:</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

#define size 10

srand(time(NULL)); // randomize seed

for(i=0;i&lt;size;i++)
    Arr[i] = rand()%size;
</code></pre>
","16569330"
"How to find the remainder of a division in C?","103785","","<p>Which is the best way to find out whether the division of two numbers will return a remainder?
Let us take for example, I have an array with values {3,5,7,8,9,17,19}. Now I need to find the perfect divisor of 51 from the above array. Is there any simpler way to solve this?</p>
","<p>You can use the <code>%</code> operator to find the remainder of a division, and compare the result with <code>0</code>.</p>

<p>Example:</p>

<pre><code>if (number % divisor == 0)
{
    //code for perfect divisor
}
else
{
    //the number doesn't divide perfectly by divisor
}
</code></pre>
","6994004"
"Copy struct to struct in C","103581","","<p>I want to copy an identical struct into another and later on use it as a comparance to the first one. The thing is that my compiler gives me a warning when Im doing like this! Should I do it in another way or am I doing this wrong:</p>

<p>In header File:</p>

<pre><code>extern struct RTCclk
{
uint8_t second;
uint8_t minute;
uint8_t hour;
uint8_t mday;
uint8_t month;
uint8_t year;
}
RTCclk;
</code></pre>

<p>In C file:</p>

<pre><code>struct RTCclk RTCclk;
struct RTCclk RTCclkBuffert;

void FunctionDO(void)
{
   ... // Some Code
   /* Copy first struct values into the second one */
   memcpy(&amp;RTCclk, &amp;RTCclkBuffert, sizeof RTCclk);
}
</code></pre>
","<p>For simple structures you can either use <code>memcpy</code> like you do, or just assign from one to the other:</p>

<pre><code>RTCclk = RTCclkBuffert;
</code></pre>

<p>The compiler will create code to copy the structure for you.</p>

<hr>

<p>An important note about the copying: It's a shallow copy, just like with <code>memcpy</code>. That means if you have e.g. a structure containing pointers, it's only the actual pointers that will be copied and not what they point to, so after the copy you will have two pointers pointing to the same memory.</p>
","9127315"
"Convert objective-c typedef to its string equivalent","103537","","<p>Assuming that I have a typedef declared in my .h file as such:</p>

<pre><code>typedef enum {
  JSON,
  XML,
  Atom,
  RSS
} FormatType;
</code></pre>

<p>I would like to build a function that converts the numeric value of the typedef to a string.  For example, if the message <code>[self toString:JSON]</code> was sent; it would return 'JSON'.</p>

<p>The function would look something like this:</p>

<pre><code>-(NSString *) toString:(FormatType)formatType {
  //need help here
  return [];
}
</code></pre>

<p>Incidentally, if I try this syntax </p>

<pre><code>[self toString:FormatType.JSON];
</code></pre>

<p>to pass the typedef value to the method, I get an error.  What am I missing?</p>
","<p>This is really a C question, not specific to Objective-C (which is a superset of the C language). Enums in C are represented as integers. So you need to write a function that returns a string given an enum value. There are many ways to do this. An array of strings such that the enum value can be used as an index into the array or a map structure (e.g. an <code>NSDictionary</code>) that maps an enum value to a string work, but I find that these approaches are not as clear as a function that makes the conversion explicit (and the array approach, although the classic <code>C</code> way is dangerous if your enum values are not continguous from 0). Something like this would work:</p>

<pre><code>- (NSString*)formatTypeToString:(FormatType)formatType {
    NSString *result = nil;

    switch(formatType) {
        case JSON:
            result = @""JSON"";
            break;
        case XML:
            result = @""XML"";
            break;
        case Atom:
            result = @""Atom"";
            break;
        case RSS:
            result = @""RSS"";
            break;
        default:
            [NSException raise:NSGenericException format:@""Unexpected FormatType.""];
    }

    return result;
}
</code></pre>

<p>Your related question about the correct syntax for an enum value is that you use just the value (e.g. <code>JSON</code>), not the <code>FormatType.JSON</code> sytax. <code>FormatType</code> is a type and the enum values (e.g. <code>JSON</code>, <code>XML</code>, etc.) are values that you can assign to that type.</p>
","1095037"
"How to append strings using sprintf?","103066","","<p>I am facing a serious issue with sprintf.</p>

<p>Suppose my code snippet is:</p>

<pre><code>sprintf(Buffer,""Hello World"");
sprintf(Buffer,""Good Morning"");
sprintf(Buffer,""Good Afternoon"");
.
.
.
</code></pre>

<p>Some hundred sprints....</p>

<p>If I do like this, its getting overwritten. </p>

<p>How can I avoid overwritting using sprintf. If I give a printf at the end I want to see all the lines.</p>
","<p>You need:</p>

<pre><code>sprintf(Buffer,""Hello World"");
sprintf(Buffer + strlen(Buffer),""Good Morning"");
sprintf(Buffer + strlen(Buffer),""Good Afternoon"");
</code></pre>

<p>and of course you need your buffer to be big enough.</p>
","2674333"
"size of struct in C","103050","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-sizeof-of-each-member"">Why isn&rsquo;t sizeof for a struct equal to the sum of sizeof of each member?</a>  </p>
</blockquote>

<p>Consider the following C code:</p>

<pre><code>#include &lt;stdio.h&gt;    

struct employee
{
  int id;
  char name[30];  
};

int main()
{
  struct employee e1;      
  printf(""%d %d %d"", sizeof(e1.id), sizeof(e1.name), sizeof(e1));
  return(0);
}
</code></pre>

<p>The output is:</p>

<p>4 30 36</p>

<p>Why is the size of the structure not equal to the sum of the sizes of its individual component variables?</p>
","<p>The compiler may add padding for alignment requirements.  Note that this applies not only to padding between the fields of a struct, but also may apply to the end of the struct (so that arrays of the structure type will have each element properly aligned).</p>

<p>For example:</p>

<pre><code>struct foo_t {
    int x;
    char c;
};
</code></pre>

<p>Even though the <code>c</code> field doesn't need padding, the struct will generally have a <code>sizeof(struct foo_t) == 8</code> (on a 32-bit system - rather a system with a 32-bit <code>int</code> type) because there will need to be 3 bytes of padding after the <code>c</code> field.</p>

<p>Note that the padding might not be required by the system (like x86 or Cortex M3) but compilers might still add it for performance reasons.</p>
","1841871"
"Where is PATH_MAX defined in Linux?","102684","","<p>Which header file should I invoke with <code>#include</code> to be able to use PATH_MAX as an int for sizing a string?</p>

<p>I want to be able to declare:</p>

<pre><code>char *current_path[PATH_MAX];
</code></pre>

<p>But when I do so my compiler (Clang/LLVM on Linux) issues the following error:</p>

<pre><code>recursive_find6.c:29:20: error: use of undeclared identifier 'PATH_MAX'
char *current_path[PATH_MAX];
                   ^
</code></pre>

<p>I tried doing a google search but still no luck.</p>

<p><code>#include &lt;limits.h&gt;</code> Does NOT fix the problem/error.</p>

<p>Am I also correct that the value of PATH_MAX is an int?</p>
","<p>Its in <code>linux/limits.h</code>.<br>
<code>#define PATH_MAX        4096    /* # chars in a path name including nul */</code></p>

<pre><code>#include &lt;linux/limits.h&gt;

char current_path[PATH_MAX];
</code></pre>

<p><code>PATH_MAX</code> has some flaws as mentioned in <a href=""http://insanecoding.blogspot.com/2007/11/pathmax-simply-isnt.html"" rel=""noreferrer"">this blog</a> (thanks paulsm4)</p>
","9449307"
"How should I print types like off_t and size_t?","102492","","<p>I'm trying to print types like <code>off_t</code> and <code>size_t</code>.  What is the correct placeholder for <code>printf()</code> <em>that is portable</em>?</p>

<p>Or is there a completely different way to print those variables?</p>
","<p>You can use <code>z</code> for size_t and <code>t</code> for ptrdiff_t like in</p>

<pre><code>printf(""%zu %zd"", size, ptrdiff);
</code></pre>

<p>But my manpage says some older library used a different character than <code>z</code> and discourages use of it. Nevertheless, it's standardized (by the C99 standard). For those <code>intmax_t</code> and <code>int8_t</code> of <code>stdint.h</code> and so on, there are macros you can use, like another answer said:</p>

<pre><code>printf(""value: %"" PRId32, some_int32_t);
printf(""value: %"" PRIu16, some_uint16_t);
</code></pre>

<p>They are listed in the manpage of <code>inttypes.h</code>. </p>

<p>Personally, I would just cast the values to <code>unsigned long</code> or <code>long</code> like another answer recommends. If you use C99, then you can (and should, of course) cast to <code>unsigned long long</code> or <code>long long</code> and use the <code>%llu</code> or <code>%lld</code> formats respectively.</p>
","587032"
"Why does the C preprocessor interpret the word ""linux"" as the constant ""1""?","102073","","<p>Why does the C preprocessor in GCC interpret the word <code>linux</code> (small letters) as the constant <code>1</code>?</p>

<p>test.c:</p>

<pre><code>#include &lt;stdio.h&gt;
int main(void)
{       
    int linux = 5;
    return 0;
}
</code></pre>

<p>Result of <code>$ gcc -E test.c</code> (stop after the preprocessing stage):</p>

<pre><code>....
int main(void)
{
    int 1 = 5;
    return 0;
}
</code></pre>

<p>Which -of course- yields an error.</p>

<p>(BTW: There is no <code>#define linux</code> in the stdio.h file.)</p>
","<p>In the Old Days (pre-ANSI), predefining symbols such as <code>unix</code> and <code>vax</code> was a way to allow code to detect at compile time what system it was being compiled for. There was no official language standard back then (beyond the reference material at the back of the first edition of K&amp;R), and C code of any complexity was typically a complex maze of <code>#ifdef</code>s to allow for differences between systems. These macro definitions were generally set by the compiler itself, not defined in a library header file. Since there were no real rules about which identifiers could be used by the implementation and which were reserved for programmers, compiler writers felt free to use simple names like <code>unix</code> and assumed that programmers would simply avoid using those names for their own purposes.</p>

<p>The 1989 ANSI C standard introduced rules restricting what symbols an implementation could legally predefine. A macro predefined by the compiler could only have a name starting with two underscores, or with an underscore followed by an uppercase letter, leaving programmers free to use identifiers not matching that pattern and not used in the standard library.</p>

<p>As a result, any compiler that predefines <code>unix</code> or <code>linux</code> is non-conforming, since it will fail to compile perfectly legal code that uses something like <code>int linux = 5;</code>.</p>

<p>As it happens, gcc is non-conforming by default -- but it can be made to conform (reasonably well) with the right command-line options:</p>

<pre><code>gcc -std=c90 -pedantic ... # or -std=c89 or -ansi
gcc -std=c99 -pedantic
gcc -std=c11 -pedantic
</code></pre>

<p>See <a href=""http://gcc.gnu.org/onlinedocs/gcc-4.8.1/gcc/Standards.html"" rel=""noreferrer"">the gcc manual</a> for more details.</p>

<p>gcc will be phasing out these definitions in future releases, so you shouldn't write code that depends on them. If your program needs to know whether it's being compiled for a Linux target or not it can check whether <code>__linux__</code> is defined (assuming you're using gcc or a compiler that's compatible with it). See <a href=""https://gcc.gnu.org/onlinedocs/cpp/System-specific-Predefined-Macros.html"" rel=""noreferrer"">the GNU C preprocessor manual</a> for more information.</p>

<p>A largely irrelevant aside: the ""Best One Liner"" winner of the 1987 <a href=""http://www.ioccc.org/"" rel=""noreferrer"">International Obfuscated C Code Contest</a>, by David Korn (yes, the author of the Korn Shell) took advantage of the predefined <code>unix</code> macro:</p>

<pre><code>main() { printf(&amp;unix[""\021%six\012\0""],(unix)[""have""]+""fun""-0x60);}
</code></pre>

<p>It prints <code>""unix""</code>, but for reasons that have absolutely nothing to do with the spelling of the macro name.</p>
","19214007"
"Auto-indent spaces with C in vim?","101500","","<p>I've been somewhat spoiled using Eclipse and java.  I started using vim to do C coding in a linux environment, is there a way to have vim automatically do the proper spacing for blocks?  </p>

<p>So after typing a { the next line will have 2 spaces indented in, and a return on that line will keep it at the same indentation, and a } will shift back 2 spaces?</p>
","<p>These two commands should do it:</p>

<pre><code>:set autoindent
:set cindent
</code></pre>

<p>For bonus points put them in a file named .vimrc located in your home directory on linux</p>
","97723"
"String Padding in C","101454","","<p>I wrote this function that's supposed to do StringPadRight(""Hello"", 10, ""0"") -> ""Hello00000"".</p>

<pre><code>char *StringPadRight(char *string, int padded_len, char *pad) {
    int len = (int) strlen(string);
    if (len &gt;= padded_len) {
        return string;
    }
    int i;
    for (i = 0; i &lt; padded_len - len; i++) {
        strcat(string, pad);
    }
    return string;
}
</code></pre>

<p>It works but has some weird side effects... some of the other variables get changed.  How can I fix this?</p>
","<p>It might be helpful to know that printf does padding for you, using %-10s as the format string will pad the input right in a field 10 characters long</p>

<pre><code>printf(""|%-10s|"", ""Hello"");
</code></pre>

<p>will output</p>

<pre><code>|Hello     |
</code></pre>

<p>In this case the - symbol means ""Left align"", the 10 means ""Ten characters in field"" and the s means you are aligning a string.</p>

<p>Printf style formatting is available in many languages and has plenty of references on the web. Here is <a href=""http://en.cppreference.com/w/c/io/fprintf"" rel=""noreferrer"">one of many pages</a> explaining the formatting flags.  As usual <a href=""http://en.wikipedia.org/wiki/Printf"" rel=""noreferrer"">WikiPedia's printf page</a> is of help too (mostly a history lesson of how widely printf has spread).</p>
","276869"
"How to iterate over a string in C?","101227","","<p>Right now I'm trying this:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char *argv[]) {

    if (argc != 3) {

        printf(""Usage: %s %s sourcecode input"", argv[0], argv[1]);
    }
    else {
        char source[] = ""This is an example."";
        int i;

        for (i = 0; i &lt; sizeof(source); i++) {

            printf(""%c"", source[i]);
        }
    }

    getchar();

    return 0;
}
</code></pre>

<p>This does also NOT work:</p>

<pre><code>char *source = ""This is an example."";
int i;

for (i = 0; i &lt; strlen(source); i++){

    printf(""%c"", source[i]);
}
</code></pre>

<p>I get the error</p>

<blockquote>
  <p>Unhandled exception at 0x5bf714cf (msvcr100d.dll) in Test.exe: 0xC0000005: Access violation while reading at position 0x00000054.</p>
</blockquote>

<p>(loosely translated from german)</p>

<p>So what's wrong with my code?</p>
","<p>You want:</p>

<pre><code>for (i = 0; i &lt; strlen(source); i++){
</code></pre>

<p>sizeof gives you the size of the pointer, not the string. However, it would have worked if you had declared the pointer as an array:</p>

<pre><code>char source[] = ""This is an example."";
</code></pre>

<p>but if you pass the array to function, that too will decay to a pointer. For strings it's best to always use strlen. And note what others have said about changing printf to use %c. And also, taking mmyers comments on efficiency into account, it would be better to move the call to strlen out of the loop:</p>

<pre><code>int len = strlen( source );
for (i = 0; i &lt; len; i++){
</code></pre>

<p>or rewrite the loop:</p>

<pre><code>for (i = 0; source[i] != 0; i++){
</code></pre>
","3213855"
"How to prevent multiple definitions in C?","100980","","<p>I'm a C newbie and I was just trying to write a console application with Code::Blocks. Here's the (simplified) code:
main.c:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include ""test.c"" // include not necessary for error in Code::Blocks

int main()
{
    //t = test(); // calling of method also not necessary
    return 0;
}
</code></pre>

<p>test.c:</p>

<pre><code>void test() {}
</code></pre>

<p>When I try to build this program, it gives the following errors:</p>

<pre>
*path*\test.c|1|multiple definition of `_ test'|
obj\Debug\main.o:*path*\test.c|1|first defined here|
</pre>

<p>There is no way that I'm multiply defining test (although I don't know where the underscore is coming from) and it seems highly unlikely that the definition is somehow included twice. This is all the code there is.</p>

<p>I've ruled out that this error is due to some naming conflict with other functions or files being called test or test.c. Note that the multiple and the first definition are on the same line in the same file.</p>

<p>Does anyone know what is causing this and what I can do about it? Thanks!</p>
","<p>You actually compile the source code of <code>test.c</code> twice:</p>

<ul>
<li>The first time when compiling <code>test.c</code> itself,</li>
<li>The second time when compiling <code>main.c</code> which includes all the <code>test.c</code> source.</li>
</ul>

<p>What you need in your <code>main.c</code> in order to use the <code>test()</code> function is a simple declaration, not its definition. This is achieved by including a <code>test.h</code> header file which contains something like:</p>

<pre><code>void test(void);
</code></pre>

<p>This informs the compiler that such a function with input parameters and return type exists. What this function does ( everything inside <code>{</code> and <code>}</code> ) is left in your <code>test.c</code> file.</p>

<p>In main.c, replace <code>#include ""test.c""</code> by <code>#include ""test.h""</code>.</p>

<p>A last point: with your programs being more complex, you will be faced to situations when header files may be included several times. To prevent this, header sources are sometimes enclosed by specific macro definitions, like:</p>

<pre><code>#ifndef TEST_H_INCLUDED
#define TEST_H_INCLUDED

void test(void);

#endif
</code></pre>
","672785"
"function declaration isn't a prototype","100919","","<p>I have a library I created,</p>

<p><strong>mylib.c:</strong></p>

<pre><code>#include &lt;mylib.h&gt;
int
testlib() {
    printf(""Hello world\n"");
    return (0);
}
</code></pre>

<p><strong>mylib.h:</strong></p>

<pre><code>#include &lt;stdio.h&gt;
extern int testlib();
</code></pre>

<p>In my program, I've attempted to call this library function:</p>

<p><strong>myprogram.c:</strong></p>

<pre><code>#include &lt;mylib.h&gt;

int
main (int argc, char *argv[]) {
    testlib();
    return (0);
}
</code></pre>

<p>When I attempt to compile this program I get the following error:</p>

<pre>In file included from myprogram.c:1
mylib.h:2 warning: function declaration isn't a prototype</pre>

<p>I'm using: <code>gcc (GCC) 3.4.5 20051201 (Red Hat 3.4.5-2)</code></p>

<p>My question is, what is the proper way to declare a function prototype?</p>
","<p>In C <code>int foo()</code> and <code>int foo(void)</code> are different functions. <code>int foo()</code> accepts an arbitrary number of arguments, while <code>int foo(void)</code> accepts 0 arguments. In C++ they mean the same thing. I suggest that you use <code>void</code> consistently when you mean no arguments.</p>

<p>If you have a variable <code>a</code>, <code>extern int a;</code> is a way to tell the compiler that <code>a</code> is a symbol that might be present in a different translation unit (C compiler speak for source file), don't resolve it until link time. On the other hand, symbols which are function names are anyway resolved at link time. The meaning of a storage class specifier on a function (<code>extern</code>, <code>static</code>) only affects its visibility and <code>extern</code> is the default, so <code>extern</code> is actually unnecessary.</p>

<p>I suggest removing the <code>extern</code>, it is extraneous and is usually omitted. </p>
","47693"
"unknown type name 'uint8_t', MinGW","100890","","<p>I get ""unknown type name 'uint8_t'"" and others like it using C in MinGW.
Any ideas how to solve this?</p>
","<p>Try including <code>stdint.h</code> or <code>inttypes.h</code>.</p>
","8953288"
"How to check if C string is empty","100884","","<p>I'm writing a very small program in C that needs to check if a certain string is empty. For the sake of this question, I've simplified my code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string&gt;

int main() {
char url[63] = {'\0'};
do {


    printf(""Enter a URL: "");
    scanf(""%s"", url);
    printf(""%s"", url);

} while (/*what should I put in here?*/);

return(0);
}
</code></pre>

<p>I want the program to stop looping if the user just presses enter without entering anything. </p>

<p>Thanks.</p>

<p>EDIT:</p>

<p>I've got a small problem here. When I click enter without entering anything into the terminal, the cursor just jumps down to the next line. Is there any to just have it submit nothing instead of having it move to the next line? </p>

<p>EDIT:</p>

<p>I've found that adding <B>[^\n]</b> in scanf allows me to enter nothing and still have it submit. However, when I do type something in, it runs one more time and then quits the loop by itself. Here's the updated code: </p>

<pre><code>int main() {
char url[63] = {'\0'};
do {
    printf(""Enter a URL: "");
    scanf(""%[^\n]s"", url);
} while (url[0] != '\0');

return(0);
}
</code></pre>
","<p>Since C-style strings are always terminated with the null character (<code>\0</code>), you can check whether the string is empty by writing</p>

<pre><code>do {
   ...
} while (url[0] != '\0');
</code></pre>

<p>Alternatively, you could use the <code>strcmp</code> function, which is overkill but might be easier to read:</p>

<pre><code>do {
   ...
} while (strcmp(url, """"));
</code></pre>

<p>Note that <code>strcmp</code> returns a nonzero value if the strings are different and 0 if they're the same, so this loop continues to loop until the string is nonempty.</p>

<p>Hope this helps!</p>
","15485235"
"How is malloc() implemented internally?","100658","","<p>Can anyone explain how <code>malloc()</code> works internally?</p>

<p>I have sometimes done <code>strace program</code> and I see a lot of <code>sbrk</code> system calls, doing <code>man sbrk</code> talks about it being used in <code>malloc()</code> but not much more.</p>
","<p>The <code>sbrk</code>system call moves the ""border"" of the data segment. This means it moves a border of an area in which a program may read/write data (letting it grow or shrink, although AFAIK no <code>malloc</code> really gives memory segments back to the kernel with that method). Aside from that, there's also <code>mmap</code> which is used to map files into memory but is also used to allocate memory (if you need to allocate shared memory, <code>mmap</code> is how you do it).</p>

<p>So you have two methods of getting more memory from the kernel: <code>sbrk</code> and <code>mmap</code>. There are various strategies on how to organize the memory that you've got from the kernel.</p>

<p>One naive way is to partition it into zones, often called ""buckets"", which are dedicated to certain structure sizes. For example, a <code>malloc</code> implementation could create buckets for 16, 64, 256 and 1024 byte structures. If you ask <code>malloc</code> to give you memory of a given size it rounds that number up to the next bucket size and then gives you an element from that bucket. If you need a bigger area <code>malloc</code> could use <code>mmap</code> to allocate directly with the kernel. If the bucket of a certain size is empty <code>malloc</code> could use <code>sbrk</code> to get more space for a new bucket.</p>

<p>There are various <code>malloc</code> designs and there is propably no one true way of implementing <code>malloc</code> as you need to make a compromise between speed, overhead and avoiding fragmentation/space effectiveness. For example, if a bucket runs out of elements an implementation might get an element from a bigger bucket, split it up and add it to the bucket that ran out of elements. This would be quite space efficient but would not be possible with every design. If you just get another bucket via <code>sbrk</code>/<code>mmap</code> that might be faster and even easier, but not as space efficient. Also, the design must of course take into account that ""free"" needs to make space available to <code>malloc</code> again somehow. You don't just hand out memory without reusing it.</p>

<p>If you're interested, the OpenSER/Kamailio SIP proxy has two <code>malloc</code> implementations (they need their own because they make heavy use of shared memory and the system <code>malloc</code> doesn't support shared memory). See: <a href=""https://github.com/OpenSIPS/opensips/tree/master/mem"" rel=""noreferrer"">https://github.com/OpenSIPS/opensips/tree/master/mem</a></p>

<p>Then you could also have a look at the <a href=""http://sourceware.org/git/?p=glibc.git;a=tree;f=malloc"" rel=""noreferrer"">GNU libc <code>malloc</code> implementation</a>, but that one is very complicated, IIRC.</p>
","3479496"
"What is the difference between conversion specifiers %i and %d in formatted IO functions (*printf / *scanf)","100547","","<p>What is the difference between <code>%d</code> and <code>%i</code> when used as format specifiers in <code>printf</code>? </p>
","<p>They are the same when used for output, e.g. with <code>printf</code>.</p>

<p>However, these are different when used as input specifier e.g. with <code>scanf</code>, where <code>%d</code> scans an integer as a signed decimal number, but <code>%i</code> defaults to decimal but also allows hexadecimal (if preceded by <code>0x</code>) and octal if preceded by <code>0</code>.</p>

<p>So <code>033</code> would be 27 with <code>%i</code> but 33 with <code>%d</code>.</p>
","1893518"
"Rerouting stdin and stdout from C","100541","","<p>I want to reopen the <code>stdin</code> and <code>stdout</code> (and perhaps <code>stderr</code> while I'm at it) filehandles, so that future calls to <code>printf()</code> or <code>putchar()</code> or <code>puts()</code> will go to a file, and future calls to <code>getc()</code> and such will come from a file.</p>

<p>1) I don't want to permanently lose standard input/output/error. I may want to reuse them later in the program.</p>

<p>2) I don't want to open new filehandles because these filehandles would have to be either passed around a lot or global (shudder).</p>

<p>3) I don't want to use any <code>open()</code> or <code>fork()</code> or other system-dependent functions if I can't help it.</p>

<p>So basically, does it work to do this:</p>

<pre><code>stdin = fopen(""newin"", ""r"");
</code></pre>

<p>And, if it does, how can I get the original value of <code>stdin</code> back? Do I have to store it in a <code>FILE *</code> and just get it back later?</p>
","<p>Why use <a href=""http://en.cppreference.com/w/c/io/freopen"" rel=""noreferrer""><code>freopen()</code></a>? The C89 specification has the answer in one of the endnotes for the section on <code>&lt;stdio.h&gt;</code>:</p>

<blockquote>
  <p>116. The primary use of the <strong><code>freopen</code></strong> function is to change the file associated with a standard
  text stream (<strong><code>stderr</code></strong>,
  <strong><code>stdin</code></strong>, or <strong><code>stdout</code></strong>), as those identifiers need not be
  modifiable lvalues to which the value
  returned by the <strong><code>fopen</code></strong> function
  may be assigned.</p>
</blockquote>

<p><code>freopen</code> is commonly misused, e.g. <code>stdin = freopen(""newin"", ""r"", stdin);</code>. This is no more portable than <code>fclose(stdin); stdin = fopen(""newin"", ""r"");</code>. Both expressions attempt to assign to <code>stdin</code>, which is not guaranteed to be assignable. </p>

<p>The right way to use <code>freopen</code> is to omit the assignment: <code>freopen(""newin"", ""r"", stdin);</code></p>
","586416"
"How to print variable addresses in C?","100477","","<p>When i run this code. </p>

<pre><code>#include &lt;stdio.h&gt;

void moo(int a, int *b);

int main()
{
    int x;
    int *y;

    x = 1;
    y = &amp;x;

    printf(""Address of x = %d, value of x = %d\n"", &amp;x, x);
    printf(""Address of y = &amp;d, value of y = %d, value of *y = %d\n"", &amp;y, y, *y);
    moo(9, y);
}

void moo(int a, int *b)
{
    printf(""Address of a = %d, value of a = %d\n"", &amp;a, a);
    printf(""Address of b = %d, value of b = %d, value of *b = %d\n"", &amp;b, b, *b);
}
</code></pre>

<p>I keep getting this error in my compiler.</p>

<pre><code>/Volumes/MY USB/C Programming/Practice/addresses.c:16: warning: format ‘%d’ expects type ‘int’, but argument 2 has type ‘int *’
/Volumes/MY USB/C Programming/Practice/addresses.c:17: warning: format ‘%d’ expects type ‘int’, but argument 2 has type ‘int **’
/Volumes/MY USB/C Programming/Practice/addresses.c:17: warning: format ‘%d’ expects type ‘int’, but argument 3 has type ‘int *’
/Volumes/MY USB/C Programming/Practice/addresses.c: In function ‘moo’:
/Volumes/MY USB/C Programming/Practice/addresses.c:23: warning: format ‘%d’ expects type ‘int’, but argument 2 has type ‘int *’
/Volumes/MY USB/C Programming/Practice/addresses.c:24: warning: format ‘%d’ expects type ‘int’, but argument 2 has type ‘int **’
/Volumes/MY USB/C Programming/Practice/addresses.c:24: warning: format ‘%d’ expects type ‘int’, but argument 3 has type ‘int *’
</code></pre>

<p>Could you help me?</p>

<p>Thanks</p>

<p>blargman</p>
","<p>You want to use <code>%p</code> to print a pointer.  From the spec:</p>

<blockquote>
  <p><strong><code>p</code></strong>  The argument shall be a pointer to <strong><code>void</code></strong>. The value of the pointer is converted to a sequence of printing characters, in an implementation-defined manner.</p>
</blockquote>

<p>And don't forget the cast, e.g.</p>

<pre><code>printf(""%p\n"",(void*)&amp;a);
</code></pre>
","5286458"
"How do you determine the size of a file in C?","100227","","<p>How can I figure out the size of a file, in bytes?</p>

<pre><code>#include &lt;stdio.h&gt;

unsigned int fsize(char* file){
  //what goes here?
}
</code></pre>
","<p>Based on NilObject's code:</p>

<pre><code>#include &lt;sys/stat.h&gt;

off_t fsize(const char *filename) {
    struct stat st; 

    if (stat(filename, &amp;st) == 0)
        return st.st_size;

    return -1; 
}
</code></pre>

<p>Changes:</p>

<ul>
<li>Made the filename argument a <code>const char</code>.</li>
<li>Corrected the <code>struct stat</code> definition, which was missing the variable name.</li>
<li>Returns <code>-1</code> on error instead of <code>0</code>, which would be ambiguous for an empty file. <code>off_t</code> is a signed type so this is possible.</li>
</ul>

<p>If you want <code>fsize()</code> to print a message on error, you can use this:</p>

<pre><code>#include &lt;sys/stat.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;

off_t fsize(const char *filename) {
    struct stat st;

    if (stat(filename, &amp;st) == 0)
        return st.st_size;

    fprintf(stderr, ""Cannot determine size of %s: %s\n"",
            filename, strerror(errno));

    return -1;
}
</code></pre>

<p>On 32-bit systems you should compile this with the option <code>-D_FILE_OFFSET_BITS=64</code>, otherwise <code>off_t</code> will only hold values up to 2 GB. See the ""Using LFS"" section of <a href=""http://www.suse.de/~aj/linux_lfs.html"" rel=""noreferrer"">Large File Support in Linux</a> for details.</p>
","8384"
"error: invalid type argument of ‘unary *’ (have ‘int’)","99993","","<p>I have a C Program:</p>

<pre><code>#include &lt;stdio.h&gt;
int main(){
  int b = 10;             //assign the integer 10 to variable 'b'

  int *a;                 //declare a pointer to an integer 'a'

  a=(int *)&amp;b;            //Get the memory location of variable 'b' cast it
                          //to an int pointer and assign it to pointer 'a'

  int *c;                 //declare a pointer to an integer 'c'

  c=(int *)&amp;a;            //Get the memory location of variable 'a' which is
                          //a pointer to 'b'.  Cast that to an int pointer 
                          //and assign it to pointer 'c'.

  printf(""%d"",(**c));     //ERROR HAPPENS HERE.  

  return 0;
}    
</code></pre>

<p>Compiler produces an error: </p>

<pre><code>error: invalid type argument of ‘unary *’ (have ‘int’)
</code></pre>

<p>Can someone explain what this error means? </p>
","<p>Since <code>c</code> is holding the address of an integer pointer, its type should be <code>int**</code>:</p>

<pre><code>int **c;
c = &amp;a;
</code></pre>

<p>The entire program becomes:</p>

<pre><code>#include &lt;stdio.h&gt;                                                              
int main(){
    int b=10;
    int *a;
    a=&amp;b;
    int **c;
    c=&amp;a;
    printf(""%d"",(**c));   //successfully prints 10
    return 0;
}
</code></pre>
","5455962"
"Display the binary representation of a number in C?","99925","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/111928/is-there-a-printf-converter-to-print-in-binary-format"">Is there a printf converter to print in binary format?</a>  </p>
</blockquote>



<p>Still learning C and I was wondering: </p>

<p>Given a number, is it possible to do something like the following?</p>

<pre><code>char a = 5;
printf(""binary representation of a = %b"",a);
&gt; 101
</code></pre>

<p>Or would i have to write my own method to do the transformation to binary?</p>
","<p>Yes (write your own), something like the following complete function.</p>

<pre><code>#include &lt;stdio.h&gt; /* only needed for the printf() in main(). */
#include &lt;string.h&gt;

/* Create a string of binary digits based on the input value.
   Input:
       val:  value to convert.
       buff: buffer to write to must be &gt;= sz+1 chars.
       sz:   size of buffer.
   Returns address of string or NULL if not enough space provided.
*/
static char *binrep (unsigned int val, char *buff, int sz) {
    char *pbuff = buff;

    /* Must be able to store one character at least. */
    if (sz &lt; 1) return NULL;

    /* Special case for zero to ensure some output. */
    if (val == 0) {
        *pbuff++ = '0';
        *pbuff = '\0';
        return buff;
    }

    /* Work from the end of the buffer back. */
    pbuff += sz;
    *pbuff-- = '\0';

    /* For each bit (going backwards) store character. */
    while (val != 0) {
        if (sz-- == 0) return NULL;
        *pbuff-- = ((val &amp; 1) == 1) ? '1' : '0';

        /* Get next bit. */
        val &gt;&gt;= 1;
    }
    return pbuff+1;
}
</code></pre>

<p>Add this main to the end of it to see it in operation:</p>

<pre><code>#define SZ 32
int main(int argc, char *argv[]) {
    int i;
    int n;
    char buff[SZ+1];

    /* Process all arguments, outputting their binary. */
    for (i = 1; i &lt; argc; i++) {
        n = atoi (argv[i]);
        printf(""[%3d] %9d -&gt; %s (from '%s')\n"", i, n,
            binrep(n,buff,SZ), argv[i]);
    }

    return 0;
}
</code></pre>

<p>Run it with <code>""progname 0 7 12 52 123""</code> to get:</p>

<pre><code>[  1]         0 -&gt; 0 (from '0')
[  2]         7 -&gt; 111 (from '7')
[  3]        12 -&gt; 1100 (from '12')
[  4]        52 -&gt; 110100 (from '52')
[  5]       123 -&gt; 1111011 (from '123')
</code></pre>
","700018"
"What's the best way to do a backwards loop in C/C#/C++?","99898","","<p>I need to move backwards through an array, so I have code like this:</p>

<pre><code>for (int i = myArray.Length - 1; i &gt;= 0; i--)
{
    // Do something
    myArray[i] = 42;
}
</code></pre>

<p>Is there a better way of doing this?</p>

<p>Update: I was hoping that maybe C# had some built-in mechanism for this like:</p>

<pre><code>foreachbackwards (int i in myArray)
{
    // so easy
}
</code></pre>

<p>Update 2: There <em>are</em> better ways. Rune takes the prize with:</p>

<pre><code>for (int i = myArray.Length; i-- &gt; 0; )
{    
    //do something
}
//or
for (int i = myArray.Length; i --&gt; 0; )
{
    // do something
}
</code></pre>

<p>which looks even better in regular C (thanks to Twotymz):</p>

<pre><code>for (int i = lengthOfArray; i--; )
{    
    //do something
}
</code></pre>
","<p>While admittedly a bit obscure, I would say that the most typographically pleasing way of doing this is</p>

<pre><code>for (int i = myArray.Length; i --&gt; 0; )
{
    //do something
}
</code></pre>
","276056"
"In C/C++ what's the simplest way to reverse the order of bits in a byte?","99799","","<p>While there are multiple ways to reverse bit order in a byte, I'm curious as to what is the ""simplest"" for a developer to implement.  And by reversing I mean:</p>

<pre><code>1110 -&gt; 0111
0010 -&gt; 0100
</code></pre>

<p>This is similar to, but not a duplicate of <a href=""https://stackoverflow.com/questions/1688532/how-to-reverse-bits-of-a-byte"">this</a> PHP question.</p>

<p>This is similar to, but not a duplicate of <a href=""https://stackoverflow.com/questions/746171/best-algorithm-for-bit-reversal-from-msb-lsb-to-lsb-msb-in-c"">this</a> C question. This question is asking for the easiest method to implement by a developer. The ""Best Algorithm"" is concerned with memory and cpu performance.</p>
","<p>If you are talking about a single byte, a table-lookup is probably the best bet, unless for some reason you don't have 256 bytes available.</p>
","2602836"
"Printf long long int in C with GCC?","99474","","<p>How do I printf <code>long long int</code> and also <code>unsigned long long int</code> in C99 using GCC? </p>

<p>I have searched the other posts which suggest to use <code>%lld</code> but it gives these warnings:</p>

<blockquote>
  <p>warning#1: unknown conversion type character 'l' in format [-Wformat]|<br>
  warning#2: too many arguments for format [-Wformat-extra-args]|</p>
</blockquote>

<p>For the following attempt:</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
   long long int x = 0;
   unsigned long long int y = 0;
   printf(""%lld\n"", x);
   printf(""%llu\n"", y);
}
</code></pre>
","<p>If you are on windows and using mingw, gcc uses the win32 runtime, where printf needs <code>%I64d</code> for a 64 bit integer. (and <code>%I64u</code> for an unsinged 64 bit integer) </p>

<p>For most other platforms you'd use <code>%lld</code> for printing a long long. (and <code>%llu</code> if it's unsigned). This is standarized in C99.</p>

<p>gcc doesn't come with a full C runtime, it defers to the platform it's running on - so the general case is that you need to consult the documentation for your particular platform - independent of gcc.</p>
","13590809"
"C linked list inserting node at the end","99305","","<p>I'm having some trouble with my insertion method for a linked list in C. It seems to only add at the beginning of the list. Any other insertion I make fail. And this CodeBlocks debugger is so hard to understand I still don't get it. It never gives me value, just addresses in memory. Anyway this is my function. Do you see any reason why it's failing? </p>

<pre><code>/* function to add a new node at the end of the list */
int addNodeBottom(int val, node *head){

    //create new node
    node *newNode = (node*)malloc(sizeof(node));

    if(newNode == NULL){
        fprintf(stderr, ""Unable to allocate memory for new node\n"");
        exit(-1);
    }

    newNode-&gt;value = val;

    //check for first insertion
    if(head-&gt;next == NULL){
        head-&gt;next = newNode;
        printf(""added at beginning\n"");
    }

    else
    {
        //else loop through the list and find the last
        //node, insert next to it
        node *current = head;
        while(current-&gt;next != NULL)
        {
            if(current-&gt;next == NULL)
            {
                current-&gt;next = newNode;
                printf(""added later\n"");
            }
            current = current-&gt;next;
        }
    }
    return 0;
}
</code></pre>

<p>Then in main, only 929 is added.</p>

<pre><code>   //testing addNodeBottom function
    addNodeBottom(929, head);
    addNodeBottom(98, head);
    addNodeBottom(122, head);
    addNodeBottom(11, head);
    addNodeBottom(1034, head);
</code></pre>
","<p>This code will work. The answer from samplebias is almost correct, but you need a third change:</p>

<pre><code>int addNodeBottom(int val, node *head){

    //create new node
    node *newNode = (node*)malloc(sizeof(node));

    if(newNode == NULL){
        fprintf(stderr, ""Unable to allocate memory for new node\n"");
        exit(-1);
    }

    newNode-&gt;value = val;
    newNode-&gt;next = NULL;  // Change 1

    //check for first insertion
    if(head-&gt;next == NULL){
        head-&gt;next = newNode;
        printf(""added at beginning\n"");
    }

    else
    {
        //else loop through the list and find the last
        //node, insert next to it
        node *current = head;
        while (true) { // Change 2
            if(current-&gt;next == NULL)
            {
                current-&gt;next = newNode;
                printf(""added later\n"");
                break; // Change 3
            }
            current = current-&gt;next;
        };
    }
    return 0;
}
</code></pre>

<p>Change 1: <code>newNode-&gt;next</code> must be set to <code>NULL</code> so we don't insert invalid pointers at the end of the list.</p>

<p>Change 2/3: The loop is changed to an endless loop that will be jumped out with <code>break;</code> when we found the last element. Note how <code>while(current-&gt;next != NULL)</code> contradicted <code>if(current-&gt;next == NULL)</code> before.</p>

<p>EDIT: Regarding the while loop, this way it is much better:</p>

<pre><code>  node *current = head;
  while (current-&gt;next != NULL) {
    current = current-&gt;next;
  }
  current-&gt;next = newNode;
  printf(""added later\n"");
</code></pre>
","5797652"
"Why GDB jumps unpredictably between lines and prints variables as ""<value optimized out>""?","99110","","<p>Can anyone explain this behavior of gdb?</p>

<pre><code>900         memset(&amp;new_ckpt_info,'\0',sizeof(CKPT_INFO));
(gdb)
**903         prev_offset   = cp_node-&gt;offset;**
(gdb)
**905         m_CPND_CKPTINFO_READ(ckpt_info,(char *)cb-&gt;shm_addr.ckpt_addr+sizeof(CKPT_** HDR),i_offset);
(gdb)
**903         prev_offset   = cp_node-&gt;offset;**
(gdb)
**905         m_CPND_CKPTINFO_READ(ckpt_info,(char *)cb-&gt;shm_addr.ckpt_addr+sizeof(CKPT_ HDR),i_offset);**
(gdb)
**908         bitmap_offset  = client_hdl/32;**
(gdb)
**910         bitmap_value = cpnd_client_bitmap_set(client_hdl%32);**
(gdb)
**908         bitmap_offset  = client_hdl/32;**
(gdb)
**910         bitmap_value = cpnd_client_bitmap_set(client_hdl%32);**
(gdb)
**908         bitmap_offset  = client_hdl/32;**
(gdb)
**910         bitmap_value = cpnd_client_bitmap_set(client_hdl%32);**
(gdb)
913         found = cpnd_find_exact_ckptinfo(cb , &amp;ckpt_info , bitmap_offset , &amp;offset , &amp;prev_offset);
(gdb)
916         if(!found)
(gdb) p found
$1 = &lt;value optimized out&gt;
(gdb) set found=0
Left operand of assignment is not an lvalue.
</code></pre>

<p>Why after executing line 903 it again executes the same for 905 908 910?</p>

<p>Another things is <code>found</code> is a <code>bool</code>-type variable, so why it is showing <code>value optimized out</code>?
I am not able to set the value of <code>found</code> as well.</p>

<p>This seems to be a compiler optimization (in this case its <code>-O2</code>); how can I still set the value of <code>found</code>?</p>
","<p>To debug optimized code, learn assembly/machine language.</p>

<p>Use the GDB TUI mode. My copy of GDB enables it when I type the minus and Enter. Then type C-x 2 (that is hold down Control and press X, release both and then press 2). That will put it into split source and disassembly display. Then use <code>stepi</code> and <code>nexti</code> to move one machine instruction at a time. Use C-x o to switch between the TUI windows.</p>

<p>Download a PDF about your CPU's machine language and the function calling conventions. You will quickly learn to recognize what is being done with function arguments and return values.</p>

<p>You can display the value of a register by using a GDB command like <code>p $eax</code></p>
","1354762"
"null terminating a string","99082","","<p>gcc 4.4.4 c89</p>

<p>What is the standard way to null terminate a string? When I use the <code>NULL</code> I get a warning message.</p>

<pre><code>*dest++ = 0; 
*dest++ = '\0'; 
*dest++ = NULL; /* Warning: Assignment takes integer from pointer without a cast */
</code></pre>

<p>Source code:</p>

<pre><code>size_t s_strscpy(char *dest, const char *src, const size_t len)
{
    /* Copy the contents from src to dest */
    size_t i = 0;
    for(i = 0; i &lt; len; i++)
    *dest++ = *src++;

    /* Null terminate dest */
     *dest++ = 0; 

    return i;
}
</code></pre>

<p>Another question: I deliberately commented out the line that null terminates. However, it still correctly printed out the contents of the dest. The caller of this function would send the length of the string by either included the <code>NULL</code> or not. i.e. <code>strlen(src) + 1</code> or <code>stlen(src)</code>.</p>

<pre><code>size_t s_strscpy(char *dest, const char *src, const size_t len)
{
    /* Copy the contents from src to dest */
    size_t i = 0;
    /* Don't copy the null terminator */
    for(i = 0; i &lt; len - 1; i++)
    *dest++ = *src++;

    /* Don't add the Null terminator */
    /* *dest++ = 0; */

    return i;
}
</code></pre>
","<p>To your first question:
I would go with Paul R's comment and terminate with <code>'\0'</code>. But the value <code>0</code> itself works also fine. A matter of taste. But don't use the MACRO <code>NULL</code>which is meant for pointers.</p>

<p>To your second question:
If your string is not terminated with<code>\0</code>, it might still print the expected output because following your string is a non-printable character in your memory. This is a really nasty bug though, since it might blow up when you might not expect it. <strong>Always</strong> terminate a string with <code>'\0'</code>.</p>
","2911196"
"What is the worst real-world macros/pre-processor abuse you've ever come across?","99072","","<p>What is the <em>worst</em> <strong>real-world</strong> macros/pre-processor abuse you've ever come across (please no contrived IOCCC answers *haha*)?</p>

<p>Please add a short snippet or story if it is really entertaining. The goal is to teach something instead of always telling people ""never use macros"".</p>

<hr>

<p>p.s.: I've used macros before... but usually I get rid of them eventually when I have a ""real"" solution (even if the real solution is inlined so it becomes similar to a macro).</p>

<hr>

<p><strong>Bonus:</strong> Give an example where the macro was really was better than a not-macro solution.</p>

<p><strong>Related question:</strong> <a href=""https://stackoverflow.com/questions/96196/when-are-c-macros-beneficial"">When are C++ macros beneficial?</a> </p>
","<p>From memory, it looked something like this:</p>

<pre><code>#define RETURN(result) return (result);}

int myfunction1(args) {
    int x = 0;
    // do something
    RETURN(x)

int myfunction2(args) {
    int y = 0;
    // do something
    RETURN(y)

int myfunction3(args) {
    int z = 0;
    // do something
    RETURN(z)
</code></pre>

<p>Yes that's right, no closing braces in any of the functions.  Syntax highlighting was a mess, so he used vi to edit (not vim, it has syntax coloring!)</p>

<p>He was a Russian programmer who had mostly worked in assembly language.  He was fanatical about saving as many bytes as possible because he had previously worked on systems with very limited memory.  ""It was for satellite.  Only very few byte, so we use each byte over for many things.""  (bit fiddling, reusing machine instruction bytes for their numeric values)  When I tried to find out what kinds of satellites, I was only able to get ""Orbiting satellite.  For making to orbit.""</p>

<p>He had two other quirks: A convex mirror mounted above his monitor ""For knowing who is watching"", and an occasional sudden exit from his chair to do a quick ten pushups.  He explained this last one as ""Compiler found error in code. This is punishment"".  </p>
","652945"
"C pass int array pointer as parameter into a function","99049","","<p>I want to pass the B int array pointer into func function and be able to change it from there and then view the changes in main function</p>

<pre><code>#include &lt;stdio.h&gt;

int func(int *B[10]){

}

int main(void){

    int *B[10];

    func(&amp;B);

    return 0;
}
</code></pre>

<p>the above code gives me some errors:</p>

<pre><code>In function 'main':|
warning: passing argument 1 of 'func' from incompatible pointer type [enabled by default]|
note: expected 'int **' but argument is of type 'int * (*)[10]'|
</code></pre>

<p><strong>EDIT:
new code:</strong></p>

<pre><code>#include &lt;stdio.h&gt;

int func(int *B){
    *B[0] = 5;
}

int main(void){

    int B[10] = {NULL};
    printf(""b[0] = %d\n\n"", B[0]);
    func(B);
    printf(""b[0] = %d\n\n"", B[0]);

    return 0;
}
</code></pre>

<p>now i get these errors:</p>

<pre><code>||In function 'func':|
|4|error: invalid type argument of unary '*' (have 'int')|
||In function 'main':|
|9|warning: initialization makes integer from pointer without a cast [enabled by default]|
|9|warning: (near initialization for 'B[0]') [enabled by default]|
||=== Build finished: 1 errors, 2 warnings ===|
</code></pre>
","<p>In your new code,</p>

<pre><code>int func(int *B){
    *B[0] = 5;
}
</code></pre>

<p><code>B</code> is a pointer to <code>int</code>, thus <code>B[0]</code> is an <code>int</code>, and you can't dereference an <code>int</code>. Just remove the <code>*</code>,</p>

<pre><code>int func(int *B){
    B[0] = 5;
}
</code></pre>

<p>and it works.</p>

<p>In the initialisation</p>

<pre><code>int B[10] = {NULL};
</code></pre>

<p>you are initialising an<code>int</code> with a <code>void*</code> (<code>NULL</code>). Since there is a valid conversion from <code>void*</code> to <code>int</code>, that works, but it is not quite kosher, because the conversion is implementation defined, and usually indicates a mistake by the programmer, hence the compiler warns about it.</p>

<pre><code>int B[10] = {0};
</code></pre>

<p>is the proper way to 0-initialise an <code>int[10]</code>.</p>
","13731008"
"XML Parser for C","98852","","<p>Can you suggest some of the best XML Parser for C ?</p>
","<p>Two of the most widely used parsers are <a href=""http://www.jclark.com/xml/expat.html"" rel=""noreferrer"">Expat</a> and <a href=""http://www.xmlsoft.org/"" rel=""noreferrer"">libxml</a>.</p>

<p>If you are okay with using C++, there's <a href=""http://xerces.apache.org/xerces-c/"" rel=""noreferrer"">Xerces-C++</a> too.</p>
","399705"
"Compiling an application for use in highly radioactive environments","98480","","<p>We are compiling an embedded C/C++ application that is deployed in a shielded device in an environment bombarded with <a href=""https://en.wikipedia.org/wiki/Ionizing_radiation"">ionizing radiation</a>. We are using GCC and cross-compiling for ARM. When deployed, our application generates some erroneous data and crashes more often that we would like. The hardware is designed for this environment, and our application has run on this platform for several years.</p>

<p>Are there changes we can make to our code, or compile-time improvements that can be made to identify/correct <a href=""https://en.wikipedia.org/wiki/Soft_error"">soft errors</a> and memory-corruption caused by <a href=""https://en.wikipedia.org/wiki/Single_event_upset"">single event upsets</a>? Have any other developers had success in reducing the harmful effects of soft errors on a long-running application?</p>
","<p>Working for about 4-5 years with software/firmware development and environment testing of <a href=""https://en.wikipedia.org/wiki/Miniaturized_satellite"">miniaturized satellites</a>*, I would like to share my experience here.</p>

<p>*(<em>miniaturized satellites are a lot more prone to single event upsets than bigger satellites due to its relatively small, limited sizes for its electronic components</em>)</p>

<blockquote>
  <p>To be very concise and direct: there is no mechanism to recover from <em>detectable, erroneous
  situation</em> by the software/firmware itself <em>without</em>, at least, one
  <em>copy</em> of <em>minimum working version</em> of the software/firmware <em>somewhere</em> for <em>recovery</em> purpose - and with the <em>hardware supporting the recovery</em> (functional).</p>
</blockquote>

<p>Now, this situation is normally handled both in the hardware and software level. Here, as you request, I will share what we can do in the software level.</p>

<ol>
<li><p><strong>...recovery purpose...</strong>. Provide ability to update/recompile/reflash your software/firmware in real environment. This is an <em>almost must-have</em> feature for any software/firmware in highly ionized environment. Without this, you <em>could</em> have redundant software/hardware as many as you want but at one point, they are all going to blow up. So, prepare this feature!</p></li>
<li><p><strong>...minimum working version...</strong> Have responsive, multiple copies, minimum version of the software/firmware in your code. This is like Safe mode in Windows. Instead of having only one, fully functional version of your software, have multiple copies of the minimum version of your software/firmware. The minimum copy will usually having much less size than the full copy and almost always have <em>only</em> the following two or three features: </p>

<ol>
<li>capable of listening to command from external system, </li>
<li>capable of updating the current software/firmware, </li>
<li>capable of monitoring the basic operation's housekeeping data.</li>
</ol></li>
<li><p><strong>...copy... somewhere...</strong> Have redundant software/firmware somewhere. </p>

<ol>
<li><p>You could, with <em>or</em> without redundant hardware, try to have redundant software/firmware in your ARM uC. This is normally done by having two or more identical software/firmware <em>in separate addresses</em> which sending heartbeat to each other - but only one will be active at a time. If one or more software/firmware is known to be unresponsive, switch to the other software/firmware. The benefit of using this approach is we can have functional replacement immediately after an error occurs - without any contact with whatever external system/party who is responsible to detect and to repair the error (in satellite case, it is usually the Mission Control Centre (MCC)). </p>

<p>Strictly speaking, without redundant hardware, the disadvantage of doing this is you actually <em>cannot</em> eliminate <em>all</em> single point of failures. At the very least, you will still have <em>one</em> single point of failure, which is <em>the switch itself</em> (or often the beginning of the code). Nevertheless, for a device limited by size in a highly ionized environment (such as pico/femto satellites), the reduction of the single point of failures to one point <em>without</em> additional hardware will still be worth considering. Somemore, the piece of code for the switching would certainly be much less than the code for the whole program - significantly reducing the risk of getting Single Event in it.</p></li>
<li><p>But if you are not doing this, you should have at least one copy in your external system which can come in contact with the device and update the software/firmware (in the satellite case, it is again the mission control centre). </p></li>
<li>You could also have the copy in your permanent memory storage in your device which can be triggered to restore the running system's software/firmware</li>
</ol></li>
<li><p><strong>...detectable erroneous situation..</strong> The error must be <em>detectable</em>, usually by the hardware <em>error correction/detection circuit</em> or by a small piece of code for error correction/detection. It is best to put such code small, multiple, and <em>independent</em> from the main software/firmware. Its main task is <em>only</em> for checking/correcting. If the hardware circuit/firmware is <em>reliable</em> (such as it is more radiation hardened than the rests - or having multiple circuits/logics), then you might consider making error-correction with it. But if it is not, it is better to make it as error-detection. The correction can be by external system/device. For the error correction, you could consider making use of a basic error correction algorithm like Hamming/Golay23, because they can be implemented more easily both in the circuit/software. But it ultimately depends on your team's capability. For error detection, normally CRC is used.</p></li>
<li><p><strong>...hardware supporting the recovery</strong> Now, comes to the most difficult aspect on this issue. Ultimately, the recovery requires the hardware which is responsible for the recovery to be <em>at least</em> functional. If the hardware is permanently broken (normally happen after its <strong>Total ionizing dose</strong> reaches certain level), then there is (sadly) no way for the software to help in recovery. Thus, hardware is rightly the utmost importance concern for a device exposed to high radiation level (such as satellite). </p></li>
</ol>

<p>In addition to the suggestion for above anticipating firmware's error due to single event upset, I would also like to suggest you to have:</p>

<ol>
<li><p>Error detection and/or error correction algorithm in the inter-subsystem communication protocol. This is another almost must have in order to avoid incomplete/wrong signals received from other system</p></li>
<li><p>Filter in your ADC reading. Do <em>not</em> use the ADC reading directly. Filter it by median filter, mean filter, or any other filters - <em>never</em> trust single reading value. Sample more, not less - reasonably.</p></li>
</ol>
","36831344"
"Socket accept - ""Too many open files""","98259","","<p>I am working on a school project where I had to write a multi-threaded server, and now I am comparing it to apache by running some tests against it. I am using autobench to help with that, but after I run a few tests, or if I give it too high of a rate (around 600+) to make the connections,  I get a ""Too many open files"" error. </p>

<p>After I am done with dealing with request, I always do a <code>close()</code> on the socket. I have tried to use the <code>shutdown()</code> function as well, but nothing seems to help. Any way around this?</p>
","<p>There are multiple places where Linux can have limits on the number of file descriptors you are allowed to open.</p>

<p>You can check the following:</p>

<pre><code>cat /proc/sys/fs/file-max
</code></pre>

<p>That will give you the system wide limits of file descriptors.</p>

<p>On the shell level, this will tell you your personal limit:</p>

<pre><code>ulimit -n
</code></pre>

<p>This can be changed in /etc/security/limits.conf - it's the nofile param.</p>

<p>However, if you're closing your sockets correctly, you shouldn't receive this unless you're opening a lot of simulataneous connections.  It sounds like something is preventing your sockets from being closed appropriately.  I would verify that they are being handled properly.</p>
","880573"
"Is It Possible to NSLog C Structs (Like CGRect or CGPoint)?","98209","","<p>I want to be able to debug C structures without having to explicitly type every property that they consist of.</p>

<p>i.e. I want to be able to do something like this:</p>

<pre><code>CGPoint cgPoint = CGPointMake(0,0);
NSLog(@""%@"",cgPoint);
</code></pre>

<p>Obviously the '%@' won't work, hence the question. </p>
","<p>You can try this:</p>

<pre><code>NSLog(@""%@"", NSStringFromCGPoint(cgPoint));
</code></pre>

<p>There are a number of functions <a href=""http://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/Reference/reference.html#//apple_ref/doc/uid/TP40006894-CH3-SW34"" rel=""noreferrer"">provided by UIKit</a> that convert the various CG structs into <code>NSString</code>s. The reason it doesn't work is because <code>%@</code> signifies an object. A <code>CGPoint</code> is a C struct (and so are <code>CGRect</code>s and <code>CGSize</code>s).</p>
","550243"
"implement time delay in c","97785","","<p>I don't know exactly how to word a search for this.. so I haven't had any luck finding anything.. :S</p>

<p>I need to implement a time delay in C.</p>

<p>for example I want to do some stuff, then wait say 1 minute, then continue on doing stuff.</p>

<p>Did that make sense? Can anyone help me out?</p>
","<p>In standard C (C99), you can use <code>time()</code> to do this, something like:</p>

<pre><code>#include &lt;time.h&gt;
:
void waitFor (unsigned int secs) {
    unsigned int retTime = time(0) + secs;   // Get finishing time.
    while (time(0) &lt; retTime);               // Loop until it arrives.
}
</code></pre>

<p>By the way, this assumes <code>time()</code> returns a 1-second resolution value. I don't think that's mandated by the standard so you may have to adjust for it.</p>

<hr>

<p>In order to clarify, this is the <em>only</em> way I'm aware of to do this with ISO C99 (and the question is tagged with nothing more than ""C"" which usually means portable solutions are desirable although, of course, vendor-specific solutions may still be given).</p>

<p>By all means, if you're on a platform that provides a more efficient way, <em>use it.</em> As several comments have indicated, there may be specific problems with a tight loop like this, with regard to CPU usage and battery life.</p>

<p>Any decent time-slicing OS would be able to drop the dynamic priority of a task that continuously uses its full time slice but the battery power may be more problematic.</p>

<p>However C specifies <em>nothing</em> about the OS details in a hosted environment, and this answer is for ISO C and ISO C alone (so no use of <code>sleep</code>, <code>select</code>, Win32 API calls or anything like that).</p>

<p>And keep in mind that <a href=""http://www.opengroup.org/onlinepubs/000095399/functions/sleep.html"" rel=""noreferrer"">POSIX <code>sleep</code></a> can be interrupted by signals. If you <em>are</em> going to go down that path, you need to do something like:</p>

<pre><code>int finishing = 0; // set finishing in signal handler 
                   // if you want to really stop.

void sleepWrapper (unsigned int secs) {
    unsigned int left = secs;
    while ((left &gt; 0) &amp;&amp; (!finishing)) // Don't continue if signal has
        left = sleep (left);           //   indicated exit needed.
}
</code></pre>
","3930477"
"Writing binary number system in C code","97538","","<p>As we use <code>0x</code> prefix for hex numbers, and <code>o</code> for octal ones, is there anything that can be done for binary numbers?</p>

<p>I tried the <code>b</code> suffix, but the <a href=""http://en.wikipedia.org/wiki/GNU_Compiler_Collection"">GCC</a> didn't allow it.</p>

<blockquote>
  <p>Error: invalid suffix ""b"" on integer constant</p>
</blockquote>

<p>Is it possible?</p>
","<p>Standard C doesn't define binary constants. There's a GNU (I believe) extension though (among popular compilers, clang adapts it as well): the <code>0b</code> prefix:</p>

<pre><code>int foo = 0b1010;
</code></pre>

<p>If you want to stick with standard C, then there's an option: you can combine a macro and a function to create an <em>almost</em> readable ""binary constant"" feature:</p>

<pre><code>#define B(x) S_to_binary_(#x)

static inline unsigned long long S_to_binary_(const char *s)
{
        unsigned long long i = 0;
        while (*s) {
                i &lt;&lt;= 1;
                i += *s++ - '0';
        }
        return i;
}
</code></pre>

<p>And then you can use it like this:</p>

<pre><code>int foo = B(1010);
</code></pre>

<p>If you turn on heavy compiler optimizations, the compiler will most likely eliminate the function call completely (constant folding) or will at least inline it, so this won't even be a performance issue.</p>

<p><strong>Proof:</strong></p>

<p>The following code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;limits.h&gt;
#include &lt;string.h&gt;


#define B(x) S_to_binary_(#x)

static inline unsigned long long S_to_binary_(const char *s)
{
    unsigned long long i = 0;
    while (*s) {
        i &lt;&lt;= 1;
        i += *s++ - '0';
    }
    return i;
}

int main()
{
    int foo = B(001100101);

    printf(""%d\n"", foo);

    return 0;
}
</code></pre>

<p>has been compiled using <code>clang -o baz.S baz.c -Wall -O3 -S</code>, and it produced the following assembly:</p>

<pre><code>    .section    __TEXT,__text,regular,pure_instructions
    .globl  _main
    .align  4, 0x90
_main:                                  ## @main
    .cfi_startproc
## BB#0:
    pushq   %rbp
Ltmp2:
    .cfi_def_cfa_offset 16
Ltmp3:
    .cfi_offset %rbp, -16
    movq    %rsp, %rbp
Ltmp4:
    .cfi_def_cfa_register %rbp
    leaq    L_.str1(%rip), %rdi
    movl    $101, %esi               ## &lt;= This line!
    xorb    %al, %al
    callq   _printf
    xorl    %eax, %eax
    popq    %rbp
    ret
    .cfi_endproc

    .section    __TEXT,__cstring,cstring_literals
L_.str1:                                ## @.str1
    .asciz   ""%d\n""


.subsections_via_symbols
</code></pre>

<p>So <code>clang</code> completely eliminated the call to the function, and replaced its return value with <code>101</code>. Neat, huh?</p>
","15114188"
"Undefined reference to `sin`","97529","","<p>I have the following code (stripped down to the bare basics for this question):</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;math.h&gt;

double f1(double x)
{
    double res = sin(x);
    return 0;
}

/* The main function */
int main(void)
{
    return 0;
}
</code></pre>

<p>When compiling it with <code>gcc test.c</code> I get the following error, and I can't work out why:</p>

<pre><code>/tmp/ccOF5bis.o: In function `f1':
test2.c:(.text+0x13): undefined reference to `sin'
collect2: ld returned 1 exit status
</code></pre>

<p>However, I've written various test programs that call <code>sin</code> from within the <code>main</code> function, and those work perfectly. I must be doing something obviously wrong here - but what is it?</p>
","<p>You have compiled your code with references to the correct math.h header file, but when you attempted to link it, you forgot the option to include the math library.  As a result, you can compile your .o object files, but not build your executable.</p>

<p>As Paul has already mentioned add ""<code>-lm</code>"" to link with the math library in the step where you are attempting to generate your executable.</p>

<p>In the <a href=""https://stackoverflow.com/questions/5005363/undefined-reference-to-sin#comment22017935_5005419"">comment</a>, <a href=""https://stackoverflow.com/users/1853263/linuxd"">linuxD</a> asks:</p>

<blockquote>
  <p>Why for <code>sin()</code> in <code>&lt;math.h&gt;</code>, do we need <code>-lm</code> option explicitly; but,
  not for <code>printf()</code> in <code>&lt;stdio.h&gt;</code>?</p>
</blockquote>

<p>Because both these functions are implemented as part of the ""Single UNIX Specification"".  This history of this standard is interesting, and is known by many names (IEEE Std 1003.1, X/Open Portability Guide, POSIX, Spec 1170).  </p>

<p>This standard, <a href=""http://www.sco.com/developers/devspecs/vol3_ps.ps"" rel=""noreferrer"">specifically separates out the ""Standard C library"" routines from the ""Standard C Mathematical Library"" routines (page 277)</a>.  The pertinent passage is copied below:</p>

<blockquote>
  <p>Standard C Library </p>
  
  <p>The Standard C library is automatically searched by
  <code>cc</code> to resolve external references. This library supports all of the
  interfaces of the Base System, as defined in Volume 1, except for the
  Math Routines. </p>
  
  <p>Standard C Mathematical Library </p>
  
  <p>This library supports
  the Base System math routines, as defined in Volume 1. The <code>cc</code> option
  <code>-lm</code> is used to search this library.</p>
</blockquote>

<p>The reasoning behind this separation was influenced by a number of factors:</p>

<ol>
<li>The <a href=""https://en.wikipedia.org/wiki/Unix_wars"" rel=""noreferrer"">UNIX wars</a> led to increasing divergence from the original AT&amp;T UNIX offering.</li>
<li>The number of UNIX platforms added difficulty in developing software for the operating system.</li>
<li>An attempt to define the lowest common denominator for software developers was launched, <a href=""https://en.wikipedia.org/wiki/POSIX"" rel=""noreferrer"">called 1988 POSIX</a>.</li>
<li>Software developers programmed against the POSIX standard to provide their software on ""POSIX compliant systems"" in order to reach more platforms.</li>
<li>UNIX customers demanded ""POSIX compliant"" UNIX systems to run the software.</li>
</ol>

<p>The pressures that fed into the decision to put <code>-lm</code> in a different library probably included, but are not limited to:</p>

<ol>
<li>It seems like a good way to keep the size of libc down, as many applications don't use functions embedded in the math library.</li>
<li>It provides flexibility in math library implementation, where some math libraries rely on larger embedded lookup tables while others may rely on smaller lookup tables (computing solutions).</li>
<li>For truly size constrained applications, it permits reimplementations of the math library in a non-standard way (like pulling out just <code>sin()</code> and putting it in a custom built library.</li>
</ol>

<p>In any case, it is now part of the standard to not be automatically included as part of the C language, and that's why you must add <code>-lm</code>.</p>
","5005419"
"What happens to a declared, uninitialized variable in C? Does it have a value?","97515","","<p>If in C I write:</p>

<pre><code>int num;
</code></pre>

<p>Before I assign anything to <code>num</code>, is the value of <code>num</code> indeterminate?</p>
","<p>Static variables (file scope and function static) are initialized to zero:</p>

<pre><code>int x; // zero
int y = 0; // also zero

void foo() {
    static int x; // also zero
}
</code></pre>

<p>Non-static variables (local variables) are <em>indeterminate</em>. Reading them prior to assigning a value results in undefined behavior.</p>

<pre><code>void foo() {
    int x;
    printf(""%d"", x); // the compiler is free to crash here
}
</code></pre>

<p>In practice, they tend to just have some nonsensical value in there initially - some compilers may even put in specific, fixed values to make it obvious when looking in a debugger - but strictly speaking, the compiler is free to do anything from crashing to summoning <a href=""http://catb.org/jargon/html/N/nasal-demons.html"" rel=""noreferrer"">demons through your nasal passages</a>.</p>

<p>As for why it's undefined behavior instead of simply ""undefined/arbitrary value"", there are a number of CPU architectures that have additional flag bits in their representation for various types. A modern example would be <a href=""http://blogs.msdn.com/oldnewthing/archive/2004/01/19/60162.aspx"" rel=""noreferrer"">the Itanium, which has a ""Not a Thing"" bit in its registers</a>; of course, the C standard drafters were considering some older architectures.</p>

<p>Attempting to work with a value with these flag bits set can result in a CPU exception in an operation that <em>really</em> shouldn't fail (eg, integer addition, or assigning to another variable). And if you go and leave a variable uninitialized, the compiler might pick up some random garbage with these flag bits set - meaning touching that uninitialized variable may be deadly.</p>
","1597426"
"Reading string by char till end of line C/C++","97436","","<p>How to read a string one char at the time, and stop when you reach end of line? I'am using fgetc function to read from file and put chars to array (latter will change array to malloc), but can't figure out how to stop when the end of line is reached</p>

<p>Tried this (c is the variable with char from file):</p>

<pre><code>if(c==""\0"")
</code></pre>

<p>But it gives error that I cant compare pointer to integer </p>

<p>File looks like (the length of the words are unknown):</p>

<pre><code>one
two
three
</code></pre>

<p>So here comes the questions:
1) Can I compare c with \0 as \0 is two symbols (\ and 0) or is it counted as one (same question with \n)
2) Maybe I should use \n ?
3) If suggestions above are wrong what would you suggest (note I must read string one char at the time)</p>

<p>(Note I am pretty new to C++(and programming it self))</p>
","<p>You want to use single quotes:</p>

<pre><code>if(c=='\0')
</code></pre>

<p>Double quotes ("") are for strings, which are sequences of characters.  Single quotes (') are for individual characters.</p>

<p>However, the end-of-line is represented by the newline character, which is '\n'.</p>

<p>Note that in both cases, the backslash is not part of the character, but just a way you represent special characters.  Using backslashes you can represent various unprintable characters and also characters which would otherwise confuse the compiler.</p>
","23726736"
"C char* to int conversion","97368","","<p>How would I go about converting a two-digit number (type <code>char*</code>) to an <code>int</code>?</p>
","<p><a href=""http://www.cplusplus.com/reference/clibrary/cstdlib/atoi/"">atoi</a> can do that for you</p>

<p>Example: </p>

<pre><code>char string[] = ""1234"";
int sum = atoi( string );
printf(""Sum = %d\n"", sum ); // Outputs: Sum = 1234
</code></pre>
","13145816"
"How do I change a TCP socket to be non-blocking?","97261","","<p>How do you make a socket non-blocking?</p>

<p>I am aware of the <code>fcntl()</code> function, but I've heard it's not always reliable.</p>
","<p>What do you mean by ""not always reliable""? If the system succeeds in setting your socket non non-blocking, it will be non-blocking. Socket operations will return <code>EWOULDBLOCK</code> if they would block need to block (e.g. if the output buffer is full and you're calling send/write too often).</p>

<p><a href=""http://developerweb.net/viewtopic.php?id=3000"" rel=""noreferrer"">This forum thread</a> has a few good points when working with non-blocking calls.</p>
","1543478"
"Map a 2D array onto a 1D array","97259","","<p>I want to represent a 2D array with a 1D array. A function will pass the two indicies (x,y) and the value to store. These two indicies would represent a single element of a 1D array, and set it accordingly. I know the 1D array needs to have the size of arrayWidth × arrayHeight, but I don't know how to set each element.</p>

<p>For example, how do I distinguish (2,4,3) from (4,2,3)? I tried setting the array as the x*y, but 2*4 and 4*2 would result in the same spot in the array and I need them to be different.</p>
","<p>You need to decide whether the array elements will be stored in row order or column order and then be consistent about it. <a href=""http://en.wikipedia.org/wiki/Row-major_order"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Row-major_order</a></p>

<p>The C language uses row order for Multidimensional arrays</p>

<p>To simulate this with a single dimensional array, you multiply the row index by the width, and add the column index thus:</p>

<pre><code> int array[width * height];

 int SetElement(int row, int col, int value)
 {
    array[width * row + col] = value;  
 }
</code></pre>
","2151141"
"A free tool to check C/C++ source code against a set of coding standards?","97232","","<p>It looks quite easy to find such a tool for Java (<a href=""http://checkstyle.sourceforge.net/"" rel=""noreferrer"">Checkstyle</a>, <a href=""http://jcsc.sourceforge.net/"" rel=""noreferrer"">JCSC</a>), but I can't seem to find one for C/C++. I am not looking for a lint-like static code analyzer, I only would like to check against coding standards like variable naming, capitalization, spacing, identation, bracket placement, and so on.</p>
","<p>The only tool I know is <a href=""http://bitbucket.org/verateam/vera"" rel=""noreferrer"">Vera</a>. Haven't used it, though, so can't comment how viable it is. <a href=""http://www.inspirel.com/vera/ce/demo.html"" rel=""noreferrer"">Demo</a> looks promising.</p>
","93291"
"How do I align a number like this in C?","97078","","<p>I need to align a series of numbers in C with <strong>printf()</strong> like this example:</p>

<pre><code>-------1
-------5
------50
-----100
----1000
</code></pre>

<p>Of course, there are numbers between all those but it's not relevant for the issue at hand... Oh, consider the dashes as spaces, I used dashes so it was easier to understand what I want.</p>

<p>I'm only able to do this:</p>

<pre><code>----1---
----5---
----50--
----100-
----1000
</code></pre>

<p>Or this:</p>

<pre><code>---1
---5
--50
-100
1000
</code></pre>

<p>But none of this is what I want and I can't achieve what is displayed on the first example using only printf(). Is it possible at all?</p>

<p><strong>EDIT:</strong><br>
Sorry people, I was in a hurry and didn't explain myself well... My last example and all your suggestions (to use something like ""%8d"") do not work because, although the last number is 1000 it doesn't necessarily go all the way to 1000 or even 100 or 10 for that matter.</p>

<p>No matter the number of digits to be displayed, I only want 4 leading spaces at most for the largest number. Let's say I have to display digits from 1 to 1000 (A) and 1 to 100 (B) and I use, for both, ""%4d"", this would be the output:</p>

<p><strong>A:</strong></p>

<pre><code>---1
....
1000
</code></pre>

<p>Which is the output I want...</p>

<p><strong>B:</strong></p>

<pre><code>---1
....
-100
</code></pre>

<p>Which is not the output I want, I actually want this:</p>

<pre><code>--1
...
100
</code></pre>

<p>But like I said, I don't know the exact number of numbers I have to print, it can have 1 digit, it can have 2, 3 or more, the function should be prepared for all. And I want four extra additional leading spaces but that's not that relevant.</p>

<p><strong>EDIT 2:</strong>
It seems that what I want, the way I need it, it's not possible (check David Thornley and Blank Xavier answers and my comments). Thank you all for your time.</p>
","<p>Looking this up in my handy Harbison &amp; Steele....</p>

<p>Determine the maximum width of fields.</p>

<pre><code>int max_width, value_to_print;
max_width = 8;
value_to_print = 1000;
printf(""%*d\n"", max_width, value_to_print);
</code></pre>

<p>Bear in mind that max_width must be of type <code>int</code> to work with the asterisk, and you'll have to calculate it based on how much space you're going to want to have.  In your case, you'll have to calculate the maximum width of the largest number, and add 4.</p>
","757873"
"Reset C int array to zero : the fastest way?","96736","","<p>Assuming that we have a <code>T myarray[100]</code> with T = int, unsigned int, long long int or unsigned long long int, what is the fastest way to reset all its content to zero (not only for initialization but to reset the content several times in my program)? Maybe with memset?</p>

<p>Same question for a dynamic array like <code>T *myarray = new T[100]</code>.</p>
","<p><code>memset</code> (from <code>&lt;string.h&gt;</code>) is probably the fastest standard way, since it's usually a routine written directly in assembly and optimized by hand.</p>

<pre><code>memset(myarray, 0, sizeof(myarray)); // for automatically-allocated arrays
memset(myarray, 0, N*sizeof(*myarray)); // for heap-allocated arrays, where N is the number of elements
</code></pre>

<hr>

<p>By the way, in C++ the idiomatic way would be to use <code>std::fill</code> (from <code>&lt;algorithm&gt;</code>):</p>

<pre><code>std::fill(myarray, myarray+N, 0);
</code></pre>

<p>which <em>may</em> be optimized automatically into a <code>memset</code>; I'm quite sure that it will work as fast as <code>memset</code> for <code>int</code>s, while it may perform slightly worse for smaller types if the optimizer isn't smart enough. Still, when in doubt, profile.</p>
","9146410"
"c string and int concatenation","96515","","<p>This is turning out to be way harder than it should (I dont have a c background):</p>

<p>I need to form a string, inside each iteration of the loop, which contains the loop index <code>i</code>:</p>

<pre><code>for(i=0;i&lt;100;i++) {
  // Shown in java-like code which I need working in c!

  String prefix = ""pre_"";
  String suffix = ""_suff"";

  // This is the string I need formed:
  //  e.g. ""pre_3_suff""
  String result = prefix + i + suffix;
}
</code></pre>

<p>I tried using various combinations of <code>strcat</code> and <code>itoa</code> with no luck. </p>
","<p>Strings are hard work in C.</p>

<pre><code>int main()
{
   int i;
   char buf[12];

   for (i = 0; i &lt; 100; i++) {
      sprintf(buf, ""pre_%d_suff"", i); // puts string into buffer
      printf(""%s\n"", buf); // outputs so you can see it
   }
}
</code></pre>

<p>The <code>12</code> is enough bytes to store the text <code>""pre_""</code>, the text <code>""_suff""</code>, a string of up to two characters (<code>""99""</code>) and the NULL terminator that goes on the end of C string buffers.</p>

<p><a href=""http://linux.die.net/man/3/sprintf"" rel=""noreferrer"">This</a> will tell you how to use <code>sprintf</code>, but I suggest a good C book!</p>
","5172154"
"How to include static library in makefile","96265","","<p>I have the following makefile</p>

<pre><code>CXXFILES = pthreads.cpp 

CXXFLAGS = -O3 -o prog -rdynamic -D_GNU_SOURCE -L./libmine
LIBS = -lpthread -ldl

all:
    $(CXX) $(CXXFILES) $(LIBS) $(CXXFLAGS)

clean:
    rm -f prog *.o
</code></pre>

<p>I am trying to include the <code>./libmine</code> library within <code>CXXFLAGS</code>, but it seems like it is not the right way to include a static library, because when I compile the program, I get many undefined references error. So what is actually the right way to include a static library in the makefile?</p>
","<pre><code>CXXFLAGS = -O3 -o prog -rdynamic -D_GNU_SOURCE -L./libmine
LIBS = libmine.a -lpthread 
</code></pre>
","11345409"
"Build .so file from .c file using gcc command line","96095","","<p>I'm trying to create a hello world project for Linux dynamic libraries (.so files). So I have a file hello.c:</p>

<pre><code>#include &lt;stdio.h&gt;
void hello()
{
    printf(""Hello world!\n"");
}
</code></pre>

<p>How do I create a .so file that exports <code>hello()</code>, using gcc from the command line?</p>
","<p>To generate a shared library you need first to compile your C code with the <code>-fPIC</code> (position independent code) flag. </p>

<pre><code>gcc -c -fPIC hello.c -o hello.o
</code></pre>

<p>This will generate an object file (.o), now you take it and create the .so file:</p>

<pre><code>gcc hello.o -shared -o libhello.so
</code></pre>

<p><strong>EDIT</strong>: Suggestions from the comments:</p>

<p>You can use</p>

<pre><code>gcc -shared -o libhello.so -fPIC hello.c
</code></pre>

<p>to do it in one step. – <a href=""https://stackoverflow.com/users/15168/jonathan-leffler"">Jonathan Leffler</a></p>

<p>I also suggest to add <code>-Wall</code> to get all warnings, and <code>-g</code> to get debugging information, to your <code>gcc</code> commands. – <a href=""https://stackoverflow.com/users/841108/basile-starynkevitch"">Basile Starynkevitch</a> </p>
","14884166"
"Setting std=c99 flag in GCC","96059","","<p>I was wondering if there were any files in which I could set the <code>-std=c99</code> flag, so that I would not have to set it for every compilation. I am using GCC 4.4 on Ubuntu.</p>
","<p>Instead of calling <code>/usr/bin/gcc</code>, use <code>/usr/bin/c99</code>. This is the Single-Unix-approved way of invoking a C99 compiler. On an Ubuntu system, this points to a script which invokes <code>gcc</code> after having added the <code>-std=c99</code> flag, which is precisely what you want.</p>
","2193730"
"Why do I have to define LD_LIBRARY_PATH with an export every time I run my application?","96017","","<p>I have some code that uses some shared libraries (c code on gcc). When compiling I have to explicitly define the include and library directories using -I and -L, since they aren't in the standard places. When I try to run the code, I get the following error:</p>

<pre><code>./sync_test 
./sync_test: error while loading shared libraries: libsync.so: cannot open shared object file: No such file or directory
</code></pre>

<p>However, do the following, everything works just fine:</p>

<pre><code>export LD_LIBRARY_PATH=""/path/to/library/""
./sync_test
</code></pre>

<p>Now, the strange part is, this only works once. If I try and run sync_test again I get the same error unless I run the export command first. I tried adding the following to my .bashrc, but it made no difference:</p>

<pre><code>LD_LIBRARY_PATH=""/path/to/library/""
</code></pre>
","<p>Use</p>

<pre><code>export LD_LIBRARY_PATH=""/path/to/library/""
</code></pre>

<p>in your .bashrc otherwise, it'll only be available to bash and not any programs you start.</p>

<p>Try <code>-R/path/to/library/</code> flag when you're linking, it'll make the program look in that directory and you won't need to set any environment variables.</p>

<p>EDIT: Looks like <code>-R</code> is Solaris only, and you're on Linux.</p>

<p>An alternate way would be to add the path to <code>/etc/ld.so.conf</code> and run <code>ldconfig</code>. Note that this is a global change that will apply to all dynamically linked binaries.</p>
","695539"
"How do I execute a file in Cygwin?","95957","","<p>How can I execute <code>a.exe</code> using the Cygwin shell?</p>

<p>I created a C file in Eclipse on Windows and then used Cygwin to navigate to the directory. I called gcc on the C source file and <code>a.exe</code> was produced. I would like to run <code>a.exe</code>.</p>
","<p>./a.exe at the prompt</p>
","36003"
"Get a timestamp in C in microseconds?","95947","","<p>How do I get a microseconds timestamp in C?</p>

<p>I'm trying to do:</p>

<pre><code>struct timeval tv;
gettimeofday(&amp;tv,NULL);
return tv.tv_usec;
</code></pre>

<p>But this returns some nonsense value that if I get two timestamps, the second one can be smaller or bigger than the first (second one should <strong>always</strong> be bigger). Would it be possible to convert the magic integer returned by <strong>gettimeofday</strong> to a normal number which can actually be worked with?</p>
","<p>You need to add in the seconds, too:</p>

<pre><code>unsigned long time_in_micros = 1000000 * tv.tv_sec + tv.tv_usec;
</code></pre>

<p>Note that this will only last for about 2<sup>32</sup>/10<sup>6</sup> =~ 4295 seconds, or roughly 71 minutes though (on a typical 32-bit system).</p>
","5833233"
"_DEBUG vs NDEBUG","95658","","<p>Which preprocessor define should be used to specify debug sections of code?</p>

<p>Use <code>#ifdef _DEBUG</code> or <code>#ifndef NDEBUG</code> or is there a better way to do it, e.g. <code>#define MY_DEBUG</code>?</p>

<p>I think <code>_DEBUG</code> is Visual Studio specific, is NDEBUG standard?</p>
","<p>Visual Studio defines <code>_DEBUG</code> when you specify the <code>/MTd</code> or <code>/MDd</code> option, <code>NDEBUG</code> disables standard-C assertions. Use them when appropriate, ie <code>_DEBUG</code> if you want your debugging code to be consistent with the <a href=""http://msdn.microsoft.com/en-us/library/zh712wwf%28VS.80%29.aspx"" rel=""nofollow noreferrer"">MS CRT debugging techniques</a> and <code>NDEBUG</code> if you want to be consistent with <code>assert()</code>.</p>

<p>If you define your own debugging macros (and you don't hack the compiler or C runtime), avoid starting names with an underscore, as these are reserved.</p>
","2290616"
"How do you implement a class in C?","95567","","<p>Assuming I have to use C (no C++ or object oriented compilers) and I don't have dynamic memory allocation, what are some techniques I can use to implement a class, or a good approximation of a class? Is it always a good idea to isolate the ""class"" to a separate file? Assume that we can preallocate the memory by assuming a fixed number of instances, or even defining the reference to each object as a constant before compile time. Feel free to make assumptions about which OOP concept I will need to implement (it will vary) and suggest the best method for each.</p>

<p>Restrictions:</p>

<ul>
<li>I have to use C and not an OOP
because I'm writing code for an
embedded system, and the compiler and
preexisting code base is in C. </li>
<li>There is no dynamic memory allocation
because we don't have enough memory
to reasonably assume we won't run out
if we start dynamically allocating
it.</li>
<li>The compilers we work with have no problems with function pointers</li>
</ul>
","<p>That depends on the exact ""object-oriented"" feature-set you want to have. If you need stuff like overloading and/or virtual methods, you probably need to include function pointers in structures:</p>

<pre><code>typedef struct {
  float (*computeArea)(const ShapeClass *shape);
} ShapeClass;

float shape_computeArea(const ShapeClass *shape)
{
  return shape-&gt;computeArea(shape);
}
</code></pre>

<p>This would let you implement a class, by ""inheriting"" the base class, and implementing a suitable function:</p>

<pre><code>typedef struct {
  ShapeClass shape;
  float width, height;
} RectangleClass;

static float rectangle_computeArea(const ShapeClass *shape)
{
  const RectangleClass *rect = (const RectangleClass *) shape;
  return rect-&gt;width * rect-&gt;height;
}
</code></pre>

<p>This of course requires you to also implement a constructor, that makes sure the function pointer is properly set up. Normally you'd dynamically allocate memory for the instance, but you can let the caller do that, too:</p>

<pre><code>void rectangle_new(RectangleClass *rect)
{
  rect-&gt;width = rect-&gt;height = 0.f;
  rect-&gt;shape.computeArea = rectangle_computeArea;
}
</code></pre>

<p>If you want several different constructors, you will have to ""decorate"" the function names, you can't have more than one <code>rectangle_new()</code> function:</p>

<pre><code>void rectangle_new_with_lengths(RectangleClass *rect, float width, float height)
{
  rectangle_new(rect);
  rect-&gt;width = width;
  rect-&gt;height = height;
}
</code></pre>

<p>Here's a basic example showing usage:</p>

<pre><code>int main(void)
{
  RectangleClass r1;

  rectangle_new_with_lengths(&amp;r1, 4.f, 5.f);
  printf(""rectangle r1's area is %f units square\n"", shape_computeArea(&amp;r1));
  return 0;
}
</code></pre>

<p>I hope this gives you some ideas, at least. For a successful and rich object-oriented framework in C, look into glib's <a href=""http://library.gnome.org/devel/gobject/stable/"" rel=""noreferrer"">GObject</a> library.</p>

<p>Also note that there's no explicit ""class"" being modelled above, each object has its own method pointers which is a bit more flexible than you'd typically find in C++. Also, it costs memory. You could get away from that by stuffing the method pointers in a <code>class</code> structure, and invent a way for each object instance to reference a class.</p>
","1403922"
"How can I see an the output of my C programs using Dev-C++?","95537","","<p>I'm looking to follow along with <em>The C Programming Language (Second Addition)</em> on a machine running Vista.</p>

<p>So far, I've found Dev-C++ the easiest IDE to do this in. However, I still have one problem. Whenever I run my compiled code, for example: a simple hello world program, it runs, but the console window just flickers on the screen, and I can't see the output.</p>

<p>How can I see an the output of my C programs using Dev-C++? I found a C++ specific solution, <code>System(""pause"")</code>, and a really ugly C solution, <code>while</code> looping <code>fflush(stdout)</code>, but nothing nice and pretty.</p>
","<p>In Windows when a process terminates, the OS closes the associated window.  This happens with all programs (and is generally desirable behaviour), but people never cease to be surprised when it happens to the ones they write themselves.</p>

<p>I am being slightly harsh perhaps; many IDE's execute the user's process in a shell as a child process, so that it does not own the window so it won't close when the process terminates.  Although this would be trivial, Dev-C++ does not do that.</p>

<p>Be aware that when Dev-C++ was popular, this question appeard at least twice a day on Dev-C++'s own forum on Sourceforge.  For that reason the forum has a ""Read First"" thread that provides a suggested solution amongst solutions to many other common problems.  You should read it <a href=""http://sourceforge.net/projects/dev-cpp/forums/forum/48211/topic/1693710"" rel=""noreferrer"">here</a>.</p>

<p>Note that Dev-C++ is somewhat old and no longer actively maintained.  It suffers most significantly from an almost unusable and very limited debugger integration.  Traffic on the Dev-C++ forum has been dropping off since the release of VC++ 2005 Express, and is now down to a two or three posts a week rather than the 10 or so a day it had in 2005.  All this suggest that you should consider an alternative tool IMO.</p>
","2366558"
"Cygwin - Makefile-error: recipe for target `main.o' failed","95471","","<p>I am currently failing to write a good makefile and don't know the reason why..  -.-</p>

<p>This is my main.c:</p>

<pre><code>#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{ 
   printf(""MEEEEEP"");
   return (0);
}
</code></pre>

<p>This is my makefile:</p>

<pre><code># make SYSTEM= OS= ENVIRONMENT=
# Binaries to use
ifeq ($(ENVIRONMENT),MINGW)
  CXX   = i686-pc-mingw32-g++
else
  CXX   = g++
endif
REMOVE  = rm -vf

RC      = windres
EXE     = .exe

#############################################################
# Info

ifeq ($(CXX),g++)
INFO_CXX = g++ -dumpversion; g++ -dumpmachine
endif

#############################################################
# Flags

DEBUG = -DDEBUG -g
OPTIMIZATION = -O2 #-Winline -finline-functions

CFLAGS = -Wall -Wextra -W -static $(DEBUG) $(OPTIMIZATION) -D$(SYSTEM) -D$(OS) -D$(ENVIRONMENT) $(PRGFLAGS)

ifeq ($(SYSTEM),I686)
  CFLAGS   += -m32

  ifeq ($(OS),WIN32)
    CFLAGS += -D_WIN32 
  endif

  ifeq ($(ENVIRONMENT),MINGW)
    CFLAGS += -fexceptions 
  endif
endif

 LFLAGS    = 

#############################################################
# Files

CFILES      = main.c
OBJS        = ${CFILES:.c=.o}

#############################################################
# Include

INCLUDES      = -I.

#############################################################
# Library

LIBRARIES     = 

#############################################################
# Targets
.PHONY: all
all:    
    @echo == Standard build: make SYSTEM=I686 OS=WIN32 ENVIRONMENT=MINGW
    @echo
    @echo 
    make SYSTEM=I686 OS=WIN32 ENVIRONMENT=MINGW gyro

#############################################################
# Implicit rules and filename extensions... 
.SUFFIXES: .h .o .c

.c.o:     %.h
      @echo Compiling $&lt; for $(SYSTEM) $(OS) $(ENVIRONMENT) ...
      @echo MEEP
      $(CXX) $(CFLAGS) $(INCLUDES) -c $&lt; -o $@
      @echo MEEP2

#############################################################
# Target rules
gyro: $(OBJS)
      @echo Building software for $(SYSTEM) ...
      @echo
      $(CXX) $(CFLAGS) $(LFLAGS) -o $@$(EXE) $(OBJS) $(LIBRARIES)

#############################################################
# Clean
.PHONY: clean
clean:
    $(REMOVE) $(OBJS)


#############################################################
# Info
.PHONY: info
info:
    @echo 
    @echo Information about C++ Compiler/Linker:
    @echo 
    $(INFO_CXX)
</code></pre>

<p>When i type in make gyro,
i receive the output:</p>

<pre><code>Compiling main.c for Windows_NT ...
MEEP
g++ -Wall -Wextra -W -static -DDEBUG -g -O2  -D -DWindows_NT -D  -I. -c main.c -o     main.o
makeNew.mak:83: recipe for target `main.o' failed
make: *** [main.o] Error 1
</code></pre>

<p>But Line number 83 is behind .c.o:     %.h. And i don’t understand why.
Does anyone have a solution for me? </p>
","<p>You see the two empty <code>-D</code> entries in the <code>g++</code> command line? They're causing the problem. You <strong>must</strong> have values in the <code>-D</code> items e.g. <code>-DWIN32</code></p>

<p>if you're insistent on using something like -D$(SYSTEM) -D$(ENVIRONMENT) then you can use something like:</p>

<pre><code>SYSTEM ?= generic
ENVIRONMENT ?= generic
</code></pre>

<p>in the makefile which gives them default values.</p>

<p>Your output looks to be missing the all important output:</p>

<pre><code>&lt;command-line&gt;:0:1: error: macro names must be identifiers
&lt;command-line&gt;:0:1: error: macro names must be identifiers
</code></pre>

<p>just to clarify, what actually got sent to <code>g++</code> was <code>-D -DWindows_NT</code>, i.e. define a preprocessor macro called <code>-DWindows_NT</code>; which is of course not a valid identifier (similarly for <code>-D -I.</code>)</p>
","11936640"
"Proper way to empty a C-String","95364","","<p>I've been working on a project in C that requires me to mess around with strings a lot.  Normally, I do program in C++, so this is a bit different than just saying string.empty().</p>

<p>I'm wondering what would be the proper way to empty a string in C.  Would this be it?</p>

<pre>
buffer[80] = ""Hello World!\n"";

// ...

strcpy(buffer, """");
</pre>
","<p>It depends on what you mean by ""empty"". If you just want a zero-length string, then your example will work.</p>

<p>This will also work:</p>

<pre><code>buffer[0] = '\0';
</code></pre>

<p>If you want to zero the entire contents of the string, you can do it this way:</p>

<pre><code>memset(buffer,0,strlen(buffer));
</code></pre>

<p>but this will only work for zeroing up to the first NULL character.</p>

<p>If the string is a static array, you can use:</p>

<pre><code>memset(buffer,0,sizeof(buffer));
</code></pre>
","8107851"
"Interview question: Check if one string is a rotation of other string","95361","","<p>A friend of mine was asked the following question today at interview for the position of software developer:</p>

<p>Given two string <code>s1</code> and <code>s2</code> how will you check if <code>s1</code> is a <strong>rotated</strong> version of <code>s2</code> ?</p>

<p><strong><em>Example:</em></strong> </p>

<p>If <code>s1 = ""stackoverflow""</code> then the following are some of its rotated versions:</p>

<pre><code>""tackoverflows""
""ackoverflowst""
""overflowstack""
</code></pre>

<p>where as <code>""stackoverflwo""</code> is <strong><em>not</em></strong> a rotated version.</p>

<p>The answer he gave was:<br></p>

<blockquote>
  <p>Take <code>s2</code> and find the longest prefix that is a sub string of <code>s1</code>, that will give you the point of rotation. Once you find that point, break <code>s2</code> at that point to get <code>s2a</code> and <code>s2b</code>, then just check if <code>concatenate(s2a,s2b) == s1</code></p>
</blockquote>

<p>It looks like a good solution to me and my friend. But the interviewer thought otherwise. He asked for a simpler solution. Please help me by telling how would you do this in <code>Java/C/C++</code> ?</p>

<p>Thanks in advance.</p>
","<p>First make sure <code>s1</code> and <code>s2</code> are of the same length. Then check to see if <code>s2</code> is a substring of <code>s1</code> concatenated with <code>s1</code>:</p>

<pre><code>algorithm checkRotation(string s1, string s2) 
  if( len(s1) != len(s2))
    return false
  if( substring(s2,concat(s1,s1))
    return true
  return false
end
</code></pre>

<p>In Java:</p>

<pre><code>boolean isRotation(String s1,String s2) {
    return (s1.length() == s2.length()) &amp;&amp; ((s1+s1).indexOf(s2) != -1);
}
</code></pre>
","2553533"
"Using floats with sprintf() in embedded C","95350","","<p>Guys, I want to know if <code>float</code> variables can be used in <code>sprintf()</code> function.</p>

<p>Like, if we write:</p>

<pre><code>sprintf(str,""adc_read = %d \n"",adc_read);
</code></pre>

<p>where <code>adc_read</code> is an integer variable, it will store the string </p>

<blockquote>
  <p><code>""adc_read = 1023 \n""</code> </p>
</blockquote>

<p>in <code>str</code> (assuming that  <code>adc_read = 1023</code>)</p>

<p>How can I use a float variable in place of integer?</p>
","<p>Since you're on an embedded platform, it's quite possible that you don't have the full range of capabilities from the <code>printf()</code>-style functions.</p>

<p>Assuming you have floats at all (still not necessarily a given for embedded stuff), you can emulate it with something like:</p>

<pre><code>char str[100];
float adc_read = 678.0123;

char *tmpSign = (adc_read &lt; 0) ? ""-"" : """";
float tmpVal = (adc_read &lt; 0) ? -adc_read : adc_read;

int tmpInt1 = tmpVal;                  // Get the integer (678).
float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
int tmpInt2 = trunc(tmpFrac * 10000);  // Turn into integer (123).

// Print as parts, note that you need 0-padding for fractional bit.

sprintf (str, ""adc_read = %s%d.%04d\n"", tmpSign, tmpInt1, tmpInt2);
</code></pre>

<p>You'll need to restrict how many characters come after the decimal based on the sizes of your integers. For example, with a 16-bit signed integer, you're limited to four digits (9,999 is the largest power-of-ten-minus-one that can be represented).</p>

<p>However, there are ways to handle this by further processing the fractional part, shifting it by four decimal digits each time (and using/subtracting the integer part) until you have the precision you desire.</p>

<hr>

<p><strong>Update:</strong></p>

<p>One final point you mentioned that you were using <code>avr-gcc</code> in a response to one of the other answers. I found the following web page that seems to describe what you need to do to use <code>%f</code> in your <code>printf()</code> statements <a href=""http://winavr.scienceprog.com/avr-gcc-tutorial/using-sprintf--function-for-float-numbers-in-avr-gcc.html"" rel=""nofollow noreferrer"">here</a>.</p>

<p>As I originally suspected, you need to do some extra legwork to get floating point support. This is because embedded stuff rarely needs floating point (at least none of the stuff I've ever done). It involves setting extra parameters in your makefile and linking with extra libraries.</p>

<p>However, that's likely to increase your code size quite a bit due to the need to handle general output formats. If you can restrict your float outputs to 4 decimal places or less, I'd suggest turning my code into a function and just using that - it's likely to take up far less room.</p>

<p>In case that link ever disappears, what you have to do is ensure that your gcc command has <code>""-Wl,-u,vfprintf -lprintf_flt -lm</code>"". This translates to:</p>

<ul>
<li>force vfprintf to be initially undefined (so that the linker has to resolve it).</li>
<li>specify the floating point <code>printf()</code> library for searching.</li>
<li>specify the math library for searching.</li>
</ul>
","906009"
"How to specify 64 bit integers in c","95157","","<p>I'm trying to use 64 bit integers in C, but am getting mixed signals as to whether it should be possible.</p>

<p>When I execute the printf:</p>

<pre><code>printf(""Size of long int:%d\nSize of long long int:%d\n\n"",(int)sizeof(long int), (int)sizeof(long long int));
</code></pre>

<p>The response I get is:</p>

<p>Size of long int:4
Size of long long int:8</p>

<p>This makes me feel that a long long int has 8 bytes = 64 bits.</p>

<p>However, when I try to declare the following variables:</p>

<pre><code>long long int a2 = 0x00004444;
long long int b2 = 0x000044440;
long long int c2 = 0x0000444400;
long long int d2 = 0x00004444000;
long long int e2 = 0x000044440000;
long long int f2 = 0x0000444400004;
long long int g2 = 0x00004444000044;
long long int h2 = 0x000044440000444;
long long int i2 = 0x0000444400004444;
</code></pre>

<p>The last 4 variables (f2,g2,h2,i2) give me the error message:  </p>

<p>warning: integer constant is too large for ‘long’ type </p>

<p>I get the same result when I replace 'long long int' with 'int64_t'. I assume 'int64_t' was recognized, since it didn't generate any error messages of its own.</p>

<p>So, it appears my 8 byte long long int is really a 6 byte long long int, and I don't understand what I'm missing here. If it's any help, here is the information on my gcc compiler:</p>

<pre><code>me@ubuntu:~$ gcc -v  
Using built-in specs.  
Target: i686-linux-gnu  
Configured with: ../src/configure -v   
--with-pkgversion='Ubuntu/Linaro 4.4.4-14ubuntu5'  
--with-bugurl=file:///usr/share/doc/gcc-4.4/README.Bugs   
--enable-languages=c,c++,fortran,objc,obj-c++  
--prefix=/usr   
--program-suffix=-4.4   
--enable-shared   
--enable-multiarch   
--enable-linker-build-id   
--with-system-zlib   
--libexecdir=/usr/lib   
--without-included-gettext   
--enable-threads=posix   
--with-gxx-include-dir=/usr/include/c++/4.4   
--libdir=/usr/lib   
--enable-nls   
--with-sysroot=/ -  
-enable-clocale=gnu   
--enable-libstdcxx-debug   
--enable-objc-gc   
--enable-targets=all 
--disable-werror   
--with-arch-32=i686   
--with-tune=generic   
--enable-checking=release   
--build=i686-linux-gnu   
--host=i686-linux-gnu   
--target=i686-linux-gnu  
Thread model: posix  
gcc version 4.4.5 (Ubuntu/Linaro 4.4.4-14ubuntu5)   
</code></pre>

<p>If anyone knows how (or if) 64 bit integers are accessible to me, I'd really appreciate any help. Thanks....</p>
","<p>Use <code>stdint.h</code> for specific sizes of integer data types, and also use appropriate suffixes for integer literal constants, e.g.:</p>

<pre><code>#include &lt;stdint.h&gt;

int64_t i2 = 0x0000444400004444LL;
</code></pre>
","9606507"
"CRC32 C or C++ implementation","95146","","<p>I'm looking for an implementation of CRC32 in C or C++ that is explicitly licensed as being no cost or public domain.  The implementation <a href=""http://www.networkdls.com/Software/View/CRC32"" rel=""noreferrer"">here</a> seems nice, but the only thing it says about the license is ""source code"", which isn't good enough.  I'd prefer non LGPL so I don't have to fool around with a DLL (my app is closed source).  I saw the adler32 implementation in zlib, but I'm checking small chunks of data, which adler is not good for.  </p>
","<p>Use the <a href=""http://www.boost.org/"" rel=""noreferrer"">Boost C++ libraries</a>.  There is a <a href=""http://www.boost.org/doc/libs/release/libs/crc/index.html"" rel=""noreferrer"">CRC</a> included there and the <a href=""http://www.boost.org/LICENSE_1_0.txt"" rel=""noreferrer"">license</a> is good.</p>
","302932"
"1 = false and 0 = true?","95074","","<p>I came across an is_equals() function in a c API at work that returned 1 for non-equal sql tables (false) and 0 for equal ones (true). I only realized it after running test cases on my code, one for the positive example and one for the negative and they both failed which at first made little sense. The code in the API does not have a bug as the output was recorded correctly in its documentation.</p>

<p>My questions - are there upside down worlds / parallel universes / coding languages where this logical NOTing is normal? Isn't 1 usually true? Is the coder of the API making an error?</p>
","<p>It is common for comparison functions to return <code>0</code> on ""equals"", so that they can also return a negative number for ""less than"" and a positive number for ""greater than"".  <code>strcmp()</code> and <code>memcmp()</code> work like this.</p>

<p>It is, however, idiomatic for zero to be false and nonzero to be true, because this is how the C flow control and logical boolean operators work.  So it might be that the return values chosen for this function are fine, but it is the function's <em>name</em> that is in error (it should really just be called <code>compare()</code> or similar).</p>
","6475735"
"Append to the end of a file in C","94824","","<p>I'm trying to append the contents of a file myfile.txt to the end of a second file myfile2.txt in c. I can copy the contents, but I can't find a way to append. Here's my code:</p>

<pre><code>FILE *pFile;
FILE *pFile2;
char buffer[256];

pFile=fopen(""myfile.txt"", ""r"");
pFile2=fopen(""myfile2.txt"", r+);
if(pFile==NULL) {
    perror(""Error opening file."");
}
else {
    while(!feof(pFile)) {
        if(fgets(buffer, 100, pFile) != NULL) {
        fseek(pFile2, -100, SEEK_END);
        fprintf(pFile2, buffer);
    }
}
fclose(pFile);
fclose(pFile2);
</code></pre>

<p>I don't think I'm using fseek correctly, but what I'm trying to do is call fseek to put the pointer at the end of the file, then write at the location of that pointer, instead of at the beginning of the file. Is this the right approach?</p>
","<p>Open with append:</p>

<pre><code>pFile2 = fopen(""myfile2.txt"", ""a"");
</code></pre>

<p>then just write to <code>pFile2</code>, no need to <code>fseek()</code>.</p>
","19429194"
"Understanding INADDR_ANY for socket programming","94777","","<p>I am trying to program some sockets and so, on the server side, I use <code>htonl(INADDR_ANY)</code>. To the extent I understood, it seems to me that this function generates a random IP (am I correct ?). In fact, I want to bind my socket with my <code>localhost</code>. But if I run this </p>

<pre><code>printf(""%d"",htonl(INADDR_ANY));
</code></pre>

<p>I get 0 as a return value. Could someone bring some explanation ?</p>
","<ol>
<li><p>bind() of INADDR_ANY DOES NOT ""generate a random IP"". It <a href=""http://man7.org/linux/man-pages/man7/ip.7.html"" rel=""nofollow noreferrer"">binds the socket to all available interfaces</a>. </p></li>
<li><p>For a server, you typically want to bind to all interfaces - not just ""localhost"". </p></li>
<li><p>If you wish to bind your socket to localhost only, the syntax would be <code>my_sockaddress.sin_addr.s_addr = inet_addr(""127.0.0.1"");</code>, then call <code>bind(my_socket, (SOCKADDR *) &amp;my_sockaddr, ...)</code>. </p></li>
<li><p>As it happens, ""INADDR_ANY"" is a constant that happens to equal ""zero"":</p>

<p><a href=""http://www.castaglia.org/proftpd/doc/devel-guide/src/include/inet.h.html"" rel=""nofollow noreferrer"">http://www.castaglia.org/proftpd/doc/devel-guide/src/include/inet.h.html</a></p>

<pre><code># define INADDR_ANY ((unsigned long int) 0x00000000)
...
# define INADDR_NONE    0xffffffff
...
# define INPORT_ANY 0
...
</code></pre></li>
<li><p>If you're not already familiar with it, I urge you to check out Beej's Guide to Sockets Programming:</p>

<p><a href=""http://beej.us/guide/bgnet/"" rel=""nofollow noreferrer"">http://beej.us/guide/bgnet/</a></p></li>
</ol>
","16510000"
"When to use malloc for char pointers","94620","","<p>I'm specifically focused on when to use malloc on char pointers</p>

<pre><code>char *ptr;
ptr = ""something"";
...code...
...code...
ptr = ""something else"";
</code></pre>

<p>Would a malloc be in order for something as trivial as this? If yes, why? If not, then when is it necessary for char pointers?</p>
","<p>As was indicated by others, you don't need to use malloc just to do:</p>

<pre><code>const char *foo = ""bar"";
</code></pre>

<p>The reason for that is exactly that <code>*foo</code> <em>is</em> a pointer &mdash; when you initialize <code>foo</code> you're not creating a copy of the string, just a pointer to where <code>""bar""</code> lives in the data section of your executable.  You can copy that pointer as often as you'd like, but remember, they're always pointing back to the same single instance of that string.</p>

<p>So when should you use malloc?  Normally you use <code>strdup()</code> to copy a string, which handles the malloc in the background.  e.g.</p>

<pre><code>const char *foo = ""bar"";
char *bar = strdup(foo); /* now contains a new copy of ""bar"" */
printf(""%s\n"", bar);     /* prints ""bar"" */
free(bar);               /* frees memory created by strdup */
</code></pre>

<p>Now, we finally get around to a case where you may want to malloc if you're using <code>sprintf()</code> or, more safely <code>snprintf()</code> which creates / formats a new string.</p>

<pre><code>char *foo = malloc(sizeof(char) * 1024);        /* buffer for 1024 chars */
snprintf(foo, 1024, ""%s - %s\n"", ""foo"", ""bar""); /* puts ""foo - bar\n"" in foo */
printf(foo);                                    /* prints ""foo - bar"" */
free(foo);                                      /* frees mem from malloc */
</code></pre>
","1788749"
"Using Cygwin to Compile a C program; Execution error","94606","","<p>I'm enrolled in a masters computer science course. The course is using C and the instructor wants us to use <a href=""http://www.cygwin.com/"" rel=""nofollow noreferrer"">Cygwin</a> to compile programs if we are using windows. </p>

<p>I've downloaded and installed <a href=""http://www.cygwin.com/"" rel=""nofollow noreferrer"">Cygwin</a> and I've ensured that I've installed the <a href=""http://gcc.gnu.org/"" rel=""nofollow noreferrer"">GCC compiler</a>. </p>

<p>But I don't know where to go from here. I need to compile a single source file that has a basic include.</p>

<pre><code>#include &lt;stdio.h&gt; 
</code></pre>

<p>Lets assume the file is on my desktop (it is not, but for the sake of argument). How do I navigate to the desktop from the bash shell? I assume once I've navigated to the correct location in bash, I simply execute:</p>

<pre><code>gcc myProgram.c -o myProgram
</code></pre>

<p><strong>Update</strong>: Following different instructions posted below, I was able to compile the program; I thank you for that. But when I execute the resulting binary I get the following. How can I compile or execute this program so I don't get the error?  Again, thank you.</p>

<p><code>This application has failed to start because cygwin1.dll was not found. Re-installing the application may fix this problem.</code></p>
","<p>when you start in cygwin, you are in your $HOME, like in unix generally, which maps to c:/cygwin/home/$YOURNAME by default. So you could put everything there.</p>

<p>You can also access the c: drive from cygwin through /cygdrive/c/ (e.g. /cygdrive/c/Documents anb Settings/yourname/Desktop).</p>
","1013672"
"How to find the size of integer array","94471","","<p>How to find the size of an integer array in C.</p>

<p>Any method available without traversing the whole array once, to find out the size of the array.</p>
","<p>If the array is a global, static, or automatic variable (<code>int array[10];</code>), then <code>sizeof(array)/sizeof(array[0])</code> works.  </p>

<p>If it is a dynamically allocated array (<code>int* array = malloc(sizeof(int)*10);</code>) or passed as a function argument (<code>void f(int array[])</code>), then you cannot find its size at run-time. You will have to store the size somewhere.<br>
Note that <code>sizeof(array)/sizeof(array[0])</code> compiles just fine even for the second case, but it will silently produce the wrong result. </p>
","2773366"
"Open directory using C","94457","","<p>I am accepting the path through command line input.</p>

<p>When I do</p>

<pre><code>dir=opendir(args[1]);
it doesnt enter the loop...i.e dir==null...
</code></pre>

<p>How do I pass the command line input to dir pointer???</p>

<pre><code>void main(int c,char **args)
{
    DIR *dir;
    struct dirent *dent;
    char buffer[50];
    strcpy(buffer, args[1]);
    dir = opendir(buffer);   //this part
    if(dir!=NULL)
    {
        while((dent=readdir(dir))!=NULL)
            printf(dent-&gt;d_name);
    }
    close(dir);
}

./a.out  /root/TEST is used to run the program..
./a.out --&gt; to execute the program
/root/TEST --&gt; input by the user i.e valid path
</code></pre>
","<p>You should really post your code, but here goes. Start with:</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;dirent.h&gt;

    int main (int c, char *v[]) {
        int len;
        struct dirent *pDirent;
        DIR *pDir;

        if (c &lt; 2) {
            printf (""Usage: testprog &lt;dirname&gt;\n"");
            return 1;
        }
        pDir = opendir (v[1]);
        if (pDir == NULL) {
            printf (""Cannot open directory '%s'\n"", v[1]);
            return 1;
        }

        while ((pDirent = readdir(pDir)) != NULL) {
            printf (""[%s]\n"", pDirent-&gt;d_name);
        }
        closedir (pDir);
        return 0;
    }
</code></pre>

<p>You need to check in your case that <code>args[1]</code> is both set and refers to an actual directory. When this is run with:</p>

<pre><code>testprog tmp
</code></pre>

<p>(<code>tmp</code> is a subdirectory off my current directory but you can use any valid directory), I get:</p>

<pre><code>[.]
[..]
[file1.txt]
[file1_file1.txt]
[file2.avi]
[file2_file2.avi]
[file3.b.txt]
[file3_file3.b.txt]
</code></pre>

<p>Note that you have to pass a <em>directory</em> in, not a <em>file.</em> When I execute:</p>

<pre><code>testprog tmp/file1.txt
</code></pre>

<p>I get:</p>

<pre><code>Cannot open directory 'tmp/file1.txt'
</code></pre>

<p>because that's a file rather than a directory (if you're sneaky, you can attempt to use <code>diropen(dirname(v[1]))</code> if the initial <code>diropen</code> fails).</p>
","3554147"
"How to format strings using printf() to get equal length in the output?","94330","","<p>I have two functions, one which produces messages like <code>Starting initialization...</code> and another which checks return codes and outputs <code>""Ok""</code>, <code>""Warning""</code> or <code>""Error""</code>. However, the output that is produced is of the different length:</p>

<pre><code>Starting initialization...Ok.
Checking init scripts...Ok.
</code></pre>

<p>How can I get something like this:</p>

<pre><code>Starting initialization...       Ok.
Checking init scripts...         Ok.
</code></pre>
","<p>You can specify width on string fields, e.g. </p>

<pre><code>printf(""%-20s"", ""initialization..."");
</code></pre>

<p>and then whatever's printed with that field will be blank-padded to the width you indicate.</p>

<p>The <code>-</code> left-justifies your text in that field.</p>
","1809413"
"""unused parameter"" warnings in C","94181","","<p>What's the best way to suppress <em>unused parameter</em> warning in C code.</p>

<p>For instance,</p>

<pre><code>Bool NullFunc(const struct timespec *when, const char *who)
{
   return TRUE;
}
</code></pre>

<p>In C++ I was able to put a <code>/*...*/</code> comment around the parameters. But not in C of course.</p>

<p>It gives me <code>error: parameter name omitted</code>.</p>
","<p>I usually write a macro like this:</p>

<pre><code>#define UNUSED(x) (void)(x)
</code></pre>

<p>You can use this macro for all your unused parameters. (Note that this works on any compiler.)</p>

<p>For example:</p>

<pre><code>void f(int x) {
    UNUSED(x);
    ...
}
</code></pre>
","3599170"
"The ""backspace"" escape character '\b' in C, unexpected behavior?","94175","","<p>So I'm finally reading through K&amp;R, and I learned something within the first few pages, that there is a backspace escape character, ""<code>\b</code>"".</p>

<p>So I go to test it out, and there is some very odd behavior.</p>

<pre><code>#include &lt;stdio.h&gt;

main ()
{
    printf(""hello worl\b\bd\n"");
}
</code></pre>

<p>The output is</p>

<pre><code>hello wodl
</code></pre>

<p>Can anyone explain this?</p>
","<p>Your result will vary depending on what kind of terminal or console program you're on, but yes, on most <code>\b</code> is a <em>nondestructive</em> backspace. It moves the cursor backward, but doesn't erase what's there.</p>

<p>So for the <code>hello worl</code> part, the code outputs</p>

<pre>
hello worl
          ^
</pre>

<p>...(where <code>^</code> shows where the cursor is) Then it outputs two <code>\b</code> characters which moves the cursor backward two places <em>without</em> erasing (on your terminal):</p>

<pre>
hello worl
        ^
</pre>

<p>Note the cursor is now on the <code>r</code>. Then it outputs <code>d</code>, which overwrites the <code>r</code> and gives us:</p>

<pre>
hello wodl
         ^
</pre>

<p>Finally, it outputs <code>\n</code>, which is a non-destructive newline (again, on most terminals, including apparently yours), so the <code>l</code> is left unchanged and the cursor is moved to the beginning of the next line.</p>
","6792867"
"Does Arduino use C or C++?","94166","","<p>Coming from Python, the whole C/C++ thing is kind of alien to begin with... and then I see in one place that Arduino uses 'standard' C, and in another that it uses 'standard' C++, so on and so forth.  Which is it?  My admittedly crude understanding of the difference between the two is that C++ is (roughly) C with classes/objects.  How does that affect which language or dialect (C or C++) should I concentrate on learning for use primarily with Arduino?</p>
","<p>Arduino doesn't run either C or C++. It runs machine code compiled from either C, C++ or any other language that has a compiler for the Arduino instruction set.</p>

<p>C being a subset of C++, if Arduino can ""run"" C++ then it can ""run"" C.</p>

<p>If you don't already know C nor C++, you should probably start with C, just to get used to the whole ""pointer"" thing. You'll lose all the object inheritance capabilities though.</p>
","11812872"
"How to printf uint64_t? Fails with: ""spurious trailing ‘%’ in format""","94155","","<p>I wrote a very simple test code of printf uint64_t:</p>

<pre><code>#include &lt;inttypes.h&gt;
#include &lt;stdio.h&gt;

int main()
{
  uint64_t ui64 = 90;
  printf(""test uint64_t : %"" PRIu64 ""\n"", ui64);
  return 0;
}
</code></pre>

<p>I use ubuntu 11.10 (64 bit) and gcc version 4.6.1 to compile it, but failed:</p>

<pre><code>main.cpp: In function ‘int main()’:
main.cpp:9:30: error: expected ‘)’ before ‘PRIu64’
main.cpp:9:47: warning: spurious trailing ‘%’ in format [-Wformat]
</code></pre>
","<p>The ISO C99 standard specifies that these macros must only be defined if explicitly requested.</p>

<pre><code>#define __STDC_FORMAT_MACROS
#include &lt;inttypes.h&gt;

... now PRIu64 will work
</code></pre>
","8132440"
"How to get MAC address of your machine using a C program?","94029","","<p>I am working on Ubuntu. How can I get MAC address of my machine or an interface say eth0 using C program.</p>
","<p>You need to iterate over all the available interfaces on your machine, and use <code>ioctl</code> with <code>SIOCGIFHWADDR</code> flag to get the mac address.  The mac address will be obtained as a 6-octet binary array.  You also want to skip the loopback interface.</p>

<pre><code>#include &lt;sys/ioctl.h&gt;
#include &lt;net/if.h&gt; 
#include &lt;unistd.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;string.h&gt;

int main()
{
    struct ifreq ifr;
    struct ifconf ifc;
    char buf[1024];
    int success = 0;

    int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP);
    if (sock == -1) { /* handle error*/ };

    ifc.ifc_len = sizeof(buf);
    ifc.ifc_buf = buf;
    if (ioctl(sock, SIOCGIFCONF, &amp;ifc) == -1) { /* handle error */ }

    struct ifreq* it = ifc.ifc_req;
    const struct ifreq* const end = it + (ifc.ifc_len / sizeof(struct ifreq));

    for (; it != end; ++it) {
        strcpy(ifr.ifr_name, it-&gt;ifr_name);
        if (ioctl(sock, SIOCGIFFLAGS, &amp;ifr) == 0) {
            if (! (ifr.ifr_flags &amp; IFF_LOOPBACK)) { // don't count loopback
                if (ioctl(sock, SIOCGIFHWADDR, &amp;ifr) == 0) {
                    success = 1;
                    break;
                }
            }
        }
        else { /* handle error */ }
    }

    unsigned char mac_address[6];

    if (success) memcpy(mac_address, ifr.ifr_hwaddr.sa_data, 6);
}
</code></pre>
","1779758"
"Print text instead of value from C enum","93764","","<pre><code>int main()
{

  enum Days{Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday};

  Days TheDay;

  int j = 0;

  printf(""Please enter the day of the week (0 to 6)\n"");

  scanf(""%d"",&amp;j);

  TheDay = Days(j);

  //how to PRINT THE VALUES stored in TheDay

  printf(""%s"",TheDay);  //   isnt working

  return 0;
}
</code></pre>
","<p>Enumerations in C are numbers that have convenient names inside your code. They are not strings, and the names assigned to them in the source code are not compiled into your program, and so they are not accessible at runtime.</p>

<p>The only way to get what you want is to write a function yourself that translates the enumeration value into a string. E.g. (assuming here that you move the declaration of <code>enum Days</code> outside of <code>main</code>):</p>

<pre><code>const char* getDayName(enum Days day) 
{
   switch (day) 
   {
      case Sunday: return ""Sunday"";
      case Monday: return ""Monday"";
      /* etc... */
   }
}

/* Then, later in main: */
printf(""%s"", getDayName(TheDay));
</code></pre>

<p>Alternatively, you could use an array as a map, e.g.</p>

<pre><code>const char* dayNames[] = {""Sunday"", ""Monday"", ""Tuesday"", /* ... etc ... */ };

/* ... */

printf(""%s"", dayNames[TheDay]);
</code></pre>

<p>But here you would probably want to assign <code>Sunday = 0</code> in the enumeration to be safe... I'm not sure if the C standard requires compilers to begin enumerations from 0, although most do (I'm sure someone will comment to confirm or deny this).</p>
","3168327"
"min and max value of data type in C","93459","","<p>What is the function to determine the min and max possible of value of datatypes (i.e, int, char.etc) in C?</p>
","<p>You'll want to use <a href=""http://en.cppreference.com/w/c/types/limits"" rel=""noreferrer""><code>limits.h</code></a> which provides the following constants (as per the linked reference):</p>

<pre><code>CHAR_BIT   = number of bits in a char
SCHAR_MIN  = minimum value for a signed char
SCHAR_MAX  = maximum value for a signed char
UCHAR_MAX  = maximum value for an unsigned char
CHAR_MIN   = minimum value for a char
CHAR_MAX   = maximum value for a char
MB_LEN_MAX = maximum multibyte length of a character accross locales
SHRT_MIN   = minimum value for a short
SHRT_MAX   = maximum value for a short
USHRT_MAX  = maximum value for an unsigned short
INT_MIN    = minimum value for an int
INT_MAX    = maximum value for an int
UINT_MAX   = maximum value for an unsigned int
LONG_MIN   = minimum value for a long
LONG_MAX   = maximum value for a long
ULONG_MAX  = maximum value for an unsigned long
LLONG_MIN  = minimum value for a long long
LLONG_MAX  = maximum value for a long long
ULLONG_MAX = maximum value for an unsigned long long
</code></pre>

<p>Where <code>U*_MIN</code> is omitted for obvious reasons (any unsigned type has a minimum value of 0).</p>

<p>Similarly <a href=""http://en.cppreference.com/w/c/types/limits"" rel=""noreferrer""><code>float.h</code></a> provides limits for <code>float</code> and <code>double</code> types:</p>

<pre><code>-FLT_MAX = most negative value of a float
FLT_MAX  = max value of a float
-DBL_MAX = most negative value of a double
DBL_MAX  = max value of a double
-LDBL_MAX = most negative value of a long double
LDBL_MAX = max value of a long double
</code></pre>

<p>You should read the article on <code>floats.h</code> carefully, though <code>float</code> and <code>double</code> can hold the prescribed minimum and maximum values but the precision with which each type can represent data may not match what it is you're trying to store.  In particular, it's difficult to store exceptionally large numbers with extremely small fractions attached. So <code>float.h</code> provides a number of other constants that help you to determine if a <code>float</code> or a <code>double</code> can,in fact,represent a particular number.</p>
","2053847"
"UNIX nonblocking I/O: O_NONBLOCK vs. FIONBIO","93190","","<p>In every example and discussion I run across in the context of BSD socket programming, it seems that the recommended way to set a file descriptor to nonblocking I/O mode is using the <code>O_NONBLOCK</code> flag to <code>fcntl()</code>, e.g.</p>

<pre><code>int flags = fcntl(fd, F_GETFL, 0);
fcntl(fd, F_SETFL, flags | O_NONBLOCK);
</code></pre>

<p>I've been doing network programming in UNIX for over ten years, and have always used the <code>FIONBIO ioctl()</code> call to do this:</p>

<pre><code>int opt = 1;
ioctl(fd, FIONBIO, &amp;opt);
</code></pre>

<p>Never really gave much thought to why.  Just learned it that way.  </p>

<p>Does anyone have any commentary on the possible respective merits of one or the other?  I imagine the portability locus differs somewhat, but do not know to what extent as <code>ioctl_list(2)</code> doesn't speak to that aspect of individual <code>ioctl</code> methods.  </p>
","<p>Prior to standardization there was <code>ioctl(</code>...<code>FIONBIO</code>...<code>)</code> and <code>fcntl(</code>...<code>O_NDELAY</code>...<code>)</code>, but these behaved inconsistently between systems, and even within the same system.  For example, it was common for <code>FIONBIO</code> to work on sockets and <code>O_NDELAY</code> to work on ttys, with a lot of inconsistency for things like pipes, fifos, and devices.  And if you didn't know what kind of file descriptor you had, you'd have to set both to be sure.  But in addition, a non-blocking read with no data available was also indicated inconsistently; depending on the OS and the type of file descriptor the read may return 0, or -1 with errno EAGAIN, or -1 with errno EWOULDBLOCK.  Even today, setting <code>FIONBIO</code> or <code>O_NDELAY</code> on Solaris causes a read with no data to return 0 on a tty or pipe, or -1 with errno EAGAIN on a socket.  However 0 is ambiguous since it is also returned for EOF.</p>

<p>POSIX addressed this with the introduction of <code>O_NONBLOCK</code>, which has standardized behavior across different systems and file descriptor types.  Because existing systems usually want to avoid any changes to behavior which might break backward compatibility, POSIX defined a new flag rather than mandating specific behavior for one of the others.  Some systems like Linux treat all 3 the same, and also define EAGAIN and EWOULDBLOCK to the same value, but systems wishing to maintain some other legacy behavior for backward compatibility can do so when the older mechanisms are used.</p>

<p>New programs should use <code>fcntl(</code>...<code>O_NONBLOCK</code>...<code>)</code>, as standardized by POSIX.</p>
","1151077"
"C/C++ Free alternative to Lint?","93008","","<p>I'm interested in a free tool that can statically check my C++ code like Lint does.
Any hints?</p>
","<p>Try <code>cppcheck</code>, found here: <a href=""http://cppcheck.sourceforge.net/"" rel=""noreferrer"">http://cppcheck.sourceforge.net/</a></p>

<p>Here's a sampling of some of the checks it can perform or that I've used it for:</p>

<ul>
<li>Array indices out of bounds</li>
<li>Memory/resource leaks</li>
<li>Improper new/delete</li>
<li>Failure to put virtual destructors on derived classes</li>
<li>Mismatching allocation and deallocation</li>
<li>Deallocating a deallocated pointer</li>
<li>Using variable after it is deallocated / released</li>
<li>Size mismatches</li>
<li>Invalid radix in call to <code>strtol</code> or <code>strtoul</code></li>
<li>Overlapping data buffers</li>
<li>Unsigned division; result may be wrong</li>
<li>Unusual pointer arithmetic</li>
<li>Returning pointer to local array variable</li>
<li>Same iterator is used with two containers</li>
<li>Dangerous usage of erase</li>
<li>After pushback or pushfront, iterator may be invalid</li>
<li>Buffer overruns</li>
<li>Dangerous usage of <code>strncat</code>, possible buffer overrun</li>
</ul>
","632085"
"Why is the gets function so dangerous that it should not be used?","92780","","<p>When I try to compile C code that uses the <code>gets()</code> function with GCC,</p>

<p>I get a <strong><em>warning</em></strong>: </p>

<blockquote>
  <p>(.text+0x34): warning: the `gets' function is dangerous and should not be used.</p>
</blockquote>

<p>I remember this has something to do with stack protection and security, but I'm not sure exactly why.</p>

<p>Can someone help me with removing this warning and explain why there is such a warning? </p>

<p>If <code>gets()</code> is so ""dangerous"" then why can't we remove it?</p>
","<p>In order to use <code>gets</code> safely, you have to know exactly how many characters you will be reading, so that you can make your buffer large enough. You will only know that if you know exactly what data you will be reading.</p>

<p>Instead of using <code>gets</code>, you want to use <a href=""http://en.cppreference.com/w/c/io/fgets"" rel=""noreferrer""><code>fgets</code></a>, which has the signature</p>

<pre><code>char* fgets(char *string, int length, FILE * stream);
</code></pre>

<p>(<code>fgets</code>, if it reads an entire line, will leave the <code>'\n'</code> in the string; you'll have to deal with that.)</p>

<p>It remained an official part of the language up to the 1999 ISO C standard, but
it was officially removed by the 2011 standard. Most C implementations still support it, but at least gcc issues a warning for any code that uses it.</p>
","1694042"
"Fast ceiling of an integer division in C / C++","92721","","<p>Given integer values <code>x</code> and <code>y</code>, C and C++ both return as the quotient <code>q = x/y</code> the floor of the floating point equivalent.  I'm interested in a method of returning the ceiling instead.  For example, <code>ceil(10/5)=2</code> and <code>ceil(11/5)=3</code>.</p>

<p>The obvious approach involves something like:</p>

<pre><code>q = x / y;
if (q * y &lt; x) ++q;
</code></pre>

<p>This requires an extra comparison and multiplication; and other methods I've seen (used in fact) involve casting as a <code>float</code> or <code>double</code>.  Is there a more direct method that avoids the additional multiplication (or a second division) and branch, and that also avoids casting as a floating point number?</p>
","<p>To round up ...</p>

<pre><code>q = (x + y - 1) / y;
</code></pre>

<p>or (avoiding overflow in x+y)</p>

<pre><code>q = 1 + ((x - 1) / y); // if x != 0
</code></pre>
","2745086"
"reading a string with spaces with sscanf","92662","","<p>For a project I'm trying to read an int and a string from a string. The only problem is sscanf appears to break reading an %s when it sees a space. Is there anyway to get around this limitation? Here's an example of what I'm trying to do:</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

int main(int argc, char** argv) {
    int age;
    char* buffer;
    buffer = malloc(200 * sizeof(char));
    sscanf(""19 cool kid"", ""%d %s"", &amp;age, buffer);

    printf(""%s is %d years old\n"", buffer, age);
    return 0;
}
</code></pre>

<p>What it prints is: ""cool is 19 years old"" where I need ""cool kid is 19 years old"". Does anyone know how to fix this?</p>
","<p>The following line will start reading a number (<code>%d</code>) followed by anything different from tabs or newlines (<code>%[^\t\n]</code>).</p>

<pre><code>sscanf(""19 cool kid"", ""%d %[^\t\n]"", &amp;age, buffer);
</code></pre>
","2854510"
"Color text in terminal applications in UNIX","92632","","<p>I started to write a terminal text editor, something like the first text editors for UNIX, such as vi. My only goal is to have a good time, but I want to be able to show text in color, so I can have syntax highlighting for editing source code. </p>

<p>How can I achieve this? Is there some special POSIX API for this, or do I have to use ncurses? (I'd rather not)</p>

<p>Any advice? Maybe some textbooks on the UNIX API?</p>
","<p>This is a little C program that illustrates how you could use color codes:</p>

<pre><code>#include &lt;stdio.h&gt;

#define KNRM  ""\x1B[0m""
#define KRED  ""\x1B[31m""
#define KGRN  ""\x1B[32m""
#define KYEL  ""\x1B[33m""
#define KBLU  ""\x1B[34m""
#define KMAG  ""\x1B[35m""
#define KCYN  ""\x1B[36m""
#define KWHT  ""\x1B[37m""

int main()
{
    printf(""%sred\n"", KRED);
    printf(""%sgreen\n"", KGRN);
    printf(""%syellow\n"", KYEL);
    printf(""%sblue\n"", KBLU);
    printf(""%smagenta\n"", KMAG);
    printf(""%scyan\n"", KCYN);
    printf(""%swhite\n"", KWHT);
    printf(""%snormal\n"", KNRM);

    return 0;
}
</code></pre>
","3586005"
"What does it mean to write to stdout in C?","92427","","<p>Does a program that writes to ""stdout"" write to a file?  the screen?  I don't understand what it means to write to stdout.</p>
","<p>That means that you are printing output on the main output device for the session... whatever that may be. The user's console, a tty session, a file or who knows what. What that device may be varies depending on how the program is being run and from where.</p>

<p>The following command will write to the standard output device (stdout)...</p>

<pre><code>printf( ""hello world\n"" );
</code></pre>

<p>Which is just another way, in essence, of doing this...</p>

<pre><code>fprintf( stdout, ""hello world\n"" );
</code></pre>

<p>In which case <code>stdout</code> is a pointer to a <code>FILE</code> stream that represents the default output device for the application. You could also use</p>

<pre><code>fprintf( stderr, ""that didn't go well\n"" );
</code></pre>

<p>in which case you would be sending the output to the standard error output device for the application which may, or may not, be the same as <code>stdout</code> -- as with <code>stdout</code>, <code>stderr</code> is a pointer to a <code>FILE</code> stream representing the default output device for error messages.</p>
","16430116"
"Read .CSV file in C","92364","","<p>I Have a .csv file : </p>

<pre><code>lp;imie;nazwisko;ulica;numer;kod;miejscowosc;telefon;email;data_ur
1;Jan;Kowalski;ul. Nowa;1a;11-234;Budry;123-123-456;jan@go.xxx;1980.05.13
2;Jerzy;Nowak;ul. Konopnicka;13a/3;00-900;Lichowice;(55)333-44-55;jer@wu.to;1990.03.23
</code></pre>

<p>and i need to read this in C. I have some code, but only for connection.</p>
","<p>Hopefully this would get you started</p>

<p>See it live on <strong><a href=""http://ideone.com/l23He"">http://ideone.com/l23He</a></strong> (using stdin)</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

const char* getfield(char* line, int num)
{
    const char* tok;
    for (tok = strtok(line, "";"");
            tok &amp;&amp; *tok;
            tok = strtok(NULL, "";\n""))
    {
        if (!--num)
            return tok;
    }
    return NULL;
}

int main()
{
    FILE* stream = fopen(""input"", ""r"");

    char line[1024];
    while (fgets(line, 1024, stream))
    {
        char* tmp = strdup(line);
        printf(""Field 3 would be %s\n"", getfield(tmp, 3));
        // NOTE strtok clobbers tmp
        free(tmp);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>Field 3 would be nazwisko
Field 3 would be Kowalski
Field 3 would be Nowak
</code></pre>
","12911465"
"Why is the use of alloca() not considered good practice?","92305","","<p><code>alloca()</code> allocates memory from Stack rather than heap which is case in <code>malloc()</code>. So, when I return from the routine the memory is freed. So, actually this solves my problem of freeing up of dynamically allocated memory. Freeing of memory allocated through <code>malloc()</code> is a major headache and if somehow missed leads to all sorts memory problems.</p>

<p>Why is the use of <code>alloca()</code> discouraged in spite of the above features?</p>
","<p>The answer is right there in the <code>man</code> page (at least on Linux):</p>

<blockquote>
  <p>RETURN VALUE
         The alloca() function returns a pointer to the beginning of the
  allocated  space.   If  the 
  allocation  causes
         stack overflow, program behaviour is undefined.</p>
</blockquote>

<p>Which isn't to say it should never be used.  One of the OSS projects I work on uses it extensively, and as long as you're not abusing it (<code>alloca</code>'ing huge values), it's fine.  Once you go past the ""few hundred bytes"" mark, it's time to use <code>malloc</code> and friends, instead.  You may still get allocation failures, but at least you'll have some indication of the failure instead of just blowing out the stack.</p>
","1018865"
"C/C++ maximum stack size of program","92169","","<p>I want to do DFS on a 100 X 100 array. (Say elements of array represents graph nodes) So assuming worst case, depth of recursive function calls can go upto 10000 with each call taking upto say 20 bytes. So is it feasible means is there a possibility of stackoverflow? </p>

<p>What is the maximum size of stack in C/C++?</p>

<blockquote>
  <p>Please specify for gcc for both<br>
  1) cygwin on Windows<br>
  2) Unix  </p>
</blockquote>

<p>What are the general limits?</p>
","<p>In Visual Studio the default stack size is 1 MB i think, so with a recursion depth of 10,000 each stack frame can be at most ~100 bytes which should be sufficient for a DFS algorithm.</p>

<p>Most compilers including Visual Studio let you specify the stack size. On some (all?) linux flavours the stack size isn't part of the executable but an environment variable in the OS. You can then check the stack size with <code>ulimit -s</code> and set it to a new value with for example <code>ulimit -s 16384</code>.</p>

<p>Here's a <a href=""http://www.cs.nyu.edu/exact/core/doc/stackOverflow.txt"" rel=""nofollow noreferrer"">link</a> with default stack sizes for gcc.</p>

<p>DFS without recursion:</p>

<pre><code>std::stack&lt;Node&gt; dfs;
dfs.push(start);
do {
    Node top = dfs.top();
    if (top is what we are looking for) {
       break;
    }
    dfs.pop();
    for (outgoing nodes from top) {
        dfs.push(outgoing node);
    }
} while (!dfs.empty())
</code></pre>
","1825996"
"Read from file or stdin","91992","","<p>I am writing a utility which accepts either a filename, or reads from stdin.</p>

<p>I would like to know the most robust / fastest way of checking to see if stdin exists (data is being piped to the program) and if so reading that data in.  If it doesn't exist, the processing will take place on the filename given.  I have tried using the following the test for size of <code>stdin</code> but I believe since it's a stream and not an actual file, it's not working as I suspected it would and it's always printing <code>-1</code>.  I know I could always read the input 1 character at a time while != EOF but I would like a more generic solution so I could end up with either a fd or a FILE* if stdin exists so the rest of the program will function seamlessly.  I would also like to be able to know its size, pending the stream has been closed by the previous program.</p>

<pre><code>long getSizeOfInput(FILE *input){
  long retvalue = 0;
  fseek(input, 0L, SEEK_END);
  retvalue = ftell(input);
  fseek(input, 0L, SEEK_SET);
  return retvalue;
}

int main(int argc, char **argv) {
  printf(""Size of stdin: %ld\n"", getSizeOfInput(stdin));
  exit(0);
}
</code></pre>

<p>Terminal:</p>

<pre><code>$ echo ""hi!"" | myprog
Size of stdin: -1
</code></pre>
","<p>First, ask the program to tell you what is wrong by checking the <code>errno</code>, which is set on failure, such as during <code>fseek</code> or <code>ftell</code>.</p>

<p>Others (tonio &amp; LatinSuD) have explained the mistake with handling stdin versus checking for a filename. Namely, first check <code>argc</code> (argument count) to see if there are any command line parameters specified <code>if (argc &gt; 1)</code>, treating <code>-</code> as a special case meaning <code>stdin</code>. </p>

<p>If no parameters are specified, then assume input is (going) to come from <code>stdin</code>, which is a <strong>stream</strong> not file, and the <code>fseek</code> function fails on it.</p>

<p>In the case of a stream, where you cannot use file-on-disk oriented library functions (i.e. <code>fseek</code> and <code>ftell</code>), you simply have to count the number of bytes read (including trailing newline characters) until receiving <strong>EOF</strong> (end-of-file).</p>

<p>For usage with large files you could speed it up by using <code>fgets</code> to a char array for more efficient reading of the bytes in a (text) file. For a binary file you need to use <code>fopen(const char* filename, ""rb"")</code> and use <code>fread</code> instead of <code>fgetc/fgets</code>.</p>

<p>You could also check the for <code>feof(stdin)</code> / <code>ferror(stdin)</code> when using the byte-counting method to detect any errors when reading from a stream.</p>

<p>The sample below should be C99 compliant and portable.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;

long getSizeOfInput(FILE *input){
   long retvalue = 0;
   int c;

   if (input != stdin) {
      if (-1 == fseek(input, 0L, SEEK_END)) {
         fprintf(stderr, ""Error seek end: %s\n"", strerror(errno));
         exit(EXIT_FAILURE);
      }
      if (-1 == (retvalue = ftell(input))) {
         fprintf(stderr, ""ftell failed: %s\n"", strerror(errno));
         exit(EXIT_FAILURE);
      }
      if (-1 == fseek(input, 0L, SEEK_SET)) {
         fprintf(stderr, ""Error seek start: %s\n"", strerror(errno));
         exit(EXIT_FAILURE);
      }
   } else {
      /* for stdin, we need to read in the entire stream until EOF */
      while (EOF != (c = fgetc(input))) {
         retvalue++;
      }
   }

   return retvalue;
}

int main(int argc, char **argv) {
   FILE *input;

   if (argc &gt; 1) {
      if(!strcmp(argv[1],""-"")) {
         input = stdin;
      } else {
         input = fopen(argv[1],""r"");
         if (NULL == input) {
            fprintf(stderr, ""Unable to open '%s': %s\n"",
                  argv[1], strerror(errno));
            exit(EXIT_FAILURE);
         }
      }
   } else {
      input = stdin;
   }

   printf(""Size of file: %ld\n"", getSizeOfInput(input));

   return EXIT_SUCCESS;
}
</code></pre>
","3495410"
"What do pty and tty mean?","91904","","<p>I noticed there are many mentions of <code>pty</code> and <code>tty</code> in some opensource projects, could someone can tell me what do they mean and what is the difference between them? Thanks!</p>
","<p>""tty"" originally meant ""teletype"" and ""pty"" means ""pseudo-teletype"".</p>

<p>In UNIX, /dev/tty* is any device that acts like a ""teletype"", ie, terminal.  (Called teletype because that's what we had for terminals in those benighted days.)</p>

<p>A pty is a pseudotty, a device entry that acts like a terminal to the process reading and writing there, but managed by something else.  They first appeared (as I recall) for X Windows and screen and the like, where you needed something that acted ilke a terminal but could be used from another program.</p>
","4426291"
"C: socket connection timeout","91898","","<p>I have a simple program to check if a port is open, but I want to shorten the timeout length on the socket connection because the default is far too long. I'm not sure how to do this though. Here's the code:</p>

<pre><code>#include &lt;sys/socket.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;errno.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;netdb.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;

int main(int argc, char **argv) {
    u_short port;                /* user specified port number */
    char addr[1023];             /* will be a copy of the address entered by u */
    struct sockaddr_in address;  /* the libc network address data structure */
    short int sock = -1;         /* file descriptor for the network socket */

    if (argc != 3) {
        fprintf(stderr, ""Usage %s &lt;port_num&gt; &lt;address&gt;"", argv[0]);
        return EXIT_FAILURE;
    }

    address.sin_addr.s_addr = inet_addr(argv[2]); /* assign the address */
    address.sin_port = htons(atoi(argv[2]));            /* translate int2port num */

    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (connect(sock,(struct sockaddr *)&amp;address,sizeof(address)) == 0) {
        printf(""%i is open\n"", port);
    }  
    close(sock);
    return 0;
}
</code></pre>
","<p>This article might help: <a href=""http://developerweb.net/viewtopic.php?id=3196"" rel=""noreferrer"">http://developerweb.net/viewtopic.php?id=3196</a> . Looks like you put the socket into non-blocking mode until you've connected, and then put it back into blocking mode once the connection's established.</p>
","2597669"
"Can I get Unix's pthread.h to compile in Windows?","91762","","<p>If I try to compile a program with</p>

<pre><code>#include &lt;pthread.h&gt;
</code></pre>

<p>in it, I get the error:</p>

<pre><code>pthread.h: No such file or directory
</code></pre>

<p>Is it possible to get this to compile in a Windows environment?</p>

<p>I am using Vista with the latest MinGW.</p>

<p>I do not want to use the Microsoft Windows Services for UNIX Version 3.5 as I will have to move this to a Unix environment.</p>
","<p><code>pthread.h</code> is a header for the Unix/Linux (POSIX) API for threads. A POSIX layer such as Cygwin would probably compile an app with <code>#include &lt;pthreads.h&gt;</code>.</p>

<p>The native Windows threading API is exposed via <code>#include &lt;windows.h&gt;</code> and it works slightly differently to Linux's threading.</p>

<p>Still, there's a replacement ""glue"" library maintained at <a href=""http://sourceware.org/pthreads-win32/"" rel=""noreferrer"">http://sourceware.org/pthreads-win32/</a> ; note that it has some slight incompatibilities with MinGW/VS (e.g. see <a href=""https://stackoverflow.com/questions/33557506/timespec-redefinition-error/37072163#37072163"">here</a>).</p>
","2150957"
"How exactly does __attribute__((constructor)) work?","91610","","<p>It seems pretty clear that it is supposed to set things up.</p>

<ol>
<li>When exactly does it run?</li>
<li>Why are there two parentheses?</li>
<li>Is <code>__attribute__</code> a function? A macro? Syntax?</li>
<li>Does this work in C? C++?</li>
<li>Does the function it works with need to be static?</li>
<li>When does <code>__attribute__((destructor))</code> run?</li>
</ol>

<p><a href=""https://stackoverflow.com/questions/2046426/initialising-a-static-variable-in-objective-c-category/2046997#2046997"">Example in Objective C</a>:</p>

<pre><code>__attribute__((constructor))
static void initialize_navigationBarImages() {
  navigationBarImages = [[NSMutableDictionary alloc] init];
}

__attribute__((destructor))
static void destroy_navigationBarImages() {
  [navigationBarImages release];
}
</code></pre>
","<ol>
<li>It's run when a shared library is loaded, typically during program startup.</li>
<li>That's how all GCC attributes are; presumably to distinguish them from function calls.</li>
<li>GCC-specific syntax.</li>
<li>Yes, this also works in C an C++.</li>
<li>No, the function does not need to be static.</li>
<li>The destructor is run when the shared library is unloaded, typically at program exit.</li>
</ol>

<p>So, the way the constructors and destructors work is that the shared object file contains special sections (.ctors and .dtors on ELF) which contain references to the functions marked with the constructor and destructor attributes, respectively. When the library is loaded/unloaded the dynamic loader program (ld.so or somesuch) checks whether such sections exist, and if so, calls the functions referenced therein.</p>

<p>Come to think of it, there is probably some similar magic in the normal static linker, so that the same code is run on startup/shutdown regardless if the user chooses static or dynamic linking.</p>
","2053078"
"Converting float to char*","91539","","<p>How can I convert a <code>float</code> value to <code>char*</code> in <code>C</code> language?</p>
","<pre><code>char buffer[64];
int ret = snprintf(buffer, sizeof buffer, ""%f"", myFloat);

if (ret &lt; 0) {
    return EXIT_FAILURE;
}
if (ret &gt; sizeof buffer) {
    /* Result was truncated - resize the buffer and retry.
}
</code></pre>

<p>That will store the string representation of <code>myFloat</code> in <code>myCharPointer</code>. Make sure that the string is large enough to hold it, though.</p>

<p><code>snprintf</code> is a better option than <code>sprintf</code> as it guarantees it will never write past the size of the buffer you supply in argument 2.</p>
","2988809"
"Compile a DLL in C/C++, then call it from another program","91383","","<p>I want to make a simple, simple DLL which exports one or two functions, then try to call it from another program... Everywhere I've looked so far, is for complicated matters, different ways of linking things together, weird problems that I haven't even <i>begun</i> to realize exist yet... I just want to get started, by doing something like so:</p>

<p>Make a DLL which exports some functions, like,</p>

<pre><code>int add2(int num){
   return num + 2;
}

int mult(int num1, int num2){
   int product;
   product = num1 * num2;
   return product;
}
</code></pre>

<p>I'm compiling with MinGW, I'd like to do this in C, but if there's any real differences doing it in C++, I'd like to know those also. I want to know how to load that DLL into another C (and C++) program, and then call those functions from it.
My goal here, after playing around with DLLs for a bit, is to make a VB front-end for C(++) code, by loading DLLs into visual basic (I have visual studio 6, I just want to make some forms and events for the objects on those forms, which call the DLL).</p>

<p>I need to know how to call gcc (/g++) to make it create a DLL, but also how to write (/generate) an exports file... and what I can/cannot do in a DLL (like, can I take arguments by pointer/reference from the VB front-end? Can the DLL call a theoretical function in the front-end? Or have a function take a ""function pointer"" (I don't even know if that's possible) from VB and call it?) I'm fairly certain I can't pass a variant to the DLL...but that's all I know really.</p>

<h2>update again</h2>

<p>Okay, I figured out how to compile it with gcc, to make the dll I ran</p>

<pre><code>gcc -c -DBUILD_DLL dll.c
gcc -shared -o mydll.dll dll.o -Wl,--out-implib,libmessage.a
</code></pre>

<p>and then I had another program load it and test the functions, and it worked great,
thanks so much for the advice,
but I tried loading it with VB6, like this</p>

<pre><code>Public Declare Function add2 Lib ""C:\c\dll\mydll.dll"" (num As Integer) As Integer
</code></pre>

<p>then I just called add2(text1.text) from a form, but it gave me a runtime error:</p>

<p>""Can't find DLL entry point add2 in C:\c\dll\mydll.dll""</p>

<p>this is the code I compiled for the DLL:</p>

<pre><code>#ifdef BUILD_DLL
#define EXPORT __declspec(dllexport)
#else
#define EXPORT __declspec(dllimport)
#endif

EXPORT int __stdcall add2(int num){
  return num + 2;
}

EXPORT int __stdcall mul(int num1, int num2){
  return num1 * num2;
}
</code></pre>

<p>calling it from the C program like this worked, though:</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;windows.h&gt;

int main(){

  HANDLE ldll;
  int (*add2)(int);
  int (*mul)(int,int);

  ldll = LoadLibrary(""mydll.dll"");
  if(ldll&gt;(void*)HINSTANCE_ERROR){
    add2 = GetProcAddress(ldll, ""add2"");
    mul = GetProcAddress(ldll, ""mul"");
    printf(""add2(3): %d\nmul(4,5): %d"", add2(3), mul(4,5));
  } else {
    printf(""ERROR."");
  }

}
</code></pre>

<p>any ideas?</p>

<h2>solved it</h2>

<p>To solve the previous problem, I just had to compile it like so:</p>

<pre><code>gcc -c -DBUILD_DLL dll.c
gcc -shared -o mydll.dll dll.o -Wl,--add-stdcall-alias
</code></pre>

<p>and use this API call in VB6</p>

<pre><code>Public Declare Function add2 Lib ""C:\c\dll\mydll"" _
    (ByVal num As Integer) As Integer
</code></pre>

<p>I learned not to forget to specify ByVal or ByRef explicitly--I was just getting back the address of the argument I passed, it looked like, -3048.</p>
","<p>Regarding building a DLL using MinGW, here are some very brief instructions.</p>

<p>First, you need to mark your functions for export, so they can be used by callers of the DLL. To do this, modify them so they look like (for example)</p>

<pre><code>__declspec( dllexport ) int add2(int num){
   return num + 2;
}
</code></pre>

<p>then, assuming your functions are in a file called funcs.c, you can compile them:</p>

<pre><code>gcc -shared -o mylib.dll funcs.c
</code></pre>

<p>The -shared flag tells gcc to create a DLL.</p>

<p>To check if the DLL has actually exported the functions, get hold of the free <a href=""http://www.dependencywalker.com/"" rel=""noreferrer"">Dependency Walker</a> tool and use it to examine the DLL.</p>

<p>For a free IDE which will automate all the flags etc. needed to build DLLs, take a look at the excellent <a href=""http://www.codeblocks.org/"" rel=""noreferrer"">Code::Blocks</a>, which works very well with MinGW.</p>

<p><strong>Edit:</strong> For more details on this subject, see the article <a href=""http://www.mingw.org/wiki/Visual_Basic_DLL"" rel=""noreferrer"">Creating a MinGW DLL for Use with Visual Basic</a> on the MinGW Wiki.</p>
","847525"
"Where do I find the current C or C++ standard documents?","91318","","<p>For many questions the answer seems to be found in ""the standard"". However, where do we find that? Preferably online.</p>

<p>Googling can sometimes feel futile, again especially for the C standards, since they are drowned in the flood of discussions on programming forums.</p>

<p>To get this started, since these are the ones I am searching for right now, where are there good online resources for:</p>

<ul>
<li>C89</li>
<li>C99</li>
<li>C11</li>
<li>C++98</li>
<li>C++03</li>
<li>C++11</li>
<li>C++14</li>
</ul>
","<h3>PDF versions of the standard</h3>

<p>As of 1st September 2014, the best locations by price for C and C++ standards documents in PDF are:</p>

<ul>
<li>C++14 &ndash; ISO/IEC 14882:2014: <a href=""http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2fISO%2fIEC+14882%3a2014+%282016%29"" rel=""noreferrer""><s>$265</s> $133 from ansi.org</a></li>
<li>C++11 &ndash; ISO/IEC 14882:2011: <a href=""http://www.techstreet.com/products/1852925"" rel=""noreferrer""><s>$60 from ansi.org</s> $60 from Techstreet</a></li>
<li>C++03 &ndash; ISO 14882:2003: <a href=""https://infostore.saiglobal.com/store/details.aspx?ProductID=712174"" rel=""noreferrer""><s>$30 from ansi.org</s> $48 from SAI Global</a></li>
<li><p>C++98 &ndash; ISO/IEC 14882:1998: <a href=""https://shop.standards.govt.nz/catalog/14882%3A1998%28ISO|IEC%29/view"" rel=""noreferrer"">$90 NZD (about $60 US) from Standards New Zealand</a></p></li>
<li><p>C11 &ndash; ISO/IEC 9899:2011: <a href=""http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS%2FISO%2FIEC+9899-2012"" rel=""noreferrer""><s>$30</s> $60 from ansi.org</a> / <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf"" rel=""noreferrer"">WG14 draft version N1570</a></p></li>
<li>C99 &ndash; ISO 9899:1999: <a href=""http://webstore.ansi.org/RecordDetail.aspx?sku=INCITS/ISO/IEC%209899-1999%20%28R2005%29"" rel=""noreferrer""><s>$30</s> $60 from ansi.org</a> / <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf"" rel=""noreferrer"">WG14 draft version N1256</a></li>
<li>C90 &ndash; AS 3955-1991: <a href=""http://www.techstreet.com/products/1178768"" rel=""noreferrer""><s>$141 from ansi.org</s> $175 from Techstreet</a> (the Australian version of C90, identical to ISO 9899:1990)</li>
<li>C90 &ndash; 9899:1990 <a href=""https://infostore.saiglobal.com/store/Details.aspx?ProductID=434093"" rel=""noreferrer"">Hardcopy available from SAI Global ($115 + shipping)</a></li>
</ul>

<p>You cannot usually get old revisions of a standard (any standard) directly from the standards bodies shortly after a new edition of the standard is released.  Thus, standards for C89, C90, C99, C++98, C++03 will be hard to find for purchase from a standards body.  If you need an old revision of a standard, check <a href=""http://www.techstreet.com/"" rel=""noreferrer"">Techstreet</a> as one possible source.  For example, it can still provide the Canadian version CAN/CSA-ISO/IEC 9899:1990 standard in PDF, for a fee.</p>

<h3>Print versions of the standard</h3>

<p>Print copies of the standards are available from national standards bodies and <a href=""http://www.iso.ch/"" rel=""noreferrer"">ISO</a> but are very expensive.</p>

<p>If you want a hardcopy of the C90 standard for much less money than above, you may be able to find a cheap used copy of <a href=""http://jargonwiki.com/wiki/Bullschildt"" rel=""noreferrer"">Herb Schildt</a>'s book <a href=""http://www.davros.org/c/schildt.html"" rel=""noreferrer""><em>The Annotated ANSI Standard</em></a> at <a href=""http://rads.stackoverflow.com/amzn/click/0078819520"" rel=""noreferrer"">Amazon</a>, which contains the actual text of the standard (useful) and commentary on the standard (less useful).</p>

<p>The C99 and C++03 standards are available in book form from Wiley and the BSI (British Standards Institute):</p>

<ul>
<li><a href=""http://rads.stackoverflow.com/amzn/click/0470846747"" rel=""noreferrer"">C++03 Standard</a> on Amazon</li>
<li><a href=""http://rads.stackoverflow.com/amzn/click/0470845732"" rel=""noreferrer"">C99 Standard</a> on Amazon</li>
</ul>

<h3>Standards committee draft versions</h3>

<p>The working draft for future standards is often available from the committee websites:</p>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/"" rel=""noreferrer"">C++ committee website</a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg14/"" rel=""noreferrer"">C committee website</a></li>
</ul>

<p>Note that these documents are not the same as the standard, though the versions just prior to the meetings that decide on a standard are usually very close to what is in the final standard.  The FCD (Final Committee Draft) versions are password protected; you need to be on the standards committee to get them.</p>

<p>However, in my opinion, even though the draft versions might be very close to the final ratified versions of the standards, you should really get a copy of the actual documents — especially if you're planning on quoting them as references.  Of course, starving students should go ahead and use the drafts if strapped for cash.</p>

<hr>

<p>It appears that, if you are willing and able to wait a few months after ratification of a standard, to search for ""INCITS/ISO/IEC"" instead of ""ISO/IEC"" when looking for a standard is the key. This way I was able to find the C++11 standard at reasonable price and now the C11 standard. So, as an example you search for ""INCITS/ISO/IEC 9899:2011"" instead of ""ISO/IEC 9899:2011"" on <a href=""http://webstore.ansi.org"" rel=""noreferrer"">webstore.ansi.org</a> and you will find the reasonably priced PDF version.</p>
","83763"
"What does void* mean and how to use it?","91234","","<p>Today when I was reading others' code, I saw something like <code>void *func(void* i);</code>, what does this <code>void*</code> mean here for the function name and for the variable type, respectively? </p>

<p>In addition, when do we need to use this kind of pointer and how to use it? </p>
","<p>A pointer to <code>void</code> is a ""generic"" pointer type.  A <code>void *</code> can be converted to any other pointer type without an explicit cast.  You cannot dereference a <code>void *</code> or do pointer arithmetic with it; you must convert it to a pointer to an complete data type first.</p>

<p>It gets used in places where you need to be able to work with different pointer types in the same code.  One commonly cited example is the library function <code>qsort</code>:</p>

<pre><code>void qsort(void *base, size_t nmemb, size_t size, 
           int (*compar)(const void *, const void *));
</code></pre>

<p><code>base</code> is the address of an array, <code>nmemb</code> is the number of elements in the array, <code>size</code> is the size of each element, and <code>compar</code> is a pointer to a function that compares two elements of the array.  It gets called like so:</p>

<pre><code>int iArr[10];
double dArr[30];
long lArr[50];
...
qsort(iArr, sizeof iArr/sizeof iArr[0], sizeof iArr[0], compareInt);
qsort(dArr, sizeof dArr/sizeof dArr[0], sizeof dArr[0], compareDouble);
qsort(lArr, sizeof lArr/sizeof lArr[0], sizeof lArr[0], compareLong);
</code></pre>

<p>The array expressions <code>iArr</code>, <code>dArr</code>, and <code>lArr</code> are implicitly converted from array types to pointer types in the function call, and each is implicitly converted from ""pointer to <code>int</code>/<code>double</code>/<code>long</code>"" to ""pointer to <code>void</code>"".</p>

<p>The comparison functions would look something like:</p>

<pre><code>int compareInt(const void *lhs, const void *rhs)
{
  const int *x = lhs;  // convert void * to int * by assignment
  const int *y = rhs;

  if (*x &gt; *y) return 1;
  if (*x == *y) return 0;
  return -1;
}
</code></pre>

<p>By accepting <code>void *</code>, <code>qsort</code> can work with arrays of any type.  </p>

<p>The disadvantage of using <code>void *</code> is that you throw type safety out the window and into oncoming traffic.  There's nothing to protect you from using the wrong comparison routine:</p>

<pre><code>qsort(dArr, sizeof dArr/sizeof dArr[0], sizeof dArr[0], compareInt);
</code></pre>

<p><code>compareInt</code> is expecting its arguments to be pointing to <code>int</code>s, but is actually working with <code>double</code>s.  There's no way to catch this problem at compile time; you'll just wind up with a mis-sorted array.  </p>
","11629682"
"Iterate through a C array","91233","","<p>I have an array of structs that I created somewhere in my program.</p>

<p>Later, I want to iterate through that, but I don't have the size of the array.</p>

<p>How can I iterate through the elements? Or do I need to store the size somewhere?</p>
","<p>You can store the size somewhere, or you can have a struct with a special value set that you use as a sentinel, the same way that '\0' indicates the end of a string.</p>
","1597834"
"Best timing method in C?","91158","","<p>What is the best way to time a code section with high resolution and portability?</p>

<pre><code>/* Time from here */
ProcessIntenseFunction();
/* to here. */

printf(""Time taken %d seconds %d milliseconds"", sec, msec);
</code></pre>

<p>Is there a standard library that would have a cross-platform solution?</p>
","<p>I think this should work:</p>

<pre><code>#include &lt;time.h&gt;

clock_t start = clock(), diff;
ProcessIntenseFunction();
diff = clock() - start;

int msec = diff * 1000 / CLOCKS_PER_SEC;
printf(""Time taken %d seconds %d milliseconds"", msec/1000, msec%1000);
</code></pre>
","459704"
"What is the best free memory leak detector for a C/C++ program and its plug-in DLLs?","91146","","<p>I have a .exe and many plug-in .dll modules that the .exe loads. (I have source for both.) A cross-platform (with source) solution would be ideal, but the platform can be narrowed to WinXP and Visual Studio (7.1/2003 in my case).</p>

<p>The built-in VS leak detector only gives the line where new/malloc was called from, but I have a wrapper for allocations, so a full symbolic stack trace would be best.</p>

<p>The detector would also be able to detect for a leak in both the .exe and its accompanying plug-in .dll modules.</p>
","<p>I personally use <a href=""http://vld.codeplex.com"" rel=""noreferrer"">Visual Leak Detector</a>, though it can cause large delays when large blocks are leaked (it displays the contents of the entire leaked block).</p>
","25831"
"How to check syslog in bash?","91023","","<p>In c we log this way:</p>

<pre><code>syslog( LOG_INFO, ""proxying %s"", url );
</code></pre>

<p>In linux how can we check the log?</p>
","<p>How about <code>less /var/log/syslog</code>?</p>
","6074429"
"Difference between angle bracket < > and double quotes "" "" while including header files in C++?","90993","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/21593/what-is-the-difference-between-include-filename-and-include-filename"">What is the difference between #include &lt;filename&gt; and #include “filename”?</a>  </p>
</blockquote>



<p>What is the difference between angle bracket <code>&lt; &gt;</code> and double quotes <code>"" ""</code> while including header files in C++?</p>

<p>I mean which files are supposed to be included using eg: <code>#include &lt;QPushButton&gt;</code> and which files are to be included using eg: <code>#include ""MyFile.h""</code>???</p>
","<p>It's compiler dependent.   That said, in general using <code>""</code> prioritizes headers in the current working directory over system headers.  <code>&lt;&gt;</code> usually is used for system headers.  From to the specification (Section 6.10.2):</p>

<blockquote>
  <p>A preprocessing directive of the form</p>

<pre><code>  # include &lt;h-char-sequence&gt; new-line
</code></pre>
  
  <p>searches a sequence of implementation-defined places for a header identified uniquely by the specified sequence between the <code>&lt;</code> and <code>&gt;</code> delimiters, and causes the replacement of that directive by the entire contents of the header. How the places are specified or the header identified is implementation-defined.</p>
  
  <p>A preprocessing directive of the form</p>

<pre><code>  # include ""q-char-sequence"" new-line
</code></pre>
  
  <p>causes the replacement of that directive by the entire contents of the source file identified by the specified sequence between the <code>""</code> delimiters. The named source file is searched for in an implementation-defined manner. If this search is not supported, or if the search fails, the directive is reprocessed as if it read</p>

<pre><code>  # include &lt;h-char-sequence&gt; new-line
</code></pre>
  
  <p>with the identical contained sequence (including <code>&gt;</code> characters, if any) from the original
  directive.    </p>
</blockquote>

<p>So on <em>most</em> compilers, using the <code>""""</code> first checks your local directory, and if it doesn't find a match then moves on to check the system paths.  Using <code>&lt;&gt;</code> starts the search with system headers.</p>
","3162067"
"""Press Any Key to Continue"" function in C","90927","","<p>How do I create a void function that will work as ""Press Any Key to Continue"" in C Programming?</p>

<p>What I want to do is:</p>

<pre><code>printf(""Let the Battle Begin!\n"");
printf(""Press Any Key to Continue\n"");
//The Void Function Here
//Then I will call the function that will start the game
</code></pre>
","<p>Use C standard library function <code>getchar()</code>   ,getch() is boreland function not standard one.  </p>

<p>only used in windows TURBO C.  </p>

<pre><code>printf(""Let the Battle Begin!\n"");
printf(""Press Any Key to Continue\n"");  
getchar();    
</code></pre>

<p>you should press return key Here. for this the printf statement should be press ENTER to continue.      </p>

<p>if you press a , then again you need to press ENTER.<br>
if you press ENTER it will continue normally.    </p>

<p>for this reason, it should be   </p>

<pre><code>printf(""Let the Battle Begin!\n"");
printf(""Press ENTER key to Continue\n"");  
getchar();    
</code></pre>

<hr>

<p>If you are using windows then you can use <code>getch()</code></p>

<pre><code>printf(""Let the Battle Begin!\n"");
printf(""Press Any Key to Continue\n"");
getch();   
//if you press any character it will continue ,  
//but this is not a standard c function.
</code></pre>

<hr>

<pre><code>char ch;
printf(""Let the Battle Begin!\n"");
printf(""Press ENTER key to Continue\n"");    
//here also if you press any other key will wait till pressing ENTER
scanf(""%c"",&amp;ch); //works as getchar() but here extra variable is required.      
</code></pre>
","18801616"
"How to scanf only integer and repeat reading if the user enter non numeric characters?","90833","","<p>Here is a little young tyro's problem with C code trying simply to prevent the user from typing a character or an integer less than 0 or more than 23.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void)
{
    const char *input;
    char *iPtr;
    int count = 0;
    int rows;

    printf(""Enter an integer: "");
    scanf(""%s"", input);
    rows = strtol(input, &amp;iPtr, 0);
    while( *iPtr != '\0') // Check if any character has been inserted
    {
        printf(""Enter an integer between 1 and 23: "");
        scanf(""%s"", input);
    }
    while(0 &lt; rows &amp;&amp; rows &lt; 24) // check if the user input is within the boundaries
    {
        printf(""Select an integer from 1 to 23: "");
        scanf(""%s"", input);
    }  
    while (count != rows)  
    {  
        /* Do some stuff */  
    }  
    return 0;  
}
</code></pre>

<p>I made it halfway through and a small push up will be appreciated. </p>
","<p>Use <code>scanf(""%d"",&amp;rows)</code> instead of <code>scanf(""%s"",input)</code></p>

<p>This allow you to get direcly the integer value from stdin without need to convert to int.</p>

<p>If the user enter a string containing a non numeric characters then you have to clean your stdin before the next <code>scanf(""%d"",&amp;rows)</code>.</p>

<p>your code could look like this:</p>

<pre><code>#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt; 

int clean_stdin()
{
    while (getchar()!='\n');
    return 1;
}

int main(void)  
{ 
    int rows =0;  
    char c;
    do
    {  
        printf(""\nEnter an integer from 1 to 23: "");

    } while (((scanf(""%d%c"", &amp;rows, &amp;c)!=2 || c!='\n') &amp;&amp; clean_stdin()) || rows&lt;1 || rows&gt;23);

    return 0;  
}
</code></pre>

<p><strong>Explanation</strong></p>

<p>1)</p>

<pre><code>scanf(""%d%c"", &amp;rows, &amp;c)
</code></pre>

<p>This means expecting from the user input an integer and close to it a non numeric character.</p>

<p><strong><em>Example1:</em></strong> If the user enter <code>aaddk</code> and then <code>ENTER</code>, the scanf will return 0. Nothing capted</p>

<p><strong><em>Example2:</em></strong> If the user enter <code>45</code> and then <code>ENTER</code>, the scanf will return 2 (2 elements are capted). Here <code>%d</code> is capting <code>45</code> and <code>%c</code> is capting <code>\n</code></p>

<p><strong><em>Example3:</em></strong> If the user enter <code>45aaadd</code> and then <code>ENTER</code>, the scanf will return 2 (2 elements are capted). Here <code>%d</code> is capting <code>45</code> and <code>%c</code> is capting <code>a</code></p>

<p>2)</p>

<pre><code>(scanf(""%d%c"", &amp;rows, &amp;c)!=2 || c!='\n')
</code></pre>

<p><strong><em>In the example1:</em></strong> this condition is <code>TRUE</code> because scanf return <code>0</code> (<code>!=2</code>)</p>

<p><strong><em>In the example2:</em></strong> this condition is <code>FALSE</code> because scanf return <code>2</code> and <code>c == '\n'</code></p>

<p><strong><em>In the example3:</em></strong> this condition is <code>TRUE</code> because scanf return <code>2</code> and <code>c == 'a' (!='\n')</code></p>

<p>3)</p>

<pre><code>((scanf(""%d%c"", &amp;rows, &amp;c)!=2 || c!='\n') &amp;&amp; clean_stdin())
</code></pre>

<p><code>clean_stdin()</code> is always <code>TRUE</code> because the function return always <code>1</code></p>

<p><strong><em>In the example1:</em></strong>  The <code>(scanf(""%d%c"", &amp;rows, &amp;c)!=2 || c!='\n')</code> is <code>TRUE</code> so the condition after the <code>&amp;&amp;</code> should be checked so the <code>clean_stdin()</code> will be executed and the whole condition is <code>TRUE</code></p>

<p><strong><em>In the example2:</em></strong> The <code>(scanf(""%d%c"", &amp;rows, &amp;c)!=2 || c!='\n')</code> is <code>FALSE</code> so the condition after the <code>&amp;&amp;</code> will not checked (because what ever its result is the whole condition will be <code>FALSE</code> ) so the <code>clean_stdin()</code> will not be executed and the whole condition is <code>FALSE</code></p>

<p><strong><em>In the example3:</em></strong>  The <code>(scanf(""%d%c"", &amp;rows, &amp;c)!=2 || c!='\n')</code> is <code>TRUE</code> so the condition after the <code>&amp;&amp;</code> should be checked so the <code>clean_stdin()</code> will be executed and the whole condition is <code>TRUE</code></p>

<p>So you can remark that <code>clean_stdin()</code> will be executed only if the user enter a string containing non numeric character.</p>

<p>And this condition <code>((scanf(""%d%c"", &amp;rows, &amp;c)!=2 || c!='\n') &amp;&amp; clean_stdin())</code> will return <code>FALSE</code> only if the user enter an <code>integer</code> and nothing else</p>

<p>And if the condition <code>((scanf(""%d%c"", &amp;rows, &amp;c)!=2 || c!='\n') &amp;&amp; clean_stdin())</code> is <code>FALSE</code> and the <code>integer</code> is between and <code>1</code> and <code>23</code> then the <code>while</code> loop will break else the <code>while</code> loop will continue</p>
","14099507"
"Is there a typical state machine implementation pattern?","90759","","<p>We need to implement a simple state machine in <strong>C</strong>.<br>
Is a standard switch statement the best way to go?<br>
We have a current state (state) and a trigger for the transition.</p>

<pre><code>
switch(state)
{
  case STATE_1:
     state = DoState1(transition);
     break;
  case STATE_2:
     state = DoState2(transition);
     break;
}
...
DoState2(int transition)
{
   // Do State Work
   ...
   if(transition == FROM_STATE_2) {
     // New state when doing STATE 2 -> STATE 2
   }
   if(transition == FROM_STATE_1) {
    // New State when moving STATE 1 -> STATE 2
   }
   return new_state;
}
</code></pre>

<p>Is there a better way <strong>for simple state machines</strong></p>

<p>EDIT:
  For C++, I think the Boost <a href=""http://www.boost.org/doc/libs/1_36_0/libs/statechart/doc/index.html"" rel=""noreferrer"">Statechart</a> library might be the way to go.  However, it does <strong>not</strong> help with C.  Lets concentrate on the C use case.</p>
","<p>I prefer to use a table driven approach for most state machines:</p>

<pre><code>typedef enum { STATE_INITIAL, STATE_FOO, STATE_BAR, NUM_STATES } state_t;
typedef struct instance_data instance_data_t;
typedef state_t state_func_t( instance_data_t *data );

state_t do_state_initial( instance_data_t *data );
state_t do_state_foo( instance_data_t *data );
state_t do_state_bar( instance_data_t *data );

state_func_t* const state_table[ NUM_STATES ] = {
    do_state_initial, do_state_foo, do_state_bar
};

state_t run_state( state_t cur_state, instance_data_t *data ) {
    return state_table[ cur_state ]( data );
};

int main( void ) {
    state_t cur_state = STATE_INITIAL;
    instance_data_t data;

    while ( 1 ) {
        cur_state = run_state( cur_state, &amp;data );

        // do other program logic, run other state machines, etc
    }
}
</code></pre>

<p>This can of course be extended to support multiple state machines, etc. Transition actions can be accommodated as well:</p>

<pre><code>typedef void transition_func_t( instance_data_t *data );

void do_initial_to_foo( instance_data_t *data );
void do_foo_to_bar( instance_data_t *data );
void do_bar_to_initial( instance_data_t *data );
void do_bar_to_foo( instance_data_t *data );
void do_bar_to_bar( instance_data_t *data );

transition_func_t * const transition_table[ NUM_STATES ][ NUM_STATES ] = {
    { NULL,              do_initial_to_foo, NULL },
    { NULL,              NULL,              do_foo_to_bar },
    { do_bar_to_initial, do_bar_to_foo,     do_bar_to_bar }
};

state_t run_state( state_t cur_state, instance_data_t *data ) {
    state_t new_state = state_table[ cur_state ]( data );
    transition_func_t *transition =
               transition_table[ cur_state ][ new_state ];

    if ( transition ) {
        transition( data );
    }

    return new_state;
};
</code></pre>

<p>The table driven approach is easier to maintain and extend and simpler to map to state diagrams.</p>
","133361"
"What does %d mean?","90744","","<p>I'm reading a C program, and I have a question that I think may be related to type casting.  Basically, the program will follow.  I've commented in a few questions that pasted over from my clipboard.  Don't worry about those so much as the question that immediately follows the code block.</p>

<pre><code>/* I only need the out in in/out, right?  Or do I need in and out? */
#include&lt;stdio.h&gt; 

/* can someone explain the second argument?  A char is only supposed to be one
character so howcome it has square brackets after it, which indicate an array 
to me?  Also, what's with the asterisk? */
int main(int argc,char *argv[])
{
  int i;
/* Here %d is used, which I'm thinking might mean double */
  printf(""Amount: %d\n"",argc);
  if (argc &gt; 0)
  {
    printf(""Parameters:\n"");
    for (i = 0;i &lt; argc;i++)
/* Here %s is used, which I'm thinking might mean string */
      printf(""%s\n"",argv[i]);
  }
  return 0;
}
</code></pre>

<p>I'm not sure what the group of %-identified items is called, so I'm not sure where to find a reference of their meanings.</p>
","<p>question 1)</p>

<p>the header file <code>&lt;stdio.h&gt;</code> is included in order to have reference to the input/output function from C library. The <code>&lt;stdio.h&gt;</code> contains only function references and not the definition of the functions. The <code>&lt;stdio.h&gt;</code> contains references to functions like:</p>

<ul>
<li><p><code>printf</code> (out) output to <code>stdout</code> (default: screen)</p></li>
<li><p><code>scanf</code> (in) reading from <code>stdin</code> (default: keyboard)</p></li>
</ul>

<p>question 2)</p>

<p><code>char *argv[]</code> is an array of pointer. Each pointer element is pointing to a string. Each string is an argument from the command line.</p>

<p>Example: If your program name after compilation is ""myprogram"" and you calling your program as following:</p>

<pre><code>$myprogram -t test1 test2
</code></pre>

<p>So the <code>argv</code> is an array containing 4 pointers to the following string</p>

<p><code>argv[0]</code> is a pointer to the string ""myprogram""</p>

<p><code>argv[1]</code> is a pointer to the string ""-t""</p>

<p><code>argv[2]</code> is a pointer to the string ""test1""</p>

<p><code>argv[3]</code> is a pointer to the string ""test2""</p>

<p>question 3)</p>

<p><code>%d</code> means integer and not double. For double you can use <code>%lf</code> or <code>%g</code></p>

<p>question 4)</p>

<p><code>%s</code> means that you are printing string</p>

<p>example related to <code>argv</code>:</p>

<pre><code>printf(""argv[0] = %s\n"", argv[0]);
printf(""argv[1] = %s\n"", argv[1]);
printf(""argv[2] = %s\n"", argv[2]);
printf(""argv[3] = %s\n"", argv[3]);
</code></pre>

<p>based on question 2 the above prints give the following output:</p>

<pre><code>argv[0] = myprogram
argv[1] = -t
argv[2] = test1
argv[3] = test2
</code></pre>
","13705113"
"Returning from a void function","90367","","<p>Which is more correct way to return from function:</p>

<pre><code>void function() {
  // blah some code
}
</code></pre>

<p>OR</p>

<pre><code>void function() {
  // blah some code
  return;
}
</code></pre>

<hr>

<p>Rationale for second way:</p>

<ol>
<li>It expresses developer intentions more clearly.</li>
<li>It helps detecting function end at pre-compile time:</li>
</ol>

<p>Suppose you have such scenario- you have bunch of functions and you must inject some code at the end of those functions. But for some reasons you don't want / or can't modify such huge amount of functions. What can you do about that ? <code>Return</code> &amp; <code>macro</code> comes into play, for example:</p>

<pre><code>#include&lt;stdio.h&gt;

#define MAX_LINES 1000
#define XCAT(a,b) a##b
#define CAT(a,b) XCAT(a,b)
#define return returns[__LINE__] = 1;\
        if (returns[__LINE__])\
           {printf(""End of function on %d line.\n"",__LINE__);}\
        int CAT(tmp,__LINE__); \
        if ((CAT(tmp,__LINE__)=returns[__LINE__], returns[__LINE__] = 0, CAT(tmp,__LINE__)))\
              return

static int returns[MAX_LINES];


void function1(void) {
    return;
}

void function2(void) {
    return;
}

int main()
{
    function1();
    function2();

    return 0;
}
</code></pre>
","<p>Neither is more correct, so take your pick.  The empty <code>return;</code> statement is provided to allow a <em>return</em> in a <code>void</code> function from somewhere other than the end. No other reason I believe.</p>
","9003359"
"Generating random numbers in C","90288","","<p>While searching for Tutorials on generating random numbers in C I found <a href=""https://stackoverflow.com/questions/160890/generating-random-numbers-in-objective-c"">this topic</a></p>

<p>When I try to use the <code>rand()</code> function without parameters, I always get  0. When I try to use the <code>rand()</code> function with parameters, I always get the value 41. And whenever I try to use <code>arc4random()</code> and <code>random()</code> functions, I get a LNK2019 error.</p>

<p>Here's what I've done:</p>

<pre><code>#include &lt;stdlib.h&gt;
int main()
{
  int x;
  x = rand(6);
  printf(""%d"", x);
}
</code></pre>

<p>This code always generates 41. Where am I going wrong? I'm running Windows XP SP3 and using VS2010 Command Prompt as compiler.</p>
","<p>You should call srand() before calling rand to initialize the random number generator.</p>

<p>Either call it with a specific seed, and you will always get the same pseudo-random sequence</p>

<pre><code>#include &lt;stdlib.h&gt;

int main ()
{
  srand ( 123 );
  int random_number = rand();
  return 0;
}
</code></pre>

<p>or call it with a changing sources, ie the time function</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

int main ()
{
  srand ( time(NULL) );
  int random_number = rand();
  return 0;
}
</code></pre>

<p><strong>In response to Moon's Comment</strong>
rand() generates a random number with an equal probability between 0 and RAND_MAX (a macro pre-defined in stdlib.h)</p>

<p>You can then map this value to a smaller range, e.g.</p>

<pre><code>int random_value = rand(); //between 0 and RAND_MAX

//you can mod the result
int N = 33;
int rand_capped = random_value % N;  //between 0 and 32
int S = 50;
int rand_range = rand_capped + S; //between 50 and 82

//you can convert it to a float
float unit_random = random_value / (float) RAND_MAX; //between 0 and 1 (floating point)
</code></pre>

<p>This might be sufficient for most uses, but its worth pointing out that in the first case using the mod operator introduces a slight bias if N does not divide evenly into RAND_MAX+1.</p>

<p>Random number generators are interesting and complex, it is widely said that the rand() generator in the C standard library is not a great quality random number generator, read (<a href=""http://en.wikipedia.org/wiki/Random_number_generation"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Random_number_generation</a> for a definition of quality).</p>

<p><a href=""http://en.wikipedia.org/wiki/Mersenne_twister"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Mersenne_twister</a> (source <a href=""http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html"" rel=""noreferrer"">http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html</a> ) is a popular high quality random number generator.</p>

<p>Also, I am not aware of arc4rand() or random() so I cannot comment.</p>
","3067387"
"How do I check OS with a preprocessor directive?","90164","","<p>I need my code to do different things based on the operating system on which it gets compiled. I'm looking for something like this:</p>

<pre><code>#ifdef OSisWindows
// do Windows-specific stuff
#else
// do Unix-specific stuff
#endif
</code></pre>

<p>Is there a way to do this? Is there a better way to do the same thing?</p>
","<p>The <strong><a href=""https://sourceforge.net/p/predef/wiki/OperatingSystems/"" rel=""nofollow noreferrer"">Predefined Macros for OS</a></strong> site has a very complete list of checks. Here are a few of them, with links to where they're found:</p>

<h2><a href=""http://msdn.microsoft.com/en-us/library/b0084kay(VS.80).aspx"" rel=""nofollow noreferrer"">Windows</a></h2>

<p><code>_WIN32</code>&nbsp;&nbsp;&nbsp;Both 32 bit and 64 bit<br/>
<code>_WIN64</code>&nbsp;&nbsp;&nbsp;64 bit only</p>

<h2>Unix (Linux, *BSD, Mac OS X)</h2>

<p>See this <a href=""https://stackoverflow.com/questions/7063303/"">related question</a> on some of the pitfalls of using this check.</p>

<p><code>unix</code><br/>
<code>__unix</code><br/>
<code>__unix__</code></p>

<h2>Mac OS X</h2>

<p><code>__APPLE__</code><br/>
<code>__MACH__</code></p>

<p>Both are defined; checking for either should work.</p>

<h2><a href=""http://www.faqs.org/docs/Linux-HOWTO/GCC-HOWTO.html"" rel=""nofollow noreferrer"">Linux</a></h2>

<p><code>__linux__</code><br>
<code>linux</code>  Obsolete (not POSIX compliant)<br>
<code>__linux</code> Obsolete (not POSIX compliant)</p>

<h2><a href=""http://www.freebsd.org/doc/en/books/porters-handbook/porting-versions.html"" rel=""nofollow noreferrer"">FreeBSD</a></h2>

<p><code>__FreeBSD__</code></p>
","8249232"
"Erase the current printed console line","89979","","<p>How can I erase the current printed console line in C? I am working on a Linux system. For example - </p>

<pre><code>printf(""hello"");
printf(""bye"");
</code></pre>

<p>I want to print bye on the same line in place of hello.</p>
","<p>You can use <a href=""http://www.climagic.org/mirrors/VT100_Escape_Codes.html"" rel=""noreferrer"">VT100 escape codes</a>. Most terminals, including xterm, are VT100 aware. For erasing a line, this is <code>^[[2K</code>. In C this gives:</p>

<pre><code>printf(""%c[2K"", 27);
</code></pre>
","1508589"
"What's the Use of '\r' escape sequence?","89685","","<p>I have C code like this:</p>

<pre><code>#include&lt;stdio.h&gt;
int main()
{
    printf(""Hey this is my first hello world \r"");
    return 0;
}
</code></pre>

<p>I have used the <code>\r</code> escape sequence as an experiment. When I run the code I get the output as:</p>

<pre><code>o world
</code></pre>

<p>Why is that, and what is the use of <code>\r</code> exactly? </p>

<p>If I run the same code in an online compiler I get the output as:</p>

<pre><code>Hey this is my first hello world
</code></pre>

<p>Why did the online compiler produce different output, ignoring the <code>\r</code>?</p>
","<p><code>\r</code> is a <em>carriage return</em> character; it tells your terminal emulator to move the cursor at the start of the line.</p>

<p>The <em>cursor</em> is the position where the next characters will be rendered.</p>

<p>So, printing a <code>\r</code> allows to override the current line of the terminal emulator.</p>

<p><a href=""https://stackoverflow.com/questions/7372918/whats-the-use-of-r-escape-sequence/7372959#7372959"">Tom Zych</a> figured why the output of your program is <code>o wolrd</code> while the <code>\r</code> is at the end of the line and you don't print anything after that:</p>

<p>When your program exits, the shell prints the command prompt. The terminal renders it where you left the cursor. Your program leaves the cursor at the start of the line, so the command prompt partly overrides the line you printed. This explains why you seen your command prompt followed by <code>o world</code>.</p>

<p>The <em>online compiler</em> you mention just prints the raw output to the browser. The browser ignores control characters, so the <code>\r</code> has no effect.</p>

<p>See <a href=""https://en.wikipedia.org/wiki/Carriage_return"" rel=""noreferrer"">https://en.wikipedia.org/wiki/Carriage_return</a></p>

<p>Here is a usage example of <code>\r</code>:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main()
{
        char chars[] = {'-', '\\', '|', '/'};
        unsigned int i;

        for (i = 0; ; ++i) {
                printf(""%c\r"", chars[i % sizeof(chars)]);
                fflush(stdout);
                usleep(200000);
        }

        return 0;
}
</code></pre>

<p>It repeatedly prints the characters <code>-</code> <code>\</code> <code>|</code> <code>/</code> at the same position to give the illusion of a rotating <code>|</code> in the terminal.</p>
","7372938"
"Compilation error: stray ‘\302’ in program etc","89553","","<p>I am having problem compiling the followed exploit code:</p>

<p><a href=""http://downloads.securityfocus.com/vulnerabilities/exploits/59846-1.c"">http://downloads.securityfocus.com/vulnerabilities/exploits/59846-1.c</a></p>

<p>I am using: ""gcc file.c"" and ""gcc -O2 file.c"" but both of them gets the following errors:</p>

<pre><code> sorbolinux-exec.c: In function ‘sc’:
 sorbolinux-exec.c:76: error: stray ‘\302’ in program
 sorbolinux-exec.c:76: error: stray ‘\244’ in program
 sorbolinux-exec.c:76: error: ‘t’ undeclared (first use in this function)
 sorbolinux-exec.c:76: error: (Each undeclared identifier is reported only  once
 sorbolinux-exec.c:76: error: for each function it appears in.)
</code></pre>

<p>I tried compiling them on both Kali linux and Ubuntu 10.04 and get the same result.</p>
","<p>You have an invalid character on that line. This is what I saw:</p>

<p><img src=""https://i.stack.imgur.com/CHZ1Y.png"" alt=""enter image description here""></p>
","19198375"
"Why does modulus division (%) only work with integers?","89493","","<p>I recently ran into <a href=""https://stackoverflow.com/questions/6091837/sin-and-cos-are-slow-is-there-an-alternatve/6091846#6091846"">an issue</a> that could easily be solved using modulus division, but the input was a float:</p>

<blockquote>
  <p>Given a periodic function (e.g. <code>sin</code>) and a computer function that can only compute it within the period range (e.g. [-π, π]), make a function that can handle any input.</p>
</blockquote>

<p>The ""obvious"" solution is something like:</p>

<pre><code>#include &lt;cmath&gt;

float sin(float x){
    return limited_sin((x + M_PI) % (2 *M_PI) - M_PI);
}
</code></pre>

<p>Why doesn't this work? I get this error:</p>

 <pre class=""lang-none prettyprint-override""><code>error: invalid operands of types double and double to binary operator %
</code></pre>

<p>Interestingly, it does work in Python:</p>

 <pre class=""lang-python prettyprint-override""><code>def sin(x):
    return limited_sin((x + math.pi) % (2 * math.pi) - math.pi)
</code></pre>
","<p>Because the normal mathematical notion of ""remainder"" is only applicable to integer division. i.e. division that is required to generate integer quotient.</p>

<p>In order to extend the concept of ""remainder"" to real numbers you have to introduce a new kind of ""hybrid"" operation that would generate <em>integer</em> quotient for <em>real</em> operands. Core C language does not support such operation, but it is provided as a standard library <a href=""http://en.cppreference.com/w/c/numeric/math/fmod""><code>fmod</code></a> function, as well as <a href=""http://en.cppreference.com/w/c/numeric/math/remainder""><code>remainder</code></a> function in C99. (Note that these functions are not the same and have some peculiarities. In particular, they do not follow the rounding rules of integer division.)</p>
","6103040"
"state machines tutorials","89468","","<p>I am just wondering if anyone know of some good tutorials on the Internet for developing state machines. Or ebooks?</p>

<p>I am starting working on state machines and just need something general to get me started.</p>
","<p>State machines are very simple in C if you use function pointers.</p>

<p>Basically you need 2 arrays - one for state function pointers and one for state transition rules. Every state function returns the code, you lookup state transition table by state and return code to find the next state and then just execute it.</p>

<pre><code>int entry_state(void);
int foo_state(void);
int bar_state(void);
int exit_state(void);

/* array and enum below must be in sync! */
int (* state[])(void) = { entry_state, foo_state, bar_state, exit_state};
enum state_codes { entry, foo, bar, end};

enum ret_codes { ok, fail, repeat};
struct transition {
    enum state_codes src_state;
    enum ret_codes   ret_code;
    enum state_codes dst_state;
};
/* transitions from end state aren't needed */
struct transition state_transitions[] = {
    {entry, ok,     foo},
    {entry, fail,   end},
    {foo,   ok,     bar},
    {foo,   fail,   end},
    {foo,   repeat, foo},
    {bar,   ok,     end},
    {bar,   fail,   end},
    {bar,   repeat, foo}};

#define EXIT_STATE end
#define ENTRY_STATE entry

int main(int argc, char *argv[]) {
    enum state_codes cur_state = ENTRY_STATE;
    enum ret_codes rc;
    int (* state_fun)(void);

    for (;;) {
        state_fun = state[cur_state];
        rc = state_fun();
        if (EXIT_STATE == cur_state)
            break;
        cur_state = lookup_transitions(cur_state, rc);
    }

    return EXIT_SUCCESS;
}
</code></pre>

<p>I don't put <code>lookup_transition()</code> function as it is trivial.</p>

<p>That's the way I do state machines for years.</p>
","1371654"
"Determine the line of code that causes a segmentation fault?","89354","","<p>How do we determine where the mistake is in our code that causes a <a href=""https://stackoverflow.com/questions/2346806/what-is-a-segmentation-fault"">segmentation fault</a>?</p>

<p>After writing some code, to determine where I have a segmentation fault, can my compiler (<code>gcc</code>) show me The location of the fault in my program?</p>
","<p>GCC can't do that but GDB sure can. Compile you program using the <code>-g</code> switch, like this:</p>

<pre><code>gcc program.c -g
</code></pre>

<p>Then use gdb:</p>

<pre><code>$ gdb ./a.out
(gdb) run
&lt;segfault happens here&gt;
(gdb) backtrace
&lt;offending code is shown here&gt;
</code></pre>

<p><a href=""http://www.unknownroad.com/rtfm/gdbtut/gdbtoc.html"" rel=""noreferrer"">Here</a> is a nice tutorial to get you started with GDB.</p>
","2876374"
"What is use of c_str function In c++","89259","","<p>I have just started reading C++ and found c++ having rich functions for string manipulation which C does not have. I am reading these function and came across <code>c_str()</code> and from what I understand is <code>c_str</code> convert a string which may be null terminated or may not be to a null terminated string .Is it true?</p>

<p>Can anyone suggest me some example so that i can understand the use of <strong>c_str</strong> function??</p>
","<p><code>c_str</code> returns a <code>const char*</code> that points to a null-terminated string (i.e. a C-style string). It is useful when you want to pass the ""contents""¹ of an <code>std::string</code> to a function that expects to work with a C-style string.</p>

<p>For example, consider this code:</p>

<pre><code>std::string str(""Hello world!"");
int pos1 = str.find_first_of('w');

int pos2 = strchr(str.c_str(), 'w') - str.c_str();

if (pos1 == pos2) {
    printf(""Both ways give the same result.\n"");
}
</code></pre>

<p><strong><a href=""http://www.ideone.com/XW4F0"" rel=""noreferrer"">See it in action</a></strong>.</p>

<p>Notes:</p>

<p>¹ This is not entirely true because an <code>std::string</code> (unlike a C string) can contain the <code>\0</code> character. If it does, the code that receives the return value of <code>c_str()</code> will be fooled into thinking that the string is shorter than it really is, since it will interpret <code>\0</code> as the end of the string.</p>
","7416473"
"How to execute a shell script from C in Linux?","89168","","<p>How can I execute a shell script from C in Linux?</p>
","<p>It depends on what you want to do with the script (or any other program you want to run).</p>

<p>If you just want to run the script <a href=""http://man7.org/linux/man-pages/man3/system.3.html"" rel=""nofollow noreferrer""><code>system</code></a> is the easiest thing to do, but it does some other stuff too, including running a shell and having it run the command (/bin/sh under most *nix).</p>

<p>If you want to either feed the shell script via its standard input or consume its standard output you can use <code>popen</code> (and <code>pclose</code>) to set up a pipe.  This also uses the shell (/bin/sh under most *nix) to run the command.</p>

<p>Both of these are library functions that do a lot under the hood, but if they don't meet your needs (or you just want to experiment and learn) you can also use system calls directly.  This also allows you do avoid having the shell (/bin/sh) run your command for you.</p>

<p>The system calls of interest are <code>fork</code>, <code>execve</code>, and <code>waitpid</code>.  You may want to use one of the library wrappers around <code>execve</code> (type <code>man 3 exec</code> for a list of them).  You may also want to use one of the other wait functions (<code>man 2 wait</code> has them all).  Additionally you may be interested in the system calls <code>clone</code> and <code>vfork</code> which are related to fork.</p>

<p><code>fork</code> duplicates the current program, where the only main difference is that the new process gets 0 returned from the call to fork.  The parent process gets the new process's process id (or an error) returned.</p>

<p><code>execve</code> replaces the current program with a new program (keeping the same process id).</p>

<p><code>waitpid</code> is used by a parent process to wait on a particular child process to finish.</p>

<p>Having the fork and execve steps separate allows programs to do some setup for the new process before it is created (without messing up itself).  These include changing standard input, output, and stderr to be different files than the parent process used, changing the user or group of the process, closing files that the child won't need, changing the session, or changing the environmental variables.</p>

<p>You may also be interested in the <code>pipe</code> and <code>dup2</code> system calls.  <code>pipe</code> creates a pipe (with both an input and an output file descriptor).  <code>dup2</code> duplicates a file descriptor as a specific file descriptor (<code>dup</code> is similar but duplicates a file descriptor to the lowest available file descriptor).</p>
","3736607"
"Removing Spaces from a String in C?","89130","","<p>What is the easiest and most efficient way to remove spaces from a string in C?</p>
","<p>Easiest and most efficient don't usually go together...</p>

<p>Here's a possible solution (untested):</p>

<pre><code>void RemoveSpaces(char* source)
{
  char* i = source;
  char* j = source;
  while(*j != 0)
  {
    *i = *j++;
    if(*i != ' ')
      i++;
  }
  *i = 0;
}
</code></pre>
","1726321"
"How do I pass a command line argument while starting up GDB in Linux?","89108","","<p>I have to debug a program that has errors in it as part of my assignment. However, I must first pass command line arguments in order to solve this problem.</p>

<p>I do:</p>

<pre><code>gdb -tui InsertionSortWithErrors
</code></pre>

<p>which works but after that I don't know how to pass arguments. I used <code>gdb -help</code> and it says something about <code>--args</code> which I also tried and it didn't work.</p>

<p>I want to be able to get the debugger+the gui and pass command line arguments. </p>
","<p>Once <code>gdb</code> starts, you can run the program using ""r <em>args</em>"".  </p>

<p>So if you are running your code by: </p>

<pre><code>$ executablefile arg1 arg2 arg3 
</code></pre>

<p>Debug it on <code>gdb</code> by:</p>

<pre><code>$ gdb executablefile  
(gdb) r arg1 arg2 arg3
</code></pre>
","14495007"
"Is there a function to round a float in C or do I need to write my own?","89099","","<p>Is there a function to round a float in C or do I need to write my own?  </p>

<blockquote>
  <p>float conver = 45.<strong>59</strong>2346543;</p>
</blockquote>

<p>I would like to round the actual value to one decimal place, conver = 45.<strong>6</strong>.</p>
","<p>As Rob mentioned, you probably just want to <em>print</em> the float to 1 decimal place.  In this case, you can do something like the following:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main()
{
  float conver = 45.592346543;
  printf(""conver is %0.1f\n"",conver);
  return 0;
}
</code></pre>

<p>If you want to actually round the stored value, that's a little more complicated.  For one, your one-decimal-place representation will rarely have an exact analog in floating-point.  If you just want to get as close as possible, something like this might do the trick:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

int main()
{
  float conver = 45.592346543;
  printf(""conver is %0.1f\n"",conver);

  conver = conver*10.0f;
  conver = (conver &gt; (floor(conver)+0.5f)) ? ceil(conver) : floor(conver);
  conver = conver/10.0f;

  //If you're using C99 or better, rather than ANSI C/C89/C90, the following will also work.
  //conver = roundf(conver*10.0f)/10.0f;

  printf(""conver is now %f\n"",conver);
  return 0;
}
</code></pre>

<p>I doubt this second example is what you're looking for, but I included it for completeness.  If you do require representing your numbers in this way internally, and not just on output, consider using a <a href=""http://en.wikipedia.org/wiki/Fixed-point_arithmetic"" rel=""noreferrer"">fixed-point representation</a> instead.</p>
","497079"
"How can I print a quotation mark in C?","89033","","<p>In an interview I was asked</p>

<blockquote>
  <p>Print a quotation mark using the <code>printf()</code> function</p>
</blockquote>

<p>I was overwhelmed. Even in their office there was a computer and they told me to try it. I tried like this:</p>

<pre><code>void main()
{
    printf(""Printing quotation mark "" "");
}
</code></pre>

<p>but as I suspected it doesn't compile. When the compiler gets the first <code>""</code> it thinks it is the end of string, which is not. So how can I achieve this?</p>
","<p>Try this:</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
  printf(""Printing quotation mark \"" "");
}
</code></pre>
","11772311"
"How can I read an input string of unknown length?","89029","","<p>If I don't know how long the word is, I cannot write <code>char m[6];</code>,<br>
The length of the word is maybe ten or twenty long.
How can I use <code>scanf</code> to get input from the keyboard?</p>

<pre><code>#include &lt;stdio.h&gt;
int main(void)
{
    char  m[6];
    printf(""please input a string with length=5\n"");
    scanf(""%s"",&amp;m);
    printf(""this is the string: %s\n"", m);
    return 0;
}
</code></pre>

<p>please input a string with lenght=5<br>
hello<br>
this is the string: hello  </p>
","<p><strong>Enter while securing an area dynamically</strong></p>

<p>E.G.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

char *inputString(FILE* fp, size_t size){
//The size is extended by the input with the value of the provisional
    char *str;
    int ch;
    size_t len = 0;
    str = realloc(NULL, sizeof(char)*size);//size is start size
    if(!str)return str;
    while(EOF!=(ch=fgetc(fp)) &amp;&amp; ch != '\n'){
        str[len++]=ch;
        if(len==size){
            str = realloc(str, sizeof(char)*(size+=16));
            if(!str)return str;
        }
    }
    str[len++]='\0';

    return realloc(str, sizeof(char)*len);
}

int main(void){
    char *m;

    printf(""input string : "");
    m = inputString(stdin, 10);
    printf(""%s\n"", m);

    free(m);
    return 0;
}
</code></pre>
","16871702"
"How to compile without warnings being treated as errors?","88989","","<p>The problem is that the same code that compiles well on Windows, is unable to compile on Ubuntu. Every time I get this error:</p>

<pre><code>cc1: warnings being treated as errors
</code></pre>

<p>Now, it's big code base and I don't like fix all the warnings.</p>

<p>Is there any way I can compile successfully in spite of the warnings?</p>
","<p>Thanks for all the helpful suggestions. I finally made sure that there are no warnings in my code, but again was getting this warning from sqlite3:</p>

<pre><code>Assuming signed overflow does not occur when assuming that (X - c) &lt;= X is always true
</code></pre>

<p>which I fixed by adding the following CFLAG:</p>

<pre><code>-fno-strict-overflow
</code></pre>
","11577883"
"Fastest way to zero out a 2d array in C?","88979","","<p>I want to repeatedly zero a large 2d array in C. This is what I do at the moment:</p>

<pre><code>// Array of size n * m, where n may not equal m
for(j = 0; j &lt; n; j++)
{
    for(i = 0; i &lt; m; i++)
    {  
        array[i][j] = 0;
    }
}
</code></pre>

<p>I've tried using memset:</p>

<pre><code>memset(array, 0, sizeof(array))
</code></pre>

<p>But this only works for 1D arrays. When I printf the contents of the 2D array, the first row is zeroes, but then I got a load of random large numbers and it crashes. </p>
","<pre><code>memset(array, 0, sizeof(array[0][0]) * m * n);
</code></pre>

<p>Where <code>m</code> and <code>n</code> are the width and height of the two-dimensional array (in your example, you have a square two-dimensional array, so <code>m == n</code>).</p>
","2516111"
"Quick Way to Implement Dictionary in C","88893","","<p>One of the things which I miss while writing programs in C is a dictionary data structure. What's the most convenient way to implement one in C? I am not looking for performance, but ease of coding it from scratch. I don't want it to be generic either -- something like string->int will do. But I do want it to be able to store an arbitrary number of items. </p>

<p>This is intended more as an exercise. I know that there are 3rd party libraries available which one can use. But consider for a moment, that they don't exist. In such a situation what's the quickest way you can implement a dictionary satisfying the above requirements.</p>
","<p>Section 6.6 of <a href=""http://rads.stackoverflow.com/amzn/click/0131103628"" rel=""noreferrer"">The C Programming Language</a> presents a simple dictionary (hashtable) data structure. I don't think a useful dictionary implementation could get any simpler than this. For your convenience, I reproduce the code here. </p>

<pre><code>struct nlist { /* table entry: */
    struct nlist *next; /* next entry in chain */
    char *name; /* defined name */
    char *defn; /* replacement text */
};

#define HASHSIZE 101
static struct nlist *hashtab[HASHSIZE]; /* pointer table */

/* hash: form hash value for string s */
unsigned hash(char *s)
{
    unsigned hashval;
    for (hashval = 0; *s != '\0'; s++)
      hashval = *s + 31 * hashval;
    return hashval % HASHSIZE;
}

/* lookup: look for s in hashtab */
struct nlist *lookup(char *s)
{
    struct nlist *np;
    for (np = hashtab[hash(s)]; np != NULL; np = np-&gt;next)
        if (strcmp(s, np-&gt;name) == 0)
          return np; /* found */
    return NULL; /* not found */
}

char *strdup(char *);
/* install: put (name, defn) in hashtab */
struct nlist *install(char *name, char *defn)
{
    struct nlist *np;
    unsigned hashval;
    if ((np = lookup(name)) == NULL) { /* not found */
        np = (struct nlist *) malloc(sizeof(*np));
        if (np == NULL || (np-&gt;name = strdup(name)) == NULL)
          return NULL;
        hashval = hash(name);
        np-&gt;next = hashtab[hashval];
        hashtab[hashval] = np;
    } else /* already there */
        free((void *) np-&gt;defn); /*free previous defn */
    if ((np-&gt;defn = strdup(defn)) == NULL)
       return NULL;
    return np;
}

char *strdup(char *s) /* make a duplicate of s */
{
    char *p;
    p = (char *) malloc(strlen(s)+1); /* +1 for ’\0’ */
    if (p != NULL)
       strcpy(p, s);
    return p;
}
</code></pre>

<p>Note that if the hashes of two strings collide, it may lead to an <code>O(n)</code> lookup time. You can reduce the likelihood of collisions by increasing the value of <code>HASHSIZE</code>. For a complete discussion of the data structure, please consult the book.</p>
","4384446"
"How can you flush a write using a file descriptor?","88837","","<blockquote>
  <p>It turns out this whole misunderstanding of the open() versus fopen() stems from a buggy I2C driver in the Linux 2.6.14 kernel on an ARM.  Backporting a working bit bashed driver solved the root cause of the problem I was trying to address here.</p>
</blockquote>

<p>I'm trying to figure out an issue with a serial device driver in Linux (I2C).  It appears that by adding timed OS pauses (sleeps) between writes and reads on the device things work ... (much) better. </p>

<blockquote>
  <p>Aside: <em>The nature of I2C is that each byte read or written by the master is acknowledged by the device on the other end of the wire (slave) - the pauses improving things encourage me to think of the driver as working asynchronously - something that I can't reconcile with how the bus works.  Anyhoo ...</em></p>
</blockquote>

<p>I'd either like to <strong>flush</strong> the write to be sure (rather than using fixed duration pause), <strong><em>or</em></strong> somehow test that the write/read transaction has <strong>completed</strong> in an multi-threaded friendly way.  </p>

<p>The trouble with using <code>fflush(fd);</code> is that it requires 'fd' to be stream pointer (not a file descriptor) i.e.</p>

<pre><code>FILE * fd = fopen(""filename"",""r+"");
... // do read and writes
fflush(fd);
</code></pre>

<p>My problem is that I require the use of the <code>ioctl()</code>, which doesn't use a stream pointer. i.e.</p>

<pre><code>int fd = open(""filename"",O_RDWR);
ioctl(fd,...);
</code></pre>

<p>Suggestions?</p>
","<p>You have two choices:</p>

<ol>
<li><p>Use <code>fileno()</code> to obtain the file descriptor associated with the <code>stdio</code> stream pointer</p></li>
<li><p>Don't use <code>&lt;stdio.h&gt;</code> at all, that way you don't need to worry about flush either - all writes will go to the device immediately, and for character devices the <code>write()</code> call won't even return until the lower-level IO has completed (in theory).</p></li>
</ol>

<p>For device-level IO I'd say it's pretty unusual to use <code>stdio</code>.  I'd strongly recommend using the lower-level <code>open()</code>, <code>read()</code> and <code>write()</code> functions instead (based on your later reply):</p>

<pre><code>int fd = open(""/dev/i2c"", O_RDWR);
ioctl(fd, IOCTL_COMMAND, args);
write(fd, buf, length);
</code></pre>
","259370"
"Is the sizeof(some pointer) always equal to four?","88768","","<p>For example:
<code>sizeof(char*)</code> returns 4.  As does <code>int*</code>, <code>long long*</code>, everything that I've tried.  Are there any exceptions to this?</p>
","<p>The guarantee you get is that <code>sizeof(char) == 1</code>.  There are no other guarantees, including no guarantee that <code>sizeof(int *) == sizeof(double *)</code>.</p>

<p>In practice, pointers will be size 2 on a 16-bit system (if you can find one), 4 on a 32-bit system, and 8 on a 64-bit system, but there's nothing to be gained in relying on a given size.</p>
","399030"
"Declaring a C function to return an array","88559","","<p>How can I make a function which returns an array? I tried this</p>

<pre><code>const int WIDTH=11;
const int HEIGHT=11;

int main() {
  char A[WIDTH][HEIGHT];
  A=rand_grid(WIDTH,HEIGHT);
  return 0;
}

// Initializes a random board.
char[][] rand_grid(int i, int k) {
  char* A[i][k];
  for(j=0;j&lt;i;++j) {
    for(l=0;l&lt;k;++l) {
      A[j][l]=ran(10);
    }
  }
  return A;
}

// Returns a random number from the set {0,...,9}.
int ran(int i) {
  srand((unsigned int) time(0));
  return(rand()%10);
}
</code></pre>
","<p>Several things to point out.</p>

<p>First of all, you cannot assign an array object as you do here:</p>

<pre><code>char A[WIDTH][HEIGHT];  
A=rand_grid(WIDTH,HEIGHT);
</code></pre>

<p>Objects of array type are not modifiable.  </p>

<p>Secondly, functions in C cannot return array types.  They can return <em>pointers</em> to arrays, though:</p>

<pre><code>char (*foo(int width))[HEIGHT]
{
  /**
   * dynamically allocate memory for a widthxHEIGHT array of char
   */
  char (*newArr)[HEIGHT] = malloc(sizeof *newArr * width);
  /**
   * initialize array contents here
   */
  return newArr;
}
</code></pre>

<p>The syntax is a little confusing; it reads as </p>

<pre><code>       foo                                   -- foo
       foo(int width)                        -- is a function
                                             -- taking an int parameter
      *foo(int width)                        -- returning a pointer
     (*foo(int width))[HEIGHT]               -- to a HEIGHT-element array
char (*foo(int width))[HEIGHT]               -- of char
</code></pre>

<p>For C89, HEIGHT in the above snippet must be a compile-time constant integral expression (either a macro, a numeric literal, or an arithmetic expression consisting of macros and/or numeric literals).  I'm not sure if that's also true for C99.  </p>

<p>Based on the snippet you've posted, what you want to do is to take an array you've already allocated and initialize its contents.  Remember that in most contexts, an expression of an array type will implicitly be converted to a pointer to the base type.  IOW, if you pass an N-element array of T to a function, what the function actually receives is a pointer to T:</p>

<pre><code>void foo (T *p) {...}
...
T arr[N];
foo(arr);
</code></pre>

<p>For 2-d arrays, it's a little uglier:</p>

<pre><code>void foo (T (*p)[M]) {...}
...
T arr[N][M];
foo(arr);
</code></pre>

<p>This also relies on M being known at compile time, which limits the function's usefulness.  What you'd like is a function that can deal with a 2-d array of arbitrary size.  The best way I know of to accomplish this is instead of passing a pointer to the array, pass the address of the first element in the array[1], and pass the number of rows and columns as separate parameters:</p>

<pre><code>void foo(T *base, size_t rows, size_t cols) {...}
...
T arr[N][M];
foo (&amp;arr[0][0], N, M);
</code></pre>

<p>So your rand_grid function would look something like this:</p>

<pre><code>void rand_grid(char *base, size_t rows, size_t cols)
{
  size_t i, j;
  for (i = 0; i &lt; rows; i++)
  {
    for (j = 0; j &lt; cols; j++)
    {
      /**
       * Since base is a simple char *, we must index it
       * as though it points to a 1-d array.  This works if
       * base points to the first element of a 2-d array,
       * since multi-dimensional arrays are contiguous.  
       */
      base[i*cols+j] = initial_value();
    }
  }
}

int main(void)
{
  char A[WIDTH][HEIGHT];
  rand_grid(&amp;A[0][0], WIDTH, HEIGHT);
  ...
}
</code></pre>

<hr>

<ol>
<li>Even though the expressions <code>&amp;A[0][0]</code> and <code>A</code> yield the same value (the base address of A), the types of the two expressions are different.  The first expression evaluates to a simple pointer to char (<code>char *</code>), while the second evaluates to a pointer to a 2-d array of char (<code>char (*)[HEIGHT]</code>).  </li>
</ol>
","1454992"
"Is there a Java equivalent or methodology for the typedef keyword in C++?","88549","","<p>Coming from a C and C++ background, I found judicious use of <strong><code>typedef</code></strong> to be incredibly helpful.  Do you know of a way to achieve similar functionality in Java, whether that be a Java mechanism, pattern, or some other effective way you have used?</p>
","<p>Java has primitive types, objects and arrays and that's it. No typedefs.</p>
","1195221"
"How do I set a conditional breakpoint in gdb, when char* x points to a string whose value equals ""hello""?","88425","","<p>Can I specify that I want gdb to break at line x when <code>char* x</code> points to a string whose value equals <code>""hello""</code>? If yes, how?</p>
","<p>You can use <code>strcmp</code>:</p>

<pre><code>break x:20 if strcmp(y, ""hello"") == 0
</code></pre>

<p><code>20</code> is line number, <code>x</code> can be any filename and <code>y</code> can be any variable.</p>
","4183881"
"Linker error: ""linker input file unused because linking not done"", undefined reference to a function in that file","88217","","<p>I'm having trouble with the linking of my files.</p>

<p>Basically, my program consists of:</p>

<ul>
<li>The main program, <code>gen1</code>.</li>
<li><code>gen1</code> - receives input sends to <code>str2value</code> for
processing, outputs results <code>str2value</code>, breaks input into tokens
using ""tokenizer"" determines what sort of processing to do to each
token, and passes them off to <code>str2num</code>, or <code>str2cmd</code>. It then returns an
array of the results.</li>
<li><code>str2num</code> - does some processing</li>
<li><code>str2cmd</code> - ditto</li>
<li><code>author.py</code> - a python script that generates <code>str2cmd.c</code> and <code>str2cmd.h</code> from a header <code>cmdTable.h</code>.</li>
</ul>

<p>I'm pretty sure I have my includes right, I've checked a couple of times. I've also checked that there are no conditions <code>#ifndef</code> wrong in the headers.</p>

<p>Here is my Makefile:</p>

<pre><code>#CPP = g++ -lserial
CPP = g++ -DTESTMODE
C= gcc
DEFINES = LURC
CFLAGS = -Wall -fshort-enums -D$(DEFINES)
PROJECTFILES = gen1.cpp str2value.o

STR2VALUEFILES = str2value.cpp str2cmd.o str2num.o tokenizer.o str2value.h

gen1 : $(PROJECTFILES)
        $(CPP) $(CFLAGS) -o gen1 $(PROJECTFILES)



str2value.o : $(STR2VALUEFILES)
#       echo ""str2value""
        $(CPP) $(CFLAGS) -c $(STR2VALUEFILES)

str2num.o: str2num.cpp  str2value.h str2num.hpp
         $(C) $(CFLAGS) -c $^


tokenizer.o: tokenizer.cpp tokenizer.hpp
        $(CPP) $(CFLAGS) -c $^

str2cmd.o : authorCMDs.py cmdTable.h
        python authorCMDs.py cmdTable.h str2cmd #this uses the gcc -E cmdTable.h -DLURC
        $(C) $(CFLAGS) -c str2cmd.c str2cmd.h

#TODO: add a thing that checks str2cmd.h/.c has not been modified by hand



.PHONEY: clean
clean:
        rm *.o

.PHONEY: all
all:
        clear
        make clean
        make
</code></pre>

<p>Here is the output I recieve from make all:</p>

<pre><code>make clean
make[1]: Entering directory `/home/frames/LURC/gen1/gen1Source'
rm *.o
make[1]: Leaving directory `/home/frames/LURC/gen1/gen1Source'
make
make[1]: Entering directory `/home/frames/LURC/gen1/gen1Source'
python authorCMDs.py cmdTable.h str2cmd #this uses the gcc -E cmdTable.h -DLURC
str2cmd.c and str2cmd.h, generated from cmdTable.h

gcc  -Wall -fshort-enums -DLURC -c str2cmd.c str2cmd.h
gcc  -Wall -fshort-enums -DLURC -c str2num.cpp str2value.h str2num.hpp
g++ -DTESTMODE -Wall -fshort-enums -DLURC -c tokenizer.cpp tokenizer.hpp
g++ -DTESTMODE -Wall -fshort-enums -DLURC -c str2value.cpp str2cmd.o str2num.o tokenizer.o str2value.h
g++: str2cmd.o: linker input file unused because linking not done
g++: str2num.o: linker input file unused because linking not done
g++: tokenizer.o: linker input file unused because linking not done
g++ -DTESTMODE -Wall -fshort-enums -DLURC -o gen1 gen1.cpp str2value.o
str2value.o: In function `getValue(char*)':
str2value.cpp:(.text+0xbd): undefined reference to `str2cmd(char*)'
str2value.cpp:(.text+0x102): undefined reference to `str2num(char*)'
str2value.o: In function `getAllValues(char*)':
str2value.cpp:(.text+0x164): undefined reference to `tokenizer::tokenizer(char*)'
str2value.cpp:(.text+0x177): undefined reference to `tokenizer::getNumTokens(char const*)'
str2value.cpp:(.text+0x1a9): undefined reference to `tokenizer::getNextToken(char const*)'
str2value.cpp:(.text+0x1e9): undefined reference to `tokenizer::getNumTokens(char const*)'
str2value.cpp:(.text+0x201): undefined reference to `tokenizer::~tokenizer()'
str2value.cpp:(.text+0x25b): undefined reference to `tokenizer::~tokenizer()'
collect2: ld returned 1 exit status
make[1]: *** [gen1] Error 1
make[1]: Leaving directory `/home/frames/LURC/gen1/gen1Source'
make: *** [all] Error 2
</code></pre>

<p>Any suggestions about what this is about? <code>STR2VALUESFILES</code> has all the object files I need, to define the missing functions.</p>
","<p>I think you are confused about how the compiler puts things together. When you use <code>-c</code> flag, i.e. no linking is done, the input is C++ code, and the output is object code. The <code>.o</code> files thus don't mix with <code>-c</code>, and compiler warns you about that. Symbols from object file are <em>not</em> moved to other object files like that.</p>

<p>All object files should be on the final linker invocation, which is not the case here, so linker (called via <code>g++</code> front-end) complains about missing symbols.</p>

<p>Here's a small example (calling <code>g++</code> explicitly for clarity):</p>

<pre><code>PROG ?= myprog
OBJS = worker.o main.o

all: $(PROG)

.cpp.o:
        g++ -Wall -pedantic -ggdb -O2 -c -o $@ $&lt;

$(PROG): $(OBJS)
        g++ -Wall -pedantic -ggdb -O2 -o $@ $(OBJS)
</code></pre>

<p>There's also <a href=""http://www.manpagez.com/man/1/makedepend/"" rel=""noreferrer""><code>makedepend</code></a> utility that comes with X11 - helps a lot with source code dependencies. You might also want to look at the <code>-M</code> <code>gcc</code> option for building <code>make</code> rules.</p>
","2395187"
"How do I get DOUBLE_MAX?","88159","","<p>AFAIK, C supports just a few data types:</p>

<pre><code>int, float, double, char, void enum.
</code></pre>

<p>I need to store a number that could reach into the high 10 digits.  Since I'm getting a low 10 digit # from </p>

<blockquote>
  <p>INT_MAX</p>
</blockquote>

<p>, I suppose I need a double.</p>

<p><code>&lt;limits.h&gt;</code> doesn't have a DOUBLE_MAX.  I found a <code>DBL_MAX</code> on the internet that said this is LEGACY and also appears to be C++.  Is double what I need?  Why is there no DOUBLE_MAX?</p>
","<p><code>DBL_MAX</code> is defined in <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/float.h.html"" rel=""noreferrer""><code>&lt;float.h&gt;</code></a>. Its availability in <a href=""http://pubs.opengroup.org/onlinepubs/007908799/xsh/limits.h.html"" rel=""noreferrer""><code>&lt;limits.h&gt;</code></a> on unix is what is marked as ""(LEGACY)"".</p>

<p>(linking to the unix standard even though you have no unix tag since that's probably where you found the ""LEGACY"" notation, but much of what is shown there for float.h is also in the C standard back to C89)</p>
","5834690"
"Send and Receive a file in socket programming in Linux with C/C++ (GCC/G++)","88156","","<p>I would like to implement a client-server architecture running on Linux using sockets and C/C++ language that is capable of sending and receiving files. Is there any library that makes this task easy? Could anyone please provide an example?</p>
","<p>The most portable solution is just to read the file in chunks, and then write the data out to the socket, in a loop (and likewise, the other way around when receiving the file). You allocate a buffer, <a href=""http://www.opengroup.org/onlinepubs/009695399/functions/read.html"" rel=""noreferrer""><code>read</code></a> into that buffer, and <a href=""http://www.opengroup.org/onlinepubs/009695399/functions/write.html"" rel=""noreferrer""><code>write</code></a> from that buffer into your socket (you could also use <code>send</code> and <code>recv</code>, which are socket-specific ways of writing and reading data). The outline would look something like this:</p>

<pre><code>while (1) {
    // Read data into buffer.  We may not have enough to fill up buffer, so we
    // store how many bytes were actually read in bytes_read.
    int bytes_read = read(input_file, buffer, sizeof(buffer));
    if (bytes_read == 0) // We're done reading from the file
        break;

    if (bytes_read &lt; 0) {
        // handle errors
    }

    // You need a loop for the write, because not all of the data may be written
    // in one call; write will return how many bytes were written. p keeps
    // track of where in the buffer we are, while we decrement bytes_read
    // to keep track of how many bytes are left to write.
    void *p = buffer;
    while (bytes_read &gt; 0) {
        int bytes_written = write(output_socket, p, bytes_read);
        if (bytes_written &lt;= 0) {
            // handle errors
        }
        bytes_read -= bytes_written;
        p += bytes_written;
    }
}
</code></pre>

<p>Make sure to read the documentation for <code>read</code> and <code>write</code> carefully, especially when handling errors. Some of the error codes mean that you should just try again, for instance just looping again with a <code>continue</code> statement, while others mean something is broken and you need to stop.</p>

<p>For sending the file to a socket, there is a system call, <a href=""http://www.kernel.org/doc/man-pages/online/pages/man2/sendfile.2.html"" rel=""noreferrer""><code>sendfile</code></a> that does just what you want. It tells the kernel to send a file from one file descriptor to another, and then the kernel can take care of the rest. There is a caveat that the source file descriptor must support <code>mmap</code> (as in, be an actual file, not a socket), and the destination must be a socket (so you can't use it to copy files, or send data directly from one socket to another); it is designed to support the usage you describe, of sending a file to a socket. It doesn't help with receiving the file, however; you would need to do the loop yourself for that. I cannot tell you why there is a <code>sendfile</code> call but no analogous <code>recvfile</code>.</p>

<p>Beware that <code>sendfile</code> is Linux specific; it is not portable to other systems. Other systems frequently have their own version of <code>sendfile</code>, but the exact interface may vary (<a href=""http://www.freebsd.org/cgi/man.cgi?query=sendfile&amp;sektion=2"" rel=""noreferrer"">FreeBSD</a>, <a href=""http://developer.apple.com/Mac/library/documentation/Darwin/Reference/ManPages/man2/sendfile.2.html"" rel=""noreferrer"">Mac OS X</a>, <a href=""http://docs.oracle.com/cd/E23824_01/html/821-1467/sendfile-3ext.html#scrolltoc"" rel=""noreferrer"">Solaris</a>).</p>

<p>In Linux 2.6.17, the <a href=""http://www.kernel.org/doc/man-pages/online/pages/man2/splice.2.html"" rel=""noreferrer""><code>splice</code></a> system call was <a href=""http://lwn.net/Articles/178199/"" rel=""noreferrer"">introduced</a>, and as of 2.6.23 is <a href=""http://kernelnewbies.org/Linux_2_6_23#head-c8fd2455c44d9559429c0f72dbc85cd54a62470d"" rel=""noreferrer"">used internally to implement <code>sendfile</code></a>. <code>splice</code> is a more general purpose API than <code>sendfile</code>. For a good description of <code>splice</code> and <code>tee</code>, see the rather good <a href=""http://kerneltrap.org/node/6505"" rel=""noreferrer"">explanation from Linus himself</a>. He points out how using <code>splice</code> is basically just like the loop above, using <code>read</code> and <code>write</code>, except that the buffer is in the kernel, so the data doesn't have to transferred between the kernel and user space, or may not even ever pass through the CPU (known as ""zero-copy I/O"").</p>
","2014066"
"C: warning: X may be used uninitialized in this function","88105","","<p>I am writing a custom ""vector"" struct. Since I'm very new, I do not understand why I'm getting a <code>""Warning: ""one"" may be used uninitialized""</code> here.</p>

<p>This is my vector.h file</p>

<pre><code>#ifndef VECTOR_H
#define VECTOR_H

typedef struct Vector{
    int a;
    int b;
    int c;
}Vector;

#endif /* VECTOR_ */
</code></pre>

<p>the warning comes here on line <code>one-&gt;a = 12</code></p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;math.h&gt;
#include ""vector.h""

int main(void){
    Vector* one;
    one-&gt;a = 12;
    one-&gt;b = 13;
    one-&gt;c = -11;
}
</code></pre>
","<p><code>one</code> has not been assigned so points to an unpredictable location.  You should either place it on the stack:</p>

<pre><code>Vector one;
one.a = 12;
one.b = 13;
one.c = -11
</code></pre>

<p>or dynamically allocate memory for it:</p>

<pre><code>Vector* one = malloc(sizeof(*one))
one-&gt;a = 12;
one-&gt;b = 13;
one-&gt;c = -11
free(one);
</code></pre>

<p>Note the use of <code>free</code> in this case.  In general, you'll need exactly one call to <code>free</code> for each call made to <code>malloc</code>.</p>
","12958978"
"What can cause a “Resource temporarily unavailable” on sock send() command","88055","","<p>What can cause a <code>Resource temporarily unavailable</code> error on a socket <code>send()</code> command? The socket is setup as <code>AF_UNIX, SOCK_STREAM</code>. It works most of the time, but occasionally gets this error. The receiving end of the socket appears to be working properly.</p>

<p>I know this isn't very detailed, but I'm just looking for general ideas. Thanks!</p>
","<p><code>""Resource temporarily unavailable""</code> is the error message corresponding to <code>EAGAIN</code>, which means that the operation would have blocked but nonblocking operation was requested.  For <code>send()</code>, that could be due to any of:</p>

<ul>
<li>explicitly marking the file descriptor as nonblocking with <code>fcntl()</code>; or</li>
<li>passing the <code>MSG_DONTWAIT</code> flag to <code>send()</code>; or</li>
<li>setting a send timeout with the <code>SO_SNDTIMEO</code> socket option.</li>
</ul>
","14370767"
"xxxxxx.exe is not a valid Win32 application","87939","","<p>I have small C/C++ project in Visual Studio 2012 RC</p>

<p>This applications parses the argv and then calling another .exe file with <code>ShellExecute</code></p>

<p>My application works perfect on Windows7 but on Windows XP x86 trhows Is not a valid Win32 application error.</p>

<p>I have compiled it with Mutli-thread(/MT) and Win32 Platform</p>

<p>This is my #includes</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;Windows.h&gt;
#include &lt;fstream&gt;
#include &lt;cstdio&gt;
#include &lt;vector&gt;
#include &lt;windowsx.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;stdio.h&gt;
#include &lt;tchar.h&gt;
#include &lt;direct.h&gt;
</code></pre>

<p>Thanks</p>
","<p>VS 2012 applications cannot be run under Windows XP.</p>

<p>See this <a href=""http://blogs.msdn.com/b/vcblog/archive/2012/06/15/10320645.aspx"" rel=""nofollow noreferrer"">VC++ blog</a> on why and how to make it work.</p>

<p>It seems to be supported/possible from Feb 2013. See <a href=""https://stackoverflow.com/a/14754251/551045"">noelicus answer below</a> on how to.</p>
","11305659"
"How to repeat a char using printf?","87775","","<p>I'd like to do something like <code>printf(""?"", count, char)</code> to repeat a character <code>count</code> times.</p>

<p>What is the right format-string to accomplish this?</p>

<p>EDIT: Yes, it is obvious that I could call <code>printf()</code> in a loop, but that is just what I wanted to avoid.</p>
","<p>Short answer - yes, long answer: not how you want it.</p>

<p>You can use the %* form of <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html"">printf</a>, which accepts a variable width. And, if you use '0' as your value to print, <em>combined</em> with the right-aligned text that's zero padded on the left..</p>

<pre><code>printf(""%0*d\n"", 20, 0);
</code></pre>

<p>produces: </p>

<pre><code>00000000000000000000
</code></pre>

<p>With my tongue firmly planted in my cheek, I offer up this little horror-show snippet of code. </p>

<p>Some times you just gotta do things <strong>badly</strong> to remember why you try so hard the rest of the time.</p>

<pre><code>#include &lt;stdio.h&gt;

int width = 20;
char buf[4096];

void subst(char *s, char from, char to) {
    while (*s == from)
    *s++ = to;
}

int main() {
    sprintf(buf, ""%0*d"", width, 0);
    subst(buf, '0', '-');
    printf(""%s\n"", buf);
    return 0;
}
</code></pre>
","16713553"
"Single quotes vs. double quotes in C or C++","87704","","<p>When should I use single quotes and double quotes in C or C++ programming?</p>
","<p>In C and in C++ single quotes identify a single character, while double quotes create a string literal. 'a' is a single a character literal, while ""a"" is a string literal containing an 'a' and a null terminator (that is a 2 char array).</p>

<p>In C++ the type of a character literal is <code>char</code>, but note that in C, the type of a character literal is <code>int</code>, that is <code>sizeof 'a'</code> is 4 in an architecture where ints are 32bit (and CHAR_BIT is 8), while <code>sizeof(char)</code> is 1 everywhere.</p>
","3683613"
"C compile error: ""Variable-sized object may not be initialized""","87633","","<p>Why do I receive the error ""Variable-sized object may not be initialized"" with the following code? </p>

<pre><code>int boardAux[length][length] = {{0}};
</code></pre>
","<p>I am assuming that you are using a C99 compiler (with support for dynamically sized arrays). The problem in your code is that at the time when the compilers sees your variable declaration it cannot know how many elements there are in the array (I am also assuming here, from the compiler error that <code>length</code> is not a compile time constant). </p>

<p>You must manually initialize that array:</p>

<pre><code>int boardAux[length][length];
memset( boardAux, 0, length*length*sizeof(int) );
</code></pre>
","3082971"
"Initialize a string in C to empty string","87620","","<p>I want to initialize string in C to empty string.
I tried:</p>

<pre><code>string[0] = """"; 
</code></pre>

<p>but it wrote</p>

<pre><code>""warning: assignment makes integer from pointer without a cast""
</code></pre>

<p>How should I do it then?</p>
","<p>Assuming your array called 'string' already exists, try</p>

<pre><code>string[0] = '\0';
</code></pre>

<p><code>\0</code> is the explicit NUL terminator, required to mark the end of string.</p>
","4142761"
"Using %s in C correctly - very basic level","87599","","<p>I know that %s is a string of characters, but I don't know how to use it.
Can anyone provide me a very basic example of how its used and how its different from char ?</p>

<hr>

<p>(edited)</p>

<p>i'm 2 weeks into this course, it's my first time programming. I'm not allowed to use material that hasn't been taught yet on the assignments, so that's why I asked. I have a few books on C and have googled but still wasn't sure, so I asked. (thanks for all the down-votes) All the examples given below use arrays which hasn't been taught yet, so I'm assuming I can't use %s yet either. Thanks. </p>
","<p>For both <code>*printf</code> and <code>*scanf</code>, <code>%s</code> expects the corresponding argument to be of type <code>char *</code>, and for <code>scanf</code>, it had better point to a writable buffer (i.e., not a string literal).  </p>

<pre><code>char *str_constant = ""I point to a string literal"";
char str_buf[] = ""I am an array of char initialized with a string literal"";

printf(""string literal = %s\n"", ""I am a string literal"");
printf(""str_constant = %s\n"", str_constant);
printf(""str_buf = %s\n"", str_buf);

scanf(""%55s"", str_buf);
</code></pre>

<p>Using <code>%s</code> in <code>scanf</code> without an explcit field width opens the same buffer overflow exploit that <code>gets</code> did; namely, if there are more characters in the input stream than the target buffer is sized to hold, <code>scanf</code> will happily write those extra characters to memory outside the buffer, potentially clobbering something important.  Unfortunately, unlike in <code>printf</code>, you can't supply the field with as a run time argument:</p>

<pre><code>printf(""%*s\n"", field_width, string);
</code></pre>

<p>One option is to build the format string dynamically:</p>

<pre><code>char fmt[10];
sprintf(fmt, ""%%%lus"", (unsigned long) (sizeof str_buf) - 1);
...
scanf(fmt, target_buffer); // fmt = ""%55s""
</code></pre>

<p><strong>EDIT</strong></p>

<p>Using <code>scanf</code> with the <code>%s</code> conversion specifier will stop scanning at the first whitespace character; for example, if your input stream looks like</p>

<pre><code>""This is a test""
</code></pre>

<p>then <code>scanf(""%55s"", str_buf)</code> will read and assign <code>""This""</code> to <code>str_buf</code>.  Note that the field with specifier doesn't make a difference in this case.</p>
","9981203"
"Convert Little Endian to Big Endian","87469","","<p>I just want to ask if my method is correct to convert from little endian to big endian, just to make sure if I understand the difference.</p>

<p>I have a number which is stored in little-endian, here are the binary and hex representations of the number:</p>

<pre><code>‭0001 0010 0011 0100 0101 0110 0111 1000‬

‭12345678‬
</code></pre>

<p>In big-endian format I believe the bytes should be swapped, like this:</p>

<pre><code>1000 0111 0110 0101 0100 0011 0010 0001

‭87654321
</code></pre>

<p>Is this correct?</p>

<p>Also, the code below attempts to do this but fails. Is there anything obviously wrong or can I optimize something? If the code is bad for this conversion can you please explain why and show a better method of performing the same conversion?</p>

<pre><code>uint32_t num = 0x12345678;
uint32_t b0,b1,b2,b3,b4,b5,b6,b7;
uint32_t res = 0;

b0 = (num &amp; 0xf) &lt;&lt; 28;
b1 = (num &amp; 0xf0) &lt;&lt; 24;
b2 = (num &amp; 0xf00) &lt;&lt; 20;
b3 = (num &amp; 0xf000) &lt;&lt; 16;
b4 = (num &amp; 0xf0000) &lt;&lt; 12;
b5 = (num &amp; 0xf00000) &lt;&lt; 8;
b6 = (num &amp; 0xf000000) &lt;&lt; 4;
b7 = (num &amp; 0xf0000000) &lt;&lt; 4;

res = b0 + b1 + b2 + b3 + b4 + b5 + b6 + b7;

printf(""%d\n"", res);
</code></pre>
","<p>OP's sample code is incorrect.</p>

<p>Endian conversion works at the bit and 8-bit byte level.  Most endian issues deal with the byte level.  OP code is doing a endian change at the 4-bit nibble level.  Recommend instead:</p>

<pre><code>// Swap endian (big to little) or (little to big)
uint32_t num = 9;
uint32_t b0,b1,b2,b3;
uint32_t res;

b0 = (num &amp; 0x000000ff) &lt;&lt; 24u;
b1 = (num &amp; 0x0000ff00) &lt;&lt; 8u;
b2 = (num &amp; 0x00ff0000) &gt;&gt; 8u;
b3 = (num &amp; 0xff000000) &gt;&gt; 24u;

res = b0 | b1 | b2 | b3;

printf(""%"" PRIX32 ""\n"", res);
</code></pre>

<p>If performance is truly important, the particular processor would need to be known.  Otherwise, leave it to the compiler.</p>

<p>[Edit] OP added a comment that changes things.<br>
""32bit numerical value represented by the hexadecimal representation (st uv wx yz) shall be recorded in a four-byte field as (st uv wx yz).""</p>

<p>It appears in this case, the endian of the 32-bit number is <em>unknown</em> and the result needs to be store in memory in <em>little</em> endian order.</p>

<pre><code>uint32_t num = 9;
uint8_t b[4];
b[0] = (uint8_t) (num &gt;&gt;  0u);
b[1] = (uint8_t) (num &gt;&gt;  8u);
b[2] = (uint8_t) (num &gt;&gt; 16u);
b[3] = (uint8_t) (num &gt;&gt; 24u);
</code></pre>

<hr>

<p>[2016 Edit] Simplification</p>

<blockquote>
  <p>... The type of the result is that of the promoted left operand....  Bitwise shift operators C11 §6.5.7 3 </p>
</blockquote>

<p>Using a <code>u</code> after the <em>shift</em> constants (right operands) results in the same as without it.</p>

<pre><code>b3 = (num &amp; 0xff000000) &gt;&gt; 24u;
b[3] = (uint8_t) (num &gt;&gt; 24u);
// same as 
b3 = (num &amp; 0xff000000) &gt;&gt; 24;
b[3] = (uint8_t) (num &gt;&gt; 24);
</code></pre>
","19276193"
"Initializing a struct to 0","87307","","<p>If I have a struct like this:</p>

<pre><code>typedef struct
{
    unsigned char c1;
    unsigned char c2;
} myStruct;
</code></pre>

<p>What would be the easiest way to initialize this struct to 0?
Would the following suffice?</p>

<pre><code>myStruct _m1 = {0};
</code></pre>

<p>or Would I need to explicitly init each member to 0?</p>

<pre><code>myStruct _m2 = {0,0};
</code></pre>
","<p>The first is easiest(<em>involves less typing</em>), and it is guaranteed to work, all members will be set to <code>0</code><sup>[Ref 1]</sup>.<br>
The second is more readable.     </p>

<p>The choice depends on user preference or the one which your coding standard mandates.</p>

<p><sup>[Ref 1]</sup> <strong>Reference C99 Standard 6.7.8.21:</strong>    </p>

<blockquote>
  <p>If there are fewer initializers in a brace-enclosed list than there are elements or members of an aggregate, or fewer characters in a string literal used to initialize an array of known size than there are elements in the array, the remainder of the aggregate shall be initialized implicitly the same as objects that have static storage duration.</p>
</blockquote>

<p><strong>Good Read:</strong><br>
<a href=""https://stackoverflow.com/questions/10828294/c-and-c-partial-initialization-of-automatic-structure"">C and C++ : Partial initialization of automatic structure</a></p>
","11152199"
"Error: Address already in use while binding socket with address but the port number is shown free by `netstat`","87297","","<p>I tried to bind my socket(server socket) at port number <code>8000</code>. It worked and did the job for me. At the end of the code I close the socket as well. The very next instant I run my code again and it shows me that the address is already in use. I have printed the meaning of error values <code>strerror(errno);</code> to see if my code working properly at each point. To check if the port is free I checked it using <code>netstat</code> but it shows that port number <code>8000</code> is free. It has happened with me a lot of times. Every time I then wait for a few more secs and then it starts working again. I am using c language. So what is he reason for this behavior by my OS.</p>

<p>After a few more secs I run the code and then it works. 
</p>

<pre class=""lang-none prettyprint-override""><code>anirudh@anirudh-Aspire-5920:~/Desktop/testing$ sudo ./a.out 
Socket Creation: Success
File open: Success
Socket Bind: Address already in use
Socket Listen: Address already in use
^C
anirudh@anirudh-Aspire-5920:~/Desktop/testing$ sudo netstat -lntp
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1348/lighttpd   
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      984/sshd        
tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      1131/cupsd      
tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      1211/mysqld     
tcp6       0      0 :::22                   :::*                    LISTEN      984/sshd        
tcp6       0      0 ::1:631                 :::*                    LISTEN      1131/cupsd      
anirudh@anirudh-Aspire-5920:~/Desktop/testing$ sudo ./a.out 
Socket Creation: Success
File open: Success
Socket Bind: Address already in use
Socket Listen: Address already in use
^C
anirudh@anirudh-Aspire-5920:~/Desktop/testing$ 
</code></pre>
","<p>I've run into that same issue as well.  It's because you're closing your connection to the socket, but not the socket itself.  The socket can enter a TIME_WAIT state (to ensure all data has been transmitted, TCP guarantees delivery if possible) <a href=""http://www.softlab.ntua.gr/facilities/documentation/unix/unix-socket-faq/unix-socket-faq-4.html#ss4.2"" rel=""noreferrer"">and take up to 4 minutes to release</a>.</p>

<p>or, for a REALLY detailed/technical explanation, <a href=""http://www.softlab.ntua.gr/facilities/documentation/unix/unix-socket-faq/unix-socket-faq-2.html#time_wait"" rel=""noreferrer"">check this link</a></p>

<p>It can be annoying to be sure, but there's no real way around it and it's not a bug.</p>
","5106755"
"C compile error: Id returned 1 exit status","87273","","<p>For some reason, when I try compiling a program, the compiler says permission denied and Id returned 1 exit status.  Could anyone tell me what that means? Thank you</p>

<pre><code>#include &lt;stdio.h&gt;                                               /* Library inclusions */
#include ""genlib.h"" 
#include ""simpio.h""

int binSearch(int val, int numbers[], int size1);                /* prototypes */
void sortArray (int numbers[], int size1);                       
int indexMax (int numbers[], int low, int high);
void swap (int numbers[], int loc, int loc1);
void getArray (int numbers[], int size1);
void displayArray (int numbers[], int size1);

main()
{
  int value, size1;

  printf(""Enter the number of elements: "");
  size1=GetInteger(); 
  int numbers[size1];
  getArray(numbers, size1); 
  sortArray(numbers, size1); 
  displayArray(numbers, size1);
  printf(""\nEnter value to find: "");
  value=GetInteger();
  binSearch(value, numbers, size1);
  getchar();
}

void sortArray (int numbers[], int size1)                        /*Function sortArray*/
{
 int i , maxInd;

 for (i= size1-1; i&gt;=0;i--)
 {
     maxInd=indexMax(numbers, 0, i);
     swap (numbers, i, maxInd);
 }
}

void displayArray (int numbers[], int size1)                     /*Function displayArray*/
{
 int i;

 printf(""This is the sorted set of numbers: \n"");
 for (i=0; i&lt; size1; i++)
 {
         printf (""%d\t"", numbers[i]); 
     }
}

void getArray (int numbers[], int size1)                         /*Function getArray*/
{
 int i;

 for (i=0; i&lt;size1; i++)
 {
     printf (""Enter the values of the %d elements: "", size1);
     numbers[i]=GetInteger();
 }
}

int indexMax (int numbers[], int low, int high)                  /*Function indexMax*/
{
int i, maxInd;

maxInd=high;
for (i=low;i&lt;=high;i++)
{
    if (numbers[i]&gt;numbers[maxInd]) 
    {
                   maxInd =i;
    }
    }
    return (maxInd);
}

void swap (int numbers[], int loc, int loc1)                     /*Function swap*/
{
 int temp;

 temp=numbers[loc];
 numbers[loc]=numbers[loc1];
 numbers[loc1]=temp;
}

int binSearch(int val, int numbers[], int size1)                 /*Function binSearch*/
{
 int low, high, mid;

 low=0;
 high=size1-1;
 while(low&lt;=high)
 {
                 mid=(low+high)/2;
                 if(val&lt;numbers[mid])
                 {
                                 high=mid-1;                
                 }            
                 else if(val&gt;numbers[mid])
                 {
                                 low=mid+1; 
                 }   
                 else if(val==numbers[mid])
                 {
                                 printf(""Your number is in location %d\n"", mid+1);break;    
                 } 
                 else
                 {
                                 printf(""Your value is not in the array."");        
                 }
   }
}
</code></pre>

<p>The above is the binary search algorithm code I tried to compile.</p>
","<p>I may guess, the old instance of your program is still running. Windows does not allow to change the files which are currently ""in use"" and your linker cannot write the new .exe on the top of the running one. Try stopping/killing your program.</p>
","17718171"
"How to use nan and inf in C?","87192","","<p>I have a numerical method that could return nan or inf if there was an error, and for testing purposed I'd like to temporarily force it to return nan or inf to ensure the situation is being handled correctly. Is there a reliable, <em>compiler-independent</em> way to create values of nan and inf in C?</p>

<p>After googling for about 10 minutes I've only been able to find compiler dependent solutions.</p>
","<p>You can test if your implementation has it:</p>

<pre><code>#include &lt;math.h&gt;
#ifdef NAN
/* NAN is supported */
#endif
#ifdef INFINITY
/* INFINITY is supported */
#endif
</code></pre>

<p>The existence of <code>INFINITY</code> is guaranteed by C99 (or the latest draft at least), and ""expands to a constant expression of type float representing positive or unsigned
infinity, if available; else to a positive constant of type float that overflows at translation time.""</p>

<p><code>NAN</code> may or may not be defined, and ""is defined if and only if the implementation supports quiet NaNs for the float type. It expands to a constant expression of type float representing a quiet NaN.""</p>

<p>Note that if you're comparing floating point values, and do:</p>

<pre><code>a = NAN;
</code></pre>

<p>even then,</p>

<pre><code>a == NAN;
</code></pre>

<p>is false.  One way to check for NaN would be:</p>

<pre><code>#include &lt;math.h&gt;
if (isnan(a)) { ... }
</code></pre>

<p>You can also do: <code>a != a</code> to test if <code>a</code> is NaN.</p>

<p>There is also <code>isfinite()</code>, <code>isinf()</code>, <code>isnormal()</code>, and <code>signbit()</code> macros in <code>math.h</code> in C99.</p>

<p>C99 also has <code>nan</code> functions:</p>

<pre><code>#include &lt;math.h&gt;
double nan(const char *tagp);
float nanf(const char *tagp);
long double nanl(ocnst char *tagp);
</code></pre>

<p>(Reference: n1256).</p>
","1923933"
"How to create a md5 hash of a string in C?","87075","","<p>I've found some md5 code that consists of the following prototypes...</p>

<p>I've been trying to find out where I have to put the string I want to hash, what functions I need to call, and where to find the string once it has been hashed. I'm confused with regards to what the uint32 buf[4] and uint32 bits[2] are in the struct.</p>

<pre><code>struct MD5Context {
    uint32 buf[4];
    uint32 bits[2];
    unsigned char in[64];
};

/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */
void MD5Init(struct MD5Context *context);

/*
 * Update context to reflect the concatenation of another buffer full
 * of bytes.
 */
void MD5Update(struct MD5Context *context, unsigned char const *buf, unsigned len);

/*
 * Final wrapup - pad to 64-byte boundary with the bit pattern 
 * 1 0* (64-bit count of bits processed, MSB-first)
 */
void MD5Final(unsigned char digest[16], struct MD5Context *context);

/*
 * The core of the MD5 algorithm, this alters an existing MD5 hash to
 * reflect the addition of 16 longwords of new data.  MD5Update blocks
 * the data and converts bytes into longwords for this routine.
 */
void MD5Transform(uint32 buf[4], uint32 const in[16]);
</code></pre>
","<p>I don't know this particular library, but I've used very similar calls. So this is my best guess:</p>

<pre><code>unsigned char digest[16];
const char* string = ""Hello World"";
struct MD5Context context;
MD5Init(&amp;context);
MD5Update(&amp;context, string, strlen(string));
MD5Final(digest, &amp;context);
</code></pre>

<p>This will give you back an integer representation of the hash. You can then turn this into a hex representation if you want to pass it around as a string.</p>

<pre><code>char md5string[33];
for(int i = 0; i &lt; 16; ++i)
    sprintf(&amp;md5string[i*2], ""%02x"", (unsigned int)digest[i]);
</code></pre>
","7627763"
"generate a random number between 1 and 10 in c","86985","","<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main()

{
    int randomnumber;
    randomnumber = rand() % 10;
    printf(""%d\n"", randomnumber);
    return 0;
}
</code></pre>

<p>This is a simple program where randomnumber is an uninitialized int variable that is meant to be printed as a random number between 1 and 10. However, it always prints the same number whenever I run over and over again. Can somebody please help and tell me why this is happening? Thank you. </p>
","<p>You need a different seed at every execution.</p>

<p>You can start to call at the beginning of your program:</p>

<pre><code>srand(time(NULL));
</code></pre>

<p>Note that <code>% 10</code> yields a result from <code>0</code> to <code>9</code> and not from <code>1</code> to <code>10</code>: just add <code>1</code> to your <code>%</code> expression to get <code>1</code> to  <code>10</code>.</p>
","17846229"
"Trim a string in C","86669","","<p>Briefly: </p>

<p>I'm after the equivalent of .NET's <code>String.Trim</code> in C using the win32 and standard C api (compiling with MSVC2008 so I have access to all the C++ stuff if needed, but I am just trying to trim a <code>char*</code>). </p>

<p>Given that there is <code>strchr</code>, <code>strtok</code>, and all manner of other string functions, surely there should be a trim function, or one that can be repurposed...</p>

<p>Thanks</p>
","<p>There is no standard library function to do this, but it's not too hard to roll your own. There is an <a href=""https://stackoverflow.com/questions/122616/painless-way-to-trim-leadingtrailing-whitespace-in-c"">existing question</a> on SO about doing this that was answered with source code.</p>
","656570"
"How to dynamically allocate memory space for a string and get that string from user?","86604","","<p>I want to read input from user using C program. I don't want to use array like,</p>

<pre><code>char names[50];
</code></pre>

<p>because if the user gives string of length 10, then the remaining spaces are wasted.</p>

<p>If I use character pointer like,</p>

<pre><code>char *names;
</code></pre>

<p>then I need to allocate memory for that in such a way of,</p>

<pre><code>names = (char *)malloc(20 * sizeof(char));
</code></pre>

<p>In this case also, there is a possibility of memory wastage.</p>

<p>So, what I need is to dynamically allocate memory for a string which is of exactly same as the length of the string.</p>

<p>Lets assume,</p>

<p>If the user input is <code>""stackoverflow""</code>, then the memory allocated should be of <code>14</code> (i.e. Length of the string = 13 and 1 additional space for '\0').</p>

<p>How could I achieve this?</p>
","<p>Read one character at a time (using <code>getc(stdin)</code>) and grow the string (<code>realloc</code>) as you go.</p>

<p>Here's a function I wrote some time ago. Note it's intended only for text input.</p>

<pre><code>char *getln()
{
    char *line = NULL, *tmp = NULL;
    size_t size = 0, index = 0;
    int ch = EOF;

    while (ch) {
        ch = getc(stdin);

        /* Check if we need to stop. */
        if (ch == EOF || ch == '\n')
            ch = 0;

        /* Check if we need to expand. */
        if (size &lt;= index) {
            size += CHUNK;
            tmp = realloc(line, size);
            if (!tmp) {
                free(line);
                line = NULL;
                break;
            }
            line = tmp;
        }

        /* Actually store the thing. */
        line[index++] = ch;
    }

    return line;
}
</code></pre>
","8164021"
"minimum double value in C/C++","86575","","<p>Is there a standard and/or portable way to represent the smallest negative value (e.g. to use negative infinity) in a C(++) program?</p>

<p>DBL_MIN in float.h is the smallest <em>positive</em> number.</p>
","<p><code>-DBL_MAX</code> <a href=""http://www.csse.uwa.edu.au/programming/ansic-library.html#float"" rel=""noreferrer"">in ANSI C</a>, which is defined in float.h.</p>
","1153585"
"How to find substring from string?","86504","","<p>How do I find a substring from the string path ""/user/desktop/abc/post/"" using C/C++? I want to check if folder ""abc"" is present or not in that path.</p>

<p>Path is character pointer <code>char *ptr = ""/user/desktop/abc/post/"";</code></p>
","<p>In C, use the <code><a href=""http://linux.die.net/man/3/strstr"">strstr()</a></code> standard library function:</p>

<pre><code>const char *str = ""/user/desktop/abc/post/"";
const int exists = strstr(str, ""/abc/"") != NULL;
</code></pre>

<p>Take care to not accidentally find a too-short substring (this is what the starting and ending slashes are for).</p>
","13195376"
"Writing BMP image in pure c/c++ without other libraries","86448","","<p>In my algorithm i need create information output. I must to write boolean matrix in bmp file.
It must be monocromic image, where pixel is white if matrix on such element is true.
Main problem is bmp header and how to write this.</p>
","<p>Without the use of any other library you can look at the <a href=""https://web.archive.org/web/20080912171714/http://www.fortunecity.com/skyscraper/windows/364/bmpffrmt.html"" rel=""nofollow noreferrer"">BMP file format</a>.  I've implemented it in the past and it can be done without too much work.</p>

<blockquote>
  <p>Bitmap-File Structures</p>
  
  <p>Each bitmap file contains a
  bitmap-file header, a
  bitmap-information header, a color
  table, and an array of bytes that
  defines the bitmap bits. The file has
  the following form:</p>
  
  <p>BITMAPFILEHEADER bmfh;<br>
  BITMAPINFOHEADER bmih;<br>
  RGBQUAD aColors[];<br>
  BYTE aBitmapBits[];    </p>
</blockquote>

<p>... see the file format for more details</p>
","2654491"
"2D character array initialization in C","86386","","<p>I am trying to build a list of strings that I need to pass to a function expecting <code>char **</code></p>

<p>How do I build this array? I want to pass in two options, each with less than 100 characters.</p>

<pre><code>char **options[2][100];

options[0][0] = 'test1';
options[1][0] = 'test2';
</code></pre>

<p>This does not compile.  What am I doing wrong exactly?  How do I create a 2D character array in C?</p>
","<p>C strings are enclosed in double quotes:</p>

<pre><code>const char *options[2][100];

options[0][0] = ""test1"";
options[1][0] = ""test2"";
</code></pre>

<p>Re-reading your question and comments though I'm guessing that what you <em>really</em> want to do is this:</p>

<pre><code>const char *options[2] = { ""test1"", ""test2"" };
</code></pre>
","6599747"
"GCC fatal error: stdio.h: No such file or directory","86296","","<p>I'm trying to compile a program in C on OS X 10.9 with GCC 4.9 (experimental). For some reason, I'm getting the following error at compile time:</p>

<pre><code>gcc: fatal error: stdio.h: No such file or directory
</code></pre>

<p>I then tried a simple Hello World program:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, const char *argv[])
{
    printf(""Hello, world!"");
    return 0;
}
</code></pre>

<p>Again, upon running <code>gcc -o ~/hello ~/hello.c</code>, I got the same error. I'm using an experimental version of <code>gcc</code>, but it seems implausible that there would be a release which generated errors upon importing <code>stdio</code>. What could be causing this issue, and how can it be fixed?</p>
","<p>I had this problem too (encountered through Macports compilers). Previous versions of Xcode would let you install command line tools through xcode/Preferences, but xcode5 doesn't give a command line tools option in the GUI, that so I assumed it was automatically included now. Try running this command:</p>

<pre><code>xcode-select --install
</code></pre>
","20150282"
"How to trigger SIGUSR1 and SIGUSR2?","86219","","<p>I'm getting acquainted with signals in C. I can't figure out what kind of signals <code>SIGUSR1</code> and <code>SIGUSR2</code> are and how can I trigger them. Can anyone please explain it to me?</p>
","<p>They are <em>user-defined</em> signals, so they aren't triggered by any particular action.  You can explicitly send them programmatically:</p>

<pre><code>#include &lt;signal.h&gt;

kill(pid, SIGUSR1);
</code></pre>

<p>where <code>pid</code> is the process id of the receiving process.  At the receiving end, you can register a signal handler for them:</p>

<pre><code>#include &lt;signal.h&gt;

void my_handler(int signum)
{
    if (signum == SIGUSR1)
    {
        printf(""Received SIGUSR1!\n"");
    }
}

signal(SIGUSR1, my_handler);
</code></pre>
","6168645"
"Convert unsigned int to signed int C","86211","","<p>I am trying to convert <code>65529</code> from an <code>unsigned int</code> to a signed <code>int</code>. I tried doing a cast like this:</p>

<pre><code>unsigned int x = 65529;
int y = (int) x;
</code></pre>

<p>But <code>y</code> is still returning 65529 when it should return -7. Why is that?</p>
","<p>It seems like you are expecting <code>int</code> and <code>unsigned int</code> to be a 16-bit integer. That's apparently not the case. Most likely, it's a 32-bit integer - which is large enough to avoid the wrap-around that you're expecting.</p>

<p>Note that there is no fully C-compliant way to do this because casting between signed/unsigned for values out of range is implementation-defined. But this will still work in most cases:</p>

<pre><code>unsigned int x = 65529;
int y = (short) x;      //  If short is a 16-bit integer.
</code></pre>

<p>or alternatively:</p>

<pre><code>unsigned int x = 65529;
int y = (int16_t) x;    //  This is defined in &lt;stdint.h&gt;
</code></pre>
","8317315"
"Return char[]/string from a function","86019","","<p>Im fairly new to coding in C and currently im trying to create a function that returns a c string/char array and assigning to a variable. </p>

<p>So far, ive observed that returning a char * is the most common solution. So i tried:</p>

<pre><code>char* createStr() {
    char char1= 'm';
    char char2= 'y';
    char str[3];
    str[0] = char1;
    str[1] = char2;
    str[2] = '\0';
    char* cp = str;
    return cp;
}
</code></pre>

<p>My question is how do i use this returned char* and assign the char array it points to, to a char[] variable?</p>

<p>Ive tried (all led to noob-drowning errors):</p>

<ol>
<li>char* charP = createStr();</li>
<li>char myStr[3] = &amp;createStr();</li>
<li>char* charP = *createStr();</li>
</ol>
","<p>Notice you're not dynamically allocating the variable, which pretty much means the data inside <code>str</code>, in your function, will be lost by the end of the function.</p>

<p>You should have:</p>

<pre><code>char * createStr() {

    char char1= 'm';
    char char2= 'y';

    char *str = (char *) malloc(sizeof(char) * 3);
    str[0] = char1;
    str[1] = char2;
    str[2] = '\0';

    return str;

}
</code></pre>

<p>Then, when you call the function, the type of the variable that will receive the data must match that of the function return. So, you should have:</p>

<pre><code>char *returned_str = createStr();
</code></pre>
","14416798"
"How do I execute external program within C code in linux with arguments?","85826","","<p>I want to execute another program within C code.
For example, I want to execute a command</p>

<pre><code>./foo 1 2 3
</code></pre>

<p><code>foo</code> is the program which exists in the same folder, and <code>1 2 3</code> are arguments.
<code>foo</code> program creates a file which will be used in my code.</p>

<p>How do I do this?</p>
","<p>Use <code>system()</code>:</p>

<pre><code>int status = system(""./foo 1 2 3"");
</code></pre>

<p><code>system()</code> will wait for foo to complete execution, then return a status variable which you can use to check e.g. exitcode. <code>man 2 wait</code> on your linux system will list the various macros you can use to examine the status, the most interesting ones would be <code>WIFEXITED</code> and <code>WEXITSTATUS</code></p>

<p>Alternatively, if you need to read foo's output to stdout, use <code>popen()</code>.</p>
","5237520"
"Where is `%p` useful with printf?","85750","","<p>After all, both these statements do the same thing...</p>

<pre><code>int a = 10;
int *b = &amp;a;
printf(""%p\n"",b);
printf(""%08X\n"",b);
</code></pre>

<p>For example (with different addresses):</p>

<pre><code>0012FEE0
0012FEE0
</code></pre>

<p>It is trivial to format the pointer as desired with <code>%x</code>, so is there some good use of the <code>%p</code> option?</p>
","<p>They do not do the same thing. The latter <a href=""http://en.cppreference.com/w/cpp/io/c/fprintf"" rel=""noreferrer""><code>printf</code></a> statement interprets <code>b</code> as an <code>unsigned int</code>, which is wrong, as <code>b</code> is a pointer.</p>

<p>Pointers and <code>unsigned int</code>s are not always the same size, so these are not interchangeable. When they aren't the same size (an increasingly common case, as 64-bit CPUs and operating systems become more common), <code>%x</code> will only print half of the address. On a Mac (and probably some other systems), that <em>will</em> ruin the address; the output will be wrong.</p>

<p>Always use <code>%p</code> for pointers.</p>
","2369593"
"Returning pointer from a function","85553","","<p>I am trying to return pointer from a function. But I am getting segmentation fault. Someone please tell what is wrong with the code</p>

<pre><code>#include&lt;stdio.h&gt;
int *fun();
main()
{
    int *ptr;
    ptr=fun();
    printf(""%d"",*ptr);

}
int *fun()
{
    int *point;
    *point=12;  
    return point;
}   
</code></pre>
","<p>Allocate memory before using the pointer. If you don't allocate memory <code>*point = 12</code> is undefined behavior.</p>

<pre><code>int *fun()
{
    int *point = malloc(sizeof *point); /* Mandatory. */
    *point=12;  
    return point;
}
</code></pre>

<p>Also your <code>printf</code> is wrong. You need to dereference (<code>*</code>) the pointer.</p>

<pre><code>printf(""%d"", *ptr);
             ^
</code></pre>
","7754999"
"Variable declarations in header files - static or not?","85475","","<p>When refactoring away some <code>#defines</code> I came across declarations similar to the following in a C++ header file:</p>

<pre><code>static const unsigned int VAL = 42;
const unsigned int ANOTHER_VAL = 37;
</code></pre>

<p>The question is, what difference, if any, will the static make?  Note that multiple inclusion of the headers isn't possible due to the classic <code>#ifndef HEADER</code> <code>#define HEADER</code> <code>#endif</code> trick (if that matters).</p>

<p>Does the static mean only one copy of <code>VAL</code> is created, in case the header is included by more than one source file?</p>
","<p>The <code>static</code> means that there will be one copy of <code>VAL</code> created for each source file it is included in.  But it also means that multiple inclusions will not result in multiple definitions of <code>VAL</code> that will collide at link time.  In C, without the <code>static</code> you would need to ensure that only one source file defined <code>VAL</code> while the other source files declared it <code>extern</code>. Usually one would do this by defining it (possibly with an initializer) in a source file and put the <code>extern</code> declaration in a header file.</p>

<p><code>static</code> variables at global level are only visible in their own source file whether they got there via an include or were in the main file.</p>

<hr>

<p><em>Editor's note:</em> In C++, <code>const</code> objects with neither the <code>static</code> nor <code>extern</code> keywords in their declaration are implicitly <code>static</code>.</p>
","92641"
"Visual Studio debugger error: Unable to start program Specified file cannot be found","85396","","<p>I have a solution in C:\full path here\VS2010\blender.sln</p>

<p>This solution contains many projects(around 100). When I compile them, they all work fine. I can run them without any problem, and (quite) everything works (there are some bugs).
One of the projects is ALL_BUILD, but it gives the same error if I try to debug INSTALL(another project). I'm compiling with RELWithDebInfo as configuration, and if I execute the program manually it works. It is outputted in C:\full path here\VS2010\bin\RelWithDebInfo</p>

<p>But if I try to run the compiler, it says </p>

<blockquote>
  <p>""Unable to start program 
  C:\full path here\VS2010\RelWithDebInfo\ALL_BUILD
  Specified file cannot be found""</p>
</blockquote>

<p>I tried to copy the compiled program into the path required by VS, but it raised the same error.</p>

<p>What should I do to solve this? Right now I set up cmake to generate also a mingw project and I compile it and debug it with gdb, but this is a really a slow and impractical workflow, and I would like to use the VS debugger.</p>

<p>I must say that if I compile with Debug as configuration, the program doesn't even start.</p>

<p>I'm using VS2010 Express on Win7 64bit</p>

<p>(This is a big open source program, so I don't know exactly whatever it does)</p>
","<p>Guessing from the information I have, you're not actually compiling the program, but trying to run it. That is, BUILD_ALL is set as your startup project. (It should be in a bold font, unlike the other projects in your solution) If you then try to run/debug, you will get the error you describe, because there is simply nothing to run.</p>

<p>The project is most likely generated via CMAKE and included in your Visual Studio solution. Set any of the projects that do generate a .exe as the startup project (by right-clicking on the project and selecting ""set as startup project"") and you will most likely will be able to start those from within Visual Studio.</p>
","7013665"
"How to pass variable number of arguments to printf/sprintf","85260","","<p>I have a class that holds an ""error"" function that will format some text.  I want to accept a variable number of arguments and then format them using printf.</p>

<p><strong>Example:</strong></p>

<pre><code>class MyClass
{
public:
    void Error(const char* format, ...);
};
</code></pre>

<p>The Error method should take in the parameters, call printf/sprintf to format it and then do something with it.  I don't want to write all the formatting myself so it makes sense to try and figure out how to use the existing formatting.</p>
","<h2>Bad</h2>

<pre><code>void Error(const char* format, ...)
{
    char dest[1024 * 16];
    va_list argptr;
    va_start(argptr, format);
    vsprintf(dest, format, argptr);
    va_end(argptr);
    printf(dest);
}
</code></pre>

<p>This code is not so good. It uses a fixed-size character buffer which can lead to a buffer overrun error if the string is pathologically long. The arbitrary large <code>1024*16</code> size should set off a flag in your head. Also, the <code>printf</code> call could run into problems if <code>dest</code> ends up containing formatting codes. Better would be <code>printf(""%s"", dest)</code>. But even better still would be using <a href=""http://en.cppreference.com/w/cpp/io/c/vfprintf"" rel=""noreferrer""><code>vprintf</code></a> or <code>vfprintf</code>:</p>

<h2>Good</h2>

<pre><code>void Error(const char* format, ...)
{
    va_list argptr;
    va_start(argptr, format);
    vfprintf(stderr, format, argptr);
    va_end(argptr);
}
</code></pre>

<p>If you want to manipulate the string before you display it and really do need it stored in a buffer first, please please please use <strong><code>vsnprintf</code></strong> instead of <code>vsprintf</code>. <code>vsnprintf</code> will prevent an accidental buffer overflow error.</p>
","1056442"
"printf() prints whole array","85216","","<p>Let's assume I have the following code in my <strong>C program</strong>: </p>

<pre><code>#include &lt;stdio.h&gt;

void PrintSomeMessage( char *p );

int main(int argc, char *argv[]) {
    char arr[10] = ""hello"";
    PrintSomeMessage(&amp;arr[0]);
    return 0;   
}

void PrintSomeMessage(char *p)
{
    printf(""p: %s"",p);
}
</code></pre>

<p>Why the output of this would be the whole word ""hello"" instead of a single character ""h""?</p>

<p>I understand, though, that if I put a <code>""%c""</code> in the formatter, it will print just a single letter. But still, the memory address for each letter in this address is different. Please, someone explain it to me?</p>
","<blockquote>
  <p>But still, the memory address for each letter in this address is different.</p>
</blockquote>

<p>Memory address is different but as its array of characters they are sequential. When you pass address of first element and use <code>%s</code>, <code>printf</code> will print all characters starting from given address until it finds <code>'\0'</code>.</p>
","16962191"
"How do I find the current machine's full hostname in C (hostname and domain information)?","85187","","<p>In a C project (POSIX), how do I get the fully qualified name for the current system?</p>

<p>For example, I can get just the hostname of my machine by doing
<code>gethostname()</code> from unistd.h. This might give me <code>machine3</code> in return, but I'm actually looking for <code>machine3.somedomain.com</code> for example.</p>

<p>How do I go about getting this information? I do not want to use a call to system() to do this, if possible.</p>
","<p>To get a fully qualified name for a machine, we must first get the local hostname, and then lookup the canonical name.</p>

<p>The easiest way to do this is by first getting the local hostname using <code>uname()</code> or <code>gethostname()</code> and then performing a lookup with <code>gethostbyname()</code> and looking at the <code>h_name</code> member of the struct it returns. If you are using ANSI c, you <em>must</em> use <code>uname()</code> instead of <code>gethostname()</code>.</p>

<p>Example:</p>

<pre><code>char hostname[1024];
hostname[1023] = '\0';
gethostname(hostname, 1023);
printf(""Hostname: %s\n"", hostname);
struct hostent* h;
h = gethostbyname(hostname);
printf(""h_name: %s\n"", h-&gt;h_name);
</code></pre>

<p>Unfortunately, <code>gethostbyname()</code> is deprecated in the current POSIX specification, as it doesn't play well with IPv6. A more modern version of this code would use <code>getaddrinfo()</code>.</p>

<p>Example:</p>

<pre><code>struct addrinfo hints, *info, *p;
int gai_result;

char hostname[1024];
hostname[1023] = '\0';
gethostname(hostname, 1023);

memset(&amp;hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC; /*either IPV4 or IPV6*/
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_CANONNAME;

if ((gai_result = getaddrinfo(hostname, ""http"", &amp;hints, &amp;info)) != 0) {
    fprintf(stderr, ""getaddrinfo: %s\n"", gai_strerror(gai_result));
    exit(1);
}

for(p = info; p != NULL; p = p-&gt;ai_next) {
    printf(""hostname: %s\n"", p-&gt;ai_canonname);
}

freeaddrinfo(info);
</code></pre>

<p>Of course, this will only work if the machine has a FQDN to give - if not, the result of the <code>getaddrinfo()</code> ends up being the same as the unqualified hostname.</p>
","505546"
"How to get int from stdio in C?","85054","","<p>Having significant trouble with this...</p>

<pre><code>printf(""&gt; "");
int x = getchar();

printf(""got the number: %d"", scanf(""%d"", &amp;x));
</code></pre>

<h2>output</h2>

<pre><code>&gt; 1234
got the number: 1
</code></pre>
","<p>I'm not fully sure that this is what you're looking for, but if your question is how to read an integer using <code>&lt;stdio.h&gt;</code>, then the proper syntax is</p>

<pre><code>int myInt;
scanf(""%d"", &amp;myInt);
</code></pre>

<p>You'll need to do a lot of error-handling to ensure that this works correctly, of course, but this should be a good start.  In particular, you'll need to handle the cases where</p>

<ol>
<li>The <code>stdin</code> file is closed or broken, so you get nothing at all.</li>
<li>The user enters something invalid.</li>
</ol>

<p>To check for this, you can capture the return code from <code>scanf</code> like this:</p>

<pre><code>int result = scanf(""%d"", &amp;myInt);
</code></pre>

<p>If <code>stdin</code> encounters an error while reading, <code>result</code> will be <code>EOF</code>, and you can check for errors like this:</p>

<pre><code>int myInt;
int result = scanf(""%d"", &amp;myInt);

if (result == EOF) {
    /* ... you're not going to get any input ... */
}
</code></pre>

<p>If, on the other hand, the user enters something invalid, like a garbage text string, then you need to read characters out of <code>stdin</code> until you consume all the offending input.  You can do this as follows, using the fact that <code>scanf</code> returns 0 if nothing was read:</p>

<pre><code>int myInt;
int result = scanf(""%d"", &amp;myInt);

if (result == EOF) {
    /* ... you're not going to get any input ... */
}
if (result == 0) {
    while (fgetc(stdin) != '\n') // Read until a newline is found
        ;
}
</code></pre>

<p>Hope this helps!</p>

<p><strong>EDIT</strong>: In response to the more detailed question, here's a more appropriate answer. :-)</p>

<p>The problem with this code is that when you write</p>

<pre><code>printf(""got the number: %d"", scanf(""%d"", &amp;x));
</code></pre>

<p>This is printing the return code from <code>scanf</code>, which is <code>EOF</code> on a stream error, <code>0</code> if nothing was read, and <code>1</code> otherwise.  This means that, in particular, if you enter an integer, this will always print <code>1</code> because you're printing the status code from <code>scanf</code>, not the number you read.</p>

<p>To fix this, change this to</p>

<pre><code>int x;
scanf(""%d"", &amp;x);
/* ... error checking as above ... */
printf(""got the number: %d"", x);
</code></pre>

<p>Hope this helps!</p>
","5087087"
"How to pause in C?","85030","","<p>I am a beginner of C. I run the C program, but the window closes too fast before I can see anything. How can I pause the window?</p>
","<p>you can put</p>

<pre><code>getchar();
</code></pre>

<p>before the return from the main function. That will wait for a character input before exiting the program. </p>

<p>Alternatively you could run your program from a command line and the output would be visible.</p>
","4869519"
"what's the differences between r and rb in fopen","84995","","<p>I tried using fopen in C, the second parameter is the open mode. The two modes ""r"" and ""rb"" tend to confuse me a lot. It seems they are the same. But sometimes it is better to use ""rb"". So, why does ""r"" exist?
Explain it to me in detail or with examples.
Thank You. </p>
","<p>You should use <code>""r""</code> for opening text files.  Different operating systems have slightly different ways of storing text, and this will perform the correct translations so that you don't need to know about the idiosyncracies of the local operating system.  For example, you will know that newlines will always appear as a simple <code>""\n""</code>, regardless of where the code runs.</p>

<p>You should use <code>""rb""</code> if you're opening non-text files, because in this case, the translations are not appropriate.</p>
","2174899"
"What is Equivalent to getch() & getche() in Linux?","84754","","<p>I am not able to find equivalent header file for conio.h in Linux.</p>

<p>Is there any option for <code>getch()</code> &amp; <code>getche()</code> function in Linux?</p>

<p>I want to make a switch case base menu where the user will give his option just by pressing one key &amp; process should be moved ahead. I don't want to let user to press ENTER after pressing his choice.</p>
","<pre><code>#include &lt;termios.h&gt;
#include &lt;stdio.h&gt;

static struct termios old, new;

/* Initialize new terminal i/o settings */
void initTermios(int echo) 
{
  tcgetattr(0, &amp;old); /* grab old terminal i/o settings */
  new = old; /* make new settings same as old settings */
  new.c_lflag &amp;= ~ICANON; /* disable buffered i/o */
  new.c_lflag &amp;= echo ? ECHO : ~ECHO; /* set echo mode */
  tcsetattr(0, TCSANOW, &amp;new); /* use these new terminal i/o settings now */
}

/* Restore old terminal i/o settings */
void resetTermios(void) 
{
  tcsetattr(0, TCSANOW, &amp;old);
}

/* Read 1 character - echo defines echo mode */
char getch_(int echo) 
{
  char ch;
  initTermios(echo);
  ch = getchar();
  resetTermios();
  return ch;
}

/* Read 1 character without echo */
char getch(void) 
{
  return getch_(0);
}

/* Read 1 character with echo */
char getche(void) 
{
  return getch_(1);
}

/* Let's test it out */
int main(void) {
  char c;
  printf(""(getche example) please type a letter: "");
  c = getche();
  printf(""\nYou typed: %c\n"", c);
  printf(""(getch example) please type a letter..."");
  c = getch();
  printf(""\nYou typed: %c\n"", c);
  return 0;
} 
</code></pre>

<p>Just copy these functions and use it. I have found this snippet on google long before and I have saved it, Finally I've opened it after a long time for you!Hope it helps! Thanks</p>
","7469410"
"How to avoid press enter with any getchar()","84605","","<p>This is a ""novato"" question for the C programming language:</p>

<p>In the next code:</p>

<pre><code>#include&lt;stdio.h&gt;

int main(void){   
  int c;   
  while((c=getchar())!= EOF)      
    putchar(c); 
  return 0;
}
</code></pre>

<p>I have to press <kbd>Enter</kbd> to print all the letters I entered with <code>getchar</code>, but I don't want to do this, what I want to do is to press the letter and immediately see the the letter I introduced repeated without pressing <kbd>Enter</kbd>. For example, if I press the letter 'a' I want to see an other 'a' next to it, and so on:</p>

<pre><code>aabbccddeeff.....
</code></pre>

<p>But when I press 'a' nothing happens, I can write other letters and the copy appears only when I press <kbd>Enter</kbd>:</p>

<pre><code>abcdef
abcdef
</code></pre>

<p>How can I do this?</p>

<p>I am using the command <code>cc -o example example.c</code> under Ubuntu for compiling.</p>
","<p>On a linux system, you can modify terminal behaviour using the <code>stty</code> command.  By default, the terminal will buffer all information until <kbd>Enter</kbd> is pressed, before even sending it to the C program.</p>

<p>A quick, dirty, and not-particularly-portable example to change the behaviour from within the program itself:</p>

<pre><code>#include&lt;stdio.h&gt;

int main(void){
  int c;
  /* use system call to make terminal send all keystrokes directly to stdin */
  system (""/bin/stty raw"");
  while((c=getchar())!= '.') {
    /* type a period to break out of the loop, since CTRL-D won't work raw */
    putchar(c);
  }
  /* use system call to set terminal behaviour to more normal behaviour */
  system (""/bin/stty cooked"");
  return 0;
}
</code></pre>

<p>Please note that this isn't really optimal, since it just sort of assumes that <code>stty cooked</code> is the behaviour you want when the program exits, rather than checking what the original terminal settings were.  Also, since all special processing is skipped in raw mode, many key sequences (such as <em>CTRL-C</em> or <em>CTRL-D</em>) won't actually work as you expect them to without explicitly processing them in the program.</p>

<p>You can <code>man stty</code> for more control over the terminal behaviour, depending exactly on what you want to achieve.</p>
","1799024"
"Avoid trailing zeroes in printf()","84592","","<p>I keep stumbling on the format specifiers for the printf() family of functions.  What I want is to be able to print a double (or float) with a maximum given number of digits after the decimal point.  If I use:</p>

<pre><code>printf(""%1.3f"", 359.01335);
printf(""%1.3f"", 359.00999);
</code></pre>

<p>I get</p>

<pre><code>359.013
359.010
</code></pre>

<p>Instead of the desired</p>

<pre><code>359.013
359.01
</code></pre>

<p>Can anybody help me?</p>
","<p>This can't be done with the normal <code>printf</code> format specifiers.  The closest you could get would be:</p>

<pre><code>printf(""%.6g"", 359.013); // 359.013
printf(""%.6g"", 359.01);  // 359.01
</code></pre>

<p>but the "".6"" is the <em>total</em> numeric width so</p>

<pre><code>printf(""%.6g"", 3.01357); // 3.01357
</code></pre>

<p>breaks it.</p>

<p>What you <em>can</em> do is to <code>sprintf(""%.20g"")</code> the number to a string buffer then manipulate the string to only have N characters past the decimal point.</p>

<p>Assuming your number is in the variable num, the following function will remove all but the first <code>N</code> decimals, then strip off the trailing zeros (and decimal point if they were all zeros).</p>

<pre><code>char str[50];
sprintf (str,""%.20g"",num);  // Make the number.
morphNumericString (str, 3);
:    :
void morphNumericString (char *s, int n) {
    char *p;
    int count;

    p = strchr (s,'.');         // Find decimal point, if any.
    if (p != NULL) {
        count = n;              // Adjust for more or less decimals.
        while (count &gt;= 0) {    // Maximum decimals allowed.
             count--;
             if (*p == '\0')    // If there's less than desired.
                 break;
             p++;               // Next character.
        }

        *p-- = '\0';            // Truncate string.
        while (*p == '0')       // Remove trailing zeros.
            *p-- = '\0';

        if (*p == '.') {        // If all decimals were zeros, remove ""."".
            *p = '\0';
        }
    }
}
</code></pre>

<hr>

<p>If you're not happy with the truncation aspect (which would turn <code>0.12399</code> into <code>0.123</code> rather than rounding it to <code>0.124</code>), you can actually use the rounding facilities already provided by <code>printf</code>. You just need to analyse the number before-hand to dynamically create the widths, then use those to turn the number into a string:</p>

<pre><code>#include &lt;stdio.h&gt;

void nDecimals (char *s, double d, int n) {
    int sz; double d2;

    // Allow for negative.

    d2 = (d &gt;= 0) ? d : -d;
    sz = (d &gt;= 0) ? 0 : 1;

    // Add one for each whole digit (0.xx special case).

    if (d2 &lt; 1) sz++;
    while (d2 &gt;= 1) { d2 /= 10.0; sz++; }

    // Adjust for decimal point and fractionals.

    sz += 1 + n;

    // Create format string then use it.

    sprintf (s, ""%*.*f"", sz, n, d);
}

int main (void) {
    char str[50];
    double num[] = { 40, 359.01335, -359.00999,
        359.01, 3.01357, 0.111111111, 1.1223344 };
    for (int i = 0; i &lt; sizeof(num)/sizeof(*num); i++) {
        nDecimals (str, num[i], 3);
        printf (""%30.20f -&gt; %s\n"", num[i], str);
    }
    return 0;
}
</code></pre>

<p>The whole point of <code>nDecimals()</code> in this case is to correctly work out the field widths, then format the number using a format string based on that. The test harness <code>main()</code> shows this in action:</p>

<pre><code>  40.00000000000000000000 -&gt; 40.000
 359.01335000000000263753 -&gt; 359.013
-359.00999000000001615263 -&gt; -359.010
 359.00999999999999090505 -&gt; 359.010
   3.01357000000000008200 -&gt; 3.014
   0.11111111099999999852 -&gt; 0.111
   1.12233439999999995429 -&gt; 1.122
</code></pre>

<p>Once you have the correctly rounded value, you can once again pass that to <code>morphNumericString()</code> to remove trailing zeros by simply changing:</p>

<pre><code>nDecimals (str, num[i], 3);
</code></pre>

<p>into:</p>

<pre><code>nDecimals (str, num[i], 3);
morphNumericString (str, 3);
</code></pre>

<p>(or calling <code>morphNumericString</code> at the end of <code>nDecimals</code> but, in that case, I'd probably just combine the two into one function), and you end up with:</p>

<pre><code>  40.00000000000000000000 -&gt; 40
 359.01335000000000263753 -&gt; 359.013
-359.00999000000001615263 -&gt; -359.01
 359.00999999999999090505 -&gt; 359.01
   3.01357000000000008200 -&gt; 3.014
   0.11111111099999999852 -&gt; 0.111
   1.12233439999999995429 -&gt; 1.122
</code></pre>
","277810"
"""register"" keyword in C?","84529","","<p>What does the <code>register</code> keyword do in C language?  I have read that it is used for optimizing but is not clearly defined in any standard.  Is it still relevant and if so, when would you use it?</p>
","<p>It's a hint to the compiler that the variable will be heavily used and that you recommend it be kept in a processor register if possible.</p>

<p>Most modern compilers do that automatically, and are better at picking them than us humans.</p>
","578213"
"How to Initialize char array from a string","84436","","<p>I want to do the following</p>

<pre><code>char a[] = { 'A', 'B', 'C', 'D'};
</code></pre>

<p>But I do not want to write these characters separately. I want something like</p>

<pre><code>#define S ""ABCD""

char a[] = { S[0], S[1], S[2], S[3] };
</code></pre>

<p>But this won't compile (gcc says 'initializer element is not constant').</p>

<p>I tried replacing the #define line with</p>

<pre><code>const char S[] = ""ABCD"";
</code></pre>

<p>But that doesn't seem to help.</p>

<p>How can I do this (or something similar) that lets me write the ""ABCD"" as a normal 'string', and not as four separate characters?</p>

<p>P.S. It seems that people do not read the question correctly...</p>

<p>I can't get the following code to compile:</p>

<pre><code>const char S[] = ""ABCD"";
char t[] = { S[0], S[1], S[2], S[3] };
char u[] = { S[3], S[2], S[1], S[0] };
</code></pre>
","<p>You can't - in C. In C initializing of global and local static variables are designed such that the compiler can put the values statically into the executable. It can't handle non-constant expressions as initializers. And only in C99, you can use non-constant expression in aggregate initializers - not so in C89! </p>

<p>In your case, since your array is an array containing characters, each element has to be an arithmetic constant expression. Look what it says about those</p>

<blockquote>
  <p>An arithmetic constant expression shall have arithmetic type and shall only have
  operands that are integer constants, ﬂoating constants, enumeration constants, character
  constants, and sizeof expressions.</p>
</blockquote>

<p>Surely this is not satisfied by your initializer, which uses an operand of pointer type. Surely, the other way is to initialize your array using a string literal, as it explains too</p>

<blockquote>
  <p>All the expressions in an initializer for an object that has static storage duration shall be constant expressions or string literals.</p>
</blockquote>

<p>All quotes are taken out of the C99 TC3 committee draft. So to conclude, what you want to do - using non-constant expression - can't be done with C. You have several options: </p>

<ul>
<li>Write your stuff multiple times - one time reversed, and the other time not reversed. </li>
<li>Change the language - C++ can do that all.</li>
<li>If you <em>really</em> want to do that stuff, use an array of <code>char const*</code> instead</li>
</ul>

<p>Here is what i mean by the last option</p>

<pre><code>char const c[] = ""ABCD"";
char const *f[] = { &amp;c[0], &amp;c[1], &amp;c[2], &amp;c[3] };
char const *g[] = { &amp;c[3], &amp;c[2], &amp;c[1], &amp;c[0] };
</code></pre>

<p>That works fine, as an address constant expression is used to initialize the pointers</p>

<blockquote>
  <p>An address constant is a null pointer, a pointer to an lvalue designating an object of static storage duration, or a pointer to a function designator; it shall be created explicitly using the unary &amp; operator or an integer constant cast to pointer type, or implicitly by the use of an expression of array or function type. The array-subscript [] and member-access . and -> operators, the address &amp; and indirection * unary operators, and pointer casts may be used in the creation of an address constant, but the value of an object shall not be accessed by use of these operators.</p>
</blockquote>

<p>You may have luck tweaking your compiler options - another quote:</p>

<blockquote>
  <p>An implementation may accept other forms of constant expressions.</p>
</blockquote>
","965851"
"Implicit function declarations in C","84422","","<p>What is meant by the term ""implicit declaration of a function"". Call to standard library function without including the appropriate header file produces a warning as in case of </p>

<pre><code>int main(){
  printf(""How is this not an error ?"");
  return 0;
}
</code></pre>

<p>Shouldn't using a function without declaring it be an error ? Please explain in detail. I searched this site and found similar questions but could not find a definitive answer. Most answers said something about including the header file to get rid of the warning. But i want to know how is this not an error.</p>
","<p>It should be considered an error. But C is an ancient language, so it's only a warning.<br>
Compiling with <code>-Werror</code> (gcc) fixes this problem.<br></p>

<p>When C doesn't find a declaration, it assumes this implicit declaration: <code>int f();</code>, which means the function can receive whatever you give it, and returns an integer. If this happens to be close enough (and in case of <code>printf</code>, it is), then things can work. In some cases (e.g. the function actually returns a pointer, and pointers are larger than ints), it may cause real trouble.</p>

<p>Note that this was fixed in newer C standards (C99, C11). In these standards, this is an error. However, <code>gcc</code> doesn't implement these standards by default, so you still get the warning.</p>
","9182835"
"Why does the arrow (->) operator in C exist?","84415","","<p>The dot (<code>.</code>) operator is used to access a member of a struct, while the arrow operator (<code>-&gt;</code>) in C is used to access a member of a struct which is referenced by the pointer in question.</p>

<p>The pointer itself does not have any members which could be accessed with the dot operator (it's actually only a number describing a location in virtual memory so it doesn't have any members). So, there would be no ambiguity if we just defined the dot operator to automatically dereference the pointer if it is used on a pointer (an information which is known to the compiler at compile time afaik).</p>

<p>So why have the language creators decided to make things more complicated by adding this seemingly unnecessary operator? What is the big design decision?</p>
","<p>I'll interpret your question as two questions: 1) why <code>-&gt;</code> even exists, and 2) why <code>.</code> does not automatically dereference the pointer. Answers to both questions have historical roots.</p>

<p><strong>Why does <code>-&gt;</code> even exist?</strong></p>

<p>In one of the very first versions of C language (which I will refer as CRM for ""<a href=""https://www.bell-labs.com/usr/dmr/www/cman.pdf"" rel=""noreferrer"">C Reference Manual</a>"", which came with 6th Edition Unix in May 1975), operator <code>-&gt;</code> had very exclusive meaning, not synonymous with <code>*</code> and <code>.</code> combination</p>

<p>The C language described by CRM was very different from the modern C in many respects. In CRM struct members implemented the global concept of <em>byte offset</em>, which could be added to any address value with no type restrictions. I.e. all names of all struct members had independent global meaning (and, therefore, had to be unique). For example you could declare</p>

<pre><code>struct S {
  int a;
  int b;
};
</code></pre>

<p>and name <code>a</code> would stand for offset 0, while name <code>b</code> would stand for offset 2 (assuming <code>int</code> type of size 2 and no padding). The language required all members of all structs in the translation unit either have unique names or stand for the same offset value. E.g. in the same translation unit you could additionally declare</p>

<pre><code>struct X {
  int a;
  int x;
};
</code></pre>

<p>and that would be OK, since the name <code>a</code> would consistently stand for offset 0. But this additional declaration</p>

<pre><code>struct Y {
  int b;
  int a;
};
</code></pre>

<p>would be formally invalid, since it attempted to ""redefine"" <code>a</code> as offset 2 and <code>b</code> as offset 0.</p>

<p>And this is where the <code>-&gt;</code> operator comes in. Since every struct member name had its own self-sufficient global meaning, the language supported expressions like these</p>

<pre><code>int i = 5;
i-&gt;b = 42;  /* Write 42 into `int` at address 7 */
100-&gt;a = 0; /* Write 0 into `int` at address 100 */
</code></pre>

<p>The first assignment was interpreted by the compiler as ""take address <code>5</code>, add offset <code>2</code> to it and assign <code>42</code> to the <code>int</code> value at the resultant address"". I.e. the above would assign <code>42</code> to <code>int</code> value at address <code>7</code>. Note that this use of <code>-&gt;</code> did not care about the type of the expression on the left-hand side. The left hand side was interpreted as an rvalue numerical address (be it a pointer or an integer).</p>

<p>This sort of trickery was not possible with <code>*</code> and <code>.</code> combination. You could not do</p>

<pre><code>(*i).b = 42;
</code></pre>

<p>since <code>*i</code> is already an invalid expression. The <code>*</code> operator, since it is separate from <code>.</code>, imposes more strict type requirements on its operand. To provide a capability to work around this limitation CRM introduced the <code>-&gt;</code> operator, which is independent from the type of the left-hand operand.</p>

<p>As Keith noted in the comments, this difference between <code>-&gt;</code> and <code>*</code>+<code>.</code> combination is what CRM is referring to as ""relaxation of the requirement"" in 7.1.8: <em>Except for the relaxation of the requirement that <code>E1</code> be of pointer type, the expression <code>E1−&gt;MOS</code> is exactly equivalent to <code>(*E1).MOS</code></em></p>

<p>Later, in K&amp;R C many features originally described in CRM were significantly reworked. The idea of ""struct member as global offset identifier"" was completely removed. And the functionality of <code>-&gt;</code> operator became fully identical to the functionality of <code>*</code> and <code>.</code> combination.</p>

<p><strong>Why can't <code>.</code> dereference the pointer automatically?</strong></p>

<p>Again, in CRM version of the language the left operand of the <code>.</code> operator was required to be an <em>lvalue</em>. That was the <em>only</em> requirement imposed on that operand (and that's what made it different from <code>-&gt;</code>, as explained above). Note that CRM did <em>not</em> require the left operand of <code>.</code> to have a struct type. It just required it to be an lvalue, <em>any</em> lvalue. This means that in CRM version of C you could write code like this</p>

<pre><code>struct S { int a, b; };
struct T { float x, y, z; };

struct T c;
c.b = 55;
</code></pre>

<p>In this case the compiler would write <code>55</code> into an <code>int</code> value positioned at byte-offset 2 in the continuous memory block known as <code>c</code>, even though type <code>struct T</code> had no field named <code>b</code>. The compiler would not care about the actual type of <code>c</code> at all. All it cared about is that <code>c</code> was an lvalue: some sort of writable memory block. </p>

<p>Now note that if you did this</p>

<pre><code>S *s;
...
s.b = 42;
</code></pre>

<p>the code would be considered valid (since <code>s</code> is also an lvalue) and the compiler would simply attempt to write data <em>into the pointer <code>s</code> itself</em>, at byte-offset 2. Needless to say, things like this could easily result in memory overrun, but the language did not concern itself with such matters.</p>

<p>I.e. in that version of the language your proposed idea about overloading operator <code>.</code> for pointer types would not work: operator <code>.</code> already had very specific meaning when used with pointers (with lvalue pointers or with any lvalues at all). It was very weird functionality, no doubt. But it was there at the time.</p>

<p>Of course, this weird functionality is not a very strong reason against introducing overloaded <code>.</code> operator for pointers (as you suggested) in the reworked version of C - K&amp;R C. But it hasn't been done. Maybe at that time there was some legacy code written in CRM version of C that had to be supported.</p>

<p>(The URL for the 1975 C Reference Manual may not be stable. Another copy, possibly with some subtle differences, is <a href=""https://www.student.cs.uwaterloo.ca/~cs136/resources/cman.pdf"" rel=""noreferrer"">here</a>.)</p>
","13366168"
"C - casting int to char and append char to char","84370","","<p>I am making my first parallel application, but I am stuck with basics of C. I need to know, how to cast int to char and then how to append one char to another. </p>

<p>It you could help me please, i would be glad. Thank you.</p>
","<p>You can use <a href=""http://www.daniweb.com/forums/thread11049.html"" rel=""nofollow noreferrer"">itoa</a> function to convert the integer to a string.</p>

<p>You can use <a href=""http://en.wikipedia.org/wiki/Strcat"" rel=""nofollow noreferrer"">strcat</a> function to append characters in a string at the end of another string.</p>

<p>If you want to convert a integer to a character, just do the following - </p>

<pre><code>int a = 65;
char c = (char) a;
</code></pre>

<p>Note that since characters are smaller in size than integer, this casting may cause a loss of data. It's better to declare the character variable as <code>unsigned</code> in this case (though you may still lose data).</p>

<p>To do a light reading about type conversion, go <a href=""http://en.wikipedia.org/wiki/Type_conversion"" rel=""nofollow noreferrer"">here</a>.</p>

<p>If you are still having trouble, comment on this answer.</p>

<p><strong>Edit</strong></p>

<p>Go <a href=""https://stackoverflow.com/questions/308695/c-string-concatenation/308712#308712"">here</a> for a more suitable example of joining characters.</p>

<p>Also some more useful link is given below - </p>

<ol>
<li><a href=""http://www.cplusplus.com/reference/clibrary/cstring/strncat/"" rel=""nofollow noreferrer"">http://www.cplusplus.com/reference/clibrary/cstring/strncat/</a></li>
<li><a href=""http://www.cplusplus.com/reference/clibrary/cstring/strcat/"" rel=""nofollow noreferrer"">http://www.cplusplus.com/reference/clibrary/cstring/strcat/</a></li>
</ol>

<p><strong>Second Edit</strong></p>

<pre><code>char msg[200];
int msgLength;
char rankString[200];

........... // Your message has arrived
msgLength = strlen(msg);
itoa(rank, rankString, 10); // I have assumed rank is the integer variable containing the rank id

strncat( msg, rankString, (200 - msgLength) );  // msg now contains previous msg + id

// You may loose some portion of id if message length + id string length is greater than 200
</code></pre>

<p><strong>Third Edit</strong></p>

<p>Go to this <a href=""http://www.daniweb.com/forums/post701067.html#post701067"" rel=""nofollow noreferrer"">link</a>. Here you will find an implementation of <code>itoa</code>. Use that instead.</p>
","5008441"
"Testing pointers for validity (C/C++)","84113","","<p>Is there any way to determine (programatically, of course) if a given pointer is ""valid""? Checking for NULL is easy, but what about things like 0x00001234? When trying to dereference this kind of pointer an exception/crash occurs.</p>

<p>A cross-platform method is preferred, but platform-specific (for Windows and Linux) is also ok.</p>

<p><strong>Update for clarification:</strong>
The problem is not with stale/freed/uninitialized pointers; instead, I'm implementing an API that takes pointers from the caller (like a pointer to a string, a file handle, etc.). The caller can send (in purpose or by mistake) an invalid value as the pointer. How do I prevent a crash?</p>
","<blockquote>
  <p><strong>Update for clarification:</strong> The problem is not with stale, freed or uninitialized pointers; instead, I'm implementing an API that takes pointers from the caller (like a pointer to a string, a file handle, etc.). The caller can send (in purpose or by mistake) an invalid value as the pointer. How do I prevent a crash?</p>
</blockquote>

<p>You can't make that check. There is simply no way you can check whether a pointer is ""valid"". You have to trust that when people use a function that takes a pointer, those people know what they are doing. If they pass you 0x4211 as a pointer value, then you have to trust it points to address 0x4211. And if they ""accidentally"" hit an object, then even if you would use some scary operation system function (IsValidPtr or whatever), you would still slip into a bug and not fail fast.</p>

<p>Start using null pointers for signaling this kind of thing and tell the user of your library that they should not use pointers if they tend to accidentally pass invalid pointers, seriously :)</p>
","551124"
"Implementing a HashMap","83867","","<p>How to go about creating a Hashmap in C from scratch ? 
What would be the parameters taken into consideration and what how would you test the hashmap as to how good it is ? As in what would be benchmark test cases which you require to run before you say that your hash map is complete.</p>
","<p>Well if you know the basics behind them, it shouldn't be too hard. </p>

<p>Generally you create an array called ""buckets"" that contain the key and value, with an optional pointer to create a linked list.</p>

<p>When you access the hash table with a key, you process the key with a custom hash function which will return an integer. You then take the modulus of the result and that is the location of your array index or ""bucket"". Then you check the unhashed key with the stored key, and if it matches, then you found the right place. </p>

<p>Otherwise, you've had a ""collision"" and must crawl through the linked list and compare keys until you match. (note some implementations use a binary tree instead of linked list for collisions).</p>

<p>Check out this fast hash table implementation:</p>

<p><a href=""http://attractivechaos.awardspace.com/khash.h.html"" rel=""noreferrer"">http://attractivechaos.awardspace.com/khash.h.html</a></p>
","838413"
"Concatenate two char* strings in a C program","83844","","<p>I wrote the following C program:</p>

<pre><code>int main(int argc, char** argv) {

    char* str1;
    char* str2;
    str1 = ""sssss"";
    str2 = ""kkkk"";
    printf(""%s"", strcat(str1, str2));

    return (EXIT_SUCCESS);
 }
</code></pre>

<p>I want to concatenate the two strings, but it doesn't work.</p>
","<p>The way it works is to:</p>

<ol>
<li>Malloc memory large enough to hold copies of str1 and str2</li>
<li>Then it copies str1 into str3</li>
<li>Then it appends str2 onto the end of str3</li>
<li>When you're using str3 you'd normally free it <code>free (str3);</code></li>
</ol>

<p>Here's an example for you play with. It's very simple and has no hard-coded lengths. You can try it here: <a href=""http://ideone.com/d3g1xs"" rel=""nofollow noreferrer"">http://ideone.com/d3g1xs</a></p>

<p>See <a href=""https://stackoverflow.com/questions/2215445/are-there-machines-where-sizeofchar-1"">this post</a> for information about size of char</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;memory.h&gt;

int main(int argc, char** argv) {

      char* str1;
      char* str2;
      str1 = ""sssss"";
      str2 = ""kkkk"";
      char * str3 = (char *) malloc(1 + strlen(str1)+ strlen(str2) );
      strcpy(str3, str1);
      strcat(str3, str2);
      printf(""%s"", str3);

      return 0;
 }
</code></pre>
","18468459"
"How to make a char string from a C macro's value?","83824","","<p>For example, how to avoid writing the 'func_name' twice?</p>

<pre><code>#ifndef TEST_FUN
#  define TEST_FUN func_name
#  define TEST_FUN_NAME ""func_name""
#endif
</code></pre>

<p>I'd like to follow the <a href=""http://en.wikipedia.org/wiki/Single_Point_of_Truth"" rel=""noreferrer"">Single Point of Truth</a> rule.</p>

<p>Version of C preprocessor:</p>

<pre><code>$ cpp --version
cpp (GCC) 4.1.2 20070626 (Red Hat 4.1.2-14)
</code></pre>
","<p><a href=""https://stackoverflow.com/users/9611/shoosh"">He who is Shy</a><sup>*</sup> gave you the germ of an <a href=""https://stackoverflow.com/a/195980/15168"">answer</a>, but only the germ.  The basic technique for converting a value into a string in the C pre-processor is indeed via the '#' operator, but a simple transliteration of the proposed solution gets a compilation error:</p>

<pre><code>#define TEST_FUNC test_func
#define TEST_FUNC_NAME #TEST_FUNC

#include &lt;stdio.h&gt;
int main(void)
{
    puts(TEST_FUNC_NAME);
    return(0);
}
</code></pre>

<p>The syntax error is on the 'puts()' line - the problem is a 'stray #' in the source.</p>

<p>In section 6.10.3.2 of the C standard, 'The # operator', it says:</p>

<blockquote>
  <p>Each # preprocessing token in the
  replacement list for a function-like
  macro shall be followed by a parameter
  as the next preprocessing token in the
  replacement list.</p>
</blockquote>

<p>The trouble is that you can convert macro arguments to strings -- but you can't convert random items that are not macro arguments.</p>

<p>So, to achieve the effect you are after, you most certainly have to do some extra work.</p>

<pre><code>#define FUNCTION_NAME(name) #name
#define TEST_FUNC_NAME  FUNCTION_NAME(test_func)

#include &lt;stdio.h&gt;

int main(void)
{
    puts(TEST_FUNC_NAME);
    return(0);
}
</code></pre>

<p>I'm not completely clear on how you plan to use the macros, and how you plan to avoid repetition altogether.  This slightly more elaborate example might be more informative.  The use of a macro equivalent to STR_VALUE is an idiom that is necessary to get the desired result.</p>

<pre><code>#define STR_VALUE(arg)      #arg
#define FUNCTION_NAME(name) STR_VALUE(name)

#define TEST_FUNC      test_func
#define TEST_FUNC_NAME FUNCTION_NAME(TEST_FUNC)

#include &lt;stdio.h&gt;

static void TEST_FUNC(void)
{
    printf(""In function %s\n"", TEST_FUNC_NAME);
}

int main(void)
{
    puts(TEST_FUNC_NAME);
    TEST_FUNC();
    return(0);
}
</code></pre>

<hr>

<p><sup>* At the time when this answer was first written, <a href=""https://stackoverflow.com/users/9611/shoosh"">shoosh</a>'s name used 'Shy' as part of the name.</sup></p>
","196018"
"C multi-line macro: do/while(0) vs scope block","83754","","<blockquote>
  <p><strong>Possible Duplicates:</strong><br>
  <a href=""https://stackoverflow.com/questions/923822/whats-the-use-of-do-while0-when-we-define-a-macro"">What&rsquo;s the use of do while(0) when we define a macro?</a><br>
  <a href=""https://stackoverflow.com/questions/154136/why-are-there-sometimes-meaningless-do-while-and-if-else-statements-in-c-c-macr"">Why are there sometimes meaningless do/while and if/else statements in C/C++ macros? </a><br>
  <a href=""https://stackoverflow.com/questions/257418/do-while-0-what-is-it-good-for"">do { &hellip; } while (0)  what is it good for?</a>  </p>
</blockquote>

<p>I've seen some multi-line C macros that are wrapped inside a do/while(0) loop like:</p>

<pre>
#define FOO \
  do { \
    do_stuff_here \
    do_more_stuff \
  } while (0)
</pre>

<p>What are the benefits (if any) of writing the code that way as opposed to using a basic block:</p>

<pre>
#define FOO \
  { \
    do_stuff_here \
    do_more_stuff \
  }
</pre>
","<p><a href=""http://bytes.com/groups/c/219859-do-while-0-macro-substitutions"" rel=""noreferrer"">http://bytes.com/groups/c/219859-do-while-0-macro-substitutions</a></p>

<p>Andrey Tarasevich:</p>

<p>The whole idea of using 'do/while' version is to make a macro which will
expand into a regular statement, not into a compound statement. This is
done in order to make the use of function-style macros uniform with the
use of ordinary functions in all contexts.</p>

<p>Consider the following code sketch</p>

<pre><code>if (&lt;condition&gt;)
  foo(a);
else
  bar(a);
</code></pre>

<p>where 'foo' and 'bar' are ordinary functions. Now imagine that you'd
like to replace function 'foo' with a macro of the above nature</p>

<pre><code>if (&lt;condition&gt;)
  CALL_FUNCS(a);
else
  bar(a);
</code></pre>

<p>Now, if your macro is defined in accordance with the second approach
(just '{' and '}') the code will no longer compile, because the 'true'
branch of 'if' is now represented by a compound statement. And when you
put a ';' after this compound statement, you finished the whole 'if'
statement, thus orphaning the 'else' branch (hence the compilation error).</p>

<p>One way to correct this problem is to remember not to put ';' after
macro ""invocations""</p>

<pre><code>if (&lt;condition&gt;)
  CALL_FUNCS(a)
else
  bar(a);
</code></pre>

<p>This will compile and work as expected, but this is not uniform. The
more elegant solution is to make sure that macro expand into a regular
statement, not into a compound one. One way to achieve that is to define
the macro as follows</p>

<pre><code>#define CALL_FUNCS(x) \
do { \
  func1(x); \
  func2(x); \
  func3(x); \
} while (0)
</code></pre>

<p>Now this code</p>

<pre><code>if (&lt;condition&gt;)
  CALL_FUNCS(a);
else
  bar(a);
</code></pre>

<p>will compile without any problems.</p>

<p>However, note the small but important difference between my definition
of <code>CALL_FUNCS</code> and the first version in your message. I didn't put a
<code>;</code> after <code>} while (0)</code>. Putting a <code>;</code> at the end of that definition
would immediately defeat the entire point of using 'do/while' and make
that macro pretty much equivalent to the compound-statement version.</p>

<p>I don't know why the author of the code you quoted in your original
message put this <code>;</code> after <code>while (0)</code>. In this form both variants are
equivalent. The whole idea behind using 'do/while' version is not to
include this final <code>;</code> into the macro (for the reasons that I explained
above).</p>
","1067238"
"Why do you have to link the math library in C?","83678","","<p>If I include <code>&lt;stdlib.h&gt;</code> or <code>&lt;stdio.h&gt;</code> in a C program I don't have to link these when compiling but I do have to link to <code>&lt;math.h&gt;</code>, using <code>-lm</code> with gcc, for example:</p>

<pre><code>gcc test.c -o test -lm
</code></pre>

<p>What is the reason for this? Why do I have to explicitly link the math library but not the other libraries?</p>
","<p>The functions in <code>stdlib.h</code> and <code>stdio.h</code> have implementations in <code>libc.so</code> (or <code>libc.a</code> for static linking), which is linked into your executable by default (as if <code>-lc</code> were specified).  GCC can be instructed to avoid this automatic link with the <code>-nostdlib</code> or <code>-nodefaultlibs</code> options.</p>

<p>The math functions in <code>math.h</code> have implementations in <code>libm.so</code> (or <code>libm.a</code> for static linking), and <code>libm</code> is not linked in by default.  There are historical reasons for this <code>libm</code>/<code>libc</code> split, none of them very convincing.</p>

<p>Interestingly, the C++ runtime <code>libstdc++</code> requires <code>libm</code>, so if you compile a C++ program with GCC (<code>g++</code>), you will automatically get <code>libm</code> linked in.</p>
","1033940"
"Convert char * to LPWSTR","83616","","<p>I am trying to convert a program for multibyte character to Unicode.</p>

<p>I have gone through the program and preceded the string literals with <code>L</code> so they look like <code>L""string""</code>.</p>

<p>This has worked but I am now left with a C style string that won't conform. I have tried the <code>L</code> and putting it in <code>TEXT()</code> but the <code>L</code> gets added to the variable name -- not the string -- if I use <code>TEXT()</code>.</p>

<p>I have tried making it a <code>TCHAR</code> but then it complains that it cannot convert a <code>TCHAR</code> to a <code>char *</code>. </p>

<p>What options am I left with?</p>

<p>Before you downvote like crazy I know C and C++ are different. It is an old in-house C library that has been used in C++ projects for several years now.</p>
","<p>The <a href=""http://en.cppreference.com/w/cpp/string/multibyte/mbstowcs""><code>std::mbstowcs</code></a> function is what you are looking for:</p>

<pre><code> char text[] = ""something"";
 wchar_t wtext[20];
 mbstowcs(wtext, text, strlen(text)+1);//Plus null
 LPWSTR ptr = wtext;
</code></pre>

<p>--> ED: The ""L"" prefix only works on string literals, not variables. &lt;--  </p>
","6858585"
"How to print uint32_t and uint16_t variables value?","83402","","<p>I am trying to print uint16_t and uint32_t value but it is not giving desired o/p.</p>

<pre><code>#include&lt;stdio.h&gt;
#include &lt;netinet/in.h&gt;  

int main()
{
     uint32_t a=12,a1;
     uint16_t b=1,b1;
     a1=htonl(a);
     printf(""%d---------%d"",a1);
     b1=htons(b);
     printf(""\n%d-----%d"",b,b1);
     return 0;
}
</code></pre>

<p>I also used</p>

<pre><code> printf(""%""PRIu32, a);
</code></pre>

<p>which is showing an error.</p>

<p>How to print these value and what will be the desired o/p</p>
","<p>You need to include <code>inttypes.h</code> if you want all those nifty new format specifiers for the <code>intN_t</code> types and their brethren, and that <em>is</em> the correct (ie, portable) way to do it, provided your compiler complies with C99. You shouldn't use the standard ones like <code>%d</code> or <code>%u</code> in case the sizes are different to what you think.</p>

<p>It includes <code>stdint.h</code> and extends it with quite a few other things, such as the macros that can be used for the <code>printf/scanf</code> family of calls. This is covered in section 7.8 of the ISO C99 standard.</p>

<p>For example, the following program:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;inttypes.h&gt;
int main (void) {
    uint32_t a=1234;
    uint16_t b=5678;
    printf(""%"" PRIu32 ""\n"",a);
    printf(""%"" PRIu16 ""\n"",b);
    return 0;
}
</code></pre>

<p>outputs:</p>

<pre><code>1234
5678
</code></pre>
","12120500"
"Easy way to use variables of enum types as string in C?","83299","","<p>Here's what I am trying to do:  </p>

<pre><code>typedef enum { ONE, TWO, THREE } Numbers;
</code></pre>

<p>I am trying to write a function that would do a switch case similar to the following: </p>

<pre><code>char num_str[10];
int process_numbers_str(Numbers num) {
  switch(num) {
    case ONE:
    case TWO:
    case THREE:
    {
      strcpy(num_str, num); //some way to get the symbolic constant name in here?
    } break;
    default:
      return 0; //no match
  return 1;
}
</code></pre>

<p>Instead of defining at every case, is there a way to set it using the enum variable like I am trying to do above?</p>
","<p>There's no built-in solution. The easiest way is with an array of <code>char*</code> where the enum's int value indexes to a string containing the descriptive name of that enum. If you have a sparse <code>enum</code> (one that doesn't start at 0 or has gaps in the numbering) where some of the <code>int</code> mappings are high enough to make an array-based mapping impractical then you could use a hash table instead.</p>
","147283"
"Converting char* to float or double","83045","","<p>I have a value I read in from a file and is stored as a char*. The value is a monetary number, #.##, ##.##, or ###.##. I want to convert the char* to a number I can use in calculations, I've tried atof and strtod and they just give me garbage numbers. What is the correct way to do this, and why is the way I am doing it wrong?</p>

<p>This is essentially what I am doing, just the char* value is read in from a file. When I print out the temp and ftemp variables they are just garbage, gigantic negative numbers.</p>

<p>Another Edit:</p>

<p>I am running exactly this in gcc</p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
 char *test = ""12.11"";
 double temp = strtod(test,NULL);
 float ftemp = atof(test);
 printf(""price: %f, %f"",temp,ftemp);
 return 0;
</code></pre>

<p>}</p>

<p>and my output is price: 3344336.000000, 3344336.000000</p>

<p>Edit: Here is my code</p>

<pre><code>if(file != NULL)
    {
        char curLine [128];
        while(fgets(curLine, sizeof curLine, file) != NULL)
        {               
            tempVal = strtok(curLine,""|"");          
            pairs[i].name= strdup(tempVal);
            tempVal = strtok(NULL,""|"");
            pairs[i].value= strdup(tempVal);
            ++i;
        }
        fclose(file);
    }

    double temp = strtod(pairs[0].value,NULL);
    float ftemp = atof(pairs[0].value);
    printf(""price: %d, %f"",temp,ftemp);
</code></pre>

<p>my input file is very simple name, value pairs like this:</p>

<pre><code>NAME|VALUE
NAME|VALUE
NAME|VALUE
</code></pre>

<p>with the value being dollar amounts</p>

<p>SOLVED: Thank you all, I was using %d instead of %f and didn't have the right headers included.</p>
","<p>You are missing an include :
<code>#include &lt;stdlib.h&gt;</code>, so GCC creates an implicit declaration of <code>atof</code> and <code>atod</code>, leading to garbage values.</p>

<p>And the format specifier for double is <code>%f</code>, not <code>%d</code> (that is for integers).</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int main()
{
  char *test = ""12.11"";
  double temp = strtod(test,NULL);
  float ftemp = atof(test);
  printf(""price: %f, %f"",temp,ftemp);
  return 0;
}
/* Output */
price: 12.110000, 12.110000
</code></pre>
","10606023"
"Is gcc's __attribute__((packed)) / #pragma pack unsafe?","82972","","<p>In C, the compiler will lay out members of a struct in the order in which they're declared, with possible padding bytes inserted between members, or after the last member, to ensure that each member is aligned properly.</p>

<p>gcc provides a language extension, <code>__attribute__((packed))</code>, which tells the compiler not to insert padding, allowing struct members to be misaligned.  For example, if the system normally requires all <code>int</code> objects to have 4-byte alignment, <code>__attribute__((packed))</code> can cause <code>int</code> struct members to be allocated at odd offsets.</p>

<p>Quoting the gcc documentation:</p>

<blockquote>
  <p>The `packed' attribute specifies that a variable or structure field
  should have the smallest possible alignment--one byte for a  variable,
  and one bit for a field, unless you specify a larger value with the
  `aligned' attribute.</p>
</blockquote>

<p>Obviously the use of this extension can result in smaller data requirements but slower code, as the compiler must (on some platforms) generate code to access a misaligned member a byte at a time.</p>

<p>But are there any cases where this is unsafe?  Does the compiler always generate correct (though slower) code to access misaligned members of packed structs?  Is it even possible for it to do so in all cases?</p>
","<p>Yes, <code>__attribute__((packed))</code> is potentially unsafe on some systems.  The symptom probably won't show up on an x86, which just makes the problem more insidious; testing on x86 systems won't reveal the problem.  (On the x86, misaligned accesses are handled in hardware; if you dereference an <code>int*</code> pointer that points to an odd address, it will be a little slower than if it were properly aligned, but you'll get the correct result.)</p>

<p>On some other systems, such as SPARC, attempting to access a misaligned <code>int</code> object causes a bus error, crashing the program.</p>

<p>There have also been systems where a misaligned access quietly ignores the low-order bits of the address, causing it to access the wrong chunk of memory.</p>

<p>Consider the following program:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stddef.h&gt;
int main(void)
{
    struct foo {
        char c;
        int x;
    } __attribute__((packed));
    struct foo arr[2] = { { 'a', 10 }, {'b', 20 } };
    int *p0 = &amp;arr[0].x;
    int *p1 = &amp;arr[1].x;
    printf(""sizeof(struct foo)      = %d\n"", (int)sizeof(struct foo));
    printf(""offsetof(struct foo, c) = %d\n"", (int)offsetof(struct foo, c));
    printf(""offsetof(struct foo, x) = %d\n"", (int)offsetof(struct foo, x));
    printf(""arr[0].x = %d\n"", arr[0].x);
    printf(""arr[1].x = %d\n"", arr[1].x);
    printf(""p0 = %p\n"", (void*)p0);
    printf(""p1 = %p\n"", (void*)p1);
    printf(""*p0 = %d\n"", *p0);
    printf(""*p1 = %d\n"", *p1);
    return 0;
}
</code></pre>

<p>On x86 Ubuntu with gcc 4.5.2, it produces the following output:</p>

<pre><code>sizeof(struct foo)      = 5
offsetof(struct foo, c) = 0
offsetof(struct foo, x) = 1
arr[0].x = 10
arr[1].x = 20
p0 = 0xbffc104f
p1 = 0xbffc1054
*p0 = 10
*p1 = 20
</code></pre>

<p>On SPARC Solaris 9 with gcc 4.5.1, it produces the following:</p>

<pre><code>sizeof(struct foo)      = 5
offsetof(struct foo, c) = 0
offsetof(struct foo, x) = 1
arr[0].x = 10
arr[1].x = 20
p0 = ffbff317
p1 = ffbff31c
Bus error
</code></pre>

<p>In both cases, the program is compiled with no extra options, just <code>gcc packed.c -o packed</code>.</p>

<p>(A program that uses a single struct rather than array doesn't reliably exhibit the problem, since the compiler can allocate the struct on an odd address so the <code>x</code> member is properly aligned.  With an array of two <code>struct foo</code> objects, at least one or the other will have a misaligned <code>x</code> member.)</p>

<p>(In this case, <code>p0</code> points to a misaligned address, because it points to a packed <code>int</code> member following a <code>char</code> member. <code>p1</code> happens to be correctly aligned, since it points to the same member in the second element of the array, so there are two <code>char</code> objects preceding it -- and on SPARC Solaris the array <code>arr</code> appears to be allocated at an address that is even, but not a multiple of 4.)</p>

<p>When referring to the member <code>x</code> of a <code>struct foo</code> by name, the compiler knows that <code>x</code> is potentially misaligned, and will generate additional code to access it correctly.</p>

<p>Once the address of <code>arr[0].x</code> or <code>arr[1].x</code> has been stored in a pointer object, neither the compiler nor the running program knows that it points to a misaligned <code>int</code> object.  It just assumes that it's properly aligned, resulting (on some systems) in a bus error or similar other failure.</p>

<p>Fixing this in gcc would, I believe, be impractical.  A general solution would require, for each attempt to dereference a pointer to any type with non-trivial alignment requirements either (a) proving at compile time that the pointer doesn't point to a misaligned member of a packed struct, or (b) generating bulkier and slower code that can handle either aligned or misaligned objects.</p>

<p>I've submitted a <a href=""http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51628"" rel=""noreferrer"">gcc bug report</a>.  As I said, I don't believe it's practical to fix it, but the documentation should mention it (it currently doesn't).</p>
","8568441"
"How do I print the percent sign(%) in c","82948","","<p>I am a beginner in C, and I was wondering why this program does not print % sign?</p>

<p>The code is:</p>

<pre><code>#include&lt;stdio.h&gt;

main()
{
     printf(""%"");
     getch();
}
</code></pre>
","<p>Your problem is that you have to change:   </p>

<pre><code>printf(""%""); 
</code></pre>

<p>to </p>

<pre><code>printf(""%%"");
</code></pre>

<p>Or you could use ASCII  code and write:</p>

<pre><code>printf(""%c"", 37);
</code></pre>

<p>:)</p>
","17774851"
"Creating C formatted strings (not printing them)","82943","","<p>I have a function that accepts a string, that is:</p>

<pre><code>void log_out(char *);
</code></pre>

<p>In calling it, I need to create a formatted string on the fly like:</p>

<pre><code>int i = 1;
log_out(""some text %d"", i);
</code></pre>

<p>How do I do this in ANSI C?</p>

<hr>

<p>Only, since <code>sprintf()</code> returns a int, this means that I have to write at least 3 commands, like:</p>

<pre><code>char *s;
sprintf(s, ""%d\t%d"", ix, iy);
log_out(s);
</code></pre>

<p>Any way to shorten this?</p>
","<p>Use <a href=""http://www.cplusplus.com/reference/clibrary/cstdio/sprintf/"" rel=""noreferrer"">sprintf</a>.</p>

<pre><code>int sprintf ( char * str, const char * format, ... );
</code></pre>

<blockquote>
  <p>Write formatted data to string Composes a string with the same text
  that would be printed if format was used on printf, but instead of
  being printed, the content is stored as a C string in the buffer
  pointed by str.</p>
  
  <p>The size of the buffer should be large enough to contain the entire
  resulting string (see snprintf for a safer version).</p>
  
  <p>A terminating null character is automatically appended after the
  content.</p>
  
  <p>After the format parameter, the function expects at least as many
  additional arguments as needed for format.</p>
</blockquote>

<h2>Parameters:</h2>

<pre><code>str
</code></pre>

<blockquote>
  <p>Pointer to a buffer where the resulting C-string is stored. The buffer
  should be large enough to contain the resulting string.</p>
</blockquote>

<pre><code>format
</code></pre>

<blockquote>
  <p>C string that contains a format string that follows the same
  specifications as format in printf (see printf for details).</p>
</blockquote>

<pre><code>... (additional arguments)
</code></pre>

<blockquote>
  <p>Depending on the format string, the function may expect a sequence of
  additional arguments, each containing a value to be used to replace a
  format specifier in the format string (or a pointer to a storage
  location, for n). There should be at least as many of these arguments
  as the number of values specified in the format specifiers. Additional
  arguments are ignored by the function.</p>
</blockquote>

<h2>Example:</h2>

<pre><code>// Allocates storage
char *hello_world = (char*)malloc(13 * sizeof(char));
// Prints ""Hello world!"" on hello_world
sprintf(hello_world, ""%s %s!"", ""Hello"" ""world"");
</code></pre>
","804296"
"What are the differences between if, else, and else if?","82798","","<p>I am trying to discern the difference between </p>

<pre><code>if 
else 
else if 
</code></pre>

<p>When do you use them and when not?</p>

<p>I have a homework assignment with a ton of instances and I am running into code error due to not knowing the differences between each.</p>

<p>Can someone please define how to use these?</p>
","<pre><code>**IF** you are confused
 read the c# spec
**ELSE IF** you are kind of confused
 read some books
**ELSE**
 everything should be OK.
</code></pre>

<p>:)</p>
","1445365"
"Dynamically create an array of strings with malloc","82562","","<p>I am trying to create an array of strings in C using <code>malloc</code>. The number of strings that the array will hold can change at run time, but the length of the strings will always be consistent.</p>

<p>I've attempted this (see below), but am having trouble, any tips in the right direction will be much appreciated!</p>

<pre><code>#define ID_LEN 5
char *orderedIds;
int i;
int variableNumberOfElements = 5; /* Hard coded here */

orderedIds = malloc(variableNumberOfElements * (ID_LEN + 1));
</code></pre>

<p>Ultimately I want to be able to use the array to do this:</p>

<pre><code>strcpy(orderedIds[0], string1);
strcpy(orderedIds[1], string2);
/* etc */
</code></pre>
","<p>You should assign an array of char pointers, and then, for each pointer assign enough memory for the string:</p>

<pre><code>char **orderedIds;

orderedIds = malloc(variableNumberOfElements * sizeof(char*));
for (int i = 0; i &lt; variableNumberOfElements; i++)
    orderedIds[i] = malloc((ID_LEN+1) * sizeof(char)); // yeah, I know sizeof(char) is 1, but to make it clear...
</code></pre>

<p>Seems like a good way to me. Although you perform many mallocs, you clearly assign memory for a specific string, and you can free one block of memory without freeing the whole ""string array""</p>
","5935956"
"Which header file do you include to use bool type in c in linux?","82558","","<p>Here's all .h files I've included so far,but non have the definition of <code>bool</code>:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;pthread.h&gt;
#include &lt;netdb.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;
#include &lt;event.h&gt;
</code></pre>

<p>Which file does define <code>bool</code>?</p>
","<p>It's part of C99 and defined in stdbool.h:</p>

<p>POSIX definition is here: </p>

<p><a href=""http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdbool.h.html"" rel=""noreferrer"">http://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdbool.h.html</a></p>
","6118862"
"C Linking Error: undefined reference to 'main'","82529","","<p>I have read the other answers on this topic, and unfortunately they have not helped me. I am attempting to link several c programs together, and I am getting an error in response:</p>

<pre><code>$ gcc -o runexp.o scd.o data_proc.o -lm -fopenmp
/usr/lib/gcc/x86_64-linux-gnu/4.6/../../../x86_64-linux-gnu/crt1.o: In function `_start':
(.text+0x20): undefined reference to `main'
collect2: ld returned 1 exit status
make: * [runexp] Error 1
</code></pre>

<p>I have exactly one main function and it is in runexp. The form is </p>

<pre><code>int main(void) {
    ...; 
    return 0;
}
</code></pre>

<p>Any thoughts on why I might get this error? Thanks!</p>
","<p>You should provide output file name after <code>-o</code> option. In your case <code>runexp.o</code> is treated as output file name, not input object file and thus your <code>main</code> function is undefined.</p>
","15905250"
"How does strcmp() work?","82518","","<p>I've been looking around a fair bit for an answer. I'm going to make a series of my own string functions like <code>my_strcmp()</code>, <code>my_strcat()</code>, etc.</p>

<p>Does <code>strcmp()</code> work through each index of two arrays of characters and if the ASCII value is smaller at an identical index of two strings, that string is there alphabetically greater and therefore a 0 or 1 or 2 is returned? I guess what Im asking is, does it use the ASCII values of characters to return these results?</p>

<p>Any help would be greatly appreciated.</p>

<p>[REVISED]</p>

<p>OK, so I have come up with this... it works for all cases except when the second string is greater than the first.</p>

<p>Any tips? </p>

<pre><code>int my_strcmp(char s1[], char s2[])
{   
    int i = 0;
    while ( s1[i] != '\0' )
    {
        if( s2[i] == '\0' ) { return 1; }
        else if( s1[i] &lt; s2[i] ) { return -1; }
        else if( s1[i] &gt; s2[i] ) { return 1; }
        i++;
    }   
    return 0;
}


int main (int argc, char *argv[])
{
    int result = my_strcmp(argv[1], argv[2]);

    printf(""Value: %d \n"", result);

    return 0;

}
</code></pre>
","<p>The pseudo-code ""implementation"" of <code>strcmp</code> would go something like:</p>

<pre><code>define strcmp (s1, s2):
    p1 = address of first character of str1
    p2 = address of first character of str2

    while contents of p1 not equal to null:
        if contents of p2 equal to null: 
            return 1

        if contents of p2 greater than contents of p1:
            return -1

        if contents of p1 greater than contents of p2:
            return 1

        advance p1
        advance p2

    if contents of p2 not equal to null:
        return -1

    return 0
</code></pre>

<p>That's basically it. Each character is compared in turn an a decision is made as to whether the first or second string is greater, based on that character.</p>

<p>Only if the characters are identical do you move to the next character and, if <em>all</em> the characters were identical, zero is returned.</p>

<p>Note that you may not necessarily get 1 and -1, the specs say that any positive or negative value will suffice, so you should always check the return value with <code>&lt; 0</code>, <code>&gt; 0</code> or <code>== 0</code>.</p>

<p>Turning that into real C would be relatively simple:</p>

<pre><code>int myStrCmp (const char *s1, const char *s2) {
    const unsigned char *p1 = (const unsigned char *)s1;
    const unsigned char *p2 = (const unsigned char *)s2;

    while (*p1 != '\0') {
        if (*p2 == '\0') return  1;
        if (*p2 &gt; *p1)   return -1;
        if (*p1 &gt; *p2)   return  1;

        p1++;
        p2++;
    }

    if (*p2 != '\0') return -1;

    return 0;
}
</code></pre>

<hr>

<p>Also keep in mind that ""greater"" in the context of characters is not necessarily based on simple ASCII ordering for <em>all</em> string functions.</p>

<p>C has a concept called 'locales' which specify (among other things) collation, or ordering of the underlying character set and you may find, for example, that the characters <code>a</code>, <code>á</code>, <code>à</code> and <code>ä</code> are all considered identical. This will happen for functions like <code>strcoll</code>.</p>
","12136398"
"Is there a way to have printf() properly print out an array (of floats, say)?","82470","","<p>I believe I have carefully read the entire <code>printf()</code> documentation but could not find any way to have it print out, say, the elements of a 10-element array of <code>float(s)</code>.</p>

<p>E.g., if I have</p>

<pre><code>float[] foo = {1., 2., 3., ..., 10.};
</code></pre>

<p>Then I'd like to have a single statement such as</p>

<pre><code>printf(""what_do_I_put_here\n"", foo);
</code></pre>

<p>Which would print out something along the lines of:</p>

<pre><code>1. 2. 3. .... 10.
</code></pre>

<p>Is there a way to do that in vanilla C?</p>
","<p>you need to iterate thru the array's elements</p>

<pre><code>float foo[] = {1, 2, 3, 10};
int i;
for (i=0;i &lt; (sizeof (foo) /sizeof (foo[0]));i++) {
    printf(""%lf\n"",foo[i]);
}
</code></pre>

<p>or create function that returns stacked snprintf and then print it with </p>

<pre><code>printf(""%s\n"",function_that_makes_pretty_output(foo))
</code></pre>
","8442794"
"gets() function in C","82255","","<p>I need help again! I thought it is pretty cool to use the <code>gets()</code> function because it is like the <code>scanf()</code> wherein I could get an input with whitespace. But I read in one of the threads (<a href=""https://stackoverflow.com/questions/4344776/student-info-file-handling"">student info file handling</a>) that it is not good to use because according to them, it is a devil's tool for creating buffer overflows (which I don't understand)</p>

<p>If I use the <code>gets()</code> function, I could do this. ENTER YOUR NAME: <code>Keanu Reeves</code>.</p>

<p>If I use the <code>scanf()</code>, I could only do this. ENTER YOUR NAME: <code>Keanu</code></p>

<p>So I heed their advice and replaced all my <code>gets()</code> code with <code>fgets()</code>. The problem is now some of my codes are not working anymore...are there any functions other than <code>gets()</code> and <code>fgets()</code> which could read the whole line and which ignores the whitespace.</p>
","<blockquote>
  <p>it is a devil's tool for creating buffer overflows</p>
</blockquote>

<p>Because <a href=""http://www.opengroup.org/onlinepubs/009695399/functions/gets.html""><code>gets</code></a> does not take a length parameter, it doesn't know how large your input buffer is. If you pass in a 10-character buffer and the user enters 100 characters -- well, you get the point.</p>

<p><a href=""http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html""><code>fgets</code></a> is a safer alternative to <code>gets</code> because it takes the buffer length as a parameter, so you can call it like this:</p>

<pre><code>fgets(str, 10, stdin);
</code></pre>

<p>and it will read in at most 9 characters.</p>

<blockquote>
  <p>the problem is now some of my codes are not working anymore</p>
</blockquote>

<p>This is possibly because <code>fgets</code> also stores the final newline (<code>\n</code>) character in your buffer -- if your code is not expecting this, you should remove it manually:</p>

<pre><code>int len = strlen(str);
if (len &gt; 0 &amp;&amp; str[len-1] == '\n')
  str[len-1] = '\0';
</code></pre>
","4346650"
"How to use struct timeval to get the execution time?","82218","","<p>After reading <a href=""http://www.gnu.org/software/libc/manual/html_node/Elapsed-Time.html"" rel=""nofollow"">this article</a> about elapsed time, I wrote a simple code to calculate the execution time of a loop:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;sys/time.h&gt;

int main (int argc, char** argv) {
    struct timeval, tvalBefore, tvalAfter;

    gettimeofday (&amp;tvalBefore, NULL);
    int i =0;
    while ( i &lt; 1000) {
        i ++;
    }

    gettimeofday (&amp;tvalAfter, NULL);

    printf(""Time in microseconds: %0.3f microseconds\n"",
            (float)(tvalAfter.tv_sec - tvalBefore.tv_sec) 
          )
    return 0;
}
</code></pre>

<p>The clang compiler gives me the following errors:</p>

<pre><code>print_time.c:7:16: error: expected identifier or '('
        struct timeval, *tvalBefore, *tvalAfter;
                      ^
print_time.c:13:17: error: use of undeclared identifier 'tvalBefore'
        gettimeofday (&amp;tvalBefore, NULL);
                       ^
print_time.c:19:17: error: use of undeclared identifier 'tvalAfter'
        gettimeofday (&amp;tvalAfter, NULL);
                       ^
print_time.c:22:12: error: use of undeclared identifier 'tvalAfter'
                        (float)(tvalAfter.tv_sec - tvalBefore.tv_sec) 
                                ^
print_time.c:22:31: error: use of undeclared identifier 'tvalBefore'
                        (float)(tvalAfter.tv_sec - tvalBefore.tv_sec) 
                                                   ^
5 errors generated.
</code></pre>

<p>I can't figure out what's wrong with my code, any idea?</p>
","<p>You have two typing errors in your code:</p>

<pre><code> struct timeval,
</code></pre>

<p>should be</p>

<pre><code> struct timeval
</code></pre>

<p>and after the <code>printf()</code> parenthesis you need a semicolon.</p>

<p>Also, depending on the compiler, so simple a cycle might just be optimized out, giving you a time of 0 microseconds whatever you do.</p>

<p>Finally, the time calculation is wrong. You only take into accounts the seconds, ignoring the microseconds. You need to get the difference between seconds, multiply by one million, then add ""after"" <code>tv_usec</code> and subtract ""before"" <code>tv_usec</code>. You gain nothing by casting an integer number of seconds to a float.</p>

<p>I'd suggest checking out the man page for <code>struct timeval</code>.</p>

<p>This is the code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;sys/time.h&gt;

int main (int argc, char** argv) {
    struct timeval tvalBefore, tvalAfter;  // removed comma

    gettimeofday (&amp;tvalBefore, NULL);
    int i =0;
    while ( i &lt; 10000) {
        i ++;
    }

    gettimeofday (&amp;tvalAfter, NULL);

    // Changed format to long int (%ld), changed time calculation

    printf(""Time in microseconds: %ld microseconds\n"",
            ((tvalAfter.tv_sec - tvalBefore.tv_sec)*1000000L
           +tvalAfter.tv_usec) - tvalBefore.tv_usec
          ); // Added semicolon
    return 0;
}
</code></pre>
","12722972"
"fork() child and parent processes","82208","","<p>I am trying to create a program that uses fork() to create a new process. The sample output should look like so:</p>

<p>This is the child process. My pid is 733 and my parent's id is 772.<br>
This is the parent process. My pid is 772 and my child's id is 773.</p>

<p>This is how I coded my program:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main() {
    printf(""This is the child process. My pid is %d and my parent's id is %d.\n"", getpid(), fork());

    return 0;
}
</code></pre>

<p>This results in the output:</p>

<p>This is the child process. My pid is 22163 and my parent's id is 0.<br>
This is the child process. My pid is 22162 and my parent's id is 22163.</p>

<p>Why is it printing the statement twice and how can I get it to properly show the parent's id after the child id displays in the first sentence?</p>

<p>EDIT:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main() {
int pid = fork();

if (pid == 0) {
    printf(""This is the child process. My pid is %d and my parent's id is %d.\n"", getpid(), getppid());
}
else {
    printf(""This is the parent process. My pid is %d and my parent's id is %d.\n"", getpid(), pid);
}

return 0;
}
</code></pre>
","<p>Start by reading the <a href=""http://linux.die.net/man/2/fork"">fork man page</a> as well as the <a href=""http://pubs.opengroup.org/onlinepubs/009695399/functions/getppid.html"">getppid</a> / <a href=""http://linux.die.net/man/2/getpid"">getpid</a> man pages.</p>

<p>From fork's</p>

<blockquote>
  <p>On success, the PID of the child process is returned in the parent's
  thread of execution, and a 0 is returned in the child's thread of
  execution. On failure, a -1 will be returned in the parent's context,
  no child process will be created, and errno will be set appropriately.</p>
</blockquote>

<p>So this should be something down the lines of</p>

<pre><code>if ((pid=fork())==0){
    printf(""yada yada %u and yada yada %u"",getpid(),getppid());
}
else{ /* avoids error checking*/
    printf(""Dont yada yada me, im your parent with pid %u "", getpid());
}
</code></pre>

<p>As to your question:</p>

<blockquote>
  <p>This is the child process. My pid is 22163 and my parent's id is 0.</p>
  
  <p>This is the child process. My pid is 22162 and my parent's id is
  22163.</p>
</blockquote>

<p><code>fork()</code> executes before the <code>printf</code>. So when its done, you have two processes with the same instructions to execute. Therefore, printf will execute twice. The call to <code>fork()</code> will return <code>0</code> to the child process, and the <code>pid</code> of the child process to the parent process.</p>

<p>You get two running processes, each one  will execute this <strike>instruction</strike> statement:</p>

<pre><code>printf (""... My pid is %d and my parent's id is %d"",getpid(),0); 
</code></pre>

<p>and</p>

<pre><code>printf (""... My pid is %d and my parent's id is %d"",getpid(),22163);  
</code></pre>

<p>~                                                                                             </p>

<p>To wrap it up, the above line is the child, specifying its <code>pid</code>. The second line is the parent process, specifying its id (22162) and its child's (22163).</p>
","7265749"
"What is the full ""for"" loop syntax in C (and others in case they are compatible)?","82120","","<p>I have seen some very weird <code>for</code> loops when reading other people's code. I have been trying to search for a full syntax explanation for the <code>for</code> loop in <code>C</code> but it is very hard because the word ""<code>for</code>"" appears in unrelated sentences making the search almost impossible to Google effectively.</p>

<p>This question came to my mind after reading <a href=""https://stackoverflow.com/questions/260511/russian-peasant-multiplication"">this thread</a> which made me curious again.</p>

<p>The <code>for</code> here: </p>

<pre><code>for(p=0;p+=(a&amp;1)*b,a!=1;a&gt;&gt;=1,b&lt;&lt;=1);
</code></pre>

<p>In the middle condition there is a comma separating the two pieces of code, what does this comma do? The comma on the right side I understand as it makes both <code>a&gt;&gt;=1</code> and <code>b&lt;&lt;=1</code>. </p>

<p>But within a loop exit condition, what happens? Does it exit when <code>p==0</code>, when <code>a==1</code> or when both happen?</p>

<p>It would be great if anyone could help me understand this and maybe point me in the direction of a full <code>for</code> loop syntax description.</p>
","<p>The comma is not exclusive of for loops; it is the comma operator.</p>

<pre><code>x = (a, b);
</code></pre>

<p>will do first a, then b, then set x to the value of b.</p>

<p>The for syntax is:</p>

<pre><code>for (init; condition; increment)
    ...
</code></pre>

<p>Which is somewhat (ignoring <code>continue</code> and <code>break</code> for now) equivalent to:</p>

<pre><code>init;
while (condition) {
    ...
    increment;
}
</code></pre>

<p>So your for loop example is (again ignoring <code>continue</code> and <code>break</code>) equivalent to</p>

<pre><code>p=0;
while (p+=(a&amp;1)*b,a!=1) {
    ...
    a&gt;&gt;=1,b&lt;&lt;=1;
}
</code></pre>

<p>Which acts as if it were (again ignoring <code>continue</code> and <code>break</code>):</p>

<pre><code>p=0; 
while (true) {
    p+=(a&amp;1)*b;
    if (a == 1) break;
    ...
    a&gt;&gt;=1;
    b&lt;&lt;=1;
}
</code></pre>

<p>Two extra details of the for loop which were not in the simplified conversion to a while loop above:</p>

<ul>
<li>If the condition is omitted, it is always <code>true</code> (resulting in an infinite loop unless a <code>break</code>, <code>goto</code>, or something else breaks the loop).</li>
<li>A <code>continue</code> acts as if it were a goto to a label just before the increment, unlike a <code>continue</code> in the while loop which would skip the increment.</li>
</ul>

<p>Also, an important detail about the comma operator: it is a sequence point, like <code>&amp;&amp;</code> and <code>||</code> (which is why I can split it in separate statements and keep its meaning intact).</p>

<hr>

<h3>Changes in C99</h3>

<p>The C99 standard introduces a couple of nuances not mentioned earlier in this explanation (which is very good for C89/C90).</p>

<p>First, all loops are blocks in their own right.  Effectively,</p>

<pre><code>for (...) { ... }
</code></pre>

<p>is itself wrapped in a pair of braces</p>

<pre><code>{
for (...) { ... }
}
</code></pre>

<p>The standard sayeth:</p>

<blockquote>
  <h3>ISO/IEC 9899:1999 §6.8.5 Iteration statements</h3>
  
  <p>¶5 An iteration statement is a block whose scope is a strict subset of the scope of its
  enclosing block. The loop body is also a block whose scope is a strict subset of the scope
  of the iteration statement.</p>
</blockquote>

<p>This is also described in the Rationale in terms of the extra set of braces.</p>

<p>Secondly, the <code>init</code> portion in C99 can be a (single) declaration, as in</p>

<pre><code>for (int i = 0; i &lt; sizeof(something); i++) { ... }
</code></pre>

<p>Now the 'block wrapped around the loop' comes into its own; it explains why the variable <code>i</code> cannot be accessed outside the loop. You can declare more than one variable, but they must all be of the same type:</p>

<pre><code>for (int i = 0, j = sizeof(something); i &lt; j; i++, j--) { ... }
</code></pre>

<p>The standard sayeth:</p>

<blockquote>
  <h3>ISO/IEC 9899:1999 §6.8.5.3 The for statement</h3>
  
  <p>The statement</p>

<pre><code>for ( clause-1 ; expression-2 ; expression-3 ) statement
</code></pre>
  
  <p>behaves as follows: The expression expression-2 is the controlling expression that is
  evaluated before each execution of the loop body. The expression expression-3 is
  evaluated as a void expression after each execution of the loop body. If clause-1 is a
  declaration, the scope of any variables it declares is the remainder of the declaration and
  the entire loop, including the other two expressions; it is reached in the order of execution
  before the first evaluation of the controlling expression. If clause-1 is an expression, it is
  evaluated as a void expression before the first evaluation of the controlling expression.<sup>133)</sup></p>
  
  <p>Both clause-1 and expression-3 can be omitted. An omitted expression-2 is replaced by a
  nonzero constant.</p>
  
  <p><sup>133)</sup> Thus, clause-1 specifies initialization for the loop, possibly declaring one or more variables for use in
  the loop; the controlling expression, expression-2, specifies an evaluation made before each iteration,
  such that execution of the loop continues until the expression compares equal to 0; and expression-3
  specifies an operation (such as incrementing) that is performed after each iteration.</p>
</blockquote>
","276519"
"Windows threading: _beginthread vs _beginthreadex vs CreateThread C++","82113","","<p>What's a better way to start a thread, <code>_beginthread</code>, <code>_beginthreadx</code> or <code>CreateThread</code>?</p>

<p>I'm trying to determine what are the advantages/disadvantages of <code>_beginthread</code>, <code>_beginthreadex</code> and <code>CreateThread</code>.  All of these functions return a thread handle to a newly created thread, I already know that CreateThread provides a little extra information when an error occurs (it can be checked by calling <code>GetLastError</code>)... but what are some things I should consider when I'm using these functions?</p>

<p>I'm working with a windows application, so cross-platform compatibility is already out of the question.</p>

<p>I have gone through the msdn documentation and I just can't understand, for example, why anybody would decide to use _beginthread instead of CreateThread or vice versa.</p>

<p>Cheers!</p>

<p>Update:
OK, thanks for all the info, I've also read in a couple of places that I can't call <code>WaitForSingleObject()</code> if I used <code>_beginthread()</code>, but if I call <code>_endthread()</code> in the thread shouldn't that work? What's the deal there?</p>
","<p><code>CreateThread()</code> is a raw Win32 API call for creating another thread of control at the kernel level.</p>

<p><code>_beginthread()</code> &amp; <code>_beginthreadex()</code> are C runtime library calls that call <code>CreateThread()</code> behind the scenes.  Once <code>CreateThread()</code> has returned, <code>_beginthread/ex()</code> takes care of additional bookkeeping to make the C runtime library usable &amp; consistent in the new thread.</p>

<p>In C++ you should almost certainly use <code>_beginthreadex()</code> unless you won't be linking to the C runtime library at all (aka MSVCRT*.dll/.lib).</p>
","331567"
"C non-blocking keyboard input","81817","","<p>I'm trying to write a program in C (on Linux) that loops until the user presses a key, but shouldn't require a keypress to continue each loop.</p>

<p>Is there a simple way to do this? I figure I could possibly do it with <code>select()</code> but that seems like a lot of work.</p>

<p>Alternatively, is there a way to catch a <kbd>ctrl</kbd>-<kbd>c</kbd> keypress to do cleanup before the program closes instead of non-blocking io?</p>
","<p>As already stated, you can use <code>sigaction</code> to trap ctrl-c, or <code>select</code> to trap any standard input.</p>

<p>Note however that with the latter method you also need to set the TTY so that it's in character-at-a-time rather than line-at-a-time mode.  The latter is the default - if you type in a line of text it doesn't get sent to the running program's stdin until you press enter.</p>

<p>You'd need to use the <code>tcsetattr()</code> function to turn off ICANON mode, and probably also disable ECHO too.  From memory, you also have to set the terminal back into ICANON mode when the program exits!</p>

<p>Just for completeness, here's some code I've just knocked up (nb: no error checking!) which sets up a Unix TTY and emulates the DOS <code>&lt;conio.h&gt;</code> functions <code>kbhit()</code> and <code>getch()</code>:</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/select.h&gt;
#include &lt;termios.h&gt;

struct termios orig_termios;

void reset_terminal_mode()
{
    tcsetattr(0, TCSANOW, &amp;orig_termios);
}

void set_conio_terminal_mode()
{
    struct termios new_termios;

    /* take two copies - one for now, one for later */
    tcgetattr(0, &amp;orig_termios);
    memcpy(&amp;new_termios, &amp;orig_termios, sizeof(new_termios));

    /* register cleanup handler, and set the new terminal mode */
    atexit(reset_terminal_mode);
    cfmakeraw(&amp;new_termios);
    tcsetattr(0, TCSANOW, &amp;new_termios);
}

int kbhit()
{
    struct timeval tv = { 0L, 0L };
    fd_set fds;
    FD_ZERO(&amp;fds);
    FD_SET(0, &amp;fds);
    return select(1, &amp;fds, NULL, NULL, &amp;tv);
}

int getch()
{
    int r;
    unsigned char c;
    if ((r = read(0, &amp;c, sizeof(c))) &lt; 0) {
        return r;
    } else {
        return c;
    }
}

int main(int argc, char *argv[])
{
    set_conio_terminal_mode();

    while (!kbhit()) {
        /* do some work */
    }
    (void)getch(); /* consume the character */
}
</code></pre>
","448982"
"What primitive data type is time_t?","81531","","<p>I do not know the data type of <code>time_t</code>. Is it a float double or something else? Because if I want to display it I need the tag that corresponds with it for <code>printf</code>. I can handle the rest from there for displaying <code>time_t</code> but I need to know the data type that corresponds with it.</p>
","<p>Unfortunately, it's not completely portable.  It's usually integral, but it <a href=""http://www.opengroup.org/onlinepubs/009695399/basedefs/sys/types.h.html"" rel=""noreferrer"">can be</a> any ""integer or real-floating type"".</p>
","2792556"
"What's the difference between size_t and int in C++?","81482","","<p>In several C++ examples I see a use of the type size_t where I would have used a simple int. What's the difference, and why size_t should be better?</p>
","<p>From <a href=""http://en.wikipedia.org/wiki/Size_t#Member_data_types"" rel=""noreferrer"">the friendly Wikipedia</a>:</p>

<blockquote>
  <p>The stdlib.h and stddef.h header files define a datatype called <strong>size_t</strong> which is used to represent the size of an object. Library functions that take sizes expect them to be of type size_t, and the sizeof operator evaluates to size_t.</p>
  
  <p>The actual type of size_t is platform-dependent; a common mistake is to assume size_t is the same as unsigned int, which can lead to programming errors, particularly as 64-bit architectures become more prevalent.</p>
</blockquote>

<p>Also, check <a href=""http://www.embedded.com/electronics-blogs/programming-pointers/4026076/Why-size-t-matters"" rel=""noreferrer"">Why size_t matters</a></p>
","502862"
"bool to int conversion","81420","","<p>How portable is this conversion. Can I be sure that both assertions pass?</p>

<pre><code>int x = 4&lt;5;
assert(x==1);

x = 4&gt;5;
assert(x==0);
</code></pre>

<p>Don't ask why. I know that it is ugly. Thank you.</p>
","<pre><code>int x = 4&lt;5;
</code></pre>

<p>Completely portable. Standard conformant. <code>bool</code> to <code>int</code> conversion is implicit!</p>

<p>§4.7/4 from the C++ Standard says (Integral <em>Conversion</em>)</p>

<blockquote>
  <p>If the source type is bool, the value <strong><code>false</code> is converted to zero</strong> and
  the value <strong><code>true</code> is converted to one</strong>.</p>
</blockquote>

<hr>

<p>As for C, as far as I know there is no <code>bool</code> in C. (before 1999) So <code>bool</code> to <code>int</code> conversion is relevant in C++ only. In C, <code>4&lt;5</code> evaluates to <code>int</code> value, in this case the value is <code>1</code>,  <code>4&gt;5</code>  would evaluate to <code>0</code>.</p>

<p>EDIT: Jens in the comment said, C99 has <code>_Bool</code> type. <code>bool</code> is a macro defined in <code>stdbool.h</code> header file. <code>true</code> and <code>false</code> are also macro defined in <code>stdbool.h</code>.</p>

<p>§7.16 from C99 says,</p>

<blockquote>
  <p>The macro <strong><code>bool</code></strong> expands to _Bool.</p>
  
  <p>[..] <strong><code>true</code></strong> which expands to the integer constant <strong><code>1</code></strong>, <strong><code>false</code></strong>
  which expands to the integer constant <strong><code>0</code></strong>,[..]</p>
</blockquote>
","5369783"
"C: convert double to float, preserving decimal point precision","81402","","<p>i wanted to convert double to float in C, but wanted to preserve the decimal point exactly as possible without any changes...</p>

<p>for example, let's say i have</p>

<pre><code>   double d = 0.1108;
   double dd = 639728.170000;
   double ddd = 345.2345678
</code></pre>

<p>now correct me if i am wrong, i know that floating point precision is about 5 numbers after the dot. can i get those five numbers after the dot exactly as the double had it? so that above results as follows:</p>

<pre><code>   float f = x(d);
   float ff = x(dd);
   float fff = x(ddd);

   printf(""%f\n%f\n%f\n"", f, ff, fff);
</code></pre>

<p>it should print</p>

<pre><code>   0.1108
   639728.17000
   345.23456
</code></pre>

<p>all digits after the precision limit (which i assume as 5) would be truncated.</p>
","<p><code>float</code> and <code>double</code> don't store decimal places.  They store <em>binary</em> places: <code>float</code> is (assuming IEEE 754) 24 significant bits (7.22 decimal digits) and double is 53 significant bits (15.95 significant digits).</p>

<p>Converting from <code>double</code> to <code>float</code> will give you the closest possible <code>float</code>, so rounding won't help you.  Goining the other way may give you ""noise"" digits in the decimal representation.</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void) {
    double orig = 12345.67;
    float f = (float) orig;
    printf(""%.17g\n"", f); // prints 12345.669921875
    return 0;
}
</code></pre>

<p>To get a <code>double</code> approximation to the nice decimal value you intended, you can write something like:</p>

<pre><code>double round_to_decimal(float f) {
    char buf[42];
    sprintf(buf, ""%.7g"", f); // round to 7 decimal digits
    return atof(buf);
}
</code></pre>
","3498570"
"Combine Gyroscope and Accelerometer Data","81369","","<p>I am building a balancing robot using the Lego Mindstorm's NXT system. I am using two sensors from HiTechnic, the first being an Accelerometer and the second being a Gyroscope. I've successfully filtered out noise from both sensors and derived angles for both in a range between -90 and 90 degrees, with 0 degrees being perfectly balanced.</p>

<p>My next challenge is to combine both of the sensor values to correct for the Gyroscope's drift over time. Below is an example graph I created from actual data to demonstrate the drift from the gyroscope:</p>

<p><img src=""https://i.stack.imgur.com/AHx4r.png"" alt=""enter image description here""></p>

<p>The most commonly used approach I've seen to make combining these sensors rock solid is by using a Kalman filter. However, I'm not an expert in calculus and I really don't understand mathematical symbols, I do understand math in source code though.</p>

<p>I'm using RobotC (which is like any other C derivative) and would really appreciate if someone can give me examples of how to accomplish this in C.</p>

<p>Thank you for your help!</p>

<p><strong>SOLUTION RESULTS:</strong></p>

<p>Alright, kersny solved my problem by introducing me to complementary filters. This is a graph illustrating my results:</p>

<p><em>Result #1</em></p>

<p><img src=""https://i.stack.imgur.com/MqRid.png"" alt=""enter image description here""></p>

<p><em>Result #2</em></p>

<p><img src=""https://i.stack.imgur.com/mePBt.png"" alt=""enter image description here""></p>

<p>As you can see, the filter corrects for gyroscopic drift and combines both signals into a single smooth signal.</p>

<p><strong>Edit:</strong> Since I was fixing the broken images anyways, I thought it would be fun to show the rig I used to generate this data:</p>

<p><img src=""https://i.stack.imgur.com/hWbBh.jpg"" alt=""enter image description here""></p>
","<p>Kalman Filters are great and all, but I find the Complementary Filter much easier to implement with similar results. The best articles that I have found for coding a Complementary Filter are <a href=""http://web.archive.org/web/20091121085323/http://www.mikroquad.com/bin/view/Research/ComplementaryFilter"" rel=""noreferrer"">this wiki</a> (along with <a href=""http://wiki.orbswarm.com/index.php?title=IMU"" rel=""noreferrer"">this article</a> about converting sensors to Engineering units) and a PDF in the zip file on <a href=""http://web.mit.edu/first/segway/#misc"" rel=""noreferrer"">this page</a> (Under Technical Documentation, I believe the file name in the zip is filter.pdf); </p>

<p>PS. If your stuck on a Kalman Filter, <a href=""http://diydrones.com/profiles/blogs/705844:BlogPost:23188"" rel=""noreferrer"">here</a> is some C-syntax code for the Arduino that implements it.</p>
","1590385"
"how to stop a loop arduino","81364","","<p>I have this loop, how would I end the loop?   </p>

<pre><code> void loop() {
      // read the pushbutton input pin:

       a ++;
      Serial.println(a);
        analogWrite(speakerOut, NULL);

      if(a &gt; 50 &amp;&amp; a &lt; 300){
      analogWrite(speakerOut, 200);
      }

      if(a &lt;= 49){
        analogWrite(speakerOut, NULL);
      }

      if(a &gt;= 300 &amp;&amp; a &lt;= 2499){
          analogWrite(speakerOut, NULL);
      }
</code></pre>
","<p>Arduino specifically provides absolutely no way to exit their <code>loop</code> function, as exhibited by the code that actually runs it:</p>

<pre><code>setup();

for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
}
</code></pre>

<p>Besides, on a microcontroller there isn't anything to exit to in the first place.</p>

<p>The closest you can do is to just halt the processor. That will stop processing until it's reset.</p>
","23096464"
"How do I see a C/C++ source file after preprocessing in Visual Studio?","81310","","<p>Let's say I have a source file with many preprocessor directives. Is it possible to see how it looks after the preprocessor is done with it?</p>
","<p><code>cl.exe</code>, the command line interface to Microsoft Visual C++, has three different options for outputting the preprocessed file (hence the inconsistency in the previous responses about Visual C++):</p>

<ul>
<li><code>/E</code>: <a href=""http://msdn.microsoft.com/en-us/library/3xkfswhy.aspx"" rel=""noreferrer"">preprocess to stdout</a> (similar to GCC's -E option)</li>
<li><code>/P</code>: <a href=""http://msdn.microsoft.com/en-us/library/8z9z0bx6.aspx"" rel=""noreferrer"">preprocess to file</a></li>
<li><code>/EP</code>: <a href=""http://msdn.microsoft.com/en-us/library/becb7sys.aspx"" rel=""noreferrer"">preprocess to stdout without #line directives</a></li>
</ul>

<p>If you want to preprocess to a file without #line directives, combine the <code>/P</code> and <code>/EP</code> options.</p>
","277362"
"Why do I get a warning every time I use malloc?","81242","","<p>If I use <code>malloc</code> in my code:</p>

<pre><code>int *x = malloc(sizeof(int));
</code></pre>

<p>I get this warning from <code>gcc</code>:</p>

<blockquote>
  <p>new.c:7: warning: implicit declaration of function ‘malloc’<br>
  new.c:7: warning: incompatible implicit declaration of built-in function ‘malloc’</p>
</blockquote>
","<p>You need to add:</p>

<pre><code>#include &lt;stdlib.h&gt;
</code></pre>

<p>This file includes the declaration for the built-in function <code>malloc</code>. If you don't do that, the compiler thinks you want to define your own function named <code>malloc</code> and it warns you because:</p>

<ol>
<li>You don't explicitly declare it <em>and</em></li>
<li>There already is a built-in function by that name which has a different signature than the one that was implicitly declared (when a function is declared implicitly, its return and argument types are assumed to be <code>int</code>, which isn't compatible with the built-in <code>malloc</code>, which takes a <code>size_t</code> and returns a <code>void*</code>).</li>
</ol>
","1230398"
"Cannot assign requested address - possible causes?","81166","","<p>I have a program that consists of a master server and distributed slave servers. The slave servers send status updates to the server, and if the server hasn't heard from a specific slave in a fixed period, it marks the slave as down. This is happening consistently. </p>

<p>From inspecting logs, I have found that the slave is only able to send one status update to the server, and then is never able to send another update, always failing on the call to connect() ""Cannot assign requested address (99). </p>

<p>Oddly enough, the slave is able to send several other updates to the server, and all of the connections are happening on the same port. It seems that the most common cause of this failure is that connections are left open, but I'm having trouble finding anything left open. Are there other possible explanations?</p>

<p>To clarify, here's how I'm connecting:</p>

<pre><code>struct sockaddr *sa; // parameter
size_t           sa_size; //parameter
int              i = 1;
int              stream;

stream = socket(AF_INET,SOCK_STREAM,0);
setsockopt(stream,SOL_SOCKET,SO_REUSEADDR,&amp;i,sizeof(i));
bindresvport(stream,NULL);
connect(stream,sa,sa_size);
</code></pre>

<p>This code is in a function to obtain a connection to another server, and a failure on any of those 4 calls causes the function to fail.</p>
","<p>Maybe SO_REUSEADDR helps here?
<a href=""http://www.unixguide.net/network/socketfaq/4.5.shtml"">http://www.unixguide.net/network/socketfaq/4.5.shtml</a></p>
","7640682"
"How can one grab a stack trace in C?","81094","","<p>I know there's no standard C function to do this.  I was wondering what are the techniques to to this on Windows and *nix?  (Windows XP is my most important OS to do this on right now.)</p>
","<p>We've used this for our projects:</p>

<p><a href=""https://www.codeproject.com/kb/threads/stackwalker.aspx"" rel=""nofollow noreferrer"">https://www.codeproject.com/kb/threads/stackwalker.aspx</a></p>

<p>The code is a tad messy IMHO, but it works well.  Windows only.</p>
","105741"
"When should I use mmap for file access?","81034","","<p>POSIX environments provide at least two ways of accessing files.  There's the standard system calls <code>open()</code>, <code>read()</code>, <code>write()</code>, and friends, but there's also the option of using <code>mmap()</code> to map the file into virtual memory.</p>

<p>When is it preferable to use one over the other?  What're their individual advantages that merit including two interfaces?</p>
","<p>mmap is great if you have multiple processes accessing data in a read only fashion from the same file, which is common in the kind of server systems I write.  mmap allows all those processes to share the same physical memory pages, saving a lot of memory.</p>

<p>mmap also allows the operating system to optimize paging operations.  For example, consider two programs; program A which reads in a 1MB file into a buffer creating with malloc, and program B which mmaps the 1MB file into memory.  If the operating system has to swap part of A's memory out, it must write the contents of the buffer to swap before it can reuse the memory.  In B's case any unmodified mmap'd pages can be reused immediately because the OS knows how to restore them from the existing file they were mmap'd from.  (The OS can detect which pages are unmodified by initially marking writable mmap'd pages as read only and catching seg faults, similar to Copy on Write strategy).  </p>

<p>mmap is also useful for inter process communication.  You can mmap a file as read / write in the processes that need to communicate and then use sychronization primitives in the mmap'd region (this is what the MAP_HASSEMAPHORE flag is for).</p>

<p>One place mmap can be awkward is if you need to work with very large files on a 32 bit machine.  This is because mmap has to find a contiguous block of addresses in your process's address space that is large enough to fit the entire range of the file being mapped.  This can become a problem if your address space becomes fragmented, where you might have 2 GB of address space free, but no individual range of it can fit a 1 GB file mapping.  In this case you may have to map the file in smaller chunks than you would like to make it fit.</p>

<p>Another potential awkwardness with mmap as a replacement for read / write is that you have to start your mapping on offsets of the page size.  If you just want to get some data at offset X you will need to fixup that offset so it's compatible with mmap.</p>

<p>And finally, read / write are the only way you <strong>can</strong> work with some types of files.  mmap can't be used on things like pipes and ttys.</p>
","258097"
"Why is C so fast, and why aren't other languages as fast or faster?","80976","","<p>In listening to the StackOverflow podcast, the jab keeps coming up that ""real programmers"" write in C, and that C is so much faster because it's ""close to the machine."" Leaving the former assertion for another post, what is special about C that allows it to be faster than other languages? Or put another way: what's to stop other languages from being able to compile down to binary that runs every bit as fast as C?</p>
","<p><strong>There isn't much that's special about C. That's one of the reasons why it's fast.</strong></p>

<p>Newer languages which have support for <a href=""http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"" rel=""noreferrer"">garbage collection</a>, <a href=""http://en.wikipedia.org/wiki/Type_system#Dynamic_typing"" rel=""noreferrer"">dynamic typing</a> and other facilities which make it easier for the programmer to write programs. </p>

<p>The catch is, there is additional processing overhead which will degrade the performance of the application. C doesn't have any of that, which means that there is no overhead, but that means that the programmer needs to be able to allocate memory and free them to prevent <a href=""http://en.wikipedia.org/wiki/Memory_leak"" rel=""noreferrer"">memory leaks</a>, and must deal with static typing of variables.</p>

<p>That said, many languages and platforms, such as Java (with its <a href=""https://en.wikipedia.org/wiki/Java_virtual_machine"" rel=""noreferrer"">Java Virtual Machine</a>) and .NET (with its Common Language Runtime) have improved performance over the years with advents such as <a href=""http://en.wikipedia.org/wiki/Just-in-time_compilation"" rel=""noreferrer"">just-in-time compilation</a> which produces native machine code from bytecode to achieve higher performance.</p>
","418956"
"default value for struct member in C","80969","","<p>Is it possible to set default values for some struct member?
I tried the following but, it'd cause syntax error:</p>

<pre><code>typedef struct
{
  int flag = 3;
} MyStruct;
</code></pre>

<p>Errors:</p>

<pre><code>$ gcc -o testIt test.c 
test.c:7: error: expected ‘:’, ‘,’, ‘;’, ‘}’ or ‘__attribute__’ before ‘=’ token
test.c: In function ‘main’:
test.c:17: error: ‘struct &lt;anonymous&gt;’ has no member named ‘flag’
</code></pre>
","<p>Structure is a <em>data type</em>. You don't give values to a data type. You give values to instances/objects of data types.<br>
So no this is not possible in C.   </p>

<p>Instead you can write a function which does the initialization for structure instance.</p>

<p>Alternatively, You could do:</p>

<pre><code>struct MyStruct_s 
{
    int id;
} MyStruct_default = {3};

typedef struct MyStruct_s MyStruct;
</code></pre>

<p>And then always initialize your new instances as:</p>

<pre><code>MyStruct mInstance = MyStruct_default;
</code></pre>
","13716957"
"pthread_join() and pthread_exit()","80871","","<p>I have a question about C concurrency programming.</p>

<p>In the pthread library, the prototype of <code>pthread_join</code> is</p>

<pre><code>int pthread_join(pthread_t tid, void **ret);
</code></pre>

<p>and the prototype of <code>pthread_exit</code> is:</p>

<pre><code>void pthread_exit(void *ret);
</code></pre>

<p>So I am confused that, why <code>pthread_join</code> takes the return value of the process as a pointer to a <code>void</code> pointer from reaped thread, but <code>pthread_exit</code> only takes a <code>void</code> pointer from the exited thread? I mean basically they are all return values from a thread, why there is a difference in type?</p>
","<p>In <code>pthread_exit</code>, <code>ret</code> is an input parameter. You are simply passing the address of a variable to the function.</p>

<p>In <code>pthread_join</code>, <code>ret</code> is an output parameter. You get back a value from the function. Such value can, for example, be set to <code>NULL</code>.</p>

<p>Long explanation:</p>

<p>In <code>pthread_join</code>, you get back the address passed to <code>pthread_exit</code> by the finished thread. If you pass just a plain pointer, it is passed by value so you can't change where it is pointing to. To be able to change the value of the pointer passed to pthread_join, it must be passed as a pointer itself, that is, a pointer to a pointer.</p>
","8513946"
"Why dividing two integers doesn't get a float?","80840","","<p>Can anyone explain why b gets rounded off here when I divide it by an integer although it's a float?</p>

<pre><code>#include &lt;stdio.h&gt;

void main() {
    int a;
    float b, c, d;
    a = 750;
    b = a / 350;
    c = 750;
    d = c / 350;
    printf(""%.2f %.2f"", b, d);
    // output: 2.00 2.14
}
</code></pre>

<p><a href=""http://codepad.org/j1pckw0y"">http://codepad.org/j1pckw0y</a></p>
","<p>This is because of implicit conversion. The variables <code>b, c, d</code> are of <code>float</code> type. But the <code>/</code> operator sees two integers it has to divide and hence returns an integer in the result which gets implicitly converted to a <code>float</code> by the addition of a decimal point. If you want float divisions, try making the two operands to the <code>/</code> floats. Like follows.</p>

<pre><code>#include &lt;stdio.h&gt;

int main() {
    int a;
    float b, c, d;
    a = 750;
    b = a / 350.0f;
    c = 750;
    d = c / 350;
    printf(""%.2f %.2f"", b, d);
    // output: 2.14 2.14
    return 0;
}
</code></pre>
","16221859"
"Char array in a struct - incompatible assignment?","80833","","<p>I tried to find out what a struct really 'is' and hit a problem, so I have really 2 questions:</p>

<p>1) What is saved in 'sara'? Is it a pointer to the first element of the struct?</p>

<p>2) The more interesting question: Why doesn't it compile? 
GCC says ""test.c:10: error: incompatible types in assignment"" and I can't figure out why...
(This part has been solved by your answers already, great!)</p>

<pre><code>#include &lt;stdio.h&gt;

struct name {
    char first[20];
    char last[20];
};

int main() {
    struct name sara;
    sara.first = ""Sara"";
    sara.last = ""Black"";
    printf(""struct direct: %x\n"",sara);

    printf(""struct deref: %x\t%s\n"", *sara, *sara);


}
</code></pre>

<p>Thanks for your help!</p>
","<p>This has nothing to do with structs - arrays in C are not assignable:</p>

<pre><code>char a[20];
a = ""foo"";   // error
</code></pre>

<p>you need to use strcpy:</p>

<pre><code>strcpy( a, ""foo"" );
</code></pre>

<p>or in your code:</p>

<pre><code>strcpy( sara.first, ""Sara"" );
</code></pre>
","1292591"
"What is Linux’s native GUI API?","80655","","<p>I hope this doesn’t come across as a stupid question but it’s always something I have wondered. Both Windows (Win32 API) and OS X (Cocoa) have their own APIs to handle windows, events and other OS stuff. I have never really got a clear answer as to what Linux’s equivalent is.</p>

<p>I have heard some people say GTK+, but GTK+ being cross platform, how can it be native?</p>
","<p>In Linux the graphical user interface is not a part of the operating system. The graphical user interface found on most Linux desktops is provided by software called the <a href=""http://en.wikipedia.org/wiki/X_Window_System"" rel=""noreferrer"">X Window System</a>, which defines a device independent way of dealing with screens, keyboards and pointer devices.</p>

<p>X Window defines a network protocol for communication, and any program that knows how to ""speak"" this protocol can use it. There is a C library called <a href=""http://en.wikipedia.org/wiki/Xlib"" rel=""noreferrer"">Xlib</a> that makes it easier to use this protocol, so Xlib is kind of <em>the</em> native GUI API. Xlib is not the only way to access an X Window server; there is also <a href=""http://en.wikipedia.org/wiki/XCB"" rel=""noreferrer"">XCB</a>.</p>

<p>Toolkit libraries such as <a href=""http://www.gtk.org/"" rel=""noreferrer"">GTK+</a> (used by <a href=""http://www.gnome.org/"" rel=""noreferrer"">GNOME</a>) and <a href=""http://www.qt.io/"" rel=""noreferrer"">Qt</a> (used by <a href=""http://www.kde.org/"" rel=""noreferrer"">KDE</a>), built on top of Xlib, are used because they are easier to program with. For example they give you a consistent look and feel across applications, make it easier to use drag-and-drop, provide components standard to a modern desktop environment, and so on.</p>

<p>How X draws on the screen internally depends on the implementation. <a href=""http://www.x.org"" rel=""noreferrer"">X.org</a> has a device independent part and a device dependent part. The former manages screen resources such as windows, while the latter communicates with the graphics card driver, usually a kernel module. The communication may happen over <a href=""http://en.wikipedia.org/wiki/Direct_memory_access"" rel=""noreferrer"">direct memory access</a> or through <a href=""http://en.wikipedia.org/wiki/System_call"" rel=""noreferrer"">system calls</a> to the kernel. The driver translates the commands into a form that the hardware on the card understands.</p>

<p>As of 2013, a new window system called <a href=""http://wayland.freedesktop.org/"" rel=""noreferrer"">Wayland</a> is starting to become usable, and many distributions have said they will at some point migrate to it, though there is still no clear schedule. This system is based on OpenGL/ES API, which means that in the future OpenGL will be the ""native GUI API"" in Linux. Work is being done to port GTK+ and QT to Wayland, so that current popular applications and desktop systems would need minimal changes. The applications that cannot be ported will be supported through an X11 server, much like OS X supports X11 apps through Xquartz. The GTK+ port is <a href=""https://live.gnome.org/Wayland"" rel=""noreferrer"">expected to be finished within a year</a>, while Qt 5 already has complete Wayland support.</p>

<p>To further complicate matters, Ubuntu has announced they are developing a new system called <a href=""https://wiki.ubuntu.com/Mir"" rel=""noreferrer"">Mir</a> because of problems they perceive with Wayland. This window system is also based on the OpenGL/ES API.</p>
","12717284"
"It is more efficient to use if-return-return or if-else-return?","80614","","<p>Suppose I have an <code>if</code> statement with a <code>return</code>. From the efficiency perspective, should I use</p>

<pre><code>if(A &gt; B):
    return A+1
return A-1
</code></pre>

<p>or</p>

<pre><code>if(A &gt; B):
    return A+1
else:
    return A-1
</code></pre>

<p>Should I prefer one or another when using a compiled language (C) or a scripted one (Python)?</p>
","<p>Since the <code>return</code> statement terminates the execution of the current function, the two forms are equivalent (although the second one is arguably more readable than the first).</p>

<p>The efficiency of both forms is comparable, the underlying machine code has to perform a jump if the <code>if</code> condition is false anyway.</p>

<p>Note that Python supports a syntax that allows you to use only one <code>return</code> statement in your case:</p>

<pre><code>return A+1 if A &gt; B else A-1
</code></pre>
","9191474"
"Passing an array as an argument to a function in C","80594","","<p>I wrote a function containing array as argument,
and call it by passing value of array as follows.</p>

<pre><code>void arraytest(int a[])
{
    // changed the array a
    a[0]=a[0]+a[1];
    a[1]=a[0]-a[1];
    a[0]=a[0]-a[1];
}

void main()
{
    int arr[]={1,2};
    printf(""%d \t %d"",arr[0],arr[1]);
    arraytest(arr);
    printf(""\n After calling fun arr contains: %d\t %d"",arr[0],arr[1]);
}
</code></pre>

<p>What I found is though I am calling <code>arraytest()</code> function by passing values, the original copy of <code>int arr[]</code> is changed.</p>

<p>Can you please explain why?</p>
","<p>When passing an array as a parameter, this</p>

<pre><code>void arraytest(int a[])
</code></pre>

<p>means exactly the same as</p>

<pre><code>void arraytest(int *a)
</code></pre>

<p>so you <em>are</em> modifying the values in main.</p>

<p>For historical reasons, arrays are not first class citizens and cannot be passed by value.</p>
","6567846"
"Sockets - How to find out what port and address I'm assigned","80517","","<p>I'm having trouble figuring this out - I'm working with sockets in C using this guide - <a href=""http://binarii.com/files/papers/c_sockets.txt"" rel=""noreferrer"">http://binarii.com/files/papers/c_sockets.txt</a></p>

<p>I'm trying to automatically get my ip and port using:</p>

<pre><code>server.sin_port = 0;              /* bind() will choose a random port*/
server.sin_addr.s_addr = INADDR_ANY;  /* puts server's IP automatically */
...
...
bind(int fd, struct sockaddr *my_addr,int addrlen); // Bind function
</code></pre>

<p>After a successful bind, how do I find out what IP and Port I'm actually assigned?</p>
","<p>If it's a server socket, you should call <a href=""http://www.opengroup.org/onlinepubs/9699919799/functions/listen.html"" rel=""noreferrer""><code>listen()</code></a> on your socket, and then <a href=""http://www.opengroup.org/onlinepubs/9699919799/functions/getsockname.html"" rel=""noreferrer""><code>getsockname()</code></a> to find the port number on which it is listening:</p>

<pre><code>struct sockaddr_in sin;
socklen_t len = sizeof(sin);
if (getsockname(sock, (struct sockaddr *)&amp;sin, &amp;len) == -1)
    perror(""getsockname"");
else
    printf(""port number %d\n"", ntohs(sin.sin_port));
</code></pre>

<p>As for the IP address, if you use <code>INADDR_ANY</code> then the server socket can accept connections to any of the machine's IP addresses and the server socket itself does not have a specific IP address.  For example if your machine has two IP addresses then you might get two incoming connections on this server socket, each with a different local IP address.  You can use <code>getsockname()</code> on the socket for a specific connection (which you get from <code>accept()</code>) in order to find out which local IP address is being used on that connection.</p>
","4047837"
"static declaration follows non-static declaration","80411","","<p>I'm trying to compile the same C file on two different machines with different versions of cc.</p>

<p>gcc version 3.2.3 says <code>warning: 'foo' was declared implicitly 'extern' and later 'static'</code></p>

<p>gcc version 4.1.2 says <code>error: static declaration of 'foo' follows non-static declaration</code></p>

<p>AFAICT, both have the same CFLAGS. I'd like to make gcc 4.1.2 behave like gcc 3.2.3, that is, find an option that would turn this error into a mere warning.</p>
","<p>From what the error message complains about, it sounds like you should rather try to fix the source code. The compiler complains about difference in declaration, similar to for instance</p>

<pre><code>void foo(int i);
...
void foo(double d) {
    ...
}
</code></pre>

<p>and this is not valid C code, hence the compiler complains.</p>

<p>Maybe your problem is that there is no prototype available when the function is used the first time and the compiler implicitly creates one that will not be static. If so the solution is to add a prototype somewhere before it is first used.</p>
","3148354"
"C sizeof char* array","80371","","<p>I have a <code>char*</code> array as follows:</p>

<pre><code>char *tbl[] = { ""1"", ""2"", ""3"" };
</code></pre>

<p>How do I use the <code>sizeof</code> operator to get the number of elements of the array, here 3? </p>

<p>The below did work, but is it correct?</p>

<pre><code>int n = sizeof(tbl) / sizeof(tbl[0]) 
</code></pre>
","<p>Yes,</p>

<pre><code>size_t n = sizeof(tbl) / sizeof(tbl[0])
</code></pre>

<p>is the most typical way to do this.</p>

<p>Please note that using <code>int</code> for array sizes is not the best idea.</p>
","1559936"
"Why do I always get the same sequence of random numbers with rand()?","80293","","<p>This is the first time I'm trying random numbers with C (I miss C#). Here is my code:</p>

<pre><code>int i, j = 0;
for(i = 0; i &lt;= 10; i++) {
    j = rand();
    printf(""j = %d\n"", j);
}
</code></pre>

<p>with this code, I get the same sequence every time I run the code. But it generates different random sequences if I add <code>srand(/*somevalue/*)</code> before the <code>for</code> loop. Can anyone explain why?</p>
","<p>You have to seed it. Seeding it with the time is a good idea:</p>

<p><a href=""http://en.cppreference.com/w/cpp/numeric/random/srand"" rel=""noreferrer""><code>srand()</code></a></p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

int main ()
{
  srand ( time(NULL) );
  printf (""Random Number: %d\n"", rand() %100);
  return 0;
}
</code></pre>

<p>You get the same sequence because rand() is automatically seeded with the a value of 1 if you do not call srand().</p>

<h2>Edit</h2>

<p><em>Due to comments</em></p>

<p><code>rand()</code> will return a number between 0 and <code>RAND_MAX</code> (defined in the standard library). Using the <a href=""http://en.wikipedia.org/wiki/Modulo_operation"" rel=""noreferrer"">modulo</a> operator (<code>%</code>) gives the remainder of the division <code>rand()/100</code>. This will force the random number to be within the range 0-99. For example, to get a random number in the range of 0-999 we would apply <code>rand()%1000</code>.</p>
","1108789"
"Where does gcc look for C and C++ header files?","80258","","<p>On a Unix system, where does gcc look for header files?</p>

<p>I spent a little time this morning looking for some system header files, so I thought this would be good information to have here.</p>
","<pre><code>`gcc -print-prog-name=cc1plus` -v
</code></pre>

<p>This command asks gcc which <strong>C++</strong> preprocessor it is using, and then asks that preprocessor where it looks for includes.</p>

<p>You will get a reliable answer for your specific setup.</p>

<p>Likewise, for the <strong>C</strong> preprocessor:</p>

<pre><code>`gcc -print-prog-name=cc1` -v
</code></pre>
","344525"
"How does getchar() work?","80208","","<p>I am confused by a program mentioned in K&amp;R that uses <code>getchar()</code>. It gives the same output as the input string:</p>

<pre><code>#include &lt;stdio.h&gt;

main(){
    int c;
    c = getchar();
    while(c != EOF){
         putchar(c);
         c = getchar();
    }
}
</code></pre>

<p>Why does it print the whole string? I would expect it to read a character and ask again for the input.</p>

<p>And, are all strings we enter terminated by an EOF?</p>
","<p>In the simple setup you are likely using, <code>getchar</code> works with <em>buffered</em> input, so you have to press enter before getchar gets anything to read. Strings are not terminated by <code>EOF</code>; in fact, <code>EOF</code> is not really a character, but a magic value that indicates the end of the file. But <code>EOF</code> is not part of the string read. It's what <code>getchar</code> returns when there is nothing left to read.</p>
","3676839"
"Write code to convert given number into words (eg 1234 as input should output one thousand two hundred and thirty four)","80101","","<p>Write C/C++/Java code to convert given number into words.</p>

<p>eg:-
Input:
1234</p>

<p>Output:
One thousand two hundred thirty-four.</p>

<p>Input:
10</p>

<p>Output:
Ten</p>

<p>Does it require a complete switch case for digits 0 to 10.</p>

<p>Adding ""teen"" after every number name (eg: 14: four ""teen"".) from 14 to 19.</p>

<p>And than adding ""ty"" and the digits name for a number in the range 20 to 99.</p>

<p>And so on. </p>

<p>I think there must be some far better approach for solving this.</p>

<p>C code is preferred.</p>
","<pre><code>#include&lt;iostream&gt;
using namespace std;
void expand(int);
int main()
{
    int num;
    cout&lt;&lt;""Enter a number : "";
    cin&gt;&gt;num;
    expand(num);
}
void expand(int value)
{
    const char * const ones[20] = {""zero"", ""one"", ""two"", ""three"",""four"",""five"",""six"",""seven"",
    ""eight"",""nine"",""ten"",""eleven"",""twelve"",""thirteen"",""fourteen"",""fifteen"",""sixteen"",""seventeen"",
    ""eighteen"",""nineteen""};
    const char * const tens[10] = {"""", ""ten"", ""twenty"", ""thirty"",""forty"",""fifty"",""sixty"",""seventy"",
    ""eighty"",""ninety""};

    if(value&lt;0)
    {
        cout&lt;&lt;""minus "";
        expand(-value);
    }
    else if(value&gt;=1000)
    {
        expand(value/1000);
        cout&lt;&lt;"" thousand"";
        if(value % 1000)
        {
            if(value % 1000 &lt; 100)
            {
                cout &lt;&lt; "" and"";
            }
            cout &lt;&lt; "" "" ;
            expand(value % 1000);
        }
    }
    else if(value &gt;= 100)
    {
        expand(value / 100);
        cout&lt;&lt;"" hundred"";
        if(value % 100)
        {
            cout &lt;&lt; "" and "";
            expand (value % 100);
        }
    }
    else if(value &gt;= 20)
    {
        cout &lt;&lt; tens[value / 10];
        if(value % 10)
        {
            cout &lt;&lt; "" "";
            expand(value % 10);
        }
    }
    else
    {
        cout&lt;&lt;ones[value];
    }
    return;
}
</code></pre>
","13579961"
"C - Convert an uppercase letter to lowercase","80013","","<p>A really simple program. I just want to turn an 'A' into an 'a', but output is giving me 'A'. </p>

<pre><code>#include &lt;stdio.h&gt;

int main(void) {
    putchar(lower('A')); 

}

lower(a) 
int a; 
{
    if ((a &gt;= 65) &amp;&amp; (a &gt;= 90))
        a = a + 32; 
    return a;  
}
</code></pre>
","<p>You messed up the second part of your <code>if</code> condition. That should be <code>a &lt;= 90</code>.</p>

<p>Also, FYI, there is a C library function <code>tolower</code> that does this already:</p>

<pre><code>#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;

int main() {
    putchar(tolower('A'));
}
</code></pre>
","15708817"
"How can I check if char* variable points to empty string?","79957","","<p>How can I check if <code>char*</code> variable points to an empty string?</p>
","<p>Check if the first character is '\0'. You should also probably check if your pointer is NULL.</p>

<pre><code>char *c = """";
if ((c != NULL) &amp;&amp; (c[0] == '\0')) {
   printf(""c is empty\n"");
}
</code></pre>

<p>You could put both of those checks in a function to make it convenient and easy to reuse.</p>

<p>Edit:
In the if statement can be read like this, ""If c is not zero and the first character of character array 'c' is not '\0' or zero, then..."".</p>

<p>The <code>&amp;&amp;</code> simply combines the two conditions. It is basically like saying this:</p>

<pre><code>if (c != NULL) { /* AND (or &amp;&amp;) */
    if (c[0] == '\0') {
        printf(""c is empty\n"");
    }
}
</code></pre>

<p>You may want to get a good C programming book if that is not clear to you. I could recommend a book called ""The C Programming Language"".</p>

<p>The shortest version equivalent to the above would be:</p>

<pre><code>if (c &amp;&amp; !c[0]) {
  printf(""c is empty\n"");
}
</code></pre>
","7970669"
"clock_gettime alternative in Mac OS X","79865","","<p>When compiling a program I wrote on Mac OS X after installing the necessary libraries through MacPorts, I get this error:</p>

<pre><code>In function 'nanotime':
error: 'CLOCK_REALTIME' undeclared (first use in this function)
error: (Each undeclared identifier is reported only once
error: for each function it appears in.)
</code></pre>

<p>It appears that <code>clock_gettime</code> is not implemented in Mac OS X. Is there an alternative means of getting the <strong>epoch time</strong> in <strong>nanoseconds</strong>? Unfortunately <code>gettimeofday</code> is in <strong>microseconds</strong>.</p>
","<p>In effect, it seems not to be implemented for macOS before Sierra 10.12. You may want to look at this <a href=""http://www.wand.net.nz/~smr26/wordpress/2009/01/19/monotonic-time-in-mac-os-x/"" rel=""nofollow noreferrer"">blog entry</a>, but this doesn't seem to be available anymore. The main idea is in the following code snippet:</p>

<pre><code>#include &lt;mach/mach_time.h&gt;
#define ORWL_NANO (+1.0E-9)
#define ORWL_GIGA UINT64_C(1000000000)

static double orwl_timebase = 0.0;
static uint64_t orwl_timestart = 0;

struct timespec orwl_gettime(void) {
  // be more careful in a multithreaded environement
  if (!orwl_timestart) {
    mach_timebase_info_data_t tb = { 0 };
    mach_timebase_info(&amp;tb);
    orwl_timebase = tb.numer;
    orwl_timebase /= tb.denom;
    orwl_timestart = mach_absolute_time();
  }
  struct timespec t;
  double diff = (mach_absolute_time() - orwl_timestart) * orwl_timebase;
  t.tv_sec = diff * ORWL_NANO;
  t.tv_nsec = diff - (t.tv_sec * ORWL_GIGA);
  return t;
}
</code></pre>
","5167506"
"__FILE__ macro shows full path","79774","","<p>The standard predefined MACRO __FILE__ available in C shows the full path to the file. Is there any way to short the path? I mean instead of</p>

<pre><code>/full/path/to/file.c
</code></pre>

<p>I see</p>

<pre><code>to/file.c
</code></pre>

<p>or </p>

<pre><code>file.c
</code></pre>
","<p>Try</p>

<pre><code>#include &lt;string.h&gt;

#define __FILENAME__ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)
</code></pre>

<p>For Windows use '\\' instead of '/'.</p>
","8488201"
"#ifdef vs #if - which is better/safer as a method for enabling/disabling compilation of particular sections of code?","79753","","<p>This may be a matter of style, but there's a bit of a divide in our dev team and I wondered if anyone else had any ideas on the matter...</p>

<p>Basically, we have some debug print statements which we turn off during normal development. Personally I prefer to do the following:</p>

<pre><code>//---- SomeSourceFile.cpp ----

#define DEBUG_ENABLED (0)

...

SomeFunction()
{
    int someVariable = 5;

#if(DEBUG_ENABLED)
    printf(""Debugging: someVariable == %d"", someVariable);
#endif
}
</code></pre>

<p>Some of the team prefer the following though:</p>

<pre><code>// #define DEBUG_ENABLED

...

SomeFunction()
{
    int someVariable = 5;

#ifdef DEBUG_ENABLED
    printf(""Debugging: someVariable == %d"", someVariable);
#endif
}
</code></pre>

<p>...which of those methods sounds better to you and why? My feeling is that the first is safer because there is always something defined and there's no danger it could destroy other defines elsewhere.</p>
","<p>My initial reaction was <em><code>#ifdef</code>, of course</em>, but I think <code>#if</code> actually has some significant advantages for this - here's why:</p>

<p>First, you can use <code>DEBUG_ENABLED</code> in preprocessor <em>and</em> compiled tests. Example - Often, I want longer timeouts when debug is enabled, so using <code>#if</code>, I can write this</p>

<pre><code>  DoSomethingSlowWithTimeout(DEBUG_ENABLED? 5000 : 1000);
</code></pre>

<p>... instead of ...</p>

<pre><code>#ifdef DEBUG_MODE
  DoSomethingSlowWithTimeout(5000);
#else
  DoSomethingSlowWithTimeout(1000);
#endif
</code></pre>

<p>Second, you're in a better position if you want to migrate from a <code>#define</code> to a global constant. <code>#define</code>s are usually frowned on by most C++ programmers.</p>

<p>And, Third, you say you've a divide in your team. My guess is this means different members have already adopted different approaches, and you need to standardise. Ruling that <code>#if</code> is the preferred choice means that code using <code>#ifdef</code> will compile -and run- even when <code>DEBUG_ENABLED</code> is false. And it's <em>much</em> easier to track down and remove debug output that is produced when it shouldn't be than vice-versa.</p>

<p>Oh, and a minor readability point. You should be able to use true/false rather than 0/1 in your <code>#define</code>, and because the value is a single lexical token, it's the one time you don't need parentheses around it. </p>

<pre><code>#define DEBUG_ENABLED true
</code></pre>

<p>instead of </p>

<pre><code>#define DEBUG_ENABLED (1)
</code></pre>
","135454"
"How to break out of nested loops?","79706","","<p>If I use a <code>break</code> statement, it will only break inner loop and I need to use some flag to break the outer loop. But if there are many nested loops, the code will not look good.</p>

<p>Is there any other way to break all of the loops? (Please don't use <code>goto stmt</code>.)</p>

<pre><code>for(int i = 0; i &lt; 1000; i++) {
   for(int j = 0; j &lt; 1000; j++) {
       if(condition) {
            // both of the loops need to break and control will go to stmt2
       }
   }

}

stmt2
</code></pre>
","<p>What about:</p>

<pre><code>if(condition) {
i = j = 1000;break;
}
</code></pre>
","9695931"
"Hexadecimal string to byte array in C","79648","","<p>Is there any standard C function that converts from <strong>hexadecimal string to byte array</strong>?<br>
I do not want to write my own function.</p>
","<p>As far as I know, there's no standard function to do so, but it's simple to achieve in the following manner:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char **argv) {
    const char hexstring[] = ""DEadbeef10203040b00b1e50"", *pos = hexstring;
    unsigned char val[12];

     /* WARNING: no sanitization or error-checking whatsoever */
    for (size_t count = 0; count &lt; sizeof val/sizeof *val; count++) {
        sscanf(pos, ""%2hhx"", &amp;val[count]);
        pos += 2;
    }

    printf(""0x"");
    for(size_t count = 0; count &lt; sizeof val/sizeof *val; count++)
        printf(""%02x"", val[count]);
    printf(""\n"");

    return 0;
}
</code></pre>

<hr>

<h3>Edit</h3>

<p>As Al pointed out, in case of an odd number of hex digits in the string, you have to make sure you prefix it with a starting 0. For example, the string <code>""f00f5""</code> will be evaluated as <code>{0xf0, 0x0f, 0x05}</code>  erroneously by the above example, instead of the proper <code>{0x0f, 0x00, 0xf5}</code>.</p>

<p>Amended the example a little bit to address the comment from @MassimoCallegari</p>
","3409211"
"What is the difference between a static global and a static volatile variable?","79504","","<p>I have used a static global variable and a static volatile variable in file scope,
<p> both are updated by an ISR and a main loop and main loop checks the value of the variable. <p>here during optimization neither the global variable nor the volatile variable are optimized. So instead of using a volatile variable a global variable solves the problem. 
<p>So is it good to use global variable instead of volatile?
<p>Any specific reason to use static volatile??
<p>Any example program would be appreciable.
<p>Thanks in advance..</p>
","<p>They are different things. I'm not an expert in volatile semantics. But i think it makes sense what is described here.</p>

<h3>Global</h3>

<p>Global just means the identifier in question is declared at file-scope. There are different scopes, called  function (where goto-labels are defined in), ﬁle (where globals reside), block (where normal local variables reside), and function prototype (where function parameters reside). This concept just exist to structure the visibility of identifiers. It doesn't have anything to do with optimizations. </p>

<h3>Static</h3>

<p><code>static</code> is a storage duration (we won't look at that here) and a way to give a name declared within file scope internal linkage. This can be done for functions or objects only required within one translation unit. A typical example might be a <code>help</code> function printing out the accepted parameters, and which is only called from the <code>main</code> function defined in the same <code>.c</code> file. </p>

<p><strong>6.2.2/2</strong> in a C99 draft:</p>

<blockquote>
  <p>If the declaration of a ﬁle scope
  identiﬁer for an object or a function
  contains  the storage class speciﬁer
  static, the identiﬁer has internal
  linkage.</p>
</blockquote>

<p>Internal linkage means that the identifier is not visible outside the current translation unit (like the <code>help</code> function of above). </p>

<h3>Volatile</h3>

<p>Volatile is a different thing: (<strong>6.7.3/6</strong>)</p>

<blockquote>
  <p>An object that has volatile-qualiﬁed
  type may be modiﬁed in ways unknown to
  the implementation or have other
  unknown side effects. Therefore any
  expression referring to such an object
  shall be evaluated strictly according
  to the rules of the abstract machine,
  as described in 5.1.2.3. Furthermore,
  at every sequence point the value last
  stored in the object shall agree with
  that prescribed by the abstract
  machine, except as modiﬁed by the
  unknown factors mentioned
  previously.</p>
</blockquote>

<p>The Standard provides an excellent example for an example where <code>volatile</code> would be redundant (<strong>5.1.2.3/8</strong>):</p>

<blockquote>
  <p>An implementation might deﬁne a
  one-to-one correspondence between
  abstract and actual semantics: at
  every sequence point, the values of
  the actual objects would agree with
  those speciﬁed by the abstract
  semantics. The keyword <code>volatile</code>
  would then be redundant.</p>
</blockquote>

<p>Sequence points are points where the effect of side effects concerning the <em>abstract machine</em> are completed (i.e external conditions like memory cell values are not included). Between the right and the left of <code>&amp;&amp;</code> and <code>||</code>, after <code>;</code> and returning from a function call are sequence points for example. </p>

<p>The <em>abstract semantics</em> is what the compiler can deduce from seeing only the sequence of code within a particular program. Effects of optimizations are irrelevant here. <em>actual semantics</em> include the effect of side effects done by writing to objects (for example, changing of memory cells). Qualifying an object as volatile means one always gets the value of an object straight from memory (""as modified by the unknown factors""). The Standard doesn't mention threads anywhere, and if you must rely on the order of changes, or on atomicity of operations, you should use platform dependent ways to ensure that.</p>

<p>For an easy to understand overview, intel has a great article about it <a href=""http://software.intel.com/en-us/blogs/2007/11/30/volatile-almost-useless-for-multi-threaded-programming/"" rel=""noreferrer"">here</a>.</p>

<h3>What should i do now?</h3>

<p>Keep declaring your file-scope (global) data as volatile. Global data in itself does not mean the variables' value will equal to the value stored in memory. And static does only make your objects local to the current translation unit (the current <code>.c</code> files and all other files #include'ed by it). </p>
","346397"
"Count the number of occurrences of each letter in string","79361","","<p>How can I count the number of occurrences in c of each letter (ignoring case) in the string? So that it would print out <code>letter: # number of occurences</code>, I have code to count the occurences of one letter, but how can I count the occurence of each letter in the string?</p>

<pre><code>{
    char
    int count = 0;
    int i;

    //int length = strlen(string);

    for (i = 0; i &lt; 20; i++)
    {
        if (string[i] == ch)
        {
            count++;
        }
    }

    return count;
}
</code></pre>

<p>output:</p>

<pre><code>a : 1
b : 0
c : 2
etc...
</code></pre>
","<p>Let's assume you have a system where <code>char</code> is eight bit and all the characters you're trying to count are encoded using a non-negative number. In this case, you can write:</p>

<pre><code>const char *str = ""The quick brown fox jumped over the lazy dog."";

int counts[256] = { 0 };

int i;
size_t len = strlen(str);

for (i = 0; i &lt; len; i++) {
    counts[(int)(str[i])]++;
}

for (i = 0; i &lt; 256; i++) {
    printf(""The %d. character has %d occurrences.\n"", i, counts[i]);
}
</code></pre>

<p>Note that this will count all the characters in the string. If you are 100% absolutely positively sure that your string will have only letters (no numbers, no whitespace, no punctuation) inside, then 1. asking for ""case insensitiveness"" starts to make sense, 2. you can reduce the number of entries to the number of characters in the English alphabet (namely 26) and you can write something like this:</p>

<pre><code>#include &lt;ctype.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;

const char *str = ""TheQuickBrownFoxJumpedOverTheLazyDog"";

int counts[26] = { 0 };

int i;
size_t len = strlen(str);

for (i = 0; i &lt; len; i++) {
    // Just in order that we don't shout ourselves in the foot
    char c = str[i];
    if (!isalpha(c)) continue;

    counts[(int)(tolower(c) - 'a')]++;
}

for (i = 0; i &lt; 26; i++) {
    printf(""'%c' has %2d occurrences.\n"", i + 'a', counts[i]);
}
</code></pre>
","13213462"
"Faster way to zero memory than with memset?","79285","","<p>I learned that <code>memset(ptr, 0, nbytes)</code> is really fast, but is there a faster way (at least on x86)?</p>

<p>I assume that memset uses <code>mov</code>, however when zeroing memory most compilers use <code>xor</code> as it's faster, correct? <strong>edit1:</strong> Wrong, as GregS pointed out that only works with registers. What was I thinking?</p>

<p>Also I asked a person who knew of assembler more than me to look at the stdlib, and he told me that on x86 memset is not taking full advantage of the 32 bit wide registers. However at that time I was very tired, so I'm not quite sure I understood it correctly.</p>

<p><strong>edit2</strong>:
I revisited this issue and did a little testing. Here is what I tested:</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;malloc.h&gt;
    #include &lt;string.h&gt;
    #include &lt;sys/time.h&gt;

    #define TIME(body) do {                                                     \
        struct timeval t1, t2; double elapsed;                                  \
        gettimeofday(&amp;t1, NULL);                                                \
        body                                                                    \
        gettimeofday(&amp;t2, NULL);                                                \
        elapsed = (t2.tv_sec - t1.tv_sec) * 1000.0 + (t2.tv_usec - t1.tv_usec) / 1000.0; \
        printf(""%s\n --- %f ---\n"", #body, elapsed); } while(0)                 \


    #define SIZE 0x1000000

    void zero_1(void* buff, size_t size)
    {
        size_t i;
        char* foo = buff;
        for (i = 0; i &lt; size; i++)
            foo[i] = 0;

    }

    /* I foolishly assume size_t has register width */
    void zero_sizet(void* buff, size_t size)
    {
        size_t i;
        char* bar;
        size_t* foo = buff;
        for (i = 0; i &lt; size / sizeof(size_t); i++)
            foo[i] = 0;

        // fixes bug pointed out by tristopia
        bar = (char*)buff + size - size % sizeof(size_t);
        for (i = 0; i &lt; size % sizeof(size_t); i++)
            bar[i] = 0;
    }

    int main()
    {
        char* buffer = malloc(SIZE);
        TIME(
            memset(buffer, 0, SIZE);
        );
        TIME(
            zero_1(buffer, SIZE);
        );
        TIME(
            zero_sizet(buffer, SIZE);
        );
        return 0;
    }
</code></pre>

<p>results:</p>

<p><strike>
zero_1 is the slowest, except for -O3. zero_sizet is the fastest with roughly equal performance across -O1, -O2 and -O3. memset was always slower than zero_sizet. (twice as slow for -O3). one thing of interest is that at -O3 zero_1 was equally fast as zero_sizet. however the disassembled function had roughly four times as many instructions (I think caused by loop unrolling). Also, I tried optimizing zero_sizet further, but the compiler always outdid me, but no surprise here.</strike> </p>

<p>For now memset wins, previous results were distorted by CPU cache. (all tests were run on Linux) Further testing needed. I'll try assembler next :)</p>

<p><strong>edit3:</strong> fixed bug in test code, test results are not affected </p>

<p><strong>edit4:</strong> While poking around the disassembled VS2010 C runtime, I noticed that <code>memset</code> has a SSE optimized routine for zero. It will be hard to beat this.</p>
","<p>x86 is rather broad range of devices.</p>

<p>For totally generic x86 target, an assembly block with ""rep movsd"" could blast out zeros to memory 32-bits at time. Try to make sure the bulk of this work is DWORD aligned.</p>

<p>For chips with mmx, an assembly loop with movq could hit 64bits at a time.</p>

<p>You might be able to get a C/C++ compiler to use a 64-bit write with a pointer to a long long or _m64. Target must be 8 byte aligned for the best performance.</p>

<p>for chips with sse, movaps is fast, but only if the address is 16 byte aligned, so use a movsb until aligned, and then complete your clear with a loop of movaps</p>

<p>Win32 has ""ZeroMemory()"", but I forget if thats a macro to memset, or an actual 'good' implementation.</p>
","3655024"
"malloc an array of struct pointers","79179","","<p>I have the following struct:</p>

<pre><code>typedef struct _chess {
   int **array;
   int size;
   struct _chess *parent;
} chess;
</code></pre>

<p>and I have:</p>

<pre><code>typedef struct _chess *Chess;
</code></pre>

<p>Now, I want to create an array of dynamic length to store pointers to the chess struct so I do the following:</p>

<pre><code>Chess array [] = malloc(size * sizeof(Chess));
</code></pre>

<p>This gives me an error: invalid initializer.</p>

<p>And if I drop the [] and do this:</p>

<pre><code>Chess array = malloc(size * sizeof(Chess));
</code></pre>

<p>it compiles without error but when I try to set an element of this array to NULL by doing:</p>

<pre><code>array[i]=NULL;
</code></pre>

<p>I get an error: incompatible types when assigning to type ‘struct _chess’ from type ‘void *’</p>

<p>Any idea what am I doing wrong?
Thanks.</p>
","<p><code>array</code> is a slightly misleading name. For a dynamically allocated array of pointers, <code>malloc</code> will return a pointer to a block of memory. You need to use <code>Chess*</code> and not <code>Chess[]</code> to hold the pointer to your array.</p>

<pre><code>Chess *array = malloc(size * sizeof(Chess));
array[i] = NULL;
</code></pre>

<p>and perhaps later:</p>

<pre><code>/* create new struct chess */
array[i] = malloc(sizeof(struct chess));

/* set up its members */
array[i]-&gt;size = 0;
/* etc. */
</code></pre>
","10811531"
"So what does ""return 0"" actually mean?","79152","","<p>I'm pretty proficient in PHP, but I've started dabbling with C. I've seen the code</p>

<pre><code>return 0;
</code></pre>

<p>at the end of functions that don't return a value. This isn't used in PHP, because if a function is doesn't have a return, a value NULL is automatically returned.  </p>

<p>All I'm asking is, in simple English, what does the <code>return 0</code> actually do? Is it like PHP, where it returns its argument as the value of the function call? Is it just good practice?</p>

<p>I know this question has been asked many times before, but I'm asking it from the point of view of a PHP developer. The answers google throws up haven't been that concise.</p>
","<blockquote>
  <p>Is it like php, where it returns its argument as the value of the
  function call? Is it just good practise?</p>
</blockquote>

<p>Yes, PHP and many other languages borrowed the <code>return</code> keyword from 'C'. And in all the languages, the <code>return</code> keyword has the same function - to return from the function. Anything that follows <code>return</code> keyword is the value that is returned to the caller.</p>

<p>Is it a good practise? Yes and No. Not all functions <strong>should</strong> return a value. And quite a few in the standard library even, do not return any value. Hence their return type is <code>void</code>.</p>

<p>But <code>main</code> function should return <code>0</code>(also <code>EXIT_SUCCESS</code>) to identify that the program has executed successfully. And -1 otherwise (also <code>EXIT_FAILURE</code>)</p>

<p>EDIT: (Thanks to @KeithThompson):</p>

<p><code>EXIT_FAILURE</code> is implementation defined. <code>1</code> is a common value of <code>EXIT_FAILURE</code> but the whole point is, you need not know.</p>
","14928607"
"Using true and false in C","79079","","<p>As far as I can see there are 3 ways to use booleans in c</p>

<ol>
<li>with the bool type, from  then using true and false</li>
<li>defining using preprocessor <code>#define FALSE 0 ... #define TRUE !(FALSE)</code></li>
<li>Just to use constants directly, i.e. 1 and 0</li>
</ol>

<p>are there other methods I missed? What are the pros and cons of the different methods? </p>

<p>I suppose the fastest would be number 3, 2 is more easily readable still (although bitwise negation will slightly add to overhead), 1 is most readable not compatible with all compilers.</p>
","<p>Just include <code>&lt;stdbool.h&gt;</code> if your system provides it. That defines a number of macros, including <code>bool</code>, <code>false</code>, and <code>true</code> (defined to <code>_Bool</code>, 0, and 1 respectively). See section 7.16 of C99 for more details.</p>
","2254087"
"The maximum size of an array in C","78990","","<p>I understand that hardware will limit the amount of memory allocated during program execution. However, my question is <strong>without regard to hardware.</strong> Assuming that there was no limit to the amount of memory, would there be no limit to the array?</p>
","<p>There is no <em>fixed</em> limit to the size of an array in C.</p>

<p>The size of any single object, including of any array object, is limited by <code>SIZE_MAX</code>, the maximum value of type <code>size_t</code>, which is the result of the <code>sizeof</code> operator.  (It's not entirely clear whether the C standard permits objects larger than <code>SIZE_MAX</code> bytes, but in practice such objects are not supported; see footnote.)  Since <code>SIZE_MAX</code> is determined by the implementation, and cannot be modified by any program, that imposes an upper bound of <code>SIZE_MAX</code> bytes for any single object.</p>

<p>The width of the type <code>void*</code>, a generic pointer type, imposes an upper bound on the total size of all objects in an executing program (which may be larger than the maximum size of a single object).</p>

<p>The C standard imposes lower bounds, but not upper bounds, on these fixed sizes.  No conforming C implementation can support infinite-sized objects, but it can in principle support objects of any finite size.  Upper bounds are imposed by individual C implementations, by the environments in which they operate, and by physics, not by the language.</p>

<p>For example, a conforming implementation could have <code>SIZE_MAX</code> equal to 2<sup>1024</sup>-1, which means it could <em>in principle</em> have objects up to 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 bytes.</p>

<p>Good luck finding hardware that actually supports such objects.</p>

<p><em>Footnote</em>: There is no explicit rule that no object can be bigger than <code>SIZE_MAX</code> bytes.  You couldn't usefully apply the <code>sizeof</code> operator to such an object, but like any other operator, <code>sizeof</code> can overflow; that doesn't mean you couldn't perform operations on such an object.  But in practice, any sane implementation will make <code>size_t</code> big enough to represent the size of any object it supports.</p>
","9387041"
"Initializing array of structures","78962","","<p>Here's initialization I just found in somebody else's question.<br></p>

<pre><code>my_data data[]={
    { .name = ""Peter"" },
    { .name = ""James"" },
    { .name = ""John"" },
    { .name = ""Mike"" }
};
</code></pre>

<p>I never saw something like this before and can't find explanation how is .name possible to be correct.<br>
What I'm looking for is how step by step this process goes.</p>

<p>It looks like it gets:</p>

<pre><code>1) data;
2) *data;
3) (*data).name;
4) (*data).name=""Peter"";
</code></pre>

<p>Or am I totally wrong?</p>
","<p>There are only two syntaxes at play here.</p>

<ol>
<li><p>Plain old array initialisation:</p>

<pre><code>int x[] = {0, 0}; // x[0] = 0, x[1] = 0
</code></pre></li>
<li><p>A <strong>designated initialiser</strong>. See the accepted answer to this question: <a href=""https://stackoverflow.com/questions/330793/how-to-initialize-a-struct-in-ansi-c"">How to initialize a struct in accordance with C programming language standards</a></p>

<p>The syntax is pretty self-explanatory though. You can initialise like this:</p>

<pre><code>struct X {
    int a;
    int b;
}
struct X foo = { 0, 1 }; // a = 0, b = 1
</code></pre>

<p>or to use any ordering,</p>

<pre><code>struct X foo = { .b = 0, .a = 1 }; // a = 1, b = 0
</code></pre></li>
</ol>
","18921683"
"makefiles - compile all c files at once","78944","","<p>I want to experiment with GCC whole program optimizations. To do so I have to pass all C-files at once to the compiler frontend. However, I use makefiles to automate my build process, and I'm not an expert when it comes to makefile magic.</p>

<p>How should I modify the makefile if I want to compile (maybe even link) using just one call to GCC?</p>

<p>For reference - my makefile looks like this:</p>

<pre><code>LIBS  = -lkernel32 -luser32 -lgdi32 -lopengl32
CFLAGS = -Wall

OBJ = 64bitmath.o    \
      monotone.o     \
      node_sort.o    \
      planesweep.o   \
      triangulate.o  \
      prim_combine.o \
      welding.o      \
      test.o         \
      main.o

%.o : %.c
    gcc -c $(CFLAGS) $&lt; -o $@

test: $(OBJ)
    gcc -o $@ $^ $(CFLAGS) $(LIBS)
</code></pre>
","<pre><code>LIBS  = -lkernel32 -luser32 -lgdi32 -lopengl32
CFLAGS = -Wall

# Should be equivalent to your list of C files, if you don't build selectively
SRC=$(wildcard *.c)

test: $(SRC)
    gcc -o $@ $^ $(CFLAGS) $(LIBS)
</code></pre>
","170472"
"What is __stdcall?","78884","","<p>I'm learning about Win32 programming, and the <code>WinMain</code> prototype looks like:</p>

<pre><code>int WINAPI WinMain ( HINSTANCE instance, HINSTANCE prev_instance, PSTR cmd_line, int cmd_show )
</code></pre>

<p>I was confused as to what this <code>WINAPI</code> identifier was for and found:</p>

<pre><code>#define WINAPI      __stdcall
</code></pre>

<p>What does this do?  I'm confused by this having something at all after a return type.  What is <code>__stdcall</code> for?  What does it mean when there is something between the return type and function name?</p>
","<p><code>__stdcall</code> is the calling convention used for the function.  This tells the compiler the rules that apply for setting up the stack, pushing arguments and getting a return value.</p>

<p>There are a number of other calling conventions, <code>__cdecl</code>, <code>__thiscall</code>, <code>__fastcall</code> and the wonderfully named <code>__naked</code>.  <code>__stdcall</code> is the standard calling convention for Win32 system calls. </p>

<p>Wikipedia covers the <a href=""http://en.wikipedia.org/wiki/X86_calling_conventions"" rel=""noreferrer"">details</a>.</p>

<p>It primarily matters when you are calling a function outside of your code (e.g. an OS API) or the OS is calling you (as is the case here with WinMain).  If the compiler doesn't know the correct calling convention then you will likely get very strange crashes as the stack will not be managed correctly.</p>
","297661"
"getch and arrow codes","78771","","<p>I'm writing a programm that's using <code>getch()</code> to scan for arrow keys. My code so far is:</p>

<pre><code>switch(getch()) {
    case 65:    // key up
        break;
    case 66:    // key down
        break;
    case 67:    // key right
        break;
    case 68:    // key left
        break;
}
</code></pre>

<p>Problem is that when I press <code>'A'</code>, <code>'B'</code>, <code>'C'</code> or <code>'D'</code> the code will also executed, because <code>65</code> is the decimal code for <code>'A'</code>, etc...</p>

<p>Is there a way to check for an arrow key without call others?</p>

<p>Thanks!</p>
","<p>By pressing one arrow key <code>getch</code> will push three values into the buffer:</p>

<ul>
<li><code>'\033'</code></li>
<li><code>'['</code></li>
<li><code>'A'</code>, <code>'B'</code>, <code>'C'</code> or <code>'D'</code></li>
</ul>

<p>So the code will be something like this:</p>

<pre><code>if (getch() == '\033') { // if the first value is esc
    getch(); // skip the [
    switch(getch()) { // the real value
        case 'A':
            // code for arrow up
            break;
        case 'B':
            // code for arrow down
            break;
        case 'C':
            // code for arrow right
            break;
        case 'D':
            // code for arrow left
            break;
    }
}
</code></pre>
","11432632"
"The ternary (conditional) operator in C","78764","","<p>What is the need for the conditional operator? Functionally it is redundant, since it implements an if-else construct. If the conditional operator is more efficient than the equivalent if-else assignment, why can't if-else be interpreted more efficiently by the compiler?</p>
","<p>The ternary operator is a syntactic and readability convenience, not a performance shortcut. People are split on the merits of it for conditionals of varying complexity, but for short conditions, it can be useful to have a one-line expression.</p>

<p>Moreover, since it's an expression, as <a href=""https://stackoverflow.com/a/758871/75170"">Charlie Martin wrote</a>, that means it can appear on the right-hand side of a statement in C. This is valuable for being concise.</p>
","758858"
"What is the meaning of ""__attribute__((packed, aligned(4))) ""","78722","","<p>It is C language.It is written that:</p>

<pre><code>typedef struct __attribute__((packed, aligned(4))) Ball {
    float2 delta;
    float2 position;
    //float3 color;
    float size;
    //int arcID;
    //float arcStr;
} Ball_t;
Ball_t *balls;
</code></pre>

<p>Please tell me what is the meaning of it,and how to use this keyword. </p>
","<p>Before answering, I would like to give you some data from Wiki</p>

<hr>

<p><strong>Data structure alignment</strong> is the way data is arranged and accessed in computer memory. It consists of two separate but related issues: <em>data alignment</em> and <em>data structure padding</em>.</p>

<p>When a modern computer reads from or writes to a memory address, it will do this in word sized chunks (e.g. 4 byte chunks on a 32-bit system). <strong><em>Data alignment</em></strong> means putting the data at a memory offset equal to some multiple of the word size, which increases the system's performance due to the way the CPU handles memory.</p>

<p>To align the data, it may be necessary to insert some meaningless bytes between the end of the last data structure and the start of the next, which is <strong><em>data structure padding</em></strong>.</p>

<hr>

<p>gcc provides facility to avoid structure padding. i.e To avoid this meaningless bytes in some cases. Consider the following structure</p>

<pre><code>typedef struct
{
     char Data1;
     int Data2;
     unsigned short Data3;
     char Data4;

}sSampleStruct;
</code></pre>

<p><code>sizeof(sSampleStruct)</code> will be 12 rather than 8. Because of structure padding. By default, In X86, structures will be padded to 4-byte alignment. <br/></p>

<pre><code>typedef struct
{
     char Data1;
     //3-Bytes Added here.
     int Data2;
     unsigned short Data3;
     char Data4;
     //1-byte Added here.

}sSampleStruct;
</code></pre>

<p>We can use <code>__attribute__((packed, aligned(X)))</code> to insist particular(X) sized padding. X should be powers of two. Refer <a href=""https://stackoverflow.com/questions/11667181/why-does-padding-have-to-be-a-power-of-two"">here</a></p>

<pre><code>typedef struct
{
     char Data1;
     int Data2;
     unsigned short Data3;
     char Data4;

}__attribute__((packed, aligned(1))) sSampleStruct;  
</code></pre>

<p>so the above specified gcc attribute does not allow the structure padding. so the size will be 8 bytes.</p>

<p>If you wish to do the same for all the structures, simply we can push the alignment value to stack using <code>#pragma</code> </p>

<pre><code>#pragma pack(push, 1)

//Structure 1
......

//Structure 2
......

#pragma pack(pop)
</code></pre>
","11772340"
"C Macro definition to determine big endian or little endian machine?","78698","","<p>Is there a one line macro definition to determine the endianness of the machine. I am using the following code but converting it to macro would be too long.</p>

<pre><code>unsigned char test_endian( void )
{
    int test_var = 1;
    unsigned char test_endian* = (unsigned char*)&amp;test_var;

    return (test_endian[0] == NULL);
}
</code></pre>
","<p>Code supporting arbitrary byte orders, ready to be put into a file called <code>order32.h</code>:</p>

<pre><code>#ifndef ORDER32_H
#define ORDER32_H

#include &lt;limits.h&gt;
#include &lt;stdint.h&gt;

#if CHAR_BIT != 8
#error ""unsupported char size""
#endif

enum
{
    O32_LITTLE_ENDIAN = 0x03020100ul,
    O32_BIG_ENDIAN = 0x00010203ul,
    O32_PDP_ENDIAN = 0x01000302ul
};

static const union { unsigned char bytes[4]; uint32_t value; } o32_host_order =
    { { 0, 1, 2, 3 } };

#define O32_HOST_ORDER (o32_host_order.value)

#endif
</code></pre>

<p>You would check for little endian systems via</p>

<pre><code>O32_HOST_ORDER == O32_LITTLE_ENDIAN
</code></pre>
","2103095"
"How to use fread and fwrite functions to read and write Binary files?","78679","","<p>Hi in my project I've to read a .bin file which has sensor data in the form of <code>short(16 bit values)</code>. I'm doing this using <code>fread</code> function into a buffer, but I feel that the reading-in is not happening correctly. I mean <strong>there is no consistence between what I write and what I read in.</strong> Can you guys suggest what is going wrong here? This is not my code from my project... I'm only trying to verify the <code>fread</code> and <code>fwrite</code> functions here.</p>

<pre><code>#include&lt;stdio.h&gt;
void main()
{
    FILE *fp = NULL;

    short x[10] = {1,2,3,4,5,6,5000,6,-10,11};
    short result[10];

    fp=fopen(""c:\\temp.bin"", ""wb"");

    if(fp != NULL)
    {
        fwrite(x, 2 /*sizeof(short)*/, 10 /*20/2*/, fp);
        rewind(fp);
        fread(result, 2 /*sizeof(short)*/, 10 /*20/2*/, fp);
    }
    else
        exit(0);

    printf(""\nResult"");
    printf(""\n%d"",result[0]);
    printf(""\n%d"",result[1]);
    printf(""\n%d"",result[2]);
    printf(""\n%d"",result[3]);
    printf(""\n%d"",result[4]);
    printf(""\n%d"",result[5]);
    printf(""\n%d"",result[6]);
    printf(""\n%d"",result[7]);
    printf(""\n%d"",result[8]);
    printf(""\n%d"",result[9]);

    fclose(fp)
 }
</code></pre>

<p>After I do the fread() (HEX values):</p>

<pre><code>temp.bin:
01 02 03 04 05 06 e1 8e 88 06 ef bf b6 0b...
</code></pre>

<p>After I do the fwrite()</p>

<pre><code>stdout:
Result
0
914
-28
-28714
-32557
1
512
-32557
908
914
</code></pre>
","<p>Open the file with mode <code>w+</code> (reading and writing).  The following code works:</p>

<pre><code>#include&lt;stdio.h&gt;
int main()
{
    FILE *fp = NULL;

    short x[10] = {1,2,3,4,5,6,5000,6,-10,11};
    short result[10];
    int i;

    fp=fopen(""temp.bin"", ""w+"");

    if(fp != NULL)
    {
        fwrite(x, sizeof(short), 10 /*20/2*/, fp);
        rewind(fp);
        fread(result, sizeof(short), 10 /*20/2*/, fp);
    }
    else
        return 1;

    printf(""Result\n"");
    for (i = 0; i &lt; 10; i++)
        printf(""%d = %d\n"", i, (int)result[i]);

    fclose(fp);
    return 0;
}
</code></pre>

<p>With output:</p>

<pre><code>Result
0 = 1
1 = 2
2 = 3
3 = 4
4 = 5
5 = 6
6 = 5000
7 = 6
8 = -10
9 = 11
</code></pre>
","9180191"
"Carriage return in C?","78548","","<p>Output of Following program is : <code>hai</code>  </p>

<p>I didn't get how the <code>\r</code> carriage return works in this program and in real can any one help me out ?</p>

<pre><code>#include &lt;stdio.h&gt;
#include&lt;conio.h&gt;

void main()
{
    printf(""\nab"");
    printf(""\bsi"");
    printf(""\rha"");
    _getch();
}
</code></pre>
","<p>From 5.2.2/2 (character display semantics) :</p>

<blockquote>
  <p><strong><code>\b</code></strong> (<em>backspace</em>) Moves the active
  position to the previous position on
  the current line. If the active
  position is at the initial position of
  a line, the behavior of the display
  device is unspecified.</p>
  
  <p><strong><code>\n</code></strong> (<em>new line</em>) Moves the active
  position to the initial position of
  the next line.</p>
  
  <p><strong><code>\r</code></strong> (<em>carriage return</em>) Moves the active
  position to the initial position of
  the current line.</p>
</blockquote>

<p>Here, your code produces :</p>

<ul>
<li><code>&lt;new_line&gt;ab</code></li>
<li><code>\b</code> : back one character</li>
<li>write <code>si</code> : overrides the <code>b</code> with <code>s</code> (producing <code>asi</code> on the second line)</li>
<li><code>\r</code> : back at the beginning of the current line</li>
<li>write <code>ha</code> : overrides the first two characters (producing <code>hai</code> on the second line)</li>
</ul>

<p>In the end, the output is :</p>

<pre><code>\nhai
</code></pre>
","4638574"
"Assignment makes pointer from integer without a cast and other questions","78508","","<p>I just started learning C a few days ago and I'm having a bit of difficulties with pointers. I'm trying to convert a string to an array of integers. The little snipet below seems to be working but I'm getting a warning : </p>

<p>In function 'charToInt32' 
warning: assignment makes pointer from integer without a cast [enabled by default]|
||=== Build finished: 0 errors, 1 warnings (0 minutes, 0 seconds) ===|</p>

<p>The warning comes from the line </p>

<pre><code>int32result[pos] = returnedInteger;
</code></pre>

<p>So I'm trying to understand what's the best solution. Should I use strncpy (but can I use strncpy for integers?) or something else or did I just completly misunderstand pointers?</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;


    int charToInt32(char * clearText, unsigned int * int32result[])
    {
        int i = 0, j = 0, pos = 0;          /* Counters */
        int dec[4] = {24, 16, 8, 0};        /* Byte positions in an array*/
        unsigned int returnedInteger = 0;           /*   so we can change the order*/ 

        for (i=0; clearText[i]; i+=4) {
            returnedInteger = 0;
            for (j=0; j &lt;= 3 ; j++) {
                returnedInteger |= (unsigned int) (clearText[i+j] &lt;&lt; dec[j]) ;
            }

            int32result[pos] = returnedInteger;
            pos++;
        }
        return pos;
    }



    int main()
    {
        int i = 0;
        unsigned int * int32result[1024] = {0};
        char * clearText =  ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";

        printf(""&gt;&gt;Clear: %s\n"", clearText);
        charToInt32(clearText, int32result); // Do the conversion to int32.
        printf(""&gt;&gt;Int32 converted: "");
        for (i=0; int32result[i]; i++)
            printf(""%u "", (unsigned int) int32result[i]);
        printf(""\n"");
        return 0;
    }
</code></pre>

<p>Also, at the end of the program I have the following line:</p>

<pre><code>printf(""%u "", (unsigned int) int32result[i])
</code></pre>

<p>Casting int32result[i] to unsigned int is it the only solution to avoid another warning of using %u for an unsigned int * ?</p>

<p>I did check the other ""assignment makes integer from pointer without cast"" topics/question but I could not quite get a final answer from them.</p>

<p>Thank-you for your help.</p>
","<pre><code>unsigned int * int32result[1024]
</code></pre>

<p>declares an array of 1024 <code>unsigned int</code> <em>pointers</em>.  I think you want an array of ints here instead</p>

<pre><code>unsigned int int32result[1024]
</code></pre>

<p>You have a similar problem in <code>charToInt32</code> where the <code>unsigned int * int32result[]</code> argument specifies an array of <code>unsigned int</code> arrays.  You have a single array so could pass <code>unsigned int * int32result</code> instead (i.e. remove the <code>[]</code>).</p>

<p>The rest of your code should just work then.  Calls like</p>

<pre><code>charToInt32(clearText, int32result);
</code></pre>

<p>are equivalent to</p>

<pre><code>charToInt32(clearText, &amp;int32result[0]);
</code></pre>
","16587751"
"printf, wprintf, %s, %S, %ls, char* and wchar*: Errors not announced by a compiler warning?","78506","","<p>I have tried the following code:</p>

<pre><code>wprintf(L""1 %s\n"",""some string""); //Good
wprintf(L""2 %s\n"",L""some string""); //Not good -&gt; print only first character of the string
printf(""3 %s\n"",""some string""); //Good
//printf(""4 %s\n"",L""some string""); //Doesn't compile
printf(""\n"");
wprintf(L""1 %S\n"",""some string""); //Not good -&gt; print some funny stuff
wprintf(L""2 %S\n"",L""some string""); //Good
//printf(""3 %S\n"",""some string""); //Doesn't compile
printf(""4 %S\n"",L""some string"");  //Good
</code></pre>

<p>And I get the following output:</p>

<pre><code>1 some string
2 s
3 some string

1 g1 %s

2 some string
4 some string
</code></pre>

<p>So: it seems that both <code>wprintf</code> and <code>printf</code> are able to print correctly both a char* and a wchar*, but only if the exact specifier is used. <strong>If the wrong specifier is used, you might not get a compiling error (nor warning!) and end up with wrong behavior.</strong> Do you experience the same behaviour?</p>

<p>Note: This was tested under Windows, compiled with MinGW and <strong>g++</strong> 4.7.2 (I will check gcc later)</p>

<p>Edit: I also tried %ls (result is in the comments)</p>

<pre><code>printf(""\n"");
wprintf(L""1 %ls\n"",""some string""); //Not good -&gt; print funny stuff
wprintf(L""2 %ls\n"",L""some string""); //Good
// printf(""3 %ls\n"",""some string""); //Doesn't compile
printf(""4 %ls\n"",L""some string"");  //Good
</code></pre>
","<p>I suspect GCC (mingw) has custom code to disable the checks for the wide <code>printf</code> functions on Windows. This is because Microsoft's own implementation (MSVCRT) is <em>badly wrong</em> and has <code>%s</code> and <code>%ls</code> <strong>backwards</strong> for the wide <code>printf</code> functions; since GCC can't be sure whether you will be linking with MS's broken implementation or some corrected one, the least-obtrusive thing it can do is just shut off the warning.</p>
","17702172"
"File Operations in Android NDK","78480","","<p>I am using the Android NDK to make an application primarily in C for performance reasons, but it appears that file operations such as fopen do not work correctly in Android.  Whenever I try to use these functions, the application crashes.  </p>

<p>How do I create/write to a file with the Android NDK? </p>
","<p>All of the above is correct. You can open a file through the NDK using FILE and fopen.
BUT... Dont forget to place a permission for it.
in the Android manifest place a </p>

<pre><code>&lt;uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE""/&gt; 
</code></pre>
","4068126"
"Simple use of sprintf - C","78474","","<p>I'm trying to work out why a larger problem is occurring, using a smaller program as an example. This smaller program does not work, leading me to believe it is my understanding of the function that is flawed.</p>

<p>As far as I (had) believed, the following program should initialise a string with up to 30 characters, then take the number '5' to nine significant figures, and turn it into that string. The program should then print the value '5.00000000'. However, the program prints the value 7.96788(...). Why is this?</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
    char word[30];
    sprintf(word, ""%.9g"", 5);
    printf(word);
    return 0;
}
</code></pre>
","<p>This is because <code>5</code> is an integer (<code>int</code>), and you're telling <code>sprintf</code> to pretend that it's a double-precision floating-point number (<code>double</code>). You need to change this:</p>

<pre><code>sprintf(word,""%.9g"", 5);
</code></pre>

<p>to either of these:</p>

<pre><code>sprintf(word,""%.9g"", 5.0);
sprintf(word,""%.9g"", (double) 5);
</code></pre>
","8232671"
"What REALLY happens when you don't free after malloc?","78457","","<p>This has been something that has bothered me for ages now.</p>

<p>We are all taught in school (at least, I was) that you MUST free every pointer that is allocated.  I'm a bit curious, though, about the real cost of not freeing memory.  In some obvious cases, like when <code>malloc</code> is called inside a loop or part of a thread execution, it's very important to free so there are no memory leaks.  But consider the following two examples:</p>

<p>First, if I have code that's something like this:</p>

<pre><code>int main()
{
    char *a = malloc(1024);
    /* Do some arbitrary stuff with 'a' (no alloc functions) */
    return 0;
}
</code></pre>

<p>What's the real result here?  My thinking is that the process dies and then the heap space is gone anyway so there's no harm in missing the call to <code>free</code> (however, I do recognize the importance of having it anyway for closure, maintainability, and good practice).  Am I right in this thinking?</p>

<p>Second, let's say I have a program that acts a bit like a shell.  Users can declare variables like <code>aaa = 123</code> and those are stored in some dynamic data structure for later use.  Clearly, it seems obvious that you'd use some solution that will calls some *alloc function (hashmap, linked list, something like that).  For this kind of program, it doesn't make sense to ever free after calling <code>malloc</code> because these variables must be present at all times during the program's execution and there's no good way (that I can see) to implement this with statically allocated space.  Is it bad design to have a bunch of memory that's allocated but only freed as part of the process ending?  If so, what's the alternative?</p>
","<p>Just about every modern operating system will recover all the allocated memory space after a program exits.  The only exception I can think of might be something like Palm OS where the program's static storage and runtime memory are pretty much the same thing, so not freeing might cause the program to take up more storage.  (I'm only speculating here.)</p>

<p>So generally, there's no harm in it, except the runtime cost of having more storage than you need.  Certainly in the example you give, you want to keep the memory for a variable that might be used until it's cleared.</p>

<p>However, it's considered good style to free memory as soon as you don't need it any more, and to free anything you still have around on program exit.  It's more of an exercise in knowing what memory you're using, and thinking about whether you still need it.  If you don't keep track, you might have memory leaks.</p>

<p>On the other hand, the similar admonition to close your files on exit has a much more concrete result - if you don't, the data you wrote to them might not get flushed, or if they're a temp file, they might not get deleted when you're done.  Also, database handles should have their transactions committed and then closed when you're done with them.  Similarly, if you're using an object oriented language like C++ or Objective C, not freeing an object when you're done with it will mean the destructor will never get called, and any resources the class is responsible might not get cleaned up.</p>
","654766"
"How to compile and run C in sublime text 3?","78322","","<p>I would like to compile and run C program in sublime text 3 on ubuntu 14.04. Currently the program is being compiled with gcc using sublime text 3 executing a command (see below code), but I was wondering if it's possible to have the program execution output to appear on sublime text console as well.</p>

<p>Here's what I currently have to compile C program with sublime text 3</p>

<p><strong>c_compile.sublime-build</strong></p>

<pre><code>{
""cmd"" : [""gcc"", ""$file_name"", ""-o"", ""${file_base_name}""],
""selector"" : ""source.c"",
""shell"":false,
""working_dir"" : ""$file_path""
}
</code></pre>

<p>I've tried adding <code>&amp;&amp; ./${file_base_name}</code> like this:</p>

<pre><code>{
""cmd"" : [""gcc"", ""$file_name"", ""-o"", ""${file_base_name}"",""&amp;&amp;"",""./${file_base_name}""],
""selector"" : ""source.c"",
""shell"":false,
""working_dir"" : ""$file_path""
}
</code></pre>

<p>But it's giving me this error:</p>

<pre><code>gcc: error: &amp;&amp;: No such file or directory
[Finished in 0.0s with exit code 1]
[cmd: ['gcc', 'Ex1-6.c', '-o', 'Ex1-6', '&amp;&amp;', './Ex1-6']]
[dir: /home/admin/Desktop/C/book/chap1]
[path: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games]
</code></pre>

<p>Here's my simple C program I'm working with:</p>

<p><strong>Ex1-6.c</strong></p>

<pre><code>#include &lt;stdio.h&gt;

main(){
    printf(""Hello world"");
}
</code></pre>

<p>I searched online for a solution but suggested answers either allows to compile only (This parts is already working for me), or does not work. Any idea how to fix this code in order to compile and run in sublime text 3 (If possible). Thank you</p>

<p><strong>Edit #1 as suggested by  user2357112:</strong></p>

<p>After changing <code>shell</code> to <code>true</code>:</p>

<pre><code>{
""cmd"" : [""gcc"", ""$file_name"", ""-o"", ""${file_base_name}"",""&amp;&amp;"",""./${file_base_name}""],
""selector"" : ""source.c"",
""shell"":true,
""working_dir"" : ""$file_path""
}
</code></pre>

<p>That's what I get:</p>

<pre><code>gcc: fatal error: no input files
compilation terminated.
[Finished in 0.0s with exit code 4]
[cmd: ['gcc', 'Ex1-6.c', '-o', 'Ex1-6', '&amp;&amp;', './Ex1-6']]
[dir: /home/admin/Desktop/C/book/chap1]
[path: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games]
</code></pre>

<p><strong>Edit #2 as suggested by Eugene K:</strong></p>

<p>I tried changing cmd to run the program only:</p>

<pre><code>{
""cmd"" : [""./${file_base_name}""],
""selector"" : ""source.c"",
""shell"":false,
""working_dir"" : ""$file_path""
}
</code></pre>

<p>It runs successfully and prints the output on the console with some code:</p>

<pre><code>Hello world
[Finished in 0.0s with exit code 12]
[cmd: ['./Ex1-6']]
[dir: /home/amir/Desktop/C/book/chap1]
[path: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games]
</code></pre>

<p>So far the cmd either compiles or runs but does not do both together, hope something can be done to make it compile and run with a single command.</p>
","<p>Have you tried just writing out the whole command in a single string?</p>

<pre><code>{
""cmd"" : [""gcc $file_name -o ${file_base_name} &amp;&amp; ./${file_base_name}""],
""selector"" : ""source.c"",
""shell"": true,
""working_dir"" : ""$file_path""
}
</code></pre>

<p>I believe (semi-speculation here), that ST3 takes the first argument as the ""program"" and passes the other strings in as ""arguments"". <a href=""https://docs.python.org/2/library/subprocess.html#subprocess.Popen"" rel=""noreferrer"">https://docs.python.org/2/library/subprocess.html#subprocess.Popen</a></p>
","24225743"
"C pointers and arrays: [Warning] assignment makes pointer from integer without a cast","78288","","<p>I'm having some trouble with pointers and arrays in C. Here's the code:</p>

<pre><code>#include&lt;stdio.h&gt;


int *ap;
int a[5]={41,42,43,44,45};
int x;

int main()
{
    ap = a[4];
    x = *ap;
    printf(""%d"",x);
    return 0;
}
</code></pre>

<p>When I compile and run the code I get this warning:</p>

<blockquote>
  <p>[Warning] assignment makes pointer from integer without a cast
  [enabled by default]</p>
</blockquote>

<p>For line number 9 (ap = a[4];) and the terminal crashes. If I change line 9 to not include a position (ap = a;) I don't get any warnings and it works. Why is this happening? I feel like the answer is obvious but I just can't see it.</p>
","<p>In this case <code>a[4]</code> is the <code>4th</code> integer in the array <code>a</code>, <code>ap</code> is a pointer to integer, so you are assigning an integer to a pointer and that's the warning.<br> So <code>ap</code> now holds <code>45</code> and when you try to de-reference it (by doing <code>*ap</code>) you are trying to access a memory at address 45, which is an invalid address, so your program crashes.</p>

<p>You should do <code>ap = &amp;(a[4]);</code> or <code>ap = a + 4;</code></p>

<p>In <code>c</code> array names decays to pointer, so <code>a</code> points to the 1st element of the array.<br>In this way, <code>a</code> is equivalent to <code>&amp;(a[0])</code>.</p>
","21858501"
"In C can a long printf statement be broken up into multiple lines?","78231","","<p>I have the following statement:</p>

<pre><code>printf(""name: %s\targs: %s\tvalue %d\tarraysize %d\n"", sp-&gt;name, sp-&gt;args, sp-&gt;value, sp-&gt;arraysize);
</code></pre>

<p>I want to break it up.  I tried the following but it doesn't work.</p>

<pre><code>printf(""name: %s\t
args: %s\t
value %d\t
arraysize %d\n"", 
sp-&gt;name, 
sp-&gt;args, 
sp-&gt;value, 
sp-&gt;arraysize);
</code></pre>

<p>How can I break it up?</p>
","<p>If you want to break a string literal onto multiple lines, you can concatenate multiple strings together, one on each line, like so:</p>

<pre><code>printf(""name: %s\t""
""args: %s\t""
""value %d\t""
""arraysize %d\n"", 
sp-&gt;name, 
sp-&gt;args, 
sp-&gt;value, 
sp-&gt;arraysize);
</code></pre>
","1752091"
"Detecting EOF in C","78184","","<p>I am using the following C code to take input from user until EOF occurs, but problem is this code is not working, it terminates after taking first input. Can anyone tell me whats wrong with this code. Thanks in advance.</p>

<pre><code>float input;

printf(""Input No: "");
scanf(""%f"", &amp;input);

while(!EOF)
{
    printf(""Output: %f"", input);
    printf(""Input No: "");
    scanf(""%f"", &amp;input);
}
</code></pre>
","<p><code>EOF</code> is just a macro with a value (usually -1). You have to test something against <code>EOF</code>, such as the result of a <code>getchar()</code> call.</p>

<p>One way to test for the end of a stream is with the <code>feof</code> function.</p>

<pre><code>if (feof(stdin))
</code></pre>

<p>Note, that the 'end of stream' state will only be set <strong>after</strong> a failed read.</p>

<p>In your example you should probably check the return value of scanf and if this indicates that no fields were read, then check for end-of-file.</p>
","1428924"
"How dangerous is it to compare floating point values?","78152","","<p>I know <code>UIKit</code> uses <code>CGFloat</code> because of the resolution independent coordinate system.</p>

<p>But every time I want to check if for example <code>frame.origin.x</code> is <code>0</code> it makes me feel sick:</p>

<pre><code>if (theView.frame.origin.x == 0) {
    // do important operation
}
</code></pre>

<p>Isn't <code>CGFloat</code> vulnerable to false positives when comparing with <code>==</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&gt;</code>?
It is a floating point and they have unprecision problems: <code>0.0000000000041</code> for example.</p>

<p>Is <code>Objective-C</code> handling this internally when comparing or can it happen that a <code>origin.x</code> which reads as zero does not compare to <code>0</code> as true?</p>
","<p>First of all, floating point values are not ""random"" in their behavior. Exact comparison can and does make sense in plenty of real-world usages. But if you're going to use floating point you need to be aware of how it works. Erring on the side of assuming floating point works like real numbers will get you code that quickly breaks. Erring on the side of assuming floating point results have large random fuzz associated with them (like most of the answers here suggest) will get you code that appears to work at first but ends up having large-magnitude errors and broken corner cases.</p>

<p>First of all, if you want to program with floating point, you should read this:</p>

<p><a href=""http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html"">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></p>

<p>Yes, read all of it. If that's too much of a burden, you should use integers/fixed point for your calculations until you have time to read it. :-)</p>

<p>Now, with that said, the biggest issues with exact floating point comparisons come down to:</p>

<ol>
<li><p>The fact that lots of values you may write in the source, or read in with <code>scanf</code> or <code>strtod</code>, <em>do not exist</em> as floating point values and get silently converted to the nearest approximation. This is what demon9733's answer was talking about.</p></li>
<li><p>The fact that many results get rounded due to not having enough precision to represent the actual result. An easy example where you can see this is adding <code>x = 0x1fffffe</code> and <code>y = 1</code> as floats. Here, <code>x</code> has 24 bits of precision in the mantissa (ok) and <code>y</code> has just 1 bit, but when you add them, their bits are not in overlapping places, and the result would need 25 bits of precision. Instead, it gets rounded (to <code>0x2000000</code> in the default rounding mode).</p></li>
<li><p>The fact that many results get rounded due to needing infinitely many places for the correct value. This includes both rational results like 1/3 (which you're familiar with from decimal where it takes infinitely many places) but also 1/10 (which also takes infinitely many places in binary, since 5 is not a power of 2), as well as irrational results like the square root of anything that's not a perfect square.</p></li>
<li><p>Double rounding. On some systems (particularly x86), floating point expressions are evaluated in higher precision than their nominal types. This means that when one of the above types of rounding happens, you'll get two rounding steps, first a rounding of the result to the higher-precision type, then a rounding to the final type. As an example, consider what happens in decimal if you round 1.49 to an integer (1), versus what happens if you first round it to one decimal place (1.5) then round that result to an integer (2). This is actually one of the nastiest areas to deal with in floating point, since the behaviour of the compiler (especially for buggy, non-conforming compilers like GCC) is unpredictable.</p></li>
<li><p>Transcendental functions (<code>trig</code>, <code>exp</code>, <code>log</code>, etc.) are not specified to have correctly rounded results; the result is just specified to be correct within one unit in the last place of precision (usually referred to as <strong>1ulp</strong>).</p></li>
</ol>

<p>When you're writing floating point code, you need to keep in mind what you're doing with the numbers that could cause the results to be inexact, and make comparisons accordingly. Often times it will make sense to compare with an ""epsilon"", but that epsilon should be based on the <em>magnitude of the numbers you are comparing</em>, not an absolute constant. (In cases where an absolute constant epsilon would work, that's strongly indicative that fixed point, not floating point, is the right tool for the job!)</p>

<p><strong>Edit:</strong> In particular, a magnitude-relative epsilon check should look something like:</p>

<pre><code>if (fabs(x-y) &lt; K * FLT_EPSILON * fabs(x+y))
</code></pre>

<p>Where <code>FLT_EPSILON</code> is the constant from <code>float.h</code> (replace it with <code>DBL_EPSILON</code> for<code>double</code>s or <code>LDBL_EPSILON</code> for <code>long double</code>s) and <code>K</code> is a constant you choose such that the accumulated error of your computations is definitely bounded by <code>K</code> units in the last place (and if you're not sure you got the error bound calculation right, make <code>K</code> a few times bigger than what your calculations say it should be).</p>

<p>Finally, note that if you use this, some special care may be needed near zero, since <code>FLT_EPSILON</code> does not make sense for denormals. A quick fix would be to make it:</p>

<pre><code>if (fabs(x-y) &lt; K * FLT_EPSILON * fabs(x+y) || fabs(x-y) &lt; FLT_MIN)
</code></pre>

<p>and likewise substitute <code>DBL_MIN</code> if using doubles.</p>
","10335601"
"How to read numbers separated by space using scanf","78077","","<p>I want to read numbers(integer type) separated by spaces using scanf() function.<br>
I have read the following</p>

<p><a href=""https://stackoverflow.com/questions/2539796/c-reading-multiple-numbers-from-single-input-line-scanf"">C, reading multiple numbers from single input line (scanf?)</a>
<br>
<a href=""https://stackoverflow.com/questions/2718819/how-to-read-scanf-with-spaces"">how to read scanf with spaces</a><br>
It doesn't help me much.
How can I read numbers with space as delimiter. For e.g. I have following numbers as input <code>2 5 7 4 3 8 18</code> now I want to store these in different variables. <br>Please help.</p>
","<p>I think by default values read by scanf with space/enter. Well you can provide space between '%d' if you are printing integers. Also same for other cases.</p>

<pre><code>scanf(""%d %d %d"", &amp;var1, &amp;var2, &amp;var3);
</code></pre>

<p>Similarly if you want to read comma separated values use :</p>

<pre><code>scanf(""%d,%d,%d"", &amp;var1, &amp;var2, &amp;var3);
</code></pre>
","10426060"
"How to call execl() in C with the proper arguments?","77878","","<p>i have vlc (program to reproduce videos)
if i type in a shell:</p>

<p>/home/vlc ""/home/my movies/the movie i want to see.mkv""</p>

<p>it opens up an reproduces the movie.</p>

<p>however, when I run the following program:</p>

<pre><code>#include &lt;unistd.h&gt;

int main(void) {

  execl(""/home/vlc"", ""/home/my movies/the movie i want to see.mkv"",NULL);

  return 0;
}
</code></pre>

<p>vlc opens up but doesn't reproduce anything. How can I solve this?</p>

<p>Things I tried:</p>

<p>I guessed</p>

<pre><code>execl(""/home/vlc"", ""/home/my movies/the movie i want to see.mkv"",NULL);
</code></pre>

<p>was equivalent to typing in the shell:</p>

<pre><code>/home/vlc /home/my movies/the movie i want to see.mkv
</code></pre>

<p>which doesn't work, so i tried</p>

<pre><code> execl(""/home/vlc"", ""\""/home/my movies/the movie i want to see.mkv\"""",NULL);
</code></pre>

<p>and vlc opens up but doesn't reproduce either.</p>

<p>Instead of writing NULL at the end I tried 0, (char*) 0, 1 .... not helpful.
Help!!!!</p>
","<pre><code>execl(""/home/vlc"", 
  ""/home/vlc"", ""/home/my movies/the movie i want to see.mkv"", 
  (char*) NULL);
</code></pre>

<p>You need to specify all arguments, included <code>argv[0]</code> which isn't taken from the executable.</p>

<p>Also make sure the final <code>NULL</code> gets cast to <code>char*</code>.</p>

<p>Details are here: <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html"" rel=""noreferrer"">http://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html</a></p>
","12596877"
"Ranges of floating point datatype in C?","77833","","<p>I am reading a C book, talking about ranges of floating point, the author gave the table:</p>

<p><img src=""https://i.stack.imgur.com/5JLVR.png"" alt=""enter image description here""></p>

<p>I dont know where the numbers in the columns Smallest Positive and Largest Value come from.</p>
","<p>These numbers come from the <a href=""http://en.wikipedia.org/wiki/IEEE_754-1985"" rel=""noreferrer"">IEEE-754</a> standard, which defines the standard representation of floating point numbers. Wikipedia article at the link <a href=""http://en.wikipedia.org/wiki/IEEE_754-1985#Range_and_precision"" rel=""noreferrer"">explains</a> how to arrive at these ranges knowing the number of bits used for the signs, mantissa, and the exponent.</p>
","10108154"
"Print an int in binary representation using C","77657","","<p>I'm looking for a function to allow me to print the binary representation of an int. What I have so far is;</p>

<pre><code>char *int2bin(int a)
{
 char *str,*tmp;
 int cnt = 31;
 str = (char *) malloc(33); /*32 + 1 , because its a 32 bit bin number*/
 tmp = str;
 while ( cnt &gt; -1 ){
      str[cnt]= '0';
      cnt --;
 }
 cnt = 31;
 while (a &gt; 0){
       if (a%2==1){
           str[cnt] = '1';
        }
      cnt--;
        a = a/2 ;
 }
 return tmp;

}
</code></pre>

<p>But when I call</p>

<pre><code>printf(""a %s"",int2bin(aMask)) // aMask = 0xFF000000
</code></pre>

<p>I get output like;</p>

<blockquote>
  <p>0000000000000000000000000000000000xtpYy (And a bunch of unknown characters.</p>
</blockquote>

<p>Is it a flaw in the function or am I printing the address of the character array or something? Sorry, I just can't see where I'm going wrong.</p>

<p>NB The code is from <a href=""http://en.allexperts.com/q/C-1587/printing-binary.htm"" rel=""noreferrer"">here</a></p>

<p>EDIT: It's not homework FYI, I'm trying to debug someone else's image manipulation routines in an unfamiliar language. If however it's been tagged as homework because it's an elementary concept then fair play.</p>
","<p>Here's another option that is more optimized where you pass in your allocated buffer.  Make sure it's the correct size.</p>

<pre><code>// buffer must have length &gt;= sizeof(int) + 1
// Write to the buffer backwards so that the binary representation
// is in the correct order i.e.  the LSB is on the far right
// instead of the far left of the printed string
char *int2bin(int a, char *buffer, int buf_size) {
    buffer += (buf_size - 1);

    for (int i = 31; i &gt;= 0; i--) {
        *buffer-- = (a &amp; 1) + '0';

        a &gt;&gt;= 1;
    }

    return buffer;
}

#define BUF_SIZE 33

int main() {
    char buffer[BUF_SIZE];
    buffer[BUF_SIZE - 1] = '\0';

    int2bin(0xFF000000, buffer, BUF_SIZE - 1);

    printf(""a = %s"", buffer);
}
</code></pre>
","1024414"
"Tools to get a pictorial function call graph of code","77533","","<p>I have a large work space which has many source files of C code. Although I can see the functions called from a function in MS VS2005 using the Object browser, and in MSVC 6.0 also, this only shows functions called from a particular function in a non-graphical kind of display. Additionally, it does not show the function called starting from say <code>main()</code>, and then the functions called from it, and so on, deeper inside to the leaf level function.</p>

<p>I need a tool which will give me a function call graph pictorially with functions <code>callee</code> and <code>caller</code> connected by arrows or something like that, starting from <code>main()</code> to the last level of function, or at least showing a call graph of all functions in one C source file pictorially. It would be great if I could print this graph.</p>

<p>Any good tools to do that (need not be free tools)?</p>
","<ul>
<li><p><a href=""http://www.gson.org/egypt/"" rel=""nofollow noreferrer"">Egypt</a> (free software)</p></li>
<li><p><a href=""http://students.ceid.upatras.gr/~sxanth/ncc/"" rel=""nofollow noreferrer"">ncc</a></p></li>
<li><p><a href=""https://kcachegrind.github.io/html/Home.html"" rel=""nofollow noreferrer"">KcacheGrind</a> (GPL)</p></li>
<li><p><a href=""http://www.graphviz.org/"" rel=""nofollow noreferrer"">Graphviz</a> (CPL)</p></li>
<li><p><a href=""http://www.csn.ul.ie/~mel/projects/codeviz/"" rel=""nofollow noreferrer"">CodeViz</a> (GPL)</p></li>
</ul>
","517797"
"How to convert const char* to char* in C?","77494","","<p>In my project there is a method which only returns a <code>const char*</code>, whereas I need a <code>char*</code> string, as the API doesn't accept <code>const char*</code>.</p>

<p>Any idea how to convert between <code>const char*</code> to <code>char*</code>?</p>
","<p>To be safe you don't break stuff (for example when these strings are changed in your code or further up), or crash you program (in case the returned string was literal for example like <code>""hello I'm a literal string""</code> and you start to edit it), make a copy of the returned string.</p>

<p>You could use <code>strdup()</code> for this, but read the <a href=""https://stackoverflow.com/questions/12984948/why-is-strdup-considered-to-be-evil"">small print</a>. Or you can of course create your own version if it's not there on your platform.</p>

<p>And the question remains: Why do you need a <code>char*</code>, can't you change your code so that it works with <code>const char*</code>?</p>
","25549613"
"How to modify memory contents using GDB?","77441","","<p>I know that we can use several commands to access and read memory: for example, print, p, x...</p>

<p>But how can I change the contents of memory at any specific location (while debugging in GDB)? </p>
","<p>The easiest is setting a program variable (see <a href=""http://sourceware.org/gdb/current/onlinedocs/gdb/Assignment.html#Assignment"" rel=""noreferrer"">GDB: assignment</a>):</p>

<pre><code>(gdb) l
6       {
7           int i;
8           struct file *f, *ftmp;
9
(gdb) set variable i = 10
(gdb) p i
$1 = 10
</code></pre>

<p>Or you can just update arbitrary (writable) location by address:</p>

<pre><code>(gdb) set {int}0x83040 = 4
</code></pre>

<p>There's more. Read <a href=""http://sourceware.org/gdb/current/onlinedocs/gdb/"" rel=""noreferrer"">the manual</a>.</p>
","3305200"
"Convert char array to string use C","77373","","<p>I need to convert a char array to string.
Something like this:</p>

<pre><code>char array[20];
char string[100];

array[0]='1';
array[1]='7';
array[2]='8';
array[3]='.';
array[4]='9';
...
</code></pre>

<p>I would like to get something like that:</p>

<pre><code>char string[0]= array // where it was stored 178.9 ....in position [0]
</code></pre>
","<p>You're saying you have this:</p>

<pre><code>char array[20]; char string[100];
array[0]='1'; 
array[1]='7'; 
array[2]='8'; 
array[3]='.'; 
array[4]='9';
</code></pre>

<p>And you'd like to have this:</p>

<pre><code>string[0]= ""178.9""; // where it was stored 178.9 ....in position [0]
</code></pre>

<p>You can't have that. A char holds 1 character. That's it. 
A ""string"" in C is an array of characters followed by a sentinel character (NULL terminator).</p>

<p>Now if you want to copy the first x characters out of <code>array</code> to <code>string</code> you can do that with <code>memcpy()</code>:</p>

<pre><code>memcpy(string, array, x);
string[x] = '\0'; 
</code></pre>
","14344229"
"self referential struct definition?","77367","","<p>I haven't been writing C for very long, and so I'm not sure about how I should go about doing these sorts of recursive things... I would like each cell to contain another cell, but I get an error along the lines of ""field 'child' has incomplete type"". What's up?</p>

<pre><code>typedef struct Cell {
  int isParent;
  Cell child;
} Cell;
</code></pre>

<p>PS (Ziggy is also clearly confused by typedef: he has typedefed <code>Cell</code> to <code>Cell</code> and wonders why?)</p>
","<p>Clearly a Cell cannot contain another cell as it becomes a never-ending recursion.</p>

<p>However a Cell CAN contain a pointer to another cell.</p>

<pre><code>typedef struct Cell {
  bool isParent;
  struct Cell* child;
} Cell;
</code></pre>
","588631"
"When is assembly faster than C?","77235","","<p>One of the stated reasons for knowing assembler is that, on occasion, it can be employed to write code that will be more performant than writing that code in a higher-level language, C in particular.  However, I've also heard it stated many times that although that's not entirely false, the cases where assembler can <strong>actually</strong> be used to generate more performant code are both extremely rare and require expert knowledge of and experience with assembly.  </p>

<p>This question doesn't even get into the fact that assembler instructions will be machine-specific and non-portable, or any of the other aspects of assembler.  There are plenty of good reasons for knowing assembly besides this one, of course, but this is meant to be a specific question soliciting examples and data, not an extended discourse on assembler versus higher-level languages.</p>

<p>Can anyone provide some <strong>specific examples</strong> of cases where assembly will be faster than well-written C code using a modern compiler, and can you support that claim with profiling evidence?  I am pretty confident these cases exist, but I really want to know exactly how esoteric these cases are, since it seems to be a point of some contention.</p>
","<p>Here is a real world example: Fixed point multiplies. </p>

<p>These don't only come handy on devices without floating point, they shine when it comes to precision as they give you 32 bits of precision with a predictable error (float only has 23 bit and it's harder to predict precision loss)</p>

<p>One way to write a fixed point multiply on a 32 bit architecture looks like this:</p>

<pre><code>int inline FixedPointMul (int a, int b)
{
  long long a_long = a; // cast to 64 bit.

  long long product = a_long * b; // perform multiplication

  return (int) (product &gt;&gt; 16);  // shift by the fixed point bias
}
</code></pre>

<p>The problem with this code is that we do something that can't be directly expressed in the C-language. We want to multiply two 32 bit numbers and get a 64 bit result of which we return the middle 32 bit. However, in C this multiply does not exist. All you can do is to promote the integers to 64 bit and do a 64*64 = 64 multiply. </p>

<p>The x86 (ARM, MIPS and others) can however do the multiply in a single instruction. Lots of compilers still ignore this fact and generate code that calls a runtime library function to do the multiply. The shift by 16 is also often done by a library routine (also the x86 can do such shifts).</p>

<p>So we're left with one or two library calls just for a multiply. This has serious consequences. Not only is the shift slower, registers must be preserved across the function calls and it does not help inlining and code-unrolling either. </p>

<p>If you rewrite the same code in assembler you can gain a significant speed boost.</p>

<p>In addition to this: using ASM is not the best way to solve the problem. Most compilers allow you to use some assembler instructions in intrinsic form if you can't express them in C. The VS.NET2008 compiler for example exposes the 32*32=64 bit mul as __emul and the 64 bit shift as __ll_rshift.</p>

<p>Using intrinsics you can rewrite the function in a way that the C-compiler has a chance to understand what's going on. This allows the code to be inlined, register allocated, common subexpression elimination and constant propagation can be done as well. You'll get a <em>huge</em> performance improvement over the hand-written assembler code that way.</p>

<p>For reference: The end-result for the fixed-point mul for the VS.NET compiler is:</p>

<pre><code>int inline FixedPointMul (int a, int b)
{
    return (int) __ll_rshift(__emul(a,b),16);
}
</code></pre>

<p>The performance difference of fixed point divides are even worse. I had improvements up to factor 10 for division heavy fixed point code by writing a couple of asm-lines.</p>

<p>Using Visual C++ 2013 gives the same assembly code for both ways.</p>
","577856"
"How to use S_ISREG() and S_ISDIR() POSIX Macros?","77185","","<p>This is a C program I wrote to recursively navigate and output directories and regular files.  It compiles and runs fine on my Linux machine. But on Solaris, the <code>dit-&gt;d_type == 8</code> check and the other similar ones don't work because there is no <code>d_type</code> field.  An answer I've read to this problem is to use the <code>S_ISREG()</code> and <code>S_ISDIR()</code> macros, but they don't work at all the way I have them in my code currently.  I commented out the lines that work on my Linux machine.</p>

<pre><code>#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;dirent.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;

void helper(DIR *, struct dirent *, struct stat, char *, int, char **);
void dircheck(DIR *, struct dirent *, struct stat, char *, int, char **);

int main(int argc, char *argv[]){

  DIR *dip;
  struct dirent *dit;
  struct stat statbuf;
  char currentPath[FILENAME_MAX];
  int depth = 0; /*Used to correctly space output*/

  /*Open Current Directory*/
  if((dip = opendir(""."")) == NULL)
    return errno;

  /*Store Current Working Directory in currentPath*/
  if((getcwd(currentPath, FILENAME_MAX)) == NULL)
    return errno;

  /*Read all items in directory*/
  while((dit = readdir(dip)) != NULL){
    /*Skips . and ..*/
    if(strcmp(dit-&gt;d_name, ""."") == 0 || strcmp(dit-&gt;d_name, "".."") == 0)
      continue;

    if(stat(currentPath, &amp;statbuf) == -1){
      perror(""stat"");
      return errno;
    }

    /*Checks if current item is of the type file (type 8) and no command line arguments
      if(dit-&gt;d_type == 8 &amp;&amp; argv[1] == NULL)*/
    if(S_ISREG(statbuf.st_mode) &amp;&amp; argv[1] == NULL)
      printf(""%s (%d bytes)\n"", dit-&gt;d_name, (int)statbuf.st_size);

      /*If a command line argument is given, checks for filename match
    if(dit-&gt;d_type == 8 &amp;&amp; argv[1] != NULL)*/
    if(S_ISREG(statbuf.st_mode) &amp;&amp; argv[1] != NULL)
      if(strcmp(dit-&gt;d_name, argv[1]) == 0)
        printf(""%s (%d bytes)\n"", dit-&gt;d_name, (int)statbuf.st_size);

      /*Checks if current item is of the type directory (type 4)
      if(dit-&gt;d_type == 4)*/
    if(S_ISDIR(statbuf.st_mode))
      dircheck(dip, dit, statbuf, currentPath, depth, argv);

  }
  closedir(dip);
  return 0;
}

/*Recursively called helper function*/
void helper(DIR *dip, struct dirent *dit, struct stat statbuf, 
    char currentPath[FILENAME_MAX], int depth, char *argv[]){
  int i = 0;

  if((dip = opendir(currentPath)) == NULL)
    printf(""Error: Failed to open Directory ==&gt; %s\n"", currentPath);

  while((dit = readdir(dip)) != NULL){

    if(strcmp(dit-&gt;d_name, ""."") == 0 || strcmp(dit-&gt;d_name, "".."") == 0)
      continue;

    stat(currentPath, &amp;statbuf);

    /*if(dit-&gt;d_type == 8 &amp;&amp; argv[1] == NULL){*/
    if(S_ISREG(statbuf.st_mode) &amp;&amp; argv[1] == NULL){
      for(i = 0; i &lt; depth; i++)
        printf(""    "");
      printf(""%s (%d bytes)\n"", dit-&gt;d_name, (int)statbuf.st_size);
    }

    /*if(dit-&gt;d_type == 8 &amp;&amp; argv[1] != NULL){*/
    if(S_ISREG(statbuf.st_mode) &amp;&amp; argv[1] != NULL){
      if(strcmp(dit-&gt;d_name, argv[1]) == 0){
    for(i = 0; i &lt; depth; i++)
      printf(""    "");
    printf(""%s (%d bytes)\n"", dit-&gt;d_name, (int)statbuf.st_size);
      }
    }

    /*if(dit-&gt;d_type == 4)*/
    if(S_ISDIR(statbuf.st_mode))
      dircheck(dip, dit, statbuf, currentPath, depth, argv);

  }
}

void dircheck(DIR *dip, struct dirent *dit, struct stat statbuf, 
      char currentPath[FILENAME_MAX], int depth, char *argv[]){
  int i = 0;

  strcat(currentPath, ""/"");
  strcat(currentPath, dit-&gt;d_name);

  /*If two directories exist at the same level the path
    is built wrong and needs to be corrected*/
  if((chdir(currentPath)) == -1){
    chdir("".."");
    getcwd(currentPath, FILENAME_MAX);
    strcat(currentPath, ""/"");
    strcat(currentPath, dit-&gt;d_name);

    for(i = 0; i &lt; depth; i++)
      printf (""    "");
    printf(""%s (subdirectory)\n"", dit-&gt;d_name);
    depth++;
    helper(dip, dit, statbuf, currentPath, depth, argv);
  }

  else{
    for(i =0; i &lt; depth; i++)
      printf(""    "");
    printf(""%s (subdirectory)\n"", dit-&gt;d_name);
    chdir(currentPath);
    depth++;
    helper(dip, dit, statbuf, currentPath, depth, argv);
  }

}
</code></pre>
","<p>You're using <code>S_ISREG()</code> and <code>S_ISDIR()</code> correctly, you're just using them on the wrong thing. </p>

<p>In your <code>while((dit = readdir(dip)) != NULL)</code> loop in <code>main</code>, you're calling <code>stat</code> on <code>currentPath</code> over and over again without changing <code>currentPath</code>:</p>

<pre><code>if(stat(currentPath, &amp;statbuf) == -1) {
    perror(""stat"");
    return errno;
}
</code></pre>

<p>Shouldn't you be appending a slash and <code>dit-&gt;d_name</code> to <code>currentPath</code> to get the full path to the file that you want to <code>stat</code>? Methinks that similar changes to your other <code>stat</code> calls are also needed.</p>
","4989544"
"What is the difference between vmalloc and kmalloc?","77178","","<p>I've googled around and found most people advocating the use of <code>kmalloc</code>, as you're guaranteed to get contiguous physical blocks of memory. However, it also seems as though <code>kmalloc</code> can fail if a contiguous <strong>physical</strong> block that you want can't be found.<br>
What are the advantages of having a contiguous block of memory? Specifically, why would I need to have a contiguous <strong>physical</strong> block of memory in a <em>system call</em>? Is there any reason I couldn't just use <code>vmalloc</code>?<br>
Finally, if I were to allocate memory during the handling of a system call, should I specify <code>GFP_ATOMIC</code>?  Is a system call executed in an atomic context?</p>

<blockquote>
  <p><code>GFP_ATOMIC</code><br>
  The allocation is high-priority and
  does not sleep. This is the flag to
  use in interrupt handlers, bottom
  halves and other situations where you
  cannot sleep.</p>
  
  <p><code>GFP_KERNEL</code>
  This is a normal allocation and might block. This is the flag to use
  in process context code when it is safe to sleep.</p>
</blockquote>
","<p>You only need to worry about using physically contiguous memory if the buffer will be accessed by a DMA device on a physically addressed bus (like PCI). The trouble is that many system calls have no way to know whether their buffer will eventually be passed to a DMA device: once you pass the buffer to another kernel subsystem, you really cannot know where it is going to go. Even if the kernel does not use the buffer for DMA <I>today,</I> a future development might do so.</p>

<p>vmalloc is often slower than kmalloc, because it may have to remap the buffer space into a virtually contiguous range. kmalloc never remaps, though if not called with GFP_ATOMIC kmalloc can block.</p>

<p>kmalloc is limited in the size of buffer it can provide: 128 KBytes<sup>*)</sup>. If you need a really big buffer, you have to use vmalloc or some other mechanism like reserving high memory at boot.</p>

<blockquote>
  <p><sup>*)</sup> <em>This was true of earlier kernels. On recent kernels (I tested this on 2.6.33.2), max size of a single kmalloc is up to 4 MB! (I wrote a fairly <a href=""http://kaiwantech.wordpress.com/2011/08/17/kmalloc-and-vmalloc-linux-kernel-memory-allocation-api-limits/"" rel=""noreferrer"">detailed post on this</a>.) &mdash; kaiwan</em></p>
</blockquote>

<p>For a system call you don't need to pass GFP_ATOMIC to kmalloc(), you can use GFP_KERNEL. You're not an interrupt handler: the application code enters the kernel context by means of a trap, it is not an interrupt.</p>
","116458"
"Passing multidimensional arrays as function arguments in C","77168","","<p>In C can I pass a multidimensional array to a function as a single argument when I don't know what the dimensions of the array are going to be ?</p>

<p>In addition my multidimensional array may contain types other than strings.</p>
","<p>You can do this with any data type. Simply make it a pointer-to-pointer:</p>

<pre><code>typedef struct {
  int myint;
  char* mystring;
} data;

data** array;
</code></pre>

<p>But don't forget you still have to malloc the variable, and it does get a bit complex:</p>

<pre><code>//initialize
int x,y,w,h;
w = 10; //width of array
h = 20; //height of array

//malloc the 'y' dimension
array = malloc(sizeof(data*) * h);

//iterate over 'y' dimension
for(y=0;y&lt;h;y++){
  //malloc the 'x' dimension
  array[y] = malloc(sizeof(data) * w);

  //iterate over the 'x' dimension
  for(x=0;x&lt;w;x++){
    //malloc the string in the data structure
    array[y][x].mystring = malloc(50); //50 chars

    //initialize
    array[y][x].myint = 6;
    strcpy(array[y][x].mystring, ""w00t"");
  }
}
</code></pre>

<p>The code to deallocate the structure looks similar - don't forget to call free() on everything you malloced! (Also, in robust applications you should <a href=""http://www.google.com/search?q=check+malloc+return"" rel=""nofollow noreferrer"">check the return of malloc()</a>.)</p>

<p>Now let's say you want to pass this to a function. You can still use the double pointer, because you probably want to do manipulations on the data structure, not the pointer to pointers of data structures:</p>

<pre><code>int whatsMyInt(data** arrayPtr, int x, int y){
  return arrayPtr[y][x].myint;
}
</code></pre>

<p>Call this function with:</p>

<pre><code>printf(""My int is %d.\n"", whatsMyInt(array, 2, 4));
</code></pre>

<p>Output:</p>

<pre><code>My int is 6.
</code></pre>
","4192"
"Dev C in Windows 8: gcc Internal Error","77159","","<p>I am a teacher's assistant for a C programming class, and the instructor uses Dev C++ as the compiler for the class. Personally I would use a different one, but the choice is not mine here. Recently I installed the Windows 8 Professional 64 bit that is available on Dreamspark though my university, so I can start with some metro app development for some contests. Unfortunately, Dev C++ has stopped compiling. It previously worked fine with Windows 7 64 bit. </p>

<p>I get an error when compiling that reports back:</p>

<pre><code>Compiler: Default compiler
Executing  gcc.exe...
gcc.exe ""C:\Users\James\Documents\Homework\TA_CPRE_185\counter.c"" -o ""C:\Users\James\Documents\Homework\TA_CPRE_185\counter.exe""    -I""C:\Dev-Cpp\include""   -L""C:\Dev-Cpp\lib"" 
gcc.exe: Internal error: Aborted (program collect2)
Please submit a full bug report.
See &lt;URL:http://www.mingw.org/bugs.shtml&gt; for instructions.

Execution terminated
Compilation successful
</code></pre>

<p>It says the compilation is successful but it is not, so no executable is made. I want to know if anyone has any ideas of what might get Dev C++ to work on this version of Windows, so I don't have to run Dev C++ in a virtual machine? I need it working, so I can do class demonstrations.</p>
","<p>I believe that Dev-C++ comes with a very old version of MinGW (3.4.x if I'm not mistaken). MinGW versions before 4.2.2 will have problems compiling programs on Windows Vista and later unless they are on the PATH.</p>

<p>So you can either update your version of MinGW (as you mentioned in a comment that you have already done), or you can add the MinGW\bin directory to the system path.</p>
","12812582"
"Integer to IP Address - C","77070","","<p>I'm preparing for a quiz, and I have a strong suspicion I may be tasked with implementing such a function. Basically, given an IP address in network notation, how can we get that from a 32 bit integer into a string in it's dotted decimal notation (something like 155.247.182.83)...? Obviously we can't be using any type of inet functions either...I'm stumped!</p>
","<p>Here's a simple method to do it: The <code>(ip &gt;&gt; 8)</code>, <code>(ip &gt;&gt; 16)</code> and <code>(ip &gt;&gt; 24)</code> moves the 2nd, 3rd and 4th bytes into the lower order byte, while the <code>&amp; 0xFF</code> isolates the least significant byte at each step.</p>

<pre><code>void print_ip(int ip)
{
    unsigned char bytes[4];
    bytes[0] = ip &amp; 0xFF;
    bytes[1] = (ip &gt;&gt; 8) &amp; 0xFF;
    bytes[2] = (ip &gt;&gt; 16) &amp; 0xFF;
    bytes[3] = (ip &gt;&gt; 24) &amp; 0xFF;   
    printf(""%d.%d.%d.%d\n"", bytes[3], bytes[2], bytes[1], bytes[0]);        
}
</code></pre>

<p>There is an implied <code>bytes[0] = (ip &gt;&gt; 0) &amp; 0xFF;</code> at the first step.</p>

<p>Use <code>snprintf()</code> to print it to a string.</p>
","1680421"
"C: scanf to array","76953","","<p>I'm absolutely new to C, and right now I am trying master the basics and have a problem reading data from scanf straight into an array.</p>

<p>Right now the code looks like this:</p>

<pre><code>int main()
{
    int array[11];
    printf(""Write down your ID number!\n"");
    scanf(""%d"", array);
    if (array[0]=1)
    {
        printf(""\nThis person is a male."");
    }
    else if (array[0]=2)
    {
        printf(""\nThis person is a female."");
    }
    return 0;
}
</code></pre>

<p>As you can see, the program's aim is to ask for an ID, and determine from the first number whether the given the person is male(1) or female(2).
However it seems I can't get it to work, because the array is not filled properly (this is checked via a printf(array) right after scanf, that results in random numbers).
Running the program like this will give the result that the person is a male, no matter what number you read in.</p>

<p>So trivial it may seem, I couldn't figure out the problem.</p>
","<p><code>if (array[0]=1)</code> should be <code>if (array[0]==1)</code>.</p>

<p>The same with <code>else if (array[0]=2)</code>.</p>

<p>Note that the expression of the assignment returns the <strong>assigned value</strong>, in this case <code>if (array[0]=1)</code> will be <strong>always true</strong>, that's why the code below the if-statement will be always executed if you don't change the <code>=</code> to <code>==</code>.</p>

<p><code>=</code> is the assignment operator, you want to compare, not to assign. So you need <code>==</code>.</p>

<p>Another thing, if you want only one integer, why are you using array? You might want also to <code>scanf(""%d"", &amp;array[0]);</code></p>
","16299747"
"Replacing character in a string","76844","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/779875/what-is-the-function-to-replace-string-in-c"">What is the function to replace string in C?</a>  </p>
</blockquote>



<p>I am trying to replace a certain character in my string with multiple characters. Here is an example of what I am trying to do.</p>

<p>Say I have the string ""aaabaa""</p>

<p>I want to replace all occurrences of the character ""b"" with 5 ""c""s. </p>

<p>So when I am done, ""aaabaa"" becomes ""aaacccccaa"" </p>

<p>I have written the following code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main(void)
{
    char s[20] = ""aaabaa"";
    int i, j;
    for (i=0; s[i]!= '\0'; i++)
    {
        if (s[i] == 'b')
        {
            for (j=0; j&lt;5; j++)
            {
                s[i+j] = 'c';
            }
        }
    }
    printf(""%s\n"", s);
}
</code></pre>

<p>My output from this function is ""aaaccccc"". It appears that it just overwrites the last two a's with the c's. Is there any way I would have it so that these last couple of a's dont get overwritten?</p>
","<p>Your problem is that you replace the ""ccccc"" into the original string thus overwriting the remaining characters after what you wish to replace... You should copy into a new string and keep track of two indices - one in each.</p>

<p>And be happy that you declared <code>char s[20]</code> larger than the size of your original string plus the replace values, as otherwise you'd have created a buffer overflow vulnerability in your critical login system :-)</p>

<p>Cheers,</p>
","12890069"
"Getting Filename from file descriptor in C","76721","","<p>Is it possible to get the filename of a file descriptor (Linux) in C?</p>
","<p>You can use <a href=""http://linux.die.net/man/2/readlink"" rel=""noreferrer""><code>readlink</code></a> on <code>/proc/self/fd/NNN</code> where NNN is the file descriptor. This will give you the name of the file as it was when it was opened — however, if the file was moved or deleted since then, it may no longer be accurate (although Linux can track renames in some cases). To verify, <code>stat</code> the filename given and <code>fstat</code> the fd you have, and make sure <code>st_dev</code> and <code>st_ino</code> are the same.</p>

<p>Of course, not all file descriptors refer to files, and for those you'll see some odd text strings, such as <code>pipe:[1538488]</code>. Since all of the real filenames will be absolute paths, you can determine which these are easily enough. Further, as others have noted, files can have multiple hardlinks pointing to them - this will only report the one it was opened with. If you want to find all names for a given file, you'll just have to traverse the entire filesystem.</p>
","1189582"
"How do I link object files in C? Fails with ""Undefined symbols for architecture x86_64""","76643","","<p>So I'm trying trying to use a function defined in another C (file1.c) file in my file (file2.c). I'm including the header of file1 (file1.h) in order to do this.</p>

<p>However, I keep getting the following error whenever I try to compile my file using gcc:</p>

<pre><code>Undefined symbols for architecture x86_64:
  ""_init_filenames"", referenced from:
      _run_worker in cc8hoqCM.o
  ""_read_list"", referenced from:
      _run_worker in cc8hoqCM.o
ld: symbol(s) not found for architecture x86_64
</code></pre>

<p>I've been told I need to ""link the object files together"" in order to use the functions from file1 in file2, but I have no clue what that means :(</p>
","<p>I assume you are using <code>gcc</code>, to simply link object files do:</p>

<pre><code>$ gcc -o output file1.o file2.o
</code></pre>

<p>To get the object-files simply compile using</p>

<pre><code>$ gcc -c file1.c
</code></pre>

<p>this yields file1.o and so on.</p>

<p>If you want to link your files to an executable do</p>

<pre><code>$ gcc -o output file1.c file2.c
</code></pre>
","15441915"
"How to prevent gcc optimizing some statements in C?","76610","","<p>In order to make a page dirty (switching on the dirty bit in the page table entry), I touch the first bytes of the page like this:</p>

<pre><code>pageptr[0] = pageptr[0];
</code></pre>

<p>But in practice gcc will ignore the statement by dead store elimination. In order to prevent gcc optimizing it, I re-write the statement as follows:</p>

<pre><code>volatile int tmp;
tmp = pageptr[0];
pageptr[0] = tmp;
</code></pre>

<p>It seems the trick works, but somewhat ugly. I would like to know is there any directives or syntax which has the same effect? And I don't want to use a <code>-O0</code> flag, since it will bring great performance penalty as well.</p>
","<p>Turning off optimization fixes the problem, but it is unnecessary.  A safer alternative is to make it illegal for the compiler to optimize out the store by using the <code>volatile</code> type qualifier.</p>

<pre><code>// Assuming pageptr is unsigned char * already...
unsigned char *pageptr = ...;
((unsigned char volatile *)pageptr)[0] = pageptr[0];
</code></pre>

<p>The <code>volatile</code> type qualifier instructs the compiler to be strict about memory stores and loads.  One purpose of <code>volatile</code> is to let the compiler know that the memory access has side effects, and therefore must be preserved.  In this case, the store has the side effect of causing a page fault, and you want the compiler to preserve the page fault.</p>

<p>This way, the surrounding code can still be optimized, and your code is portable to other compilers which don't understand GCC's <code>#pragma</code> or <code>__attribute__</code> syntax.</p>
","2219839"
"Recursive mkdir() system call on Unix","76576","","<p>After reading the mkdir(2) man page for the Unix system call with that name, it appears that the call doesn't create intermediate directories in a path, only the last directory in the path. Is there any way (or other function) to create all the directories in the path without resorting to manually parsing my directory string and individually creating each directory ?</p>
","<p>There is not a system call to do it for you, unfortunately.  I'm guessing that's because there isn't a way to have really well-defined semantics for what should happen in error cases.  Should it leave the directories that have already been created?  Delete them?  What if the deletions fail? And so on...</p>

<p>It is pretty easy to roll your own, however, and a quick google for '<a href=""http://www.google.com/search?hl=en&amp;safe=off&amp;client=safari&amp;rls=en&amp;q=recursive+mkdir&amp;aq=f&amp;aqi=&amp;aql=&amp;oq="" rel=""noreferrer"">recursive mkdir</a>' turned up a number of solutions.  Here's one that was near the top:</p>

<p><a href=""http://nion.modprobe.de/blog/archives/357-Recursive-directory-creation.html"" rel=""noreferrer"">http://nion.modprobe.de/blog/archives/357-Recursive-directory-creation.html</a></p>

<pre><code>static void _mkdir(const char *dir) {
        char tmp[256];
        char *p = NULL;
        size_t len;

        snprintf(tmp, sizeof(tmp),""%s"",dir);
        len = strlen(tmp);
        if(tmp[len - 1] == '/')
                tmp[len - 1] = 0;
        for(p = tmp + 1; *p; p++)
                if(*p == '/') {
                        *p = 0;
                        mkdir(tmp, S_IRWXU);
                        *p = '/';
                }
        mkdir(tmp, S_IRWXU);
}
</code></pre>
","2336245"
"What does ""control reaches end of non-void function"" mean?","76571","","<p>I've been getting strange compiler errors on this binary search algorithm. I get a warning that <code>control reaches end of non-void function</code>. What does this mean?</p>

<pre><code>int binary(int val, int sorted[], int low, int high) {
    int mid = (low+high)/2;

    if(high &lt; low)
        return -1;

    if(val &lt; sorted[mid])
        return binary(val, sorted, low, mid-1);

    else if(val &gt; sorted[mid])
        return binary(val, sorted, mid+1, high);

    else if(val == sorted[mid])
        return mid;
}
</code></pre>
","<p>The compiler cannot tell from that code if the function will ever reach the end and still return something. To make that clear, replace the last <code>else if(...)</code> with just <code>else</code>.</p>
","6171508"
"Global variables in header file","76499","","<p>I have a 2 modules (.c files) and one .h header file:</p>

<p>file1.c:</p>

<pre><code>#include &lt;stdio.h&gt;
#include ""global.h""

int main()
{
    i = 100;
    printf(""%d\n"",i);
    foo();
    return 0;
}
</code></pre>

<p>file2.c</p>

<pre><code>#include &lt;stdio.h&gt;
#include ""global.h""

void foo()
{
    i = 10;
    printf(""%d\n"",i);
}
</code></pre>

<p>global.h</p>

<pre><code>int i;
extern void foo()
</code></pre>

<p>When I do gcc file1.c file2.c everything works fine and I get the expected output. Now, when I initialize variable 'i' in the header file to say 0 and compile again I get a linker error:</p>

<pre><code>/tmp/cc0oj7yA.o:(.bss+0x0): multiple definition of `i'
/tmp/cckd7TTI.o:(.bss+0x0): first defined here
</code></pre>

<p>If I just compile file1.c (removing call to foo()) with the initialization in the header file i.e. gcc file1.c, everything works fine. What is going on?</p>
","<p>There are 3 scenarios, you describe:</p>

<ol>
<li>with 2 <code>.c</code> files and with <code>int i;</code> in the header.</li>
<li>With 2 <code>.c</code> files and with <code>int i=100;</code> in the header (or any other value; that doesn't matter).</li>
<li>With 1 <code>.c</code> file and with <code>int i=100;</code> in the header.</li>
</ol>

<p>In each scenario, imagine the contents of the header file inserted into the <code>.c</code> file and this <code>.c</code> file compiled into a <code>.o</code> file and then these linked together.</p>

<p>Then following happens:</p>

<ol>
<li><p>works fine because of the already mentioned ""tentative definitions"": every <code>.o</code> file contains one of them, so the linker says ""ok"".</p></li>
<li><p>doesn't work, because both <code>.o</code> files contain a definition with a value, which collide (even if they have the same value) - there may be only one with any given name in all <code>.o</code> files which are linked together at a given time.</p></li>
<li><p>works of course, because you have only one <code>.o</code> file and so no possibility for collision.</p></li>
</ol>

<p>IMHO a clean thing would be</p>

<ul>
<li>to put either <code>extern int i;</code> or just <code>int i;</code> into the header file,</li>
<li>and then to put the ""real"" definition of i (namely <code>int i = 100;</code>) into <code>file1.c</code>. In this case, this initialization gets used at the start of the program and the corresponding line in <code>main()</code> can be omitted. (Besides, I hope the naming is only an example; please don't name any global variables as <code>i</code> in real programs.)</li>
</ul>
","8109149"
"'do...while' vs. 'while'","76423","","<blockquote>
  <p><strong>Possible Duplicates:</strong> <br/>
  <a href=""https://stackoverflow.com/questions/390605/while-vs-do-while"">While vs. Do While</a> <br/>
  <a href=""https://stackoverflow.com/questions/3094972/when-should-i-use-do-while-instead-of-while-loops"">When should I use do-while instead of while loops?</a></p>
</blockquote>



<p>I've been programming for a while now (2 years work + 4.5 years degree + 1 year pre-college), and I've never used a do-while loop short of being forced to in the Introduction to Programming course. I have a growing feeling that I'm doing programming wrong if I never run into something so fundamental.</p>

<p>Could it be that I just haven't run into the correct circumstances?</p>

<p>What are some examples where it would be necessary to use a do-while instead of a while?</p>

<p>(My schooling was almost all in C/C++ and my work is in C#, so if there is another language where it absolutely makes sense because do-whiles work differently, then these questions don't really apply.)</p>

<p>To clarify...I know the difference between a <code>while</code> and a <code>do-while</code>. While checks the exit condition and then performs tasks. <code>do-while</code> performs tasks and then checks exit condition.</p>
","<p>If you always want the loop to execute at least once. It's not common, but I do use it from time to time. One case where you might want to use it is trying to access a resource that could require a retry, e.g.</p>

<pre><code>do
{
   try to access resource...
   put up message box with retry option

} while (user says retry);
</code></pre>
","3347010"
"Array of char* should end at '\0' or ""\0""?","76397","","<p>Lets say we have an array of char pointers</p>

<pre><code>char* array[] = { ""abc"", ""def"" };
</code></pre>

<p>Now what should be put in the end ?</p>

<pre><code>char* array[] = { ""abc"", ""def"", '\0' };
</code></pre>

<p>or</p>

<pre><code>char* array[] = { ""abc"", ""def"", ""\0"" };
</code></pre>

<p>Though, both works. We only have to put the condition to check the end accordingly</p>

<p>like</p>

<pre><code>array[ index ] != '\0';
</code></pre>

<p>or</p>

<pre><code>array[ index ] != ""\0"";
</code></pre>

<p>My question is which one is the better way? Which is used by most programmers?</p>

<p><strong>Edit</strong></p>

<p>Most answers say that NULL is better than '\0' and ""\0"".
But I always thought that </p>

<p>NULL is same as '\0' which is same as 0x0 or 0</p>

<p>Is it wrong?</p>
","<p>I would end it with <code>NULL</code>. Why? Because you can't do either of these:</p>

<pre><code>array[index] == '\0'
array[index] == ""\0""
</code></pre>

<p>The first one is comparing a <code>char *</code> to a <code>char</code>, which is <em>not</em> what you want. You would have to do this:</p>

<pre><code>array[index][0] == '\0'
</code></pre>

<p>The second one doesn't even work. You're comparing a <code>char *</code> to a <code>char *</code>, yes, but this comparison is meaningless. It passes if the two pointers point to the same piece of memory. You can't use <code>==</code> to compare two strings, you have to use the <code>strcmp()</code> function, because C has no built-in support for strings outside of a few (and I mean few) syntactic niceties. Whereas the following:</p>

<pre><code>array[index] == NULL
</code></pre>

<p>Works just fine and conveys your point.</p>
","1483248"
"What is newline character -- '\n'","76328","","<p>This is a very basic concept, but something I have never been able to articulate that well. and I would like to try to spell it and see where I go wrong.</p>

<p>If I have to, how would I define a ""newline character"". say if I create a new file in unix(or windows), then does the file store the ""end of line"" information by inserting a special character in the file called as ""new line character"". If so, what is its ascii value? I remember that in C programs, I have checked for the read character against the value '\n' . And why this confusing 2 characters to represent end of line characters..</p>

<pre><code>bash$ cat states
California
Massachusetts
Arizona
</code></pre>

<p>Say, I want to insert one line space between the lines and want an output of the form:
    Desired output:</p>

<pre><code>California

Massachusetts

Arizona

bash$sed -e 's/\n/\n\n/g' states  does not work.
</code></pre>

<p>Why can't I treat ""new line character"" here just as I would treat any other character and run something like above command. (I understand that one might say that this is a matter of syntax of sed, but could one please explain the intuition behind not allowing this, so that I can get rid of my confusion.</p>

<p>Similarly, inside the vim editor, I can not use :%s/\n/\n\n/g    . Why so?</p>

<p>Do I need to further escape \n by using a backslash in sed and from within vim?.</p>

<p>Thanks,</p>

<p>Jagrati</p>
","<p>From the <a href=""http://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man1/sed.1.html"" rel=""noreferrer""><code>sed</code> man page</a>:</p>

<blockquote>
  <p>Normally, sed cyclically copies a line of input, not including its terminating newline character, into a pattern space, (unless there is something left after a ""D"" function), applies all of the commands with addresses that select that pattern space, copies the pattern space to the standard output, appending a newline, and deletes the pattern space.</p>
</blockquote>

<p>It's operating on the line without the newline present, so the pattern you have there can't ever match.  You need to do something else - like match against <code>$</code> (end-of-line) or <code>^</code> (start-of-line).</p>

<p>Here's an example of something that worked for me:</p>

<pre><code>$ cat &gt; states
California
Massachusetts
Arizona
$ sed -e 's/$/\
&gt; /' states
California

Massachusetts

Arizona
</code></pre>

<p>I typed a literal newline character after the <code>\</code> in the <code>sed</code> line.</p>
","3267333"
"C - split string into an array of strings","76316","","<p>I'm not completely sure how to do this in C: </p>

<pre><code>char* curToken = strtok(string, "";"");
//curToken = ""ls -l"" we will say
//I need a array of strings containing ""ls"", ""-l"", and NULL for execvp()
</code></pre>

<p>How would I go about doing this? </p>
","<p>Since you've already looked into <code>strtok</code> just continue down the same path and split your string using space (<code>' '</code>) as a delimiter, then use something as <code>realloc</code> to increase the size of the array containing the elements to be passed to <code>execvp</code>.</p>

<p>See the below example, but keep in mind that <code>strtok</code> will modify the string passed to it. If you don't want this to happen you are required to make a copy of the original string, using <code>strcpy</code> or similar function.</p>

<pre><code>char    str[]= ""ls -l"";
char ** res  = NULL;
char *  p    = strtok (str, "" "");
int n_spaces = 0, i;


/* split string and append tokens to 'res' */

while (p) {
  res = realloc (res, sizeof (char*) * ++n_spaces);

  if (res == NULL)
    exit (-1); /* memory allocation failed */

  res[n_spaces-1] = p;

  p = strtok (NULL, "" "");
}

/* realloc one extra element for the last NULL */

res = realloc (res, sizeof (char*) * (n_spaces+1));
res[n_spaces] = 0;

/* print the result */

for (i = 0; i &lt; (n_spaces+1); ++i)
  printf (""res[%d] = %s\n"", i, res[i]);

/* free the memory allocated */

free (res);
</code></pre>

<p> </p>

<pre><code>res[0] = ls
res[1] = -l
res[2] = (null)
</code></pre>
","11198630"
"What is the simplest way of getting user input in C?","76296","","<p>There seem to be a LOT of ways you can get user input in C. </p>

<p>What is the easiest way that requires little code?</p>

<p>Basically I need to display this:</p>

<pre><code>Enter a file name: apple.text
</code></pre>

<p>Basically I need to ask the user for a file name. So I need something that just gets that one word that the user will be inputting. </p>
","<p>The simplest <i>""correct""</i> way is probably this one, taken from Bjarne Stroustrup's paper <a href=""http://www.stroustrup.com/new_learning.pdf"" rel=""nofollow noreferrer"">Learning Standard C++ As A New Language</a>.</p>

<p><em>(Note: I changed Bjarne's code to check for <code>isspace()</code> instead of just end of line.  Also, due to @matejkramny's comment, to use <code>while(1)</code> instead of <code>while(true)</code>...and so long as we're being heretical enough to edit Stroustrup's code, I've subbed in C89 comments instead of C++ style too.  :-P)</em></p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;
#include &lt;stdlib.h&gt;

void quit() /* write error message and quit */
{
    fprintf(stderr, ""memory exhausted\n"");
    exit(1);
}

int main()
{
    int max = 20;
    char* name = (char*) malloc(max); /* allocate buffer */
    if (name == 0) quit();

    printf(""Enter a file name: "");

    while (1) { /* skip leading whitespace */
        int c = getchar();
        if (c == EOF) break; /* end of file */
        if (!isspace(c)) {
             ungetc(c, stdin);
             break;
        }
    }

    int i = 0;
    while (1) {
        int c = getchar();
        if (isspace(c) || c == EOF) { /* at end, add terminating zero */
            name[i] = 0;
            break;
        }
        name[i] = c;
        if (i == max - 1) { /* buffer full */
            max += max;
            name = (char*) realloc(name, max); /* get a new and larger buffer */
            if (name == 0) quit();
        }
        i++;
    }

    printf(""The filename is %s\n"", name);
    free(filename); /* release memory */
    return 0;
}
</code></pre>

<p>That covers:</p>

<ul>
<li>skipping whitespace until you reach character input</li>
<li>expanding the string buffer dynamically to fit arbitrary size strings</li>
<li>handling conditions of when memory can't be allocated</li>
</ul>

<p>Are there simpler but broken solutions, which might even run a bit faster?  Absolutely!!</p>

<p>If you use scanf into a buffer with no limit on the read size, then your input exceeds the size of the buffer, it will create a security hole and/or crash.</p>

<p>Limiting the size of the reading to, say, only 100 unique characters of a filename might seem better than crashing.  But it can be worse; for instance if the user meant <code>(...)/dir/foo/bar.txt</code> but you end up misinterpreting their input and overwriting a file called <code>bar.t</code> which perhaps they cared about.</p>

<p>It's best to get into good habits early in dealing with these issues.  <em>My opinion</em> is that if your requirements justify something close-to-the-metal and ""C-like"", it's well worth it to consider the jump to C++.  It was designed to manage precisely these concerns--with techniques that are robust and extensible, yet still perform well.</p>
","7832033"
"scanf: ""%[^\n]"" skips the 2nd input but "" %[^\n]"" does not. why?","76174","","<p>Consider the following code:</p>

<pre><code>#include &lt;stdio.h&gt;

int main (void)
{
  char str1[128], str2[128], str3[128];

  printf (""\nEnter str1: "");
  scanf (""%[^\n]"", str1);
  printf (""\nstr1 = %s"", str1);

  printf (""\nEnter str2: "");
  scanf (""%[^\n]"", str2);
  printf (""\nstr2 = %s"", str2);

  printf (""\nEnter str3: "");
  scanf (""%[^\n]"", str3);
  printf (""\nstr3 = %s"", str3);

  printf (""\n"");
  return 0;
}
</code></pre>

<p>When it is executed only the first <code>scanf</code> stops for the prompt. The program does not stop for the next <code>scanf</code> s. But if the format string is changed from <code>""%[^\n]""</code> to <code>"" %[^\n]""</code> (note the blank space before <code>%</code>), then it works okay. Does some existing newline character from the previous input buffer is automatically accepted ? But flushing <code>stdin</code> does not solve this.</p>

<p>What is the cause of this.</p>
","<p>You just need to 'consume' the <code>'\n'</code> character after you've read what you want.  Use the following format directive:</p>

<pre><code>""%[^\n]%*c""
</code></pre>

<p>Which will read everything up to the newline into the string you pass in, then will consume a single character (the newline) without assigning it to anything (that <code>'*'</code> is 'assignment suppression').</p>

<p>Otherwise,the newline is left in the input stream waiting to immediately terminate the the subsequent <code>""%[^\n]""</code> format directives.</p>

<p>The problem with adding a space character to the format directive (<code>"" %[^\n]""</code>) is that the space will match <em>any</em> white space. So, it will eat the newline from the end of the previous input, but it will also eat any other whitespace (including multiple newlines).</p>

<p>Update to your example:</p>

<pre><code>  char* fmt = ""%[^\n]%*c"";

  printf (""\nEnter str1: "");
  scanf (fmt, str1);
  printf (""\nstr1 = %s"", str1);

  printf (""\nEnter str2: "");
  scanf (fmt, str2);
  printf (""\nstr2 = %s"", str2);

  printf (""\nEnter str3: "");
  scanf (fmt, str3);
  printf (""\nstr2 = %s"", str3);

  printf (""\n"");
</code></pre>
","6083941"
"fopen / fopen_s and writing to files","76049","","<p>I'm using fopen in C to write the output to a text file. The function declaration is (where <code>ARRAY_SIZE</code> has been defined earlier):</p>

<pre><code>void create_out_file(char file_name[],long double *z1){  
  FILE *out;  
  int i;  

  if((out = fopen(file_name, ""w+"")) == NULL){  
    fprintf(stderr, ""***&gt; Open error on output file %s"", file_name);  
    exit(-1);  
  }  

  for(i = 0; i &lt; ARRAY_SIZE; i++)  
    fprintf(out, ""%.16Le\n"", z1[i]);  
  fclose(out);  
}  
</code></pre>

<p>My questions: </p>

<ol>
<li><p>On compilation with MVS2008 I get the warning: warning C4996: 'fopen': This function or variable may be unsafe. Consider using fopen_s instead. I haven't see much information on <code>fopen_s</code> so that I can change my code. Any suggestions?  </p></li>
<li><p>Can one instruct <code>fprintf</code> to write numbers at a desired numerical precision <strong>to a file</strong>? If I'm using <code>long double</code> then I assume that my answers are good till 15 digits after the decimal point. Am I right?  </p></li>
</ol>
","<p><code>fopen_s</code> is a variant of <code>fopen</code> which contains parameter validation and hands back an error code instead of a pointer in case something goes wrong during the open process. It's more secure than the base variant because it accounts for more edge conditions. The compiler is warning you to use it because <code>fopen</code> represents a potential exploitation vector in your application.</p>

<p>You can specify digits of precision to the <code>printf</code> family of functions by using the specifier <code>%.xg</code>, where <strong>x</strong> is the digits of precision you want in the output. A <code>long double</code> varies in precision from platform to platform, but you can generally bet on it being at least 16 digits of decimal precision.</p>

<p>Edit: While I'm not entirely on board with the others who are suggesting that <code>fopen_s</code> is a <em>complete</em> waste of time, it does represent a pretty low chance of exploitation and it isn't widely supported. Some of the other functions warned about under C4996 are much more serious vulnerabilities, however, and using <code>_CRT_SECURE_NO_WARNINGS</code> is the equivalent of turning off the alarm for both ""you left your bedroom door unlocked"" and ""you left a nuclear bomb in the kitchen"". </p>

<p>As long as you aren't restricted to using ""pure C"" for your project (e.g. for a school assignment or an embedded microcontroller), you would do well to exploit the fact that almost all modern C compilers are also C++ compilers and use the C++ <code>iostream</code> variants of all of these I/O functions in order to get both improved security <em>and</em> compatibility at the same time.</p>
","2575187"
"Printing Char Arrays in C","76030","","<p>I'm having a peculiar issue with a simple function I created.  This function generates a random number between 0-14, it then creates an array using that randomly generated number as the size and fills it with the char 'x'.</p>

<p>The problem I'm having is that when I call the function it will randomly display symbols or numbers after the x's.</p>

<p>I had originally declared the array as size 15, but figured it was the remaining slots that were causing this display issue.  However, it still persists after changing the function.</p>

<p>Here's the current function I'm using:</p>

<pre><code>void application()
{
    int randSize, i;

    srand((unsigned)time(NULL));
    randSize = (rand() % 15);

    char array[randSize];
    char *bar = array;

    for(i=0; i&lt; randSize; i++)
            array[i] = 'x';

    printf(""%s | "", bar);
}
</code></pre>
","<p>Don't you need to end your strings with <code>\0</code> in C? ) For example:</p>

<pre><code>char array[randSize + 1];
for (i=0; i &lt; randSize; i++)
   array[i] = 'x';
array[i] = '\0';
</code></pre>

<p><em>(updated this because you indeed probably wanted to get a useful part of string of</em> <code>randSize</code> <em>length).</em></p>
","12676826"
"With arrays, why is it the case that a[5] == 5[a]?","75989","","<p>As Joel points out in <a href=""http://blog.stackoverflow.com/2008/12/podcast-34/"">Stack Overflow podcast #34</a>, in <a href=""http://rads.stackoverflow.com/amzn/click/0131103628"" rel=""noreferrer"">C Programming Language</a> (aka: K &amp; R), there is mention of this property of arrays in C: <code>a[5] == 5[a]</code></p>

<p>Joel says that it's because of pointer arithmetic but I still don't understand. <strong>Why does <code>a[5] == 5[a]</code></strong>?</p>
","<p>The C standard defines the <code>[]</code> operator as follows:</p>

<p><code>a[b] == *(a + b)</code></p>

<p>Therefore <code>a[5]</code> will evaluate to:</p>

<pre><code>*(a + 5)
</code></pre>

<p>and <code>5[a]</code> will evaluate to:</p>

<pre><code>*(5 + a)
</code></pre>

<p><code>a</code> is a pointer to the first element of the array. <code>a[5]</code> is the value that's 5 <strong>elements</strong> further from <code>a</code>, which is the same as <code>*(a + 5)</code>, and from elementary school math we know those are equal (addition is <a href=""https://en.wikipedia.org/wiki/commutative"" rel=""noreferrer"">commutative</a>).</p>
","381549"
"How do I extract specific 'n' bits of a 32-bit unsigned integer in C?","75988","","<p>Could anyone tell me as to how to extract 'n' specific bits from a 32-bit unsigned integer in C.   </p>

<p>For example, say I want the first 17 bits of the 32-bit value; what is it that I should do?<br>
I presume I am supposed to use the modulus operator and I tried it and was able to get the last 8 bits and last 16 bits as</p>

<pre><code>unsigned last8bitsvalue=(32 bit integer) % 16
unsigned last16bitsvalue=(32 bit integer) % 32
</code></pre>

<p>Is this correct? Is there a better and more efficient way to do this? </p>
","<p>If you want n bits specific then you could first create a bitmask and then <code>AND</code> it with your number to take the desired bits.</p>

<p>Simple function to create mask from bit a to bit b.</p>

<pre><code>unsigned createMask(unsigned a, unsigned b)
{
   unsigned r = 0;
   for (unsigned i=a; i&lt;=b; i++)
       r |= 1 &lt;&lt; i;

   return r;
}
</code></pre>

<p>You should check that a&lt;=b. </p>

<p>If you want bits 12 to 16 call the function and then simply &amp; (logical AND) <code>r</code> with your number <code>N</code></p>

<pre><code>r = createMask(12,16);
unsigned result = r &amp; N;
</code></pre>

<p>If you want you can shift the result. Hope this helps</p>
","8012232"
"GCC: array type has incomplete element type","75856","","<p>I have declared a struct, and I try to pass an array of those structs (as well as a double array of doubles, and an integer) into a function. I get an ""array type has incomplete element type"" message from gcc when I compile it. What have I got wrong in how I pass the struct into the function?</p>

<pre><code>typedef struct graph_node {
  int X;
  int Y;
  int active;
} g_node;

void print_graph(g_node graph_node[], double weight[][], int nodes);
</code></pre>

<p>I have also tried <code>struct g_node graph_node[]</code>, but I get the same thing.</p>
","<p>It's the array that's causing trouble in:</p>

<pre><code>void print_graph(g_node graph_node[], double weight[][], int nodes);
</code></pre>

<p>The second and subsequent dimensions must be given:</p>

<pre><code>void print_graph(g_node graph_node[], double weight[][32], int nodes);
</code></pre>

<p>Or you can just give a pointer to pointer:</p>

<pre><code>void print_graph(g_node graph_node[], double **weight, int nodes);
</code></pre>

<p>However, although they look similar, those are very different internally.</p>

<p>If you're using C99, you can use variably-qualified arrays.  Quoting an example from the C99 standard (section §6.7.5.2 Array Declarators):</p>

<pre><code>void fvla(int m, int C[m][m]); // valid: VLA with prototype scope

void fvla(int m, int C[m][m])  // valid: adjusted to auto pointer to VLA
{
    typedef int VLA[m][m];     // valid: block scope typedef VLA
    struct tag {
        int (*y)[n];           // invalid: y not ordinary identifier
        int z[n];              // invalid: z not ordinary identifier
    };
    int D[m];                  // valid: auto VLA
    static int E[m];           // invalid: static block scope VLA
    extern int F[m];           // invalid: F has linkage and is VLA
    int (*s)[m];               // valid: auto pointer to VLA
    extern int (*r)[m];        // invalid: r has linkage and points to VLA
    static int (*q)[m] = &amp;B;   // valid: q is a static block pointer to VLA
}
</code></pre>

<hr>

<h3>Question in comments</h3>

<blockquote>
  <p>[...] In my main(), the variable I am trying to pass into the function is a <code>double array[][]</code>, so how would I pass that into the function? Passing <code>array[0][0]</code> into it gives me incompatible argument type, as does <code>&amp;array</code> and <code>&amp;array[0][0]</code>.</p>
</blockquote>

<p>In your <code>main()</code>, the variable should be:</p>

<pre><code>double array[10][20];
</code></pre>

<p>or something faintly similar; maybe</p>

<pre><code>double array[][20] = { { 1.0, 0.0, ... }, ... };
</code></pre>

<p>You should be able to pass that with code like this:</p>

<pre><code>typedef struct graph_node
{
    int X;
    int Y;
    int active;
} g_node;

void print_graph(g_node graph_node[], double weight[][20], int nodes);

int main(void)
{
    g_node g[10];
    double array[10][20];
    int n = 10;

    print_graph(g, array, n);
    return 0;
}
</code></pre>

<p>That compiles (to object code) cleanly with GCC 4.2 (i686-apple-darwin11-llvm-gcc-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.9.00)) and also with GCC 4.7.0 on Mac OS X 10.7.3 using the command line:</p>

<pre><code>/usr/bin/gcc -O3 -g -std=c99 -Wall -Wextra -c zzz.c
</code></pre>
","10003410"
"Graphical user interface Tutorial in C","75737","","<p>I have a project in C language and the teacher ordered to make a Gui of project.
I can only use C or C++ for the GUI part.</p>

<p>Can anyone please suggest me Some easy open source Graphics Library Tutorial because this will be my first ever GUI.</p>

<p>thanks</p>
","<p>The two most usual choices are <a href=""http://www.gtk.org/"" rel=""noreferrer"">GTK+</a>, which has documentation links <a href=""http://www.gtk.org/documentation.php"" rel=""noreferrer"">here</a>, and is mostly used with C; or <a href=""http://qt-project.org/"" rel=""noreferrer"">Qt</a> which has documentation <a href=""http://qt-project.org/doc/latest"" rel=""noreferrer"">here</a> and is more used with C++.</p>

<p>I posted these two as you do not specify an operating system and these two are pretty cross-platform.</p>
","4572322"
"Formatting struct timespec","75710","","<p>How to format <code>struct timespec</code> to string? This structure is returned e.g. by <code>clock_gettime()</code> on Linux gcc:</p>

<pre><code>struct timespec {
    time_t   tv_sec;        /* seconds */
    long     tv_nsec;       /* nanoseconds */
};
</code></pre>
","<p>One way to format it is:</p>

<pre><code>printf(""%lld.%.9ld"", (long long)ts.tv_sec, ts.tv_nsec)
</code></pre>
","8304728"
"Strip first and last character from C string","75643","","<p>I have a C string that looks like <code>""Nmy stringP""</code>, where N and P can be any character. How can I edit it into <code>""my string""</code> in C?</p>
","<p>To ""remove"" the 1st character point to the second character:</p>

<pre><code>char mystr[] = ""Nmy stringP"";
char *p = mystr;
p++; /* 'N' is not in `p` */
</code></pre>

<p>To remove the last character replace it with a '\0'</p>

<pre><code>p[strlen(p)-1] = 0; /* 'P' is not in `p` (and it isn't in `mystr` either) */
</code></pre>
","1726318"
"error: expected primary-expression before ')' token (C)","75617","","<p>I am trying to call a function named <code>characterSelection(SDL_Surface *screen, struct SelectionneNonSelectionne sel)</code> which returns a <code>void</code></p>

<p>This is the <code>.h</code> of the function I try to call:</p>

<pre><code>struct SelectionneNonSelectionne;
void characterSelection(SDL_Surface *screen, struct SelectionneNonSelectionne);
void resetSelection(SDL_Surface *screen, struct SelectionneNonSelectionne);
</code></pre>

<p>On my main function, I try to call it like this:</p>

<pre><code>characterSelection(screen, SelectionneNonSelectionne);
</code></pre>

<p>When I compile, I have the message:</p>

<pre><code> error: expected primary-expression before ')' token
</code></pre>

<p>I made the <code>includes</code>. I suppose I miscall the second argument, my <code>struct</code>. But, I can't find why on the net.</p>

<p>Have you got any idea about what I did wrong ?</p>
","<p>You should create a variable of the type SelectionneNonSelectionne.</p>

<pre><code>struct SelectionneNonSelectionne var;
</code></pre>

<p>After that pass that variable to the function like</p>

<pre><code>characterSelection(screen, var);
</code></pre>

<p>The error is caused since you are passing the type name SelectionneNonSelectionne</p>
","28262472"
"C++ preprocessor __VA_ARGS__ number of arguments","75588","","<p>Simple question for which I could not find answer on the net. In variadic argument macros, how to find the number of arguments?  I am okay with boost preprocessor, if it has the solution.</p>

<p>If it makes a difference, I am trying to convert variable number of macro arguments to boost preprocessor sequence, list, or array for further reprocessing.</p>
","<p>This is actually compiler dependent, and not supported by any standard.</p>

<p>Here however you have a <a href=""http://groups.google.com/group/comp.std.c/browse_thread/thread/77ee8c8f92e4a3fb/346fc464319b1ee5?pli=1"" rel=""noreferrer"">macro implementation</a> that does the count:</p>

<pre><code>#define PP_NARG(...) \
         PP_NARG_(__VA_ARGS__,PP_RSEQ_N())
#define PP_NARG_(...) \
         PP_ARG_N(__VA_ARGS__)
#define PP_ARG_N( \
          _1, _2, _3, _4, _5, _6, _7, _8, _9,_10, \
         _11,_12,_13,_14,_15,_16,_17,_18,_19,_20, \
         _21,_22,_23,_24,_25,_26,_27,_28,_29,_30, \
         _31,_32,_33,_34,_35,_36,_37,_38,_39,_40, \
         _41,_42,_43,_44,_45,_46,_47,_48,_49,_50, \
         _51,_52,_53,_54,_55,_56,_57,_58,_59,_60, \
         _61,_62,_63,N,...) N
#define PP_RSEQ_N() \
         63,62,61,60,                   \
         59,58,57,56,55,54,53,52,51,50, \
         49,48,47,46,45,44,43,42,41,40, \
         39,38,37,36,35,34,33,32,31,30, \
         29,28,27,26,25,24,23,22,21,20, \
         19,18,17,16,15,14,13,12,11,10, \
         9,8,7,6,5,4,3,2,1,0

/* Some test cases */


PP_NARG(A) -&gt; 1
PP_NARG(A,B) -&gt; 2
PP_NARG(A,B,C) -&gt; 3
PP_NARG(A,B,C,D) -&gt; 4
PP_NARG(A,B,C,D,E) -&gt; 5
PP_NARG(1,2,3,4,5,6,7,8,9,0,
         1,2,3,4,5,6,7,8,9,0,
         1,2,3,4,5,6,7,8,9,0,
         1,2,3,4,5,6,7,8,9,0,
         1,2,3,4,5,6,7,8,9,0,
         1,2,3,4,5,6,7,8,9,0,
         1,2,3) -&gt; 63
</code></pre>
","2124385"
"Is there a performance difference between i++ and ++i in C?","75583","","<p>Is there a performance difference between <code>i++</code> and <code>++i</code> if the resulting value is not used?</p>
","<p>Executive summary:  No.</p>

<p><code>i++</code> could potentially be slower than <code>++i</code>, since the old value of <code>i</code>
might need to be saved for later use, but in practice all modern
compilers will optimize this away.</p>

<p>We can demonstrate this by looking at the code for this function,
both with <code>++i</code> and <code>i++</code>.</p>

<pre><code>$ cat i++.c
extern void g(int i);
void f()
{
    int i;

    for (i = 0; i &lt; 100; i++)
        g(i);

}
</code></pre>

<p>The files are the same, except for <code>++i</code> and <code>i++</code>:</p>

<pre><code>$ diff i++.c ++i.c
6c6
&lt;     for (i = 0; i &lt; 100; i++)
---
&gt;     for (i = 0; i &lt; 100; ++i)
</code></pre>

<p>We'll compile them, and also get the generated assembler:</p>

<pre><code>$ gcc -c i++.c ++i.c
$ gcc -S i++.c ++i.c
</code></pre>

<p>And we can see that both the generated object and assembler files are the same.</p>

<pre><code>$ md5 i++.s ++i.s
MD5 (i++.s) = 90f620dda862cd0205cd5db1f2c8c06e
MD5 (++i.s) = 90f620dda862cd0205cd5db1f2c8c06e

$ md5 *.o
MD5 (++i.o) = dd3ef1408d3a9e4287facccec53f7d22
MD5 (i++.o) = dd3ef1408d3a9e4287facccec53f7d22
</code></pre>
","24887"
"How can I convert a file pointer ( FILE* fp ) to a file descriptor (int fd)?","75430","","<p>I have a <code>FILE *</code>, returned by a call to <code>fopen()</code>. I need to get a file descriptor from it, to make calls like <code>fsync(fd)</code> on it. What's the function to get a file descriptor from a file pointer?</p>
","<p>The proper function is <code>int fileno(FILE *stream)</code>. It can be found in <code>&lt;stdio.h&gt;</code>, and is a POSIX standard but not standard C.</p>
","3167301"
"Zero an array in C code","75417","","<blockquote>
  <p><strong>Possible Duplicates:</strong><br>
  <a href=""https://stackoverflow.com/questions/2891191/how-to-initialize-an-array-to-something-in-c-without-a-loop"">How to initialize an array to something in C without a loop?</a><br>
  <a href=""https://stackoverflow.com/questions/201101/how-to-initialize-an-array-in-c"">How to initialize an array in C</a>  </p>
</blockquote>



<p>How can I zero a known size of an array without using a for or any other loop ?</p>

<p>For example:</p>

<pre><code>arr[20] = 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
</code></pre>

<p>This is the long way... I need it the short way.</p>
","<pre><code>int arr[20] = {0};
</code></pre>

<p>C99 <code>[$6.7.8/21]</code></p>

<blockquote>
  <p>If there are fewer initializers in a brace-enclosed list than there are elements or members
  of an aggregate, or fewer characters in a string literal used to initialize an array of known
  size  than  there  are  elements  in  the  array,  <strong>the  remainder  of  the  aggregate  shall  be initialized implicitly the same as objects that have static storage duration</strong>.</p>
</blockquote>

<hr>
","5636111"
"How to convert integers to characters in C?","75393","","<p>For example, if the integer was 97, the character would be 'a', or 98 to 'b'.</p>
","<p>In C, <code>int</code>, <code>char</code>, <code>long</code>, etc. are all <em>integers</em>.</p>

<p>They typically have different memory sizes and thus different ranges as in <code>INT_MIN</code> to <code>INT_MAX</code>.  <code>char</code> and arrays of <code>char</code> are often used to store characters and strings.  Integers are stored in many types: <code>int</code> being the most popular for a balance of speed, size and range.</p>

<p>ASCII is by far the most popular character encoding, but others exist.  The ASCII code for an 'A' is 65, 'a' is 97, '\n' is 10, etc.  ASCII data is most often stored in a <code>char</code> variable.  If the C environment is using ASCII encoding, the following all store the same value into the integer variable.</p>

<pre><code>int i1 = 'a';
int i2 = 97;
char c1 = 'a';
char c2 = 97;
</code></pre>

<p>To convert an <code>int</code> to a <code>char</code>, simple assign:</p>

<pre><code>int i3 = 'b';
int i4 = i3;
char c3;
char c4;
c3 = i3;
// To avoid a potential compiler warning, use a cast `char`.
c4 = (char) i4; 
</code></pre>

<p>This warning comes up because <code>int</code> typically has a greater range than <code>char</code> and so some loss-of-information may occur.  By using the cast <code>(char)</code>, the potential loss of info is explicitly directed.</p>

<p>To print the value of an integer:</p>

<pre><code>printf(""&lt;%c&gt;\n"", c3); // prints &lt;b&gt;

// Printing a `char` as an integer is less common but do-able
printf(""&lt;%d&gt;\n"", c3); // prints &lt;98&gt;

// Printing an `int` as a character is less common but do-able.
// The value is converted to an `unsigned char` and then printed.
printf(""&lt;%c&gt;\n"", i3); // prints &lt;b&gt;

printf(""&lt;%d&gt;\n"", i3); // prints &lt;98&gt;
</code></pre>

<p>There are additional issues about printing such as using <code>%hhu</code> or casting when printing an <code>unsigned char</code>, but leave that for later.  There is a lot to <code>printf()</code>.</p>
","20028800"
"What are the differences between C, C# and C++ in terms of real-world application","75381","","<p>As I posted earlier <a href=""https://stackoverflow.com/questions/388156/what-web-oriented-language-should-i-learn-after-php"">here</a> I've decided to try my hand at one of these but given my interests as a web developer, I'd like to know the difference between them in their real-world applications.</p>

<p><strong>Edit Note:</strong></p>

<p>While I'm a web developer, please don't let that limit your answer.  I'm 30...I've got years of career changing ahead of me.</p>
","<p>Both C and C++ give you a lower level of abstraction that, with increased complexity, provides a breadth of access to underlying machine functionality that are not necessarily exposed with other languages.  C++ adds the convenience (reduced development time) of a fully object oriented language which can, potentially, add an additional performance cost.  In terms of real world applications, I see these languages applied in the following domains:</p>

<p>C</p>

<ul>
<li>Kernel level software.</li>
<li>Hardware device drivers</li>
<li>Applications where access to old, stable code is required.</li>
</ul>

<p>C,C++</p>

<ul>
<li>Application or Server development where memory management needs to be fine tuned (and can't be left to generic garbage collection solutions).</li>
<li>Development environments that require access to libraries that do not interface well with more modern managed languages.</li>
<li>Although managed C++ can be used to access the .NET framework, it is not a seamless transition.</li>
</ul>

<p>C# provides a managed memory model that adds a higher level of abstraction again.  This level of abstraction adds convenience and improves development times, but complicates access to lower level APIs and makes specialized performance requirements problematic. </p>

<p>It is certainly possible to implement extremely high performance software in a managed memory environment, but awareness of the implications is essential.  </p>

<p>The syntax of C# is certainly less demanding (and error prone) than C/C++ and has, for the initiated programmer, a shallower learning curve.</p>

<p>C#</p>

<ul>
<li>Rapid client application development.</li>
<li>High performance Server development (StackOverflow for example) that benefits from the .NET framework.</li>
<li>Applications that require the benefits of the .NET framework in the language it was designed for.</li>
</ul>

<p><a href=""https://stackoverflow.com/users/73070/johannes-r246ssel"">Johannes Rössel</a> makes the valid point that the use C# Pointers, Unsafe and Unchecked keywords break through the layer of abstraction upon which C# is built. I would emphasize that type of programming is the exception to most C# development scenarios and not a fundamental part of the language (as is the case with C/C++).</p>
","692278"
"How do I compile the asm generated by GCC?","75338","","<p>I'm playing around with some asm code, and something is bothering me.</p>

<p>I compile this:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char** argv){
  printf(""Hello World\n"");
  return 0;
}
</code></pre>

<p>with <code>gcc file.c -S -o file.S</code> this generates a nice little piece of asm code:</p>

<pre><code>    .cstring
LC0:
    .ascii ""Hello World\0""
    .text
.globl _main
_main:
LFB3:
    pushq   %rbp
LCFI0:
    movq    %rsp, %rbp
LCFI1:
    subq    $16, %rsp
LCFI2:
    movl    %edi, -4(%rbp)
    movq    %rsi, -16(%rbp)
    leaq    LC0(%rip), %rdi
    call    _puts
    movl    $0, %eax
    leave
    ret
LFE3:
    .section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support
EH_frame1:
    .set L$set$0,LECIE1-LSCIE1
    .long L$set$0
LSCIE1:
    .long   0x0
    .byte   0x1
    .ascii ""zR\0""
    .byte   0x1
    .byte   0x78
    .byte   0x10
    .byte   0x1
    .byte   0x10
    .byte   0xc
    .byte   0x7
    .byte   0x8
    .byte   0x90
    .byte   0x1
    .align 3
LECIE1:
.globl _main.eh
_main.eh:
LSFDE1:
    .set L$set$1,LEFDE1-LASFDE1
    .long L$set$1
LASFDE1:
    .long   LASFDE1-EH_frame1
    .quad   LFB3-.
    .set L$set$2,LFE3-LFB3
    .quad L$set$2
    .byte   0x0
    .byte   0x4
    .set L$set$3,LCFI0-LFB3
    .long L$set$3
    .byte   0xe
    .byte   0x10
    .byte   0x86
    .byte   0x2
    .byte   0x4
    .set L$set$4,LCFI1-LCFI0
    .long L$set$4
    .byte   0xd
    .byte   0x6
    .align 3
LEFDE1:
    .subsections_via_symbols
</code></pre>

<p>My next problem is really, how do I compile this output, and can I make GCC do it for me?</p>
","<p>Yes, You can use gcc to compile your asm code. Use -c for compilation like this:</p>

<pre><code>gcc -c file.S -o file.o
</code></pre>

<p>This will give object code file named file.o. 
To invoke linker perform following after above command:</p>

<pre><code>gcc file.o -o file
</code></pre>
","7190391"
"static and extern global variables in C and C++","75282","","<p>I made 2 projects, the first one in C and the second one in C++, both work with same behavior.</p>

<p>C project:</p>

<p><strong>header.h</strong></p>

<pre><code>int varGlobal=7;
</code></pre>

<p><strong>main.c</strong></p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include ""header.h""

void function(int i)
{
    static int a=0;
    a++;
    int t=i;
    i=varGlobal;
    varGlobal=t;
    printf(""Call #%d:\ni=%d\nvarGlobal=%d\n\n"",a,i,varGlobal,t);
}

int main() {
    function(4);
    function(6);
    function(12);
    return 0;
}
</code></pre>

<p>C++ project:</p>

<p><strong>header.h</strong></p>

<pre><code>int varGlobal=7;
</code></pre>

<p><strong>main.cpp</strong></p>

<pre><code>#include &lt;iostream&gt;
#include ""header.h""
using namespace std;

void function(int i)
{
    static int a=0;
    int t=i;
    a++;
    i=varGlobal;
    varGlobal=t;
    cout&lt;&lt;""Call #""&lt;&lt;a&lt;&lt;"":""&lt;&lt;endl&lt;&lt;""i=""&lt;&lt;i&lt;&lt;endl&lt;&lt;""varGlobal=""&lt;&lt;varGlobal&lt;&lt;endl&lt;&lt;endl; 
}

int main() {
    function(4);
    function(6);
    function(12);
    return 0;
}
</code></pre>

<p>I read that global variables are <strong>extern</strong> by default and in C and <strong>static</strong> by default in C++; so why does the C++ code works?</p>

<p>I mean <em>int varGlobal=7;</em> is same as <em>static int varGlobal=7;</em> and if it's static then it can be used only in the file it was declared, right?</p>
","<p>Global variables are not <code>extern</code> nor <code>static</code> by default on C and C++.
When you declare a variable as <code>static</code>, you are restricting it to the current source file. If you declare it as <code>extern</code>, you are saying that the variable exists, but are declared somewhere else, and if you don't have it declared elsewhere (without the <code>extern</code> keyword) you will get a link error (symbol not found).</p>

<p>Your code will break when you have more source files including that header, on link time you will have multiple references to <code>varGlobal</code>. If you declare it as <code>static</code>, then it will work with multiple sources (I mean, it will compile and link), but each source will have its own <code>varGlobal</code>.</p>

<p>What you can do in C++, that you can't in C, is to declare the variable as <code>const</code> on the header, like this:</p>

<pre><code>const int varGlobal = 7;
</code></pre>

<p>And include in multiple sources, without breaking things at link time. The idea is to replace the old C style <code>#define</code> for constants.</p>

<p>If you need a global variable visible on multiple sources and not <code>const</code>, declare it as <code>extern</code> on the header, and declare it again, this time without the extern keywork, on a source file:</p>

<p>Header included by multiple files:</p>

<pre><code>extern int varGlobal;
</code></pre>

<p>In one of your source files:</p>

<pre><code>int varGlobal = 7;
</code></pre>
","11056156"
"printf \t option","75278","","<p>When you are printing a tab character to the standard output using <code>printf</code> in C, it outputs some space which is apparently 4 characters in length.</p>

<pre><code>printf(""\t"");
</code></pre>

<p>Is there any way by which I can control the tab width in the above case? Any help or suggestion is appreciated.</p>
","<p>A tab is a tab. How many spaces it consumes is a display issue, and depends on the settings of your shell.</p>

<p>If you want to control the width of your data, then you could use the <code>width</code> sub-specifiers in the <code>printf</code> format string. Eg. :</p>

<pre><code>printf(""%5d"", 2);
</code></pre>

<p>It's not a complete solution (if the value is longer than 5 characters, it will not be truncated), but might be ok for your needs.</p>

<p>If you want complete control, you'll probably have to implement it yourself.</p>
","6646079"
"Bus error: 10 error","75227","","<p>Here is my code </p>

<pre><code>#import &lt;stdio.h&gt;
#import &lt;string.h&gt;

int main(int argc, const char *argv[])
{
    char *str = ""First string"";
    char *str2 = ""Second string"";

    strcpy(str, str2);
    return 0;
}
</code></pre>

<p>It compiles just fine without any warning or errors, but when I run the app I get that error </p>

<pre><code>Bus error: 10
</code></pre>

<p>What I miss ?</p>
","<p>For one, you can't modify string literals. It's undefined behavior.</p>

<p>To fix that you can make <code>str</code> a local array:</p>

<pre><code>char str[] = ""First string"";
</code></pre>

<p>Now, you will have a second problem, is that <code>str</code> isn't large enough to hold <code>str2</code>. So you will need to increase the length of it. Otherwise, you will overrun <code>str</code> - which is also undefined behavior.</p>

<p>To get around this second problem, you either need to make <code>str</code> at least as long as <code>str2</code>. Or allocate it dynamically:</p>

<pre><code>char *str2 = ""Second string"";
char *str = malloc(strlen(str2) + 1);  //  Allocate memory
//  Maybe check for NULL.

strcpy(str, str2);

//  Always remember to free it.
free(str);
</code></pre>

<p>There are other more elegant ways to do this involving VLAs (in C99) and stack allocation, but I won't go into those as their use is somewhat questionable.</p>

<hr>

<p>As @SangeethSaravanaraj pointed out in the comments, everyone missed the <code>#import</code>. It should be <code>#include</code>:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
</code></pre>
","8716761"
"C pointer to two dimensional array","75220","","<p>I know there is several questions about that which gives good (and working) solutions, but none IMHO which says clearly what is the best way to achieve this.
So, suppose we have some 2D array :</p>

<pre><code>int tab1[100][280];
</code></pre>

<p>We want to make a pointer that points to this 2D array. 
To achieve this, we can do :</p>

<pre><code>int (*pointer)[280]; // pointer creation
pointer = tab1; //assignation
pointer[5][12] = 517; // use
int myint = pointer[5][12]; // use
</code></pre>

<p>or, alternatively : </p>

<pre><code>int (*pointer)[100][280]; // pointer creation
pointer = &amp;tab1; //assignation
(*pointer)[5][12] = 517; // use
int myint = (*pointer)[5][12]; // use 
</code></pre>

<p>OK, both seems to work well. Now I would like to know :</p>

<ul>
<li>what is the best way, the 1st or the 2nd ?</li>
<li>are both equals for the compiler ? (speed, perf...)</li>
<li>is one of these solutions eating more memory than the other ?</li>
<li>what is the more frequently used by developers ?</li>
</ul>
","<pre><code>//defines an array of 280 pointers (1120 or 2240 bytes)
int  *pointer1 [280];

//defines a pointer (4 or 8 bytes depending on 32/64 bits platform)
int (*pointer2)[280];      //pointer to an array of 280 integers
int (*pointer3)[100][280]; //pointer to an 2D array of 100*280 integers
</code></pre>

<p>Using <code>pointer2</code> or <code>pointer3</code> produce the same binary except manipulations as <code>++pointer2</code> as pointed out by <a href=""https://stackoverflow.com/users/1322972"">WhozCraig</a>.</p>

<p>I recommend using <code>typedef</code> (producing same binary code as above <code>pointer3</code>)</p>

<pre><code>typedef int myType[100][280];
myType *pointer3;
</code></pre>

<p><strong>Note:</strong> Since C++11, you can also use keyword <code>using</code> instead of <code>typedef</code></p>

<pre><code>using myType = int[100][280];
myType *pointer3;
</code></pre>

<p>in your example:</p>

<pre><code>myType *pointer;                // pointer creation
pointer = &amp;tab1;                // assignation
(*pointer)[5][12] = 517;        // set (write)
int myint = (*pointer)[5][12];  // get (read)
</code></pre>

<p><strong>Note:</strong> If the array <code>tab1</code> is used within a function body => this array will be placed within the call stack memory. But the stack size is limited. Using arrays bigger than the free memory stack produces a <a href=""https://en.wikipedia.org/wiki/Stack_overflow#Very_large_stack_variables"" rel=""nofollow noreferrer""><em>stack overflow</em> crash</a>.</p>

<p>The full snippet is online-compilable at <a href=""http://goo.gl/spzzLb"" rel=""nofollow noreferrer"">gcc.godbolt.org</a></p>

<pre><code>int main()
{
    //defines an array of 280 pointers (1120 or 2240 bytes)
    int  *pointer1 [280];
    static_assert( sizeof(pointer1) == 2240, """" );

    //defines a pointer (4 or 8 bytes depending on 32/64 bits platform)
    int (*pointer2)[280];      //pointer to an array of 280 integers
    int (*pointer3)[100][280]; //pointer to an 2D array of 100*280 integers  
    static_assert( sizeof(pointer2) == 8, """" );
    static_assert( sizeof(pointer3) == 8, """" );

    // Use 'typedef' (or 'using' if you use a modern C++ compiler)
    typedef int myType[100][280];
    //using myType = int[100][280];

    int tab1[100][280];

    myType *pointer;                // pointer creation
    pointer = &amp;tab1;                // assignation
    (*pointer)[5][12] = 517;        // set (write)
    int myint = (*pointer)[5][12];  // get (read)

    return myint;
}
</code></pre>
","14809055"
"How large should my recv buffer be when calling recv in the socket library","75178","","<p>I have a few questions about the socket library in C.  Here is a snippet of code I'll refer to in my questions.</p>

<pre><code>char recv_buffer[3000];
recv(socket, recv_buffer, 3000, 0);
</code></pre>

<ol>
<li>How do I decide how big to make recv_buffer?  I'm using 3000, but it's arbitrary.  </li>
<li>what happens if <code>recv()</code> receives a packet bigger than my buffer?  </li>
<li>how can I know if I have received the entire message without calling recv again and have it wait forever when there is nothing to be received?</li>
<li>is there a way I can make a buffer not have a fixed amount of space, so that I can keep adding to it without fear of running out of space? maybe using <code>strcat</code> to concatenate the latest <code>recv()</code> response to the buffer?</li>
</ol>

<p>I know it's a lot of questions in one, but I would greatly appreciate any responses.</p>
","<p>The answers to these questions vary depending on whether you are using a stream socket (<code>SOCK_STREAM</code>) or a datagram socket (<code>SOCK_DGRAM</code>) - within TCP/IP, the former corresponds to TCP and the latter to UDP.</p>

<p><em>How do you know how big to make the buffer passed to <code>recv()</code>?</em></p>

<ul>
<li><p><code>SOCK_STREAM</code>: It doesn't really matter too much.  If your protocol is a transactional / interactive one just pick a size that can hold the largest individual message / command you would reasonably expect (3000 is likely fine).  If your protocol is transferring bulk data, then larger buffers can be more efficient - a good rule of thumb is around the same as the kernel receive buffer size of the socket (often something around 256kB).</p></li>
<li><p><code>SOCK_DGRAM</code>: Use a buffer large enough to hold the biggest packet that your application-level protocol ever sends.  If you're using UDP, then in general your application-level protocol shouldn't be sending packets larger than about 1400 bytes, because they'll certainly need to be fragmented and reassembled.</p></li>
</ul>

<p><em>What happens if <code>recv</code> gets a packet larger than the buffer?</em></p>

<ul>
<li><p><code>SOCK_STREAM</code>: The question doesn't really make sense as put, because stream sockets don't have a concept of packets - they're just a continuous stream of bytes.  If there's more bytes available to read than your buffer has room for, then they'll be queued by the OS and available for your next call to <code>recv</code>.</p></li>
<li><p><code>SOCK_DGRAM</code>: The excess bytes are discarded.</p></li>
</ul>

<p><em>How can I know if I have received the entire message?</em></p>

<ul>
<li><p><code>SOCK_STREAM</code>: You need to build some way of determining the end-of-message into your application-level protocol.  Commonly this is either a length prefix (starting each message with the length of the message) or an end-of-message delimiter (which might just be a newline in a text-based protocol, for example).  A third, lesser-used, option is to mandate a fixed size for each message.  Combinations of these options are also possible - for example, a fixed-size header that includes a length value.</p></li>
<li><p><code>SOCK_DGRAM</code>: An single <code>recv</code> call always returns a single datagram.</p></li>
</ul>

<p><em>Is there a way I can make a buffer not have a fixed amount of space, so that I can keep adding to it without fear of running out of space?</em></p>

<p>No.  However, you can try to resize the buffer using <code>realloc()</code> (if it was originally allocated with <code>malloc()</code> or <code>calloc()</code>, that is).</p>
","2862176"
"How to remove unused C/C++ symbols with GCC and ld?","75119","","<p>I need to optimize the size of my executable severely (<code>ARM</code> development) and
I noticed that in my current build scheme (<code>gcc</code> + <code>ld</code>) unused symbols are not getting stripped.</p>

<p>The usage of the <code>arm-strip --strip-unneeded</code> for the resulting executables / libraries doesn't change the output size of the executable <em>(I have no idea why, maybe it simply can't)</em>.</p>

<p>What would be the way <em>(if it exists)</em> to modify my building pipeline, so that the unused symbols are stripped from the resulting file?</p>

<hr>

<p>I wouldn't even think of this, but my current embedded environment isn't very ""powerful"" and 
saving even <code>500K</code> out of <code>2M</code> results in a very nice loading performance boost.</p>

<p><strong>Update:</strong></p>

<p>Unfortunately the current <code>gcc</code> version I use doesn't have the <code>-dead-strip</code> option and the <code>-ffunction-sections... + --gc-sections</code> for <code>ld</code> doesn't give any significant difference for the resulting output.</p>

<p><em>I'm shocked that this even became a problem, because I was sure that <code>gcc + ld</code> should automatically strip unused symbols (why do they even have to keep them?).</em></p>
","<p>For GCC, this is accomplished in two stages:</p>

<p>First compile the data but tell the compiler to separate the code into separate sections within the translation unit. This will be done for functions, classes, and external variables by using the following two compiler flags:</p>

<pre><code>-fdata-sections -ffunction-sections
</code></pre>

<p>Link the translation units together using the linker optimization flag (this causes the linker to discard unreferenced sections):</p>

<pre><code>-Wl,--gc-sections
</code></pre>

<p>So if you had one file called test.cpp that had two functions declared in it, but one of them was unused, you could omit the unused one with the following command to gcc(g++):</p>

<pre><code>gcc -Os -fdata-sections -ffunction-sections test.cpp -o test -Wl,--gc-sections
</code></pre>

<p>(Note that -Os is an additional compiler flag that tells GCC to optimize for size)</p>
","6770305"
"How to write a file with C in Linux?","74924","","<p>I want to rewrite the ""cp"" command of Linux. So this program will work like <code>#./a.out originalfile copiedfile</code>. I can open the file, create new file but can't write the new file. Nothing is written. What could be the reason?</p>

<p>The current C code is:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;

int main(int argc,char *aa[]){
    int fd,fd1;
    char buffer[100];

    if(argc!=3){
        printf(""Usage : ./a.out &lt;original&gt; &lt;copy&gt; \n"");
        return -1;
    }

    fd=open(aa[1],O_RDONLY,S_IRUSR);
    if(fd==-1){
        printf(""file not found.\n"");
        return -1;
    }
    fd1=open(aa[2],O_CREAT | O_WRONLY,S_IRUSR);
    if(fd1!=-1){
        printf(""file is created.\n"");
    }
    ssize_t n;
    while(n=read(fd,buffer,50)){
        write(fd1,buffer,n);
        printf(""..writing..\n"");
    }
    close(fd);
    close(fd1);
}
</code></pre>
","<p>You need to write() the read() data into the new file:</p>

<pre><code>ssize_t nrd;
int fd;
int fd1;

fd = open(aa[1], O_RDONLY);
fd1 = open(aa[2], O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
while (nrd = read(fd,buffer,50)) {
    write(fd1,buffer,nrd);
}

close(fd);
close(fd1);
</code></pre>

<p>Update: added the proper opens...</p>

<p>Btw, the O_CREAT can be OR'd (O_CREAT | O_WRONLY).  You are actually opening too many file handles.  Just do the open once.</p>
","2008304"
"How to print pthread_t","74820","","<p>Searched, but don't come across a satisfying answer. </p>

<p>I know there's no a portable way to print a pthread_t. </p>

<p>How do you do it in your app?</p>

<p><strong>Update:</strong> </p>

<p>Actually I don't need pthread_t, but some small numeric id, identifying in debug message different threads. </p>

<p>On my system (64 bit RHEL 5.3) it's defined as unsigned long int, so it's big number and just printing it eats a valuable place in debug line. How does <strong>gdb assign</strong> short tids?</p>
","<p>This will print out a hexadecimal representation of a <code>pthread_t</code>, no matter what that actually is:</p>

<pre><code>void fprintPt(FILE *f, pthread_t pt) {
  unsigned char *ptc = (unsigned char*)(void*)(&amp;pt);
  fprintf(f, ""0x"");
  for (size_t i=0; i&lt;sizeof(pt); i++) {
    fprintf(f, ""%02x"", (unsigned)(ptc[i]));
  }
}
</code></pre>

<p>To just print a small id for a each <code>pthread_t</code> something like this could be used (this time using iostreams):</p>

<pre><code>void printPt(std::ostream &amp;strm, pthread_t pt) {
  static int nextindex = 0;
  static std::map&lt;pthread_t, int&gt; ids;
  if (ids.find(pt) == ids.end()) {
    ids[pt] = nextindex++;
  }
  strm &lt;&lt; ids[pt];
}
</code></pre>

<p>Depending on the platform and the actual representation of <code>pthread_t</code> it might here be necessary to define an <code>operator&lt;</code> for <code>pthread_t</code>, because <code>std::map</code> needs an ordering on the elements:</p>

<pre><code>bool operator&lt;(const pthread_t &amp;left, const pthread_t &amp;right) {
  ...
}
</code></pre>
","1759846"
"What is the use of the %n format specifier in C?","74801","","<p>What is the use of the <code>%n</code> format specifier in C? Could anyone explain with an example?</p>
","<p>Nothing printed. The argument must be a pointer to a signed int, where the number of characters written so far is stored.</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;

int main()
{
  int val;

  printf(""blah %n blah\n"", &amp;val);

  printf(""val = %d\n"", val);

  return 0;

}
</code></pre>

<p>The previous code prints:</p>

<pre><code>blah  blah
val = 5
</code></pre>
","3401176"
"How do I get the intersection between two arrays as a new array?","74785","","<p>I faced this problem many times during various situations. It is generic to all programming languages although I am comfortable with C or Java.</p>

<p>Let us consider two arrays (or collections):</p>

<pre><code>char[] A = {'a', 'b', 'c', 'd'};
char[] B = {'c', 'd', 'e', 'f'};
</code></pre>

<p>How do I get the common elements between the two arrays as a new array?
In this case, the intersection of array A and B is <code>char[] c = {'c', 'd'}</code>.</p>

<p>I want to avoid the repeated iteration of one array inside the other array which will
increase the execution time by (length of A times length of B) which is too much in the case of huge arrays.</p>

<p>Is there any way we could do a single pass in each array to get the common elements?</p>
","<p>Since this looks to me like a string algorithm, I'll assume for a moment that its not possible to sort this sequence (hence string) then you can use <a href=""http://en.wikipedia.org/wiki/Longest_common_subsequence_problem"">Longest Common Sequence algorithm (LCS)</a></p>

<p>Assuming the input size is constant, then the problem has a complexity of O(nxm), (length of the two inputs)</p>
","13270836"
"Convert ascii char[] to hexadecimal char[] in C","74762","","<p>I am trying to convert a char[] in ASCII to char[] in hexadecimal.</p>

<p>Something like this:</p>

<p>hello --> 68656C6C6F</p>

<p>I want to read by keyboard the string. It has to be 16 characters long.</p>

<p>This is my code now. I don't know how to do that operation. I read about strol but I think it just convert str number to int hex...</p>

<pre><code>#include &lt;stdio.h&gt;
main()
{
    int i = 0;
    char word[17];

    printf(""Intro word:"");

    fgets(word, 16, stdin);
    word[16] = '\0';
    for(i = 0; i&lt;16; i++){
        printf(""%c"",word[i]);
    }
 }
</code></pre>

<p>I am using fgets because I read is better than fgets but I can change it if necessary.</p>

<p>Related to this, I am trying to convert the string read in a uint8_t array, joining each 2 bytes in one to get the hex number.</p>

<p>I have this function which I am using a lot in arduino so I think it should work in a normal C program without problems.</p>

<pre><code>uint8_t* hex_decode(char *in, size_t len, uint8_t *out)
{
    unsigned int i, t, hn, ln;

    for (t = 0,i = 0; i &lt; len; i+=2,++t) {

            hn = in[i] &gt; '9' ? (in[i]|32) - 'a' + 10 : in[i] - '0';
            ln = in[i+1] &gt; '9' ? (in[i+1]|32) - 'a' + 10 : in[i+1] - '0';

            out[t] = (hn &lt;&lt; 4 ) | ln;
            printf(""%s"",out[t]);
    }
    return out;
</code></pre>

<p>}</p>

<p>But, whenever I call that function in my code, I get a segmentation fault.</p>

<p>Adding this code to the code of the first answer:</p>

<pre><code>    uint8_t* out;
    hex_decode(key_DM, sizeof(out_key), out);
</code></pre>

<p>I tried to pass all necessary parameters and get in out array what I need but it fails...</p>
","<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main(void){
    char word[17], outword[33];//17:16+1, 33:16*2+1
    int i, len;

    printf(""Intro word:"");
    fgets(word, sizeof(word), stdin);
    len = strlen(word);
    if(word[len-1]=='\n')
        word[--len] = '\0';

    for(i = 0; i&lt;len; i++){
        sprintf(outword+i*2, ""%02X"", word[i]);
    }
    printf(""%s\n"", outword);
    return 0;
}
</code></pre>
","16519793"
"How do I check if a variable is of a certain type (compare two types) in C?","74663","","<p>In C (not C++/C#) how do I check if a variable is of a certain type?</p>

<p>For example, something like this:</p>

<pre><code>double doubleVar;
if( typeof(doubleVar) == double ) {
    printf(""doubleVar is of type double!"");
}
</code></pre>

<p>Or more general: How do I compare two types so that <code>compare(double1,double2)</code> will evaluate to true, and <code>compare(int,double)</code> will evaluate to false. Also I'd like to compare structs of different composition as well.</p>

<p>Basically, I have a function that operates on variables of type ""struct a"" and ""struct b"". I want to do one thing with the ""struct a"" variables and the other with the ""struct b"" variables. Since C doesn't support overloading and the <code>void</code> pointer losses its type information I need to check for type. BTW, what would be the sense in having a <code>typeof</code> operator, if you can't compare types?</p>

<hr/>

<p>The sizeof method seems to be a practical workaround solution for me. Thanks for your help. I still find it a bit strange since the types are known at compile time, but if I imagine the processes in the machine I can see, why the information is not stored in terms of types, but rather in terms of byte size. Size is the only thing really relevant besides addresses.</p>
","<p>Getting the type of a variable is, as of now, possible in C11 with the <code>_Generic</code> generic selection. It works at compile-time.</p>

<p>The syntaxis is a bit like <code>switch</code>. Here's a sample (from <a href=""https://stackoverflow.com/a/17290414/3079266"">this answer</a>):</p>

<pre><code>#define typename(x) _Generic((x),                                                 \
        _Bool: ""_Bool"",                  unsigned char: ""unsigned char"",          \
         char: ""char"",                     signed char: ""signed char"",            \
    short int: ""short int"",         unsigned short int: ""unsigned short int"",     \
          int: ""int"",                     unsigned int: ""unsigned int"",           \
     long int: ""long int"",           unsigned long int: ""unsigned long int"",      \
long long int: ""long long int"", unsigned long long int: ""unsigned long long int"", \
        float: ""float"",                         double: ""double"",                 \
  long double: ""long double"",                   char *: ""pointer to char"",        \
       void *: ""pointer to void"",                int *: ""pointer to int"",         \
      default: ""other"")
</code></pre>

<p>To actually use it for compile-time manual type checking, you can define an <code>enum</code> with all of the types you expect, something like this:</p>

<pre><code>enum t_typename {
    TYPENAME_BOOL,
    TYPENAME_UNSIGNED_CHAR,
    TYPENAME_CHAR,
    TYPENAME_SIGNED_CHAR,
    TYPENAME_SHORT_INT,
    TYPENAME_UNSIGNED_CHORT_INT,
    TYPENAME_INT,
    /* ... */
    TYPENAME_POINTER_TO_INT,
    TYPENAME_OTHER
};
</code></pre>

<p>And then use <code>_Generic</code> to match types to this <code>enum</code>:</p>

<pre><code>#define typename(x) _Generic((x),                                                       \
        _Bool: TYPENAME_BOOL,           unsigned char: TYPENAME_UNSIGNED_CHAR,          \
         char: TYPENAME_CHAR,             signed char: TYPENAME_SIGNED_CHAR,            \
    short int: TYPENAME_SHORT_INT, unsigned short int: TYPENAME_UNSIGNED_SHORT_INT,     \
          int: TYPENAME_INT,                     \
    /* ... */                                    \
        int *: TYPENAME_POINTER_TO_INT,          \
      default: TYPENAME_OTHER)
</code></pre>
","28897994"
"Should I use char** argv or char* argv[] in C?","74661","","<p>I'm just learning C and was wondering which one of these I should use in my main method. Is there any difference?</p>

<p><strong>Edit:</strong> So which one is more common to use?</p>
","<p>As you are just learning C, i recommend you to really try to understand the <em>differences</em> between arrays and pointers first instead of the <em>common</em> things. </p>

<p>In the area of parameters and arrays, there are a few confusing rules that should be clear before going on. First, <strong>what you declare in a parameter list is treated special.</strong> There are such situations where things don't make sense as a function parameter in C. These are</p>

<ul>
<li>Functions as parameters</li>
<li>Arrays as parameters</li>
</ul>

<h2>Arrays as parameters </h2>

<p>The second maybe is not immediately clear. But it becomes clear when you consider that the size of an array dimension is part of the type in C (and an array whose dimension size isn't given has an incomplete type). So, if you would create a function that takes an array by-value (receives a copy), then it could do so only for one size! In addition, arrays can become large, and C tries to be as fast as possible. </p>

<p>In C, for these reasons, <strong>array-values</strong> are not existent. If you want to get the value of an array, what you get instead is a pointer to the first element of that array. And herein actually already lies the solution. Instead of drawing an array parameter invalid up-front, a C compiler will <strong>transform</strong> the type of the respective parameter to be a pointer. Remember this, it's very important. The parameter won't be an array, but instead it will be a pointer to the respective element type. </p>

<p>Now, if you try to pass an array, what is passed instead is a pointer to the arrays' first element. </p>

<h3>Excursion: Functions as parameters</h3>

<p>For completion, and because i think this will help you better understand the matter, let's look what the state of affairs is when you try to have a function as a parameter. Indeed, first it won't make any sense. How can a parameter be a function? Huh, we want a variable at that place, of course! So what the compiler does when that happens is, again, to <strong>transform</strong> the function into a <strong>function pointer</strong>. Trying to pass a function will pass a pointer to that respective function instead. So, the following are the same (analogous to the array example):</p>

<pre><code>void f(void g(void));
void f(void (*g)(void));
</code></pre>

<p>Note that parentheses around <code>*g</code> is needed. Otherwise, it would specify a function returning <code>void*</code>, instead of a pointer to a function returning <code>void</code>.</p>

<h2>Back to arrays</h2>

<p>Now, i said at the beginning that arrays can have an incomplete type - which happens if you don't give a size yet. Since we already figured that an array parameter is not existant but instead any array parameter is a pointer, the array's size doesn't matter. That means, the compiler will translate all of the following, and all are the same thing:</p>

<pre><code>int main(int c, char **argv);
int main(int c, char *argv[]);
int main(int c, char *argv[1]);
int main(int c, char *argv[42]);
</code></pre>

<p>Of course, it doesn't make much sense to be able to put any size in it, and it's just thrown away. For that reason, C99 came up with a new meaning for those numbers, and allows other things to appear between the brackets:</p>

<pre><code>// says: argv is a non-null pointer pointing to at least 5 char*'s
// allows CPU to pre-load some memory. 
int main(int c, char *argv[static 5]);

// says: argv is a constant pointer pointing to a char*
int main(int c, char *argv[const]);

// says the same as the previous one
int main(int c, char ** const argv);
</code></pre>

<p>The last two lines say that you won't be able to change ""argv"" within the function - it has become a const pointer. Only few C compilers support those C99 features though. But these features make it clear that the ""array"" isn't actually one. It's a pointer. </p>

<h2>A word of Warning</h2>

<p>Note that all i said above is true only when you have got an array as a <strong>parameter</strong> of a function. If you work with local arrays, an array won't be a pointer. It will <em>behave</em> as a pointer, because as explained earlier an array will be converted to a pointer when its value is read. But it should not be confused with pointers. </p>

<p>One classic example is the following:</p>

<pre><code>char c[10]; 
char **c = &amp;c; // does not work.

typedef char array[10];
array *pc = &amp;c; // *does* work.

// same without typedef. Parens needed, because [...] has 
// higher precedence than '*'. Analogous to the function example above.
char (*array)[10] = &amp;c;
</code></pre>
","780147"
"What exactly is \r in C language?","74644","","<pre><code>#include &lt;stdio.h&gt;

int main()
{
  int countch=0;
  int countwd=1;

  printf(""Enter your sentence in lowercase: "");
  char ch='a';
  while(ch!='\r')
  {
    ch=getche();
    if(ch==' ')
      countwd++;
    else
      countch++;
  }

  printf(""\n Words =%d "",countwd);

  printf(""Characters = %d"",countch-1);

  getch();
}
</code></pre>

<p>This is the program where I came across <code>\r</code>. What exactly is its role here? I am beginner in C and I appreciate a clear explanation on this.</p>
","<p>It's <code>Carriage Return</code>. Source: <a href=""http://msdn.microsoft.com/en-us/library/6aw8xdf2(v=vs.80).aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/library/6aw8xdf2(v=vs.80).aspx</a></p>

<p>The following repeats the loop until the user has pressed the <strong>Return</strong> key.</p>

<pre><code>while(ch!='\r')
{
  ch=getche();
}
</code></pre>
","9643093"
"Best practices for circular shift (rotate) operations in C++","74577","","<p>Left and right shift operators (&lt;&lt; and >>) are already available in C++.
However, I couldn't find out how I could perform circular shift or rotate operations.</p>

<p>How can operations like ""Rotate Left"" and ""Rotate Right"" be performed? </p>

<p>Rotating right twice here </p>

<pre><code>Initial --&gt; 1000 0011 0100 0010
</code></pre>

<p>should result in:</p>

<pre><code>Final   --&gt; 1010 0000 1101 0000
</code></pre>

<p>An example would be helpful.</p>

<p>(editor's note: Many common ways of expressing rotates in C suffer from undefined behaviour if the rotate count is zero, or compile to more than just a single rotate machine instruction.  This question's answer should document best practices.)</p>
","<p>See also an earlier version of <a href=""https://stackoverflow.com/a/31488147/224132"">this answer on another rotate question</a> with some more details about what asm gcc/clang produce for x86.</p>

<p>The most compiler-friendly way to express a rotate in C and C++ that avoids any Undefined Behaviour seems to be <a href=""http://blog.regehr.org/archives/1063"" rel=""noreferrer"">John Regehr's implementation</a>.  I've adapted it to rotate by the width of the type (e.g. assuming that <code>uint32_t</code> is exactly 32 bits wide, although C/C++ only guarantees that it's <em>at least</em> that wide.  I tried to keep it readable by leaving out checks for that kind of thing).</p>

<pre><code>#include &lt;stdint.h&gt;   // for uint32_t
#include &lt;limits.h&gt;   // for CHAR_BIT
// #define NDEBUG
#include &lt;assert.h&gt;

static inline uint32_t rotl32 (uint32_t n, unsigned int c)
{
  const unsigned int mask = (CHAR_BIT*sizeof(n) - 1);  // assumes width is a power of 2.

  // assert ( (c&lt;=mask) &amp;&amp;""rotate by type width or more"");
  c &amp;= mask;
  return (n&lt;&lt;c) | (n&gt;&gt;( (-c)&amp;mask ));
}

static inline uint32_t rotr32 (uint32_t n, unsigned int c)
{
  const unsigned int mask = (CHAR_BIT*sizeof(n) - 1);

  // assert ( (c&lt;=mask) &amp;&amp;""rotate by type width or more"");
  c &amp;= mask;
  return (n&gt;&gt;c) | (n&lt;&lt;( (-c)&amp;mask ));
}
</code></pre>

<p>Works for any unsigned integer type, not just <code>uint32_t</code>, so you could make versions for other sizes.</p>

<p><strong>See <a href=""https://gist.github.com/pabigot/7550454"" rel=""noreferrer"">also a C++11 template version</a> with lots of safety checks (including a <code>static_assert</code> that the type width is a power of 2)</strong>, which isn't the case on some 24-bit DSPs or 36-bit mainframes, for example.</p>

<p>I'd recommend only using the template as a back-end for wrappers with names that include the rotate width explicitly.  <strong>Integer-promotion rules mean that <code>rotl_template(u16 &amp; 0x11UL, 7)</code> would do a 32 or 64-bit rotate, not 16</strong> (depending on the width of <code>unsigned long</code>).  Even <code>uint16_t &amp; uint16_t</code> is promoted to <code>signed int</code> by C++'s integer-promotion rules, except on platforms where <code>int</code> is no wider than <code>uint16_t</code>.</p>

<hr>

<p><strong>On x86</strong>, this version <a href=""https://gcc.godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZSBnVAV2OUxAHIBSAJgGY8AO2QAbZlgDU3fgGEGBfEIIA6BDOzcADAEE%2B/LADNhmSQDkAItgBCAVQDi2vQOFiJpmbICGDBpmKq6vyauvqu4lKeongAtoQMahpOTgD0aekZkqgADgSxXqKSBACe2aaGJJLEqAReBJgAtGjMypJexKCpAFSSzMIE/LwA%2BgSSQm3ZZe0MWbn5oiqSkngqmItCfABsMhYxPgDWMtaSaDHZeKKYM0SSAF7%2BqMtCDM9Okj0VxJIxJKbIPlcsoYqjUAO54dAEBAjIoILzjcFQtpCYpZKH%2BIqlcqVISLLopZK6NK9fqbAAsMPG/2YfhmwGQyCKjy8yAIzAKolRmDio3hkh0lieL1IkgARsxRmJ4cBJOhUFchGBOKpUikScpyZTJKCEBdTNUCODIdDRngZoNRScvDTAXgGcj0CdRNKmWMar0/JIAEoAeQAMoSdCken1lAAOLUFUFeYozam05GSTAADwIxC8/MFhmqMUk9OQIuImGA7XQl18QJBhohUNIbx68Md8cBUqEMpuQndNra3v9QvG%2BMDGWHkgACtVRZcYjNEQhZXhDIZ/JhWgajVCRt0nS7G8t7XLFcq8yv/HVTBnfX7%2B9qECuq%2Bu52bJGGsl9aJs67p3lVi6XyzNUGBQ9rixRY833eUEnrSRkzDTZJAYXVDAIFIDTPIU02YVk8FQZ5tUIOcX13d8xUIWZTyEdAGgYPB7mghQLkKXDOW%2BA5YT%2BFhWlnSQtGTWgADFJAgfhaAAShFTtRloABWV9JAAdhUesCVCXQSjKIx1QGYZRjXGsTSOQM9ONGEDUKCBjI3UZkxFFoaOAIRMEdfoxlE5J5OsN4TlwhRZUwMR1MwCAhFE1iGH2aR%2BAsITZAACR0L0hmsABJAAVLoaPuQCIGTUKGkkMTDK/SRiSoGlRm7Oy8AcpynlGT52O8lpRj2cLeiEf9JGKFglSLJNkzKYhYhXPI23wpFTnOS4vlFTA4QANxw1hAyWHw/ACISNjkHZWoirYtmkXheDQ%2BoxVRH4%2BqhPlAvw40%2BF4Nz%2BE84rxn2qKwsOJ6lmJLx5tQCF2s02aFqWr5uMsGwHCU4qizZYhxhyzxPBC6R5NkITkySYIICEhoQq2XbJFEx7nr0eSLEDMJgS0JxLJNKsvgssF9JhGz2vsxznNafHQg8ry0GeUYsACrFgtCwmdhi%2BLEpS9LMswbLcskfLCqery1v8UZgqRqKJd4bZ9cO46anQ0Vzt%2BWFrqxW6oXukmvNe/XJd2oqdCWWHWARzHgg0FHuDRjGddkHGIDxtz9cJ4nXf9inQgEFd8EMIzmZM3SaiGAWFCZ6tU5g0L/dJ93MDh8YzJykV5Pt3nY70OPBGBMAwCMEx0AgIYM%2BdNt2/zp3DYgZvObboZYM2IZNSGfO0f99GB6coe8H4ODu7c1TnHrzT24AWQAZVkIYADVsC9ZIXBECIPDkfohtxIIQjXzBRD8E/BDP9xItkEer%2BERJgm%2BtUzHdGVXynhYhxGUNfH%2B2BJANUmnqYgAF0RfCuuMO0yBn4JwXMnHOVkqyiGHkvL%2Bzw7TZwfKzWyRCaqOj9nzYqaQPbw0kO3cUFxRpDDwF4QYQxqjEF1OXBSJM/4FU2A0UUZETqYBFPYMwthJCyC8vQ8YXCaiiD4fjL6JU1T5hFKgkU055rIDAslZQD8Giz3QGBWQncZRygVEqUYC1TBQjNDIfiXk6HF09owpRohW5szUccDR4ECx7gMW4tU/xDz1WEI6eExQnFjRgVYlx7ka76AwUnVexIADqeB9h4A0uwpUMwFwQFEk0W8yAIpeHQF4XItUGrtFEWmdoqJxE23UESNUOS8kFIzDaR03BNhaCqpQuqkh5oFGYJgQZWgRS7gzMYZMtUHyVkGCKHUdo5zRgAqKRaLAGAsUkpIbIJBaiTmmboEZnMxngh6U5dhSiCAqLpjCCZ4gJFjMQguAgk9C5LG8oLG5%2BlIrRTiglJKaUMq0QVoYCAbyplVzdv8zOppWgS3eislWrt/nLGBFAL5yFDrbHertfOUVJZaBXkinFCjxmTOmWrYqRcS5CXhRfORcgEJIR%2BajdGcL6WRU0L/CAmKuXfKjoysmqSiRdCcFc2qLlbn5PuV4R5xASEs1GGy7RrQCU8oLl5JYKKgXGhBbI6WEK5bQuymyxFOLjUuXRdFUVtBsX/IXEJCAeqiXOwOGSim71KWGv%2BbStlbrmWeP5e8wVGgxXIUnnytl79PBCVFXqiVpMY5OHxJwcSoguDSU4KQIQXAtBFtQFwORvBPLVoQiwNgHgBC0CLQQUtubxL7BAPwTYKgACc8l3y9vJPJAd5J%2BBklIPmzgZIi0ls4GW0gFbOBFoYCAWZrb525tIHAWASBYHTXIJQfd/gQDAE2PwUgxhRD1HgZQUUbbSCnBiCNH0HVigPvwEWbC80rgPv6A/Nt4kch5B8lwBoPp%2BDKwUOgHYaDq18GsLQWgysskchXfW9gdA80FtnQ%2BpdI8GjkiCZIHtkGIC4EIJUfQ9BZGoDOHAw6IlRItsAx2rtWgVD8H4FofWZJF69v1tJaS8lJ1cBncWvDXAV1rtIBust4kd1QBgIgFAdGpr%2BEPRAY9xAUBWLJFoWZV6b2rogPezdj66PPuUK%2BzkH68BfryD%2B1d5n/1Tvk4uuYoHODgcg9RRQsGEMIaQyhtDjAMMcDEqJzghaJPmfw3BQjZJtxjTJCoDjWghIUaIF8ajIpZBqYY/oB6LHN3E1ILeapJ7SmkE7YMFQmxe1hi0PwXttAuPCa0EhqL4mYggE2LQFQvA2tkhG41/tWgwxtdiwupd0n12Ae3cpiAe6CsHooFp1bJ6xC0F7WPCdRn/AmbMwup9L6312Yc3gJzf7jFua3cBnCzwwM%2BmTOh1gmHItTpi3OmbXACNEdkFeHbkheCdfkt6VKWTMv4Gy4xmj%2BX6PTUY/wZjsnWPlcwJVnT1Wp09a7WGFQ8k4JCekp1njrWwwiZ%2B%2BWqTjAZNyfbTVrtvB6uNea619r8lOv0CnfwXDcXacM7K1O3g/PfvLrR6V8SP74GPZAGSIAA"" rel=""noreferrer"">inlines to a single <code>rol r32, cl</code></a> (or <code>rol r32, imm8</code>) with compilers that grok it, because the compiler knows that <a href=""http://felixcloutier.com/x86/RCL:RCR:ROL:ROR.html"" rel=""noreferrer"">x86 rotate and shift instructions</a> mask the shift-count the same way the C source does.</p>

<p>Compiler support for this UB-avoiding idiom on x86, for <code>uint32_t x</code> and <code>unsigned int n</code> for variable-count shifts:</p>

<ul>
<li>clang: recognized for variable-count rotates since clang3.5, multiple shifts+or insns before that.</li>
<li>gcc: <a href=""https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57157"" rel=""noreferrer"">recognized  for variable-count rotates since gcc4.9</a>, multiple shifts+or insns before that.  gcc5 and later optimize away the branch and mask in the wikipedia version, too, using just a <code>ror</code> or <code>rol</code> instruction for variable counts.</li>
<li>icc: <a href=""https://software.intel.com/en-us/forums/intel-c-compilers-in-inde/topic/580884"" rel=""noreferrer"">supported for variable-count rotates since ICC13 or earlier</a>.  Constant-count rotates use <code>shld edi,edi,7</code> which is slower and takes more bytes than <code>rol edi,7</code> on some CPUs (especially AMD, but also some Intel), when BMI2 isn't available for <code>rorx eax,edi,25</code> to save a MOV.</li>
<li>MSVC: x86-64 CL19: Only recognized for constant-count rotates.  (The wikipedia idiom is recognized, but the branch and AND aren't optimized away).  Use the <code>_rotl</code> / <code>_rotr</code> intrinsics from <code>&lt;intrin.h&gt;</code> on x86 (including x86-64).</li>
</ul>

<p><strong>gcc for ARM uses an <code>and r1, r1, #31</code> for variable-count rotates, but still does the actual rotate with a single instruction</strong>: <code>ror r0, r0, r1</code>.  So gcc doesn't realize that rotate-counts are inherently modular.  As the ARM docs say, <a href=""http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/BABFFEJF.html"" rel=""noreferrer"">""ROR with shift length, <code>n</code>, more than 32 is the same as ROR with shift length <code>n-32</code>""</a>.  I think gcc gets confused here because left/right shifts on ARM saturate the count, so a shift by 32 or more will clear the register.  (Unlike x86, where shifts mask the count the same as rotates).  It probably decides it needs an AND instruction before recognizing the rotate idiom, because of how non-circular shifts work on that target.</p>

<p>Current x86 compilers still use an extra instruction to mask a variable count for 8 and 16-bit rotates, probably for the same reason they don't avoid the AND on ARM.  This is a missed optimization, because performance doesn't depend on the rotate count on any x86-64 CPU.  (Masking of counts was introduced with 286 for performance reasons because it handled shifts iteratively, not with constant-latency like modern CPUs.)</p>

<p>BTW, prefer rotate-right for variable-count rotates, to avoid making the compiler do <code>32-n</code> to implement a left rotate on architectures like ARM and MIPS that only provide a rotate-right.  (This optimizes away with compile-time-constant counts.)</p>

<p>Fun fact: ARM doesn't really have dedicated shift/rotate instructions, it's just MOV with the <a href=""https://cseweb.ucsd.edu/classes/wi14/cse30-c/lectures/PI_WI_14_CSE30_lecture_8_post.pdf"" rel=""noreferrer"">source operand going through the barrel-shifter in ROR mode</a>: <code>mov r0, r0, ror r1</code>.  So a rotate can fold into a register-source operand for an EOR instruction or something.</p>

<hr>

<p><strong>Make sure you use unsigned types for <code>n</code> and the return value, or else it won't be a rotate</strong>.  (gcc for x86 targets does arithmetic right shifts, shifting in copies of the sign-bit rather than zeroes, leading to a problem when you <code>OR</code> the two shifted values together.  Right-shifts of negative signed integers is implementation-defined behaviour in C.)</p>

<p>Also, <strong>make sure the shift count is an unsigned type</strong>, because <code>(-n)&amp;31</code> with a signed type could be one's complement or sign/magnitude, and not the same as the modular 2^n you get with unsigned or two's complement.  (See comments on Regehr's blog post).  <code>unsigned int</code> does well on every compiler I've looked at, for every width of <code>x</code>.  Some other types actually defeat the idiom-recognition for some compilers, so don't just use the same type as <code>x</code>.</p>

<hr>

<p><strong>Some compilers provide intrinsics for rotates</strong>, which is far better than inline-asm if the portable version doesn't generate good code on the compiler you're targeting.  There aren't cross-platform intrinsics for any compilers that I know of.  These are some of the x86 options:</p>

<ul>
<li>Intel documents that <a href=""https://software.intel.com/sites/landingpage/IntrinsicsGuide/#techs=SSE,SSE2,SSE3,SSSE3,SSE4_1,SSE4_2,AVX,AVX2,FMA,Other&amp;expand=3236,3233,5453,5453,5534,1649,5169,4433,4431&amp;text=rotl"" rel=""noreferrer""><code>&lt;immintrin.h&gt;</code> provides <code>_rotl</code> and <code>_rotl64</code> intrinsics</a>, and same for right shift.  MSVC requires <code>&lt;intrin.h&gt;</code>, while gcc require <code>&lt;x86intrin.h&gt;</code>.  An <code>#ifdef</code> takes care of gcc vs. icc, but clang doesn't seem to provide them anywhere, <a href=""http://lists.llvm.org/pipermail/cfe-commits/Week-of-Mon-20160905/170179.html"" rel=""noreferrer"">except in MSVC compatibility mode with <code>-fms-extensions -fms-compatibility -fms-compatibility-version=17.00</code></a>.  And the asm it emits for them sucks (extra masking and a CMOV).</li>
<li>MSVC: <a href=""https://msdn.microsoft.com/en-us/library/yy0728bz(v=vs.140).aspx"" rel=""noreferrer""><code>_rotr8</code> and <code>_rotr16</code></a>.</li>
<li>gcc and icc (not clang):  <code>&lt;x86intrin.h&gt;</code> also provides <code>__rolb</code>/<code>__rorb</code> for 8-bit rotate left/right, <code>__rolw</code>/<code>__rorw</code> (16-bit),  <code>__rold</code>/<code>__rord</code> (32-bit), <code>__rolq</code>/<code>__rorq</code> (64-bit, only defined for 64-bit targets).  For narrow rotates, the implementation uses <code>__builtin_ia32_rolhi</code> or <code>...qi</code>, but the 32 and 64-bit rotates are defined using shift/or (with no protection against UB, because the code in <a href=""https://github.com/gcc-mirror/gcc/blob/master/gcc/config/i386/ia32intrin.h#L146"" rel=""noreferrer""><code>ia32intrin.h</code></a> only has to work on gcc for x86).  GNU C appears not to have any cross-platform <code>__builtin_rotate</code> functions the way it does for <code>__builtin_popcount</code> (which expands to whatever's optimal on the target platform, even if it's not a single instruction).  Most of the time you get good code from idiom-recognition.</li>
</ul>

<p></p>

<pre><code>// For real use, probably use a rotate intrinsic for MSVC, or this idiom for other compilers.  This pattern of #ifdefs may be helpful
#if defined(__x86_64__) || defined(__i386__)

#ifdef __MSC_VER
#include &lt;intrin.h&gt;
#else
#include &lt;x86intrin.h&gt;  // Not just &lt;immintrin.h&gt; for compilers other than icc
#endif

uint32_t rotl32_x86_intrinsic(rotwidth_t x, unsigned n) {
  //return __builtin_ia32_rorhi(x, 7);  // 16-bit rotate, GNU C
  return _rotl(x, n);  // gcc, icc, msvc.  Intel-defined.
  //return __rold(x, n);  // gcc, icc.
  // can't find anything for clang
}
#endif
</code></pre>

<p></p>

<p>Presumably some non-x86 compilers have intrinsics, too, but let's not expand this community-wiki answer to include them all.  (Maybe do that in <a href=""https://stackoverflow.com/a/776573/224132"">the existing answer about intrinsics</a>).</p>

<hr>

<p>(The old version of this answer suggested MSVC-specific inline asm (which only works for 32bit x86 code), or <a href=""http://www.devx.com/tips/Tip/14043"" rel=""noreferrer"">http://www.devx.com/tips/Tip/14043</a> for a C version.  The comments are replying to that.)</p>

<p><strong>Inline asm defeats many optimizations</strong>, <a href=""https://stackoverflow.com/questions/3323445/what-is-the-difference-between-asm-and-asm/35959859#35959859"">especially MSVC-style because it forces inputs to be stored/reloaded</a>.  A carefully-written GNU C inline-asm rotate would allow the count to be an immediate operand for compile-time-constant shift counts, but it still couldn't optimize away entirely if the value to be shifted is also a compile-time constant after inlining.  <strong><a href=""https://gcc.gnu.org/wiki/DontUseInlineAsm"" rel=""noreferrer"">https://gcc.gnu.org/wiki/DontUseInlineAsm</a></strong>.</p>
","776523"
"How to prevent output screen from disappear in Visual Studio 2013 C++ Compiler","74532","","<p>I just downloaded Visual Studio 2013. When I compile C, it doesn't show me my output. The output screen will show up for a brief second and then disappears. </p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
    printf(""hi"");
    return 0;
}
</code></pre>

<p>""The program '[5688] Project1.exe' has exited with code 0 (0x0).""
I know my code works and run correctly except I just can't make the output screen stay on without exiting after a second. </p>
","<p>You can run the application in debug mode and in release mode. Normally <code>Ctrl + F5</code> will run the application without debugger. And <code>F5</code>just runs the application.</p>

<p>If you do <code>Ctrl+F5</code> (""Start without Debugging""), the console remains open at the end and asks you to <code>Press any key to continue . . .</code> here you can see the output.</p>

<p>If you are just using <code>F5</code> then you are in a debug mode. At the end you add, <code>getchar()</code> function before <code>retuen 0;</code>so the console will wait until you press any key...</p>
","20736800"
"const int vs. int const as function parameter in C++ and C","74522","","<p>Quick question: </p>

<pre><code>int testfunc1 (const int a)
{
  return a;
}

int testfunc2 (int const a)
{
  return a;
}
</code></pre>

<p>Are these two functions the same in every aspect or is there a difference? I'm interested in an answer for the C-language, but if there is something interested in the C++ case I'd like to know as well. </p>
","<p><code>const T</code> and <code>T const</code> are identical. Pay attention to pointer precedence, however:</p>

<p><code>char const*</code> is a pointer to a constant char (array), while <code>char* const</code> is a constant pointer to a mutable char (array).</p>
","162504"
"C error: Expected expression before int","74484","","<p>When I tried the following code I get the error mentioned.</p>

<pre><code>if(a==1)
  int b =10;
</code></pre>

<p>But the following is syntactically correct</p>

<pre><code>if(a==1)
{
   int b = 10;
}
</code></pre>

<p>Why is this?</p>
","<p>This is actually a fairly interesting question.  It's not as simple as it looks at first.  For reference, I'm going to be basing this off of the latest C11 language grammar defined in <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf"">N1570</a></p>

<p>I guess the counter-intuitive part of the question is: if this is correct C:</p>

<pre><code>if (a == 1) {
  int b = 10;
}
</code></pre>

<p>then why is this not also correct C?</p>

<pre><code>if (a == 1)
  int b = 10;
</code></pre>

<p>I mean, a one-line conditional <code>if</code> statement should be fine either with or without braces, right?</p>

<p>The answer lies in the grammar of the <code>if</code> statement, as defined by the C standard.  The relevant parts of the grammar I've quoted below.  Succinctly: the <code>int b = 10</code> line is a <em>declaration</em>, not a <em>statement</em>, and the grammar for the <code>if</code> statement requires a statement after the conditional that it's testing.  But if you enclose the declaration in braces, it becomes a statement and everything's well.</p>

<p>And just for the sake of answering the question completely -- this has nothing to do with scope.  The <code>b</code> variable that exists inside that scope will be inaccessible from outside of it, but the program is still syntactically correct.  Strictly speaking, the compiler shouldn't throw an error on it.  Of course, you should be building with <code>-Wall -Werror</code> anyways ;-)</p>

<pre class=""lang-none prettyprint-override"">
(6.7) <i>declaration</i>:
            <i>declaration-speciﬁers init-declarator-list</i><sub>opt</sub> <b>;</b>
            <i>static_assert-declaration</i>

(6.7) <i>init-declarator-list</i>:
            <i>init-declarator</i>
            <i>init-declarator-list</i> <b>,</b> <i>init-declarator</i>

(6.7) <i>init-declarator</i>:
            <i>declarator</i>
            <i>declarator</i> <b>=</b> <i>initializer</i>

(6.8) <i>statement</i>:
            <i>labeled-statement</i>
            <i>compound-statement</i>
            <i>expression-statement</i>
            <i>selection-statement</i>
            <i>iteration-statement</i>
            <i>jump-statement</i>

(6.8.2) <i>compound-statement</i>:
            <b>{</b> <i>block-item-list</i><sub>opt</sub> <b>}</b>

(6.8.4) <i>selection-statement</i>:
            <b>if (</b> <i>expression</i> <b>)</b> <i>statement</i>
            <b>if (</b> <i>expression</i> <b>)</b> <i>statement</i> <b>else</b> <i>statement</i>
            <b>switch (</b> <i>expression</i> <b>)</b> <i>statement</i>
</pre>
","22420796"
"Floating point exception( core dump","74459","","<p>Program: So I made a program that take two numbers, N and L. N is the size of a 2D array and L is a number from 3 - 16. The program builds the array and starts at the center and works its way out in a counter clockwise spiral. I is the value of the center and its as you go through the array( in the spiral ) the value will increase by one. It it is prime, that number will be assigned to that spot and if not it <em>*</em> will take its place instead.</p>

<p>Error: I'm getting a ""Floating point exception "" error, how would I solve this? </p>

<p>Code:</p>

<pre><code> void Array_Loop( int *Array, int n, int L ) ;

int Is_Prime( int Number ) ;

int main( int argc, char *argv[] ){

  int **Array ;
  int n, L ;

  n = atoi( argv[1] ) ;
  L = atoi( argv[2] ) ;

  Matrix_Build( &amp;Array, n, n ) ;
  Array_Loop( Array, n, L ) ;


  return 0 ;

}

void Array_Loop( int *Array, int n, int L ){

  int i, j, k, h ;
  int lctn, move;

  lctn = n / 2 + 1 ;
  i = lctn ;
  j = lctn ;
  move = 1

  while( i != 0 &amp;&amp; j != n ){

    for( j = lctn ; j &lt; lctn + move ; j++ ){

         if( L % 2 == 2) Array[i][j] = -1 ;
         else Array[i][j] = Is_Prime( L ) ;
         L++ ;
    }

    move = move * -1 ;

    for( i = i ; i &gt; lctn - move ; i-- ){

      if( L % 2 == 2) Array[i][j] = -1 ;
      else Array[i][j] = Is_Prime( L ) ;
      L++ ;
    }

    move-- ;

    for( j = j ; j &gt; lctn - move ; j-- ){

      if( L % 2 == 2) Array[i][j] = -1 ;
      else Array[i][j] = Is_Prime( L ) ;
      L++ ;
    }

    move = move * -1 ;

    for( i = i ; i &lt; lctn - move ; i-- ){

      if( L % 2 == 2) Array[i][j] = -1 ;
      else Array[i][j] = Is_Prime( L ) ;
      L++ ;
    }

    move++ ;

  }

}


int Is_Prime( int Number ){

  int i ;

  for( i = 0 ; i &lt; Number / 2 ; i++ ){

    if( Number % i != 0 ) return -1 ;

  }

  return Number ;

}
</code></pre>
","<p>You are getting Floating point exception because Number % i, when i is 0:</p>

<pre><code>int Is_Prime( int Number ){

  int i ;

  for( i = 0 ; i &lt; Number / 2 ; i++ ){

    if( Number % i != 0 ) return -1 ;

  }

  return Number ;

}
</code></pre>

<p>Just start the loop at i = 2. Since i = 1 in Number % i it always be equal to zero, since Number is a int.</p>

<p>Btw: Mysticial did point out first on the comments.</p>
","13664831"
"Unique random numbers in an integer array in the C programming language","74445","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/196017/unique-random-numbers-in-o1"">Unique random numbers in O(1)?</a>  </p>
</blockquote>



<p>How do I fill an integer array with unique values (no duplicates) in C?</p>

<pre><code>int vektor[10];   

for (i = 0; i &lt; 10; i++) {
    vektor[i] = rand() % 100 + 1;
}

//No uniqueness here
</code></pre>
","<p>There are several ways to solve your problem, each has its own advantages and disadvantages.</p>

<p>First I'd like to note that you already got quite a few of responses that do the following: they generate a random number, then check somehow whether it was already used in the array, and if it was already used, they just generate another number until they find an unused one.
This is a naive and, truth to be said, seriously flawed approach. The problem is with the cyclic trial-and-error nature of the number generation (""if already used, try again""). If the numeric range (say, [1..N]) is close to the length of the desired array (say, M), then towards the end the algorithm might spend a huge amount of time trying to find the next number. If the random number generator is even a little bit broken (say, never generates some number, or does it very rarely), then with N == M the algorithm is guaranteed to loop forever (or for a very long time). Generally this trial-and-error approach is a useless one, or a flawed one at best.</p>

<p>Another approach already presented here is generating a random permutation in an array of size N. The idea of random permutation is a promising one, but doing it on an array of size N (when M &lt;&lt; N) will certainly generate more heat than light, speaking figuratively.</p>

<p>Good solutions to this problem can be found, for example, in Bentley's ""Programming Pearls"" (and some of them are taken from Knuth).</p>

<hr>

<ul>
<li><strong>The Knuth algorithm.</strong> This is a very simple algorithm with a complexity of O(N) (i.e. the numeric range), meaning that it is most usable when M is close to N. However, this algorithm doesn't require any extra memory in addition to your <code>vektor</code> array, as opposed to already offered variant with permutations (meaning that it takes O(M) memory, not O(N) as other permutation-based algorithms suggested here). The latter makes it a viable algorithm even for M &lt;&lt; N cases.</li>
</ul>

<p>The algorithm works as follows: iterate through all numbers from 1 to N and select the current number with probability <code>rm / rn</code>, where <code>rm</code> is how many numbers we still need to find, and <code>rn</code> is how many numbers we still need to iterate through. Here's a possible implementation for your case</p>

<pre><code>#define M 10
#define N 100

int in, im;

im = 0;

for (in = 0; in &lt; N &amp;&amp; im &lt; M; ++in) {
  int rn = N - in;
  int rm = M - im;
  if (rand() % rn &lt; rm)    
    /* Take it */
    vektor[im++] = in + 1; /* +1 since your range begins from 1 */
}

assert(im == M);
</code></pre>

<p>After this cycle we get an array <code>vektor</code> filled with randomly chosen numbers <em>in ascending order</em>. The ""ascending order"" bit is what we don't need here. So, in order to ""fix"" that we just make a random permutation of elements of <code>vektor</code> and we are done. Note, that the this is a O(M) permutation requiring no extra memory. (I leave out the implementation of the permutation algorithm. Plenty of links was given here already.).</p>

<p>If you look carefully at the permutation-based algorithms proposed here that operate on an array of length N, you'll see that most of them are pretty much this very same Knuth algorithm, but re-formulated for <code>M == N</code>. In that case the above selection cycle will chose each and every number in [1..N] range with probabilty 1, effectively turning into initialization of an N-array with numbers 1 to N. Taking this into account, I think it becomes rather obvious that running this algorithm for <code>M == N</code> and then truncating the result (possibly discarding most of it) makes much less sense than just running this algorithm in its original form for the original value of M and getting the result right away, without any truncation.</p>

<hr>

<ul>
<li><strong>The Floyd algorithm</strong> (see <a href=""http://books.google.com/books?id=kse_7qbWbjsC&amp;lpg=PP1&amp;dq=%22column%2013%22%20bentley%20%22programming%20pearls%22&amp;pg=PA225#v=onepage&amp;q=&amp;f=false"" rel=""noreferrer"">here</a>). This approach has the complexity of about O(M) (depends on the search structure used), so it is better suitable when M &lt;&lt; N. This approach keeps track of already generated random numbers, so it requires extra memory. However, the beauty of it is that it <em>does not</em> make any of those abominable trial-and-error iterations, trying to find an unused random number. This algorithm is guaranteed to generate one unique random number after each call to the random number generator. </li>
</ul>

<p>Here's a possible implementation for it for your case. (There are different ways to keep track of already used numbers. I'll just use an array of flags, assuming that N is not prohibitively large)</p>

<pre><code>#define M 10
#define N 100    

unsigned char is_used[N] = { 0 }; /* flags */
int in, im;

im = 0;

for (in = N - M; in &lt; N &amp;&amp; im &lt; M; ++in) {
  int r = rand() % (in + 1); /* generate a random number 'r' */

  if (is_used[r])
    /* we already have 'r' */
    r = in; /* use 'in' instead of the generated number */

  assert(!is_used[r]);
  vektor[im++] = r + 1; /* +1 since your range begins from 1 */
  is_used[r] = 1;
}

assert(im == M);
</code></pre>

<p>Why the above works is not immediately obvious. But it works. Exactly M numbers from [1..N] range will be picked with uniform distribution.</p>

<p>Note, that for large N you can use a search-based structure to store ""already used"" numbers, thus getting a nice O(M log M) algorithm with O(M) memory requirement.</p>

<p>(There's one thing about this algorithm though: while the resultant array will not be ordered, a certain ""influence"" of the original 1..N ordering will still be present in the result. For example, it is obvious that number N, if selected, can only be the very last member of the resultant array. If this ""contamination"" of the result by the unintended ordering is not acceptable, the resultant <code>vektor</code> array can be random-shuffled, just like in the Khuth algorithm).</p>

<hr>

<p><strong>Note the very critical point observed in the design of these two algoritms: they never <em>loop</em>, trying to find a new unused random number. Any algorithm that makes trial-and-error iterations with random numbers is flawed from practical point of view. Also, the memory consumption of these algorithms is tied to M, not to N</strong></p>

<p>To the OP I would recommend the Floyd's algorithm, since in his application M seems to be considerably less than N and that it doesn't (or may not) require an extra pass for permutation. However, for such small values of N the difference might be negligible.</p>
","1608585"
"Compiling C-code from the Command Prompt in Windows?","74425","","<p>I want to compile C code from the Command Prompt in Windows. I have added the environment variable to the PATH and I can compile .cs files with: <code>csc app.cs</code></p>

<p>That's OK, but how do I compile app.c? </p>
","<p>You do this:</p>

<pre><code>cl app.c
</code></pre>

<p>Here's a complete transcript, including setting up the environment for Visual Studio 2005 (change ""8"" to ""9.0"" for Visual Studio 2008).</p>

<pre><code>C:\src\tests&gt;""\Program Files (x86)\Microsoft Visual Studio 8\vc\bin\vcvars32.bat""
Setting environment for using Microsoft Visual Studio 2005 x86 tools.

C:\src\tests&gt;type app.c
#include &lt;stdio.h&gt;
int main(void)
{
    printf(""Hello world!\n"");
    return 0;
}

C:\src\tests&gt;cl app.c
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.762 for 80x86

Copyright (C) Microsoft Corporation.  All rights reserved.

app.c
Microsoft (R) Incremental Linker Version 8.00.50727.762
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:app.exe
app.obj

C:\src\tests&gt;app
Hello world!
</code></pre>
","1334232"
"How to compile C code with anonymous structs / unions?","74307","","<p>I can do this in c++/g++:</p>

<pre><code>struct vec3 { 
    union {
        struct {
            float x, y, z;
        }; 
        float xyz[3];
    }; 
};
</code></pre>

<p>Then,</p>

<pre><code>vec3 v;
assert(&amp;v.xyz[0] == &amp;v.x);
assert(&amp;v.xyz[1] == &amp;v.y);
assert(&amp;v.xyz[2] == &amp;v.z);
</code></pre>

<p>will work.</p>

<p>How does one do this in c with gcc?  I have</p>

<pre><code>typedef struct {
    union {
        struct {
            float x, y, z;
        };
        float xyz[3];
    };
} Vector3;
</code></pre>

<p>But I get errors all around, specifically </p>

<pre><code>line 5: warning: declaration does not declare anything
line 7: warning: declaration does not declare anything
</code></pre>
","<p>according to <a href=""http://gcc.gnu.org/onlinedocs/gcc/Unnamed-Fields.html#Unnamed-Fields"" rel=""noreferrer"">http://gcc.gnu.org/onlinedocs/gcc/Unnamed-Fields.html#Unnamed-Fields</a></p>

<p><code>-fms-extensions</code> will enable the feature you (and I) want.</p>
","2391089"
"ISO C90 forbids mixed declarations and code in C","74274","","<p>I declared a variable in this way:</p>

<pre><code>int i = 0;
</code></pre>

<p>I get the warning: </p>

<blockquote>
  <p>ISO C90 forbids mixed declarations and code</p>
</blockquote>

<p>How can I fix it?</p>
","<p>I think you should move the variable declaration to top of block. I.e.</p>

<pre><code>{
    foo();
    int i = 0;
    bar();
}
</code></pre>

<p>to</p>

<pre><code>{
    int i = 0;
    foo();
    bar();
}
</code></pre>
","13291402"
"Function pointer as a member of a C struct","74262","","<p>I have a struct as follows, with a pointer to a function called ""length"" that will return the length of the chars member.</p>

<pre><code>typedef struct pstring_t {
    char * chars;
    int (* length)();
} PString;
</code></pre>

<p>I have a function to return the length of the characters from a pointer to a PString:</p>

<pre><code>int length(PString * self) {
    return strlen(self-&gt;chars);
}
</code></pre>

<p>I have a function initializeString() that returns a pointer to a PString:</p>

<pre><code>PString * initializeString() {
    PString *str;
    str-&gt;length = &amp;length;
    return str;
}
</code></pre>

<p>It is clear that I am doing something very wrong with my pointers here, because the <code>str-&gt;length = &amp;length</code> line causes an EXC_BAD_ACCESS signal in my debugger, as does `return strlen(self->chars). Does anyone have any insights into this problem?</p>

<p>I specifically want to be able have the initializeString() function return a pointer to a PString, and the length function to use a pointer to a PString as input. This is just an experiment in implementing a rudimentary object-oriented system in C, but I don't have a lot of experience dealing with pointers head-on. Thanks for any help you can give me.</p>
","<p>Allocate memory to hold chars.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct PString {
        char *chars;
        int (*length)();
} PString;

int length(PString *self) {
    return strlen(self-&gt;chars);
}

PString *initializeString(int n) {
    PString *str = malloc(sizeof(PString));

    str-&gt;chars = malloc(sizeof(char) * n);
    str-&gt;length = length;

    str[0] = '\0'; //add a null terminator in case the string is used before any other initialization.

    return str;
}

int main() {
    PString *p = initializeString(30);
    strcpy(p-&gt;chars, ""Hello"");
    printf(""\n%d"", p-&gt;length(p));
    return 0;
}
</code></pre>
","1350409"
"How to return a value from thread in C","74202","","<p>I'am new to C and would like to play with threads a bit. I would like to return some value from a thread using <code>pthread_exit()</code></p>

<p>My code is as follows:</p>

<pre><code>#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;

void *myThread()
{
   int ret = 42;
   pthread_exit(&amp;ret);
}

int main()
{
   pthread_t tid;
   void *status;

   pthread_create(&amp;tid, NULL, myThread, NULL);
   pthread_join(tid, &amp;status);

   printf(""%d\n"",*(int*)status);   

   return 0;
}
</code></pre>

<p>I would expect the program output ""42\n"" but it outputs a random number. How can I print the returned value?</p>

<p><strong>EDIT:</strong>
According to first answers the problem is that I am returning pointer to local variable. What is the best practice of returning/storing variables of multiple threads? A global hash table?</p>

<p>Thanks in advance</p>
","<p>You are returning the address of a local variable, which no longer exists when the thread function exits. In any case, why call pthread_exit? why not simply return a value from the thread function?</p>

<pre><code>void *myThread()
{
   return (void *) 42;
}
</code></pre>

<p>and then in main:</p>

<pre><code>printf(""%d\n"",(int)status);   
</code></pre>

<p>If you need to return a complicated value such a structure, it's probably easiest to allocate it dynamically via malloc() and return a pointer. Of course, the code that initiated the thread will then be responsible for freeing the memory.</p>
","2251479"
"Where to find the complete definition of off_t type?","74115","","<p>I am sending file from client to server using TCP. To mark the end of the file I like to send file size before the actual data. So I use <code>stat</code> system call to find the size of the file. This is of type <code>off_t</code>. I like to know how many bytes it occupies so that I can read it properly on the server side. It is defined in the  <code>&lt;sys/types.h&gt;</code>. But I do not understand the definition. It just defines <code>__off_t or _off64_t</code> to be <code>off_t</code>. Where to look for <code>__off_t</code>? Also is it convention that <code>__</code> is prefixed for most of the things in header files and scares me when I read header files to understand better. How to read a header file better?</p>

<pre><code>#ifndef __off_t_defined
# ifndef __USE_FILE_OFFSET64
typedef __off_t off_t;
# else
typedef __off64_t off_t;
# endif
# define __off_t_defined
#endif 
</code></pre>
","<p>Since this answer still gets voted up, I want to point out that you should almost never need to look in the header files. If you want to write reliable code, you're much better served by looking in the standard. A better question than ""how is <code>off_t</code> defined on my machine""  is ""how is <code>off_t</code> defined by the standard?"". Following the standard means that your code will work today and tomorrow, on any machine.</p>

<p>In this case, <code>off_t</code> isn't defined by the C standard. It's part of the POSIX standard, which <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/"" rel=""noreferrer"">you can browse here</a>.</p>

<p>Unfortunately, <code>off_t</code> isn't very rigorously defined. All I could find to define it is on the page on <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_types.h.html#tag_13_67"" rel=""noreferrer""><code>sys/types.h</code></a>:</p>

<blockquote>
  <p><code>blkcnt_t</code> and <code>off_t</code> shall be signed integer types.</p>
</blockquote>

<p>This means that you can't be sure how big it is. If you're using GNU C, you can use the instructions in <a href=""https://stackoverflow.com/a/14351239/790070"">the answer below</a> to ensure that it's 64 bits. Or better, you can convert to a standards defined size before putting it on the wire. This is how projects like Google's <a href=""http://code.google.com/p/protobuf/"" rel=""noreferrer"">Protocol Buffers</a> work (although that is a C++ project).</p>

<hr>

<p>So, I think ""where do I find the definition in my header files"" isn't the best question. 
But, for completeness here's the answer:</p>

<p>You'll find the definition in <code>bits/types.h</code> (as a comment says at the top, never directly include this file),  but it's obscured a bit in a bunch of macros. An alternative to trying to unravel them is to look at the preprocessor output:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;

int main(void) {
  off_t blah;

  return 0;
}
</code></pre>

<p>And then:    </p>

<pre><code>$ gcc -E sizes.c  | grep __off_t
typedef long int __off_t;
....
</code></pre>

<p>However, if you want to know the size of something, you can always use the <code>sizeof()</code> operator.</p>

<p>Edit: Just saw the part of your question about the <code>__</code>. <a href=""https://stackoverflow.com/a/1449301/790070"">This answer has a good discussion</a>. The key point is that names starting with <code>__</code> are reserved for the implementation (so you shouldn't start your own definitions with <code>__</code>).</p>
","9073762"
"Why use apparently meaningless do-while and if-else statements in macros?","74105","","<p>In many C/C++ macros I'm seeing the code of the macro wrapped in what seems like a meaningless <code>do while</code> loop.  Here are examples.</p>

<pre><code>#define FOO(X) do { f(X); g(X); } while (0)
#define FOO(X) if (1) { f(X); g(X); } else
</code></pre>

<p>I can't see what the <code>do while</code> is doing.  Why not just write this without it?</p>

<pre><code>#define FOO(X) f(X); g(X)
</code></pre>
","<p>The <code>do ... while</code> and <code>if ... else</code> are there to make it so that a
semicolon after your macro always means the same thing.  Let's say you
had something like your second macro.</p>

<pre><code>#define BAR(X) f(x); g(x)
</code></pre>

<p>Now if you were to use <code>BAR(X);</code> in an <code>if ... else</code> statement, where the bodies of the if statement were not wrapped in curly brackets, you'd get a bad surprise.</p>

<pre><code>if (corge)
  BAR(corge);
else
  gralt();
</code></pre>

<p>The above code would expand into</p>

<pre><code>if (corge)
  f(corge); g(corge);
else
  gralt();
</code></pre>

<p>which is syntactically incorrect, as the else is no longer associated with the if.  It doesn't help to wrap things in curly braces within the macro, because a semicolon after the braces is syntactically incorrect.</p>

<pre><code>if (corge)
  {f(corge); g(corge);};
else
  gralt();
</code></pre>

<p>There are two ways of fixing the problem.  The first is to use a comma to sequence statements within the macro without robbing it of its ability to act like an expression.</p>

<pre><code>#define BAR(X) f(X), g(X)
</code></pre>

<p>The above version of bar <code>BAR</code> expands the above code into what follows, which is syntactically correct.</p>

<pre><code>if (corge)
  f(corge), g(corge);
else
  gralt();
</code></pre>

<p>This doesn't work if instead of <code>f(X)</code> you have a more complicated body of code that needs to go in its own block, say for example to declare local variables.  In the most general case the solution is to use something like <code>do ... while</code> to cause the macro to be a single statement that takes a semicolon without confusion.</p>

<pre><code>#define BAR(X) do { \
  int i = f(X); \
  if (i &gt; 4) g(i); \
} while (0)
</code></pre>

<p>You don't have to use <code>do ... while</code>, you could cook up something with <code>if ... else</code> as well, although when <code>if ... else</code> expands inside of an <code>if ... else</code> it leads to a ""<a href=""http://en.wikipedia.org/wiki/Dangling_else"" rel=""noreferrer"">dangling else</a>"", which could make an existing dangling else problem even harder to find, as in the following code.</p>

<pre><code>if (corge)
  if (1) { f(corge); g(corge); } else;
else
  gralt();
</code></pre>

<p>The point is to use up the semicolon in contexts where a dangling semicolon is erroneous.  Of course, it could (and probably should) be argued at this point that it would be better to declare <code>BAR</code> as an actual function, not a macro.</p>

<p>In summary, the <code>do ... while</code> is there to work around the shortcomings of the C preprocessor.  When those C style guides tell you to lay off the C preprocessor, this is the kind of thing they're worried about.</p>
","154138"
"Can I display the value of an enum with printf()?","73985","","<p>Is there a one-liner that lets me output the current value of an enum?</p>
","<p>As a string, no. As an integer, %d.</p>

<p>Unless you count:</p>

<pre><code>static char* enumStrings[] = { /* filler 0's to get to the first value, */
                               ""enum0"", ""enum1"", 
                               /* filler for hole in the middle: ,0 */
                               ""enum2"", ""enum3"", .... };

...

printf(""The value is %s\n"", enumStrings[thevalue]);
</code></pre>

<p>This won't work for something like an enum of bit masks. At that point, you need a hash table or some other more elaborate data structure.</p>
","2161797"
"Hidden features of C","73975","","<p>I know there is a standard behind all C compiler implementations, so there should be no hidden features. Despite that, I am sure all C developers have hidden/secret tricks they use all the time.</p>
","<p>Function pointers.  You can use a table of function pointers to implement, e.g., fast indirect-threaded code interpreters (FORTH) or byte-code dispatchers, or to simulate OO-like virtual methods.</p>

<p>Then there are hidden gems in the standard library, such as qsort(),bsearch(), strpbrk(), strcspn() [the latter two being useful for implementing a strtok() replacement].</p>

<p>A misfeature of C is that signed arithmetic overflow is undefined behavior (UB).  So whenever you see an expression such as x+y, both being signed ints, it might potentially overflow and cause UB.</p>
","132509"
"Switch statement: must default be the last case?","73945","","<p>Consider the following <code>switch</code> statement:</p>

<pre><code>switch( value )
{
  case 1:
    return 1;
  default:
    value++;
    // fall-through
  case 2:
    return value * 2;
}
</code></pre>

<p>This code compiles, but is it valid (= defined behavior) for C90/C99? I have never seen code where the <em>default</em> case is not the last case.</p>

<p><strong>EDIT:</strong><br>
As <em>Jon Cage</em> and <em>KillianDS</em> write: this is really ugly and confusing code and I am well aware of it. I am just interested in the general syntax (is it defined?) and the expected output.</p>
","<p>The C99 standard is not explicit about this, but taking all facts together, it is perfectly valid.</p>

<p>A <code>case</code> and <code>default</code> label are equivalent to a <code>goto</code> label. See 6.8.1 Labeled statements. Especially interesting is 6.8.1.4, which enables the already mentioned Duff's Device:</p>

<blockquote>
  <p>Any statement may be preceded by a
  prefix that declares an identifier as
  a label name. Labels in themselves do
  not alter the flow of control, which
  continues unimpeded across  them.</p>
</blockquote>

<p><strong>Edit</strong>: The code within a switch is nothing special; it is a normal block of code as in an <code>if</code>-statement, with additional jump labels. This explains the fall-through behaviour and why <code>break</code> is necessary.</p>

<p>6.8.4.2.7 even gives an example:</p>

<pre><code>switch (expr) 
{ 
    int i = 4; 
    f(i); 
case 0: 
    i=17; 
    /*falls through into default code */ 
default: 
    printf(""%d\n"", i); 
} 
</code></pre>

<blockquote>
  <p>In the artificial program fragment the
  object whose identifier is i exists
  with automatic storage duration
  (within the block) but is never
  initialized, and thus if the
  controlling expression has a nonzero
  value, the call to the printf function
  will access an indeterminate value.
  Similarly, the call to the function f
  cannot be reached.</p>
</blockquote>

<p>The case constants must be unique within a switch statement:</p>

<blockquote>
  <p>6.8.4.2.3 The expression of each case label shall be an integer constant
  expression and no two of the case
  constant expressions in the same
  switch statement shall have the same
  value after conversion. There may be
  at most one default label in a switch
  statement.</p>
</blockquote>

<p>All cases are evaluated, then it jumps to the default label, if given:</p>

<blockquote>
  <p>6.8.4.2.5 The integer promotions are performed on the controlling
  expression. The constant expression in
  each case label is converted to the
  promoted type of the controlling
  expression. If a converted value
  matches that of the promoted
  controlling expression,  control jumps
  to the statement following the matched
  case label. Otherwise, if there is a
  default label, control jumps to the
  labeled statement. If no converted
  case constant  expression matches and
  there is no default label, no part of
  the switch body is executed.</p>
</blockquote>
","3110478"
"How to print an unsigned long int with printf in C?","73914","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/3209909/how-to-printf-unsigned-long-in-gcc"">How to printf &ldquo;unsigned long&rdquo; in C?</a>  </p>
</blockquote>



<p>I have my number like so... </p>

<pre><code>int unsigned long number = 600851475143;
</code></pre>

<p>I am trying to print it with <code>printf()</code>. Every time I try, I get a warning by the compiler.</p>

<p>I've tried <code>%uld</code>, <code>%ld</code> and Googling hasn't seemed to find me the answer.</p>

<p>I'm learning C, but have not had to use a <code>long int</code> before, so I'm not sure what I should be using.</p>

<p>What is the specifier I am chasing?</p>
","<p>I recommend using standard order (i.e. unsigned long int). <code>%lu</code> is the format tag you're looking for.</p>

<pre><code>printf(""%lu"", 5ul);
</code></pre>
","4033039"
"Dereferencing type-punned pointer will break strict-aliasing rules","73663","","<p>I used the following piece of code to read data from files as part of a larger program.</p>

<pre><code>double data_read(FILE *stream,int code) {
        char data[8];
        switch(code) {
        case 0x08:
            return (unsigned char)fgetc(stream);
        case 0x09:
            return (signed char)fgetc(stream);
        case 0x0b:
            data[1] = fgetc(stream);
            data[0] = fgetc(stream);
            return *(short*)data;
        case 0x0c:
            for(int i=3;i&gt;=0;i--)
                data[i] = fgetc(stream);
            return *(int*)data;
        case 0x0d:
            for(int i=3;i&gt;=0;i--)
                data[i] = fgetc(stream);
            return *(float*)data;
        case 0x0e:
            for(int i=7;i&gt;=0;i--)
                data[i] = fgetc(stream);
            return *(double*)data;
        }
        die(""data read failed"");
        return 1;
    }
</code></pre>

<p>Now I am told to use <code>-O2</code> and I get following gcc warning:
<code>warning: dereferencing type-punned pointer will break strict-aliasing rules</code></p>

<p>Googleing I found two orthogonal answers:</p>

<ul>
<li><a href=""http://bytes.com/topic/c/answers/800137-dereferencing-type-punned-pointer-will-break-strict-aliasing-rules"" rel=""nofollow noreferrer"">Concluding: there's no need to worry; gcc tries to be more law obedient than 
the actual law.</a> </li>
</ul>

<p>vs</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/98650/what-is-the-strict-aliasing-rule/98702#98702"">So basically if you have an int* and a float* they are not allowed to point to the same memory location. If your code does not respect this, then the compiler's optimizer will most likely break your code.</a></li>
</ul>

<p>In the end I don't want to ignore the warnings. What would you recommend?</p>

<p><strong>[update]</strong> I substituted the toy example with the real function.</p>
","<p>It looks a lot as if you really want to use fread:</p>

<pre><code>int data;
fread(&amp;data, sizeof(data), 1, stream);
</code></pre>

<p>That said, if you do want to go the route of reading chars, then reinterpreting them as an int, the safe way to do it in C (but <strong>not</strong> in C++) is to use a union:</p>

<pre><code>union
{
    char theChars[4];
    int theInt;
} myunion;

for(int i=0; i&lt;4; i++)
    myunion.theChars[i] = fgetc(stream);
return myunion.theInt;
</code></pre>

<p>I'm not sure why the length of <code>data</code> in your original code is 3. I assume you wanted 4 bytes; at least I don't know of any systems where an int is 3 bytes.</p>

<p>Note that both your code and mine are highly non-portable.</p>

<p>Edit: If you want to read ints of various lengths from a file, portably, try something like this:</p>

<pre><code>unsigned result=0;
for(int i=0; i&lt;4; i++)
    result = (result &lt;&lt; 8) | fgetc(stream);
</code></pre>

<p>(Note: In a real program, you would additionally want to test the return value of fgetc() against EOF.)</p>

<p>This reads a 4-byte unsigned from the file in little-endian format, <em>regardless</em> of what the endianness of the system is. It should work on just about any system where an unsigned is at least 4 bytes.</p>

<p>If you want to be endian-neutral, don't use pointers or unions; use bit-shifts instead.</p>
","3246340"
"Two or more data types in declaration specifiers error","73652","","<p>I am pretty new to C.</p>

<p>I am getting this error:</p>

<blockquote>
  <p>incompatible implicit declaration of built-in function ‘malloc’</p>
</blockquote>

<p>Even when I fix the code based on the answers to include <code>&lt;stdlib.h&gt;</code>, I still get:</p>

<blockquote>
  <p>two or more data types in declaration specifiers</p>
</blockquote>

<p>When trying to do this:</p>

<pre><code>struct tnode
{
    int data;
    struct tnode * left;
    struct tnode * right;
}

struct tnode * talloc(int data){
    struct tnode * newTnode;
    newTnode = (struct tnode *) malloc (sizeof(struct tnode));
    newTnode-&gt;data = data;
    newTnode-&gt;left = NULL;
    newTnode-&gt;right = NULL;
    return newTnode;
}
</code></pre>

<p>How do I fix it?</p>
","<p>You have to put <code>;</code> behind the <code>struct</code> declaration:</p>

<pre><code>struct tnode
{
    int data;

    struct tnode * left;
    struct tnode * right;
}; // &lt;-- here
</code></pre>
","2098997"
"how to use #ifdef with an OR condition?","73583","","<p>Sorry for asking very basic question. I would like to set OR condition in #ifdef directive.?
How to do that ?
I tried</p>

<pre><code>#ifdef LINUX | ANDROID
...
..
#endif 
</code></pre>

<p>It did not work? What is the proper way?</p>
","<p>Like this</p>

<pre><code>#if defined(LINUX) || defined(ANDROID)
</code></pre>
","9682617"
"Compile error: ""g++: error trying to exec 'cc1plus': execvp: No such file or directory""","73570","","<p>When I compile C/C++ program with <code>popen</code> in <code>php</code>... I got this error:</p>

<pre><code>g++: error trying to exec 'cc1plus': execvp: No such file or directory
</code></pre>

<p>but if I run php code in shell.. it works fine..</p>

<p>in Arch Linux..</p>

<p>PHP Code:</p>

<pre class=""lang-php prettyprint-override""><code>&lt;?php
    function rfile($fp) {
    $out="""";
       while (!feof($fp)) {
           $out.= fgets($fp, 1024000);
       }
       return $out;
    }
    $p = popen('g++ -Wall -g aplusb.cc -o aplusb 2&gt;&amp;1', 'r');
    $result = rfile($p);
    pclose($p);
    echo $result;
?&gt;
</code></pre>

<p>thanks</p>
","<p>You need to install <code>gcc-c++</code> package.</p>

<pre><code>yum install gcc-c++
</code></pre>
","21154624"
"C - reading command line parameters","73441","","<p>I have made little program for computing PI as an Integral. Now I am facing question how to extend it to compute integral, which will be given as an extra parameter when starting and app. Does anyone knows how to deal with such a parameter in a program? Thanks</p>
","<p>When you write your main function, you typically seen one of two definitions:</p>

<ul>
<li><code>int main(void)</code></li>
<li><code>int main(int argc, char **argv)</code></li>
</ul>

<p>The second form will allow you to access the command line arguments passed to the program, and the number of arguments specified (arguments are separated by spaces).</p>

<p>The arguments to <code>main</code> are:</p>

<ul>
<li><code>int argc</code> - the number of arguments passed into your program when it was run. It is at least <code>1</code>.</li>
<li><code>char **argv</code> - this is a pointer-to-<code>char *</code>. It can alternatively be this: <code>char *argv[]</code>, which means 'array of <code>char *</code>'. This is an array of C-style-string pointers.</li>
</ul>

<hr>

<h3>Basic Example</h3>

<p>For example, you could do this to print out the arguments passed to your C program:</p>

<pre><code>#include &lt;stdio.h&gt;

int main(int argc, char **argv)
{
    for (int i = 0; i &lt; argc; ++i)
    {
        printf(""argv[%d]: %s\n"", i, argv[i]);
    }
}
</code></pre>

<p>I'm using GCC 4.5 to compile this, it's a file I called <code>args.c</code>. It'll compile and build a default <code>a.out</code> executable.</p>

<pre><code>[birryree@lilun c_code]$ gcc -std=c99 args.c
</code></pre>

<p>Now run it...</p>

<pre><code>[birryree@lilun c_code]$ ./a.out hello there
argv[0]: ./a.out
argv[1]: hello
argv[2]: there
</code></pre>

<p>So you can see that in <code>argv</code>, <code>argv[0]</code> is the name of the program you ran (this is not standards-defined behavior, but is common. Your arguments start at <code>argv[1]</code> and beyond.</p>

<p>So basically, if you wanted a single parameter, you could say...</p>

<p><code>./myprogram integral</code></p>

<hr>

<h3>A Simple Case for You</h3>

<p>And you could check if <code>argv[1]</code> was <code>integral</code>, maybe like <code>strcmp(""integral"", argv[1]) == 0</code>.</p>

<p>So in your code...</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main(int argc, char **argv)
{
    if (argc &lt; 2) // no arguments were passed
    {
        // do something
    }

    if (strcmp(""integral"", argv[1]) == 0)
    {
        runIntegral(...); //or something
    }
    else
    {
        // do something else.
    }
}
</code></pre>

<hr>

<h3>Better command line parsing</h3>

<p>Of course, this was all very rudimentary, and as your program gets more complex, you'll likely want more advanced command line handling. For that, you could use a library like <a href=""http://en.wikipedia.org/wiki/Getopt"" rel=""noreferrer"">GNU <code>getopt</code></a>.</p>
","5157549"
"GDB: Listing all mapped memory regions for a crashed process","73405","","<p>I've got a full-heap core dump from a dead process on an x86 Linux machine (kernel 2.6.35-22 if it matters), which I'm attempting to debug in GDB. </p>

<p>Is there a GDB command I can use that means ""show me a list of all the memory address regions allocated by this process?"" In other words, can I figure out what all the possible valid memory addresses are that I can examine in this dump?</p>

<p>The reason I ask is that I need to search across the <em>entire process heap</em> for a certain binary string, and in order to use the <code>find</code> command, I need to have a start and end address. Simply searching from 0x00 to 0xff.. doesn't work because <code>find</code> halts as soon as it encounters an address it can't access:</p>

<blockquote>
  <p>(gdb) find /w 0x10000000, 0xff000000,
  0x12345678 </p>
  
  <p>warning: Unable to access target memory at 0x105ef883, halting
  search.</p>
</blockquote>

<p>So I need to get a list of all the readable address regions in memory so I can search them one at a time.</p>

<p>(The reason I need to do <em>that</em> is I need to find all the structs in memory that point <em>at</em> a certain address.)</p>

<p>None of <code>show mem</code>, <code>show proc</code>, <code>info mem</code>, <code>info proc</code> seem to do what I need.</p>
","<p>In GDB 7.2:</p>

<pre><code>(gdb) help info proc
Show /proc process information about any running process.
Specify any process id, or use the program being debugged by default.
Specify any of the following keywords for detailed info:
  mappings -- list of mapped memory regions.
  stat     -- list a bunch of random process info.
  status   -- list a different bunch of random process info.
  all      -- list all available /proc info.
</code></pre>

<p>You want <code>info proc mappings</code>, except it doesn't work when there is no <code>/proc</code> (such as during pos-mortem debugging).</p>

<p>Try <code>maintenance info sections</code> instead.</p>
","5691536"
"how to define a constant array in c/c++?","73352","","<p>How to define constant 1 or 2 dimensional array in C/C++?
I deal with embedded platform (Xilinx EDK), so the resources are limited.</p>

<p>I'd like to write in third-party header file something like</p>

<pre><code>#define MYCONSTANT 5
</code></pre>

<p>but for array. Like</p>

<pre><code>#define MYARRAY(index) { 5, 6, 7, 8 }
</code></pre>

<p>What is the most common way to do this?</p>
","<p>In C++ source file</p>

<pre><code>extern ""C"" const int array[] = { 1, 2, 3 };
</code></pre>

<p>In header file to be included in both C and C++ source file</p>

<pre><code>#ifdef __cplusplus
extern ""C"" {
#endif
extern const int array[];
#ifdef __cplusplus
}
#endif
</code></pre>
","6892738"
"A Simple, 2d cross-platform graphics library for c or c++?","73314","","<p>As in title, i need a 2d graphics library that is cross-platform, and provides simple functions, like in Basic; essentially, i only need to paint a pixel a certain color-I do not need hardware acceleration, or any kind of 3d support. I've found a couple ones, but they're not cross-platform. </p>

<p>Anyone knows a solution for me?</p>
","<p>What about <a href=""http://www.libsdl.org/"" rel=""noreferrer"">SDL</a>?</p>

<p>Perhaps it's a bit too complex for your needs, but it's certainly cross-platform.</p>
","671417"
"Good C IDE for Mac?","73048","","<p>I've just started a job where I'm programming in C on a Mac, which is my first experience using a Mac for development. For now I'm using Xcode as my editor, then using make/gcc/svn at the command line for compiling and source control.</p>

<p>Is there a good, full featured IDE out there for Macs that will compile C code (something comparable to VS would be ideal), or should I stick with these low level tools?</p>

<p>EDIT: so I called Xcode a ""low level tool"" because I was under the impression that it was just a text editor for code, like gvim. I will definitely look into it's compiling/source control features.</p>
","<p>You can also try <a href=""http://www.eclipse.org/cdt/"" rel=""noreferrer"">Eclipse with the CDT plugin</a>.</p>
","1739539"
"How to run C program on Mac OS X using Terminal?","73007","","<p>I am new to C. Here is my ""Hello,world!"" program.</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)    
{
  printf(""Hello, world!\n"");
  return 0;
}
</code></pre>

<p>After I try to run it using Terminal it says:</p>

<pre class=""lang-none prettyprint-override""><code>MacBook-Pro-MacBook:~ macbook$ /Users/macbook/Desktop/peng/Untitled1
-bash: /Users/macbook/Desktop/peng/Untitled1: Permission denied
MacBook-Pro-MacBook:~ macbook$ 
</code></pre>

<p>Why?</p>
","<p>First save your program as <code>program.c</code>.</p>

<p>Now you need the compiler, so you need to go to <strong>App Store</strong> and install <strong>Xcode</strong> which is Apple's compiler and development tools. How to find <strong>App Store</strong>? Do a <em>""Spotlight Search""</em> by typing <kbd>&#8984;</kbd><kbd>Space</kbd> and start typing <code>App Store</code> and hit <kbd>Enter</kbd> when it guesses correctly.</p>

<p><strong>App Store</strong> looks like this:</p>

<p><a href=""https://i.stack.imgur.com/BNUYi.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/BNUYi.png"" alt=""enter image description here""></a></p>

<p><strong>Xcode</strong> looks like this on <strong>App Store</strong>:</p>

<p><a href=""https://i.stack.imgur.com/bgEBn.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/bgEBn.png"" alt=""enter image description here""></a></p>

<p>Then you need to install the command-line tools in <strong>Terminal</strong>. How to start <strong>Terminal</strong>? You need to do another <em>""Spotlight Search""</em>, which means you type <kbd>&#8984;</kbd><kbd>Space</kbd> and start typing <code>Terminal</code> and hit <kbd>Enter</kbd> when it guesses <code>Terminal</code>.</p>

<p>Now install the command-line tools like this:</p>

<pre><code>xcode-select --install
</code></pre>

<p>Then you can compile your code with by simply running <code>gcc</code> as in the next line without having to fire up the big, ugly software development GUI called <code>Xcode</code>:</p>

<pre><code>gcc -Wall -o program program.c
</code></pre>

<p><strong>Note</strong>: On newer versions of OS X, you would use <code>clang</code> instead of <code>gcc</code>, like this:</p>

<pre><code>clang program.c -o program
</code></pre>

<p>Then you can run it with:</p>

<pre><code>./program
Hello, world!
</code></pre>

<hr>

<p>If your program is C++, you'll probably want to use one of these commands:</p>

<pre><code>clang++ -o program program.cpp
g++ -std=c++11 -o program program.cpp
g++-7 -std=c++11 -o program program.cpp
</code></pre>
","32338889"
"returning multiple values from a function","72955","","<p>Can anyone tell me how to return multiple values from a function?<br>
Please elaborate with some example?</p>
","<p>Your choices here are to either return a struct with elements of your liking, or make the function to handle the arguments with pointers. </p>

<pre><code>/* method 1 */
struct Bar{
    int x;
    int y;
};

struct Bar funct();
struct Bar funct(){
    struct Bar result;
    result.x = 1;
    result.y = 2;
    return result;
}

/* method 2 */
void funct2(int *x, int *y);
void funct2(int *x, int *y){
    /* dereferencing and setting */
    *x  = 1;
    *y  = 2;
}

int main(int argc, char* argv[]) {
    struct Bar dunno = funct();
    int x,y;
    funct2(&amp;x, &amp;y);

    // dunno.x == x
    // dunno.y == y
    return 0;
}
</code></pre>
","3829206"
"How do I declare an array of undefined or no initial size?","72870","","<p>I know it could be done using <em>malloc</em>, but I do not know how to use it yet.</p>

<p>For example, I wanted the user to input several numbers using an infinite loop with a sentinel to put a stop into it (i.e. -1), but since I do not know yet how many he/she will input, I have to declare an array with no initial size, but I'm also aware that it won't work like this int arr[]; at compile time since it has to have a definite number of elements.</p>

<p>Declaring it with an exaggerated size like <em>int arr[1000];</em> would work but it feels dumb (and waste memory since it would allocate that 1000 integer bytes into the memory) and I would like to know a more <em>elegant</em> way to do this.</p>
","<p>This can be done by using a pointer, and allocating memory on the heap using <code>malloc</code>.
Note that there is no way to later ask how big that memory block is. You have to keep track of the array size yourself.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int main(int argc, char** argv)
{
  /* declare a pointer do an integer */
  int *data; 
  /* we also have to keep track of how big our array is - I use 50 as an example*/
  const int datacount = 50;
  data = malloc(sizeof(int) * datacount); /* allocate memory for 50 int's */
  if (!data) { /* If data == 0 after the call to malloc, allocation failed for some reason */
    perror(""Error allocating memory"");
    abort();
  }
  /* at this point, we know that data points to a valid block of memory.
     Remember, however, that this memory is not initialized in any way -- it contains garbage.
     Let's start by clearing it. */
  memset(data, 0, sizeof(int)*datacount);
  /* now our array contains all zeroes. */
  data[0] = 1;
  data[2] = 15;
  data[49] = 66; /* the last element in our array, since we start counting from 0 */
  /* Loop through the array, printing out the values (mostly zeroes, but even so) */
  for(int i = 0; i &lt; datacount; ++i) {
    printf(""Element %d: %d\n"", i, data[i]);
  }
}
</code></pre>

<p>That's it. What follows is a more involved explanation of why this works :)</p>

<p>I don't know how well you know C pointers, but array access in C (like <code>array[2]</code>) is actually a shorthand for accessing memory via a pointer. To access the memory pointed to by <code>data</code>, you write <code>*data</code>. This is known as dereferencing the pointer. Since <code>data</code> is of type <code>int *</code>, then <code>*data</code> is of type <code>int</code>. Now to an important piece of information: <code>(data + 2)</code> means ""add the byte size of 2 ints to the adress pointed to by <code>data</code>"".</p>

<p>An array in C is just a sequence of values in adjacent memory. <code>array[1]</code> is just next to <code>array[0]</code>. So when we allocate a big block of memory and want to use it as an array, we need an easy way of getting the direct adress to every element inside. Luckily, C lets us use the array notation on pointers as well. <code>data[0]</code> means the same thing as <code>*(data+0)</code>, namely ""access the memory pointed to by <code>data</code>"". <code>data[2]</code> means <code>*(data+2)</code>, and accesses the third <code>int</code> in the memory block.</p>
","4352928"
"Multiple conditions in a C 'for' loop","72788","","<p>I came across this piece of code. I generally use '&amp;&amp;' or '||' to separate multiple conditions in a <code>for</code> loop, but this code uses commas to do that.</p>

<p>Surprisingly, if I change the order of the conditions the output varies.</p>

<pre><code>#include&lt;stdio.h&gt;

int main() {
    int i, j=2;

    for(i=0; j&gt;=0,i&lt;=5; i++)
    {
         printf(""%d "", i+j);
         j--;
    }
    return 0;
}
</code></pre>

<p>Output = 2 2 2 2 2 2</p>

<pre><code>#include&lt;stdio.h&gt;

int main(){
    int i, j=2;

    for(i=0; i&lt;=5,j&gt;=0; i++)
    {
         printf(""%d "", i+j);
         j--;
    }
    return 0;
}
</code></pre>

<p>Output = 2 2 2</p>

<p>Can somebody explain the reason? It seems to be checking only the last comma-separated condition.</p>
","<p>The comma operator evaluates all its operands and yields the value of the last one. So basically whichever condition you write <strong>first,</strong> it will be disregarded, and the <strong>second</strong> one will be significant only.</p>

<pre><code>for (i = 0; j &gt;= 0, i &lt;= 5; i++)
</code></pre>

<p>is thus equivalent with</p>

<pre><code>for (i = 0; i &lt;= 5; i++)
</code></pre>

<p>which may or may not be what the author of the code intended, depending on his intents - I hope this is not production code, because if the programmer having written this wanted to express an AND relation between the conditions, then this is incorrect and the <code>&amp;&amp;</code> operator should have been used instead.</p>
","16859084"
"Point in Polygon Algorithm","72728","","<p>I saw the below algorithm works to check if a point is in a given polygon from this <a href=""https://stackoverflow.com/a/2922778/872344"">link</a>:</p>

<pre class=""lang-c prettyprint-override""><code>int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy)
{
  int i, j, c = 0;
  for (i = 0, j = nvert-1; i &lt; nvert; j = i++) {
    if ( ((verty[i]&gt;testy) != (verty[j]&gt;testy)) &amp;&amp;
     (testx &lt; (vertx[j]-vertx[i]) * (testy-verty[i]) / (verty[j]-verty[i]) + vertx[i]) )
       c = !c;
  }
  return c;
}
</code></pre>

<p>I tried this algorithm and it actually works just perfect. But sadly I cannot understand it well after spending some time trying to get the idea of it. </p>

<p>So if someone is able to understand this algorithm, please explain it to me a little. </p>

<p>Thank you.</p>
","<p>The algorithm is ray-casting to the right. Each iteration of the loop, the test point is checked against one of the polygon's edges. The first line of the if-test succeeds if the point's y-coord is within the edge's scope. The second line checks whether the test point is to the left of the line (I think - I haven't got any scrap paper to hand to check). If that is true the line drawn rightwards from the test point crosses that edge.</p>

<p>By repeatedly inverting the value of <code>c</code>, the algorithm counts how many times the rightward line crosses the polygon. If it crosses an odd number of times, then the point is inside; if an even number, the point is outside.</p>

<p>I would have concerns with a) the accuracy of floating-point arithmetic, and b) the effects of having a horizontal edge, or a test point with the same y-coord as a vertex, though.</p>
","11716371"
"undefined reference to sqrt (or other mathematical functions)","72725","","<p>I have this simple code:</p>

<pre><code>max = (int) sqrt (number);
</code></pre>

<p>and in the header I have:</p>

<pre><code>#include &lt;math.h&gt;
</code></pre>

<p>But application still says undefined reference to <code>sqrt</code>. Do you see any problem here? It looks like everything should be okay.</p>
","<p>You may find that you have to link with the math libraries on whatever system you're using, something like:</p>

<pre><code>gcc -o myprog myprog.c -L/path/to/libs -lm
                                       ^^^ - this bit here.
</code></pre>

<p>Including headers lets a compiler know about function declarations but it does <em>not</em> necessarily automatically link to the code required to perform that function.</p>

<p>Failing that, you'll need to show us your code, your compile command and the platform you're running on (operating system, compiler, etc).</p>

<p>The following code compiles and links fine:</p>

<pre><code>#include &lt;math.h&gt;
int main (void) {
    int max = sqrt (9);
    return 0;
}
</code></pre>

<hr>

<p>Just be aware that <em>some</em> compilation systems depend on the order in which libraries are given on the command line. By that, I mean they may process the libraries in sequence and only use them to satisfy unresolved symbols <em>at that point in the sequence.</em></p>

<p>So, for example, given the commands:</p>

<pre><code>gcc -o plugh plugh.o -lxyzzy
gcc -o plugh -lxyzzy plugh.o
</code></pre>

<p>and <code>plugh.o</code> requires something from the <code>xyzzy</code> library, the second may not work as you expect. At the point where you list the library, there are no unresolved symbols to satisfy.</p>

<p>And when the unresolved symbols from <code>plugh.o</code> <em>do</em> appear, it's too late.</p>
","5248951"
"How define an array of function pointers in C","72484","","<p>I've a little question.
I'm trying to define an array of function pointers dynamically with <code>calloc</code>. 
But I don't know how to write the syntax.
Thanks a lot.</p>
","<p>The type of a function pointer is just like the function declaration, but with ""(*)"" in place of the function name.  So a pointer to:</p>

<pre><code>int foo( int )
</code></pre>

<p>would be:</p>

<pre><code>int (*)( int )
</code></pre>

<p>In order to name an instance of this type, put the name inside (*), after the star, so:</p>

<pre><code>int (*foo_ptr)( int )
</code></pre>

<p>declares a variable called foo_ptr that points to a function of this type.</p>

<p>Arrays follow the normal C syntax of putting the brackets near the variable's identifier, so:</p>

<pre><code>int (*foo_ptr_array[2])( int )
</code></pre>

<p>declares a variable called foo_ptr_array which is an array of 2 function pointers.</p>

<p>The syntax can get pretty messy, so it's often easier to make a typedef to the function pointer and then declare an array of those instead:</p>

<pre><code>typedef int (*foo_ptr_t)( int );
foo_ptr_t foo_ptr_array[2];
</code></pre>

<p>In either sample you can do things like:</p>

<pre><code>int f1( int );
int f2( int );
foo_ptr_array[0] = f1;
foo_ptr_array[1] = f2;
foo_ptr_array[0]( 1 );
</code></pre>

<p>Finally, you can dynamically allocate an array with either of:</p>

<pre><code>int (**a1)( int ) = calloc( 2, sizeof( int (*)( int ) ) );
foo_ptr_t * a2 = calloc( 2, sizeof( foo_ptr_t ) );
</code></pre>

<p>Notice the extra * in the first line to declare a1 as a pointer to the function pointer.</p>
","5488718"
"Simple way to check if a string contains another string in C?","72472","","<p>I'm pretty new to the language. Let's say I have a string from an HTTP request, such as</p>

<pre><code>char * request = ""GET /favicon.ico HTTP/1.1"";
</code></pre>

<p>And I specifically want to know if <code>favicon</code> is in that request, perhaps with a boolean value. What is a relatively simple way to go about this? I know how to do it in Java, but I'm more lost with C.</p>

<p>Thanks!</p>
","<pre><code>if (strstr(request, ""favicon"") != NULL) {
    // contains
}
</code></pre>
","15098956"
"Increasing camera capture resolution in OpenCV","72430","","<p>In my C/C++ program, I'm using <a href=""http://opencvlibrary.sourceforge.net/"" rel=""noreferrer"">OpenCV</a> to capture images from my webcam. The camera (<a href=""http://en.wikipedia.org/wiki/Quickcam"" rel=""noreferrer"">Logitech QuickCam IM</a>) can capture at resolutions <strong>320x240</strong>, <strong>640x480</strong> and <strong>1280x960</strong>. But, for some strange reason, OpenCV gives me images of resolution <strong>320x240</strong> only. Calls to change the resolution using <strong>cvSetCaptureProperty()</strong> with other resolution values just don't work. How do I capture images with the other resolutions possible with my webcam?</p>
","<p>There doesn't seem to be a solution. The resolution can be increased to <strong>640x480</strong> using <a href=""http://tech.groups.yahoo.com/group/OpenCV/message/28735"" rel=""noreferrer"">this hack</a> shared by <em>lifebelt77</em>. Here are the details reproduced:</p>

<p>Add to <strong>highgui.h</strong>:</p>

<pre><code>#define CV_CAP_PROP_DIALOG_DISPLAY 8
#define CV_CAP_PROP_DIALOG_FORMAT 9
#define CV_CAP_PROP_DIALOG_SOURCE 10
#define CV_CAP_PROP_DIALOG_COMPRESSION 11
#define CV_CAP_PROP_FRAME_WIDTH_HEIGHT 12
</code></pre>

<p>Add the function <strong>icvSetPropertyCAM_VFW</strong> to <strong>cvcap.cpp</strong>:</p>

<pre><code>static int icvSetPropertyCAM_VFW( CvCaptureCAM_VFW* capture, int property_id, double value )
{
    int result = -1;
    CAPSTATUS capstat;
    CAPTUREPARMS capparam;
    BITMAPINFO btmp;

    switch( property_id )
    {
        case CV_CAP_PROP_DIALOG_DISPLAY:
            result = capDlgVideoDisplay(capture-&gt;capWnd);
            //SendMessage(capture-&gt;capWnd,WM_CAP_DLG_VIDEODISPLAY,0,0);
            break;

        case CV_CAP_PROP_DIALOG_FORMAT:
            result = capDlgVideoFormat(capture-&gt;capWnd);
            //SendMessage(capture-&gt;capWnd,WM_CAP_DLG_VIDEOFORMAT,0,0);
            break;

        case CV_CAP_PROP_DIALOG_SOURCE:
            result = capDlgVideoSource(capture-&gt;capWnd);
            //SendMessage(capture-&gt;capWnd,WM_CAP_DLG_VIDEOSOURCE,0,0);
            break;

        case CV_CAP_PROP_DIALOG_COMPRESSION:
            result = capDlgVideoCompression(capture-&gt;capWnd);
            break;

        case CV_CAP_PROP_FRAME_WIDTH_HEIGHT:
            capGetVideoFormat(capture-&gt;capWnd, &amp;btmp, sizeof(BITMAPINFO));
            btmp.bmiHeader.biWidth = floor(value/1000);
            btmp.bmiHeader.biHeight = value-floor(value/1000)*1000;
            btmp.bmiHeader.biSizeImage = btmp.bmiHeader.biHeight *
            btmp.bmiHeader.biWidth * btmp.bmiHeader.biPlanes *
            btmp.bmiHeader.biBitCount / 8;
            capSetVideoFormat(capture-&gt;capWnd, &amp;btmp, sizeof(BITMAPINFO));
            break;

        default:
            break;
    }

    return result;
}
</code></pre>

<p>and edit <strong>captureCAM_VFW_vtable</strong> as following:</p>

<pre><code>static CvCaptureVTable captureCAM_VFW_vtable =
{
6,
(CvCaptureCloseFunc)icvCloseCAM_VFW,
(CvCaptureGrabFrameFunc)icvGrabFrameCAM_VFW,
(CvCaptureRetrieveFrameFunc)icvRetrieveFrameCAM_VFW,
(CvCaptureGetPropertyFunc)icvGetPropertyCAM_VFW,
(CvCaptureSetPropertyFunc)icvSetPropertyCAM_VFW, // was NULL
(CvCaptureGetDescriptionFunc)0
};
</code></pre>

<p>Now rebuilt <strong>highgui.dll</strong>.</p>
","14290"
"C program to convert Fahrenheit to Celsius","72273","","<p>I'm writing a program for a class I'm in and need some help with a program for converting Fahrenheit to Celsius in C. My code looks like this</p>

<pre><code>#include &lt;stdio.h&gt;
int main (void)
{

int fahrenheit;
double celsius;

printf(""Enter the temperature in degrees fahrenheit:\n\n\n\n"");
scanf(""%d"", &amp;fahrenheit);
celsius = (5/9) * (fahrenheit-32);
printf (""The converted temperature is %lf\n"", celsius);

return 0;

}
</code></pre>

<p>Every time I execute it it the result is 0.000000.  I know I'm missing something but can't figure out what. </p>
","<p>5/9 will result in integer division, which will = 0</p>

<p>Try <code>5.0/9.0</code> instead.</p>
","4890488"
"Undefined reference to pow( ) in C, despite including math.h","72159","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/4174080/problem-using-pow-in-c"">Problem using pow() in C</a><br>
  <a href=""https://stackoverflow.com/questions/10167714/what-is-undefined-reference-to-pow"">what is &#39;undefined reference to `pow&#39;&#39;</a>  </p>
</blockquote>



<p>I'm having a bit of an issue with a simple piece of coursework for uni that's really puzzling me.</p>

<p>Essentially, I've to write a program that, amongst other things, calculates the volume of a sphere from a given radius. I thought I'd use the <code>pow()</code> function rather than simply using <code>r*r*r</code>, for extra Brownie points, but the compiler keeps giving me the following error:</p>

<blockquote>
  <p>undefined reference to 'pow'
  collect2: error: ld returned 1 exit status</p>
</blockquote>

<p>My code looks like the following:</p>

<pre><code>#include &lt;math.h&gt;

#define PI 3.14159265 //defines the value of PI

/* Declare the functions */
double volumeFromRadius(double radius);

/* Calculate the volume of a sphere from a given radius */
double volumeFromRadius(double radius) {
    return (4.0/3.0) * PI * pow(radius,3.0f);
}
</code></pre>

<p>and I'm compiling with the command <code>gcc -o sphere sphere.c</code></p>

<p>This compiles and runs fine in code::blocks on the Windows machines at uni, but on my Fedora 17 at home the command line compiler refuses to run. Any thoughts would be gratefully appreciated!</p>

<p>Blessings,
Ian</p>
","<p>You need to link with the math library:</p>

<pre><code>gcc -o sphere sphere.c -lm
</code></pre>

<p>The error you are seeing: <code>error: ld returned 1 exit status</code> is from the linker <code>ld</code> (part of gcc that combines the object files) because it is unable to find where the function <code>pow</code> is defined.</p>

<p>Including <code>math.h</code> brings in the declaration of the various functions and not their definition. The def is present in the math library <code>libm.a</code>. You need to link your program with this library so that the calls to functions like pow() are resolved.</p>
","12824148"
"What is time(NULL) in C?","72121","","<p>I learning about some basic C functions and have encountered <code>time(NULL)</code> in some manuals.</p>

<p>What exactly does this mean?</p>
","<p>You can pass in a pointer to a <code>time_t</code> object that <code>time</code> will fill up with the current time (and the return value is the same one that you pointed to). If you pass in <code>NULL</code>, it just ignores it and merely returns a new <code>time_t</code> object that represents the current time.</p>
","7550284"
"Is it better to use C void arguments ""void foo(void)"" or not ""void foo()""?","72101","","<p>What is better: <code>void foo()</code> or <code>void foo(void)</code>?
With void it looks ugly and inconsistent, but I've been told that it is good. Is this true?</p>

<p>Edit: I know some old compilers do weird things, but if I'm using just GCC, is <code>void foo()</code> Ok? Will <code>foo(bar);</code> then be accepted?</p>
","<pre><code>void foo(void);
</code></pre>

<p>That is the correct way to say ""no parameters"" in C, and it also works in C++.</p>

<p>But:</p>

<pre><code>void foo();
</code></pre>

<p>Means different things in C and C++! In C it means ""could take any number of parameters of unknown types"", and in C++ it means the same as <code>foo(void)</code>.</p>

<p>Variable argument list functions are inherently un-typesafe and should be avoided where possible.</p>
","693794"
"How to create an array of strings in C?","72039","","<p>I'm teaching myself C from a book and I am trying to create a crossword puzzle. I need to make an array of strings but keep running into problems. Also, I don't know much about array...</p>

<p>This is the piece of the code:</p>

<pre><code>char word1 [6] =""fluffy"", word2[5]=""small"",word3[5]=""bunny"";

char words_array[3]; /*This is my array*/

char *first_slot = &amp;words_array[0]; /*I've made a pointer to the first slot of words*/

words_array[0]=word1; /*(line 20)Trying to put the word 'fluffy' into the fist slot of the array*/ 
</code></pre>

<p>But I keep getting the message:</p>

<pre><code>crossword.c:20:16: warning: assignment makes integer from pointer without a cast [enabled by default]
</code></pre>

<p>Not sure what is the problem...I have tried to look up how to make an array of strings but with no luck</p>

<p>Any help will be much appreciated,</p>

<p>Sam</p>
","<blockquote>
<pre><code>words_array[0]=word1;
</code></pre>
</blockquote>

<p><code>word_array[0]</code> is a <code>char</code>, whereas <code>word1</code> is a <code>char *</code>. Your character is not able to hold an address.</p>

<p>An array of strings might look like it:</p>

<pre><code>char array[NUMBER_STRINGS][STRING_MAX_SIZE];
</code></pre>

<p>If you rather want an array of pointers to your strings:</p>

<pre><code>char *array[NUMBER_STRINGS];
</code></pre>

<p>And then:</p>

<pre><code>array[0] = word1;
array[1] = word2;
array[2] = word3;
</code></pre>

<p>Maybe you should read <a href=""http://c-faq.com/aryptr/index.html"">this</a>.</p>
","15161819"
"How to get the Enum Index value in C#","71983","","<p>In C, <code>enums</code>, internally equates to an integer. Therefore we can treat data types of <code>enum</code> as integer also.</p>

<p>How to achieve the same with C#? </p>
","<p>Simply cast it to an <code>int</code>, like below:</p>

<pre><code>int eValue = (int)enumValue;
</code></pre>

<p>Here's another example that shows you how to set up their internal integer values:</p>

<pre><code>public enum MyEnum
{
    MyValue1 = 1,
    MyValue2 = 2
}

(int)MyEnum.MyValue2 == 2; // True
</code></pre>
","6213496"
"Printing long int value in C","71980","","<p>I have two variables of <code>long int</code> type as shown below:</p>

<pre><code>long int a=-2147483648, b=-2147483648;
a=a+b;

printf(""%d"",a);
</code></pre>

<p>I am getting zero. I tried changing the type to <code>long long int</code>, but I'm still not getting the correct answer. </p>
","<p>You must use <code>%ld</code> to print a <code>long int</code>, and <code>%lld</code> to print a <code>long long int</code>.</p>

<p>Note that only <code>long long int</code> is guaranteed to be large enough to store the result of that calculation (or, indeed, the input values you're using).</p>

<p>You will also need to ensure that you use your compiler in a C99-compatible mode (for example, using the <code>-std=gnu99</code> option to gcc).  This is because the <code>long long int</code> type was not introduced until C99; and although many compilers implement <code>long long int</code> in C90 mode as an extension, the constant <code>2147483648</code> may have a type of <code>unsigned int</code> or <code>unsigned long</code> in C90.  If this is the case in your implementation, then the value of <code>-2147483648</code> will also have unsigned type and will therefore be positive, and the overall result will be not what you expect.</p>
","17779586"
"""make clean"" results in ""No rule to make target `clean'""","71893","","<p>I am running Ubuntu 10.04. Whenever I run <code>make clean</code>, I get this: </p>

<blockquote>
  <p>make: *** No rule to make target `clean'.  Stop.</p>
</blockquote>

<p>Here is my makefile:</p>

<pre><code>CC = gcc
CFLAGS = -g -pedantic -O0 -std=gnu99 -m32 -Wall
PROGRAMS = digitreversal
all : $(PROGRAMS)
digitreversal : digitreversal.o
       $(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)
.PHONY: clean
clean:
       @rm -f $(PROGRAMS) *.o core
</code></pre>

<p>Any ideas why its not working?</p>

<p>EDIT: It seems like doing:</p>

<pre><code>make -f Makefile.txt clean
</code></pre>

<p>works. Now: is there any setting to change so I don't have to do the <code>-f Makefile.txt</code> every time?</p>
","<p>It seems your makefile's name is not 'Makefile' or 'makefile'. In case it is different say 'abc' try running 'make -f abc clean' </p>
","4185265"
"'sprintf': double precision in C","71716","","<p>Consider:</p>

<pre><code>double a = 0.0000005l;
char aa[50];
sprintf(aa, ""%lf"", a);
printf(""%s"", aa);

Output: s0.000000
</code></pre>

<p>In the above code snippet, the variable <code>aa</code> can contain only six decimal precision. I would like to get an output like ""s0.0000005"". How do I achieve this?</p>
","<p>From your question it seems like you are using C99, as you have used <code>%lf</code> for double.</p>

<p>To achieve the desired output replace:</p>

<pre><code>sprintf(aa, ""%lf"", a);
</code></pre>

<p>with</p>

<pre><code>sprintf(aa, ""%0.7f"", a);
</code></pre>

<p>The general syntax <code>""%A.B""</code> means to use B digits after decimal point. The meaning of the <code>A</code> is more complicated, but can be read about <a href=""http://www.cplusplus.com/reference/cstdio/printf/"" rel=""nofollow noreferrer"">here</a>.</p>
","1786866"
"Are stack variables aligned by the GCC __attribute__((aligned(x)))?","71695","","<p>i have the following code:</p>

<pre><code>#include &lt;stdio.h&gt;

int
main(void)
{
        float a[4] __attribute__((aligned(0x1000))) = {1.0, 2.0, 3.0, 4.0};
        printf(""%p %p %p %p\n"", &amp;a[0], &amp;a[1], &amp;a[2], &amp;a[3]);
}
</code></pre>

<p>And i have the following output:</p>

<pre><code>0x7fffbfcd2da0 0x7fffbfcd2da4 0x7fffbfcd2da8 0x7fffbfcd2dac
</code></pre>

<p>Why the address of <code>a[0]</code> is not a multiple of <code>0x1000</code>?</p>

<p>What exactly <code>__attribute__((aligned(x)))</code> does? I misunderstood <a href=""http://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Variable-Attributes.html#Variable-Attributes"" rel=""noreferrer"">this</a> explanation?</p>

<p>I'm using gcc 4.1.2.</p>
","<p>I believe the problem is that your array is on the stack. Because the stack pointer could be anything when the function starts, there is no way to align the array without allocating a lot more than you need and adjusting it. If you move the array out of the function and into a global variable, it should work. The other thing you could do is keep it as a local variable (which is a very good thing), but make it <code>static</code>. This will prevent it from being stored on the stack. Beware that both of these ways are not thread-safe or recursion-safe, since there will be only one copy of the array.</p>

<p>With this code:</p>

<pre><code>#include &lt;stdio.h&gt;

float a[4] __attribute__((aligned(0x1000))) = {1.0, 2.0, 3.0, 4.0};

int
main(void)
{
        printf(""%p %p %p %p\n"", &amp;a[0], &amp;a[1], &amp;a[2], &amp;a[3]);
}
</code></pre>

<p>I get this:</p>

<pre><code>0x804c000 0x804c004 0x804c008 0x804c00c
</code></pre>

<p>which is what is expected. With your original code, I just get random values like you did.</p>
","841469"
"Definition of int64_t","71596","","<p>I am new to C/C++, so I have a couple of questions about a basic type: </p>

<p>a) Can you explain to me the difference between <code>int64_t</code> and <code>long</code> (<code>long int</code>)? 
In my understanding, both are 64 bit integers. Is there any reason to choose one over the other?</p>

<p>b) I tried to look up the definition of <code>int64_t</code> on the web, without much success. Is there an authoritative source I need to consult for such questions?</p>

<p>c) For code using <code>int64_t</code> to compile, I am currently including <code>&lt;iostream&gt;</code>, which doesn't make much sense to me. Are there other includes that provide a declaration of <code>int64_t</code>?</p>
","<blockquote>
  <p>a) Can you explain to me the difference between <code>int64_t</code> and <code>long</code> (<code>long int</code>)? In my understanding, both are 64 bit integers. Is there any reason to choose one over the other?</p>
</blockquote>

<p>The former is a signed integer type with <em>exactly</em> 64 bits. The latter is a signed integer type with <em>at least</em> 32 bits.</p>

<blockquote>
  <p>b) I tried to look up the definition of <code>int64_t</code> on the web, without much success. Is there an authoritative source I need to consult for such questions?</p>
</blockquote>

<p><a href=""http://cppreference.com"" rel=""noreferrer"">http://cppreference.com</a> covers this here: <a href=""http://en.cppreference.com/w/cpp/types/integer"" rel=""noreferrer"">http://en.cppreference.com/w/cpp/types/integer</a>. The authoritative source, however, is the <a href=""https://stackoverflow.com/questions/81656/where-do-i-find-the-current-c-or-c-standard-documents"">C++ standard</a> (this particular bit can be found in §18.4 Integer types [cstdint]).</p>

<blockquote>
  <p>c) For code using <code>int64_t</code> to compile, I am including <code>&lt;iostream&gt;</code>, which doesn't make much sense to me. Are there other includes that provide a declaration of <code>int64_t</code>?</p>
</blockquote>

<p>It is declared in <code>&lt;cstdint&gt;</code> or <code>&lt;cinttypes&gt;</code> (under namespace <code>std</code>), or in <code>&lt;stdint.h&gt;</code> or <code>&lt;inttypes.h&gt;</code> (in the global namespace).</p>
","13604190"
"Error handling in C code","71594","","<p>What do you consider ""best practice"" when it comes to error handling errors in a consistent way in a C library.</p>

<p>There are two ways I've been thinking of:</p>

<p>Always return error code. A typical function would look like this:</p>

<pre><code>MYAPI_ERROR getObjectSize(MYAPIHandle h, int* returnedSize);
</code></pre>

<p>The always provide an error pointer approach:</p>

<pre><code>int getObjectSize(MYAPIHandle h, MYAPI_ERROR* returnedError);
</code></pre>

<p>When using the first approach it's possible to write code like this where the error handling check is directly placed on the function call:</p>

<pre><code>int size;
if(getObjectSize(h, &amp;size) != MYAPI_SUCCESS) {
  // Error handling
}
</code></pre>

<p>Which looks better than the error handling code here. </p>

<pre><code>MYAPIError error;
int size;
size = getObjectSize(h, &amp;error);
if(error != MYAPI_SUCCESS) {
    // Error handling
}
</code></pre>

<p>However, I think using the return value for returning data makes the code more readable, It's obvious that something was written to the size variable in the second example.</p>

<p>Do you have any ideas on why I should prefer any of those approaches or perhaps mix them or use something else? I'm not a fan of global error states since it tends to make multi threaded use of the library way more painful.</p>

<p>EDIT:
C++ specific ideas on this would also be interesting to hear about as long as they are not involving exceptions since it's not an option for me at the moment...</p>
","<p>I like the error as return-value way. If you're designing the api and you want to make use of your library as painless as possible think about these additions:</p>

<ul>
<li><p>store all possible error-states in one typedef'ed enum and use it in your lib. Don't just return ints or even worse, mix ints or different enumerations with return-codes. </p></li>
<li><p>provide a function that converts errors into something human readable. Can be simple. Just error-enum in, const char* out.</p></li>
<li><p>I know this idea makes multithreaded use a bit difficult, but it would be nice if application programmer can set an global error-callback. That way they will be able to put a breakpoint into the callback during bug-hunt sessions.</p></li>
</ul>

<p>Hope it helps. </p>
","386001"
"how to take integers as command line arguments?","71527","","<p>I've read <a href=""http://www.gnu.org/s/libc/manual/html_node/Example-of-Getopt.html#Example-of-Getopt"" rel=""noreferrer"">a getopt() example</a> but it doesn't show how to accept integers as argument options, like <code>cvalue</code> would be in the code from the example:</p>

<pre><code> #include &lt;ctype.h&gt;
 #include &lt;stdio.h&gt;
 #include &lt;stdlib.h&gt;
 #include &lt;unistd.h&gt;

 int
 main (int argc, char **argv)
 {
   int aflag = 0;
   int bflag = 0;
   char *cvalue = NULL;
   int index;
   int c;

   opterr = 0;

   while ((c = getopt (argc, argv, ""abc:"")) != -1)
     switch (c)
       {
       case 'a':
         aflag = 1;
         break;
       case 'b':
         bflag = 1;
         break;
       case 'c':
         cvalue = optarg;
         break;
       case '?':
         if (optopt == 'c')
           fprintf (stderr, ""Option -%c requires an argument.\n"", optopt);
         else if (isprint (optopt))
           fprintf (stderr, ""Unknown option `-%c'.\n"", optopt);
         else
           fprintf (stderr,
                    ""Unknown option character `\\x%x'.\n"",
                    optopt);
         return 1;
       default:
         abort ();
       }

   printf (""aflag = %d, bflag = %d, cvalue = %s\n"",
           aflag, bflag, cvalue);

   for (index = optind; index &lt; argc; index++)
     printf (""Non-option argument %s\n"", argv[index]);
   return 0;
 }
</code></pre>

<p>If I ran the above as <code>testop -c foo</code>, <code>cvalue</code> would be <code>foo</code>, but what if I wanted <code>testop -c 42</code>? Since <code>cvalue</code> is of type <code>char *</code>, could I just cast <code>optarg</code> to be <code>(int)</code>? I've tried doing this without using <code>getopt()</code> and accessing <code>argv[whatever]</code> directly, and casting it as an integer, but I always end up with a large negative number when printing with <code>%d</code>. I'm assuming I'm not dereferencing <code>argv[]</code> correctly or something, not sure...</p>
","<p>You need to use <code>atoi()</code> to convert from string to integer.</p>
","4796691"
"How to disable GCC warnings for a few lines of code","71524","","<p>In Visual C++, it's possible to use <a href=""http://msdn.microsoft.com/en-us/library/2c8f766e%28VS.80%29.aspx"" rel=""noreferrer""><code>#pragma warning (disable: ...)</code></a>. Also I found that in GCC you can <a href=""http://gcc.gnu.org/onlinedocs/gcc-4.3.3/gcc/Diagnostic-Pragmas.html#Diagnostic-Pragmas"" rel=""noreferrer"">override per file compiler flags</a>. How can I do this for ""next line"", or with push/pop semantics around areas of code using GCC?</p>
","<p>It appears this <a href=""http://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html"" rel=""noreferrer"">can be done</a>. I'm unable to determine the version of GCC that it was added, but it was sometime before June 2010.</p>

<p>Here's an example:</p>

<pre><code>#pragma GCC diagnostic error ""-Wuninitialized""
    foo(a);         /* error is given for this one */
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored ""-Wuninitialized""
    foo(b);         /* no diagnostic for this one */
#pragma GCC diagnostic pop
    foo(c);         /* error is given for this one */
#pragma GCC diagnostic pop
    foo(d);         /* depends on command line options */
</code></pre>
","3394268"
"Compile multiple C files with make","71483","","<p>(I am running Linux Ubuntu 9.10, so the extension for an executable is executablefile.out)   I am just getting into modular programming (programming with multiple files) in C and I want to know how to compile multiple files in a single makefile. For example, what would be the makefile to compile these files: main.c, dbAdapter.c, dbAdapter.h? (By the way, If you haven't figured it out yet, the main function is in main.c) Also could someone post a link to the documentation of a makefile?</p>
","<p>See my <a href=""https://sites.google.com/site/michaelsafyan/software-engineering/how-to-write-a-makefile"" rel=""noreferrer"">Makefile Tutorial: How To Write A Makefile</a>. It provides a well-crafted Makefile that will build such a project (with multiple C and C++ source files), explains how it works, and warns against common pitfalls as well as poor makefile practices that are all too common to encounter out in the wild.</p>
","2604437"
"Removing a non empty directory programmatically in C or C++","71470","","<p>How to delete a non empty directory in C or C++? Is there any function? rmdir only deletes empty directory. Please provide a way without using any external library. </p>

<p>Also tell me how to delete a file in C or C++?</p>
","<p>You want to write a function (a recursive function is easiest, but can easily run out of stack space on deep directories) that will enumerate the children of a directory.  If you find a child that is a directory, you recurse on that.  Otherwise, you delete the files inside.  When you are done, the directory is empty and you can remove it via the syscall.</p>

<p>To enumerate directories on Unix, you can use <code>opendir</code>, <code>readdir</code>, and <code>closedir</code>.  To remove you use <code>rmdir()</code> on an empty directory (i.e. at the end of your function, after deleting the children) and <code>unlink()</code> on a file.  Note that on many systems the <code>d_type</code> member in <code>struct dirent</code> is not supported; on these platforms, you will have to use <code>stat()</code> and <code>S_ISDIR(stat.st_mode)</code> to determine if a given path is a directory.</p>

<p>On Windows, you will use <code>FindFirstFile()</code>/<code>FindNextFile()</code> to enumerate, <code>RemoveDirectory()</code> on empty directories, and <code>DeleteFile()</code> to remove files.</p>

<p>Here's an example that might work on Unix (completely untested):</p>

<pre><code>int remove_directory(const char *path)
{
   DIR *d = opendir(path);
   size_t path_len = strlen(path);
   int r = -1;

   if (d)
   {
      struct dirent *p;

      r = 0;

      while (!r &amp;&amp; (p=readdir(d)))
      {
          int r2 = -1;
          char *buf;
          size_t len;

          /* Skip the names ""."" and "".."" as we don't want to recurse on them. */
          if (!strcmp(p-&gt;d_name, ""."") || !strcmp(p-&gt;d_name, ""..""))
          {
             continue;
          }

          len = path_len + strlen(p-&gt;d_name) + 2; 
          buf = malloc(len);

          if (buf)
          {
             struct stat statbuf;

             snprintf(buf, len, ""%s/%s"", path, p-&gt;d_name);

             if (!stat(buf, &amp;statbuf))
             {
                if (S_ISDIR(statbuf.st_mode))
                {
                   r2 = remove_directory(buf);
                }
                else
                {
                   r2 = unlink(buf);
                }
             }

             free(buf);
          }

          r = r2;
      }

      closedir(d);
   }

   if (!r)
   {
      r = rmdir(path);
   }

   return r;
}
</code></pre>
","2256974"
"Compiler warning - suggest parentheses around assignment used as truth value","71016","","<p>When I try to compile the piece of code below, I get this warning:</p>

<p><code>warning: suggest parentheses around assignment used as truth value</code></p>

<p>Why does this happen? This is a rather common idiom, I believe. I even use something like it earlier on my code.</p>

<pre><code>struct PIDList* 
getRecordForPID(struct PIDList* list, pid_t pid) {
    while(list = list-&gt;next)
        if (list-&gt;pid == pid)
            return list;

    return NULL;
}
</code></pre>

<p>Thanks</p>

<p>EDIT: Thanks for your answers. All are very similar so I'll accept a random one by way of refreshing the page and clicking the one at the top <code>:P</code></p>
","<p>Be explicit - then the compiler won't warn that you perhaps made a mistake.</p>

<pre><code>while ( (list = list-&gt;next) != NULL )
</code></pre>

<p>or</p>

<pre><code>while ( (list = list-&gt;next) )
</code></pre>

<p>Some day you'll be glad the compiler told you, people <em>do</em> make that mistake ;)</p>
","5476774"
"Must declare function prototype in C?","70914","","<p>I am kind of new to C (I have prior Java, C#, and some C++ experience). In C, is it necessary to declare a function prototype or can the code compile without it? Is it good programming practice to do so? Or does it just depend on the compiler? (I am running Ubuntu 9.10 and using the GNU C Compiler, or gcc, under the Code::Blocks IDE)</p>
","<p>In ANSI C (meaning C89 or C90), you do not have to declare a function prototype; however, it is a best practice to use them. The only reason the standard allows you to not use them is for backward compatibility with very old code.</p>

<p>If you do not have a prototype, and you call a function, the compiler will infer a prototype from the parameters you pass to the function. If you declare the function later in the same compilation unit, you'll get a compile error if the function's signature is different from what the compiler guessed. </p>

<p>Worse, if the function is in another compilation unit, there's no way to get a compilation error, since without a a prototype there's no way to check. In that case, if the compiler gets it wrong, you could get undefined behavior if the function call pushes different types on the stack than the function expects.</p>

<p>Convention is to always declare a prototype in a header file that has the same name as the source file containing the function.</p>

<p>In C99 or C11, standard C requires a function declaration in scope before you call any function.  Many compilers do not enforce this restriction in practice unless you force them to do so.</p>
","2575186"
"Assigning negative numbers to an unsigned int?","70910","","<p>In the C programming language, <code>unsigned int</code> is used to store positive values only. However, when I run the following code:</p>

<pre><code>unsigned int x = -12;
printf(""%d"", x);
</code></pre>

<p>The output is still -12. I thought it should have printed out: 12, or am I misunderstanding something?</p>
","<p>The <code>-12</code> to the right of your equals sign is set up as a signed integer (probably 32 bits in size) and will have the hexadecimal value <code>0xFFFFFFF4</code>. The compiler generates code to move this signed integer into your unsigned integer <code>x</code> which is also a 32 bit entity. The compiler assumes you only have a positive value to the right of the equals sign so it simply moves all 32 bits into <code>x</code>. <code>x</code> now has the value <code>0xFFFFFFF4</code> which is <code>4294967284</code> if interpreted as a positive number. But the <code>printf</code> format of <code>%d</code> says the 32 bits are to be interpreted as a signed integer so you get <code>-12</code>. If you had used <code>%u</code> it would have printed as <code>4294967284</code>. </p>

<p>In either case you don't get what you expected since C language ""trusts"" the writer of code to only ask for ""sensible"" things. This is common in C. If you wanted to assign a value to <code>x</code> and were not sure whether the value on the right side of the equals was positive you could have written <code>unsigned int x = abs(-12);</code> and forced the compiler to generate code to take the absolute value of a signed integer before moving it to the unsigned integer.</p>
","5170037"
"What's an object file in C?","70863","","<p>I am reading about libraries in C but I have not yet found an explanation on what an object file is. What's the real difference between any other compiled file and an object file?<br>
I would be glad if someone could explain in human language.</p>
","<p>An object file is the real output from the compilation phase.  It's mostly machine code, but has info that allows a linker to see what symbols are in it as well as symbols it requires in order to work.  (For reference, ""symbols"" are basically names of global objects, functions, etc.)</p>

<p>A linker takes all these object files and combines them to form one executable (assuming that it can, ie: that there aren't any duplicate or undefined symbols).  A lot of compilers will do this for you (read: they run the linker on their own) if you don't tell them to ""just compile"" using command-line options.  (<code>-c</code> is a common ""just compile; don't link"" option.)</p>
","7718363"
"What is the purpose of using -pedantic in GCC/G++ compiler?","70850","","<p><a href=""http://web.mit.edu/10.001/Web/Tips/tips_on_gcc.html"" rel=""noreferrer"">This note</a> says:</p>

<blockquote>
  <p><code>-ansi</code>: tells the compiler to implement the ANSI language option. This turns
  off certain ""features"" of GCC which
  are incompatible with the ANSI
  standard.</p>
  
  <p><code>-pedantic</code>: used in conjunction with <code>-ansi</code>, this tells the compiler to be adhere strictly to the ANSI standard,
  rejecting any code which is not
  compliant.</p>
</blockquote>

<p>First things first:</p>

<ul>
<li>What is the purpose of the <code>-pedantic</code> and <code>-ansi</code> options of the GCC/G++ compiler (I couldn't understand the above description)?</li>
<li>Can anyone tell me the right circumstances for using these two options? </li>
<li>When should I use them?</li>
<li>Are they important?</li>
</ul>
","<p>GCC compilers always try to compile your program if this is at all possible. However, in some
cases, the C and C++ standards specify that certain extensions are forbidden. Conforming compilers
such as gcc or g++ must issue a diagnostic when these extensions are encountered. For example,
the gcc compiler’s -pedantic option causes gcc to issue warnings in such cases. Using the stricter
<code>-pedantic-errors</code> option converts such diagnostic warnings into errors that will cause compilation
to fail at such points. Only those non-ISO constructs that are required to be flagged by a conforming
compiler will generate warnings or errors.</p>
","4493621"
"C function that counts lines in file","70795","","<p>When I try to run my program, I get the wrong number of lines printed.</p>

<pre><code>LINES: 0
</code></pre>

<p>This is the output although I have five lines in my .txt file</p>

<p>Here is my program:</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

int countlines(char *filename);

void main(int argc, char *argv[])
{
  printf(""LINES: %d\n"",countlines(argv[1]));         
}


int countlines(char *filename)
{
  // count the number of lines in the file called filename                                    
  FILE *fp = fopen(filename,""r"");
  int ch=0;
  int lines=0;

  if (fp == NULL);
  return 0;

  lines++;
  while ((ch = fgetc(fp)) != EOF)
    {
      if (ch == '\n')
    lines++;
    }
  fclose(fp);
  return lines;
}
</code></pre>

<p>I am sure it is a simple mistake but I am new to programming. Any help would be greatly appreciated.</p>
","<pre><code>while(!feof(fp))
{
  ch = fgetc(fp);
  if(ch == '\n')
  {
    lines++;
  }
}
</code></pre>

<p>But please note: <a href=""https://stackoverflow.com/questions/5431941/why-is-while-feof-file-always-wrong"">Why is “while ( !feof (file) )” always wrong?</a>.</p>
","12733630"
"C state-machine design","70633","","<p>I am crafting a small project in mixed C and C++.  I am building one small-ish state-machine at the heart of one of my worker thread.</p>

<p>I was wondering if you gurus on SO would share your state-machine design techniques.</p>

<p><strong>NOTE:</strong> I am primarily after tried &amp; tested implementation techniques.</p>

<p><strong>UPDATED:</strong> Based on all the great input gathered on SO, I've settled on this architecture:</p>

<p><img src=""https://drive.google.com/file/d/0B1ja67dF2og9TnEwSXphc2o1OGM/preview"" alt=""alt text""></p>
","<p>State machines that I've designed before (C, not C++) have all come down to a <code>struct</code> array and a loop. The structure basically consists of a state and event (for look-up) and a function that returns the new state, something like:</p>

<pre><code>typedef struct {
    int st;
    int ev;
    int (*fn)(void);
} tTransition;
</code></pre>

<p>Then you define your states and events with simple defines (the <code>ANY</code> ones are special markers, see below):</p>

<pre><code>#define ST_ANY              -1
#define ST_INIT              0
#define ST_ERROR             1
#define ST_TERM              2
: :
#define EV_ANY              -1
#define EV_KEYPRESS       5000
#define EV_MOUSEMOVE      5001
</code></pre>

<p>Then you define all the functions that are called by the transitions:</p>

<pre><code>static int GotKey (void) { ... };
static int FsmError (void) { ... };
</code></pre>

<p>All these function are written to take no variables and return the new state for the state machine. In this example global variables are used for passing any information into the state functions where necessary.</p>

<p>Using globals isn't as bad as it sounds since the FSM is usually locked up inside a single compilation unit and all variables are static to that unit (which is why I used quotes around ""global"" above - they're more shared within the FSM, than truly global). As with all globals, it requires care.</p>

<p>The transitions array then defines all possible transitions and the functions that get called for those transitions (including the catch-all last one):</p>

<pre><code>tTransition trans[] = {
    { ST_INIT, EV_KEYPRESS, &amp;GotKey},
    : :
    { ST_ANY, EV_ANY, &amp;FsmError}
};
#define TRANS_COUNT (sizeof(trans)/sizeof(*trans))
</code></pre>

<p>What that means is: if you're in the <code>ST_INIT</code> state and you receive the <code>EV_KEYPRESS</code> event, make a call to <code>GotKey</code>.</p>

<p>The workings of the FSM then become a relatively simple loop:</p>

<pre><code>state = ST_INIT;
while (state != ST_TERM) {
    event = GetNextEvent();
    for (i = 0; i &lt; TRANS_COUNT; i++) {
        if ((state == trans[i].st) || (ST_ANY == trans[i].st)) {
            if ((event == trans[i].ev) || (EV_ANY == trans[i].ev)) {
                state = (trans[i].fn)();
                break;
            }
        }
    }
}
</code></pre>

<p>As alluded to above, note the use of <code>ST_ANY</code> as wild-cards, allowing an event to call a function no matter the current state. <code>EV_ANY</code> also works similarly, allowing any event at a specific state to call a function.</p>

<p>It can also guarantee that, if you reach the end of the transitions array, you get an error stating your FSM hasn't been built correctly (by using the <code>ST_ANY/EV_ANY</code> combination.</p>

<p>I've used code similar for this on a great many communications projects, such as an early implementation of communications stacks and protocols for embedded systems. The big advantage was its simplicity and relative ease in changing the transitions array.</p>

<p>I've no doubt there will be higher-level abstractions which may be more suitable nowadays but I suspect they'll all boil down to this same sort of structure. </p>

<hr>

<p>And, as <code>ldog</code> states in a comment, you can avoid the globals altogether by passing a structure pointer to all functions (and using that in the event loop). This will allow multiple state machines to run side-by-side without interference.</p>

<p>Just create a structure type which holds the machine-specific data (state at a bare minimum) and use that instead of the globals.</p>

<p>The reason I've rarely done that is simply because most of the state machines I've written have been singleton types (one-off, at-process-start, configuration file reading for example), not needing to run more than one instance. But it has value if you need to run more than one.</p>
","1647679"
"What do 1.#INF00, -1.#IND00 and -1.#IND mean?","70625","","<p>I'm messing around with some C code using floats, and I'm getting 1.#INF00, -1.#IND00 and -1.#IND when I try to print floats in the screen. What does those values mean?</p>

<p>I believe that 1.#INF00 means positive infinity, but what about -1.#IND00 and -1.#IND? I also saw sometimes this value: 1.$NaN which is Not a Number, but what causes those strange values and how can those help me with debugging?</p>

<p>I'm using <a href=""http://en.wikipedia.org/wiki/MinGW"" rel=""nofollow noreferrer"">MinGW</a> which I believe uses <a href=""https://en.wikipedia.org/wiki/IEEE_floating_point"" rel=""nofollow noreferrer"">IEEE 754</a> representation for float point numbers.</p>

<p>Can someone list all those invalid values and what they mean?</p>
","<p>From <a href=""http://www.johndcook.com/IEEE_exceptions_in_cpp.html"" rel=""noreferrer"">IEEE floating-point exceptions in C++</a> :</p>

<blockquote>
  <p>This page will answer the following questions.</p>
  
  <ul>
  <li>My program just printed out 1.#IND or 1.#INF (on Windows) or nan or inf (on Linux). What happened?</li>
  <li>How can I tell if a number is really a number and not a NaN or an infinity?</li>
  <li>How can I find out more details at runtime about kinds of NaNs and infinities?</li>
  <li>Do you have any sample code to show how this works?</li>
  <li>Where can I learn more?</li>
  </ul>
  
  <p>These questions have to do with floating point exceptions. If you get some strange non-numeric output where you're expecting a number, you've either exceeded the finite limits of floating point arithmetic or you've asked for some result that is undefined. To keep things simple, I'll stick to working with the double floating point type. Similar remarks hold for float types.</p>
  
  <p><strong>Debugging 1.#IND, 1.#INF, nan, and inf</strong></p>
  
  <p>If your operation would generate a larger positive number than could be stored in a double, the operation will return 1.#INF on Windows or inf on Linux. Similarly your code will return -1.#INF or -inf if the result would be a negative number too large to store in a double. Dividing a positive number by zero produces a positive infinity and dividing a negative number by zero produces a negative infinity. Example code at the end of this page will demonstrate some operations that produce infinities.</p>
  
  <p>Some operations don't make mathematical sense, such as taking the square root of a negative number. (Yes, this operation makes sense in the context of complex numbers, but a double represents a real number and so there is no double to represent the result.) The same is true for logarithms of negative numbers. Both sqrt(-1.0) and log(-1.0) would return a NaN, the generic term for a ""number"" that is ""not a number"". Windows displays a NaN as  -1.#IND (""IND"" for ""indeterminate"") while Linux displays nan. Other operations that would return a NaN include 0/0, 0*∞, and ∞/∞. See the sample code below for examples. </p>
  
  <p>In short, if you get 1.#INF or inf, look for overflow or division by zero. If you get 1.#IND or nan, look for illegal operations. Maybe you simply have a bug. If it's more subtle and you have something that is difficult to compute, see  Avoiding Overflow, Underflow, and Loss of Precision. That article gives tricks for computing results that have intermediate steps overflow if computed directly.</p>
</blockquote>
","347940"
"What is the closest thing windows has to fork()?","70594","","<p>I guess the question says it all.</p>

<p>I want to fork on windows. What is the most similar operation and how do I use it.</p>
","<p><a href=""http://www.cygwin.com/"" rel=""noreferrer"">Cygwin</a> has fully featured fork() on Windows. Thus if using Cygwin is acceptable for you, then the problem is solved in the case performance is not an issue.</p>

<p>Otherwise you can take a look at how Cygwin implements fork(). From a quite old Cygwin's architecture <a href=""http://www.redhat.com/support/wpapers/cygnus/cygnus_cygwin/architecture.html"" rel=""noreferrer"">doc</a>:</p>

<blockquote>
  <p>5.6. Process Creation 
  The fork call in Cygwin is particularly interesting
  because it does not map well on top of
  the Win32 API. This makes it very
  difficult to implement correctly.
  Currently, the Cygwin fork is a
  non-copy-on-write implementation
  similar to what was present in early
  flavors of UNIX.</p>
  
  <p>The first thing that happens when a
  parent process forks a child process
  is that the parent initializes a space
  in the Cygwin process table for the
  child. It then creates a suspended
  child process using the Win32
  CreateProcess call. Next, the parent
  process calls setjmp to save its own
  context and sets a pointer to this in
  a Cygwin shared memory area (shared
  among all Cygwin tasks). It then fills
  in the child's .data and .bss sections
  by copying from its own address space
  into the suspended child's address
  space. After the child's address space
  is initialized, the child is run while
  the parent waits on a mutex. The child
  discovers it has been forked and
  longjumps using the saved jump buffer.
  The child then sets the mutex the
  parent is waiting on and blocks on
  another mutex. This is the signal for
  the parent to copy its stack and heap
  into the child, after which it
  releases the mutex the child is
  waiting on and returns from the fork
  call. Finally, the child wakes from
  blocking on the last mutex, recreates
  any memory-mapped areas passed to it
  via the shared area, and returns from
  fork itself.</p>
  
  <p>While we have some ideas as to how to
  speed up our fork implementation by
  reducing the number of context
  switches between the parent and child
  process, fork will almost certainly
  always be inefficient under Win32.
  Fortunately, in most circumstances the
  spawn family of calls provided by
  Cygwin can be substituted for a
  fork/exec pair with only a little
  effort. These calls map cleanly on top
  of the Win32 API. As a result, they
  are much more efficient. Changing the
  compiler's driver program to call
  spawn instead of fork was a trivial
  change and increased compilation
  speeds by twenty to thirty percent in
  our tests.</p>
  
  <p>However, spawn and exec present their
  own set of difficulties. Because there
  is no way to do an actual exec under
  Win32, Cygwin has to invent its own
  Process IDs (PIDs). As a result, when
  a process performs multiple exec
  calls, there will be multiple Windows
  PIDs associated with a single Cygwin
  PID. In some cases, stubs of each of
  these Win32 processes may linger,
  waiting for their exec'd Cygwin
  process to exit.</p>
</blockquote>

<p>Sounds like a lot of work, doesn't it? And yes, it is slooooow.</p>

<p>EDIT: the doc is outdated, please see this excellent <a href=""https://stackoverflow.com/questions/985281/what-is-the-closest-thing-windows-has-to-fork/985525#985525"">answer</a> for an update</p>
","985374"
"Using #define in C Program","70536","","<p>I am trying to use <code>#define</code> to define a constant in my program. I realize I could use <code>const</code>, but I am trying to get a good understanding of <code>#define</code>. Could someone please explain why the following code does not work, and should be done instead?</p>

<pre><code>#include &lt;stdio.h&gt;
#define M 20;
typedef int Marray_t[M][M]; //I can't define an M x M array

int main() {
  Marray_t A;
  int i;

  for (i = 0; i &lt; M; ++i) { //Can't iterate up to M
    A[i] = i;
  }

  return 0;
}
</code></pre>
","<p>You must remove <code>;</code> after<code>20</code>, like this</p>

<pre><code>#define M 20
</code></pre>
","15464671"
"How do I share variables between different .c files?","70534","","<p>beginner question about C declaration:</p>

<p>In a .c file, how to use variables defined in another .c file?</p>
","<p>In fileA.c:</p>

<pre><code>int myGlobal = 0;
</code></pre>

<p>In fileA.h</p>

<pre><code>extern int myGlobal;
</code></pre>

<p>In fileB.c:</p>

<pre><code>#include ""fileA.h""
myGlobal = 1;
</code></pre>

<p>So this is how it works:</p>

<ul>
<li>the variable lives in fileA.c</li>
<li>fileA.h tells the world that it exists, and what its type is (<code>int</code>)</li>
<li>fileB.c includes fileA.h so that the compiler knows about myGlobal before fileB.c tries to use it.</li>
</ul>
","1045520"
"How to invoke function from external .c file in C?","70495","","<p>My files are</p>

<pre><code>// main.c  

#include ""add.c""

int main(void) {
    int result = add(5,6);
    printf(""%d\n"", result);
}  
</code></pre>

<p>and</p>

<pre><code>// add.c  

int add(int a, int b) {
    return a + b;
}
</code></pre>
","<p>use <code>#include ""ClasseAusiliaria.c""</code>  [Dont use  angle brackets (&lt; >) ]</p>

<p>and I prefer save file with <code>.h</code> extension in the same Directory/folder.</p>

<p><code>#include ""ClasseAusiliaria.h""</code></p>
","21260826"
"How to generate random float number in C","70488","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/686353/c-random-float"">C++ random float</a><br>
  <a href=""https://stackoverflow.com/questions/822323/how-to-generate-a-random-number-in-c"">How to generate a random number in C?</a>  </p>
</blockquote>



<p>I can't find solution to find the random float number from the <code>[0,a]</code>, where <code>a</code> is some float defined by the user.</p>

<p>I have tried the following, but it doesn't seem to work correctly.</p>

<pre><code>float x=(float)rand()/((float)RAND_MAX/a)
</code></pre>
","<p>Try:</p>

<pre><code>float x = (float)rand()/(float)(RAND_MAX/a);
</code></pre>

<p>To understand how this works consider the following. </p>

<pre><code>N = a random value in [0..RAND_MAX] inclusively.
</code></pre>

<p>The above equation (removing the casts for clarity) becomes:</p>

<pre><code>N/(RAND_MAX/a)
</code></pre>

<p>But division by a fraction is the equivalent to multiplying by said fraction's reciprocal, so this is equivalent to:</p>

<pre><code>N * (a/RAND_MAX)
</code></pre>

<p>which can be rewritten as:</p>

<pre><code>a * (N/RAND_MAX)
</code></pre>

<p>Considering <code>N/RAND_MAX</code> is always a floating point value between 0.0 and 1.0, this will generate a value between 0.0 and <code>a</code>.</p>

<p>Alternatively, you can use the following, which effectively does the breakdown I showed above. I actually prefer this simply because it is clearer what is actually going on (to me, anyway):</p>

<pre><code>float x = ((float)rand()/(float)(RAND_MAX)) * a;
</code></pre>

<p>Note: the floating point representation of <code>a</code> must be <em>exact</em> or this will never hit your absolute edge case of <code>a</code> (it will get close). See <a href=""http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html"" rel=""noreferrer"">this article</a> for the gritty details about why.</p>

<p><strong>Sample</strong></p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

int main(int argc, char *argv[])
{
    srand((unsigned int)time(NULL));

    float a = 5.0;
    for (int i=0;i&lt;20;i++)
        printf(""%f\n"", ((float)rand()/(float)(RAND_MAX)) * a);
    return 0;
}
</code></pre>

<p><strong>Output</strong></p>

<pre><code>1.625741
3.832026
4.853078
0.687247
0.568085
2.810053
3.561830
3.674827
2.814782
3.047727
3.154944
0.141873
4.464814
0.124696
0.766487
2.349450
2.201889
2.148071
2.624953
2.578719
</code></pre>
","13409133"
"Is it possible to modify a string of char in C?","70481","","<p>I have been struggling for a few hours with all sorts of C tutorials and books related to pointers but what I really want to know is if it's possible to change a char pointer once it's been created.</p>

<p>This is what I have tried:</p>

<pre><code>char *a = ""This is a string"";
char *b = ""new string"";

a[2] = b[1]; // Causes a segment fault

*b[2] = b[1]; // This almost seems like it would work but the compiler throws an error.
</code></pre>

<p>So is there any way to change the values inside the strings rather than the pointer addresses?</p>

<p>Thanks</p>

<p>EDIT:</p>

<p>Thanks everyone for your answers. It makes more sense now. It especially makes sense why sometimes it was working fine and other times not working. Because sometimes I'd pass a char pointer and other times a char array (the char array worked fine).</p>
","<p>When you write a ""string"" in your source code, it gets written directly into the executable because that value needs to be known at compile time (there are tools available to pull software apart and find all the plain text strings in them). When you write <code>char *a = ""This is a string""</code>, the location of ""This is a string"" is in the executable, and the location a points to, is in the executable. The data in the executable image is read-only.</p>

<p>What you need to do (as the other answers have pointed out) is create that memory in a location that is not read only--on the heap, or in the stack frame. If you declare a local array, then space is made on the stack for each element of that array, and the string literal (which is stored in the executable) is copied to that space in the stack.</p>

<pre><code>char a[] = ""This is a string"";
</code></pre>

<p>you can also copy that data manually by allocating some memory on the heap, and then using <code>strcpy()</code> to copy a string literal into that space.</p>

<pre><code>char *a = malloc(256);
strcpy(a, ""This is a string"");
</code></pre>

<p>Whenever you allocate space using <code>malloc()</code> remember to call <code>free()</code> when you are finished with it (read: memory leak).</p>

<p>Basically, you have to keep track of where your data is. Whenever you write a string in your source, that string is read only (otherwise you would be potentially changing the behavior of the executable--imagine if you wrote <code>char *a = ""hello"";</code> and then changed <code>a[0]</code> to <code>'c'</code>. Then somewhere else wrote <code>printf(""hello"");</code>. If you were allowed to change the first character of <code>""hello""</code>, and your compiler only stored it once (it should), then <code>printf(""hello"");</code> would output <code>cello</code>!)</p>
","1011545"
"How to cast or convert an unsigned int to int in C?","70425","","<p>My apologies if the question seems weird. I'm debugging my code and this seems to be the problem, but I'm not sure. </p>

<p>Thanks!</p>
","<p>It depends on what you want the behaviour to be. An <code>int</code> cannot hold many of the values that an <code>unsigned int</code> can.</p>

<p>You can cast as usual:</p>

<pre><code>int signedInt = (int) myUnsigned;
</code></pre>

<p>but this will cause problems if the <code>unsigned</code> value is past the max <code>int</code> can hold. This means  half of the possible <code>unsigned</code> values will result in erroneous behaviour unless you specifically watch out for it. </p>

<p>You should probably reexamine how you store values in the first place if you're having to convert for no good reason.</p>

<p><strong>EDIT:</strong> As mentioned by ProdigySim in the comments, the maximum value is platform dependent. But you can access it with <code>INT_MAX</code> and <code>UINT_MAX</code>.</p>

<p>For the usual 4-byte types:</p>

<pre><code>4 bytes = (4*8) bits = 32 bits
</code></pre>

<p>If all 32 bits are used, as in <code>unsigned</code>, the maximum value will be 2^32 - 1, or <code>4,294,967,295</code>.</p>

<p>A signed <code>int</code> effectively sacrifices one bit for the sign, so the maximum value will be 2^31 - 1, or <code>2,147,483,647</code>. Note that this is half of the other value.</p>
","5129528"
"Use C Struct in Objective C","70414","","<p>In an Xcode project I have a C file with functions, it compiles and works OK</p>

<p>I want to wrap my C code in struct(s), how will I be able to call them in Objective-C?</p>
","<p><strong>Declare function pointers, add them to your structure and then call them, it's just C.</strong></p>

<p>Example:</p>

<pre><code>//Typedef 2 function pointers, first takes and returns int,
// second takes and returns double
typedef int    (*FuncPtrInt)   (int);
typedef double (*FuncPtrDouble)(double);

// create structure to store function pointers
struct ABC
{
    FuncPtrInt    applyA;
    FuncPtrDouble applyB;
};

// create some functions to use with structure
int incrFuncA(int num) { return ++num; }
double decrFuncB(double num) { return --num; }
double multiplyFuncB(double num) { return num*num; }

// try it out
void testStruct()
{
    struct ABC abc;
    abc.applyA = incrFuncA;
    abc.applyB = decrFuncB;

    NSLog(@""increment: %d"",abc.applyA(3));
    NSLog(@""decrement: %f"",abc.applyB(3.5));

    abc.applyB = multiplyFuncB;

    NSLog(@""multiply: %f"",abc.applyB(3.5));
}
</code></pre>

<p>Output:</p>

<pre><code>2010-02-01 10:36:22.335 x[11847] increment: 4
2010-02-01 10:36:22.336 x[11847] decrement: 2.500000
2010-02-01 10:36:22.336 x[11847] multiply: 12.250000
</code></pre>

<hr>

<p>If you want to have a struct with functions where functions operate on the structure you have to pass the pointer to that function by default (similar to what c++ does):</p>

<p>Define:</p>

<pre><code>struct ClassABC;
typedef int (*FuncPtrClassABC)(struct ClassABC *);
typedef int (*FuncPtrClassABCInt)(struct ClassABC *, int);

int incrFunc(struct ClassABC * abc);
int decrFunc(struct ClassABC * abc);
int addFunc(struct ClassABC * abc, int num);
int subtractFunc(struct ClassABC * abc, int num);

struct ClassABC
{
    int i;
    FuncPtrClassABC    increment;
    FuncPtrClassABC    decrement;
    FuncPtrClassABCInt add;
    FuncPtrClassABCInt subtract;
};
</code></pre>

<p>As you can see these functions could be standalone, you would still pass the ClassABC in:</p>

<pre><code>int incrFunc(struct ClassABC * abc) { return ++(abc-&gt;i); }
int decrFunc(struct ClassABC * abc) { return --(abc-&gt;i); }
int addFunc(struct ClassABC * abc, int num)
{ abc-&gt;i += num; return abc-&gt;i; }
int subtractFunc(struct ClassABC * abc, int num)
{ abc-&gt;i -= num; return abc-&gt;i; }
</code></pre>

<p>Initialization helper func:</p>

<pre><code>void initClassABC(struct ClassABC * abc)
{
    abc-&gt;i = 0;
    abc-&gt;increment = incrFunc;
    abc-&gt;decrement = decrFunc;
    abc-&gt;add = addFunc;
    abc-&gt;subtract = subtractFunc;
}
</code></pre>

<p>Usage:</p>

<pre><code>struct ClassABC cabc;
initClassABC(&amp;cabc);

cabc.add(&amp;cabc,4);
NSLog(@""add: %d"", cabc.i);

cabc.decrement(&amp;cabc);
NSLog(@""decrement: %d"", cabc.i);

cabc.subtract(&amp;cabc,2);
NSLog(@""subtract: %d"", cabc.i);
</code></pre>

<p>Output:</p>

<pre><code>2010-02-01 10:56:39.569 x[12894] add: 4
2010-02-01 10:56:39.569 x[12894] decrement: 3
2010-02-01 10:56:39.569 x[12894] subtract: 1
</code></pre>

<p>Enjoy</p>
","2173949"
"What integer hash function are good that accepts an integer hash key?","70407","","<p>What integer hash function are good that accepts an integer hash key?</p>
","<p>Knuth's multiplicative method:</p>

<pre><code>hash(i)=i*2654435761 mod 2^32
</code></pre>

<p>In general, you should pick a multiplier that is in the order of your hash size (<code>2^32</code> in the example) and has no common factors with it. This way the hash function covers all your hash space uniformly.</p>

<p>Edit: The biggest disadvantage of this hash function is that it preserves divisibility, so if your integers are all divisible by 2 or by 4 (which is not uncommon), their hashes will be too. This is a problem in hash tables - you can end up with only 1/2 or 1/4 of the buckets being used.</p>
","665545"
"How to copy char *str to char c[] in C?","70264","","<p>Trying to copy a <code>char *str</code> to <code>char c[]</code> but getting segmentation fault or invalid initializer error.</p>

<p>Why  is this code is giving me a <strong>seg fault</strong>?</p>

<pre><code>char *token = ""some random string"";
char c[80];  
strcpy( c, token);
strncpy(c, token, sizeof c - 1); 
c[79] = '\0';
char *broken = strtok(c, ""#"");
</code></pre>
","<p>use <a href=""http://www.opengroup.org/onlinepubs/007908799/xsh/strncpy.html"" rel=""noreferrer""><code>strncpy()</code></a> rather than <a href=""http://www.opengroup.org/onlinepubs/007908799/xsh/strcpy.html"" rel=""noreferrer""><code>strcpy()</code></a></p>

<pre><code>/* code not tested */
#include &lt;string.h&gt;

int main(void) {
  char *src = ""gkjsdh fkdshfkjsdhfksdjghf ewi7tr weigrfdhf gsdjfsd jfgsdjf gsdjfgwe"";
  char dst[10]; /* not enough for all of src */

  strcpy(dst, src); /* BANG!!! */
  strncpy(dst, src, sizeof dst - 1); /* OK ... but `dst` needs to be NUL terminated */
      dst[9] = '\0';
  return 0;
}
</code></pre>
","1508869"
"How to call the function using function pointer?","70085","","<p>Suppose I have these three functions:</p>

<pre><code>bool A();
bool B();
bool C();
</code></pre>

<p>How do I call one of these functions conditionally using a function pointer, and how do I declare the function pointer?</p>
","<p>You can do the following:
Suppose you have your A,B &amp; C function as the following:</p>

<pre><code>bool A()
{
   .....
}

bool B()
{
   .....
}

bool C()
{

 .....
}
</code></pre>

<p>Now at some other function, say at main:</p>

<pre><code>int main()
{
  bool (*choice) ();

  // now if there is if-else statement for making ""choice"" to 
  // point at a particular function then proceed as following

  if ( x == 1 )
   choice = A;

  else if ( x == 2 )
   choice = B;


  else
   choice = C;

if(choice())
 printf(""Success\n"");

else
 printf(""Failure\n"");

.........
  .........
  }
</code></pre>

<p>Remember this is one example for function pointer. there are several other method and for which you have to learn function pointer clearly.</p>
","1952223"
"Expression must be a modifiable L-value","70077","","<p>I have here <code>char text[60];</code></p>

<p>Then I do in an <code>if</code>: </p>

<pre><code>if(number == 2)
  text = ""awesome"";
else
  text = ""you fail"";
</code></pre>

<p>and it always said <strong>expression must be a modifiable L-value.</strong></p>
","<p>You cannot change the value of <code>text</code> since it is an array, not a pointer.</p>

<p>Either declare it as char pointer (in this case it's better to declare it as <code>const char*</code>):</p>

<pre><code>const char *text;
if(number == 2) 
    text = ""awesome""; 
else 
    text = ""you fail"";
</code></pre>

<p>Or use strcpy:</p>

<pre><code>char text[60];
if(number == 2) 
    strcpy(text, ""awesome""); 
else 
    strcpy(text, ""you fail"");
</code></pre>
","6008756"
"Fastest JSON reader/writer for C++","69888","","<p>I need a C++ JSON parser &amp; writer. Speed and reliability are very critical, I don't care if the interface is nice or not, if it's Boost-based or not, even a C parser is fine (if it's considerably faster than C++ ones).</p>

<p>If somebody has experience with the speed of available JSON parsers, please advise.</p>
","<p><a href=""http://lloyd.github.com/yajl/"" rel=""noreferrer"">http://lloyd.github.com/yajl/</a> </p>

<p><a href=""http://www.digip.org/jansson/"" rel=""noreferrer"">http://www.digip.org/jansson/</a></p>

<p>Don't really know how they compare for speed, but the first one looks like the right idea for scaling to really big JSON data, since it parses only a small chunk at a time so they don't need to hold all the data in memory at once (This can be faster or slower depending on the library/use case)</p>
","3512887"
"Obfuscated C Code Contest 2006. Please explain sykes2.c","69860","","<p>How does this C program work?</p>

<pre><code>main(_){_^448&amp;&amp;main(-~_);putchar(--_%64?32|-~7[__TIME__-_/8%8][""&gt;'txiZ^(~z?""-48]&gt;&gt;"";;;====~$::199""[_*2&amp;8|_/64]/(_&amp;2?1:8)%8&amp;1:10);}
</code></pre>

<p>It compiles as it is (tested on <code>gcc 4.6.3</code>). It prints the time when compiled. On my system:</p>

<pre><code>    !!  !!!!!!              !!  !!!!!!              !!  !!!!!! 
    !!  !!  !!              !!      !!              !!  !!  !! 
    !!  !!  !!              !!      !!              !!  !!  !! 
    !!  !!!!!!    !!        !!      !!    !!        !!  !!!!!! 
    !!      !!              !!      !!              !!  !!  !! 
    !!      !!              !!      !!              !!  !!  !! 
    !!  !!!!!!              !!      !!              !!  !!!!!!
</code></pre>

<p>Source: <a href=""http://www.ioccc.org/years-spoiler.html#2006"" rel=""noreferrer"">sykes2 - A clock in one line</a>, <a href=""http://www.ioccc.org/2006/sykes2/hint.text"" rel=""noreferrer"">sykes2 author hints</a></p>

<p>Some hints: No compile warnings per default. Compiled with <code>-Wall</code>, the following warnings are emitted:</p>

<pre><code>sykes2.c:1:1: warning: return type defaults to ‘int’ [-Wreturn-type]
sykes2.c: In function ‘main’:
sykes2.c:1:14: warning: value computed is not used [-Wunused-value]
sykes2.c:1:1: warning: implicit declaration of function ‘putchar’ [-Wimplicit-function-declaration]
sykes2.c:1:1: warning: suggest parentheses around arithmetic in operand of ‘|’ [-Wparentheses]
sykes2.c:1:1: warning: suggest parentheses around arithmetic in operand of ‘|’ [-Wparentheses]
sykes2.c:1:1: warning: control reaches end of non-void function [-Wreturn-type]
</code></pre>
","<p>Let's de-obfuscate it.</p>

<p>Indenting:</p>

<pre><code>main(_) {
    _^448 &amp;&amp; main(-~_);
    putchar(--_%64
        ? 32 | -~7[__TIME__-_/8%8][""&gt;'txiZ^(~z?""-48] &gt;&gt; "";;;====~$::199""[_*2&amp;8|_/64]/(_&amp;2?1:8)%8&amp;1
        : 10);
}
</code></pre>

<p>Introducing variables to untangle this mess:</p>

<pre><code>main(int i) {
    if(i^448)
        main(-~i);
    if(--i % 64) {
        char a = -~7[__TIME__-i/8%8][""&gt;'txiZ^(~z?""-48];
        char b = a &gt;&gt; "";;;====~$::199""[i*2&amp;8|i/64]/(i&amp;2?1:8)%8;
        putchar(32 | (b &amp; 1));
    } else {
        putchar(10); // newline
    }
}
</code></pre>

<p>Note that <code>-~i == i+1</code> because of twos-complement. Therefore, we have</p>

<pre><code>main(int i) {
    if(i != 448)
        main(i+1);
    i--;
    if(i % 64 == 0) {
        putchar('\n');
    } else {
        char a = -~7[__TIME__-i/8%8][""&gt;'txiZ^(~z?""-48];
        char b = a &gt;&gt; "";;;====~$::199""[i*2&amp;8|i/64]/(i&amp;2?1:8)%8;
        putchar(32 | (b &amp; 1));
    }
}
</code></pre>

<p>Now, note that <a href=""https://stackoverflow.com/a/1995156/1204143""><code>a[b]</code> is the same as <code>b[a]</code></a>, and apply the <code>-~ == 1+</code> change again:</p>

<pre><code>main(int i) {
    if(i != 448)
        main(i+1);
    i--;
    if(i % 64 == 0) {
        putchar('\n');
    } else {
        char a = (""&gt;'txiZ^(~z?""-48)[(__TIME__-i/8%8)[7]] + 1;
        char b = a &gt;&gt; "";;;====~$::199""[(i*2&amp;8)|i/64]/(i&amp;2?1:8)%8;
        putchar(32 | (b &amp; 1));
    }
}
</code></pre>

<p>Converting the recursion to a loop and sneaking in a bit more simplification:</p>

<pre><code>// please don't pass any command-line arguments
main() {
    int i;
    for(i=447; i&gt;=0; i--) {
        if(i % 64 == 0) {
            putchar('\n');
        } else {
            char t = __TIME__[7 - i/8%8];
            char a = ""&gt;'txiZ^(~z?""[t - 48] + 1;
            int shift = "";;;====~$::199""[(i*2&amp;8) | (i/64)];
            if((i &amp; 2) == 0)
                shift /= 8;
            shift = shift % 8;
            char b = a &gt;&gt; shift;
            putchar(32 | (b &amp; 1));
        }
    }
}
</code></pre>

<p>This outputs one character per iteration. Every 64th character, it outputs a newline. Otherwise, it uses a pair of data tables to figure out what to output, and puts either character 32 (a space) or character 33 (a <code>!</code>). The first table (<code>""&gt;'txiZ^(~z?""</code>) is a set of 10 bitmaps describing the appearance of each character, and the second table (<code>"";;;====~$::199""</code>) selects the appropriate bit to display from the bitmap.</p>

<h3>The second table</h3>

<p>Let's start by examining the second table, <code>int shift = "";;;====~$::199""[(i*2&amp;8) | (i/64)];</code>. <code>i/64</code> is the line number (6 to 0) and <code>i*2&amp;8</code> is 8 iff <code>i</code> is 4, 5, 6 or 7 mod 8.</p>

<p><code>if((i &amp; 2) == 0) shift /= 8; shift = shift % 8</code> selects either the high octal digit (for <code>i%8</code> = 0,1,4,5) or the low octal digit (for <code>i%8</code> = 2,3,6,7) of the table value. The shift table ends up looking like this:</p>

<pre><code>row col val
6   6-7 0
6   4-5 0
6   2-3 5
6   0-1 7
5   6-7 1
5   4-5 7
5   2-3 5
5   0-1 7
4   6-7 1
4   4-5 7
4   2-3 5
4   0-1 7
3   6-7 1
3   4-5 6
3   2-3 5
3   0-1 7
2   6-7 2
2   4-5 7
2   2-3 3
2   0-1 7
1   6-7 2
1   4-5 7
1   2-3 3
1   0-1 7
0   6-7 4
0   4-5 4
0   2-3 3
0   0-1 7
</code></pre>

<p>or in tabular form</p>

<pre><code>00005577
11775577
11775577
11665577
22773377
22773377
44443377
</code></pre>

<p>Note that the author used the null terminator for the first two table entries (sneaky!).</p>

<p>This is designed after a seven-segment display, with <code>7</code>s as blanks. So, the entries in the first table must define the segments that get lit up.</p>

<h3>The first table</h3>

<p><a href=""http://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html"" rel=""noreferrer""><code>__TIME__</code></a> is a special macro defined by the preprocessor. It expands to a string constant containing the time at which the preprocessor was run, in the form <code>""HH:MM:SS""</code>. Observe that it contains exactly 8 characters. Note that 0-9 have ASCII values 48 through 57 and <code>:</code> has ASCII value 58. The output is 64 characters per line, so that leaves 8 characters per character of <code>__TIME__</code>.</p>

<p><code>7 - i/8%8</code> is thus the index of <code>__TIME__</code> that is presently being output (the <code>7-</code> is needed because we are iterating <code>i</code> downwards). So, <code>t</code> is the character of <code>__TIME__</code> being output.</p>

<p><code>a</code> ends up equalling the following in binary, depending on the input <code>t</code>:</p>

<pre><code>0 00111111
1 00101000
2 01110101
3 01111001
4 01101010
5 01011011
6 01011111
7 00101001
8 01111111
9 01111011
: 01000000
</code></pre>

<p>Each number is a <em>bitmap</em> describing the segments that are lit up in our seven-segment display. Since the characters are all 7-bit ASCII, the high bit is always cleared. Thus, <code>7</code> in the segment table always prints as a blank. The second table looks like this with the <code>7</code>s as blanks:</p>

<pre><code>000055  
11  55  
11  55  
116655  
22  33  
22  33  
444433  
</code></pre>

<p>So, for example, <code>4</code> is <code>01101010</code> (bits 1, 3, 5, and 6 set), which prints as</p>

<pre><code>----!!--
!!--!!--
!!--!!--
!!!!!!--
----!!--
----!!--
----!!--
</code></pre>

<hr>

<p>To show we really understand the code, let's adjust the output a bit with this table:</p>

<pre><code>  00  
11  55
11  55
  66  
22  33
22  33
  44
</code></pre>

<p>This is encoded as <code>""?;;?==? '::799\x07""</code>. For artistic purposes, we'll add 64 to a few of the characters (since only the low 6 bits are used, this won't affect the output); this gives <code>""?{{?}}?gg::799G""</code> (note that the 8th character is unused, so we can actually make it whatever we want). Putting our new table in the original code:</p>

<pre><code>main(_){_^448&amp;&amp;main(-~_);putchar(--_%64?32|-~7[__TIME__-_/8%8][""&gt;'txiZ^(~z?""-48]&gt;&gt;""?{{?}}?gg::799G""[_*2&amp;8|_/64]/(_&amp;2?1:8)%8&amp;1:10);}
</code></pre>

<p>we get</p>

<pre><code>          !!              !!                              !!   
    !!  !!              !!  !!  !!  !!              !!  !!  !! 
    !!  !!              !!  !!  !!  !!              !!  !!  !! 
          !!      !!              !!      !!                   
    !!  !!  !!          !!  !!      !!              !!  !!  !! 
    !!  !!  !!          !!  !!      !!              !!  !!  !! 
          !!              !!                              !!   
</code></pre>

<p>just as we expected. It's not as solid-looking as the original, which explains why the author chose to use the table he did.</p>
","15395030"
"Should I return EXIT_SUCCESS or 0 from main()?","69856","","<p>It's a simple question, but I keep seeing conflicting answers: should the main routine of a C++ program return <code>0</code> or <code>EXIT_SUCCESS</code>?</p>

<pre><code>#include &lt;cstdlib&gt;
int main(){return EXIT_SUCCESS;}
</code></pre>

<p>or</p>

<pre><code>int main(){return 0;}
</code></pre>

<p>Are they the exact same thing? Should <code>EXIT_SUCCESS</code> only be used with <code>exit()</code>?  </p>

<p>I thought <code>EXIT_SUCCESS</code> would be a better option because other software may want to deem zero as failure, but I also heard that if you return <code>0</code>, the compiler is capable of changing it to a different value anyway.</p>
","<p><code>EXIT_FAILURE</code>, either in a return statement in <code>main</code> or as an argument to <code>exit()</code>, is the only portable way to indicate failure in a C or C++ program.  <code>exit(1)</code> can actually signal successful termination on VMS, for example.</p>

<p>If you're going to be using <code>EXIT_FAILURE</code> when your program fails, then you might as well use <code>EXIT_SUCCESS</code> when it succeeds, just for the sake of symmetry.</p>

<p>On the other hand, if the program never signals failure, you can use either <code>0</code> or <code>EXIT_SUCCESS</code>.  Both are guaranteed by the standard to signal successful completion.  (It's barely possible that <code>EXIT_SUCCESS</code> could have a value other than 0, but it's equal to 0 on every implementation I've ever heard of.)</p>

<p>Using <code>0</code> has the minor advantage that you don't need <code>#include &lt;stdlib.h&gt;</code> in C, or <code>#include &lt;cstdlib&gt;</code> in C++ (if you're using a <code>return</code> statement rather than calling <code>exit()</code>) -- but for a program of any significant size you're going to be including stdlib directly or indirectly anyway.</p>

<p>For that matter, in C starting with the 1999 standard, and in all versions of C++, reaching the end of <code>main()</code> does an implicit <code>return 0;</code> anyway, so you might not need to use either <code>0</code> or <code>EXIT_SUCCESS</code> explicitly.  (But at least in C, I consider an explicit <code>return 0;</code> to be better style.)</p>

<p>(Somebody asked about OpenVMS. I haven't used it in a long time, but as I recall odd status values generally denote success while even values denote failure.  The C implementation maps <code>0</code> to <code>1</code>, so that <code>return 0;</code> indicates successful termination. Other values are passed unchanged, so <code>return 1;</code> also indicates successful termination. <code>EXIT_FAILURE</code> would have a non-zero even value.)</p>
","8868139"
"How to read from input until newline is found using scanf()?","69841","","<p>I was asked to do a work in C when I'm supposed to read from input until there's a space and then until the user presses enter.
If I do this:</p>

<pre><code>scanf(""%2000s %2000s"", a, b);
</code></pre>

<p>It will follow the 1st rule but not the 2nd.<br>
If I write:</p>

<pre>I am smart</pre>

<p>What I get is equivalent to:<br>
a = ""I"";<br>
b = ""am"";<br>
But It should be:<br>
a = ""I"";<br>
b = ""am smart"";<br></p>

<p>I already tried:</p>

<pre><code>scanf(""%2000s %2000[^\n]\n"", a, b);
</code></pre>

<p>and</p>

<pre><code>scanf(""%2000s %2000[^\0]\0"", a, b);
</code></pre>

<p>In the 1st one, it waits for the user to press <kbd>Ctrl</kbd>+<kbd>D</kbd> (to send EOF) and that's not what I want.
In the 2nd one, it won't compile. According to the compiler:</p>

<blockquote>
  <p>warning: no closing ‘]’ for ‘%[’ format</p>
</blockquote>

<p>Any good way to solve this?</p>
","<p><code>scanf</code> (and cousins) have one slightly strange characteristic: any white space in the format string (outside of a scanset) matches an arbitrary amount of white space in the input. As it happens, at least in the default ""C"" locale, a new-line is classified as white space. </p>

<p>This means the trailing <code>'\n'</code> is trying to match not only <em>a</em> new-line, but any succeeding white-space as well. It won't be considered matched until you signal the end of the input, or else enter some non-white space character.</p>

<p>To deal with this, you typically want to do something like this:</p>

<pre><code>scanf(""%2000s %2000[^\n]%c"", a, b, c);

if (c=='\n')
    // we read the whole line
else
    // the rest of the line was more than 2000 characters long. `c` contains a 
    // character from the input, and there's potentially more after that as well.
</code></pre>
","8097776"
"Why do I get ""a label can only be part of a statement and a declaration is not a statement"" if I have a variable that is initialized after a label?","69708","","<p>I have the following simplified code:</p>

<pre><code>#include &lt;stdio.h&gt;
int main () 
{
    printf(""Hello "");
    goto Cleanup;
Cleanup:
    char *str = ""World\n"";
    printf(""%s\n"", str);
}
</code></pre>

<p>I get an error because a new variable is declared after the label. If I put the content (mainly initialization) after the label in a {} block, compilation succeeds.</p>

<p>I think I understand the reason for the block in case of a switch, but why should it be applicable in case of a label ?</p>

<p>This error is from a gcc compiler</p>
","<p>The language standard simply doesn't allow for it. Labels can only be followed by statements, and declarations do not count as statements in C. The easiest way to get around this is by inserting an empty statement after your label, which relieves you from keeping track of the scope the way you would need to inside a block.</p>

<pre><code>#include &lt;stdio.h&gt;
int main () 
{
    printf(""Hello "");
    goto Cleanup;
Cleanup: ; //This is an empty statement.
    char *str = ""World\n"";
    printf(""%s\n"", str);
}
</code></pre>
","18496437"
"How to create a typedef for function pointers","69597","","<p>I think it would be easier to use function pointers if I created a typedef for a function pointer, but I seem to be getting myself tripped up on some syntax or usage or something about typedef for function pointers, and I could use some help.</p>

<p>I've got</p>

<pre><code>int foo(int i){ return i + 1;}
typedef &lt;???&gt; g;
int hvar;
hvar = g(3)
</code></pre>

<p>That's basically what I'm trying to accomplish I'm a rather new C programmer and this is throwing me too much. What replaces <code>&lt;???&gt;</code> ?</p>
","<p>Your question isn't clear, but I think you might want something like this:</p>

<pre><code>int foo(int i){ return i + 1;}

typedef int (*g)(int);  // Declare typedef

g func = &amp;foo;          // Define function-pointer variable, and initialise

int hvar = func(3);     // Call function through pointer
</code></pre>
","11038490"
"Writing a Basic Shell","69519","","<p>For my class I have to create a basic shell similar to bash that will allow the user to call commands like ls, sleep, etc.
I am looking for resources on how to do this: tutorials, help text, sample code or even just some general information on how to get started.
Does anyone have an links or info to help me out?</p>
","<p>The glibc manual contains some useful info on implementing job control in the shell: <a href=""http://www.gnu.org/software/libc/manual/html_node/Implementing-a-Shell.html#Implementing-a-Shell"" rel=""noreferrer"">http://www.gnu.org/software/libc/manual/html_node/Implementing-a-Shell.html#Implementing-a-Shell</a></p>
","4788432"
"conflicting types error when compiling c program using gcc","69460","","<p>I tried to compile following program with gcc. </p>

<pre><code>0 #include  &lt;stdio.h&gt;
1 
2 main ()
3
4 {    
5  char my_string[] = ""hello there"";      
6
7  my_print (my_string);    
8  my_print2 (my_string);    
9}
10   
11 void my_print (char *string)
12 {    
13  printf (""The string is %s\n"", string);    
14 }
15        
16 void my_print2 (char *string)
17 {
18  char *string2;    
19  int size, i;   
20
21  size = strlen (string);    
22  string2 = (char *) malloc (size + 1);
23
24  for (i = 0; i &lt; size; i++)    
25    string2[size - i] = string[i];
26
27   string2[size+1] = '\0';    
28   printf (""The string printed backward is %s\n"", string2);    
29 }
</code></pre>

<p>However, it fails and the compiler produces following error log:</p>

<ol>
<li>greeting.c: 11: error:conflicting types for 'my_print'</li>
<li>greeting.c: 7: error: previous implicit declaration of 'my_print' was here</li>
<li>greeting.c: 16: error:conflicting types for 'my_print2'</li>
<li>greeting.c:8: erroro:previous implicit declaration of 'my_print2' was there</li>
</ol>

<p>And if I move the my_print and my_print2 functions before the main function, everything goes well.
So can anyone explain why the problem happens?
Thanks!</p>
","<p>If you don't declare a function and it only appears after being called, it is automatically assumed to be <code>int</code>, so in your case, you didn't declare</p>

<pre><code>void my_print (char *);
void my_print2 (char *);
</code></pre>

<p>before you call it in main, so the compiler assume there are functions which their prototypes are <code>int my_print2 (char *);</code> and <code>int my_print2 (char *);</code> and you can't have two functions with the same prototype except of the return type, so you get the error of <code>conflicting types</code>.</p>

<p>As Brian suggested, declare those two methods before main.</p>
","5691681"
"warning: control reaches end of non-void function [-Wreturn-type]","69371","","<p>I am having a slight is regarding functions. I believe it is likely because I am not using them. My code is as follows:</p>

<pre><code>/*date difference calculator*/

#include &lt;stdio.h&gt;

int main()
{
  int Date1 = 0, Date2 = 0, Dif, F, L, D1, D2, M1, M2, Y1, Y2;
  int x[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  int y[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  char A1, A2, B1, B2;

/*input first date*/

 fprintf (stderr , ""Enter first date,in the form &lt;day&gt;/&lt;month&gt;/&lt;year&gt;  or &lt;day&gt;-&lt;month&gt;-&lt;year&gt;.\nWhere &lt;day&gt;,&lt;month&gt; and &lt;year&gt; are integers:\n"");
 (scanf(""%i%c%i%c%i"", &amp;D1, &amp;A1, &amp;M1, &amp;B1, &amp;Y1));

/*check first date*/

 if (!(Y1 % 4)) x[2]=29;
 while ((Y1 &lt; 1 || (Y1 &gt; 9999)) || (M1 &lt; 1 || M1 &gt; 12) || (D1 &lt; 1 || D1 &gt; x[M1]) || (A1 != B1) || ((A1 != '/') &amp;&amp; (A1 != '-'))) 
     {
       fprintf (stderr, ""Incorrect format, re-enter date:\n"");
       scanf(""%i%c%i%c%i"", &amp;D1, &amp;A1, &amp;M1, &amp;B1, &amp;Y1);
       if (!(Y1 % 4)) x[2]=29;
     }

/*print first date*/

 fprintf (stderr, ""First date = %i%c%i%c%i\n"", D1 , A1 , M1 , B1 , Y1);

/*input second date*/

 fprintf (stderr , ""Enter second date,in the form &lt;day&gt;/&lt;month&gt;/&lt;year&gt; or &lt;day&gt;-&lt;month&gt;-&lt;year&gt;.\nWhere &lt;day&gt;,&lt;month&gt; and &lt;year&gt; are integers:\n"");
 (scanf(""%i%c%i%c%i"", &amp;D2, &amp;A2, &amp;M2, &amp;B2, &amp;Y2));

/*check second date*/

 if (!(Y2 % 4)) y[2]=29;
 while ((Y2 &lt; 1 || (Y2 &gt; 9999)) || (M2 &lt; 1 || M2 &gt; 12) || (D2 &lt; 1 || D2 &gt; y[M2]) || (A2 != B2) || ((A2 != '/') &amp;&amp; (A2 != '-'))) 
     {
       fprintf (stderr, ""Incorrect format, re-enter date:\n"");
       scanf(""%i%c%i%c%i"", &amp;D2, &amp;A2, &amp;M2, &amp;B2, &amp;Y2);
       if (!(Y2 % 4)) y[2]=29;
     }

/*print second date*/

 fprintf (stderr, ""Second date = %i%c%i%c%i\n"", D2 , A2 , M2 , B2 , Y2);

/*convert first date into days*/

 for (F = 1; Y1 &gt; F ; F++) 
    {
     if (F % 4 == 0) (Date1 = Date1 + 366);
     else (Date1 = Date1 + 365);
    }
 for (L = 1; M1 &gt; L ; L++) 
     Date1 = Date1 + x[L];
 Date1 = Date1 + D1;

/*convert second date into days*/

 for (F = 1; Y2 &gt; F ; F++) 
    {
     if (F % 4 == 0) (Date2 = Date2 + 366);
     else (Date2 = Date2 + 365);
    }
 for (L = 1; M2 &gt; L ; L++) 
     Date2 = Date2 + y[L];
 Date2 = Date2 + D2;

/*standard output*/

 Dif = Date2 - Date1;
 printf(""\n%i\n\n"" , Dif);

/*text output*/

 if (Date2 &gt; Date1)  
    {Dif = Date2 - Date1;
    fprintf (stderr , ""Indicating that the first date is %i days before second date.\n"" , Dif);}
 if (Date1 &gt; Date2)  
    {Dif = Date1 - Date2;
    fprintf (stderr , ""Indicating that the second date is %i days before first date.\n"" , Dif);} 
 if (Date1 == Date2)  
    fprintf (stderr , ""Indicating that the first date is equal to second date.\n""); 
}
</code></pre>

<p>When compiling using this: <code>gcc -Wall -ansi date1.c -o date1</code>
This occurs:</p>

<pre><code>date1.c: In function ‘main’:
date1.c:70:1: warning: control reaches end of non-void function [-Wreturn-type]
</code></pre>

<p>Is there a simple fix for this or do I have to write my program to use functions propely? I am unable to change how I compile the code as it has to follow a set spec.</p>

<p>Apologies for the poor formatting of my question but this is my first time here and I was hoping to be able to do it alone.</p>

<p>Hope someone can help!</p>
","<p>You just need to <code>return</code> from the main function at some point. The error message says that the function is defined to return a value but you are not returning anything.</p>

<pre><code>  /* .... */
  if (Date1 == Date2)  
     fprintf (stderr , ""Indicating that the first date is equal to second date.\n""); 

  return 0;
}
</code></pre>
","22742601"
"How to convert a string to character array in c (or) how to extract a single char form string?","69323","","<p>I need to convert a string to char array in c? How can i do this </p>

<p>or atleast tell me how to extract a single char from string as incremental in next ???</p>

<p>Thanks in advance</p>
","<p>In C, a string is actually stored as an array of characters, so the 'string pointer' is pointing to the first character. For instance,</p>

<pre><code>char myString[] = ""This is some text"";
</code></pre>

<p>You can access any character as a simple char by using myString as an array, thus:</p>

<pre><code>char myChar = myString[6];
printf(""%c\n"", myChar); // Prints s
</code></pre>

<p>Hope this helps!
David</p>
","867996"
"Is multiplication and division using shift operators in C actually faster?","69166","","<p>Multiplication and division can be achieved using bit operators, for example</p>

<pre><code>i*2 = i&lt;&lt;1
i*3 = (i&lt;&lt;1) + i;
i*10 = (i&lt;&lt;3) + (i&lt;&lt;1)
</code></pre>

<p>and so on.</p>

<p>Is it actually faster to use say <code>(i&lt;&lt;3)+(i&lt;&lt;1)</code> to multiply with 10 than using <code>i*10</code> directly? Is there any sort of input that can't be multiplied or divided in this way?</p>
","<p>Short answer:  Not likely.</p>

<p>Long answer:
Your compiler has an optimizer in it that knows how to multiply as quickly as your target processor architecture is capable.  Your best bet is to tell the compiler your intent clearly (i.e. i*2 rather than i &lt;&lt; 1) and let it decide what the fastest assembly/machine code sequence is.  It's even possible that the processor itself has implemented the multiply instruction as a sequence of shifts &amp; adds in microcode.</p>

<p>Bottom line--don't spend a lot of time worrying about this.  If you mean to shift, shift.  If you mean to multiply, multiply.  Do what is semantically clearest--your coworkers will thank you later.  Or, more likely, curse you later if you do otherwise.</p>
","6357114"
"Line by line c - c++ code debugging in Linux ubuntu","69113","","<p>I am coding using gedit in ubuntu and running program in terminal. While working in windows using Turboc or netbeans we can debug code line by line. How can we do it in ubuntu terminal? or any other option?</p>
","<p><strong>gdb</strong> (The Gnu debugger) is best choice   </p>

<p><strong>apt-get install gdb</strong>  </p>

<p><strong>man gdb</strong></p>

<pre><code>1.    cc -g file.c             //       compile your program ,this will generate a.out file with required debugging information 

2.    gdb a.out                //        start with gdb

3.    b main                   //        to set break point at main       

4.     run                     //        run now , and it will stop at break point main 

5.     s                       //        option s is to step single line and even step into functions

6.     n                       //        option n is to execute next line and step over functions  

7.     p    variable name      //        to print the value of variable at that particular instance very helpful  
</code></pre>

<p><strong>man gdb</strong> will give more info  </p>

<p>All useful gdb commands and an example with simple cpp program  are given <a href=""http://www.yolinux.com/TUTORIALS/GDB-Commands.html"" rel=""noreferrer"">Here</a></p>

<p><a href=""http://www.gnu.org/software/gdb/documentation/"" rel=""noreferrer"">GDB Documentation</a> </p>
","18271421"
"What's the difference between a header file and a library?","69090","","<p>One of the things I'm having a hard time understanding is how the compiler works. I'm having a lot of difficulties with it, but in particular I keep getting headers and libraries mixed up. If somebody could clear things up a bit, that'd be great.</p>
","<p>Think of both like this (Disclaimer: this is a really high-level analogy ;) ..</p>

<ul>
<li>The <strong>header</strong> is a phone number you can call, while...</li>
<li>...the <strong>library</strong> is the actual person you can reach there!</li>
</ul>

<p>It's the fundamental difference between ""interface"" and ""implementation""; the <em>interface</em> (header) tells you <strong>how</strong> to call some functionality (without knowing how it works), while the <em>implementation</em> (library) is the actual functionality.</p>

<p>Note: The concept is so fundamental, because it allows you flexibility: you can have the same header for different libraries (i.e. the functionality is exactly called in the same way), and each library may <em>implement</em> the functionality in a different way. By keeping the same interface, you can replace the libraries without changing <em>your</em> code.</p>

<p>And: you can change the implementation of the library without breaking the calling code!</p>
","924495"
"Difference between r+ and w+ in fopen()","69000","","<p>In <code>fopen(""myfile"", ""r+"")</code> what is the difference between the <code>""r+""</code> and <code>""w+""</code> open mode? I read this:</p>

<blockquote>
  <p><code>""r""</code>   Open a text file for reading. <br/><code>""w""</code> Open a text file for writing,
  truncating an an existing file to zero length, or creating the file if it does not exist.</p>
  
  <p><code>""r+""</code> Open a text file for update (that is, for both reading and
  writing). <br/><code>""w+""</code> Open a text file for update (reading and writing),
  first truncating
      the file to zero length if it exists or creating the file if it does not    exist.</p>
</blockquote>

<p>I mean the difference is that if I open the file with <code>""w+""</code>, the file will be erased first?</p>
","<p>Try these codes and you will understand:  </p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
   FILE *fp;

   fp = fopen(""test.txt"", ""w+"");
   fprintf(fp, ""This is testing for fprintf...\n"");
   fputs(""This is testing for fputs...\n"", fp);
   fclose(fp);
}  
</code></pre>

<p>and then this  </p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
   FILE *fp;

   fp = fopen(""test.txt"", ""w+"");
   fclose(fp);
}   
</code></pre>

<p>Then open the file <code>test.txt</code> and see the what happens. You will see that all data written by the first program has been erased.<br>
Repeat this for <code>r+</code> and see the result. Hope you will understand.</p>
","21114091"
"How can I tell gcc not to inline a function?","68974","","<p>Say I have this small function in a source file</p>

<pre><code>static void foo() {}
</code></pre>

<p>and I build an optimized version of my binary yet I don't want this function inlined (for optimization purposes). is there a macro I can add in a source code to prevent the inlining?</p>
","<p>You want the <code>gcc</code>-specific <a href=""http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html"" rel=""noreferrer""><code>noinline</code></a> attribute.</p>

<blockquote>
  <p>This function attribute prevents a
  function from being considered for
  inlining. If the function does not
  have side-effects, there are
  optimizations other than inlining that
  causes function calls to be optimized
  away, although the function call is
  live. To keep such calls from being
  optimized away, put
            <code>asm ("""");</code></p>
</blockquote>

<p>Use it like this:</p>

<pre><code>void __attribute__ ((noinline)) foo() 
{
  ...
}
</code></pre>
","1474050"
"GDB: break if variable equal value","68828","","<p>I like to make GDB set a break point when a variable equal some value I set, I tried this example:</p>

<pre><code>#include &lt;stdio.h&gt;
main()
{ 
     int i = 0;
     for(i=0;i&lt;7;++i)
        printf(""%d\n"", i);

     return 0;
}
</code></pre>

<p>Output from GDB:</p>

<pre><code>(gdb) break if ((int)i == 5)
No default breakpoint address now.
(gdb) run
Starting program: /home/SIFE/run 
0
1
2
3
4
5
6

Program exited normally.
(gdb)
</code></pre>

<p>Like you see, GDB didn't make any break point, is this possible with GDB?</p>
","<p>in addition to a watchpoint nested inside a breakpoint
you can also set a single breakpoint on the 'filename:line_number' and use a condition.
I find it sometimes easier.</p>

<pre><code>(gdb) break iter.c:6 if i == 5
Breakpoint 2 at 0x4004dc: file iter.c, line 6.
(gdb) c
Continuing.
0
1
2
3
4

Breakpoint 2, main () at iter.c:6
6           printf(""%d\n"", i);
</code></pre>

<p>If like me you get tired of line numbers changing, you can add a label
then set the breakpoint on the label like so:</p>

<pre><code>#include &lt;stdio.h&gt;
main()
{ 
     int i = 0;
     for(i=0;i&lt;7;++i) {
       looping:
        printf(""%d\n"", i);
     }
     return 0;
}

(gdb) break main:looping if i == 5
</code></pre>
","14390740"
"Is it possible to convert char[] to char* in C?","68824","","<p>I'm doing an assignment where we have to read a series of strings from a file into an array. I have to call a cipher algorithm on the array (cipher transposes 2D arrays). So, at first I put all the information from the file into a 2D array, but I had a lot of trouble with conflicting types in the rest of my code (specifically trying to set char[] to char*). So, I decided to switch to an array of pointers, which made everything a lot easier in most of my code.</p>

<p>But now I need to convert char* to char[] and back again, but I can't figure it out. I haven't been able to find anything on google. I'm starting to wonder if it's even possible.</p>
","<p>It sounds like you're confused between pointers and arrays. Pointers and arrays (in this case <code>char *</code> and <code>char []</code>) are <a href=""http://c-faq.com/aryptr/aryptr2.html"" rel=""noreferrer"">not the same thing. </a></p>

<ul>
<li>An array <code>char a[SIZE]</code> says that the value at the location of <code>a</code> is an array of length <code>SIZE</code></li>
<li>A pointer <code>char *a;</code> says that the value at the location of <code>a</code> is a pointer to a <code>char</code>. This can be combined with pointer arithmetic to behave like an array (eg, <code>a[10]</code> is 10 entries past wherever <code>a</code> points)</li>
</ul>

<p>In memory, it looks like this (example taken from <a href=""http://c-faq.com/aryptr/aryptr2.html"" rel=""noreferrer"">the FAQ</a>):</p>

<pre><code> char a[] = ""hello"";  // array

   +---+---+---+---+---+---+
a: | h | e | l | l | o |\0 |
   +---+---+---+---+---+---+

 char *p = ""world""; // pointer

   +-----+     +---+---+---+---+---+---+
p: |  *======&gt; | w | o | r | l | d |\0 |
   +-----+     +---+---+---+---+---+---+
</code></pre>

<p>It's easy to be confused about the difference between pointers and arrays, because in many cases, an array reference ""decays"" to a pointer to it's first element. This means that in many cases (such as when passed to a function call) arrays become pointers. If you'd like to know more, <a href=""http://c-faq.com/aryptr/index.html"" rel=""noreferrer"">this section of the C FAQ describes the differences in detail</a>.</p>

<p>One major practical difference is that the compiler knows how long an array is. Using the examples above:</p>

<pre><code>char a[] = ""hello"";  
char *p =  ""world"";  

sizeof(a); // 6 - one byte for each character in the string,
           // one for the '\0' terminator
sizeof(p); // whatever the size of the pointer is
           // probably 4 or 8 on most machines (depending on whether it's a 
           // 32 or 64 bit machine)
</code></pre>

<p>Without seeing your code, it's hard to recommend the best course of action, but I suspect changing to use pointers everywhere will solve the problems you're currently having. Take note that now:</p>

<ul>
<li><p>You will need to initialise memory wherever the arrays used to be. Eg, <code>char a[10];</code> will become <code>char *a = malloc(10 * sizeof(char));</code>, followed by a check that <code>a != NULL</code>. Note that you don't actually need to say <code>sizeof(char)</code> in this case, because <code>sizeof(char)</code> is defined to be 1. I left it in for completeness.</p></li>
<li><p>Anywhere you previously had <code>sizeof(a)</code> for array length will need to be replaced by the length of the memory you allocated (if you're using strings, you could use <code>strlen()</code>, which counts up to the <code>'\0'</code>).</p></li>
<li><p>You will need a make a corresponding call to <a href=""http://linux.die.net/man/3/free"" rel=""noreferrer""><code>free()</code></a> for each call to <code>malloc()</code>. This tells the computer you are done using the memory you asked for with <code>malloc()</code>. If your pointer is <code>a</code>, just write <code>free(a);</code> at a point in the code where you know you no longer need whatever <code>a</code> points to.</p></li>
</ul>

<p>As another answer pointed out, if you want to get the address of the start of an array, you can use:</p>

<pre><code>char* p = &amp;a[0] 
</code></pre>

<p>You can read this as ""char pointer <code>p</code> becomes the address of element <code>[0]</code> of <code>a</code>"".</p>
","9628309"
"C struct memory layout?","68748","","<p>I have C# background. Very newbie to low level language like C.</p>

<p>In C#, struct's memory laid out by compiler by default. Compiler can re-order data fields or pad additional bits between fields implicitly. So I had to specify some special attribute to override this behavior for exact layout.</p>

<p>AFAIK, C does not reorder or align memory layout of a struct by default. But I heard there's a little exceptions which very hard to find.</p>

<p>What is C's memory layout behavior? (what should be re-ordered/aligned and not)</p>
","<p>In C, the compiler is allowed to dictate some alignment for every primitive type. Typically the alignment is the size of the type. But it's entirely implementation-specific.</p>

<p>Padding bytes are introduced so every object is properly aligned. Reordering is not allowed.</p>

<p>Possibly every remotely modern compiler implements <code>#pragma pack</code> which allows control over padding and leaves it to the programmer to comply with the ABI. (It is strictly nonstandard, though.)</p>

<p>From C99 §6.7.2.1:</p>

<blockquote>
  <p>12    Each non-bit-field member of a
  structure or union object is aligned
  in an implementation- defined manner
  appropriate to its type.</p>
  
  <p>13    Within a
  structure object, the non-bit-field
  members and the units in which
  bit-fields reside have addresses that
  increase in the order in which they
  are declared. A pointer to a structure
  object, suitably converted, points to
  its initial member (or if that member
  is a bit-field, then to the unit in
  which it resides), and vice versa.
  There may be unnamed padding within a
  structure object, but not at its
  beginning.</p>
</blockquote>
","2749009"
"How to configure CDB in Qt Creator?","68672","","<p>The question <a href=""https://stackoverflow.com/q/5318691/559085"">here</a> is the same as mine but the solution there is not working for me. I am using QtCreator 2.4.1 on Windows 7. When i try to debug a simple hello world app the message displayed is: ""The preferred debugger engine for debugging binaries of type 'x86-windows-msvc2010-pe-32bit' is not available....Details: There is no CDB binary available for binaries in format 'x86-windows-msvc2010-pe-32bit""  </p>

<p>When i found that cdb.exe was not on my system i had Windows SDK installed with debugger tools and the current location of cdb.exe is ""C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x86\cdb.exe"" and ""C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x64\cdb.exe"",</p>

<p>In the CDB tab i configured symbol server as well as the path of CDB.exe, but in vain!</p>

<p>QtCreator->Tools->options->Debugger->CDB Tab->has the following fields:<br>
Additional arguments<br>
use CDB console<br>
Symbol Paths<br>
Source Paths<br>
Correct breakpoint location  etc...</p>

<p>Can somebody kindly explain in detail what these mean and what values are expected here. Has anybody successfully debugged any applicaiton using Qt Creator.</p>

<hr>

<p>Please refer this link:<br>
<a href=""http://qt-project.org/forums/viewthread/16018/"" rel=""nofollow noreferrer"">http://qt-project.org/forums/viewthread/16018/</a></p>
","<p>I was having the same problems too, and finally figured out how to solve this. Styne666 gave me a hint. Do the following:</p>

<ol>
<li>Tools</li>
<li>Options...</li>
<li>Build &amp; Run</li>
<li>Tool Chains</li>
<li>Use the ""Clone"" button to make a copy of each of the auto-detected MSVC items</li>
<li>In each of the cloned items, you can specify the debugger in the ""Debugger"" field (e.g. C:\Program Files\Windows Kits\8.0\Debuggers\x64\cdb.exe)</li>
<li>After this everything seems to work...</li>
</ol>

<p>Colby</p>

<p>{edit}</p>

<p>I should further mention that if you are running a 64-bit version of Windows and a 32-bit version of Qt Creator like I am, you need to make sure that you are pointing to the 32-bit versions of cdb (of which there are x86 and x64 <em>target</em> versions). So for the 32-bit target builds I run this:</p>

<pre><code>C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x86\cdb.exe
</code></pre>

<p>And for x64 builds I run this:</p>

<pre><code>C:\Program Files (x86)\Windows Kits\8.0\Debuggers\x64\cdb.exe
</code></pre>

<p>The tricky part is that it is somewhat difficult to get Microsoft to install the 32-bit version of the debugging tools on your 64-bit machine. A co-worker tried to do so recently and said that he needed to install the Windows 8 tools in order to have the option to do that - the Windows 7 versions would not let you. </p>
","10150204"
"Getting IPV4 address from a sockaddr structure","68671","","<p>How can I extract an IP address into a string? I can't find a reference that tells me how <code>char sa_data[14]</code> is encoded.</p>
","<p>Once <code>sockaddr</code> cast to <code>sockaddr_in</code>, it becomes this:</p>

<pre><code>struct sockaddr_in {
    u_short     sin_family;
    u_short     sin_port;
    struct      in_addr sin_addr;
    char        sin_zero[8];
};
</code></pre>
","1276307"
"How to initialize 3D array in C++","68622","","<p>How do you initialize a 3d array in C++ </p>

<pre><code>int min[1][1][1] = {100, { 100, {100}}}; //this is not the way
</code></pre>
","<p>The array in your question has only one element, so you only need one value to completely initialise it.  You need three sets of braces, one for each dimension of the array.</p>

<pre><code>int min[1][1][1] = {{{100}}};
</code></pre>

<p>A clearer example might be:</p>

<pre><code>int arr[2][3][4] = { { {1, 2, 3, 4}, {1, 2, 3, 4}, {1, 2, 3, 4} },
                     { {1, 2, 3, 4}, {1, 2, 3, 4}, {1, 2, 3, 4} } };
</code></pre>

<p>As you can see, there are two groups, each containing three groups of 4 numbers.</p>
","2178915"
"Clang vs GCC for my Linux Development project","68449","","<p>I'm in college, and for a project we're using C. We've explored GCC and Clang, and Clang appears to be much more user friendly than GCC.  As a result, I'm wondering what the advantages or disadvantages are to using clang, as opposed to GCC, for developing in C and C++ on Linux? </p>

<p>In my case this would be used for student level programs, not production. </p>

<p>If I use Clang, should I debug with GDB and use GNU Make, or use another debugger and make utility?</p>
","<p><strong>EDIT:</strong></p>

<p>The gcc guys really improved the diagnosis experience in gcc (ah competition). They created a wiki page to showcase it <a href=""http://gcc.gnu.org/wiki/ClangDiagnosticsComparison"" rel=""noreferrer"">here</a>. gcc 4.8 now has quite good diagnostics as well (gcc 4.9x added color support). Clang is still in the lead, but the gap is closing.</p>

<hr>

<p><strong>Original:</strong></p>

<p>For students, I would unconditionally recommend Clang.</p>

<p>The performance in terms of generated code between gcc and Clang is now unclear (though I think that gcc 4.7 still has the lead, I haven't seen conclusive benchmarks yet), but for students to learn it does not really matter anyway.</p>

<p>On the other hand, Clang's extremely clear diagnostics are definitely easier for beginners to interpret.</p>

<p>Consider this simple snippet:</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;

struct Student {
std::string surname;
std::string givenname;
}

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, Student const&amp; s) {
  return out &lt;&lt; ""{"" &lt;&lt; s.surname &lt;&lt; "", "" &lt;&lt; s.givenname &lt;&lt; ""}"";
}

int main() {
  Student me = { ""Doe"", ""John"" };
  std::cout &lt;&lt; me &lt;&lt; ""\n"";
}
</code></pre>

<p>You'll notice right away that the semi-colon is missing after the definition of the <code>Student</code> class, right :) ?</p>

<p>Well, <a href=""http://ideone.com/DJp3x"" rel=""noreferrer"">gcc notices it too</a>, after a fashion:</p>

<pre><code>prog.cpp:9: error: expected initializer before ‘&amp;’ token
prog.cpp: In function ‘int main()’:
prog.cpp:15: error: no match for ‘operator&lt;&lt;’ in ‘std::cout &lt;&lt; me’
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:112: note: candidates are: std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(std::basic_ostream&lt;_CharT, _Traits&gt;&amp; (*)(std::basic_ostream&lt;_CharT, _Traits&gt;&amp;)) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:121: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(std::basic_ios&lt;_CharT, _Traits&gt;&amp; (*)(std::basic_ios&lt;_CharT, _Traits&gt;&amp;)) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:131: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(std::ios_base&amp; (*)(std::ios_base&amp;)) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:169: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(long int) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:173: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(long unsigned int) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:177: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(bool) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/bits/ostream.tcc:97: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(short int) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:184: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(short unsigned int) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/bits/ostream.tcc:111: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(int) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:195: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(unsigned int) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:204: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(long long int) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:208: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(long long unsigned int) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:213: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(double) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:217: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(float) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:225: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(long double) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/ostream:229: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(const void*) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
/usr/lib/gcc/i686-pc-linux-gnu/4.3.4/include/g++-v4/bits/ostream.tcc:125: note:                 std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::basic_ostream&lt;_CharT, _Traits&gt;::operator&lt;&lt;(std::basic_streambuf&lt;_CharT, _Traits&gt;*) [with _CharT = char, _Traits = std::char_traits&lt;char&gt;]
</code></pre>

<p>And Clang is not exactly starring here either, but still:</p>

<pre><code>/tmp/webcompile/_25327_1.cc:9:6: error: redefinition of 'ostream' as different kind of symbol
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, Student const&amp; s) {
     ^
In file included from /tmp/webcompile/_25327_1.cc:1:
In file included from /usr/include/c++/4.3/string:49:
In file included from /usr/include/c++/4.3/bits/localefwd.h:47:
/usr/include/c++/4.3/iosfwd:134:33: note: previous definition is here
  typedef basic_ostream&lt;char&gt;           ostream;        ///&lt; @isiosfwd
                                        ^
/tmp/webcompile/_25327_1.cc:9:13: error: expected ';' after top level declarator
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, Student const&amp; s) {
            ^
            ;
2 errors generated.
</code></pre>

<p>I purposefully choose an example which triggers an unclear error message (coming from an ambiguity in the grammar) rather than the typical ""Oh my god Clang read my mind"" examples. Still, we notice that Clang avoids the flood of errors. No need to scare students away.</p>
","8208827"
"Makefile: How to correctly include header file and its directory?","68421","","<p>I have the following makefile:</p>

<pre><code>CC=g++
INC_DIR = ../StdCUtil
CFLAGS=-c -Wall -I$(INC_DIR)
DEPS = split.h

all: Lock.o DBC.o Trace.o

%.o: %.cpp $(DEPS)
    $(CC) -o $@ $&lt; $(CFLAGS)

clean:
    rm -rf *o all
</code></pre>

<p>This makefile and all three source files <code>Lock.cpp</code>, <code>DBC.cpp</code>, <code>Trace.cpp</code> are located in the current directory called <code>Core</code>. One of the source file <code>Trace.cpp</code> contains a line that includes a header file outside the current directory:</p>

<pre><code>//in Trace.cpp
#include ""StdCUtil/split.h""
</code></pre>

<p>The header file <code>split.h</code> is located at one level above the current directory and then in the subdirectory called <code>StdCUtil</code>. So that's why I added <code>INC_DIR = ../StdCUtil</code> in the makefile. The overall directory structure looks like the following:</p>

<pre><code>root
  |___Core
  |     |
  |     |____Makefile
  |     |____DBC.cpp
  |     |____Lock.cpp
  |     |____Trace.cpp
  |
  |___StdCUtil
        |___split.h
</code></pre>

<p>But when I make it, it gives me the error:</p>

<pre><code>Trace.cpp:8:28: fatal error: StdCUtil/split.h: No such file or directory
 #include ""StdCUtil/split.h""
                            ^
compilation terminated.
&lt;builtin&gt;: recipe for target 'Trace.o' failed
</code></pre>

<p>Why this doesn't find the header file <code>split.h</code> even if I specify the <code>INC_DIR</code> in the makefile? How to correct this?</p>
","<p>These lines in your makefile,</p>

<pre><code>INC_DIR = ../StdCUtil
CFLAGS=-c -Wall -I$(INC_DIR)
DEPS = split.h
</code></pre>

<p>and this line in your .cpp file,</p>

<pre><code>#include ""StdCUtil/split.h""
</code></pre>

<p>are in conflict.</p>

<p>With your makefile in your source directory and with that <code>-I</code> option you should be using <code>#include ""split.h"" in your source file, and your dependency should be</code>../StdCUtil/split.h`.</p>

<p>Another option:</p>

<pre><code>INC_DIR = ../StdCUtil
CFLAGS=-c -Wall -I$(INC_DIR)/..  # Ugly!
DEPS = $(INC_DIR)/split.h
</code></pre>

<p>With this your <code>#include</code> directive would remain as <code>#include ""StdCUtil/split.h""</code>.</p>

<p>Yet another option is to place your makefile in the parent directory:</p>

<pre><code>root
  |____Makefile
  |
  |___Core
  |     |____DBC.cpp
  |     |____Lock.cpp
  |     |____Trace.cpp
  |
  |___StdCUtil
        |___split.h
</code></pre>

<p>With this layout it is common to put the object files (and possibly the executable) in a subdirectory that is parallel to your <code>Core</code> and <code>StdCUtil</code> directories. <code>Object</code>, for example. With this, your makefile becomes:</p>

<pre><code>INC_DIR = StdCUtil
SRC_DIR = Core
OBJ_DIR = Object
CFLAGS  = -c -Wall -I.
SRCS = $(SRC_DIR)/Lock.cpp $(SRC_DIR)/DBC.cpp $(SRC_DIR)/Trace.cpp
OBJS = $(OBJ_DIR)/Lock.o $(OBJ_DIR)/DBC.o $(OBJ_DIR)/Trace.o
# Note: The above will soon get unwieldy.
# The wildcard and patsubt commands will come to your rescue.

DEPS = $(INC_DIR)/split.h
# Note: The above will soon get unwieldy.
# You will soon want to use an automatic dependency generator.


all: $(OBJS)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
  $(CC) $(CFLAGS) -c $&lt; -o $@

$(OBJ_DIR)/Trace.o: $(DEPS)
</code></pre>
","22545645"
"Cannot find libcrypto in Ubuntu","68401","","<p>I want to try one program which have makefile on it but when I put <code>make</code> in the shell the error  was:</p>

<pre><code> g++ -g -DaUNIX -I../../acroname/aInclude -I../../acroname/aSource -Wl,-rpath,.     unix_aLaserDemo_Data/aLaserDemo.o unix_aLaserDemo_Data/acpLaser.o -lpthread -lcrypto -lssl  -o ../../acroname/aBinary/aLaserDemo
/usr/bin/ld: cannot find -lcrypto
collect2: ld returned 1 exit status
</code></pre>

<p>Here is the makefile:</p>

<pre><code> CC = g++
 CFLAGS = -DaUNIX -I../../acroname/aInclude -I../../acroname/aSource
 LFLAGS = -Wl,-rpath,.
 SRC = ../../acroname/aSource
 BIN = ../../acroname/aBinary
 LIBS = -lpthread -lcrypto -lssl \
 #LIBS = -lpthread\
       -L../../acroname/aBinary -l aUtil -l aIO
 OBJ = unix_aLaserDemo_Data

.PHONY : app
 app : $(OBJ) $(BIN)/aLaserDemo

$(OBJ) :
        mkdir $(OBJ)

$(BIN)/aLaserDemo : $(OBJ)/aLaserDemo.o $(OBJ)/acpLaser.o
        $(CC) -g $(CFLAGS) $(LFLAGS) $^ $(LIBS) -o $@

$(OBJ)/aLaserDemo.o : aLaserDemo.cpp
        $(CC) -c $(CFLAGS) $&lt; -o $@

$(OBJ)/acpLaser.o : $(SRC)/acpLaser.cpp $(SRC)/acpLaser.h
        $(CC) -c $(CFLAGS) $&lt; -o $@

 .PHONY : clean
 clean :
    rm -rf $(OBJ)
    rm -f $(BIN)/aLaserDemo
</code></pre>

<p>I try to locate the crypto library:</p>

<pre><code> /usr/lib/i486/libcrypto.so.0.9.8
 /usr/lib/i586/libcrypto.so.0.9.8
 /usr/lib/i686/cmov/libcrypto.so.0.9.8
 /usr/lib/libcrypto.so.0.9.8
</code></pre>

<p>What should I do to fix it?</p>
","<p>I solved this on 12.10 by installing libssl-dev.</p>

<pre><code>sudo apt-get install libssl-dev
</code></pre>
","14364669"
"printf a variable in C","68373","","<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main()
{
    int x = 1;

    printf(""please make a selection with your keyboard\n"");
    sleep(1);
    printf(""1.\n"");

    char input;
    scanf (""%c"", &amp;input);
    switch (input) {
        case '1':
            x=x+1;
            printf(x);
    }

    return(0);
}
</code></pre>

<p>I am trying a make a variable add to itself and then print that variable out but I can't seem to get my code to work.</p>

<p>my output error is </p>

<pre><code>newcode1.c: In function ‘main’:
newcode1.c:20:2: warning: passing argument 1 of ‘printf’ makes pointer from integer without a cast [enabled by default]
In file included from newcode1.c:1:0:
/usr/include/stdio.h:362:12: note: expected ‘const char * __restrict__’ but argument is of type ‘int’
newcode1.c:20:2: warning: format not a string literal and no format arguments [-Wformat-security]
</code></pre>
","<p>Your <code>printf</code> needs a format string:</p>

<pre><code>printf(""%d\n"", x);
</code></pre>

<p>This <a href=""http://en.cppreference.com/w/c/io/fprintf"" rel=""noreferrer"">reference page</a> gives details on how to use <code>printf</code> and related functions.</p>
","16675310"
"Why isn't the size of an array parameter the same as within main?","68324","","<p>Why isn't the size of an array sent as a parameter the same as within main?</p>

<pre><code>#include &lt;stdio.h&gt;

void PrintSize(int p_someArray[10]);

int main () {
    int myArray[10];
    printf(""%d\n"", sizeof(myArray)); /* As expected, 40 */
    PrintSize(myArray);/* Prints 4, not 40 */
}

void PrintSize(int p_someArray[10]){
    printf(""%d\n"", sizeof(p_someArray));
}
</code></pre>
","<p><strong>No</strong>, array-type is <strong>implicitly</strong> converted into pointer type when you pass it in to a function.</p>

<p>So,</p>

<pre><code>void PrintSize(int p_someArray[10]) {
    printf(""%zu\n"", sizeof(p_someArray));
}
</code></pre>

<p>and</p>

<pre><code>void PrintSize(int *p_someArray) {
    printf(""%zu\n"", sizeof(p_someArray));
}
</code></pre>

<p>are equivalent. So what you get is the value of <strong><code>sizeof(int*)</code></strong></p>
","1975133"
"how can one see content of stack with gdb","68193","","<p>I am new to gdb, so I have some question;</p>

<ul>
<li><p>how can I look content of stack ? 
ex : to see content of register, I type <code>info registers</code>. For stack what should be</p></li>
<li><p>how can I see content of   <code>$0x4(%esp)</code>? When I type <code>print /d $0x4(%esp)</code> gdb gives error.</p></li>
</ul>

<p>platform: linux 
          gdb</p>
","<p><code>info frame</code> to show the stack frame info</p>

<p>To read the memory at given addresses you should take a look at <code>x</code></p>

<p><code>x/x $esp</code> for hex <code>x/d $esp</code> for signed <code>x/u $esp</code> for unsigned etc. x uses the format syntax, you could also take a look at the current instruction via <code>x/i $eip</code> etc.</p>
","7848912"
"How to compare strings in an ""if"" statement?","68160","","<p>I want to test and see if a variable of type ""char"" can compare with a regular string like ""cheese"" for a comparison like:</p>

<pre><code>#include &lt;stdio.h&gt;

int main()
{
    char favoriteDairyProduct[30];

    scanf(""%s"",favoriteDairyProduct);

    if(favoriteDairyProduct == ""cheese"")
    {
        printf(""You like cheese too!"");
    }
    else
    {
        printf(""I like cheese more."");
    }

    return 0;
}
</code></pre>

<p>(What I actually want to do is much longer than this but this is the main part I'm stuck on.)
So how would one compare two strings in C?</p>
","<p>You're looking for the function <code>strcmp</code>, or <code>strncmp</code> from <code>string.h</code>.</p>

<p>Since strings are just arrays, you need to compare each character, so this function will do that for you:</p>

<pre><code>if (strcmp(favoriteDairyProduct, ""cheese"") == 0)
{
    printf(""You like cheese too!"");
}
else
{
    printf(""I like cheese more."");
}
</code></pre>

<p>Further reading: <a href=""http://www.cplusplus.com/reference/clibrary/cstring/strcmp/"" rel=""noreferrer"">strcmp at cplusplus.com</a></p>
","8222511"
"What is more efficient? Using pow to square or just multiply it with itself?","68144","","<p>What of these two methods is in C more efficient? And how about:</p>

<pre><code>pow(x,3)
</code></pre>

<p>vs. </p>

<pre><code>x*x*x // etc?
</code></pre>
","<p>I tested the performance difference between <code>x*x*...</code> vs <code>pow(x,i)</code> for small <code>i</code> using this code:</p>

<pre><code>#include &lt;cstdlib&gt;
#include &lt;cmath&gt;
#include &lt;boost/date_time/posix_time/posix_time.hpp&gt;

inline boost::posix_time::ptime now()
{
    return boost::posix_time::microsec_clock::local_time();
}

#define TEST(num, expression) \
double test##num(double b, long loops) \
{ \
    double x = 0.0; \
\
    boost::posix_time::ptime startTime = now(); \
    for (long i=0; i&lt;loops; ++i) \
    { \
        x += expression; \
        x += expression; \
        x += expression; \
        x += expression; \
        x += expression; \
        x += expression; \
        x += expression; \
        x += expression; \
        x += expression; \
        x += expression; \
    } \
    boost::posix_time::time_duration elapsed = now() - startTime; \
\
    std::cout &lt;&lt; elapsed &lt;&lt; "" ""; \
\
    return x; \
}

TEST(1, b)
TEST(2, b*b)
TEST(3, b*b*b)
TEST(4, b*b*b*b)
TEST(5, b*b*b*b*b)

template &lt;int exponent&gt;
double testpow(double base, long loops)
{
    double x = 0.0;

    boost::posix_time::ptime startTime = now();
    for (long i=0; i&lt;loops; ++i)
    {
        x += std::pow(base, exponent);
        x += std::pow(base, exponent);
        x += std::pow(base, exponent);
        x += std::pow(base, exponent);
        x += std::pow(base, exponent);
        x += std::pow(base, exponent);
        x += std::pow(base, exponent);
        x += std::pow(base, exponent);
        x += std::pow(base, exponent);
        x += std::pow(base, exponent);
    }
    boost::posix_time::time_duration elapsed = now() - startTime;

    std::cout &lt;&lt; elapsed &lt;&lt; "" "";

    return x;
}

int main()
{
    using std::cout;
    long loops = 100000000l;
    double x = 0.0;
    cout &lt;&lt; ""1 "";
    x += testpow&lt;1&gt;(rand(), loops);
    x += test1(rand(), loops);

    cout &lt;&lt; ""\n2 "";
    x += testpow&lt;2&gt;(rand(), loops);
    x += test2(rand(), loops);

    cout &lt;&lt; ""\n3 "";
    x += testpow&lt;3&gt;(rand(), loops);
    x += test3(rand(), loops);

    cout &lt;&lt; ""\n4 "";
    x += testpow&lt;4&gt;(rand(), loops);
    x += test4(rand(), loops);

    cout &lt;&lt; ""\n5 "";
    x += testpow&lt;5&gt;(rand(), loops);
    x += test5(rand(), loops);
    cout &lt;&lt; ""\n"" &lt;&lt; x &lt;&lt; ""\n"";
}
</code></pre>

<p>Results are:</p>

<pre><code>1 00:00:01.126008 00:00:01.128338 
2 00:00:01.125832 00:00:01.127227 
3 00:00:01.125563 00:00:01.126590 
4 00:00:01.126289 00:00:01.126086 
5 00:00:01.126570 00:00:01.125930 
2.45829e+54
</code></pre>

<p>Note that I accumulate the result of every pow calculation to make sure the compiler doesn't optimize it away.</p>

<p>If I use the <code>std::pow(double, double)</code> version, and <code>loops = 1000000l</code>, I get:</p>

<pre><code>1 00:00:00.011339 00:00:00.011262 
2 00:00:00.011259 00:00:00.011254 
3 00:00:00.975658 00:00:00.011254 
4 00:00:00.976427 00:00:00.011254 
5 00:00:00.973029 00:00:00.011254 
2.45829e+52
</code></pre>

<p>This is on an Intel Core Duo running Ubuntu 9.10 64bit. Compiled using gcc 4.4.1 with -o2 optimization.</p>

<p>So in C, yes <code>x*x*x</code> will be faster than <code>pow(x, 3)</code>, because there is no <code>pow(double, int)</code> overload. In C++, it will be the roughly same. (Assuming the methodology in my testing is correct.)</p>

<hr>

<p>This is in response to the comment made by An Markm:</p>

<p>Even if a <code>using namespace std</code> directive was issued, if the second parameter to <code>pow</code> is an <code>int</code>, then the <code>std::pow(double, int)</code> overload from <code>&lt;cmath&gt;</code> will be called instead of <code>::pow(double, double)</code> from <code>&lt;math.h&gt;</code>.</p>

<p>This test code confirms that behavior:</p>

<pre><code>#include &lt;iostream&gt;

namespace foo
{

    double bar(double x, int i)
    {
        std::cout &lt;&lt; ""foo::bar\n"";
        return x*i;
    }


}

double bar(double x, double y)
{
    std::cout &lt;&lt; ""::bar\n"";
    return x*y;
}

using namespace foo;

int main()
{
    double a = bar(1.2, 3); // Prints ""foo::bar""
    std::cout &lt;&lt; a &lt;&lt; ""\n"";
    return 0;
}
</code></pre>
","2940800"
"c - warning: implicit declaration of function ‘printf’","68124","","<p>I know alot of similar questions were asked before but i couldn't find something that would fix this warning i get:</p>

<pre><code>MyIntFunctions.c:19:2: warning: implicit declaration of function ‘printf’ [-Wimplicit-function-declaration]
</code></pre>

<p>Occurs here:</p>

<pre><code>void IntPrint (const void *key)
{
    printf(""%d"", *(int*)key); // line 19
    printf(""\t--&gt;\t"");
}
</code></pre>

<p>and a similar warning:</p>

<pre><code>MyStringFunctions.c:22:2: warning: implicit declaration of function ‘printf’ [-Wimplicit-function-declaration]

void StringPrint (const void *key)
{
    printf(""%s"",(char*)key); //line 22
    printf(""\t--&gt;\t"");
}
</code></pre>

<p>I really want to understand what is wrong so i won't do that again in the future.</p>
","<p>You need to include the appropriate header</p>

<pre><code>#include &lt;stdio.h&gt;
</code></pre>

<p>If you're not sure which header a standard function is defined in, the function's <a href=""http://linux.die.net/man/3/printf"">man page</a> will state this.</p>
","14069241"
"Order of execution for an if with multiple conditionals","68107","","<p>In an if statement with multiple conditionals, is the second conditional executed if the outcome of the first is clear?</p>

<p>example:</p>

<pre><code>if(i&gt;0 &amp;&amp; array[i]==0){
}
</code></pre>

<p>If I swap the conditionals a segfault may occur for negative values of i, but this way no segfault occurs. Can I be sure that this always works or do have have to use nested if statements?</p>
","<p>This type of evaluation is called <a href=""http://en.wikipedia.org/wiki/Short-circuit_evaluation"" rel=""noreferrer"">short-circuiting</a>. 
Once the result is 100% clear, it does not continue evaluating.</p>

<p>This is actually a common programming technique.
For example, in C++ you will often see something like:</p>

<pre><code>if (pX!=null &amp;&amp; pX-&gt;predicate()) { bla bla bla }
</code></pre>

<p>If you changed the order of the conditions, you could be invoking a method on a null pointer and crashing. A similar example in C would use the field of a struct when you have a pointer to that struct.</p>

<p>You could do something similar with or:</p>

<pre><code>if(px==null || pX-&gt;isEmpty()} { bla bla bla }
</code></pre>

<p>This is also one of the reasons that it is generally a good idea to avoid side effects in an if condition.</p>

<p>For example suppose you have: </p>

<pre><code>if(x==4 &amp;&amp; (++y&gt;7) &amp;&amp; z==9)
</code></pre>

<p>If <code>x</code> is <code>4</code>, then <code>y</code> will be incremented regardless of the value of <code>z</code> or <code>y</code>, but if <code>x</code> is not <code>4</code>, it will not be incremented at all.</p>
","2456095"
"How to convert unsigned long to string","68077","","<p>In the C language, how do I convert <strong>unsigned long</strong>  value to a string (<strong>char *</strong>) and keep my source code portable or just recompile it to work on other platform (without rewriting code?</p>

<p>For example, if I have <code>sprintf(buffer, format, value)</code>, how do I determine the size of buffer with platform-independent manner?</p>
","<pre><code>const int n = snprintf(NULL, 0, ""%lu"", ulong_value);
assert(n &gt; 0);
char buf[n+1];
int c = snprintf(buf, n+1, ""%lu"", ulong_value);
assert(buf[n] == '\0');
assert(c == n);
</code></pre>
","2709766"
"Why can a string be assigned to a char* pointer, but not to a char[] array?","68069","","<p>Can someone explain why this works with the pointer: </p>

<pre><code>char * str1;

str1 = ""Hello1"";

str1 = ""new string"";

// but not this
char str2 [] = ""hello"";
str2 = ""four"";

// or this
char str3 [];
str3 = ""hello"";
str3 = ""hello"";
</code></pre>
","<p><strong>Why it works with pointers:</strong><br>
When you say <code>char * str1</code> in C, you are allocating a pointer in the memory. When you write <code>str1 = ""Hello"";</code>, you are creating a string literal in memory and making the pointer point to it. When you create another string literal <code>""new string""</code> and assign it to <code>str1</code>, all you are doing is changing where the pointer points.</p>

<p><strong>Why it doesn't work with arrays:</strong><br>
When you say <code>char str2 [] = ""Hello""</code>, you are creating a string literal and putting it in the array during its definition. It is ok to not give a size, as the array calculates it and appends a <code>'\0'</code> to it. You cannot reassign anything to that array without resizing it. That is why <code>str2 = ""four""</code> will not work. </p>

<p>In case of <code>str3</code>, it is the same case. You haven't defined the size of the array in the definition, so it calculated its size to be 0. You cannot assign anything new without resizing the array.</p>
","6803454"
"forward declaration of a struct in C?","67878","","<pre><code>#include &lt;stdio.h&gt;

struct context;

struct funcptrs{
  void (*func0)(context *ctx);
  void (*func1)(void);
};

struct context{
    funcptrs fps;
}; 

void func1 (void) { printf( ""1\n"" ); }
void func0 (context *ctx) { printf( ""0\n"" ); }

void getContext(context *con){
    con=?; // please fill this with a dummy example so that I can get this working. Thanks.
}

int main(int argc, char *argv[]){
 funcptrs funcs = { func0, func1 };
   context *c;
   getContext(c);
   c-&gt;fps.func0(c);
   getchar();
   return 0;
}
</code></pre>

<p>I am missing something here. Please help me fix this. Thanks.</p>
","<p>Try this</p>

<pre><code>#include &lt;stdio.h&gt;

struct context;

struct funcptrs{
  void (*func0)(struct context *ctx);
  void (*func1)(void);
};

struct context{
    struct funcptrs fps;
}; 

void func1 (void) { printf( ""1\n"" ); }
void func0 (struct context *ctx) { printf( ""0\n"" ); }

void getContext(struct context *con){
    con-&gt;fps.func0 = func0;  
    con-&gt;fps.func1 = func1;  
}

int main(int argc, char *argv[]){
 struct context c;
   c.fps.func0 = func0;
   c.fps.func1 = func1;
   getContext(&amp;c);
   c.fps.func0(&amp;c);
   getchar();
   return 0;
}
</code></pre>
","9999752"
"Representing EOF in C code?","67867","","<p>The newline character is represented by <code>""\n""</code> in C code. Is there an equivalent for the end-of-file (EOF) character?</p>
","<p>EOF is not a character (in most modern operating systems). It is simply a condition that applies to a file stream when the end of the stream is reached. The confusion arises because a user may <em>signal</em> EOF for console input by typing a special character (e.g Control-D in Unix, Linux, <em>et al</em>), but this character is not seen by the running program, it is caught by the operating system which in turn signals EOF to the process.</p>

<p>Note: in some very old operating systems EOF <em>was</em> a character, e.g. Control-Z in CP/M, but this was a crude hack to avoid the overhead of maintaining actual file lengths in file system directories.</p>
","12389581"
"Conversion of Char to Binary in C","67818","","<p>I am trying to convert a character to its binary representation (so character --> ascii hex --> binary).</p>

<p>I know to do that I need to shift and <code>AND</code>. However, my code is not working for some reason.</p>

<p>Here is what I have. <code>*temp</code> points to an index in a C string.</p>

<pre><code>char c;
int j;
for (j = i-1; j &gt;= ptrPos; j--) {
    char x = *temp;
    c = (x &gt;&gt; i) &amp; 1;
    printf(""%d\n"", c);
    temp--;
}
</code></pre>
","<p>We show up two functions that prints a SINGLE character to binary.</p>

<pre><code>void printbinchar(char character)
{
    char output[9];
    itoa(character, output, 2);
    printf(""%s\n"", output);
}
</code></pre>

<p>printbinchar(10) will write into the console</p>

<pre><code>    1010
</code></pre>

<p>itoa is a library function that converts a single integer value to a string with the specified base.
For example... itoa(1341, output, 10) will write in output string ""1341"".
And of course itoa(9, output, 2) will write in the output string ""1001"".</p>

<p>The next function will print into the standard output the full binary representation of a character, that is, it will print all 8 bits, also if the higher bits are zero.</p>

<pre><code>void printbincharpad(char c)
{
    for (int i = 7; i &gt;= 0; --i)
    {
        putchar( (c &amp; (1 &lt;&lt; i)) ? '1' : '0' );
    }
    putchar('\n');
}
</code></pre>

<p>printbincharpad(10) will write into the console</p>

<pre><code>    00001010
</code></pre>

<p>Now i present a function that prints out an entire string (without last null character).</p>

<pre><code>void printstringasbinary(char* s)
{
    // A small 9 characters buffer we use to perform the conversion
    char output[9];

    // Until the first character pointed by s is not a null character
    // that indicates end of string...
    while (*s)
    {
        // Convert the first character of the string to binary using itoa.
        // Characters in c are just 8 bit integers, at least, in noawdays computers.
        itoa(*s, output, 2);

        // print out our string and let's write a new line.
        puts(output);

        // we advance our string by one character,
        // If our original string was ""ABC"" now we are pointing at ""BC"".
        ++s;
    }
}
</code></pre>

<p>Consider however that itoa don't adds padding zeroes, so printstringasbinary(""AB1"") will print something like:</p>

<pre><code>1000001
1000010
110001
</code></pre>
","7863524"
"Constant pointer vs Pointer to constant","67806","","<p>I want to know the difference between </p>

<pre><code>const int* ptr;
</code></pre>

<p>and </p>

<pre><code>int * const ptr; 
</code></pre>

<p>and how it works.</p>

<p>It is pretty difficult for me to understand or keep remember this.
Please help.</p>
","<pre><code>const int* ptr; 
</code></pre>

<p>declares <code>ptr</code> a pointer to <code>const int</code> type. You can modify <code>ptr</code> itself but the object pointed to by <code>ptr</code> shall not be modified.  </p>

<pre><code>const int a = 10;
const int* ptr = &amp;a;  
*ptr = 5; // wrong
ptr++;    // right  
</code></pre>

<p>While  </p>

<pre><code>int * const ptr;  
</code></pre>

<p>declares <code>ptr</code> a <code>const</code> pointer to <code>int</code> type. You are not allowed to modify <code>ptr</code> but the object pointed to by <code>ptr</code>. </p>

<pre><code>int a = 10;
int *const ptr = &amp;a;  
*ptr = 5; // right
ptr++;    // wrong
</code></pre>

<p>Generally I would prefer the declaration like this which make it easy to read and understand (read from right to left):  </p>

<pre><code>int const  *ptr; // ptr is a pointer to constant int 
int *const ptr;  // ptr is a constant pointer to int
</code></pre>
","21476937"
"What's the difference between __PRETTY_FUNCTION__, __FUNCTION__, __func__?","67801","","<p>What's the difference between <code>__PRETTY_FUNCTION__</code>, <code>__FUNCTION__</code>, <code>__func__</code>, and where are they documented? How do I decide which one to use?</p>
","<p><code>__func__</code> is an implicitly declared identifier that expands to a character array variable containing the function name when it is used inside of a function.  It was added to C in C99.  From <a href=""http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1124.pdf"" rel=""noreferrer"">C99</a> §6.4.2.2/1:</p>

<blockquote>
  <p>The identifier <code>__func__</code> is implicitly declared by the translator as if, immediately following the opening brace of each function definition, the declaration</p>

<pre><code>static const char __func__[] = ""function-name"";
</code></pre>
  
  <p>appeared, where function-name is the name of the lexically-enclosing function.  This name is the unadorned name of the function.</p>
</blockquote>

<p>Note that it is not a macro and it has no special meaning during preprocessing.  </p>

<p><code>__func__</code> was added to C++ in C++11, where it is specified as containing ""an implementation-deﬁned string"" (C++11 §8.4.1[dcl.fct.def.general]/8), which is not quite as useful as the specification in C. (The original proposal to add <code>__func__</code> to C++ was <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1642.html"" rel=""noreferrer"">N1642</a>).</p>

<p><code>__FUNCTION__</code> is a pre-standard extension that some C compilers support (including gcc and Visual C++); in general, you should use <code>__func__</code> where it is supported and only use <code>__FUNCTION__</code> if you are using a compiler that does not support it (for example, Visual C++, which does not support C99 and does not yet support all of C++0x, does not provide <code>__func__</code>).</p>

<p><code>__PRETTY_FUNCTION__</code> is a gcc extension that is mostly the same as <code>__FUNCTION__</code>, except that for C++ functions it contains the ""pretty"" name of the function including the signature of the function.  Visual C++ has a similar (but not quite identical) extension, <code>__FUNCSIG__</code>.</p>

<p>For the nonstandard macros, you will want to consult your compiler's documentation.  The Visual C++ extensions are included in the MSDN documentation of the C++ compiler's <a href=""http://msdn.microsoft.com/library/b0084kay.aspx"" rel=""noreferrer"">""Predefined Macros""</a>.  The gcc documentation extensions are described in the gcc documentation page <a href=""http://gcc.gnu.org/onlinedocs/gcc/Function-Names.html"" rel=""noreferrer"">""Function Names as Strings.""</a>  </p>
","4384825"
"How to write iOS app purely in C","67769","","<p>I read here <a href=""https://stackoverflow.com/questions/180549/learn-c-first-before-learning-objective-c"">Learn C Before Objective-C?</a></p>

<blockquote>
  <p>Usually I then replace some Obj-C code with pure C code (after all you can mix them as much as you like, the content of an Obj-C method can be entirely, pure C code)</p>
</blockquote>

<p>Is this true? </p>

<p>Is it possible to build an iPhone app purely in the C programming language?</p>
","<p>Damn, it took me a while but I got it:</p>

<p><strong>main.c:</strong></p>

<pre><code>#include &lt;CoreFoundation/CoreFoundation.h&gt;

#include &lt;objc/runtime.h&gt;
#include &lt;objc/message.h&gt;

// This is a hack. Because we are writing in C, we cannot out and include 
// &lt;UIKit/UIKit.h&gt;, as that uses Objective-C constructs.
// however, neither can we give the full function declaration, like this:
// int UIApplicationMain (int argc, char *argv[], NSString *principalClassName, NSString *delegateClassName);
// So, we rely on the fact that for both the i386 &amp; ARM architectures, 
// the registers for parameters passed in remain the same whether or not 
// you are using VA_ARGS. This is actually the basis of the objective-c 
// runtime (objc_msgSend), so we are probably fine here,  this would be
// the last thing I would expect to break.
extern int UIApplicationMain(int, ...);

// Entry point of the application. If you don't know what this is by now, 
// then you probably shouldn't be reading the rest of this post.
int main(int argc, char *argv[])
{
    // Create an @autoreleasepool, using the old-stye API. 
    // Note that while NSAutoreleasePool IS deprecated, it still exists 
    // in the APIs for a reason, and we leverage that here. In a perfect 
    // world we wouldn't have to worry about this, but, remember, this is C.
    id autoreleasePool = objc_msgSend(objc_msgSend(objc_getClass(""NSAutoreleasePool""), sel_registerName(""alloc"")), sel_registerName(""init""));

    // Notice the use of CFSTR here. We cannot use an objective-c string 
    // literal @""someStr"", as that would be using objective-c, obviously.
    UIApplicationMain(argc, argv, nil, CFSTR(""AppDelegate""));

    objc_msgSend(autoreleasePool, sel_registerName(""drain""));
}
</code></pre>

<p><strong>AppDelegate.c:</strong></p>

<pre><code>#import &lt;objc/runtime.h&gt;
#import &lt;objc/message.h&gt;

// This is equivalent to creating a @class with one public variable named 'window'.
struct AppDel
{
    Class isa;

    id window;
};

// This is a strong reference to the class of the AppDelegate 
// (same as [AppDelegate class])
Class AppDelClass;

// this is the entry point of the application, same as -application:didFinishLaunchingWithOptions:
// note the fact that we use `void *` for the 'application' and 'options' fields, as we need no reference to them for this to work. A generic id would suffice here as well.
BOOL AppDel_didFinishLaunching(struct AppDel *self, SEL _cmd, void *application, void *options)
{
    // we +alloc and -initWithFrame: our window here, so that we can have it show on screen (eventually).
    // this entire method is the objc-runtime based version of the standard View-Based application's launch code, so nothing here really should surprise you.
    // one thing important to note, though is that we use `sel_getUid()` instead of @selector().
    // this is because @selector is an objc language construct, and the application would not have been created in C if I used @selector.
    self-&gt;window = objc_msgSend(objc_getClass(""UIWindow""), sel_getUid(""alloc""));
    self-&gt;window = objc_msgSend(self-&gt;window, sel_getUid(""initWithFrame:""), (struct CGRect) { 0, 0, 320, 480 });

    // here, we are creating our view controller, and our view. note the use of objc_getClass, because we cannot reference UIViewController directly in C.
    id viewController = objc_msgSend(objc_msgSend(objc_getClass(""UIViewController""), sel_getUid(""alloc"")), sel_getUid(""init""));

    // creating our custom view class, there really isn't too much 
    // to say here other than we are hard-coding the screen's bounds, 
    // because returning a struct from a `objc_msgSend()` (via 
    // [[UIScreen mainScreen] bounds]) requires a different function call
    // and is finicky at best.
    id view = objc_msgSend(objc_msgSend(objc_getClass(""View""), sel_getUid(""alloc"")), sel_getUid(""initWithFrame:""), (struct CGRect) { 0, 0, 320, 480 });

    // here we simply add the view to the view controller, and add the viewController to the window.
    objc_msgSend(objc_msgSend(viewController, sel_getUid(""view"")), sel_getUid(""addSubview:""), view);
    objc_msgSend(self-&gt;window, sel_getUid(""setRootViewController:""), viewController);

    // finally, we display the window on-screen.
    objc_msgSend(self-&gt;window, sel_getUid(""makeKeyAndVisible""));

    return YES;
}

// note the use of the gcc attribute extension (constructor). 
// Basically, this lets us run arbitrary code before program startup,
// for more information read here: http://stackoverflow.com/questions/2053029
__attribute__((constructor))
static void initAppDel()
{
    // This is objc-runtime gibberish at best. We are creating a class with the 
    // name ""AppDelegate"" that is a subclass of ""UIResponder"". Note we do not need
    // to register for the UIApplicationDelegate protocol, that really is simply for 
    // Xcode's autocomplete, we just need to implement the method and we are golden.
    AppDelClass = objc_allocateClassPair(objc_getClass(""UIResponder""), ""AppDelegate"", 0);

    // Here, we tell the objc runtime that we have a variable named ""window"" of type 'id'
    class_addIvar(AppDelClass, ""window"", sizeof(id), 0, ""@"");

    // We tell the objc-runtime that we have an implementation for the method
    // -application:didFinishLaunchingWithOptions:, and link that to our custom 
    // function defined above. Notice the final parameter. This tells the runtime
    // the types of arguments received by the function.
    class_addMethod(AppDelClass, sel_getUid(""application:didFinishLaunchingWithOptions:""), (IMP) AppDel_didFinishLaunching, ""i@:@@"");

    // Finally we tell the runtime that we have finished describing the class and 
    // we can let the rest of the application use it.
    objc_registerClassPair(AppDelClass);
}
</code></pre>

<p><strong>View.c</strong></p>

<pre><code>#include &lt;objc/runtime.h&gt;

// This is a strong reference to the class of our custom view,
// In case we need it in the future.
Class ViewClass;

// This is a simple -drawRect implementation for our class. We could have 
// used a UILabel  or something of that sort instead, but I felt that this 
// stuck with the C-based mentality of the application.
void View_drawRect(id self, SEL _cmd, struct CGRect rect)
{
    // We are simply getting the graphics context of the current view, 
    // so we can draw to it
    CGContextRef context = UIGraphicsGetCurrentContext();

    // Then we set it's fill color to white so that we clear the background.
    // Note the cast to (CGFloat []). Otherwise, this would give a warning
    //  saying ""invalid cast from type 'int' to 'CGFloat *', or 
    // 'extra elements in initializer'. Also note the assumption of RGBA.
    // If this wasn't a demo application, I would strongly recommend against this,
    // but for the most part you can be pretty sure that this is a safe move 
    // in an iOS application.
    CGContextSetFillColor(context, (CGFloat []){ 1, 1, 1, 1 });

    // here, we simply add and draw the rect to the screen
    CGContextAddRect(context, (struct CGRect) { 0, 0, 320, 480 });
    CGContextFillPath(context);

    // and we now set the drawing color to red, then add another rectangle
    // and draw to the screen
    CGContextSetFillColor(context, (CGFloat []) { 1, 0, 0, 1 });
    CGContextAddRect(context, (struct CGRect) { 10, 10, 20, 20 });
    CGContextFillPath(context);
}

// Once again we use the (constructor) attribute. generally speaking, 
// having many of these is a very bad idea, but in a small application 
// like this, it really shouldn't be that big of an issue.
__attribute__((constructor))
static void initView()
{
    // Once again, just like the app delegate, we tell the runtime to 
    // create a new class, this time a subclass of 'UIView' and named 'View'.
    ViewClass = objc_allocateClassPair(objc_getClass(""UIView""), ""View"", 0);

    // and again, we tell the runtime to add a function called -drawRect: 
    // to our custom view. Note that there is an error in the type-specification
    // of this method, as I do not know the @encode sequence of 'CGRect' off 
    // of the top of my head. As a result, there is a chance that the rect 
    // parameter of the method may not get passed properly.
    class_addMethod(ViewClass, sel_getUid(""drawRect:""), (IMP) View_drawRect, ""v@:"");

    // And again, we tell the runtime that this class is now valid to be used. 
    // At this point, the application should run and display the screenshot shown below.
    objc_registerClassPair(ViewClass);    
}
</code></pre>

<p>It's ugly, but it works.</p>

<p>If you would like to download this, <s>you can get it from my dropbox <a href=""http://dl.dropbox.com/u/25258177/personal/CBasediOSApp.zip"">here</a></s></p>

<p>You can get it from my GitHub repository <a href=""https://github.com/richardjrossiii/CBasediOSApp"">here</a>:</p>

<p><img src=""https://i.stack.imgur.com/edQNS.png"" alt=""ScreenShot""></p>
","10290255"
"Where is sys/types.h located?","67659","","<p>I just found out that the <code>&lt;stdlib.h&gt;</code> and <code>&lt;stdio.h&gt;</code> headers are located in the <code>/usr/include</code> folder in Ubuntu server, but I don't find <code>sys/types.h</code>.</p>

<p>And I start to suspect the compiler won't actually use the header file in the <code>/usr/include</code> folder.</p>

<p>Is this true, and where is the file located? </p>
","<p>My Debian box (and hopefully Ubuntu haven't butchered it <em>too</em> much in their zeal) has it in <code>/usr/include/sys/types.h</code>.</p>

<p>Your best bet is to first execute:</p>

<pre><code>find /usr/include -name types.h
</code></pre>

<p>then:</p>

<pre><code>find / -name types.h
</code></pre>

<p>if you don't find it in the first one.</p>

<p>However, keep in mind that the development stuff may not even be <em>installed.</em> I would imaging a server box is meant to be used as a server and it wouldn't surprise me if the compiler and a bunch of other stuff was not part of the default install (but it would have a lot of server things like <code>ftpd</code> or <code>Apache</code> and so on).</p>

<p>If the compiler is locating it somewhere and you just don't know where, you can use something like:</p>

<pre><code>echo ""#include &lt;sys/types.h&gt;"" | gcc -E -x c - | grep /types.h
</code></pre>

<p>to find out where it's getting it from.</p>

<p>Or:</p>

<pre><code>echo ""#include &lt;stdio.h&gt;"" | gcc -E -x c - | grep /stdio.h
</code></pre>

<p>for the other header you're worried about.</p>

<blockquote>
  <p>Aside: That <code>gcc</code> command line stops after the pre-processing phase (<code>-E</code>), forces the file to be treated as C source code (<code>-x c</code>) and retrieves the program from standard input (<code>-</code>), in this case from the <code>echo</code> statement.</p>
</blockquote>

<p>The final <code>grep</code> just strips out the unimportant lines.</p>
","11823107"
"C: how to break apart a multi digit number into separate variables?","67545","","<p>I want to break apart a multi digit number in C.
Say I have an int 123</p>

<p>how do I break it up into 1,2,3 ?</p>

<p>what if I dont know how many digits there are? I'm looking for a nice mathematical formula here</p>
","<pre><code>int value = 123;
while (value &gt; 0) {
 int digit = value % 10;
 // do something with digit
 value /= 10;
}
</code></pre>
","9302745"
"Eclipse CDT ""Symbol NULL could not be resolved""","67501","","<p>I just installed <code>Eclipse</code> <code>CDT</code> with <code>MinGW</code>.
All the environment variables are set, includes, etc. Tried running a hello world and everything seems to be fine.</p>

<p>I tried loading a <code>C</code> project that I had before in my computer, it seems to load everything fine, yet I get the following error with the <code>NULL</code> symbol :</p>

<pre><code>Symbol 'NULL' could not be resolved
</code></pre>

<p>Any insights? Thanks!</p>
","<p>NULL is usually defined in stddef.h.  This file is also usually included with stdlib.h and stdio.h.</p>

<p>And, you could always do this: </p>

<pre><code>#ifndef NULL
#define NULL   ((void *) 0)
#endif
</code></pre>
","7434552"
"What is the symbol for whitespace in C?","67483","","<p>I am trying to figure out how to check if a character is equal to white-space in C. I know that tabs are <code>'\t'</code> and newlines are <code>'\n'</code>, but I want to be able to check for just a regular normal space (from the space-bar) inside of an <code>if</code> statement.</p>

<p>Does anybody know what is the character for this?</p>
","<p>There is no particular symbol for whitespace. It is actually a set of some characters which are customarily:</p>

<pre><code>' '      space 
'\t'     horizontal tab 
'\n'     newline
'\v'     vertical tab 
'\f'     feed 
'\r'     carriage return    
</code></pre>

<p>Use <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/functions/isspace.html"" rel=""noreferrer""><code>isspace</code></a> standard library function from <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/ctype.h.html"" rel=""noreferrer""><code>ctype.h</code></a> if you want to check for any of these white-spaces.  </p>

<p>For just a space, use <code>' '</code>.</p>
","30033598"
"Kill Thread in Pthread Library","67434","","<p>I use <code>pthread_create(&amp;thread1, &amp;attrs, //... , //...);</code> and need if some condition occured need to kill this thread how to kill this ?</p>
","<p>First store the thread id</p>

<pre><code>pthread_create(&amp;thr, ...)
</code></pre>

<p>then later call</p>

<pre><code>pthread_cancel(thr)
</code></pre>

<p>However, this not a recommended programming practice! It's better to use an inter-thread communication mechanism like semaphores or messages to communicate to the thread that it should stop execution.</p>

<p>Note that pthread_kill(...) does not actually terminate the receiving thread, but instead delivers a signal to it, and it depends on the signal and signal handlers what happens.</p>
","2084849"
"Is ncurses available for windows?","67427","","<p>Are there any ncurses libraries in C/C++ for Windows that emulate ncurses in native resizable Win32 windows (<em>not</em> in console mode)?</p>
","<p>There's an ongoing effort for a PDCurses port:</p>

<p><a href=""http://www.mail-archive.com/pdcurses-l@lightlink.com/msg00129.html"" rel=""noreferrer"">http://www.mail-archive.com/pdcurses-l@lightlink.com/msg00129.html</a></p>

<p><a href=""http://www.projectpluto.com/win32a.htm"" rel=""noreferrer"">http://www.projectpluto.com/win32a.htm</a></p>
","3761803"
"Check if User Inputs a Letter or Number in C","67400","","<p>Is there an easy way to call a C script to see if the user inputs a letter from the English alphabet? I'm thinking something like this:</p>

<pre><code>if (variable == a - z) {printf(""You entered a letter! You must enter a number!"");} else (//do something}
</code></pre>

<p>I want to check to make sure the user does not enter a letter, but enters a number instead. Wondering if there is an easy way to pull every letter without manually typing in each letter of the alphabet :)</p>
","<pre><code>#include &lt;ctype.h&gt;
if (isalpha(variable)) { ... }
</code></pre>
","1478941"
"How are 3D arrays stored in C?","67349","","<p>I understand that arrays in C are allocated in row-major order. Therefore, for a 2 x 3 array:</p>

<pre><code>0  1
2  3
4  5
</code></pre>

<p>Is stored in memory as</p>

<pre><code>0 1 2 3 4 5
</code></pre>

<p>However, what if I have a 2 x 3 x 2 array:</p>

<pre><code>0  1
2  3
4  5
</code></pre>

<p>and</p>

<pre><code>6  7
8  9
10 11
</code></pre>

<p>How are these stored in memory? Is just consecutive like:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 10 11
</code></pre>

<p>Or is it some other way? Or does it depend on something?</p>
","<p>All ""dimensions"" are stored consecutively in memory.</p>

<p>Consider</p>

<pre><code>    int arr[4][100][20];
</code></pre>

<p>you can say that <code>arr[1]</code> and <code>arr[2]</code> (of type <code>int[100][20]</code>) are contiguous<br>
or that <code>arr[1][42]</code> and <code>arr[1][43]</code> (of type <code>int[20]</code>) are contiguous<br>
or that <code>arr[1][42][7]</code> and <code>arr[1][42][8]</code> (of type <code>int</code>) are contiguous</p>
","5921048"
"Override a function call in C","67348","","<p>I want to override certain function calls to various APIs for the sake of logging the calls, but I also might want to manipulate data before it is sent to the actual function.</p>

<p>For example, say I use a function called <code>getObjectName</code> thousands of times in my source code. I want to temporarily override this function sometimes because I want to change the behaviour of this function to see the different result.</p>

<p>I create a new source file like this:</p>

<pre><code>#include &lt;apiheader.h&gt;    

const char *getObjectName (object *anObject)
{
    if (anObject == NULL)
        return ""(null)"";
    else
        return ""name should be here"";
}
</code></pre>

<p>I compile all my other source as I normally would, but I link it against this function first before linking with the API's library. This works fine except I can obviously not call the real function inside my overriding function.</p>

<p>Is there an easier way to ""override"" a function without getting linking/compiling errors/warnings? Ideally I want to be able to override the function by just compiling and linking an extra file or two rather than fiddle around with linking options or altering the actual source code of my program.</p>
","<p>If it's only for your source that you want to capture/modify the calls, the simplest solution is to put together a header file (<code>intercept.h</code>) with:</p>

<pre><code>#ifdef INTERCEPT
    #define getObjectName(x) myGetObectName(x)
#endif
</code></pre>

<p>and implement the function as follows (in <code>intercept.c</code> which <em>doesn't</em> include <code>intercept.h</code>):</p>

<pre><code>const char *myGetObjectName (object *anObject) {
    if (anObject == NULL)
        return ""(null)"";
    else
        return getObjectName(anObject);
}
</code></pre>

<p>Then make sure each source file where you want to intercept the call has:</p>

<pre><code>#include ""intercept.h""
</code></pre>

<p>at the top.</p>

<p>Then, when you compile with ""<code>-DINTERCEPT</code>"", all files will call your function rather than the real one and your function can still call the real one.</p>

<p>Compiling without the ""<code>-DINTERCEPT</code>"" will prevent interception from occurring.</p>

<p>It's a bit trickier if you want to intercept all calls (not just those from your source) - this can generally be done with dynamic loading and resolution of the real function (with <code>dlload-</code> and <code>dlsym-</code>type calls) but I don't think it's necessary in your case.</p>
","617559"
"Explain this snippet which finds the maximum of two integers without using if-else or any other comparison operator?","67336","","<p>Find the maximum of two numbers. You should not use if-else or any other comparison operator. I found this question on online bulletin board, so i thought i should ask in StackOverflow</p>

<p>EXAMPLE
Input: 5, 10
Output: 10</p>

<p>I found this solution, can someone help me understand these lines of code</p>

<pre><code>int getMax(int a, int b) {  
    int c = a - b;  
    int k = (c &gt;&gt; 31) &amp; 0x1;  
    int max = a - k * c;  
    return max;  
}
</code></pre>
","<pre><code>int getMax(int a, int b) {
    int c = a - b;
    int k = (c &gt;&gt; 31) &amp; 0x1;
    int max = a - k * c;
    return max;
}
</code></pre>

<p>Let's dissect this.  This first line seems like it out to be straightforward - it stores the difference of <code>a</code> and <code>b</code>. This value is negative if <code>a &lt; b</code> and is nonnegative otherwise. There's actually a bug here - if the difference of the numbers <code>a</code> and <code>b</code> is so big that it can't fit into an integer, this will lead to undefined behavior - oops! So let's assume that doesn't happen here.</p>

<p>In the next line, which is</p>

<pre><code>int k = (c &gt;&gt; 31) &amp; 0x1;
</code></pre>

<p>the idea is to check if the value of <code>c</code> is negative.  In virtually all modern computers, numbers are stored in a format called <em>two's complement</em> in which the highest bit of the number is 0 if the number is positive and 1 if the number is negative.  Moreover, most ints are 32 bits.  <code>(c &gt;&gt; 31)</code> shifts the number down 31 bits, leaving the highest bit of the number in the spot for the lowest bit.  The next step of taking this number and ANDing it with 1 (whose binary representation is 0 everywhere except the last bit) erases all the higher bits and just gives you the lowest bit.  Since the lowest bit of <code>c &gt;&gt; 31</code> is the highest bit of <code>c</code>, this reads the highest bit of <code>c</code> as either 0 or 1.  Since the highest bit is 1 iff <code>c</code> is 1, this is a way of checking whether <code>c</code> is negative (1) or positive (0).  Combining this reasoning with the above, <code>k</code> is 1 if <code>a &lt; b</code> and is 0 otherwise.</p>

<p>The final step is to do this:</p>

<pre><code>int max = a - k * c;
</code></pre>

<p>If <code>a &lt; b</code>, then <code>k == 1</code> and <code>k * c = c = a - b</code>, and so</p>

<pre><code>a - k * c = a - (a - b) = a - a + b = b
</code></pre>

<p>Which is the correct max, since <code>a &lt; b</code>.  Otherwise, if <code>a &gt;= b</code>, then <code>k == 0</code> and</p>

<pre><code>a - k * c = a - 0 = a
</code></pre>

<p>Which is also the correct max.</p>
","4772821"
"Using pointer to char array, values in that array can be accessed?","67328","","<p>I created ptr as pointer to an array of 5 chars.</p>

<pre><code>char (*ptr)[5];
</code></pre>

<p>assigned it the address of a char array.</p>

<pre><code>char arr[5] = {'a','b','c','d','e'};
ptr = &amp;arr;
</code></pre>

<p>using pointer ptr can I access the char values in this array?</p>

<pre><code>printf(""\nvalue:%c"", *(ptr+0));
</code></pre>

<p>It does not print the value. </p>

<p>In my understanding ptr will contain the base address of array but it actually point to the memory required for the complete array (i.e 5 chars). Thus when ptr is incremented it moves ahead by <code>sizeof(char)*5</code> bytes. So is it not possible to access values of the array using this pointer to array?</p>
","<p>When you want to access an element, you have to first dereference your pointer, and then index the element you want (which is also dereferncing). i.e. you need to do:</p>

<p><code>printf(""\nvalue:%c"", (*ptr)[0]);</code> , which is the same as <code>*((*ptr)+0)</code></p>

<p>Note that working with pointer to arrays are not very common in C. instead, one just use a pointer to the first element in an array, and either deal with the length as a separate element, or place a senitel value at the end of the array, so one can learn when the array ends, e.g.</p>

<pre><code>char arr[5] = {'a','b','c','d','e',0}; 
char *ptr = arr; //same as char *ptr = &amp;arr[0]

printf(""\nvalue:%c"", ptr[0]);
</code></pre>
","7280442"
"string input and output in C","67240","","<p>I have this snippet of the code:</p>

<pre><code>char* receiveInput(){
    char *s;
    scanf(""%s"",s);

    return s;
}

int main()
{
    char *str = receiveInput();
    int length = strlen(str);

    printf(""Your string is %s, length is %d\n"", str, length);

    return 0;
}
</code></pre>

<p>I receive this output:</p>

<pre><code>Your string is hellàÿ"", length is 11
</code></pre>

<p>my input was:</p>

<pre><code>helloworld!
</code></pre>

<p>can somebody explain why, and why this style of the coding is bad, thanks in advance</p>
","<p><code>scanf</code> doesn't allocate memory for you.</p>

<p>You need to allocate memory for the variable passed to <code>scanf</code>.</p>

<p>You could do like this:</p>

<pre><code>char* receiveInput(){
    char *s = (char*) malloc( 100 );
    scanf(""%s"",s);
    return s;
}
</code></pre>

<p>But warning:</p>

<ol>
<li><p>the function that calls <code>receiveInput</code> will take the ownership of the returned memory: you'll have to <code>free(str)</code> after you print it in <code>main</code>. (Giving the ownership away in this way is usually not considered a good practice).</p>

<p>An easy fix is getting the allocated memory as a parameter.</p></li>
<li><p>if the input string is longer than <code>99</code> (in my case) your program will suffer of buffer overflow (which is what it's already happening).</p>

<p>An easy fix is to pass to <code>scanf</code> the length of your buffer:</p>

<pre><code>scanf(""%99s"",s);
</code></pre></li>
</ol>

<p>A fixed code could be like this:</p>

<pre><code>// s must be of at least 100 chars!!!
char* receiveInput( char *s ){
    scanf(""%99s"",s);
    return s;
}
int main()
{
    char str[100];
    receiveInput( str );
    int length = strlen(str);

    printf(""Your string is %s, length is %d\n"", str, length);

    return 0;
}
</code></pre>
","4872913"
"error: expected ')' before '*' token","67132","","<p>I have this include file (<code>memory .h</code>)</p>

<pre><code>#ifndef MEMORY_H
#define MEMORY_H

#ifdef  __cplusplus
extern ""C"" {
#endif

    typedef struct mmemory {
        int* cells;
        int* current_cell;
        int cells_number;
    } memory;

    void memory_init(memory* mymemory, int size);
    void step_left(memory* mymemory, int steps);
    void step_right(memory* mymemory, int steps);
    void cell_inc(memory* mymemory, int quantity);
    void print_cell(memory* mymemory);
    void get_char(memory* mymemory);


#ifdef  __cplusplus
}
#endif

#endif  /* MEMORY_H */
</code></pre>

<p>And this implementation file (<code>memory.c</code>)</p>

<pre><code>#include &lt;stdlib.h&gt;
#include ""memory.h""

void
memory_init (memory* mymemory, int size)
{
    mymemory-&gt;cells = (int*) malloc (sizeof (int) * size);
    mymemory-&gt;cells_number = size;
    mymemory-&gt;current_cell = (int*) ((mymemory-&gt;cells_number / 2) * sizeof (int));
}
... //other function definitions follow
</code></pre>

<p>When I try to compile <code>memory.c</code> I get this error for each and every function definition</p>

<blockquote>
  <p>src/memory.c:5: error: expected ')' before '*' token</p>
</blockquote>

<p>where line 5 is the function definition for <code>memory_init()</code></p>

<p>Can someone please tell me why I'm getting this error?</p>
","<p>Because the system <code>memory.h</code> is shadowing your <code>memory.h</code>, causing the <code>#include</code> to succeed without declaring your types.  Several possible fixes:</p>

<ul>
<li>Rename your file -- probably for the best in any case, to reduce potential confusion.</li>
<li>Include your file via a prefix subdirectory (e.g., <code>#include &lt;myproj/memory.h&gt;</code>).</li>
<li>Move your file into the same directory as the source file, allowing the <code>#include</code> precedence rules for filenames wrapped in <code>""</code> to take effect.</li>
<li>Ensure that your C pre-processor include path options place your project header path prior to the system header paths.</li>
</ul>
","3720075"
"How to get the sign, mantissa and exponent of a floating point number","67113","","<p>I have a program, which is running on two processors, one of which does not have floating point support. So, I need to perform floating point calculations using fixed point in that processor. For that purpose, I will be using a floating point emulation library. </p>

<p>I need to first extract the signs, mantissas and exponents of floating point numbers on the processor which do support floating point. So, my question is how can I get the sign, mantissa and exponent of a single precision floating point number.</p>

<p>Following the format from this figure, </p>

<p><img src=""https://i.stack.imgur.com/tPPeM.jpg"" alt=""enter image description here"">
That is what I've done so far, but except sign, neither mantissa and exponent are correct. I think, I'm missing something.</p>

<pre><code>void getSME( int&amp; s, int&amp; m, int&amp; e, float number )
{
    unsigned int* ptr = (unsigned int*)&amp;number;

    s = *ptr &gt;&gt; 31;
    e = *ptr &amp; 0x7f800000;
    e &gt;&gt;= 23;
    m = *ptr &amp; 0x007fffff;
}
</code></pre>
","<p>I think it is better to use unions to do the casts, it is clearer.</p>

<pre><code>#include &lt;stdio.h&gt;

typedef union {
  float f;
  struct {
    unsigned int mantisa : 23;
    unsigned int exponent : 8;
    unsigned int sign : 1;
  } parts;
} float_cast;

int main(void) {
  float_cast d1 = { .f = 0.15625 };
  printf(""sign = %x\n"", d1.parts.sign);
  printf(""exponent = %x\n"", d1.parts.exponent);
  printf(""mantisa = %x\n"", d1.parts.mantisa);
}
</code></pre>

<p>Example based on  <a href=""http://en.wikipedia.org/wiki/Single_precision"" rel=""nofollow noreferrer"">http://en.wikipedia.org/wiki/Single_precision</a></p>
","15685301"
"How to set include path in xcode project","67040","","<p>I am trying to use a C library in an Objective-C Xcode project. </p>

<p>The libraries directory structure is as follows:</p>

<pre><code>-- include/
    |-- config.h
    |-- lib/
    |    |-- file1.h
    |    |-- file2.h
    |    |-- file3.h
</code></pre>

<p>The library's docs say to include file1.h, and file1.h includes file2.h and file3.h.</p>

<p>I am getting ""file not found"" errors for the includes of file2.h and file3.h`. 
They are included by file1.h in the following manner:</p>

<pre><code>#include &lt;lib/file1.h&gt;
#include &lt;lib/file2.h&gt;
</code></pre>

<p>I read <a href=""http://msdn.microsoft.com/en-us/library/36k2cdd4(v=vs.80).aspx"" rel=""noreferrer"">here</a> that these angle-brackets instruct the preprocessor to search for include files along the path specified by the INCLUDE environment variable, as opposed to searching in the same directory as the file that contains the #include. </p>

<p>So I added the INCLUDE environment variable in Xcode by going to Product->Edit Scheme.. and set it to <code>/the-whole-path-to/include/</code> however, I am still getting the file not found errors.</p>

<p>The files are successfully included if I change file1.h to include them like this:</p>

<pre><code>#include ""file2.h""
</code></pre>

<p>but I'd rather not do that for every file in the library. </p>

<p>How can I fix this?</p>
","<p>Figured it out. </p>

<p>All you have to do is add the -I flag to your build setting under ""Other C Flags""</p>

<p>So in your target's build setting search for ""Other C Flags"" and add <code>-I/path-to-include/</code></p>

<p>Here's a screenshot:
<img src=""https://i.stack.imgur.com/hxCLQ.png"" alt=""enter image description here""></p>
","14153027"
"How to assign pointer address manually in C programming language?","66979","","<p>How do you assign a pointer address manually (e.g. to memory address <code>0x28ff44</code>) in the C programming language?</p>
","<p>Like this:</p>

<pre><code>void * p = (void *)0x28ff44;
</code></pre>

<p>Or if you want it as a <code>char *</code>:</p>

<pre><code>char * p = (char *)0x28ff44;
</code></pre>

<p>...etc.</p>

<p>If you're pointing to something you really, really aren't meant to change, add a <code>const</code>:</p>

<pre><code>const void * p = (const void *)0x28ff44;
const char * p = (const char *)0x28ff44;
</code></pre>

<p>...since I figure this must be some kind of ""well-known address"" and those are typically (though by no means always) read-only.</p>
","4532074"
"List of standard header files in C and C++","66975","","<p>Where could I find the list of all header files in C and C++?</p>

<p>While I am building a library, I am getting an error like '<code>tree.h not found</code>'.
I suppose this is a standard header file in C and C++.  This raised in me the curiosity to know all the header files and their contribution.</p>

<p>Is there a place I can search for?</p>

<p>I am working on Solaris Unix.</p>
","<p>Try here : <a href=""http://en.cppreference.com/w/"" rel=""noreferrer"">http://en.cppreference.com/w/</a></p>

<p>However, you may also be refering to the header files of your OS. These can be found either on MSDN (Windows) or by <code>man</code> command (POSIX systems). Or another source if you're on another OS.</p>
","2028018"
"C subscripted value is neither array nor pointer nor vector when assigning an array element value","66890","","<p>Sorry for asking the already answered question, I am a newbie to C and don't understand the solutions.
Here is my function</p>

<pre><code>int rotateArr(int *arr) {
    int D[4][4];
    int i = 0, n =0;
    for(i; i &lt; M; i ++ ){
        for(n; n &lt; N; n++){
            D[i][n] = arr[n][M - i + 1];
        }
    }
    return D;
}
</code></pre>

<p>It throws an error </p>

<blockquote>
  <p>main.c|23|error: subscripted value is neither array nor
  pointer nor vector|</p>
</blockquote>

<p>on line </p>

<blockquote>
  <p>D[i][n] = arr[n][M - i + 1];</p>
</blockquote>

<p>What's wrong? I am just setting the value of an array element to another array element.</p>

<p>The arr passed is declared as</p>

<pre><code>int S[4][4] = { { 1, 4, 10, 3 }, { 0, 6, 3, 8 }, { 7, 10 ,8, 5 },  { 9, 5, 11, 2}  };
</code></pre>
","<p>C lets you use the subscript operator <code>[]</code> on arrays and on pointers. When you use this operator on a pointer, the resultant type is the type to which the pointer points to. For example, if you apply <code>[]</code> to <code>int*</code>, the result would be an <code>int</code>.</p>

<p>That is precisely what's going on: you are passing <code>int*</code>, which corresponds to a vector of integers. Using subscript on it once makes it <code>int</code>, so you cannot apply the second subscript to it.</p>

<p>It appears from your code that <code>arr</code> should be a 2-D array. If it is implemented as a ""jagged"" array (i.e. an array of pointers) then the parameter type should be <code>int **</code>.</p>

<p>Moreover, it appears that you are trying to return a local array. In order to do that legally, you need to allocate the array dynamically, and return a pointer. However, a better approach would be declaring a special <code>struct</code> for your 4x4 matrix, and using it to wrap your fixed-size array, like this:</p>

<pre><code>// This type wraps your 4x4 matrix
typedef struct {
    int arr[4][4];
} FourByFour;
// Now rotate(m) can use FourByFour as a type
FourByFour rotate(FourByFour m) {
    FourByFour D;
    for(int i = 0; i &lt; 4; i ++ ){
        for(int n = 0; n &lt; 4; n++){
            D.arr[i][n] = m.arr[n][3 - i];
        }
    }
    return D;
}
// Here is a demo of your rotate(m) in action:
int main(void) {
    FourByFour S = {.arr = {
        { 1, 4, 10, 3 },
        { 0, 6, 3, 8 },
        { 7, 10 ,8, 5 },
        { 9, 5, 11, 2}
    } };
    FourByFour r = rotate(S);
    for(int i=0; i &lt; 4; i ++ ){
        for(int n=0; n &lt; 4; n++){
            printf(""%d "", r.arr[i][n]);
        }
        printf(""\n"");
    }
    return 0;
}
</code></pre>

<p>This <a href=""http://ideone.com/7vjlU8"">prints the following</a>:</p>

<pre><code>3 8 5 2 
10 3 8 11 
4 6 10 5 
1 0 7 9 
</code></pre>
","19908521"
"practical examples use dup or dup2","66886","","<p>I know what does <a href=""http://www.opengroup.org/onlinepubs/009695399/functions/dup.html"" rel=""noreferrer""><code>dup</code></a> or <code>dup2</code> do ,but I have no idea when it would be used. Any practical examples? Thanks.</p>
","<p>One example use would be I/O redirection. For this you fork a child process and close the stdin or stdout file descriptors (0 and 1) and then you do a dup() on another filedescriptor of your choice which will now be mapped to the lowest available file descriptor, which is in this case 0 or 1.</p>

<p>Using this you can now exec any child process which is possibly unaware of your application and whenever the child writes on the stdout (or reads from stdin, whatever you configured) the data gets written on the provided filedescriptor instead.</p>

<p>Shells use this to implement commandos with pipes, e.g. <code>/bin/ls | more</code> by connecting the stdout of one process to the stdin of the other.</p>
","1720577"
"Easiest way to get file's contents in C","66840","","<p>What is the simplest way (least error-prone, least lines of code, however you want to interpret it) to open a file in C and read its contents into a string (char*, char[], whatever)?</p>
","<p>I tend to just load the entire buffer as a raw memory chunk into memory and do the parsing on my own. That way I have best control over what the standard lib does on multiple platforms.</p>

<p>This is a stub I use for this. you may also want to check the error-codes for fseek, ftell and fread. (omitted for clarity).</p>

<pre><code>char * buffer = 0;
long length;
FILE * f = fopen (filename, ""rb"");

if (f)
{
  fseek (f, 0, SEEK_END);
  length = ftell (f);
  fseek (f, 0, SEEK_SET);
  buffer = malloc (length);
  if (buffer)
  {
    fread (buffer, 1, length, f);
  }
  fclose (f);
}

if (buffer)
{
  // start to process your data / extract strings here...
}
</code></pre>
","174552"
"Variable declaration in a header file","66747","","<p>In case I have a variable that may be used in several sources - is it a good practice to declare it in a header? or is it better to declare it in a <code>.c</code> file and use <code>extern</code> in other files?</p>
","<p>You should <em>declare</em> the variable in a header file:</p>

<pre><code>extern int x;
</code></pre>

<p>and then <em>define</em> it in <em>one</em> C file:</p>

<pre><code>int x;
</code></pre>

<p>In C, the difference between a definition and a declaration is that the definition reserves space for the variable, whereas the declaration merely introduces the variable into the symbol table (and will cause the linker to go looking for it when it comes to link time).</p>
","1164190"
"What does this GCC error ""... relocation truncated to fit..."" mean?","66718","","<p>I am programming the host side of a host-accelerator system. The host runs on the PC under Ubuntu Linux and communicates with the embedded hardware via a USB connection. The communication is performed by copying memory chunks to and from the embedded hardware's memory.</p>

<p>On the board's memory there is a memory region which I use as a mailbox where I write and read the data. The mailbox is defined as a structure and I use the same definition to allocate a mirror mailbox in my host space.</p>

<p>I used this technique successfully in the past so now I copied the host Eclipse project to my current project's workspace, and made the appropriate name changes. The strange thing is that when building the host project I now get the following message:</p>

<blockquote>
  <p>Building target: fft2d_host<br>
  Invoking: GCC C Linker<br>
   gcc -L/opt/adapteva/esdk/tools/host/x86_64/lib -o ""fft2d_host""  ./src/fft2d_host.o   -le_host -lrt  </p>
  
  <p>./src/fft2d_host.o: In function `main':  </p>
  
  <p><strong>fft2d_host.c:(.text+0x280): relocation truncated to fit: R_X86_64_PC32 against symbol `Mailbox' defined in COMMON section in ./src/fft2d_host.o</strong></p>
</blockquote>

<p>What does this error mean and why it won't build on the current project, while it is OK with the older project?</p>
","<p>You are attempting to link your project in such a way that the target of a relative addressing scheme is further away than can be supported with the 32-bit displacement of the chosen relative addressing mode.  This could be because the current project is larger, because it is linking object files in a different order, or because there's an unnecessarily expansive mapping scheme in play. </p>

<p>This question is a perfect example of why it's often productive to do a web search on the generic portion of an error message - you find things like this:</p>

<p><a href=""http://www.technovelty.org/code/c/relocation-truncated.html"" rel=""noreferrer"">http://www.technovelty.org/code/c/relocation-truncated.html</a></p>

<p>Which offers some curative suggestions.</p>
","10486230"
"I do not understand how execlp() works in Linux","66672","","<p>I have spent the last 2 days trying to understand the <code>execlp()</code> system call, but yet here I am. Let me get straight to the issue.</p>

<p>The <code>man page</code> of execlp declares the system call as <code>int execlp(const char *file, const char *arg, ...);</code> with the description: <em>The const char arg and subsequent ellipses in the execl(), execlp(), and execle() functions can be thought of as arg0, arg1, ..., argn.</em></p>

<p>Yet I see the system call being called like this in our text book: <code>execlp(“/bin/sh”, ..., “ls -l /bin/??”, ...);</code> (the ""..."" are for us to figure out as students). However this system call doesn´t even resemble anything like the declaration on the <code>man page</code> of the system call.</p>

<p>I am super confused. Any help is appreciated.</p>
","<p>this prototype:</p>

<pre><code>  int execlp(const char *file, const char *arg, ...);
</code></pre>

<p>Says that execlp ìs a variable argument function. It takes 2 <code>const char *</code>. The rest of the arguments, if any,  are the additional arguments to hand over to program we want to run - also <code>char *</code> - all these are C strings (and the last argument must be a NULL pointer)</p>

<p>So, the <code>file</code> argument is the path name of an executable file to be executed. <code>arg</code> is the string we want to appear as <code>argv[0]</code> in the executable. By convention, <code>argv[0]</code> is just the file name of the executable, normally it's set to the same as <code>file</code>.</p>

<p>The <code>...</code> are now the additional arguments to give to the executable.</p>

<p>Say you run this from a commandline/shell:</p>

<pre><code>$ ls
</code></pre>

<p>That'd be <code>execlp(""ls"", ""ls"", (char *)NULL);</code>
Or if you run</p>

<pre><code>$ ls -l /
</code></pre>

<p>That'd be <code>execlp(""ls"", ""ls"", ""-l"", ""/"", (char *)NULL);</code></p>

<p>So on to <code>execlp(""/bin/sh"", ..., ""ls -l /bin/??"", ...);</code></p>

<p>Here you are going to the shell, /bin/sh , and you're giving the shell a command to execute. That command is ""ls -l /bin/??"". You can run that manually from a commandline/shell:</p>

<pre><code> $ ls -l /bin/??
</code></pre>

<p>Now, how do you run a shell and tell it to execute a command ? You open up the documentation/man page for your shell and read it.</p>

<p>What you want to run is:</p>

<pre><code>$ /bin/sh -c ""ls -l /bin/??""
</code></pre>

<p>This becomes</p>

<pre><code>  execlp(""/bin/sh"",""/bin/sh"", ""-c"", ""ls -l /bin/??"", (char *)NULL);
</code></pre>

<p>Side note:
The <code>/bin/??</code> is doing pattern matching, this pattern matching is done by the shell, and it expands to all files under /bin/ with 2 characters. If you simply did </p>

<pre><code>  execlp(""ls"",""ls"", ""-l"", ""/bin/??"", (char *)NULL);
</code></pre>

<p>Probably nothing would happen (unless there's a file actually named <code>/bin/??</code>) as there's no shell that interprets and expands /bin/??</p>
","21559499"
"C/C++ include file order/best practices","66625","","<p>Is there a recommended order in which include files should be specified?</p>

<p>For example, do the system files, STL, and Boost go before or after the local include files?</p>

<p>Is there a particular reason to choose one or another? I am assuming include files have proper dependencies specified.</p>
","<p>I don't think there's a recommended order, as long as it compiles! What's annoying is when some headers require other headers to be included first... That's a problem with the headers themselves, not with the order of includes.</p>

<p>My personal preference is to go from local to global, each subsection in alphabetical order, i.e.:</p>

<ol>
<li>h file corresponding to this cpp file (if applicable)</li>
<li>headers from the same component,</li>
<li>headers from other components,</li>
<li>system headers.</li>
</ol>

<p>My rationale for 1. is that it should prove that each header (for which there is a cpp) can be <code>#include</code>d without prerequisites. And the rest just seems to flow logically from there.</p>
","2762596"
"storage size of ‘names’ isn’t known","66534","","<p>I get this error while compiling this .c source file</p>

<blockquote>
  <p>/INIT_SOURCE_BUILD/src/names_list.c:7:
  error: storage size of ‘names’ isn’t
  known</p>
</blockquote>

<pre><code>#include &lt;stdio.h&gt;
#include ""list.h""

int main(){

    struct  List names;
    names-&gt;size = 3;

    struct ListElmt michael;
    struct ListElmt john;
    struct ListElmt adams;

    names-&gt;head = michael;

    michael-&gt;data = 12;
    michael-&gt;next = john;
    john-&gt;data = 14;
    john-&gt;next = adams;
    adams-&gt;data = 16;

    struct ListElmt pointer = List-&gt;head;
    for(int x = 0; x &lt; 3 ; x++){
        printf(""Iteration.%d data: %d"", x, pointer-&gt;data);
        pointer-&gt;next = pointer-&gt;next-&gt;next;
    }
}
</code></pre>

<p>and here is header of this linked list</p>

<pre><code>#ifndef LIST_H
#define LIST_H

#include &lt;stdio.h&gt;

/*                                      Define linked list elements*/

typedef struct _ListElmt{

void                *data;
struct _ListElmt        *next;

} ListElmt;

/*                                      Define a structure for the list*/

typedef struct _List{

int                 size;
int                 (*match)(const void *key1, const void *key2);
void                (*destroy)(void *data);

ListElmt             *head;
ListElmt             *tail;

} List;

void list_init(List *list, void (*destroy)(void *data));

void list_destroy(List *list);

int list_ins_next(List *list, ListElmt *element, const void *data);

int list_rem_next(List *list, ListElmt *element, void **data);

int list_size(const List *list);

ListElmt *list_head(const List *list);

ListElmt *list_tail(const List *list);

int list_is_head(const ListElmt *element);

int list_is_tail(const ListElmt *element);

void *list_data(const ListElmt *element);

ListElmt *list_next(const ListElmt *element);
#endif
</code></pre>
","<p>When you <code>typedef</code> a <code>struct</code> like that, you don't have to use <code>struct</code> when declaring it: </p>

<pre><code>List names;
</code></pre>

<p>instead of</p>

<pre><code>struct List names;
</code></pre>

<p>It's also not a pointer, so <code>names-&gt;size</code> should be <code>names.size</code>.</p>
","4045587"
"How to pass macro definition from ""make"" command line arguments (-D) to C source code?","66514","","<p>I usually pass macro definitions from ""make command line"" to a ""makefile"" using the option :
-Dname=value. The definition is accessible inside the makefile.</p>

<p>I also pass macro definitions from the ""makefile"" to the ""source code"" using the similar compiler option :
-Dname=value (supported in many compilers). This definition is accessible in the source code.</p>

<p>What I need now, is to allow the user of my makefile to be able to pass arbitrary macro definitions from the ""make.exe commandline"" to ""source code"" right away, without having to change anything in the makefile.</p>

<p>so the user can type :
make -f mymakefile.mk -SOMEOPTION var=5</p>

<p>then directly the code main.c can see var :</p>

<pre><code>int main()
{
  int i = var;
}
</code></pre>
","<p>Call <code>make</code> command this way:</p>

<pre><code>make CFLAGS=-Dvar=42
</code></pre>

<p>And be sure to use <code>$(CFLAGS)</code> in your compile command in the Makefile. As @jørgensen mentioned , putting the variable assignment after the <code>make</code> command will override the <code>CFLAGS</code> value already defined the Makefile.</p>

<p>Alternatively you could set <code>-Dvar=42</code> in another variable than <code>CFLAGS</code> and then reuse this variable in <code>CFLAGS</code> to avoid completely overriding <code>CFLAGS</code>.</p>
","9052935"
"Purpose of Unions in C and C++","66473","","<p>I have used unions earlier comfortably; today I was alarmed when I read <a href=""https://stackoverflow.com/questions/1812348/a-question-about-union-in-c"">this post</a> and came to know that this code </p>

<pre><code>union ARGB
{
    uint32_t colour;

    struct componentsTag
    {
        uint8_t b;
        uint8_t g;
        uint8_t r;
        uint8_t a;
    } components;

} pixel;

pixel.colour = 0xff040201;  // ARGB::colour is the active member from now on

// somewhere down the line, without any edit to pixel

if(pixel.components.a)      // accessing the non-active member ARGB::components
</code></pre>

<p>is actually undefined behaviour I.e. reading from a member of the union other than the one recently written to leads to undefined behaviour. If this isn't the intended usage of unions, what is? Can some one please explain it elaborately?</p>

<p><strong>Update:</strong></p>

<p>I wanted to clarify a few things in hindsight.</p>

<ul>
<li>The answer to the question isn't the same for C and C++; my ignorant younger self tagged it as both C and C++.</li>
<li>After scouring through C++11's standard I couldn't conclusively say that it calls out accessing/inspecting a non-active union member is undefined/unspecified/implementation-defined. All I could find was §9.5/1:

<blockquote>
  <p>If a standard-layout union contains several standard-layout structs that share a common initial sequence, and if an object of this standard-layout union type contains one of the standard-layout structs, it is permitted to inspect the common initial sequence of any of standard-layout struct members. §9.2/19: Two standard-layout structs share a common initial sequence if corresponding members have layout-compatible types and either neither member is a bit-field or both are bit-fields with the same width for a sequence of one or more initial members.</p>
</blockquote></li>
<li>While in C, (<a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_283.htm"" rel=""noreferrer"">C99 TC3 - DR 283</a> onwards) it's legal to do so (<a href=""https://stackoverflow.com/questions/2310483/purpose-of-unions-in-c-and-c#comment26826326_2313676"">thanks to Pascal Cuoq</a> for bringing this up). However, attempting to do <em>it can still lead to undefined behavior</em>, if the value read happens to be invalid (so called ""trap representation"") for the type it is read through. Otherwise, the value read is implementation defined.</li>
<li><p>C89/90 called this out under unspecified behavior (Annex J) and K&amp;R's book says it's implementation defined. Quote from K&amp;R:</p>

<blockquote>
  <p>This is the purpose of a union - a single variable that can legitimately hold any of one of several types. [...] so long as the usage is consistent: the type retrieved must be the type most recently stored. It is the programmer's responsibility to keep track of which type is currently stored in a union; the results are implementation-dependent if something is stored as one type and extracted as another.</p>
</blockquote></li>
<li><p>Extract from Stroustrup's TC++PL (emphasis mine)</p>

<blockquote>
  <p>Use of unions can be essential for compatness of data [...] <em>sometimes misused for ""type conversion</em>"".</p>
</blockquote></li>
</ul>

<p><em>Above all, this question (whose title remains unchanged since my ask) was posed with an intention of understanding the purpose of unions AND not on what the standard allows</em> E.g. Using inheritance for code reuse is, of course, allowed by the C++ standard, but <a href=""https://isocpp.org/wiki/faq/objective-c#objective-c-and-inherit"" rel=""noreferrer"">it wasn't the purpose or the original intention of introducing inheritance as a C++ language feature</a>. This is the reason Andrey's answer continues to remain as the accepted one.</p>
","<p>The purpose of unions is rather obvious, but for some reason people miss it quite often.  </p>

<p><strong>The purpose of union  is <em>to save memory</em> by using the same memory region for storing different objects at different times.</strong> That's it.</p>

<p>It is like a room in a hotel. Different people live in it for non-overlapping periods of time. These people never meet, and generally don't know anything about each other. By properly managing the time-sharing of the rooms (i.e. by making sure different people don't get assigned to one room at the same time), a relatively small hotel can provide accomodations to a relatively large number of people, which is what hotels are for.</p>

<p>That's exactly what union does. If you know that several objects in your program hold values with non-overlapping value-lifetimes, then you can ""merge"" these objects into a union and thus save memory. Just like a hotel room has at most one ""active"" tenant at each moment of time, a union has at most one ""active"" member at each moment of program time. Only the ""active"" member can be read. By writing into other member you switch the ""active"" status to that other member.</p>

<p>For some reason, this original purpose of the union got ""overriden"" with something completely different: writing one member of a union and then inspecting it through another member. This kind of memory reinterpretation (aka ""type punning"") is <strike>not a valid use of unions. It generally leads to undefined behavior</strike> is decribed as producing implemenation-defined behavior in C89/90.</p>

<p><strong>EDIT:</strong> Using unions for the purposes of type punning (i.e. writing one member and then reading another) was given a more detailed definition in one of the Technical Corrigendums to C99 standard (see <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_257.htm"" rel=""noreferrer"">DR#257</a> and <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_283.htm"" rel=""noreferrer"">DR#283</a>). However, keep in mind that formally this does not protect you from running into undefined behavior by attempting to read a trap representation.</p>
","2313676"
"C# vs C - Big performance difference","66394","","<p>I'm finding massive performance differences between similar code in C anc C#.</p>

<p>The C code is:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;math.h&gt;

main()
{
    int i;
    double root;

    clock_t start = clock();
    for (i = 0 ; i &lt;= 100000000; i++){
        root = sqrt(i);
    }
    printf(""Time elapsed: %f\n"", ((double)clock() - start) / CLOCKS_PER_SEC);   

}
</code></pre>

<p>And the C# (console app) is:</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleApplication2
{
    class Program
    {
        static void Main(string[] args)
        {
            DateTime startTime = DateTime.Now;
            double root;
            for (int i = 0; i &lt;= 100000000; i++)
            {
                root = Math.Sqrt(i);
            }
            TimeSpan runTime = DateTime.Now - startTime;
            Console.WriteLine(""Time elapsed: "" + Convert.ToString(runTime.TotalMilliseconds/1000));
        }
    }
}
</code></pre>

<p>With the above code, the C# completes in 0.328125 seconds (release version) and the C takes 11.14 seconds to run.</p>

<p>The c is being compiled to a windows executable using mingw.</p>

<p>I've always been under the assumption that C/C++ were faster or at least comparable to C#.net.  What exactly is causing the C to run over 30 times slower?</p>

<p>EDIT:
It does appear that the C# optimizer was removing the root as it wasn't being used.
I changed the root assignment to root += and printed out the total at the end.
I've also compiled the C using cl.exe with the /O2 flag set for max speed.</p>

<p>The results are now:
3.75 seconds for the C
2.61 seconds for the C#</p>

<p>The C is still taking longer, but this is acceptable</p>
","<p>Since you never use 'root', the compiler may have been removing the call to optimize your method.</p>

<p>You could try to accumulate the square root values into an accumulator, print it out at the end of the method, and see what's going on.</p>

<p>Edit : see <a href=""https://stackoverflow.com/questions/686483/c-vs-c-big-performance-difference/686617#686617"">Jalf's answer</a> below</p>
","686515"
"fork() and pipes() in c","66336","","<p>What is <code>fork</code> and what is <code>pipe</code>?
Any scenarios explaining why their use is necessary will be appreciated.
What are the differences between <code>fork</code> and <code>pipe</code> in C? 
Can we use them in C++?</p>

<p>I need to know this is because I want to implement a program in C++ which can access live video input, convert its format and write it to a file.
What would be the best approach for this?
I have used x264 for this. So far I have implemented the part of conversion on a file format.
Now I have to implement it on a live stream.
Is it a good idea to use pipes? Capture video in another process and feed it to the other?</p>
","<p>A pipe is a mechanism for interprocess communication. Data written to the pipe by one process can be read by another process. The primitive for creating a pipe is the <code>pipe</code> function. This creates both the reading and writing ends of the pipe. It is not very useful for a single process to use a pipe to talk to itself. In typical use, a process creates a pipe just before it <code>forks</code> one or more child processes. The pipe is then used for communication either between the parent or child processes, or between two sibling processes. A familiar example of this kind of communication can be seen in all operating system shells. When you type a command at the shell, it will spawn the executable represented by that command with a call to <code>fork</code>. A pipe is opened to the new child process and its output is read and printed by the shell. <a href=""http://www.gnu.org/s/libc/manual/html_node/Creating-a-Pipe.html#Creating-a-Pipe"" rel=""noreferrer"">This page</a> has a full example of the <code>fork</code> and <code>pipe</code> functions. For your convenience, the code is reproduced below:</p>

<pre><code> #include &lt;sys/types.h&gt;
 #include &lt;unistd.h&gt;
 #include &lt;stdio.h&gt;
 #include &lt;stdlib.h&gt;

 /* Read characters from the pipe and echo them to stdout. */

 void
 read_from_pipe (int file)
 {
   FILE *stream;
   int c;
   stream = fdopen (file, ""r"");
   while ((c = fgetc (stream)) != EOF)
     putchar (c);
   fclose (stream);
 }

 /* Write some random text to the pipe. */

 void
 write_to_pipe (int file)
 {
   FILE *stream;
   stream = fdopen (file, ""w"");
   fprintf (stream, ""hello, world!\n"");
   fprintf (stream, ""goodbye, world!\n"");
   fclose (stream);
 }

 int
 main (void)
 {
   pid_t pid;
   int mypipe[2];

   /* Create the pipe. */
   if (pipe (mypipe))
     {
       fprintf (stderr, ""Pipe failed.\n"");
       return EXIT_FAILURE;
     }

   /* Create the child process. */
   pid = fork ();
   if (pid == (pid_t) 0)
     {
       /* This is the child process.
          Close other end first. */
       close (mypipe[1]);
       read_from_pipe (mypipe[0]);
       return EXIT_SUCCESS;
     }
   else if (pid &lt; (pid_t) 0)
     {
       /* The fork failed. */
       fprintf (stderr, ""Fork failed.\n"");
       return EXIT_FAILURE;
     }
   else
     {
       /* This is the parent process.
          Close other end first. */
       close (mypipe[0]);
       write_to_pipe (mypipe[1]);
       return EXIT_SUCCESS;
     }
 }
</code></pre>

<p>Just like other C functions you can use both <code>fork</code> and <code>pipe</code> in C++.</p>
","4812963"
"Create Random Number Sequence with No Repeats","66287","","<h3>Duplicate:</h3>

<blockquote>
  <p><a href=""https://stackoverflow.com/questions/196017/unique-random-numbers-in-o1"">Unique random numbers in O(1)?</a></p>
</blockquote>

<p>I want an pseudo random number generator that can generate numbers with no repeats in a random order.</p>

<p>For example:</p>

<p>random(10)</p>

<p>might return
5, 9, 1, 4, 2, 8, 3, 7, 6, 10</p>

<p>Is there a better way to do it other than making the range of numbers and shuffling them about, or checking the generated list for repeats?</p>

<hr>

<h3>Edit:</h3>

<p>Also I want it to be efficient in generating big numbers without the entire range.</p>

<hr>

<h3>Edit:</h3>

<p>I see everyone suggesting shuffle algorithms. But if I want to generate large random number (1024 byte+) then that method would take alot more memory than if I just used a regular RNG and inserted into a Set until it was a specified length, right? Is there no better mathematical algorithm for this.</p>
","<p>You may be interested in a linear feedback shift register.
We used to build these out of hardware, but I've also done them in software. It uses a shift register with some of the bits xor'ed and fed back to the input, and if you pick just the right ""taps"" you can get a sequence that's as long as the register size.  That is, a 16-bit lfsr can produce a sequence 65535 long with no repeats.  It's statistically random but of course eminently repeatable.  Also, if it's done wrong, you can get some embarrassingly short sequences.  If you look up the lfsr, you will find examples of how to construct them properly (which is to say, ""maximal length"").</p>
","694303"
"How to Declare a 32-bit Integer in C","66237","","<p>What's the best way to declare an integer type which is always 4 byte on any platforms? I don't worry about certain device or old machines which has 16-bit <code>int</code>.</p>
","<pre><code>#include &lt;stdint.h&gt;

int32_t my_32bit_int;
</code></pre>
","1229150"
"List of all users and groups","66185","","<p>I'm trying to get a list of <strong>all</strong> users and all groups on Mac OS X 10.5+.  How can I do this?</p>

<p>For example, the list of all users on my machine should return: 
<code>_amavisd, _appowner, _appserver, _ard, _atsserver, _calendar, _carddav, _clamav, _coreaudiod, _cvmsroot, _cvs, _cyrus, _devdocs, _dovecot, _eppc, _installer, _jabber, _lda, _locationd, _lp, _mailman, _mcxalr, _mdnsresponder, _mysql, _pcastagent, _pcastserver, _postfix, _qtss, _sandbox, _screensaver, _securityagent, _serialnumberd, _softwareupdate, _spotlight, _sshd, _svn, _teamsserver, _timezone, _tokend, _trustevaluationagent, _unknown, _update_sharing, _usbmuxd, _uucp, _windowserver, _www, _xgridagent, _xgridcontroller, daemon, dave, nobody, root</code> (that was painstakingly compiled manually).</p>

<p>How can I get that list (and the corresponding list of all groups) programmatically?  I'm open to alternative (non-c based) solutions, such as Applescript, commandline, etc.</p>

<hr>

<p><strong>Update a long time later</strong></p>

<p><a href=""https://stackoverflow.com/a/1308064/115730"">TALlama's answer</a> prompted me to investigate the API to Open Directory, and I found that this list can be easily acquired programmatically:</p>

<pre><code>#import &lt;OpenDirectory/OpenDirectory.h&gt;
ODSession *s = [ODSession defaultSession];
ODNode *root = [ODNode nodeWithSession:s name:@""/Local/Default"" error:nil];
ODQuery *q = [ODQuery queryWithNode:root forRecordTypes:kODRecordTypeUsers attribute:nil matchType:0 queryValues:nil returnAttributes:nil maximumResults:0 error:nil];

NSArray *results = [q resultsAllowingPartial:NO error:nil];
for (ODRecord *r in results) {
    NSLog(@""%@"", [r recordName]);
}
</code></pre>

<p>That will log the usernames of every user on the system.  Substituting in <code>kODRecordTypeGroups</code> will get you the list of all the groups.</p>

<p>The <code>-[ODQuery resultsAllowingPartial:error:]</code> method is a <em>blocking</em> call, so you'd either want to execute this code on a background thread, or use an <code>&lt;ODQueryDelegate&gt;</code> to aggregate the results.</p>
","<p>The tool you want is almost certainly dscl. The shortest way to do it was already pointed out:</p>

<pre><code>$ dscl . list /users
$ dscl . list /groups
</code></pre>

<p>If you want to output information about each user, though, use <code>readall</code>:</p>

<pre><code>$ dscl . readall /users
$ dscl . readall /groups
</code></pre>

<p>And if you need to programatically parse said information, use -plist to make your life easier:</p>

<pre><code>$ dscl -plist . readall /users
$ dscl -plist . readall /groups
</code></pre>
","1308064"
"Allocating memory for a Structure in C","66091","","<p>I'm tasked to create a program which dynamically allocates memory for a structure.
normally we would use</p>

<pre><code>x=malloc(sizeof(int)*y);
</code></pre>

<p>However, what do I use for a structure variable?
I don't think its possible to do</p>

<pre><code>struct st x = malloc(sizeof(struct)); 
</code></pre>

<p>Could someone help me out?
Thanks!</p>
","<p>My favorite:</p>

<pre><code>#include &lt;stdlib.h&gt;

struct st *x = malloc(sizeof *x); 
</code></pre>

<p>Note that:</p>

<ul>
<li><code>x</code> must be a pointer</li>
<li>no cast is required</li>
<li>include appropriate header</li>
</ul>
","2177409"
"Is char signed or unsigned by default?","65956","","<p>In the book ""Complete Reference of C"" it is mentioned that char is by default unsigned.</p>

<p>But I am trying to verify this with GCC as well as Visual Studio. It is taking it as signed by default.</p>

<p>Which one is correct?</p>
","<p>The book is wrong.  The standard does not specify if plain <code>char</code> is signed or unsigned.</p>

<p>In fact, the standard defines three distinct types: <code>char</code>, <code>signed char</code>, and <code>unsigned char</code>.  If you <code>#include &lt;limits.h&gt;</code> and then look at <code>CHAR_MIN</code>, you can find out if plain <code>char</code> is <code>signed</code> or <code>unsigned</code> (if <code>CHAR_MIN</code> is less than 0 or equal to 0), but even then, the <em>three types are distinct</em> as far as the standard is concerned.</p>
","2054941"
"Checking if float is an integer","65954","","<p>How can I check if a <code>float</code> variable contains an integer value? So far, I've been using:</p>

<pre><code>float f = 4.5886;
if (f-(int)f == 0)
     printf(""yes\n"");
else printf(""no\n"");
</code></pre>

<p>But I wonder if there is a better solution, or if this one has any (or many) drawbacks.</p>
","<p>Apart from the fine answers already given, you can also use <code>ceilf(f) == f</code> or <code>floorf(f) == f</code>. Both expressions return <code>true</code> if <code>f</code> is an integer. They also return<code>false</code> for NaNs (<a href=""https://stackoverflow.com/questions/1145443/why-is-double-nan-not-equal-to-itself"">NaNs always compare unequal</a>) and <code>true</code> for ±infinity, and don't have the problem with overflowing the integer type used to hold the truncated result, because <code>floorf()</code>/<code>ceilf()</code> return <code>float</code>s.</p>
","5797186"
"Invalid Operands to binary / (have 'int *' and 'int')?","65933","","<p>Every time I try this:</p>

<pre><code>long crypt(int *integer)
{
printf(""Enter five digit integer:\n"");  
scanf(""%i"",integer);

int digit1=integer/10000;
int digit2=(integer%10000)/1000;
int digit3=(integer%1000)/100;
int digit4=(integer%100)/10;
int digit5=(integer%10)/1;

const char *digit1c[10];
const char *digit2c[10];
const char *digit3c[10];
const char *digit4c[10];
const char *digit5c[10];
</code></pre>

<p>(There's more but this seems to be the problem, I'll add the rest by request.)</p>

<p>then it return this error:</p>

<pre><code>math2.h:44:20: error: invalid operands to binary / (have ‘int *’ and ‘int’)
math2.h:45:21: error: invalid operands to binary % (have ‘int *’ and ‘int’)
math2.h:46:21: error: invalid operands to binary % (have ‘int *’ and ‘int’)
math2.h:47:21: error: invalid operands to binary % (have ‘int *’ and ‘int’)
math2.h:48:21: error: invalid operands to binary % (have ‘int *’ and ‘int’)
</code></pre>

<p>I know it has something to do with the operators I used to initialize the digits and I did try changing their type to ""int *"" but that didn't work.
So what's happening here exactly?</p>
","<p><code>integer</code> is a <strong>pointer</strong> to <code>int</code> (<code>int*</code>), so when you want to use the int it points to, you need to dereference it:</p>

<pre><code>int digit1=(*integer)/10000; // and so on...
</code></pre>
","8460893"
"Learn C first before learning Objective-C","65790","","<p>Being an aspiring Apple developer, I want to get the opinions of the community if it is better to learn C first before moving into Objective-C and ultimately the Cocoa Framework?</p>

<p>My gut says learn C, which will give me a good foundation.</p>
","<p>I would learn C first. I learned C (and did a lot in C) before moving to Obj-C. I have many colleagues who never were real C programmers, they started with Obj-C and learned only as much C as necessary.</p>

<p>Every now and then I see how they solve a problem entirely in Obj-C, sometimes resulting in a very clumsy solutions. Usually I then replace some Obj-C code with pure C code (after all you can mix them as much as you like, the content of an Obj-C method can be entirely, pure C code). Without any intention to insult any Obj-C programmer, there are solutions that are very elegant in Obj-C, these are solutions that just work (and look) a lot better thanks to <em>objects</em> (OOP programming can make complex programs much more lovely than functional programming; polymorphism for example is a brilliant feature)... and I really like Obj-C  (much more than C++! I hate the C++ syntax and some language features are plain overkill and lead to bad development patterns IMHO); however, when I sometimes re-write Obj-C code of my colleagues (and I really only do so, if I think this is absolutely necessary), the resulting code is usually 50% smaller, needs only 25% of the memory it used before and is about 400% faster at runtime.</p>

<p>What I'm trying to say here: Every language has its pros and cons. C has pros and cons and so does Obj-C. However, the really great feature of Obj-C (that's why I even like it more than Java) is that you can jump to plain C at will and back again. Why this is such a great feature? Because just like Obj-C fixes many of the cons of pure C, pure C can fix some of the cons of Obj-C. If you mix them together you'll receive a very powerful team.</p>

<p>If you only learn Obj-C and have no idea of C or only know the very basics of it and never tried how elegantly it can solve some common problems, you actually learned only half of Obj-C. C is a fundamental part of Obj-C. The ability to use C at any time and everywhere is a fundamental feature of it.</p>

<p>A typical example was some code we used that had to encode data in base64, but we could not use an external library for that (no OpenSSL lib). We used a base64 encoder, entirely written using Cocoa classes. It was working okay, but when we made it encode 200 MB of binary data, it took an eternity and the memory overhead was unacceptable. I replaced it with a tiny, ultra compact base64 encoder written entirely as one C function (I copied the function body into the method body, method took NSData as input and returned NSString as output, however inside the function everything was C). The C encoder was so much more compact, it beat the pure Cocoa encoder by the factor 8 in speed and the memory overhead was also much less. Encoding/Decoding data, playing around with bits and similar low level tasks are just the strong points of C.</p>

<p>Another example was some UI code that drew a lot of graphs. For storing the data necessary to paint the graphs, we used NSArray's. Actually NSMutableArray's, since the graph was animated. Result: Very slow graph animation. We replaced all NSArray's with normal C arrays, objects with structs (after all graph coordinate information is nothing you must have in objects), enumerator access with simple for loops and started moving data between the arrays with memcopy instead of taking data from one array to the other one, index for index. The result: A speed up by the factor 4. The graph animated smoothly, even on older PPC systems.</p>

<p>The weakness of C is that every more complex program gets ugly in the long run. Keeping C applications readable, extensible and manageable demands a lot of discipline of a programmer. Many projects fail because this discipline is missing. Obj-C makes it easy for you to structure your application using classes, inheritance, protocols and so on. That said, I would not use pure C functionality across the borders of a method unless necessary. I prefer to keep all code in an Objective-C app within the method of an object; everything else defeats the purpose of an OO application. However within the method I sometimes use pure C exclusively.</p>
","180832"
"Simple Signals - C programming and alarm function","65524","","<pre><code>#include  &lt;stdio.h&gt;
#include  &lt;signal.h&gt;


void  ALARMhandler(int sig)
{
  signal(SIGALRM, SIG_IGN);          /* ignore this signal       */
  printf(""Hello"");
  signal(SIGALRM, ALARMhandler);     /* reinstall the handler    */
}

int main(int argc, char *argv[])
{
  alarm(2);                     /* set alarm clock          */
  while (1)
    ;
  printf(""All done"");
}
</code></pre>

<p>I expect the program to print ""hello"" after 2 seconds, but instead the output is ""zsh: alarm      ./a.out""</p>

<p>Any idea what is going on?</p>
","<p>You're forgetting to set the alarm handler initially.  Change the start of <code>main()</code> like:</p>

<pre><code>int main(int argc, char *argv[])
{
   signal(SIGALRM, ALARMhandler);
   ...
</code></pre>

<p>Also, the signal handler will probably print nothing.  That's because the C library caches output until it sees an end of line.  So:</p>

<pre><code>void  ALARMhandler(int sig)
{
  signal(SIGALRM, SIG_IGN);          /* ignore this signal       */
  printf(""Hello\n"");
  signal(SIGALRM, ALARMhandler);     /* reinstall the handler    */
}
</code></pre>

<p>For a real-world program, printing from a signal handler is not very safe.  A signal handler should do as little as it can, preferably only setting a flag here or there.  And the flag should be declared <code>volatile</code>.</p>
","1784192"
"How do I gaussian blur an image without using any in-built gaussian functions?","65505","","<p>I want to blur my image using the native Gaussian blur formula. I read <a href=""http://en.wikipedia.org/wiki/Gaussian_blur"" rel=""nofollow noreferrer"">this</a>, but I am not sure how to implement this.</p>

<p>How do I use the formula to decide weights?</p>

<p>I do not want to use any built in functions like what MATLAB has</p>
","<p>Writing a naive gaussian blur is actually pretty easy.  It is done in exactly the same way as any other convolution filter.  The only difference between a box and a gaussian filter is the matrix you use.</p>

<p>Imagine you have an image defined as follows:</p>

<pre><code> 0  1  2  3  4  5  6  7  8  9
10 11 12 13 14 15 16 17 18 19
20 21 22 23 24 25 26 27 28 29
30 31 32 33 34 35 36 37 38 39
40 41 42 43 44 45 46 47 48 49
50 51 52 53 54 55 56 57 58 59
60 61 62 63 64 65 66 67 68 69
70 71 72 73 74 75 76 77 78 79
80 81 82 83 84 85 86 87 88 89
90 91 92 93 94 95 96 97 98 99
</code></pre>

<p>A 3x3 box filter matrix is defined as follows:</p>

<pre><code>0.111 0.111 0.111
0.111 0.111 0.111
0.111 0.111 0.111
</code></pre>

<p>To apply the gaussian blur you would do the following:</p>

<p>For pixel 11 you would need to load pixels 0, 1, 2, 10, 11, 12, 20, 21, 22.</p>

<p>you would then multiply pixel 0 by the upper left portion of the 3x3 blur filter. Pixel 1 by the top middle, pixel 2, pixel 3 by top right, pixel 10 by middle left and so on.</p>

<p>Then add them altogether and write the result to pixel 11.  As you can see Pixel 11 is now the average of itself and the surrounding pixels.</p>

<p>Edge cases do get a bit more complex.  What values do you use for the values of the edge of the texture?   One way can be to wrap round to the other side.  This looks good for an image that is later tiled.  Another way is to push the pixel into the surrounding places.</p>

<p>So for upper left you might place the samples as follows:</p>

<pre><code> 0  0  1
 0  0  1
10 10 11
</code></pre>

<p>I hope you can see how this can easily be extended to large filter kernels (ie 5x5 or 9x9 etc).  </p>

<p>The difference between a gaussian filter and a box filter is the numbers that go in the matrix.  A gaussian filter uses a gaussian distribution across a row and column.  </p>

<p>e.g for a filter defined arbitrarily as (ie this isn't a gaussian, but probably not far off)</p>

<pre><code>0.1 0.8 0.1
</code></pre>

<p>the first column would be the same but multiplied into the first item of the row above.</p>

<pre><code>0.01 0.8 0.1
0.08 
0.01 
</code></pre>

<p>The second column would be the same but the values would be multiplied by the 0.8 in the row above (and so on).</p>

<pre><code>0.01 0.08 0.01
0.08 0.64 0.08
0.01 0.08 0.01
</code></pre>

<p>The result of adding all of the above together should equal 1.  The difference between the above filter and the original box filter would be that the end pixel written would have a much heavier weighting towards the central pixel (ie the one that is in that position already).  The blur occurs because the surrounding pixels do blur into that pixel, though not as much.  Using this sort of filter you get a blur but one that doesn't destroy as much of the high frequency (ie rapid changing of colour from pixel to pixel) information.</p>

<p>These sort of filters can do lots of interesting things.  You can do an edge detect using this sort of filter by subtracting the surrounding pixels from the current pixel.  This will leave only the really big changes in colour (high frequencies) behind.</p>

<p>Edit:  A 5x5 filter kernel is define exactly as above.</p>

<p>e.g if your row is 0.1 0.2 0.4 0.2 0.1 then if you multiply each value in their by the first item to form a column and then multiply each by the second item to form the second column and so on you'll end up with a filter of</p>

<pre><code>0.01 0.02 0.04 0.02 0.01
0.02 0.04 0.08 0.04 0.02
0.04 0.08 0.16 0.08 0.04
0.02 0.04 0.08 0.04 0.02
0.01 0.02 0.04 0.02 0.01
</code></pre>

<p>taking some arbitrary positions you can see that position 0, 0 is simple 0.1 * 0.1. Position 0, 2 is 0.1 * 0.4, position 2, 2 is 0.4 * 0.4 and position 1, 2 is 0.2 * 0.4.</p>

<p>I hope that gives you a good enough explanation.</p>
","1696200"
"Setting variable to NULL after free","65344","","<p>In my company there is a coding rule that says, after freeing any memory, reset the variable to NULL. For example ...</p>

<pre><code>void some_func () 
{
    int *nPtr;

    nPtr = malloc (100);

    free (nPtr);
    nPtr = NULL;

    return;
}
</code></pre>

<p>I feel that, in cases like the code shown above, setting to NULL does not have any meaning. Or am I missing something?</p>

<p>If there is no meaning in such cases, I am going to take it up with the ""quality team"" to remove this coding rule. Please advice.</p>
","<p>Setting unused pointers to NULL is a defensive style, protecting against dangling pointer bugs. If a dangling pointer is accessed after it is freed, you may read or overwrite random memory. If a null pointer is accessed, you get an immediate crash on most systems, telling you right away what the error is.</p>

<p>For local variables, it may be a little bit pointless if it is ""obvious"" that the pointer isn't accessed anymore after being freed, so this style is more appropriate for member data and global variables. Even for local variables, it may be a good approach if the function continues after the memory is released.</p>

<p>To complete the style, you should also initialize pointers to NULL before they get assigned a true pointer value.</p>
","1025604"
"what is the unsigned datatype?","65315","","<p>I've seen this <code>unsigned</code> ""typeless"" type used a couple of times, but never seen an explanation for it. I suppose there's a corresponding <code>signed</code> type. Here's an example:</p>

<pre><code>static unsigned long next = 1;
/* RAND_MAX assumed to be 32767 */
int myrand(void) {
    next = next * 1103515245 + 12345;
    return((<b>unsigned</b>)(next/65536) % 32768);
}
void mysrand(<b>unsigned seed</b>) {
    next = seed;
}</code></pre>

<p>What I have gathered so far:<br>
- on my system, <code>sizeof(unsigned) = 4</code> (hints at a 32-bit unsigned int)<br>
- it might be used as a shorthand for casting another type to the unsigned version:</p>

<pre><code>signed long int i = -42;
printf(""%u\n"", (unsigned)i);
</code></pre>

<p>Is this ANSI C, or just a compiler extension?</p>
","<p><code>unsigned</code> really is a shorthand for <code>unsigned int</code>, and so defined in standard C.</p>
","1171855"
"Redirecting exec output to a buffer or file","65244","","<p>I'm writing a C program where I <code>fork()</code>, <code>exec()</code>, and <code>wait()</code>.  I'd like to take the output of the program I exec'ed to write it to file or buffer.</p>

<p>For example, if I exec <code>ls</code>  I want to write <code>file1 file2 etc</code> to buffer/file.  I don't think there is a way to read stdout, so does that mean I have to use a pipe?  Is there a general procedure here that I haven't been able to find?</p>
","<p>For sending the output to another file (I'm leaving out error checking to focus on the important details):</p>

<pre><code>if (fork() == 0)
{
    // child
    int fd = open(file, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

    dup2(fd, 1);   // make stdout go to file
    dup2(fd, 2);   // make stderr go to file - you may choose to not do this
                   // or perhaps send stderr to another file

    close(fd);     // fd no longer needed - the dup'ed handles are sufficient

    exec(...);
}
</code></pre>

<p>For sending the output to a pipe so you can then read the output into a buffer:</p>

<pre><code>int pipefd[2];
pipe(pipefd);

if (fork() == 0)
{
    close(pipefd[0]);    // close reading end in the child

    dup2(pipefd[1], 1);  // send stdout to the pipe
    dup2(pipefd[1], 2);  // send stderr to the pipe

    close(pipefd[1]);    // this descriptor is no longer needed

    exec(...);
}
else
{
    // parent

    char buffer[1024];

    close(pipefd[1]);  // close the write end of the pipe in the parent

    while (read(pipefd[0], buffer, sizeof(buffer)) != 0)
    {
    }
}
</code></pre>
","2605313"
"What are the barriers to understanding pointers and what can be done to overcome them?","65206","","<p>Why are pointers such a leading factor of confusion for many new, and even old, college level students in C or C++?  Are there any tools or thought processes that helped you understand how pointers work at the variable, function, and beyond level?</p>

<p>What are some good practice things that can be done to bring somebody to the level of, ""Ah-hah, I got it,"" without getting them bogged down in the overall concept? Basically, drill like scenarios.</p>
","<p>Pointers is a concept that for many can be confusing at first, in particular when it comes to copying pointer values around and still referencing the same memory block.</p>

<p>I've found that the best analogy is to consider the pointer as a piece of paper with a house address on it, and the memory block it references as the actual house. All sorts of operations can thus be easily explained.</p>

<p>I've added some Delphi code down below, and some comments where appropriate. I chose Delphi since my other main programming language, C#, does not exhibit things like memory leaks in the same way.</p>

<p>If you only wish to learn the high-level concept of pointers, then you should ignore the parts labelled ""Memory layout"" in the explanation below. They are intended to give examples of what memory could look like after operations, but they are more low-level in nature. However, in order to accurately explain how buffer overruns really work, it was important that I added these diagrams.</p>

<p><em>Disclaimer: For all intents and purposes, this explanation and the example memory
layouts are vastly simplified. There's more overhead and a lot more details you would
need to know if you need to deal with memory on a low-level basis. However, for the
intents of explaining memory and pointers, it is accurate enough.</em></p>

<hr>

<p>Let's assume the THouse class used below looks like this:</p>

<pre><code>type
    THouse = class
    private
        FName : array[0..9] of Char;
    public
        constructor Create(name: PChar);
    end;
</code></pre>

<p>When you initialize the house object, the name given to the constructor is copied into the private field FName. There is a reason it is defined as a fixed-size array.</p>

<p>In memory, there will be some overhead associated with the house allocation, I'll illustrate this below like this:</p>

<pre>
---[ttttNNNNNNNNNN]---
     ^   ^
     |   |
     |   +- the FName array
     |
     +- overhead
</pre>

<p>The ""tttt"" area is overhead, there will typically be more of this for various types of runtimes and languages, like 8 or 12 bytes. It is imperative that whatever values are stored in this area never gets changed by anything other than the memory allocator or the core system routines, or you risk crashing the program.</p>

<hr>

<p><strong>Allocate memory</strong></p>

<p>Get an entrepreneur to build your house, and give you the address to the house. In contrast to the real world, memory allocation cannot be told where to allocate, but will find a suitable spot with enough room, and report back the address to the allocated memory.</p>

<p>In other words, the entrepreneur will choose the spot.</p>

<pre><code>THouse.Create('My house');
</code></pre>

<p>Memory layout:</p>

<pre>
---[ttttNNNNNNNNNN]---
    1234My house
</pre>

<hr>

<p><strong>Keep a variable with the address</strong></p>

<p>Write the address to your new house down on a piece of paper. This paper will serve as your reference to your house. Without this piece of paper, you're lost, and cannot find the house, unless you're already in it.</p>

<pre><code>var
    h: THouse;
begin
    h := THouse.Create('My house');
    ...
</code></pre>

<p>Memory layout:</p>

<pre>
    h
    v
---[ttttNNNNNNNNNN]---
    1234My house
</pre>

<hr>

<p><strong>Copy pointer value</strong>  </p>

<p>Just write the address on a new piece of paper. You now have two pieces of paper that will get you to the same house, not two separate houses. Any attempts to follow the address from one paper and rearrange the furniture at that house will make it seem that <em>the other house</em> has been modified in the same manner, unless you can explicitly detect that it's actually just one house.</p>

<p><em>Note</em> This is usually the concept that I have the most problem explaining to people, two pointers does not mean two objects or memory blocks.</p>

<pre><code>var
    h1, h2: THouse;
begin
    h1 := THouse.Create('My house');
    h2 := h1; // copies the address, not the house
    ...
</code></pre>

<pre>
    h1
    v
---[ttttNNNNNNNNNN]---
    1234My house
    ^
    h2
</pre>

<hr>

<p><strong>Freeing the memory</strong>  </p>

<p>Demolish the house. You can then later on reuse the paper for a new address if you so wish, or clear it to forget the address to the house that no longer exists.</p>

<pre><code>var
    h: THouse;
begin
    h := THouse.Create('My house');
    ...
    h.Free;
    h := nil;
</code></pre>

<p>Here I first construct the house, and get hold of its address. Then I do something to the house (use it, the ... code, left as an exercise for the reader), and then I free it. Lastly I clear the address from my variable.</p>

<p>Memory layout:</p>

<pre>
    h                        &lt;--+
    v                           +- before free
---[ttttNNNNNNNNNN]---          |
    1234My house             &lt;--+

    h (now points nowhere)   &lt;--+
                                +- after free
----------------------          | (note, memory might still
    xx34My house             &lt;--+  contain some data)
</pre>

<hr>

<p><strong>Dangling pointers</strong></p>

<p>You tell your entrepreneur to destroy the house, but you forget to erase the address from your piece of paper. When later on you look at the piece of paper, you've forgotten that the house is no longer there, and goes to visit it, with failed results (see also the part about an invalid reference below).</p>

<pre><code>var
    h: THouse;
begin
    h := THouse.Create('My house');
    ...
    h.Free;
    ... // forgot to clear h here
    h.OpenFrontDoor; // will most likely fail
</code></pre>

<p>Using <code>h</code> after the call to <code>.Free</code> <em>might</em> work, but that is just pure luck. Most likely it will fail, at a customers place, in the middle of a critical operation.</p>

<pre>
    h                        &lt;--+
    v                           +- before free
---[ttttNNNNNNNNNN]---          |
    1234My house             &lt;--+

    h                        &lt;--+
    v                           +- after free
----------------------          |
    xx34My house             &lt;--+
</pre>

<p>As you can see, h still points to the remnants of the data in memory, but
since it might not be complete, using it as before might fail.</p>

<hr>

<p><strong>Memory leak</strong>  </p>

<p>You lose the piece of paper and cannot find the house. The house is still standing somewhere though, and when you later on want to construct a new house, you cannot reuse that spot.</p>

<pre><code>var
    h: THouse;
begin
    h := THouse.Create('My house');
    h := THouse.Create('My house'); // uh-oh, what happened to our first house?
    ...
    h.Free;
    h := nil;
</code></pre>

<p>Here we overwrote the contents of the <code>h</code> variable with the address of a new house, but the old one is still standing... somewhere. After this code, there is no way to reach that house, and it will be left standing. In other words, the allocated memory will stay allocated until the application closes, at which point the operating system will tear it down.</p>

<p>Memory layout after first allocation:</p>

<pre>
    h
    v
---[ttttNNNNNNNNNN]---
    1234My house
</pre>

<p>Memory layout after second allocation:</p>

<pre>
                       h
                       v
---[ttttNNNNNNNNNN]---[ttttNNNNNNNNNN]
    1234My house       5678My house
</pre>

<p>A more common way to get this method is just to forget to free something, instead of overwriting it as above. In Delphi terms, this will occur with the following method:</p>

<pre><code>procedure OpenTheFrontDoorOfANewHouse;
var
    h: THouse;
begin
    h := THouse.Create('My house');
    h.OpenFrontDoor;
    // uh-oh, no .Free here, where does the address go?
end;
</code></pre>

<p>After this method has executed, there's no place in our variables that the address to the house exists, but the house is still out there.</p>

<p>Memory layout:</p>

<pre>
    h                        &lt;--+
    v                           +- before losing pointer
---[ttttNNNNNNNNNN]---          |
    1234My house             &lt;--+

    h (now points nowhere)   &lt;--+
                                +- after losing pointer
---[ttttNNNNNNNNNN]---          |
    1234My house             &lt;--+
</pre>

<p>As you can see, the old data is left intact in memory, and will not
be reused by the memory allocator. The allocator keeps track of which
areas of memory has been used, and will not reuse them unless you
free it.</p>

<hr>

<p><strong>Freeing the memory but keeping a (now invalid) reference</strong>  </p>

<p>Demolish the house, erase one of the pieces of paper but you also have another piece of paper with the old address on it, when you go to the address, you won't find a house, but you might find something that resembles the ruins of one.</p>

<p>Perhaps you will even find a house, but it is not the house you were originally given the address to, and thus any attempts to use it as though it belongs to you might fail horribly.</p>

<p>Sometimes you might even find that a neighbouring address has a rather big house set up on it that occupies three address (Main Street 1-3), and your address goes to the middle of the house. Any attempts to treat that part of the large 3-address house as a single small house might also fail horribly.</p>

<pre><code>var
    h1, h2: THouse;
begin
    h1 := THouse.Create('My house');
    h2 := h1; // copies the address, not the house
    ...
    h1.Free;
    h1 := nil;
    h2.OpenFrontDoor; // uh-oh, what happened to our house?
</code></pre>

<p>Here the house was torn down, through the reference in <code>h1</code>, and while <code>h1</code> was cleared as well, <code>h2</code> still has the old, out-of-date, address. Access to the house that is no longer standing might or might not work.</p>

<p>This is a variation of the dangling pointer above. See its memory layout.</p>

<hr>

<p><strong>Buffer overrun</strong>  </p>

<p>You move more stuff into the house than you can possibly fit, spilling into the neighbours house or yard. When the owner of that neighbouring house later on comes home, he'll find all sorts of things he'll consider his own.</p>

<p>This is the reason I chose a fixed-size array. To set the stage, assume that
the second house we allocate will, for some reason, be placed before the
first one in memory. In other words, the second house will have a lower
address than the first one. Also, they're allocated right next to each other.</p>

<p>Thus, this code:</p>

<pre><code>var
    h1, h2: THouse;
begin
    h1 := THouse.Create('My house');
    h2 := THouse.Create('My other house somewhere');
                         ^-----------------------^
                          longer than 10 characters
                         0123456789 &lt;-- 10 characters
</code></pre>

<p>Memory layout after first allocation:</p>

<pre>
                        h1
                        v
-----------------------[ttttNNNNNNNNNN]
                        5678My house
</pre>

<p>Memory layout after second allocation:</p>

<pre>
    h2                  h1
    v                   v
---[ttttNNNNNNNNNN]----[ttttNNNNNNNNNN]
    1234My other house somewhereouse
                        ^---+--^
                            |
                            +- overwritten
</pre>

<p>The part that will most often cause crash is when you overwrite important parts
of the data you stored that really should not be randomly changed. For instance
it might not be a problem that parts of the name of the h1-house was changed,
in terms of crashing the program, but overwriting the overhead of the
object will most likely crash when you try to use the broken object,
as will overwriting links that is stored to
other objects in the object.</p>

<hr>

<p><strong>Linked lists</strong>  </p>

<p>When you follow an address on a piece of paper, you get to a house, and at that house there is another piece of paper with a new address on it, for the next house in the chain, and so on.</p>

<pre><code>var
    h1, h2: THouse;
begin
    h1 := THouse.Create('Home');
    h2 := THouse.Create('Cabin');
    h1.NextHouse := h2;
</code></pre>

<p>Here we create a link from our home house to our cabin. We can follow the chain until a house has no <code>NextHouse</code> reference, which means it's the last one. To visit all our houses, we could use the following code:</p>

<pre><code>var
    h1, h2: THouse;
    h: THouse;
begin
    h1 := THouse.Create('Home');
    h2 := THouse.Create('Cabin');
    h1.NextHouse := h2;
    ...
    h := h1;
    while h &lt;&gt; nil do
    begin
        h.LockAllDoors;
        h.CloseAllWindows;
        h := h.NextHouse;
    end;
</code></pre>

<p>Memory layout (added NextHouse as a link in the object, noted with
the four LLLL's in the below diagram):</p>

<pre>
    h1                      h2
    v                       v
---[ttttNNNNNNNNNNLLLL]----[ttttNNNNNNNNNNLLLL]
    1234Home       +        5678Cabin      +
                   |        ^              |
                   +--------+              * (no link)
</pre>

<hr>

<p><strong>In basic terms, what is a memory address?</strong></p>

<p>A memory address is in basic terms just a number. If you think of memory
as a big array of bytes, the very first byte has the address 0, the next one
the address 1 and so on upwards. This is simplified, but good enough.</p>

<p>So this memory layout:</p>

<pre>
    h1                 h2
    v                  v
---[ttttNNNNNNNNNN]---[ttttNNNNNNNNNN]
    1234My house       5678My house
</pre>

<p>Might have these two address (the leftmost - is address 0):</p>

<ul>
<li>h1 = 4</li>
<li>h2 = 23</li>
</ul>

<p>Which means that our linked list above might actuall look like this:</p>

<pre>
    h1 (=4)                 h2 (=28)
    v                       v
---[ttttNNNNNNNNNNLLLL]----[ttttNNNNNNNNNNLLLL]
    1234Home      0028      5678Cabin     0000
                   |        ^              |
                   +--------+              * (no link)
</pre>

<p>It is typical to store an address that ""points nowhere"" as a zero-address.</p>

<hr>

<p><strong>In basic terms, what is a pointer?</strong></p>

<p>A pointer is just a variable holding a memory address. You can typically ask the programming
language to give you its number, but most programming languages and runtimes tries to
hide the fact that there is a number beneath, just because the number itself does not
really hold any meaning to you. It is best to think of a pointer as a black box, ie.
you don't really know or care about how it is actually implemented, just as long as it
works.</p>
","5754"
"C - initialize array of structs","65191","","<p>I am having a problem initializing an array of structs. I'm not sure if I am doing it right because I get ""initialization from incompatible pointer type"" &amp; ""assignment from incompatible pointer type"". I added in the code where I get these warnings, and when I try to print the data from the struct I just get garbage such as @@###</p>

<pre><code>typedef struct
{
    char* firstName;
    char* lastName;
    int day;
    int month;
    int year;

}student;
</code></pre>

<p>//initialize array</p>

<pre><code>    student** students = malloc(sizeof(student));
    int x;
    for(x = 0; x &lt; numStudents; x++)
    {
        //here I get: ""assignment from incompatible pointer type"" 
        students[x] = (struct student*)malloc(sizeof(student));
    }

    int arrayIndex = 0;
</code></pre>

<p>//add struct</p>

<pre><code> //create student struct
        //here I get: ""initialization from incompatible pointer type""
        student* newStudent = {""john"", ""smith"", 1, 12, 1983};

        //add it to the array
        students[arrayIndex] = newStudent;
        arrayIndex++;
</code></pre>
","<pre><code>student** students = malloc(sizeof(student));
</code></pre>

<p>No, no, no!</p>

<p>You do not want a <code>**</code>. You want a <code>*</code> and enough space for how ever many students you need</p>

<pre><code>student* students = malloc(numStudents * sizeof *students);
for (x = 0; x &lt; numStudents; x++)
{
    students[x].firstName = ""John""; /* or malloc and strcpy */
    students[x].lastName = ""Smith""; /* or malloc and strcpy */
    students[x].day = 1;
    students[x].month = 12;
    students[x].year = 1983;
}
</code></pre>
","4173563"
"How do I get a thread ID from an arbitrary pthread_t?","65188","","<p>I have a pthread_t, and I'd like to change its CPU affinity. The problem is that I'm using glibc 2.3.2, which doesn't have <a href=""http://www.kernel.org/doc/man-pages/online/pages/man3/pthread_setaffinity_np.3.html"" rel=""noreferrer"">pthread_setaffinity_np()</a>. That's OK, though, because pthread_setaffinity_np() is itself a wrapper of <a href=""http://linux.die.net/man/2/sched_setaffinity"" rel=""noreferrer"">sched_setaffinity()</a>, which can be called by passing a thread ID instead of a process ID to set the affinity for an arbitrary thread.</p>

<p><strong>BUT</strong> ... The thread id that sched_setaffinity can work with is an OS thread id, the kind that you can get from the <a href=""http://linux.die.net/man/2/gettid"" rel=""noreferrer"">gettid()</a> system call. <strong>This is different from the opaque type pthread_t</strong>, and gettid() will only return the thread-id of the <em>current thread</em>. I need to be able to set the CPU affinity of an arbitrary thread.</p>

<p>Unfortunately, I can't access the pthread's private parts, which would let me steal the thread id by casting a pthread_t to a <code>struct pthread *</code>. All the better, I guess, since relying on private implementations is asking for even <em>more</em> trouble.</p>

<p>I've also been reading up on the <a href=""http://cs.pub.ro/~apc/2003/resources/pthreads/uguide/users-23.htm"" rel=""noreferrer"">pthread_getunique_np</a> function, however this returns a ""unique integral identifier"" -- which I don't believe is in any way shape or form equivalent to an OS thread id.</p>

<p>Hence, the question: How can I get a thread ID from an arbitrary pthread_t?</p>
","<p>Since <code>pthread</code>s do not need to be implemented with Linux threads (or kernel threads at all, for that matter), and some implementations are entirely user-level or mixed, the <code>pthread</code>s interface does not provide functions to access these implementation details, as those would not be portable (even across <code>pthread</code>s implementations on Linux).  Thread libraries that use those could provide this as an extension, but there do not seem to be any that do.</p>

<p>Other than accessing internal data structures of the threading library (which you understandably do not want, although with your assumptions about processor affinity and Linux thread IDs, your code will not be portable anyway), you may be able to play a trick at creation time, if you control the code that creates the threads:</p>

<p>Give <code>pthread_create()</code> an entry function that calls <code>gettid()</code> (which by the way you are likely to have to do using the <code>syscall</code> macro directly because it is not always exported by <code>libc</code>), stores the result somewhere, and then calls the original entry function.  If you have multiple threads with the same entry function, you can pass an incremented pointer into an array in the <code>arg</code> argument to <code>pthread_create</code>, which will then be passed to the entry function you created to store the thread ID in.  Store the <code>pthread_t</code> return value of <code>pthread_create</code> in the same order, and then you will be able to look up the Linux thread IDs of all threads you created given their <code>pthread_t</code> value.</p>

<p>Whether this trick is worth it, depends on how important setting the CPU affinity is in your case, versus not accessing internal structures of the thread library or depending on a thread library that provides <code>pthread_setaffinity_np</code>.</p>
","558815"
"Pass an array to a function by value","65143","","<p>Below is a snippet from the book <em>C Programming Just the FAQs</em>. Isn't this wrong as Arrays can never be passed by reference?</p>

<blockquote>
  <p><strong>VIII.6: How can you pass an array to a function by value?</strong>  </p>
  
  <p><strong>Answer:</strong> An array can be passed to a function by value by declaring in
  the called function the array name
  with square brackets (<code>[</code> and <code>]</code>)
  attached to the end. When calling the
  function, simply pass the address of
  the array (that is, the array’s name)
  to the called function. For instance,
  the following program passes the array
  <code>x[]</code> to the function named
  <code>byval_func()</code> by value:</p>
  
  <p>The <code>int[]</code> parameter tells the
  compiler that the <code>byval_func()</code>
  function will take one argument—an
  array of integers. When the
  <code>byval_func()</code> function is called, you
  pass the address of the array to
  <code>byval_func()</code>:  </p>

<pre><code>byval_func(x);
</code></pre>
  
  <p>Because the array is being passed by
  value, an exact copy of the array is
  made and placed on the stack. The
  called function then receives this
  copy of the array and can print it.
  Because the array passed to
  <code>byval_func()</code> is a copy of the
  original array, modifying the array
  within the <code>byval_func()</code> function has
  no effect on the original array.</p>
</blockquote>
","<blockquote>
  <p>Because the array is being passed by value, an exact copy of the array is made and placed on the stack.</p>
</blockquote>

<p>This is incorrect: <strong>the array itself is not being copied</strong>, only a copy of the pointer to its address is passed to the callee (placed on the stack). (Regardless of whether you declare the parameter as <code>int[]</code> or <code>int*</code>, it <a href=""http://c-faq.com/aryptr/aryptrparam.html""><em>decays into a pointer</em></a>.) <strong>This allows you to modify the contents of the array from within the called function</strong>. Thus, this</p>

<blockquote>
  <p>Because the array passed to byval_func() is a copy of the original array, modifying the array within the byval_func() function has no effect on the original array.</p>
</blockquote>

<p>is plain wrong (kudos to @Jonathan Leffler for his comment below). However, reassigning the pointer inside the function will not change the pointer to the original array outside the function.</p>
","4774473"
"Converting from signed char to unsigned char and back again?","65125","","<p>I'm working with JNI and have an array of type jbyte, where jbyte is represented as an signed char i.e. ranging from -128 to 127. The jbytes represent image pixels. For image processing, we usually want pixel components to range from 0 to 255. I therefore want to convert the jbyte value to the range 0 to 255 (i.e. the same range as unsigned char), do some calculations on the value and then store the result as a jbyte again.</p>

<p>How can I do these conversion safely? </p>

<p>I managed to get this code to work, where a pixel value is incremented by 30 but clamped to the value 255, but I don't understand if it's safe or portable:</p>

<pre><code> #define CLAMP255(v) (v &gt; 255 ? 255 : (v &lt; 0 ? 0 : v))

 jbyte pixel = ...
 pixel = CLAMP_255((unsigned char)pixel + 30);
</code></pre>

<p>I'm interested to know how to do this in both C and C++.</p>
","<p>This is one of the reasons why C++ introduced the new cast style, which includes <code>static_cast</code> and <code>reinterpret_cast</code></p>

<p>There's two things you can mean by saying conversion from signed to unsigned, you might mean that you wish the unsigned variable to contain the value of the signed variable modulo the maximum value of your unsigned type + 1. That is if your signed char has a value of -128 then <code>CHAR_MAX+1</code> is added for a value of 128 and if it has a value of -1, then <code>CHAR_MAX+1</code> is added for a value of 255, this is what is done by static_cast. On the other hand you might mean to interpret the bit value of the memory referenced by some variable to be interpreted as an unsigned byte, regardless of the signed integer representation used on the system, i.e. if it has bit value <code>0b10000000</code> it should evaluate to value 128, and 255 for bit value <code>0b11111111</code>, this is accomplished with reinterpret_cast.</p>

<p>Now, for the two's complement representation this happens to be exactly the same thing, since -128 is represented as <code>0b10000000</code> and -1 is represented as <code>0b11111111</code> and likewise for all in between. However other computers (usually older architectures) may use different signed representation such as sign-and-magnitude or ones' complement. In ones' complement the <code>0b10000000</code> bitvalue would not be -128, but -127, so a static cast to unsigned char would make this 129, while a reinterpret_cast would make this 128. Additionally in ones' complement the <code>0b11111111</code> bitvalue would not be -1, but -0, (yes this value exists in ones' complement,) and would be converted to a value of 0 with a static_cast, but a value of 255 with a reinterpret_cast. Note that in the case of ones' complement the unsigned value of 128 can actually not be represented in a signed char, since it ranges from -127 to 127, due to the -0 value.</p>

<p>I have to say that the vast majority of computers will be using two's complement making the whole issue moot for just about anywhere your code will ever run. You will likely only ever see systems with anything other than two's complement in very old architectures, think '60s timeframe.</p>

<p>The syntax boils down to the following:</p>

<pre><code>signed char x = -100;
unsigned char y;

y = (unsigned char)x;                    // C static
y = *(unsigned char*)(&amp;x);               // C reinterpret
y = static_cast&lt;unsigned char&gt;(x);       // C++ static
y = reinterpret_cast&lt;unsigned char&amp;&gt;(x); // C++ reinterpret
</code></pre>

<p>To do this in a nice C++ way with arrays:</p>

<pre><code>jbyte memory_buffer[nr_pixels];
unsigned char* pixels = reinterpret_cast&lt;unsigned char*&gt;(memory_buffer);
</code></pre>

<p>or the C way:</p>

<pre><code>unsigned char* pixels = (unsigned char*)memory_buffer;
</code></pre>
","5042335"
"How to get ip address from sock structure in c?","65058","","<p>I'm writing simple server/client and trying to get client IP address and save it on server side to decide which client should get into critical section. I googled it several times but couldn't find proper way to get IP address from sock structure.</p>

<p>I believe this is a way to get IP from sock struct after server accept request from client. More specifically in c after server execute </p>

<pre><code>csock = accept(ssock, (struct sockaddr *)&amp;client_addr, &amp;clen) 
</code></pre>

<p>Thanks </p>
","<p>OK assuming you are using IPV4 then do the following:</p>

<pre><code>struct sockaddr_in* pV4Addr = (struct sockaddr_in*)&amp;client_addr;
struct in_addr ipAddr = pV4Addr-&gt;sin_addr;
</code></pre>

<p>If you then want the ip address as a string then do the following:</p>

<pre><code>char str[INET_ADDRSTRLEN];
inet_ntop( AF_INET, &amp;ipAddr, str, INET_ADDRSTRLEN );
</code></pre>

<p>IPV6 is pretty easy as well ...</p>

<pre><code>struct sockaddr_in6* pV6Addr = (struct sockaddr_in6*)&amp;client_addr;
struct in6_addr ipAddr       = pV6Addr-&gt;sin6_addr;
</code></pre>

<p>and getting a string is almost identical to IPV4</p>

<pre><code>char str[INET6_ADDRSTRLEN];
inet_ntop( AF_INET6, &amp;ipAddr, str, INET6_ADDRSTRLEN );
</code></pre>
","3060988"
"main() function in C","65035","","<p>I've been learning C programming in a self-taught fashion for some weeks, and there are some questions that I have concerning the <code>main()</code> function.</p>

<ol>
<li><p>All functions must be declared in their function prototype, and later on, in their defintion. Why don't we have to declare the <code>main()</code> function in a prototype first?</p></li>
<li><p>Why do we have to use <code>int main()</code> instead of <code>void main()</code>?</p></li>
<li><p>What does return 0 exactly do in the <code>main()</code> function? What would happen if I wrote a program ending the <code>main()</code> function with <code>return 1;</code>, for example?</p></li>
</ol>
","<ol>
<li>You need either a definition or a prototype in order to properly call a function, but <code>main</code> must never be called from any other function, so it <em>must not</em> be declared.</li>
<li>Because the C standard says so. Operating systems pass the return value to the calling program (usually the shell). Some compilers will accept <code>void main</code>, but this is a non-standard extension (it usually means ""always return zero to the OS"").</li>
<li>By convention, a non-zero return value signals that an error occurred. Shell scripts and other programs can use this to find out if your program terminated successfully.</li>
</ol>
","18446831"
"what is the difference between uint16_t and unsigned short int incase of 64 bit processor?","65011","","<p>I came to use a variable of type <code>uint16_t</code>, but am unable to use that data type because of my project limitations. Is it possible to <code>unsigned short int</code> instead of <code>uint16_t</code>?
I don't know the difference between both of them. Could anybody clarify please?</p>
","<p><code>uint16_t</code> is unsigned 16-bit integer.</p>

<p><code>unsigned short int</code> is unsigned short integer, but the size is implementation dependent. The standard only says it's at least 16-bit (i.e, minimum value of <code>UINT_MAX</code> is <code>65535</code>). In practice, it usually is 16-bit, but you can't take that as guaranteed.</p>

<p>Note: </p>

<ol>
<li>If you want a portable unsigned 16-bit integer, use <code>uint16_t</code>.</li>
<li><code>inttypes.h</code> and <code>stdint.h</code> are both introduced in C99. If you are using C89, define your own type.</li>
<li><code>uint16_t</code> may not be provided in certain implementation(See reference below), but <code>unsigned short int</code> is always available.</li>
</ol>

<p>Reference: C11(ISO/IEC 9899:201x) §7.20 <em>Integer types </em></p>

<blockquote>
  <p>For each type described herein that the implementation provides)  shall declare that typedef name and define the associated macros. Conversely, for each type described herein that the implementation does not provide,  shall not declare that typedef name nor shall it define the associated macros. An implementation shall provide those types described as ‘‘required’’, but need not provide any of the others (described as ‘optional’’).</p>
</blockquote>
","17693479"
"How to compile and run C program on Mac OS X","64941","","<p>I am learning C for a class at my university and wish to write the program using the TextWrangler text editor on my Mac (running OSX Lion 10.7). Once I write the .c file, I compile it using gcc. I downloaded the compiler from Apple Developer Tools.</p>

<p>It is included in a command line tools download. I locate the file using Terminal, compile it using gcc filename.c where the a.out executable file is created. However, when I type ""a.out"" or ""/a.out"" I get the following messages: ""-bash: a.out: command not found"" or ""-bash: /a.out: No such file or directory"". I have successfully compiled and ran C programs on Linux systems before using this same method. What am I doing wrong on my Mac? </p>
","<p>You need to add a dot to indicate that the executable is in the current directory, as the current directory is not in the path:</p>

<pre><code>./a.out
</code></pre>
","13887952"
"C libcurl get output into a string","64868","","<p>I want to store the result of this curl function in a variable, how can I do so?</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;curl/curl.h&gt;

int main(void)
{
  CURL *curl;
  CURLcode res;

  curl = curl_easy_init();
  if(curl) {
    curl_easy_setopt(curl, CURLOPT_URL, ""curl.haxx.se"");
    res = curl_easy_perform(curl);

    /* always cleanup */
    curl_easy_cleanup(curl);
  }
  return 0;
}
</code></pre>

<p>thanks, I solved it like this:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;curl/curl.h&gt;

function_pt(void *ptr, size_t size, size_t nmemb, void *stream){
    printf(""%d"", atoi(ptr));
}

int main(void)
{
  CURL *curl;
  CURLcode res;
  curl = curl_easy_init();
  if(curl) {
    curl_easy_setopt(curl, CURLOPT_URL, ""curl.haxx.se"");
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, function_pt);
    curl_easy_perform(curl);
    curl_easy_cleanup(curl);
  }
  system(""pause"");
  return 0;
}
</code></pre>
","<p>You can set a callback function to receive incoming data chunks using <code>curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, myfunc);</code></p>

<p>The callback will take a user defined argument that you can set using <code>curl_easy_setopt(curl, CURLOPT_WRITEDATA, p)</code></p>

<p>Here's a snippet of code that passes a buffer <code>struct string {*ptr; len}</code> to the callback function and grows that buffer on each call using realloc().</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;curl/curl.h&gt;

struct string {
  char *ptr;
  size_t len;
};

void init_string(struct string *s) {
  s-&gt;len = 0;
  s-&gt;ptr = malloc(s-&gt;len+1);
  if (s-&gt;ptr == NULL) {
    fprintf(stderr, ""malloc() failed\n"");
    exit(EXIT_FAILURE);
  }
  s-&gt;ptr[0] = '\0';
}

size_t writefunc(void *ptr, size_t size, size_t nmemb, struct string *s)
{
  size_t new_len = s-&gt;len + size*nmemb;
  s-&gt;ptr = realloc(s-&gt;ptr, new_len+1);
  if (s-&gt;ptr == NULL) {
    fprintf(stderr, ""realloc() failed\n"");
    exit(EXIT_FAILURE);
  }
  memcpy(s-&gt;ptr+s-&gt;len, ptr, size*nmemb);
  s-&gt;ptr[new_len] = '\0';
  s-&gt;len = new_len;

  return size*nmemb;
}

int main(void)
{
  CURL *curl;
  CURLcode res;

  curl = curl_easy_init();
  if(curl) {
    struct string s;
    init_string(&amp;s);

    curl_easy_setopt(curl, CURLOPT_URL, ""curl.haxx.se"");
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writefunc);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &amp;s);
    res = curl_easy_perform(curl);

    printf(""%s\n"", s.ptr);
    free(s.ptr);

    /* always cleanup */
    curl_easy_cleanup(curl);
  }
  return 0;
}
</code></pre>
","2329792"
"How detect current screen resolution?","64833","","<p>How do I from Winapi (in C or C++) detect the current screen resolution?</p>

<p>Some background:</p>

<p>I want to start a new OpenGL fullscreen window, but want it open with the same horizontal and vertical size which the desktop already is set to. (Now when everyone uses LCD screens, I figured this is the best way to get the native resolution of the screen.)</p>

<p>I don't desperately need to also know the desktop color depth, although that would be a nice bonus.</p>
","<ul>
<li>Size of the primary monitor: <a href=""http://msdn.microsoft.com/en-us/library/ms724385(v=vs.85).aspx"" rel=""noreferrer"">GetSystemMetrics</a> SM_CXSCREEN / SM_CYSCREEN (GetDeviceCaps can also be used)</li>
<li>Size of all monitors (combined): GetSystemMetrics SM_CX/YVIRTUALSCREEN</li>
<li>Size of work area (screen excluding taskbar and other docked bars) on primary monitor: <a href=""http://msdn.microsoft.com/en-us/library/ms724947(v=vs.85).aspx"" rel=""noreferrer"">SystemParametersInfo</a> SPI_GETWORKAREA</li>
<li>Size of a specific monitor (work area and ""screen""): <a href=""http://msdn.microsoft.com/en-us/library/dd144901(v=vs.85).aspx"" rel=""noreferrer"">GetMonitorInfo</a> </li>
</ul>

<p>Edit: 
It is important to remember that a monitor does not always ""begin"" at 0x0 so just knowing the size is not enough to position your window. You can use MonitorFromWindow to find the monitor your window is on and then call GetMonitorInfo</p>

<p>If you want to go the low-level route or change the resolution you need to use EnumDisplayDevices, EnumDisplaySettings and ChangeDisplaySettings (This is the only way to get the refresh rate AFAIK, but GetDeviceCaps will tell you the color depth)</p>
","4631379"
"How to link to a static library in C?","64751","","<p>I use code::blocks to compile my static library. The output result is a libstatic.a file. 
Now, how do I link to my library to use functions that were compiled? </p>

<p>(I tried to use #include ""libstatic.a"" but my project doesn't compile) </p>
","<pre><code>cc -o yourprog yourprog.c -lstatic
</code></pre>

<p>or</p>

<pre><code>cc -o yourprog yourprog.c libstatic.a
</code></pre>
","1705972"
"double free or corruption (!prev) error in c program","64737","","<p>I get the following error when running a c program:</p>

<pre><code>*** glibc detected *** ./a.out: double free or corruption (!prev): 0x080b8008 ***
</code></pre>

<p>I believe this is due to free() being called at the end of the program, but I can't figure out where the malloc'd memory is being freed prior to this. Here is the code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt; //malloc
#include &lt;math.h&gt;  //sine

#define TIME 255
#define HARM 32

int main (void) {
    double sineRads;
    double sine;
    int tcount = 0;
    int hcount = 0;
    /* allocate some heap memory for the large array of waveform data */
    double *ptr = malloc(sizeof(double *) * TIME);
    if (NULL == ptr) {
        printf(""ERROR: couldn't allocate waveform memory!\n"");
    } else {
        /*evaluate and add harmonic amplitudes for each time step */
        for(tcount = 0; tcount &lt;= TIME; tcount++){
            for(hcount = 0; hcount &lt;= HARM; hcount++){
                sineRads = ((double)tcount / (double)TIME) * (2*M_PI); //angular frequency
                sineRads *= (hcount + 1); //scale frequency by harmonic number
                sine = sin(sineRads); 
                *(ptr+tcount) += sine; //add to other results for this time step
            }
        }
        free(ptr);
        ptr = NULL;     
    }
    return 0;
}
</code></pre>

<p>This is compiled with:</p>

<pre><code>gcc -Wall -g -lm test.c
</code></pre>

<p>Valgrind:</p>

<pre><code>valgrind --leak-check=yes ./a.out
</code></pre>

<p>gives:</p>

<pre><code>    ==3028== Memcheck, a memory error detector
==3028== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
==3028== Using Valgrind-3.6.0.SVN-Debian and LibVEX; rerun with -h for copyright info
==3028== Command: ./a.out
==3028== 
==3028== Invalid read of size 8
==3028==    at 0x8048580: main (test.c:25)
==3028==  Address 0x41ca420 is 1,016 bytes inside a block of size 1,020 alloc'd
==3028==    at 0x4024F20: malloc (vg_replace_malloc.c:236)
==3028==    by 0x80484F8: main (test.c:15)
==3028== 
==3028== Invalid write of size 8
==3028==    at 0x8048586: main (test.c:25)
==3028==  Address 0x41ca420 is 1,016 bytes inside a block of size 1,020 alloc'd
==3028==    at 0x4024F20: malloc (vg_replace_malloc.c:236)
==3028==    by 0x80484F8: main (test.c:15)
==3028== 
==3028== 
==3028== HEAP SUMMARY:
==3028==     in use at exit: 0 bytes in 0 blocks
==3028==   total heap usage: 1 allocs, 1 frees, 1,020 bytes allocated
==3028== 
==3028== All heap blocks were freed -- no leaks are possible
==3028== 
==3028== For counts of detected and suppressed errors, rerun with: -v
==3028== ERROR SUMMARY: 8514 errors from 2 contexts (suppressed: 14 from 7)
</code></pre>

<p>I don't have much experience with languages which don't manage their own memory automatically (hence this exercise in c to learn a bit) but am stuck. Any help would be appreciated.</p>

<p>The code is supposed to be part of an additive audio synthesiser. In that respect it does work and gives the correct output stored in ptr.</p>

<p>Thanks.</p>
","<blockquote>
<pre><code>double *ptr = malloc(sizeof(double *) * TIME);
/* ... */
for(tcount = 0; tcount &lt;= TIME; tcount++)
                         ^^
</code></pre>
</blockquote>

<ul>
<li>You're overstepping the array. Either change <code>&lt;=</code> to <code>&lt;</code> or alloc
<code>SIZE + 1</code> elements</li>
<li>Your <code>malloc</code> is wrong, you'll want <code>sizeof(double)</code> instead of
<code>sizeof(double *)</code></li>
<li>As <code>ouah</code> comments, although not directly linked to your corruption problem, you're using <code>*(ptr+tcount)</code> without initializing it</li>
</ul>

<hr>

<ul>
<li>Just as a style note, you might want to use <code>ptr[tcount]</code> instead of <code>*(ptr + tcount)</code></li>
<li>You don't really need to <code>malloc</code> + <code>free</code> since you already know <code>SIZE</code></li>
</ul>
","12230807"
"How to return a string in my C code?","64718","","<p>I am a C beginner and this is my C code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
main()
{
      printf(""Hello world !\n"");
      return 'sss';
}
</code></pre>

<p>that will show an error, </p>

<p>so how to return a string in C code?</p>
","<p>If you are looking to return a string from a function(other than main), you should do something like this.</p>

<pre><code>#include &lt;stdio.h&gt;
const char * getString();
int main()
{
 printf(""hello world\n"");
 printf(""%s\n"", getString());
 return 0;
}

const char * getString()
{
 const char *x = ""abcstring"";
 return x;
}
</code></pre>
","4929561"
"fprintf with string argument","64672","","<p>In order to create a formatted file, I want to utilize <code>fprintf</code>. It must get <code>char*</code> parameters, but I have several string variables. How can I use <code>fprintf</code>?</p>
","<p>The basic usage of <code>fprintf</code> with strings looks like this:</p>

<pre><code>char *str1, *str2, *str3;
FILE *f;
// ...

f = fopen(""abc.txt"", ""w"");
fprintf(f, ""%s, %s\n"", str1, str2);
fprintf(f, ""more: %s\n"", str3);
fclose(f);
</code></pre>

<p>You can add several strings by using several <code>%s</code> format specifiers and you can use repeated calls to <code>fprintf</code> to write the file incrementally.</p>

<p>If you have C++ <code>std::string</code> objects you can use their <code>c_str()</code> method to get a <code>const char*</code> suitable to use with <code>fprintf</code>:</p>

<pre><code>std::string str(""abc"");
fprintf(f, ""%s\n"", str.c_str());
</code></pre>
","2018787"
"printf string, variable length item","64634","","<pre><code>#define SIZE 9
int number=5;
char letters[SIZE]; /* this wont be null-terminated */
... 

char fmt_string[20];
sprintf(fmt_string, ""%%d %%%ds"", SIZE);
/* fmt_string = ""%d %9d""... or it should be */

printf(fmt_string, number, letters);
</code></pre>

<p>Is there a better way to do this?</p>
","<p>There is no need to construct a special format string.  <code>printf</code> allows you to specify the precision using a parameter (that precedes the value) if you use a <code>.*</code> as the precision in the format tag.</p>

<p>For example:</p>

<pre><code>printf (""%d %.*s"", number, SIZE, letters);
</code></pre>

<p>Note: there is a distinction between width (which is a minimum field width) and precision (which gives the maximum number of characters to be printed).
<code>%*s</code> specifies the width, <code>%.s</code> specifies the precision. (and you can also use <code>%*.*</code> but then you need two parameters, one for the width one for the precision)</p>

<p>See also the printf man page (<a href=""http://man7.org/linux/man-pages/man3/printf.3.html"" rel=""noreferrer""><code>man 3 printf</code></a> under Linux) and especially the sections on field width and precision:</p>

<blockquote>
  <p>Instead of a decimal digit string one may write ""*"" or ""*m$"" (for some
  decimal integer m) to specify that the field width is given in the next
  argument, or in the m-th argument, respectively, which must be of type int.
  [...]</p>
  
  <p>Instead of a decimal digit string one may write ""*"" or ""*m$"" (for some
  decimal integer m) to specify that the precision is given in the next
  argument, or in the m-th argument, respectively, which must be of type int.</p>
</blockquote>
","5932385"
"Null termination of char array","64507","","<p>Consider following case:</p>

<pre><code>#include&lt;stdio.h&gt;
int main()
{
    char A[5];
    scanf(""%s"",A);
    printf(""%s"",A);
}
</code></pre>

<p>My question is if char <code>A[5]</code> contains only two characters. Say ""ab"", then <code>A[0]='a'</code>, <code>A[1]='b'</code> and <code>A[2]='\0'</code>.
But if the input is say, ""abcde"" then where is <code>'\0'</code> in that case. Will <code>A[5]</code> contain <code>'\0'</code>?
If yes, why? 
<code>sizeof(A)</code> will always return 5 as answer. Then when the array is full, is there an extra byte reserved for <code>'\0'</code> which <code>sizeof()</code> doesn't count?</p>
","<p>If you type more than four characters then the extra characters and the null terminator will be written outside the end of the array, overwriting memory not belonging to the array. This is a buffer overflow. </p>

<p>C does not prevent you from clobbering memory you don't own. This results in <strong><a href=""http://en.wikipedia.org/wiki/Undefined_behavior"">undefined behavior</a></strong>. Your program could do anything&mdash;it could crash, it could silently trash other variables and cause confusing behavior, it could be harmless, or anything else. Notice that there's no guarantee that your program will either work reliably or crash reliably. You can't even depend on it crashing immediately.</p>

<p>This is a great example of why <code>scanf(""%s"")</code> is dangerous and should never be used. It doesn't know about the size of your array which means there is no way to use it safely. Instead, avoid scanf and use something safer, like <a href=""http://linux.die.net/man/3/fgets"">fgets()</a>:</p>

<blockquote>
  <p>fgets() reads in at most <strong>one less than size</strong> characters from stream and stores them into the buffer pointed to by s. Reading stops after an EOF or a newline. If a newline is read, it is stored into the buffer. A terminating null byte ('\0') is stored after the last character in the buffer.</p>
</blockquote>

<p>Example:</p>

<pre><code>if (fgets(A, sizeof A, stdin) == NULL) {
    /* error reading input */
}
</code></pre>

<p>Annoyingly, fgets() will leave a trailing newline character ('\n') at the end of the array. So you may also want code to remove it.</p>

<pre><code>size_t length = strlen(A);
if (A[length - 1] == '\n') {
    A[length - 1] = '\0';
}
</code></pre>

<p>Ugh. A simple (but broken) <code>scanf(""%s"")</code> has turned into a 7 line monstrosity. And that's the second lesson of the day: C is not good at I/O and string handling. It can be done, and it can be done safely, but C will kick and scream the whole time.</p>
","12019987"
"MSVCR90.DLL was not found","64438","","<p>I know a question like this was already asked, but the situation is a little different, and all the answers on that problem didn't work for me.</p>

<p>I'm trying to compile some C code in VS2008 and it doesn't create an exe. Also, when I try to run it with f5, I get:</p>

<blockquote>
  <p>This application has failed to start
  because MSVCR90.DLL was not found.</p>
</blockquote>

<p>I did some googling and it said that this was because my c++ redistributable package wasnt installed. So I installed that, restarted everything and tried again. But alas, I still get the same error. Does anyone have any clue how to fix this?</p>
","<p>It sounds like either a problem with your VS2008 installation, or something wrong with your DLL search path. MSVCR90.DLL is installed when you install VS2008, you shouldn't have to install any additional redistributable packages.</p>

<p>First I would check your PATH environment variable and make sure there is no gobbledydook in it that will break some of the entries, and if you don't find a problem there, then I would uninstall and reinstall Visual Studio. </p>

<p>You could also try searching for MSVCR90.DLL (and other DLLs like it), and move them to your Windows/System32 folder.</p>

<p>If you just want to get going now, another thing you could do is change your project to statically link to the runtime libraries, and then it wont even try to load that DLL. Go to your Project settings, Configuration Properties->C/C++->Code Generation and change Runtime Library from Multi-Threaded DLL to just Multi-Threaded (or any of the options that doesn't end with DLL).</p>
","293443"
"program to store details of an employee in a structure","64438","","<p>This is a program to store details of an employee in a structure. Although the program runs it shows many errors, it does not give me a chance to enter address. Why is the program not running properly . Where am I going wrong ? </p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;

struct details
{
 char name[30];
 int age;
 char address[500];
 float salary;
};

int main()
{
 struct details detail;
 clrscr();
 printf(""\nEnter name:\n"");
 gets(detail.name);
 printf(""\nEnter age:\n"");
 scanf(""%d"",&amp;detail.age);
 printf(""\nEnter Address:\n"");
 gets(detail.address);
 printf(""\nEnter Salary:\n"");
 scanf(""%f"",&amp;detail.salary);


 printf(""\n\n\n"");
 printf(""Name of the Employee : %s \n"",detail.name);
 printf(""Age of the Employee : %d \n"",detail.age);
 printf(""Address of the Employee : %s \n"",detail.address);
 printf(""Salary of the Employee : %f \n"",detail.salary);

 getch();
}
</code></pre>

<p>This is the output I get:</p>

<p><img src=""https://i.stack.imgur.com/AFMTz.png"" alt=""enter image description here""></p>
","<p>Statement  <code>scanf(""%d"",&amp;detail.age);</code> will read <code>222</code> but not the newline you've entered. This newline will remain in input buffer and pass it to next input gets().</p>

<p>You can use <code>getchar()</code> method to remove some chars from the input buffer to avoid such problems.</p>

<pre><code>char ch;
....

printf(""\nEnter age:\n"");
scanf(""%d"",&amp;detail.age);

while((ch = getchar()) != '\n' &amp;&amp; ch != EOF) { }

printf(""\nEnter Address:\n"");
gets(detail.address);
</code></pre>

<p>Another problem is the incorrect use of <a href=""http://www.cplusplus.com/reference/clibrary/cstdio/printf/"" rel=""nofollow"">format</a> specifier with <code>printf</code> function.</p>
","7630936"
"undefined reference to `std::ios_base::Init::Init()'","64392","","<p>I write this code to read 3 files, TM is the size of square matrix, LER the No. of rows of an array and from last value define a non-square matrix of (ler/2)*2</p>

<p>Then... the code read a file with some relations, all are numbers and are assign to C[ler].</p>

<p>Then ... C[ler] is assigned to B[ler/2][2].</p>

<p>Those coordinates, per row, in B[ler/2][2] are assign to a and b.</p>

<p>a and b are the row and the column of the matrix A[tm][tm] where to add 1.</p>

<p>My code crashes and I don't see what the error is.</p>

<p>When I try to compile it, the compiler <strong>gcc -g -o MatSim MatSim.cpp</strong> prompted:</p>

<pre><code>/usr/include/c++/4.6/iostream:75: undefined reference to `std::ios_base::Init::Init()'
/usr/include/c++/4.6/iostream:75: undefined reference to `std::ios_base::Init::~Init()'
collect2: ld returned 1 exit status
</code></pre>

<p>Also, when I try to compile it, the compiler <strong>f77 -o MatSim MatSim.cpp</strong> prompted:</p>

<pre><code>/tmp/cc6ewlkf.o: In function `__static_initialization_and_destruction_0(int, int)':
MatSim.cpp:(.text+0x17ad4a): undefined reference to `std::ios_base::Init::Init()'
MatSim.cpp:(.text+0x17ad4f): undefined reference to `std::ios_base::Init::~Init()'
collect2: ld returned 1 exit status
</code></pre>

<p><strong>Solution</strong></p>

<p>The main problem was a library problem, Compile your code using:</p>

<pre><code> g++ -g -o MatSim MatSim.cpp -lstdc
</code></pre>

<p>Still not working?  Install libraries:</p>

<pre><code>sudo apt-get install g++-multilib
</code></pre>
","<p>You can resolve this in several ways:</p>

<ul>
<li>Use <code>g++</code> in stead of <code>gcc</code>: <code>g++ -g -o MatSim MatSim.cpp</code></li>
<li>Add <code>-lstdc++</code>: <code>gcc -g -o MatSim MatSim.cpp -lstdc++</code></li>
<li>Replace <code>&lt;string.h&gt;</code> by <code>&lt;string&gt;</code></li>
</ul>

<p>This is a linker problem, not a compiler issue. The same problem is covered in the question <a href=""https://stackoverflow.com/q/264057/1380680"">iostream linker error</a> -- it explains what is going on.</p>
","10907227"
"Embedded C: what does var = 0xFF; do?","64330","","<p>I'm working with embedded C for the first time. Although my C is rusty, I can read the code but I don't really have a grasp on why certain lines are the way the are. For example, I want to know if a variable is true or false and send it back to another application. Rather than setting the variable to 1 or 0, the original implementor chose 0xFF.</p>

<p>Is he trying to set it to an address space? or else why set a boolean variable to be 255?</p>
","<p><code>0xFF</code> sets all the bits in a char. </p>

<p>The original implementer probably decided that the standard <code>0</code> and <code>1</code> wasn't good enough and decided that if all bits <em>off</em> is <em>false</em> then all bits <em>on</em> is <em>true</em>.</p>

<p>That works because in C any value other than 0 is true.
Though this will set all bytes in a char, it will also work for any other variable type, since any one bit being set in a variable makes it true.</p>
","197686"
"SSE SSE2 and SSE3 for GNU C++","64299","","<p>Is there a simple tutorial for me to get up to speed in SSE, SSE2 and SSE3 in GNU C++?  How can you do code optimization in SSE?</p>
","<p>Sorry don't know of a tutorial.</p>

<p>Your best bet (IMHO) is to use SSE via the ""intrinsic"" functions Intel provides to wrap (generally) single SSE instructions.
These are made available via a set of include files named *mmintrin.h e.g xmmintrin.h is the original SSE instruction set.</p>

<p>Begin familiar with the contents of Intel's Optimization <a href=""http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-optimization-manual.html"" rel=""nofollow noreferrer"">Reference Manual</a> is a good idea (see section 4.3.1.2 for an example of intrinsics) and the SIMD sections are essential reading.  The instruction set reference manuals are pretty helpful too, in that each instruction's documentation includes the ""intrinsic"" function it corresponds to.</p>

<p><em>Do</em> spend some time inspecting the assembler produced by the compiler from intrinsics (you'll learn a lot) and on profiling/performance measurement (you'll avoid wasting time SSE-ing code for little return on the effort).</p>

<p><strong>Update 2011-05-31:</strong> There is some very nice coverage of intrinsics and vectorization in Agner Fog's <a href=""http://agner.org/optimize/"" rel=""nofollow noreferrer"">optimization PDFs</a> (<a href=""https://stackoverflow.com/questions/695222/code-optimization-bibles/695293#695293"">thanks</a>) although it's a bit spread about (e.g section 12 of the <a href=""http://agner.org/optimize/optimizing_cpp.pdf"" rel=""nofollow noreferrer"">first one</a> and section 5 of the <a href=""http://agner.org/optimize/optimizing_assembly.pdf"" rel=""nofollow noreferrer"">second one</a>).  These aren't exactly tutorial material (in fact there's a ""these manuals are not for beginners"" warning) but they do rightly treat SIMD (whether used via asm, intrinsics or compiler vectorization) as just one part of the larger optimization toolbox.</p>

<p><strong>Update 2012-10-04:</strong> A <a href=""http://www.linuxjournal.com/content/introduction-gcc-compiler-intrinsics-vector-processing"" rel=""nofollow noreferrer"">nice little Linux Journal article</a> on gcc vector intrinsics deserves a mention here.  More general than just SSE (covers PPC and ARM extensions too).  There's a good collection of references on the <a href=""http://www.linuxjournal.com/content/introduction-gcc-compiler-intrinsics-vector-processing?page=0,4"" rel=""nofollow noreferrer"">last page</a>, which drew my attention to Intel's <a href=""http://software.intel.com/sites/default/files/m/9/4/c/8/e/18072-347603.pdf"" rel=""nofollow noreferrer"">""intrinsics manual""</a>.</p>
","662250"
"How do I execute a Shell built-in command with a C function?","64272","","<p>I would like to execute the Linux command ""pwd"" through a C language function like execv().</p>

<p>The issue is that there isn't an executable file called ""pwd"" and I'm unable to execute ""echo $PWD"", since echo is also a built-in command with no executable to be found.</p>
","<p>You should execute <code>sh -c echo $PWD</code>; generally <code>sh -c</code> will execute shell commands.</p>

<p>(In fact, <code>system(foo)</code> is defined as <code>execl(""sh"", ""sh"", ""-c"", foo, NULL)</code> and thus works for shell built-ins.)</p>

<p>If you just want the value of <code>PWD</code>, use <code>getenv</code>, though.</p>
","19209148"
"What are the differences between .so and .dylib on osx?","64252","","<p>.dylib is the dynamic library extension on OSX, but it's never been clear to me when I can't / shouldn't use a traditional unix .so shared object.</p>

<p>Some of the questions I have:</p>

<ul>
<li>At a conceptual level, what are the main differences between .so and .dylib?</li>
<li>When can/should I use one over the other? </li>
<li>Compilation tricks &amp; tips (For example, the replacement for gcc -shared -fPIC, since that doesn't work on osx)</li>
</ul>
","<p>The Mach-O object file format used by Mac OS X for executables and libraries distinguishes between <strong>shared libraries</strong> and <strong>dynamically loaded modules</strong>. Use <code>otool -hv some_file</code> to see the filetype of <code>some_file</code>.</p>

<p>Mach-O shared libraries have the file type <strong><code>MH_DYLIB</code></strong> and carry the extension .dylib. They can be linked against with the usual static linker flags, e.g. <code>-lfoo</code> for libfoo.dylib.  They can be created by passing the <code>-dynamiclib</code> flag to the compiler. (<code>-fPIC</code> is the default and needn't be specified.)</p>

<p>Loadable modules are called ""bundles"" in Mach-O speak. They have the file type <strong><code>MH_BUNDLE</code></strong>. They can carry any extension; the extension <code>.bundle</code> is recommended by Apple, but most ported software uses <code>.so</code> for the sake of compatibility.  Typically, you'll use bundles for <strong>plug-ins</strong> that extend an application; in such situations, the bundle will link against the application binary to gain access to the application’s exported API.  They can be created by passing the <code>-bundle</code> flag to the compiler.</p>

<p>Both dylibs and bundles can be dynamically loaded using the <code>dl</code> APIs (e.g. <code>dlopen</code>, <code>dlclose</code>).  It is not possible to link against bundles as if they were shared libraries. However, it is possible that a bundle is linked against real shared libraries; those will be loaded automatically when the bundle is loaded.</p>

<p>Historically, the differences were more significant.  In Mac OS X 10.0, there was no way to dynamically load libraries.  A set of dyld APIs (e.g. <code>NSCreateObjectFileImageFromFile</code>, <code>NSLinkModule</code>) were introduced with 10.1 to load and unload bundles, but they didn't work for dylibs.  A <code>dlopen</code> compatibility library that worked with bundles was added in 10.3; in 10.4, <code>dlopen</code> was rewritten to be a native part of dyld and added support for loading (but not unloading) dylibs. Finally, 10.5 added support for using <code>dlclose</code> with dylibs and deprecated the dyld APIs.</p>

<p>On ELF systems like Linux, <a href=""http://tldp.org/HOWTO/Program-Library-HOWTO/index.html"" rel=""noreferrer"">both use the same file format</a>; any piece of shared code can be used as a library and for dynamic loading.</p>

<p>Finally, be aware that in Mac OS X, <a href=""https://developer.apple.com/library/mac/documentation/General/Conceptual/DevPedia-CocoaCore/Bundle.html"" rel=""noreferrer"">""bundle""</a> can <em>also</em> refer to directories with a standardized structure that holds executable code and the resources used by that code.  There is some conceptual overlap (particularly with ""loadable bundles"" like plugins, which generally contain executable code in the form of a Mach-O bundle), but they shouldn't be confused with Mach-O bundles discussed above.</p>

<p>Additional references: </p>

<ul>
<li><a href=""http://www.finkproject.org/doc/porting/porting.en.html#shared"" rel=""noreferrer"">Fink Porting Guide</a>, the basis for this answer (though pretty out of date, as it was written for Mac OS X 10.3).</li>
<li><a href=""http://developer.apple.com/mac/library/DOCUMENTATION/Darwin/Reference/ManPages/man1/ld.1.html"" rel=""noreferrer"">ld(1)</a> and <a href=""http://developer.apple.com/Mac/library/documentation/Darwin/Reference/ManPages/man3/dlopen.3.html"" rel=""noreferrer"">dlopen(3)</a></li>
<li><a href=""http://developer.apple.com/Mac/library/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html"" rel=""noreferrer"">Dynamic Library Programming Topics</a></li>
<li><a href=""http://developer.apple.com/mac/library/documentation/DeveloperTools/Conceptual/MachOTopics/0-Introduction/introduction.html"" rel=""noreferrer"">Mach-O Programming Topics</a></li>
</ul>
","2339910"
"String termination - char c=0 vs char c='\0'","64208","","<p>When terminating a string, it seems to me that logically <code>char c=0</code> is equivalent to <code>char c='\0'</code>, since the ""null"" (ASCII 0) byte is <code>0</code>, but usually people tend to do <code>'\0'</code> instead. Is this purely out of preference or should it be a better ""practice""?</p>

<p>What is the preferred choice?</p>

<hr>

<p><strong>EDIT:</strong> <strong><em>K&amp;R</em></strong> <em>says</em>: ""The character constant <code>'\0'</code> represents the character with value zero, the null character. <code>'\0'</code> is often written instead of <code>0</code> to emphasize the character nature of some expression, but the numeric value is just <code>0</code>.</p>
","<p><a href=""http://en.wikipedia.org/wiki/Ascii#ASCII_control_code_chart"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Ascii#ASCII_control_code_chart</a></p>

<pre><code>Binary   Oct  Dec    Hex    Abbr    Unicode  Control char  C Escape code   Name
0000000  000  0      00     NUL     ␀       ^@            \0              Null character
</code></pre>

<p>There's no difference, but the more idiomatic one is <code>'\0'</code>. </p>

<p>Perhaps putting it down as <code>char c = 0;</code> could mean that you intend to use it as a number (e.g. a counter), although I've personally not come across code like that. <code>'\0'</code> is unambiguous.</p>
","16956027"
"Regular expression for a string literal in flex/lex","64153","","<p>I'm experimenting to learn flex and would like to match string literals. My code currently looks like:</p>

<pre><code>""\""""([^\n\""\\]*(\\[.\n])*)*""\""""        {/*matches string-literal*/;}
</code></pre>

<p>I've been struggling with variations for an hour or so and can't get it working the way it should. I'm essentially hoping to match a string literal that can't contain a new-line (unless it's escaped) and supports escaped characters.</p>

<p>I am probably just writing a poor regular expression or one incompatible with flex. Please advise!</p>
","<p>You'll find these links helpful<br></p>

<ul>
<li><p><a href=""http://www.lysator.liu.se/c/ANSI-C-grammar-l.html"" rel=""noreferrer"">ANSI C grammar, Lex
specification</a></p></li>
<li><p><a href=""http://www.lysator.liu.se/c/ANSI-C-grammar-y.html"" rel=""noreferrer"">ANSI C Yacc grammar</a></p></li>
</ul>
","2039804"
"What are the major differences between Objective-C, C, and C++?","64118","","<p>I'm just beginning to learn Objective-C, and am finding that a background in C (which I don't have) is a useful starting point.  I've dabbled in C++ so have some understanding of basic C++ paradigms and syntax.  (FWIW, I have extensive experience in Java and higher-level languages like JavaScript and ActionScript.)</p>

<p>I'm interested in exploring iOS development, but a bit wary of focusing in on a language useful only on a single vendor's platform.  I'd like to know more about how concepts I will learn as I proceed with Objective-C will transfer (or not) to knowledge of C and C++.</p>

<p>I'm interested mainly in core language concepts, but information on portability, frameworks, targetable platforms, etc. is welcome as well.</p>
","<p>What you need to know: Objective-C is a <strong>strict superset of C,</strong> so everything that is valid C is also valid Objective-C. Objective-C just adds a thin object-oriented layer on top of C (in fact, the Objective-C runtime itself is implemented in pure C).</p>

<p>What I generally suggest to beginners is to <strong>master C first,</strong> because if they don't understand pointers, type conversions, variadic arguments, etc. they'll have serious headache during the development of <strong>The Worlds Best iPhone App Ever (TM).</strong> Until you don't master C, don't try to get into Objective-C and especially into the Cocoa Touch API, since it can be very confusing for a beginner in C.</p>

<p>Also, C is cross-platform, and is <strong>the</strong> language for native development, hands in hands with C++, from desktop computers through mobile devices to microcontrollers. It's a common conception that ""if a system has a C compiler, that's enough to do anything that is available on the platform"". Some people think that C is dead, but <em>that's definitely not true.</em> (According to statistics, at least - <a href=""http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html"" rel=""noreferrer"">this chart suggests</a> it was the most popular language in October 2012.)</p>

<p>C++: it is based on C, and also adds some object-oriented extensions to C, although it's not a strict superset of C. This means that <strong>you can write C code that is invalid in C++</strong> or <strong>that does something different in C++ than that in C.</strong></p>

<p>C++ is also a good language of choice for practically any kind of native development (and it's  popular also), but again, it's a large language with a bloated grammar, and you also have to learn the concepts behind C before diving deep into C++, or you'll also have problems with the differences between pointers and references, operator overloading, name mangling, etc.</p>

<p>Well, that's it, pretty much. Conclusion: learn C very well first and you'll be in the possession of a powerful, cross-platform and widely used language; then learn Objective-C for iOS and Mac OS X development and C++ ""just for fun"" and for a handy and also powerful OO language.</p>
","13153293"
"How to truncate a file in C?","64102","","<p>I'm using C to write some data to a file. I want to erase the previous text written in the file in case it was longer than what I'm writing now.
I want to decrease the size of file or truncate until the end. How can I do this?</p>
","<p>In Windows  systems there's no header <code>&lt;unistd.h&gt;</code> but yet you can truncate a file by using </p>

<pre><code> _chsize( fileno(f), size);
</code></pre>
","874704"
"Signal handling in pthreads","64081","","<p>I have created a pthread, and installed a signal handler inside that, same way as we do in <code>main( )</code> function. The thread's signal handler is a separate function. Surprisingly, it is not working, that is the thread's signal handler is not able to catch signals.</p>

<p>Here is the code:</p>

<pre><code>#include &lt;pthread.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;signal.h&gt;

typedef struct data
{
 char name[10];
 int age;
}data;

void sig_func(int sig)
{
 printf(""Caught signal: %d\n"",sig);
 signal(SIGSEGV,sig_func);
}

void func(data *p)
{
 printf(""This is from thread function\n"");
 signal(SIGSEGV,sig_func); // Register signal handler inside thread
 strcpy(p-&gt;name,""Mr. Linux"");
 p-&gt;age=30;
 sleep(2); // Sleep to catch the signal
}

int main()
{
 pthread_t tid;
 pthread_attr_t attr;
 data *ptr;

 pthread_attr_init(&amp;attr);
 pthread_create(&amp;tid,&amp;attr,(void*)func,ptr);
 pthread_kill(tid,SIGSEGV);

 pthread_join(tid,NULL);
 printf(""Name:%s\n"",ptr-&gt;name);
 printf(""Age:%d\n"",ptr-&gt;age);
}
</code></pre>

<p>Output:</p>

<blockquote>
  <p>Segmentation fault (which means the signal is not caught by handler)</p>
</blockquote>
","<p>There are several problems with your code:</p>

<ul>
<li><code>ptr</code> is not initialised, so all the <code>ptr-&gt;</code> parts will crash the program</li>
<li>you are calling <code>pthread_kill()</code> immediately, very likely before the signal handler has been installed, and in a thread (which has unspecified behaviour)</li>
<li>you call <code>printf()</code> from a signal handler, which is not guaranteed to work (see <code>man 7 signal</code> for a list of safe functions)</li>
</ul>

<p>This will work a lot better, though you'd still need proper thread synchronisation, and as stated elsewhere, you should use <code>sigaction()</code>:</p>

<pre><code>#include &lt;pthread.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;signal.h&gt;

typedef struct data
{
 char name[10];
 int age;
}data;

void sig_func(int sig)
{
 write(1, ""Caught signal 11\n"", 17);
 signal(SIGSEGV,sig_func);
}

void func(data *p)
{
 fprintf(stderr, ""This is from thread function\n"");
 strcpy(p-&gt;name,""Mr. Linux"");
 p-&gt;age=30;
 sleep(2); // Sleep to catch the signal
}

int main()
{
 pthread_t tid;
 pthread_attr_t attr;
 data d;
 data *ptr = &amp;d;

 signal(SIGSEGV,sig_func); // Register signal handler before going multithread
 pthread_attr_init(&amp;attr);
 pthread_create(&amp;tid,&amp;attr,(void*)func,ptr);
 sleep(1); // Leave time for initialisation
 pthread_kill(tid,SIGSEGV);

 pthread_join(tid,NULL);
 fprintf(stderr, ""Name:%s\n"",ptr-&gt;name);
 fprintf(stderr, ""Age:%d\n"",ptr-&gt;age);
}
</code></pre>

<p><strong>Edit</strong>: install sighandler in main thread</p>
","5282181"
"strcmp() return values in C","64014","","<p>I am learning about <code>strcmp()</code> in C. I understand that when two strings are equal, <code>strcmp</code> returns 0.</p>

<p>However, when the man pages state that <code>strcmp</code> returns less than 0 when the first string is less than the second string, is it referring to length, ASCII values, or something else?</p>
","<p>In this sense, ""less than"" for strings means lexicographic (alphabetical) order.</p>

<p>So <code>cat</code> is less than <code>dog</code> because <code>cat</code> is alphabetically before <code>dog</code>.</p>

<p>Lexicographic order is, in some sense, an extension of alphabetical order to all ASCII (and UNICODE) characters.</p>
","7656507"
"What is global variable in C?","63926","","<p>What is global variable in C language ? And what is different between a global variable and another ones ? Its a global variable :
 <code>int GlobalVariable;</code></p>

<p>but it is not : </p>

<pre><code>int SubtractNumbers(int number_1, int number_2)
{
    int result =0;

    result = number_1 - number_2;

    return result;
}
</code></pre>

<p>Why ?</p>
","<p>A global variable is variable that can be accessed throughout the program and changes made to global variable persist, while the local variable can be used within a block where it is declared.</p>

<p>eg:</p>

<pre><code>    int GlobalVariable=0;
    int main()
    {
        int LocalVariable=0;  //can be used within main()
        return 1;
    }

    int dis()
    {
        GlobalVariable=5;  //Can be accessed in any functions and made changes to it
    }
</code></pre>
","18783721"
"Best way to print the result of a bool as 'false' or 'true' in c?","63907","","<p>I have to write a program in which main calls other functions that test a series of number if any are less than a number, if all the series' numbers are between two limits, and if any are negative.  My code returns the values of 1 for true and 0 for false, but the assignment asks that they be printed as 'true' or 'false'.  I'm not sure how to get the bool answers to print as a string from printf.  I used if (atl == false) printf(""false""); in my at_least.c and in main.c, but it returns only a long string of true or false (ex: truetruetrue....).  I'm not sure if that is the correct coding and I'm putting it in the wrong spot or there was some other code that I need to use.</p>

<p>This is my main.c:</p>

<pre><code>#include ""my.h""

int main (void)

{
    int     x;
    int     count    = 0;
    int     sum      = 0;
    double  average  = 0.0;
    int     largest  = INT_MIN;
    int     smallest = INT_MAX;
    bool    atlst    = false;
    bool    bet      = true;
    bool    neg      = false;
    int     end;

    while ((end = scanf(""%d"",&amp;x)) != EOF)
        {
            sumall(x, &amp;sum);                           //calling function sumall
            count++;
            larger_smaller(x, &amp;largest, &amp;smallest);    //calling function larger_smaller
            if (atlst == false)
               at_least(x, &amp;atlst);                    //calling function at_least if x &lt; 50
            if (bet == true)
               between(x, &amp;bet);                       //calling function between if x is between 30 and 40 (inclusive)
            if (neg == false)
               negative(x, &amp;neg);                      //calling function negative if x &lt; 0
        }
    average = (double) sum / count;         
    print(count, sum, average, largest, smallest, atlst, bet, neg);
    return;
 }
</code></pre>

<p>my results for a set of numbers:</p>

<pre><code>The number of integers is:           15
The sum is               :         3844
The average is           :       256.27
The largest is           :          987
The smallest is          :          -28
At least one is &lt;  50    :            1     //This needs to be true
All between  30 and  40  :            0     //This needs to be false
At least one is negative :            1     //This needs to be true
</code></pre>

<p>This is in C, which I can't seem to find much on.</p>

<p>Thanks in advance for your help!</p>

<p>ADDENDUM:</p>

<p>This is repeated from an answer below.</p>

<p>This worked for the at_least and negative functions, but not for the between function. I have </p>

<pre><code>void between(int x, bool* bet) 
  { 
    if (x &gt;= LOWER &amp;&amp; x &lt;= UPPER) 
        *bet = false; 
    return; 
  }
</code></pre>

<p>as my code. I'm not sure what's wrong.</p>
","<p>You could use C's conditional (or ternary) operator :</p>

<pre><code>  (a &gt; b) ? ""True"" : ""False"";
</code></pre>

<p>or perhaps in your case:</p>

<pre><code>  x ? ""True"" : ""False"" ;
</code></pre>
","7617495"
"C - calloc() v. malloc()","63820","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/1538420/c-difference-between-malloc-and-calloc"">c difference between malloc and calloc</a>  </p>
</blockquote>



<p>Please explain the significance of this statement,</p>

<blockquote>
  <p>Another
  difference between the malloc() and
  calloc() functions is that the memory
  allocated by malloc( ) function
  contains garbage values, while memory
  allocated by calloc( ) function
  contains all zeros.</p>
</blockquote>

<p>Source (<em>'C' Programming</em>, Salim Y. Amdani)</p>

<p>Thanks</p>
","<p>From <a href=""http://wiki.answers.com/Q/Is_it_better_to_use_malloc_or_calloc_to_allocate_memory"" rel=""noreferrer"">http://wiki.answers.com/Q/Is_it_better_to_use_malloc_or_calloc_to_allocate_memory</a></p>

<p><code>malloc()</code> is faster, since <code>calloc()</code> initializes the allocated memory to contain all zeros.  Since you typically would want to use and initialize the memory yourself, this additional benefit of <code>calloc()</code> may not be necessary.</p>
","3449073"
"Fatal error: iostream: No such file or directory in compiling C program using GCC","63816","","<p>Why when I wan to compile the following multi thread merge sorting C program, I receive this error: </p>

<pre><code>ap@sharifvm:~/forTHE04a$ gcc -g -Wall -o mer mer.c -lpthread
mer.c:4:20: fatal error: iostream: No such file or directory
 #include &lt;iostream&gt;
                    ^
compilation terminated.
ap@sharifvm:~/forTHE04a$ gcc -g -Wall -o mer mer.c -lpthread
mer.c:4:22: fatal error: iostream.h: No such file or directory
 #include &lt;iostream.h&gt;
                      ^
compilation terminated.
</code></pre>

<p>My program:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;pthread.h&gt;
#include &lt;iostream&gt;
using namespace std;

#define N 2  /* # of thread */

int a[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};  /* target array */

/* structure for array index
 * used to keep low/high end of sub arrays
 */
typedef struct Arr {
    int low;
    int high;
} ArrayIndex;

void merge(int low, int high)
{
        int mid = (low+high)/2;
        int left = low;
        int right = mid+1;

        int b[high-low+1];
        int i, cur = 0;

        while(left &lt;= mid &amp;&amp; right &lt;= high) {
                if (a[left] &gt; a[right])
                        b[cur++] = a[right++];
                else
                        b[cur++] = a[right++];
        }

        while(left &lt;= mid) b[cur++] = a[left++];
        while(right &lt;= high) b[cur++] = a[left++];
        for (i = 0; i &lt; (high-low+1) ; i++) a[low+i] = b[i];
}

void * mergesort(void *a)
{
        ArrayIndex *pa = (ArrayIndex *)a;
        int mid = (pa-&gt;low + pa-&gt;high)/2;

        ArrayIndex aIndex[N];
        pthread_t thread[N];

        aIndex[0].low = pa-&gt;low;
        aIndex[0].high = mid;

        aIndex[1].low = mid+1;
        aIndex[1].high = pa-&gt;high;

        if (pa-&gt;low &gt;= pa-&gt;high) return 0;

        int i;
        for(i = 0; i &lt; N; i++) pthread_create(&amp;thread[i], NULL, mergesort, &amp;aIndex[i]);
        for(i = 0; i &lt; N; i++) pthread_join(thread[i], NULL);

        merge(pa-&gt;low, pa-&gt;high);

        //pthread_exit(NULL);
        return 0;
}

int main()
{
        ArrayIndex ai;
        ai.low = 0;
        ai.high = sizeof(a)/sizeof(a[0])-1;
        pthread_t thread;

        pthread_create(&amp;thread, NULL, mergesort, &amp;ai);
        pthread_join(thread, NULL);

        int i;
        for (i = 0; i &lt; 10; i++) printf (""%d "", a[i]);
        cout &lt;&lt; endl;

        return 0;
}
</code></pre>
","<p>Neither <code>&lt;iostream&gt;</code> nor <code>&lt;iostream.h&gt;</code> are standard C header files. Your code is meant to be C++, where <code>&lt;iostream&gt;</code> is a valid header. Use <code>g++</code> (and a <code>.cpp</code> file extension) for C++ code.</p>

<p>However, this program uses mostly constructs that are available in C anyway. It's easy enough to convert the entire program to compile using a C compiler. Simply remove <code>#include &lt;iostream&gt;</code> and <code>using namespace std;</code>, and replace <code>cout &lt;&lt; endl;</code> with <code>putchar('\n');</code>... I advise compiling using C99 (eg. <code>gcc -std=c99</code>)</p>
","30543316"
"C Program to find day of week given date","63769","","<p>Is there a way to find out day of the week given date in just one line of C code?</p>

<p>For example </p>

<p>Given 19-05-2011(dd-mm-yyyy) gives me Thursday</p>
","<p>A one-liner is unlikely, but the <a href=""http://pubs.opengroup.org/onlinepubs/009695399/functions/strptime.html"" rel=""nofollow noreferrer"">strptime function</a> can be used to parse your date format and the <code>struct tm</code> argument can be queried for its <code>tm_wday</code> member <em>on systems that modify those fields automatically</em> (e.g. some glibc implementations).</p>

<pre><code>int get_weekday(char * str) {
  struct tm tm;
  memset((void *) &amp;tm, 0, sizeof(tm));
  if (strptime(str, ""%d-%m-%Y"", &amp;tm) != NULL) {
    time_t t = mktime(&amp;tm);
    if (t &gt;= 0) {
      return localtime(&amp;t)-&gt;tm_wday; // Sunday=0, Monday=1, etc.
    }
  }
  return -1;
}
</code></pre>

<p>Or you could encode these rules to do some arithmetic in a really long single line:</p>

<ul>
<li>1 Jan 1900 was a Monday.</li>
<li>Thirty days has September, April, June and November; all the rest have thirty-one, saving February alone, which has twenty-eight, rain or shine, and on leap years, twenty-nine.</li>
<li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li>
</ul>

<p><strong>EDIT:</strong> note that this solution only works for dates after the UNIX epoch (1970-01-01T00:00:00Z).</p>
","6054071"
"GUI development: Qt vs GTK","63529","","<p>I'm new to programming with graphic user interface. I code mostly in C++ and I need my code and GUI to be OS independent so after doing some research I just can't decide between Qt or GTK. I read that GTK is more memory efficient but some sites said it was before Qt 4. Also Qt has the Qt creator IDE which I think is a wonderful IDE for C++. ¿Anyone knows more about the pros and cons of each one? Thanks</p>
","<p>Yay, another Lib_One vs Lib_Two kind of questions. I love answering these. </p>

<h2>Requirements</h2>

<p>Firstly, there is no perfect magical toolkit that fits everyone's needs. Your choice should be based on <em>what you are trying to do</em>. </p>

<ul>
<li>Do you just want a GUI Toolkit? Or do you want a complete application development framework with APIs for Graphics, Sound, Image IO etc. ?</li>
<li>Are you targeting a specific platform? </li>
<li>Do you need extra eye candy?</li>
<li>What does your client want?</li>
<li>Are you targeting embedded systems or the PC?</li>
</ul>

<h2>Gui Toolkit</h2>

<p>Both GTK+ and Qt are considerably mature Object Oriented GUI Toolkits. They are both open-source, cross-platform and have large active communities. GTK+ is used as the standard toolkit for the GNOME, LXDE and Xfce Desktop Environments while Qt is used for KDE. Both have been used for developing professional applications and are time-tested.</p>

<h2>Cross-Platform Compatibility</h2>

<p>Both toolkits support almost all mainstream PC Platforms. </p>

<p><strong>Platforms Supported By Both:</strong></p>

<ul>
<li>Windows XP </li>
<li>Windows Vista </li>
<li>Windows 7 </li>
<li>Mac OS X </li>
<li>Linux / Unix </li>
</ul>

<p><strong>In addition Qt also supports:</strong></p>

<ul>
<li>Symbian S60</li>
<li>Windows CE</li>
<li>WebOS</li>
<li>Android</li>
<li>Ubuntu Phone</li>
</ul>

<h2>Performance</h2>

<p>This is seriously debatable. GTK+ evangelists point to the high memory consumption of Qt apps, while Qt fans jeer at the GTK runtime's start-up time. But overall, there isn't any great difference. Both run fast enough on modern PCs.</p>

<h2>Proprietary Use &amp; Language Bindings</h2>

<p>GTK+ is LGPL licensed so it can be used for proprietary apps. Qt is triple licensed with LGPL, GPL and a proprietary license. If you use LGPL or buy the proprietary license, you can use Qt for proprietary apps.</p>

<p>Both Toolkits have bindings for all popular languages. Notable bindings include GTK#, the C# Binding for GTK+, which has been endorsed by the Mono Project. And Qt-Jambi, the Qt binding for Java, which is actively updated. </p>

<h2>Resources</h2>

<p>Both toolkits are extensively documented. With GTK+ having its own documentation ( GTK-Doc ), and Qt being documented by Nokia. However Qt may have a slight edge here because it has the huge resources and manpower of a huge corporation behind it (Nokia), while GTK+ is only documented by its contributors. There are tutorials on many places on the internet for both of them. I prefer <a href=""http://zetcode.com/"">ZetCode</a>.</p>

<h2>Conclusion</h2>

<p>As you can see both of them are more-or-less good enough. The choice really depends on the point I made earlier: what are your <em>requirements</em>?</p>
","9443796"
"What are the differences between poll and select?","63528","","<p>I am referring to the POSIX standard <a href=""http://en.wikipedia.org/wiki/Select_(Unix)"" rel=""noreferrer"">select</a> and <a href=""http://linux.die.net/man/2/poll"" rel=""noreferrer"">poll</a> system C API calls.</p>
","<p>I think that <a href=""http://www.unixguide.net/network/socketfaq/2.14.shtml"" rel=""nofollow noreferrer"">this</a> answers your question:</p>

<blockquote>
  <p>From Richard Stevens (rstevens@noao.edu):</p>
  
  <p>The basic difference is that select()'s fd_set is a bit mask and
  therefore has some fixed size.  It would be possible for the kernel to
  not limit this size when the kernel is compiled, allowing the
  application to define FD_SETSIZE to whatever it wants (as the comments
  in the system header imply today) but it takes more work.  4.4BSD's
  kernel and the Solaris library function both have this limit.  But I
  see that BSD/OS 2.1 has now been coded to avoid this limit, so it's 
  doable, just a small matter of programming. :-)  Someone should file a
  Solaris bug report on this, and see if it ever gets fixed.</p>
  
  <p>With poll(), however, the user must allocate an array of pollfd
  structures, and pass the number of entries in this array, so there's
  no fundamental limit.  As Casper notes, fewer systems have poll() than
  select, so the latter is more portable.  Also, with original
  implementations (SVR3) you could not set the descriptor to -1 to tell
  the kernel to ignore an entry in the pollfd structure, which made it 
  hard to remove entries from the array; SVR4 gets around this.
  Personally, I always use select() and rarely poll(), because I port my
  code to BSD environments too.  Someone could write an implementation
  of poll() that uses select(), for these environments, but I've never
  seen one. Both select() and poll() are being standardized by POSIX
  1003.1g.</p>
</blockquote>

<h3>October 2017 Update:</h3>

<p>The email referenced above is at least as old as 2001; the <code>poll()</code> command is now (2017) supported across all modern operating systems - including BSD.  In fact, some people believe that <code>select()</code> <a href=""https://beesbuzz.biz/blog/e/2013/10/10-the_problem_with_select_vs_poll.php"" rel=""nofollow noreferrer"">should be deprecated</a>.  Opinions aside, portability issues around <code>poll()</code> are no longer a concern on modern systems.  Furthermore, <code>epoll()</code> has since been developed (you can <a href=""http://man7.org/linux/man-pages/man7/epoll.7.html"" rel=""nofollow noreferrer"">read the man page</a>), and continues to rise in popularity.</p>

<p>For modern development you probably don't want to use <code>select()</code>, although there's nothing explicitly wrong with it.  <code>poll()</code>, and it's more modern evolution <code>epoll()</code>, provide the same features (and more) as <code>select()</code> without suffering from the limitations therein.</p>
","970991"
"C Programming: malloc() inside another function","63506","","<p>I need help with <code>malloc()</code> <strong><em>inside another function</em></strong>.</p>

<p>I'm passing a <strong>pointer</strong> and <strong>size</strong> to the function from my <code>main()</code> and I would like to allocate memory for that pointer dynamically using <code>malloc()</code> from inside that called function, but what I see is that.... the memory, which is getting allocated, is for the pointer declared within my called function and not for the pointer which is inside the <code>main()</code>.</p>

<p>How should I pass a pointer to a function and allocate memory for the passed pointer <strong>from inside the called function</strong>?</p>

<hr>

<p>I have written the following code and I get the output as shown below.</p>

<p><strong>SOURCE:</strong></p>

<pre><code>int main()
{
   unsigned char *input_image;
   unsigned int bmp_image_size = 262144;

   if(alloc_pixels(input_image, bmp_image_size)==NULL)
     printf(""\nPoint2: Memory allocated: %d bytes"",_msize(input_image));
   else
     printf(""\nPoint3: Memory not allocated"");     
   return 0;
}

signed char alloc_pixels(unsigned char *ptr, unsigned int size)
{
    signed char status = NO_ERROR;
    ptr = NULL;

    ptr = (unsigned char*)malloc(size);

    if(ptr== NULL)
    {
        status = ERROR;
        free(ptr);
        printf(""\nERROR: Memory allocation did not complete successfully!"");
    }

    printf(""\nPoint1: Memory allocated: %d bytes"",_msize(ptr));

    return status;
}
</code></pre>

<h2>PROGRAM OUTPUT:</h2>

<pre><code>Point1: Memory allocated ptr: 262144 bytes
Point2: Memory allocated input_image: 0 bytes
</code></pre>
","<p>You need to pass a pointer to a pointer as the parameter to your function.</p>

<pre><code>int main()
{
   unsigned char *input_image;
   unsigned int bmp_image_size = 262144;

   if(alloc_pixels(&amp;input_image, bmp_image_size) == NO_ERROR)
     printf(""\nPoint2: Memory allocated: %d bytes"",_msize(input_image));
   else
     printf(""\nPoint3: Memory not allocated"");     
   return 0;
}

signed char alloc_pixels(unsigned char **ptr, unsigned int size) 
{ 
    signed char status = NO_ERROR; 
    *ptr = NULL; 

    *ptr = (unsigned char*)malloc(size); 

    if(*ptr== NULL) 
    {
        status = ERROR; 
        free(*ptr);      /* this line is completely redundant */
        printf(""\nERROR: Memory allocation did not complete successfully!""); 
    } 

    printf(""\nPoint1: Memory allocated: %d bytes"",_msize(*ptr)); 

    return status; 
} 
</code></pre>
","2838060"
"What are the applications of the ## preprocessor operator and gotchas to consider?","63472","","<p>As mentioned in many of my previous questions, I'm working through K&amp;R, and am currently into the preprocessor. One of the more interesting things &mdash; something I never knew before from any of my prior attempts to learn C &mdash; is the <code>##</code> preprocessor operator. According to K&amp;R:</p>

<blockquote>
  <p>The preprocessor operator <code>##</code>
  provides a way to concatenate actual
  arguments during macro expansion. If a
  parameter in the replacement text is
  adjacent to a <code>##</code>, the parameter is
  replaced by the actual argument, the
  <code>##</code> and surrounding white space are
  removed, and the result is re-scanned.
  For example, the macro <code>paste</code>
  concatenates its two arguments:</p>
  
  <p><code>#define  paste(front, back)  front ## back</code></p>
  
  <p>so <code>paste(name, 1)</code> creates the token
  <code>name1</code>.</p>
</blockquote>

<p>How and why would someone use this in the real world? What are practical examples of its use, and are there gotchas to consider? </p>
","<p><strong>CrashRpt: Using ## to convert macro multi-byte strings to Unicode</strong></p>

<p>An interesting usage in CrashRpt (crash reporting library) is the following:</p>

<pre><code>#define WIDEN2(x) L ## x
#define WIDEN(x) WIDEN2(x)
//Note you need a WIDEN2 so that __DATE__ will evaluate first.
</code></pre>

<p>Here they want to use a two-byte string instead of a one-byte-per-char string. This probably looks like it is really pointless, but they do it for a good reason.</p>

<pre><code> std::wstring BuildDate = std::wstring(WIDEN(__DATE__)) + L"" "" + WIDEN(__TIME__);
</code></pre>

<p>They use it with another macro that returns a string with the date and time.</p>

<p>Putting <code>L</code> next to a <code>__ DATE __</code> would give you a compiling error.</p>

<hr>

<p><strong>Windows: Using ## for generic Unicode or multi-byte strings</strong></p>

<p>Windows uses something like the following:</p>

<pre><code>#ifdef  _UNICODE
    #define _T(x)      L ## x
#else
    #define _T(x) x
#endif
</code></pre>

<p>And <code>_T</code> is used everywhere in code</p>

<hr>

<p><strong>Various libraries, using for clean accessor and modifier names:</strong></p>

<p>I've also seen it used in code to define accessors and modifiers:</p>

<pre><code>#define MYLIB_ACCESSOR(name) (Get##name)
#define MYLIB_MODIFIER(name) (Set##name)
</code></pre>

<p>Likewise you can use this same method for any other types of clever name creation.</p>

<hr>

<p><strong>Various libraries, using it to make several variable declarations at once:</strong></p>

<pre><code>#define CREATE_3_VARS(name) name##1, name##2, name##3
int CREATE_3_VARS(myInts);
myInts1 = 13;
myInts2 = 19;
myInts3 = 77;
</code></pre>
","216888"
"Why does gcc generate 15-20% faster code if I optimize for size instead of speed?","63438","","<p>I first noticed in 2009 that gcc (at least on my projects and on my machines) have the tendency to generate noticeably faster code if I optimize for <strong>size</strong> (<code>-Os</code>) instead of speed (<code>-O2</code> or <code>-O3</code>), and I have been wondering ever since why.</p>

<p>I have managed to create (rather silly) code that shows this surprising behavior and is sufficiently small to be posted here.</p>

<pre><code>const int LOOP_BOUND = 200000000;

__attribute__((noinline))
static int add(const int&amp; x, const int&amp; y) {
    return x + y;
}

__attribute__((noinline))
static int work(int xval, int yval) {
    int sum(0);
    for (int i=0; i&lt;LOOP_BOUND; ++i) {
        int x(xval+sum);
        int y(yval+sum);
        int z = add(x, y);
        sum += z;
    }
    return sum;
}

int main(int , char* argv[]) {
    int result = work(*argv[1], *argv[2]);
    return result;
}
</code></pre>

<p>If I compile it with <code>-Os</code>, it takes 0.38&nbsp;s to execute this program, and 0.44&nbsp;s if it is compiled with <code>-O2</code> or <code>-O3</code>. These times are obtained consistently and with practically no noise (gcc 4.7.2, x86_64 GNU/Linux, Intel Core i5-3320M).</p>

<p><em>(Update: I have moved all assembly code to <a href=""http://en.wikipedia.org/wiki/GitHub"" rel=""noreferrer"">GitHub</a>: They made the post bloated and apparently add very little value to the questions as the <code>fno-align-*</code> flags have the same effect.)</em></p>

<p>The generated assembly with <a href=""https://gist.github.com/baharev/7069582#file-os"" rel=""noreferrer""><code>-Os</code></a> and <a href=""https://gist.github.com/baharev/7069582#file-o2"" rel=""noreferrer""><code>-O2</code></a>.
Unfortunately, my understanding of assembly is very limited, so I have no idea whether what I did next was correct: I grabbed the assembly for <code>-O2</code> and merged all its differences into the assembly for <code>-Os</code> <em>except</em> the <code>.p2align</code> lines, result <a href=""https://gist.github.com/baharev/7069582#file-o2merged"" rel=""noreferrer"">here</a>. This code still runs in 0.38s and <strong>the only difference is the</strong> <code>.p2align</code> <strong>stuff.</strong></p>

<p>If I guess correctly, these are paddings for stack alignment. According to <a href=""https://stackoverflow.com/q/7912464/341970"">Why does GCC pad functions with NOPs?</a> it is done in the hope that the code will run faster, but apparently this optimization backfired in my case.</p>

<p><strong>Is it the padding that is the culprit in this case? Why and how?</strong></p>

<p>The noise it makes pretty much makes timing micro-optimizations impossible.</p>

<p><strong>How can I make sure that such accidental lucky / unlucky alignments are not interfering when I do micro-optimizations (unrelated to stack alignment) on C or C++ source code?</strong></p>

<hr>

<p><strong>UPDATE:</strong></p>

<p>Following <a href=""https://stackoverflow.com/a/19471213/341970"">Pascal Cuoq's answer</a> I tinkered a little bit with the alignments. By passing <code>-O2 -fno-align-functions -fno-align-loops</code> to gcc, all <code>.p2align</code> are gone from the assembly and the generated executable runs in 0.38s. According to the <a href=""http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html"" rel=""noreferrer"">gcc documentation</a>:</p>

<blockquote>
  <p>-Os enables all -O2 optimizations [but] -Os disables the following optimization flags:</p>

<pre><code>  -falign-functions  -falign-jumps  -falign-loops &lt;br/&gt;
  -falign-labels  -freorder-blocks  -freorder-blocks-and-partition &lt;br/&gt;
  -fprefetch-loop-arrays &lt;br/&gt;
</code></pre>
</blockquote>

<p><strong>So, it pretty much seems like a (mis)alignment issue.</strong></p>

<p>I am still skeptical about <code>-march=native</code> as suggested in <a href=""https://stackoverflow.com/a/19471823/341970"">Marat Dukhan's answer</a>. I am not convinced that it isn't just interfering with this (mis)alignment issue; it has absolutely no effect on my machine. (Nevertheless, I upvoted his answer.)</p>

<hr>

<p><strong>UPDATE 2:</strong></p>

<p><strong>We can take <code>-Os</code> out of the picture.</strong> The following times are obtained by compiling with</p>

<ul>
<li><p><code>-O2 -fno-omit-frame-pointer</code> 0.37s</p></li>
<li><p><code>-O2 -fno-align-functions -fno-align-loops</code> 0.37s</p></li>
<li><p><code>-S -O2</code> then manually moving the assembly of <code>add()</code> after <code>work()</code> 0.37s</p></li>
<li><p><code>-O2</code> 0.44s</p></li>
</ul>

<p>It looks like to me the distance of <code>add()</code> from the call site matters a lot. I have tried <code>perf</code>, but the output of <code>perf stat</code> and <code>perf report</code> makes very little sense to me. However, I could only get one consistent result out of it:</p>

<p><code>-O2</code>:</p>

<pre><code> 602,312,864 stalled-cycles-frontend   #    0.00% frontend cycles idle
       3,318 cache-misses
 0.432703993 seconds time elapsed
 [...]
 81.23%  a.out  a.out              [.] work(int, int)
 18.50%  a.out  a.out              [.] add(int const&amp;, int const&amp;) [clone .isra.0]
 [...]
       ¦   __attribute__((noinline))
       ¦   static int add(const int&amp; x, const int&amp; y) {
       ¦       return x + y;
100.00 ¦     lea    (%rdi,%rsi,1),%eax
       ¦   }
       ¦   ? retq
[...]
       ¦            int z = add(x, y);
  1.93 ¦    ? callq  add(int const&amp;, int const&amp;) [clone .isra.0]
       ¦            sum += z;
 79.79 ¦      add    %eax,%ebx
</code></pre>

<p>For <code>fno-align-*</code>:</p>

<pre><code> 604,072,552 stalled-cycles-frontend   #    0.00% frontend cycles idle
       9,508 cache-misses
 0.375681928 seconds time elapsed
 [...]
 82.58%  a.out  a.out              [.] work(int, int)
 16.83%  a.out  a.out              [.] add(int const&amp;, int const&amp;) [clone .isra.0]
 [...]
       ¦   __attribute__((noinline))
       ¦   static int add(const int&amp; x, const int&amp; y) {
       ¦       return x + y;
 51.59 ¦     lea    (%rdi,%rsi,1),%eax
       ¦   }
[...]
       ¦    __attribute__((noinline))
       ¦    static int work(int xval, int yval) {
       ¦        int sum(0);
       ¦        for (int i=0; i&lt;LOOP_BOUND; ++i) {
       ¦            int x(xval+sum);
  8.20 ¦      lea    0x0(%r13,%rbx,1),%edi
       ¦            int y(yval+sum);
       ¦            int z = add(x, y);
 35.34 ¦    ? callq  add(int const&amp;, int const&amp;) [clone .isra.0]
       ¦            sum += z;
 39.48 ¦      add    %eax,%ebx
       ¦    }
</code></pre>

<p>For <code>-fno-omit-frame-pointer</code>:</p>

<pre><code> 404,625,639 stalled-cycles-frontend   #    0.00% frontend cycles idle
      10,514 cache-misses
 0.375445137 seconds time elapsed
 [...]
 75.35%  a.out  a.out              [.] add(int const&amp;, int const&amp;) [clone .isra.0]                                                                                     ¦
 24.46%  a.out  a.out              [.] work(int, int)
 [...]
       ¦   __attribute__((noinline))
       ¦   static int add(const int&amp; x, const int&amp; y) {
 18.67 ¦     push   %rbp
       ¦       return x + y;
 18.49 ¦     lea    (%rdi,%rsi,1),%eax
       ¦   const int LOOP_BOUND = 200000000;
       ¦
       ¦   __attribute__((noinline))
       ¦   static int add(const int&amp; x, const int&amp; y) {
       ¦     mov    %rsp,%rbp
       ¦       return x + y;
       ¦   }
 12.71 ¦     pop    %rbp
       ¦   ? retq
 [...]
       ¦            int z = add(x, y);
       ¦    ? callq  add(int const&amp;, int const&amp;) [clone .isra.0]
       ¦            sum += z;
 29.83 ¦      add    %eax,%ebx
</code></pre>

<p>It looks like we are stalling on the call to <code>add()</code> in the slow case.</p>

<p>I have examined <em>everything</em> that <code>perf -e</code> can spit out on my machine; not just the stats that are given above.</p>

<p>For the same executable, the <code>stalled-cycles-frontend</code> shows linear correlation with the execution time; I did not notice anything else that would correlate so clearly. (Comparing <code>stalled-cycles-frontend</code> for different executables doesn't make sense to me.)</p>

<p>I included the cache misses as it came up as the first comment. I examined all the cache misses that can be measured on my machine by <code>perf</code>, not just the ones given above. The cache misses are very very noisy and show little to no correlation with the execution times.</p>
","<p>My colleague helped me find a plausible answer to my question. He noticed the importance of the 256 byte boundary. He is not registered here and encouraged me to post the answer myself (and take all the fame).</p>

<hr>

<p><strong>Short answer:</strong></p>

<blockquote>
  <p>Is it the padding that is the culprit in this case? Why and how?</p>
</blockquote>

<p><strong>It all boils down to alignment.</strong> Alignments can have a significant impact on the performance, that is why we have the <code>-falign-*</code> flags in the first place.</p>

<p>I have submitted <a href=""http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58863"" rel=""noreferrer"">a (bogus?) bug report to the gcc developers</a>. It turns out that the default behavior is <em>""we align loops to 8 byte by default but try to align it to 16 byte if we don't need to fill in over 10 bytes.""</em> Apparently, this default is not the best choice in this particular case and on my machine. Clang 3.4 (trunk) with <code>-O3</code> does the appropriate alignment and the generated code does not show this weird behavior.</p>

<p>Of course, <strong>if an inappropriate alignment is done, it makes things worse.</strong> An unnecessary / bad alignment just eats up bytes for no reason and potentially increases cache misses, etc.</p>

<blockquote>
  <p>The noise it makes pretty much makes timing micro-optimizations
  impossible.</p>
  
  <p>How can I make sure that such accidental lucky / unlucky alignments
  are not interfering when I do micro-optimizations (unrelated to stack
  alignment) on C or C++ source codes?</p>
</blockquote>

<p><strong>Simply by telling gcc to do the right alignment:</strong></p>

<p><code>g++ -O2 -falign-functions=16 -falign-loops=16</code></p>

<hr>

<p><strong>Long answer:</strong></p>

<p>The code will run slower if:</p>

<ul>
<li><p>an <code>XX</code> byte boundary cuts <code>add()</code> in the middle (<code>XX</code> being machine dependent).</p></li>
<li><p>if the call to <code>add()</code> has to jump over an <code>XX</code> byte boundary and the target is not aligned.</p></li>
<li><p>if  <code>add()</code> is not aligned.</p></li>
<li><p>if the loop is not aligned.</p></li>
</ul>

<p>The first 2 are beautifully visible on the codes and results that <a href=""https://stackoverflow.com/a/19471823/341970"">Marat Dukhan kindly posted</a>. In this case, <code>gcc-4.8.1 -Os</code> (executes in 0.994 secs):</p>

<pre><code>00000000004004fd &lt;_ZL3addRKiS0_.isra.0&gt;:
  4004fd:       8d 04 37                lea    eax,[rdi+rsi*1]
  400500:       c3   
</code></pre>

<p>a 256 byte boundary cuts <code>add()</code> right in the middle and neither <code>add()</code> nor the loop is aligned. Surprise, surprise, this is the slowest case!</p>

<p>In case <code>gcc-4.7.3 -Os</code> (executes in 0.822 secs), the 256 byte boundary only cuts into a cold section (but neither the loop, nor <code>add()</code> is cut):</p>

<pre><code>00000000004004fa &lt;_ZL3addRKiS0_.isra.0&gt;:
  4004fa:       8d 04 37                lea    eax,[rdi+rsi*1]
  4004fd:       c3                      ret

[...]

  40051a:       e8 db ff ff ff          call   4004fa &lt;_ZL3addRKiS0_.isra.0&gt;
</code></pre>

<p>Nothing is aligned, and the call to <code>add()</code> has to jump over the 256 byte boundary. This code is the second slowest.</p>

<p>In case <code>gcc-4.6.4 -Os</code> (executes in 0.709 secs), although nothing is aligned, the call to <code>add()</code> doesn't have to jump over the 256 byte boundary and the target is exactly 32 byte away:</p>

<pre><code>  4004f2:       e8 db ff ff ff          call   4004d2 &lt;_ZL3addRKiS0_.isra.0&gt;
  4004f7:       01 c3                   add    ebx,eax
  4004f9:       ff cd                   dec    ebp
  4004fb:       75 ec                   jne    4004e9 &lt;_ZL4workii+0x13&gt;
</code></pre>

<p>This is the fastest of all three. Why the 256 byte boundary is speacial on his machine, I will leave it up to him to figure it out. I don't have such a processor.</p>

<p>Now, on my machine I don't get this 256 byte boundary effect. Only the function and the loop alignment kicks in on my machine. If I pass <code>g++ -O2 -falign-functions=16 -falign-loops=16</code> then everything is back to normal: I always get the fastest case and the time isn't sensitive to the <code>-fno-omit-frame-pointer</code> flag anymore. I can pass <code>g++ -O2 -falign-functions=32 -falign-loops=32</code> or any multiples of 16, the code is not sensitive to that either.</p>

<blockquote>
  <p>I first noticed in 2009 that gcc (at least on my projects and on my
  machines) have the tendency to generate noticeably faster code if I
  optimize for size (-Os) instead of speed (-O2 or -O3) and I have been
  wondering ever since why.</p>
</blockquote>

<p>A likely explanation is that I had hotspots which were sensitive to the alignment, just like the one in this example. By messing with the flags (passing <code>-Os</code> instead of <code>-O2</code>), those hotspots were aligned in a lucky way by accident and the code became faster. <strong>It had nothing to do with optimizing for size: These were by sheer accident that the hotspots got aligned better.</strong> From now on, I will check the effects of alignment on my projects.</p>

<p>Oh, and one more thing. <strong>How can such hotspots arise, like the one shown in the example? How can the inlining of such a tiny function like <code>add()</code> fail?</strong></p>

<p>Consider this:</p>

<pre><code>// add.cpp
int add(const int&amp; x, const int&amp; y) {
    return x + y;
}
</code></pre>

<p>and in a separate file:</p>

<pre><code>// main.cpp
int add(const int&amp; x, const int&amp; y);

const int LOOP_BOUND = 200000000;

__attribute__((noinline))
static int work(int xval, int yval) {
    int sum(0);
    for (int i=0; i&lt;LOOP_BOUND; ++i) {
        int x(xval+sum);
        int y(yval+sum);
        int z = add(x, y);
        sum += z;
    }
    return sum;
}

int main(int , char* argv[]) {
    int result = work(*argv[1], *argv[2]);
    return result;
}
</code></pre>

<p>and compiled as: <code>g++ -O2 add.cpp main.cpp</code>. </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>gcc won't inline <code>add()</code>!</strong></p>

<p>That's all, it's that easy to  unintendedly create hotspots like the one in the OP. <strong>Of course it is partly my fault: gcc is an excellent compiler.</strong> If compile the above as: <code>g++ -O2 -flto add.cpp main.cpp</code>, that is, <strong>if I perform link time optimization, the code runs in 0.19s!</strong> </p>

<p>(Inlining is artificially disabled in the OP, hence, the code in the OP was 2x slower).</p>
","19570226"
"Why do pthreads’ condition variable functions require a mutex?","63371","","<p>I’m reading up on <code>pthread.h</code>; the condition variable related functions (like <code>pthread_cond_wait(3)</code>) require a mutex as an argument. Why? As far as I can tell, I’m going to be creating a mutex <em>just</em> to use as that argument? What is that mutex supposed to do?</p>
","<p>It's just the way that condition variables are (or were originally) implemented.</p>

<p>The mutex is used to protect <em>the condition variable itself</em>. That's why you need it locked before you do a wait.</p>

<p>The wait will ""atomically"" unlock the mutex, allowing others access to the condition variable (for signalling). Then when the condition variable is signalled or broadcast to, one or more of the threads on the waiting list will be woken up and the mutex will be magically locked again for that thread.</p>

<p>You typically see the following operation with condition variables, illustrating how they work. The following example is a worker thread which is given work via a signal to a condition variable.</p>

<pre><code>thread:
    initialise.
    lock mutex.
    while thread not told to stop working:
        wait on condvar using mutex.
        if work is available to be done:
            do the work.
    unlock mutex.
    clean up.
    exit thread.
</code></pre>

<p>The work is done within this loop provided that there is some available when the wait returns. When the thread has been flagged to stop doing work (usually by another thread setting the exit condition then kicking the condition variable to wake this thread up), the loop will exit, the mutex will be unlocked and this thread will exit.</p>

<p>The code above is a single-consumer model as the mutex remains locked while the work is being done. For a multi-consumer variation, you can use, as an <em>example</em>:</p>

<pre><code>thread:
    initialise.
    lock mutex.
    while thread not told to stop working:
        wait on condvar using mutex.
        if work is available to be done:
            copy work to thread local storage.
            unlock mutex.
            do the work.
            lock mutex.
    unlock mutex.
    clean up.
    exit thread.
</code></pre>

<p>which allows other consumers to receive work while this one is doing work.</p>

<p>The condition variable relieves you of the burden of polling some condition instead allowing another thread to notify you when something needs to happen. Another thread can tell that thread that work is available as follows:</p>

<pre><code>lock mutex.
flag work as available.
signal condition variable.
unlock mutex.
</code></pre>

<p>The vast majority of what are often erroneously called spurious wakeups was generally always because multiple threads had been signalled within their <code>pthread_cond_wait</code> call (broadcast), one would return with the mutex, do the work, then re-wait.</p>

<p>Then the second signalled thread could come out when there was no work to be done. So you had to have an extra variable indicating that work should be done (this was inherently mutex-protected with the condvar/mutex pair here - other threads needed to lock the mutex before changing it however).</p>

<p>It <em>was</em> technically possible for a thread to return from a condition wait without being kicked by another process (this is a genuine spurious wakeup) but, in all my many years working on pthreads, both in development/service of the code and as a user of them, I never once received one of these. Maybe that was just because HP had a decent implementation :-)</p>

<p>In any case, the same code that handled the erroneous case also handled genuine spurious wakeups as well since the work-available flag would not be set for those.</p>
","2763749"
"pthreads mutex vs semaphore","63355","","<p>What is the difference between semaphores and mutex provided by pthread library ?</p>
","<p>semaphores have a synchronized counter and mutex's are just binary (true / false).</p>

<p>A semaphore is often used as a definitive mechanism for answering how many elements of a resource are in use -- e.g., an object that represents n worker threads might use a semaphore to count how many worker threads are available.</p>

<p>Truth is you can represent a semaphore by an INT that is synchronized by a mutex. </p>
","2065755"
"What is the Difference Between read() and recv() , and Between send() and write()?","63345","","<p>what is the difference between read() and recv() , and between send() and write() in socket programming ? performance and speed and other behavior.</p>
","<p>The only difference is that recv/send let you specify certain options for the actual operation . read/write are the 'universal' file descriptor functions while recv/send are slightly more specialized (for instance, you can set a flag to ignore SIGPIPE, or to send out-of-band messages...).</p>
","1790778"
"What is the correct way of reading from a TCP socket in C/C++?","63336","","<p>Here's my code:</p>

<pre><code>// Not all headers are relevant to the code snippet.
#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;unistd.h&gt;

char *buffer;
stringstream readStream;
bool readData = true;

while (readData)
{
    cout &lt;&lt; ""Receiving chunk... "";

    // Read a bit at a time, eventually ""end"" string will be received.
    bzero(buffer, BUFFER_SIZE);
    int readResult = read(socketFileDescriptor, buffer, BUFFER_SIZE);
    if (readResult &lt; 0)
    {
        THROW_VIMRID_EX(""Could not read from socket."");
    }

    // Concatenate the received data to the existing data.
    readStream &lt;&lt; buffer;

    // Continue reading while end is not found.
    readData = readStream.str().find(""end;"") == string::npos;

    cout &lt;&lt; ""Done (length: "" &lt;&lt; readStream.str().length() &lt;&lt; "")"" &lt;&lt; endl;
}
</code></pre>

<p>It's a little bit of C and C++ as you can tell. The BUFFER_SIZE is 256 - should I just increase the size? If so, what to? Does it matter?</p>

<p>I know that if ""end"" is not received for what ever reason, this will be an endless loop, which is bad - so if you could suggest a better way, please also do so.</p>
","<p>Without knowing your full application it is hard to say what the best way to approach the problem is, but a common technique is to use a header which starts with a fixed length field, which denotes the length of the rest of your message.</p>

<p>Assume that your header consist only of a 4 byte integer which denotes the length of the rest of your message. Then simply do the following.</p>

<pre><code>// This assumes buffer is at least x bytes long,
// and that the socket is blocking.
void ReadXBytes(int socket, unsigned int x, void* buffer)
{
    int bytesRead = 0;
    int result;
    while (bytesRead &lt; x)
    {
        result = read(socket, buffer + bytesRead, x - bytesRead);
        if (result &lt; 1 )
        {
            // Throw your error.
        }

        bytesRead += result;
    }
}
</code></pre>

<p>Then later in the code</p>

<pre><code>unsigned int length = 0;
char* buffer = 0;
// we assume that sizeof(length) will return 4 here.
ReadXBytes(socketFileDescriptor, sizeof(length), (void*)(&amp;length));
buffer = new char[length];
ReadXBytes(socketFileDescriptor, length, (void*)buffer);

// Then process the data as needed.

delete [] buffer;
</code></pre>

<p>This makes a few assumptions:</p>

<ul>
<li>ints are the same size on the sender and receiver.</li>
<li>Endianess is the same on both the sender and receiver.</li>
<li>You have control of the protocol on both sides</li>
<li>When you send a message you can calculate the length up front.</li>
</ul>

<p>Since it is common to want to explicitly know the size of the integer you are sending across the network define them in a header file and use them explicitly such as:</p>

<pre><code>// These typedefs will vary across different platforms
// such as linux, win32, OS/X etc, but the idea
// is that a Int8 is always 8 bits, and a UInt32 is always
// 32 bits regardless of the platform you are on.
// These vary from compiler to compiler, so you have to 
// look them up in the compiler documentation.
typedef char Int8;
typedef short int Int16;
typedef int Int32;

typedef unsigned char UInt8;
typedef unsigned short int UInt16;
typedef unsigned int UInt32;
</code></pre>

<p>This would change the above to:</p>

<pre><code>UInt32 length = 0;
char* buffer = 0;

ReadXBytes(socketFileDescriptor, sizeof(length), (void*)(&amp;length));
buffer = new char[length];
ReadXBytes(socketFileDescriptor, length, (void*)buffer);

// process

delete [] buffer;
</code></pre>

<p>I hope this helps.</p>
","666788"
"""break;"" out of ""if"" statement?","63335","","<p>Can you break out of an if statement or is it going to cause crashes? I'm starting to acquaint myself with C, but this seems controversial. The first image is from a book on C
(""Head First C"") and the snippet shows code written by Harvard's CS classes staff. What is actually going on and has it something to do with C standards?</p>

<blockquote>
  <p><strong>breaks don't break if statements.</strong></p>
  
  <p>On January 15, 1990, AT&amp;T's long-distance telephone system crashed, and 60,000 people lost their phone service.  The cause? A developer working on the C code used in the exchanges tried to use a <code>break</code> to break out of an <code>if</code> statement.  But <code>break</code>s don't break out of <code>if</code>s. Instead, the program skipped an entire section of code and introduced a bug that interrupted 70 million phone calls over nine hours.</p>
</blockquote>

<pre><code>for (size = 0; size &lt; HAY_MAX; size++)
{
    // wait for hay until EOF
    printf(""\nhaystack[%d] = "", size);
    int straw = GetInt();
    if (straw == INT_MAX)
        break;

    // add hay to stack
    haystack[size] = straw;
}
printf(""\n"");
</code></pre>
","<p><code>break</code> interacts solely with the closest enclosing loop or switch, whether it be a <code>for</code>, <code>while</code> or <code>do .. while</code> type. It is frequently referred to as a goto in disguise, as all loops in C can in fact be transformed into a set of conditional gotos:</p>

<pre><code>for (A; B; C) D;
// translates to
A;
goto test;
loop: D;
iter: C;
test: if (B) goto loop;
end:

while (B) D;          // Simply doesn't have A or C
do { D; } while (B);  // Omits initial goto test
continue;             // goto iter;
break;                // goto end;
</code></pre>

<p>The difference is, <code>continue</code> and <code>break</code> interact with virtual labels automatically placed by the compiler. This is similar to what <code>return</code> does as you know it will always jump ahead in the program flow. Switches are slightly more complicated, generating arrays of labels and computed gotos, but the way break works with them is similar. </p>

<p>The programming error the notice refers to is misunderstanding <code>break</code> as interacting with an enclosing block rather than an enclosing loop. Consider:</p>

<pre><code>for (A; B; C) {
   D;
   if (E) {
       F;
       if (G) break;   // Incorrectly assumed to break if(E), breaks for()
       H;
   }
   I;
}
J;
</code></pre>

<p>Someone thought, given such a piece of code, that <code>G</code> would cause a jump to <code>I</code>, but it jumps to <code>J</code>. The intended function would use <code>if (!G) H;</code> instead. </p>
","24714523"
"warning: assignment discards qualifiers from pointer target type","63314","","<p>I wrote the following code:</p>

<pre><code>void buildArrays(char *pLastLetter[],int length[], int size, const char str[]) {

    int i;
    int strIndex = 0;
    int letterCounter = 0;

    for (i=0; i&lt;size; i++) {

        while ( (str[strIndex] != SEPERATOR) || (str[strIndex] != '\0') ) {
            letterCounter++;
            strIndex++;
        }
        pLastLetter[i] = &amp;str[strIndex-1];
        length[i] = letterCounter;
        letterCounter = 0;
        strIndex++;
    }
}
</code></pre>

<p>and I'm getting the above warning on <code>pLastLetter[i] = &amp;str[strIndex-1];</code></p>

<blockquote>
  <p><code>pLastLetter is a pointers array that points to a char in str[].</code></p>
</blockquote>

<p>Anyone knows why I'm getting it and how to fix it?</p>
","<p>Well, as you said yourself, <code>pLastLetter</code> is an array of <code>char *</code> pointers, while <code>str</code> is an array of <code>const char</code>. The <code>&amp;str[strIndex-1]</code> expression has type <code>const char*</code>. You are not allowed to assign a <code>const char*</code> value to a <code>char *</code> pointer. That would violate the rules of const-correctness. In fact, what you are doing is an error in C. C compilers traditionally report it as a mere ""warning"" to avoid breaking some old legacy code.</p>

<p>As for ""how to fix it""... It depends on what you are trying to do. Either make <code>pLastLetter</code> an array of <code>const char*</code> or remove the <code>const</code> from <code>str</code>.</p>
","3479796"
"How to create my own header file in c++?","63250","","<p>Is it possible to create a new header file of my own? Can anyone help me how to create my own header file in c++ with an example ?</p>
","<p>Yes, of course you can, but before that you need to learn what header files are and how you can use them properly.</p>

<p>file: yourname.h</p>

<pre><code>#ifndef YOUR_NAME_INCLUDE
#define YOUR_NAME_INCLUDE

/* Your function statement here */
#endif
</code></pre>

<p>yourname.cpp</p>

<pre><code>#include &lt;iostream.h&gt;
#include ""yourname.h""

/* Your function definition here */
</code></pre>

<p>main.cpp</p>

<pre><code>#include &lt;iostream.h&gt;
#include ""yourname.h""

/* Your function calling here */
</code></pre>

<p>To learn more about header files and include statements, click the link below.</p>

<blockquote>
  <p><a href=""http://www.cplusplus.com/forum/articles/10627/"" rel=""nofollow noreferrer"">Header tutorial</a></p>
</blockquote>
","20015801"
"Difference between passing array and array pointer into function in C","63248","","<p>What is the difference between the two functions in C?</p>

<pre><code>void f1(double a[]) {
   //...
}

void f2(double *a) {
   //...
}
</code></pre>

<p>If I were to call the functions on a substantially long array, would these two functions behave differently, would they take more space on the stack?</p>
","<p>First, some <a href=""http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf"">standardese</a>:</p>

<blockquote>
<b>6.7.5.3 Function declarators (including prototypes)</b><br>
...<br>
7 A declaration of a parameter as ‘‘array of <i>type</i>’’ shall be adjusted to ‘‘qualified pointer to
<i>type</i>’’, where the type qualifiers (if any) are those specified within the <code>[</code> and <code>]</code> of the
array type derivation. If the keyword <code>static</code> also appears within the <code>[</code> and <code>]</code> of the
array type derivation, then for each call to the function, the value of the corresponding
actual argument shall provide access to the first element of an array with at least as many
elements as specified by the size expression.
</blockquote>

<p>So, in short, any function parameter declared as <code>T a[]</code> or <code>T a[N]</code> is treated <em>as though</em> it were declared <code>T *a</code>.  </p>

<p>So, why are array parameters treated as though they were declared as pointers?  Here's why:</p>

<blockquote>
<b>6.3.2.1 Lvalues, arrays, and function designators</b><br>
...<br>
3 Except when it is the operand of the <code>sizeof</code> operator or the unary <code>&</code> operator, or is a
string literal used to initialize an array, an expression that has type ‘‘array of <i>type</i>’’ is
converted to an expression with type ‘‘pointer to <i>type</i>’’ that points to the initial element of
the array object and is not an lvalue. If the array object has register storage class, the
behavior is undefined.
</blockquote>

<p>Given the following code:</p>

<pre><code>int main(void)
{
  int arr[10];
  foo(arr);
  ...
}
</code></pre>

<p>In the call to <code>foo</code>, the array expression <code>arr</code> isn't an operand of either <code>sizeof</code> or <code>&amp;</code>, so its type is implicitly converted from ""10-element array of <code>int</code>"" to ""pointer to <code>int</code>"" according to 6.2.3.1/3. Thus, <code>foo</code> will receive a pointer value, rather than an array value.  </p>

<p>Because of 6.7.5.3/7, you can write <code>foo</code> as</p>

<pre><code>void foo(int a[]) // or int a[10]
{
  ...
}
</code></pre>

<p>but it will be interpreted as </p>

<pre><code>void foo(int *a)
{
  ...
}
</code></pre>

<p>Thus, the two forms are identical.  </p>

<p>The last sentence in 6.7.5.3/7 was introduced with C99, and basically means that if you have a parameter declaration like</p>

<pre><code>void foo(int a[static 10])
{
  ...
}
</code></pre>

<p>the actual parameter corresponding to <code>a</code> must be an array with <em>at least</em> 10 elements.</p>
","5573741"
"Why do I get a C malloc assertion failure?","63131","","<p>I am implementing a divide and conquer polynomial algorithm so I can benchmark it against an OpenCL implementation, but I can't get <code>malloc</code> to work. When I run the program, it allocates a bunch of stuff, checks some things, then sends the <code>size/2</code> to the algorithm. Then when I hit the <code>malloc</code> line again it spits out this:</p>

<blockquote>
  <p>malloc.c:3096: sYSMALLOc: Assertion `(old_top == (((mbinptr) (((char *) &amp;((av)->bins[((1) - 1) * 2])) - __builtin_offsetof (struct malloc_chunk, fd)))) &amp;&amp; old_size == 0) || ((unsigned long) (old_size) >= (unsigned long)((((__builtin_offsetof (struct malloc_chunk, fd_nextsize))+((2 * (sizeof(size_t))) - 1)) &amp; ~((2 * (sizeof(size_t))) - 1))) &amp;&amp; ((old_top)->size &amp; 0x1) &amp;&amp; ((unsigned long)old_end &amp; pagemask) == 0)' failed.
  Aborted</p>
</blockquote>

<p>The line in question is:</p>

<pre><code>int *mult(int size, int *a, int *b) {
    int *out,i, j, *tmp1, *tmp2, *tmp3, *tmpa1, *tmpa2, *tmpb1, *tmpb2,d, *res1, *res2;
    fprintf(stdout, ""size: %d\n"", size);

    out = (int *)malloc(sizeof(int) * size * 2);
}
</code></pre>

<p>I checked size with a <code>fprintf</code>, and it is a positive integer (usually 50 at that point).  I tried calling <code>malloc</code> with a plain number as well and I still get the error.  I'm just stumped at what's going on, and nothing from Google I have found so far is helpful.</p>

<p>Any ideas what's going on?  I'm trying to figure out how to compile a newer GCC in case it's a compiler error, but I really doubt it.</p>
","<p>99.9% likely that you have corrupted memory (over- or under-flowed a buffer, wrote to a pointer after it was freed, called free twice on the same pointer, etc.)</p>

<p>Run your code under <a href=""http://valgrind.org"" rel=""noreferrer"">Valgrind</a> to see where your program did something incorrect.</p>
","2987222"
"Does C have a string type?","63128","","<p>I have recently started programming in C, coming from Java and Python. Now, in my book I have noticed that to make a ""Hello World"" program, the syntax is something like this:</p>

<pre><code>char message[10]
strcpy(message, ""Hello, world!"")
printf(""%s\n"", message);
</code></pre>

<p>Now, this example is using a char array and I wondered - what happened to strings? Why can't I simply use one of those? Maybe there is a different way to do this?</p>
","<p>C does not and never has had a native string type. By convention, the language uses arrays of <code>char</code> terminated with a null char, i.e., with <code>'\0'</code>. Functions and macros in the language's standard libraries provide support for the null-terminated character arrays, e.g., <a href=""http://pubs.opengroup.org/onlinepubs/009695399/functions/strlen.html"">strlen</a> iterates over an array of <code>char</code> until it encounters a <code>'\0'</code> character and <a href=""http://pubs.opengroup.org/onlinepubs/009695399/functions/strcpy.html"">strcpy</a> copies from the source string until it encounters a <code>'\0'</code>.</p>

<p>The use of null-terminated strings in C reflects the fact that C was intended to be only a little more high-level than assembly language. Zero-terminated strings were already directly supported at that time in <a href=""http://en.wikipedia.org/wiki/Null-terminated_string#History"">assembly language for the PDP-10 and PDP-11</a>.</p>

<p>It is worth noting that this property of C strings leads to quite a few nasty buffer overrun bugs, including serious security flaws. For example, if you forget to null-terminate a character string passed as the source argument to <code>strcpy</code>, the function will keep copying sequential bytes from whatever happens to be in memory past the end of the source string until it happens to encounter a <code>0</code>, potentially overwriting whatever valuable information follows the destination string's location in memory.</p>

<p>In your code example, the string literal ""Hello, world!"" will be compiled into a 14-byte long array of <code>char</code>. The first 13 bytes will hold the letters, comma, space, and exclamation mark and the final byte will hold the null-terminator character <code>'\0'</code>, automatically added for you by the compiler. If you were to access the array's last element, you would find it equal to <code>0</code>. E.g.:</p>

<pre><code>const char foo[] = ""Hello, world!"";
assert(foo[12] == '!');
assert(foo[13] == '\0');
</code></pre>

<p>However, in your example, <code>message</code> is only 10 bytes long. <code>strcpy</code> is going to write all 14 bytes, including the null-terminator, into memory starting at the address of <code>message</code>. The first 10 bytes will be written into the memory allocated on the stack for <code>message</code> and the remaining four bytes will simply be written on to the end of the stack. The consequence of writing those four extra bytes onto the stack is hard to predict in this case (in this simple example, it might not hurt a thing), but in real-world code it usually leads to corrupted data or memory access violation errors.</p>
","14709667"
"How to use /dev/random or urandom in C?","63086","","<p>I want to use <code>/dev/random</code> or <code>/dev/urandom</code> in C. How can I do it? I don't know how can I handle them in C, if someone knows please tell me how. Thank you. </p>
","<p>In general, it's a better idea to avoid opening files to get random data, because of how many points of failure there are in the procedure. </p>

<p>On recent Linux distributions, the <a href=""http://man7.org/linux/man-pages/man2/getrandom.2.html"" rel=""nofollow noreferrer""><code>getrandom</code></a> system call can be used to get crypto-secure random numbers, and it cannot fail <strong>if</strong> <code>GRND_RANDOM</code> is <em>not</em> specified as a flag and the read amount is at most 256 bytes.</p>

<p>As of October 2017, OpenBSD, Darwin and Linux (with <code>-lbsd</code>) now all have an implementation of <a href=""http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man3/arc4random.3?query=arc4random&amp;sec=3"" rel=""nofollow noreferrer""><code>arc4random</code></a> that is crypto-secure and that cannot fail. That makes it a very attractive option:</p>

<pre><code>char myRandomData[50];
arc4random_buf(myRandomData, sizeof myRandomData); // done!
</code></pre>

<p>Otherwise, you can use the random devices as if they were files. You read from them and you get random data. I'm using <code>open</code>/<code>read</code> here, but <code>fopen</code>/<code>fread</code> would work just as well.</p>

<pre><code>int randomData = open(""/dev/urandom"", O_RDONLY);
if (randomData &lt; 0)
{
    // something went wrong
}
else
{
    char myRandomData[50];
    ssize_t result = read(randomData, myRandomData, sizeof myRandomData);
    if (result &lt; 0)
    {
        // something went wrong
    }
}
</code></pre>

<p>You may read many more random bytes before closing the file descriptor. /dev/urandom never blocks and always fills in as many bytes as you've requested, unless the system call is interrupted by a signal. It is considered cryptographically secure and should be your go-to random device.</p>

<p>/dev/random is more finicky. On most platforms, it can return fewer bytes than you've asked for and it can block if not enough bytes are available. This makes the error handling story more complex:</p>

<pre><code>int randomData = open(""/dev/random"", O_RDONLY);
if (randomData &lt; 0)
{
    // something went wrong
}
else
{
    char myRandomData[50];
    size_t randomDataLen = 0;
    while (randomDataLen &lt; sizeof myRandomData)
    {
        ssize_t result = read(randomData, myRandomData + randomDataLen, (sizeof myRandomData) - randomDataLen);
        if (result &lt; 0)
        {
            // something went wrong
        }
        randomDataLen += result;
    }
    close(randomData);
}
</code></pre>
","2572373"
"how to correctly use fork, exec, wait","63071","","<p>The shell i'm writing needs to execute a program given to it by the user. Here's the very shortened simplified version of my program</p>

<pre><code>int main()
{
    pid_t pid = getpid(); // this is the parents pid

    char *user_input = NULL;
    size_t line_sz = 0;
    ssize_t  line_ct = 0; 

    line_ct = getline(&amp;user_input, &amp;line_sz, stdin); //so get user input, store in user_input

    for (;;)
    {
        pid_t child_pid = fork(); //fork a duplicate process

        pid_t child_ppid = getppid(); //get the child's parent pid

        if (child_ppid == pid) //if the current process is a child of the main process
        {
            exec(); //here I need to execute whatever program was given to user_input
            exit(1); //making sure to avoid fork bomb
        }

        wait(); //so if it's the parent process we need to wait for the child process to finish, right?

    }
}
</code></pre>

<ol>
<li>Have I forked the new process &amp; checked to see if it's a child process correctly</li>
<li>What exec could I use here for what I'm trying to do? What is the most simple way</li>
<li>What are my arguments to wait? the documentation I'm looking at isn't helping much</li>
</ol>

<p>Assume the user might input something like ls, ps, pwd</p>

<p>Thanks.</p>

<p>Edit:</p>

<pre><code>const char* hold = strdup(input_line);
char* argv[2]; 

argv[0] = input_line;
argv[1] = NULL;

char* envp[1];
envp[0] = NULL;

execve(hold, argv, envp);
</code></pre>
","<p>Here's a simple, readable solution:</p>

<pre><code>pid_t parent = getpid();
pid_t pid = fork();

if (pid == -1)
{
    // error, failed to fork()
} 
else if (pid &gt; 0)
{
    int status;
    waitpid(pid, &amp;status, 0);
}
else 
{
    // we are the child
    execve(...);
    _exit(EXIT_FAILURE);   // exec never returns
}
</code></pre>

<p>The child can use the stored value <code>parent</code> if it needs to know the parent's PID (though I don't in this example). The parent simply waits for the child to finish. Effectively, the child runs ""synchronously"" inside the parent, and there is no parallelism. The parent can query <code>status</code> to see in what manner the child exited (successfully, unsuccessfully, or with a signal).</p>
","19099707"
"Difference between uint and unsigned int?","63044","","<p>Is there any difference between <code>uint</code> and <code>unsigned int</code>?
I'm looking in the site, but all question refers to C# or C++.
I'd like an answer about C.</p>

<p>Note that I'm using GCC under Linux.</p>
","<p><code>uint</code> isn't a standard type - <code>unsigned int</code> is.</p>
","5678057"
"Why use bzero over memset?","63040","","<p>In a Systems Programming class I took this previous semester, we had to implement a basic client/server in C.  When initializing the structs, like <code>sock_addr_in</code>, or char buffers (that we used to send data back and forth between client and server) the professor instructed us to only use <code>bzero</code> and not <code>memset</code> to initialize them.  He never explained why, and I'm curious if there is a valid reason for this?</p>

<p>I see here: <a href=""http://fdiv.net/2009/01/14/memset-vs-bzero-ultimate-showdown"" rel=""noreferrer"">http://fdiv.net/2009/01/14/memset-vs-bzero-ultimate-showdown</a> that <code>bzero</code> is more efficient due to the fact that is only ever going to be zeroing memory, so it doesn't have to do any additional checking that <code>memset</code> may do.  That still doesn't necessarily seem like a reason to absolutely not use <code>memset</code> for zeroing memory though.</p>

<p><code>bzero</code> is considered deprecated, and furthermore is a not a standard C function. According to the manual, <code>memset</code> is preferred over <code>bzero</code> for this reason.  So why would you want to still use <code>bzero</code> over <code>memset</code>?  Just for the efficiency gains, or is it something more?  Likewise, what are the benefits of <code>memset</code> over <code>bzero</code> that make it the de facto preferred option for newer programs?</p>
","<p>I don't see any reason to prefer <code>bzero</code> over <code>memset</code>.</p>

<p><code>memset</code> is a standard C function while <code>bzero</code> has never been a C standard function. The rationale is probably because you can achieve exactly the same functionality using <code>memset</code> function.</p>

<p>Now regarding efficiency, compilers like <code>gcc</code> use builtin implementations for <code>memset</code> which switch to a particular implementation when a constant <code>0</code> is detected. Same for <code>glibc</code> when builtins are disabled.</p>
","17097088"
"C/C++ line number","63006","","<p>In the sake of debugging purposes, can I get the line number in <strong>C</strong>/C++ compilers?
(standard way or specific ways for certain compilers)</p>

<p>e.g</p>

<pre><code>if(!Logical)
    printf(""Not logical value at line number %d \n"",LineNumber);
    // How to get LineNumber without writing it by my hand?(dynamic compilation)
</code></pre>
","<p>You should use the preprocessor macro <code>__LINE__</code> and <code>__FILE__</code>. They are predefined macros and part of the C/C++ standard. During preprocessing, they are replaced respectively by a constant string holding an integer representing the current line number and by the current file name.</p>

<p>Others preprocessor variables :</p>

<ul>
<li><code>__func__</code> : function name (this is part of <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1642.html"" rel=""noreferrer"">C99</a>, not all C++ compilers support it)</li>
<li><code>__DATE__</code> : a string of form ""Mmm dd yyyy""</li>
<li><code>__TIME__</code> : a string of form ""hh:mm:ss""</li>
</ul>

<hr>

<p>Your code will be :</p>

<pre><code>if(!Logical)
  printf(""Not logical value at line number %d in file %s\n"", __LINE__, __FILE__);
</code></pre>
","2849850"
"When to use inline function and when not to use it?","62949","","<p>I know that inline is a hint or request to compiler and its used to avoid function call overheads.</p>

<p>So on what basis one can determine whether a function is a candidate for inlining or not ?
In which case one should avoid inlining ?</p>
","<p>Avoiding the cost of a function call is only half the story.</p>

<p>do:</p>

<ul>
<li>use <code>inline</code> instead of <code>#define</code></li>
<li><strong>very small</strong> functions are good candidates for <code>inline</code>: faster code and smaller executables (more chances to stay in the code cache)</li>
<li>the function is small <strong>and</strong> called very often</li>
</ul>

<p>don't:</p>

<ul>
<li>large functions: leads to larger executables, which significantly impairs performance regardless of the faster execution that results from the calling overhead</li>
<li>inline functions that are I/O bound</li>
<li>the function is seldom used</li>
<li>constructors and destructors: even when empty, the compiler generates code for them</li>
<li>breaking binary compatibility when developing libraries:

<ul>
<li>inline an existing function</li>
<li>change an inline function or make an inline function non-inline: prior version of the library call the old implementation</li>
</ul></li>
</ul>

<p>when developing a library, in order to make a class extensible in the future you should:</p>

<ul>
<li>add non-inline virtual destructor even if the body is empty</li>
<li>make all constructors non-inline</li>
<li>write non-inline implementations of the copy constructor and assignment operator unless the class cannot be copied by value</li>
</ul>

<p>Remember that the <code>inline</code> keyword is a hint to the compiler: the compiler may decide not to inline a function and it can decide to inline functions that were not marked <code>inline</code> in the first place. I generally avoid marking function <code>inline</code> (apart maybe when writing very very small functions). </p>

<p>About performance, the wise approach is (as always) to profile the application, then eventually <code>inline</code> a set of functions representing a bottleneck.</p>

<p>References:</p>

<ul>
<li><a href=""http://www.ddj.com/architect/184405660"" rel=""noreferrer"">To Inline or Not To Inline</a></li>
<li><a href=""http://www.parashift.com/c++-faq-lite/inline-functions.html"" rel=""noreferrer"">[9] Inline functions</a></li>
<li><a href=""http://techbase.kde.org/Policies/Binary_Compatibility_Issues_With_C++"" rel=""noreferrer"">Policies/Binary Compatibility Issues With C++</a></li>
<li><a href=""http://www.gotw.ca/gotw/033.htm"" rel=""noreferrer"">GotW #33: Inline</a></li>
<li><a href=""http://www.ddj.com/cpp/184403879"" rel=""noreferrer"">Inline Redux</a></li>
<li>Effective C++ - Item 33:  Use inlining judiciously</li>
</ul>

<hr>

<p>EDIT: Bjarne Stroustrup, The C++ Programming Language:</p>

<blockquote>
  <p>A function can be defined to be <code>inline</code>. For example: </p>
</blockquote>

<pre><code>inline int fac(int n)
{
  return (n &lt; 2) ? 1 : n * fac(n-1);
}
</code></pre>

<blockquote>
  <p>The <code>inline</code> specifier is a hint to the compiler that it should attempt to generate code for a call of <code>fac()</code> inline rather than laying down the code for the function once and then calling through the usual function call mechanism. A clever compiler can generate the constant <code>720</code> for a call <code>fac(6)</code>. The possibility of mutually recursive inline functions, inline functions that recurse or not depending on input, etc., makes it impossible to guarantee that every call of an <code>inline</code> function is actually inlined. The degree of cleverness of a compiler cannot be legislated, so one compiler might generate <code>720</code>, another <code>6 * fac(5)</code>, and yet another an un-inlined call <code>fac(6)</code>. </p>
  
  <p>To make inlining possible in the absence of unusually clever compilation and linking facilities, the definition–and not just the declaration–of an inline function must be in scope (§9.2). An <code>inline</code> especifier does not affect the semantics of a function. In particular, an inline function still has a unique address and so has <code>static</code> variables (§7.1.2) of an inline function.</p>
</blockquote>

<p>EDIT2: ISO-IEC 14882-1998, 7.1.2 Function specifiers</p>

<blockquote>
  <p>A function declaration (8.3.5, 9.3, 11.4) with an <code>inline</code> specifier declares an inline function. The inline specifier indicates to the implementation that inline substitution of the function body at the point of call is to be preferred to the usual function call mechanism. An implementation is not required to perform this inline substitution at the point of call; however, even if this inline substitution is omitted, the other rules for inline functions defined by 7.1.2 shall still be respected.</p>
</blockquote>
","1932371"
"C split a char array into different variables","62885","","<p>In C how can I separate a char array by a delimiter ? or is it better to manipulate a string ? what are some good c char manipulation functions ? </p>
","<pre><code>#include&lt;string.h&gt;
#include&lt;stdio.h&gt;
int main()
{
    char input[16] = ""abc,d"";
    char *p;
    p = strtok(input, "","");

    if(p)
    {
    printf(""%s\n"", p);
    }
    p = strtok(NULL, "","");

    if(p)
           printf(""%s\n"", p);
    return 0;
}
</code></pre>

<p>you can look this program .First you should use the  strtok(input, "","").input is the string you want to spilt.Then you use the strtok(NULL, "",""). If the return value is true ,you can print the other group.</p>
","10352044"
"How to use pointer expressions to access elements of a two-dimensional array in C?","62878","","<p>I know that for single-dimensional arrays  <code>x=a[i]</code> is equivalent to <code>x=*(a+i)</code>, but how can I access elements of a two-dimensional arrays using pointers?</p>
","<p><strong>Summary:</strong> If you have a multidimensional array defined as <code>int [][]</code>, then <code>x = y[a][b]</code> is equivalent to <code>x = *((int *)y + a * NUMBER_OF_COLUMNS + b);</code></p>

<hr>

<p><strong>Boring Details:</strong></p>

<p>The <code>(int *)</code> cast of <code>y</code> above deserves some explanation, as its necessity may not be at-first intuitive. To understand why it must be there consider the following:</p>

<ol>
<li><p>Typed pointer arithmetic in C/C++ always adjusts the typed pointer value (which is an address) by the size of the <strong>type</strong> in bytes when adding/subtracting/incrementing/decrementing by scalar.</p></li>
<li><p>The fundamental <em>type</em> of a multi-dimensional array declaration (not the element type; the <em>variable</em> type) is an array-type of one-less dimension than the final dimension.</p></li>
</ol>

<p>The latter (#2) of these really needs an example to solidify. In the following, variables <code>ar1</code> and <code>ar2</code> are equivalent declarations.</p>

<pre><code>int ar1[5][5]; // an array of 5 rows of 5 ints.

typedef int Int5Array[5];  // type is an array of 5 ints
Int5Array ar2[5];          // an array of 5 Int5Arrays.
</code></pre>

<p>Now the pointer arithmetic part. Just as a typed structure pointer can be advanced by the size of the structure in bytes, so can a full dimension of an array be hopped over. This is easier to understand if you think of the multi-dimensioned array as I declared ar2 above:</p>

<pre><code>int (*arptr)[5] = ar1; // first row, address of ar1[0][0].
++arptr;               // second row, address of ar[1][0].
</code></pre>

<p>All of this goes away with a bare pointer:</p>

<pre><code>int *ptr = ar1; // first row, address of ar1[0][0].
++ptr;          // first row, address of ar1[0][1].
</code></pre>

<p>Therefore, when doing the pointer arithmetic for two-dimensional array, the following would NOT work in getting the element at <code>[2][2]</code> of a multi-dimensioned array:</p>

<pre><code>#define NUMBER_OF_COLUMNS   5
int y[5][NUMBER_OF_COLUMNS];
int x = *(y + 2 * NUMBER_OF_COLUMNS + 2); // WRONG
</code></pre>

<p>The reason is hopefully obvious when you remember that <code>y</code> is an array of arrays (declaratively speaking). The pointer arithmetic of adding the scaler <code>(2*5 + 2)</code> to <code>y</code> will add 12 <em>rows</em>, thereby computing and address equivalent to <code>&amp;(y[12])</code>, which is clearly not right, and in fact, will either throw a fat warning at compile time or outright fail to compile altogether. This is avoided with the cast of <code>(int*)y</code> and the resulting type of the expression being based on an bare pointer-to-int:</p>

<pre><code>#define NUMBER_OF_COLUMNS   5
int y[5][NUMBER_OF_COLUMNS];
int x = *((int *)y + 2 * NUMBER_OF_COLUMNS + 2); // Right!
</code></pre>
","13554290"
"Why does a string returned from my function print as garbage?","62832","","<p>I am trying to convert the string to upper case, e.g. convert <code>test.pdf</code> to <code>TEST.PDF</code>. However, when I try to print returned value using <code>printf</code>, it prints some junk value. What am I doing wrong? </p>

<pre><code>char *covertToUpper(char *str)
{
    int i = 0;
    int len = 0;

    len = strlen(str);
    char newstr[len+1];

    for(i = 0; str[i]; i++)
    {
       newstr[i] = toupper(str[i]);
    }
    //terminate string
    newstr[i]= '\0';
    return  newstr;
}
</code></pre>
","<p>The reason you are getting junk is because you're allocating""<code>newstr</code> on the stack and then returning its value. This is a big no-no in C. Every function you call afterwards, including the <code>printf()</code> function itself, will trample all over what you just allocated.</p>

<p>C is unfortunately a bit of a dangerous language. It will not stop you from returning a string you allocated on the stack to a calling function even though that memory is no longer safe to use once the function it was declared in returns.</p>

<p>Instead of allocating the string this way, you need to allocate fresh memory on the heap for it using <code>malloc()</code> or <code>calloc()</code> and set <code>newstr</code> to point to it. For example, you could declare:</p>

<pre><code>char newstr = malloc(len);
</code></pre>

<p>This will need to be <code>free()</code>d appropriately when it is no longer used, of course.</p>
","9441159"
"How do you query a pthread to see if it is still running?","62749","","<p>In my destructor I want to destroy a thread cleanly.</p>

<p>My goal is to wait for a thread to finish executing and THEN destroy the thread.</p>

<p>The only thing I found about querying the state of a pthread is <a href=""https://computing.llnl.gov/tutorials/pthreads/man/pthread_attr_getdetachstate.txt"" rel=""noreferrer"">pthread_attr_setdetachstate</a> but this only tells you if your thread is:</p>

<ul>
<li>PTHREAD_CREATE_DETACHED </li>
<li>PTHREAD_CREATE_JOINABLE</li>
</ul>

<p>Both of those have nothing to do with whether the thread is still running or not.</p>

<p><strong>How do you query a pthread to see if it is still running?</strong></p>
","<p>It sounds like you have two questions here:</p>

<h2>How can I wait until my thread completes?</h2>

<p>Answer: This is directly supported by pthreads -- make your thread-to-be-stopped JOINABLE (when it is first started), and use pthread_join() to block your current thread until the thread-to-be-stopped is no longer running.</p>

<hr>

<h2>How can I tell if my thread is still running?</h2>

<p>Answer: You can add a ""thread_complete"" flag to do the trick:</p>

<p>Scenario:  Thread A wants to know if Thread B is still alive.</p>

<p>When Thread B is created, it is given a pointer to the ""thread_complete"" flag address.  The ""thread_complete"" flag should be initialized to NOT_COMPLETED before the thread is created.  Thread B's entry point function should immediately call pthread_cleanup_push() to push a ""cleanup handler"" which sets the ""thread_complete"" flag to COMPLETED.</p>

<p>See details about cleanup handlers here: <a href=""http://www.opengroup.org/onlinepubs/000095399/functions/pthread_cleanup_pop.html"" rel=""noreferrer"">pthread cleanup handlers</a></p>

<p>You'll want to include a corresponding pthread_cleanup_pop(1) call to ensure that the cleanup handler gets called no matter what (i.e. if the thread exits normally OR due to cancellation, etc.).</p>

<p>Then, Thread A can simply check the ""thread_complete"" flag to see if Thread B has exited yet.</p>

<p>NOTE:  Your ""thread_complete"" flag should be declared ""volatile"" and should be an atomic type -- the GNU compilers provide the sig_atomic_t for this purpose.  This allows the two threads consistent access the same data without the need for synchronization constructs (mutexes/semaphores).</p>
","2156580"
"error: `itoa` was not declared in this scope","62748","","<p>I have a sample c file called itoa.cpp as below:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main ()
{
  int i;
  char buffer [33];
  printf (""Enter a number: "");
  scanf (""%d"",&amp;i);
  itoa (i,buffer,10);
  printf (""decimal: %s\n"",buffer);
  return 0;
}
</code></pre>

<p>When i compile the above code with the below command:</p>

<pre>
gcc itoa.cpp -o itoa
</pre>

<p>i am getting this error:</p>

<pre>
[root@inhyuvelite1 u02]# gcc itoa.cpp -o itoa
itoa.cpp: In function ""int main()"":
itoa.cpp:10: error: ""itoa"" was not declared in this scope
</pre>

<p>What is wrong in this code? How to get rid of this?</p>
","<p>itoa is not ansi C standard and you should probably avoid it.  Here are some roll-your-own implementations if you really want to use it anyway:</p>

<p><a href=""http://www.strudel.org.uk/itoa/"" rel=""nofollow"">http://www.strudel.org.uk/itoa/</a></p>

<p>If you need in memory string formatting, a better option is to use snprintf.  Working from your example:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main ()
{
  int i;
  char buffer [33];
  printf (""Enter a number: "");
  scanf (""%d"",&amp;i);
  snprintf(buffer, sizeof(buffer), ""%d"", i);
  printf (""decimal: %s\n"",buffer);
  return 0;
}
</code></pre>
","6462973"
"Setup OpenCV-2.3 for Visual Studio 2010","62733","","<p>I'm trying to use opencv 2.3 with Visual Studio 2010 Express. My code is from example: </p>

<pre><code>#include ""stdafx.h""
#include &lt;highgui.h&gt;

int _tmain(int argc, _TCHAR* argv[])
{
    int c;
    // allocate memory for an image
    IplImage *img;
    // capture from video device #1
    CvCapture* capture = cvCaptureFromCAM(1);
    // create a window to display the images
    cvNamedWindow(""mainWin"", CV_WINDOW_AUTOSIZE);
    // position the window
    cvMoveWindow(""mainWin"", 5, 5);
    while(1)
    {
        // retrieve the captured frame
        img=cvQueryFrame(capture);
        // show the image in the window
        cvShowImage(""mainWin"", img );
        // wait 10 ms for a key to be pressed
        c=cvWaitKey(10);
        // escape key terminates program
        if(c == 27)         
            break;
    }

    return 0;
}
</code></pre>

<p>What have I done so far?</p>

<ul>
<li>Added <code>build\bin</code> and one of <code>build\{x86|x64}\{vc9\vc10\mingw}\bin</code> to my system path (to use DLLs).</li>
<li>Added <code>build\{x86|x64}\{vc9\vc10\mingw}\lib</code> or <code>build\{x86|x64}\{vc9\vc10\mingw}\staticlib</code> as library directories to my linker settings.</li>
<li>Added <code>build\include</code> and <code>build\include\opencv</code> as include directories to my compiler settings.</li>
</ul>

<p>And the result is: </p>

<blockquote>
  <p><strong>1>LINK : fatal error LNK1104: cannot open file 'c:\OpenCV2.3\build\x86\vc10\lib.obj'</strong></p>
</blockquote>

<p>There's no <code>lib.obj</code> in OpenCV folders. I've only unziped <code>OpenCV-2.3.0-win-superpack.exe</code>, without using CMake software.</p>

<p>What am I doing wrong?</p>
","<p>Well, the <a href=""http://opencv.willowgarage.com/wiki/VisualC++_VS2010"" rel=""noreferrer""><strong>official guide</strong></a> is for installing <strong>OpenCV 2.1</strong> on VS2010, so I wrote some instructions below that shows how to properly install and configure the <strong>x86</strong> version of <strong>OpenCV 2.3</strong> on <strong>Visual Studio 2010</strong> (Express), since a lot of folks seem to have problems setting it up correctly.</p>

<p>Download <a href=""http://tenet.dl.sourceforge.net/project/opencvlibrary/opencv-win/2.3/OpenCV-2.3.0-win-superpack.exe"" rel=""noreferrer""><em>OpenCV-2.3.0-win-superpack.exe</em></a> and execute it to extract all files to a folder named <code>OpenCV2.3</code>. Inside this folder there are 2 directories: <code>build</code> and <code>opencv</code>. All the setup on VS2010 will refer to the <code>build</code> directory. For practical purposes I moved the folder <code>OpenCV2.3</code> to my <code>C:\</code> drive, so pay attention to the paths I suggest on this guide as yours might be different.</p>

<p>On Visual Studio, create a new <strong>Win32 Console Application</strong> project and name it whatever you like. After that, a new window will show up. Click on the tab <strong>Application Settings</strong> and make sure the option <strong>Empty Project</strong> gets selected:</p>

<p><img src=""https://i.stack.imgur.com/kcO26.jpg"" alt=""enter image description here""></p>

<p>Add a new file <code>main.cpp</code> to the folder <code>Source Files</code>, then add this code to <code>main.cpp</code>:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;cv.h&gt;
#include &lt;highgui.h&gt;

int main(int argc, char* argv[])
{
if (argc &lt; 2)
{
    printf(""Usage: ./opencv_hello &lt;file.png&gt;\n"");
    return -1;
}

    IplImage* img = cvLoadImage(argv[1], CV_LOAD_IMAGE_UNCHANGED);
if (!img)
{
    return -1;
}

cvNamedWindow(""display"", CV_WINDOW_AUTOSIZE);
    cvShowImage(""display"", img );

    cvWaitKey(0);        

    return 0;
}
</code></pre>

<p>At this point, we need to configure the project so it can locate OpenCV headers and libraries. Go to the Project Properties (<strong>ALT+F7</strong>), and once the new window shows up do the following:</p>

<ul>
<li><p>On the <strong>Configuration</strong> box, select <strong>All Configurations</strong></p></li>
<li><p>Open <strong>Configuration Properties > C/C++ > General</strong>, and edit the field <strong>Additional Include Directories</strong> to add these 3 paths (for the headers):</p>

<p><code>C:\OpenCV2.3\build\include\opencv</code></p>

<p><code>C:\OpenCV2.3\build\include\opencv2</code></p>

<p><code>C:\OpenCV2.3\build\include</code></p></li>
</ul>

<p><img src=""https://i.stack.imgur.com/uL750.jpg"" alt=""enter image description here""></p>

<p>Note that <code>include\opencv</code> is for the C interface of OpenCV and <code>include\opencv2</code> if for the C++ interface. We are also adding the folder <code>include</code> to prevent our build from being broken by some headers of the C interface that refer to C++ headers as <code>opencv2\core</code>.</p>

<ul>
<li>Then, add the path of the libraries on <strong>Configuration Properties > Linker > General</strong>, and on the <strong>Additional Library Directories</strong> field, add this: <code>C:\OpenCV2.3\build\x86\vc9\lib</code>:</li>
</ul>

<p><img src=""https://i.stack.imgur.com/GXqJx.jpg"" alt=""enter image description here""></p>

<ul>
<li>Finally, for this simple test we are going to add the libraries <code>opencv_core230.lib</code> and <code>opencv_highgui230.lib</code>. So go to <strong>Configuration Properties > Linker > Input</strong> and add them:</li>
</ul>

<p><img src=""https://i.stack.imgur.com/ImHtF.jpg"" alt=""enter image description here""></p>

<p>When writing more complex applications you'll probably need to add other OpenCV libs that I did not 
mentioned on this little project of ours.</p>

<p>Press <strong>F7</strong> to <em>Build Solution</em> and you should see:</p>

<pre><code>========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========
</code></pre>

<p>To be able to execute the application you'll need to <a href=""http://geekswithblogs.net/renso/archive/2009/10/21/how-to-set-the-windows-path-in-windows-7.aspx"" rel=""noreferrer"">modify the <strong>PATH</strong> environment variable</a> of your system to add the location of OpenCV's DLLs. Add this to end of PATH:</p>

<pre><code>; C:\OpenCV2.3\build\x86\vc9\bin
</code></pre>
","7014918"
"finding character in string C language","62659","","<p>I am searching a character at first occurence in string using the following code. 
But it is taking some time when the character is too long or the character that I am 
searching is at far extent, which delays other operations. How could I tackle this problem. The code is below here.</p>

<p>Note: <code>attrPtr</code> is a <code>char *</code> which holds a reference to a string containing <code>'""'</code> character at far extent. </p>

<pre><code>int position = 0;

char qolon = '""';//character to search

while (*(attrPtr + position++) != qolon);

char* attrValue = NULL;

attrValue = (char*)malloc(position * sizeof(char));

strncpy(attrValue, attrPtr, position-1);
</code></pre>
","<p><a href=""http://en.cppreference.com/w/c/string/byte/strchr"" rel=""noreferrer""><code>strchr</code></a> will usually be somewhat faster.  Also, you need to check for the NUL terminator, which strchr will handle for you.</p>

<pre><code>char *quotPtr = strchr(attrPtr, qolon);
if(quotPtr == NULL)
{
  ... // Handle error
}
int position = quotPtr - attrPtr;
char* attrValue = (char*) malloc((position + 1) * sizeof(char));
memcpy(attrValue, attrPtr, position);
attrValue[position] = '\0';
</code></pre>

<p>I haven't tested, though.</p>

<p>EDIT: Fix off-by-one.</p>
","2963404"
"Inline functions vs Preprocessor macros","62619","","<p>How does an inline function differ from a preprocessor macro?</p>
","<p>Preprocessor macros are just substitution patterns applied to your code. They can be used almost anywhere in your code because they are replaced with their expansions before any compilation starts.</p>

<p>Inline functions are actual functions whose body is directly injected into their call site. They can only be used where a function call is appropriate.</p>

<p>Now, as far as using macros vs. inline functions in a function-like context, be advised that:</p>

<ul>
<li>Macros are not type safe, and can be expanded regardless of whether they are syntatically correct - the compile phase will report errors resulting from macro expansion problems.</li>
<li>Macros can be used in context where you don't expect, resulting in problems</li>
<li>Macros are more flexible, in that they can expand other macros - whereas inline functions don't necessarily do this.</li>
<li>Macros can result in side effects because of their expansion, since the input expressions are copied wherever they appear in the pattern.</li>
<li>Inline function are not always guaranteed to be inlined - some compilers only do this in release builds, or when they are specifically configured to do so. Also, in some cases inlining may not be possible.</li>
<li>Inline functions can provide scope for variables (particularly static ones), preprocessor macros can only do this in code blocks {...}, and static variables will not behave exactly the same way.</li>
</ul>
","1137627"
"Passing string to a function in C - with or without pointers?","62607","","<p>When I'm passing a string to the function sometimes I use</p>

<pre><code>char *functionname(char *string name[256])
</code></pre>

<p>and sometimes I use it without pointers (for example:</p>

<pre><code>char functionname(char string[256])
</code></pre>

<p>My question is,when do I need to use pointers ? Often I write programs without pointers and it works,but sometimes it doesn't. </p>
","<p>The accepted convention of passing C-strings to functions is to use a pointer:</p>

<pre><code>void function(char* name)
</code></pre>

<p>When the function modifies the string you should also pass in the length:</p>

<pre><code>void function(char* name, size_t name_length)
</code></pre>

<p>Your first example: </p>

<pre><code>char *functionname(char *string name[256])
</code></pre>

<p>passes an array of pointers to strings which is not what you need at all.</p>

<p>Your second example:</p>

<pre><code>char functionname(char string[256])
</code></pre>

<p>passes an array of chars. The size of the array here doesn't matter and the parameter will decay to a pointer anyway, so this is equivalent to:</p>

<pre><code>char functionname(char *string)
</code></pre>

<p>See also <a href=""https://stackoverflow.com/questions/3693429/c-parameter-array-declarators"">this question</a> for more details on array arguments in C.</p>
","17131943"
"Should struct definitions go in .h or .c file?","62516","","<p>I've seen both full definitions of <code>struct</code>s in headers and just declarations—is there any advantage to one method over the other?</p>

<p>If it makes a difference, I usually typedef a struct like so in the <code>.h</code></p>

<pre><code>typedef struct s s_t;
</code></pre>

<hr>

<h2>Edit</h2>

<p>To be clear, the options are declaration in the header file and definition in the class, or both declaration and definition in the header file. Both should result in the same usability, even if one is by linkage, shouldn't they?</p>

<hr>

<p>I see many almost duplicates, e.g. <a href=""https://stackoverflow.com/questions/4136888/declaring-a-struct-in-h-file-and-implementing-in-c-file"">here</a> but no exact matches. Please correct me if I'm wrong in this regard.</p>
","<p>Private structures for that file should go in the .c file, with a declaration in the .h file if they are used by any functions in the .h .</p>

<p>Public structures should go in the .h file.</p>
","6317016"
"What is the difference between %g and %f in C?","62458","","<p>I was going through The C programming Language by K&amp;R. Here in a statement to print a double variable it is written </p>

<pre><code>printf(""\t%g\n"", sum += atof(line));
</code></pre>

<p>where sum is declared as double. Can anybody please help me out when to use %g in case of double or in case of float and whats the difference between %g and %f.</p>
","<p>See any reference manual, such as the <a href=""http://linux.die.net/man/3/printf"">man page</a>:</p>

<blockquote>
  <p>f,F</p>
  
  <p>The double argument is rounded and converted to decimal notation in the style [-]ddd.ddd, where the number of digits after the decimal-point character is equal to the precision specification. If the precision is missing, it is taken as 6; if the precision is explicitly zero, no decimal-point character appears. If a decimal point appears, at least one digit appears before it.
  (The SUSv2 does not know about F and says that character string representations for infinity and NaN may be made available. The C99 standard specifies '[-]inf' or '[-]infinity' for infinity, and a string starting with 'nan' for NaN, in the case of f conversion, and '[-]INF' or '[-]INFINITY' or 'NAN*' in the case of F conversion.)</p>
  
  <p>g,G</p>
  
  <p>The double argument is converted in style f or e (or F or E for G conversions). The precision specifies the number of significant digits. If the precision is missing, 6 digits are given; if the precision is zero, it is treated as 1. Style e is used if the exponent from its conversion is less than -4 or greater than or equal to the precision. Trailing zeros are removed from the fractional part of the result; a decimal point appears only if it is followed by at least one digit. </p>
</blockquote>
","5913115"
"C Array sorting tips","62378","","<pre><code>       a=[1,3,6,7,1,2]
</code></pre>

<p>Which is the best sorting technique to sort the following array and if there are duplicates how to handle them.
Also which is the best sorting technique of all....</p>

<pre><code> void BubbleSort(int a[], int array_size)
 {
 int i, j, temp;
 for (i = 0; i &lt; (array_size - 1); ++i)
 {
      for (j = 0; j &lt; array_size - 1 - i; ++j )
      {
           if (a[j] &gt; a[j+1])
           {
                temp = a[j+1];
                a[j+1] = a[j];
                a[j] = temp;
           }
      }
 }
 }   
</code></pre>
","<p>In C, you can use the built in <code>qsort</code> command: </p>

<pre><code>int compare( const void* a, const void* b)
{
     int int_a = * ( (int*) a );
     int int_b = * ( (int*) b );

     if ( int_a == int_b ) return 0;
     else if ( int_a &lt; int_b ) return -1;
     else return 1;
}

qsort( a, 6, sizeof(int), compare )
</code></pre>

<p>see: <a href=""http://www.cplusplus.com/reference/clibrary/cstdlib/qsort/"" rel=""noreferrer"">http://www.cplusplus.com/reference/clibrary/cstdlib/qsort/</a></p>

<hr>

<p>To answer the second part of your question: an optimal (comparison based) sorting algorithm is one that runs with O(n log(n)) comparisons. There are several that have this property (including quick sort, merge sort, heap sort, etc.), but which one to use depends on your use case.</p>

<p>As a side note, you can sometime do better than O(n log(n)) if you know something about your data - see the wikipedia article on <a href=""http://en.wikipedia.org/wiki/Radix_sort"" rel=""noreferrer"">Radix Sort</a></p>
","3893967"
"Abort trap 6 error in C","62293","","<p>I have this code:</p>

<pre><code>void drawInitialNim(int num1, int num2, int num3)
{
    int board[2][50]; //make an array with 3 columns
    int i; // i, j, k are loop counters
    int j;
    int k;

    for(i=0;i&lt;num1+1;i++)      //fill the array with rocks, or 'O'
        board[0][i] = 'O';     //for example, if num1 is 5, fill the first row with 5 rocks
    for (i=0; i&lt;num2+1; i++)
        board[1][i] = 'O';
    for (i=0; i&lt;num3+1; i++)
        board[2][i] = 'O';

    for (j=0; j&lt;2;j++) {       //print the array
      for (k=0; k&lt;50;k++) {
         printf(""%d"",board[j][k]);
      }
    }
   return;
}

int main()
{
    int numRock1,numRock2,numRock3;
    numRock1 = 0;
    numRock2 = 0;
    numRock3 = 0; 
    printf(""Welcome to Nim!\n"");
    printf(""Enter the number of rocks in each row: "");
    scanf(""%d %d %d"", &amp;numRock1, &amp;numRock2, &amp;numRock3);
    drawInitialNim(numRock1, numRock2, numRock3); //call the function

    return 0;
}
</code></pre>

<p>When I compile this with gcc, it is fine. When I run the file, I get the abort trap 6 error after entering the values. </p>

<p>I have looked at other posts about this error, and they don't help me.</p>
","<p>Try this:</p>

<pre><code>void drawInitialNim(int num1, int num2, int num3){
    int board[3][50] = {0}; // This is a local variable. It is not possible to use it after returning from this function. 

    int i, j, k;

    for(i=0; i&lt;num1; i++)
        board[0][i] = 'O';
    for(i=0; i&lt;num2; i++)
        board[1][i] = 'O';
    for(i=0; i&lt;num3; i++)
        board[2][i] = 'O';

    for (j=0; j&lt;3;j++) {
        for (k=0; k&lt;50; k++) {
            if(board[j][k] != 0)
                printf(""%c"", board[j][k]);
        }
        printf(""\n"");
    }
}
</code></pre>
","26431843"
"C/C++: Detecting superfluous #includes?","62264","","<p>I often find that the headers section of a file get larger and larger all the time but it never gets smaller. Throughout the life of a source file classes may have moved and been refactored and it's very possible that there are quite a few <code>#includes</code> that don't need to be there and anymore. Leaving them there only prolong the compile time and adds unnecessary compilation dependencies. Trying to figure out which are still needed can be quite tedious.</p>

<p>Is there some kind of tool that can detect superfluous #include directives and suggest which ones I can safely remove?<br>
Does lint do this maybe?</p>
","<p>It's not automatic, but <a href=""http://www.stack.nl/~dimitri/doxygen/"" rel=""noreferrer"">Doxygen</a> will produce dependancy diagrams for #included files. You will have to go through them visually, but they can be very useful for getting a picture of what is using what.</p>
","614925"
"C warning implicit declaration of function 'exit'","62025","","<p>This is my warning. </p>

<pre><code>implicit declaration of function 'exit'
</code></pre>

<p>How i can remove it.</p>

<p>i am using linux &amp; gcc compiler.</p>
","<p>Add:</p>

<pre><code>#include &lt;stdlib.h&gt;
</code></pre>

<p>to the top of your program.</p>
","2406988"
"Reading one line at a time in C","61945","","<p>Which method can be used to read one line at a time from a file in C?</p>

<p>I am using the <strong>fgets</strong> function, but it's not working.
It's reading the space separated token only.</p>

<p>What to do? </p>
","<p>This should work, when you can't use <code>fgets()</code> for some reason.</p>

<pre><code>int readline(FILE *f, char *buffer, size_t len)
{
   char c; 
   int i;

   memset(buffer, 0, len);

   for (i = 0; i &lt; len; i++)
   {   
      int c = fgetc(f); 

      if (!feof(f)) 
      {   
         if (c == '\r')
            buffer[i] = 0;
         else if (c == '\n')
         {   
            buffer[i] = 0;

            return i+1;
         }   
         else
            buffer[i] = c; 
      }   
      else
      {   
         //fprintf(stderr, ""read_line(): recv returned %d\n"", c);
         return -1; 
      }   
   }   

   return -1; 
}
</code></pre>
","2372981"
"Converting an integer to binary in C","61908","","<p>I'm trying to convert an integer 10 into the binary number 1010. </p>

<p>This code attempts it, but I get a segfault on the strcat():</p>

<pre><code>int int_to_bin(int k)
{
   char *bin;

   bin = (char *)malloc(sizeof(char));
   while(k&gt;0) {
      strcat(bin, k%2);
      k = k/2;
      bin = (char *)realloc(bin, sizeof(char) * (sizeof(bin)+1));
   }
   bin[sizeof(bin)-1] = '\0';

   return atoi(bin);
}
</code></pre>

<p>How do I convert an integer to binary in C?</p>
","<p>If you want to transform a number into another number (not number to string of characters), and you can do with a small range (0 to 1023 for implementations with 32-bit integers), you don't need to add <code>char*</code> to the solution</p>

<pre><code>unsigned int_to_int(unsigned k) {
    if (k == 0) return 0;
    if (k == 1) return 1;                       /* optional */
    return (k % 2) + 10 * int_to_int(k / 2);
}
</code></pre>

<p><a href=""https://stackoverflow.com/users/3543287/halosghost"">HalosGhost</a> suggested to compact the code into a single line</p>

<pre><code>unsigned int int_to_int(unsigned int k) {
    return (k == 0 || k == 1 ? k : ((k % 2) + 10 * int_to_int(k / 2)));
}
</code></pre>
","5488546"
"initial value of int array in C","61888","","<p>When declaring an array in C like this:</p>

<pre><code>int array[10];
</code></pre>

<p>What is the initial value of the integers?? I'm getting different results with different compilers and I want to know if it has something to do with the compiler, or the OS.</p>
","<p>If the array is declared in a function, then the value is undefined. <code>int x[10];</code> in a function means: take the ownership of 10-int-size area of memroy without doing any initialization. If the array is declared as a global one or as <code>static</code> in a function, then all elements are initialized to zero if they aren't initialized already.</p>
","1414221"
"Initialize Static Array of Structs in C","61835","","<p>I'm implementing a card game in C. There are lots of types of cards and each has a bunch of information, including some actions that will need to be individually scripted associated with it.</p>

<p>Given a struct like this (and I'm not certain I have the syntax right for the function pointer)</p>

<pre><code>struct CARD {
    int value;
    int cost;
    // This is a pointer to a function that carries out actions unique
    // to this card
    int (*do_actions) (struct GAME_STATE *state, int choice1, int choice2);
};
</code></pre>

<p>I would like to initialize a static array of these, one for each card. I'm guessing this would look something like this</p>

<pre><code>int do_card0(struct GAME_STATE *state, int choice1, int choice2)
{
    // Operate on state here
}

int do_card1(struct GAME_STATE *state, int choice1, int choice2)
{
    // Operate on state here
}

extern static struct cardDefinitions[] = {
    {0, 1, do_card0},
    {1, 3, do_card1}
};
</code></pre>

<ol>
<li><p>Will this work, and am I going about this the right way at all? I'm trying to avoid huge numbers of switch statements.</p></li>
<li><p>Do I need to define the 'do_cardN' functions ahead of time, or is there some way to define them inline in the initialization of the struct (something like a lambda function in python)?</p></li>
<li><p>I'll need read-only access to cardDefinitions from a different file - is 'extern static' correct for that?</p></li>
</ol>

<p>I know this is a lot of questions rolled into one but I'm really a bit vague about how to go about this.</p>

<p>Thanks.</p>

<p>Edit:</p>

<p>To be clear, my goal is to be able to do something like</p>

<pre><code>int cost = cardDefinitions[cardNumber].cost;
</code></pre>

<p>or</p>

<pre><code>int result = cardDefinitions[cardNumber].do_action(state, choice1, choice2);
</code></pre>

<p>Instead of using huge switch statements all over the place.</p>
","<p>Your approach is exactly right.</p>

<ol>
<li>This will work, and is a good way to avoid huge <code>switch</code> statements.</li>
<li>You can't define functions inline in C, they each must have a unique name.</li>
<li><p><code>extern</code> is what you want, not <code>static</code>. Change your body to be this:</p>

<pre><code>struct CARD cardDefinitions[] = { 
    {0, 1, do_card0}, 
    {1, 3, do_card1} 
}; 
</code></pre>

<p>then in an appropriate header file:</p>

<pre><code>extern struct CARD cardDefinitions[];
</code></pre></li>
</ol>
","2641512"
"How to get fractions in an integer division?","61738","","<p>How do you divide two integers and get a double or float answer in C?</p>
","<p>You need to cast one or the other to a <code>float</code> or <code>double</code>.</p>

<pre><code>int x = 1;
int y = 3;

// Before
x / y; // (0!)

// After
((double)x) / y; // (0.33333...)
x / ((double)y); // (0.33333...)
</code></pre>

<p>Of course, make sure that you are store the <em>result</em> of the division in a <code>double</code> or <code>float</code>!  It doesn't do you any good if you store the result in another <code>int</code>.</p>

<hr>

<p>Regarding @Chad's comment (""<code>[tailsPerField setIntValue:tailsPer]</code>""):</p>

<p>Don't pass a double or float to <a href=""http://developer.apple.com/mac/library/documentation/cocoa/reference/ApplicationKit/Classes/NSControl_Class/Reference/Reference.html#//apple_ref/occ/instm/NSControl/setIntValue:"" rel=""noreferrer""><code>setIntValue</code></a> when you have <a href=""http://developer.apple.com/mac/library/documentation/cocoa/reference/ApplicationKit/Classes/NSControl_Class/Reference/Reference.html#//apple_ref/occ/instm/NSControl/setDoubleValue:"" rel=""noreferrer""><code>setDoubleValue</code></a>, etc. available.  That's probably the same issue as I mentioned in the comment, where you aren't using an explicit cast, and you're getting an invalid value because a double is being read as an int.</p>

<p>For example, on my system, the file:</p>

<pre><code>#include &lt;stdio.h&gt;
int main()
{
    double x = 3.14;
    printf(""%d"", x);
    return 0;
}
</code></pre>

<p>outputs:</p>

<pre>1374389535</pre>

<p>because the double was attempted to be read as an int.</p>
","2976020"
"Linux API to list running processes?","61706","","<p>I need a C/C++ API that allows me to list the running processes on a Linux system, and list the files each process has open.</p>

<p>I do <em>not</em> want to end up reading the /proc/ file system directly.</p>

<p>Can anyone think of a way to do this?</p>
","<p><a href=""http://procps.sourceforge.net/"" rel=""noreferrer"">http://procps.sourceforge.net/</a></p>

<p><a href=""http://procps.cvs.sourceforge.net/viewvc/procps/procps/proc/readproc.c?view=markup"" rel=""noreferrer"">http://procps.cvs.sourceforge.net/viewvc/procps/procps/proc/readproc.c?view=markup</a></p>

<p>Is the source of ps and other process tools. They do indeed use proc (indicating it is probably the conventional and best way). Their source is quite readable. The file</p>

<pre><code>/procps-3.2.8/proc/readproc.c
</code></pre>

<p>May be useful. Also a useful suggestion as <strong>posted by ephemient</strong> is linking to the API provided by <strong>libproc</strong>, which should be available in your repo (or already installed I would say) but you will need the ""-dev"" variation for the headers and what-not.</p>

<p><strong>Good Luck</strong></p>
","939855"
"How to read/write arbitrary bits in C/C++","61494","","<p>Assuming I have a byte b with the binary value of 11111111</p>

<p>How do I for example read a 3 bit integer value starting at the second bit or write a four bit integer value starting at the fifth bit?</p>
","<p>Some 2+ years after I asked this question I'd like to explain it the way I'd want it explained back when I was still a complete newb and would be most beneficial to people who want to understand the process.</p>

<p>First of all, forget the ""11111111"" example value, which is not really all that suited for the visual explanation of the process. So let the initial value be <code>10111011</code> (187 decimal) which will be a little more illustrative of the process.</p>

<p><strong>1 - how to read a 3 bit value starting from the second bit:</strong></p>

<pre><code>    ___  &lt;- those 3 bits
10111011 
</code></pre>

<p>The value is 101, or 5 in decimal, there are 2 possible ways to get it:</p>

<ul>
<li>mask and shift</li>
</ul>

<p>In this approach, the needed bits are first masked with the value <code>00001110</code> (14 decimal) after which it is shifted in place:</p>

<pre><code>    ___
10111011 AND
00001110 =
00001010 &gt;&gt; 1 =
     ___
00000101
</code></pre>

<p>The expression for this would be: <code>(value &amp; 14) &gt;&gt; 1</code></p>

<ul>
<li>shift and mask</li>
</ul>

<p>This approach is similar, but the order of operations is reversed, meaning the original value is shifted and then masked with <code>00000111</code> (7) to only leave the last 3 bits:</p>

<pre><code>    ___
10111011 &gt;&gt; 1
     ___
01011101 AND
00000111
00000101
</code></pre>

<p>The expression for this would be: <code>(value &gt;&gt; 1) &amp; 7</code></p>

<p>Both approaches involve the same amount of complexity, and therefore will not differ in performance.</p>

<p><strong>2 - how to write a 3 bit value starting from the second bit:</strong></p>

<p>In this case, the initial value is known, and when this is the case in code, you may be able to come up with a way to set the known value to another known value which uses less operations, but in reality this is rarely the case, most of the time the code will know neither the initial value, nor the one which is to be written.</p>

<p>This means that in order for the new value to be successfully ""spliced"" into byte, the target bits must be set to zero, after which the shifted value is ""spliced"" in place, which is the first step:</p>

<pre><code>    ___ 
10111011 AND
11110001 (241) =
10110001 (masked original value)
</code></pre>

<p>The second step is to shift the value we want to write in the 3 bits, say we want to change that from 101 (5) to 110 (6)</p>

<pre><code>     ___
00000110 &lt;&lt; 1 =
    ___
00001100 (shifted ""splice"" value)
</code></pre>

<p>The third and final step is to splice the masked original value with the shifted ""splice"" value:</p>

<pre><code>10110001 OR
00001100 =
    ___
10111101
</code></pre>

<p>The expression for the whole process would be: <code>(value &amp; 241) | (6 &lt;&lt; 1)</code></p>

<p><strong>Bonus - how to generate the read and write masks:</strong></p>

<p>Naturally, using a binary to decimal converter is far from elegant, especially in the case of 32 and 64 bit containers - decimal values get crazy big. It is possible to easily generate the masks with expressions, which the compiler can efficiently resolve during compilation:</p>

<ul>
<li>read mask for ""mask and shift"": <code>((1 &lt;&lt; fieldLength) - 1) &lt;&lt; (fieldIndex - 1)</code>, assuming that the index at the first bit is 1 (not zero)</li>
<li>read mask for ""shift and mask"": <code>(1 &lt;&lt; fieldLength) - 1</code> (index does not play a role here since it is always shifted to the first bit</li>
<li>write mask : just invert the ""mask and shift"" mask expression with the <code>~</code> operator</li>
</ul>

<p>How does it work (with the 3bit field beginning at the second bit from the examples above)?</p>

<pre><code>00000001 &lt;&lt; 3
00001000  - 1
00000111 &lt;&lt; 1
00001110  ~ (read mask)
11110001    (write mask)
</code></pre>

<p>The same examples apply to wider integers and arbitrary bit width and position of the fields, with the shift and mask values varying accordingly.</p>

<p>Also note that the examples assume unsigned integer, which is what you want to use in order to use integers as portable bit-field alternative (regular bit-fields are in no way guaranteed by the standard to be portable), both left and right shift insert a padding 0, which is not the case with right shifting a signed integer.</p>

<p><strong>Even easier:</strong></p>

<p>Using this set of macros (but only in C++ since it relies on the generation of member functions):</p>

<pre><code>#define GETMASK(index, size) (((1 &lt;&lt; (size)) - 1) &lt;&lt; (index))
#define READFROM(data, index, size) (((data) &amp; GETMASK((index), (size))) &gt;&gt; (index))
#define WRITETO(data, index, size, value) ((data) = ((data) &amp; (~GETMASK((index), (size)))) | ((value) &lt;&lt; (index)))
#define FIELD(data, name, index, size) \
  inline decltype(data) name() { return READFROM(data, index, size); } \
  inline void set_##name(decltype(data) value) { WRITETO(data, index, size, value); }
</code></pre>

<p>You could go for something as simple as:</p>

<pre><code>struct A {
  uint bitData;
  FIELD(bitData, one, 0, 1)
  FIELD(bitData, two, 1, 2)
};
</code></pre>

<p>And have the bit fields implemented as properties you can easily access:</p>

<pre><code>A a;
a.set_two(3);
cout &lt;&lt; a.two();
</code></pre>

<p>Replace <code>decltype</code> with gcc's <code>typeof</code> pre-C++11.</p>
","27592777"
"log2 not found in my math.h?","61408","","<p>I'm using a fairly new install of Visual C++ 2008 Express.</p>

<p>I'm trying to compile a program that uses the log2 function, which was found by including  using Eclipse on a Mac, but this Windows computer can't find the function (error C3861: 'log2': identifier not found).</p>

<p>The way I understood it, include directories are specific to the IDE, right? math.h is not present in my Microsoft SDKs\Windows\v6.0A\Include\ directory, but I did find a math.h in this directory: Microsoft Visual Studio 9.0\VC\include. There is also a cmath in that directory...</p>

<p>Where is log2?</p>
","<p>From <a href=""http://www.cprogramming.com/fod/log2.html"" rel=""nofollow noreferrer"">here</a>:</p>

<blockquote>
  <p>Prototype: double log2(double anumber);<br>
   Header File: math.h (C) or cmath (C++)</p>
</blockquote>

<p>Alternatively emulate it like <a href=""http://weseetips.com/2008/09/10/how-to-calculate-log2-of-any-number/"" rel=""nofollow noreferrer"">here</a></p>

<pre><code>#include &lt;math.h&gt;  
...  
// Calculates log2 of number.  
double Log2( double n )  
{  
    // log(n)/log(2) is log2.  
    return log( n ) / log( 2 );  
}  
</code></pre>

<p>Unfortunately Microsoft <a href=""https://stackoverflow.com/questions/758001/log2-not-found-in-my-math-h/758040#758040"">does not provide it</a>.</p>
","758009"
"String in function parameter","61398","","<pre><code>int main()
{
        char *x = ""HelloWorld"";
        char y[] = ""HelloWorld"";

        x[0] = 'Z';
        //y[0] = 'M';

        return 0;
}
</code></pre>

<p>In the above program, <code>HelloWorld</code> will be in read-only section(i.e string table). <code>x</code> will be pointing to that read-only section, so trying to modify that values will be undefined behavior.</p>

<p>But <code>y</code> will be allocated in stack and <code>HelloWorld</code> will be copied to that memory. so modifying y will works fine. <a href=""https://stackoverflow.com/questions/12795850/string-literals-pointer-vs-char-array"">String literals: pointer vs. char array</a></p>

<p><strong>Here is my Question:</strong> </p>

<p>In the following program, both <code>char *arr</code> and <code>char arr[]</code> causes segmentation fault if the content is modified. </p>

<pre><code>void function(char arr[])
//void function(char *arr)
{
   arr[0] = 'X';
}        
int main()
{
   function(""MyString"");    
   return 0;
}
</code></pre>

<ol>
<li>How it differs in the function parameter context?</li>
<li>No memory will be allocated for function parameters?? <br/></li>
</ol>

<p>Please share your knowledge.</p>
","<p>Inside the function parameter list, <code>char arr[]</code> is absolutely equivalent to <code>char *arr</code>, so the pair of definitions and the pair of declarations are equivalent.</p>

<pre><code>void function(char arr[]) { ... }
void function(char *arr)  { ... }

void function(char arr[]);
void function(char *arr);
</code></pre>

<p>The issue is the calling context.  You provided a string literal to the function; string literals may not be modified; your function attempted to modify the string literal it was given; your program invoked undefined behaviour and crashed.  All completely kosher.</p>

<p>Treat string literals as if they were <code>static const char literal[] = ""string literal"";</code> and do not attempt to modify them.</p>
","17111216"
"Significance of -pthread flag when compiling","61327","","<p>In various multi threaded C and C++ projects I've seen the <code>-pthread</code> flag applied to both the compiling and linking stage while others don't use it at all and just pass <code>-lpthread</code> to the linking stage.</p>

<p>Is there any danger not compiling and linking with the <code>-pthread</code> flag - i.e. what does <code>-pthread</code> actually do ? I'm primarily interested in Linux platforms.</p>
","<p>Try:</p>

<pre><code>gcc -dumpspecs | grep pthread
</code></pre>

<p>and look for anything that starts with <code>%{pthread:</code>.</p>

<p>On my computer, this causes files to be compiled with <code>-D_REENTRANT</code>, and linked with <code>-lpthread</code>. On other platforms, this could differ. Use <code>-pthread</code> for most portability.</p>

<p>Using <code>_REENTRANT</code>, on GNU libc, changes the way some libc headers work. As a specific example, it makes <code>errno</code> call a function returning a thread-local location.</p>
","2127819"
"How to Convert Integer to Character Array using C","61265","","<p>I want to convert integer number to character array in C.</p>

<p>Input:</p>

<pre><code>int num = 221234;
</code></pre>

<p>Result is equivalent to:</p>

<pre><code>char arr[6];
arr[0] = '2';
arr[1] = '2';
arr[2] = '1';
arr[3] = '2';
arr[4] = '3';
arr[5] = '4';
</code></pre>

<p>How can I do this?</p>
","<p>make use of <code>log10</code> function to determine the number of digits &amp; do like below</p>

<pre><code>char * toArray(int number)
    {
        int n = log10(number) + 1;
        int i;
      char *numberArray = calloc(n, sizeof(char));
        for ( i = 0; i &lt; n; ++i, number /= 10 )
        {
            numberArray[i] = number % 10;
        }
        return numberArray;
    }
</code></pre>

<p>or
 the other option is <code>sprintf(yourCharArray,""%ld"", intNumber);</code></p>
","14564888"
"How to disable compiler optimizations in gcc?","61221","","<p>I am trying to learn assembly language. I have searched and found how to disassemble a <code>.c</code> file but I think it produces some optimized version of the program. Is there any way so that I can see the exact assembly code which corresponds to my C file.</p>
","<p>The gcc option <code>-O</code> enables different levels of optimization. Use <code>-O0</code> to disable them and use <code>-S</code> to output assembly. <code>-O3</code> is the highest level of optimization.</p>

<p>Starting with gcc 4.8 the optimization level <code>-Og</code> is available. It enables optimizations that do not interfere with debugging and is the recommended default for the standard edit-compile-debug cycle.</p>

<p>To change the dialect of the assembly to either intel or att use <code>-masm=intel</code> or <code>-masm=att</code>.</p>

<p>You can also enable certain optimizations manually with <code>-fname</code>.</p>

<p>Have a look at the <a href=""http://gcc.gnu.org/onlinedocs/gcc-4.6.0/gcc/"">gcc manual</a> for much more.</p>
","5765916"
"How to compare strings in C conditional preprocessor-directives","61161","","<p>I have to do something like this in C. It works only if I use a char, but I need a string. How can I do this?</p>

<pre><code>#define USER ""jack"" // jack or queen

#if USER == ""jack""
#define USER_VS ""queen""
#elif USER == ""queen""
#define USER_VS ""jack""
#endif
</code></pre>
","<p>I don't think there is a way to do variable length string comparisons completely in preprocessor directives.  You could perhaps do the following though:</p>

<pre><code>#define USER_JACK 1
#define USER_QUEEN 2

#define USER USER_JACK 

#if USER == USER_JACK
#define USER_VS USER_QUEEN
#elif USER == USER_QUEEN
#define USER_VS USER_JACK
#endif
</code></pre>

<p>Or you could refactor the code a little and use C code instead.  </p>
","2336001"
"const char * const versus const char *?","61089","","<p>I'm running through some example programs to refamiliarize myself with C++ and I have run into the following question.  First, here is the example code:</p>

<pre><code>void print_string(const char * the_string)
{
    cout &lt;&lt; the_string &lt;&lt; endl;
}

int main () {
    print_string(""What's up?"");
}
</code></pre>

<p>In the above code, the parameter to print_string could have instead been <code>const char * const the_string</code>.  Which would be more correct for this?  </p>

<p>I understand that the difference is that one is a pointer to a constant character, while one is a constant pointer to a constant character.  But why do both of these work?  When would it be relevant?</p>
","<p>The latter prevents you from modifying <code>the_string</code> inside <code>print_string</code>. It would actually be appropriate here, but perhaps the verbosity put off the developer.</p>

<p><strong><code>char* the_string</code></strong> : I can change the <code>char</code> to which <code>the_string</code> points, and I can modify the <code>char</code> at which it points.</p>

<p><strong><code>const char* the_string</code></strong> : I can change the <code>char</code> to which <code>the_string</code> points, but I cannot modify the <code>char</code> at which it points.</p>

<p><strong><code>char* const the_string</code></strong> : I cannot change the <code>char</code> to which <code>the_string</code> points, but I can modify the <code>char</code> at which it points.</p>

<p><strong><code>const char* const the_string</code></strong> : I cannot change the <code>char</code> to which <code>the_string</code> points, nor can I modify the <code>char</code> at which it points.</p>
","4949283"
"maximum memory which malloc can allocate","61086","","<p>I was trying to figure out how much memory I can malloc to maximum extent on my machine
(1 Gb RAM 160 Gb HD Windows platform).</p>

<p>I read that the maximum memory malloc can allocate is limited to physical memory (on heap).</p>

<p>Also when a program exceeds consumption of memory to a certain level, the computer stops working because other applications do not get enough memory that they require.</p>

<p>So to confirm, I wrote a small program in C:</p>

<pre><code>int main(){  
    int *p;
    while(1){
        p=(int *)malloc(4);
        if(!p)break;
    }   
}
</code></pre>

<p>I was hoping that there would be a time when memory allocation would fail and the loop would break, but my computer hung as it was an infinite loop.</p>

<p>I waited for about an hour and finally I had to force shut down my computer.</p>

<p>Some questions:</p>

<ul>
<li>Does malloc allocate memory from HD also?</li>
<li>What was the reason for above behaviour?</li>
<li>Why didn't loop break at any point of time?</li>
<li>Why wasn't there any allocation failure?</li>
</ul>
","<blockquote>
  <p>I read that the maximum memory <code>malloc</code> can allocate is limited to physical memory (on heap).</p>
</blockquote>

<p>Wrong: most computers/OSs support <em>virtual</em> memory, backed by disk space.</p>

<blockquote>
  <p>Some questions: does <code>malloc</code> allocate memory from HDD also?</p>
</blockquote>

<p><code>malloc</code> asks the OS, which in turn may well use some disk space.</p>

<blockquote>
  <p>What was the reason for above behavior? Why didn't the loop break at any time?</p>
  
  <p>Why wasn't there any allocation failure?</p>
</blockquote>

<p>You just asked for too little at a time: the loop would have broken eventually (well after your machine slowed to a crawl due to the large excess of virtual vs physical memory and the consequent super-frequent disk access, an issue known as ""thrashing"") but it exhausted your patience well before then.  Try getting e.g. a megabyte at a time instead.</p>

<p>When a program exceeds consumption of memory to a certain level, the computer stops working because other applications do not get enough memory that they require.</p>

<p>A total stop is unlikely, but when an operation that normally would take a few microseconds ends up taking (e.g.) tens of milliseconds, those four orders of magnitude may certainly make it <em>feel</em> as if the computer had basically stopped, and what would normally take a minute could take a week.</p>
","2798357"
"How to convert enum names to string in c","61080","","<p>Is there a possibility to convert enumerator names to string in C?</p>
","<p>One way, making the preprocessor do the work. It also ensures your enums and strings are in sync.</p>

<pre><code>#define FOREACH_FRUIT(FRUIT) \
        FRUIT(apple)   \
        FRUIT(orange)  \
        FRUIT(grape)   \
        FRUIT(banana)  \

#define GENERATE_ENUM(ENUM) ENUM,
#define GENERATE_STRING(STRING) #STRING,

enum FRUIT_ENUM {
    FOREACH_FRUIT(GENERATE_ENUM)
};

static const char *FRUIT_STRING[] = {
    FOREACH_FRUIT(GENERATE_STRING)
};
</code></pre>

<p>After the preprocessor gets done, you'll have:</p>

<pre><code>enum FRUIT_ENUM {
    apple, orange, grape, banana,
};

static const char *FRUIT_STRING[] = {
    ""apple"", ""orange"", ""grape"", ""banana"",
};
</code></pre>

<p>Then you could do something like:</p>

<pre><code>printf(""enum apple as a string: %s\n"",FRUIT_STRING[apple]);
</code></pre>

<p>If the use case is literally just printing the enum name, add the following macros:</p>

<pre><code>#define str(x) #x
#define xstr(x) str(x)
</code></pre>

<p>Then do:</p>

<pre><code>printf(""enum apple as a string: %s\n"", xstr(apple));
</code></pre>

<p>In this case, it may seem like the two-level macro is superfluous, however, due to how stringification works in C, it is necessary in some cases. For example, let's say we want to use a #define with an enum:</p>

<pre><code>#define foo apple

int main() {
    printf(""%s\n"", str(foo));
    printf(""%s\n"", xstr(foo));
}
</code></pre>

<p>The output would be:</p>

<pre><code>foo
apple
</code></pre>

<p>This is because str will stringify the input foo rather than expand it to be apple. By using xstr the macro expansion is done first, then that result is stringified. </p>

<p>See <a href=""https://gcc.gnu.org/onlinedocs/gcc-4.6.2/cpp/Stringification.html"" rel=""noreferrer"">Stringification</a> for more information.</p>
","10966395"
"In C how do you redirect stdin/stdout/stderr to files when making an execvp() or similar call?","61066","","<p>I have the following code:</p>

<pre><code>pid_t pid = fork();
if (pid == -1)
{
    // ...
}
else if (pid == 0)
{
    stdin = someopenfile;
    stdout = someotherfile;
    stderr = somethirdopenfile;
    execvp(args[0], args);
    // handle error ...
}
else
{
    // ...
}
</code></pre>

<p>The problem is, the input/output of the <code>execvp()</code> call is still the console, rather than the files. Clearly I am doing something wrong, what is the right way to do this?</p>
","<p>The right way to do it is to replace the file descriptors <code>STDIN_FILENO</code>, <code>STDOUT_FILENO</code> and <code>STDERR_FILENO</code> with the opened files using <code>dup2()</code>.  You should also then close the original files in the child process:</p>

<pre><code>else if (pid == 0)
{
    dup2(fileno(someopenfile), STDIN_FILENO);
    dup2(fileno(someotherfile), STDOUT_FILENO);
    dup2(fileno(somethirdopenfile), STDERR_FILENO);
    fclose(someopenfile);
    fclose(someotheropenfile);
    fclose(somethirdopenfile);
    execvp(args[0], args);
    // handle error ...
}
</code></pre>
","14543484"
"C/C++: Static function in header file, what does it mean?","61034","","<p>I know what it means when static function is declared in source file. I am reading some code, found that static function in header files could be invoke in other files. </p>
","<p>Is the function defined in the header file? So that the actual code is given directly in the function, like this:</p>

<pre><code>static int addTwo(int x)
{
  return x + 2;
}
</code></pre>

<p>Then that's just a way of providing a useful function to many different C files. Each C file that includes the header will get its own definition that it can call. This of course wastes memory, and is (in my opinion) a quite ugly thing to be doing, since having executable code in a header is generally not a good idea.</p>

<p>Remember that <code>#include</code>:ing a header basically just pastes the contents of the header (and any other headers included by it) into the C file as seen by the compiler. The compiler never knows that the one particular function definition came from a header file.</p>

<p><strong>UPDATE</strong>: In many cases, it's actually a good idea to do something like the above, and I realize my answer sounds very black-and-white about this which is kind of oversimplifying things a bit. For instance, code that models (or just uses) <a href=""http://en.wikipedia.org/wiki/Intrinsic_function"" rel=""nofollow noreferrer"">intrinsic functions</a> can be expressed like the above, and with an explicit <code>inline</code> keyword even:</p>

<pre><code>static inline int addTwo(int *x)
{
  __add_two_superquickly(x);
}
</code></pre>

<p>Here, the <code>__add_two_superquickly()</code> function is a fictional intrinsic, and since we want the entire function to basically compile down to a single instruction, we really want it to be inlined. Still, the above is cleaner than using a macro.</p>

<p>The advantage over just using the intrinsic directly is of course that wrapping it in another layer of abstraction makes it possible to build the code on compilers lacking that particular intrinsic, by providing an alternate implementation and picking the right one depending on which compiler is being used.</p>
","780733"
"Is it feasible to compile Python to machine code?","61025","","<p>How feasible would it be to compile Python (possibly via an intermediate C representation) into machine code?</p>

<p>Presumably it would need to link to a Python runtime library, and any parts of the Python standard library which were Python themselves would need to be compiled (and linked in) too.</p>

<p>Also, you would need to bundle the Python interpreter if you wanted to do dynamic evaluation of expressions, but perhaps a subset of Python that didn't allow this would still be useful.</p>

<p>Would it provide any speed and/or memory usage advantages?  Presumably the startup time of the Python interpreter would be eliminated (although shared libraries would still need loading at startup).</p>
","<p>Try <a href=""https://shedskin.readthedocs.io/en/latest/"" rel=""nofollow noreferrer"">ShedSkin</a> Python-to-C++ compiler, but it is far from perfect. Also there is Psyco - Python JIT if only speedup is needed. But IMHO this is not worth the effort. For speed-critical parts of code best solution would be to write them as C/C++ extensions. </p>
","138553"