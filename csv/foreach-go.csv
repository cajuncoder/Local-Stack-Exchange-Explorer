title,viewcount,title,body,body,acceptedanswerid
"What is the best way to convert byte array to string?","269071","","<p>I need to read <code>[100]byte</code> to transfer a bunch of <code>string</code> data.</p>

<p>Because not all the <code>string</code> is precisely 100 long, the remaining part of the <code>byte array</code> are padded with <code>0</code>s. </p>

<p>If I tansfer <code>[100]byte</code> to <code>string</code> by: <code>string(byteArray[:])</code>, the tailing <code>0</code>s are displayed as <code>^@^@</code>s.</p>

<p>In C the <code>string</code> will terminate upon <code>0</code>, so I wonder what's the best way of smartly transfer <code>byte array</code> to <code>string</code>.</p>
","<p>methods that read data into byte slices return the number of bytes read.  You should save that number and then use it to create your string.  <code>n</code> being the number of bytes read, your code would look like this:</p>

<pre><code>s := string(byteArray[:n])
</code></pre>

<p>If for some reason you don't have <code>n</code>, you could use the bytes package to find it, assuming your input doesn't have a null character in it.</p>

<pre><code>n := bytes.Index(byteArray, []byte{0})
</code></pre>

<p>Or as icza pointed out, you can use the code below:</p>

<pre><code>n := bytes.IndexByte(byteArray, 0)
</code></pre>
","14230206"
"How to efficiently concatenate strings in Go?","246198","","<p>In Go, string is a primitive type, it's readonly, every manipulation to it will create a new string. </p>

<p>So, if I want to concatenate strings many times without knowing the length of the resulting string, what's the best way to do it?</p>

<p>The naive way would be:</p>

<pre><code>s := """"
for i := 0; i &lt; 1000; i++ {
    s += getShortStringFromSomewhere()
}
return s
</code></pre>

<p>but that does not seem very efficient.</p>
","<p>The best way is to use the <a href=""http://golang.org/pkg/bytes/"" rel=""noreferrer""><code>bytes</code></a> package. It has a <a href=""http://golang.org/pkg/bytes/#Buffer"" rel=""noreferrer""><code>Buffer</code></a> type which implements <a href=""http://golang.org/pkg/io/#Writer"" rel=""noreferrer""><code>io.Writer</code></a>. </p>

<pre><code>package main

import (
    ""bytes""
    ""fmt""
)

func main() {
    var buffer bytes.Buffer

    for i := 0; i &lt; 1000; i++ {
        buffer.WriteString(""a"")
    }

    fmt.Println(buffer.String())
}
</code></pre>

<p>This does it in O(n) time. </p>
","1766304"
"How to check if a map contains a key in go?","193675","","<p>I know I can iterate over a map m by,</p>

<pre><code>for k, v := range m { ... }
</code></pre>

<p>and look for a key but is there a more efficient way of testing a key's existence in a map? Thanks. I couldn't find an answer in the <a href=""http://golang.org/doc/go_spec.html"" rel=""noreferrer"">language spec</a>.</p>
","<p>One line answer:</p>

<pre><code>if val, ok := dict[""foo""]; ok {
    //do something here
}
</code></pre>

<h3>Explanation:</h3>

<p><code>if</code> statements in Go can include both a condition and an initialization statement. The example above uses both:</p>

<ul>
<li><p>initializes two variables - <code>val</code> will receive either the value of ""foo"" from the map or a ""zero value"" (in this case the empty string) and <code>ok</code> will receive a bool that will be set to <code>true</code> if ""foo"" was actually present in the map</p></li>
<li><p>evaluates <code>ok</code>, which will be <code>true</code> if ""foo"" was in the map</p></li>
</ul>

<p>If ""foo"" is indeed present in the map, the body of the <code>if</code> statement will be executed and <code>val</code> will be local to that scope.</p>
","2050629"
"Is there a foreach loop in Go?","168858","","<p>Is there a <code>foreach</code> construct in the Go language? Can I iterate over a slice or array using a <code>for</code>?</p>
","<p><a href=""http://golang.org/doc/go_spec.html#For_statements"" rel=""noreferrer"">http://golang.org/doc/go_spec.html#For_statements</a></p>

<blockquote>
  <p>A ""for"" statement with a ""range"" clause iterates through all entries
  of an array, slice, string or map, or values received on a channel.
  For each entry it assigns iteration values to corresponding iteration
  variables and then executes the block.</p>
</blockquote>

<p>As an example:</p>

<pre class=""lang-golang prettyprint-override""><code>for index, element := range someSlice {
    // index is the index where we are
    // element is the element from someSlice for where we are
}
</code></pre>

<p>If you don't care about the index, you can use <code>_</code>:</p>

<pre class=""lang-golang prettyprint-override""><code>for _, element := range someSlice {
    // element is the element from someSlice for where we are
}
</code></pre>

<p>The underscore, <code>_</code>, is the <a href=""https://golang.org/ref/spec#Blank_identifier"" rel=""noreferrer""><em>blank identifier</em></a>, an anonymous placeholder.</p>
","7782507"
"what should be the values of GOPATH and GOROOT?","159968","","<p>I'm trying to install doozer like this</p>

<pre><code>$ goinstall github.com/ha/doozer
</code></pre>

<p>I get these errors. </p>

<pre><code>goinstall: os: go/build: package could not be found locally
goinstall: fmt: go/build: package could not be found locally
goinstall: io: go/build: package could not be found locally
goinstall: reflect: go/build: package could not be found locally
goinstall: math: go/build: package could not be found locally
goinstall: rand: go/build: package could not be found locally
goinstall: url: go/build: package could not be found locally
goinstall: net: go/build: package could not be found locally
goinstall: sync: go/build: package could not be found locally
goinstall: runtime: go/build: package could not be found locally
goinstall: strings: go/build: package could not be found locally
goinstall: sort: go/build: package could not be found locally
goinstall: strconv: go/build: package could not be found locally
goinstall: bytes: go/build: package could not be found locally
goinstall: log: go/build: package could not be found locally
goinstall: encoding/binary: go/build: package could not be found locally
</code></pre>
","<p><code>GOPATH</code> is discussed <a href=""http://golang.org/cmd/go/#hdr-GOPATH_environment_variable"" rel=""noreferrer"">in the <code>cmd/go</code> documentation</a>: </p>

<blockquote>
  <p>The <code>GOPATH</code> environment variable lists places to look for Go code. On
  Unix, the value is a colon-separated string. On Windows, the value is
  a semicolon-separated string. On Plan 9, the value is a list.</p>
  
  <p><code>GOPATH</code> must be set to get, build and install packages outside the
  standard Go tree.</p>
</blockquote>

<p><code>GOROOT</code> is discussed in <a href=""http://golang.org/doc/install#tarball_non_standard"" rel=""noreferrer"">the installation instructions</a>:</p>

<blockquote>
  <p>The Go binary distributions assume they will be installed in
  <code>/usr/local/go</code> (or <code>c:\Go</code> under Windows), but it is possible to install
  the Go tools to a different location. In this case you must set the
  <code>GOROOT</code> environment variable to point to the directory in which it was
  installed.</p>
  
  <p>For example, if you installed Go to your home directory you should add
  the following commands to <code>$HOME/.profile</code>:</p>

<pre><code>export GOROOT=$HOME/go
export PATH=$PATH:$GOROOT/bin
</code></pre>
  
  <p><strong>Note:</strong> <code>GOROOT</code> must be set only when installing to a custom location.</p>
</blockquote>

<p>(updated version of <a href=""https://stackoverflow.com/a/7971481/1004889"">Chris Bunch's answer</a>.)</p>
","10847122"
"How to convert an int value to string in Go?","151970","","<pre><code>i := 123
s := string(i) 
</code></pre>

<p>s is 'E', but what I want is ""123""</p>

<p>Please tell me how can I get ""123"".</p>

<p>And in Java, I can do in this way: </p>

<pre><code>String s = ""ab"" + ""c""  // s is ""abc""
</code></pre>

<p>how can I <code>concat</code> two strings in Go?</p>
","<p>Use the <a href=""http://golang.org/pkg/strconv/#Itoa"" rel=""noreferrer""><code>strconv</code></a> package's <code>Itoa</code> function.</p>

<p>For example:</p>

<pre><code>package main

import (
    ""strconv""
    ""fmt""
)

func main() {
    t := strconv.Itoa(123)
    fmt.Println(t)
}
</code></pre>

<p>You can concat strings simply by <code>+</code>'ing them, or by using the <code>Join</code> function of the <a href=""http://golang.org/pkg/strings/#Join"" rel=""noreferrer""><code>strings</code></a> package.</p>
","10105983"
"What is an idiomatic way of representing enums in Go?","150693","","<p>I'm trying to represent a simplified chromosome, which consists of N bases, each of which can only be one of <code>{A, C, T, G}</code>.</p>

<p>I'd like to formalize the constraints with an enum, but I'm wondering what the most idiomatic way of emulating an enum is in Go.</p>
","<p>Quoting from the language specs:<a href=""http://golang.org/ref/spec#Iota"">Iota</a></p>

<blockquote>
  <p>Within a constant declaration, the predeclared identifier iota represents successive untyped integer constants. It is reset to 0 whenever the reserved word const appears in the source and increments after each ConstSpec. It can be used to construct a set of related constants:</p>
</blockquote>

<pre><code>const (  // iota is reset to 0
        c0 = iota  // c0 == 0
        c1 = iota  // c1 == 1
        c2 = iota  // c2 == 2
)

const (
        a = 1 &lt;&lt; iota  // a == 1 (iota has been reset)
        b = 1 &lt;&lt; iota  // b == 2
        c = 1 &lt;&lt; iota  // c == 4
)

const (
        u         = iota * 42  // u == 0     (untyped integer constant)
        v float64 = iota * 42  // v == 42.0  (float64 constant)
        w         = iota * 42  // w == 84    (untyped integer constant)
)

const x = iota  // x == 0 (iota has been reset)
const y = iota  // y == 0 (iota has been reset)
</code></pre>

<blockquote>
  <p>Within an ExpressionList, the value of each iota is the same because it is only incremented after each ConstSpec:</p>
</blockquote>

<pre><code>const (
        bit0, mask0 = 1 &lt;&lt; iota, 1&lt;&lt;iota - 1  // bit0 == 1, mask0 == 0
        bit1, mask1                           // bit1 == 2, mask1 == 1
        _, _                                  // skips iota == 2
        bit3, mask3                           // bit3 == 8, mask3 == 7
)
</code></pre>

<blockquote>
  <p>This last example exploits the implicit repetition of the last non-empty expression list.</p>
</blockquote>

<hr>

<p>So your code might be like</p>

<pre><code>const (
        A = iota
        C
        T
        G
)
</code></pre>

<p>or</p>

<pre><code>type Base int

const (
        A Base = iota
        C
        T
        G
)
</code></pre>

<p>if you want bases to be a separate type from int.</p>
","14426447"
"How do I send a JSON string in a POST request in Go","150590","","<p>I tried working with Apiary and made a universal template to send JSON to mock server and have this code:</p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
    ""github.com/jmcvetta/napping""
    ""log""
    ""net/http""
)

func main() {
    url := ""http://restapi3.apiary.io/notes""
    fmt.Println(""URL:&gt;"", url)

    s := napping.Session{}
    h := &amp;http.Header{}
    h.Set(""X-Custom-Header"", ""myvalue"")
    s.Header = h

    var jsonStr = []byte(`
{
    ""title"": ""Buy cheese and bread for breakfast.""
}`)

    var data map[string]json.RawMessage
    err := json.Unmarshal(jsonStr, &amp;data)
    if err != nil {
        fmt.Println(err)
    }

    resp, err := s.Post(url, &amp;data, nil, nil)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(""response Status:"", resp.Status())
    fmt.Println(""response Headers:"", resp.HttpResponse().Header)
    fmt.Println(""response Body:"", resp.RawText())

}
</code></pre>

<p>This code doesn't send JSON properly, but I don't know why. The JSON string can be different in every call. I can't use <code>Struct</code> for this.</p>
","<p>I'm not familiar with napping, but using Golang's <code>net/http</code> package works fine (<a href=""http://play.golang.org/p/Qpob4Yu3wG"">playground</a>): </p>

<pre><code>func main() {
    url := ""http://restapi3.apiary.io/notes""
    fmt.Println(""URL:&gt;"", url)

    var jsonStr = []byte(`{""title"":""Buy cheese and bread for breakfast.""}`)
    req, err := http.NewRequest(""POST"", url, bytes.NewBuffer(jsonStr))
    req.Header.Set(""X-Custom-Header"", ""myvalue"")
    req.Header.Set(""Content-Type"", ""application/json"")

    client := &amp;http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()

    fmt.Println(""response Status:"", resp.Status)
    fmt.Println(""response Headers:"", resp.Header)
    body, _ := ioutil.ReadAll(resp.Body)
    fmt.Println(""response Body:"", string(body))
}
</code></pre>
","24455606"
"How to find a type of an object in Golang?","145062","","<p>How Do I find type of an object in Golang ? In Python I just use typeof to fetch the type of object. Similarly in Go, is there a way to implement the same ?</p>

<p>Here is the container from which I am iterating </p>

<pre><code>for e := dlist.Front(); e != nil; e = e.Next() {
    lines := e.Value
    fmt.Printf(reflect.TypeOf(lines))
   }
</code></pre>

<p>I am not able to get the type of the object lines in this case which is a array of strings.</p>
","<p>The Go reflection package has methods for inspecting the type of variables.  </p>

<p>The following snippet will print out the reflection type of a string, integer and float.</p>

<pre><code>package main

import (
    ""fmt""
    ""reflect""
)

func main() {

    tst := ""string""
    tst2 := 10
    tst3 := 1.2

    fmt.Println(reflect.TypeOf(tst))
    fmt.Println(reflect.TypeOf(tst2))
    fmt.Println(reflect.TypeOf(tst3))

}
</code></pre>

<p>see: <a href=""http://play.golang.org/p/XQMcUVsOja"">http://play.golang.org/p/XQMcUVsOja</a> to view it in action.</p>

<p>More documentation here: <a href=""http://golang.org/pkg/reflect/#Type"">http://golang.org/pkg/reflect/#Type</a></p>
","20170564"
"How to read/write from/to file using Go?","144051","","<p>I've been trying to learn Go on my own, but I've been stumped on trying read from and write to ordinary files.</p>

<p>I can get as far as <code>inFile, _ := os.Open(INFILE, 0, 0)</code>, but actually getting the content of the file doesn't make sense, because the read function takes a <code>[]byte</code> as a parameter.</p>

<pre><code>func (file *File) Read(b []byte) (n int, err Error)
</code></pre>
","<p>Let's make a Go 1-compatible list of all the ways to read and write files in Go.</p>

<p>Because file API has changed recently and most other answers don't work with Go 1. They also miss <code>bufio</code> which is important IMHO.</p>

<p>In the following examples I copy a file by reading from it and writing to the destination file.</p>

<p><strong>Start with the basics</strong></p>

<pre><code>package main

import (
    ""io""
    ""os""
)

func main() {
    // open input file
    fi, err := os.Open(""input.txt"")
    if err != nil {
        panic(err)
    }
    // close fi on exit and check for its returned error
    defer func() {
        if err := fi.Close(); err != nil {
            panic(err)
        }
    }()

    // open output file
    fo, err := os.Create(""output.txt"")
    if err != nil {
        panic(err)
    }
    // close fo on exit and check for its returned error
    defer func() {
        if err := fo.Close(); err != nil {
            panic(err)
        }
    }()

    // make a buffer to keep chunks that are read
    buf := make([]byte, 1024)
    for {
        // read a chunk
        n, err := fi.Read(buf)
        if err != nil &amp;&amp; err != io.EOF {
            panic(err)
        }
        if n == 0 {
            break
        }

        // write a chunk
        if _, err := fo.Write(buf[:n]); err != nil {
            panic(err)
        }
    }
}
</code></pre>

<p>Here I used <code>os.Open</code> and <code>os.Create</code> which are convenient wrappers around <code>os.OpenFile</code>. We usually don't need to call <code>OpenFile</code> directly.</p>

<p>Notice treating EOF. <code>Read</code> tries to fill <code>buf</code> on each call, and returns <code>io.EOF</code> as error if it reaches end of file in doing so. In this case <code>buf</code> will still hold data. Consequent calls to <code>Read</code> returns zero as the number of bytes read and same <code>io.EOF</code> as error. Any other error will lead to a panic.</p>

<p><strong>Using <code>bufio</code></strong></p>

<pre><code>package main

import (
    ""bufio""
    ""io""
    ""os""
)

func main() {
    // open input file
    fi, err := os.Open(""input.txt"")
    if err != nil {
        panic(err)
    }
    // close fi on exit and check for its returned error
    defer func() {
        if err := fi.Close(); err != nil {
            panic(err)
        }
    }()
    // make a read buffer
    r := bufio.NewReader(fi)

    // open output file
    fo, err := os.Create(""output.txt"")
    if err != nil {
        panic(err)
    }
    // close fo on exit and check for its returned error
    defer func() {
        if err := fo.Close(); err != nil {
            panic(err)
        }
    }()
    // make a write buffer
    w := bufio.NewWriter(fo)

    // make a buffer to keep chunks that are read
    buf := make([]byte, 1024)
    for {
        // read a chunk
        n, err := r.Read(buf)
        if err != nil &amp;&amp; err != io.EOF {
            panic(err)
        }
        if n == 0 {
            break
        }

        // write a chunk
        if _, err := w.Write(buf[:n]); err != nil {
            panic(err)
        }
    }

    if err = w.Flush(); err != nil {
        panic(err)
    }
}
</code></pre>

<p><code>bufio</code> is just acting as a buffer here, because we don't have much to do with data. In most other situations (specially with text files) <code>bufio</code> is very useful by giving us <a href=""http://weekly.golang.org/pkg/bufio/"" rel=""noreferrer"">a nice API</a> for reading and writing easily and flexibly, while it handles buffering behind the scenes.</p>

<p><strong>Using <code>ioutil</code></strong></p>

<pre><code>package main

import (
    ""io/ioutil""
)

func main() {
    // read the whole file at once
    b, err := ioutil.ReadFile(""input.txt"")
    if err != nil {
        panic(err)
    }

    // write the whole body at once
    err = ioutil.WriteFile(""output.txt"", b, 0644)
    if err != nil {
        panic(err)
    }
}
</code></pre>

<p>Easy as pie! But use it only if you're sure you're not dealing with big files.</p>
","9739903"
"Handling JSON Post Request in Go","134229","","<p>So I have the following, which seems incredibly hacky, and I've been thinking to myself that Go has better designed libraries than this, but I can't find an example of Go handling a POST request of JSON data. They are all form POSTs. </p>

<p>Here is an example request: <code>curl -X POST -d ""{\""test\"": \""that\""}"" http://localhost:8082/test</code></p>

<p>And here is the code, with the logs embedded:</p>

<pre><code>package main

import (
    ""encoding/json""
    ""log""
    ""net/http""
)

type test_struct struct {
    Test string
}

func test(rw http.ResponseWriter, req *http.Request) {
    req.ParseForm()
    log.Println(req.Form)
    //LOG: map[{""test"": ""that""}:[]]
    var t test_struct
    for key, _ := range req.Form {
        log.Println(key)
        //LOG: {""test"": ""that""}
        err := json.Unmarshal([]byte(key), &amp;t)
        if err != nil {
            log.Println(err.Error())
        }
    }
    log.Println(t.Test)
    //LOG: that
}

func main() {
    http.HandleFunc(""/test"", test)
    log.Fatal(http.ListenAndServe("":8082"", nil))
}
</code></pre>

<p>There's got to be a better way, right? I'm just stumped in finding what the best practice could be. </p>

<p>(Go is also known as Golang to the search engines, and mentioned here so others can find it.)</p>
","<p>Please use <code>json.Decoder</code> instead of <code>json.Unmarshal</code>. </p>

<pre><code>func test(rw http.ResponseWriter, req *http.Request) {
    decoder := json.NewDecoder(req.Body)
    var t test_struct
    err := decoder.Decode(&amp;t)
    if err != nil {
        panic(err)
    }
    defer req.Body.Close()
    log.Println(t.Test)
}
</code></pre>
","15685432"
"Cross-Origin Request Blocked","130578","","<p>So I've got this Go http handler that stores some POST content into the datastore and retrieves some other info in response. On the back-end I use:</p>

<pre><code>func handleMessageQueue(w http.ResponseWriter, r *http.Request) {
    w.Header().Set(""Access-Control-Allow-Origin"", ""*"")
    if r.Method == ""POST"" {

        c := appengine.NewContext(r)

        body, _ := ioutil.ReadAll(r.Body)

        auth := string(body[:])
        r.Body.Close()
        q := datastore.NewQuery(""Message"").Order(""-Date"")

        var msg []Message
        key, err := q.GetAll(c, &amp;msg)

        if err != nil {
            c.Errorf(""fetching msg: %v"", err)
            return
        }

        w.Header().Set(""Content-Type"", ""application/json"")
        jsonMsg, err := json.Marshal(msg)
        msgstr := string(jsonMsg)
        fmt.Fprint(w, msgstr)
        return
    }
}
</code></pre>

<p>In my firefox OS app I use:</p>

<pre><code>var message = ""content"";

request = new XMLHttpRequest();
request.open('POST', 'http://localhost:8080/msgs', true);

request.onload = function () {
    if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {
        // Success!
        data = JSON.parse(request.responseText);
        console.log(data);
    } else {
        // We reached our target server, but it returned an error
        console.log(""server error"");
    }
};

request.onerror = function () {
    // There was a connection error of some sort
    console.log(""connection error"");
};

request.send(message);
</code></pre>

<p>The incoming part all works along and such. However, my response is getting blocked. Giving me the following message:</p>

<pre><code>Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at http://localhost:8080/msgs. This can be fixed by moving the resource to the same domain or enabling CORS.
</code></pre>

<p>I tried a lot of other things but there is no way I can just get a response from the server. However when I change my Go POST method into GET and access the page through the browser I get the data that I want so bad. I can't really decide which side goes wrong and why: it might be that Go shouldn't block these kinds of requests, but it also might be that my javascript is illegal.</p>
","<p>@Egidius, when creating an XMLHttpRequest, you should use</p>

<pre><code>var xhr = new XMLHttpRequest({mozSystem: true});
</code></pre>

<p><strong>What is mozSystem?</strong></p>

<p>mozSystem Boolean: Setting this flag to true allows making cross-site connections without requiring the server to opt-in using CORS. Requires setting mozAnon: true, i.e. this can't be combined with sending cookies or other user credentials. This only works in privileged (reviewed) apps; it does not work on arbitrary webpages loaded in Firefox.</p>

<p><strong>Changes to your Manifest</strong></p>

<p>On your manifest, do not forget to include this line on your permissions:</p>

<pre><code>""permissions"": {
       ""systemXHR"" : {},
}
</code></pre>
","22392080"
"reading file line by line in go","128552","","<p>I'm unable to find <code>file.ReadLine</code> function in Go. I can figure out how to quickly write one, but just wondering if I'm overlooking something here. How does one read a file line by line?</p>
","<p>There is function <a href=""http://golang.org/pkg/bufio/#Reader.ReadLine"">ReadLine</a> in package <code>bufio</code>.</p>

<p>Please note that if the line does not fit into the read buffer, the function will return an incomplete line. If you want to always read a whole line in your program by a single call to a function, you will need to encapsulate the <code>ReadLine</code> function into your own function which calls <code>ReadLine</code> in a for-loop.</p>

<p><code>bufio.ReadString('\n')</code> isn't fully equivalent to <code>ReadLine</code> because <code>ReadString</code> is unable to handle the case when the last line of a file does not end with the newline character.</p>
","8758113"
"How to read input from console line?","117951","","<p>I would like to read input from the command line, but my attempts have ended with the program exiting before I'm prompted for input. I'm looking for the equivalent of <a href=""http://msdn.microsoft.com/en-us/library/system.console.readline%28v=vs.110%29.aspx"">Console.ReadLine()</a> in C#. </p>

<p>This is what I currently have:</p>

<pre><code>package main

import (
    ""bufio""
    ""fmt""
    ""os""
)

func main() {
    reader := bufio.NewReader(os.Stdin)
    fmt.Print(""Enter text: "")
    text, _ := reader.ReadString('\n')
    fmt.Println(text)

    fmt.Println(""Enter text: "")
    text2 := """"
    fmt.Scanln(text2)
    fmt.Println(text2)

    ln := """"
    fmt.Sscanln(""%v"", ln)
    fmt.Println(ln)
}
</code></pre>
","<p>I'm not sure what's wrong with the block </p>

<pre><code>reader := bufio.NewReader(os.Stdin)
fmt.Print(""Enter text: "")
text, _ := reader.ReadString('\n')
fmt.Println(text)
</code></pre>

<p>As it works on my machine. However, for the next block you need a pointer to the variables you're assigning the input to. Try replacing <code>fmt.Scanln(text2)</code> with <code>fmt.Scanln(&amp;text2)</code>. Don't use <code>Sscanln</code>, because it parses a string already in memory instead of from stdin. If you want to do something like what you were trying to do, replace it with <code>fmt.Scanf(""%s"", &amp;ln)</code></p>

<p>If this still doesn't work, your culprit might be some weird system settings or a buggy IDE.</p>
","20895629"
"Iterating over all the keys of a map","109992","","<p>Is there a way to get a list of all the keys in a Go language map?  The number of elements is given by <code>len()</code>, but if I have a map like:</p>

<pre><code>m := map[string]string{ ""key1"":""val1"", ""key2"":""val2"" };
</code></pre>

<p>How do I iterate over all the keys?</p>
","<p><a href=""https://play.golang.org/p/JGZ7mN0-U-"" rel=""noreferrer"">https://play.golang.org/p/JGZ7mN0-U-</a></p>

<pre><code>for k, v := range m { 
    fmt.Printf(""key[%s] value[%s]\n"", k, v)
}
</code></pre>

<p>or</p>

<pre><code>for k := range m {
    fmt.Printf(""key[%s] value[%s]\n"", k, m[k])
}
</code></pre>

<p><a href=""http://golang.org/ref/spec#For_statements"" rel=""noreferrer"">Go language specs for <code>for</code> statements</a> specifies that the first value is the key, the second variable is the value, but doesn't have to be present.</p>
","1841643"
"How to check if a file exists in Go?","109118","","<p>Go's standard library does not have a function solely intended to check if a file exists or not (like Python's <a href=""http://docs.python.org/library/os.path.html#os.path.exists"" rel=""noreferrer""><code>os.path.exists</code></a>). What is the <strong>idiomatic</strong> way to do it?</p>
","<p>To check if a file doesn't exist, equivalent to Python's <code>if not os.path.exists(filename)</code>:</p>

<pre><code>if _, err := os.Stat(""/path/to/whatever""); os.IsNotExist(err) {
  // path/to/whatever does not exist
}
</code></pre>

<p>To check if a file exists, equivalent to Python's <code>if os.path.exists(filename)</code>:</p>

<pre><code>if _, err := os.Stat(""/path/to/whatever""); err == nil {
  // path/to/whatever exists
}
// the path does not exist or some error occurred.
</code></pre>
","12518877"
"How do you write multiline strings in Go?","109049","","<p>Does Go have anything similar to the python's multiline strings: </p>

<pre><code>""""""line 1
line 2
line 3""""""
</code></pre>

<p>If not, what is the preferred way of writing strings spanning multiple lines?</p>
","<p>According to the <a href=""http://golang.org/doc/go_spec.html#String_literals"" rel=""noreferrer"">language specification</a> you can use a raw string literal, where the string is delimited by backticks instead of double quotes.</p>

<pre><code>`line 1
line 2
line 3`
</code></pre>
","7933487"
"Does Golang have ""if x in"" construct similar to Python?","106692","","<p><strong>Without</strong> iterating over the entire array how can I check if 'x' in array in Go?</p>

<p>Like Python: <code>if ""x"" in array: ...</code></p>
","<p>There is no built-in operator to do it in Go. You need to iterate over the array. You can write your own function to do it, like this:</p>

<pre><code>func stringInSlice(a string, list []string) bool {
    for _, b := range list {
        if b == a {
            return true
        }
    }
    return false
}
</code></pre>

<p>If you want to be able to check for membership without iterating over the whole list, you need to use a map instead of an array or slice, like this:</p>

<pre><code>visitedURL := map[string]bool {
    ""http://www.google.com"": true,
    ""https://paypal.com"": true,
}
if visitedURL[thisSite] {
    fmt.Println(""Already been here."")
}
</code></pre>
","15323988"
"Optional Parameters?","104309","","<p>Can Go have optional parameters? Or can I just define two functions with the same name and a different number of arguments?</p>
","<p>Go does not have optional parameters <a href=""http://golang.org/doc/faq#overloading"" rel=""noreferrer"">nor does it support method overloading</a>:</p>

<blockquote>
  <p>Method dispatch is simplified if it
  doesn't need to do type matching as
  well. Experience with other languages
  told us that having a variety of
  methods with the same name but
  different signatures was occasionally
  useful but that it could also be
  confusing and fragile in practice.
  Matching only by name and requiring
  consistency in the types was a major
  simplifying decision in Go's type
  system.</p>
</blockquote>
","2032160"
"How to print struct variables in console?","102592","","<p>How can I print (in the console) the <code>Id</code>, <code>Title</code>, <code>Name</code>, etc. of this struct in Golang?</p>

<pre><code>type Project struct {
    Id int64 `json:""project_id""`
    Title string `json:""title""`
    Name string `json:""name""`
    Data Data `json:""data""`
    Commits Commits `json:""commits""`
}
</code></pre>
","<p>To print the name of the fields in a struct:</p>

<pre><code>fmt.Printf(""%+v\n"", yourProject)
</code></pre>

<p>From the <a href=""http://golang.org/pkg/fmt/""><code>fmt</code> package</a>:</p>

<blockquote>
  <p>when printing structs, the plus flag (<code>%+v</code>) adds field names</p>
</blockquote>

<p>That supposes you have an instance of Project (in '<code>yourProject</code>')</p>

<p>The article <a href=""http://blog.golang.org/json-and-go"">JSON and Go</a> will give more details on how to retrieve the values from a JSON struct.</p>

<hr>

<p>This <a href=""https://gobyexample.com/json"">Go by example page</a> provides another technique:</p>

<pre><code>type Response2 struct {
  Page   int      `json:""page""`
  Fruits []string `json:""fruits""`
}

res2D := &amp;Response2{
    Page:   1,
    Fruits: []string{""apple"", ""peach"", ""pear""}}
res2B, _ := json.Marshal(res2D)
fmt.Println(string(res2B))
</code></pre>

<p>That would print:</p>

<pre><code>{""Page"":1,""Fruits"":[""apple"",""peach"",""pear""]}
</code></pre>

<hr>

<p>If you don't have any instance, then you need to <strong><a href=""http://blog.golang.org/laws-of-reflection"">use reflection</a></strong> to display the name of the field of a given struct, <a href=""http://play.golang.org/p/JKHjPu3cgB"">as in this example</a>.</p>

<pre><code>type T struct {
    A int
    B string
}

t := T{23, ""skidoo""}
s := reflect.ValueOf(&amp;t).Elem()
typeOfT := s.Type()

for i := 0; i &lt; s.NumField(); i++ {
    f := s.Field(i)
    fmt.Printf(""%d: %s %s = %v\n"", i,
        typeOfT.Field(i).Name, f.Type(), f.Interface())
}
</code></pre>
","24512194"
"Golang: format a string without printing?","97634","","<p>Is there a simple way to format a string in Go without printing the string?</p>

<p>I can do:</p>

<pre><code>bar := ""bar""
fmt.Printf(""foo: %s"", bar)
</code></pre>

<p>But I want the formatted string returned rather than printed so I can manipulate it further.</p>

<p>I could also do something like:</p>

<pre><code>s := ""foo: "" + bar
</code></pre>

<p>But this becomes difficult to read when the format string is complex, and cumbersome when one or many of the parts aren't strings and have to be converted first, like</p>

<pre><code>i := 25
s := ""foo: "" + strconv.Itoa(i)
</code></pre>

<p>I'm very new to Go - my background is in Ruby, where this is straightforward. Is there a simpler way to do this?</p>
","<p><a href=""http://golang.org/pkg/fmt/#Sprintf"" rel=""noreferrer"">Sprintf</a></p>

<p><a href=""https://tour.golang.org/methods/19"" rel=""noreferrer"">Here also</a> is a use of it in the tutorial, ""A Tour of Go.""</p>

<pre><code>return fmt.Sprintf(""at %v, %s"", e.When, e.What)
</code></pre>
","11124241"
"How to handle configuration in Go","96709","","<p>I'm new at Go programming, and I'm wondering: what is the preferred way to handle configuration parameters for a Go program (the kind of stuff one might use <em>properties</em> files or <em>ini</em> files for, in other contexts)?</p>
","<p>The <a href=""http://golang.org/pkg/encoding/json/"" rel=""noreferrer"">JSON</a> format worked for me quite well. The
standard library offers methods to write the data structure indented, so it is quite
readable.</p>

<p>See also <a href=""https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/sAofmg2_lL8"" rel=""noreferrer"">this golang-nuts thread</a>.</p>

<p>The benefits of JSON are that it is fairly simple to parse and human readable/editable
while offering semantics for lists and mappings (which can become quite handy), which
is not the case with many ini-type config parsers.</p>

<p>Example usage:</p>

<p><strong>conf.json</strong>:</p>

<pre><code>{
    ""Users"": [""UserA"",""UserB""],
    ""Groups"": [""GroupA""]
}
</code></pre>

<p><strong>Program to read the configuration</strong></p>

<pre><code>import (
    ""encoding/json""
    ""os""
    ""fmt""
)

type Configuration struct {
    Users    []string
    Groups   []string
}

file, _ := os.Open(""conf.json"")
decoder := json.NewDecoder(file)
configuration := Configuration{}
err := decoder.Decode(&amp;configuration)
if err != nil {
  fmt.Println(""error:"", err)
}
fmt.Println(configuration.Users) // output: [UserA, UserB]
</code></pre>
","16466189"
"Concatenate two slices in Go","94638","","<p>I'm trying to combine the slice <code>[1, 2]</code> and the slice <code>[3, 4]</code>. How can I do this in Go?</p>

<p>I tried:</p>

<pre><code>append([]int{1,2}, []int{3,4})
</code></pre>

<p>but got:</p>

<pre><code>cannot use []int literal (type []int) as type int in append
</code></pre>

<p>However, <a href=""http://golang.org/pkg/builtin/#append"">the documentation</a> seems to indicate this is possible, what am I missing?</p>

<pre><code>slice = append(slice, anotherSlice...)
</code></pre>
","<p>Add dots after the second slice:</p>

<pre><code>//---------------------------vvv
append([]int{1,2}, []int{3,4}...)
</code></pre>

<hr>

<p>This is just like any other variadic function.</p>

<pre><code>func foo(is ...int) {
    for i := 0; i &lt; len(is); i++ {
        fmt.Println(is[i])
    }
}

func main() {
    foo([]int{9,8,7,6,5}...)
}
</code></pre>
","16248257"
"How to install the current version of Go in Ubuntu Precise","93232","","<p>Running <code>sudo apt-get install golang-stable</code>, I get Go version <code>go1.0.3</code>. Is there any way to install <code>go1.1.1</code>?</p>
","<p>I found a repo that has the latest versions: <a href=""https://launchpad.net/~duh/+archive/golang/+packages"">https://launchpad.net/~duh/+archive/golang/+packages</a>. So basically do:</p>

<pre><code>sudo apt-get install python-software-properties  # 12.04
sudo add-apt-repository ppa:duh/golang
sudo apt-get update
sudo apt-get install golang
</code></pre>

<p>To confirm:</p>

<pre><code>go version
</code></pre>

<p>which outputs in my case (Ubuntu precise)</p>

<pre><code>go version go1.1.1 linux/amd64
</code></pre>

<p>From there just export the settings you're gonna need to bash_rc or equivalent:</p>

<pre><code>export GOROOT=/usr/lib/go
export GOBIN=/usr/bin/go
</code></pre>
","17566846"
"How to use custom packages in golang?","93018","","<p>I'm trying to create and use a custom package in Go. It's probably something very obvious but I cannot find much information about this. Basically, I have these two files in the same folder:</p>

<p><strong>mylib.go</strong></p>

<pre><code>package mylib

type SomeType struct {

}
</code></pre>

<p><strong>main.go</strong></p>

<pre><code>package main

import (
    ""mylib""
)

func main() {

}
</code></pre>

<p>When I try to <code>go run main.go</code>, I get this error:</p>

<pre><code>main.go:4:2: import ""mylib"": cannot find package
</code></pre>

<p>I've tried to run <code>go build mylib.go</code> first but it doesn't seem to be doing anything (no file generated, no error message). So any idea how I could do this?</p>
","<p>First, be sure to read and understand the <a href=""http://golang.org/doc/code.html"" rel=""noreferrer"">""How to write Go code""</a> document.</p>

<p>The actual answer depends on the nature of your ""custom package"".</p>

<p>If it's intended to be of general use, consider employing the so-called <a href=""http://code.google.com/p/go-wiki/wiki/GithubCodeLayout"" rel=""noreferrer"">""Github code layout""</a>. Basically, you make your library a separate <code>go get</code>-table project.</p>

<p>If your library is for internal use, you could go like this:</p>

<ol>
<li>Place the directory with library files under the directory of your project.</li>
<li>In the rest of your project, refer to the library using its path relative to the root of your workspace containing the project.</li>
</ol>

<p>To demonstrate:</p>

<pre><code>src/
  myproject/
    mylib/
      mylib.go
      ...
    main.go
</code></pre>

<p>Now, in the top-level <code>main.go</code>, you could <code>import ""myproject/mylib""</code> and it would work OK.</p>
","15051192"
"Read text file into string array (and write)","90370","","<p>The ability to read (and write) a text file into and out of a string array is I believe a fairly common requirement. It is also quite useful when starting with a language removing the need initially to access a database. Does one exist in Golang?<br>
e.g. <code>func ReadLines(sFileName string, iMinLines int) ([]string, bool) {</code><br>
and   <code>func WriteLines(saBuff[]string, sFilename string) (bool) {</code>.<br>
I would prefer to use an existing one rather than duplicate.</p>
","<p>As of Go1.1 release, there is a <a href=""http://godoc.org/bufio#Scanner"">bufio.Scanner</a> API that can easily read lines from a file.  Consider the following example from above, rewritten with Scanner:</p>

<pre><code>package main

import (
  ""bufio""
  ""fmt""
  ""log""
  ""os""
)

// readLines reads a whole file into memory
// and returns a slice of its lines.
func readLines(path string) ([]string, error) {
  file, err := os.Open(path)
  if err != nil {
    return nil, err
  }
  defer file.Close()

  var lines []string
  scanner := bufio.NewScanner(file)
  for scanner.Scan() {
    lines = append(lines, scanner.Text())
  }
  return lines, scanner.Err()
}

// writeLines writes the lines to the given file.
func writeLines(lines []string, path string) error {
  file, err := os.Create(path)
  if err != nil {
    return err
  }
  defer file.Close()

  w := bufio.NewWriter(file)
  for _, line := range lines {
    fmt.Fprintln(w, line)
  }
  return w.Flush()
}

func main() {
  lines, err := readLines(""foo.in.txt"")
  if err != nil {
    log.Fatalf(""readLines: %s"", err)
  }
  for i, line := range lines {
    fmt.Println(i, line)
  }

  if err := writeLines(lines, ""foo.out.txt""); err != nil {
    log.Fatalf(""writeLines: %s"", err)
  }
}
</code></pre>
","18479916"
"Golang how to import local packages without gopath?","89324","","<p>I've used <code>GOPATH</code> but for this current issue I'm facing it does not help. I want to be able to create packages that are specific to a project:</p>

<pre><code>myproject/
├── binary1.go
├── binary2.go
├── package1.go
└── package2.go
</code></pre>

<p>I tried multiple ways but how do I get <code>package1.go</code> to work in the <code>binary1.go</code> or the <code>binary2.go</code> and so on?</p>

<p>For example; I want to be able to <code>import ""package1""</code> and then be able to run <code>go build binary1.go</code> and everything works fine without the error being thrown that the package cannot be found on <code>GOROOT</code> or <code>GOPATH</code>. The reason why I need this kind of functionality is for large scale projects; I do not want to have to reference multiple other packages or keep them in one large file.</p>
","<p>While my old way works it's not longer the ""correct"" way to do it. You should be using <strong>vendor</strong> capabilities that are enabled by default in Go 1.6; <a href=""https://docs.google.com/document/d/1Bz5-UB7g2uPBdOx-rw5t9MxJwkfpx90cqG9AFL0JAYo/edit?pref=2&amp;pli=1"">see</a>. You basically add your ""external"" or ""dependent"" packages within a <code>vendor</code> directory; upon compilation the compiler will use these packages first.</p>

<hr>

<p>Found. I was able import local package with <code>GOPATH</code> by creating a subfolder of <code>package1</code> and then importing with <code>import ""./package1""</code> in <code>binary1.go</code> and <code>binary2.go</code> scripts like this :</p>

<p>binary1.go </p>

<pre><code>...
import (
        ""./package1""
      )
...
</code></pre>

<p>So my current directory structure looks like this:</p>

<pre><code>myproject/
├── binary1.go
├── binary2.go
├── package1/
│   └── package1.go
└── package2.go
</code></pre>

<p>I should also note that relative paths (at least in go 1.5) also work; for example:</p>

<pre><code>import ""../packageX""
</code></pre>
","17539525"
"cannot download, $GOPATH not set","88546","","<p>I want to install json2csv using <code>go get github.com/jehiah/json2csv</code> but I receive this error:</p>

<pre><code>package github.com/jehiah/json2csv: cannot download, $GOPATH not set. For more details see: go help go path
</code></pre>

<p>Any help on how to fix this on MacOS?</p>
","<p>[Update: as of Go 1.8, <code>GOPATH</code> defaults to <code>$HOME/go</code>, but you may still find this useful if you want to understand the <code>GOPATH</code> layout, customize it, etc.]</p>

<p>The official Go site <a href=""http://golang.org/doc/code.html"" rel=""noreferrer"">discusses GOPATH and how to lay out a workspace directory</a>.</p>

<p><code>export GOPATH=""$HOME/your-workspace-dir/""</code> -- run it in your shell, then add it to <code>~/.bashrc</code> or equivalent so it will be set for you in the future. Go will install packages under <code>src/</code>, <code>bin/</code>, and <code>pkg/</code>, subdirectories there. You'll want to put your own packages somewhere under <code>$GOPATH/src</code>, like <code>$GOPATH/src/github.com/myusername/</code> if you want to publish to GitHub. You'll also probably want <code>export PATH=$PATH:$GOPATH/bin</code> in your <code>.bashrc</code> so you can run compiled programs under <code>$GOPATH</code>. </p>

<p>Optionally, <a href=""https://twitter.com/rob_pike/status/467367507305574400"" rel=""noreferrer"">via Rob Pike</a>, you can also set <code>CDPATH</code> so it's faster to <code>cd</code> to package dirs in bash: <code>export CDPATH=.:$GOPATH/src/github.com:$GOPATH/src/golang.org/x</code> means you can just type <code>cd net/html</code> instead of <code>cd $GOPATH/src/golang.org/x/net/html</code>. </p>

<p>Keith Rarick <a href=""https://twitter.com/krarick/status/467035722436718593"" rel=""noreferrer"">notes</a> you can set <code>GOPATH=$HOME</code> to put Go's <code>src/</code>, <code>pkg/</code> and <code>bin/</code> directories right under your homedir. That can be nice (for instance, you might already have <code>$HOME/bin</code> in your path) but of course some folks use multiple workspaces, etc.</p>
","20629533"
"cannot convert data (type interface {}) to type string: need type assertion","85691","","<p>I am pretty new to go and I was playing with this <a href=""https://github.com/bitly/go-notify/blob/master/notify.go"" rel=""noreferrer"">notify</a> package.</p>

<p>At first I had code that looked like this:</p>

<pre><code>func doit(w http.ResponseWriter, r *http.Request) {
    notify.Post(""my_event"", ""Hello World!"")
    fmt.Fprint(w, ""+OK"")
}
</code></pre>

<p>I wanted to append newline to <code>Hello World!</code> but not in the function <code>doit</code> above, because that would be pretty trivial, but in the <code>handler</code> afterwards like this below:</p>

<pre><code>func handler(w http.ResponseWriter, r *http.Request) {
    myEventChan := make(chan interface{})
    notify.Start(""my_event"", myEventChan)
    data := &lt;-myEventChan
    fmt.Fprint(w, data + ""\n"")
}
</code></pre>

<p>After <code>go run</code>:</p>

<pre><code>$ go run lp.go 
# command-line-arguments
./lp.go:15: invalid operation: data + ""\n"" (mismatched types interface {} and string)
</code></pre>

<p>After a little bit of Googling I found <a href=""https://stackoverflow.com/a/4801045/11926"">this question on SO</a>.</p>

<p>Then I updated my code to:</p>

<pre><code>func handler(w http.ResponseWriter, r *http.Request) {
    myEventChan := make(chan interface{})
    notify.Start(""my_event"", myEventChan)
    data := &lt;-myEventChan
    s:= data.(string) + ""\n""
    fmt.Fprint(w, s)
}
</code></pre>

<p>Is this what I was supposed to do? My compiler errors are gone so I guess that's pretty good? Is this efficient? Should you do it differently?</p>
","<p>According to the <a href=""http://golang.org/ref/spec#Type_assertions"" rel=""noreferrer"">Go specification</a>:</p>

<blockquote>
  <p>For an expression x of interface type and a type T, the primary expression x.(T) asserts that x is not nil and that the value stored in x is of type T.</p>
</blockquote>

<p>A ""type assertion"" allows you to declare an interface value contains a certain concrete type or that its concrete type satisfies another interface.</p>

<p>In your example, you were asserting data (type interface{}) has the concrete type string. If you are wrong, the program will panic at runtime. You do not need to worry about efficiency, checking just requires comparing two pointer values.</p>

<p>If you were unsure if it was a string or not, you could test using the two return syntax.</p>

<pre><code>str, ok := data.(string)
</code></pre>

<p>If data is not a string, ok will be false. It is then common to wrap such a statement into an if statement like so:</p>

<pre><code>if str, ok := data.(string); ok {
    /* act on str */
} else {
    /* not string */
}
</code></pre>
","14289568"
"When is the init() function run?","84875","","<p>I've tried to find a precise explanation of what the <code>init()</code> function does in Go (Golang). I read what <a href=""http://golang.org/doc/effective_go.html#init"">Effective Go</a> says but I was unsure if I understood fully what it said. The exact sentence I am unsure is the following:</p>

<blockquote>
  <p>And finally means finally: init is called after all the variable declarations in the package have evaluated their initializers, and those are evaluated only after all the imported packages have been initialized.</p>
</blockquote>

<p>What does <code>all the variable declarations in the package have evaluated their initializers</code> mean? Does it mean if you declare ""global"" variables in a package and its files, init() will not run until all of it is evaluated and then it will run all the init function and then main() when ./main_file_name is ran?</p>

<p>I also read Mark Summerfield's go book the following:</p>

<blockquote>
  <p>If a package has one or more init() functions they are automatically executed before the main package's main() function is called.</p>
</blockquote>

<p>In my understanding, <code>init()</code> is only relevant when you run intend to run main() right? or the Main package. Anyone understands more precisely <code>init()</code> feel free to correct me</p>
","<p>Yes assuming you have <a href=""http://play.golang.org/p/dvHymTy73F"">this</a>:</p>

<pre><code>var WhatIsThe = AnswerToLife()

func AnswerToLife() int {
    return 42
}

func init() {
    WhatIsThe = 0
}

func main() {
    if WhatIsThe == 0 {
        fmt.Println(""It's all a lie."")
    }
}
</code></pre>

<p><code>AnswerToLife()</code> is guaranteed to run before <code>init()</code> is called, and <code>init()</code> is guaranteed to run before <code>main()</code> is called.</p>

<p>Keep in mind that <code>init()</code> is always called, regardless if there's main or not, so if you import a package that has an <code>init</code> function, it will be executed.</p>

<p>//edit</p>

<p>Also, keep in mind that you can have multiple <code>init()</code> functions per package, they will be executed in the order they show up in the code (after all variables are initialized of course).</p>

<p>//edit 2x</p>

<p>A lot of the internal Go packages use <code>init()</code> to initialize tables and such, for example <a href=""https://github.com/golang/go/blob/883bc6/src/compress/bzip2/bzip2.go#L480"">https://github.com/golang/go/blob/883bc6/src/compress/bzip2/bzip2.go#L480</a></p>
","24790378"
"Contains method for a slice","84559","","<p>Is there anything similar to a <code>slice.contains(object)</code> method in Go without having to do a search through each element in a slice? </p>
","<p>Mostafa has already pointed out that such a method is trivial to write, and mkb gave you a hint to use the binary search from the sort package. But if you are going to do a lot of such contains checks, you might also consider using a map instead.</p>

<p>It's trivial to check if a specific map key exists by using the <code>value, ok := yourmap[key]</code> idiom. Since you aren't interested in the value, you might also create a <code>map[string]struct{}</code> for example. Using an empty <code>struct{}</code> here has the advantage that it doesn't require any additional space and Go's internal map type is optimized for that kind of values. Therefore, <code>map[string] struct{}</code> is a popular choice for sets in the Go world.</p>
","10486196"
"Organizing a multiple-file Go project","82240","","<p>Note: this question is related to <a href=""https://stackoverflow.com/questions/2182469/to-use-package-properly-how-to-arrange-directory-file-name-unit-test-file"">this one</a>, but two years is a very long time in Go history.</p>

<p>What is the standard way to organize a Go project during development ?</p>

<p>My project is a single package <code>mypack</code>, so I guess I put all the .go files in a <code>mypack</code> directory.</p>

<p>But then, I would like to test it during development so I need at least a file declaring the <code>main</code> package, so that I can do <code>go run trypack.go</code></p>

<p>How should I organize this ? Do I need to do <code>go install mypack</code> each time I want to try it ?</p>
","<p>I would recommend reviewing this page on <a href=""http://golang.org/doc/code.html"" rel=""noreferrer"">How to Write Go Code</a></p>

<p>It documents both how to structure your project in a <code>go build</code> friendly way, and also how to write tests. Tests do not need to be a cmd using the <code>main</code> package. They can simply be TestX named functions as part of each package, and then <code>go test</code> will discover them.</p>

<p>The structure suggested in that link in your question is a bit outdated, now with the release of Go 1. You no longer would need to place a <code>pkg</code> directory under <code>src</code>. The only 3 spec-related directories are the 3 in the root of your GOPATH:  bin, pkg, src . Underneath src, you can simply place your project <code>mypack</code>, and underneath that is all of your .go files including the mypack_test.go</p>

<p><code>go build</code> will then build into the root level pkg and bin.</p>

<p>So your GOPATH might look like this:</p>

<pre><code>~/projects/
    bin/
    pkg/
    src/
      mypack/
        foo.go
        bar.go
        mypack_test.go
</code></pre>

<p><code>export GOPATH=$HOME/projects</code></p>

<pre><code>$ go build mypack
$ go test mypack
</code></pre>
","9985600"
"Convert string to integer type in Go?","80538","","<p>I'm trying to convert a string returned from <code>flag.Arg(n)</code> to an <code>int</code>. What is the idiomatic way to do this in Go?</p>
","<p>For example,</p>

<pre><code>package main

import (
    ""flag""
    ""fmt""
    ""os""
    ""strconv""
)

func main() {
    flag.Parse()
    s := flag.Arg(0)
    // string to int
    i, err := strconv.Atoi(s)
    if err != nil {
        // handle error
        fmt.Println(err)
        os.Exit(2)
    }
    fmt.Println(s, i)
}
</code></pre>
","4279644"
"How to get JSON response in Golang","80086","","<p>I'm trying read JSON data from web, but that code returns empty result. I'm not sure what I'm doing wrong here.</p>

<pre><code>package main

import ""os""
import ""fmt""
import ""net/http""
import ""io/ioutil""
import ""encoding/json""

type Tracks struct {
    Toptracks []Toptracks_info
}

type Toptracks_info struct {
    Track []Track_info
    Attr  []Attr_info
}

type Track_info struct {
    Name       string
    Duration   string
    Listeners  string
    Mbid       string
    Url        string
    Streamable []Streamable_info
    Artist     []Artist_info
    Attr       []Track_attr_info
}

type Attr_info struct {
    Country    string
    Page       string
    PerPage    string
    TotalPages string
    Total      string
}

type Streamable_info struct {
    Text      string
    Fulltrack string
}

type Artist_info struct {
    Name string
    Mbid string
    Url  string
}

type Track_attr_info struct {
    Rank string
}

func get_content() {
    // json data
    url := ""http://ws.audioscrobbler.com/2.0/?method=geo.gettoptracks&amp;api_key=c1572082105bd40d247836b5c1819623&amp;format=json&amp;country=Netherlands""

    res, err := http.Get(url)

    if err != nil {
        panic(err.Error())
    }

    body, err := ioutil.ReadAll(res.Body)

    if err != nil {
        panic(err.Error())
    }

    var data Tracks
    json.Unmarshal(body, &amp;data)
    fmt.Printf(""Results: %v\n"", data)
    os.Exit(0)
}

func main() {
    get_content()
}
</code></pre>
","<p>The ideal way is <em>not</em> to use ioutil.ReadAll, but rather use a decoder on the reader directly. Here's a nice function that gets a url and decodes its response onto a <code>target</code> structure.</p>

<pre><code>var myClient = &amp;http.Client{Timeout: 10 * time.Second}

func getJson(url string, target interface{}) error {
    r, err := myClient.Get(url)
    if err != nil {
        return err
    }
    defer r.Body.Close()

    return json.NewDecoder(r.Body).Decode(target)
}
</code></pre>

<p>Example use:</p>

<pre><code>type Foo struct {
    Bar string
}

func main() {
    foo1 := new(Foo) // or &amp;Foo{}
    getJson(""http://example.com"", foo1)
    println(foo1.Bar)

    // alternately:

    foo2 := Foo{}
    getJson(""http://example.com"", &amp;foo2)
    println(foo2.Bar)
}
</code></pre>

<p>You should not be using the default *http.Client structure in production as this answer originally demonstrated! (Which is what http.Get/etc call to). The reason is that the default client has no timeout set; if the remote server is unresponsive, you're going to have a bad day.</p>
","31129967"
"How to get the directory of the currently running file?","79476","","<p>In nodejs I use <a href=""http://nodejs.org/api/globals.html#globals_dirname"">__dirname</a> . What is the equivalent of this in Golang?</p>

<p>I have googled and found out this article <a href=""http://andrewbrookins.com/tech/golang-get-directory-of-the-current-file/"">http://andrewbrookins.com/tech/golang-get-directory-of-the-current-file/</a> . Where he uses below code</p>

<pre><code>_, filename, _, _ := runtime.Caller(1)
f, err := os.Open(path.Join(path.Dir(filename), ""data.csv""))
</code></pre>

<p>But is it the right way or idiomatic way to do in Golang?</p>
","<p>This should do it:</p>

<pre><code>import (
    ""fmt""
    ""log""
    ""os""
    ""path/filepath""
)

func main() {
    dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
    if err != nil {
            log.Fatal(err)
    }
    fmt.Println(dir)
}
</code></pre>
","18537792"
"Delete element in a slice","77400","","<pre><code>func main() {
    a := []string{""Hello1"", ""Hello2"", ""Hello3""}
    fmt.Println(a)
    // [Hello1 Hello2 Hello3]
    a = append(a[:0], a[1:]...)
    fmt.Println(a)
    // [Hello2 Hello3]
}
</code></pre>

<p>How does this delete trick with the append function work?</p>

<p>It would seem that it's grabbing everything before the first element (empty array)</p>

<p>Then appending everything after the first element (position zero)</p>

<p>What does the ... (dot dot dot) do?</p>
","<p>Where <code>a</code> is the slice, and <code>i</code> is the index of the element you want to delete:</p>

<pre><code>a = append(a[:i], a[i+1:]...)
</code></pre>

<p><code>...</code> is syntax for variadic arguments in Go.</p>

<p>Basically, when <strong>defining</strong> a function it puts all the arguments that you pass into one slice of that type. By doing that, you can pass as many arguments as you want (for example, <code>fmt.Println</code> can take as many arguments as you want).</p>

<p>Now, when <strong>calling</strong> a function, <code>...</code> does the opposite: it unpacks a slice and passes them as separate arguments to a variadic function.</p>

<p>So what this line does:</p>

<pre><code>a = append(a[:0], a[1:]...)
</code></pre>

<p>is essentially:</p>

<pre><code>a = append(a[:0], a[1], a[2])
</code></pre>

<p>Now, you may be wondering, why not just do </p>

<pre><code>a = append(a[:1]...)
</code></pre>

<p>Well, the function definition of <code>append</code> is</p>

<pre><code>func append(slice []Type, elems ...Type) []Type
</code></pre>

<p>So the first argument has to be a slice of the correct type, the second argument is the variadic, so we pass in an empty slice, and then unpack the rest of the slice to fill in the arguments.</p>
","25025536"
"What is the best way to test for an empty string in Go?","76310","","<p>Which method is best (more idomatic) for testing non-empty strings (in Go)?</p>

<pre><code>if len(mystring) &gt; 0 { }
</code></pre>

<p>Or:</p>

<pre><code>if mystring != """" { }
</code></pre>

<p>Or something else?</p>
","<p>Both styles are used within the Go's standard libraries.</p>

<pre><code>if len(s) &gt; 0 { ... }
</code></pre>

<p>can be found in the <code>strconv</code> package: <a href=""http://golang.org/src/pkg/strconv/atoi.go"">http://golang.org/src/pkg/strconv/atoi.go</a></p>

<pre><code>if s != """" { ... }
</code></pre>

<p>can be found in the <code>encoding/json</code> package: <a href=""http://golang.org/src/pkg/encoding/json/encode.go"">http://golang.org/src/pkg/encoding/json/encode.go</a></p>

<p>Both are idiomatic and and clear enough. It is more a matter of personal taste and about clarity.</p>

<p>Russ Cox writes in a <a href=""https://groups.google.com/forum/#!topic/golang-nuts/7Ks1iq2s7FA"">golang-nuts thread</a>:</p>

<blockquote>
  <p>The one that makes the code clear.<br>
  If I'm about to look at element x I typically write<br>
  len(s) > x, even for x == 0, but if I care about<br>
  ""is it this specific string"" I tend to write s == """".  </p>
  
  <p>It's reasonable to assume that a mature compiler will compile<br>
  len(s) == 0 and s == """" into the same, efficient code.<br>
  Right now 6g etc do compile s == """" into a function call<br>
  while len(s) == 0 is not, but that's been on my to-do list to fix.  </p>
  
  <p>Make the code clear.</p>
</blockquote>
","18595217"
"Setting HTTP headers","75915","","<p>I'm trying to set a header in my Go web server. I'm using <code>gorilla/mux</code> and <code>net/http</code> packages.</p>

<p>I'd like to set <code>Access-Control-Allow-Origin: *</code> to allow cross domain AJAX.</p>

<p>Here's my Go code:</p>

<pre><code>func saveHandler(w http.ResponseWriter, r *http.Request) {
// do some stuff with the request data
}

func main() {
    r := mux.NewRouter()
    r.HandleFunc(""/save"", saveHandler)
    http.Handle(""/"", r)
    http.ListenAndServe("":""+port, nil)
}
</code></pre>

<p>The <code>net/http</code> package has documentation describing sending http request headers as if it were a client - I'm not exactly sure how to set response headers?</p>
","<p>Never mind, I figured it out - I used the <code>Set()</code> method on <code>Header()</code> (doh!)</p>

<p>My handler looks like this now:</p>

<pre><code>func saveHandler(w http.ResponseWriter, r *http.Request) {
    // allow cross domain AJAX requests
    w.Header().Set(""Access-Control-Allow-Origin"", ""*"")
}
</code></pre>

<p>Maybe this will help someone as caffeine deprived as myself sometime :)</p>
","12830156"
"Golang - Getting a slice of keys from a map","75657","","

<p>Is there any simpler/nicer way of getting a slice of keys from a map in Go?</p>

<p>Currently I am iterating over the map and copying the keys to a slice:</p>

<pre class=""lang-golang prettyprint-override""><code>i := 0
keys := make([]int, len(mymap))
for k := range mymap {
    keys[i] = k
    i++
}
</code></pre>
","<p>For example,</p>

<pre><code>package main

func main() {
    mymap := make(map[int]string)
    keys := make([]int, 0, len(mymap))
    for k := range mymap {
        keys = append(keys, k)
    }
}
</code></pre>

<p>To be efficient in Go, it's important to minimize memory allocations.</p>
","21363587"
"nil detection in Go","75196","","<p>I see a lot of code in Go to detect nil, like this:</p>

<pre><code>if err != nil { 
    // handle the error    
}
</code></pre>

<p>however, I have a struct like this:</p>

<pre><code>type Config struct {
    host string  
    port float64
}
</code></pre>

<p>and config is an instance of Config, when I do:</p>

<pre><code>if config == nil {
}
</code></pre>

<p>there is compile error, saying:
    cannot convert nil to type Config</p>
","<p>The compiler is pointing the error to you, you're comparing a structure instance and nil. They're not of the same type so it considers it as an invalid comparison and yells at you.</p>

<p>What you want to do here is to compare a pointer to your config instance to nil, which is a valid comparison. To do that you can either use the golang <em>new</em> builtin, or initialize a pointer to it:</p>

<pre><code>config := new(Config) // not nil
</code></pre>

<p>or </p>

<pre><code>config := &amp;Config{host: myhost.com, port: 22} // not nil
</code></pre>

<p>or</p>

<pre><code>var config *Config // nil
</code></pre>

<p>Then you'll be able to check if </p>

<pre><code>if config == nil {
    // then
}
</code></pre>
","20240309"
"Go build: ""Cannot find package"" (even though GOPATH is set)","74348","","<p>Even though I have GOPATH properly set, I still can't get ""go build"" or ""go run"" to find my own packages. What am I doing wrong? Thank you so much!</p>

<pre><code>$ echo $GOROOT
/usr/local/go

$ echo $GOPATH
/home/mitchell/go

$ cat ~/main.go
package main
import ""foobar""
func main() { }

$ cat /home/mitchell/go/src/foobar.go
package foobar

$ go build main.go
main.go:3:8: import ""foobar"": cannot find package
</code></pre>
","<p>It does not work because your <code>foobar.go</code> source file is not in a directory called <code>foobar</code>. <code>go build</code> and <code>go install</code> try to match directories, not source files.</p>

<ol>
<li>Set <code>$GOPATH</code> to a valid directory, e.g. <code>export GOPATH=""$HOME/go""</code></li>
<li>Move <code>foobar.go</code> to <code>$GOPATH/src/foobar/foobar.go</code> and building should work just fine.</li>
</ol>

<p>Additional recommended steps:</p>

<ol>
<li>Add <code>$GOPATH/bin</code> to your <code>$PATH</code> by: <code>PATH=""$GOPATH/bin:$PATH""</code></li>
<li>Move <code>main.go</code> to a subfolder of <code>$GOPATH/src</code>, e.g. <code>$GOPATH/src/test</code></li>
<li><code>go install test</code> should now create an executable in <code>$GOPATH/bin</code> that can be called by typing <code>test</code> into your terminal.</li>
</ol>
","13223578"
"How do I get the current timestamp in Go?","71115","","<p>What's the best way to get the current timestamp in Go and convert to string? I need both date and time in eg. YYYYMMDDhhmmss format.</p>
","<p>Use the <a href=""http://golang.org/pkg/time/#Now"" rel=""noreferrer""><code>time.Now()</code></a> function and the <a href=""http://golang.org/pkg/time/#Time.Format"" rel=""noreferrer""><code>time.Format()</code></a> method.</p>

<pre><code>t := time.Now()
fmt.Println(t.Format(""20060102150405""))
</code></pre>

<p>prints out <code>20110504111515</code>, or at least it did a few minutes ago. (I'm on Eastern Daylight Time.) There are several pre-defined time formats in the <a href=""http://golang.org/pkg/time/#pkg-constants"" rel=""noreferrer"">constants</a> defined in the time package.</p>

<p>You can use <a href=""http://golang.org/pkg/time/#Time.UTC"" rel=""noreferrer""><code>time.Now().UTC()</code></a> if you'd rather have UTC than your local time zone.</p>
","5885753"
"How to generate a random string of a fixed length in golang?","70947","","<p>I want a random string of characters only (uppercase or lowercase), no numbers in Golang. What is the fastest and simplest way to do this in Go?</p>
","<p>Paul's solution provides a simple, general solution.</p>

<p>The question asks for the <em>""the fastest and simplest way""</em>. Let's address this. We'll arrive at our final, fastest code in an iterative manner. Benchmarking each iteration can be found at the end of the answer.</p>

<p>All the solutions and the benchmarking code can be found on the <a href=""http://play.golang.org/p/WIgH7GRnN1"" rel=""noreferrer"">Go Playground</a>. The code on the Playground is a test file, not an executable. You have to save it into a file named <code>XX_test.go</code> and run it with <code>go test -bench .</code>.</p>

<h2>I. Improvements</h2>

<h3>1. Genesis (Runes)</h3>

<p>As a reminder, the original, general solution we're improving is this:</p>

<pre><code>func init() {
    rand.Seed(time.Now().UnixNano())
}

var letterRunes = []rune(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"")

func RandStringRunes(n int) string {
    b := make([]rune, n)
    for i := range b {
        b[i] = letterRunes[rand.Intn(len(letterRunes))]
    }
    return string(b)
}
</code></pre>

<h3>2. Bytes</h3>

<p>If the characters to choose from and assemble the random string contains only the uppercase and lowercase letters of the English alphabet, we can work with bytes only because the English alphabet letters map to bytes 1-to-1 in the UTF-8 encoding (which is how Go stores strings).</p>

<p>So instead of:</p>

<pre><code>var letters = []rune(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"")
</code></pre>

<p>we can use:</p>

<pre><code>var letters = []bytes(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"")
</code></pre>

<p>Or even better:</p>

<pre><code>const letters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ""
</code></pre>

<p>Now this is already a big improvement: we could achieve it to be a <code>const</code> (there are <code>string</code> constants but <a href=""https://stackoverflow.com/a/29365828/1705598"">there are no slice constants</a>). As an extra gain, the expression <code>len(letters)</code> will also be a <code>const</code>! (The expression <code>len(s)</code> is constant if <code>s</code> is a string constant.)</p>

<p>And at what cost? Nothing at all. <code>string</code>s can be indexed which indexes its bytes, perfect, exactly what we want.</p>

<p>Our next destination looks like this:</p>

<pre><code>const letterBytes = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ""

func RandStringBytes(n int) string {
    b := make([]byte, n)
    for i := range b {
        b[i] = letterBytes[rand.Intn(len(letterBytes))]
    }
    return string(b)
}
</code></pre>

<h3>3. Remainder</h3>

<p>Previous solutions get a random number to designate a random letter by calling <a href=""https://golang.org/pkg/math/rand/#Intn"" rel=""noreferrer""><code>rand.Intn()</code></a> which delegates to <a href=""https://golang.org/pkg/math/rand/#Rand.Intn"" rel=""noreferrer""><code>Rand.Intn()</code></a> which delegates to <a href=""https://golang.org/pkg/math/rand/#Rand.Int31n"" rel=""noreferrer""><code>Rand.Int31n()</code></a>.</p>

<p>This is much slower compared to <a href=""https://golang.org/pkg/math/rand/#Int63"" rel=""noreferrer""><code>rand.Int63()</code></a> which produces a random number with 63 random bits.</p>

<p>So we could simply call <code>rand.Int63()</code> and use the remainder after dividing by <code>len(letterBytes)</code>:</p>

<pre><code>func RandStringBytesRmndr(n int) string {
    b := make([]byte, n)
    for i := range b {
        b[i] = letterBytes[rand.Int63() % int64(len(letterBytes))]
    }
    return string(b)
}
</code></pre>

<p>This works and is significantly faster, the disadvantage is that the probability of all the letters will not be exactly the same (assuming <code>rand.Int63()</code> produces all 63-bit numbers with equal probability). Although the distortion is extremely small as the number of letters <code>52</code> is much-much smaller than <code>1&lt;&lt;63 - 1</code>, so in practice this is perfectly fine.</p>

<p><sup>To make this understand easier: let's say you want a random number in the range of <code>0..5</code>. Using 3 random bits, this would produce the numbers <code>0..1</code> with double probability than from the range <code>2..5</code>. Using 5 random bits, numbers in range <code>0..1</code> would occur with <code>6/32</code> probability and numbers in range <code>2..5</code> with <code>5/32</code> probability which is now closer to the desired. Increasing the number of bits makes this less significant, when reaching 63 bits, it is negligible.</sup></p>

<h3>4. Masking</h3>

<p>Building on the previous solution, we can maintain the equal distribution of letters by using only as many of the lowest bits of the random number as many is required to represent the number of letters. So for example if we have 52 letters, it requires 6 bits to represent it: <code>52 = 110100b</code>. So we will only use the lowest 6 bits of the number returned by <code>rand.Int63()</code>. And to maintain equal distribution of letters, we only ""accept"" the number if it falls in the range <code>0..len(letterBytes)-1</code>. If the lowest bits are greater, we discard it and query a new random number.</p>

<p>Note that the chance of the lowest bits to be greater than or equal to <code>len(letterBytes)</code> is less than <code>0.5</code> in general (<code>0.25</code> on average), which means that even if this would be the case, repeating this ""rare"" case decreases the chance of not finding a good number. After <code>n</code> repetition, the chance that we sill don't have a good index is much less than <code>pow(0.5, n)</code>, and this is just an upper estimation. In case of 52 letters the chance that the 6 lowest bits are not good is only <code>(64-52)/64 = 0.19</code>; which means for example that chances to not have a good number after 10 repetition is <code>1e-8</code>.</p>

<p>So here is the solution:</p>

<pre><code>const letterBytes = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ""
const (
    letterIdxBits = 6                    // 6 bits to represent a letter index
    letterIdxMask = 1&lt;&lt;letterIdxBits - 1 // All 1-bits, as many as letterIdxBits
)

func RandStringBytesMask(n int) string {
    b := make([]byte, n)
    for i := 0; i &lt; n; {
        if idx := int(rand.Int63() &amp; letterIdxMask); idx &lt; len(letterBytes) {
            b[i] = letterBytes[idx]
            i++
        }
    }
    return string(b)
}
</code></pre>

<h3>5. Masking Improved</h3>

<p>The previous solution only uses the lowest 6 bits of the 63 random bits returned by <code>rand.Int63()</code>. This is a waste as getting the random bits is the slowest part of our algorithm.</p>

<p>If we have 52 letters, that means 6 bits code a letter index. So 63 random bits can designate <code>63/6 = 10</code> different letter indices. Let's use all those 10:</p>

<pre><code>const letterBytes = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ""
const (
    letterIdxBits = 6                    // 6 bits to represent a letter index
    letterIdxMask = 1&lt;&lt;letterIdxBits - 1 // All 1-bits, as many as letterIdxBits
    letterIdxMax  = 63 / letterIdxBits   // # of letter indices fitting in 63 bits
)

func RandStringBytesMaskImpr(n int) string {
    b := make([]byte, n)
    // A rand.Int63() generates 63 random bits, enough for letterIdxMax letters!
    for i, cache, remain := n-1, rand.Int63(), letterIdxMax; i &gt;= 0; {
        if remain == 0 {
            cache, remain = rand.Int63(), letterIdxMax
        }
        if idx := int(cache &amp; letterIdxMask); idx &lt; len(letterBytes) {
            b[i] = letterBytes[idx]
            i--
        }
        cache &gt;&gt;= letterIdxBits
        remain--
    }

    return string(b)
}
</code></pre>

<h3>6. Source</h3>

<p>The <strong>Masking Improved</strong> is pretty good, not much we can improve on it. We could, but not worth the complexity.</p>

<p>Now let's find something else to improve. <strong>The source of random numbers.</strong></p>

<p>There is a <a href=""https://golang.org/pkg/crypto/rand/"" rel=""noreferrer""><code>crypto/rand</code></a> package which provides a <a href=""https://golang.org/pkg/crypto/rand/#Read"" rel=""noreferrer""><code>Read(b []byte)</code></a> function, so we could use that to get as many bytes with a single call as many we need. This wouldn't help in terms of performance as <code>crypto/rand</code> implements a cryptographically secure pseudorandom number generator so it's much slower.</p>

<p>So let's stick to the <code>math/rand</code> package. The <code>rand.Rand</code> uses a <a href=""https://golang.org/pkg/math/rand/#Source"" rel=""noreferrer""><code>rand.Source</code></a> as the source of random bits. <code>rand.Source</code> is an interface which specifies a <code>Int63() int64</code> method: exactly and the only thing we needed and used in our latest solution.</p>

<p>So we don't really need a <code>rand.Rand</code> (either explicit or the global, shared one of the <code>rand</code> package), a <code>rand.Source</code> is perfectly enough for us:</p>

<pre><code>var src = rand.NewSource(time.Now().UnixNano())

func RandStringBytesMaskImprSrc(n int) string {
    b := make([]byte, n)
    // A src.Int63() generates 63 random bits, enough for letterIdxMax characters!
    for i, cache, remain := n-1, src.Int63(), letterIdxMax; i &gt;= 0; {
        if remain == 0 {
            cache, remain = src.Int63(), letterIdxMax
        }
        if idx := int(cache &amp; letterIdxMask); idx &lt; len(letterBytes) {
            b[i] = letterBytes[idx]
            i--
        }
        cache &gt;&gt;= letterIdxBits
        remain--
    }

    return string(b)
}
</code></pre>

<p>Also note that this last solution doesn't require you to initialize (seed) the global <code>Rand</code> of the <code>math/rand</code> package as that is not used (and our <code>rand.Source</code> is properly initialized / seeded).</p>

<p>One more thing to note here: package doc of <code>math/rand</code> states:</p>

<blockquote>
  <p>The default Source is safe for concurrent use by multiple goroutines.</p>
</blockquote>

<p>So the default source is slower than a <code>Source</code> that may be obtained by <code>rand.NewSource()</code>, because the default source has to provide safety under concurrent access / use, while <code>rand.NewSource()</code> does not offer this (and thus the <code>Source</code> returned by it is more likely to be faster).</p>

<h2>II. Benchmark</h2>

<p>All right, let's benchmark the different solutions.</p>

<pre><code>BenchmarkRunes                   1000000              1703 ns/op
BenchmarkBytes                   1000000              1328 ns/op
BenchmarkBytesRmndr              1000000              1012 ns/op
BenchmarkBytesMask               1000000              1214 ns/op
BenchmarkBytesMaskImpr           5000000               395 ns/op
BenchmarkBytesMaskImprSrc        5000000               303 ns/op
</code></pre>

<p>Just by switching from runes to bytes, we immediately have <strong>22%</strong> performance gain.</p>

<p>Getting rid of <code>rand.Intn()</code> and using <code>rand.Int63()</code> instead gives another <strong>24%</strong> boost.</p>

<p>Masking (and repeating in case of big indices) slows down a little (due to repetition calls): <strong>-20%</strong>...</p>

<p>But when we make use of all (or most) of the 63 random bits (10 indices from one <code>rand.Int63()</code> call): that speeds up <strong>3.4 times</strong>.</p>

<p>And finally if we settle with a (non-default, new) <code>rand.Source</code> instead of <code>rand.Rand</code>, we again gain <strong>23%.</strong></p>

<p>Comparing the final to the initial solution: <code>RandStringBytesMaskImprSrc()</code> is <strong>5.6 times faster</strong> than <code>RandStringRunes()</code>.</p>
","31832326"
"How to read files and stdout from a running Docker container","68883","","<p>How would I go about starting an application in my host machine in order to read files and stdout from a running docker container? </p>

<p>Essentially I want to do this:</p>

<pre><code>docker start containerid   
./myapp // This app will *somehow* have access files and stdout generated by the container I just stared. 
</code></pre>

<p>How would I go about doing that? To be more specific with where I am trying to go with this; I want to read the logs and stdout of a docker container and have those logs processed somewhere else. </p>

<p>I am also willing to create another docker container which can read files and stdout from another container, but I don't know if that's possible.</p>
","<p>The <em>stdout</em> of the process started by the docker container is available through the <a href=""https://docs.docker.com/engine/reference/commandline/logs/"" rel=""noreferrer""><code>docker logs</code> command</a> (use <code>-f</code> to keep it going forever). Another option would be to stream the logs directly through the <a href=""https://docs.docker.com/engine/api/v1.28/#operation/ContainerLogs"" rel=""noreferrer"">docker remote API</a>.</p>

<p>For accessing log files (only if you must, consider logging to stdout or other standard solution like syslogd) your only real-time option is to <a href=""https://docs.docker.com/engine/reference/commandline/run/#mount-volume--v---read-only"" rel=""noreferrer"">configure a volume</a> (like Marcus Hughes suggests) so the logs are stored outside the container and available for processing from the host or another container.</p>

<p>If you do not need real-time access to the logs, <a href=""https://docs.docker.com/engine/reference/commandline/export/"" rel=""noreferrer"">you can export the files</a> (in tar format) with <code>docker export</code></p>
","24629857"
"Idiomatic way to do conversion/type assertion on multiple return values in Go","67532","","<p>What is the idiomatic way to cast multiple return values in Go?</p>

<p>Can you do it in a single line, or do you need to use temporary variables such as I've done in my example below?</p>

<pre><code>package main

import ""fmt""

func oneRet() interface{} {
    return ""Hello""
}

func twoRet() (interface{}, error) {
    return ""Hejsan"", nil
}

func main() {
    // With one return value, you can simply do this
    str1 := oneRet().(string)
    fmt.Println(""String 1: "" + str1)

    // It is not as easy with two return values
    //str2, err := twoRet().(string) // Not possible
    // Do I really have to use a temp variable instead?
    temp, err := twoRet()
    str2 := temp.(string)
    fmt.Println(""String 2: "" + str2 )


    if err != nil {
        panic(""unreachable"")
    }   
}
</code></pre>

<p>By the way, is it called <code>casting</code> when it comes to interfaces?</p>

<pre><code>i := interface.(int)
</code></pre>
","<p>You can't do it in a single line.
Your temporary variable approach is the way to go.</p>

<blockquote>
  <p>By the way, is it called casting when it comes to interfaces?</p>
</blockquote>

<p>It is actually called a <a href=""http://golang.org/ref/spec#Type_assertions"" rel=""noreferrer"">type assertion</a>.
A type <strike>cast</strike> conversion is different:</p>

<pre><code>var a int
var b int64

a = 5
b = int64(a)
</code></pre>
","11403424"
"convert interface{} to int in Golang","66973","","<p>I'm new to Golang and I'm trying to get a value from a JSON and cast it to int but it doesn't work. Don't know how to do it properly.</p>

<p>Here is the error message:</p>

<pre><code>...cannot convert val (type interface {}) to type int: need type assertion
</code></pre>

<p>And the Code:</p>

<pre><code>    var f interface{}
    err = json.Unmarshal([]byte(jsonStr), &amp;f)
    if err != nil {
        utility.CreateErrorResponse(w, ""Error: failed to parse JSON data."")
        return
    }

    m := f.(map[string]interface{})

    val, ok := m[""area_id""]
    if !ok {
        utility.CreateErrorResponse(w, ""Error: Area ID is missing from submitted data."")
        return
    }

    fmt.Fprintf(w, ""Type = %v"", val)   // &lt;--- Type = float64
    iAreaId := int(val)                // &lt;--- Error on this line.
    testName := ""Area_"" + iAreaId      // not reaching here
</code></pre>

<p>any help would be appreciated.</p>
","<p>Instead of</p>

<pre><code>iAreaId := int(val)
</code></pre>

<p>you want a <a href=""http://golang.org/ref/spec#Type_assertions"">type assertion</a>:</p>

<pre><code>iAreaId := val.(int)
iAreaId, ok := val.(int) // Alt. non panicking version 
</code></pre>

<p>The reason why you cannot <a href=""http://golang.org/ref/spec#Conversions"">convert</a> an interface typed value are these rules in the referenced specs parts:</p>

<blockquote>
  <p>Conversions are expressions of the form <code>T(x)</code> where <code>T</code> is a type and <code>x</code> is an expression that can be converted to type T.</p>
</blockquote>

<p>...</p>

<blockquote>
  <p>A non-constant value x can be converted to type T in any of these cases:</p>
  
  <ol>
  <li>x is assignable to T.</li>
  <li>x's type and T have identical underlying types.</li>
  <li>x's type and T are unnamed pointer types and their pointer base types have identical underlying types.</li>
  <li>x's type and T are both integer or floating point types.</li>
  <li>x's type and T are both complex types.</li>
  <li>x is an integer or a slice of bytes or runes and T is a string type.</li>
  <li>x is a string and T is a slice of bytes or runes.</li>
  </ol>
</blockquote>

<p>But</p>

<pre><code>iAreaId := int(val)
</code></pre>

<p>is <em>not</em> any of the cases 1.-7.</p>
","18041561"
"Go install always fails no install directory outside GOPATH","65119","","<pre><code>~/src/go-statsd-client&gt; echo $GOPATH
/Users/me/gopath
~/src/go-statsd-client&gt; echo $GOROOT
/usr/local/Cellar/go/1.1.1\
~/src/go-statsd-client&gt; go install
go install: no install location for directory /Users/me/src/go-statsd-client outside GOPATH
</code></pre>

<p>No matter what structure the project is in this always fails with the same message. Go build works perfectly.</p>

<p>Here is my <code>go env</code></p>

<pre><code>GOARCH=""amd64""
GOBIN=""""
GOCHAR=""6""
GOEXE=""""
GOHOSTARCH=""amd64""
GOHOSTOS=""darwin""
GOOS=""darwin""
GOPATH=""/Users/me/gopath""
GORACE=""""
GOROOT=""/usr/local/Cellar/go/1.1.1""
GOTOOLDIR=""/usr/local/Cellar/go/1.1.1/pkg/tool/darwin_amd64""
CC=""gcc""
GOGCCFLAGS=""-g -O2 -fPIC -m64 -pthread -fno-common""
CGO_ENABLED=""1""
</code></pre>

<p>This is on Mac OSX Mountain Lion and go was installed with homebrew.</p>
","<p>When you provide no arguments to <code>go install</code>, it defaults to attempting to install the package in the current directory. The error message is telling you that it cannot do that, because the current directory isn't part of your <code>$GOPATH</code>.</p>

<p>You can either:</p>

<ul>
<li>Define <code>$GOPATH</code> to your $HOME (<code>export GOPATH=$HOME</code>).</li>
<li>Move your source to within the current <code>$GOPATH</code> (<code>mv ~/src/go-statsd-client /User/me/gopath</code>).</li>
</ul>

<p>After either, going into the <code>go-statsd-client</code> directory and typing <code>go install</code> will work, and so will typing <code>go install go-statsd-client</code> from anywhere in the filesystem. The built binaries will go into <code>$GOPATH/bin</code>.</p>

<p>As an unrelated suggestion, you probably want to namespace your package with a domain name, to avoid name clashing (e.g. <code>github.com/you/go-statsd-client</code>, if that's where you hold your source code).</p>
","18164310"
"Converting Go struct to JSON","65062","","<p>I am trying to convert a Go struct to JSON using the <code>json</code> package but all I get is <code>{}</code>. I am certain it is something totally obvious but I don't see it.</p>

<pre><code>package main

import (
    ""fmt""
    ""encoding/json""
)

type User struct {
    name string
}

func main() {
    user := &amp;User{name:""Frank""}
    b, err := json.Marshal(user)
    if err != nil {
        fmt.Printf(""Error: %s"", err)
        return;
    }
    fmt.Println(string(b))
}
</code></pre>

<p>Then when I try to run it I get this:</p>

<pre><code>$ 6g test.go &amp;&amp; 6l -o test test.6 &amp;&amp; ./test 
{}
</code></pre>
","<p>You need to <a href=""http://golang.org/doc/go_spec.html#Exported_identifiers"">export</a> the <code>User.name</code> field so that the <code>json</code> package can see it. Rename the <code>name</code> field to <code>Name</code>.</p>

<pre><code>package main

import (
    ""fmt""
    ""encoding/json""
)

type User struct {
    Name string
}

func main() {
    user := &amp;User{Name: ""Frank""}
    b, err := json.Marshal(user)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(string(b))
}
</code></pre>

<p>Output:</p>

<pre><code>{""Name"":""Frank""}
</code></pre>
","8271160"
"Install go with brew, and running the gotour","63470","","<p>I was following the <a href=""http://tour.golang.org/"">http://tour.golang.org/</a> untill I got to the third step about that tells you that you can install the gotour on your system.
After that I've installed the go language with brew by:</p>

<pre><code>brew install hg
brew install go
</code></pre>

<p>Then I downloaded the gotour by:</p>

<pre><code>go get code.google.com/p/go-tour/gotour
</code></pre>

<p>When I tried to launch the gotour it didnt recognise the command:</p>

<pre><code>$ gotour
-bash: gotour: command not found
</code></pre>

<p>and </p>

<pre><code>$ go gotour
</code></pre>

<p>and </p>

<pre><code>$ ./gotour
</code></pre>

<p>So I tried to see the go path and it was empty,</p>

<pre><code>echo $GOPATH
</code></pre>

<p>so I defined the GOPATH:</p>

<pre><code>GOPATH=/usr/local/Cellar/go/1.0.2/src/pkg/code.google.com/p/
export GOPATH
</code></pre>

<p>Now I can run the gotour by runing</p>

<pre><code>./gotour
</code></pre>

<p>But I'm insecure about my go enviroment.. wasn't I suposed to be able to run gotour by</p>

<pre><code>go run gotour
</code></pre>

<p>or just by typing (like is described on this website <a href=""http://www.moncefbelyamani.com/how-to-install-the-go-tour-on-your-mac/"">http://www.moncefbelyamani.com/how-to-install-the-go-tour-on-your-mac/</a>):</p>

<pre><code>gotour
</code></pre>

<p>I would like to know if i'm doing things the right way since I'm new to the go programing language.</p>
","<h2>Installing go 1.4 with homebrew on OSX:</h2>

<h3>1) Create Directories</h3>

<pre><code>mkdir $HOME/Go
mkdir -p $HOME/Go/src/github.com/user
</code></pre>

<h3>2) Setup your paths</h3>

<pre><code>export GOPATH=$HOME/Go
export GOROOT=/usr/local/opt/go/libexec
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:$GOROOT/bin
</code></pre>

<h3>3) Install Go</h3>

<pre><code>brew install go
</code></pre>

<h3>4) ""go get"" the basics</h3>

<pre><code>go get golang.org/x/tools/cmd/godoc
</code></pre>

<h3>5) Start here: <a href=""https://golang.org/doc/code.html"">https://golang.org/doc/code.html</a> at ""your first program""</h3>
","27709931"
"Golang - correct way to initialize empty slice","62971","","<p>To declare an empty slice, with a non-fixed size,
is it better to do :  </p>

<pre><code>mySlice1 := make([]int, 0)
</code></pre>

<p>or :  </p>

<pre><code>mySlice2 := []int{}
</code></pre>

<p>Just wondering which one is the correct way.  </p>

<p>Cheers</p>
","<p>The two alternative you gave are semantically identical, and I would assume they produce the same assembly instructions.</p>

<p>To avoid an unnecessary allocation, in case you will end up not using the slice, you can leave it with a <code>nil</code> value:</p>

<pre><code> var myslice []int
</code></pre>

<p>As written in the <a href=""http://blog.golang.org/slices"" rel=""noreferrer"">Golang.org blog</a>:</p>

<blockquote>
  <p>a nil slice is functionally equivalent to a zero-length slice, even though it points to nothing. It has length zero and can be appended to, with allocation.</p>
</blockquote>
","29164565"
"In Go's http package, how do I get the query string on a POST request?","62292","","<p>I'm using the <code>http</code>package from Go to deal with POST request. How can I access and parse the content of the query string from the <code>Request</code>object ? I can't find the answer from the official documentation.</p>
","<p>A QueryString is, <a href=""http://en.wikipedia.org/wiki/Query_string"" rel=""noreferrer"">by definition</a>, in the URL. You can access the URL of the request using <code>req.URL</code> (<a href=""http://golang.org/pkg/net/http/#Request"" rel=""noreferrer"">doc</a>). The URL object has a <code>Query()</code> method (<a href=""http://golang.org/pkg/net/url/#URL.Query"" rel=""noreferrer"">doc</a>) that returns a <code>Values</code> type, which is simply a <code>map[string][]string</code> of the QueryString parameters.</p>

<p>If what you're looking for is the POST data <a href=""http://en.wikipedia.org/wiki/POST_(HTTP)#Use_for_submitting_web_forms"" rel=""noreferrer"">as submitted by an HTML form</a>, then this is (usually) a key-value pair in the request body. You're correct in your answer that you can call <code>ParseForm()</code> and then use <code>req.Form</code> field to get the map of key-value pairs, but you can also call <code>FormValue(key)</code> to get the value of a specific key. This calls <code>ParseForm()</code> if required, and gets values regardless of how they were sent (i.e. in query string or in the request body).</p>
","15408779"
"Golang random number generator how to seed properly","61694","","<p>I am trying to generate a random string in Go and here is the code I have written so far:</p>

<pre><code>package main

import (
    ""bytes""
    ""fmt""
    ""math/rand""
    ""time""
)

func main() {
    fmt.Println(randomString(10))
}

func randomString(l int) string {
    var result bytes.Buffer
    var temp string
    for i := 0; i &lt; l; {
        if string(randInt(65, 90)) != temp {
            temp = string(randInt(65, 90))
            result.WriteString(temp)
            i++
        }
    }
    return result.String()
}

func randInt(min int, max int) int {
    rand.Seed(time.Now().UTC().UnixNano())
    return min + rand.Intn(max-min)
}
</code></pre>

<p>My implementation is very slow. Seeding using <code>time</code> brings the same random number for a certain time, so the loop iterates again and again. How can I improve my code?</p>
","<p>Each time you set the same seed, you get the same sequence. So of course if you're setting the seed to the time in a fast loop, you'll probably call it with the same seed many times.</p>

<p>In your case, as you're calling your <code>randInt</code> function until you have a different value, you're waiting for the time (as returned by Nano) to change.</p>

<p><a href=""http://en.wikipedia.org/wiki/Pseudorandom_number_generator"" rel=""noreferrer"">As for all pseudo-random libraries</a>, you have to set the seed only once, for example when initializing your program unless you specifically need to reproduce a given sequence (which is usually done for debugging).</p>

<p>After that you simply call <code>Intn</code> to get the next random integer.</p>

<p>Move the <code>rand.Seed( time.Now().UTC().UnixNano())</code> line from the randInt function to the start of the main and everything will be faster.</p>

<p>Note also that I think you can simplify your string building:</p>

<pre><code>package main

import (
    ""fmt""
    ""math/rand""
    ""time""
)

func main() {
    rand.Seed(time.Now().UTC().UnixNano())
    fmt.Println(randomString(10))
}

func randomString(l int) string {
    bytes := make([]byte, l)
    for i := 0; i &lt; l; i++ {
        bytes[i] = byte(randInt(65, 90))
    }
    return string(bytes)
}

func randInt(min int, max int) int {
    return min + rand.Intn(max-min)
}
</code></pre>
","12321192"
"What are the advantages and disadvantages of Go programming language?","61623","","<p>Not so long ago Google came out with this new programming language, which was said to be fast as C and intuitive and simple as python. I will not judge this assertions, but instead ask you: </p>

<p>What do you think are Go's <strong>advantages and disadvantages</strong>?<br>
Can you tell us about a real use you have given to this programming language?</p>
","<p>Advantages:</p>

<ul>
<li>Go compiles very quickly.</li>
<li>Go supports concurrency at the language level.</li>
<li>Functions are first class objects in Go.</li>
<li>Go has garbage collection.</li>
<li>Strings and maps are built into the language.</li>
</ul>

<p>Disadvantages:</p>

<ul>
<li>The packages distributed with Go are pretty useful, but there are still some libraries you'll miss. Most notably a UI toolkit.</li>
<li>There is no support for generics in Go, although there are many discussions around it.</li>
</ul>

<p>Other points of note that could be advantages or disadvantages:</p>

<ul>
<li>Go compiles to machine code.</li>
<li>Go is very strongly typed.</li>
<li>Go is not object oriented in the traditional sense.</li>
</ul>
","2200447"
"What is the idiomatic Go equivalent of C's ternary operator?","60771","","<p>In C/C++ (and many languages of that family), a common idiom to declare and initialize a variable depending on a condition uses the ternary conditional operator :</p>

<pre><code>int index = val &gt; 0 ? val : -val
</code></pre>

<p>Go doesn't have the conditional operator. What is the most idiomatic way to implement the same piece of code as above ? I came to the following solution, but it seems quite verbose</p>

<pre><code>var index int

if val &gt; 0 {
    index = val
} else {
    index = -val
}
</code></pre>

<p>Is there something better ?</p>
","<p>As pointed out (and hopefully unsurprisingly), using <code>if+else</code> is indeed the <a href=""http://golang.org/doc/faq#Does_Go_have_a_ternary_form"">idiomatic way</a> to do conditionals in Go.</p>

<p>In addition to the full blown <code>var+if+else</code> block of code, though, this spelling is also used often:</p>

<pre><code>index := val
if val &lt;= 0 {
    index = -val
}
</code></pre>

<p>and if you have a block of code that is repetitive enough, such as the equivalent of <code>int value = a &lt;= b ? a : b</code>, you can create a function to hold it:</p>

<pre><code>func min(a, b int) int {
    if a &lt;= b {
        return a
    }
    return b
}

...

value := min(a, b)
</code></pre>

<p>The compiler will inline such simple functions, so it's fast, more clear, and shorter.</p>
","19979829"
"Go: panic: runtime error: invalid memory address or nil pointer dereference","60679","","<p>When running my Go program, it panics and returns the following:</p>

<pre><code>panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x38 pc=0x26df]

goroutine 1 [running]:
main.getBody(0x1cdcd4, 0xf800000004, 0x1f2b44, 0x23, 0xf84005c800, ...)
        /Users/matt/Dropbox/code/go/scripts/cron/fido.go:65 +0x2bb
main.getToken(0xf84005c7e0, 0x10)
        /Users/matt/Dropbox/code/go/scripts/cron/fido.go:140 +0x156
main.main()
        /Users/matt/Dropbox/code/go/scripts/cron/fido.go:178 +0x61

goroutine 2 [syscall]:
created by runtime.main
        /usr/local/Cellar/go/1.0.3/src/pkg/runtime/proc.c:221

goroutine 3 [syscall]:
syscall.Syscall6()
        /usr/local/Cellar/go/1.0.3/src/pkg/syscall/asm_darwin_amd64.s:38 +0x5
syscall.kevent(0x6, 0x0, 0x0, 0xf840085188, 0xa, ...)
        /usr/local/Cellar/go/1.0.3/src/pkg/syscall/zsyscall_darwin_amd64.go:199 +0x88
syscall.Kevent(0xf800000006, 0x0, 0x0, 0xf840085188, 0xa0000000a, ...)
        /usr/local/Cellar/go/1.0.3/src/pkg/syscall/syscall_bsd.go:546 +0xa4
net.(*pollster).WaitFD(0xf840085180, 0xf840059040, 0x0, 0x0, 0x0, ...)
        /usr/local/Cellar/go/1.0.3/src/pkg/net/fd_darwin.go:96 +0x185
net.(*pollServer).Run(0xf840059040, 0x0)
        /usr/local/Cellar/go/1.0.3/src/pkg/net/fd.go:236 +0xe4
created by net.newPollServer
        /usr/local/Cellar/go/1.0.3/src/pkg/net/newpollserver.go:35 +0x382
</code></pre>

<p>I've looked at the responses others have had to the same exception, but can't see anything simple (i.e. an unhandled error).</p>

<p>I am running it on a machine that does not have access to the API servers listed in the code, but I was hoping it'd return an appropriate error (as I've attempted to catch errors of that kind).</p>

<pre><code>package main

/*
Fido fetches the list of public images from the Glance server, captures the IDs of images with 'status': 'active' and then queues the images for pre-fetching with the Glance CLI utility `glance-cache-manage`. Once the images are added to the queue, `glance-cache-prefetcher` is called to actively fetch the queued images into the local compute nodes' image cache.

See http://docs.openstack.org/developer/glance/cache.html for further details on the Glance image cache.
*/

import (
    ""bytes""
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
    /*
        ""log""
        ""log/syslog""
    */
    ""net/http""
    ""os""
    ""os/exec""
)

func prefetchImages() error {

    cmd := exec.Command(""glance-cache-prefetcher"")
    err := cmd.Run()

    if err != nil {
        return fmt.Errorf(""glance-cache-prefetcher failed to execute properly: %v"", err)
    }

    return nil
}

func queueImages(hostname string, imageList []string) error {

    for _, image := range imageList {
        cmd := exec.Command(""glance-cache-manage"", ""--host="", hostname, ""queue-image"", image)
        err := cmd.Run()

        if err != nil {
            return fmt.Errorf(""glance-cache-manage failed to execute properly: %v"", err)
        } else {
            fmt.Printf(""Image %s queued"", image)
        }
    }

    return nil
}

func getBody(method string, url string, headers map[string]string, body []byte) ([]byte, error) {

    client := &amp;http.Client{}
    req, err := http.NewRequest(method, url, bytes.NewReader(body))

    if err != nil {
        return nil, err
    }

    for key, value := range headers {
        req.Header.Add(key, value)
    }

    res, err := client.Do(req)
    defer res.Body.Close()

    if err != nil {
        return nil, err
    }

    var bodyBytes []byte

    if res.StatusCode == 200 {
        bodyBytes, err = ioutil.ReadAll(res.Body)
    } else if err != nil {
        return nil, err
    } else {
        return nil, fmt.Errorf(""The remote end did not return a HTTP 200 (OK) response."")
    }

    return bodyBytes, nil

}

func getImages(authToken string) ([]string, error) {

    type GlanceDetailResponse struct {
        Images []struct {
            Name   string `json:""name""`
            Status string `json:""status""`
            ID     string `json:""id""`
        }
    }

    method := ""GET""
    url := ""http://192.168.1.2:9292/v1.1/images/detail""
    headers := map[string]string{""X-Auth-Token"": authToken}

    bodyBytes, err := getBody(method, url, headers, nil)

    if err != nil {
        return nil, fmt.Errorf(""unable to retrieve the response body from the Glance API server: %v"", err)
    }

    var glance GlanceDetailResponse
    err = json.Unmarshal(bodyBytes, &amp;glance)

    if err != nil {
        return nil, fmt.Errorf(""unable to parse the JSON response:"", err)
    }

    imageList := make([]string, 10)

    for _, image := range glance.Images {
        if image.Status == ""active"" {
            imageList = append(imageList, image.ID)
        }
    }

    return imageList, nil

}

func getToken() (string, error) {

    type TokenResponse struct {
        Auth []struct {
            Token struct {
                Expires string `json:""expires""`
                ID      string `json:""id""`
            }
        }
    }

    method := ""POST""
    url := ""http://192.168.1.2:5000/v2.0/tokens""
    headers := map[string]string{""Content-type"": ""application/json""}
    creds := []byte(`{""auth"":{""passwordCredentials"":{""username"": ""glance"", ""password"":""&lt;password&gt;""}, ""tenantId"":""&lt;tenantkeygoeshere&gt;""}}`)

    bodyBytes, err := getBody(method, url, headers, creds)

    if err != nil {
        return """", err
    }

    var keystone TokenResponse
    err = json.Unmarshal(bodyBytes, &amp;keystone)

    if err != nil {
        return """", err
    }

    authToken := string((keystone.Auth[0].Token.ID))

    return authToken, nil
}

func main() {

    /*
        slog, err := syslog.New(syslog.LOG_ERR, ""[fido]"")

        if err != nil {
            log.Fatalf(""unable to connect to syslog: %v"", err)
            os.Exit(1)
        } else {
            defer slog.Close()
        }
    */

    hostname, err := os.Hostname()

    if err != nil {
        // slog.Err(""Hostname not captured"")
        os.Exit(1)
    }

    authToken, err := getToken()

    if err != nil {
        // slog.Err(""The authentication token from the Glance API server was not retrieved"")
        os.Exit(1)
    }

    imageList, err := getImages(authToken)

    err = queueImages(hostname, imageList)

    if err != nil {
        // slog.Err(""Could not queue the images for pre-fetching"")
        os.Exit(1)
    }

    err = prefetchImages()

    if err != nil {
        // slog.Err(""Could not queue the images for pre-fetching"")
        os.Exit(1)
    }

    return
}
</code></pre>
","<p>According to the docs for <a href=""http://golang.org/pkg/net/http/#Client.Do""><code>func (*Client) Do</code></a>:</p>

<blockquote>
  <p><em>""An error is returned if caused by client policy (such as CheckRedirect), or if there was an HTTP protocol error. A non-2xx response doesn't cause an error.</em></p>
  
  <p><em>When err is nil, resp always contains a non-nil resp.Body.""</em></p>
</blockquote>

<p>Then looking at this code:</p>

<pre><code>res, err := client.Do(req)
defer res.Body.Close()

if err != nil {
    return nil, err
}
</code></pre>

<p>I'm guessing that <code>err</code> is not <code>nil</code>. You're accessing the <code>.Close()</code> method on <code>res.Body</code> before you check for the <code>err</code>.</p>

<p>The <code>defer</code> only defers the function call. The field and method are accessed immediately.</p>

<hr>

<p>So instead, try checking the error immediately.</p>

<pre><code>res, err := client.Do(req)

if err != nil {
    return nil, err
}
defer res.Body.Close()
</code></pre>
","16280362"
"How to execute system command in Golang with unknown arguments","60336","","<p>I have  a bunch of systems commands which are somwhat similar to appending new content to a file. I wrote a simple script to execute system commands, which works well if there are single words like 'ls' , 'date' etc. But if the command is greater than that, program dies. </p>

<p>The following is the code </p>

<pre><code>package main

import (
    ""fmt""
    ""os/exec""
    ""sync""
)

func exe_cmd(cmd string, wg *sync.WaitGroup) {
    fmt.Println(cmd)
    c = cmd.Str
    out, err := exec.Command(cmd).Output()
    if err != nil {
        fmt.Println(""error occured"")
        fmt.Printf(""%s"", err)
    }
    fmt.Printf(""%s"", out)
    wg.Done()
}

func main() {
    wg := new(sync.WaitGroup)
    wg.Add(3)

    x := []string{""echo newline &gt;&gt; foo.o"", ""echo newline &gt;&gt; f1.o"", ""echo newline &gt;&gt; f2.o""}
    go exe_cmd(x[0], wg)
    go exe_cmd(x[1], wg)
    go exe_cmd(x[2], wg)

    wg.Wait()
}
</code></pre>

<p>The following is the error i see</p>

<pre><code>exec: ""echo newline &gt;&gt; foo.o"": executable file not found in $PATHexec: 
""echo newline &gt;&gt; f2.o"": executable file not found in $PATHexec: 
""echo newline &gt;&gt; f1.o"": executable file not found in $PATH 
</code></pre>

<p>I guess, this may be due to, not sending cmds and arguments seperately ( <a href=""http://golang.org/pkg/os/exec/#Command"" rel=""noreferrer"">http://golang.org/pkg/os/exec/#Command</a> ) .  I am wondering how to subvert this , since I dunno how many arguments will be there in my command which needs to be executed.</p>
","<p>I found a relatively decent way to achieve the same . </p>

<pre><code>out, err := exec.Command(""sh"",""-c"",cmd).Output()
</code></pre>

<p>Works for me until now. Still finding better ways to achieve the same.</p>

<p>Edit1:</p>

<p>Finally a easier and efficient (atleast so far) way to do would be like this</p>

<pre><code>func exe_cmd(cmd string, wg *sync.WaitGroup) {
  fmt.Println(""command is "",cmd)
  // splitting head =&gt; g++ parts =&gt; rest of the command
  parts := strings.Fields(cmd)
  head := parts[0]
  parts = parts[1:len(parts)]

  out, err := exec.Command(head,parts...).Output()
  if err != nil {
    fmt.Printf(""%s"", err)
  }
  fmt.Printf(""%s"", out)
  wg.Done() // Need to signal to waitgroup that this goroutine is done
}
</code></pre>

<p>Thanks to  variadic arguments in go and people that pointed that out to me :)</p>
","20438245"
"Reading an integer from standard input","59770","","<p>How do I use the <code>fmt.Scanf</code> function in Go to get an integer input from the standard input?</p>

<p>If this can't be done using <code>fmt.Scanf</code>, what's the best way to read a single integer?</p>
","<p><a href=""http://golang.org/pkg/fmt/#Scanf"" rel=""noreferrer"">http://golang.org/pkg/fmt/#Scanf</a></p>

<p>All the included libraries in Go are well documented.</p>

<p>That being said, I believe</p>

<pre><code>func main() {
    var i int
    _, err := fmt.Scanf(""%d"", &amp;i)
}
</code></pre>

<p>does the trick</p>
","3751456"
"List directory in Go","57535","","<p>I've been trying to figure out how to simply list the files and folders in a single directory in Go.</p>

<p>I've found <a href=""http://golang.org/pkg/path/filepath/#Walk""><code>filepath.Walk</code></a>, but it goes into sub-directories automatically, which I don't want.  All of my other searches haven't turned anything better up.  </p>

<p>I'm sure that this functionality exists, but it's been really hard to find.  Let me know if anyone knows where I should look.  Thanks.</p>
","<p>You can try using the <a href=""http://golang.org/pkg/io/ioutil/#ReadDir"" rel=""noreferrer"">ReadDir</a> function in the <code>io/ioutil</code> package. Per the docs:</p>

<blockquote>
  <p>ReadDir reads the directory named by dirname and returns a list of sorted directory entries.</p>
</blockquote>

<p>The resulting slice contains <code>os.FileInfo</code> types, which provide the methods listed <a href=""http://golang.org/pkg/os/#FileInfo"" rel=""noreferrer"">here</a>. Here is a basic example that lists the name of everything in the current directory (folders are included but not specially marked - you can check if an item is a folder by using the <code>IsDir()</code> method):</p>

<pre><code>package main

import (
    ""fmt""
    ""io/ioutil""
     ""log""
)

func main() {
    files, err := ioutil.ReadDir(""./"")
    if err != nil {
        log.Fatal(err)
    }

    for _, f := range files {
            fmt.Println(f.Name())
    }
}
</code></pre>
","14668907"
"""unrecognized import path"" with go get","57448","","<p>I'm trying to install a <code>web.go</code>, but running <code>go get github.com/hoisie/web</code> returns</p>

<pre><code>package bufio: unrecognized import path ""bufio""
package bytes: unrecognized import path ""bytes""
package crypto/rand: unrecognized import path ""crypto/rand""
package crypto/sha1: unrecognized import path ""crypto/sha1""
package crypto/tls: unrecognized import path ""crypto/tls""
package encoding/base64: unrecognized import path ""encoding/base64""
package encoding/binary: unrecognized import path ""encoding/binary""
package encoding/json: unrecognized import path ""encoding/json""
package errors: unrecognized import path ""errors""
package fmt: unrecognized import path ""fmt""
</code></pre>

<p>and this continues for a while with various packages, before returning nothing else. <code>go env</code> gives me:</p>

<pre><code>GOARCH=""amd64""
GOBIN=""/usr/local/go/bin""
GOCHAR=""6""
GOEXE=""""
GOHOSTARCH=""amd64""
GOHOSTOS=""linux""
GOOS=""linux""
GOPATH=""""
GORACE=""""
GOROOT=""/home/me/go""
GOTOOLDIR=""/home/me/go/pkg/tool/linux_amd64""
TERM=""dumb""
CC=""gcc""
GOGCCFLAGS=""-g -O2 -fPIC -m64 -pthread""
CXX=""g++""
CGO_ENABLED=""1""
</code></pre>

<p>How can I install <code>web.go</code>? Using <code>go get</code> (rather than <code>go install</code>) is what is in the README on the github page. My Go version is <code>go version go1.2 linux/amd64</code>.</p>
","<p>The issues are relating to an invalid <code>GOROOT</code>.</p>

<p>I think you installed Go in <code>/usr/local/go</code>.<br>
So change your <code>GOROOT</code> path to the value of <code>/usr/local/go/bin</code>.<br></p>

<p>It seems that you meant to have your workspace (GOPATH) located at <code>/home/me/go</code>.</p>

<p>This might fix your problem.<br>
Add this to the bottom of your bash profile, located here => <code>$HOME/.profile</code></p>

<pre><code>export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$PATH:$GOROOT/bin
</code></pre>

<p>Make sure to remove the old references of <code>GOROOT</code>.</p>

<p>Then try installing web.go again.</p>

<p>If that doesn't work, then have ubuntu install Google Go for you.</p>

<p><code>sudo apt-get install golang</code></p>

<p>Video tutorial
<a href=""http://www.youtube.com/watch?v=2PATwIfO5ag"">http://www.youtube.com/watch?v=2PATwIfO5ag</a></p>
","20459819"
"What's the recommended way to connect to MySQL from Go?","56967","","<p>I am looking for a reliable solution to connect to a MySQL database from Go. I've seen some libraries around but it is difficult to determine the different states of completeness and current maintenance. I don't have complicated needs, but I'd like to know what people are relying on, or what's the most standard solution to connect to MySQL.</p>
","<p>A few drivers are available but you should only consider those that implement the <a href=""http://golang.org/pkg/database/sql/"">database/sql</a> API as</p>

<ul>
<li>it provides a clean and efficient syntax,</li>
<li>it ensures you can later change the driver without changing your code, apart the import and connection.</li>
</ul>

<p>Two fast and reliable drivers are available for MySQL :</p>

<ul>
<li><a href=""http://github.com/ziutek/mymysql"">MyMySQL</a></li>
<li><a href=""https://github.com/Go-SQL-Driver/MySQL/"">Go-MySQL-Driver</a></li>
</ul>

<p>I've used both of them in production, programs are running for months with connection numbers in the millions without failure.</p>

<p>Other SQL database drivers <a href=""http://code.google.com/p/go-wiki/wiki/SQLDrivers"">are listed on go-wiki</a>.</p>

<p><strong>Import when using MyMySQL :</strong></p>

<pre><code>import (
    ""database/sql""
    _ ""github.com/ziutek/mymysql/godrv""
)
</code></pre>

<p><strong>Import when using Go-MySQL-Driver :</strong></p>

<pre><code>import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)
</code></pre>

<p><strong>Connecting and closing using MyMySQL :</strong></p>

<pre><code>con, err := sql.Open(""mymysql"", database+""/""+user+""/""+password)
defer con.Close()
// here you can use the connection, it will be closed when function returns
</code></pre>

<p><strong>Connecting and closing using Go-MySQL-Driver :</strong></p>

<pre><code>con, err := sql.Open(""mysql"", store.user+"":""+store.password+""@/""+store.database)
defer con.Close()
</code></pre>

<p><strong>Select one row :</strong></p>

<pre><code>row := con.QueryRow(""select mdpr, x, y, z from sometable where id=?"", id)
cb := new(SomeThing)
err := row.Scan(&amp;cb.Mdpr, &amp;cb.X, &amp;cb.Y, &amp;cb.Z)
</code></pre>

<p><strong>Select multiple rows and build an array with results :</strong></p>

<pre><code>rows, err := con.Query(""select a, b from item where p1=? and p2=?"", p1, p2)
if err != nil { /* error handling */}
items := make([]*SomeStruct, 0, 10)
var ida, idb uint
for rows.Next() {
    err = rows.Scan(&amp;ida, &amp;idb)
    if err != nil { /* error handling */}
    items = append(items, &amp;SomeStruct{ida, idb})
}
</code></pre>

<p><strong>Insert :</strong> </p>

<pre><code>_, err = con.Exec(""insert into tbl (id, mdpr, isok) values (?, ?, 1)"", id, mdpr)
</code></pre>

<p>You'll see that working in Go with MySQL is a delightful experience : I <strong>never</strong> had a problem, my servers run for months without errors or leaks. The fact that most functions simply take a variable number of arguments lighten a task which is tedious in many languages.</p>

<p>Note that if, in the future, you need to use another MySQL driver, you'll just have to change two lines in one go file : the line doing the import and the line opening the connection. </p>
","11357116"
"File System Scanning in Golang","56686","","<ol>
<li>I need to write a function which when given the path of a folder 
scans the files rooted at that folder. </li>
<li>And then I need to display the directory structure at that folder. </li>
</ol>

<p>I know how to do 2 (I am going to use jstree to display it in the browser). </p>

<p>Please help me with part 1, like what/where to start to write such a 
function in go.</p>
","<p><strong>EDIT</strong>: Enough people still hit this answer, that I thought I'd update it for the Go1 API.  This is a working example of <a href=""http://golang.org/src/pkg/path/filepath/path.go?s=9626:9671#L325"" rel=""noreferrer"">filepath.Walk()</a>.  The original is below.</p>

<pre><code>package main

import (
  ""path/filepath""
  ""os""
  ""flag""
  ""fmt""
)

func visit(path string, f os.FileInfo, err error) error {
  fmt.Printf(""Visited: %s\n"", path)
  return nil
} 


func main() {
  flag.Parse()
  root := flag.Arg(0)
  err := filepath.Walk(root, visit)
  fmt.Printf(""filepath.Walk() returned %v\n"", err)
}
</code></pre>

<p>Please note that filepath.Walk walks the directory tree recursively.</p>

<p>This is an example run:</p>

<pre><code>$ mkdir -p dir1/dir2
$ touch dir1/file1 dir1/dir2/file2
$ go run walk.go dir1
Visited: dir1
Visited: dir1/dir2
Visited: dir1/dir2/file2
Visited: dir1/file1
filepath.Walk() returned &lt;nil&gt;
</code></pre>

<p><strong>ORIGINAL ANSWER FOLLOWS:</strong> The interface for walking file paths has changed as of weekly.2011-09-16, see <a href=""http://groups.google.com/group/golang-nuts/msg/e304dd9cf196a218"" rel=""noreferrer"">http://groups.google.com/group/golang-nuts/msg/e304dd9cf196a218</a>.  The code below will not work for release versions of GO in the near future.</p>

<p>There's actually a function in the standard lib just for this: <a href=""http://golang.org/pkg/path/filepath/#Walk"" rel=""noreferrer"">filepath.Walk</a>.</p>

<pre><code>package main

import (
    ""path/filepath""
    ""os""
    ""flag""
)

type visitor int

// THIS CODE NO LONGER WORKS, PLEASE SEE ABOVE
func (v visitor) VisitDir(path string, f *os.FileInfo) bool {
    println(path)
    return true
} 

func (v visitor) VisitFile(path string, f *os.FileInfo) {
    println(path)
}

func main() {
    root := flag.Arg(0)
    filepath.Walk(root, visitor(0), nil)
}
</code></pre>
","6612243"
"Removing fields from struct or hiding them in JSON Response","56244","","<p>I've created an API in Go that, upon being called, performs a query, creates an instance of a struct, and then encodes that struct as JSON before sending back to the caller.  I'd now like to allow the caller to be able to select the specific fields they would like returned by passing in a ""fields"" GET parameter.</p>

<p>This means depending on the fields value(s), my struct would change.  Is there any way to remove fields from a struct?  Or at least hide them in the JSON response dynamically?  (Note: Sometimes I have empty values so the JSON omitEmpty tag will not work here)  If neither of these are possible, is there a suggestion on a better way to handle this?  Thanks in advance.</p>

<p>A smaller version of the structs I'm using are below:</p>

<pre><code>type SearchResult struct {
    Date        string      `json:""date""`
    IdCompany   int         `json:""idCompany""`
    Company     string      `json:""company""`
    IdIndustry  interface{} `json:""idIndustry""`
    Industry    string      `json:""industry""`
    IdContinent interface{} `json:""idContinent""`
    Continent   string      `json:""continent""`
    IdCountry   interface{} `json:""idCountry""`
    Country     string      `json:""country""`
    IdState     interface{} `json:""idState""`
    State       string      `json:""state""`
    IdCity      interface{} `json:""idCity""`
    City        string      `json:""city""`
} //SearchResult

type SearchResults struct {
    NumberResults int            `json:""numberResults""`
    Results       []SearchResult `json:""results""`
} //type SearchResults
</code></pre>

<p>I then encode and output the response like so:</p>

<pre><code>err := json.NewEncoder(c.ResponseWriter).Encode(&amp;msg)
</code></pre>
","<p>EDIT: I noticed a few downvotes and took another look at this Q&amp;A. Most people seem to miss that the OP asked for fields to be <strong>dynamically</strong> selected based on the caller-provided list of fields. You can't do this with the statically-defined json struct tag.</p>

<p>If what you want is to <strong>always</strong> skip a field to json-encode, then of course use <code>json:""-""</code> to ignore the field (also note that this is <strong>not</strong> required if your field is unexported - those fields are always ignored by the json encoder). But that is not the OP's question.</p>

<p>To quote the comment on the <code>json:""-""</code> answer:</p>

<blockquote>
  <p>This [the <code>json:""-""</code> answer] is the answer most people ending up here from searching would want, but it's not the answer to the question.</p>
</blockquote>

<hr>

<p>I'd use a map[string]interface{} instead of a struct in this case. You can easily remove fields by calling the <code>delete</code> built-in on the map for the fields to remove.</p>

<p>That is, if you can't query only for the requested fields in the first place.</p>
","17306470"
"How to multiply duration by integer?","55885","","<p>To test concurrent goroutines, I added a line to a function to make it take a random time to return (up to one second)</p>

<pre><code>time.Sleep(rand.Int31n(1000) * time.Millisecond)
</code></pre>

<p>However when I compiled, I got this error</p>

<blockquote>
  <p>.\crawler.go:49: invalid operation: rand.Int31n(1000) * time.Millisecond (mismatched types int32 and time.Duration)</p>
</blockquote>

<p>Any ideas? How can I multiply a duration?</p>
","<p><code>int32</code> and <code>time.Duration</code> are different types. You need to convert the <code>int32</code> to a <code>time.Duration</code>, such as <code>time.Sleep(time.Duration(rand.Int31n(1000)) * time.Millisecond)</code>.</p>
","17573390"
"What is the zero for string?","55873","","<pre><code>func NewKey(c appengine.Context, kind, stringID string, intID int64, parent *Key) *Key
</code></pre>

<p>The documentation says :</p>

<blockquote>
  <p>NewKey creates a new key. kind cannot be empty. Either one or both of
  stringID and intID must be <strong>zero</strong>. If both are zero, the key
  returned is incomplete. parent must either be a complete key or nil.</p>
</blockquote>

<p>What is the zero for string?</p>

<p>I tried <code>0</code> and <code>nil</code>, and I got errors like:</p>

<pre><code>cannot use nil as type string in function argument
</code></pre>
","<p>That's <code>""""</code> :</p>

<pre><code>var s string
fmt.Println(s=="""") // prints ""true""
</code></pre>

<p>A string cannot be nil (but a <code>*string</code> can). </p>

<p>You can simply test</p>

<pre><code>if stringId=="""" {
</code></pre>

<p>To pass a zero string in <code>stringID</code>, use</p>

<pre><code>k := NewKey(c, ""kind"", """", 0, p)
</code></pre>

<p>From <a href=""http://golang.org/ref/spec#The_zero_value"">the specification</a> :</p>

<blockquote>
  <p>When memory is allocated to store a value, either through a
  declaration or a call of make or new, and no explicit initialization
  is provided, the memory is given a default initialization. Each
  element of such a value is set to the zero value for its type: false
  for booleans, 0 for integers, 0.0 for floats, <strong>"""" for strings</strong>, and nil
  for pointers, functions, interfaces, slices, channels, and maps.</p>
</blockquote>
","12703280"
"How to change int into int64?","55794","","<p>Im trying to convert an integer into an integer64 in go but im having no luck. Anyone know an easy way to do this?</p>
","<p>This is called <a href=""http://golang.org/doc/effective_go.html#conversions"" rel=""noreferrer"">type conversion</a> :</p>

<pre><code>i := 23
var i64 int64
i64 = int64(i)
</code></pre>
","13137429"
"How to compile Go program consisting of multiple files?","55460","","<p>So I have a small program that consists of three files, all belonging to the same package (main), but when I do ""go build main.go"" the build doesn't succeed. When it was just one file (main.go) everything worked fine. Now that I took some effort to separate the code, it looks like the compiler is unable to find the stuff that was taken out of main.go and put into these two other files (that reside at the same directory as the main.go). Which results in ""undefined 'type'"" errors.</p>

<p>I read something about setting the GOPATH variable, so I tried</p>

<pre><code>set GOPATH=%cd%
go build main.go
</code></pre>

<p>but that too didn't work.</p>

<p>Any help is appreciated.</p>
","<p>Supposing you're writing a program called myprog :</p>

<p>Put all your files in a directory like this</p>

<pre><code>myproject/go/src/myprog/xxx.go
</code></pre>

<p>Then add <code>myproject/go</code> to GOPATH</p>

<p>And run </p>

<pre><code>go install myprog
</code></pre>

<p>This way you'll be able to add other packages and programs in myproject/go/src if you want.</p>

<p>Reference : <a href=""http://golang.org/doc/code.html"">http://golang.org/doc/code.html</a></p>

<p>(this doc is always missed by newcomers, and often ill-understood at first. It should receive the greatest attention of the Go team IMO)</p>
","10838569"
"Can Functions be passed as parameters in Go?","55359","","<p>In Java I can do something like <code>derp(new Runnable { public void run () { /* run this sometime later */ } })</code> and ""run"" the code in the method later. It's a pain to handle (anonymous inner class), but it can be done.</p>

<p>Does Go have something that can facilitate a function/callback being passed in as a parameter?</p>
","<p>Yes, consider some of these examples:</p>

<pre><code>package main

import ""fmt""

// convert types take an int and return a string value.
type convert func(int) string

// value implements convert, returning x as string.
func value(x int) string {
    return fmt.Sprintf(""%v"", x)
}

// quote123 passes 123 to convert func and returns quoted string.
func quote123(fn convert) string {
    return fmt.Sprintf(""%q"", fn(123))
}

func main() {
    var result string

    result = value(123)
    fmt.Println(result)
    // Output: 123

    result = quote123(value)
    fmt.Println(result)
    // Output: ""123""

    result = quote123(func(x int) string { return fmt.Sprintf(""%b"", x) })
    fmt.Println(result)
    // Output: ""1111011""

    foo := func(x int) string { return ""foo"" }
    result = quote123(foo)
    fmt.Println(result)
    // Output: ""foo""

    _ = convert(foo) // confirm foo satisfies convert at runtime

    // fails due to argument type
    // _ = convert(func(x float64) string { return """" })
}
</code></pre>

<p>Play: <a href=""http://play.golang.org/p/XNMtrDUDS0"">http://play.golang.org/p/XNMtrDUDS0</a></p>

<p>Tour: <a href=""https://tour.golang.org/moretypes/25"">https://tour.golang.org/moretypes/25</a> (Function Closures)</p>
","12655719"
"How to declare constant map in golang","55143","","<p>I am new to the golang. I am trying to declare to constant in go. But it is throwing an error. Could anyone please help me with the syntax of declaring a constant in go?</p>

<p>This is my code: </p>

<pre><code>const romanNumeralDict map[int]string = {
  1000: ""M"",
  900 : ""CM"",
  500 : ""D"",
  400 : ""CD"",
  100 : ""C"",
  90  : ""XC"",
  50  : ""L"",
  40  : ""XL"",
  10  : ""X"",
  9   : ""IX"",
  5   : ""V"",
  4   : ""IV"",
  1   : ""I"",
}
</code></pre>

<p>This is the error</p>

<pre><code># command-line-arguments
./Roman_Numerals.go:9: syntax error: unexpected {
</code></pre>
","<p>Your syntax is incorrect.  To make a literal map (as a pseudo-constant), you can do:</p>

<pre><code>var romanNumeralDict = map[int]string{
  1000: ""M"",
  900 : ""CM"",
  500 : ""D"",
  400 : ""CD"",
  100 : ""C"",
  90  : ""XC"",
  50  : ""L"",
  40  : ""XL"",
  10  : ""X"",
  9   : ""IX"",
  5   : ""V"",
  4   : ""IV"",
  1   : ""I"",
}
</code></pre>

<p>Inside a <code>func</code> you can declare it like:</p>

<pre><code>romanNumeralDict := map[int]string{
...
</code></pre>

<p>And in Go there is no such thing as a constant map.  More information can be found <a href=""https://groups.google.com/forum/#!topic/golang-nuts/xUaDMciyB5Q"" rel=""noreferrer""><strong>here</strong></a>.</p>

<p><a href=""https://play.golang.org/p/eClhmtHhK2"" rel=""noreferrer"">Try it out on the Go playground.</a></p>
","18342312"
"Convert a float64 to an int in Go","54982","","<p>How does one convert a float64 to an int in Go? I know the <code>strconv</code> package can be used to convert anything to or from a string, but not between data types where one isn't a string. I know I can use <code>fmt.Sprintf</code> to convert anything to a string, and then <code>strconv</code> it to the data type I need, but this extra conversion seems a bit clumsy - is there a better way to do this?</p>
","<pre><code>package main
import ""fmt""
func main() {
  var x float64 = 5.7
  var y int = int(x)
  fmt.Println(y)  // outputs ""5""
}
</code></pre>
","8022789"
"Is there a method to generate a UUID with go language","54651","","<p>I have code that looks like this:</p>

<pre><code>u := make([]byte, 16)
_, err := rand.Read(u)
if err != nil {
    return
}

u[8] = (u[8] | 0x80) &amp; 0xBF // what does this do?
u[6] = (u[6] | 0x40) &amp; 0x4F // what does this do?

return hex.EncodeToString(u)
</code></pre>

<p>It returns a string with a length of 32, but I don't think it is a valid UUID. If it is a real UUID, why is it a UUID, and what is the purpose of the code that modifies the value of <code>u[8]</code> and <code>u[6]</code>.</p>

<p>Is there a better way of generating UUIDs?</p>
","<pre><code>u[8] = (u[8] | 0x80) &amp; 0xBF // what's the purpose ?
u[6] = (u[6] | 0x40) &amp; 0x4F // what's the purpose ?
</code></pre>

<p>These lines clamp the values of byte 6 and 8 to a specific range. <code>rand.Read</code> returns random bytes in the range <code>0-255</code>, which are not all valid values for a UUID. As far as I can tell, this should be done for all the values in the slice though.</p>

<p>If you are on linux, you can alternatively call <code>/usr/bin/uuidgen</code>.</p>

<pre><code>package main

import (
    ""fmt""
    ""log""
    ""os/exec""
)

func main() {
    out, err := exec.Command(""uuidgen"").Output()
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf(""%s"", out)
}
</code></pre>

<p>Which yields:</p>

<pre><code>$ go run uuid.go 
dc9076e9-2fda-4019-bd2c-900a8284b9c4
</code></pre>
","15130941"
"How to initialize members in Go struct","54623","","<p>I am new to Golang so allocation in it makes me insane:</p>

<pre><code>import ""sync""

type SyncMap struct {
        lock *sync.RWMutex
        hm map[string]string
}
func (m *SyncMap) Put (k, v string) {
        m.lock.Lock()
        defer m.lock.Unlock()

        m.hm[k] = v, true
}
</code></pre>

<p>and later, I just call:</p>

<pre><code>sm := new(SyncMap)
sm.Put(""Test, ""Test"")
</code></pre>

<p>At this moment I get a nil pointer panic. </p>

<p>I've worked around it by using another one function, and calling it right after <code>new()</code>:</p>

<pre><code>func (m *SyncMap) Init() {
        m.hm = make(map[string]string)
        m.lock = new(sync.RWMutex)
}
</code></pre>

<p>But I wonder, if it's possible to get rid of this boilerplate initializing?</p>
","<p>You just need a constructor. A common used pattern is</p>

<pre><code>func NewSyncMap() *SyncMap {
    return &amp;SyncMap{hm: make(map[string]string)}
}
</code></pre>

<p>In case of more fields inside your struct, starting a goroutine as backend, or registering a finalizer everything could be done in this constructor.</p>

<pre><code>func NewSyncMap() *SyncMap {
    sm := SyncMap{
        hm: make(map[string]string),
        foo: ""Bar"",
    }

    runtime.SetFinalizer(sm, (*SyncMap).stop)

    go sm.backend()

    return &amp;sm
}
</code></pre>
","4499375"
"Go template examples","54526","","<p>What website has some good, up to date resources on using Go html/templates, especially in regard to parsing html files and handling lists? I came across the <a href=""http://go.hokapoka.com/templates/"" rel=""nofollow noreferrer"">Hoka Poka website</a>, but it seems to be out of date.</p>
","<p><a href=""http://jan.newmarch.name/go/"">http://jan.newmarch.name/go/</a> and <a href=""http://golangtutorials.blogspot.com/2011/06/go-templates.html"">http://golangtutorials.blogspot.com/2011/06/go-templates.html</a></p>
","8525070"
"Cross compile Go on OSX?","54308","","<p>I am trying to cross-compile a go app on OSX to build binaries for windows and linux. I have read everything what I could find on the net. Closest example that I have found has been published on (apart from many unfinished discussions on go-nuts mailing list):</p>

<p><a href=""http://solovyov.net/en/2012/03/09/cross-compiling-go/"">http://solovyov.net/en/2012/03/09/cross-compiling-go/</a></p>

<p>yet it does not work on my installation. I have go 1.0.2. As 1.0.2 is quite recent it looks to me that all above examples do not apply to this version.</p>

<p>Tried to do <code>./make.bash --no-clean</code> with ENV vars set to 386/windows, it does build go, however it builds go for my installation which is <code>darwin/amd64</code> and completely ignores what is set in ENV that suppose to build different compiler.</p>

<p>Any advises how it can be done (if it can be done at all)?</p>
","<p>With Go 1.5 they seem to have improved the cross compilation process, meaning it is built in now. No <code>./make.bash</code>-ing or <code>brew</code>-ing  required. The process is described <a href=""http://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5"">here</a> but for the TLDR-ers (like me) out there: you just set the <code>GOOS</code> and the <code>GOARCH</code> environment variables and run the go build.</p>

<p>For the even lazier copy-pasters (like me) out there, do something like this if you're on a *nix system:</p>

<pre><code>env GOOS=linux GOARCH=arm go build -v github.com/path/to/your/app
</code></pre>

<p>You even learned the <code>env</code> trick, which let you set environment variables for that command only, completely free of charge.</p>
","35878611"
"Make a URL-encoded POST request using `http.NewRequest(...)`","54299","","<p>I want to make a POST request to an API sending my data as a <code>application/x-www-form-urlencoded</code> content type. Due to the fact that I need to manage the request headers, I'm using the <a href=""http://golang.org/pkg/net/http/#NewRequest""><code>http.NewRequest(method, urlStr string, body io.Reader)</code></a> method to create a request. For this POST request I append my data query to the URL and leave the body empty, something like this:</p>

<pre><code>package main

import (
    ""bytes""
    ""fmt""
    ""net/http""
    ""net/url""
    ""strconv""
)

func main() {
    apiUrl := ""https://api.com""
    resource := ""/user/""
    data := url.Values{}
    data.Set(""name"", ""foo"")
    data.Add(""surname"", ""bar"")

    u, _ := url.ParseRequestURI(apiUrl)
    u.Path = resource
    u.RawQuery = data.Encode()
    urlStr := fmt.Sprintf(""%v"", u) // ""https://api.com/user/?name=foo&amp;surname=bar""

    client := &amp;http.Client{}
    r, _ := http.NewRequest(""POST"", urlStr, nil)
    r.Header.Add(""Authorization"", ""auth_token=\""XXXXXXX\"""")
    r.Header.Add(""Content-Type"", ""application/x-www-form-urlencoded"")
    r.Header.Add(""Content-Length"", strconv.Itoa(len(data.Encode())))

    resp, _ := client.Do(r)
    fmt.Println(resp.Status)
}
</code></pre>

<p>As I response, I get always a <code>400 BAD REQUEST</code>. I believe the problem relies on my request and the API does not understand which payload I am posting. I'm aware of methods like <a href=""http://golang.org/pkg/net/http/#Request.ParseForm""><code>Request.ParseForm</code></a>, not really sure how to use it in this context though. Maybe am I missing some further Header, maybe is there a better way to send payload as a <code>application/json</code> type using the <code>body</code> parameter?</p>
","<p>URL-encoded payload must be provided on the <code>body</code> parameter of the <code>http.NewRequest(method, urlStr string, body io.Reader)</code> method, as a type that implements <code>io.Reader</code> interface.</p>

<p>Based on the sample code:</p>

<pre><code>package main

import (
    ""fmt""
    ""net/http""
    ""net/url""
    ""strconv""
    ""strings""
)

func main() {
    apiUrl := ""https://api.com""
    resource := ""/user/""
    data := url.Values{}
    data.Set(""name"", ""foo"")
    data.Add(""surname"", ""bar"")

    u, _ := url.ParseRequestURI(apiUrl)
    u.Path = resource
    urlStr := u.String() // ""https://api.com/user/""

    client := &amp;http.Client{}
    r, _ := http.NewRequest(""POST"", urlStr, strings.NewReader(data.Encode()) // &lt;-- URL-encoded payload
    r.Header.Add(""Authorization"", ""auth_token=\""XXXXXXX\"""")
    r.Header.Add(""Content-Type"", ""application/x-www-form-urlencoded"")
    r.Header.Add(""Content-Length"", strconv.Itoa(len(data.Encode())))

    resp, _ := client.Do(r)
    fmt.Println(resp.Status)
}
</code></pre>

<p><code>resp.Status</code> is <code>200 OK</code> this way.</p>
","19253970"
"How to trim leading and trailing white spaces of a string in golang?","54234","","<p>Which is the effective way to trim the leading and trailing white spaces of string variable in golang</p>
","<p>For example,</p>

<pre><code>package main

import (
    ""fmt""
    ""strings""
)

func main() {
    s := ""\t Hello, World\n ""
    fmt.Printf(""%d %q\n"", len(s), s)
    t := strings.TrimSpace(s)
    fmt.Printf(""%d %q\n"", len(t), t)
}
</code></pre>

<p>Output:</p>

<pre><code>16 ""\t Hello, World\n ""
12 ""Hello, World""
</code></pre>
","22688229"
"How can I read a whole file into a string variable in Golang?","53639","","<p>I have lots of small files, I don't want to read them line by line.</p>

<p>Is there a function in Golang to let me read a whole file into a string variable?</p>
","<p>Use <a href=""http://golang.org/pkg/io/ioutil/#ReadFile"">ioutil.ReadFile</a>:</p>

<pre><code>func ReadFile(filename string) ([]byte, error)
</code></pre>

<blockquote>
  <p>ReadFile reads the file named by filename and returns the contents. A successful call
  returns err == nil, not err == EOF. Because ReadFile reads the whole file, it does not treat
  an EOF from Read as an error to be reported.</p>
</blockquote>

<p>You will get a <code>[]byte</code> instead of a <code>string</code>. It can be converted if <em>really</em> necessary:</p>

<pre><code>s := string(buf)
</code></pre>
","13514395"
"Extracting substrings in Go","53197","","<p>I'm trying to read an entire line from the console (including whitespace), then process it. Using bufio.ReadString, the newline character is read together with the input, so I came up with the following code to trim the newline character:</p>

<pre><code>input,_:=src.ReadString('\n')
inputFmt:=input[0:len(input)-2]+"""" //Need to manually add end of string
</code></pre>

<p>Is there a more idiomatic way to do this? That is, is there already a library that takes care of the ending null byte when extracting substrings for you?</p>

<p>(Yes, I know there is already a way to read a line without the newline character in <a href=""https://stackoverflow.com/questions/6141604/go-readline-string"">go readline -&gt; string</a> but I'm looking more for elegant string manipulation.)</p>
","<p>It looks like you're confused by the working of slices and the string storage format, which is different from what you have in C.</p>

<ul>
<li>any slice in Go stores the length (in bytes), so you don't have to care about the cost of the <code>len</code> operation : there is no need to count</li>
<li>Go strings aren't null terminated, so you don't have to remove a null byte, and you don't have to add <code>1</code> after slicing by adding an empty string.</li>
</ul>

<p>To remove the last char (if it's a one byte char), simply do</p>

<pre><code>inputFmt:=input[0:len(input)-1]
</code></pre>

<p>And as noticed by Uriel, you can shorten that as</p>

<pre><code>inputFmt:=input[:len(input)-1]
</code></pre>
","12313812"
"How to use C++ in Go?","52981","","<p>In the new <a href=""http://golang.org/"" rel=""noreferrer"">Go</a> language, how do I call C++ code? In other words, how can I wrap my C++ classes and use them in Go?</p>
","<p><strong>Update:</strong> I've succeeded in linking a small test C++ class with Go</p>

<p>If you wrap you C++ code with a C interface you should be able to call your library with cgo (see the example of gmp in $GOROOT/misc/cgo/gmp). </p>

<p>I'm not sure if the idea of a class in C++ is really expressible in Go, as it doesn't have inheritance.</p>

<p>Here's an example:</p>

<p>I have a C++ class defined as:</p>

<pre><code>// foo.hpp
class cxxFoo {
public:
  int a;
  cxxFoo(int _a):a(_a){};
  ~cxxFoo(){};
  void Bar();
};

// foo.cpp
#include &lt;iostream&gt;
#include ""foo.hpp""
void
cxxFoo::Bar(void){
  std::cout&lt;&lt;this-&gt;a&lt;&lt;std::endl;
}
</code></pre>

<p>which I want to use in Go. I'll use the C interface</p>

<pre><code>// foo.h
#ifdef __cplusplus
extern ""C"" {
#endif
  typedef void* Foo;
  Foo FooInit(void);
  void FooFree(Foo);
  void FooBar(Foo);
#ifdef __cplusplus
}
#endif
</code></pre>

<p>(I use a <code>void*</code> instead of a C struct so the compiler knows the size of Foo)</p>

<p>The implementation is:</p>

<pre><code>//cfoo.cpp
#include ""foo.hpp""
#include ""foo.h""
Foo FooInit()
{
  cxxFoo * ret = new cxxFoo(1);
  return (void*)ret;
}
void FooFree(Foo f)
{
  cxxFoo * foo = (cxxFoo*)f;
  delete foo;
}
void FooBar(Foo f)
{
  cxxFoo * foo = (cxxFoo*)f;
  foo-&gt;Bar();
}
</code></pre>

<p>with all that done, the Go file is:</p>

<pre><code>// foo.go
package foo
// #include ""foo.h""
import ""C""
import ""unsafe""
type GoFoo struct {
     foo C.Foo;
}
func New()(GoFoo){
     var ret GoFoo;
     ret.foo = C.FooInit();
     return ret;
}
func (f GoFoo)Free(){
     C.FooFree(unsafe.Pointer(f.foo));
}
func (f GoFoo)Bar(){
     C.FooBar(unsafe.Pointer(f.foo));
}
</code></pre>

<p>The makefile I used to compile this was:</p>

<pre><code>// makefile
TARG=foo
CGOFILES=foo.go
include $(GOROOT)/src/Make.$(GOARCH)
include $(GOROOT)/src/Make.pkg
foo.o:foo.cpp
    g++ $(_CGO_CFLAGS_$(GOARCH)) -fPIC -O2 -o $@ -c $(CGO_CFLAGS) $&lt;
cfoo.o:cfoo.cpp
    g++ $(_CGO_CFLAGS_$(GOARCH)) -fPIC -O2 -o $@ -c $(CGO_CFLAGS) $&lt;
CGO_LDFLAGS+=-lstdc++
$(elem)_foo.so: foo.cgo4.o foo.o cfoo.o
    gcc $(_CGO_CFLAGS_$(GOARCH)) $(_CGO_LDFLAGS_$(GOOS)) -o $@ $^ $(CGO_LDFLAGS)
</code></pre>

<p>Try testing it with:</p>

<pre><code>// foo_test.go
package foo
import ""testing""
func TestFoo(t *testing.T){
    foo := New();
    foo.Bar();
    foo.Free();
}
</code></pre>

<p>You'll need to install the shared library with make install, then run make test. Expected output is:</p>

<pre><code>gotest
rm -f _test/foo.a _gotest_.6
6g -o _gotest_.6 foo.cgo1.go foo.cgo2.go foo_test.go
rm -f _test/foo.a
gopack grc _test/foo.a _gotest_.6  foo.cgo3.6
1
PASS
</code></pre>
","1721230"
"Declare a constant array","52855","","<p>I have tried:</p>

<pre><code>const ascii = ""abcdefghijklmnopqrstuvwxyz""
const letter_goodness []float32  = { .0817,.0149,.0278,.0425,.1270,.0223,.0202, .0609,.0697,.0015,.0077,.0402,.0241,.0675, .0751,.0193,.0009,.0599,.0633,.0906,.0276, .0098,.0236,.0015,.0197,.0007 }
const letter_goodness  = { .0817,.0149,.0278,.0425,.1270,.0223,.0202, .0609,.0697,.0015,.0077,.0402,.0241,.0675, .0751,.0193,.0009,.0599,.0633,.0906,.0276, .0098,.0236,.0015,.0197,.0007 }
const letter_goodness = []float32 { .0817,.0149,.0278,.0425,.1270,.0223,.0202, .0609,.0697,.0015,.0077,.0402,.0241,.0675, .0751,.0193,.0009,.0599,.0633,.0906,.0276, .0098,.0236,.0015,.0197,.0007 }
</code></pre>

<p>First, declaration and initialization works fine, but the second, third and fourth don't work. How can I declare and initialize const array of floats?</p>
","<p>An array isn't immutable by nature; you can't make it constant.</p>

<p>The nearest you can get is:</p>

<pre><code>var letter_goodness = [...]float32 {.0817, .0149, .0278, .0425, .1270, .0223, .0202, .0609, .0697, .0015, .0077, .0402, .0241, .0675, .0751, .0193, .0009, .0599, .0633, .0906, .0276, .0098, .0236, .0015, .0197, .0007 }
</code></pre>
","13137568"
"How to determine an interface{} value's ""real"" type?","52822","","<p>I have not found a good resource for using <code>interface{}</code> types. For example</p>

<pre><code>package main

import ""fmt""

func weirdFunc(i int) interface{} {
    if i == 0 {
        return ""zero""
    }
    return i
}
func main() {
    var i = 5
    var w = weirdFunc(5)

    // this example works!
    if tmp, ok := w.(int); ok {
        i += tmp
    }

    fmt.Println(""i ="", i)
}
</code></pre>

<p>Do you know of a good introduction to using Go's <code>interface{}</code>?</p>

<p>specific questions:</p>

<ul>
<li>how do I get the ""real"" Type of w?</li>
<li>is there any way to get the string representation of a type?</li>
<li>is there any way to use the string representation of a type to
convert a value?</li>
</ul>
","<p>Your example does work. Here's a simplified version.</p>

<pre><code>package main

import ""fmt""

func weird(i int) interface{} {
    if i &lt; 0 {
        return ""negative""
    }
    return i
}

func main() {
    var i = 42
    if w, ok := weird(7).(int); ok {
        i += w
    }
    if w, ok := weird(-100).(int); ok {
        i += w
    }
    fmt.Println(""i ="", i)
}

Output:
i = 49
</code></pre>

<p>It uses <a href=""http://golang.org/doc/go_spec.html#Type_assertions"" rel=""noreferrer"">Type assertions</a>.</p>
","6373426"
"how to stop a goroutine","52679","","<p>I have a goroutine that calls a method, and passes returned value on a channel:</p>

<pre><code>ch := make(chan int, 100)
go func(){
    for {
        ch &lt;- do_stuff()
    }
}()
</code></pre>

<p>How do I stop such a goroutine?</p>
","<p><strong>EDIT:</strong> <em>I wrote this answer up in haste, before realizing that your question is about sending values to a chan inside a goroutine.  The approach below can be used either with an additional chan as suggested above, or using the fact that the chan you have already is bi-directional, you can use just the one...</em></p>

<p>If your goroutine exists solely to process the items coming out of the chan, you can make use of the ""close"" builtin and the special recieve form for channels.</p>

<p>That is, once you're done sending items on the chan, you close it.  Then inside your goroutine you get an extra parameter to the receive operator that shows whether the channel has been closed.</p>

<p>Here is a complete example (the waitgroup is used to make sure that the process continues until the goroutine completes):</p>

<pre><code>package main

import ""sync""
func main() {
    var wg sync.WaitGroup
    wg.Add(1)

    ch := make(chan int)
    go func() {
        for {
            foo, ok := &lt;- ch
            if !ok {
                println(""done"")
                wg.Done()
                return
            }
            println(foo)
        }
    }()
    ch &lt;- 1
    ch &lt;- 2
    ch &lt;- 3
    close(ch)

    wg.Wait()
}
</code></pre>
","8098837"
"Initialize a nested struct in Golang","52661","","<p>I cannot figure out how to initialize a nested struct. Find an example here:
<a href=""http://play.golang.org/p/NL6VXdHrjh"">http://play.golang.org/p/NL6VXdHrjh</a></p>

<pre><code>package main

type Configuration struct {
    Val   string
    Proxy struct {
        Address string
        Port    string
    }
}

func main() {

    c := &amp;Configuration{
        Val: ""test"",
        Proxy: {
            Address: ""addr"",
            Port:    ""80"",
        },
    }

}
</code></pre>
","<p>Well, any specific reason to not make Proxy its own struct?</p>

<p>Anyway you have 2 options:</p>

<p>The proper way, simply move proxy to its own struct, for example:</p>

<pre><code>type Configuration struct {
    Val string
    Proxy
}

type Proxy struct {
    Address string
    Port    string
}

func main() {

    c := &amp;Configuration{
        Val: ""test"",
        Proxy: Proxy{
            Address: ""addr"",
            Port:    ""port"",
        },
    }
    fmt.Println(c)
}
</code></pre>

<p>The less proper and ugly way but still works:</p>

<pre><code>c := &amp;Configuration{
    Val: ""test"",
    Proxy: struct {
        Address string
        Port    string
    }{
        Address: ""addr"",
        Port:    ""80"",
    },
}
</code></pre>
","24809404"
"Null value in Go","52150","","<p>How do you express a ""null"" value in Go?</p>

<pre><code>type Node struct { 
    next *Node
    data interface{}
}
</code></pre>

<p>And I want to say</p>

<pre><code>return &amp;Node{ data: NULL, next: NULL }
</code></pre>
","<p>The equivalent of <code>NULL</code> is <code>nil</code>, as you already discovered. Note, though, that you don't generally need to initialize things to <code>nil</code> or zero in Go, because by default all variables (including dynamically allocated ones) are set to “zero values” according to type (numbers zero, references <code>nil</code>). So in your example saying <code>new(Node)</code> would result in a Node with both fields <code>nil</code>.</p>
","4223332"
"What are the use(s) for tags in Go?","52122","","<p>In the <a href=""https://golang.org/ref/spec#Struct_types"" rel=""noreferrer"">Go Language Specification</a>, it mentions a brief overview of tags: </p>

<blockquote>
  <p>A field declaration may be followed by an optional string literal tag,
  which becomes an attribute for all the fields in the corresponding
  field declaration. The tags are made visible through a reflection
  interface but are otherwise ignored.</p>

<pre><code>// A struct corresponding to the TimeStamp protocol buffer.
// The tag strings define the protocol buffer field numbers.
struct {
  microsec  uint64 ""field 1""
  serverIP6 uint64 ""field 2""
  process   string ""field 3""
}
</code></pre>
</blockquote>

<p>This is a very short explanation IMO, and I was wondering if anyone could provide me with what use these tags would be?</p>
","<p>A tag for a field allows you to attach meta-information to the field which can be acquired using reflection. Usually it is used to provide transformation info on how a struct field is encoded to or decoded from another format (or stored/retrieved from a database), but you can use it to store whatever meta-info you want to, either intended for another package or for your own use.</p>

<p>As mentioned in the documentation of <a href=""http://golang.org/pkg/reflect/#StructTag"" rel=""nofollow noreferrer""><code>reflect.StructTag</code></a>, by convention the value of a tag string is a space-separated <code>key:""value""</code> pairs, for example:</p>

<pre><code>type User struct {
    Name string `json:""name"" xml:""name""`
}
</code></pre>

<p>The <code>key</code> usually denotes the package that the subsequent <code>""value""</code> is for, for example <code>json</code> keys are processed/used by the <a href=""https://golang.org/pkg/encoding/json/"" rel=""nofollow noreferrer""><code>encoding/json</code></a> package.</p>

<p>If multiple information is to be passed in the <code>""value""</code>, usually it is specified by separating it with a comma (<code>','</code>), e.g.</p>

<pre><code>Name string `json:""name,omitempty"" xml:""name""`
</code></pre>

<p>Usually a dash value (<code>'-'</code>) for the <code>""value""</code> means to exclude the field from the process (e.g. in case of <code>json</code> it means not to marshal or unmarshal that field).</p>

<h3>Example of accessing your custom tags using reflection</h3>

<p>We can use reflection (<a href=""https://golang.org/pkg/reflect/"" rel=""nofollow noreferrer""><code>reflect</code></a> package) to access the tag values of struct fields. Basically we need to acquire the <a href=""https://golang.org/pkg/reflect/#Type"" rel=""nofollow noreferrer""><code>Type</code></a> of our struct, and then we can query fields e.g. with <code>Type.Field(i int)</code> or <code>Type.FieldByName(name string)</code>. These methods return a value of <a href=""https://golang.org/pkg/reflect/#StructField"" rel=""nofollow noreferrer""><code>StructField</code></a> which describe / represent a struct field; and <code>StructField.Tag</code> is a value of type <a href=""https://golang.org/pkg/reflect/#StructTag"" rel=""nofollow noreferrer""><code>StructTag</code></a> which describes / represents a tag value.</p>

<p>Previously we talked about <em>""convention""</em>. This convention means that if you follow it, you may use the <a href=""https://golang.org/pkg/reflect/#StructTag.Get"" rel=""nofollow noreferrer""><code>StructTag.Get(key string)</code></a> method which parses the value of a tag and returns you the <code>""value""</code> of the <code>key</code> you specify. The <em>convention</em> is implemented / built into this <code>Get()</code> method. If you don't follow the convention, <code>Get()</code> will not be able to parse <code>key:""value""</code> pairs and find what you're looking for. That's also not a problem, but then you need to implement your own parsing logic.</p>

<p>Also there is <a href=""https://golang.org/pkg/reflect/#StructTag.Lookup"" rel=""nofollow noreferrer""><code>StructTag.Lookup()</code></a> (was added in Go 1.7) which is <em>""like <code>Get()</code> but distinguishes the tag not containing the given key from the tag associating an empty string with the given key""</em>.</p>

<p>So let's see a simple example:</p>

<pre><code>type User struct {
    Name  string `mytag:""MyName""`
    Email string `mytag:""MyEmail""`
}

u := User{""Bob"", ""bob@mycompany.com""}
t := reflect.TypeOf(u)

for _, fieldName := range []string{""Name"", ""Email""} {
    field, found := t.FieldByName(fieldName)
    if !found {
        continue
    }
    fmt.Printf(""\nField: User.%s\n"", fieldName)
    fmt.Printf(""\tWhole tag value : %q\n"", field.Tag)
    fmt.Printf(""\tValue of 'mytag': %q\n"", field.Tag.Get(""mytag""))
}
</code></pre>

<p>Output (try it on the <a href=""http://play.golang.org/p/Al_m3GYl5j"" rel=""nofollow noreferrer"">Go Playground</a>):</p>

<pre><code>Field: User.Name
    Whole tag value : ""mytag:\""MyName\""""
    Value of 'mytag': ""MyName""

Field: User.Email
    Whole tag value : ""mytag:\""MyEmail\""""
    Value of 'mytag': ""MyEmail""
</code></pre>

<hr>

<p>GopherCon 2015 had a presentation about struct tags called:</p>

<p><strong><a href=""https://github.com/gophercon/2015-talks/blob/master/Sam%20Helman%20%26%20Kyle%20Erf%20-%20The%20Many%20Faces%20of%20Struct%20Tags/StructTags.pdf"" rel=""nofollow noreferrer"">The Many Faces of Struct Tags (slide)</a></strong> (and a <a href=""https://www.youtube.com/watch?v=_SCRvMunkdA"" rel=""nofollow noreferrer"">video</a>)</p>

<h3>Here is a list of commonly used tag keys:</h3>

<ul>
<li><code>json     </code> - used by the <a href=""https://golang.org/pkg/encoding/json/"" rel=""nofollow noreferrer""><code>encoding/json</code></a> package, detailed at <a href=""https://golang.org/pkg/encoding/json/#Marshal"" rel=""nofollow noreferrer""><code>json.Marshal()</code></a></li>
<li><code>xml      </code> - used by the <a href=""https://golang.org/pkg/encoding/xml/"" rel=""nofollow noreferrer""><code>encoding/xml</code></a> package, detailed at <a href=""https://golang.org/pkg/encoding/xml/#Marshal"" rel=""nofollow noreferrer""><code>xml.Marshal()</code></a></li>
<li><code>bson     </code> - used by <a href=""https://labix.org/gobson"" rel=""nofollow noreferrer"">gobson</a>, detailed at <a href=""http://godoc.org/gopkg.in/mgo.v2/bson#Marshal"" rel=""nofollow noreferrer""><code>bson.Marshal()</code></a></li>
<li><code>protobuf </code> - used by <a href=""http://godoc.org/github.com/golang/protobuf/proto"" rel=""nofollow noreferrer""><code>github.com/golang/protobuf/proto</code></a>, detailed in the package doc</li>
<li><code>yaml     </code> - used by the <a href=""https://godoc.org/gopkg.in/yaml.v2"" rel=""nofollow noreferrer""><code>gopkg.in/yaml.v2</code></a> package, detailed at <a href=""https://godoc.org/gopkg.in/yaml.v2#Marshal"" rel=""nofollow noreferrer""><code>yaml.Marshal()</code></a></li>
<li><code>db       </code> - used by the <a href=""https://godoc.org/github.com/jmoiron/sqlx"" rel=""nofollow noreferrer""><code>github.com/jmoiron/sqlx</code></a> package; also used by <a href=""https://github.com/go-gorp/gorp"" rel=""nofollow noreferrer""><code>github.com/go-gorp/gorp</code></a> package</li>
<li><code>orm      </code> - used by the <a href=""https://godoc.org/github.com/astaxie/beego/orm"" rel=""nofollow noreferrer""><code>github.com/astaxie/beego/orm</code></a> package, detailed at <a href=""https://beego.me/docs/mvc/model/overview.md"" rel=""nofollow noreferrer"">Models – Beego ORM</a></li>
<li><code>gorm     </code> - used by the <a href=""https://github.com/jinzhu/gorm"" rel=""nofollow noreferrer""><code>github.com/jinzhu/gorm</code></a> package, examples can be found in their doc: <a href=""http://jinzhu.me/gorm/models.html"" rel=""nofollow noreferrer"">Models</a></li>
<li><code>valid    </code> - used by the <a href=""https://github.com/asaskevich/govalidator"" rel=""nofollow noreferrer""><code>github.com/asaskevich/govalidator</code></a> package, examples can be found in the project page</li>
<li><code>datastore</code> - used by <a href=""https://cloud.google.com/appengine/docs/go/datastore/reference"" rel=""nofollow noreferrer""><code>appengine/datastore</code></a> (Google App Engine platform, Datastore service), detailed at <a href=""https://cloud.google.com/appengine/docs/go/datastore/reference#hdr-Properties"" rel=""nofollow noreferrer"">Properties</a></li>
<li><code>schema   </code> - used by <a href=""http://godoc.org/github.com/gorilla/schema"" rel=""nofollow noreferrer""><code>github.com/gorilla/schema</code></a> to fill a <code>struct</code> with HTML form values, detailed in the package doc</li>
<li><code>asn      </code> - used by the <a href=""https://golang.org/pkg/encoding/asn1/"" rel=""nofollow noreferrer""><code>encoding/asn1</code></a> package, detailed at <a href=""https://golang.org/pkg/encoding/asn1/#Marshal"" rel=""nofollow noreferrer""><code>asn1.Marshal()</code></a> and <a href=""https://golang.org/pkg/encoding/asn1/#Unmarshal"" rel=""nofollow noreferrer""><code>asn1.Unmarshal()</code></a></li>
<li><code>csv      </code> - used by the <a href=""https://github.com/gocarina/gocsv"" rel=""nofollow noreferrer""><code>github.com/gocarina/gocsv</code></a> package</li>
</ul>
","30889373"
"Cannot set $GOPATH on Mac OSX","51930","","<p>I'm trying to set my <code>$GOPATH</code> variable to run some example code on my machine:</p>

<pre><code>$ smitego-example go run main.go 
main.go:5:2: cannot find package ""github.com/#GITHUB_USERNAME#/smitego"" in any of:
    /usr/local/go/src/pkg/github.com/#GITHUB_USERNAME#/smitego (from $GOROOT)
    ($GOPATH not set)

$ smitego-example export $GOPATH=$HOME
-bash: export: `=/Users/#OSX_USERNAME#': not a valid identifier
</code></pre>

<p><img src=""https://i.stack.imgur.com/muv49.png"" alt=""enter image description here""></p>

<p>Contents of <code>github.com/#GITHUB_USERNAME#/smitego/smitego.go</code>:</p>

<pre><code>package smitego
</code></pre>

<p>How can I set my <code>GOPATH</code> so it works always and forever?</p>
","<p><strong>Update, as of Go 1.8</strong>: If you're installing Go 1.8 (released: Feb 2017) or later, GOPATH is <a href=""https://rakyll.org/default-gopath/"" rel=""noreferrer"">automatically determined</a> by the Go toolchain for you.</p>

<p>It defaults to <code>$HOME/go</code> on macOS (nee OS X) - e.g. <code>/Users/matt/go/</code>. This makes getting started with Go even easier, and you can <code>go get &lt;package&gt;</code> right after installing Go.</p>

<hr>

<p><strong>For the shell:</strong> (the manual method)</p>

<p>~/.bash_profile should contain <code>export GOPATH=$HOME/go</code> and also <code>export PATH=$GOPATH/bin:$PATH</code>. The use of the <code>$</code> is important: make sure to note where I've used it (and where I have not).</p>

<p><strong>For Sublime Text:</strong> </p>

<p>Sublime Text menu > Preferences > Package Settings > GoSublime > Settings: User</p>

<pre><code>{
        ""shell"": [""/bin/bash""],
        ""env"": {""GOPATH"": ""/Users/#USERNAME#/go/""},
}
</code></pre>

<p>Make sure your <code>GOPATH</code> is not set to the full path of the package; just the root of your <code>go</code> folder where <code>src, pkg, and bin</code> reside. If you're not using <a href=""https://github.com/DisposaBoy/GoSublime"" rel=""noreferrer"">GoSublime</a>, I'd suggest installing that first.</p>
","21506074"
"How do you clear a slice in Go?","51902","","<p>What is the appropriate way to clear a slice in Go?</p>

<p>Here's what I've found in the <a href=""https://groups.google.com/forum/?fromgroups#!topic/golang-nuts/qlUKjMIS9sM"">go forums</a>:</p>

<pre><code>// test.go
package main

import (
    ""fmt""
)

func main() {
    letters := []string{""a"", ""b"", ""c"", ""d""}
    fmt.Println(cap(letters))
    fmt.Println(len(letters))
    // clear the slice
    letters = letters[:0]
    fmt.Println(cap(letters))
    fmt.Println(len(letters))
}
</code></pre>

<p>Is this correct?</p>

<p>Edit: Let me clarify, the buffer is cleared so it can be reused.</p>

<p>An example is <a href=""http://golang.org/pkg/bytes/#Buffer.Truncate"">Buffer.Truncate</a> function in the bytes package.</p>

<p>Notice that Reset just calls Truncate(0). So it appears that in this case line 70 would evaluate:
    b.buf = b.buf[0 : 0]</p>

<p><a href=""http://golang.org/src/pkg/bytes/buffer.go"">http://golang.org/src/pkg/bytes/buffer.go</a></p>

<pre><code>// Truncate discards all but the first n unread bytes from the buffer.
60  // It panics if n is negative or greater than the length of the buffer.
61  func (b *Buffer) Truncate(n int) {
62      b.lastRead = opInvalid
63      switch {
64      case n &lt; 0 || n &gt; b.Len():
65          panic(""bytes.Buffer: truncation out of range"")
66      case n == 0:
67          // Reuse buffer space.
68          b.off = 0
69      }
70      b.buf = b.buf[0 : b.off+n]
71  }
72  
73  // Reset resets the buffer so it has no content.
74  // b.Reset() is the same as b.Truncate(0).
75  func (b *Buffer) Reset() { b.Truncate(0) }
</code></pre>
","<p>It all depends on what is your definition of 'clear'. One of the valid ones certainly is:</p>

<pre><code>slice = slice[:0]
</code></pre>

<p>But there's a catch. If slice elements are of type T:</p>

<pre><code>var slice []T
</code></pre>

<p>then enforcing <code>len(slice)</code> to be zero, by the above ""trick"",  <em>doesn't</em> make any element of</p>

<pre><code>slice[:cap(slice)]
</code></pre>

<p>eligible for garbage collection. This might be the optimal approach in some scenarios. But it might also be a cause of ""memory leaks"" - memory not used, but potentially reachable (after re-slicing of 'slice') and thus not garbage ""collectable"".</p>
","16972044"
"Go string to ascii byte array","51701","","<p>How can I encode my string as ASCII byte array?</p>
","<p>If you're looking for a conversion, just do <code>byteArray := []byte(myString)</code></p>

<p>The language spec details conversions between strings and certain types of arrays (byte for bytes, int for Unicode points)</p>
","3371785"
"Is it possible to capture a Ctrl+C signal and run a cleanup function, in a ""defer"" fashion?","51679","","<p>I want to capture the <kbd>Ctrl+C</kbd> (<code>SIGINT</code>) signal sent from the console and print out some partial run totals.</p>

<p>Is this possible in Golang?</p>

<p>Note: When I first posted the question I was confused about <kbd>Ctrl+C</kbd> being <code>SIGTERM</code> instead of <code>SIGINT</code>.</p>
","<p>You can use the <a href=""http://golang.org/pkg/os/signal/"">os/signal</a> package to handle incoming signals. ^C is <a href=""http://en.wikipedia.org/wiki/SIGINT_%28POSIX%29"">SIGINT</a>, so you can use this to trap <code>os.Interrupt</code>.</p>

<pre><code>c := make(chan os.Signal, 1)
signal.Notify(c, os.Interrupt)
go func(){
    for sig := range c {
        // sig is a ^C, handle it
    }
}()
</code></pre>

<p>The manner in which you cause your program to terminate and print information is entirely up to you.</p>
","11269077"
"The last element of a slice","51342","","<p>What is the <code>Go</code> way for extracting the last element of a <code>slice</code>?</p>

<pre><code>var slice []int

slice = append(slice, 2)
slice = append(slice, 7)

slice[len(slice)-1:][0] // Retrieves the last element
</code></pre>

<p>The solution above works, but seems awkward.</p>
","<p>For just reading the last element of a slice:</p>

<pre><code>sl[len(sl)-1]
</code></pre>

<p>For removing it:</p>

<pre><code>sl = sl[:len(sl)-1]
</code></pre>

<p>See this <a href=""https://github.com/golang/go/wiki/SliceTricks"" rel=""noreferrer"">page about slice tricks</a></p>
","22535888"
"How to run test cases in a specified file?","51225","","<p>My package test cases are scattered across multiple files, if I run <code>go test &lt;package_name&gt;</code> it runs all test cases in the package.</p>

<p>It is unnecessary to run all of them though. Is there a way to specify a file for <code>go test</code> to run, so that it only runs test cases defined in the file?</p>
","<p>There are two ways. The easy one is to use the <code>-run</code> flag and provide a pattern matching names of the tests you want to run.</p>

<p>ex: <code>$ go test -run NameOfTest</code>. See the <a href=""https://golang.org/pkg/testing/#hdr-Subtests_and_Sub_benchmarks"" rel=""noreferrer"">docs</a> for more info.</p>

<p>The other way is to name the specific file, containing the tests you want to run:</p>

<pre><code>$ go test foo_test.go
</code></pre>

<p>But there's a catch. This works well if</p>

<ul>
<li>foo.go is package foo</li>
<li>foo_test.go is package foo_test and imports 'foo'.</li>
</ul>

<p>If 'foo_test.go' and 'foo.go' are the same package (a common case), then you must name all other files required to build 'foo_test'. In this example it would be:</p>

<pre><code>$ go test foo_test.go foo.go
</code></pre>

<p>I'd recommend to use the name pattern. Or, where/when possible, always run all package tests.</p>
","16936314"
"How to split a string and assign it to variables in Golang?","51154","","<p>In Python it is possible to split a string and assign it to variables:</p>

<pre><code>ip, port = '127.0.0.1:5432'.split(':')
</code></pre>

<p>but in Golang it does not seem to work:</p>

<pre><code>ip, port := strings.Split(""127.0.0.1:5432"", "":"")
// assignment count mismatch: 2 = 1
</code></pre>

<p><strong>Question:</strong> How to split a string and assign values in one step?</p>
","<p>Two steps, for example,</p>

<pre><code>package main

import (
    ""fmt""
    ""strings""
)

func main() {
    s := strings.Split(""127.0.0.1:5432"", "":"")
    ip, port := s[0], s[1]
    fmt.Println(ip, port)
}
</code></pre>

<p>Output:</p>

<pre><code>127.0.0.1 5432
</code></pre>

<p>One step, for example,</p>

<pre><code>package main

import (
    ""fmt""
    ""net""
)

func main() {
    host, port, err := net.SplitHostPort(""127.0.0.1:5432"")
    fmt.Println(host, port, err)
}
</code></pre>

<p>Output:</p>

<pre><code>127.0.0.1 5432 &lt;nil&gt;
</code></pre>
","16551613"
"Convert an integer to a float number in Golang","50979","","<p>How do I convert an integer value to float64 type?</p>

<p>I tried</p>

<pre><code>float(integer_value)
</code></pre>

<p>But this does not work. And can't find any package that does this on Golang.org.</p>

<p>How do I get float64 values from integer values?</p>
","<p>There is no <code>float</code> type.  Looks like you want <code>float64</code>. You could also use <code>float32</code> if you only need a single-precision floating point value.</p>

<pre><code>package main

import ""fmt""

func main() {
    i := 5
    f := float64(i)
    fmt.Printf(""f is %f\n"", f)
}
</code></pre>
","19230240"
"golang: How to do a https request with bad certificate?","50864","","<p>Say I want to get <code>https://golang.org</code> programatically. Currently golang.org (ssl) has a bad certificate which is issued to <code>*.appspot.com</code> So when I run this:</p>

<pre><code>package main

import (
    ""log""
    ""net/http""
)

func main() {
    _, err := http.Get(""https://golang.org/"")
    if err != nil {
        log.Fatal(err)
    }
}
</code></pre>

<p>I get (as I expected)</p>

<pre><code>Get https://golang.org/: certificate is valid for *.appspot.com, *.*.appspot.com, appspot.com, not golang.org
</code></pre>

<p>Now, I want to trust this certificate myself (imagine a self-issued certificate where I can validate fingerprint etc.): how can I make a request and validate/trust the certificate?</p>

<p>I probably need to use openssl to download the certificate, load it into my file and fill <code>tls.Config</code> struct !?</p>
","<p>You can disable security check (at your own risk) :</p>

<pre><code>package main

import (
    ""fmt""
    ""net/http""
    ""crypto/tls""
)

func main() {
    tr := &amp;http.Transport{
        TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},
    }
    client := &amp;http.Client{Transport: tr}
    _, err := client.Get(""https://golang.org/"")
    if err != nil {
        fmt.Println(err)
    }
}
</code></pre>
","12122718"
"Add GoLang syntax highlighting for VIM","50672","","<p>I'm trying to add Go language syntax highlighting to VIM on ubuntu with resources and direction supplied here <a href=""http://go-lang.cat-v.org/text-editors/vim/"" rel=""nofollow noreferrer"">http://go-lang.cat-v.org/text-editors/vim/</a>.</p>

<p>Go comes with a <code>go.vim</code> file that contains syntax settings for VIM and the above page offers the following instructions</p>

<p><strong>Place $GOROOT/misc/vim/syntax/go.vim in ~/.vim/syntax/ and put the following in ~/.vim/ftdetect/go.vim:</strong></p>

<pre><code>au BufRead,BufNewFile *.go set filetype=go 
</code></pre>

<p>This is more or less the same vein of procedure for customizing vim syntax I've seen elsewhere
(<a href=""https://stackoverflow.com/questions/12962233/vim-7-3-on-ubuntu-12-10-doesnt-have-ftplugin-directory-anywhere"">Vim 7.3 on Ubuntu 12.10 doesn&#39;t have &#39;ftplugin&#39; directory anywhere</a> and <a href=""https://github.com/jnwhiteh/vim-golang/blob/master/readme.txt"" rel=""nofollow noreferrer"">https://github.com/jnwhiteh/vim-golang/blob/master/readme.txt</a>)</p>

<p>So I think I'm doing the right thing when I create directories:<br>
~/.vim<br>
~/.vim/syntax<br>
~/.vim/ftdetect<br></p>

<p>and follow the above instructions by adding </p>

<p>go.vim to ~/.vim/syntax/
and creating a file, go.vim, in ~/.vim/ftdetect/ which contains</p>

<pre><code>au BufRead,BufNewFile *.go set filetype=go
</code></pre>

<p>Yet syntax highlighting does not seem to occur. Is there something I need to do to force VIM to look at these new settings files?</p>
","<p>you can just add these lines to your <code>~/.vimrc</code>:</p>

<pre><code>set rtp+=$GOROOT/misc/vim
filetype plugin indent on
syntax on
</code></pre>

<p><strong>EDIT</strong> This assumes <code>filetype plugin indent off</code> before these lines (i.e. beginning of <code>.vimrc</code> file) and may cause problems if it's not. See @peterSO's answer below for the safer version.</p>
","15580632"
"The maximum value for an int type in Go","50473","","<p>How does one specify the maximum value representable for an <code>unsigned</code> integer type?</p>

<p>I would like to know how to initialize <code>min</code> in the loop below that transitively computes min and max lengths from some structs.</p>

<pre><code>var minLen uint = ???
var maxLen uint = 0
for _, thing := range sliceOfThings {
  if minLen &gt; thing.minLen { minLen = n }
  if maxLen &lt; thing.maxLen { maxLen = n }
}
if minLen &gt; maxLen {
  // If there are no values, clamp min at 0 so that min &lt;= max.
  minLen = 0
}
</code></pre>

<p>so that the first time through the comparison, <code>minLen &gt;= n</code>.</p>
","<p><a href=""https://groups.google.com/group/golang-nuts/msg/71c307e4d73024ce?pli=1"" rel=""noreferrer"">https://groups.google.com/group/golang-nuts/msg/71c307e4d73024ce?pli=1</a></p>

<p>The germane part:</p>

<blockquote>
  <p>Since integer types use two's complement arithmetic, you can infer the 
  min/max constant values for <code>int</code> and <code>uint</code>. For example,</p>

<pre><code>const MaxUint = ^uint(0) 
const MinUint = 0 
const MaxInt = int(MaxUint &gt;&gt; 1) 
const MinInt = -MaxInt - 1
</code></pre>
</blockquote>

<p>As per @CarelZA's comment:</p>

<pre><code>uint8  : 0 to 255 
uint16 : 0 to 65535 
uint32 : 0 to 4294967295 
uint64 : 0 to 18446744073709551615 
int8   : -128 to 127 
int16  : -32768 to 32767 
int32  : -2147483648 to 2147483647 
int64  : -9223372036854775808 to 9223372036854775807
</code></pre>
","6878625"
"How can I pretty-print JSON using Go?","50379","","<p>Does anyone know of a simple way to pretty-print JSON output in Go?</p>

<p><strike>The stock <a href=""http://golang.org/pkg/encoding/json/"">http://golang.org/pkg/encoding/json/</a> package does not seem to include functionality for this</strike> (EDIT: it does, see accepted answer) and a quick google doesn't turn up anything obvious.</p>

<p>Uses I'm looking for are both pretty-printing the result of <code>json.Marshal</code> and just formatting a string full of JSON from wherever, so it's easier to read for debug purposes.</p>
","<p>By pretty-print, I assume you mean indented, like so</p>

<pre><code>{
    ""data"": 1234
}
</code></pre>

<p>rather than</p>

<pre><code>{""data"":1234}
</code></pre>

<p>The easiest way to do this is with <a href=""http://golang.org/pkg/encoding/json/#MarshalIndent""><code>MarshalIndent</code></a>, which will let you specify how you would like it indented via the <code>indent</code> argument. Thus, <code>json.MarshalIndent(data, """", ""    "")</code> will pretty-print using four spaces for indentation.</p>
","19038873"
"How to check whether a file or directory denoted by a path exists in Golang?","49888","","<p>I want to check the existence of file <code>./conf/app.ini</code> in my Golang code. 
But I can't find a good way to do that.  </p>

<p>I know there is a method of File in Java: <code>public boolean exists()</code> , Which returns true if the file or directory exists.</p>

<p>But how to do it in Golang?</p>
","<pre><code>// exists returns whether the given file or directory exists or not
func exists(path string) (bool, error) {
    _, err := os.Stat(path)
    if err == nil { return true, nil }
    if os.IsNotExist(err) { return false, nil }
    return true, err
}
</code></pre>

<p>Edited to add error handling.</p>
","10510783"
"How to get the number of Characters in a String?","49832","","<p>How can I get the number of characters of a string in Go?</p>

<p>For example, if I have a string <code>""hello""</code> the method should return <code>5</code>. I saw that <code>len(str)</code> returns the number of bytes <strong>and not</strong> the number of characters so <code>len(""£"")</code> returns 2 instead of 1 because £ is encoded with two bytes in UTF-8.</p>
","<p>You can try <a href=""http://golang.org/pkg/unicode/utf8/#RuneCountInString"" rel=""noreferrer""><code>RuneCountInString</code></a> from the utf8 package.</p>

<blockquote>
  <p>returns the number of runes in p</p>
</blockquote>

<p>that, as illustrated in <a href=""http://play.golang.org/p/zzB1VrwdER"" rel=""noreferrer"">this script</a>: the length of ""World"" might be 6 (when written in Chinese: ""世界""), but its rune count is 2:</p>

<pre><code>package main

import ""fmt""
import ""unicode/utf8""

func main() {
    fmt.Println(""Hello, 世界"", len(""世界""), utf8.RuneCountInString(""世界""))
}
</code></pre>

<p><a href=""https://stackoverflow.com/users/383848/phrozen"">Phrozen</a> adds <a href=""https://stackoverflow.com/questions/12668681/go-language-string-length/12668840#comment39875126_12668840"">in the comments</a>:</p>

<p>Actually you can do <code>len()</code> over runes by just type casting.<br>
<code>len([]rune(""世界""))</code> will print <code>2</code>. At leats in Go 1.3.</p>

<hr>

<p><a href=""https://stackoverflow.com/users/155077/stefan-steiger"">Stefan Steiger</a> points to the blog post ""<a href=""https://blog.golang.org/normalization"" rel=""noreferrer"">Text normalization in Go</a>""</p>

<p>What is a character?</p>

<blockquote>
  <p>As was mentioned in the <a href=""http://blog.golang.org/strings"" rel=""noreferrer"">strings blog post</a>, <strong>characters can span multiple runes</strong>.<br>
  For example, an '<code>e</code>' and '◌́◌́' (acute ""\u0301"") can combine to form 'é' (""<code>e\u0301</code>"" in NFD). <strong>Together these two runes are one character</strong>. </p>
  
  <p>The definition of a character may vary depending on the application.<br>
  For <strong><a href=""https://godoc.org/golang.org/x/text/unicode/norm"" rel=""noreferrer"">normalization</a></strong> we will define it as:</p>
  
  <ul>
  <li>a sequence of runes that starts with a starter, </li>
  <li>a rune that does not modify or combine backwards with any other rune, </li>
  <li>followed by possibly empty sequence of non-starters, that is, runes that do (typically accents). </li>
  </ul>
  
  <p>The normalization algorithm processes one character at at time. </p>
</blockquote>

<p>Using that package and its <a href=""https://godoc.org/golang.org/x/text/unicode/norm#Iter"" rel=""noreferrer""><code>Iter</code> type</a>, the actual number of ""character"" would be:</p>

<pre><code>package main

import ""fmt""
import ""golang.org/x/text/unicode/norm""

func main() {
    var ia norm.Iter
    ia.InitString(norm.NFKD, ""école"")
    nc := 0
    for !ia.Done() {
        nc = nc + 1
        ia.Next()
    }
    fmt.Printf(""Number of chars: %d\n"", nc)
}
</code></pre>

<p>Here, this uses the <a href=""http://unicode.org/reports/tr15/#Norm_Forms"" rel=""noreferrer"">Unicode Normalization form</a> NFKD ""Compatibility Decomposition""</p>
","12668840"
"how to set and get fields in Golang structs?","49482","","<p>After creating a struct like this:</p>

<pre><code>type Foo struct {
   name string        

}
func (f Foo) SetName(name string){
    f.name=name
}

func (f Foo) GetName string (){
   return f.name
}
</code></pre>

<p>How do I create a new instance of Foo and set and get the name?
I tried the following:</p>

<pre><code>p:=new(Foo)
p.SetName(""Abc"")
name:=p.GetName()
fmt.Println(name)
</code></pre>

<p>Nothing gets printed, because name is empty. So how do I set and get a field inside a struct?</p>
","<p>Commentary (and working) example:</p>

<pre><code>package main

import ""fmt""

type Foo struct {
    name string
}

// SetName receives a pointer to Foo so it can modify it.
func (f *Foo) SetName(name string) {
    f.name = name
}

// Name receives a copy of Foo since it doesn't need to modify it.
func (f Foo) Name() string {
    return f.name
}

func main() {
    // Notice the Foo{}. The new(Foo) was just a syntactic sugar for &amp;Foo{}
    // and we don't need a pointer to the Foo, so I replaced it.
    // Not relevant to the problem, though.
    p := Foo{}
    p.SetName(""Abc"")
    name := p.Name()
    fmt.Println(name)
}
</code></pre>

<p><a href=""http://play.golang.org/p/Pw9f20zwja"" rel=""noreferrer"">Test it</a> and take <a href=""http://tour.golang.org"" rel=""noreferrer"">A Tour of Go</a> to learn more about methods and pointers, and the basics of Go at all.</p>
","11810342"
"Is there a way to do repetitive tasks at intervals in Golang?","49128","","<p>Is there a way to do repetitive background tasks in Go?  I'm thinking of something like <code>Timer.schedule(task, delay, period)</code> in Java.  I know I can do this with a goroutine and <code>Time.sleep()</code>, but I'd like something that easily stopped.</p>

<p>Here's what I got, but looks ugly to me.  Is there a cleaner/better way?</p>

<pre><code>func oneWay() {
    var f func()
    var t *time.Timer

    f = func () {
        fmt.Println(""doing stuff"")
        t = time.AfterFunc(time.Duration(5) * time.Second, f)
    }

    t = time.AfterFunc(time.Duration(5) * time.Second, f)

    defer t.Stop()

    //simulate doing stuff
    time.Sleep(time.Minute)
}
</code></pre>
","<p>The function <a href=""http://golang.org/pkg/time/#NewTicker"" rel=""noreferrer""><code>time.NewTicker</code></a> makes a channel that sends a periodic message, and provides a way to stop it. Use it something like this (untested):</p>

<pre><code>ticker := time.NewTicker(5 * time.Second)
quit := make(chan struct{})
go func() {
    for {
       select {
        case &lt;- ticker.C:
            // do stuff
        case &lt;- quit:
            ticker.Stop()
            return
        }
    }
 }()
</code></pre>

<p>You can stop the worker by closing the <code>quit</code> channel: <code>close(quit)</code>.</p>
","16466581"
"From io.Reader to string in Go","48002","","<p>I have an <code>io.ReadCloser</code> object (from an <code>http.Response</code> object).</p>

<p>What's the most efficient way to convert the entire stream to a <code>string</code> object?</p>
","<p>The short answer is that it it will not be efficient because converting to a string requires doing a complete copy of the byte array. Here is the proper (non-efficient) way to do what you want:</p>

<pre><code>buf := new(bytes.Buffer)
buf.ReadFrom(yourReader)
s := buf.String() // Does a complete copy of the bytes in the buffer.
</code></pre>

<p>This copy is done as a protection mechanism. Strings are immutable. If you could convert a []byte to a string, you could change the contents of the string. However, go allows you to disable the type safety mechanisms using the unsafe package. Use the unsafe package at your own risk. Hopefully the name alone is a good enough warning. Here is how I would do it using unsafe:</p>

<pre><code>buf := new(bytes.Buffer)
buf.ReadFrom(yourReader)
b := buf.Bytes()
s := *(*string)(unsafe.Pointer(&amp;b))
</code></pre>

<p>There we go, you have now efficiently converted your byte array to a string. Really, all this does is trick the type system into calling it a string. There are a couple caveats to this method:</p>

<ol>
<li>There are no guarantees this will work in all go compilers. While this works with the plan-9 gc compiler, it relies on ""implementation details"" not mentioned in the official spec. You can not even guarantee that this will work on all architectures or not be changed in gc. In other words, this is a bad idea.</li>
<li>That string is mutable! If you make any calls on that buffer it <em>will</em> change the string. Be very careful.</li>
</ol>

<p>My advice is to stick to the official method. Doing a copy is not <em>that</em> expensive and it is not worth the evils of unsafe. If the string is too large to do a copy, you should not be making it into a string.</p>
","9649061"
"How to find out element position in slice?","47879","","<p>How does one determine the position of an element present in slice?</p>

<p>I need something like the following:</p>

<pre><code>type intSlice []int

func (slice intSlice) pos(value int) int {
    for p, v := range slice {
        if (v == value) {
            return p
        }
    }
    return -1
}
</code></pre>
","<p>Sorry, there's no generic library function to do this. Go doesn't have a straight forward way of writing a function that can operate on any slice.</p>

<p>Your function works, although it would be a little better if you wrote it using <code>range</code>.</p>

<p>If you happen to have a byte slice, there is <a href=""http://golang.org/pkg/bytes/#IndexByte"" rel=""noreferrer"">bytes.IndexByte</a>.</p>
","8307594"
"what is difference between []string and ...string in golang?","47762","","<p>in Go language</p>

<p><code>[]string</code> is string array</p>

<p>and we also use <code>...string</code> as parameter</p>

<p>what is difference?</p>

<p>function definition:</p>

<pre><code>func f(args ...string) {}
</code></pre>

<p>and can i call this function like below?</p>

<pre><code>args := []string{""a"", ""b""}

f(args)
</code></pre>
","<blockquote>
  <p><code>[]string</code> is string array</p>
</blockquote>

<p>Technically it's a slice that references an underlying array</p>

<blockquote>
  <p>and we also use <code>...string</code> as parameter</p>
  
  <p>what is difference?</p>
</blockquote>

<p>With respect to the structure, nothing really. The data type resulting from both syntax is the same.</p>

<p>The <code>...</code> parameter syntax makes a variadic parameter. It will accept zero or more <code>string</code> arguments, and reference them as a slice.</p>

<p>With respect to calling <code>f</code>, you can pass a slice of strings into the variadic parameter with the following syntax:</p>

<pre><code>func f(args ...string) {
    fmt.Println(len(args))
}


args := []string{""a"", ""b""}

f(args...)
</code></pre>

<p>This syntax is available for either the slice built using the literal syntax, or the slice representing the variadic parameter <em>(since there's really no difference between them)</em>.</p>

<p><a href=""http://play.golang.org/p/QWmzgIWpF8"" rel=""noreferrer"">http://play.golang.org/p/QWmzgIWpF8</a></p>
","12907735"
"How to check variable type at runtime in Go language","47629","","<p>I have few C functions declared like this</p>

<pre><code>CURLcode curl_wrapper_easy_setopt_long(CURL* curl, CURLoption option, long param);
CURLcode curl_wrapper_easy_setopt_str(CURL* curl, CURLoption option, char* param);
</code></pre>

<p>I would like to expose those as one Go function like this</p>

<pre><code>func (e *Easy)SetOption(option Option, param interface{})
</code></pre>

<p>so I need to be able to check <em>param</em> type at runtime. How do I do that and is this good idea (if not what is good practice in this case)?</p>
","<p>See type assertions here:</p>

<p><a href=""http://golang.org/ref/spec#Type_assertions"" rel=""noreferrer"">http://golang.org/ref/spec#Type_assertions</a></p>

<p>I'd assert a sensible type (string, uint64) etc only and keep it as loose as possible, performing a conversion to the native type last.</p>
","6996800"
"Is there a way to iterate over a range of integers in Golang?","47377","","<p>Golang's range can iterate over maps and slices, but I was wondering if there is a way to iterate over a range of numbers, something like this</p>

<pre><code>for i := range [1..10] {
    fmt.Println(i)
}
</code></pre>

<p>or is there a way to represent range of integers in Go like how ruby does?</p>
","<p>You can, and should, just write a for loop. Simple, obvious code is the Go way.</p>

<pre><code>for i := 1; i &lt;= 10; i++ {
    fmt.Println(i)
}
</code></pre>
","21951131"
"How to install golang 3rd-party projects from download sources?","47132","","<p>I'm trying to install <a href=""http://labix.org/mgo"">mgo</a> which is a mongo-driver written in golang. </p>

<p>The standard command: </p>

<pre><code>go get launchpad.net/mgo
</code></pre>

<p>But it failed because of some cert issues.</p>

<p>So I manually download the sources of mgo to local <code>E:\mgo</code>, but I don't know to how install it.</p>

<p>The file tree:</p>

<pre><code>├─.bzr
│  ├─branch
│  │  └─lock
│  ├─branch-lock
│  ├─checkout
│  │  └─lock
│  └─repository
│      ├─indices
│      ├─lock
│      ├─obsolete_packs
│      ├─packs
│      └─upload
├─bson
└─testdb
</code></pre>

<p>I tried:</p>

<pre><code>cd mgo
go install
</code></pre>

<p>It reports:</p>

<pre><code>auth.go:34:2: import ""launchpad.net/mgo/bson"": cannot find package
</code></pre>

<p>But if I try to install bson first:</p>

<pre><code>cd bson
go install
</code></pre>

<p>It reports another error:</p>

<pre><code>go install: no install location for _/E_/mgo/bson
</code></pre>

<p>So, what's the correct command to install it?</p>
","<p>Finally I successfully install the mgo project. I think it will be helpful for beginners, so I answer it here.</p>

<p><strong>First, we need GOPATH</strong></p>

<p>Define a env variable <code>GOPATH</code>, which is your project root directory, and it should have a sub dir <code>src</code>.</p>

<p>For me, I define it to <code>E:\WORKSPACE_GO\mgo</code>, then create a sub dir <code>src</code></p>

<p><strong>Copy the project to the src</strong></p>

<p>Then copy the <code>mgo</code> project to <code>%GOPATH%/mgo</code>, but we must be careful about the directory structure. It should be exactly the same as the package defined in sources.</p>

<p>For <code>mgo</code>, it's package is <code>launchpad.net/mgo</code>, so the structure should be:</p>

<pre><code>E:\WORKSPACE_GO\mgo\src\launchpad.net\mgo
</code></pre>

<p><strong>go install</strong></p>

<p>At last, <code>go install</code> them:</p>

<pre><code>cd E:\WORKSPACE_GO\mgo\src\launchpad.net\mgo\bson
go install

cd ..
go install
</code></pre>

<p>If there is no error input, it should be successfully installed.</p>
","10773041"
"How to send a POST request in Golang?","46937","","<p>I find the go http package quite confusing. I think the client and server should be separated in two different package and perhaps a 3rd with the common stuff.</p>

<p>Anyway trying to make a POST request but I can't get it done. Nothing is received on the other side.
  Is this how it is supposed to work ? I'm aware of the <a href=""http://golang.org/pkg/net/http/#Client.PostForm"">PostForm</a> function but I think I can't use it because it can't be tested with <a href=""http://golang.org/pkg/net/http/httputil"">httputil</a> right ?</p>

<pre><code>hc := http.Client{}
    req, err := http.NewRequest(""POST"", APIURL, nil)

    form := url.Values{}
    form.Add(""ln"", c.ln)
    form.Add(""ip"", c.ip)
    form.Add(""ua"", c.ua)
    req.PostForm = form
    req.Header.Add(""Content-Type"", ""application/x-www-form-urlencoded"")

    glog.Info(""form was %v"", form)
    resp, err := hc.Do(req)
</code></pre>
","<p>You have mostly the right idea, it's just the sending of the form that is wrong. The form belongs in the body of the request.</p>

<pre><code>req, err := http.NewRequest(""POST"", url, strings.NewReader(form.Encode()))
</code></pre>
","24493317"
"Golang: convert time.Time to string","46843","","<p>I'm trying to add some values from my database to a <code>[]string</code> in Go. Some of these are timestamps.</p>

<p>I get the error:</p>

<blockquote>
  <p>cannot use U.Created_date (type time.Time) as type string in array element</p>
</blockquote>

<p>Can I convert <code>time.Time</code> to <code>string</code>?</p>

<pre><code>type UsersSession struct {
    Userid int
    Timestamp time.Time
    Created_date time.Time
}

type Users struct {
    Name string
    Email string
    Country string
    Created_date time.Time
    Id int
    Hash string
    IP string
}
</code></pre>

<p>-</p>

<pre><code>var usersArray = [][]string{}

rows, err := db.Query(""SELECT u.id, u.hash, u.name, u.email, u.country, u.IP, u.created_date, us.timestamp, us.created_date FROM usersSession AS us LEFT JOIN users AS u ON u.id = us.userid WHERE us.timestamp + interval 30 minute &gt;= now()"")

U := Users{}
US := UsersSession{}

for rows.Next() {
    err = rows.Scan(&amp;U.Id, &amp;U.Hash, &amp;U.Name, &amp;U.Email, &amp;U.Country, &amp;U.IP, &amp;U.Created_date, &amp;US.Timestamp, &amp;US.Created_date)
    checkErr(err)

    userid_string := strconv.Itoa(U.Id)
    user := []string{userid_string, U.Hash, U.Name, U.Email, U.Country, U.IP, U.Created_date, US.Timestamp, US.Created_date}
    // -------------
    // ^ this is where the error occurs
    // cannot use U.Created_date (type time.Time) as type string in array element (for US.Created_date and US.Timestamp aswell)
    // -------------

    usersArray = append(usersArray, user)
    log.Print(""usersArray: "", usersArray)
}
</code></pre>

<p><strong>EDIT</strong></p>

<p>I added the following. It works now, thanks.</p>

<pre><code>userCreatedDate := U.Created_date.Format(""2006-01-02 15:04:05"")
userSessionCreatedDate := US.Created_date.Format(""2006-01-02 15:04:05"")
userSessionTimestamp := US.Timestamp.Format(""2006-01-02 15:04:05"")
</code></pre>
","<p>You can use the <a href=""https://golang.org/pkg/time/#Time.String"" rel=""noreferrer""><code>Time.String()</code></a> method to convert a <a href=""https://golang.org/pkg/time/#Time"" rel=""noreferrer""><code>time.Time</code></a> to a <code>string</code>. This uses the format string <code>""2006-01-02 15:04:05.999999999 -0700 MST""</code>.</p>

<p>If you need other custom format, you can use <a href=""https://golang.org/pkg/time/#Time.Format"" rel=""noreferrer""><code>Time.Format()</code></a>. For example to get the timestamp in the format of <code>yyyy-MM-dd HH:mm:ss</code> use the format string <code>""2006-01-02 15:04:05""</code>.</p>

<p>Example:</p>

<pre><code>t := time.Now()
fmt.Println(t.String())
fmt.Println(t.Format(""2006-01-02 15:04:05""))
</code></pre>

<p>Output (try it on the <a href=""http://play.golang.org/p/VysF0Eu7v8"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>2009-11-10 23:00:00 +0000 UTC
2009-11-10 23:00:00
</code></pre>

<p>Note: time on the Go Playground is always set to the value seen above. Run it locally to see current date/time.</p>

<p>Also note that using <code>Time.Format()</code>, as the layout <code>string</code> you always have to pass the same time –called the <em>reference</em> time– formatted in a way you want the result to be formatted. This is documented at <code>Time.Format()</code>:</p>

<blockquote>
  <p>Format returns a textual representation of the time value formatted according to layout, which defines the format by showing how the reference time, defined to be</p>

<pre><code>Mon Jan 2 15:04:05 -0700 MST 2006
</code></pre>
  
  <p>would be displayed if it were the value; it serves as an example of the desired output. The same display rules will then be applied to the time value.</p>
</blockquote>
","33119937"
"How to set timeout for http.Get() requests in Golang?","46708","","<p>I'm making a URL fetcher in Go and have a list of URLs to fetch. I send <code>http.Get()</code> requests to each URL and obtain their response.</p>

<pre><code>resp,fetch_err := http.Get(url)
</code></pre>

<p>How can I set a custom timeout for each Get request? (The default time is very long and that makes my fetcher really slow.) I want my fetcher to have a timeout of around 40-45 seconds after which it should return ""request timed out"" and move on to the next URL.</p>

<p>How can I achieve this?</p>
","<p>Apparently in Go 1.3 <a href=""http://golang.org/pkg/net/http/#Client"" rel=""noreferrer"">http.Client</a> has Timeout field</p>

<pre><code>timeout := time.Duration(5 * time.Second)
client := http.Client{
    Timeout: timeout,
}
client.Get(url)
</code></pre>

<p>That's done the trick for me.</p>
","25344458"
"Checking the equality of two slices","46487","","<p>How can I check if two slices are equal?</p>
","<p>You need to loop over each of the elements in the slice and test. Equality for slices is not defined. However, there is a <code>bytes.Equal</code> function if you are comparing values of type <code>[]byte</code>.</p>

<pre><code>func testEq(a, b []Type) bool {

    if a == nil &amp;&amp; b == nil { 
        return true; 
    }

    if a == nil || b == nil { 
        return false; 
    }

    if len(a) != len(b) {
        return false
    }

    for i := range a {
        if a[i] != b[i] {
            return false
        }
    }

    return true
}
</code></pre>
","15312097"
"How to parse unix timestamp in golang","46408","","<p>I'm trying to parse an Unix <a href=""http://golang.org/pkg/time/"">timestamp</a> but I get out of range error. That doesn't really makes sense to me because the layout is correct (as in the golang docs):</p>

<pre><code>package main

import ""fmt""
import ""time""

func main() {
    tm, err := time.Parse(""1136239445"", ""1405544146"")
    if err !=nil{
        panic(err)
    }

    fmt.Println(tm)
}
</code></pre>

<p><a href=""http://play.golang.org/p/lFxVml0qH4"">play</a></p>
","<p>The <code>time.Parse</code> function does not do Unix timestamps. Instead you can use <code>strconv.ParseInt</code> to parse the string to <code>int64</code> and create the timestamp with <code>time.Unix</code>:</p>

<pre><code>package main

import (
    ""fmt""
    ""time""
    ""strconv""
)

func main() {
    i, err := strconv.ParseInt(""1405544146"", 10, 64)
    if err != nil {
        panic(err)
    }
    tm := time.Unix(i, 0)
    fmt.Println(tm)
}
</code></pre>

<p><strong>Output:</strong></p>

<pre><code>2014-07-16 20:55:46 +0000 UTC
</code></pre>

<p><strong>Playground:</strong> <a href=""http://play.golang.org/p/v_j6UIro7a"">http://play.golang.org/p/v_j6UIro7a</a></p>

<p><strong>Edit:</strong></p>

<p>Changed from <code>strconv.Atoi</code> to <code>strconv.ParseInt</code> to avoid int overflows on 32 bit systems.</p>
","24987221"
"How to check a channel is closed or not without reading it?","45741","","<p>This is a good example of workers &amp; controller mode in Go written by @Jimt, in answer to
""<a href=""https://stackoverflow.com/a/16102304/55504"">Is there some elegant way to pause &amp; resume any other goroutine in golang?</a>""</p>

<pre><code>package main

import (
    ""fmt""
    ""runtime""
    ""sync""
    ""time""
)

// Possible worker states.
const (
    Stopped = 0
    Paused  = 1
    Running = 2
)

// Maximum number of workers.
const WorkerCount = 1000

func main() {
    // Launch workers.
    var wg sync.WaitGroup
    wg.Add(WorkerCount + 1)

    workers := make([]chan int, WorkerCount)
    for i := range workers {
        workers[i] = make(chan int)

        go func(i int) {
            worker(i, workers[i])
            wg.Done()
        }(i)
    }

    // Launch controller routine.
    go func() {
        controller(workers)
        wg.Done()
    }()

    // Wait for all goroutines to finish.
    wg.Wait()
}

func worker(id int, ws &lt;-chan int) {
    state := Paused // Begin in the paused state.

    for {
        select {
        case state = &lt;-ws:
            switch state {
            case Stopped:
                fmt.Printf(""Worker %d: Stopped\n"", id)
                return
            case Running:
                fmt.Printf(""Worker %d: Running\n"", id)
            case Paused:
                fmt.Printf(""Worker %d: Paused\n"", id)
            }

        default:
            // We use runtime.Gosched() to prevent a deadlock in this case.
            // It will not be needed of work is performed here which yields
            // to the scheduler.
            runtime.Gosched()

            if state == Paused {
                break
            }

            // Do actual work here.
        }
    }
}

// controller handles the current state of all workers. They can be
// instructed to be either running, paused or stopped entirely.
func controller(workers []chan int) {
    // Start workers
    for i := range workers {
        workers[i] &lt;- Running
    }

    // Pause workers.
    &lt;-time.After(1e9)
    for i := range workers {
        workers[i] &lt;- Paused
    }

    // Unpause workers.
    &lt;-time.After(1e9)
    for i := range workers {
        workers[i] &lt;- Running
    }

    // Shutdown workers.
    &lt;-time.After(1e9)
    for i := range workers {
        close(workers[i])
    }
}
</code></pre>

<p>But this code also has an issue: If you want to remove a worker channel in <code>workers</code> when <code>worker()</code> exits, dead lock happens.</p>

<p>If you <code>close(workers[i])</code>, next time controller writes into it will cause a panic since go can't write into a closed channel. If you use some mutex to protect it, then it will be stuck on <code>workers[i] &lt;- Running</code> since the <code>worker</code> is not reading anything from the channel and write will be blocked, and mutex will cause a dead lock. You can also give a bigger buffer to channel as a work-around, but it's not good enough.</p>

<p>So I think the best way to solve this is <code>worker()</code> close channel when exits, if the controller finds a channel closed, it will jump over it and do nothing. But I can't find how to check a channel is already closed or not in this situation. If I try to read the channel in controller, the controller might be blocked. So I'm very confused for now.</p>

<p>PS: Recovering the raised panic is what I have tried, but it will close goroutine which raised panic. In this case it will be controller so it's no use.</p>

<p>Still, I think it's useful for Go team to implement this function in next version of Go.</p>
","<p>In a hacky way it can be done for channels which one attempts to write to by recovering the raised panic. But you cannot check if a read channel is closed without reading from it.</p>

<p>Either you will</p>

<ul>
<li>eventually read the ""true"" value from it (<code>v &lt;- c</code>)</li>
<li>read the ""true"" value and 'not closed' indicator (<code>v, ok &lt;- c</code>)</li>
<li>read a zero value and the 'closed' indicator (<code>v, ok &lt;- c</code>)</li>
<li>will block in the channel read forever (<code>v &lt;- c</code>)</li>
</ul>

<p>Only the last one technically doesn't read from the channel, but that's of little use.</p>
","16105721"
"Go/Golang write log to file","45596","","<p>I'm trying to write to a log file with Golang.</p>

<p>I have tried several approaches, all of which have failed. This is what I have tried:</p>

<pre><code>func TestLogging(t *testing.T) {
    if !FileExists(""logfile"") {
        CreateFile(""logfile"")
    }
    f, err := os.Open(""logfile"")
    if err != nil {
        t.Fatalf(""error: %v"", err)
    }

    // attempt #1
    log.SetOutput(io.MultiWriter(os.Stderr, f))
    log.Println(""hello, logfile"")

    // attempt #2
    log.SetOutput(io.Writer(f))
    log.Println(""hello, logfile"")

    // attempt #3
    log.SetOutput(f)
    log.Println(""hello, logfile"")
}

func FileExists(name string) bool {
    if _, err := os.Stat(name); err != nil {
       if os.IsNotExist(err) {
            return false
        }
    }
    return true
}

func CreateFile(name string) error {
    fo, err := os.Create(name)
    if err != nil {
        return err
    }
    defer func() {
        fo.Close()
    }()
    return nil
}
</code></pre>

<p>The log file gets created, but nothing ever gets printed or appended to it. Why?</p>
","<p><code>os.Open()</code> must've worked differently in the past, but this works for me:</p>

<pre><code>f, err := os.OpenFile(""testlogfile"", os.O_RDWR | os.O_CREATE | os.O_APPEND, 0666)
if err != nil {
    t.Fatalf(""error opening file: %v"", err)
}
defer f.Close()

log.SetOutput(f)
log.Println(""This is a test log entry"")
</code></pre>

<p>Based on the Go docs, <code>os.Open()</code> can't work for <code>log.SetOutput</code></p>

<blockquote>
  <p><code>func Open</code></p>
  
  <p><code>func Open(name string) (file *File, err error)</code> <code>Open</code> opens the named
  file for reading. If successful, methods on the returned file can be
  used for reading; the associated file descriptor has mode <code>O_RDONLY</code>. If
  there is an error, it will be of type <code>*PathError</code>.</p>
</blockquote>

<p><strong>EDIT</strong></p>

<p>Moved <code>defer f.Close()</code> to after <code>if err != nil</code> check</p>
","19966217"
"How to join a Slice into a String?","45312","","<pre><code>package main

import (
""fmt""
""strings""
)

func main() {
reg := [...]string {""a"",""b"",""c""}
fmt.Println(strings.Join(reg,"",""))
}
</code></pre>

<p>gives me an error of:</p>

<blockquote>
  <p>prog.go:10: cannot use reg (type [3]string) as type []string in argument to strings.Join</p>
</blockquote>

<p>Is there a more direct/better way than looping and adding to a var?</p>
","<p>The title of your question is:</p>

<blockquote>
  <p>golang, trying to join a slice into a string</p>
</blockquote>

<p>but in fact, <code>reg</code> is <em>not</em> a slice, but a length-three array. <code>[...]string</code> is just syntactic sugar for (in this case) <code>[3]string</code>.</p>

<p>To get an actual slice, you should write:</p>

<pre><code>reg := []string {""a"",""b"",""c""}
</code></pre>

<p>(Try it out: <a href=""http://play.golang.org/p/vqU5VtDilJ"">http://play.golang.org/p/vqU5VtDilJ</a>.)</p>
","28799151"
"Date/time comparison in golang","45185","","<p>Is there any options in doing date comparison in Golang? I have to sort data based on date and time - independently. So I might allow an object that occurs within a range of dates so long as it also occurs within a range of times. In this model, I could not simply just select the oldest date, youngest time/latest date, latest time and Unix() seconds compare them. I'd really appreciate any suggestions.</p>

<p>Ultimately, I wrote a time parsing string compare module to check if a time is within a range. However, this is not faring to well; I've got some gaping issues. I'll post that here just for fun, but I'm hoping there's a better way to time compare.</p>

<pre><code>package main

import (
    ""strconv""
    ""strings""
)

func tryIndex(arr []string, index int, def string) string {
    if index &lt;= len(arr)-1 {
        return arr[index]
    }
    return def
}

/*
 * Takes two strings of format ""hh:mm:ss"" and compares them.
 * Takes a function to compare individual sections (split by "":"").
 * Note: strings can actually be formatted like ""h"", ""hh"", ""hh:m"",
 * ""hh:mm"", etc. Any missing parts will be added lazily.
 */
func timeCompare(a, b string, compare func(int, int) (bool, bool)) bool {
    aArr := strings.Split(a, "":"")
    bArr := strings.Split(b, "":"")
    // Catches margins.
    if (b == a) {
        return true
    }
    for i := range aArr {
        aI, _ := strconv.Atoi(tryIndex(aArr, i, ""00""))
        bI, _ := strconv.Atoi(tryIndex(bArr, i, ""00""))
        res, flag := compare(aI, bI)
        if res {
            return true
        } else if flag { // Needed to catch case where a &gt; b and a is the lower limit
            return false
        }
    }
    return false
}

func timeGreaterEqual(a, b int) (bool, bool) {return a &gt; b, a &lt; b}
func timeLesserEqual(a, b int) (bool, bool) {return a &lt; b, a &gt; b}

/*
 * Returns true for two strings formmated ""hh:mm:ss"".
 * Note: strings can actually be formatted like ""h"", ""hh"", ""hh:m"",
 * ""hh:mm"", etc. Any missing parts will be added lazily.
 */
func withinTime(timeRange, time string) bool {
    rArr := strings.Split(timeRange, ""-"")
    if timeCompare(rArr[0], rArr[1], timeLesserEqual) {
        afterStart := timeCompare(rArr[0], time, timeLesserEqual)
        beforeEnd := timeCompare(rArr[1], time, timeGreaterEqual)
        return afterStart &amp;&amp; beforeEnd
    }
    // Catch things like `timeRange := ""22:00:00-04:59:59""` which will happen
    // with UTC conversions from local time.
    // THIS IS THE BROKEN PART I BELIEVE
    afterStart := timeCompare(rArr[0], time, timeLesserEqual)
    beforeEnd := timeCompare(rArr[1], time, timeGreaterEqual)
    return afterStart || beforeEnd
}
</code></pre>

<p>So TLDR, I wrote a withinTimeRange(range, time) function but it's not working totally correctly. (In fact, mostly just the second case, where a time range crosses over days is broken. The original part worked, I just realized I'd need to account for that when making conversions to UTC from local.)</p>

<p>If there's a better (preferably built in) way, I'd love to hear about it!</p>

<p>NOTE:
Just as an example, I solved this issue in Javascript with this function:</p>

<pre><code>function withinTime(start, end, time) {
    var s = Date.parse(""01/01/2011 ""+start);
    var e = Date.parse(""01/0""+(end==""24:00:00""?""2"":""1"")+""/2011 ""+(end==""24:00:00""?""00:00:00"":end));
    var t = Date.parse(""01/01/2011 ""+time);
    return s &lt;= t &amp;&amp; e &gt;= t;
}
</code></pre>

<p>However I really want to do this filter server-side.</p>
","<p>Use the <a href=""https://golang.org/pkg/time/"">time</a> package to work with time information in Go.</p>

<p><a href=""https://play.golang.org/p/79tgQLCd9f"">Play</a> example:</p>

<pre><code>package main

import (
    ""fmt""
    ""time""
)

func inTimeSpan(start, end, check time.Time) bool {
    return check.After(start) &amp;&amp; check.Before(end)
}

func main() {
    start, _ := time.Parse(time.RFC822, ""01 Jan 15 10:00 UTC"")
    end, _ := time.Parse(time.RFC822, ""01 Jan 16 10:00 UTC"")

    in, _ := time.Parse(time.RFC822, ""01 Jan 15 20:00 UTC"")
    out, _ := time.Parse(time.RFC822, ""01 Jan 17 10:00 UTC"")

    if inTimeSpan(start, end, in) {
        fmt.Println(in, ""is between"", start, ""and"", end, ""."")
    }

    if !inTimeSpan(start, end, out) {
        fmt.Println(out, ""is not between"", start, ""and"", end, ""."")
    }
}
</code></pre>
","20924491"
"sort golang map values by keys","45106","","<p>When iterating through the returned map in the code, returned by the topic function, the keys are not appearing in order.</p>

<p>How can I get the keys to be in order / sort the map so that the keys are in order and the values correspond?</p>

<p>Here is <a href=""http://play.golang.org/p/5mhXcu7LFu"">the code</a>.</p>
","<p>The <a href=""http://blog.golang.org/go-maps-in-action#TOC_7."" rel=""noreferrer"">Go blog: Go maps in action</a> has an excellent explanation.</p>

<blockquote>
  <p>When iterating over a map with a range loop, the iteration order is
  not specified and is not guaranteed to be the same from one iteration
  to the next. Since Go 1 the runtime randomizes map iteration order, as
  programmers relied on the stable iteration order of the previous
  implementation. If you require a stable iteration order you must
  maintain a separate data structure that specifies that order.</p>
</blockquote>

<p>Here's my modified version of example code:
<a href=""http://play.golang.org/p/dvqcGPYy3-"" rel=""noreferrer"">http://play.golang.org/p/dvqcGPYy3-</a></p>

<pre><code>package main

import (
    ""fmt""
    ""sort""
)

func main() {
    // To create a map as input
    m := make(map[int]string)
    m[1] = ""a""
    m[2] = ""c""
    m[0] = ""b""

    // To store the keys in slice in sorted order
    var keys []int
    for k := range m {
        keys = append(keys, k)
    }
    sort.Ints(keys)

    // To perform the opertion you want
    for _, k := range keys {
        fmt.Println(""Key:"", k, ""Value:"", m[k])
    }
}
</code></pre>

<p>Output:</p>

<pre><code>Key: 0 Value: b
Key: 1 Value: a
Key: 2 Value: c
</code></pre>
","23332089"
"Correct way of getting Client's IP Addresses from http.Request (Golang)","43979","","<p>What's the correct way to get all client's IP Addresses from <code>http.Request</code>? In <code>PHP</code> there are a lot of <a href=""https://stackoverflow.com/questions/15699101/get-the-client-ip-address-using-php"">variables</a> that I should check. Is it the same on Go? </p>

<p>One that I found is:</p>

<pre><code>req.RemoteAddr
</code></pre>

<p>And is the request case sensitive? for example <code>x-forwarded-for</code> is the same as <code>X-Forwarded-For</code> and <code>X-FORWARDED-FOR</code>? (from <code>req.Header.Get(""X-FORWARDED-FOR"")</code>)</p>
","<p>Looking at <a href=""http://golang.org/pkg/net/http/#Request"" rel=""noreferrer"">http.Request</a> you can find the following member variables:</p>

<pre><code>// HTTP defines that header names are case-insensitive.
// The request parser implements this by canonicalizing the
// name, making the first character and any characters
// following a hyphen uppercase and the rest lowercase.
//
// For client requests certain headers are automatically
// added and may override values in Header.
//
// See the documentation for the Request.Write method.
Header Header

// RemoteAddr allows HTTP servers and other software to record
// the network address that sent the request, usually for
// logging. This field is not filled in by ReadRequest and
// has no defined format. The HTTP server in this package
// sets RemoteAddr to an ""IP:port"" address before invoking a
// handler.
// This field is ignored by the HTTP client.
RemoteAddr string
</code></pre>

<p>You can use <code>RemoteAddr</code> to get the remote client's IP address and port (the format is ""IP:port""), which is the address of the original requestor <em>or the last proxy</em> (for example a load balancer which lives in front of your server).</p>

<p>This is all you have for sure. </p>

<p>Then you can investigate the headers, which are <em>case-insensitive</em> (per documentation above), meaning all of your examples will work and yield the same result:</p>

<pre><code>req.Header.Get(""X-Forwarded-For"") // capitalisation
req.Header.Get(""x-forwarded-for"") // doesn't
req.Header.Get(""X-FORWARDED-FOR"") // matter
</code></pre>

<p>This is because internally <code>http.Header.Get</code> will normalise the key for you. (If you want to access header map directly, and not through <code>Get</code>, you would need to use <a href=""https://golang.org/pkg/net/http/#CanonicalHeaderKey"" rel=""noreferrer"">http.CanonicalHeaderKey</a> first.)</p>

<p>Finally, <code>""X-Forwarded-For""</code> is probably the field you want to take a look at in order to grab more information about client's IP. This greatly depends on the HTTP software used on the remote side though, as client can put anything in there if it wishes to. Also, note the <a href=""http://en.wikipedia.org/wiki/X-Forwarded-For#Format"" rel=""noreferrer""><em>expected</em> format</a> of this field is the comma+space separated list of IP addresses. You will need to parse it a little bit to get a single IP of your choice (probably the first one in the list), for example:</p>

<pre><code>// Assuming format is as expected
ips := strings.Split(""10.0.0.1, 10.0.0.2, 10.0.0.3"", "", "")
for _, ip := range ips {
    fmt.Println(ip)
}
</code></pre>

<p>will produce:</p>

<pre><code>10.0.0.1
10.0.0.2
10.0.0.3
</code></pre>
","27235620"
"Iterating through map in template","43693","","<p>I am trying to display a list gym classes (Yoga, Pilates etc). For each class type there are several classes, so I want to group all the Yoga classes, and all the Pilates classes and so on.</p>

<p>I made this function to take a slice and make a map of it</p>

<pre><code>func groupClasses(classes []entities.Class) map[string][]entities.Class {
    classMap := make(map[string][]entities.Class)
    for _, class := range classes {
        classMap[class.ClassType.Name] = append(classMap[class.ClassType.Name], class)
    }
    return classMap
}
</code></pre>

<p>The problem is now how can I iterate through it, according to <a href=""http://golang.org/pkg/text/template/"">http://golang.org/pkg/text/template/</a>, you need to access it in <code>.Key</code> format, I don't know the keys (unless I also passed a slice of keys into the template). How do I unpack this map in my view.</p>

<p>All I have currently is </p>

<pre><code>{{ . }} 
</code></pre>

<p>which displays something like:</p>

<pre><code>map[Pilates:[{102 PILATES ~/mobifit/video/ocen.mpg 169 40 2014-05-03 23:12:12 +0000 UTC 2014-05-03 23:12:12 +0000 UTC 1899-12-30 00:00:00 +0000 UTC {PILATES Pilates 1 2014-01-22 21:46:16 +0000 UTC} {1 leebrooks0@gmail.com password SUPERADMIN Lee Brooks {Male true} {1990-07-11 00:00:00 +0000 UTC true} {1.85 true} {88 true} 2014-01-22 21:46:16 +0000 UTC {0001-01-01 00:00:00 +0000 UTC false} {0001-01-01 00:00:00 +0000 UTC false} {0001-01-01 00:00:00 +0000 UTC false}} [{1 Mat 2014-01-22 21:46:16 +0000 UTC}]} {70 PILATES ~/mobifit/video/ocen.mpg 119 66 2014-03-31 15:12:12 +0000 UTC 2014-03-31 15:12:12 +0000 UTC 1899-12-30 00:00:00 +0000 UTC 
</code></pre>
","<p>Check the <a href=""http://golang.org/pkg/text/template/#hdr-Variables"">Variables section</a> in the Go template docs. A range may declare two variables, separated by a comma. The following should work:</p>

<pre><code>{{ range $key, $value := . }}
   &lt;li&gt;&lt;strong&gt;{{ $key }}&lt;/strong&gt;: {{ $value }}&lt;/li&gt;
{{ end }}
</code></pre>
","21302864"
"How are people managing authentication in Go?","43657","","<p>For those building RESTful APIs and JS front-end apps in Go, how are you managing authentication? Are you using any particular libraries or techniques?</p>

<p>I'm surprised to find so little discussion about this. I keep in mind answers like the following, and am trying to avoid developing my own implementation:</p>

<p><a href=""https://stackoverflow.com/questions/20062103/authentication-in/20062137#20062137"">Authentication Form in ASP.Net</a></p>

<p>Is everybody coding their own solution, separately?</p>
","<p>This question gets a ton of views--and has a Popular Question badge--so I know there is a lot of latent interest in this topic, and many people are asking exactly the same thing and not finding answers on the Interwebs.</p>

<p>Most of the available information results in the textual equivalent of the hand wavy thing, left as an ""exercise for the reader."" ;)</p>

<p>However I've finally located one concrete example, (generously) provided by a member of the golang-nuts mailing list:</p>

<p><a href=""https://groups.google.com/forum/#!msg/golang-nuts/GE7a_5C5kbA/fdSnH41pOPYJ"">https://groups.google.com/forum/#!msg/golang-nuts/GE7a_5C5kbA/fdSnH41pOPYJ</a></p>

<p>This provides a suggested schema and server-side implementation as a basis for custom authentication. The client-side code is still up to you.</p>

<p>(I hope the author of the post sees this: Thanks!)</p>

<p>Excerpted (and reformatted):</p>

<hr>

<p>""I would suggest something like the following design:</p>

<pre><code>create table User (
 ID int primary key identity(1,1),
 Username text,
 FullName text,
 PasswordHash text,
 PasswordSalt text,
 IsDisabled bool
)

create table UserSession (
 SessionKey text primary key,
 UserID int not null, -- Could have a hard ""references User""
 LoginTime &lt;time type&gt; not null,
 LastSeenTime &lt;time type&gt; not null
)
</code></pre>

<ul>
<li>When a user logs in to your site via a POST under TLS, determine if the password is valid.</li>
<li>Then issue a random session key, say 50 or more crypto rand characters and stuff in a secure Cookie.</li>
<li>Add that session key to the UserSession table.</li>
<li>Then when you see that user again, first hit the UserSession table to see if the SessionKey is in there with a valid LoginTime and LastSeenTime and User is not deleted. You could design it so a timer automatically clears out old rows in UserSession.""</li>
</ul>
","27470944"
"Go, Golang, formatFloat : convert float number to string","43137","","<p><a href=""http://golang.org/pkg/strconv/"">http://golang.org/pkg/strconv/</a></p>

<p><a href=""http://play.golang.org/p/4VNRgW8WoB"">http://play.golang.org/p/4VNRgW8WoB</a></p>

<p>How do I convert a float number into string format?
This is google playground but not getting the expected output. (2e+07)
I want to get ""21312421.213123""</p>

<pre><code>package main

import ""fmt""
import ""strconv""

func floattostr(input_num float64) string {

        // to convert a float number to a string
    return strconv.FormatFloat(input_num, 'g', 1, 64)
 }

 func main() {
      fmt.Println(floattostr(21312421.213123))
      // what I expect is ""21312421.213123"" in string format
 }
</code></pre>

<p>Please help me get the string out of float number. Thanks</p>
","<p><a href=""http://play.golang.org/p/xv7-YGF_cf"">Try this</a></p>

<pre><code>package main

import ""fmt""
import ""strconv""

func FloatToString(input_num float64) string {
    // to convert a float number to a string
    return strconv.FormatFloat(input_num, 'f', 6, 64)
}

func main() {
    fmt.Println(FloatToString(21312421.213123))
}
</code></pre>

<p>If you just want as many digits precision as possible, then the special precision -1 uses the smallest number of digits necessary such that ParseFloat will return f exactly. Eg</p>

<pre><code>strconv.FormatFloat(input_num, 'f', -1, 64)
</code></pre>

<p>Personally I find <code>fmt</code> easier to use.  (<a href=""http://play.golang.org/p/_IbJZZVlyl"">Playground link</a>)</p>

<pre><code>fmt.Printf(""x = %.6f\n"", 21312421.213123)
</code></pre>

<p>Or if you just want to convert the string</p>

<pre><code>fmt.Sprintf(""%.6f"", 21312421.213123)
</code></pre>
","19101700"
"How does Go update third-party packages?","42990","","<p>Looking how actively golang packages grow and improve I wonder how the problem with package versions is solved?</p>

<p>I see that one way is to store third-party packages under a project folder.</p>

<p>But what if I install it with <code>go get</code>?</p>
","<p><code>go get</code> will install the package in the first directory listed at <code>GOPATH</code> (an environment variable which might contain a colon separated list of directories). You can use <code>go get -u</code> to update existing packages.</p>

<p>You can also use <code>go get -u all</code> to update all packages in your <code>GOPATH</code></p>

<p>For larger projects, it might be reasonable to create different GOPATHs for each project, so that updating a library in project A wont cause issues in project B.</p>

<p>Type <code>go help gopath</code> to find out more about the <code>GOPATH</code> environment variable.</p>
","10383783"
"Golang application auto build versioning","42791","","<p>Is it possible to increment a minor version number automatically each time a Go app is compiled?</p>

<p>I would like to set a version number inside my program, with an autoincrementing section:</p>

<pre><code>$ myapp -version
MyApp version 0.5.132
</code></pre>

<p>Being 0.5 the version number I set, and 132 a value that increments automatically each time the binary is compiled.</p>

<p>Is this possible in Go?</p>
","<p>The Go linker (<a href=""http://golang.org/cmd/link/"" rel=""noreferrer"">go tool link</a>) has an option to set the value of an uninitialised string variable:</p>

<pre><code>-X importpath.name=value
    Set the value of the string variable in importpath named name to value.
    Note that before Go 1.5 this option took two separate arguments.
    Now it takes one argument split on the first = sign.
</code></pre>

<p>As part of your build process, you could set a version string variable using this. You can pass this through the <code>go</code> tool using <code>-ldflags</code>. For example, given the following source file:</p>

<pre><code>package main

import ""fmt""

var xyz string

func main() {
    fmt.Println(xyz)
}
</code></pre>

<p>Then:</p>

<pre><code>$ go run -ldflags ""-X main.xyz=abc"" main.go
abc
</code></pre>

<p>In order to set <code>main.minversion</code> to the build date and time when building:</p>

<pre><code>go build -ldflags ""-X main.minversion=`date -u +.%Y%m%d.%H%M%S`"" service.go
</code></pre>

<p>If you compile without initializing <code>main.minversion</code> in this way, it will contain the empty string.</p>
","11355611"
"One-liner if else statement","42643","","<p>Can I write a simple if-else statement with variable assignment in go (golang) as I would do in php (for example):</p>

<pre><code>$var = ( $a &gt; $b )? $a: $b;
</code></pre>

<p>currently I have to use the following:</p>

<pre><code>var c int
if a &gt; b {
    c = a
} else {
    c = b
}
</code></pre>

<p>Sorry I can not remember the name if this control statement and I couldn't find the info through in-site and google search. :/</p>
","<p>As the comments mentioned, Go doesn't support ternary one liners. The shortest form I can think of is this:</p>

<pre><code>var c int
if c = b; a &gt; b {
    c = a
}
</code></pre>
","26546039"
"Map with concurrent access","42060","","<p>When you use a map in a program with concurrent access, is there any need to use a mutex in functions to <strong>read</strong> values?</p>
","<p>Multiple readers, no writers is okay:</p>

<p><a href=""https://groups.google.com/d/msg/golang-nuts/HpLWnGTp-n8/hyUYmnWJqiQJ"">https://groups.google.com/d/msg/golang-nuts/HpLWnGTp-n8/hyUYmnWJqiQJ</a></p>

<p>One writer, no readers is okay.  (Maps wouldn't be much good otherwise.)</p>

<p>Otherwise, if there is at least one writer and at least one more either writer or reader, then <strong>all</strong> readers <strong>and</strong> writers must use synchronization to access the map.  A mutex works fine for this.</p>
","11063566"
"Go: multiple value in single-value context","41804","","<p>Due to error handling in Go, I often end up with multiple values functions. So far, the way I have managed this has been very messy and I am looking for best practices to write cleaner code.</p>

<p>Let's say I have the following function:</p>

<pre><code>type Item struct {
   Value int
   Name string
}

func Get(value int) (Item, error) {
  // some code

  return item, nil
}
</code></pre>

<p>How can I assign a new variable to <code>item.Value</code> elegantly. Before introducing the error handling, my function just returned <code>item</code> and I could simply do this:</p>

<pre><code>val := Get(1).Value
</code></pre>

<p>Now I do this:</p>

<pre><code>item, _ := Get(1)
val := item.Value
</code></pre>

<p>Isn't there a way to access directly the first returned variable?</p>

<p>Many thanks</p>
","<p>In case of a multi-value return function you can't refer to fields or methods of a specific value of the result when calling the function.</p>

<p>And if one of them is an <code>error</code>, it's there for a <em>reason</em> (which is the function <em>might</em> fail) and you should <em>not</em> bypass it because if you do, your subsequent code <em>might</em> also fail miserably (e.g. resulting in runtime panic).</p>

<p>However there might be situations where you <em>know</em> the code will not fail in any circumstances. In these cases you can provide a <em>helper</em> function (or method) which will discard the <code>error</code> (or raise a runtime panic if it still occurs).<br>
This can be the case if you provide the input values for a function from code, and you know they work.<br>
Great examples of this are the <a href=""http://golang.org/pkg/text/template/""><code>template</code></a> and <a href=""http://golang.org/pkg/regexp/""><code>regexp</code></a> packages: if you provide a valid template or regexp at compile time, you can be sure they can always be parsed without errors at runtime. For this reason the <code>template</code> package provides the <a href=""http://golang.org/pkg/text/template/#Must""><code>Must(t *Template, err error) *Template</code></a> function and the <code>regexp</code> package provides the <a href=""http://golang.org/pkg/regexp/#MustCompile""><code>MustCompile(str string) *Regexp</code></a> function: they don't return <code>error</code>s because their intended use is where the input is guaranteed to be valid.</p>

<p>Examples:</p>

<pre><code>// ""text"" is a valid template, parsing it will not fail
var t = template.Must(template.New(""name"").Parse(""text""))

// `^[a-z]+\[[0-9]+\]$` is a valid regexp, always compiles
var validID = regexp.MustCompile(`^[a-z]+\[[0-9]+\]$`)
</code></pre>

<h2>Back to your case</h2>

<p><em>IF</em> you can be certain <code>Get()</code> will not produce <code>error</code> for certain input values, you can create a helper <code>Must()</code> function which would not return the <code>error</code> but raise a runtime panic if it still occurs:</p>

<pre><code>func Must(i Item, err error) Item {
    if err != nil {
        panic(err)
    }
    return i
}
</code></pre>

<p>But you should not use this in all cases, just when you're sure it succeeds. Usage:</p>

<pre><code>val := Must(Get(1)).Value
</code></pre>

<p><strong>Alternative / Simplification</strong></p>

<p>You can even simplify it further if you incorporate the <code>Get()</code> call into your helper function, let's call it <code>MustGet</code>:</p>

<pre><code>func MustGet(value int) Item {
    i, err := Get(value)
    if err != nil {
        panic(err)
    }
    return i
}
</code></pre>

<p>Usage:</p>

<pre><code>val := MustGet(1).Value
</code></pre>
","28233172"
"Using reflect, how do you set the value of a struct field?","41272","","<p>having a rough time working with struct fields using <code>reflect</code> package.  in particular, have not figured out how to set the field value.</p>

<pre>
type t struct { fi int; fs string }
var r t = t{ 123, ""jblow"" }
var i64 int64 = 456
</pre>

<ol>
<li><p>getting Name of field i - this seems to work</p>

<p><code>var field = reflect.TypeOf(r).Field(i).Name</code></p></li>
<li><p>getting value of field i as a) interface{}, b) int - this seems to work</p>

<p><code>var iface interface{} = reflect.ValueOf(r).Field(i).Interface()</code></p>

<p><code>var i int = int(reflect.ValueOf(r).Field(i).Int())</code></p></li>
<li><p>setting value of field i - try one - panic</p>

<p><code>reflect.ValueOf(r).Field(i).SetInt( i64 )</code></p>

<p><em>panic</em>: reflect.Value·SetInt using value obtained using unexported field</p>

<p>assuming it did not like field names ""id"" and ""name"", so renamed to ""Id"" and ""Name""</p>

<p>a) is this assumption correct?</p>

<p>b) if correct, thought not necessary since in same file / package</p></li>
<li><p>setting value of field i - try two (with field names capitalized ) - panic</p>

<p><code>reflect.ValueOf(r).Field(i).SetInt( 465 )</code></p>

<p><code>reflect.ValueOf(r).Field(i).SetInt( i64 )</code></p>

<p><em>panic</em>: reflect.Value·SetInt using unaddressable value</p></li>
</ol>

<hr />

<p>Instructions below by @peterSO are thorough and high quality</p>

<p>Four. this works:</p>

<p><code>reflect.ValueOf(&amp;r).Elem().Field(i).SetInt( i64 )</code></p>

<p>he documents as well that the field names must be exportable (begin with capital letter)</p>
","<p>Go is available as <a href=""http://code.google.com/p/go/source/browse/"" rel=""noreferrer"">open source code</a>. A good way to learn about reflection is to see how the core Go developers use it. For example, the Go <a href=""http://golang.org/pkg/fmt/"" rel=""noreferrer"">fmt</a> and <a href=""http://golang.org/pkg/json/"" rel=""noreferrer"">json</a> packages. The package documentation has links to the source code files under the heading Package files.</p>

<p>The Go json package marshals and unmarshals JSON from and to Go structures.</p>

<hr>

<p>Here's a step-by-step example which sets the value of a <code>struct</code> field while carefully avoiding errors.</p>

<p>The Go <a href=""http://golang.org/pkg/reflect/"" rel=""noreferrer""><code>reflect</code></a> package has a <a href=""http://golang.org/pkg/reflect/#Value.CanAddr"" rel=""noreferrer""><code>CanAddr</code></a> function.</p>

<pre><code>func (v Value) CanAddr() bool
</code></pre>

<blockquote>
  <p>CanAddr returns true if the value's
  address can be obtained with Addr.
  Such values are called addressable. A
  value is addressable if it is an
  element of a slice, an element of an
  addressable array, a field of an
  addressable struct, or the result of
  dereferencing a pointer. If CanAddr
  returns false, calling Addr will
  panic.</p>
</blockquote>

<p>The Go <a href=""http://golang.org/pkg/reflect/"" rel=""noreferrer""><code>reflect</code></a> package has a <a href=""http://golang.org/pkg/reflect/#Value.CanSet"" rel=""noreferrer""><code>CanSet</code></a> function, which, if <code>true</code>, implies that <code>CanAddr</code> is also <code>true</code>.</p>

<pre><code>func (v Value) CanSet() bool
</code></pre>

<blockquote>
  <p>CanSet returns true if the value of v
  can be changed. A Value can be changed
  only if it is addressable and was not
  obtained by the use of unexported
  struct fields. If CanSet returns
  false, calling Set or any
  type-specific setter (e.g., SetBool,
  SetInt64) will panic.</p>
</blockquote>

<p>We need to make sure we can <code>Set</code> the <code>struct</code> field. For example,</p>

<pre><code>package main

import (
    ""fmt""
    ""reflect""
)

func main() {
    type t struct {
        N int
    }
    var n = t{42}
    // N at start
    fmt.Println(n.N)
    // pointer to struct - addressable
    ps := reflect.ValueOf(&amp;n)
    // struct
    s := ps.Elem()
    if s.Kind() == reflect.Struct {
        // exported field
        f := s.FieldByName(""N"")
        if f.IsValid() {
            // A Value can be changed only if it is 
            // addressable and was not obtained by 
            // the use of unexported struct fields.
            if f.CanSet() {
                // change value of N
                if f.Kind() == reflect.Int {
                    x := int64(7)
                    if !f.OverflowInt(x) {
                        f.SetInt(x)
                    }
                }
            }
        }
    }
    // N at end
    fmt.Println(n.N)
}

Output:
42
7
</code></pre>

<p>If we can be certain that all the error checks are unnecessary, the example simplifies to,</p>

<pre><code>package main

import (
    ""fmt""
    ""reflect""
)

func main() {
    type t struct {
        N int
    }
    var n = t{42}
    fmt.Println(n.N)
    reflect.ValueOf(&amp;n).Elem().FieldByName(""N"").SetInt(7)
    fmt.Println(n.N)
}
</code></pre>
","6396678"
"GOBIN not set: cannot run go install","41227","","<p>I am trying to install my custom package for my main.go file. However, when I ran</p>

<pre><code>go install custom.go
</code></pre>

<p>I got this error</p>

<pre><code>go install: no install location for .go files listed on command line (GOBIN not set)
</code></pre>

<p>How do I set GOBIN?</p>
","<p>Check your <code>GOPATH</code> variable.<br>
Make sure:</p>

<blockquote>
  <ul>
  <li>your sources are under <code>GOPATH/src</code></li>
  <li>you have a <code>bin</code> folder within your GOPATH folder.</li>
  </ul>
</blockquote>

<p>See <a href=""https://golang.org/cmd/go/#hdr-GOPATH_environment_variable"" rel=""noreferrer"">GOPATH environment variable</a> (where 'DIR' is a <code>GOPATH</code> folder):</p>

<blockquote>
  <p>The <code>bin</code> directory holds compiled commands.<br>
  Each command is named for its source directory, but only the final element, not the entire path. That is, the command with source in <code>DIR/src/foo/quux</code> is installed into <code>DIR/bin/quux</code>, not <code>DIR/bin/foo/quux</code>. The ""<code>foo/</code>"" prefix is stripped so that you can add <code>DIR/bin</code> to your <code>PATH</code> to get at the installed commands. </p>
  
  <p>If the <code>GOBIN</code> environment variable is set, commands are installed to the directory it names instead of <code>DIR/bin</code>. <code>GOBIN</code> must be an absolute path. </p>
</blockquote>

<hr>

<p>For instance, <a href=""https://groups.google.com/forum/#!topic/golang-nuts/J5NP0Y6nnYE"" rel=""noreferrer"">this thread</a> illustrates what happen in the case where a go build is done outside of <code>GOPATH/src</code>:</p>

<blockquote>
  <p>Looks like your <code>GOPATH</code> is set to <code>~/go</code> but you ran the <code>go install</code> command on <code>~/dev/go</code></p>
</blockquote>

<p>See <a href=""http://golang.org/pkg/go/build/"" rel=""noreferrer"">Go Build</a></p>

<blockquote>
  <p>The Go path is a list of directory trees containing Go source code. It is consulted to resolve imports that cannot be found in the standard Go tree.</p>
</blockquote>

<p>If you have done <code>go build</code>, you can also try a <code>go install</code> (no <code>custom.go</code>): you want to install the package, not a single file.</p>
","25216795"
"Iterating through a golang map","41194","","<p>I have a map of type: <code>map[string]interface{}</code></p>

<p>And finally, I get to create something like (after deserializing from a yml file using goyaml)</p>

<pre><code>mymap = map[foo:map[first: 1] boo: map[second: 2]]
</code></pre>

<p>How can I iterate through this map? I tried the following:</p>

<pre><code>for k, v := range mymap{
...
}
</code></pre>

<p>But I get an error:</p>

<pre><code>cannot range over mymap
typechecking loop involving for loop
</code></pre>

<p>Please help.</p>
","<p>For example,</p>

<pre><code>package main

import ""fmt""

func main() {
    type Map1 map[string]interface{}
    type Map2 map[string]int
    m := Map1{""foo"": Map2{""first"": 1}, ""boo"": Map2{""second"": 2}}
    //m = map[foo:map[first: 1] boo: map[second: 2]]
    fmt.Println(""m:"", m)
    for k, v := range m {
        fmt.Println(""k:"", k, ""v:"", v)
    }
}
</code></pre>

<p>Output:</p>

<pre><code>m: map[boo:map[second:2] foo:map[first:1]]
k: boo v: map[second:2]
k: foo v: map[first:1]
</code></pre>
","8018909"
"How to set headers in http get request?","41114","","<p>I'm doing a simple http GET in Go:</p>

<pre><code>client := &amp;http.Client{}
req, _ := http.NewRequest(""GET"", url, nil)
res, _ := client.Do(req)
</code></pre>

<p>But I can't found a way to customize the request header in the <a href=""http://golang.org/pkg/net/http/"" rel=""noreferrer"">doc</a>, thanks</p>
","<p>The <code>Header</code> field of the Request is public. You may do this :</p>

<pre><code>req.Header.Set(""name"", ""value"")
</code></pre>
","12864342"
"json: cannot unmarshal object into Go value of type","41066","","<p>I can't decode the json code below ... any ideas why it doesn't work ? See also <a href=""http://play.golang.org/p/kkemTA5YTL"">play.golang</a></p>

<pre><code>    package main

    import (
        ""encoding/json""

    )

    type LocationReadable struct {
        District string
        City     string
        State    string
    }

    type Locale struct {
        Location         string
        CountryCode      string
        CurrencyId       string
        CurrencySymbol   string
        LocationReadable LocationReadable
    }

    type Media struct {
        Image string
        Video string
    }

    type Variations struct {
        FixedPrice float64
        Media      Media
        Quantity   int
    }

    type PaymentData struct {
        PaymentName    string
        PaymentService string
    }

    type Payment struct {
        Online  PaymentData
        Offline PaymentData
    }

    type Shipping struct {
        ShippingService        string
        ShippingName           string
        ShippingCost           float64
        HandlingTimeMax        int
        DispatchTimeMin        int
        DispatchTimeMax        int
        ShippingAdditionalCost int
    }
    type Item []struct {
        _version    string
        CategoryId  string
        Title       string
        Media       Media
        SellerId    string
        Locale      Locale
        ListingType string
        Payment     Payment
        StartTime   string
        EndTime     string
        Shipping    Shipping
        TitleSlug   string
        Variations  Variations
        _fpaiStatus string
    }
    func main(){
     itemInfoR := `{""locale"":{""location"":""51.51121389999999,-0.11982439999997041"",""countryCode"":""GB"",""currencyId"":""GBP"",""currencySymbol"":""Â£"",""locationReadable"":{""district"":""City of Westminster"",""city"":""London"",""state"":""Greater London""}},""_version"":""serving"",""categoryId"":[""Root"",""Cameras \u0026 Photo"",""Digital Cameras""],""title"":""many pictures"",""media"":{""image"":[""//lh5.ggpht.com/O_o_N6CFkClY5AV0-LqntpyFjor7Of4u23ZcK7lYwc2uY1ea7GWi61VDJZCB7UCb79svkjKPHIenqwEUhjHi0jdIQnnl6z_p03yktPUB1FBHezIQ"",""//lh6.ggpht.com/ih3q2d7CenGLPyupH9FpfsoJQWQpw1i8wWA2Kd26bFnSF2fbnKyGU9WePIhCgEeqw5p6YMVmFi1c9oS0Ag93aF_oZ3ZiwK7fQuSYIrZ9VhgXbrTHkw"",""//lh6.ggpht.com/7RJRsapsnwWL3_KiLIjMz4QojDzUvsztXtvKTFvIfde_AHccDnOibAvXRN73tTB4SeHzlj8S1LWxbYwwWFGn9elfCKdSb8BUIU5QJY1LO791HutQ"",""//lh6.ggpht.com/qAtjgyHAB734Ox_4NC_fa-ZRqrCjCmJu0Tp8bo-HMO88duv8l4hhuv2REBkB--yneFzOL7annecVlGty-YsKouondiOFVnAZWzjpdrfsGfbL6wh2"",""//lh3.ggpht.com/dWUbASepwHF4lHaXIPnpv4BNm2pCml9MlJt7s86s1cpu-PsYNmS0yQmKFKTM38q_oMLW_YJMJ19civ2gVViKAGYcZylRW7jN3w77AJvhzS6JE2g"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw"",""//lh4.ggpht.com/Y23DqORrVkM2m55f-rq5_BBrlkvQg4uX7AsAt-ixhMobjK_SFgFaDfktgLhkNsyKwSr9HcF8iiGY3Nw0xOKXG1sn6wyAWg_qsolmKjVOrM5V5mIR"",""//lh6.ggpht.com/mQ62Ly-DjMKPMzU1OcSPJ7SLBqym0uBjawlkTHfmb-HOKaD56dnitk1duwPFJVdbi0GUpd63RQvr2VMpHp6S1OQ3di-hq4-JPeRoS5FJzksXSvW_"",""//lh3.ggpht.com/dqWjWPcNsvlR1tMC_agizX19f9MDiNGWFYTYVn4kjJxzIIkEe0mLzNcvS62zVJxAOaitT-IgaUfZ-Ze23BgzbqYY-l600i_LbVe35Uinz6sXIyoB"",""//lh6.ggpht.com/xhSdFc9uHgghs_6gf3seUWYM-PG2oLmjTrpF7ptEEMqaIrQIa8VPfC6tXE7f3M13eZvDXYqMW_k0AHO5vwCEPNp-iObixskd_lBaKNfz3MH3SNQ"",""//lh5.ggpht.com/kYeoKPoZGJCow-G1FhnD8kzVjNjbQA8-Kyj8eAh0HL-fMZX9tTeFPQikTZdSU0kks4-5Ui54cZF2CjGut9vfMJAVDKIq3T-bAQewCxvfl2120tH5zQ"",""//lh5.ggpht.com/4qUl3d-G9EPBzcYKrimNsWhQw7CmONV0jgfVhxFgB9mEU_QLRCyNJTWs2A3xf6wc7AUF2DXrKEkoX-SNLMZ6s-O4aXXV9WOjOPcWdAYreMRBld0E"",""//lh5.ggpht.com/z-0C4G6EWYkelAF1LjPfl_UQcsp92H4joIPt8NfsOl0nPJ2VpzZYahWadKqTLfl6kq3C6aDBcwfGQyMWSozYoZIAOAW0yRvZrwxia321PlsKTxbZ"",""//lh4.ggpht.com/U7I12JrDYmMC_pUXpw8DVBjBilU67BvbM8qT8gJE0bQfkhHo7FOdMttiz3syP5IR-LyO4J1WBlfmZjvMjRr4GIBt4o3Vqp-hKz7q2_OGwGtsN5s"",""//lh3.ggpht.com/fF2XWEtqG23ybhzClhC_p8gvKJalf1vg7k3H7UkuAaIVubil7EgOvJUCwAZk2KiCtlPYp1E5Ep2xaxZjJRmg5EFSEAjqlMHJS_Wd1Bcje6xre4s"",""//lh3.ggpht.com/jgOebMihBoIZvHE4EOklJvZ_k-9egjNIlUKfKFcLkvXJs8g2FXjPvdFUbwqGrkHrMtyis8uOvgt-E51Vm11hq4bieh7h0cegca0VI4vFtFaAemU"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg"",""//lh6.ggpht.com/SyIS5sGOkTG7k_jFF14wzH9Evrblv6o4pHBI6z6X070-xhAeyut_kRO6xHtDID4KLcWFvItjQy-plPcJ6K1T9tlFOrtaryEPvuAYdMVx8e0TTw"",""//lh6.ggpht.com/2Pp9kLYFhDT3USwHinU5OxnzcWWOLI0nOWe29gOD5KMzyEcXoHkTN-AutJV9M8F_9eqAP379XB9O1d0BWPanhr-MguzKxfHeUvYTs6yHzDkxyfe0NA"",""//lh4.ggpht.com/7aofqklSkF3AMDfF19yqsA9J3EfEiKy1NdOelEGKNnW0Cv5tGEpq2PF_jZO1MVoBbrrmVVRv0Tdq7I8KyZbIlyHdbTs1jMl7dEFqVMvsPcyaORyHlQ"",""//lh4.ggpht.com/anYJHqkMCkuhmIHQTBspLtWcDTyx1ZRe84_q5pAgVEOVmsKkaKhS725N4YFoj2zpJrBP7iTC2vf1GUtrp6H7kkm8c1k6zkW6I_Gf5f9A3re_I8Ex"",""//lh3.ggpht.com/OtSw0rU-DvfoXgoWrQdkln6Kz7O14TF9qrPNJSGJnZLeDqUEctOn1DT09pdwwVpNQV-cXmVYQL-PX4XPhpZLWH1ciSkVT6WHNmTz1D9pHphBwJUv"",""//lh3.ggpht.com/cTCZnXPIjI-EO2bvQdLgeoSLOSlMFcv805n347Zyci9XDYUdcVDC_5H7SFVYDr4pC5HtQDYnrOHL6AinLW7hWtfSCLlvVhVUNQ-DlDn0NwZ-1iCO-g"",""//lh4.ggpht.com/i-mL_JcF9rwjQq6HnuKzuAHU41_UGxQ62IOPZvaDrATXaPFbhe-EbT7ZIpboyNA5PXRCsxNsZ9hu58edRvNs5ScgKN8Lg-00J2LhlwMAbdEsv7b0nw"",""//lh6.ggpht.com/D_YV2BG1WWwl67xNloP3sxzRkqhcVTgJi58L-A8nLrOcMR_tBqLz4fHEGQ-qiNcG_-32MNy3dlSPWrTBKzBcweJxgMnRVet5yuGfelUlwehDtXX_3w""],""video"":[]},""sellerId"":""mihai"",""listingType"":""fixedPrice"",""payment"":{""online"":[{""paymentName"":""PayPal"",""paymentService"":""paypal""}],""offline"":[{""paymentName"":""Pay on Pick-up"",""paymentService"":""payOnPickup""}]},""startTime"":""2014-01-04T10:02:18+00:00"",""endTime"":""2014-04-04T10:02:18+00:00"",""shipping"":[{""shippingService"":""economy"",""shippingName"":""Economy"",""shippingCost"":1.0,""handlingTimeMax"":4,""dispatchTimeMin"":1,""dispatchTimeMax"":10,""shippingAdditionalCost"":""2""},{""shippingService"":""localPickup"",""shippingName"":""Local Pick-Up"",""shippingCost"":0.0,""handlingTimeMax"":2,""dispatchTimeMin"":0,""dispatchTimeMax"":0,""shippingAdditionalCost"":""0""}],""titleSlug"":""many-pictures"",""variations"":[{""fixedPrice"":222999.0,""media"":{""image"":[""//lh6.ggpht.com/ih3q2d7CenGLPyupH9FpfsoJQWQpw1i8wWA2Kd26bFnSF2fbnKyGU9WePIhCgEeqw5p6YMVmFi1c9oS0Ag93aF_oZ3ZiwK7fQuSYIrZ9VhgXbrTHkw"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw""],""video"":[]},""quantity"":1121,""Brand"":""Bell \u0026 Howell""},{""fixedPrice"":211.0,""media"":{""image"":[""//lh6.ggpht.com/qAtjgyHAB734Ox_4NC_fa-ZRqrCjCmJu0Tp8bo-HMO88duv8l4hhuv2REBkB--yneFzOL7annecVlGty-YsKouondiOFVnAZWzjpdrfsGfbL6wh2"",""//lh3.ggpht.com/FG_QXZPHJ2tTYwI_t5Fg1KqivglVg9RlJn0JRsu9Ox8vJ7IcBirb2IV_I1LL_WVOMxfTuBBSDLMlrw9v0MCAdmnPCR29sCbRGjhm6zEfIH-3q2QSdw"",""//lh6.ggpht.com/9aXLmPRVeZnxkwvNb3mWTF8kvfEY_lho_lOVVc9AbNqLb8GQmiS_XXVZ3OKqMv2pxgYSayMYPPRh6ACYyh0H8KtS8mPD6MKUkEajwxkTtp5Q4Lo"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg""],""video"":[]},""quantity"":2,""Brand"":""Fujifilm""},{""fixedPrice"":22.0,""media"":{""image"":[""//lh3.ggpht.com/jgOebMihBoIZvHE4EOklJvZ_k-9egjNIlUKfKFcLkvXJs8g2FXjPvdFUbwqGrkHrMtyis8uOvgt-E51Vm11hq4bieh7h0cegca0VI4vFtFaAemU"",""//lh3.ggpht.com/MOrI-zKNMNrQE_aHj5hzbojP3T0hEMJKK6K8UO3e1NBC-nkcQeIM1QnvtJdT_G-W4e7-qv4BiqwdWcNHBpZXOmmX3tcuYEV8u_ANEoa9_aUIfeyg"",""//lh4.ggpht.com/anYJHqkMCkuhmIHQTBspLtWcDTyx1ZRe84_q5pAgVEOVmsKkaKhS725N4YFoj2zpJrBP7iTC2vf1GUtrp6H7kkm8c1k6zkW6I_Gf5f9A3re_I8Ex""],""video"":[]},""quantity"":12,""Brand"":""Gateway""}],""_fpaiStatus"":""published""}`
    itemInfoBytes := []byte(itemInfoR)
var ItemInfo Item
        er := json.Unmarshal(itemInfoBytes, &amp;ItemInfo)
            if er != nil {
                panic(er)
            }

        }
</code></pre>
","<p>Here's a fixed version of it: <a href=""http://play.golang.org/p/w2ZcOzGHKR"" rel=""noreferrer"">http://play.golang.org/p/w2ZcOzGHKR</a></p>

<p>There were lots of little mistakes. The fundamental problem though was just that when you're Unmarshalling an array, the property needs to be an array/slice in the struct as well.</p>

<p>For example:</p>

<pre><code>{ ""things"": [""a"", ""b"", ""c""] }
</code></pre>

<p>Would Unmarshal into a:</p>

<pre><code>type Item struct {
    Things []string
}
</code></pre>

<p>And <em>not</em> into:</p>

<pre><code>type Item struct {
    Things string
}
</code></pre>

<p>The other thing to watch out for when Unmarshaling is that your types line up correctly. It may fail e.g. when trying to Unmarshal a JSON string representation of a number into an <code>int</code> or <code>float</code> field. <code>""1""</code> needs to Unmarshal into a <code>string</code>, <em>not</em> into an <code>int</code> like you had tried to do with <code>ShippingAdditionalCost int</code></p>
","21832356"
"Go array initialization","40934","","<pre><code>func identityMat4() [16]float {
    return {
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1 }
}
</code></pre>

<p>I hope you get the idea of what I'm trying todo from the example. How do I do this is Go?</p>
","<pre><code>func identityMat4() [16]float64 {
    return [...]float64{
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1 }
}
</code></pre>

<p>(<a href=""http://play.golang.org/p/zkqiK1dSPA"" rel=""noreferrer"">Click to play</a>)</p>
","4730222"
"How do I do a case insensitive regular expression in Go?","40717","","<p>Now, of course, I could write my regular expression to handle both cases, such as <code>regexp.Compile(""[a-zA-Z]"")</code>, but my regular expression is constructed from a string given by the user:</p>

<pre><code>reg, err := regexp.Compile(strings.Replace(s.Name, "" "", ""[ \\._-]"", -1))
</code></pre>

<p>Where <code>s.Name</code> is the name.  Which could be something like 'North by Northwest'.  Now, the most apparent solution to me would be to walk through each character of <code>s.Name</code> and write '[nN]' for each letter:</p>

<pre><code>for i := 0; i &lt; len(s.Name); i++ {
  if s.Name[i] == "" "" {
    fmt.Fprintf(str, ""%s[ \\._-]"", str);
  } else {
    fmt.Fprintf(str, ""%s[%s%s]"", str, strings.ToLower(s.Name[i]), strings.ToUpper(s.Name[i]))
  }
}
</code></pre>

<p>But I feel this is a rather non-elegant solution.  Speed is not really a concern, but I need to know if there is another way.</p>
","<p>You can set a case-insensitive flag as the first item in the regex.</p>

<p>You do this by adding <code>""(?i)""</code> to the beginning of a regex.</p>

<pre><code>reg, err := regexp.Compile(""(?i)""+strings.Replace(s.Name, "" "", ""[ \\._-]"", -1))
</code></pre>

<p>For a fixed regex it would look like this.</p>

<pre><code>r := regexp.MustCompile(`(?i)CaSe`)
</code></pre>

<p>For more information about flags, search the <a href=""https://code.google.com/p/re2/wiki/Syntax"">syntax documentation</a> for the term ""flags"".</p>
","15326471"
"Golang: Error ""can't load package: package my_prog: found packages my_prog and main""","40639","","<p>In my GOPATH I have something like this:</p>

<pre><code>/bin/
/pkg/
/src/
/src/my_prog/
/src/my_prog/main.go
/src/my_prog/d_interface.go
/src/my_prog/d_struct_that_implements_the_interface.go
</code></pre>

<p>In <code>main.go</code> I have <code>package main</code>, in <code>d_interface.go</code> and <code>d_struct_that_implements_the_interface.go</code> I have <code>package my_prog</code>.</p>

<p>When I try to <code>go build my_prog</code> I get the following error:</p>

<pre><code>can't load package: package my_prog: found packages my_prog (d_interface.go) and main (main.go) in C:\dev\Code\Go\src\my_prog
</code></pre>

<p>Does this mean that any file that belongs to <code>package main</code> should go in its own folder? If so, what is the reason for this?</p>
","<p>Yes, each package must be defined in its own directory.</p>

<p>The source structure is defined in <a href=""http://golang.org/doc/code.html"">How to Write Go Code</a>. </p>

<p>A package is a component that you can use in more than one program, that you can publish, import, get from an URL, etc. So it makes sense for it to have its own directory as much as a program can have a directory.</p>
","14416330"
"How to know TCP connection is closed in Golang net package?","39984","","<p>I'm new to Golang. </p>

<p>I'm implementing a small TCP server, and how do I know if one of my clients closed? Should I just try to read or write and check if err is nil?</p>
","<p>That thread ""<a href=""https://web.archive.org/web/20140801101158/http://osdir.com/ml/go-language-discuss/2012-08/msg01586.html"" rel=""nofollow noreferrer"">Best way to reliably detect that a TCP connection is closed</a>"", using <code>net.Conn</code> for '<code>c</code>' (also seen in <a href=""https://github.com/languid/svnmanager/blob/dcb51fce449565045e0818c320bca2876fe3dd0d/utils/ping.go"" rel=""nofollow noreferrer""><code>utils/ping.go</code></a> or <a href=""https://github.com/stevenschmatz/locale-backend/blob/083197fdffb8610f8eccf45bd17f1d98b3e3154e/server.go#L65-L76"" rel=""nofollow noreferrer""><code>locale-backend/server.go</code></a> or <a href=""https://github.com/search?q=SetReadDeadline%20%22read%28one%29%22&amp;ref=searchresults&amp;type=Code&amp;utf8=%E2%9C%93"" rel=""nofollow noreferrer"">many other instances</a>):</p>

<pre><code>one := []byte{}
c.SetReadDeadline(time.Now())
if _, err := c.Read(one); err == io.EOF {
  l.Printf(logger.LevelDebug, ""%s detected closed LAN connection"", id)
  c.Close()
  c = nil
} else {
  var zero time.Time
  c.SetReadDeadline(time.Now().Add(10 * time.Millisecond))
}
</code></pre>

<p>For detecting a timeout, it suggests:</p>

<pre><code>if neterr, ok := err.(net.Error); ok &amp;&amp; neterr.Timeout() {
  ...
</code></pre>
","12741495"
"Mock functions in Go","39835","","<p>I'm learning Go by coding a small personal project. Even though it's small, I decided to do rigorous unit testing to learn good habits on Go right from the start.</p>

<p>Trivial unit tests were all fine and dandy, but I'm puzzled with dependencies now; I want to be able to replace some function calls with mock ones. Here's a snippet of my code:</p>

<pre><code>func get_page(url string) string {
    get_dl_slot(url)
    defer free_dl_slot(url)

    resp, err := http.Get(url)
    if err != nil { return """" }
    defer resp.Body.Close()

    contents, err := ioutil.ReadAll(resp.Body)
    if err != nil { return """" }
    return string(contents)
}

func downloader() {
    dl_slots = make(chan bool, DL_SLOT_AMOUNT) // Init the download slot semaphore
    content := get_page(BASE_URL)
    links_regexp := regexp.MustCompile(LIST_LINK_REGEXP)
    matches := links_regexp.FindAllStringSubmatch(content, -1)
    for _, match := range matches{
        go serie_dl(match[1], match[2])
    }
}
</code></pre>

<p>I'd like to be able to test downloader() without actually getting a page through http - i.e. by mocking either get_page (easier since it returns just the page content as a string) or http.Get().</p>

<p>I found this thread: <a href=""https://groups.google.com/forum/#!topic/golang-nuts/6AN1E2CJOxI"">https://groups.google.com/forum/#!topic/golang-nuts/6AN1E2CJOxI</a> which seems to be about a similar problem. Julian Phillips presents his library, Withmock (<a href=""http://github.com/qur/withmock"">http://github.com/qur/withmock</a>) as a solution, but I'm unable to get it to work. Here's the relevant parts of my testing code, which is largely cargo cult code to me, to be honest:</p>

<pre><code>import (
    ""testing""
    ""net/http"" // mock
    ""code.google.com/p/gomock""
)
...
func TestDownloader (t *testing.T) {
    ctrl := gomock.NewController()
    defer ctrl.Finish()
    http.MOCK().SetController(ctrl)
    http.EXPECT().Get(BASE_URL)
    downloader()
    // The rest to be written
}
</code></pre>

<p>The test output is following:</p>

<pre><code>ERROR: Failed to install '_et/http': exit status 1
output:
can't load package: package _et/http: found packages http (chunked.go) and main (main_mock.go) in /var/folders/z9/ql_yn5h550s6shtb9c5sggj40000gn/T/withmock570825607/path/src/_et/http
</code></pre>

<p>Is the Withmock a solution to my testing problem? What should I do to get it to work?</p>
","<p>Kudos to you for practicing good testing! :)</p>

<p>Personally, I don't use <code>gomock</code> (or any mocking framework for that matter; mocking in Go is very easy without it). I would either pass a dependency to the <code>downloader()</code> function as a parameter, or I would make <code>downloader()</code> a method on a type, and the type can hold the <code>get_page</code> dependency:</p>

<h1>Method 1: Pass <code>get_page()</code> as a parameter of <code>downloader()</code></h1>

<pre><code>type PageGetter func(url string) string

func downloader(pageGetterFunc PageGetter) {
    // ...
    content := pageGetterFunc(BASE_URL)
    // ...
}
</code></pre>

<p><strong>Main:</strong></p>

<pre><code>func get_page(url string) string { /* ... */ }

func main() {
    downloader(get_page)
}
</code></pre>

<p><strong>Test:</strong></p>

<pre><code>func mock_get_page(url string) string {
    // mock your 'get_page()' function here
}

func TestDownloader(t *testing.T) {
    downloader(mock_get_page)
}
</code></pre>

<h1>Method2: Make <code>download()</code> a method of a type <code>Downloader</code>:</h1>

<p>If you don't want to pass the dependency as a parameter, you could also make <code>get_page()</code> a member of a type, and make <code>download()</code> a method of that type, which can then use <code>get_page</code>:</p>

<pre><code>type PageGetter func(url string) string

type Downloader struct {
    get_page PageGetter
}

func NewDownloader(pg PageGetter) *Downloader {
    return &amp;Downloader{get_page: pg}
}

func (d *Downloader) download() {
    //...
    content := d.get_page(BASE_URL)
    //...
}
</code></pre>

<p><strong>Main:</strong></p>

<pre><code>func get_page(url string) string { /* ... */ }

func main() {
    d := NewDownloader(get_page)
    d.download()
}
</code></pre>

<p><strong>Test:</strong></p>

<pre><code>func mock_get_page(url string) string {
    // mock your 'get_page()' function here
}

func TestDownloader() {
    d := NewDownloader(mock_get_page)
    d.download()
}
</code></pre>
","19168875"
"ToString() function in Go","39649","","<p>The <code>strings.Join</code> function takes slices of strings only:</p>

<pre><code>s := []string{""foo"", ""bar"", ""baz""}
fmt.Println(strings.Join(s, "", ""))
</code></pre>

<p>But it would be nice to be able to pass arbitrary objects which implement a <code>ToString()</code> function.</p>

<pre><code>type ToStringConverter interface {
    ToString() string
}
</code></pre>

<p>Is there something like this in Go or do I have to decorate existing types like <code>int</code> with ToString methods and write a wrapper around <code>strings.Join</code>?</p>

<pre><code>func Join(a []ToStringConverter, sep string) string
</code></pre>
","<p>Attach a <code>String() string</code> method to any named type and enjoy any custom ""ToString"" functionality:</p>

<pre><code>package main

import ""fmt""

type bin int

func (b bin) String() string {
        return fmt.Sprintf(""%b"", b)
}

func main() {
        fmt.Println(bin(42))
}
</code></pre>

<p>Playground: <a href=""http://play.golang.org/p/Azql7_pDAA"">http://play.golang.org/p/Azql7_pDAA</a></p>

<hr>

<p>Output</p>

<pre><code>101010
</code></pre>
","13247979"
"Example for sync.WaitGroup correct?","39609","","<p>Is this example usage of <code>sync.WaitGroup</code> correct? It gives the expected result, but I am unsure about the <code>wg.Add(4)</code> and the position of <code>wg.Done()</code>. Does it make sense to add the four goroutines at once with <code>wg.Add()</code>?</p>

<p><a href=""http://play.golang.org/p/ecvYHiie0P"">http://play.golang.org/p/ecvYHiie0P</a></p>

<pre><code>package main

import (
    ""fmt""
    ""sync""
    ""time""
)

func dosomething(millisecs time.Duration, wg *sync.WaitGroup) {
    duration := millisecs * time.Millisecond
    time.Sleep(duration)
    fmt.Println(""Function in background, duration:"", duration)
    wg.Done()
}

func main() {
    var wg sync.WaitGroup
    wg.Add(4)
    go dosomething(200, &amp;wg)
    go dosomething(400, &amp;wg)
    go dosomething(150, &amp;wg)
    go dosomething(600, &amp;wg)

    wg.Wait()
    fmt.Println(""Done"")
}
</code></pre>

<p>Result (as expected):</p>

<pre><code>Function in background, duration: 150ms
Function in background, duration: 200ms
Function in background, duration: 400ms
Function in background, duration: 600ms
Done
</code></pre>
","<p>Yes, this example is correct. It is important that the <code>wg.Add()</code> happens before the <code>go</code> statement to prevent race conditions. The following would also be correct:</p>

<pre><code>func main() {
    var wg sync.WaitGroup
    wg.Add(1)
    go dosomething(200, &amp;wg)
    wg.Add(1)
    go dosomething(400, &amp;wg)
    wg.Add(1)
    go dosomething(150, &amp;wg)
    wg.Add(1)
    go dosomething(600, &amp;wg)

    wg.Wait()
    fmt.Println(""Done"")
}
</code></pre>

<p>However, it is rather pointless to call <code>wg.Add</code> over and over again when you already know how many times it will be called.</p>

<hr>

<p><code>Waitgroups</code> panic if the counter falls below zero. The counter starts at zero, each <code>Done()</code> is a <code>-1</code> and each <code>Add()</code> depends on the parameter. So, you need the <code>Add()</code> to be <em>guaranteed</em> to come before the <code>Done()</code> to avoid panics.</p>

<p>In Go, such guarantees are given by the <a href=""http://golang.org/ref/mem"">memory model</a>.</p>

<p>The memory model states that all statements in a single goroutine appear to be executed in the same order as they are written. It is possible that they won't actually be in that order, but the outcome will be as if it was. It is also guaranteed that a <a href=""http://golang.org/ref/mem#tmp_4"">goroutine doesn't run until after the <code>go</code> statement that calls it</a>. Since the <code>Add()</code> occurs before the <code>go</code> statement and the <code>go</code> statement occurs before the <code>Done()</code>, we know the <code>Add()</code> occurs before the <code>Done()</code>.</p>

<p>If you were have the <code>go</code> statement come before the <code>Add()</code>, the program may operate correctly. However, it would be a race condition because it would not be guaranteed. </p>
","19208908"
"How to compare struct, slice, map are equal?","39358","","<p>I want to check that two structs are equal, but have some problem:</p>

<pre><code>package main

import (
""fmt""
""reflect""
)

type T struct {
    X int
    Y string
    Z []int
    M map[string]int
}

func main() {
    t1 := T{
        X:1,
        Y:""lei"",
        Z:[]int{1,2,3},
        M:map[string]int{
            ""a"":1,
            ""b"":2,
        },
    }

    t2 :=  T{
        X:1,
        Y:""lei"",
        Z:[]int{1,2,3},
        M:map[string]int{
            ""a"":1,
            ""b"":2,
        },
    }


    fmt.Println(t2 == t1)
    //error - invalid operation: t2 == t1 (struct containing []int cannot be compared)


    fmt.Println(reflect.ValueOf(t2) == reflect.ValueOf(t1))
    //false
    fmt.Println(reflect.TypeOf(t2) == reflect.TypeOf(t1))
    //true


    //Update: slice or map
    a1 := []int{1,2,3,4}
    a2 := []int{1,2,3,4}

    fmt.Println(a1==a2)
    //invalid operation: a1 == a2 (slice can only be compared to nil)

    m1 := map[string]int{   
        ""a"":1,
        ""b"":2,
    }
    m2 := map[string]int{   
        ""a"":1,
        ""b"":2,
    }
    fmt.Println(m1==m2)
    // m1 == m2 (map can only be compared to nil)
}
</code></pre>

<p><a href=""http://play.golang.org/p/AZIzW2WunI"">http://play.golang.org/p/AZIzW2WunI</a></p>
","<p>You can use <a href=""http://golang.org/pkg/reflect/#DeepEqual"" rel=""noreferrer"">reflect.DeepEqual</a>, or you can implement your own function (which performance wise would be better than using reflection):</p>

<p><a href=""http://play.golang.org/p/CPdfsYGNy_"" rel=""noreferrer"">http://play.golang.org/p/CPdfsYGNy_</a></p>

<pre><code>m1 := map[string]int{   
    ""a"":1,
    ""b"":2,
}
m2 := map[string]int{   
    ""a"":1,
    ""b"":2,
}
fmt.Println(reflect.DeepEqual(m1, m2))
</code></pre>
","24534351"
"copy pointer values *a = *b in golang","39208","","<pre><code>type T struct {
    Id int
    Name string
}

func Copy(a *T, b *T) error {
    b.Id=5
    b.Name=""gert""
    a = b
    return nil
}
</code></pre>

<p><code>a</code> is still empty, I have to do it like this</p>

<pre><code>func Copy(a *T, b *T) error {
    b.Id = 5
    b.Name = ""gert""
    a.Id = b.Id
    a.Name = b.Name
    return nil
}
</code></pre>

<p>now <code>a</code> is the same as <code>b</code></p>

<p>Why and how can I copy <code>*b</code> to <code>*a</code> directly?</p>
","<p>Your first example is almost right. You pass in pointers to two objects. You put those pointers into variables A and B. But A and B are local variables, so when you say <code>a=b</code> you are merely saying ""forget what was in A (locally)"". The rest of the program still has pointers to those two original objects.</p>

<p>If you want to copy the <em>data structure</em> at B into the <em>data structure</em> at A, do this instead:</p>

<pre><code>*a = *b;
</code></pre>
","21011115"
"In Go, does a break statement break from a switch/select?","39030","","<p>I know that <code>switch</code>/<code>select</code> statements break automatically after every case. I am wondering, in the following code:</p>

<pre><code>for {
    switch sometest() {
    case 0:
        dosomething()
    case 1:
        break
    default:
        dosomethingelse()
    }
}
</code></pre>

<p>Does the <code>break</code> statement exit the <code>for</code> loop or just the <code>switch</code> block?</p>
","<blockquote>
  <p><a href=""http://golang.org/ref/spec#Break_statements"" rel=""noreferrer"">Break statements, The Go Programming Language Specification.</a></p>
  
  <p>A ""break"" statement terminates execution of the innermost ""for"",
  ""switch"" or ""select"" statement.</p>

<pre><code>BreakStmt = ""break"" [ Label ] .
</code></pre>
  
  <p>If there is a label, it must be that of an enclosing ""for"", ""switch""
  or ""select"" statement, and that is the one whose execution terminates
  (§For statements, §Switch statements, §Select statements).</p>

<pre><code>L:
  for i &lt; n {
      switch i {
      case 5:
          break L
      }
  }
</code></pre>
</blockquote>

<p>Therefore, the <code>break</code> statement in your example terminates the <code>switch</code> statement, the ""innermost"" statement.</p>
","11105482"
"Constructors in Go","39021","","<p>I have a struct and I would like it to be initialised with some sensible default values.</p>

<p>Typically, the thing to do here is to use a constructor but since go isn't really OOP in the traditional sense these aren't true objects and it has no constructors.</p>

<p>I have noticed the init method but that is at the package level.  Is there something else similar that can be used at the struct level?</p>

<p>If not what is the accepted best practice for this type of thing in Go?</p>
","<p>There are actually two accepted best practices:</p>

<ol>
<li>Make the zero value of your struct a sensible default. (While this looks strange to most people coming from ""traditional"" oop it often works and is really convenient).</li>
<li>Provide a function <code>func New() YourTyp</code> or if you have several such types in your package functions <code>func NewYourType1() YourType1</code> and so on.</li>
</ol>

<p>Document if a zero value of your type is usable or not (in which case it has to be set up by one of the <code>New...</code> functions. (For the ""traditionalist"" oops: Someone who does not read the documentation won't be able to use your types properly, even if he cannot create objects in undefined states.)</p>
","18125763"
"How does Go compile so quickly?","38753","","<p>I've Googled and poked around the Go website, but I can't seem to find an explanation for Go's extraordinary build times. Are they products of the language features (or lack thereof), a highly optimized compiler, or something else? I'm not trying to promote Go; I'm just curious.</p>
","<p>Dependency analysis.</p>

<p>From the <a href=""http://golang.org/doc/go_faq.html"" rel=""noreferrer"">Go FAQ</a>:</p>

<blockquote>
  <p>Go provides a model for software
  construction that makes dependency
  analysis easy and avoids much of the
  overhead of C-style include files and
  libraries.</p>
</blockquote>

<p>That is the main reason of fast compilation. And this is by design.</p>
","2976675"
"Convert Go map to json","38612","","<p>I tried to convert my Go map to a json string with <code>encoding/json</code> Marshal, but it resulted in a empty string.</p>

<p>Here's my code :</p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
)

type Foo struct {
    Number int    `json:""number""`
    Title  string `json:""title""`
}

func main() {
    datas := make(map[int]Foo)

    for i := 0; i &lt; 10; i++ {
        datas[i] = Foo{Number: 1, Title: ""test""}
    }

    jsonString, _ := json.Marshal(datas)

    fmt.Println(datas)
    fmt.Println(jsonString)
}
</code></pre>

<p>My output is :</p>

<pre><code>map[9:{1 test} 2:{1 test} 7:{1 test} 3:{1 test} 4:{1 test} 5:{1 test} 6:{1 test} 8:{1 test} 0:{1 test} 1:{1 test}]

[]
</code></pre>

<p>I really don't know where I'm wrong. Thank you for your help.</p>
","<p>If you had caught the error, you would have seen this:</p>

<pre><code>jsonString, err := json.Marshal(datas)
fmt.Println(err)

// [] json: unsupported type: map[int]main.Foo
</code></pre>

<p>The thing is you cannot use integers as keys in JSON; it is forbidden. Instead, you can convert these values to strings beforehand, for instance using <code>strconv.Itoa</code>.</p>

<p>See this post for more details: <a href=""https://stackoverflow.com/a/24284721/2679935"">https://stackoverflow.com/a/24284721/2679935</a></p>
","24652881"
"Golang multiple files in main package","38590","","<p>I currently have a single file in my main package called <code>main.go</code>. How do I split the contents of <code>main.go</code> into multiple files without creating a separate package because the code isn't reusable. </p>

<p>I want a directory structure like this:</p>

<pre><code>$ ls foo

main.go
bar.go
</code></pre>

<p><code>bar.go</code></p>

<pre><code>package main

import ""fmt""

func Bar() {
    fmt.Println(""Bar"")
}
</code></pre>

<p>Then in <code>main.go</code></p>

<pre><code>package main

func main() {
    Bar()
}
</code></pre>
","<p>The code above actually works. The problem was I needed to run</p>

<pre><code>go run *.go
</code></pre>

<p>instead of </p>

<pre><code>go run main.go
</code></pre>
","28081554"
"Convert an integer to a byte array","38472","","<p>I have a function which receives a <code>[]byte</code> but I what I have is an <code>int</code>, what is the best way to go about this conversion?</p>

<pre><code>err = a.Write([]byte(myInt))
</code></pre>

<p>I guess I could go the long way and get it into a string and put that into bytes, but it sounds ugly and I guess there are better ways to do it.</p>
","<p>I agree with Brainstorm's approach: assuming that you're passing a machine-friendly binary representation, use the <code>encoding/binary</code> library.  The OP suggests that <code>binary.Write()</code> might have some overhead.  Looking at <a href=""http://golang.org/src/pkg/encoding/binary/binary.go"">the source</a> for the implementation of <code>Write()</code>, I see that it does some runtime decisions for maximum flexibility.</p>

<pre><code>   189  func Write(w io.Writer, order ByteOrder, data interface{}) error {
   190      // Fast path for basic types.
   191      var b [8]byte
   192      var bs []byte
   193      switch v := data.(type) {
   194      case *int8:
   195          bs = b[:1]
   196          b[0] = byte(*v)
   197      case int8:
   198          bs = b[:1]
   199          b[0] = byte(v)
   200      case *uint8:
   201          bs = b[:1]
   202          b[0] = *v
   ...
</code></pre>

<p>Right?  Write() takes in a very generic <code>data</code> third argument, and that's imposing some overhead as the Go runtime then is forced into encoding type information.  Since <code>Write()</code> is doing some runtime decisions here that you simply don't need in your situation, maybe you can just directly call the encoding functions and see if it performs better.</p>

<p>Something like this:</p>

<pre><code>package main

import (
    ""encoding/binary""
    ""fmt""
)

func main() {
    bs := make([]byte, 4)
    binary.LittleEndian.PutUint32(bs, 31415926)
    fmt.Println(bs)
}
</code></pre>

<p>Let us know how this performs.</p>

<p>Otherwise, if you're just trying to get an ASCII representation of the integer, you can get the string representation (probably with <a href=""http://golang.org/pkg/strconv/#Itoa""><code>strconv.Itoa</code></a>) and cast that string to the <code>[]byte</code> type.</p>

<pre><code>package main

import (
    ""fmt""
    ""strconv""
)

func main() {
    bs := []byte(strconv.Itoa(31415926))
    fmt.Println(bs)
}
</code></pre>
","16889357"
"Append to a file in Go","38233","","<p>So I can read from a local file like so:</p>

<pre><code>data, error := ioutil.ReadFile(name)
</code></pre>

<p>And I can write to a local file</p>

<pre><code>ioutil.WriteFile(filename, content, permission)
</code></pre>

<p>But how can I append to a file? Is there a built in method?</p>
","<p>This answers works in Go1:</p>

<pre><code>f, err := os.OpenFile(filename, os.O_APPEND|os.O_WRONLY, 0600)
if err != nil {
    panic(err)
}

defer f.Close()

if _, err = f.WriteString(text); err != nil {
    panic(err)
}
</code></pre>
","12876022"
"Type converting slices of interfaces in go","37874","","<p>I'm curious why go does't implicitly convert <code>[]T</code> to <code>[]interface{}</code> when it will implicitly convert <code>T</code> to <code>interface{}</code>.  Is there something non-trivial about this conversion that I'm missing?  </p>

<p>Example:</p>

<pre><code>func foo([]interface{}) { /* do something */ }

func main() {
    var a []string = []string{""hello"", ""world""}
    foo(a)
}
</code></pre>

<p><code>go build</code> complains </p>

<blockquote>
  <p>cannot use a (type []string) as type []interface {} in function argument</p>
</blockquote>

<p>And if I try to do it explicitly, same thing: <code>b := []interface{}(a)</code> complains </p>

<blockquote>
  <p>cannot convert a (type []string) to type []interface {}</p>
</blockquote>

<p>So every time I need to do this conversion (which seems to come up a lot), I've been doing something like this:</p>

<pre><code>b = make([]interface{}, len(a), len(a))
for i := range a {
    b[i] = a[i]
}
</code></pre>

<p>Is there a better way to do this, or standard library functions to help with these conversions?  It seems kind of silly to write 4 extra lines of code every time I want to call a function that can take a list of e.g. ints or strings.</p>
","<p>In Go, there is a general rule that syntax should not hide complex/costly operations. Converting a <code>string</code> to an <code>interface{}</code> is done in O(1) time. Converting a <code>[]string</code> to an <code>interface{}</code> is also done in O(1) time since a slice is still one value. However, converting a <code>[]string</code> to an <code>[]interface{}</code> is O(n) time because each element of the slice must be converted to an <code>interface{}</code>.</p>

<p>The one exception to this rule is converting strings. When converting a <code>string</code> to and from a <code>[]byte</code> or a <code>[]rune</code>, Go does O(n) work even though conversions are ""syntax"".</p>

<p>There is no standard library function that will do this conversion for you. You could make one with reflect, but it would be slower than the three line option.</p>

<p>Example with reflection:</p>

<pre><code>func InterfaceSlice(slice interface{}) []interface{} {
    s := reflect.ValueOf(slice)
    if s.Kind() != reflect.Slice {
        panic(""InterfaceSlice() given a non-slice type"")
    }

    ret := make([]interface{}, s.Len())

    for i:=0; i&lt;s.Len(); i++ {
        ret[i] = s.Index(i).Interface()
    }

    return ret
}
</code></pre>

<p>Your best option though is just to use the lines of code you gave in your question:</p>

<pre><code>b := make([]interface{}, len(a))
for i := range a {
    b[i] = a[i]
}
</code></pre>
","12754757"
"How to get error message in a string in golang?","37617","","<p>I referred this question - <a href=""https://stackoverflow.com/questions/6012692/os-error-string-value-golang"">os.Error - string value (Golang)</a>, but that is not working in my case.</p>

<pre><code>func (t Trans) TicketQty() (intQty int, err string) {
  defer func() {    
    str := recover()
    if(str != nil){     
      err = ""an error""
    }
  }()   
  Qty := t.TransObject[""qty""].(map[string] interface{})[""ticket fv""].(float64)  
  intQty = 10
  return 
}
</code></pre>

<p>In that <code>err</code> I need the error message that is thrown, e.g. if the parsing logic fails, it is throwing an error automatically. That is the error I need to catch. I am showing this only for example - whatever the runtime exception is, I need to catch it and pass as <code>err</code> in the return.</p>

<p>How to achieve that?</p>
","<p>Use the <a href=""http://golang.org/pkg/errors""><code>errors</code></a> package to create new errors.</p>

<pre><code>err = errors.New(""an error"")
</code></pre>

<p>The returned error can be treated as a string by either accessing <code>err.Error()</code>, or using the <code>fmt</code> package functions (for example <code>fmt.Println(err)</code>).</p>

<p>Don't use <code>recover</code> unless you <em>really know what you're doing</em>. It's idiomatic to return all errors, and to deal with them when they arise.</p>

<p>See <a href=""http://blog.golang.org/error-handling-and-go"">Error handling and Go</a>, and <a href=""http://blog.golang.org/defer-panic-and-recover"">Defer, Panic and Recover</a> on the Go blog for more info.</p>

<p>EDIT:</p>

<p>Re-reading your question, it looks like you're trying to recover from possible failed <a href=""http://golang.org/doc/effective_go.html#interface_conversions"">type assertions</a>. In this instance it's recommended to use the ""comma, ok"" idiom (mentioned in the previously linked section of the docs), which (slightly paraphrased to be more general) means:</p>

<blockquote>
  <p>""If the type assertion fails, [the receiver variable] will still exist and be of type [whatever was asserted], but it will have the zero value...""</p>
</blockquote>

<p>Simple example to test if an <code>interface{}</code> is actually a <code>float64</code> through type assertion, and produce a custom error if it fails (instead of panicking):</p>

<pre><code>package main

import (
    ""errors""
    ""fmt""
)

// assertFloat64 attempts a type assertion to float64.
// It returns a custom error if it fails.
func assertFloat64(n interface{}) error {
    // Type assertion. Is n float64?
    f, ok := n.(float64)
    // If yes,
    if ok {
        // print the result
        fmt.Printf(""%f is float64\n"", f)
        // and return nil error.
        return nil
    }
    // Else return our custom error
    return errors.New(fmt.Sprintf(""could not assert that \""%v\"" is float64.\n"", n))
}

func main() {
    // Successful
    // 1024.0 is float64
    err := assertFloat64(1024.0)
    if err != nil {
        fmt.Println(err)
    }

    // Failure
    // ""foo"" isn't float64
    err = assertFloat64(""foo"")
    if err != nil {
        fmt.Println(err)
    }
}
</code></pre>

<p>Will print:</p>

<blockquote>
  <p>1024.000000 is float64<br>
  could not assert that ""foo"" is float64.</p>
</blockquote>

<p><a href=""http://play.golang.org/p/_NWaWFhNt2"">Playground</a></p>
","22171548"
"Go / golang time.Now().UnixNano() convert to milliseconds?","37601","","<p>How can I get Unix time in Go in milliseconds?</p>

<p>I have the following function:</p>

<pre><code>func makeTimestamp() int64 {
    return time.Now().UnixNano() % 1e6 / 1e3
}
</code></pre>

<p>I need less precision and only want milliseconds. </p>
","<p>Just divide it: </p>

<pre><code>func makeTimestamp() int64 {
    return time.Now().UnixNano() / int64(time.Millisecond)
}
</code></pre>

<p>Here is an example that you can compile and run to see the output</p>

<pre><code>package main

import (
    ""time""
    ""fmt""
)

func main() {
    a := makeTimestamp()

    fmt.Printf(""%d \n"", a)
}

func makeTimestamp() int64 {
    return time.Now().UnixNano() / int64(time.Millisecond)
}
</code></pre>
","24122933"
"Obtaining a Unix Timestamp in Go Language (current time in seconds since epoch)","37155","","<p>I have some code written in Go which I am trying to update to work with the latest weekly builds. (It was last built under r60). Everything is now working except for the following bit:</p>

<pre><code> if t, _, err := os.Time(); err == nil {
   port[5] = int32(t)
 }
</code></pre>

<p>Any advice on how to update this to work with the current Go implementation?</p>
","<pre><code>import ""time""
...
port[5] = int32(time.Now().Unix())
</code></pre>
","9539644"
"How does Go do string comparison?","37112","","<p><a href=""http://golang.org/ref/spec#Comparison_operators"" rel=""noreferrer"">http://golang.org/ref/spec#Comparison_operators</a></p>

<p>Go supports string comparison without any special functions. Does the Go runtime do work behind the scenes to make comparisons of string literals?</p>
","<p>As you can see in the following assembly dump, string comparison is delegated to a <code>runtime.eqstring</code> function from the runtime (line 17) after a short circuit check to see if the two operands are the same in-memory string (line 11):</p>

<pre><code>$ cat foo.go
package main

func main() {
        a := ""hello""
        b := ""world""
        _ = a == b
}

$ go tool 6g -S foo.go
--- prog list ""main"" ---
0000 (foo.go:3) TEXT    main+0(SB),$40-0
0001 (foo.go:3) LOCALS  ,$0
0002 (foo.go:4) LEAQ    go.string.""hello""+0(SB),BX
0003 (foo.go:4) MOVQ    (BX),SI
0004 (foo.go:4) MOVQ    8(BX),CX
0005 (foo.go:5) LEAQ    go.string.""world""+0(SB),BX
0006 (foo.go:5) MOVQ    (BX),DX
0007 (foo.go:5) MOVQ    8(BX),AX
0008 (foo.go:6) JMP     ,11
0009 (foo.go:6) MOVQ    $1,AX
0010 (foo.go:6) JMP     ,23
0011 (foo.go:6) CMPQ    CX,AX
0012 (foo.go:6) JNE     ,22
0013 (foo.go:6) MOVQ    SI,(SP)
0014 (foo.go:6) MOVQ    CX,8(SP)
0015 (foo.go:6) MOVQ    DX,16(SP)
0016 (foo.go:6) MOVQ    AX,24(SP)
0017 (foo.go:6) CALL    ,runtime.eqstring+0(SB)
0018 (foo.go:6) MOVBQZX 32(SP),BX
0019 (foo.go:6) CMPB    BX,$0
0020 (foo.go:6) JEQ     ,22
0021 (foo.go:6) JMP     ,9
0022 (foo.go:6) MOVQ    $0,AX
0023 (foo.go:7) RET     ,

--- prog list ""init"" ---
0024 (foo.go:7) TEXT    init+0(SB),$0-0
0025 (foo.go:7) MOVBQZX initdone·+0(SB),AX
0026 (foo.go:7) LOCALS  ,$0
0027 (foo.go:7) CMPB    AX,$0
0028 (foo.go:7) JEQ     ,34
0029 (foo.go:7) CMPB    AX,$2
0030 (foo.go:7) JNE     ,32
0031 (foo.go:7) RET     ,
0032 (foo.go:7) CALL    ,runtime.throwinit+0(SB)
0033 (foo.go:7) UNDEF   ,
0034 (foo.go:7) MOVB    $2,initdone·+0(SB)
0035 (foo.go:7) RET     ,
</code></pre>

<p>Unless you are working on the compiler or runtime, this shouldn't concern you too much: just use the operators as the spec defines, and expect that the comparison to be O(n) with the length of the string.</p>
","20235169"
"Removing packages installed with go get","37019","","<p>I ran <code>go get package</code> to download a package before learning that I needed to set my <code>GOPATH</code> otherwise that package sullies my root Go install (I would much prefer to keep my Go install clean and separate core from custom). How do I remove packages installed previously?</p>
","<p>It's safe to just delete the source directory and compiled package file.  Find the source directory under <code>$GOPATH/src</code> and the package file under <code>$GOPATH/pkg/&lt;architecture&gt;</code>, for example: <code>$GOPATH/pkg/windows_amd64</code>.</p>
","13792319"
"How to decode JSON with type convert from string to float64 in Golang?","36871","","<p>I need to decode a JSON string with the float number like:</p>

<pre><code>{""name"":""Galaxy Nexus"", ""price"":""3460.00""}
</code></pre>

<p>I use the Golang code below:</p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
)

type Product struct {
    Name  string
    Price float64
}

func main() {
    s := `{""name"":""Galaxy Nexus"", ""price"":""3460.00""}`
    var pro Product
    err := json.Unmarshal([]byte(s), &amp;pro)
    if err == nil {
        fmt.Printf(""%+v\n"", pro)
    } else {
        fmt.Println(err)
        fmt.Printf(""%+v\n"", pro)
    }
}
</code></pre>

<p>When I run it, get the result:</p>

<pre><code>json: cannot unmarshal string into Go value of type float64
{Name:Galaxy Nexus Price:0}
</code></pre>

<p>I want to know how to decode the JSON string with type convert.</p>
","<p>The answer is considerably less complicated.  Just add tell the JSON interpeter it's a string encoded float64 with <code>,string</code> (note that I only changed the <code>Price</code> definition):</p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
)

type Product struct {
    Name  string
    Price float64 `json:"",string""`
}

func main() {
    s := `{""name"":""Galaxy Nexus"", ""price"":""3460.00""}`
    var pro Product
    err := json.Unmarshal([]byte(s), &amp;pro)
    if err == nil {
        fmt.Printf(""%+v\n"", pro)
    } else {
        fmt.Println(err)
        fmt.Printf(""%+v\n"", pro)
    }
}
</code></pre>
","9573928"
"In golang is there a nice way of getting a slice of values from a map?","36860","","<p>If I have a map m is there a better way of getting a slice of the values v then</p>

<pre><code>package main
import (
  ""fmt""
)

func main() {
    m := make(map[int]string)

    m[1] = ""a""
    m[2] = ""b""
    m[3] = ""c""
    m[4] = ""d""

    // Can this be done better?
    v := make([]string, len(m), len(m))
    idx := 0
    for  _, value := range m {
       v[idx] = value
       idx++
    }

    fmt.Println(v)
 }
</code></pre>

<p>Is there a built feature of a map? Is there a function in a Go package, or is this the best code to do if I have to?</p>
","<p>Unfortunately, no. There is no builtin way to do this.</p>

<p>As a side note, you can omit the capacity argument in your slice creation:</p>

<pre><code>v := make([]string, len(m))
</code></pre>

<p>The capacity is implied to be the same as the length here.</p>
","13422647"
"Change values while iterating in golang","36843","","<p>Let's suppose I have these types :</p>

<pre><code>type Attribute struct {
    Key, Val string
}
type Node struct {
    Attr []Attribute
}
</code></pre>

<p>and that I want to iterate on my node's attributes to change them.</p>

<p>I would have loved to be able to do</p>

<pre><code>for _, attr := range n.Attr {
    if attr.Key == ""href"" {
        attr.Val = ""something""
    }
}
</code></pre>

<p>but as <code>attr</code> isn't a pointer, this wouldn't work and I have to do</p>

<pre><code>for i, attr := range n.Attr {
    if attr.Key == ""href"" {
        n.Attr[i].Val = ""something""
    }
}
</code></pre>

<p>Is there a simpler or faster way ? Is it possible to directly get pointers from <code>range</code> ?</p>

<p>Obviously I don't want to change the structures just for the iteration and more verbose solutions are no solutions</p>
","<p>No, the abbreviation you want is not possible.</p>

<p>The reason for this is that <code>range</code> copies the values from the slice you're iterating over.
The <a href=""http://golang.org/ref/spec#RangeClause"" rel=""noreferrer"">specification about range</a> says:</p>

<blockquote>
<pre><code>Range expression                          1st value             2nd value (if 2nd variable is present)
array or slice  a   [n]E, *[n]E, or []E   index    i  int       a[i]       E
</code></pre>
</blockquote>

<p>So, range uses <code>a[i]</code> as its second value for arrays/slices, which effectively means that the
value is copied, making the original value untouchable.</p>

<p>This behavior is demonstrated by the <a href=""http://play.golang.org/p/fTLS5Y69Mk"" rel=""noreferrer"">following code</a>:</p>

<pre><code>x := make([]int, 3)

x[0], x[1], x[2] = 1, 2, 3

for i, val := range x {
    println(&amp;x[i], ""vs."", &amp;val)
}
</code></pre>

<p>The code prints you completely different memory locations for the value from range and the actual 
value  in the slice:</p>

<pre><code>0xf84000f010 vs. 0x7f095ed0bf68
0xf84000f014 vs. 0x7f095ed0bf68
0xf84000f018 vs. 0x7f095ed0bf68
</code></pre>

<p>So the only thing you can do is to either use pointers or the index, as already proposed by jnml and peterSO.</p>
","15952415"
"Golang Global Variable access","36659","","<p>I'm fairly new to golang, this should be a simple answer but I've tried searching every where with no luck.</p>

<p>How do I access a global variable that was declared/init in my main.go in a different .go package/file? Keeps telling me that the variable is undefined (I know that global variables are bad but this is just to be used as a timestamp)</p>

<p>in main.go</p>

<pre><code>var StartTime = time.Now()
func main(){...}
</code></pre>

<p>trying to access StartTime in a different .go file
but keep getting StartTime undefined</p>
","<p>I would ""inject"" the starttime variable instead, otherwise you have a circular dependency between the packages.</p>

<p>main.go</p>

<pre><code>var StartTime = time.Now()
func main() {
   otherPackage.StartTime = StartTime
}
</code></pre>

<p>otherpackage.go</p>

<pre><code>var StartTime time.Time
</code></pre>
","35039358"
"Generating the SHA hash of a string using golang","36648","","<p>Can someone show me a working example of how to generate a SHA hash of a string that I have, say <code>myPassword := ""beautiful""</code> , using Go 1 ? </p>

<p>The docs pages lack examples and I could not find any working code on Google.</p>
","<p>An example :</p>

<pre><code>import (
    ""crypto/sha1""
    ""encoding/base64""
)

func (ms *MapServer) storee(bv []byte) {
    hasher := sha1.New()
    hasher.Write(bv)
    sha := base64.URLEncoding.EncodeToString(hasher.Sum(nil))
        ...
}
</code></pre>

<p>In this example I make a sha from a byte array. You can get the byte array using</p>

<pre><code>bv := []byte(myPassword) 
</code></pre>

<p>Of course you don't need to encode it in base64 if you don't have to : you may use the raw byte array returned by the Sum function.</p>

<p>There seems to be some little confusion in comments below. So let's clarify for next users the best practices on conversions to strings:</p>

<ul>
<li>you never store a SHA as a string in a database, but as raw bytes</li>
<li>when you want to display a SHA to a user, a common way is <a href=""https://en.wikipedia.org/wiki/Hexadecimal"" rel=""noreferrer"">Hexadecimal</a></li>
<li>when you want a string representation because it must fit in an URL or in a filename, the usual solution is <a href=""https://en.wikipedia.org/wiki/Base64"" rel=""noreferrer"">Base64</a>, which is more compact</li>
</ul>
","10701951"
"Golang - How to print the values of Arrays?","36611","","<p>I want to see the values which are in the arrays. How can I print them?</p>

<pre><code>projects []Project  
</code></pre>
","<p>You can try the <code>%v</code>, <code>%+v</code> or <code>%#v</code> verbs of <a href=""http://golang.org/pkg/fmt/"" rel=""noreferrer"">go fmt</a>:</p>

<pre><code>fmt.Printf(""%v"", projects)
</code></pre>

<p>If your array (or <a href=""http://blog.golang.org/go-slices-usage-and-internals"" rel=""noreferrer"">here slice</a>) contains <code>struct</code> (like <code>Project</code>), you will see their details.<br>
For more precision, you can use <code>%#v</code> to print the object using Go-syntax, as for a literal:</p>

<pre><code>%v  the value in a default format.
    when printing structs, the plus flag (%+v) adds field names
%#v a Go-syntax representation of the value
</code></pre>

<p>For basic types, <code>fmt.Println(projects)</code> is enough.</p>

<hr>

<p>Note: for a slice of pointers, that is <code>[]*Project</code> (instead of <code>[]Project</code>), you are better off defining a <code>String()</code> method in order to display exactly what you want to see (or you will see only pointer address).<br>
See this <a href=""http://play.golang.org/p/5y2IIAuek_"" rel=""noreferrer"">play.golang example</a>.</p>
","24489454"
"Why is Go so slow (compared to Java)?","36467","","<p>As we can see from <a href=""http://benchmarksgame.alioth.debian.org/"" rel=""noreferrer"">The Computer Language Benchmarks Game</a>:</p>

<ul>
<li>Go is on average 10x slower than <a href=""http://benchmarksgame.alioth.debian.org/u32/compare.php?lang=go&amp;lang2=gcc"" rel=""noreferrer"">C</a>  </li>
<li>Go is 3x slower than <a href=""http://benchmarksgame.alioth.debian.org/u32/go.html"" rel=""noreferrer"">Java</a> !?</li>
</ul>

<p>How can this be, bearing in mind that Go compiler produces native code for execution?<br>
Immature compilers for Go? Or there is some intrinsic problem with the Go language?</p>

<p>EDIT:<br>
Most answers deny intrinsic slowness of Go languge, claiming the problem resides in immature compilers.<br>
Therefore I've made some own tests <a href=""http://pastie.org/933834"" rel=""noreferrer"">to calculate Fibonacci numbers</a>: Iterative algorithm runs in Go (freebsd,6g) with the <code>same</code> speed as in C (with O3 option). The dull recursive one runs in Go <code>2 times</code> slower than in C (with -O3 option; with -O0 - the same). But I haven't seen 10x fall as in the Benchmarks Game.</p>
","<p>The 6g and 8g compilers are not particularly optimising, so the code they produce isn't particularly fast.</p>

<p>They're designed to run fast themselves and produce code that's OK (there is a bit of optimisation). <code>gccgo</code> uses GCC's existing optimisation passes, and might provide a more pointful comparison with C, but gccgo isn't feature-complete yet.</p>

<p>Benchmark figures are almost entirely about quality of implementation. They don't have a huge amount to do with the language as such, except to the extent that the implementation spends runtime supporting language features that the benchmark doesn't really need. In most compiled languages a sufficiently clever compiler could in theory strip out what isn't needed, but there comes a point where you're rigging the demo, since very few real users of the language would write programs that didn't use that feature. Moving things out of the way without removing them entirely (e.g. predicting virtual call destinations in JIT-compiled Java) starts to get tricky.</p>

<p>FWIW, my own very trivial test with Go when I was taking a look at it (a loop of integer addition, basically), gccgo produced code towards the fast end of the range between <code>gcc -O0</code> and <code>gcc -O2</code> for equivalent C. Go isn't inherently slow, but the compilers don't do everything, yet. Hardly surprising for a language that's 10 minutes old.</p>
","2704455"
"How to index characters in a Golang string?","36416","","<p>How to get an ""E"" output rather than 69?</p>

<pre><code>package main

import ""fmt""

func main() {
    fmt.Print(""HELLO""[1])
}
</code></pre>

<p>Does Golang have function to convert a char to byte and vice versa?</p>
","<p>Interpreted string literals are character sequences between double quotes """" using the (possibly multi-byte) UTF-8 encoding of individual characters. In UTF-8, ASCII characters are single-byte corresponding to the first 128 Unicode characters. Strings behave like slices of bytes. A rune is an integer value identifying a Unicode code point. Therefore,</p>

<pre><code>package main

import ""fmt""

func main() {
    fmt.Println(string(""Hello""[1]))              // ASCII only
    fmt.Println(string([]rune(""Hello, 世界"")[1])) // UTF-8
    fmt.Println(string([]rune(""Hello, 世界"")[8])) // UTF-8
}
</code></pre>

<p>Output:</p>

<pre><code>e
e
界
</code></pre>

<p>See the <a href=""http://golang.org/ref/spec"" rel=""noreferrer"">Go Programming Language Specification</a> section on <a href=""http://golang.org/ref/spec#Conversions"" rel=""noreferrer"">Conversions</a>.</p>
","15020162"
"How can I install a package with go get?","36348","","<p>I want to install packages from github to my gopath, I have tried this:</p>

<pre><code>go get github.com:capotej/groupcache-db-experiment.git
</code></pre>

<p>the repository is <a href=""https://github.com/capotej/groupcache-db-experiment"" rel=""noreferrer"">here</a>.</p>
","<blockquote>
  <p><a href=""http://golang.org/cmd/go/"" rel=""noreferrer"">Command go</a></p>
  
  <p><a href=""http://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies"" rel=""noreferrer"">Download and install packages and dependencies</a></p>
  
  <p>Usage:</p>

<pre><code>go get [-d] [-f] [-fix] [-t] [-u] [build flags] [packages]
</code></pre>
  
  <p>Get downloads and installs the packages named by the import paths,
  along with their dependencies.</p>
  
  <p>The -d flag instructs get to stop after downloading the packages; that
  is, it instructs get not to install the packages.</p>
  
  <p>The -f flag, valid only when -u is set, forces get -u not to verify
  that each package has been checked out from the source control
  repository implied by its import path. This can be useful if the
  source is a local fork of the original.</p>
  
  <p>The -fix flag instructs get to run the fix tool on the downloaded
  packages before resolving dependencies or building the code.</p>
  
  <p>The -t flag instructs get to also download the packages required to
  build the tests for the specified packages.</p>
  
  <p>The -u flag instructs get to use the network to update the named
  packages and their dependencies. By default, get uses the network to
  check out missing packages but does not use it to look for updates to
  existing packages.</p>
  
  <p>Get also accepts build flags to control the installation. See 'go help
  build'.</p>
  
  <p>When checking out or updating a package, get looks for a branch or tag
  that matches the locally installed version of Go. The most important
  rule is that if the local installation is running version ""go1"", get
  searches for a branch or tag named ""go1"". If no such version exists it
  retrieves the most recent version of the package.</p>
  
  <p>For more about specifying packages, see 'go help packages'.</p>
  
  <p>For more about how 'go get' finds source code to download, see 'go
  help importpath'.</p>
</blockquote>

<p>For example,</p>

<pre><code>$ go get -v github.com/capotej/groupcache-db-experiment/...
github.com/capotej/groupcache-db-experiment (download)
github.com/golang/groupcache (download)
github.com/golang/protobuf (download)
github.com/capotej/groupcache-db-experiment/api
github.com/capotej/groupcache-db-experiment/client
github.com/capotej/groupcache-db-experiment/slowdb
github.com/golang/groupcache/consistenthash
github.com/golang/protobuf/proto
github.com/golang/groupcache/lru
github.com/capotej/groupcache-db-experiment/dbserver
github.com/capotej/groupcache-db-experiment/cli
github.com/golang/groupcache/singleflight
github.com/golang/groupcache/groupcachepb
github.com/golang/groupcache
github.com/capotej/groupcache-db-experiment/frontend
$ 
</code></pre>
","30296041"
"Why can't I assign a *Struct to an *Interface?","36269","","<p>I'm just working through the <a href=""http://tour.golang.org/"">Go tour</a>, and I'm confused about pointers and interfaces. Why doesn't this Go code compile?</p>

<pre><code>package main

type Interface interface {}

type Struct struct {}

func main() {
    var ps *Struct
    var pi *Interface
    pi = ps

    _, _ = pi, ps
}
</code></pre>

<p>i.e. if <code>Struct</code> is an <code>Interface</code>, why wouldn't a <code>*Struct</code> be a <code>*Interface</code>?</p>

<p>The error message I get is:</p>

<pre><code>prog.go:10: cannot use ps (type *Struct) as type *Interface in assignment:
        *Interface is pointer to interface, not interface
</code></pre>
","<p>When you have a struct implementing an interface, a pointer to that struct implements automatically that interface too. That's why you never have <code>*SomeInterface</code> in the prototype of functions, as this wouldn't add anything to <code>SomeInterface</code>, and you don't need such a type in variable declaration (see <a href=""https://stackoverflow.com/questions/13255907/in-go-http-handlers-why-is-the-responsewriter-a-value-but-the-request-a-pointer"">this related question</a>).</p>

<p>An interface value isn't the value of the concrete struct (as it has a variable size, this wouldn't be possible), but it's a kind of pointer (to be more precise a pointer to the struct and a pointer to the type). Russ Cox describes it exactly <a href=""http://research.swtch.com/interfaces"" rel=""noreferrer"">here</a> :</p>

<blockquote>
  <p>Interface values are represented as a two-word pair giving a pointer
  to information about the type stored in the interface and a pointer to
  the associated data.</p>
</blockquote>

<p><img src=""https://i.stack.imgur.com/H78Bz.png"" alt=""enter image description here""></p>

<p>This is why <code>Interface</code>, and not <code>*Interface</code> is the correct type to hold a pointer to a struct implementing <code>Interface</code>.</p>

<p>So you must simply use</p>

<pre><code>var pi Interface
</code></pre>
","13511853"
"Simple way to copy a file in Golang","35967","","<p>Is there any simple/fast way to copy a file in Go?</p>

<p>I couldn't find a fast way in the Doc's and searching the internet doesn't help as well. </p>
","<p>A <em>robust</em> and <em>efficient</em> copy is conceptually simple, but not simple to implement due to the need to handle a number of edge cases and system limitations that are imposed by the target operating system and it's configuration.</p>

<p>If you simply want to make a duplicate of the existing file you can use <code>os.Link(srcName, dstName)</code>. This avoids having to move bytes around in the application and saves disk space. For large files, this is a significant time and space saving.</p>

<p>But various operating systems have different restrictions on how hard links work. Depending on your application and your target system configuration, <code>Link()</code> calls may not work in all cases.</p>

<p>If you want a single generic, robust and efficient copy function, update <code>Copy()</code> to: </p>

<ol>
<li>Perform checks to ensure that at least some form of copy will succeed (access permissions, directories exist, etc.)</li>
<li>Check to see if both files already exist and are the same using
<code>os.SameFile</code>, return success if they are the same</li>
<li>Attempt a Link, return if success</li>
<li>Copy the bytes (all efficient means failed), return result</li>
</ol>

<p>An optimization would be to copy the bytes in a go routine so the caller doesn't block on the byte copy. Doing so imposes additional complexity on the caller to handle the success/error case properly. </p>

<p>If I wanted both, I would have two different copy functions: <code>CopyFile(src, dst string) (error)</code> for a blocking copy and <code>CopyFileAsync(src, dst string) (chan c, error)</code> which passes a signaling channel back to the caller for the asynchronous case.</p>



<pre><code>package main

import (
    ""fmt""
    ""io""
    ""os""
)

// CopyFile copies a file from src to dst. If src and dst files exist, and are
// the same, then return success. Otherise, attempt to create a hard link
// between the two files. If that fail, copy the file contents from src to dst.
func CopyFile(src, dst string) (err error) {
    sfi, err := os.Stat(src)
    if err != nil {
        return
    }
    if !sfi.Mode().IsRegular() {
        // cannot copy non-regular files (e.g., directories,
        // symlinks, devices, etc.)
        return fmt.Errorf(""CopyFile: non-regular source file %s (%q)"", sfi.Name(), sfi.Mode().String())
    }
    dfi, err := os.Stat(dst)
    if err != nil {
        if !os.IsNotExist(err) {
            return
        }
    } else {
        if !(dfi.Mode().IsRegular()) {
            return fmt.Errorf(""CopyFile: non-regular destination file %s (%q)"", dfi.Name(), dfi.Mode().String())
        }
        if os.SameFile(sfi, dfi) {
            return
        }
    }
    if err = os.Link(src, dst); err == nil {
        return
    }
    err = copyFileContents(src, dst)
    return
}

// copyFileContents copies the contents of the file named src to the file named
// by dst. The file will be created if it does not already exist. If the
// destination file exists, all it's contents will be replaced by the contents
// of the source file.
func copyFileContents(src, dst string) (err error) {
    in, err := os.Open(src)
    if err != nil {
        return
    }
    defer in.Close()
    out, err := os.Create(dst)
    if err != nil {
        return
    }
    defer func() {
        cerr := out.Close()
        if err == nil {
            err = cerr
        }
    }()
    if _, err = io.Copy(out, in); err != nil {
        return
    }
    err = out.Sync()
    return
}

func main() {
    fmt.Printf(""Copying %s to %s\n"", os.Args[1], os.Args[2])
    err := CopyFile(os.Args[1], os.Args[2])
    if err != nil {
        fmt.Printf(""CopyFile failed %q\n"", err)
    } else {
        fmt.Printf(""CopyFile succeeded\n"")
    }
}
</code></pre>
","21067803"
"What kind of solutions is Go designed for?","35841","","<p>Seems like Go is designed as a replacement for problems you previously would have solved with C++.  Is this an accurate statement?  What kind of solutions is Go designed for?</p>
","<p>I think MarkCC <a href=""http://scienceblogs.com/goodmath/2009/11/13/the-go-i-forgot-concurrency-an/"" rel=""noreferrer"">sums it up nicely</a>:</p>

<blockquote>
  <p>Goroutines and channels provide the best support I've seen outside of Erlang for making use of concurrency. And frankly, I think Go is a lot less ugly than Erlang. (Sorry Erlang fans, but I really don't like Erlang.) Compared to Java, which I think is the main competitor to Go in this area, Go's goroutines and channels are just so much easier to work with than Java threads and locks, there's just absolutely no comparison at all. Go pretty much destroys the competition in this area.</p>
</blockquote>
","1731632"
"How to avoid annoying error ""declared and not used"" from Golang","35808","","<p>I'm learning Golang but I feel it is a bit annoying that when compiling, I should not leave any variable or package unused. </p>

<p>This is really quite slowing me down. For example, I just wanted to declare a new package and plan to use it later or just uncomment some command to test. I always get the error and need to go comment all of those uses.</p>

<p>Is there any way to avoid this kind of check in Golang? </p>
","<p>That error is here to force you to write better code, and be sure to use everything you declare or import. It makes it easier to read code written by other people (you are always sure that all declared variables wiil be used), and avoid some possible dead code.</p>

<p>But, if you really want to skip this error, you can use the <a href=""http://golang.org/doc/effective_go.html#blank"" rel=""noreferrer"">blank identifier</a> (<code>_</code>) :</p>

<pre><code>package main

import (
    ""fmt"" // imported and not used: ""fmt""
)

func main() {
    i := 1 // i declared and not used
}
</code></pre>

<p>becomes</p>

<pre><code>package main

import (
    _ ""fmt"" // no more error
)

func main() {
    i := 1 // no more error
    _ = i
}
</code></pre>

<p>As said by kostix in the comments below, you can find the official position of the Go team <a href=""http://golang.org/doc/faq#unused_variables_and_imports"" rel=""noreferrer"">in the FAQ</a> : <em>""The presence of an unused variable may indicate a bug, while unused imports just slow down compilation. Accumulate enough unused imports in your code tree and things can get very slow. For these reasons, Go allows neither.""</em></p>
","21744129"
"Partly JSON unmarshal into a map in Go","35744","","<p>My websocket server will receive and unmarshal JSON data. This data will always be wrapped in an object with key/value pairs. The key-string will act as value identifier, telling the Go server what kind of value it is. By knowing what type of value, I can then proceed to JSON unmarshal the value into the correct type of struct.</p>

<p>Each json-object might contain multiple key/value pairs.</p>

<p>Example JSON:</p>

<pre><code>{
    ""sendMsg"":{""user"":""ANisus"",""msg"":""Trying to send a message""},
    ""say"":""Hello""
}
</code></pre>

<p>Is there any easy way using the <code>""encoding/json""</code> package to do this?</p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
)

// the struct for the value of a ""sendMsg""-command
type sendMsg struct {
    user string
    msg  string
}
// The type for the value of a ""say""-command
type say string

func main(){
    data := []byte(`{""sendMsg"":{""user"":""ANisus"",""msg"":""Trying to send a message""},""say"":""Hello""}`)

    // This won't work because json.MapObject([]byte) doesn't exist
    objmap, err := json.MapObject(data)

    // This is what I wish the objmap to contain
    //var objmap = map[string][]byte {
    //  ""sendMsg"": []byte(`{""user"":""ANisus"",""msg"":""Trying to send a message""}`),
    //  ""say"": []byte(`""hello""`),
    //}
    fmt.Printf(""%v"", objmap)
}
</code></pre>

<p>Thanks for any kind of suggestion/help!</p>
","<p>This can be accomplished by Unmarshalling into a <code>map[string]*json.RawMessage</code>.</p>

<pre><code>var objmap map[string]*json.RawMessage
err := json.Unmarshal(data, &amp;objmap)
</code></pre>

<p>To further parse <code>sendMsg</code>, you could then do something like:</p>

<pre><code>var s sendMsg
err = json.Unmarshal(*objmap[""sendMsg""], &amp;s)
</code></pre>

<p>For <code>say</code>, you can do the same thing and unmarshal into a string:</p>

<pre><code>var str string
err = json.Unmarshal(*objmap[""say""], &amp;str)
</code></pre>
","11067084"
"Casting back to more specialised interface","35575","","<p>I'm writing a game in go. In C++ I would store all my entity classes in an array of the BaseEntity class. If an entity needed to move about in the world it would be a PhysEntity which is derived from a BaseEntity, but with added methods. I tried to imitate this is go:</p>

<pre><code>package main

type Entity interface {
    a() string
}

type PhysEntity interface {
    Entity
    b() string
}

type BaseEntity struct { }
func (e *BaseEntity) a() string { return ""Hello "" }

type BasePhysEntity struct { BaseEntity }
func (e *BasePhysEntity) b() string { return "" World!"" }

func main() {
    physEnt := PhysEntity(new(BasePhysEntity))
    entity := Entity(physEnt)
    print(entity.a())
    original := PhysEntity(entity)
// ERROR on line above: cannot convert physEnt (type PhysEntity) to type Entity:
    println(original.b())
}
</code></pre>

<p>This will not compile as it cant tell that 'entity' was a PhysEntity. What is a suitable alternative to this method?</p>
","<p>Use a <a href=""http://golang.org/doc/go_spec.html#Type_assertions"" rel=""noreferrer"">type assertion</a>. For example,</p>

<pre><code>original, ok := entity.(PhysEntity)
if ok {
    println(original.b())
}
</code></pre>
","4801045"
"Unmarshaling nested JSON objects in Golang","35437","","<p>There are <a href=""https://stackoverflow.com/questions/20101954/go-json-unmarshal-nested-object-into-string-or-byte"">a</a> <a href=""https://stackoverflow.com/questions/9452897/how-to-decode-json-with-type-convert-from-string-to-float64-in-golang"">few</a> <a href=""https://stackoverflow.com/questions/9801312/golang-nested-properties-for-structs-with-unknown-property-names"">questions</a> on the <a href=""https://stackoverflow.com/questions/16674059/how-to-access-deeply-nested-json-keys-and-values"">topic</a> but none of them seem to cover my case, thus I'm creating a new one.</p>

<p>I have JSON like the following:</p>

<pre><code>{""foo"":{ ""bar"": ""1"", ""baz"": ""2"" }, ""more"": ""text""}
</code></pre>

<p>Is there a way to unmarshal the nested bar property and assign it directly to a struct property without creating a nested struct?</p>

<p>The solution I'm adopting right now is the following:</p>

<pre><code>type Foo struct {
    More String `json:""more""`
    Foo  struct {
        Bar string `json:""bar""`
        Baz string `json:""baz""`
    } `json:""foo""`
    //  FooBar  string `json:""foo.bar""`
}
</code></pre>

<p>This is a simplified version, please ignore the verbosity. As you can see, I'd like to be able to parse and assign the value to</p>

<pre><code>//  FooBar  string `json:""foo.bar""`
</code></pre>

<p>I've seen people using a map, but that's not my case. I basically don't care about the content of <code>foo</code> (which is a large object), except for a few specific elements.</p>

<p>What is the correct approach in this case? I'm not looking for weird hacks, thus if this is the way to go, I'm fine with that.</p>
","<blockquote>
  <p>Is there a way to unmarshal the nested bar property and assign it directly to a struct property without creating a nested struct?</p>
</blockquote>

<p>No, encoding/json cannot do the trick with "">some>deep>childnode"" like encoding/xml can do.
Nested structs is the way to go.</p>
","21268855"
"How to set default values in golang structs","35330","","<p>There are multiple answers/techniques to the below question:</p>

<ol>
<li>How to set default values to golang structs?</li>
<li>How to initialize structs in golang</li>
</ol>

<p>I have a couple of answers but further discussion is required.</p>
","<ol>
<li>Force a method to get the struct (the constructor way).</li>
</ol>

<blockquote>
  <p>A good design is to make your type unexported, but provide an exported
  constructor function like NewMyType() in which you can properly
  initialize your struct / type. Also return an interface type and not a
  concrete type, and the interface should contain everything others want
  to do with your value. And your concrete type must implement that
  interface of course.</p>
</blockquote>

<p>This can be done by simply make the type itself unexported. You can export the function NewSomething and even the fields Text and DefaultText, but just don't export the struct type something</p>

<ol start=""2"">
<li>Another way to customize it for you own module is by using a <a href=""http://joneisen.tumblr.com/post/53695478114/golang-and-default-values"" rel=""noreferrer"">Config struct to set default values</a> (Option 5 in the link) Not a good way though.</li>
</ol>
","37521991"
"Golang - TLS with selfsigned certificate","35328","","<p>I'm trying to establish a TLS connection with the use of a self signed server certificate.</p>

<p>I generated the certificate with this example code: <a href=""http://golang.org/src/pkg/crypto/tls/generate_cert.go"" rel=""noreferrer"">http://golang.org/src/pkg/crypto/tls/generate_cert.go</a></p>

<p>My relevant client code looks like that:</p>

<pre class=""lang-golang prettyprint-override""><code>// server cert is self signed -&gt; server_cert == ca_cert
CA_Pool := x509.NewCertPool()
severCert, err := ioutil.ReadFile(""./cert.pem"")
if err != nil {
    log.Fatal(""Could not load server certificate!"")
}
CA_Pool.AppendCertsFromPEM(severCert)

config := tls.Config{RootCAs: CA_Pool}

conn, err := tls.Dial(""tcp"", ""127.0.0.1:8000"", &amp;config)
if err != nil {
    log.Fatalf(""client: dial: %s"", err)
}
</code></pre>

<p>And the relevant server code like that:</p>



<pre><code>cert, err := tls.LoadX509KeyPair(""./cert.pem"", ""./key.pem"")
config := tls.Config{Certificates: []tls.Certificate{cert}}
listener, err := tls.Listen(""tcp"", ""127.0.0.1:8000"", &amp;config)

for {
    conn, err := listener.Accept()
    if err != nil {
        log.Printf(""server: accept: %s"", err)
        break
    }
    log.Printf(""server: accepted from %s"", conn.RemoteAddr())
    go handleConnection(conn)
}
</code></pre>

<p>Because the server certificate is self signed is use the same certificate for the server and the clients CA_Pool however this does not seem to work since i always get this error:</p>

<pre><code>client: dial: x509: certificate signed by unknown authority 
(possibly because of ""x509: invalid signature: parent certificate
cannot sign this kind of certificate"" while trying to verify 
candidate authority certificate ""serial:0"")
</code></pre>

<p>What's my mistake?</p>
","<p>It finally worked with the go built in x509.CreateCertificate, 
the problem was that <strong>I did not set the IsCA:true flag</strong>,
<strong>I only set the x509.KeyUsageCertSign</strong> which made creating the self signed certificate work, but crashed while verifying the cert chain.</p>
","22757584"
"Go, go get, go install, local packages, and version control","34916","","<p>I am having trouble understanding the workflow for creating a go project that has local packages.</p>

<p>Say I create a new project, using git for version control, which has a main.go file and a tools.go file which will be in package utils. So I have a directory structure such as this:</p>

<pre><code>/myproject/
   main.go
   utils/
     tools.go
</code></pre>

<p>main.go looks like this:</p>

<pre><code>package main
import ""./utils""
func main() {
    utils.DoSomthing()
}
</code></pre>

<p>and tools.go looks like this:</p>

<pre><code>package utils;
func DoSomething() {
}
</code></pre>

<p>Everything works just fine locally, using <em>go build</em> and <em>go run</em>. But this is being hosted on github, and I'd like to be able to have others use the <em>go get</em> command to install it. So the local package import must be changed to use the format ""github.com/user/project/utils"", which works, except now I have two copies of the source code, and the real problem is that the copy with the git history has an import that makes use of the downloaded copy. So if I'm working on the copy with the git history, any changes made to tools.go will go unnoticed, because it will be using the downloaded copy.</p>

<p>So I'm wondering if someone can explain the right way of using <em>go get</em>, version control, and package imports within the same project.</p>
","<p>I've just written a short step-by-step guide on how I am using the new <a href=""http://golang.org/cmd/go/"">go tool</a> and <a href=""http://github.com/"">github.com</a>. You might find it useful:</p>

<p><strong>1. Setup your GOPATH</strong></p>

<p>You can set the environment variable <code>GOPATH</code> to any directory you like. If you have larger projects, it's probably a good idea to create a different GOPATH for each of them. I would recommend this approach especially for the deployment, so that updating a library for project A doesn't break project B which might require an earlier version of the very same library.</p>

<p>Also note that you can set your GOPATH to a list of directories, delimited by colons. So you might have a GOPATH containing all commonly used packages, and separate GOPATHS for each project with additonal packages or different versions of existing packages.</p>

<p>But unless your are working on a lot of different Go projects simultaneously, its probably enough to have just a single GOPATH locally. So, let's create one:</p>

<pre><code>mkdir $HOME/gopath
</code></pre>

<p>Then you need to set two environment variables to tell the <a href=""http://golang.org/cmd/go/"">go tool</a> where it can find existing Go packages and where it should install new ones. It's probably best to add the following two lines to your <code>~/.bashrc</code> or <code>~/.profile</code> (and do not forget to reload your .bashrc afterwards).</p>

<pre><code>export GOPATH=""$HOME/gopath""
export PATH=""$GOPATH/bin:$PATH""
</code></pre>

<p><strong>2. Create a new project</strong></p>

<p>If you want to create a new Go project which should be hosted at <a href=""https://github.com/"">github.com</a> later, you should create this project under <code>$GOPATH/src/github.com/myname/myproject</code>. It's important that the path matches the URL of the github.com repo, because the go tool will follow the same convention. So, let's create the project root and initialize a new git repository there:</p>

<pre><code>mkdir -p $GOPATH/src/github.com/myname/myproject
cd $GOPATH/src/github.com/myname/myproject
git init
</code></pre>

<p>Because I do not like to type such long paths, I normally create symbolic links for the projects I am currently working on in my home folder:</p>

<pre><code>ln -s $GOPATH/src/github.com/myname/myproject ~/myproject
</code></pre>

<p><strong>3. Write your application</strong></p>

<p>Start coding and don't forget to <code>git add</code> and <code>git commit</code> your files. Also, do not use relative imports like <code>import ""./utils""</code> for sub-packages. They are currently undocumented and shouldn't be used at all, because they won't work with the go tool. Use imports like <code>github.com/myname/myproject/utils</code> instead.</p>

<p><strong>4. Publish your project</strong></p>

<p>Create a <a href=""https://github.com/repositories/new"">new repository at github.com</a>, upload your SSH public key if you haven't done that before and push your changes to the remote repository:</p>

<pre><code>git remote add origin git@github.com:myname/myproject.git
git push origin master
</code></pre>

<p><strong>5. Continue working on your project</strong></p>

<p>If you have set the GOPATH in your .bashrc and if you have created a symlink to your project in your home folder, you can just type <code>cd myproject/</code> and edit some files there. Afterwards, you can commit the changes using <code>git commit -a</code> and send them to <a href=""https://github.com/"">github.com</a> by doing a <code>git push</code>.</p>
","10142340"
"Iterate through the fields of a struct in Go","34889","","<p>Basically, the only way (that I know of) to iterate through the values of the fields of a <code>struct</code> is like this:</p>

<pre><code>type Example struct {
    a_number uint32
    a_string string
}

//...

r := &amp;Example{(2 &lt;&lt; 31) - 1, ""....""}:
for _, d:= range []interface{}{ r.a_number, r.a_string, } {
  //do something with the d
}
</code></pre>

<p>I was wondering, if there's a better and more versatile way of achieving <code>[]interface{}{ r.a_number, r.a_string, }</code>, so I don't need to list each parameter individually, or alternatively, is there a better way to loop through a struct?</p>

<p>I tried to look through the <a href=""http://golang.org/pkg/reflect/"" rel=""noreferrer""><code>reflect</code></a> package, but I hit a wall, because I'm not sure what to do once I retrieve <code>reflect.ValueOf(*r).Field(0)</code>.</p>

<p>Thanks!</p>
","<p>After you've retrieved the <code>reflect.Value</code> of the field by using <code>Field(i)</code> you can get a
interface value from it by calling <code>Interface()</code>. Said interface value then represents the 
value of the field.</p>

<p>There is no function to convert the value of the field to a concrete type as there are,
as you may know, no generics in go. Thus, there is no function with the signature <code>GetValue() T</code>
with <code>T</code> being the type of that field (which changes of course, depending on the field).</p>

<p>The closest you can achieve in go is <code>GetValue() interface{}</code> and this is exactly what <code>reflect.Value.Interface()</code>
offers.</p>

<p>The following code illustrates how to get the values of each exported field in a struct
using reflection (<a href=""http://play.golang.org/p/gSnZ8mLll-"" rel=""noreferrer"">play</a>):</p>

<pre><code>import (
    ""fmt""
    ""reflect""
)

func main() {
    x := struct{Foo string; Bar int }{""foo"", 2}

    v := reflect.ValueOf(x)

    values := make([]interface{}, v.NumField())

    for i := 0; i &lt; v.NumField(); i++ {
        values[i] = v.Field(i).Interface()
    }

    fmt.Println(values)
}
</code></pre>
","18927729"
"Performance of Google's Go?","34747","","<p>So has anyone used Google's Go?  I was wondering how the mathematical performance (e.g. flops) is compared to other languages with a garbage collector... like Java or .NET?</p>

<p>Has anyone investigated this?</p>
","<p>The Go <a href=""http://golang.org/pkg/math/"" rel=""noreferrer"">math package</a> is largely written in assembler for performance.</p>

<p>Benchmarks are often unreliable and are subject to interpretation. For example, Robert Hundt's paper <a href=""http://research.google.com/pubs/pub37122.html"" rel=""noreferrer"">Loop Recognition in C++/Java/Go/Scala</a> looks flawed. The Go blog post on <a href=""http://blog.golang.org/2011/06/profiling-go-programs.html"" rel=""noreferrer"">Profiling Go Programs</a> dissects Hundt's claims.</p>
","6549081"
"Setting Cookies in Golang (net/http)","34524","","<p>I'm trying to set cookies with Golang's net/http. I have</p>

<pre><code>package main

import ""io""
import ""net/http""
import ""time""

func indexHandler(w http.ResponseWriter, req *http.Request) {
    expire := time.Now().AddDate(0, 0, 1)
    cookie := http.Cookie{""test"", ""tcookie"", ""/"", ""www.domain.com"", expire, expire.Format(time.UnixDate), 86400, true, true, ""test=tcookie"", []string{""test=tcookie""}}
    req.AddCookie(&amp;cookie)
    io.WriteString(w, ""Hello world!"")
}

func main() {
    http.HandleFunc(""/"", indexHandler)
    http.ListenAndServe("":80"", nil)
}
</code></pre>

<p>I tried googling 'Golang' with 'cookies', but didn't get any good results. If anyone can point me in the right direction it would be greatly appreciated.</p>

<p>Thanks.</p>
","<p>I am not a Go expert, but I think you are setting the cookie on the request, aren't you. You might want to set it on the response. There is a <code>setCookie</code> function in net/http. This might help:
<a href=""http://golang.org/pkg/net/http/#SetCookie"">http://golang.org/pkg/net/http/#SetCookie</a></p>

<pre><code>func SetCookie(w ResponseWriter, cookie *Cookie)
</code></pre>
","12130619"
"if else statment in go lang","34470","","<p>Could someone help me debug this program, only the else part is processed on every input.
This id a program for grading students. a student inputs a mark and the the grade is displayed</p>

<pre><code>func main(){
    var x int
    fmt.Println(""Enter your marks"")

    fmt.Scanf(""%d"",&amp;x)

    if (100 &lt;= x) &amp;&amp; (x&lt;=75){
        fmt.Println(""D1"")
    }else if (74 &lt;= x)&amp;&amp;(x &lt;= 70){
        fmt.Println(""D2"")
    }else if (69 &lt;= x )&amp;&amp;(x&lt;=65){
        fmt.Println(""C3"")
    }else if (64 &lt;= x)&amp;&amp;(x &lt;= 60){
        fmt.Println(""C4"")
    }else if (59 &lt;= x)&amp;&amp;(x &lt;= 55){
        fmt.Println(""C5"")
    }else if (54 &lt;= x)&amp;&amp;( x&lt;= 50){
        fmt.Println(""C6"")
    }else if (49 &lt;= x )&amp;&amp;(x&lt;= 45){
        fmt.Println(""P7"")
    }else{
        fmt.Println(""Work harder"")
    }
}
</code></pre>
","<p>You have a logic problem.</p>

<p>Change</p>

<pre><code>if (100 &lt;= x) &amp;&amp; (x&lt;=75){
</code></pre>

<p>to</p>

<pre><code>if 75 &lt;= x &amp;&amp; x &lt;= 100 { // numbers here are ordered from smallest to greatest
</code></pre>

<p>because a number can't be greater than 100 <em>and</em> smaller than 75.</p>

<p>And it's the same for the other lines of course.</p>

<p>Note that you could make less comparisons. Suppose you test if the number is smaller than 100 initially, then you don't have to test if it's smaller than 75 just after you tested it's smaller than 75.</p>

<p>A typical Go code would probably have a <code>switch</code> here instead of all those <code>if/else</code>. See <a href=""http://golang.org/doc/effective_go.html#switch"" rel=""noreferrer"">switch in the documentation</a>. Here's how it could be written with a <code>switch</code> :</p>

<pre><code>switch {
case x &gt; 100:
    fmt.Println(""Congrats!"") // you forgot this one
case x &gt;= 75:
    fmt.Println(""D1"")
case x &gt;= 70:
    fmt.Println(""D2"")
case x &gt;= 65:
    fmt.Println(""C3"")
case x &gt;= 60:
    fmt.Println(""C4"")
case x &gt;= 55:
    fmt.Println(""C5"")
case x &gt;= 50:
    fmt.Println(""C6"")
case x &gt;= 45:
    fmt.Println(""P7"")
default:
    fmt.Println(""Work harder"")
}
</code></pre>

<p>A last comment : This type of switching code rarely occurs because normally the thresholds and related notes are stored as data, for example in a <code>struct</code>.</p>
","19277552"
"Create a Golang map of Lists","34321","","<p>I'd like to create a map of <code>container/list.List</code> instances. Is this the correct way to go about it?</p>

<pre><code>package main

import (
    ""fmt""
    ""container/list""
)

func main() {
    x := make(map[string]*list.List)

    x[""key""] = list.New()
    x[""key""].PushBack(""value"")

    fmt.Println(x[""key""].Front().Value)
}
</code></pre>
","<p>Whenever I've wanted to use a <code>List</code> I've found that a slice was the right choice, eg</p>

<pre><code>package main

import ""fmt""

func main() {
    x := make(map[string][]string)

    x[""key""] = append(x[""key""], ""value"")
    x[""key""] = append(x[""key""], ""value1"")

    fmt.Println(x[""key""][0])
    fmt.Println(x[""key""][1])
}
</code></pre>
","12678769"
"I use IntelliJ IDEA as golang IDE, and system environment have already set GOPATH，But IDEA can't load it","34103","","<p>I use IntelliJ IDEA as golang IDE in Windows , and system environment have already set GOPATH，but  IDEA can't load $GOPATH. </p>

<p>I use <code>go get github.com/astaxie/beego</code>, this package is installed correctly, but in IDEA can't import this library.</p>

<p>I have added this package in project's structure in this way:</p>

<p><img src=""https://i.stack.imgur.com/ulIA2.jpg"" alt=""enter image description here""></p>

<p>and this project's choice “Go sdk go1.1.1 windows/amd64 ”like
<img src=""https://i.stack.imgur.com/7BpvZ.jpg"" alt=""enter image description here""></p>

<p>how can I set GOPATH in idea?</p>
","<h1>Update (2017-10-22)</h1>

<p>According to the release notes of the new version of Gogland (EAP 16), the corresponding <strong>Go plugin can only be used with IntelliJ IDEA Ultimate</strong> from now on. This follows the pattern of providing support for different languages either via a plugin for IntelliJ IDEA Ultimate, or as a standalone IDE, such as PyCharm, Webstorm, or in this case, Gogland.</p>

<p>For more details see the <a href=""https://blog.jetbrains.com/go/2017/10/18/gogland-eap-16-file-watcher-tons-of-new-inspections-smarter-navigate-to-test-and-more/"" rel=""nofollow noreferrer"">related blog post</a>.</p>

<h1>Update (2017-04-24)</h1>

<p>As an alternative solution that ultimately deals with the OP's problem, I would like to recommend the new IDE specifically for Go development, JetBrains Gogland. The setup is pretty much effortless, but in case you would have difficulties, there is already heplful documentation provided.</p>

<p>Check <a href=""https://www.jetbrains.com/go/"" rel=""nofollow noreferrer"">Gogland</a>, might work for you.</p>

<p>There is also an <a href=""https://plugins.jetbrains.com/plugin/9568-go"" rel=""nofollow noreferrer"">official plugin</a> that ""has everything you could find in Gogland"".</p>

<p>In case you are wondering what could be the difference between this new plugin, and the old <code>go-lang-idea-plugin</code>, check the <a href=""https://www.jetbrains.com/help/go/1.0/faq.html#d3e55"" rel=""nofollow noreferrer"">FAQ article</a> with the explanation.</p>

<h1>Original answer</h1>

<h2>Background info</h2>

<p>On OS X Mavericks, Go installed via Macports. Using Go plugin version 0.9.15 with IntelliJ IDEA.</p>

<h2>Problem</h2>

<p>I wanted to make the IDE understand the imports and provide autocomplete for any package I have installed in GOPATH. (I started creating an app using Revel and were missing the autocomplete...)</p>

<h2>Solution</h2>

<p>Here is what I did:</p>

<ul>
<li>Configure the Go SDK (In menu: View > Open Library Settings > Platform Settings > SDKs).</li>
<li>Open the ""Classpath"" tab of the Go SDK you want to set up.</li>
<li>Add a new item, select the 'src' directory in your $GOPATH.</li>
<li>Click 'Apply' or 'OK'.</li>
<li>(not working!?!?, grumble, headache...)</li>
<li>In menu: File > Invalidate Caches / Restart...</li>
<li>Click 'Invalidate and Restart'.</li>
<li>WIN!</li>
</ul>

<p>Hope this might be what you were looking for!</p>
","21351746"
"Golang parse JSON array into data structure","33883","","<p>I am trying to parse a file which contains JSON data:</p>

<pre><code>[
  {""a"" : ""1""},
  {""b"" : ""2""},
  {""c"" : ""3""}
]
</code></pre>

<p>Since this is a JSON array with dynamic keys, I thought I could use:</p>

<pre><code>type data map[string]string
</code></pre>

<p>However, I cannot parse the file using a <code>map</code>:</p>

<pre><code>c, _ := ioutil.ReadFile(""c"")
dec := json.NewDecoder(bytes.NewReader(c))
var d data
dec.Decode(&amp;d)


json: cannot unmarshal array into Go value of type main.data
</code></pre>

<p>What would be the most simple way to parse a file containing a JSON data is an array (only string to string types) into a Go struct?</p>

<p><strong>EDIT:</strong> To further elaborate on the accepted answer -- it's true that my JSON is an array of maps. To make my code work, the file should contain:</p>

<pre><code>{
  ""a"":""1"",
  ""b"":""2"",
  ""c"":""3""
}
</code></pre>

<p>Then it can be read into a <code>map[string]string</code></p>
","<p>It's because your json is actually an array of maps, but you're trying to unmarshall into just a <code>map</code>. Try using the following:</p>

<pre><code>type YourJson struct {
    YourSample []struct {
        data map[string]string
    } 
}
</code></pre>
","25465991"
"Why are lists used infrequently in Go?","33600","","<p>I'm new to Go, and quite excited about it. But, in all the languages I've worked with extensively: Delphi, C#, C++, Python - Lists are very important because they can be dynamically resized, as opposed to arrays.</p>

<p>In Golang, there is indeed a <code>list.List</code>struct, but I see very little documentation about it - whether in <a href=""https://gobyexample.com/"" rel=""noreferrer"">Go By Example</a> or the three Go books that I have - Summerfield, Chisnal and Balbaert - they all spend a lot of time on arrays and slices and then skip to maps. In souce code examples I also find little or no use of <code>list.List</code>.</p>

<p>It also appears that, unlike Python, <code>Range</code> is not supported for List -  big drawback IMO. Am I missing something?</p>

<p>Slices are certainly nice, but they still need to be based on an array with a hard coded size. That's where List comes in. Is there a way to create an array /slice in Go without a hard coded array size? Why is List ignored?</p>
","<p>I asked this question a few months ago, when I first started investigating Go. Since then, every day I have been reading about Go, and coding in Go. </p>

<p>Because I did not receive a clear-cut answer to this question (although I had accepted one answer) I'm now going to answer it myself, based on what I have learned, since I asked it:</p>

<blockquote>
  <p>Is there a way to create an array /slice in Go without a hard coded
  array size?</p>
</blockquote>

<p>Yes. Slices do not require a hard coded array to <code>slice</code> from:</p>

<pre><code>var sl []int = make([]int,len,cap)
</code></pre>

<p>This code allocates slice <code>sl</code>, of size <code>len</code> with a capacity of <code>cap</code> - <code>len</code> and <code>cap</code> are variables that can be assigned at runtime.</p>

<blockquote>
  <p>Why is <code>list.List</code> ignored?</p>
</blockquote>

<p>It appears the main reasons <code>list.List</code> seem to get little attention in Go are:</p>

<ul>
<li><p>As has been explained in @Nick Craig-Wood's answer, there is
virtually nothing that can be    done with lists that cannot be done
with slices, often more    efficiently and with a cleaner, more
elegant syntax. For example the    range construct:</p>

<pre><code>for i:=range sl {
  sl[i]=i
}
</code></pre>

<p>cannot be used with list - a C style for loop is required. And in
many cases, C++ collection style syntax must be used with lists:
<code>push_back</code> etc.</p></li>
<li><p>Perhaps more importantly, <code>list.List</code> is not strongly typed - it is very similar to Python's lists and dictionaries, which allow for mixing various types together in the collection. This seems to run contrary
to the Go approach to things. Go is a very strongly typed language - for example, implicit type conversions never allowed in Go, even an upCast from <code>int</code> to <code>int64</code> must be
explicit. But all the methods for list.List take empty interfaces -
anything goes. </p>

<p>One of the reasons that I abandoned Python and moved to Go is because
of this sort of weakness in Python's type system, although Python
claims to be ""strongly typed"" (IMO it isn't). Go's<code>list.List</code>seems to
be a sort of ""mongrel"", born of C++'s <code>vector&lt;T&gt;</code> and Python's
<code>List()</code>, and is perhaps a bit out of place in Go itself.</p></li>
</ul>

<p>It would not surprise me if at some point in the not too distant future, we find list.List deprecated in Go, although perhaps it will remain, to accommodate those <strong>rare</strong> situations where, even using good design practices, a problem can best be solved with a collection that holds various types. Or perhaps it's there to provide a ""bridge"" for C family developers to get comfortable with Go before they learn the nuances of slices, which are  unique to Go, AFAIK. (In some respects slices seem similar to stream classes in C++ or Delphi, but not entirely.) </p>

<p>Although coming from a Delphi/C++/Python background, in my initial exposure to Go I found <code>list.List</code> to be more familiar than Go's slices, as I have become more comfortable with Go, I have gone back and changed all my lists to slices. I haven't found anything yet that <code>slice</code> and/or <code>map</code> do not allow me to do, such that I need to use <code>list.List</code>.</p>
","22701892"
"How to convert interface{} to string?","33159","","<p>I'm using <a href=""http://docopt.org/"">docopt</a> to parse command-line arguments. This works, and it results in a map, such as</p>

<pre><code>map[&lt;host&gt;:www.google.de &lt;port&gt;:80 --help:false --version:false]
</code></pre>

<p>Now I would like to concatenate the <code>host</code> and the <code>port</code> value to a string with a colon in-between the two values. Basically, something such as:</p>

<pre><code>host := arguments[""&lt;host&gt;""] + "":"" + arguments[""&lt;port&gt;""]
</code></pre>

<p>Unfortunately, this doesn't work, as I get the error message:</p>

<blockquote>
  <p>invalid operation: arguments[""""] + "":"" (mismatched types interface {} and string)</p>
</blockquote>

<p>So obviously I need to convert the value that I get from the map (which is just <code>interface{}</code>, so it can be anything) to a string. Now my question is, how do I do that?</p>
","<p>You need to add <a href=""https://golang.org/ref/spec#Type_assertions"">type assertion</a> <code>.(string)</code>. It is necessary because the map is of type <code>map[string]interface{}</code>:</p>

<pre><code>host := arguments[""&lt;host&gt;""].(string) + "":"" + arguments[""&lt;port&gt;""].(string)
</code></pre>
","27137607"
"Does any golang interactive debugger exist?","33006","","<p>The title pretty much sums it up. I am trying out Go and I really miss being able to set breakpoints and step in/over/out as much as I want within an interactive environment. I know I can use gdb to debug Go but that is quite annoying compared to using an IDE that can plug into gdb for breakpointing.</p>

<p>I tried searching for one and could only find plugins or small IDEs that have syntax highlighting but no debugging.</p>
","<p><strong>Update</strong>: Personally, while GDB works I'm not a fan of using it in Go and it will make you spit some blood. Check out some of the other answers for good alternatives. </p>

<hr>

<p>Yes, of course :)</p>

<p>Go has a debugger (GDB)</p>

<p>Here is <a href=""http://golang.org/doc/gdb"" rel=""noreferrer"">the official tutorial</a> on how to use it.</p>

<p>If you'd like 'graphical debugging' (that is, setting breakpoints in the editor) some IDEs let you do that (with GDB in the background).</p>

<p>In specific, Eclipse, LiteIDE and Zeus all let you set breakpoints and debug from your coding environment <a href=""http://geekmonkey.org/articles/20-comparison-of-ides-for-google-go"" rel=""noreferrer"">(source)</a>. <a href=""http://www.youtube.com/watch?v=84i7H-E0YUM"" rel=""noreferrer"">Here is a video on how to do it with Zeus</a>.</p>
","16492524"
"Catching panics in Golang","33005","","<p>With the following code, if no file argument is given, a panic is thrown for line 9 <code>panic: runtime error: index out of range</code> as expected.</p>

<p>How can I 'catch' this panic and handle it when directly when passing something to it (<code>os.Args[1]</code>) that causes the panic? Much like try/catch in PHP or try/except in Python.</p>

<p>I've had a search here on StackOverflow but I've not found anything that answers this as such.</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
)

func main() {
    file, err := os.Open(os.Args[1])
    if err != nil {
        fmt.Println(""Could not open file"")
    }
    fmt.Printf(""%s"", file)
}
</code></pre>
","<p>Go is not python, you should properly check for args before you use it:</p>

<pre><code>func main() {
    if len(os.Args) != 2 {
         fmt.Printf(""usage: %s [filename]\n"", os.Args[0])
         os.Exit(1)
    }
    file, err := os.Open(os.Args[1])
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf(""%s"", file)
}
</code></pre>
","25025558"
"Redirect stdout pipe of child process in Go","32985","","<p>I'm writing a program in Go that executes a server like program (also Go). Now I want to have the stdout of the child program in my terminal window where I started the parent program. One way to do this is with the <code>cmd.Output()</code> function, but this prints the stdout only after the process has exited. (That's a problem because this server-like program runs for a long time and I want to read the log output)</p>

<p>The variable <code>out</code> is of <code>type io.ReadCloser</code> and I don't know what I should do with it to achieve my task, and I can't find anything helpful on the web on this topic.</p>

<pre><code>func main() {
    cmd := exec.Command(""/path/to/my/child/program"")
    out, err := cmd.StdoutPipe()
    if err != nil {
        fmt.Println(err)
    }
    err = cmd.Start()
    if err != nil {
        fmt.Println(err)
    }
    //fmt.Println(out)
    cmd.Wait()
} 
</code></pre>

<p>Explanation to the code: uncomment the <code>Println</code> function to get the code to compile, I know that <code>Println(out io.ReadCloser)</code> is not a meaningful function.<br>
 (it produces the output <code>&amp;{3 |0 &lt;nil&gt; 0}</code> ) These two lines are just required to get the code to compile.</p>
","<blockquote>
  <p>Now I want to have the stdout of the child program in my terminal
  window where I started the parent program.</p>
</blockquote>

<p>No need to mess with pipes or goroutines, this one is easy.</p>

<pre><code>func main() {
    // Replace `ls` (and its arguments) with something more interesting
    cmd := exec.Command(""ls"", ""-l"")
    cmd.Stdout = os.Stdout
    cmd.Stderr = os.Stderr
    cmd.Run()
}
</code></pre>
","14885714"
"How to check for an empty struct?","32224","","<p>I define a struct ...</p>

<pre><code>type Session struct {
    playerId string
    beehive string
    timestamp time.Time
}
</code></pre>

<p>Sometimes I assign an empty session to it (because nil is not possible)</p>

<pre><code>session = Session{};
</code></pre>

<p>Then I want to check, if it is empty:</p>

<pre><code>if session == Session{} {
     // do stuff...
}
</code></pre>

<p>Obviously this is not working. How do I write it?</p>
","<p>You can use == to compare with a zero value composite literal because all fields are <a href=""https://golang.org/ref/spec#Comparison_operators"">comparable</a>:</p>

<pre><code>if (Session{}) == session  {
    fmt.Println(""is zero value"")
}
</code></pre>

<p><a href=""http://play.golang.org/p/wRUmxj1naS"">playground example</a></p>

<p>Because of a <a href=""https://golang.org/ref/spec#Composite_literals"">parsing ambiguity</a>, parentheses are required around the composite literal in the if condition.</p>

<p>An alternative to comparing the entire value is to compare a field that must be set to a non-zero value in a valid session. For example, if the player id must be != """" in a valid session, use </p>

<pre><code>if session.playerId == """" {
    fmt.Println(""is zero value"")
}
</code></pre>
","28447372"
"Go, Golang : array type inside struct, missing type composite literal","32150","","<p>I need to add slice type to this struct.</p>

<pre><code> type Example struct {
    text  []string
 }

 func main() {
    var arr = []Example {
        {{""a"", ""b"", ""c""}},
    }
    fmt.Println(arr)    
 }
</code></pre>

<p>Then I am getting</p>

<pre><code>  prog.go:11: missing type in composite literal
  [process exited with non-zero status]
</code></pre>

<p>So specify the composite literal</p>

<pre><code>    var arr = []Example {
         {Example{""a"", ""b"", ""c""}},
</code></pre>

<p>But still getting this error:</p>

<pre><code>    cannot use ""a"" (type string) as type []string in field value
</code></pre>

<p><a href=""http://play.golang.org/p/XKv1uhgUId"" rel=""noreferrer"">http://play.golang.org/p/XKv1uhgUId</a></p>

<p>How do I fix this? How do I construct the struct that contains array(slice) type?</p>
","<p>Here is your proper slice of <code>Example</code> struct:</p>

<pre><code>[]Example{
  Example{
   []string{""a"", ""b"", ""c""},
  },
}
</code></pre>

<p>Let me explain it. You want to make a slice of <code>Example</code>. So here it is — <code>[]Example{}</code>. Then it must be populated with an <code>Example</code> — <code>Example{}</code>. <code>Example</code> in turn consists of <code>[]string</code> — <code>[]string{""a"", ""b"", ""c""}</code>. It just the matter of proper syntax.</p>

<p>Hope that helps.</p>
","19482647"
"Go - Parsing date/time strings which are not 'standard' formats","32149","","<p>How do I parse non-standard date/time strings in Go. In example if I wanted to convert the string <code>10/15/1983</code> into a <code>time.Time</code>? The <code>time.Parse()</code> function supposedly allows you to specify a format.</p>

<p><a href=""http://play.golang.org/p/v5DbowXt1x"">http://play.golang.org/p/v5DbowXt1x</a></p>

<pre><code>package main

import ""fmt""
import ""time""

func main() {
    test, err := time.Parse(""10/15/1983"", ""10/15/1983"")
    if err != nil {
        panic(err)
    }

    fmt.Println(test)
}
</code></pre>

<p>This results in a panic.</p>

<p><code>panic: parsing time ""10/15/1983"" as ""10/15/1983"": cannot parse """" as ""0/""</code></p>

<p>Logically that makes sense because how is it supposed to know which is the day and which is the month.</p>

<p>Other languages have a function similar to the following:</p>

<p><code>parse(""mm/dd/yyyy"", ""10/15/1983"")</code></p>

<p>I cannot find such a function in the Go docs, is my only choice to regex?</p>
","<p>There are some key values that the time.Parse is looking for.</p>

<p>By changing:</p>

<pre><code>test, err := time.Parse(""10/15/1983"", ""10/15/1983"")
</code></pre>

<p>to</p>

<pre><code>test, err := time.Parse(""01/02/2006"", ""10/15/1983"")
</code></pre>

<p>the parser will recognize it.</p>

<p>Here's the <a href=""http://play.golang.org/p/tPr45KHNbF"">modified code on the playground</a>.</p>

<pre><code>package main

import ""fmt""
import ""time""

func main() {
    test, err := time.Parse(""01/02/2006"", ""10/15/1983"")
    if err != nil {
        panic(err)
    }

    fmt.Println(test)
}
</code></pre>

<p><br/></p>

<p>You can utilize the constants list in the <a href=""http://golang.org/src/pkg/time/format.go"">src/pkg/time/format.go</a> file to create your own parse formats.</p>

<pre><code>const (
    stdLongMonth      = ""January""
    stdMonth          = ""Jan""
    stdNumMonth       = ""1""
    stdZeroMonth      = ""01""
    stdLongWeekDay    = ""Monday""
    stdWeekDay        = ""Mon""
    stdDay            = ""2""
    stdUnderDay       = ""_2""
    stdZeroDay        = ""02""
    stdHour           = ""15""
    stdHour12         = ""3""
    stdZeroHour12     = ""03""
    stdMinute         = ""4""
    stdZeroMinute     = ""04""
    stdSecond         = ""5""
    stdZeroSecond     = ""05""
    stdLongYear       = ""2006""
    stdYear           = ""06""
    stdPM             = ""PM""
    stdpm             = ""pm""
    stdTZ             = ""MST""
    stdISO8601TZ      = ""Z0700""  // prints Z for UTC
    stdISO8601ColonTZ = ""Z07:00"" // prints Z for UTC
    stdNumTZ          = ""-0700""  // always numeric
    stdNumShortTZ     = ""-07""    // always numeric
    stdNumColonTZ     = ""-07:00"" // always numeric
)
</code></pre>

<p>So anytime your format specifies a year, it should be done with ""06"" or ""2006"", seconds are specified by ""05"" or ""5"" and time zones are specified at ""MST"", ""Z0700"", ""Z07:00"", ""-0700"", ""-07"" or ""-07:00"".  If you reference the constants list you can likely put together any standard format you'd need to parse.</p>

<p>For example, if you want to parse the date/time in the <a href=""http://en.wikipedia.org/wiki/Common_Log_Format"">Common Log Format</a>, the format Apache uses for its log files, you would do so by passing the following string to <code>time.Parse()</code> as the <i>layout</i> argument.</p>

<pre><code>""02/Jan/2006:15:04:05 -0700""
</code></pre>

<p>""02"" denotes the day of the month field, ""Jan"" denotes the month name field, ""2006"" denotes the year field, ""15"" denotes the hour of day field in 24 hour format, ""04"" denotes the minutes field, ""05"" denotes the seconds field and ""-0700"" denotes the time zone field.</p>

<p>That format would parse the current PST time: <code>31/Dec/2012:15:32:25 -0800</code></p>

<p>So the <code>time.Parse()</code> call would look like this:</p>

<pre><code>test, err := time.Parse(""02/Jan/2006:15:04:05 -0700"", ""31/Dec/2012:15:32:25 -0800"")
</code></pre>
","14106561"
"issue with accessing GET parameters net/http in golang","32082","","<p>Following is my go program to extract GET parameters. (URL: <strong>/mysql?hostname=example.com</strong>)</p>

<pre><code>package main

import (
        ""net/http""
        ""fmt""
        //""encoding/json""
        //""html""
        ""github.com/kr/pretty""
);

func main(){
        http.HandleFunc(""/"", foo)
        http.ListenAndServe("":80"", nil)
}

func foo(w http.ResponseWriter, r * http.Request){
        w.Header().Set(""Server"",""A Go WebServer"")

        w.Header().Set(""Content-Type"", ""text/html"")

        hostname := r.URL.Query()[""hostname""]
        //w.Write([]byte(hostname[0]))
        fmt.Printf(""%# v"", pretty.Formatter(hostname[0]))


        w.Write([]byte(hostname))
}
</code></pre>

<p>Error shown on console.</p>

<pre><code>""example.com""2014/09/01 02:57:22 http: panic serving 172.17.92.14:49411: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42dc41)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f8b5)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410381)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x410228)
/root/go/src/api/main.go:34 (0x400d77)
    foo: fmt.Printf(""%# v"", pretty.Formatter(hostname[0]))
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421bed)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422a6f)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x421a00)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d9bb)
2014/09/01 02:57:22 http: panic serving 172.17.92.14:49412: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42dc41)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f8b5)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410381)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x410228)
/root/go/src/api/main.go:34 (0x400d77)
    foo: fmt.Printf(""%# v"", pretty.Formatter(hostname[0]))
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421bed)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422a6f)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x421a00)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d9bb)
2014/09/01 02:57:22 http: panic serving 172.17.92.14:49413: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42dc41)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f8b5)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410381)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x410228)
/root/go/src/api/main.go:34 (0x400d77)
    foo: fmt.Printf(""%# v"", pretty.Formatter(hostname[0]))
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421bed)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422a6f)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x421a00)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d9bb)
</code></pre>

<p>I am having trouble with determining the data type of hostname variable. I should get it as a string.</p>

<p>When I try to write to http response writer</p>

<pre><code>w.Write([]byte(hostname))
</code></pre>

<p>following build error is shown</p>

<pre><code>go/src/api/main.go:38: cannot convert hostname (type []string) to type []byte
</code></pre>

<p>If I treat it as a string array build is successful but there is run time error</p>

<pre><code>        newhost := hostname[0];
        w.Write([]byte(newhost))
</code></pre>

<p>Error:</p>

<pre><code>    2014/09/01 04:42:40 http: panic serving 172.17.92.14:50404: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42db27)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f79b)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410267)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x41010e)
/root/go/src/api/main.go:38 (0x400d63)
    foo: newhost := hostname[0];
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421ad3)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422955)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x4218e6)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d8a1)
2014/09/01 04:42:40 http: panic serving 172.17.92.14:50405: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42db27)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f79b)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410267)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x41010e)
/root/go/src/api/main.go:38 (0x400d63)
    foo: newhost := hostname[0];
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421ad3)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422955)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x4218e6)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d8a1)
2014/09/01 04:42:40 http: panic serving 172.17.92.14:50406: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42db27)
    _func_003: buf.Write(debug.Stack())
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:1443 (0x40f79b)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:128 (0x410267)
/home/michael/DPKG/golang/src/pkg/runtime/runtime.c:85 (0x41010e)
/root/go/src/api/main.go:38 (0x400d63)
    foo: newhost := hostname[0];
/usr/lib/go/src/pkg/net/http/server.go:690 (0x421ad3)
    HandlerFunc.ServeHTTP: f(w, r)
/usr/lib/go/src/pkg/net/http/server.go:926 (0x422955)
    (*ServeMux).ServeHTTP: mux.handler(r).ServeHTTP(w, r)
/usr/lib/go/src/pkg/net/http/server.go:656 (0x4218e6)
    (*conn).serve: handler.ServeHTTP(w, w.req)
/home/michael/DPKG/golang/src/pkg/runtime/proc.c:271 (0x40d8a1)
</code></pre>

<p>I also checked length of newhost as @VonC suggested and it gave expected results.</p>

<pre><code>        fmt.Print(""\n"")
        fmt.Println((len(newhost)))
</code></pre>

<p>Output on console</p>

<pre><code>""example.com""
11
2014/09/01 05:05:15 http: panic serving 172.17.92.14:50779: runtime error: index out of range
/usr/lib/go/src/pkg/net/http/server.go:576 (0x42dd33)
</code></pre>
","<p>You need to use <a href=""http://golang.org/pkg/net/url/#Values.Get"" rel=""noreferrer""><code>url/Values.Get</code></a>, it will return the empty string if the value isn't set:</p>

<pre><code>hostname := r.URL.Query().Get(""hostname"")
if len(hostname) != 0 {
    io.WriteString(w, hostname)  // or
    w.Write([]byte(hostname))
}
</code></pre>

<p>// edit</p>

<p>Let's take it a step by step:</p>

<p><code>go/src/api/main.go:38: cannot convert hostname (type []string) to type []byte</code>:</p>

<ul>
<li><code>req.URL.Query[""hostname""]</code>, returns a string slice (<code>[]string</code>) which you can't directly convert to <code>[]byte</code>, only <code>string</code> can be converted like that.</li>
</ul>

<p>The first <code>runtime error: index out of range</code>:</p>

<ul>
<li>You're trying to use <code>hostname[0]</code> without checking how many elements in the slice, so in that case there weren't any elements.</li>
</ul>

<p>That last <code>runtime error: index out of range</code> is weird though, I have no idea why you got it, must be something else you changed in the code.</p>
","25606975"
"Dynamically initialize array size in go","31952","","<p>I try to write a small application in go that takes 'x' numbers of integers from standard input, calculates the mean and gives it back. I have only gotten so far:</p>

<pre><code>func main() {
var elems, mean int
sum := 0

fmt.Print(""Number of elements? "")

fmt.Scan(&amp;elems)

var array = new([elems]int)

for i := 0; i &lt; elems; i++ {
    fmt.Printf(""%d . Number? "", i+1)
    fmt.Scan(&amp;array[i])
    sum += array[i];
}............
</code></pre>

<p>When trying to compile this I get the following error message:</p>

<blockquote>
  <p>invalid array bound elems</p>
</blockquote>

<p>What is wrong here?</p>
","<p>you should use a slice:</p>

<pre><code>//var array = new([elems]int) - no, arrays are not dynamic
var slice = make([]int,elems) // or slice := make([]int, elems)
</code></pre>

<p>see ""<a href=""http://blog.golang.org/2011/01/go-slices-usage-and-internals.html"">go slices usage and internals</a>""</p>

<p>Also you may want to consider <a href=""http://golang.org/doc/effective_go.html#for"">using range</a> for your loop:</p>

<pre><code>// for i := 0; i &lt; elems; i++ { - correct but less idiomatic
for i, v := range slice {
</code></pre>
","8539724"
"Decoding JSON in Golang using json.Unmarshal vs json.NewDecoder.Decode","31936","","<p>I'm developing an API client where I need to encode a JSON payload on request and decode a JSON body from the response.</p>

<p>I've read the source code from several libraries and from what I have seen, I have basically two possibilities for encoding and decoding a JSON string.</p>

<p>Use <a href=""http://golang.org/pkg/encoding/json/#Marshal"" rel=""noreferrer""><code>json.Unmarshal</code></a> passing the entire response string</p>

<pre><code>data, err := ioutil.ReadAll(resp.Body)
if err == nil &amp;&amp; data != nil {
    err = json.Unmarshal(data, value)
}
</code></pre>

<p>or using <code>json.NewDecoder.Decode</code></p>

<pre><code>err = json.NewDecoder(resp.Body).Decode(value)
</code></pre>

<p>In my case, when dealing with HTTP responses that implements <code>io.Reader</code>, the second version seems to be require less code, but since I've seen both I wonder if there is any preference whether I should use a solution rather than the other.</p>

<p>Moreover, <a href=""https://stackoverflow.com/questions/15672556/handling-json-post-request-in-go"">the accepted answer from this question</a> says</p>

<blockquote>
  <p>Please use <code>json.Decoder</code> instead of <code>json.Unmarshal</code>.</p>
</blockquote>

<p>but it didn't mention the reason. Should I really avoid using <code>json.Unmarshal</code>?</p>
","<p>It really depends on what your input is.  If you look at the implementation of the <code>Decode</code> method of <code>json.Decoder</code>, it buffers the entire JSON value in memory before unmarshalling it into a Go value.  So in most cases it won't be any more memory efficient (although this could easily change in a future version of the language).</p>

<p>So a better rule of thumb is this:</p>

<ul>
<li>Use <code>json.Decoder</code> if your data is coming from an <code>io.Reader</code> stream, or you need to decode multiple values from a stream of data.</li>
<li>Use <code>json.Unmarshal</code> if you already have the JSON data in memory.</li>
</ul>

<p>For the case of reading from an HTTP request, I'd pick <code>json.Decoder</code> since you're obviously reading from a stream.</p>
","21198571"
"Does Golang support variadic function?","31872","","<p>I wonder is there anyway that I can define a function for unknown number of variables in Go.</p>

<p>Something like this</p>

<pre><code> func Add(num1... int) int {
    return args
  }

  func main() {
        fmt.Println(""Hello, playground"")
        fmt.Println(Add(1, 3, 4, 5,))
  }
</code></pre>

<p>I want to generalize add function for any number of inputs.</p>
","<p>You've pretty much got it, from what I can tell, but the syntax is <code>...int</code>. See <a href=""http://golang.org/ref/spec#Passing_arguments_to_..._parameters"" rel=""noreferrer"">the spec</a>:</p>

<blockquote>
  <p>Given the function and call</p>

<pre><code>func Greeting(prefix string, who ...string)
Greeting(""hello:"", ""Joe"", ""Anna"", ""Eileen"")
</code></pre>
  
  <p>within Greeting, <code>who</code> will have the value <code>[]string{""Joe"", ""Anna"", ""Eileen""}</code></p>
</blockquote>
","19238249"
"Why would I make() or new()?","31816","","<p>The introduction documents dedicate many paragraphs to explaining the difference between <code>new()</code> and <code>make()</code>, but in practice, you can create objects within local scope and return them.</p>

<p>Why would you use the (frankly silly) pair of allocators?</p>
","<p>Things you can do with <code>make</code> that you can't do any other way:</p>

<ul>
<li>Create a channel</li>
<li>Create a map with space preallocated</li>
<li>Create a slice with space preallocated or with len != cap</li>
</ul>

<p>It's a little harder to justify <code>new</code>. The main thing it makes easier is creating pointers to non-composite types.
The two functions below are equivalent. One's just a little more concise:</p>

<pre><code>func newInt1() *int { return new(int) }

func newInt2() *int {
    var i int
    return &amp;i
}
</code></pre>
","9322182"
"How do I get the local IP address in Go?","31669","","<p>I want to get the computer's IP address. I used the code below, but it returns <code>127.0.0.1</code>.</p>

<p>I want to get the IP address, such as <code>10.32.10.111</code>, instead of the loopback address. </p>

<pre><code>name, err := os.Hostname()
if err != nil {
     fmt.Printf(""Oops: %v\n"", err)
     return
}

addrs, err := net.LookupHost(name)
if err != nil {
    fmt.Printf(""Oops: %v\n"", err)
    return
}

for _, a := range addrs {
    fmt.Println(a)
}  
</code></pre>
","<p>You need to loop through all network interfaces</p>

<pre><code>ifaces, err := net.Interfaces()
// handle err
for _, i := range ifaces {
    addrs, err := i.Addrs()
    // handle err
    for _, addr := range addrs {
        var ip net.IP
        switch v := addr.(type) {
        case *net.IPNet:
                ip = v.IP
        case *net.IPAddr:
                ip = v.IP
        }
        // process IP address
    }
}
</code></pre>

<p><a href=""http://play.golang.org/p/BDt3qEQ_2H"" rel=""noreferrer"">Play</a> (taken from util/helper.go)</p>
","23558495"
"Pair/tuple data type in Go","31599","","<p>While doing the <a href=""http://tour.golang.org/#71"" rel=""noreferrer"">final exercise of the Tour of Go</a>, I decided I needed a queue of (<code>string</code>, <code>int</code>) pairs. That's easy enough:</p>

<pre><code>type job struct {
    url string
    depth int
}

queue := make(chan job)
queue &lt;- job{url, depth}
</code></pre>

<p>But this got me thinking: are there built-in pair/tuple data types in Go? There is support for <a href=""http://golang.org/doc/effective_go.html#multiple-returns"" rel=""noreferrer"">returning multiple values</a> from a function, but AFAICT, the multiple value tuples produced are not first-class citizens in Go's type system. Is that the case?</p>

<p>As for the ""what have you tried"" part, the obvious syntax (from a Python programmer's POV)</p>

<pre><code>queue := make(chan (string, int))
</code></pre>

<p>didn't work.</p>
","<p>There is no tuple type in Go, and you are correct, the multiple values returned by functions do not represent a first class object.</p>

<p>Nick's answer shows how you can do something similar that handles arbitrary types using interface{}.  (I might have used an array rather than a struct to make it indexable like a tuple, but the key idea is the interface{} type.)</p>

<p>My other answer shows how you can do something similar that avoids creating a type using anonymous structs.</p>

<p>These techniques have some properties of tuples, but no, they are not tuples.</p>
","13686006"
"delete map[key] in go?","31502","","<p>I have a map:</p>

<pre><code>var sessions =  map[string] chan int{}
</code></pre>

<p>How do I delete <code>sessions[key]</code>?  I tried:</p>

<pre><code>sessions[key] = nil,false;
</code></pre>

<p>That didn't work. </p>

<hr>

<p><strong>Update</strong> (November 2011):</p>

<p>The special syntax for deleting map entries is removed in <a href=""https://docs.google.com/document/pub?id=1ny8uI-_BHrDCZv_zNBSthNKAMX_fR_0dc6epA6lztRE&amp;pli=1"" rel=""noreferrer"">Go version 1</a>:</p>

<blockquote>
  <p>Go 1 will remove the special map assignment and introduce a new built-in function, <code>delete</code>: <code>delete(m, x)</code> will delete the map entry retrieved by the expression <code>m[x]</code>. ...</p>
</blockquote>
","<p>Strangely enough,</p>

<pre><code>package main

func main () {
    var sessions = map[string] chan int{};
    delete(sessions, ""moo"");
}
</code></pre>

<p>seems to work. This seems a poor use of resources though!</p>

<p>Another way is to check for existence and use the value itself:</p>

<pre><code>package main

func main () {
    var sessions = map[string] chan int{};
    sessions[""moo""] = make (chan int);
    _, ok := sessions[""moo""];
    if ok {
        delete(sessions, ""moo"");
    }
}
</code></pre>
","1736256"
"How can I efficiently download a large file using Go?","31394","","<p>Is there a way to download a large file using Go that will store the content directly into a file instead of storing it all in memory before writing it to a file? Because the file is so big, storing it all in memory before writing it to a file is going to use up all the memory.</p>
","<p>I'll assume you mean download via http (error checks omitted for brevity):</p>

<pre><code>import (""net/http""; ""io""; ""os"")
...
out, err := os.Create(""output.txt"")
defer out.Close()
...
resp, err := http.Get(""http://example.com/"")
defer resp.Body.Close()
...
n, err := io.Copy(out, resp.Body)
</code></pre>

<p>The http.Response's Body is a Reader, so you can use any functions that take a Reader, to, e.g. read a chunk at a time rather than all at once. In this specific case, <code>io.Copy()</code> does the gruntwork for you.</p>
","11693049"
"How to use global var across files in a package?","31249","","<p>I have the following file structure:</p>

<p><strong>models/db.go</strong></p>

<pre><code>type DB struct {
    *sql.DB
}

var db *DB

func init() {
    dbinfo := fmt.Sprintf(""user=%s password=%s dbname=%s sslmode=disable"",
        DB_USER, DB_PASSWORD, DB_NAME)

    db, err := NewDB(dbinfo)
    checkErr(err)

    rows, err := db.Query(""SELECT * FROM profile"")
    checkErr(err)

    fmt.Println(rows)
}

func NewDB(dataSourceName string) (*DB, error) {
    db, err := sql.Open(""postgres"", dataSourceName)
    if err != nil {
        return nil, err
    }
    if err = db.Ping(); err != nil {
        return nil, err
    }
    return &amp;DB{db}, nil
}
</code></pre>

<p><strong>models/db_util.go</strong></p>

<pre><code>func (p *Profile) InsertProfile() {
    if db != nil {
        _, err := db.Exec(...)
        checkErr(err)
    } else {
        fmt.Println(""DB object is NULL"")
    }
}
</code></pre>

<p>When I try to access <code>db</code> in <code>InsertProfile</code> function, it says <code>NULL ptr exception</code>. How do I access the <code>db</code> in <code>db_utils.go</code>?</p>

<p>I would not like to capitalize <code>db</code> (as it would give access to all the packages).</p>

<p>I am getting the QUERY returned from the <code>db</code> in <code>init()</code> correctly.</p>
","<p><strong>Edit:</strong> The problem is that you used <a href=""https://golang.org/ref/spec#Short_variable_declarations"" rel=""noreferrer"">Short variable declaration</a> <code>:=</code> and you just stored the created <code>*DB</code> value in a local variable and not in the global one.</p>

<p>This line:</p>

<pre><code>db, err := NewDB(dbinfo)
</code></pre>

<p>Creates 2 local variables: <code>db</code> and <code>err</code>, and this local <code>db</code> has nothing to do with your global <code>db</code> variable. Your global variable will remain <code>nil</code>. You have to assign the created <code>*DB</code> to the global variable. Do not use short variable declaration but simple <a href=""https://golang.org/ref/spec#Assignments"" rel=""noreferrer"">assignment</a>, e.g:</p>

<pre><code>var err error
db, err = NewDB(dbinfo)
if err != nil {
    log.Fatal(err)
}
</code></pre>

<p>Original answer follows.</p>

<hr>

<p>It's a pointer type, you have to initialize it before you use it. The zero value for pointer types is <code>nil</code>. </p>

<p>You don't have to export it (that's what starting it with a capital letter does). Note that it doesn't matter that you have multiple files as long as they are part of the same package, they can access identifiers defined in one another.</p>

<p>A good solution would be to do it in the package <code>init()</code> function which is called automatically.</p>

<p>Note that <a href=""https://golang.org/pkg/database/sql/#Open"" rel=""noreferrer""><code>sql.Open()</code></a> may just validate its arguments without creating a connection to the database. To verify that the data source name is valid, call <a href=""https://golang.org/pkg/database/sql/#DB.Ping"" rel=""noreferrer""><code>DB.Ping()</code></a>.</p>

<p>For example:</p>

<pre><code>var db *sql.DB

func init() {
    var err error
    db, err = sql.Open(""yourdrivername"", ""somesource"")
    if err != nil {
        log.Fatal(err)
    }
    if err = db.Ping(); err != nil {
        log.Fatal(err)
    }
}
</code></pre>
","34195389"
"How to copy a map?","30915","","<p>I'm trying to copy the contents of a map ( <code>amap</code> ) inside another one (<code>aSuperMap</code>) and then clear  <code>amap</code> so that it can take  new values on the next iteration/loop. 
  The issue is that you can't clear the map <a href=""https://stackoverflow.com/a/23058707/3257971"">without to clear its reference</a> in the supermap as well.
 Here is some pseudo code.</p>

<pre><code>for something := range fruits{
        aMap := make(map[string]aStruct)
        aSuperMap := make(map[string]map[string]aStruct)

        for x := range something{
            aMap[x] = aData
            aSuperMap[y] = aMap
            delete(aMap, x)
    }
//save aSuperMap
  saveASuperMap(something)

}
</code></pre>

<p>I've also tried some dynamic stuff but obviously it throws an error (cannot assign to nil)</p>

<pre><code>aSuperMap[y][x] = aData
</code></pre>

<p>The question is how can I create an associative map ? In PHP I simply use  aSuperMap[y][x] = aData. It seems that golang doesn't have any obvious method. If I delete  <code>delete(aMap, x)</code> its reference from the super map is deleted as well. If I don't delete it the supermap ends up with duplicate data. Basically on each loop it gets <code>aMap</code> with the new value plus all the old values. </p>
","<p>You are not copying the map, but the reference to the map. Your <code>delete</code> thus modifies the values in both your original map and the super map. To copy a map, you have to use a <code>for</code> loop like this:</p>

<pre><code>for k,v := range originalMap {
  newMap[k] = v
}
</code></pre>

<p>Here's an example from the now-retired SO documentation:</p>

<pre><code>// Create the original map
originalMap := make(map[string]int)
originalMap[""one""] = 1
originalMap[""two""] = 2

// Create the target map
targetMap := make(map[string]int)

// Copy from the original map to the target map
for key, value := range originalMap {
  targetMap[key] = value
}
</code></pre>

<blockquote>
  <p>Excerpted from <a href=""https://web.archive.org/web/20171006194258/https://stackoverflow.com/documentation/go/732/maps/9834/copy-a-map#t=20171006194258443316"" rel=""nofollow noreferrer"">Maps - Copy a Map</a>. The original author was <a href=""https://web.archive.org/web/20170908210640/https://stackoverflow.com/users/1149404/jepz"" rel=""nofollow noreferrer"">JepZ</a>. Attribution details can be found on the <a href=""https://web.archive.org/web/2/https://stackoverflow.com/documentation/contributors/example/9834"" rel=""nofollow noreferrer"">contributor page</a>. The source is licenced under <a href=""https://creativecommons.org/licenses/by-sa/3.0/"" rel=""nofollow noreferrer"">CC BY-SA 3.0</a> and may be found in the <a href=""https://archive.org/details/documentation-dump.7z"" rel=""nofollow noreferrer"">Documentation archive</a>. Reference topic ID: 732 and example ID: 9834.</p>
</blockquote>
","23058707"
"How to dump goroutine stacktraces?","30889","","<p>I have Java background, and I love to use signal QUIT to inspect Java thread dump.</p>

<p>How to let Golang print out all goroutines stack trace?</p>
","<p>To print the stack trace for the <em>current</em> goroutine, use <a href=""http://golang.org/pkg/runtime/debug/#PrintStack"" rel=""noreferrer""><code>PrintStack()</code> from <code>runtime/debug</code></a>.</p>

<blockquote>
  <blockquote>
    <p>PrintStack prints to standard error the stack trace returned by Stack.</p>
  </blockquote>
</blockquote>

<p>For example: </p>

<pre><code>import(
   ""runtime/debug""
)
...    
debug.PrintStack()
</code></pre>

<p>To print the stack trace for <em>all</em> goroutines use <a href=""http://golang.org/pkg/runtime/pprof/#Lookup"" rel=""noreferrer""><code>Lookup</code></a> and <a href=""http://golang.org/pkg/runtime/pprof/#Profile.WriteTo"" rel=""noreferrer""><code>WriteTo</code></a> from <a href=""http://golang.org/pkg/runtime/pprof/"" rel=""noreferrer""><code>runtime/pprof</code></a>.</p>

<pre><code>func Lookup(name string) *Profile
// Lookup returns the profile with the given name,
// or nil if no such profile exists.

func (p *Profile) WriteTo(w io.Writer, debug int) error
// WriteTo writes a pprof-formatted snapshot of the profile to w.
// If a write to w returns an error, WriteTo returns that error.
// Otherwise, WriteTo returns nil.
</code></pre>

<blockquote>
  <p>Each Profile has a unique name. A few profiles are predefined:</p>
  
  <p>goroutine    - stack traces of all current goroutines<br>
  heap         - a sampling of all heap allocations<br>
  threadcreate - stack traces that led to the creation of new OS threads<br>
  block        - stack traces that led to blocking on synchronization primitives  </p>
</blockquote>

<p>For example:</p>

<pre><code>pprof.Lookup(""goroutine"").WriteTo(os.Stdout, 1)
</code></pre>
","19094539"
"Does the Go language have function/method overloading?","30642","","<p>I'm porting a C library to Go. A C function (with varargs) is defined like this:</p>

<pre><code>curl_easy_setopt(CURL *curl, CURLoption option, ...); 
</code></pre>

<p>So I created wrapper C functions:</p>

<pre><code>curl_wrapper_easy_setopt_str(CURL *curl, CURLoption option, char* param);
curl_wrapper_easy_setopt_long(CURL *curl, CURLoption option, long param);
</code></pre>

<p>If I define function in Go like this:</p>

<pre><code>func (e *Easy)SetOption(option Option, param string) {
    e.code = Code(C.curl_wrapper_easy_setopt_str(e.curl, C.CURLoption(option), C.CString(param)))
}

func (e *Easy)SetOption(option Option, param long) {
    e.code = Code(C.curl_wrapper_easy_setopt_long(e.curl, C.CURLoption(option), C.long(param)))
}
</code></pre>

<p>The Go compiler complains:</p>

<pre><code>*Easy·SetOption redeclared in this block
</code></pre>

<p>So does Go support function (method) overloading, or does this error mean something else? </p>
","<p>No it does not.</p>

<p>See the <a href=""http://golang.org/doc/go_faq.html"" rel=""noreferrer"">Go Language FAQ</a>, and specifically the section on <a href=""http://golang.org/doc/go_faq.html#overloading"" rel=""noreferrer"">overloading</a>.</p>

<blockquote>
  <p>Method dispatch is simplified if it doesn't need to do type matching as well. Experience with other languages told us that having a variety of methods with the same name but different signatures was occasionally useful but that it could also be confusing and fragile in practice. Matching only by name and requiring consistency in the types was a major simplifying decision in Go's type system.</p>
  
  <p>Regarding operator overloading, it seems more a convenience than an absolute requirement. Again, things are simpler without it.</p>
</blockquote>

<p>Update: 2016-04-07</p>

<p>While Go still does not have overloaded functions (and probably never will), the most useful feature of overloading, that of calling a function with optional arguments and inferring defaults for those omitted can be simulated using a variadic function, which has since been added. But this comes at the loss of type checking.</p>

<p>For example: <a href=""http://changelog.ca/log/2015/01/30/golang"" rel=""noreferrer"">http://changelog.ca/log/2015/01/30/golang</a></p>
","6987002"
"How do you serve a static html file using a go web server?","30558","","<p>How do you serve index.html (or some other static HTML file) using a go web server?</p>

<p>I just want a basic, static HTML file (like an article, for example) which I can serve from a go web server.  The HTML should be modifiable outside of the go program, as it would be in the case while using HTML templates.</p>

<p>This is my web server which only hosts hard-coded text (""Hello world!"").</p>

<pre><code>package main

import (
  ""fmt""
  ""net/http""
)

func handler(w http.ResponseWriter, r *http.Request) {
  fmt.Fprintf(w, ""Hello world!"")
}

func main() {
  http.HandleFunc(""/"", handler)
  http.ListenAndServe("":3000"", nil)
}
</code></pre>
","<p>That task is very easy with Golang net/http package.</p>

<p>All You need to do is:</p>

<pre><code>package main

import (
        ""net/http""
)

func main() {
        http.Handle(""/"", http.FileServer(http.Dir(""./static"")))
        http.ListenAndServe("":3000"", nil)
}
</code></pre>

<p>assuming that static files are in folder named <code>static</code> in the root directory of the project.</p>

<p>If it's in folder <code>static</code>, you'll have <code>index.html</code> file calling <code>http://localhost:3000/</code> which will result in rendering that index file instead of listing all the files availible.</p>

<p>Additionally, calling any other file in that folder (for example <code>http://localhost:3000/clients.html</code>) will show that file, properly rendered by the browser (at least Chrome, Firefox and Safari :))</p>

<h2>UPDATE: serving files from url different than ""/""</h2>

<p>If You want to serve files, say from folder <code>./public</code> under url: <code>localhost:3000/static</code> You have to <strong>use additional function</strong>: <code>func StripPrefix(prefix string, h Handler) Handler</code> like this:</p>

<pre><code>package main

import (
        ""net/http""
)

func main() {
        http.Handle(""/static/"", http.StripPrefix(""/static/"", http.FileServer(http.Dir(""./public""))))
        http.ListenAndServe("":3000"", nil)
}
</code></pre>

<p>Thanks to that, all your files from <code>./public</code> are avalible under <code>localhost:3000/static</code></p>

<p>Without <code>http.StripPrefix</code> function, if you would try to access file <code>localhost:3000/static/test.html</code>, the server would look for it in <code>./public/static/test.html</code></p>

<p>This is because the server treats the whole URI as a relative path to the file. </p>

<p>Fortunately, it's easily solved with the built-in function.</p>
","26563418"
"golang ""undefined"" function declared in another file?","30512","","<p>I'm trying to write a basic go program that calls a function on a different file, but a part of the same package. However, it returns:</p>

<pre><code>undefined: NewEmployee
</code></pre>

<p>Here is the source code:</p>

<p><code>main.go</code>:</p>

<pre><code>package main

func main() {
emp := NewEmployee()    
}
</code></pre>

<p><code>employee.go</code>:</p>

<pre><code>package main

type Employee struct {
    name string
    age int
}   

func NewEmployee() *Employee {
    p := &amp;Employee{}
    return p
}

func PrintEmployee (p *Employee)  {
    return ""Hello world!""
}
</code></pre>

<p>Thanks in advance</p>
","<p>Please read <a href=""http://golang.org/doc/code.html"" rel=""noreferrer"">""How to Write Go Code""</a>. </p>

<p>Don't use <code>/src</code> in your <code>GOPATH</code>. Packages are located in <code>$GOPATH/src</code>.</p>

<p>For <code>build</code> or <code>install</code> you need to have your files in a package directory. </p>

<p>For <code>go run</code>, you need to supply all files as argument:</p>

<pre><code>go run main.go employee.go
</code></pre>

<p>But, you should almost always use <code>go install</code>, or <code>go build</code> (and preferably the former, as <code>go build</code> causes confusion when working with non-main packages)</p>
","28153553"
"Runtime error: assignment to entry in nil map","30382","","<p>I am trying to generate a map and then convert that to a yaml file like this:</p>

<pre><code>uid :
      kasi:
        cn: Chaithra
        street: fkmp
      nandan:
        cn: Chaithra
        street: fkmp
      remya:
        cn: Chaithra
        street: fkmp
</code></pre>

<p>I think I am missing something important while creating the map. My code is below.</p>

<pre><code>package main

import (
    ""fmt""
    ""gopkg.in/yaml.v2""
)

type T struct {
    cn     string
    street string
}

func main() {
    names := []string{""kasi"", ""remya"", ""nandan""}

    m := make(map[string]map[string]T, len(names))
    for _, name := range names {

        //t := T{cn: ""Chaithra"", street: ""fkmp""}

        m[""uid""][name] = T{cn: ""Chaithra"", street: ""fkmp""}

    }
    fmt.Println(m)

    y, _ := yaml.Marshal(&amp;m)

    fmt.Println(string(y))
    //fmt.Println(m, names)
}
</code></pre>

<p>It is giving the following error:</p>

<pre><code>panic: runtime error: assignment to entry in nil map
</code></pre>
","<p>You have not initialized your inner map. Before your for loop you can add <code>m[""uid""] = make(map[string]T)</code> and then assign the name.</p>
","27268063"
"Subtracting time.Duration from time in Go","30319","","<p>I have a <code>time.Time</code> value obtained from <code>time.Now()</code> and I want to get another time which is exactly 1 month ago. </p>

<p>I know subtracting is possible with <code>time.Sub()</code> (which wants another <code>time.Time</code>), but that will result in a <code>time.Duration</code> and I need it the other way around.</p>
","<p>Try <a href=""http://golang.org/pkg/time/#Time.AddDate"">AddDate</a>:</p>

<pre><code>package main

import (
    ""fmt""
    ""time""
)

func main() {
    now := time.Now()

    fmt.Println(""now:"", now)

    then := now.AddDate(0, -1, 0)

    fmt.Println(""then:"", then)
}
</code></pre>

<p>Produces:</p>

<pre><code>now: 2009-11-10 23:00:00 +0000 UTC
then: 2009-10-10 23:00:00 +0000 UTC
</code></pre>

<p>Playground: <a href=""http://play.golang.org/p/QChq02kisT"">http://play.golang.org/p/QChq02kisT</a></p>
","26285835"
"What is Go used for?","30244","","<p>I am interested in the new language from Google, Go. I have checked the materials on golang.com and now I want to try using Go in practice. Please share any ideas where you think using Go would be appropriate. Are there any open source Go projects that it would be possible to join?</p>
","<p>For a good and comprehensive list of existing programs written in Go, see <a href=""http://go-lang.cat-v.org/"" rel=""noreferrer"">Go Programming Language Resources</a>, specially <a href=""http://go-lang.cat-v.org/go-code"" rel=""noreferrer"">Go Programs and Apps</a>.</p>
","2910655"
"Golang converting string to int64","30198","","<p>I want to convert a string to an int64. What I find from the <code>strconv</code> package is the <code>Atoi</code> function. It seems to cast a string to an int and return it:</p>

<pre><code>// Atoi is shorthand for ParseInt(s, 10, 0).
func Atoi(s string) (i int, err error) {
        i64, err := ParseInt(s, 10, 0)
    return int(i64), err
}
</code></pre>

<p>The ParseInt actually returns an int64:</p>

<pre><code>func ParseInt(s string, base int, bitSize int) (i int64, err error){
     //...
}
</code></pre>

<p>So if I want to get an int64 from a string, should I avoid using Atoi, instead use ParseInt? Or is there an Atio64 hidden somewhere?</p>
","<p>No, there's no Atoi64. You should also pass in the 64 as the last parameter to ParseInt, or it might not produce the expected value on a 32-bit system.</p>
","21532180"
"How do I configure Go to use a proxy?","30196","","<p>I want to run <code>go install</code> to install the <a href=""http://tour.golang.org/#2"" rel=""noreferrer"">tour</a>, but I can't find the option to use a proxy for internet access. I don't need this just for the tour but for developing in Go in general. </p>

<p>How do I configure Go to use a proxy.</p>
","<p>Go programs understand environment variables <code>http_proxy</code> and <code>no_proxy</code>, but that's not enough because <code>go get</code> uses source control managers for retrieving code. So you have to set HTTP proxy settings for your SCM too. Use <a href=""http://www.selenic.com/mercurial/hgrc.5.html#http-proxy"" rel=""noreferrer"">this</a> for Mercurial and <a href=""https://stackoverflow.com/a/3406766/165293"">this</a> for Git.</p>

<p><code>http_proxy</code> value can be like <code>http://user:password@host:port/</code>. User, password, and port parts are optional. <code>no_proxy</code> is a comma-separated list of servers that should not be connected through proxy. Its value can be like <code>foo.com,bar.net:4000</code>.</p>

<p>You can set these environment variables in your <code>bash_profile</code>, but if you want to limit their usage to <code>go</code>, you can run it like this:</p>

<pre><code>$ http_proxy=127.0.0.1:8080 go get code.google.com/p/go.crypto/bcrypt
</code></pre>

<p>If that's what you always want, set this alias to avoid typing proxy part every time:</p>

<pre><code>$ alias go='http_proxy=127.0.0.1:8080 go'
</code></pre>

<p>From now on you can use <code>go</code> normally, but it uses your HTTP proxy.</p>
","10385612"
"What's Go's equivalent of argv[0]?","29985","","<p>How can I get my own program's name at runtime? What's Go's equivalent of C/C++'s argv[0]? To me it is useful to generate the usage with the right name.</p>

<p>Update: added some code.</p>

<pre><code>package main

import (
    ""flag""
    ""fmt""
    ""os""
)

func usage() {
    fmt.Fprintf(os.Stderr, ""usage: myprog [inputfile]\n"")
    flag.PrintDefaults()
    os.Exit(2)
}

func main() {
    flag.Usage = usage
    flag.Parse()

    args := flag.Args()
    if len(args) &lt; 1 {
        fmt.Println(""Input file is missing."");
        os.Exit(1);
    }
    fmt.Printf(""opening %s\n"", args[0]);
    // ...
}
</code></pre>
","<pre><code>import ""os""
os.Args[0] // name of the command that it is running as
os.Args[1] // first command line parameter, ...
</code></pre>

<p>Arguments are exposed in the <code>os</code> package <a href=""http://golang.org/pkg/os/#Variables"" rel=""noreferrer"">http://golang.org/pkg/os/#Variables</a></p>

<p>If you're going to do argument handling, the <code>flag</code> package <a href=""http://golang.org/pkg/flag"" rel=""noreferrer"">http://golang.org/pkg/flag</a> is the preferred way. Specifically for your case <code>flag.Usage</code></p>

<p>Update for the example you gave:</p>

<pre><code>func usage() {
    fmt.Fprintf(os.Stderr, ""usage: %s [inputfile]\n"", os.Args[0])
    flag.PrintDefaults()
    os.Exit(2)
}
</code></pre>

<p>should do the trick</p>
","3356041"
"GoLang: Access struct property by name","29973","","<p>Here is a simple go program that is not working :</p>

<pre><code>package main
import ""fmt""

type Vertex struct {
    X int
    Y int
}

func main() {
    v := Vertex{1, 2}
    fmt.Println(getProperty(&amp;v, ""X""))
}

func getProperty(v *Vertex, property string) (string) {
    return v[property]
}
</code></pre>

<p>Error: <code>prog.go:18: invalid operation: v[property] (index of type *Vertex)</code></p>

<p>What I want is to access the Vertex X property using its name. If I do <code>v.X</code> it works, but <code>v[""X""]</code> doesn't. </p>

<p>Can someone tell me how to make this work ?</p>
","<p>Most code shouldn't need this sort of dynamic lookup. It's inefficient compared to direct access (the compiler knows the offset of the X field in a Vertex structure, it can compile v.X to a single machine instruction, whereas a dynamic lookup will need some sort of hash table implementation or similar). It's also inhibits static typing: the compiler has no way to check that you're not trying to access unknown fields dynamically, and it can't know what the resulting type should be.</p>

<p>But... the language provides a <a href=""http://golang.org/pkg/reflect/"">reflect</a> module for the rare times you need this.</p>

<pre><code>package main

import ""fmt""
import ""reflect""

type Vertex struct {
    X int
    Y int
}

func main() {
    v := Vertex{1, 2}
    fmt.Println(getField(&amp;v, ""X""))
}

func getField(v *Vertex, field string) int {
    r := reflect.ValueOf(v)
    f := reflect.Indirect(r).FieldByName(field)
    return int(f.Int())
}
</code></pre>

<p>There's no error checking here, so you'll get a panic if you ask for a field that doesn't exist, or the field isn't of type int. Check <a href=""http://golang.org/pkg/reflect/"">the documentation for reflect</a> for more details.</p>
","18931036"
"Does Go provide REPL?","29914","","<p>The interactive environment is VERY helpful for a programmer. However, it seems Go does not provide it.  Is my understanding correct?</p>
","<p>As already mentioned, <a href=""http://play.golang.org/"" rel=""noreferrer"">Go Playground</a> (this is the new URL) is very handy. The Go Authors are also thinking about adding a feature-rich editor to it.</p>

<p>If you want something local, consider installing <a href=""http://labix.org/hsandbox"" rel=""noreferrer"">hsandbox</a>. Running it simply with <code>hsandbox go</code> will split your terminal screen (with <code>screen</code>) where you can write code at the top and see its execution output at the bottom on every save.</p>

<p>There was a <code>gotry</code> among standard Go commands, which used to evaluate expressions (with an optional package name), and could be run like <code>gotry 1+2</code> and <code>gotry fmt 'Println(""hello"")'</code> from shell. It is no longer available because not many people actually used it.</p>

<p>I have also seen third party projects for building a REPL for Go, but now I can only find links to two of them: <a href=""https://github.com/sbinet/igo"" rel=""noreferrer"">igo</a> and <a href=""https://github.com/vito/go-repl"" rel=""noreferrer"">go-repl</a>. How well do they work I don't know.</p>

<p>But to actually answer your main question: no, Go does not provide REPL.</p>

<p>My two cents: Speed of compilation makes writing a REPL possible for Go, as it has also helped building the tools mentioned here, but the same speed makes REPL less necessary. Every time I want to test something in Go that I can't run in Playground I open a simple <code>.go</code> file and start coding and simply run the code. This will be even easier when the <code>go</code> command in Go 1 makes one-command build process possible and way easier.</p>

<p><strong>UPDATE:</strong> Latest weekly release of Go added <code>go</code> command which can be used to very easily build a file: write your <code>prog.go</code> file and run <code>go build prog.go &amp;&amp; ./prog</code></p>

<p><strong>UPDATE 2</strong>: With Go 1 you can directly run go programs with <code>go run filename.go</code></p>

<p><strong>UPDATE 3</strong>: <a href=""https://github.com/motemen/gore"" rel=""noreferrer""><code>gore</code></a> is a new project which seems interesting.</p>
","8517411"
"How to format current time using a yyyyMMddHHmmss format?","29827","","<p>I'm trying to format the current time using this format <code>yyyyMMddHHmmss</code>.</p>

<pre><code>t := time.Now()
fmt.Println(t.Format(""yyyyMMddHHmmss""))
</code></pre>

<p>That is outputting:</p>

<pre><code>yyyyMMddHHmmss
</code></pre>

<p>Any suggestions?</p>
","<p>Use</p>

<pre><code>fmt.Println(t.Format(""20060102150405""))
</code></pre>

<p>as Go uses following constants to format date,refer <a href=""http://golang.org/src/pkg/time/format.go"">here</a></p>

<pre><code>const (
    stdLongMonth      = ""January""
    stdMonth          = ""Jan""
    stdNumMonth       = ""1""
    stdZeroMonth      = ""01""
    stdLongWeekDay    = ""Monday""
    stdWeekDay        = ""Mon""
    stdDay            = ""2""
    stdUnderDay       = ""_2""
    stdZeroDay        = ""02""
    stdHour           = ""15""
    stdHour12         = ""3""
    stdZeroHour12     = ""03""
    stdMinute         = ""4""
    stdZeroMinute     = ""04""
    stdSecond         = ""5""
    stdZeroSecond     = ""05""
    stdLongYear       = ""2006""
    stdYear           = ""06""
    stdPM             = ""PM""
    stdpm             = ""pm""
    stdTZ             = ""MST""
    stdISO8601TZ      = ""Z0700""  // prints Z for UTC
    stdISO8601ColonTZ = ""Z07:00"" // prints Z for UTC
    stdNumTZ          = ""-0700""  // always numeric
    stdNumShortTZ     = ""-07""    // always numeric
    stdNumColonTZ     = ""-07:00"" // always numeric
)
</code></pre>
","20234207"
"Flag command line parsing in golang","29738","","<p>I'm not sure I understand the reasoning behind this example (taken from <a href=""https://github.com/golang-samples/flag/blob/master/visit/main.go"" rel=""noreferrer"">here</a>), nor what it is trying to communicate about the Go language:</p>

<pre><code>package main

import (
    ""flag""
    ""fmt""
)

func main() {
    f := flag.NewFlagSet(""flag"", flag.ExitOnError)
    f.Bool(""bool"", false, ""this is bool flag"")
    f.Int(""int"", 0, ""this is int flag"")

    visitor := func(a *flag.Flag) {
        fmt.Println(""&gt;"", a.Name, ""value="", a.Value)
    }

    fmt.Println(""Visit()"")
    f.Visit(visitor)
    fmt.Println(""VisitAll()"")
    f.VisitAll(visitor)

    // set flags
    f.Parse([]string{""-bool"", ""-int"", ""100""})

    fmt.Println(""Visit() after Parse()"")
    f.Visit(visitor)
    fmt.Println(""VisitAll() after Parse()"")
    f.VisitAll(visitor)
}
</code></pre>

<p>Something along the lines of the setup they have but then adding a</p>

<pre><code>int_val := f.get(""int"")
</code></pre>

<p>to get the named argument would seem more useful. I'm completely new to Go, so just trying to get acquainted with the language.</p>
","<p>This is complicated example of using <code>flag</code> package. Typically flags set up this way:</p>

<pre><code>package main

import ""flag""

// note, that variables are pointers
var strFlag = flag.String(""long-string"", """", ""Description"")
var boolFlag = flag.Bool(""bool"", false, ""Description of flag"")

func init() {
    // example with short version for long flag
    flag.StringVar(strFlag, ""s"", """", ""Description"")
}

func main() {
    flag.Parse()
    println(*strFlag, *boolFlag)
}       
</code></pre>
","19762274"
"Encode / decode URLs","29657","","<p>What's the recommended way of encoding and decoding entire URLs in Go? I am aware of the methods <code>url.QueryEscape</code> and <code>url.QueryUnescape</code>, but they don't seem to be exactly what I am looking for. Specifically I am looking for methods like JavaScript's <code>encodeURIComponent</code> and <code>decodeURIComponent</code>.</p>

<p>Thanks.</p>
","<p>You can do all the URL encoding you want with the <a href=""http://golang.org/pkg/net/url/"" rel=""noreferrer"">net/url</a> module.  It doesn't break out the individual encoding functions for the parts of the URL, you have to let it construct the whole URL.  Having had a squint at the source code I think it does a very good and standards compliant job.</p>

<p>Here is an example (<a href=""http://play.golang.org/p/kQQIx_4bsK"" rel=""noreferrer"">playground link</a>)</p>

<pre><code>package main

import (
    ""fmt""
    ""net/url""
)

func main() {

    var Url *url.URL
    Url, err := url.Parse(""http://www.example.com"")
    if err != nil {
        panic(""boom"")
    }

    Url.Path += ""/some/path/or/other_with_funny_characters?_or_not/""
    parameters := url.Values{}
    parameters.Add(""hello"", ""42"")
    parameters.Add(""hello"", ""54"")
    parameters.Add(""vegetable"", ""potato"")
    Url.RawQuery = parameters.Encode()

    fmt.Printf(""Encoded URL is %q\n"", Url.String())
}
</code></pre>

<p>Which prints</p>

<pre><code>Encoded URL is ""http://www.example.com/some/path/or/other_with_funny_characters%3F_or_not/?vegetable=potato&amp;hello=42&amp;hello=54""
</code></pre>
","13826910"
"golang POST data using the Content-Type multipart/form-data","29287","","<p>I'm trying to upload images from my computer to a website using go. Usually, I use a bash script who send file a key to the serveur: </p>

<pre><code>curl -F ""image""=@""IMAGEFILE"" -F ""key""=""KEY"" URL
</code></pre>

<p>it's work fine, but I'm trying to convert this request into my golang program. </p>

<p><a href=""http://matt.aimonetti.net/posts/2013/07/01/golang-multipart-file-upload-example/"">http://matt.aimonetti.net/posts/2013/07/01/golang-multipart-file-upload-example/</a></p>

<p>I tried this link and many other. But for each code that I try, the response for the server is ""no image sended"". And I've no idea why. If someone know what's happend with the exemple above.</p>

<p>Thanks </p>
","<p>Here's some sample code.</p>

<p>In short, you'll need to use the <a href=""http://golang.org/pkg/mime/multipart/""><code>mime/multipart</code> package</a> to build the form.</p>

<pre><code>package sample

import (
    ""bytes""
    ""fmt""
    ""io""
    ""mime/multipart""
    ""net/http""
    ""os""
)

func Upload(url, file string) (err error) {
    // Prepare a form that you will submit to that URL.
    var b bytes.Buffer
    w := multipart.NewWriter(&amp;b)
    // Add your image file
    f, err := os.Open(file)
    if err != nil {
        return 
    }
    defer f.Close()
    fw, err := w.CreateFormFile(""image"", file)
    if err != nil {
        return 
    }
    if _, err = io.Copy(fw, f); err != nil {
        return
    }
    // Add the other fields
    if fw, err = w.CreateFormField(""key""); err != nil {
        return
    }
    if _, err = fw.Write([]byte(""KEY"")); err != nil {
        return
    }
    // Don't forget to close the multipart writer.
    // If you don't close it, your request will be missing the terminating boundary.
    w.Close()

    // Now that you have a form, you can submit it to your handler.
    req, err := http.NewRequest(""POST"", url, &amp;b)
    if err != nil {
        return 
    }
    // Don't forget to set the content type, this will contain the boundary.
    req.Header.Set(""Content-Type"", w.FormDataContentType())

    // Submit the request
    client := &amp;http.Client{}
    res, err := client.Do(req)
    if err != nil {
        return 
    }

    // Check the response
    if res.StatusCode != http.StatusOK {
        err = fmt.Errorf(""bad status: %s"", res.Status)
    }
    return
}
</code></pre>
","20397167"
"Indentation in Go: tabs or spaces?","29231","","<p>Is there a standard Google Go coding conventions document somewhere that sets whether tabs or spaces are preferred for indentation in Go source code? If not, what is the more (statistically) popular option?</p>

<ol>
<li>What is the official recommendation? (if any)</li>
<li>What is the more popular choice?</li>
</ol>
","<p>The official recommendation is formatting your code with</p>

<pre><code>go fmt
</code></pre>

<p>or using the gofmt command directly</p>

<pre><code>gofmt -w .
</code></pre>

<p>You can read more about it <a href=""http://blog.golang.org/go-fmt-your-code"" rel=""noreferrer"">here</a> on the golang.org blog, or from the <a href=""http://golang.org/doc/effective_go.html#formatting"" rel=""noreferrer"">Effective go</a> document:</p>

<blockquote>
  <p><em>Indentation</em><br>
   We use tabs for indentation and gofmt emits them by default. Use spaces only if you must.</p>
</blockquote>
","19094725"
"IDE specific for Golang","29216","","<p>Golang has been out for several years and I was wondering where would I able to find an established IDE for golang (if there is any). What I mean is vim and vi or existing text editor could work as IDE but what I am looking for is something similar to eclipse or android studio where it has established syntax highlighting, auto correction, built-in compiler, debugger, library import etc.</p>

<p>This would be for windows machine</p>
","<p>This may help <a href=""http://geekmonkey.org/2012/09/comparison-of-ides-for-google-go/"" rel=""noreferrer"">http://geekmonkey.org/2012/09/comparison-of-ides-for-google-go/</a></p>

<p>I use LiteIDE for debuggability reasons, 1.4.3 go version.</p>
","38333908"
"Switch or if/elseif/else inside golang HTML templates","29199","","<p>I have this struct :</p>

<pre><code>const (
    paragraph_hypothesis = 1&lt;&lt;iota
    paragraph_attachment = 1&lt;&lt;iota
    paragraph_menu       = 1&lt;&lt;iota
)

type Paragraph struct {
    Type int // paragraph_hypothesis or paragraph_attachment or paragraph_menu
}
</code></pre>

<p>I want to display my paragraphs in a <code>Type</code> dependent way.</p>

<p>The only solution I found was based on dedicated functions like <code>isAttachment</code> testing the <code>Type</code> in Go and nested <code>{{if}}</code> :</p>

<pre><code>{{range .Paragraphs}}
    {{if .IsAttachment}}
        -- attachement presentation code  --
    {{else}}{{if .IsMenu}}
        -- menu --
    {{else}}
        -- default code --
    {{end}}{{end}}
{{end}}
</code></pre>

<p>In fact I have more types, which makes it even weirder, cluttering both the Go code with <code>IsSomething</code> functions and the template with those <code>{{end}}</code>.</p>

<p>What's the clean solution ? Is there some <code>switch</code> or <code>if/elseif/else</code> solution in go templates ? Or a completely different way to handle these cases ?</p>
","<p>Templates are logic-less. They're not supposed to have this kind of logic. The maximum logic you can have is a bunch of <code>if</code>. </p>

<p>In such a case, you're supposed to do it like this:</p>

<pre><code>{{if .IsAttachment}}
    -- attachment presentation code --
{{end}}

{{if .IsMenu}}
    -- menu --
{{end}}

{{if .IsDefault}}
    -- default code --
{{end}}
</code></pre>
","16985871"
"Wildcards in the pattern for http.HandleFunc","29054","","<p>When registering handlers in Go (language) is there any way to specify wildcards in the pattern?</p>

<p>For example:</p>

<pre><code>http.HandleFunc(""/groups/*/people"", peopleInGroupHandler)
</code></pre>

<p>Where the <code>*</code> could be any valid URL string.  Or is the only solution to match <code>/groups</code> and figure the rest out from within the handler (<code>peopleInGroupHandler</code>) func?</p>
","<p>The patterns for http.Handler and http.HandleFunc aren't regular expressions or globs. There isn't a way to specify wildcards. They're documented <a href=""http://golang.org/pkg/http/#ServeMux"" rel=""noreferrer"">here</a>.</p>

<p>That said, it's not too hard to create your own handler that can use regular expressions or any other kind of pattern you want. Here's one that uses regular expressions (compiled, but not tested):</p>

<pre><code>type route struct {
    pattern *regexp.Regexp
    handler http.Handler
}

type RegexpHandler struct {
    routes []*route
}

func (h *RegexpHandler) Handler(pattern *regexp.Regexp, handler http.Handler) {
    h.routes = append(h.routes, &amp;route{pattern, handler})
}

func (h *RegexpHandler) HandleFunc(pattern *regexp.Regexp, handler func(http.ResponseWriter, *http.Request)) {
    h.routes = append(h.routes, &amp;route{pattern, http.HandlerFunc(handler)})
}

func (h *RegexpHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    for _, route := range h.routes {
        if route.pattern.MatchString(r.URL.Path) {
            route.handler.ServeHTTP(w, r)
            return
        }
    }
    // no pattern matched; send 404 response
    http.NotFound(w, r)
}
</code></pre>
","6565407"
"How can we truncate float64 type to a particular precision in golang?","29051","","<pre><code>package main

import (
    ""fmt""
    ""strconv""
    )

func main() {
    k := 10/3.0
    i := fmt.Sprintf(""%.2f"", k)
    f,_ := strconv.ParseFloat(i, 2)
    fmt.Println(f)
}
</code></pre>

<p>I had to write the program above to decrease the precision of a go float64 variable to 2. 
In this case I was using both strconv and fmt. Is there some other logical method by which it can be done ?</p>
","<p>You don't need any extra code ... its as simple as </p>

<pre><code>import (
    ""fmt""
)

func main() {
    k := 10 / 3.0
    fmt.Printf(""%.2f"", k)
}
</code></pre>

<p><a href=""http://play.golang.org/p/Ek0if-tlvX"" rel=""noreferrer"">Test Code</a> </p>
","18418551"
"How to implement resizable arrays in Go","29046","","<p>I come from a C++ background and I'm used to using the <code>std::vector</code> class for things like this.
Lets assume I want a dynamic array of these:</p>

<pre><code>type a struct {
    b int
    c string
}
</code></pre>

<p>What is the standard way of doing this?</p>

<p><strong>A snippet would be very useful</strong> </p>
","<p>Use the <code>append()</code> builtin</p>

<p>Example:</p>

<pre><code>type mytype struct {
  a, b int
}

func main() {
  a := []mytype{mytype{1, 2}, mytype{3, 4}}
  a = append(a, mytype{5, 6})
}
</code></pre>

<p>Refer to the <a href=""https://golang.org/ref/spec#Slice_types"" rel=""noreferrer"">spec</a> for more info on append.</p>
","3387362"
"Go IDE With GUI Design Support","28946","","<p>I was taking a look on Go language, but I want to know if there is any IDE developed only for it, but that have a GUI design feature, as Visual Studio and Netbeans.</p>
","<p>You can also find an Eclipse plugin here: <a href=""http://code.google.com/p/goclipse/"" rel=""noreferrer"">http://code.google.com/p/goclipse/</a></p>

<p>However, at the moment of writing this is still at an early development stage.</p>
","4992941"
"Cannot convert []string to []interface {}","28942","","<p>I'm writing some code, and I need it to catch the arguments and pass them through <code>fmt.Println</code><br>
(I want its default behaviour, to write arguments separated by spaces and followed by a newline). However it takes <code>[]interface {}</code> but <code>flag.Args()</code> returns a <code>[]string</code>.<br>
Here's the code example:</p>

<pre><code>package main

import (
    ""fmt""
    ""flag""
)

func main() {
    flag.Parse()
    fmt.Println(flag.Args()...)
}
</code></pre>

<p>This returns the following error:</p>

<pre><code>./example.go:10: cannot use args (type []string) as type []interface {} in function argument
</code></pre>

<p>Is this a bug? Shouldn't <code>fmt.Println</code> take <strong>any</strong> array? By the way, I've also tried to do this:</p>

<pre><code>var args = []interface{}(flag.Args())
</code></pre>

<p>but I get the following error:</p>

<pre><code>cannot convert flag.Args() (type []string) to type []interface {}
</code></pre>

<p>Is there a ""Go"" way to workaround this?</p>
","<p>This is not a bug. <code>fmt.Println()</code> requires a <code>[]interface{}</code> type. That means, it must be a slice of <code>interface{}</code> values and not ""any slice"". In order to convert the slice, you will need to loop over and copy each element.</p>

<pre><code>old := flag.Args()
new := make([]interface{}, len(old))
for i, v := range old {
    new[i] = v
}
fmt.Println(new...)
</code></pre>

<p>The reason you can't use any slice is that conversion between a <code>[]string</code> and a <code>[]interface{}</code> requires the memory layout to be changed and happens in O(n) time. Converting a type to an <code>interface{}</code> requires O(1) time. If they made this for loop unnecessary, the compiler would still need to insert it.</p>
","12990540"
"How do I print the pointer value of a Go object? What does the pointer value mean?","28831","","<p>I am just playing around with Go and do not yet have a good mental model of when structs are passed by value or by reference.</p>

<p>This may be a very dumb question but I just want to experiment a bit and see if I am still working on the same object or I have made a copy of it (passed it by value).</p>

<p>Is there a way to print the pointer (or internal id if pointer value is changed by gc) of an object?</p>

<pre><code>package main

import ( ""runtime"" )

type Something struct {
    number int
    queue chan int
}

func gotest( s *Something, done chan bool ) {
    println( ""from gotest:"")
    println( &amp;s )
    for num := range s.queue {
        println( num )
        s.number = num
    }
    done &lt;- true
}

func main() {
    runtime.GOMAXPROCS(4)
    s := new(Something)
    println(&amp;s)
    s.queue = make(chan int)
    done := make(chan bool)
    go gotest(s, done)
    s.queue &lt;- 42
    close(s.queue)
    &lt;- done
    println(&amp;s)
    println(s.number)
}
</code></pre>

<p>gives on my windows (8g compiled version):</p>

<pre><code>0x4930d4
from gotest:
0x4974d8
42
0x4930d4
42
</code></pre>

<p>Why does the pointer value from within the go routine show a different value? The quantity on the original object did get changed so it was working with the same object. Is there a way to see an object id that is persistent?</p>
","<p>Go function arguments are passed by value.</p>

<p>First, let's discard the irrelevant parts of your example, so that we can easily see that you are merely passing an argument by value. For example,</p>

<pre><code>package main

import ""fmt""

func byval(q *int) {
    fmt.Printf(""3. byval -- q %T: &amp;q=%p q=&amp;i=%p  *q=i=%v\n"", q, &amp;q, q, *q)
    *q = 4143
    fmt.Printf(""4. byval -- q %T: &amp;q=%p q=&amp;i=%p  *q=i=%v\n"", q, &amp;q, q, *q)
    q = nil
}

func main() {
    i := int(42)
    fmt.Printf(""1. main  -- i  %T: &amp;i=%p i=%v\n"", i, &amp;i, i)
    p := &amp;i
    fmt.Printf(""2. main  -- p %T: &amp;p=%p p=&amp;i=%p  *p=i=%v\n"", p, &amp;p, p, *p)
    byval(p)
    fmt.Printf(""5. main  -- p %T: &amp;p=%p p=&amp;i=%p  *p=i=%v\n"", p, &amp;p, p, *p)
    fmt.Printf(""6. main  -- i  %T: &amp;i=%p i=%v\n"", i, &amp;i, i)
}
</code></pre>

<p>Output:</p>

<pre><code>1. main  -- i  int: &amp;i=0xf840000040 i=42
2. main  -- p *int: &amp;p=0xf8400000f0 p=&amp;i=0xf840000040  *p=i=42
3. byval -- q *int: &amp;q=0xf8400000d8 q=&amp;i=0xf840000040  *q=i=42
4. byval -- q *int: &amp;q=0xf8400000d8 q=&amp;i=0xf840000040  *q=i=4143
5. main  -- p *int: &amp;p=0xf8400000f0 p=&amp;i=0xf840000040  *p=i=4143
6. main  -- i  int: &amp;i=0xf840000040 i=4143
</code></pre>

<p>In function <code>main</code>, <code>i</code> is an <code>int</code> variable at memory location (<code>&amp;i</code>) <code>0xf800000040</code> with an initial value (<code>i</code>) <code>42</code>.</p>

<p>In function <code>main</code>, <code>p</code> is a pointer to an <code>int</code> variable at memory location (<code>&amp;p</code>) <code>0xf8000000f0</code> with a value (<code>p</code>=<code>&amp;i</code>) <code>0xf800000040</code> which points to an <code>int</code> value (<code>*p</code>=<code>i</code>) <code>42</code>.</p>

<p>In function <code>main</code>, <code>byval(p)</code> is a function call which assigns the value (<code>p</code>=<code>&amp;i</code>) <code>0xf800000040</code> of the argument at memory location (<code>&amp;p</code>) <code>0xf8000000f0</code> to the function <code>byval</code> parameter <code>q</code> at memory location (<code>&amp;q</code>) <code>0xf8000000d8</code>. In other words, memory is allocated for the <code>byval</code> parameter <code>q</code> and the value of the <code>main</code> <code>byval</code> argument <code>p</code> is assigned to it; the values of <code>p</code> and <code>q</code> are initially the same, but the variables <code>p</code> and <code>q</code> are distinct.</p>

<p>In function <code>byval</code>, using pointer <code>q</code> (<code>*int</code>), which is a copy of pointer <code>p</code> (<code>*int</code>), integer <code>*q</code> (<code>i</code>) is set to a new int value <code>4143</code>. At the end before returning. the pointer <code>q</code> is set to <code>nil</code> (zero value), which has no effect on <code>p</code> since <code>q</code> is a copy.</p>

<p>In function <code>main</code>, <code>p</code> is a pointer to an <code>int</code> variable at memory location (<code>&amp;p</code>) <code>0xf8000000f0</code> with a value (<code>p</code>=<code>&amp;i</code>) <code>0xf800000040</code> which points to a new <code>int</code> value (<code>*p</code>=<code>i</code>) <code>4143</code>.</p>

<p>In function <code>main</code>, <code>i</code> is an <code>int</code> variable at memory location (<code>&amp;i</code>) <code>0xf800000040</code> with a final value (<code>i</code>) <code>4143</code>.</p>

<p>In your example, the function <code>main</code> variable <code>s</code> used as an argument to the function <code>gotest</code> call is not the same as the function <code>gotest</code> parameter <code>s</code>. They have the same name, but are different variables with different scopes and memory locations. The function parameter <code>s</code> hides the function call argument <code>s</code>. That's why in my example, I named the argument and parameter variables <code>p</code> and <code>q</code> respectively to emphasize the difference.</p>

<p>In your example, (<code>&amp;s</code>) <code>0x4930d4</code> is the address of the memory location for the variable <code>s</code> in function <code>main</code> that is used as an argument to the function call <code>gotest(s, done)</code>, and <code>0x4974d8</code> is the address of the memory location for the function <code>gotest</code> parameter <code>s</code>. If you set parameter <code>s = nil</code> at the end of function <code>gotest</code>, it has no effect on variable <code>s</code> in <code>main</code>; <code>s</code> in <code>main</code> and <code>s</code> in <code>gotest</code> are distinct memory locations. In terms of types, <code>&amp;s</code> is <code>**Something</code>, <code>s</code> is <code>*Something</code>, and <code>*s</code> is <code>Something</code>. <code>&amp;s</code> is a pointer to (address of memory location) <code>s</code>, which is a pointer to (address of memory location) an anonymous variable of type <code>Something</code>. In terms of values, <code>main.&amp;s != gotest.&amp;s</code>, <code>main.s == gotest.s</code>, <code>main.*s == gotest.*s</code>, and <code>main.s.number == gotest.s.number</code>.</p>

<p>You should take mkb's sage advice and stop using <code>println(&amp;s)</code>. Use the <code>fmt</code> package, for example,</p>

<pre><code>fmt.Printf(""%v %p %v\n"", &amp;s, s, *s)
</code></pre>

<p>Pointers have the same value when they point to the same memory location; pointers have different values when they point to different memory locations.</p>
","4963935"
"Import cycle not allowed","28710","","<p>I have a problem with </p>

<blockquote>
  <p>import cycle not allowed</p>
</blockquote>

<p>It appears, when I am trying to test my controller. As output I've got</p>

<pre><code>can't load package: import cycle not allowed
package project/controllers/account
    imports project/controllers/base
    imports project/components/mux
    imports project/controllers/account
import cycle not allowed
package project/controllers/account
    imports project/controllers/base
    imports project/components/mux
    imports project/controllers/account
import cycle not allowed
package project/controllers/account
    imports project/controllers/base
    imports project/components/mux
    imports project/controllers/routes
    imports project/controllers/base
</code></pre>

<p>Can someone tell me, how to read or understand this error? Where is the dependency wrong?</p>
","<p>Here is an illustration of your first import cycle problem.</p>

<pre><code>                  project/controllers/account
                     ^                    \    
                    /                      \
                   /                        \ 
                  /                         \/
         project/components/mux &lt;--- project/controllers/base
</code></pre>

<p>As you can see with my bad ASCII chart is that you are creating an import cycle when <code>project/components/mux</code> imports <code>project/controllers/account</code>. Since Go does not support circular dependencies you get the <code>import cycle not allowed</code> error during compile time. </p>
","28258647"
"Removed last character of a string","28630","","<p>I want to remove the very last character of a string, but before I do so I want to check if the last character is a ""+"". How can this be done?</p>
","<p>Here are several ways to remove trailing plus sign(s).</p>

<pre><code>package main

import (
    ""fmt""
    ""strings""
)

func TrimSuffix(s, suffix string) string {
    if strings.HasSuffix(s, suffix) {
        s = s[:len(s)-len(suffix)]
    }
    return s
}

func main() {
    s := ""a string ++""
    fmt.Println(""s: "", s)

    // Trim one trailing '+'.
    s1 := s
    if last := len(s1) - 1; last &gt;= 0 &amp;&amp; s1[last] == '+' {
        s1 = s1[:last]
    }
    fmt.Println(""s1:"", s1)

    // Trim all trailing '+'.
    s2 := s
    s2 = strings.TrimRight(s2, ""+"")
    fmt.Println(""s2:"", s2)

    // Trim suffix ""+"".
    s3 := s
    s3 = TrimSuffix(s3, ""+"")
    fmt.Println(""s3:"", s3)
}
</code></pre>

<p>Output:</p>

<pre><code>s:  a string ++
s1: a string +
s2: a string 
s3: a string +
</code></pre>
","8690319"
"Is assert evil?","28554","","<p>The <code>Go</code> language creators <a href=""http://golang.org/doc/go_faq.html#Where_is_assert"" rel=""noreferrer"">write</a>:</p>

<blockquote>
  <p><strong>Go doesn't provide assertions.</strong> They are undeniably convenient, but our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting. Proper error handling means that servers continue operation after non-fatal errors instead of crashing. Proper error reporting means that errors are direct and to the point, saving the programmer from interpreting a large crash trace. Precise errors are particularly important when the programmer seeing the errors is not familiar with the code.</p>
</blockquote>

<p>What is your opinion about this?</p>
","<p>No, there's nothing wrong with <code>assert</code> as long as you use it as intended.</p>

<p>That is, it's supposed to be for catching cases that ""can't happen"", during debugging, as opposed to normal error handling.</p>

<ul>
<li>Assert: A failure in the program's logic itself.</li>
<li>Error Handling: An erroneous input or system state not due to a bug in the program.</li>
</ul>
","1854338"
"golang: Create a io.Reader from a local file","28395","","<p>I would like to open a local file, and return a io.Reader. The reason is that I need to feed a io.Reader to a library I am using, like:</p>

<pre><code>func read(r io.Reader) (results []string) {

}
</code></pre>
","<p><code>os.Open</code> returns an <code>io.Reader</code></p>

<p><a href=""http://play.golang.org/p/BskGT09kxL"" rel=""noreferrer"">http://play.golang.org/p/BskGT09kxL</a></p>

<pre><code>package main

import (
    ""fmt""
    ""io""
    ""os""
)

var _ io.Reader = (*os.File)(nil)

func main() {
    fmt.Println(""Hello, playground"")
}
</code></pre>
","25677274"
"Golang production web application configuration","28383","","<p>For those of you running Go backends in production:</p>

<p>What is your stack / configuration for running a Go web application?</p>

<p>I haven't seen much on this topic besides people using the standard library net/http package to keep a server running. I read using Nginx to pass requests to a Go server - <a href=""http://mwholt.blogspot.com/2013/05/writing-go-golang-web-app-with-nginx.html"">nginx with Go</a></p>

<p>This seems a little fragile to me. For instance, the server would not automatically restart if the machine was restarted (without additional configuration scripts).</p>

<p>Is there a more solid production setup?</p>

<p>An aside about my intent - I'm planning out a Go powered REST backend server for my next project and want to make sure Go is going to be viable for launching the project live before I invest too much into it.</p>
","<p>Go programs can listen on port 80 and serve HTTP requests directly. Instead, you may want to use a reverse proxy in front of your Go program, so that it listens on port 80 and and connects to your program on port, say, 4000. There are many reason for doing the latter: not having to run your Go program as root, serving other websites/services on the same host, SSL termination, load balancing, logging, etc.</p>

<p>I use <a href=""http://haproxy.1wt.eu/"">HAProxy</a> in front. Any reverse proxy could work. Nginx is also a great option (much more popular than HAProxy and capable of doing more).</p>

<p>HAProxy is very easy to configure if you read its <a href=""http://haproxy.1wt.eu/download/1.4/doc/configuration.txt"">documentation</a> (<a href=""http://cbonte.github.io/haproxy-dconv/configuration-1.4.html"">HTML version</a>). My whole <code>haproxy.cfg</code> file for one of my Go projects follows, in case you need a starting pont.</p>

<pre><code>global
        log     127.0.0.1       local0
        maxconn 10000
        user    haproxy
        group   haproxy
        daemon

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        retries 3
        timeout connect 5000
        timeout client  50000
        timeout server  50000

frontend http
        bind :80
        acl  is_stats  hdr(host)       -i      hastats.myapp.com
        use_backend    stats   if      is_stats
        default_backend        myapp
        capture        request header Host     len     20
        capture        request header Referer  len     50

backend myapp
        server  main    127.0.0.1:4000

backend stats
       mode     http
       stats    enable
       stats    scope   http
       stats    scope   myapp
       stats    realm   Haproxy\ Statistics
       stats    uri     /
       stats    auth    username:password
</code></pre>

<p>Nginx is even easier.</p>

<p>Regarding service control, I run my Go program as a system service. I think everybody does that. My server runs Ubuntu, so it uses Upstart. I have put this at <code>/etc/init/myapp.conf</code> for Upstart to control my program:</p>

<pre><code>start on runlevel [2345]
stop on runlevel [!2345]

chdir /home/myapp/myapp
setgid myapp
setuid myapp
exec ./myapp start 1&gt;&gt;_logs/stdout.log 2&gt;&gt;_logs/stderr.log
</code></pre>

<p>Another aspect is deployment. One option is to deploy by just sending binary file of the program and necessary assets. This is a pretty great solution IMO. I use the other option: compiling on server. (I’ll switch to deploying with binary files when I set up a so-called “Continuous Integration/Deployment” system.)</p>

<p>I have a small shell script on the server that pulls code for my project from a remote Git repository, builds it with Go, copies the binaries and other assets to <code>~/myapp/</code>, and restarts the service.</p>

<p>Overall, the whole thing is not very different from any other server setup: you have to have a way to run your code and have it serve HTTP requests. In practice, Go has proved to be very stable for this stuff.</p>
","17442495"
"What is a sensible way to layout a Go project","28338","","<p>I have a go project that is starting to become more complex, and want to lay the filesystem out in such a way to reduce pain.</p>

<p>Are there some good examples out there of what makes sense?</p>
","<p>Update May 2013: the official documentation is in the section ""<a href=""http://golang.org/doc/code.html#Organization"" rel=""noreferrer"">Code organization</a>""</p>

<blockquote>
  <p>Go code must be kept inside a <strong>workspace</strong>.<br>
  A workspace is a directory hierarchy with three directories at its root:</p>
</blockquote>

<ul>
<li><code>src</code> contains Go source files organized into packages (one package per directory),</li>
<li><code>pkg</code> contains package objects, and</li>
<li><code>bin</code> contains executable commands.</li>
</ul>

<blockquote>
  <p>The <code>go tool</code> builds source packages and installs the resulting binaries to the <code>pkg</code> and <code>bin</code> directories.</p>
  
  <p>The <code>src</code> subdirectory typically contains multiple version control repositories (such as for Git or Mercurial) that track the development of one or more source packages.</p>
</blockquote>

<pre><code>bin/
    streak                         # command executable
    todo                           # command executable
pkg/
    linux_amd64/
        code.google.com/p/goauth2/
            oauth.a                # package object
        github.com/nf/todo/
            task.a                 # package object
src/
    code.google.com/p/goauth2/
        .hg/                       # mercurial repository metadata
        oauth/
            oauth.go               # package source
            oauth_test.go          # test source
</code></pre>

<hr>

<p>Update July 2014: see ""<a href=""https://medium.com/@benbjohnson/structuring-applications-in-go-3b04be4ff091"" rel=""noreferrer""><strong>Structuring Applications in Go</strong></a>"" from <a href=""https://medium.com/@benbjohnson"" rel=""noreferrer"">Ben Johnson</a></p>

<p>That article include tips like:</p>

<h3>Separate your binary from your application</h3>

<blockquote>
  <p>combining the <code>main.go</code> file and my application logic in the same package has two consequences:</p>
  
  <ul>
  <li>It makes my application unusable as a library.</li>
  <li>I can only have one application binary.</li>
  </ul>
  
  <p>The best way I’ve found to fix this is to simply use a “<code>cmd</code>” directory in my project where each of its subdirectories is an application binary.</p>
</blockquote>

<pre><code>camlistore/
  cmd/
    camget/
      main.go
    cammount/
      main.go
    camput/
      main.go
    camtool/
      main.go
</code></pre>

<h3>Library driven development</h3>

<blockquote>
  <p>Moving the <code>main.go</code> file out of your root allows you to build your application from the perspective of a library. Your application binary is simply a client of your application’s library.</p>
  
  <p>Sometimes you might want users to interact in multiple ways so you create multiple binaries.<br>
  For example, if you had an “<code>adder</code>” package that that let users add numbers together, you may want to release a command line version as well as a web version.<br>
  You can easily do this by organizing your project like this:</p>
</blockquote>

<pre><code>adder/
  adder.go
  cmd/
    adder/
      main.go
    adder-server/
      main.go
</code></pre>

<blockquote>
  <p>Users can install your “adder” application binaries with “go get” using an ellipsis:</p>
</blockquote>

<pre><code>$ go get github.com/benbjohnson/adder/...
</code></pre>

<blockquote>
  <p>And voila, your user has “<code>adder</code>” and “<code>adder-server</code>” installed!</p>
</blockquote>

<h3>Don’t go crazy with subpackages</h3>

<blockquote>
  <p>Usually my project’s types are all very related so it fits better from a usability and API standpoint.<br>
  These types can also take advantage of calling unexported between them which keeps the API small and clear.</p>
  
  <ol>
  <li>Group related types and code together in each file. If your types and functions are well organized then I find that files tend to be between 200 and 500 SLOC. This might sound like a lot but I find it easy to navigate. 1000 SLOC is usually my upper limit for a single file.</li>
  <li>Organize the most important type at the top of the file and add types in decreasing importance towards the bottom of the file.</li>
  <li>Once your application starts getting above 10,000 SLOC you should seriously evaluate whether it can be broken into smaller projects.</li>
  </ol>
</blockquote>

<p>Note: that last practice isn't always good:</p>

<blockquote>
  <p>Sorry I just cant agree with this practice.<br>
  Separating type to files helps code management, readability, maintenancability, testability.<br>
  It may also ensure single responsibility and the follow of open/closed principle…<br>
  The rule for not allowing circular dependency is to force we have a clear structure of the packages.</p>
</blockquote>

<hr>

<p>(Alternative February 2013, regarding <code>src</code> only)<br>
You can find the classic layout illustrated in ""<a href=""http://code.google.com/p/jmcvetta-contrib/wiki/GithubCodeLayout"" rel=""noreferrer"">GitHub Code Layout</a>"":</p>

<blockquote>
  <p>The app and both libraries live on Github, each in its own repository.<br>
  <code>$GOPATH</code> is the root of the project - each of your Github repos will be checked out several folders below <code>$GOPATH</code>.</p>
  
  <p>Your code layout would look like this:</p>
</blockquote>

<pre><code>$GOPATH/
    src/
        github.com/
            jmcvetta/
                useless/
                    .git/
                    useless.go
                    useless_test.go
                    README.md
                uselessd/
                    .git/
                    uselessd.go
                    uselessd_test.go
                    README.md
</code></pre>

<blockquote>
  <p>Each folder under <code>src/github.com/jmcvetta/</code> is the root of a separate git checkout. </p>
</blockquote>

<p>That attracted some criticisms though, in this <a href=""http://www.reddit.com/r/golang/comments/18awol/go_project_organization/"" rel=""noreferrer"">reddit page</a>:</p>

<blockquote>
  <p>I highly recommend not structuring the repo the way you have, it'll break ""<code>go get</code>"", which is one of the most useful things about Go.<br>
  It's far better to write your code for people who do know Go, since they're most likely to be the ones compiling it.<br>
  And for people who don't, they'll at least get a feel for the language.</p>
  
  <p>Put the main package in the root of the repo.<br>
  Have the assets in a subdirectory (to keep things neat).<br>
  Keep the meat of the code in a subpackage (in case anyone wants to reuse it outside your binary).<br>
  Include a setup script in the root of the repo so it's easy to find.</p>
  
  <p>It's still only a two step process to download, build, install, and setup.:</p>
  
  <ul>
  <li>""<code>go get &lt;your repo path&gt;</code>"": downloads and installs the go code, with a subdir for the assets </li>
  <li><code>$GOPATH/&lt;your repo path&gt;/setup.sh</code>: distributes the assets to the right place and installs the service</li>
  </ul>
</blockquote>
","14870666"
"How can I use Go append with two []byte slices or arrays?","28289","","<p>I recently tried appending two byte array slices in Go and came across some odd errors. My code is:</p>

<pre><code>one:=make([]byte, 2)
two:=make([]byte, 2)
one[0]=0x00
one[1]=0x01
two[0]=0x02
two[1]=0x03

log.Printf(""%X"", append(one[:], two[:]))

three:=[]byte{0, 1}
four:=[]byte{2, 3}

five:=append(three, four)
</code></pre>

<p>And the errors are:</p>

<pre><code>cannot use four (type []uint8) as type uint8 in append
cannot use two[:] (type []uint8) as type uint8 in append
</code></pre>

<p>Which taken into consideration the alleged robustness of Go's slices shouldn't be a problem:</p>

<p><a href=""http://code.google.com/p/go-wiki/wiki/SliceTricks"" rel=""noreferrer"">http://code.google.com/p/go-wiki/wiki/SliceTricks</a></p>

<p>What am I doing wrong, and how should I go about appending two byte arrays?</p>
","<blockquote>
  <p><a href=""http://golang.org/doc/go_spec.html#Appending_and_copying_slices"">Appending to and copying slices</a></p>
  
  <p>The variadic function <code>append</code> appends zero or more values <code>x</code> to <code>s</code> of
  type <code>S</code>, which must be a slice type, and returns the resulting slice,
  also of type <code>S</code>. The values <code>x</code> are passed to a parameter of type <code>...T</code>
  where <code>T</code> is the element type of <code>S</code> and the respective parameter passing
  rules apply.</p>
  
  <p><code>append(s S, x ...T) S  // T is the element type of S</code></p>
  
  <p><a href=""http://golang.org/doc/go_spec.html#Passing_arguments_to_..._parameters"">Passing arguments to <code>...</code> parameters</a></p>
  
  <p>If the final argument is assignable to a slice type <code>[]T</code>, it may be
  passed unchanged as the value for a <code>...T</code> parameter if the argument is
  followed by <code>...</code>.</p>
</blockquote>

<p>You need to use <code>[]T...</code> for the final argument.</p>

<p>For example,</p>

<pre><code>package main

import ""fmt""

func main() {
    one := make([]byte, 2)
    two := make([]byte, 2)
    one[0] = 0x00
    one[1] = 0x01
    two[0] = 0x02
    two[1] = 0x03
    fmt.Println(append(one[:], two[:]...))
    three := []byte{0, 1}
    four := []byte{2, 3}
    five := append(three, four...)
    fmt.Println(five)
}
</code></pre>
","8461644"
"Relative import from parent directory","28280","","<p>How does one do a relative import from a parent directory?</p>

<p>From <code>meme/cmd/meme</code>:</p>

<pre><code>import ""../../../meme""
</code></pre>

<p>This gives an ambiguous error:</p>

<pre><code>matt@stanley:~/gopath/src/bitbucket.org/anacrolix/meme/cmd/meme$ go get bitbucket.org/anacrolix/meme/cmd/meme

can't load package: /home/matt/gopath/src/bitbucket.org/anacrolix/meme/cmd/meme/main.go:8:2: local import ""../../../meme"" in non-local package

matt@stanley:~/gopath/src/bitbucket.org/anacrolix/meme/cmd/meme$ echo $GOPATH

/home/matt/gopath
</code></pre>

<p>How do I import locally from a parent directory?</p>
","<p>Thanks for adding to your question.  First, an answer, then some explanation.  I built your code by,</p>

<ol>
<li>go get, just as you had it.  (I ignored the error messages.)</li>
<li>setting the import line in <code>main.go</code> back to ""../../../meme"", as you wanted to do.</li>
<li>(commenting out a little bit of code containing an unused variable.)</li>
<li>then in the meme/cmd/meme directory, either <code>go run main.go</code> or <code>go build main.go</code> worked.</li>
</ol>

<p>I was wrong in my comment earlier when I said go install works; I should have said go build.</p>

<p>The key however is that <code>go build</code> alone does not work; you must type <code>go build main.go</code>.  This is because the go command does not allow ""local imports in non-local packages.""  You are right that spec is of little help here.  It weasels out saying, ""The interpretation of the ImportPath is implementation-dependent.""  The current implementation behavior was set with <a href=""http://codereview.appspot.com/5787055"" rel=""noreferrer"">CL 5787055</a>, which was subsequently <a href=""https://groups.google.com/d/topic/golang-nuts/1XqcS8DuaNc/discussion"" rel=""noreferrer"">debated at length</a> on Go-nuts.</p>

<p>""Local"" means indicated with a file system relative path.  Obviously a relative path starting with .. is local, so the trick is just getting the <code>go</code> command to treat main as a local package as well.  It apparently doesn't do this when you type <code>go build</code>, but does when you type <code>go build main.go</code>.</p>
","10708787"
"Initialize an array of structs inside a nested struct in golang","28271","","<p>I am wondering how can I define and initialize and array of structs inside a nested struct, for example:</p>

<pre><code>type State struct {
    id string `json:""id"" bson:""id""`
    Cities 
}

type City struct {
    id string `json:""id"" bson:""id""`
}

type Cities struct {
    cities []City
}
</code></pre>

<p>Now how can I Initialize such a structure and if someone has a different idea about how to create the structure itself.</p>

<p>Thanks </p>
","<p>In your case the shorthand literal syntax would be:</p>

<pre><code>state := State {
    id: ""CA"",
    Cities:  Cities{
        []City {
            {""SF""},
        },
    },
}
</code></pre>

<p>Or shorter if you don't want the key:value syntax for literals:</p>

<pre><code>state := State {
    ""CA"", Cities{
        []City {
            {""SF""},
        },
    },
}    
</code></pre>

<p>BTW if Cities doesn't contain anything other than the []City, just use a slice of City. This will lead to a somewhat shorter syntax, and remove an unnecessary (possibly) layer:</p>

<pre><code>type State struct {
    id string `json:""id"" bson:""id""`
    Cities []City
}

type City struct {
    id string `json:""id"" bson:""id""`
}


func main(){
    state := State {
        id: ""CA"",
        Cities:  []City{
             {""SF""},
        },
    }

    fmt.Println(state)
}
</code></pre>
","28478348"
"Call Go functions from C","28254","","<p>I am trying to create a static object written in Go to interface with a C program (say, a kernel module or something).</p>

<p>I have found documentation on calling C functions from Go, but I haven't found much on how to go the other way.  What I've found is that it's possible, but complicated.</p>

<p>Here is what I found:</p>

<p><a href=""http://cheesesun.blogspot.com/2010/04/callbacks-in-cgo.html"">Blog post about callbacks between C and Go</a></p>

<p><a href=""http://golang.org/cmd/cgo/"">Cgo documentation</a></p>

<p><a href=""http://groups.google.com/group/golang-nuts/browse_thread/thread/4de85861de6ef204/f7d610e08b86d437?lnk=gst&amp;q=cgo+dynamic+linking+D#f7d610e08b86d437"">Golang mailing list post</a></p>

<p>Does anyone have experience with this? In short, I'm trying to create a PAM module written entirely in Go.</p>
","<p>You can call Go code from C. it is a confusing proposition though. </p>

<p>The process is outlined in the blog post you linked to. But I can see how that isn't very helpful. Here is a short snippet without any unnecessary bits. It should make things a little clearer.</p>

<pre><code>package foo

// extern int goCallbackHandler(int, int);
//
// static int doAdd(int a, int b) {
//     return goCallbackHandler(a, b);
// }
import ""C""

//export goCallbackHandler
func goCallbackHandler(a, b C.int) C.int {
    return a + b
}

// This is the public function, callable from outside this package.
// It forwards the parameters to C.doAdd(), which in turn forwards
// them back to goCallbackHandler(). This one performs the addition
// and yields the result.
func MyAdd(a, b int) int {
   return int( C.doAdd( C.int(a), C.int(b)) )
}
</code></pre>

<p>The order in which everything is called is as follows:</p>

<pre><code>foo.MyAdd(a, b) -&gt;
  C.doAdd(a, b) -&gt;
    C.goCallbackHandler(a, b) -&gt;
      foo.goCallbackHandler(a, b)
</code></pre>

<p>The key to remember here is that a callback function must be marked with the <code>//export</code> comment on the Go side and as <code>extern</code> on the C side. This means that any callback you wish to use, must be defined inside your package. </p>

<p>In order to allow a user of your package to supply a custom callback function, we use the exact same approach as above, but we supply the user's custom handler (which is just a regular Go function) as a parameter that is passed onto the C side as <code>void*</code>. It is then received by the callbackhandler in our package and called.</p>

<p>Let's use a more advanced example I am currently working with. In this case, we have a C function that performs a pretty heavy task: It reads a list of files from a USB device. This can take a while, so we want our app to be notified of its progress. We can do this by passing in a function pointer that we defined in our program. It simply displays some progress info to the user whenever it gets called. Since it has a well known signature, we can assign it its own type:</p>

<pre><code>type ProgressHandler func(current, total uint64, userdata interface{}) int
</code></pre>

<p>This handler takes some progress info (current number of files received and total number of files) along with an interface{} value which can hold anything the user needs it to hold.</p>

<p>Now we need to write the C and Go plumbing to allow us to use this handler. Luckily the C function I wish to call from the library allows us to pass in a userdata struct of type <code>void*</code>. This means it can hold whatever we want it to hold, no questions asked and we will get it back into the Go world as-is. To make all this work, we do not call the library function from Go directly, but we create a C wrapper for it which we will name <code>goGetFiles()</code>. It is this wrapper that actually supplies our Go callback to the C library, along with a userdata object.</p>

<pre><code>package foo

// #include &lt;somelib.h&gt;
// extern int goProgressCB(uint64_t current, uint64_t total, void* userdata);
// 
// static int goGetFiles(some_t* handle, void* userdata) {
//    return somelib_get_files(handle, goProgressCB, userdata);
// }
import ""C""
import ""unsafe""
</code></pre>

<p>Note that the <code>goGetFiles()</code> function does not take any function pointers for callbacks as parameters. Instead, the callback that our user has supplied is packed in a custom struct that holds both that handler and the user's own userdata value. We pass this into <code>goGetFiles()</code> as the userdata parameter.</p>

<pre><code>// This defines the signature of our user's progress handler,
type ProgressHandler func(current, total uint64, userdata interface{}) int 

// This is an internal type which will pack the users callback function and userdata.
// It is an instance of this type that we will actually be sending to the C code.
type progressRequest struct {
   f ProgressHandler  // The user's function pointer
   d interface{}      // The user's userdata.
}

//export goProgressCB
func goProgressCB(current, total C.uint64_t, userdata unsafe.Pointer) C.int {
    // This is the function called from the C world by our expensive 
    // C.somelib_get_files() function. The userdata value contains an instance
    // of *progressRequest, We unpack it and use it's values to call the
    // actual function that our user supplied.
    req := (*progressRequest)(userdata)

    // Call req.f with our parameters and the user's own userdata value.
    return C.int( req.f( uint64(current), uint64(total), req.d ) )
}

// This is our public function, which is called by the user and
// takes a handle to something our C lib needs, a function pointer
// and optionally some user defined data structure. Whatever it may be.
func GetFiles(h *Handle, pf ProgressFunc, userdata interface{}) int {
   // Instead of calling the external C library directly, we call our C wrapper.
   // We pass it the handle and an instance of progressRequest.

   req := unsafe.Pointer(&amp;progressequest{ pf, userdata })
   return int(C.goGetFiles( (*C.some_t)(h), req ))
}
</code></pre>

<p>That's it for our C bindings. The user's code is now very straight forward:</p>

<pre><code>package main

import (
    ""foo""
    ""fmt""
)

func main() {
    handle := SomeInitStuff()

    // We call GetFiles. Pass it our progress handler and some
    // arbitrary userdata (could just as well be nil).
    ret := foo.GetFiles( handle, myProgress, ""Callbacks rock!"" )

    ....
}

// This is our progress handler. Do something useful like display.
// progress percentage.
func myProgress(current, total uint64, userdata interface{}) int {
    fc := float64(current)
    ft := float64(total) * 0.01

    // print how far along we are.
    // eg: 500 / 1000 (50.00%)
    // For good measure, prefix it with our userdata value, which
    // we supplied as ""Callbacks rock!"".
    fmt.Printf(""%s: %d / %d (%3.2f%%)\n"", userdata.(string), current, total, fc / ft)
    return 0
}
</code></pre>

<p>This all looks a lot more complicated than it is. The call order has not changed as opposed to our previous example, but we get two extra calls at the end of the chain:</p>

<p>The order is as follows:</p>

<pre><code>foo.GetFiles(....) -&gt;
  C.goGetFiles(...) -&gt;
    C.somelib_get_files(..) -&gt;
      C.goProgressCB(...) -&gt;
        foo.goProgressCB(...) -&gt;
           main.myProgress(...)
</code></pre>
","6147097"
"Why can not I duplicate a slice with `copy()` in golang?","28232","","<p>I need to make a copy of a slice in go and reading the docs there is a <a href=""http://golang.org/pkg/builtin/#copy"" rel=""noreferrer"">copy</a> function at my disposal. </p>

<blockquote>
  <p>The copy built-in function copies elements from a source slice into a
  destination slice. (As a special case, it also will copy bytes from a
  string to a slice of bytes.) The source and destination may overlap.
  Copy returns the number of elements copied, which will be the minimum
  of len(src) and len(dst).</p>
</blockquote>

<p>but when I do</p>

<pre><code>arr := []int{1, 2, 3}
tmp := []int{}
copy(tmp, arr)
fmt.Println(tmp)
fmt.Println(arr)
</code></pre>

<p>my <code>tmp</code> is empty as it was before (I even tried to use arr, tmp):</p>

<pre><code>[]
[1 2 3]
</code></pre>

<p>You can check it on go <a href=""https://play.golang.org/p/iE6TarF8-S"" rel=""noreferrer"">playground</a>. So why can not I copy a slice?</p>
","<p>The builtin <a href=""http://golang.org/pkg/builtin/#copy"" rel=""noreferrer""><code>copy(dst, src)</code></a> copies <code>min(len(dst), len(src))</code> elements.</p>

<p>So if your <code>dst</code> is empty (<code>len(dst) == 0</code>), nothing will be copied.</p>

<p>Try <code>tmp := make([]int, len(arr))</code> (<a href=""https://play.golang.org/p/xwISeGLzxb"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>arr := []int{1, 2, 3}
tmp := make([]int, len(arr))
copy(tmp, arr)
fmt.Println(tmp)
fmt.Println(arr)
</code></pre>

<p>Output (as expected):</p>

<pre><code>[1 2 3]
[1 2 3]
</code></pre>

<p>Unfortunately this is not documented in the <a href=""http://golang.org/pkg/builtin/"" rel=""noreferrer""><code>builtin</code></a> package, but it is documented in the <a href=""https://golang.org/ref/spec#Appending_and_copying_slices"" rel=""noreferrer""><strong>Go Language Specification: Appending to and copying slices</strong></a>:</p>

<blockquote>
  <p>The number of elements copied is the minimum of <code>len(src)</code> and <code>len(dst)</code>.</p>
</blockquote>

<p><strong>Edit:</strong></p>

<p>Finally the documentation of <code>copy()</code> has been updated and it now contains the fact that the minimum length of source and destination will be copied:</p>

<blockquote>
  <p>Copy returns the number of elements copied, which will be the <strong>minimum</strong> of len(src) and len(dst).</p>
</blockquote>
","30182622"
"How to serve up a JSON response using Go?","28168","","<p><strong>Question:</strong> Currently I'm printing out my response in the <code>func Index</code>
like this <code>fmt.Fprintf(w, string(response))</code> <strong>however, how can I send JSON properly in the request so that it maybe consumed by a view?</strong> </p>

<pre><code>package main

import (
    ""fmt""
    ""github.com/julienschmidt/httprouter""
    ""net/http""
    ""log""
    ""encoding/json""
)

type Payload struct {
    Stuff Data
}
type Data struct {
    Fruit Fruits
    Veggies Vegetables
}
type Fruits map[string]int
type Vegetables map[string]int


func Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    response, err := getJsonResponse();
    if err != nil {
        panic(err)
    }
    fmt.Fprintf(w, string(response))
}


func main() {
    router := httprouter.New()
    router.GET(""/"", Index)
    log.Fatal(http.ListenAndServe("":8080"", router))
}

func getJsonResponse()([]byte, error) {
    fruits := make(map[string]int)
    fruits[""Apples""] = 25
    fruits[""Oranges""] = 10

    vegetables := make(map[string]int)
    vegetables[""Carrats""] = 10
    vegetables[""Beets""] = 0

    d := Data{fruits, vegetables}
    p := Payload{d}

    return json.MarshalIndent(p, """", ""  "")
}
</code></pre>
","<p>You can set your content-type header so clients know to expect json</p>

<p><code>w.Header().Set(""Content-Type"", ""application/json"")</code></p>

<p>Another way to marshal a struct to json is to build an encoder using the <code>http.ResponseWriter</code></p>

<pre><code>// get a payload p := Payload{d}
json.NewEncoder(w).Encode(p)
</code></pre>
","31622112"
"Correct approach to global logging in Golang","28152","","<p>What's the pattern for application logging in Go? If I've got, say, 5 goroutines I need to log from, should I... </p>

<ul>
<li>Create a single <code>log.Logger</code> and pass it around?</li>
<li>Pass around a pointer to that <code>log.Logger</code>?</li>
<li>Should each goroutine or function create a logger?</li>
<li>Should I create the logger as a global variable?</li>
</ul>
","<blockquote>
  <ul>
  <li>Create a single log.Logger and pass it around?</li>
  </ul>
</blockquote>

<p>That is possible. A <a href=""http://golang.org/pkg/log/#Logger"">log.Logger</a> can be used concurrently from multiple goroutines.</p>

<blockquote>
  <ul>
  <li>Pass around a pointer to that log.Logger?</li>
  </ul>
</blockquote>

<p><a href=""http://golang.org/pkg/log/#New"">log.New</a> returns a <code>*Logger</code> which is usually an indication that you should pass the object around as a pointer. Passing it as value would create a copy of the struct (i.e. a copy of the Logger) and then multiple goroutines might write to the same <a href=""http://golang.org/pkg/io/#Writer"">io.Writer</a> concurrently. That might be a serious problem, depending on the implementation of the writer.</p>

<blockquote>
  <ul>
  <li>Should each goroutine or function create a logger?</li>
  </ul>
</blockquote>

<p>I wouldn't create a separate logger for each function or goroutine. Goroutines (and functions) are used for very lightweight tasks that will not justify the maintenance of a separate logger. It's probably a good idea to create a logger for each bigger component of your project. For example, if your project uses a SMTP service for sending mails, creating a separate logger for the mail service sounds like a good idea so that you can filter and turn off the output separately.</p>

<blockquote>
  <ul>
  <li>Should I create the logger as a global variable?</li>
  </ul>
</blockquote>

<p>That depends on your package. In the previous mail service example, it would be probably a good idea to have one logger for each instance of your service, so that users can log failures while using the gmail mail service differently than failures that occured while using the local MTA (e.g. sendmail).</p>
","18362952"
"How to write to a file in golang","27971","","<p>i am trying to write to to a file. i read the whole content of the file and now i want to change the content of the file based on some word that i have got from the file. but when i check, the content of the file, it is still the same and it has not change. this is what i used</p>

<pre><code>if strings.Contains(string(read), sam) {
    fmt.Println(""this file contain that word"")
    temp := strings.ToUpper(sam)
    fmt.Println(temp)
    err := ioutil.WriteFile(fi.Name(), []byte(temp), 0644)
} else {
    fmt.Println("" the word is not in the file"")
}
</code></pre>
","<p>Considering that your call to <a href=""http://golang.org/pkg/io/ioutil/#WriteFile"" rel=""nofollow noreferrer""><code>ioutil.WriteFile()</code></a> is consistent with what is used in ""<a href=""https://gobyexample.com/writing-files"" rel=""nofollow noreferrer"">Go by Example: Writing Files</a>"", this should work.</p>

<p>But that Go by example article check the err just after the write call.</p>

<p>You check the err outside the scope of your test:</p>

<pre><code>    if matched {
        read, err := ioutil.ReadFile(path)
        //fmt.Println(string(read))
        fmt.Println("" This is the name of the file"", fi.Name())
        if strings.Contains(string(read), sam) {
            fmt.Println(""this file contain that word"")
            Value := strings.ToUpper(sam)
            fmt.Println(Value)
            err = ioutil.WriteFile(fi.Name(), []byte(Value), 0644)
        } else {
            fmt.Println("" the word is not in the file"")
        }
        check(err)   &lt;===== too late
    }
</code></pre>

<p>The err you are testing is the one you got when reading the file (<code>ioutil.ReadFile</code>), because of <a href=""http://golang.org/ref/spec#Blocks"" rel=""nofollow noreferrer"">blocks and scope</a>.</p>

<p>You need to check the error right after the Write call</p>

<pre><code>            err = ioutil.WriteFile(fi.Name(), []byte(Value), 0644)
            check(err)   &lt;===== too late
</code></pre>

<hr>

<p>Since WriteFile overwrite the all file, you could <a href=""http://golang.org/pkg/strings/#Replace"" rel=""nofollow noreferrer"">strings.Replace()</a> to replace your word by its upper case equivalent:</p>

<pre><code>r := string(read)
r = strings.Replace(r, sam, strings.ToUpper(sam), -1)
err := ioutil.WriteFile(fi.Name(), []byte(r), 0644)
</code></pre>

<hr>

<p>For a <strong>replace which is case insensitive</strong>, use a regexp as in ""<a href=""https://stackoverflow.com/a/15326479/6309"">How do I do a case insensitive regular expression in Go?</a>"".<br>
The, use <a href=""http://golang.org/pkg/regexp/#Regexp.ReplaceAllString"" rel=""nofollow noreferrer""><code>func (*Regexp) ReplaceAllString</code></a>:</p>

<pre><code>re := regexp.MustCompile(""(?i)\\b""+sam+""\\b"")
r = re.ReplaceAllString(r, strings.ToUpper(sam))
err := ioutil.WriteFile(fi.Name(), []byte(r), 0644)
</code></pre>

<p>Note the <code>\b</code>: <strong><a href=""https://github.com/StefanSchroeder/Golang-Regex-Tutorial/blob/master/01-chapter1.markdown#anchor-and-boundaries"" rel=""nofollow noreferrer"">word boundary</a></strong> to find the any <em>word</em> starting and ending with <code>sam</code> content (instead of finding substrings <em>containing</em> <code>sam</code> content).<br>
If you want to replace substrings, simply drop the <code>\b</code>:</p>

<pre><code>re := regexp.MustCompile(""(?i)""+sam)
</code></pre>
","24812276"
"Split a string on whitespace in Go?","27896","","<p>Given an input string such as <code>""  word1   word2 word3   word4  ""</code>, what would be the best approach to split this as an array of strings in Go? Note that there can be <em>any</em> number of spaces or unicode-spacing characters between each word.</p>

<p>In Java I would just use <code>someString.trim().split(""\\s+"")</code>.</p>

<p>(Note: possible duplicate <a href=""https://stackoverflow.com/questions/4466091/split-string-using-regular-expression-in-go"">Split string using regular expression in Go</a> doesn't give any good quality answer. Please provide an actual example, not just a link to the <code>regexp</code> or <code>strings</code> packages reference.)</p>
","<p>The <code>strings</code> package has a <a href=""http://golang.org/pkg/strings/#Fields""><code>Fields</code></a> method.</p>

<pre><code>someString := ""one    two   three four ""

words := strings.Fields(someString)

fmt.Println(words, len(words)) // [one two three four] 4
</code></pre>

<p><em><strong>DEMO:</em></strong> <a href=""http://play.golang.org/p/et97S90cIH"">http://play.golang.org/p/et97S90cIH</a></p>

<p>From the docs:</p>

<blockquote>
  <p><code>func Fields(s string) []string</code></p>
  
  <p>Fields splits the string <code>s</code> around each instance of one or more consecutive white space characters, returning an array of substrings of <code>s</code> or an empty list if s contains only white space. </p>
</blockquote>
","13737890"
"How to count items in a Go map?","27843","","<p>If I want to count the items in the map structure, what statement should I use?
I tried to use</p>

<pre><code>for _, _ := range m {...}
</code></pre>

<p>but it seems the syntax is false.</p>
","<p>Use <code>len(m)</code>. From <a href=""http://golang.org/ref/spec#Length_and_capacity"" rel=""noreferrer"">http://golang.org/ref/spec#Length_and_capacity</a></p>

<pre><code>len(s)    string type      string length in bytes
          [n]T, *[n]T      array length (== n)
          []T              slice length
          map[K]T          map length (number of defined keys)
          chan T           number of elements queued in channel buffer
</code></pre>

<p>Here are a couple examples ported from the now-retired SO documentation:</p>

<pre><code>m := map[string]int{}
len(m) // 0

m[""foo""] = 1
len(m) // 1
</code></pre>

<p>If a variable points to a <code>nil</code> map, then <code>len</code> returns 0.</p>

<pre><code>var m map[string]int
len(m) // 0
</code></pre>

<blockquote>
  <p>Excerpted from <a href=""https://web.archive.org/web/20171006194004/https://stackoverflow.com/documentation/go/732/maps/2528/counting-map-elements"" rel=""noreferrer"">Maps - Counting map elements</a>. The original author was <a href=""https://stackoverflow.com/users/123527/simone-carletti"">Simone Carletti</a>. Attribution details can be found on the <a href=""https://web.archive.org/web/2/https://stackoverflow.com/documentation/contributors/example/2528"" rel=""noreferrer"">contributor page</a>. The source is licenced under <a href=""https://creativecommons.org/licenses/by-sa/3.0/"" rel=""noreferrer"">CC BY-SA 3.0</a> and may be found in the <a href=""https://archive.org/details/documentation-dump.7z"" rel=""noreferrer"">Documentation archive</a>. Reference topic ID: 732 and example ID: 2528.</p>
</blockquote>
","12544809"
"Format Timestamp in outgoing JSON in Golang?","27724","","<p>I've been playing with Go recently and it's awesome. The thing I can't seem to figure out (after looking through documentation and blog posts) is how to get the <code>time.Time</code> type to format into whatever format I'd like when it's encoded by <code>json.NewEncoder.Encode</code></p>

<p>Here's a minimal Code example: </p>

<pre><code>package main

type Document struct {
    Name        string
    Content     string
    Stamp       time.Time
    Author      string
}

func sendResponse(data interface{}, w http.ResponseWriter, r * http.Request){
     _, err := json.Marshal(data)
    j := json.NewEncoder(w)
    if err == nil {
        encodedErr := j.Encode(data)
        if encodedErr != nil{
            //code snipped
        }
    }else{
       //code snipped
    }
}

func main() {
    http.HandleFunc(""/document"", control.HandleDocuments)
    http.ListenAndServe(""localhost:4000"", nil)
}

func HandleDocuments(w http.ResponseWriter,r *http.Request) {
    w.Header().Set(""Content-Type"", ""application/json"")
    w.Header().Set(""Access-Control-Allow-Origin"", ""*"")

    switch r.Method {
        case ""GET"": 
            //logic snipped
            testDoc := model.Document{""Meeting Notes"", ""These are some notes"", time.Now(), ""Bacon""}    
            sendResponse(testDoc, w,r)
            }
        case ""POST"":
        case ""PUT"":
        case ""DELETE"":
        default:
            //snipped
    }
}
</code></pre>

<p>Ideally, I'd like to send a request and get the Stamp field back as something like <code>May 15, 2014</code> and not <code>2014-05-16T08:28:06.801064-04:00</code></p>

<p>But I'm not really sure how, I know I can add <code>json:stamp</code> to the Document type declaration  to get the field to be encoded with the name stamp instead of Stamp, but I don't know what those types of things are called, so I'm not even sure what to google for to find out if there is some type of formatting option in that as well. </p>

<p>Does anyone have a link to the an example or good documentation page on the subject of those type mark ups (or whatever they're called) or on how I can tell the JSON encoder to handle <code>time.Time</code> fields? </p>

<p>Just for reference, I have looked at these pages: <a href=""http://pauladamsmith.com/blog/2011/05/go_time.html"" rel=""noreferrer"">here</a> and <a href=""https://gobyexample.com/json"" rel=""noreferrer"">here</a> and of course, <a href=""http://golang.org/pkg/json/"" rel=""noreferrer"">at the official docs</a></p>
","<p>What you can do is, wrap time.Time as your own custom type, and make it implement the <code>Marshaler</code> interface:</p>

<pre><code>type Marshaler interface {
    MarshalJSON() ([]byte, error)
}
</code></pre>

<p>So what you'd do is something like:</p>

<pre><code>type JSONTime time.Time

func (t JSONTime)MarshalJSON() ([]byte, error) {
    //do your serializing here
    stamp := fmt.Sprintf(""\""%s\"""", time.Time(t).Format(""Mon Jan _2""))
    return []byte(stamp), nil
}
</code></pre>

<p>and make document:</p>

<pre><code>type Document struct {
    Name        string
    Content     string
    Stamp       JSONTime
    Author      string
}
</code></pre>

<p>and have your intialization look like:</p>

<pre><code> testDoc := model.Document{""Meeting Notes"", ""These are some notes"", JSONTime(time.Now()), ""Bacon""}    
</code></pre>

<p>And that's about it. If you want unmarshaling, there is the <code>Unmarshaler</code> interface too.</p>
","23695774"
"How do you print in a Go test using the ""testing"" package?","27430","","<p>I'm running a test in Go with a statement to print something (i.e. for debugging of tests) but it's not printing anything.</p>

<pre><code>func TestPrintSomething(t *testing.T) {
    fmt.Println(""Say hi"")
}
</code></pre>

<p>When I run go test on this file, this is the output:</p>

<pre><code>ok      command-line-arguments  0.004s
</code></pre>

<p>The only way to really get it to print, as far as I know, is to print it via t.Error(), like so: </p>

<pre><code>func TestPrintSomethingAgain(t *testing.T) {
    t.Error(""Say hi"")
}
</code></pre>

<p>Which outputs this:</p>

<pre><code>Say hi
--- FAIL: TestPrintSomethingAgain (0.00 seconds)
    foo_test.go:35: Say hi
FAIL
FAIL    command-line-arguments  0.003s
gom:  exit status 1
</code></pre>

<p>I've Googled and looked through the manual but didn't find anything.</p>
","<p>The structs <a href=""http://golang.org/pkg/testing/#T""><code>testing.T</code></a> and <a href=""http://golang.org/pkg/testing/#B""><code>testing.B</code></a> both have a <a href=""http://golang.org/pkg/testing/#B.Log""><code>.Log</code></a> and <a href=""http://golang.org/pkg/testing/#B.Logf""><code>.Logf</code></a> method that sound to be what you are looking for. <a href=""http://golang.org/pkg/testing/#B.Log""><code>.Log</code></a> and <a href=""http://golang.org/pkg/testing/#B.Logf""><code>.Logf</code></a> are similar to <a href=""http://golang.org/pkg/fmt/#Print""><code>fmt.Print</code></a> and <a href=""http://golang.org/pkg/fmt/#Printf""><code>fmt.Printf</code></a> respectively.</p>

<p>See more details here: <a href=""http://golang.org/pkg/testing/#pkg-index"">http://golang.org/pkg/testing/#pkg-index</a></p>

<p><code>fmt.X</code> print statements <strong>do</strong> work inside tests, but you will find their output is probably not on screen where you expect to find it and, hence, why you should use the logging methods in <code>testing</code>.</p>

<p>If, as in your case, you want to see the logs for tests that are not failing, you have provide <code>go test</code> the <code>-v</code> flag (v for verbosity). More details on testing flags can be found here: <a href=""http://golang.org/cmd/go/#hdr-Description_of_testing_flags"">http://golang.org/cmd/go/#hdr-Description_of_testing_flags</a> </p>
","23205771"
"range over interface{} which stores a slice","27136","","<p>Given the scenario where you have a function which accepts <code>t interface{}</code>. If it is determined that the <code>t</code> is a slice, how do I <code>range</code> over that slice? I will not know the incoming type, such as <code>[]string</code>, <code>[]int</code> or <code>[]MyType</code>, at compile time.</p>

<pre><code>func main() {
    data := []string{""one"",""two"",""three""}
    test(data)
    moredata := []int{1,2,3}
    test(data)
}

func test(t interface{}) {
    switch reflect.TypeOf(t).Kind() {
    case reflect.Slice:
        // how do I iterate here?
        for _,value := range t {
            fmt.Println(value)
        }
    }
}
</code></pre>

<p>Go Playground Example: <a href=""http://play.golang.org/p/DNldAlNShB"" rel=""noreferrer"">http://play.golang.org/p/DNldAlNShB</a></p>
","<p>Well I used <code>reflect.ValueOf</code> and then if it is a slice you can call <code>Len()</code> and <code>Index()</code> on the value to get the <code>len</code> of the slice and element at an index. I don't think you will be able to use the range operate to do this.</p>

<pre><code>package main

import ""fmt""
import ""reflect""

func main() {
    data := []string{""one"",""two"",""three""}
    test(data)
    moredata := []int{1,2,3}
    test(moredata)
} 

func test(t interface{}) {
    switch reflect.TypeOf(t).Kind() {
    case reflect.Slice:
        s := reflect.ValueOf(t)

        for i := 0; i &lt; s.Len(); i++ {
            fmt.Println(s.Index(i))
        }
    }
}
</code></pre>

<p>Go Playground Example: <a href=""http://play.golang.org/p/gQhCTiwPAq"">http://play.golang.org/p/gQhCTiwPAq</a></p>
","14026030"
"What is a rune?","27098","","<p>What is a <code>rune</code> in Go?</p>

<p>I've been googling but Golang only says in one line: <em><code>rune</code> is an alias for <code>int32</code></em>.</p>

<p>But how come integers are used all around like swapping cases?</p>

<p>The following is a function swapcase.
What is all the <code>&lt;=</code> and <code>-</code>?</p>

<p>And why doesn't <code>switch</code> have any arguments? </p>

<p><code>&amp;&amp;</code> should mean <em>and</em> but what is <code>r &lt;= 'z'</code>?</p>

<pre><code>func SwapRune(r rune) rune {
    switch {
    case 'a' &lt;= r &amp;&amp; r &lt;= 'z':
        return r - 'a' + 'A'
    case 'A' &lt;= r &amp;&amp; r &lt;= 'Z':
        return r - 'A' + 'a'
    default:
        return r
    }
}
</code></pre>

<p>Most of them are from <a href=""http://play.golang.org/p/H6wjLZj6lW"">http://play.golang.org/p/H6wjLZj6lW</a></p>

<pre><code>func SwapCase(str string) string {
    return strings.Map(SwapRune, str)
}
</code></pre>

<p>I understand this is mapping <code>rune</code> to <code>string</code> so that it can return the swapped string. But I do not understand how exactly <code>rune</code> or <code>byte</code> works here.</p>
","<p>Rune literals are just an integer value (as you've written). They are ""mapped"" to their unicode codepoint. For example the rule literal 'a' is in reality the number 97. </p>

<p>Therfore your program is pretty much equivalent to:</p>

<pre><code>package main

import ""fmt""

func SwapRune(r rune) rune {
    switch {
    case 97 &lt;= r &amp;&amp; r &lt;= 122:
        return r - 32
    case 65 &lt;= r &amp;&amp; r &lt;= 90:
        return r + 32
    default:
        return r
    }
}

func main() {
    fmt.Println(SwapRune('a'))
}
</code></pre>

<p>which should be obvious if you look at the unicode mapping, which is identical to <a href=""https://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters"">ASCII</a> in that range. And 32 is the offset of the uppercase and lowercase characters. So if you add 32 to 'A', you get 'a' and vice versa.</p>
","19311218"
"how to find, ""invalid character ',' looking for beginning of value"" error message","27018","","<p>I have a short Go program that runs the <code>go list -json</code> command for several packages, stores the output of each run of the command in a json.RawMessage, appends each json.RawMessage into a slice of json.RawMessages, and then returns the result to the server after concatenating each of the json.RawMessages together and compacting the json. However, there is an error message that gets produced when I run <code>json.Compact</code> that I can't locate the source of. Googling this error message reveals that most people who seem to encounter it--whether it's for an invalid <code>,</code> or some other character--have a hard time finding the source of it.</p>

<pre><code>invalid character ',' looking for beginning of value
</code></pre>

<p>The code with comments is available to view here <a href=""https://play.golang.org/p/ghVvuSYhpg"" rel=""nofollow noreferrer"">on play.golang.org</a> (although it won't run there) and also below. </p>

<p>Question: can you explain the source of this error and how to prevent it?</p>

<p>(Note, some of the packages were included just for testing purposes)</p>

<pre><code>package main

import (
    ""expvar""

    ""encoding/json""

    ""bytes""
    ""fmt""
    ""github.com/go-martini/martini""
    ""github.com/zenazn/goji""
    ""github.com/zenazn/goji/web""
    ""go/build""
    ""log""
    ""math/rand""
    ""net/http""
    _ ""net/http/pprof""
    ""os/exec""
)

type myType struct {
    J []json.RawMessage
}

var pack map[string]string

type GoList struct {
    Imports []string
}

type Import struct {
    Dir        string
    ImportPath string
    Name       string
    Target     string
    Standard   bool
    Root       string
    GoFiles    []string
    Imports    []string
    Deps       []string
}

const contentTypeJSON = ""application/json""

func main() {

    http.HandleFunc(""/importgraph"", func(w http.ResponseWriter, r *http.Request) { importGraph(w, r) })
    http.HandleFunc(""/"", handler)
    http.ListenAndServe("":8080"", nil)

}

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Println(""Inside handler"")
    fmt.Fprintf(w, ""Hello world from my Go program!"")
}

func importGraph(w http.ResponseWriter, r *http.Request) {

    pack = make(map[string]string)

    var t myType
    cmd := exec.Command(""go"", ""list"", ""-json"")
    stdout, err := cmd.Output()
    if err != nil {

        println(err.Error())
        return
    }

    var list GoList
    err = json.Unmarshal(stdout, &amp;list)

    for _, d := range list.Imports {
        //get the imports for each of the packages listed by go list -json
        t.imports(d)

    }

    var buff bytes.Buffer

    //concatenate the separate json.RawMessages together into json

    buff.WriteByte('[')

    for i, j := range t.J {

        if i != 0 {
            buff.WriteByte(',')
        }
        buff.Write([]byte(j))
    }
    buff.WriteByte(']')

    var buffer bytes.Buffer
    if err := json.Compact(&amp;buffer, buff.Bytes()); err != nil {
        println(err.Error()) //error message: invalid character ',' looking for beginning of value
        return

    }

    w.Header().Set(""Content-Type"", contentTypeJSON)

    w.Write(buffer.Bytes())

}

func (myObj *myType) imports(pk string) error {

    cmd := exec.Command(""go"", ""list"", ""-json"", pk)
    stdout, _ := cmd.Output()

    pack[pk] = pk

    var deplist Import
    json.Unmarshal(stdout, &amp;deplist)

    var newj json.RawMessage
    json.Unmarshal(stdout, &amp;newj)
    myObj.J = append(myObj.J, newj)

    for _, imp := range deplist.Imports {

        if _, ok := pack[imp]; !ok {

            myObj.imports(imp) //recursive call to get the imports of the imports etc

        }
    }

    return nil

}
</code></pre>
","<p>First, as has been commented, are you sure you can't use
the <code>go/build</code> package directly rather than running <code>go list</code>?</p>

<p>I Wouldn't use <code>println</code> (or <code>fmt.Println</code>) inside HTTP handlers. It's much better to use <code>log.Println</code> and/or get the error into the <code>ResponseWriter</code>. Also, it's a good idea to wrap your <code>ListenAndServe</code> call with <code>log.Fatal</code>.</p>

<p>When printing/logging <code>error</code> values you can just use <code>err</code>, no need to have <code>err.Error()</code>.</p>

<p>Further, when you actually want to do something more detailed than just reporting/logging the error message you can look at it's type and other info. For example, <code>log.Printf(""verbose error info: %#v"", err)</code> gives:</p>

<pre><code>&amp;json.SyntaxError{msg:""invalid character ',' looking for beginning of value"", Offset:0}
</code></pre>

<p>I tried this because I know the <code>json</code> package returns various error types with additional info and I was hoping the offset value would be of help. If it had been then something like this might have been helpful:</p>

<pre><code>if err := json.Compact(…) {
    if err != nil {
        log.Println(""json.Compact:"", err)
        if serr, ok := err.(*json.SyntaxError); ok {
            log.Println(""Occurred at offset:"", serr.Offset)
            // … something to show the data in buff around that offset …
        }
    }
}
</code></pre>

<p>But offset zero isn't helpful :(</p>

<p>So although this doesn't identify you problem hopefully
it can be of some help to your further investigation.</p>

<p>Edit:</p>

<p>So after adding:</p>

<pre><code>log.Println(""Write file:"", ioutil.WriteFile(""data.json"", buff.Bytes(), 0600))
</code></pre>

<p>to the above error handling block I then ran a JSON validator on the resultant file and it identified this piece:</p>

<pre><code>        ""XTestImports"": [
                ""io"",
                ""log"",
                ""net""
        ]
},,{
        ""Dir"": ""/usr/local/go/src/mime"",
        ""ImportPath"": ""mime"",
        ""Name"": ""mime"",
</code></pre>

<p>Note the double <code>,,</code>.</p>

<p>That should tell you whete the error in your code is.
But if not, you need to skip empty entries, either when processing <code>t.J</code> or when you build it. The later is better and just involves:</p>

<pre><code>    if len(newj) &gt; 0 {
        myObj.J = append(myObj.J, newj)
    }
</code></pre>

<p>(where btw you don't check for errors from <code>json.Unmarshal</code> so it's not clear if that is supposed to ever be empty or if it's empty due to a preceeding error. <strong>Never</strong> ignore error returns!)</p>
","29245641"
"How to get a MD5 hash from a string in Golang?","26988","","<p>I'm just starting with <a href=""http://golang.org"" rel=""noreferrer"">Golang</a> and I am now stuck on MD5 creation. This is how I started to get a <code>md5</code> hash from a <code>string</code>:</p>

<pre><code>import ""crypto/md5""

var original = ""my string comes here""
var hash = md5.New(original)
</code></pre>

<p>But obviously this is not how it works. Can someone provide me a working sample for this?</p>
","<p>Reference <a href=""http://golang.org/pkg/crypto/md5/#Sum"" rel=""noreferrer"">Sum</a>，For me，following work well：</p>

<pre><code>package main

import (
    ""crypto/md5""
    ""fmt""
)

func main() {
    data := []byte(""hello"")
    fmt.Printf(""%x"", md5.Sum(data))
}
</code></pre>
","27942646"
"How do I install requirements in Go? ""cannot find package""","26903","","<p>I'm new to Go and I'm trying to set up a Go project with minimal documentation: <a href=""https://github.com/alphagov/metadata-api"">https://github.com/alphagov/metadata-api</a></p>

<p>I've cloned it, but when I try <code>go build</code> I get the following warnings: </p>

<pre><code>main.go:8:2: cannot find package ""github.com/Sirupsen/logrus"" in any of:
    /usr/local/Cellar/go/1.3.3/libexec/src/pkg/github.com/Sirupsen/logrus (from $GOROOT)
    /Users/me/go/src/github.com/Sirupsen/logrus (from $GOPATH)
main.go:14:2: cannot find package ""github.com/alphagov/metadata-api/content_api"" in any of:
    /usr/local/Cellar/go/1.3.3/libexec/src/pkg/github.com/alphagov/metadata-api/content_api (from $GOROOT)
    /Users/me/go/src/github.com/alphagov/metadata-api/content_api (from $GOPATH)
</code></pre>

<p>I'm guessing this is because I haven't installed the Go equivalent of requirements? </p>

<p>My <code>GOPATH</code> is set:</p>

<pre><code>metadata-api$ echo $GOPATH
/Users/me/go
</code></pre>

<p>And the Go executable is in </p>

<pre><code>metadata-ape$ echo $PATH
....:/Users/me/go/bin
</code></pre>

<p>What do I need to do to help Go find these packages?</p>
","<p>You should install package first:</p>

<p>try </p>

<pre><code>$ go get github.com/Sirupsen/logrus
</code></pre>

<p>and check you <code>$GOPATH</code> dir</p>

<p>This project use <a href=""https://github.com/mattn/gom""><code>gom</code></a> as the package manager, </p>

<p>Make sure you have installed <code>gom</code></p>

<p>or try this command</p>

<pre><code>$ gom install 
</code></pre>

<p>I think your <code>$GOPATH</code> and <code>$PATH</code> settings are incorrect, the <code>$GOPATH</code> environment variable specifies the location of your workspace, these are my path settings:</p>

<pre><code>export GOROOT=$HOME/bin/go
export GOBIN=$GOROOT/bin
export GOPATH=$HOME/golang
export PATH=$PATH:$GOBIN
</code></pre>
","27249453"
"Max number of goroutines","26849","","<p>How many goroutines can I use painless? For example wikipedia says, in Erlang 20 million processes can be created without degrading performance.</p>

<p><strong>Update:</strong> I've just <a href=""http://en.munknex.net/2011/12/golang-goroutines-performance.html"" rel=""nofollow noreferrer"">investigated in goroutines performance</a> a little and got such a results:</p>

<ul>
<li>It looks like goroutine lifetime is more then calculating sqrt() 1000 times ( ~45µs for me ), the only limitation is memory</li>
<li>Goroutine costs 4 — 4.5 KB</li>
</ul>
","<p>If a goroutine is blocked, there is no cost involved other than:</p>

<ul>
<li>memory usage</li>
<li>slower garbage-collection</li>
</ul>

<p>The costs (in terms of memory and average time to actually start executing a goroutine) are:</p>

<pre><code>Go 1.6.2 (April 2016)
  32-bit x86 CPU (A10-7850K 4GHz)
    | Number of goroutines: 100000
    | Per goroutine:
    |   Memory: 4536.84 bytes
    |   Time:   1.634248 µs
  64-bit x86 CPU (A10-7850K 4GHz)
    | Number of goroutines: 100000
    | Per goroutine:
    |   Memory: 4707.92 bytes
    |   Time:   1.842097 µs

Go release.r60.3 (December 2011)
  32-bit x86 CPU (1.6 GHz)
    | Number of goroutines: 100000
    | Per goroutine:
    |   Memory: 4243.45 bytes
    |   Time:   5.815950 µs
</code></pre>

<p>On a machine with 4 GB of memory installed, this limits the maximum number of goroutines to slightly less than 1 million.</p>

<hr>

<p>Source code (no need to read this if you already understand the numbers printed above):</p>

<pre><code>package main

import (
    ""flag""
    ""fmt""
    ""os""
    ""runtime""
    ""time""
)

var n = flag.Int(""n"", 1e5, ""Number of goroutines to create"")

var ch = make(chan byte)
var counter = 0

func f() {
    counter++
    &lt;-ch // Block this goroutine
}

func main() {
    flag.Parse()
    if *n &lt;= 0 {
            fmt.Fprintf(os.Stderr, ""invalid number of goroutines"")
            os.Exit(1)
    }

    // Limit the number of spare OS threads to just 1
    runtime.GOMAXPROCS(1)

    // Make a copy of MemStats
    var m0 runtime.MemStats
    runtime.ReadMemStats(&amp;m0)

    t0 := time.Now().UnixNano()
    for i := 0; i &lt; *n; i++ {
            go f()
    }
    runtime.Gosched()
    t1 := time.Now().UnixNano()
    runtime.GC()

    // Make a copy of MemStats
    var m1 runtime.MemStats
    runtime.ReadMemStats(&amp;m1)

    if counter != *n {
            fmt.Fprintf(os.Stderr, ""failed to begin execution of all goroutines"")
            os.Exit(1)
    }

    fmt.Printf(""Number of goroutines: %d\n"", *n)
    fmt.Printf(""Per goroutine:\n"")
    fmt.Printf(""  Memory: %.2f bytes\n"", float64(m1.Sys-m0.Sys)/float64(*n))
    fmt.Printf(""  Time:   %f µs\n"", float64(t1-t0)/float64(*n)/1e3)
}
</code></pre>
","8534711"
"Multiple goroutines listening on one channel","26735","","<p>I have multiple goroutines trying to receive on the same channel simultaneously. It seems like the last goroutine that starts receiving on the channel gets the value. Is this somewhere in the language spec or is it undefined behaviour?</p>

<pre><code>c := make(chan string)
for i := 0; i &lt; 5; i++ {
    go func(i int) {
        &lt;-c
        c &lt;- fmt.Sprintf(""goroutine %d"", i)
    }(i)
}
c &lt;- ""hi""
fmt.Println(&lt;-c)
</code></pre>

<p>Output:</p>

<pre><code>goroutine 4
</code></pre>

<p><a href=""http://play.golang.org/p/7TuA7kLtks"">Example On Playground</a></p>

<p><strong>EDIT:</strong></p>

<p>I just realized that it's more complicated than I thought. The message gets passed around all the goroutines.</p>

<pre><code>c := make(chan string)
for i := 0; i &lt; 5; i++ {
    go func(i int) {
        msg := &lt;-c
        c &lt;- fmt.Sprintf(""%s, hi from %d"", msg, i)
    }(i)
}
c &lt;- ""original""
fmt.Println(&lt;-c)
</code></pre>

<p>Output:</p>

<pre><code>original, hi from 0, hi from 1, hi from 2, hi from 3, hi from 4
</code></pre>

<p><a href=""http://play.golang.org/p/3y-YQG8dAb"">Example On Playground</a></p>
","<p>Yes, it's complicated, But there are a couple of rules of thumb that should make things feel much more straightforward.</p>

<ul>
<li><strong>prefer using formal arguments for the channels</strong> you pass to go-routines instead of accessing channels in global scope. You can get more compiler checking this way, and better modularity too.</li>
<li><strong>avoid both reading and writing on the same channel in a particular go-routine</strong> (including the 'main' one). Otherwise, deadlock is a much greater risk.</li>
</ul>

<p>Here's an alternative version of your program, applying these two guidelines. This case demonstrates many writers &amp; one reader on a channel:</p>

<pre><code>c := make(chan string)

for i := 1; i &lt;= 5; i++ {
    go func(i int, co chan&lt;- string) {
        for j := 1; j &lt;= 5; j++ {
            co &lt;- fmt.Sprintf(""hi from %d.%d"", i, j)
        }
    }(i, c)
}

for i := 1; i &lt;= 25; i++ {
    fmt.Println(&lt;-c)
}
</code></pre>

<p><a href=""http://play.golang.org/p/quQn7xePLw"" rel=""noreferrer"">http://play.golang.org/p/quQn7xePLw</a></p>

<p>It creates the five go-routines writing to a single channel, each one writing five times. The main go-routine reads all twenty five messages - you may notice that the order they appear in is often not sequential (i.e. the concurrency is evident).</p>

<p>This example demonstrates a feature of Go channels: it is possible to have multiple writers sharing one channel; Go will interleave the messages automatically. </p>

<p>The same applies for one writer and multiple readers on one channel, as seen in the second example here:</p>

<pre><code>c := make(chan int)
var w sync.WaitGroup
w.Add(5)

for i := 1; i &lt;= 5; i++ {
    go func(i int, ci &lt;-chan int) {
        j := 1
        for v := range ci {
            time.Sleep(time.Millisecond)
            fmt.Printf(""%d.%d got %d\n"", i, j, v)
            j += 1
        }
        w.Done()
    }(i, c)
}

for i := 1; i &lt;= 25; i++ {
    c &lt;- i
}
close(c)
w.Wait()
</code></pre>

<p>This <a href=""http://play.golang.org/p/ESq9he_WzS"" rel=""noreferrer"">second example</a> includes a wait imposed on the main goroutine, which would otherwise exit promptly and cause the other five goroutines to be terminated early <em>(thanks to <a href=""https://stackoverflow.com/users/1001457/olov"">olov</a> for this correction)</em>. </p>

<p>In both examples, no buffering was needed. It is generally a good principle to view buffering as a performance enhancer only. If your program does not deadlock <em>without</em> buffers, it won't deadlock <em>with</em> buffers either (but the converse <em>is not</em> always true). So, as <strong>another rule of thumb, start without buffering then add it later as needed</strong>.</p>
","15721380"
"How to replace a single character inside a string in Golang?","26526","","<p>I am getting a physical location address from a user and trying to arrange it to create a URL that would use later to get a JSON response from Google Geocode API.</p>

<p>The final URL string result should be similar to <a href=""http://code.google.com/apis/maps/documentation/geocoding/"" rel=""noreferrer"">this one</a>, without spaces: </p>

<blockquote>
  <p><a href=""http://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&amp;sensor=true"" rel=""noreferrer"">http://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&amp;sensor=true</a></p>
</blockquote>

<p>I do not know how to replace white spaces in my URL string and have commas instead. I did read a little about the strings and regexp packages and I have created the following code:</p>

<pre><code>package main

import (
    ""fmt""
    ""bufio""
    ""os""
    ""http""
)

func main() {
    // Get the physical address
    r := bufio.NewReader(os.Stdin)  
    fmt.Println(""Enter a physical location address: "")
    line, _, _ := r.ReadLine()

    // Print the inputted address
    address := string(line)
    fmt.Println(address) // Need to see what I'm getting

    // Create the URL and get Google's Geocode API JSON response for that address
    URL := ""http://maps.googleapis.com/maps/api/geocode/json?address="" + address + ""&amp;sensor=true""
    fmt.Println(URL)

    result, _ := http.Get(URL)
    fmt.Println(result) // To see what I'm getting at this point
}
</code></pre>

<p></p>
","<p>You can use <a href=""http://golang.org/pkg/strings/#Replace"" rel=""noreferrer""><code>strings.Replace</code></a>.</p>

<pre><code>package main

import (
    ""fmt""
    ""strings""
)

func main() {
    str := ""a space-separated string""
    str = strings.Replace(str, "" "", "","", -1)
    fmt.Println(str)
}
</code></pre>

<p>If you need to replace more than one thing, or you'll need to do the same replacement over and over, it might be better to use a <a href=""http://golang.org/pkg/strings/#Replacer"" rel=""noreferrer""><code>strings.Replacer</code></a>:</p>

<pre><code>package main

import (
    ""fmt""
    ""strings""
)

// replacer replaces spaces with commas and tabs with commas.
// It's a package-level variable so we can easily reuse it, but
// this program doesn't take advantage of that fact.
var replacer = strings.NewReplacer("" "", "","", ""\t"", "","")

func main() {
    str := ""a space- and\ttab-separated string""
    str = replacer.Replace(str)
    fmt.Println(str)
}
</code></pre>

<p>And of course if you're replacing for the purpose of encoding, such as URL encoding, then it might be better to use a function specifically for that purpose, such as <a href=""http://golang.org/pkg/net/url/#QueryEscape"" rel=""noreferrer""><code>url.QueryEscape</code></a></p>
","8191004"
"How to create nested directories using Mkdir in Golang?","26523","","<p>I'm trying to create a set of nested directories from a Go executable such as 'dir1/dir2/dir3'. I've succeeded in creating a single directory with this line:</p>

<pre><code>os.Mkdir(""."" + string(filepath.Separator) + c.Args().First(),0777);
</code></pre>

<p>But I have no idea how to approach creating a predetermined nested set of directories inside of that directory and my Google Fu isn't as strong as I thought it was. </p>

<p>Thanks in advance!</p>
","<p><code>os.Mkdir</code> is used to create a single directory. To create a folder path, instead try using:</p>

<pre><code>os.MkdirAll(folderPath, os.ModePerm);
</code></pre>

<p><a href=""http://golang.org/pkg/os/#MkdirAll"" rel=""noreferrer"">Go documentation</a></p>

<blockquote>
  <p>func MkdirAll(path string, perm FileMode) error  </p>
  
  <p>MkdirAll creates a directory named path, along with any necessary parents, and returns nil, or else returns an error. The permission bits perm are used for all directories that MkdirAll creates. If path is already a directory, MkdirAll does nothing and returns nil.</p>
</blockquote>

<p><strong>Edit:</strong></p>

<p>Updated to correctly use <code>os.ModePerm</code> instead.<br>
For concatenation of file paths, use package <code>path/filepath</code> as described in @Chris' answer. </p>
","28448702"
"Public, Private - Upper Case, Lower Case:","26506","","<p>New to GoLang, coming from Delphi, C++ :</p>

<p>First time I tried to create my own package in Go, I followed all the instructions about how to lay out the workspace, etc, but I kept on getting a compiler error:</p>

<pre><code>./myPackage.go:52: undefined: myFunc
</code></pre>

<p>After poking around a bit I discovered that the public access modifier in Go is achieved simply by declaring a function in upper case. Great.</p>

<p>But when I started experimenting with the container classes - <code>List</code> for starters, I discovered I had to declare a List reference return value like this:</p>

<pre><code>func GetFactors(value *int64) *list.List {...
</code></pre>

<p><strong><code>*list</code> is in lower case.</strong></p>

<p>Same when I declared a local reference to a list - I had to use:</p>

<pre><code>l := list.New()
</code></pre>

<p><strong>Again, lower case for <code>list</code>.</strong></p>

<p>So, I'm confused. What is the rule? The list calls and references are obviously public, or I wouldn't be able to call/use them - so why are they in lower case?</p>
","<p>In this case, <code>list</code> is the name of the package, which you are importing via <code>import ""container/list""</code>, and its public members are upper case, like <code>List</code>.</p>

<p>The rule is that public functions, types, etc., should be upper case. </p>

<p>You can alias imported packages however you want, but by default it is just the name of the last part of the package path--in this case, <code>list</code>.</p>

<p>Update: It's not the last part of the package path. It's the actual package name (which is often the same thing).</p>
","20850092"
"In Go, how can I get the string representation of a struct?","26319","","<p>For my application, it does not matter if the string is human readable or not.</p>
","<p>One popular way of encoding structs into strings is using <a href=""http://www.json.org"" rel=""nofollow noreferrer"">JSON</a>.</p>

<p>You have certain limitations such as not getting all the information (such as the specific type of each field), only serializing exported fields, and not handling recursive values. But it is a simple standard way of serializing data.</p>

<p>Working example:</p>

<pre><code>package main

import (
    ""fmt""
    ""encoding/json""
)

type s struct {
    Int       int
    String    string
    ByteSlice []byte
}

func main() {
    a := &amp;s{42, ""Hello World!"", []byte{0,1,2,3,4}}

    out, err := json.Marshal(a)
    if err != nil {
        panic (err)
    }

    fmt.Println(string(out))
}
</code></pre>

<p>Give this output:</p>

<pre><code>{""Int"":42,""String"":""Hello World!"",""ByteSlice"":""AAECAwQ=""}
</code></pre>

<p><a href=""https://play.golang.org/p/sx-xdSxAOG"" rel=""nofollow noreferrer"">https://play.golang.org/p/sx-xdSxAOG</a></p>
","16331470"
"Go, get hours difference between two dates","26085","","<p>I'm working for first time on Go, in this case i have a string on UTC format, I would like to know, how can I get the difference in hours between my date and the time now.
This is my current string</p>

<pre><code>v := ""2014-05-03 20:57 UTC""
</code></pre>
","<p>Use <a href=""http://golang.org/pkg/time/#Parse"">time.Parse</a> and <a href=""http://golang.org/pkg/time/#Since"">time.Since</a>:</p>

<pre><code>package main

import (
    ""fmt""
    ""time""
)

const (
    // See http://golang.org/pkg/time/#Parse
    timeFormat = ""2006-01-02 15:04 MST""
)

func main() {
    v := ""2014-05-03 20:57 UTC""
    then, err := time.Parse(timeFormat, v)
    if err != nil {
        fmt.Println(err)
        return
    }
    duration := time.Since(then)
    fmt.Println(duration.Hours())
}
</code></pre>
","23839040"
"Exec a shell command in Go","26071","","<p>I'm looking to execute a shell command in Go and get the resulting output as a string in my program. I saw the <a href=""http://rosettacode.org/wiki/Execute_a_system_command#Go"" rel=""noreferrer"">Rosetta Code</a> version:</p>

<pre><code>package main
import ""fmt""
import ""exec""

func main() {
  cmd, err := exec.Run(""/bin/ls"", []string{""/bin/ls""}, []string{}, """", exec.DevNull, exec.PassThrough, exec.PassThrough)
  if (err != nil) {
    fmt.Println(err)
    return
  }
  cmd.Close()
</code></pre>

<p>But this doesn't capture the actual standard out or err in a way that I can programatically access - those still print out to the regular stdout / stderr. I saw that using Pipe as the out or err could help elsewhere, but no example of how to do so. Any ideas?</p>
","<p><strong>This answer does not represent the current state of the Go standard library. Please take a look at @Lourenco's answer for an up to date method!</strong></p>

<hr>

<p>Your example does not actually read the data from stdout. This works for me.</p>

<pre><code>package main

import (
   ""fmt""
   ""exec""
   ""os""
   ""bytes""
   ""io""
)

func main() {
    app := ""/bin/ls""
    cmd, err := exec.Run(app, []string{app, ""-l""}, nil, """", exec.DevNull, exec.Pipe, exec.Pipe)

    if (err != nil) {
       fmt.Fprintln(os.Stderr, err.String())
       return
    }

    var b bytes.Buffer
    io.Copy(&amp;b, cmd.Stdout)
    fmt.Println(b.String())

    cmd.Close()
}
</code></pre>
","6182595"
"Does Go have lambda expressions or anything similiar?","26044","","<p>Does Go support lambda expressions or anything similiar?</p>

<p>I want to port a library from another language that uses lambda expressions (Ruby).</p>
","<p><a href=""http://livingcode.org/2009/11/13/go-language-and-functional-programming.html"" rel=""noreferrer"">Here is an example</a>, copied and pasted carefully:</p>

<pre><code>package main

import fmt ""fmt""

type Stringy func() string

func foo() string{
  return ""Stringy function""
}

func takesAFunction(foo Stringy){
  fmt.Printf(""takesAFunction: %v\n"", foo())
}

func returnsAFunction()Stringy{
  return func()string{
    fmt.Printf(""Inner stringy function\n"");
    return ""bar"" // have to return a string to be stringy
  }
}

func main(){
  takesAFunction(foo);
  var f Stringy = returnsAFunction();
  f();
  var baz Stringy = func()string{
    return ""anonymous stringy\n""
  };
  fmt.Printf(baz());
}
</code></pre>
","11766428"
"Easy way to get the keys in a map in alphabetical order","26016","","<p>In Go, what's the easiest way to get the keys in a map sorted alphabetically? This is the shortest way I can do it:</p>

<pre><code>package main

import ""container/vector""
import ""fmt""
import ""sort""

func main() {
    m := map[string]string {""b"":""15"", ""z"":""123123"", ""x"":""sdf"", ""a"":""12""}
    var keys vector.StringVector;
    for k,_ := range ( m ) {
            keys.Push(k)
    }
    sort.Sort( &amp;keys )
    fmt.Printf(""%v\n"", keys)
}
</code></pre>
","<p>You are sorting an array of strings using StringVector. To minimize overhead, you could sort an array of strings.</p>

<pre><code>package main

import (
    ""fmt""
    ""sort""
)

func main() {
    m := map[string]string{""b"": ""15"", ""z"": ""123123"", ""x"": ""sdf"", ""a"": ""12""}
    mk := make([]string, len(m))
    i := 0
    for k, _ := range m {
        mk[i] = k
        i++
    }
    sort.Strings(mk)
    fmt.Println(mk)
}
</code></pre>

<p>Output:</p>

<pre><code>[a b x z]
</code></pre>
","2039180"
"Golang, encrypting a string with AES and Base64","26000","","<p>I'm trying to encrypt some text inside a database to be loaded and decrypted during program startup.</p>

<p>I have tried a few methods, including a third party library <a href=""https://github.com/richard-lyman/lithcrypt"">https://github.com/richard-lyman/lithcrypt</a> to no avail. Using the following method encrypts/decrypts 8/10 items, but it seems that some padding residue is left behind at some point in the encrypt/decrypt. As it stands my code is like this:</p>

<pre><code>package client                                                                                                                                                                                              
import (                                                                                                                                                                                                    
    ""encoding/base64""                                                                                                                                                                                       
    ""crypto/aes""                                                                                                                                                                                            
    ""crypto/cipher""                                                                                                                                                                                         
    ""fmt""                                                                                                                                                                                                   
) 

var iv = []byte{34, 35, 35, 57, 68, 4, 35, 36, 7, 8, 35, 23, 35, 86, 35, 23}

func encodeBase64(b []byte) string {                                                                                                                                                                        
    return base64.StdEncoding.EncodeToString(b)                                                                                                                                                             
}                                                                                                                                                                                                           

func decodeBase64(s string) []byte {                                                                                                                                                                        
    data, err := base64.StdEncoding.DecodeString(s)                                                                                                                                                         
    if err != nil { panic(err) }                                                                                                                                                                            
    return data                                                                                                                                                                                             
}                                                                                                                                                                                                           

func Encrypt(key, text string) string {                                                                                                                                                                     
    block, err := aes.NewCipher([]byte(key))                                                                                                                                                                
    if err != nil { panic(err) }                                                                                                                                                                            
    plaintext := []byte(text)                                                                                                                                                                               
    cfb := cipher.NewCFBEncrypter(block, iv)                                                                                                                                                                
    ciphertext := make([]byte, len(plaintext))                                                                                                                                                              
    cfb.XORKeyStream(ciphertext, plaintext)                                                                                                                                                                 
    return encodeBase64(ciphertext)                                                                                                                                                                         
}                                                                                                                                                                                                           

func Decrypt(key, text string) string {                                                                                                                                                                     
    block, err := aes.NewCipher([]byte(key))                                                                                                                                                                
    if err != nil { panic(err) }                                                                                                                                                                            
    ciphertext := decodeBase64(text)                                                                                                                                                                        
    cfb := cipher.NewCFBEncrypter(block, iv)                                                                                                                                                                
    plaintext := make([]byte, len(ciphertext))                                                                                                                                                              
    cfb.XORKeyStream(plaintext, ciphertext)                                                                                                                                                                 
}                          
</code></pre>

<p>It was mentioned to me that I might need to pad the string, but it seems strange that I would have to pad a stream cipher.        </p>

<p>Below is an example of this error: <a href=""http://play.golang.org/p/4FQBAeHgRs"">http://play.golang.org/p/4FQBAeHgRs</a>                                                                                                                                                           </p>
","<p>This is based on the <a href=""http://golang.org/pkg/crypto/cipher/#example_NewCFBDecrypter"" rel=""nofollow noreferrer"">NewCFBEncrypter / NewCFBDecrypter examples</a> and seems to do what you require:</p>

<p>EDIT: Based on Kluyg's comment regarding IV creation I've modified the example code to use the <s>recommended method of creating the IV from the ciphertext</s> same method as the <a href=""http://golang.org/pkg/crypto/cipher/#example_NewCFBDecrypter"" rel=""nofollow noreferrer"">linked</a> example to create the IV from the ciphertext. (In production code the IV should be generated seperately each time. Thanks to <a href=""https://stackoverflow.com/users/2588732/roundsparrow-hilltx"">RoundSparrow hilltx</a> for pointing this out.)</p>

<p>I think the problem you're encountering is due to an invalid key length, but I'm not 100% sure.</p>

<pre><code>package main

import (
    ""crypto/aes""
    ""crypto/cipher""
    ""crypto/rand""
    ""encoding/base64""
    ""errors""
    ""fmt""
    ""io""
    ""log""
)

func main() {
    key := []byte(""a very very very very secret key"") // 32 bytes
    plaintext := []byte(""some really really really long plaintext"")
    fmt.Printf(""%s\n"", plaintext)
    ciphertext, err := encrypt(key, plaintext)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf(""%0x\n"", ciphertext)
    result, err := decrypt(key, ciphertext)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf(""%s\n"", result)
}

// See alternate IV creation from ciphertext below
//var iv = []byte{35, 46, 57, 24, 85, 35, 24, 74, 87, 35, 88, 98, 66, 32, 14, 05}

func encrypt(key, text []byte) ([]byte, error) {
    block, err := aes.NewCipher(key)
    if err != nil {
        return nil, err
    }
    b := base64.StdEncoding.EncodeToString(text)
    ciphertext := make([]byte, aes.BlockSize+len(b))
    iv := ciphertext[:aes.BlockSize]
    if _, err := io.ReadFull(rand.Reader, iv); err != nil {
        return nil, err
    }
    cfb := cipher.NewCFBEncrypter(block, iv)
    cfb.XORKeyStream(ciphertext[aes.BlockSize:], []byte(b))
    return ciphertext, nil
}

func decrypt(key, text []byte) ([]byte, error) {
    block, err := aes.NewCipher(key)
    if err != nil {
        return nil, err
    }
    if len(text) &lt; aes.BlockSize {
        return nil, errors.New(""ciphertext too short"")
    }
    iv := text[:aes.BlockSize]
    text = text[aes.BlockSize:]
    cfb := cipher.NewCFBDecrypter(block, iv)
    cfb.XORKeyStream(text, text)
    data, err := base64.StdEncoding.DecodeString(string(text))
    if err != nil {
        return nil, err
    }
    return data, nil
}
</code></pre>

<p>Produces:</p>

<blockquote>
  <p>some really really really long plaintext<br>
  54618bd6bb10612a7b590c53192df214501e01b685540b012581a0ed9ff3ddaa1f4177cc6186b501fb8cce0c2eb764daff475aab724d4d33e614d7d89cf556d8512fd920018c090f<br>
  some really really really long plaintext  </p>
</blockquote>

<p><a href=""http://play.golang.org/p/_9zQJ0aWaG"" rel=""nofollow noreferrer"">Playground</a></p>

<p>Hope that helps to pin point the problem.</p>
","18819040"
"Extract links from a web page using Go lang","25990","","<p>I am learning <a href=""http://golang.org/"" rel=""nofollow noreferrer"">google's Go programming language</a>. Does anyone know the best practice to extract all URLs from a html web page?</p>

<p>Coming from the Java world, there are libraries to do the job, for example <a href=""http://jsoup.org/"" rel=""nofollow noreferrer"">jsoup</a> , <a href=""http://htmlparser.sourceforge.net/"" rel=""nofollow noreferrer"">htmlparser</a>, etc. But for go lang, I guess no available similar library was made yet?</p>
","<p>Go's standard package for HTML parsing is still a work in progress and is not part of the current release.  A third party package you might try though is <a href=""http://code.google.com/p/go-html-transform/"" rel=""noreferrer"">go-html-transform</a>.  It is being actively maintained.</p>
","11083860"
"How to implement level based logging in golang?","25874","","<p>Is there any good wrapper available for level based logging in golang?
If not, how should I go about implementing one myself?</p>

<p>What I want is pretty simple. I want a few functions e.g.</p>

<pre><code>log.Error()
log.Info()
</code></pre>

<p>etc that display their outputs to stdout as well as save these in a log file (based on the level given to the program as commandline argument).
How do I implement this wrapper?</p>
","<p>Some more suggestions, now that the existing answers are quite old:</p>

<ul>
<li><a href=""https://github.com/op/go-logging"">https://github.com/op/go-logging</a> - smaller than the other here</li>
<li><a href=""https://github.com/Sirupsen/logrus"">https://github.com/Sirupsen/logrus</a> - used in many popular projects such as Docker</li>
<li><a href=""https://github.com/inconshreveable/log15"">https://github.com/inconshreveable/log15</a></li>
<li><a href=""https://github.com/golang/glog"">https://github.com/golang/glog</a> - from Google, implementation of their C++ glog library in Go</li>
</ul>
","31076772"
"Copying all elements of a map into another","25850","","<p>Given</p>

<pre><code>var dst, src map[K]V
</code></pre>

<p>I can copy all entries from <code>src</code> into <code>dst</code> by doing</p>

<pre><code>for k, v := range src {
    dst[k] = v
}
</code></pre>

<p>Is there a more idiomatic way to do this?</p>

<p><code>copy</code> only works on slices (and <code>string</code> as a source).</p>
","<p>That looks like a perfectly fine way to do this to me. I don't think copying one map into another is common enough to have a one-liner solution.</p>
","7436967"
"Pointers vs. values in parameters and return values","25773","","<p>In Go there are various ways to return a <code>struct</code> value or slice thereof. For individual ones I've seen:</p>

<pre><code>type MyStruct struct {
    Val int
}

func myfunc() MyStruct {
    return MyStruct{Val: 1}
}

func myfunc() *MyStruct {
    return &amp;MyStruct{}
}

func myfunc(s *MyStruct) {
    s.Val = 1
}
</code></pre>

<p>I understand the differences between these. The first returns a copy of the struct, the second a pointer to the struct value created within the function, the third expects an existing struct to be passed in and overrides the value.</p>

<p>I've seen all of these patterns be used in various contexts, I'm wondering what the best practices are regarding these. When would you use which? For instance, the first one could be ok for small structs (because the overhead is minimal), the second for bigger ones. And the third if you want to be extremely memory efficient, because you can easily reuse a single struct instance between calls. Are there any best practices for when to use which?</p>

<p>Similarly, the same question regarding slices:</p>

<pre><code>func myfunc() []MyStruct {
    return []MyStruct{ MyStruct{Val: 1} }
}

func myfunc() []*MyStruct {
    return []MyStruct{ &amp;MyStruct{Val: 1} }
}

func myfunc(s *[]MyStruct) {
    *s = []MyStruct{ MyStruct{Val: 1} }
}

func myfunc(s *[]*MyStruct) {
    *s = []MyStruct{ &amp;MyStruct{Val: 1} }
}
</code></pre>

<p>Again: what are best practices here. I know slices are always pointers, so returning a pointer to a slice isn't useful. However, should I return a slice of struct values, a slice of pointers to structs, should I pass in a pointer to a slice as argument (a pattern used in the <a href=""https://developers.google.com/appengine/docs/go/datastore/reference#Query.GetAll"">Go App Engine API</a>)?</p>
","<p><strong>tl;dr</strong>: </p>

<ul>
<li>Methods using receiver pointers are common; <a href=""https://github.com/golang/go/wiki/CodeReviewComments#receiver-type"" rel=""noreferrer"">the rule of thumb for receivers is</a>, ""If in doubt, use a pointer.""</li>
<li>Slices, maps, channels, strings, function values, and interface values are implemented with pointers internally, and a pointer to them is often redundant.</li>
<li>Elsewhere, use pointers for big structs or structs you'll have to change, and otherwise <a href=""https://github.com/golang/go/wiki/CodeReviewComments#pass-values"" rel=""noreferrer"">pass values</a>, because getting things changed by surprise via a pointer is confusing.</li>
</ul>

<hr>

 

<p>One case where you should often use a pointer:</p>

<ul>
<li><strong>Receivers</strong>  are pointers more often than other arguments. It's not unusual for methods to modify the thing they're called on, or for named types to be large structs, so <a href=""https://github.com/golang/go/wiki/CodeReviewComments#receiver-type"" rel=""noreferrer"">the guidance is</a> to default to pointers except in rare cases.<br>

<ul>
<li>Jeff Hodges' <a href=""https://github.com/jmhodges/copyfighter"" rel=""noreferrer"">copyfighter</a> tool automatically searches for non-tiny receivers passed by value.<br></li>
</ul></li>
</ul>

<p>Some situations where you don't need pointers:</p>

<ul>
<li><p>Code review guidelines suggest passing <strong>small structs</strong> like <code>type Point struct { latitude, longitude float64 }</code>, and maybe even things a bit bigger, as values, unless the function you're calling needs to be able to modify them in place.</p>

<ul>
<li>Value semantics avoid aliasing situations where an assignment over here changes a value over there by surprise.</li>
<li>It's not Go-y to sacrifice clean semantics for a little speed, and sometimes passing small structs by value is actually more efficient, because it avoids <a href=""https://en.wikipedia.org/wiki/Locality_of_reference"" rel=""noreferrer"">cache misses</a> or heap allocations. </li>
<li>So, Go Wiki's <a href=""https://github.com/golang/go/wiki/CodeReviewComments#pass-values"" rel=""noreferrer"">code review comments</a> page suggests passing by value when structs are small and likely to stay that way.</li>
<li>If the ""large"" cutoff seems vague, it is; arguably many structs are in a range where either a pointer or a value is OK. As a lower bound, the code review comments suggest slices (three machine words) are reasonable to use as value receivers. As something nearer an upper bound, <code>bytes.Replace</code> takes 10 words' worth of args (three slices and an <code>int</code>).<br></li>
</ul></li>
<li><p>For <strong>slices</strong>, you don't need to pass a pointer to change elements of the array. <code>io.Reader.Read(p []byte)</code> changes the bytes of <code>p</code>, for instance. It's arguably a special case of ""treat little structs like values,"" since internally you're passing around a little structure called a <em>slice header</em> (see <a href=""http://research.swtch.com/godata"" rel=""noreferrer"">Russ Cox (rsc)'s explanation</a>). Similarly, you don't need a pointer to <strong>modify a map or communicate on a channel</strong>.</p></li>
<li><p>For <strong>slices you'll reslice</strong> (change the start/length/capacity of), built-in functions like <code>append</code> accept a slice value and return a new one. I'd imitate that; it avoids aliasing, returning a new slice helps call attention to the fact that a new array might be allocated, and it's familiar to callers. </p>

<ul>
<li>It's not always practical follow that pattern. Some tools like <a href=""https://cloud.google.com/appengine/docs/go/datastore/reference#Get"" rel=""noreferrer"">database interfaces</a> or <a href=""http://golang.org/pkg/encoding/json/"" rel=""noreferrer"">serializers</a> need to append to a slice whose type isn't known at compile time. They sometimes accept a pointer to a slice in an <code>interface{}</code> parameter.</li>
</ul></li>
<li><p><strong>Maps, channels, strings, and function and interface values</strong>, like slices, are internally references or structures that contain references already, so if you're just trying to avoid getting the underlying data copied, you don't need to pass pointers to them. (rsc <a href=""http://research.swtch.com/interfaces"" rel=""noreferrer"">wrote a separate post on how interface values are stored</a>).</p>

<ul>
<li>You still may need to pass pointers in the rarer case that you want to <em>modify</em> the caller's struct: <a href=""http://golang.org/pkg/flag/#StringVar"" rel=""noreferrer""><code>flag.StringVar</code></a> takes a <code>*string</code> for that reason, for example.</li>
</ul></li>
</ul>

<p>Where you use pointers:</p>

<ul>
<li><p>Consider whether your function should be a method on whichever struct you need a pointer to. People expect a lot of methods on <code>x</code> to modify <code>x</code>, so making the modified struct the receiver may help to minimize surprise. There are <a href=""https://code.google.com/p/go-wiki/wiki/CodeReviewComments#Receiver_Type"" rel=""noreferrer"">guidelines</a> on when receivers should be pointers.</p></li>
<li><p>Functions that have effects on their non-receiver params should make that clear in the godoc, or better yet, the godoc and the name (like <code>reader.WriteTo(writer)</code>).</p></li>
<li><p>You mention accepting a pointer to avoid allocations by allowing reuse; changing APIs for the sake of memory reuse is an optimization I'd delay until it's clear the allocations have a nontrivial cost, and then I'd look for a way that doesn't force the trickier API on all users:</p>

<ol>
<li>For avoiding allocations, Go's <a href=""http://en.wikipedia.org/wiki/Escape_analysis"" rel=""noreferrer"">escape analysis</a> is your friend. You can sometimes help it avoid heap allocations by making types that can be initialized with a trivial constructor, a plain literal, or a useful zero value like <a href=""http://golang.org/pkg/bytes/#Buffer"" rel=""noreferrer""><code>bytes.Buffer</code></a>.</li>
<li>Consider a <code>Reset()</code> method to put an object back in a blank state, like some stdlib types offer. Users who don't care or can't save an allocation don't have to call it.</li>
<li>Consider writing modify-in-place methods and create-from-scratch functions as matching pairs, for convenience: <code>existingUser.LoadFromJSON(json []byte) error</code> could be wrapped by <code>NewUserFromJSON(json []byte) (*User, error)</code>. Again, it pushes the choice between laziness and pinching allocations to the individual caller.</li>
<li>Callers seeking to recycle memory can let <a href=""http://tip.golang.org/pkg/sync/#Pool"" rel=""noreferrer""><code>sync.Pool</code></a> handle some details. If a particular allocation creates a lot of memory pressure, you're confident you know when the alloc is no longer used, and you don't have a better optimization available, <code>sync.Pool</code> can help. (CloudFlare published <a href=""http://blog.cloudflare.com/recycling-memory-buffers-in-go"" rel=""noreferrer"">a useful (pre-<code>sync.Pool</code>) blog post</a> about recycling.)</li>
<li>Curiously, for complicated constructors, <code>new(Foo).Reset()</code> can sometimes avoid an allocation when <code>NewFoo()</code> would not. Not idiomatic; careful trying that one at home.</li>
</ol></li>
</ul>

<p>Finally, on whether your slices should be of pointers: slices of values can be useful, and save you allocations and cache misses. There can be blockers:</p>

<ul>
<li><strong>The API to create your items</strong> might force pointers on you, e.g. you have to call <code>NewFoo() *Foo</code> rather than let Go initialize with the <a href=""http://golang.org/ref/spec#The_zero_value"" rel=""noreferrer"">zero value</a>.</li>
<li><strong>The desired lifetimes of the items</strong> might not all be the same. The whole slice is freed at once; if 99% of the items are no longer useful but you have pointers to the other 1%, all of the array remains allocated.</li>
<li><strong>Moving items around</strong> might cause you problems. Notably, <code>append</code> copies items when it <a href=""https://blog.golang.org/slices"" rel=""noreferrer"">grows the underlying array</a>. Pointers you got before the <code>append</code> point to the wrong place after, copying can be slower for huge structs, and for e.g. <code>sync.Mutex</code> copying isn't allowed. Insert/delete in the middle and sorting similarly move items around.</li>
</ul>

<p>Broadly, value slices can make sense if either you get all of your items in place up front and don't move them (e.g., no more <code>append</code>s after initial setup), or if you do keep moving them around but you're sure that's OK (no/careful use of pointers to items, items are small enough to copy efficiently, etc.). Sometimes you have to think about or measure the specifics of your situation, but that's a rough guide.</p>
","23551970"
"Terminating a Process Started with os/exec in Golang","25710","","<p>Is there a way to terminate a process started with os.exec in Golang? For example (from <a href=""http://golang.org/pkg/os/exec/#example_Cmd_Start"">http://golang.org/pkg/os/exec/#example_Cmd_Start</a>), </p>

<pre><code>cmd := exec.Command(""sleep"", ""5"")
err := cmd.Start()
if err != nil {
    log.Fatal(err)
}
log.Printf(""Waiting for command to finish..."")
err = cmd.Wait()
log.Printf(""Command finished with error: %v"", err)
</code></pre>

<p>Is there a way to terminate that process ahead of time, perhaps after 3 seconds?</p>

<p>Thanks in advance</p>
","<p>After starting the command:</p>

<pre><code>done := make(chan error, 1)
go func() {
    done &lt;- cmd.Wait()
}()
select {
case &lt;-time.After(3 * time.Second):
    if err := cmd.Process.Kill(); err != nil {
        log.Fatal(""failed to kill: "", err)
    }
    log.Println(""process killed as timeout reached"")
case err := &lt;-done:
    if err != nil {
        log.Printf(""process done with error = %v"", err)
    } else {
        log.Print(""process done gracefully without error"")
    }
}
</code></pre>

<p>Either: </p>

<ol>
<li>The process ends and its error (if any) is received through <code>done</code> </li>
<li>3 seconds have passed and the program is killed.</li>
</ol>
","11886829"
"why golang is slower than scala?","25672","","<p>In this <a href=""http://benchmarksgame.alioth.debian.org/u64/compare.php?lang=go&amp;lang2=scala"" rel=""noreferrer"">test</a>, we can see that the performance of golang is sometimes much slower than scala. In my opinion, since the code of golang is compiled directly to c/c++ compatible binary code, while the code of scala is compiled to JVM byte code, golang should have much better performance, especially in these computation-intensive algorithm the benchmark did. Is my understanding incorrect?</p>

<p><a href=""http://benchmarksgame.alioth.debian.org/u64/chartvs.php?r=eNoljskRAEEIAlPCA48ozD%2Bb1dkX1UIhzELXeGcih5BqXeksDvbs8Vgi9HFr23iGiD82SgxJqRWkKNctgkMVUfwlHXnZWDkut%2BMK1nGawoYeDLlYQ8eLG1tvF91Dd8NVGm4sBfGaYo0Pok0rWQ%3D%3D&amp;m=eNozMFFwSU1WMDIwNFYoNTNRyAMAIvoEBA%3D%3D&amp;w=eNpLz%2FcvTk7MSQQADkoDKg%3D%3D"" rel=""noreferrer"">http://benchmarksgame.alioth.debian.org/u64/chartvs.php?r=eNoljskRAEEIAlPCA48ozD%2Bb1dkX1UIhzELXeGcih5BqXeksDvbs8Vgi9HFr23iGiD82SgxJqRWkKNctgkMVUfwlHXnZWDkut%2BMK1nGawoYeDLlYQ8eLG1tvF91Dd8NVGm4sBfGaYo0Pok0rWQ%3D%3D&amp;m=eNozMFFwSU1WMDIwNFYoNTNRyAMAIvoEBA%3D%3D&amp;w=eNpLz%2FcvTk7MSQQADkoDKg%3D%3D</a></p>
","<p>Here's what I think's going on in the four benchmarks where the go solutions are the slowest compared to the scala solutions.</p>

<ol>
<li><strong>mandelbrot</strong>: the scala implementation has its internal loop unrolled one time. It may be also that the JVM can vectorise the calculation like this, which I think the go compiler doesn't yet do. This is good manual optimisation plus better JVM support for speeding arithmetic.</li>
<li><strong>regex-dna</strong>: the scala implementation isn't doing what the benchmark requires: it's asked to """"""(one pattern at a time) match-replace the pattern in the redirect file, and record the sequence length"""""" but it's just calculating the length and printing that. The go version does the match-replace so is slower.</li>
<li><strong>k-nucleotide</strong>: the scala implementation has been optimised by using bit-twiddling to pack nucleotides into a long rather than use chars. It's a good optimisation that could also be applied to the Go code.</li>
<li><strong>binary-trees</strong>: this tests gc performance by filling RAM. It's true that java gc is much faster than the go gc, but the argument for this not being the top priority for go is that usually one can avoid gc in real programs by not producing garbage in the first place.</li>
</ol>
","20880746"
"How do I reverse an array in Go?","25610","","<p><a href=""http://play.golang.org/p/W70J4GU7nA"">http://play.golang.org/p/W70J4GU7nA</a></p>

<pre><code>  s := []int{5, 2, 6, 3, 1, 4}
  sort.Reverse(sort.IntSlice(s))
  fmt.Println(s)
  // 5, 2, 6, 3, 1, 4
</code></pre>

<p>It is hard to understand what it means in func Reverse(data Interface) Interface .</p>

<p>How do I reverse an array? I do not need to sort.</p>
","<p>Normally, to sort an array of integers you wrap them in an <code>IntSlice</code>, which defines the methods <code>Len</code>, <code>Less</code>, and <code>Swap</code>. These methods are in turn used by <code>sort.Sort</code>. What <code>sort.Reverse</code> does is that it takes an existing type that defines <code>Len</code>, <code>Less</code>, and <code>Swap</code>, but it replaces the <code>Less</code> method with a new one that is always the inverse of the underlying <code>Less</code>:</p>

<pre><code>type reverse struct {
    // This embedded Interface permits Reverse to use the methods of
    // another Interface implementation.
    Interface
}

// Less returns the opposite of the embedded implementation's Less method.
func (r reverse) Less(i, j int) bool {
    return r.Interface.Less(j, i)
}

// Reverse returns the reverse order for data.
func Reverse(data Interface) Interface {
    return &amp;reverse{data}
}
</code></pre>

<p>So when you write <code>sort.Reverse(sort.IntSlice(s))</code>, whats happening is that you're getting this new, 'modified' <code>IntSlice</code> that has it's <code>Less</code> method replaced. So if you call <code>sort.Sort</code> on it, which calls <code>Less</code>, it will get sorted in decreasing order.</p>
","19239832"
"Embedding instead of inheritance in Go","25559","","<p>What is your opinion of this design decision? What advantages does it have and what disadvantages?</p>

<p>Links:</p>

<ul>
<li><a href=""http://golang.org/doc/effective_go.html#embedding"" rel=""noreferrer"">Embedding description</a></li>
</ul>
","<p>In a comment, you wondered if the embedding idea was enough to ""replace inheritance completely"".  I would say the answer to that question is ""yes"".  A few years ago I played very briefly with a Tcl OO system called <a href=""http://www.wjduquette.com/snit/snitfaq.html#how_is_snit_different_from_other_oo_frameworks?"" rel=""noreferrer"">Snit</a>, which used composition and delegation to the exclusion of inheritance.  Snit is still vastly different from Go's approach, but in that one respect they have some common philosophical ground.  It's a mechanism for joining together pieces of functionality and responsibility, not a hierarchy for the classes.</p>

<p>As others have stated, it's really about what kind of programming practices the language designers want to support.  All such choices come with their own pros and cons; I don't think ""best practices"" is a phrase that necessarily applies here.  We will probably see someone develop an inheritance layer for Go eventually.  </p>

<p>(For any readers familiar with Tcl, I felt Snit to be a slightly closer match to the ""feel"" of the language than <code>[incr Tcl]</code> was.  Tcl is all about the delegation, at least to my way of thinking.)</p>
","1761393"
"authenticated http client requests from golang","25489","","<p>I have the following code:</p>

<pre><code>client := &amp;http.Client{}

/* Authenticate */
req, err := http.NewRequest(""GET"", ""http://164.99.113.32/Authenticate"", nil)
req.SetBasicAuth(""&lt;username&gt;"",""&lt;password&gt;"")
resp, err := client.Do(req)
if err != nil {
    fmt.Printf(""Error : %s"", err)
}

/* Get Details */
req.URL, _ = url.Parse(""http://164.99.113.32/Details"")
resp, err = client.Do(req)
if err != nil {
    fmt.Printf(""Error : %s"", err)
}
</code></pre>

<p>Now, the second http call is failing with a 401 access-denied error. A different REST client (a firefox plugin) correctly gets the details from the server, so I know that nothing is wrong on the server side. Do I need to pass some kind of session string or something that we got in the previous request ?</p>
","<p>Okay. I have resolved this. I just needed to create a cookie jar.</p>

<p>I am surprised that this is not handled by default by the golang http
req/client class.</p>

<p>The code that I had to use was:</p>

<pre><code>type myjar struct {
    jar map[string] []*http.Cookie
}

func (p* myjar) SetCookies(u *url.URL, cookies []*http.Cookie) {
    fmt.Printf(""The URL is : %s\n"", u.String())
    fmt.Printf(""The cookie being set is : %s\n"", cookies)
    p.jar [u.Host] = cookies
}

func (p *myjar) Cookies(u *url.URL) []*http.Cookie {
    fmt.Printf(""The URL is : %s\n"", u.String())
    fmt.Printf(""Cookie being returned is : %s\n"", p.jar[u.Host])
    return p.jar[u.Host]
}
</code></pre>

<p>and then in main:</p>

<pre><code>    jar := &amp;myjar{}
    jar.jar = make(map[string] []*http.Cookie)
    client.Jar = jar
</code></pre>

<p>Works.</p>
","11363609"
"How to set GOPATH in Mac OS X 10.10","25322","","<p>I installed Go 1.4 in Mac OS X. Previously I had Go 1.0. I set the GOROOT and PATH as follows,</p>

<pre><code>Dineshs-MacBook-Air:go-cassandra Dany$ which go
/usr/local/go/bin/go
Dineshs-MacBook-Air:go-cassandra Dany$ export GOROOT=/usr/local/go/bin/go
Dineshs-MacBook-Air:go-cassandra Dany$ export PATH=$PATH:$GOROOT/bin 
</code></pre>

<p>Go is installed in '/usr/local/go/bin/go'. And I set the GOPATH as my project src directory. I am able to run go code inside my directory. But when I try to install gocql I am getting error.</p>

<pre><code>Dineshs-MacBook-Air:go-cassandra Dany$ sudo go get github.com/gocql/gocql
package github.com/gocql/gocql: cannot download, $GOPATH not set. For more details see: go help gopath
</code></pre>

<p>Could anyone help me on this? Thank you</p>

<p><strong>EDIT 1:</strong> @VonC I tried the other option as well. I changed the GOROOT to the directory where go is installed. But it didn't help. And I changed the GOPATH.</p>

<pre><code>Dineshs-MacBook-Air:go-cassandra Dany$ export GOROOT=/usr/local/go
Dineshs-MacBook-Air:go-cassandra Dany$ export PATH=$PATH:$GOROOT/bin
Dineshs-MacBook-Air:go-cassandra Dany$ export GOPATH=/Users/Dany/Documents/FALL-2013-COURSES/Imp_Data_structures/workspace/go-cassandra
Dineshs-MacBook-Air:go-cassandra Dany$ sudo go get github.com/gocql/gocql
Password:
package github.com/gocql/gocql: cannot download, $GOPATH not set. For more details see: go help gopath
Dineshs-MacBook-Air:go-cassandra Dany$ echo $GOPATH
/Users/Dany/Documents/FALL-2013-COURSES/Imp_Data_structures/workspace/go-cassandra
Dineshs-MacBook-Air:go-cassandra Dany$ ls
bin pkg src
Dineshs-MacBook-Air:go-cassandra Dany$
</code></pre>
","<p>Notes:</p>

<p><code>GOROOT</code> should reference a folder (where go is installed), not the <code>go</code> executable itself</p>

<pre><code>export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin 
</code></pre>

<p>As <a href=""https://stackoverflow.com/users/55504/dave-c"">Dave</a> mentions in the comments, you should not have to set <code>GOROOT</code> at all in your case.<br>
See the article <a href=""http://dave.cheney.net/2013/06/14/you-dont-need-to-set-goroot-really"" rel=""noreferrer"">You don’t need to set <code>GOROOT</code>, really</a>.</p>

<p><code>GOPATH</code> should reference a folder under which you will find <code>src</code>, <code>pkg</code> and <code>bin</code>. (it should not reference directly the <code>src</code> folder):<br>
See ""<a href=""https://golang.org/doc/code.html#Workspaces"" rel=""noreferrer"">How to Write Go Code - Workspace</a>""</p>

<p>Regarding the <code>GOPATH</code>:</p>

<ul>
<li>try and set it in your <code>~/.bashrc</code> (using <code>export</code>).</li>
<li>check that your current shell is a bash (and not another one like <code>fish</code>)</li>
<li>check the output of <code>go env</code>.</li>
</ul>

<p>Don't do a <code>sudo go get</code>, as the environment variable used for <code>sudo</code> (<code>root</code>) wouldn't be the same as the current user:</p>

<pre><code>go get github.com/gocql/gocql
</code></pre>

<p>(or <a href=""https://stackoverflow.com/a/8633575/6309"">you would need to do a <code>sudo -E bash -c 'go get github.com/gocql/gocql'</code></a>, but I suspect you don't need <code>root</code> here) </p>

<p>See <a href=""https://help.ubuntu.com/community/EnvironmentVariables#sudo_caveat"" rel=""noreferrer"">sudo caveat</a>:</p>

<blockquote>
  <p>Any variables added to these locations will not be reflected when invoking them with a <code>sudo</code> command, as <code>sudo</code> has a default policy of resetting the Environment and setting a secure path (this behavior is defined in <code>/etc/sudoers</code>)</p>
</blockquote>
","28741724"
"What is the `zero` value for time.Time in Go?","25176","","<p>In an error condition, I tried to return <code>nil</code>, which throws the error:</p>

<pre><code>cannot use nil as type time.Time in return argument
</code></pre>

<p>What is the <code>zero</code> value for <code>time.Time</code>?</p>
","<p>Invoking an empty <code>time.Time</code> struct literal will return Go's zero date. Thus, for the following print statement:</p>

<pre><code>fmt.Println(time.Time{})
</code></pre>

<p>The output is:</p>

<pre><code>0001-01-01 00:00:00 +0000 UTC
</code></pre>

<p>For the sake of completeness, the <a href=""http://golang.org/pkg/time/#Time"">official documentation</a> explicitly states:</p>

<blockquote>
  <p>The zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.</p>
</blockquote>
","23051997"
"Setting up proxy for HTTP client","25166","","<p>I'm trying to setup the HTTP client so that it uses a proxy, however I cannot quite understand how to do it. The documentation has multiple reference to ""proxy"" but none of the functions seem to allow to define the proxy. What I need is something like this:</p>

<pre><code>client := &amp;http.Client{}
client.SetProxy(""someip:someport"") // pseudo code
resp, err := client.Get(""http://example.com"") // do request through proxy
</code></pre>

<p>Any idea how to do this in Go?</p>
","<p>lukad is correct, you could set the <code>HTTP_PROXY</code> environment variable, if you do this Go will use it by default.</p>

<p>Bash:</p>

<pre><code>export HTTP_PROXY=""http://proxyIp:proxyPort""
</code></pre>

<p>Go:</p>

<pre><code>os.Setenv(""HTTP_PROXY"", ""http://proxyIp:proxyPort"")
</code></pre>

<p>You could also construct your own http.Client that MUST use a proxy regardless of the environment's configuration:</p>

<pre><code>proxyUrl, err := url.Parse(""http://proxyIp:proxyPort"")
myClient := &amp;http.Client{Transport: &amp;http.Transport{Proxy: http.ProxyURL(proxyUrl)}}
</code></pre>

<p>This is useful if you can not depend on the environment's configuration, or do not want to modify it.</p>

<p>You could also modify the default transport used by the ""<code>net/http</code>"" package. This would affect your entire program (including the default HTTP client).</p>

<pre><code>proxyUrl, err := url.Parse(""http://proxyIp:proxyPort"")
http.DefaultTransport = &amp;http.Transport{Proxy: http.ProxyURL(proxyUrl)}
</code></pre>
","14663620"
"Golang: How to read a text file?","25104","","<p>I'm trying to read ""file.txt"" and put the contents into a variable using Golang. Here is what I've tried...</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
    ""log""
)

func main() {
    file, err := os.Open(""file.txt"")
    if err != nil {
        log.Fatal(err)
    }

    fmt.Print(file)
}
</code></pre>

<p>The file gets read successfully and the return from <em>os.Open</em> returns a type of <strong>*os.File</strong></p>
","<p>You <strong>only</strong> need the <code>io/ioutil</code> package.</p>

<p>If you just want the content as <code>string</code>, then the simple solution is to use the <code>ReadFile</code> function from the <code>io/ioutil</code> package.  This function returns a slice of <code>bytes</code> which you can easily convert to a <code>string</code>.</p>

<pre><code>package main

import (
    ""fmt""
    ""io/ioutil""
)

func main() {
    b, err := ioutil.ReadFile(""file.txt"") // just pass the file name
    if err != nil {
        fmt.Print(err)
    }

    fmt.Println(b) // print the content as 'bytes'

    str := string(b) // convert content to a 'string'

    fmt.Println(str) // print the content as a 'string'
}
</code></pre>
","38811245"
"Golang : Is conversion between different struct types possible?","25068","","<p>Let's say I have two similar types set this way :</p>

<pre><code>type type1 []struct {
    Field1 string
    Field2 int
}
type type2 []struct {
    Field1 string
    Field2 int
}
</code></pre>

<p>Is there a direct way to write values from a type1 to a type2, knowing that they have the same fields ?
(other than writing a loop that will copy all the fields from the source to the target)</p>

<p>Thanks.</p>
","<p>For your specific example, you can easily convert it <a href=""http://play.golang.org/p/aieOjbbjP_""><kbd>playground</kbd></a>:</p>

<pre><code>t1 := type1{{""A"", 1}, {""B"", 2}}
t2 := type2(t1)
fmt.Println(t2)
</code></pre>
","24613420"
"What is the difference between int and int64 in Go?","25061","","<p>I have a string containing an integer (which has been read from a file). </p>

<p>I'm trying to convert the <code>string</code> to an <code>int</code> using <code>strconv.ParseInt()</code>.  <code>ParseInt</code> requires that I provide a bitsize (bit sizes 0, 8, 16, 32, and 64 correspond to int, int8, int16, int32, and int64).</p>

<p>The integer read from the file is small (i.e. it should fit in a normal int). If I pass a bitsize of 0, however, I get a result of type <code>int64</code> (presumably because I'm running on a 64-bit OS).</p>

<p>Why is this happening? How do I just get a normal int? (If someone has a quick primer on when and why I should use the different int types, that would awesome!)</p>

<p>Edit: I can convert the int64 to a normal int using <code>int([i64_var])</code>. But I still don't understand why <code>ParseInt()</code> is giving me an int64 when I'm requesting a bitsize of 0.</p>
","<pre><code>func ParseInt(s string, base int, bitSize int) (i int64, err error)
</code></pre>

<p>ParseInt always returns <code>int64</code></p>

<p><code>bitSize</code> defines range of values. If the value corresponding to s cannot be represented by a signed integer of the given size, err.Err = ErrRange.</p>

<p><a href=""http://golang.org/pkg/strconv/#ParseInt"" rel=""noreferrer"">http://golang.org/pkg/strconv/#ParseInt</a></p>

<pre><code>type int int
</code></pre>

<p>int is a signed integer type that is at least 32 bits in size. It is a distinct type, however, and not an alias for, say, int32.</p>

<p><a href=""http://golang.org/pkg/builtin/#int"" rel=""noreferrer"">http://golang.org/pkg/builtin/#int</a></p>

<p>So <code>int</code> could be bigger than 32 bit in future or on some systems like <code>int</code> in C.</p>

<p>I guess on some systems <code>int64</code> might be faster than <code>int32</code> because that system only works with 64 bit integers.</p>

<p>Here is example of error when <code>bitSize</code> is 8</p>

<p><a href=""http://play.golang.org/p/_osjMqL6Nj"" rel=""noreferrer"">http://play.golang.org/p/_osjMqL6Nj</a></p>

<pre><code>package main

import (
    ""fmt""
    ""strconv""
)

func main() {
    i, err := strconv.ParseInt(""123456"", 10, 8)
    fmt.Println(i, err)
}
</code></pre>
","21491667"
"Declare slice or make slice?","24979","","<p>In Golang, what is the difference between <code>var s []int</code> and <code>s := make([]int, 0)</code>? </p>

<p>I find that both works, but which one is better?</p>
","<p>In addition to <a href=""https://stackoverflow.com/users/121687/fabriziom"">fabriziom</a>'s <a href=""https://stackoverflow.com/a/25543590/6309"">answer</a>, you can see more examples at ""<a href=""http://blog.golang.org/go-slices-usage-and-internals"" rel=""noreferrer"">Go Slices: usage and internals</a>"", where a use for <code>[]int</code> is mentioned:</p>

<blockquote>
  <p>Since the zero value of a slice (<code>nil</code>) acts like a <strong>zero-length slice</strong>, you can declare a slice variable and then append to it in a loop:</p>
</blockquote>

<pre><code>// Filter returns a new slice holding only
// the elements of s that satisfy f()
func Filter(s []int, fn func(int) bool) []int {
    var p []int // == nil
    for _, v := range s {
        if fn(v) {
            p = append(p, v)
        }
    }
    return p
}
</code></pre>

<p>It means that, to append to a slice, you don't have to allocate memory first: the <code>nil</code> slice <code>p int[]</code> is enough as a slice to add to.</p>
","25544086"
"Global variable inline assignment with combined declaration/assignment operator and another undeclared variable losing scope?","24788","","<p>This Go program will not compile. It throws the error <code>global_var declared and not used</code></p>

<pre><code>package main

import ""log""

var global_var int

func main() {

    global_var, new_string := returnTwoVars()

    log.Println(""new_string: "" + new_string)
}

func returnTwoVars() (int, string) {
    return 1234, ""woohoo""
}

func usesGlobalVar() int {
    return global_var * 2
}
</code></pre>

<p>However, when I remove the need for using the <code>:=</code> operator by declaring <code>new_string</code> in the main function and simply using <code>=</code>, the compiler doesn't have a problem with seeing that <code>global_var</code> is declared globally and being used elsewhere in the program. My intuition tells me that it should know that <code>global_var</code> is declared already</p>
","<p>The compiler doesn't complain about the <code>global_var</code> outside main. It <strong>only complains about the newly created <code>global_var</code> in main</strong> that you don't use. Which you can check by looking at the line number that <code>go</code> mentions.</p>

<p>You can try an empty program with a <code>global_var</code> outside any function that nobody references: no problems there. And of course, the <code>usesGlobalVar</code> function that <em>does</em> reference the actual global symbol has nothing to do with the one you create in <code>main</code>.</p>
","23553552"
"How to use RWMutex in Golang?","24694","","<pre><code>type Stat struct {
    counters     map[string]*int64
    countersLock sync.RWMutex
    averages     map[string]*int64
    averagesLock sync.RWMutex
}
</code></pre>

<p>It is called below</p>

<pre><code>func (s *Stat) Count(name string) {
    s.countersLock.RLock()
    counter := s.counters[name]
    s.countersLock.RUnlock()
    if counter != nil {
        atomic.AddInt64(counter, int64(1))
        return
    }
}
</code></pre>

<p>My understanding is that we first lock the receiver s (which is a type Stat) and then we add to it if the counter does exist.</p>

<p>Questions:</p>

<p>Q1: why do we need to lock it? What does <code>RWMutex</code> even mean?</p>

<p>Q2: <code>s.countersLock.RLock()</code> - does this lock up the entire receiver s or only the counters field in type Stat?</p>

<p>Q3: <code>s.countersLock.RLock()</code> - does this lock up the averages field?</p>

<p>Q4: Why should we use <code>RWMutex</code>? I thought channel was the preferred way to handle concurrency in Golang?</p>

<p>Q5: What is this <code>atomic.AddInt64</code>. Why do we need atomic in this case? </p>

<p>Q6: Why would we unlock right before we add to it?</p>
","<blockquote>
  <p>Questions:</p>
  
  <p>Q1: why do we need to lock it? What does <code>RWMutex</code> even mean?</p>
</blockquote>

<p>RW stands for Read/Write. CF doc: <a href=""http://golang.org/pkg/sync/#RWMutex"" rel=""noreferrer"">http://golang.org/pkg/sync/#RWMutex</a>.</p>

<p>We need to lock it to prevent other routines/thread to change the value while we process it.</p>

<blockquote>
  <p>Q2: <code>s.countersLock.RLock()</code> - does this lock up the entire receiver s
  or only the counters field in type Stat?</p>
</blockquote>

<p>As a mutex, the lock occurs only when you call the <code>RLock()</code> function. If any other goroutine already called the <code>WLock()</code>, then it blocks. You can call any number of <code>RLock()</code> within the same goroutine, it won't lock.</p>

<p>So it does not lock any other fields, not even <code>s.counters</code>. In your example, you lock the map lookup to find the correct counter.</p>

<blockquote>
  <p>Q3: <code>s.countersLock.RLock()</code> - does this lock up the averages field?</p>
</blockquote>

<p>No, as said in Q2, a <code>RLock</code> locks only himself.</p>

<blockquote>
  <p>Q4: Why should we use <code>RWMutex</code>? I thought channel was the preferred way
  to handle concurrency in Golang?</p>
</blockquote>

<p>Channel are very useful but sometimes it is not enough and sometimes it does not make sense.</p>

<p>Here, as you lock the map access, a mutex makes sense. With a chan, you'd have to have a buffered chan of 1, send before and receive after. Not very intuitive.</p>

<blockquote>
  <p>Q5: What is this <code>atomic.AddInt64</code>. Why do we need atomic in this case?</p>
</blockquote>

<p>This function will increment the given variable in an atomic way. In your case, you have a race condition: <code>counter</code> is a pointer and the actual variable can be destroyed after the release of the lock and before the call to <code>atomic.AddInt64</code>.
If you are not familiar with this kind of things, I'd advise you to stick with Mutexes and do all processing you need in between the lock/unlock.</p>

<blockquote>
  <p>Q6: Why would we unlock right before we add to it?
  You should not.</p>
</blockquote>

<p>I don't know what you are trying to do, but here is a (simple) example: <a href=""https://play.golang.org/p/cVFPB-05dw"" rel=""noreferrer"">https://play.golang.org/p/cVFPB-05dw</a></p>
","19149208"
"function for converting a struct to map in Golang","24664","","<p>I want to convert a struct to map in Golang. It would also be nice if I could use the JSON tags as keys in the created map (otherwise defaulting to field name).</p>

<h3>Edit TL;DR version, Jun 15, 2015</h3>

<p>If you want the fast solution for converting a structure to map, see the <a href=""https://stackoverflow.com/questions/23589564/function-for-converting-a-struct-to-map-in-golang#25117810"">accepted answer</a>, upvote it and use that package.</p>

<p>Happy coding! :)</p>

<hr>

<h3>Original Post</h3>

<p>So far I have this function, I am using the reflect package but I don't understand well how to use the package, please bear with me.</p>

<pre><code>func ConvertToMap(model interface{}) bson.M {
    ret := bson.M{}

    modelReflect := reflect.ValueOf(model)

    if modelReflect.Kind() == reflect.Ptr {
        modelReflect = modelReflect.Elem()
    }

    modelRefType := modelReflect.Type()
    fieldsCount := modelReflect.NumField()

    var fieldData interface{}

    for i := 0; i &lt; fieldsCount; i++ {
        field := modelReflect.Field(i)

        switch field.Kind() {
        case reflect.Struct:
            fallthrough
        case reflect.Ptr:
            fieldData = ConvertToMap(field.Interface())
        default:
            fieldData = field.Interface()
        }

        ret[modelRefType.Field(i).Name] = fieldData
    }

    return ret
}
</code></pre>

<p>Also I looked at JSON package source code, because it should contain my needed implementation (or parts of it) but don't understand too much.</p>
","<p>I also had need for something like this. I was using an internal package which was converting a struct to a map. I decided to open source it with other <code>struct</code> based high level functions. Have a look:</p>

<p><a href=""https://github.com/fatih/structs"">https://github.com/fatih/structs</a></p>

<p>It has support for:</p>

<ul>
<li>Convert struct to a map</li>
<li>Extract the fields of a struct to a <code>[]string</code></li>
<li>Extract the values of a struct to a <code>[]values</code></li>
<li>Check if a struct is initialized or not</li>
<li>Check if a passed interface is a struct or a pointer to struct</li>
</ul>

<p>You can see some examples here: <a href=""http://godoc.org/github.com/fatih/structs#pkg-examples"">http://godoc.org/github.com/fatih/structs#pkg-examples</a> 
For example converting a struct to a map is a simple:</p>

<pre><code>type Server struct {
    Name    string
    ID      int32
    Enabled bool
}

s := &amp;Server{
    Name:    ""gopher"",
    ID:      123456,
    Enabled: true,
}

// =&gt; {""Name"":""gopher"", ""ID"":123456, ""Enabled"":true}
m := structs.Map(s)
</code></pre>

<p>The <code>structs</code> package has support for anonymous (embedded) fields and nested structs. The package provides to filter certain fields via field tags. </p>
","25117810"
"strconv.Itoa64(1234) gives undefined in golang","24610","","<p><strong>Here is the code:</strong></p>

<pre><code>package main
import (
    ""strconv""
    ""fmt""
)
func main() {
    t := strconv.Itoa64(1234)
    fmt.Println(t)
}
</code></pre>

<p><strong>Here is the error message:</strong></p>

<p>command-line-arguments
.\test.go:7: undefined: strconv.Itoa64
[Finished in 0.2s with exit code 2]</p>

<p>Thanks!</p>
","<p>This is because Itoa64 is not the name of a function in the strconv package. It looks like you really want.</p>

<pre><code>t := strconv.FormatInt(1234, 10)
</code></pre>

<p>See <a href=""http://golang.org/pkg/strconv/#FormatInt"" rel=""noreferrer"">http://golang.org/pkg/strconv/#FormatInt</a></p>
","12220039"
"Golang operator difference between := vs =","24562","","<p>In Go, what is the difference between the <code>=</code> and <code>:=</code> operator? They both seem to be for assignment? This might be obvious but I can't seem to find it in the docs.</p>
","<p>Only <code>=</code> is the assignment operator.</p>

<p><code>:=</code> is actually not an <a href=""http://golang.org/ref/spec#Operators"">operator</a> at all. It is a part of the syntax of the <a href=""http://golang.org/ref/spec#Short_variable_declarations"">Short variable declarations</a> clause.</p>
","17891285"
"How to access command-line arguments passed to a Go program?","24560","","<p>How do I access command-line arguments in Go? They're not passed as arguments to <code>main</code>.</p>

<blockquote>
  <p>A complete program, possibly created by linking multiple packages, must have one package called main, with a function</p>

<pre><code>func main() { ... }
</code></pre>
  
  <p>defined. The function main.main() takes no arguments and returns no value. </p>
</blockquote>
","<p>You can access the command-line arguments using the <a href=""http://golang.org/pkg/os/#pkg-variables"" rel=""noreferrer""><code>os.Args</code></a> variable. For example,</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
)

func main() {
    fmt.Println(len(os.Args), os.Args)
}
</code></pre>

<p>You can also use the <a href=""http://golang.org/pkg/flag/"" rel=""noreferrer"">flag package</a>, which implements command-line flag parsing.</p>
","2707480"
"How do I convert a database row into a struct, in Go?","24531","","<p>Let's say I have a struct:</p>

<pre><code>type User struct {
    Name  string
    Id    int
    Score int
}
</code></pre>

<p>And a database table with the same schema. What's the easiest way to parse a database row into a struct? I've added an answer below but I'm not sure it's the best one.</p>
","<p>Here's one way to do it - just assign all of the struct values manually in the <code>Scan</code> function.</p>

<pre><code>func getUser(name string) (*User, error) {
    var u User
    // this calls sql.Open, etc.
    db := getConnection()
    // note the below syntax only works for postgres
    err := db.QueryRow(""SELECT * FROM users WHERE name = $1"", name).Scan(&amp;u.Id, &amp;u.Name, &amp;u.Score)
    if err != nil {
        return &amp;User{}, err
    } else {
        return &amp;u, nil
    }
}
</code></pre>
","17265464"
"Go lang array and slice data types","24510","","<p>I am new to the Go language. I found myself confused with the <code>array</code> and <code>slice</code> data types.</p>

<p>From Go docs, arrays are described as follows:</p>

<blockquote>
  <p>There are major differences between the ways arrays work in Go and C. In Go,</p>
  
  <ul>
  <li>Arrays are values. Assigning one array to another copies all the elements.</li>
  <li>In particular, if you pass an array to a function, it will receive a copy of the array, not a pointer to it.</li>
  <li>The size of an array is part of its type. The types [10]int and [20]int are distinct.</li>
  </ul>
</blockquote>

<p>Functions:</p>

<blockquote>
  <p>As in all languages in the C family, everything in Go is passed by
  value. That is, a function always gets a copy of the thing being
  passed, as if there were an assignment statement assigning the value
  to the parameter. For instance, passing an int value to a function
  makes a copy of the int, and passing a pointer value makes a copy of
  the pointer, but not the data it points to.</p>
</blockquote>

<p>Why does <code>sort.Ints(arrayValue)</code> modify the passed variable when I declared it as an array, not as a slice?</p>

<p>Code</p>

<pre><code>var av = []int{1,5,2,3,7}

fmt.Println(av)
sort.Ints(av)
fmt.Println(av)
return
</code></pre>

<p>Output</p>

<pre><code>[1 5 2 3 7]
[1 2 3 5 7]
</code></pre>
","<p>See ""<a href=""http://golang.org/doc/articles/slices_usage_and_internals.html"" rel=""nofollow noreferrer"">Slices: usage and internals</a>""</p>

<pre><code>var av = []int{1,5,2,3,7}
</code></pre>

<p>That is a slice, not an array.</p>

<blockquote>
  <p>A slice literal is declared just like an array literal, except you leave out the element count.</p>
</blockquote>

<p>That explains why the sort function will modify the <em>content</em> of what is referenced by the slice.</p>

<p>As commented below by <a href=""https://stackoverflow.com/users/1236394/kirk"">Kirk</a>, <a href=""https://golang.org/pkg/sort/#Ints"" rel=""nofollow noreferrer""><code>sort.Ints</code></a>  will give you an error if you passed it an array instead of a slice.</p>

<pre><code>func Ints(a []int)
</code></pre>
","11737218"
"What kind of Garbage Collection does Go use?","24473","","<p>Go is a garbage collected language:</p>

<p><a href=""http://golang.org/doc/go_faq.html#garbage_collection"">http://golang.org/doc/go_faq.html#garbage_collection</a></p>

<p>Here it says that it's a mark-and-sweep garbage collector, but it doesn't delve into details, and a replacement is in the works... yet, this paragraph seems not to have been updated much since Go was released.</p>

<p>It's still mark-and-sweep? Is it conservative or precise? Is it generational?</p>
","<p>Plans for Go 1.4+ garbage collector:</p>

<ul>
<li>hybrid stop-the-world/concurrent collector</li>
<li>stop-the-world part limited by a 10ms deadline</li>
<li>CPU cores dedicated to running the concurrent collector</li>
<li>tri-color mark-and-sweep algorithm</li>
<li>non-generational</li>
<li>non-compacting</li>
<li>fully precise</li>
<li>incurs a small cost if the program is moving pointers around</li>
<li>lower latency, but most likely also lower throughput, than Go 1.3 GC</li>
</ul>

<p>Go 1.3 garbage collector updates on top of Go 1.1:</p>

<ul>
<li>concurrent sweep (results in smaller pause times)</li>
<li>fully precise</li>
</ul>

<p>Go 1.1 garbage collector:</p>

<ul>
<li>mark-and-sweep (parallel implementation)</li>
<li>non-generational</li>
<li>non-compacting</li>
<li>mostly precise (except stack frames)</li>
<li>stop-the-world</li>
<li>bitmap-based representation</li>
<li>zero-cost when the program is not allocating memory (that is: shuffling pointers around is as fast as in C, although in practice this runs somewhat slower than C because the Go compiler is not as advanced as C compilers such as GCC)</li>
<li>supports finalizers on objects</li>
<li>there is no support for weak references</li>
</ul>

<p>Go 1.0 garbage collector:</p>

<ul>
<li>same as Go 1.1, but instead of being mostly precise the garbage collector is conservative. The conservative GC is able to ignore objects such as []byte.</li>
</ul>

<p>Replacing the GC with a different one is controversial, for example:</p>

<ul>
<li>except for very large heaps, it is unclear whether a generational GC would be faster overall</li>
<li>package ""unsafe"" makes it hard to implement fully precise GC and compacting GC</li>
</ul>
","7824353"
"How would you define a pool of goroutines to be executed at once in Golang?","24472","","<p>TL;TR: Please just go to the last part and tell me how you would solve this problem.</p>

<p>I've begun using Golang this morning coming from Python. I want to call a closed-source executable from Go several times, with a <em>bit</em> of concurrency, with different command line arguments. My resulting code is working just well but I'd like to get your input in order to improve it. Since I'm at an early learning stage, I'll also explain my workflow.</p>

<p>For the sake of simplicity, assume here that this ""external closed-source program"" is <code>zenity</code>, a Linux command line tool that can display graphical message boxes from the command line.</p>

<h2>Calling an executable file from Go</h2>

<p>So, in Go, I would go like this:</p>

<pre><code>package main
import ""os/exec""
func main() {
    cmd := exec.Command(""zenity"", ""--info"", ""--text='Hello World'"")
    cmd.Run()
}
</code></pre>

<p>This should be working just right. Note that <code>.Run()</code> is a functional equivalent to <code>.Start()</code> followed by <code>.Wait()</code>. This is great, but if I wanted to execute this program just once, the whole programming stuff would not be worth it. So let's just do that multiple times.</p>

<h2>Calling an executable multiple times</h2>

<p>Now that I had this working, I'd like to call my program multiple times, with custom command line arguments (here just <code>i</code> for the sake of simplicity).</p>

<pre><code>package main    
import (
    ""os/exec""
    ""strconv""
)

func main() {
    NumEl := 8 // Number of times the external program is called
    for i:=0; i&lt;NumEl; i++ {
        cmd := exec.Command(""zenity"", ""--info"", ""--text='Hello from iteration n."" + strconv.Itoa(i) + ""'"")
        cmd.Run()
    }
}
</code></pre>

<p>Ok, we did it! But I still can't see the advantage of Go over Python … This piece of code is actually executed in a serial fashion. I have a multiple-core CPU and I'd like to take advantage of it. So let's add some concurrency with goroutines.</p>

<h2>Goroutines, or a way to make my program parallel</h2>

<h3>a) First attempt: just add ""go""s everywhere</h3>

<p>Let's rewrite our code to make things easier to call and reuse and add the famous <code>go</code> keyword:</p>

<pre><code>package main
import (
    ""os/exec""
    ""strconv""
)

func main() {
    NumEl := 8 
    for i:=0; i&lt;NumEl; i++ {
        go callProg(i)  // &lt;--- There!
    }
}

func callProg(i int) {
    cmd := exec.Command(""zenity"", ""--info"", ""--text='Hello from iteration n."" + strconv.Itoa(i) + ""'"")
    cmd.Run()
}
</code></pre>

<p>Nothing! What is the problem? All the goroutines are executed at once. I don't really know why zenity is not executed but AFAIK, the Go program exited before the zenity external program could even be initialized. This was confirmed by the use of <code>time.Sleep</code>: waiting for a couple of seconds was enough to let the 8 instance of zenity launch themselves. I don't know if this can be considered a bug though.</p>

<p>To make it worse, the real program I'd actually like to call takes a while to execute itself. If I execute 8 instances of this program in parallel on my 4-core CPU, it's gonna waste some time doing a lot of context switching … I don't know how plain Go goroutines behave, but <code>exec.Command</code> <strong>will</strong> launch zenity 8 times in 8 different threads. To make it even worse, I want to execute this program more than 100,000 times. Doing all of that at once in goroutines won't be efficient at all. Still, I'd like to leverage my 4-core CPU!</p>

<h3>b) Second attempt: use pools of goroutines</h3>

<p>The online resources tend to recommend the use of <code>sync.WaitGroup</code> for this kind of work. The problem with that approach is that you are basically working with batches of goroutines: if I create of WaitGroup of 4 members, the Go program will wait for <em>all</em> the 4 external programs to finish before calling a new batch of 4 programs. This is not efficient: CPU is wasted, once again.</p>

<p>Some other resources recommended the use of a buffered channel to do the work:</p>

<pre><code>package main
import (
    ""os/exec""
    ""strconv""
)

func main() {
    NumEl := 8               // Number of times the external program is called
    NumCore := 4             // Number of available cores
    c := make(chan bool, NumCore - 1) 
    for i:=0; i&lt;NumEl; i++ {
        go callProg(i, c)
        c &lt;- true            // At the NumCoreth iteration, c is blocking   
    }
}

func callProg(i int, c chan bool) {
    defer func () {&lt;- c}()
    cmd := exec.Command(""zenity"", ""--info"", ""--text='Hello from iteration n."" + strconv.Itoa(i) + ""'"")
    cmd.Run()
}
</code></pre>

<p>This seems ugly. Channels were not intended for this purpose: I'm exploiting a side-effect. I love the concept of <code>defer</code> but I hate having to declare a function (even a lambda) to pop a value out of the dummy channel that I created. Oh, and of course, using a dummy channel is, by itself, ugly.</p>

<h3>c) Third attempt: die when all the children are dead</h3>

<p>Now we are nearly finished. I have just to take into account yet another side effect: the Go program closes before all the zenity pop-ups are closed. This is because when the loop is finised (at the 8th iteration), nothing prevents the program from finishing. This time, <code>sync.WaitGroup</code> will be useful.</p>

<pre><code>package main
import (
    ""os/exec""
    ""strconv""
    ""sync""
)

func main() {
    NumEl := 8               // Number of times the external program is called
    NumCore := 4             // Number of available cores
    c := make(chan bool, NumCore - 1) 
    wg := new(sync.WaitGroup)
    wg.Add(NumEl)            // Set the number of goroutines to (0 + NumEl)
    for i:=0; i&lt;NumEl; i++ {
        go callProg(i, c, wg)
        c &lt;- true            // At the NumCoreth iteration, c is blocking   
    }
    wg.Wait() // Wait for all the children to die
    close(c)
}

func callProg(i int, c chan bool, wg *sync.WaitGroup) {
    defer func () {
        &lt;- c
        wg.Done() // Decrease the number of alive goroutines
    }()
    cmd := exec.Command(""zenity"", ""--info"", ""--text='Hello from iteration n."" + strconv.Itoa(i) + ""'"")
    cmd.Run()
}
</code></pre>

<p>Done.</p>

<h2>My questions</h2>

<ul>
<li><strong>Do you know any other proper way to limit the number of goroutines executed at once?</strong></li>
</ul>

<p>I don't mean threads; how Go manages goroutines internally is not relevant. I really mean limiting the number of goroutines launched at once: <code>exec.Command</code> creates a new thread each time it is called, so I should control the number of time it is called. </p>

<ul>
<li><strong>Does that code look fine to you?</strong></li>
<li><strong>Do you know how to avoid the use of a dummy channel in that case?</strong></li>
</ul>

<p>I can't convince myself that such dummy channels are the way to go.</p>
","<p>I would spawn 4 worker goroutines that read the tasks from a common channel. Goroutines that are faster than others (because they are scheduled differently or happen to get simple tasks) will receive more task from this channel than others. In addition to that, I would use a <a href=""http://golang.org/pkg/sync/#WaitGroup"" rel=""noreferrer"">sync.WaitGroup</a> to wait for all workers to finish. The remaining part is just the creation of the tasks. You can see an example implementation of that approach here:</p>

<pre><code>package main

import (
    ""os/exec""
    ""strconv""
    ""sync""
)

func main() {
    tasks := make(chan *exec.Cmd, 64)

    // spawn four worker goroutines
    var wg sync.WaitGroup
    for i := 0; i &lt; 4; i++ {
        wg.Add(1)
        go func() {
            for cmd := range tasks {
                cmd.Run()
            }
            wg.Done()
        }()
    }

    // generate some tasks
    for i := 0; i &lt; 10; i++ {
        tasks &lt;- exec.Command(""zenity"", ""--info"", ""--text='Hello from iteration n.""+strconv.Itoa(i)+""'"")
    }
    close(tasks)

    // wait for the workers to finish
    wg.Wait()
}
</code></pre>

<p>There are probably other possible approaches, but I think this is a very clean solution that is easy to understand.</p>
","18406762"
"go get results in 'terminal prompts disabled' error for github private repo","24414","","<p>I created the private repo examplesite/myprivaterepo using the Github UI from my browser.</p>

<p>Then I went to my go directory (on the desktop) and cloned it:</p>

<pre><code>$ cd $GOPATH
$ go get github.com/examplesite/myprivaterepo
</code></pre>

<p>So far so good. Created the file scheduler.go, added to repo, and pushed.</p>

<pre><code>$ vim scheduler.go
$ git add scheduler.go
$ git commit
$ git push
</code></pre>

<p>Everythng's OK. But when I went to a clean laptop  and tried to clone the repo, I got an error:</p>

<pre><code># Now on laptop, which doesn't yet know about the repo
$ cd $GOPATH
$ go get github.com/examplesite/myprivaterepo
# At this point it should ask for my user ID and password ,right? But it doesn't.
# Instead, this error occurs:
cd .; git clone https://github.com/examplesite/myprivaterepo /Users/tom/go/src/github.com/examplesite/myprivaterepo
Cloning into '/Users/tom/go/src/github.com/examplesite/myprivaterepo'...
fatal: could not read Username for 'https://github.com': terminal prompts disabled
package github.com/examplesite/myprivaterepo: exit status 128
</code></pre>

<p>Why is my laptop hating on my own repo and how can I get it to accept its fate? Thanks.</p>
","<p>go get disable ""terminal prompt"" by default. This can be changed by set the env of git:</p>

<pre><code>env GIT_TERMINAL_PROMPT=1 go get xxxx
</code></pre>
","38237165"
"No startswith,endswith functions in Go?","24407","","<p>Just curious to findout: why aren't there standard functions like startswith, endswith, etc as part of the standard libraries in the Go programming language?</p>
","<p>The <a href=""http://golang.org/pkg/strings"" rel=""noreferrer"">strings</a> package contains <a href=""http://golang.org/pkg/strings/#HasPrefix"" rel=""noreferrer"">HasPrefix</a> and <a href=""http://golang.org/pkg/strings/#HasSuffix"" rel=""noreferrer"">HasSuffix</a>.</p>

<pre><code>import ""strings""

startsWith := strings.HasPrefix(""prefix"", ""pre"") // true
endsWith := strings.HasSuffix(""suffix"", ""fix"") // true
</code></pre>

<p><a href=""http://play.golang.org/p/c8TQuCk-U9"" rel=""noreferrer"">play.golang.org</a></p>
","13244078"
"Webserver for Go (golang) webservices: using NGINX or not?","24216","","<p>I am writing some webservices returning JSON data, which have lots of users.</p>

<p>Would you recommend to use NGINX as a webserver or it is good enough to use the standard http server of Go?</p>
","<p>It depends.</p>

<p>Out of the box, putting nginx in front as a reverse proxy is going to give you:</p>

<ul>
<li>Access logs</li>
<li>Error logs</li>
<li>Easy SSL termination</li>
<li>SPDY support</li>
<li>gzip support</li>
<li>Easy ways to set HTTP headers for certain routes in a couple of lines</li>
<li>Very fast static asset serving (if you're serving off S3/etc. though, this isn't that relevant)</li>
</ul>

<p>The Go HTTP server is very good, but you <em>will</em> need to reinvent the wheel to do some of these things (which is fine: it's not meant to be everything to everyone).</p>

<p>I've always found it easier to put nginx in front—which is what it is good at—and let it do the ""web server"" stuff. My Go application does the application stuff, and only the bare minimum of headers/etc. that it needs to. Don't look at putting nginx in front as a ""bad"" thing.</p>
","17777630"
"When to use os.Exit() and panic() in Golang?","24140","","<p>Could someone explain the key differences between <code>os.Exit()</code> and <code>panic()</code> and how they are used in practice in Golang?</p>
","<p>First of all, whenever you have a ""how it is used in practice"" question, a good way to start is to <a href=""http://golang.org/search?q=os.Exit"">search</a> the Go source code (or any big enough Go code base, really), and the <a href=""http://golang.org/pkg/os/#Exit"">package docs</a> for answers.</p>

<p>Now, <code>os.Exit</code> and <code>panic</code> are quite different. <a href=""http://golang.org/doc/effective_go.html#panic""><code>panic</code></a> is used when the program, or its part, has reached an unrecoverable state.</p>

<blockquote>
  <p>When <code>panic</code> is called, including implicitly for run-time errors such as indexing a slice out of bounds or failing a type assertion, it immediately stops execution of the current function and begins unwinding the stack of the goroutine, running any deferred functions along the way. If that unwinding reaches the top of the goroutine's stack, the program dies.</p>
</blockquote>

<p><code>os.Exit</code> is used when you need to abort the program <em>immediately,</em> with no possibility of recovery or running a deferred clean-up statement, and also return an error code (that other programs can use to report what happened). This is useful in tests, when you already know that after this one test fails, the other will fail as well, so you might as well just exit now. This can also be used when your program has done everything it needed to do, and now just needs to exit, i.e. after printing a help message.</p>

<p>Most of the time you won't use <code>panic</code> (you should return an <code>error</code> instead), and you almost never need <code>os.Exit</code> outside of some cases in tests and for quick program termination.</p>
","28473339"
"How do I parse an inner field in a nested JSON object in Golang?","24105","","<p>I have a JSON object similar to this one:</p>

<pre><code>{
  ""name"": ""Cain"",
  ""parents"": {
    ""mother"" : ""Eve"",
    ""father"" : ""Adam""
  }
}
</code></pre>

<p>Now I want to parse ""name"" and ""mother"" into this struct:</p>

<pre><code>struct {
  Name String
  Mother String `json:""???""`
}
</code></pre>

<p>I want to specify the JSON field name with the <code>json:...</code> struct tag, however I don't know what to use as tag, because it is not the top object I am interested in. I found nothing about this in the <a href=""http://blog.golang.org/2011/01/json-and-go.html""><code>encoding/json</code></a> package docs nor in the popular blog post <a href=""http://golang.org/pkg/encoding/json/"">JSON and Go</a>. I also tested <code>mother</code>, <code>parents/mother</code> and <code>parents.mother</code>.</p>
","<p>Unfortunately, unlike <code>encoding/xml</code>, the <code>json</code> package doesn't provide a way to access nested values. You'll want to either create a separate Parents struct or assign the type to be <code>map[string]string</code>. For example:</p>

<pre><code>type Person struct {
    Name string
    Parents map[string]string
}
</code></pre>

<p>You could then provide a getter for mother as so:</p>

<pre><code>func (p *Person) Mother() string {
    return p.Parents[""mother""]
}
</code></pre>

<p>This may or may not play into your current codebase and if refactoring the <code>Mother</code> field to a method call is not on the menu, then you may want to create a separate method for decoding and conforming to your current struct.</p>
","13594496"
"Passing an array as an argument in golang","24101","","<p>Why does this not work?</p>

<pre><code>package main

import ""fmt""

type name struct {
    X string
}

func main() {
    var a [3]name
    a[0] = name{""Abbed""}
    a[1] = name{""Ahmad""}
    a[2] = name{""Ghassan""}

    nameReader(a)
} 

func nameReader(array []name) {
    for i := 0; i &lt; len(array); i++ {
        fmt.Println(array[i].X)
    }
}
</code></pre>

<p>Error:</p>

<pre><code>.\structtest.go:15: cannot use a (type [3]name) as type []name in function argument
</code></pre>
","<p>You have defined your function to accept a slice as an argument, while you're trying to pass an array in the call to that function.  There are two ways you could address this:</p>

<ol>
<li><p>Create a slice out of the array when calling the function.  Changing the call like this should be enough:</p>

<pre><code>nameReader(a[:])
</code></pre></li>
<li><p>Alter the function signature to take an array instead of a slice.  For instance:</p>

<pre><code>func nameReader(array [3]name) {
    ...
}
</code></pre>

<p>Downsides of this solution are that the function can now only accept an array of length 3, and a copy of the array will be made when calling it.</p></li>
</ol>
","21719898"
"Golang - What is channel buffer size?","24063","","<p>I'm trying to create an asynchronous channel and I've been looking at <a href=""http://golang.org/ref/spec#Making_slices_maps_and_channels"" rel=""noreferrer"">http://golang.org/ref/spec#Making_slices_maps_and_channels</a>. </p>

<pre><code>c := make(chan int, 10)         // channel with a buffer size of 10
</code></pre>

<p>What does it mean that the buffer size is 10? What specifically does the buffer size represent/limit?</p>
","<p>The buffer size is the number of elements that can be sent to the channel without the send blocking. By default, a channel has a buffer size of 0 (you get this with <code>make(chan int)</code>). This means that every single send will block until another goroutine receives from the channel. A channel of buffer size 1 can hold 1 element until sending blocks, so you'd get</p>

<pre><code>c := make(chan int, 1)
c &lt;- 1 // doesn't block
c &lt;- 2 // blocks until another goroutine receives from the channel
</code></pre>
","11943866"
"How do I compare strings in GoLang?","24048","","<p>I am unable to produce a 'true' result when it comes to Go string comparison. I wrote the following to explain the issue and attached a screenshot of the output</p>

<pre><code>// string comparison in Go
package main
import ""fmt""
import ""bufio""
import ""os""

func main() {
    var isLetterA bool 

    fmt.Println(""Enter the letter a"")
    reader := bufio.NewReader(os.Stdin)
    input, _ := reader.ReadString('\n')

    if(input == ""a"") {
        isLetterA = true
    } else {
        isLetterA = false 
    }

    fmt.Println(""You entered"",input)
    fmt.Println(""Is it the letter a?"",isLetterA)

}
</code></pre>

<p><a href=""https://i.stack.imgur.com/eiGMI.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/eiGMI.png"" alt=""example""></a></p>
","<p><code>==</code> is the correct operator to compare strings in Go. However, the strings that you read from STDIN with <code>reader.ReadString</code> do not contain <code>""a""</code>, but <code>""a\n""</code> (if you look closely, you'll see the extra line break in your example output).</p>

<p>You can use the <a href=""https://golang.org/pkg/strings/#TrimRight""><code>strings.TrimRight</code></a> function to remove trailing whitespaces from your input:</p>

<pre><code>if strings.TrimRight(input, ""\n"") == ""a"" {
    // ...
}
</code></pre>
","34383753"
"How to clear a map in Go?","24017","","<p>I'm looking for something like the c++ function <code>.clear()</code>  for the primitive type <code>map</code>.</p>

<p>Or should I just create a new map instead?</p>

<p>Update: Thank you for your answers. By looking at the answers I just realized that sometimes creating a new map may lead to some inconsistency that we don't want. Consider the following example:</p>

<pre><code>var a map[string]string
var b map[string]string

func main() {
    a = make(map[string]string)
    b=a
    a[""hello""]=""world""
    a = nil
    fmt.Println(b[""hello""])
}
</code></pre>

<p>I mean, this is still different from the <code>.clear()</code> function in c++, which will clear the content in the object.</p>
","<p>You should probably just create a new map. There's no real reason to bother trying to clear an existing one, unless the same map is being referred to by multiple pieces of code and one piece explicitly needs to clear out the values such that this change is visible to the other pieces of code.</p>

<p>So yeah, you should probably just say</p>

<pre><code>mymap = make(map[keytype]valtype)
</code></pre>

<hr>

<p>If you do really need to clear the existing map for whatever reason, this is simple enough:</p>

<pre><code>for k := range m {
    delete(m, k)
}
</code></pre>
","13812401"
"Golang: no new variables on left side of :=","24006","","<p>What's happening here? </p>

<pre><code>package main

import ""fmt""

func main() {

    myArray  :=[...]int{12,14,26}  ;     
    fmt.Println(myArray)

    myArray  :=[...]int{11,12,14} //error pointing on this line 

    fmt.Println(myArray) ;

}
</code></pre>

<p>It throws an error that says </p>

<pre><code>no new variables on left side of :=
</code></pre>

<p>What I was doing was re-assigning values to an already declared variable.</p>
","<p>Remove the <code>colon :</code> from the second statement as you are assigning a new value to existing variable.</p>

<pre><code>myArray = [...]int{11,12,14}
</code></pre>

<p><code>colon :</code> is used when you perform the short declaration and assignment for the first time as you are doing in your first statement i.e. <code>myArray  :=[...]int{12,14,26}</code>.</p>
","13329186"
"Golang type assertion","23931","","<p>I have created a type Role based off string, and I am now trying to get it to work with the database driver by implementing the Valuer and Scanner interfaces</p>

<pre><code>type Role string

func (r *Role) Scan(value interface{}) error {
    r = (*Role)(value.(string))

    return nil
}

func (r *Role) Value(value driver.Value, err error) {
    if err != nil {
        value = string(r)
    }
}
</code></pre>

<p>I keep getting the error:</p>

<pre><code>The Go code app/entities/user.go does not compile: cannot convert value.(string) (type string) to type *Role
</code></pre>

<p>What am I doing wrong here?</p>
","<p>Here is working code for the first function:</p>

<pre><code>func (r *Role) Scan(value interface{}) error {
    *r = Role(value.(string))
    return nil
}
</code></pre>

<p>Although you may wish to use <code>s, ok := value.(string)</code> and return an error for <code>!ok</code> instead of panic-ing.</p>

<p>The signature for the a <code>driver.Valuer</code> is not what you gave but:</p>

<pre><code>func (r Role) Value() (driver.Value, error) {
    return string(r), nil
}
</code></pre>

<p>Note this doesn't handle or produce NULL values.</p>

<p><a href=""https://play.golang.org/p/XgcYiSHv4b"" rel=""noreferrer""><kbd>Playground</kbd></a></p>
","20935509"
"How do I get my Golang web server to run in the background?","23895","","<p>I have recently completed the <em>Wiki web development tutorial</em> (<a href=""http://golang.org/doc/articles/wiki/"" rel=""nofollow noreferrer"">http://golang.org/doc/articles/wiki/</a>). I had tons of fun and I would like to experiment more with the net/http package.</p>

<p>However, I noticed that when I run the wiki from a console, the wiki takes over the console. If I close the console terminal or stop the process with <kbd>CTRL+Z</kbd> then the server stops.</p>

<p>How can I get the server to run in the background? I think the term for that is running in a daemon.</p>

<p>I'm running this on Ubuntu 12.04. Thanks for any help.</p>
","<h1>Simple / Usable things first</h1>

<p>If you want a start script without much effort, you could use the <code>upstart</code> service. See the corresponding manual page and <code>/etc/init/*.conf</code> for examples. After creating such a process
you can start your server by calling</p>

<pre><code>service myserver start
</code></pre>

<p>If you want more features, like specific limitations or permission management, you could try <code>xinetd</code>.</p>

<h1>Using the shell</h1>

<p>You could start your process like this:</p>

<pre><code>nohup ./myexecutable &amp;
</code></pre>

<p>The <code>&amp;</code> tells the shell to start the command in the background, keeping it in the job list.
On some shells, the job is killed if the parent shell exits using the HANGUP signal. 
To prevent this, you can launch your command using the <code>nohup</code> command, which discards the HANGUP signal.</p>

<p>However, this does not work, if the called process reconnects the HANGUP signal.</p>

<p>To be really sure, you need to remove the process from the shell's joblist. 
For two well known shells this can be achieved as follows:</p>

<h3>bash:</h3>

<pre><code>./myexecutable &amp;
disown &lt;pid&gt;
</code></pre>

<h3>zsh:</h3>

<pre><code>./myexecutable &amp;!
</code></pre>

<h2>Killing your background job</h2>

<p>Normally, the shell prints the PID of the process, which then can be killed using the <code>kill</code> command, to stop the server. If your shell does not print the PID, you can get it using</p>

<pre><code>echo $!
</code></pre>

<p>directly after execution. This prints the PID of the forked process.</p>
","12486810"
"Go Inter-Process Communication","23884","","<p>I'm writing a load balanced server system in Go.</p>

<p>The load balancing server will communicate with several application servers and process requests. These servers can both, be running on the same machine or on the network.</p>

<p>I already figured the networking out but now I need to find an optimal way for the load-balancer to communicate with a local application server. Using <code>localhost</code>-networking seems far from optimal.</p>

<p>I'm trying to share memory via the <code>shmget</code> and <code>shmat</code> system-calls but haven't found any working examples and the <code>syscall</code> package is also completely undocumented.</p>

<p>Can someone provide me with an example of how to use these calls or a realistic alternative that works on Go for doing IPC?</p>
","<p>Go has a built-in RPC system (<a href=""http://golang.org/pkg/rpc/"" rel=""noreferrer"">http://golang.org/pkg/rpc/</a>) for easy communication between Go processes.</p>

<p>Another option is to send gob-encoded data (<a href=""http://blog.golang.org/2011/03/gobs-of-data.html"" rel=""noreferrer"">http://blog.golang.org/2011/03/gobs-of-data.html</a>) via network connection.</p>

<p>You shouldn't dismiss local networking without benchmarking. For example Chrome uses named pipes for IPC and they transfer a lot of data (e.g. rendered bitmaps) between processes:</p>

<blockquote>
  <p>Our main inter-process communication primitive is the named pipe. On
  Linux &amp; OS X, we use a socketpair()</p>
</blockquote>

<p>-- <a href=""http://www.chromium.org/developers/design-documents/inter-process-communication"" rel=""noreferrer"">http://www.chromium.org/developers/design-documents/inter-process-communication</a> </p>

<p>If named pipes are good enough for that, they are probably good enough for your use case. Plus, if you write things well, you could start using named pipes (because it's easy) and then switch to shared memory if you find performance of named pipes not good enough (shared memory is not easy regardless of the language).</p>
","9371131"
"How to wait for all goroutines to finish without using time.Sleep?","23758","","<p>This code selects all xml files in the same folder, as the invoked executable and asynchronously applies processing to each result in the callback method (in the example below, just the name of the file is printed out).</p>

<p>How do I avoid using the sleep method to keep the main method from exiting? I have problems wrapping my head around channels (I assume that's what it takes, to synchronize the results) so any help is appreciated!</p>

<pre><code>package main

import (
    ""fmt""
    ""io/ioutil""
    ""path""
    ""path/filepath""
    ""os""
    ""runtime""
    ""time""
)

func eachFile(extension string, callback func(file string)) {
    exeDir := filepath.Dir(os.Args[0])
    files, _ := ioutil.ReadDir(exeDir)
    for _, f := range files {
            fileName := f.Name()
            if extension == path.Ext(fileName) {
                go callback(fileName)
            }
    }
}


func main() {
    maxProcs := runtime.NumCPU()
    runtime.GOMAXPROCS(maxProcs)

    eachFile("".xml"", func(fileName string) {
                // Custom logic goes in here
                fmt.Println(fileName)
            })

    // This is what i want to get rid of
    time.Sleep(100 * time.Millisecond)
}
</code></pre>
","<p>You can use <a href=""http://golang.org/pkg/sync/#WaitGroup"" rel=""noreferrer"">sync.WaitGroup</a>. Quoting the linked example:</p>

<pre><code>package main

import (
        ""net/http""
        ""sync""
)

func main() {
        var wg sync.WaitGroup
        var urls = []string{
                ""http://www.golang.org/"",
                ""http://www.google.com/"",
                ""http://www.somestupidname.com/"",
        }
        for _, url := range urls {
                // Increment the WaitGroup counter.
                wg.Add(1)
                // Launch a goroutine to fetch the URL.
                go func(url string) {
                        // Decrement the counter when the goroutine completes.
                        defer wg.Done()
                        // Fetch the URL.
                        http.Get(url)
                }(url)
        }
        // Wait for all HTTP fetches to complete.
        wg.Wait()
}
</code></pre>
","18207832"
"How to append text to a file in golang?","23742","","<p>I find os.Open() return a O_RDONLY file and os.Create() return a O_RDWR but can't find a method return a APPEND file pointer.</p>

<p>Any help ?</p>
","<p>The <a href=""http://golang.org/pkg/os/#OpenFile"">OpenFile</a> takes a flags argument that you can use:</p>

<pre><code> os.OpenFile(""foo.txt"", os.O_RDWR|os.O_APPEND, 0660);
</code></pre>

<p>Used with O_CREATE , OpenFile can also serve the same purpose as os.Create()</p>
","13513490"
"panic: runtime error: index out of range in Go","23560","","<p>I have the following function that takes a command from terminal and prints something based on input. It seems simple enough, if the user types 'add' the system prints a line, if the user types nothing, it prints something else. </p>

<p>Whenever the user types add, it works. If the user doesn't type anything it throws </p>

<p>panic: runtime error: index out of range in GoLang</p>

<p>Why is this? </p>

<pre><code>  func bootstrapCmd(c *commander.Command, inp []string) error {


     if inp[0] == ""add"" {
                  fmt.Println(""you typed add"")
              } else if inp[0] == """" {
                  fmt.Println(""you didn't type add"")
              }


          return nil

    }
</code></pre>
","<p>If the user does not provide any input, the <code>inp</code> array is empty. This means that even the index <code>0</code> is out of range, i.e. <code>inp[0]</code> can't be accessed.</p>

<p>You can check the length of <code>inp</code> with <code>len(inp)</code> before checking <code>inp[0] == ""add""</code>. Something like this might do:</p>

<pre><code>if len(inp) == 0 {
    fmt.Println(""you didn't type add"")
} else if inp[0] == ""add"" {
    fmt.Println(""you typed add"")
}
</code></pre>
","26126255"
"Why can I type alias functions and use them without casting?","23543","","<p>In Go, if you define a new type e.g.:</p>

<pre><code>type MyInt int
</code></pre>

<p>You can't then pass a <code>MyInt</code> to a function expecting an int, or vice versa:</p>

<pre><code>func test(i MyInt) {
    //do something with i
}

func main() {
    anInt := 0
    test(anInt) //doesn't work, int is not of type MyInt
}
</code></pre>

<p>Fine. But why is it then that the same does not apply to functions? e.g.:</p>

<pre><code>type MyFunc func(i int)
func (m MyFunc) Run(i int) {
    m(i)
}

func run(f MyFunc, i int) {
    f.Run(i)
}

func main() {
    var newfunc func(int) //explicit declaration
    newfunc = func(i int) {
        fmt.Println(i)
    }
    run(newfunc, 10) //works just fine, even though types seem to differ
}
</code></pre>

<p>Now, I'm not complaining because it saves me having to explicitly cast <code>newfunc</code> to type <code>MyFunc</code>, as I would have to do in the first example; it just seems inconsistent. I'm sure there is a good reason for it; can anyone enlighten me?</p>

<p>The reason I ask is mainly because I would like to shorten some of my rather long function types in this way, but I want to make sure it's expected and acceptable to do this :)</p>
","<p>Turns out, this is a misunderstanding that I had about how Go dealt with types, which can be resolved by reading the relevant part of the spec:</p>

<p><a href=""http://golang.org/ref/spec#Type_identity"">http://golang.org/ref/spec#Type_identity</a></p>

<p>The relevant distinction that I was unaware of was that of <strong>named</strong> and <strong>unnamed</strong> types.</p>

<p><strong>Named</strong> types are types with a name, such as int, int64, float, string, bool. In addition, any type you create using 'type' is a named type.</p>

<p><strong>Unnamed</strong> types are those such as []string, map[string]string, [4]int. They have no name, simply a description corresponding to how they are to be structured. </p>

<p>If you compare two named types, the names must match in order for them to be interchangeable. If you compare a named and an unnamed type, then <strong>as long as the underlying representation matches</strong>, you're good to go!</p>

<p>e.g. given the following types:</p>

<pre><code>type MyInt int
type MyMap map[int]int
type MySlice []int
type MyFunc func(int)
</code></pre>

<p>the following is invalid:</p>

<pre><code>var i int = 2
var i2 MyInt = 4
i = i2 //both named (int and MyInt) and names don't match, so invalid
</code></pre>

<p>the following is fine:</p>

<pre><code>is := make([]int)
m := make(map[int]int)
f := func(i int){}

//OK: comparing named and unnamed type, and underlying representation
//is the same:
func doSlice(input MySlice){...}
doSlice(is)

func doMap(input MyMap){...}
doMap(m)

func doFunc(input MyFunc){...}
doFunc(f)
</code></pre>

<p>I'm a bit gutted I didn't know that sooner, so I hope that clarifies the type lark a little for someone else! And means much less casting than I at first thought :)</p>
","19334952"
"Read whole data with Golang net.Conn.Read","23429","","<p>So I'm building a network app in Go and I've seen that <code>Conn.Read</code> reads into a limited byte array, which I had created with <code>make([]byte, 2048)</code> and now the <strong>problem</strong> is that I don't know the exact length of the content, so it could be too much or not enough.<br>
My question is how can I just read the exact amount of data. I think I have to use <code>bufio</code>, but I'm not sure.</p>
","<p>It highly depends on what you're trying to do, and what kind of data you're expecting, for example if you just want to read until the EOF you could use something like this:</p>

<pre><code>func main() {
    conn, err := net.Dial(""tcp"", ""google.com:80"")
    if err != nil {
        fmt.Println(""dial error:"", err)
        return
    }
    defer conn.Close()
    fmt.Fprintf(conn, ""GET / HTTP/1.0\r\n\r\n"")

    buf := make([]byte, 0, 4096) // big buffer
    tmp := make([]byte, 256)     // using small tmo buffer for demonstrating
    for {
        n, err := conn.Read(tmp)
        if err != nil {
            if err != io.EOF {
                fmt.Println(""read error:"", err)
            }
            break
        }
        //fmt.Println(""got"", n, ""bytes."")
        buf = append(buf, tmp[:n]...)

    }
    fmt.Println(""total size:"", len(buf))
    //fmt.Println(string(buf))
}
</code></pre>

<p>//edit: for completeness sake and @fabrizioM's great suggestion, which completely skipped my mind:</p>

<pre><code>func main() {
    conn, err := net.Dial(""tcp"", ""google.com:80"")
    if err != nil {
        fmt.Println(""dial error:"", err)
        return
    }
    defer conn.Close()
    fmt.Fprintf(conn, ""GET / HTTP/1.0\r\n\r\n"")
    var buf bytes.Buffer
    io.Copy(&amp;buf, conn)
    fmt.Println(""total size:"", buf.Len())
}
</code></pre>
","24343240"
"Lowercase JSON key names with JSON Marshal in Go","23360","","<p>I wish to use the <code>""encoding/json""</code> package to marshal a struct declared in one of the imported packages of my application.</p>

<p>Eg.:</p>

<pre><code>type T struct {
    Foo int
}
</code></pre>

<p>Because it is imported, all available (exported) fields in the struct begins with an upper case letter. But I wish to have lower case key names:</p>

<pre><code>out, err := json.Marshal(&amp;T{Foo: 42})
</code></pre>

<p>will result in</p>

<blockquote>
  <p>{""Foo"":42}</p>
</blockquote>

<p>but I wish to get</p>

<blockquote>
  <p>{""foo"":42}</p>
</blockquote>

<p>Is it possible to get around the problem in some easy way?</p>
","<p>Have a look at the docs for <a href=""http://golang.org/pkg/encoding/json/#Marshal"" rel=""noreferrer"">encoding/json.Marshal</a>.
It discusses using struct field tags to determine how the generated json is formatted.</p>

<p>For example:</p>

<pre><code>type T struct {
    FieldA int    `json:""field_a""`
    FieldB string `json:""field_b,omitempty""`
}
</code></pre>

<p>This will generate JSON as follows:</p>

<pre><code>{
    ""field_a"": 1234,
    ""field_b"": ""foobar""
}
</code></pre>
","11694255"
"How to create a daemon process in Golang?","23299","","<p>Has anyone here written a deamon process in Golang? Can you walk me through how to do that? Useful links are welcome.</p>
","<p>Yes this has been done. See the <a href=""https://github.com/sevlyar/go-daemon"" rel=""nofollow noreferrer"">go-daemon</a> project. Be aware that there are certain problems when the daemonization happens <em>after</em> goroutines are launched. See <a href=""https://code.google.com/p/go/issues/detail?id=227"" rel=""nofollow noreferrer"">issue 227</a> for details.</p>

<p>At this time I'd recommend to use the utilities your operating system offers you. See <a href=""https://stackoverflow.com/questions/10067295/how-to-start-a-go-program-as-a-daemon-in-ubuntu"">this related question</a> for solutions.</p>
","23736264"
"Initialize nested struct definition in Golang","23287","","<p>How do you initialize the following struct?</p>

<pre><code>type Sender struct {
    BankCode string
    Name     string
    Contact  struct {
        Name    string
        Phone   string
    }
}
</code></pre>

<p><strong>I tried:</strong></p>

<pre><code>s := &amp;Sender{
        BankCode: ""BC"",
        Name:     ""NAME"",
        Contact {
            Name: ""NAME"",
            Phone: ""PHONE"",
        },
    }
</code></pre>

<p><strong>Didn't work:</strong></p>

<pre><code>mixture of field:value and value initializers
undefined: Contact
</code></pre>

<p><strong>I tried:</strong></p>

<pre><code>s := &amp;Sender{
        BankCode: ""BC"",
        Name:     ""NAME"",
        Contact: Contact {
            Name: ""NAME"",
            Phone: ""PHONE"",
        },
    }
</code></pre>

<p><strong>Didn't work:</strong></p>

<pre><code>undefined: Contact
</code></pre>
","<p>Your <code>Contact</code> is a field with anonymous struct type. As such, you have to repeat the type definition:</p>

<pre><code>s := &amp;Sender{
    BankCode: ""BC"",
    Name:     ""NAME"",
    Contact: struct {
        Name  string
        Phone string
    }{
        Name:  ""NAME"",
        Phone: ""PHONE"",
    },
}
</code></pre>

<p>But in most cases it's better to define a separate type as rob74 proposed.</p>
","26867130"
"Get name of struct field using reflection","23242","","<p>What is the way of printing ""Foo"" here? In this example, what prints is ""string"". </p>

<p><a href=""http://play.golang.org/p/ZnK6PRwEPp"">http://play.golang.org/p/ZnK6PRwEPp</a></p>

<pre><code>type A struct {
   Foo string
}

func (a *A) PrintFoo(){
    fmt.Println(""Foo value is "" + a.Foo)
}

func main() {
        a := &amp;A{Foo: ""afoo""}
        val := reflect.Indirect(reflect.ValueOf(a))
        fmt.Println(val.Field(0).Type().Name())
}
</code></pre>
","<p>You want <code>val.Type().Field(0).Name</code>.  The <code>Field</code> method on <code>reflect.Type</code> will return a struct describing that field, which includes the name, among other information.</p>

<p>There is no way to retrieve the field name for a <code>reflect.Value</code> representing a particular field value, since that is a property of the containing struct.</p>
","24337241"
"Can you declare multiple variables at once in Go?","23237","","<p>Is it possible to declare multiple variables at once using Golang?</p>

<p>For example in Python you can type this:</p>

<pre><code>a = b = c = 80
</code></pre>

<p>and all values will be 80.</p>
","<p>Yes, you can:</p>

<pre><code>var a, b, c string
a = ""foo""
fmt.Println(a)
</code></pre>

<p>You can do something sort of similar for inline assignment, but not quite as convenient:</p>

<pre><code>a, b, c := 80, 80, 80
</code></pre>
","21071508"
"Go Golang to serve a specific html file","23224","","<pre><code>http.Handle(""/"", http.FileServer(http.Dir(""static"")))
</code></pre>

<p>Serves the <code>html</code> file in static directory.</p>

<p>Is there any way in Go that we can specify the <code>html</code> file to serve?</p>

<p>Something like <code>render_template</code> in <code>Flask</code></p>

<p>I want to do something like:</p>

<pre><code>http.Handle(""/hello"", http.FileServer(http.Dir(""static/hello.html"")))
</code></pre>
","<p>Maybe using a <a href=""http://golang.org/pkg/net/http/#HandlerFunc"" rel=""nofollow noreferrer"">custom <code>http.HandlerFunc</code></a> would be easier:</p>

<p>Except in your case, your func would be the <a href=""http://golang.org/pkg/net/http/#ServeFile"" rel=""nofollow noreferrer""><code>http.ServeFile</code></a> one, for serving just one file.</p>

<p>See for instance ""<a href=""http://jessekallhoff.com/2013/04/14/serving-static-content-from-go/"" rel=""nofollow noreferrer"">Go Web Applications: Serving Static Files</a>"":</p>

<blockquote>
  <p><del>Add the following below your home handler</del> (see below):</p>
</blockquote>

<pre><code>http.HandleFunc(""/static/"", func(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, r.URL.Path[1:])
})
</code></pre>

<blockquote>
  <p>This is using the <code>net/http</code> package’s ServeFile function to serve our content.<br>
  Effectively anything that makes a request starting with the <code>/static/</code> path will be handled by this function.<br>
  One thing I found I had to do in order for the request to be handled correctly was trim the leading ‘/’ using:</p>
</blockquote>

<pre><code>r.URL.Path[1:]
</code></pre>

<p>Actually, do not do that.<br>
This won't be possible in Go 1.6, as <a href=""https://stackoverflow.com/users/5832/sztanpet"">sztanpet</a> <a href=""https://stackoverflow.com/questions/25945538/go-golang-to-serve-a-specific-html-file/25945832?noredirect=1#comment57919326_25945832"">comments</a>, with <a href=""https://github.com/golang/go/commit/9b67a5de79af56541c48c95c6d7ddc8630e1d0dc"" rel=""nofollow noreferrer"">commit 9b67a5d</a>:</p>

<blockquote>
  <p>If the provided file or directory name is a relative path, it is
  interpreted relative to the current directory and <strong>may ascend to parent
  directories</strong>.<br>
  If the provided name is constructed from user input, it should be sanitized before calling <code>ServeFile</code>.<br>
  As a precaution, <code>ServeFile</code> will reject requests where <code>r.URL.Path</code> contains a ""<code>..</code>"" path element.</p>
</blockquote>

<p>That will protect against the following ""url"":</p>

<pre><code>/../file
/..
/../
/../foo
/..\\foo
/file/a
/file/a..
/file/a/..
/file/a\\..
</code></pre>
","25945832"
"Go, Golang : access string as character value","23159","","<p><a href=""http://play.golang.org/p/ZsALO8oF3W"">http://play.golang.org/p/ZsALO8oF3W</a></p>

<p>I want to traverse a string and return the character values. How do I, not return the numeric values per each letter, and return the actual characters?</p>

<p>Now I am getting this</p>

<pre><code> 0 72 72
 1 101 101
 2 108 108
 3 108 108
 4 111 111
</code></pre>

<p>My desired output would be</p>

<pre><code> 0 h h
 1 e e
 2 l l
 3 l l
 4 o o

 package main

 import ""fmt""

 func main() {

    str := ""Hello""
    for i, elem := range str {
        fmt.Println(i, str[i], elem)
    }

    for elem := range str {
        fmt.Println(elem)
    }   
 }
</code></pre>

<p>Thanks,</p>
","<blockquote>
  <p><a href=""http://golang.org/ref/spec#For_statements"">For statements</a></p>
  
  <p>For a string value, the ""range"" clause iterates over the Unicode code
  points in the string starting at byte index 0. On successive
  iterations, the index value will be the index of the first byte of
  successive UTF-8-encoded code points in the string, and the second
  value, of type rune, will be the value of the corresponding code
  point. If the iteration encounters an invalid UTF-8 sequence, the
  second value will be 0xFFFD, the Unicode replacement character, and
  the next iteration will advance a single byte in the string.</p>
</blockquote>

<p>For example,</p>

<pre><code>package main

import ""fmt""

func main() {
    str := ""Hello""
    for _, r := range str {
        c := string(r)
        fmt.Println(c)
    }
    fmt.Println()
    for i, r := range str {
        fmt.Println(i, r, string(r))
    }
}
</code></pre>

<p>Output:</p>

<pre><code>H
e
l
l
o

0 72 H
1 101 e
2 108 l
3 108 l
4 111 o
</code></pre>
","19232071"
"""used as value"" in function call","23144","","<p>whats the proper way of calling functions when evaluating their values in conditional statements?</p>

<pre><code>package main
import ""fmt""
func main(){
        if sumThis(1,2) &gt; sumThis(3,4){
                fmt.Println(""test"")
        } else {
                fmt.Println(""derp"")
        }
}
func sumThis(a, b int){
        return a+b
}
</code></pre>

<p>this returns error:</p>

<pre><code>./test4.go:4: sumThis(1, 2) used as value
./test4.go:4: sumThis(3, 4) used as value
./test4.go:11: too many arguments to return
</code></pre>

<p>how would you write this in Go?</p>

<p>Thanks</p>
","<p>You've forgotten to declare return value. It should be:</p>

<pre><code>func sumThis(a, b int) int{
// ...
</code></pre>
","12561304"
"cast from float32 to int in Go","23139","","<p>I have tried several ways to cast a float to an int, what I want is to truncate a float so I only get the integer part.
I'm using</p>

<pre><code>x := float32(3.1)
y,_ := strconv.Atoi((strconv.Ftoa32(x,'f',0))) //y becomes 3
</code></pre>

<p>But if x is 3.9, y will become 4 because this function will round the float32 instead of truncating.
Is there a way of truncating instead of rounding? and if so, is it possible to do it without involving strings? (like casting a float to int in C)</p>
","<p>Just use <code>int()</code>:</p>

<pre><code>x := float32(3.1)
fmt.Println(int(x))
</code></pre>

<p>Which produces <code>3</code> as needed, without having to use string conversions or the like.</p>
","8070330"
"Converting map to struct","23040","","<p>I am trying to create a generic method in Go that will fill a <code>struct</code> using data from a <code>map[string]interface{}</code>. For example, the method signature and usage might look like:</p>

<pre><code>func FillStruct(data map[string]interface{}, result interface{}) {
    ...
}

type MyStruct struct {
    Name string
    Age  int64
}

myData := make(map[string]interface{})
myData[""Name""] = ""Tony""
myData[""Age""]  = 23

result := &amp;MyStruct{}
FillStruct(myData, result)

// result now has Name set to ""Tony"" and Age set to 23
</code></pre>

<p>I know this can be done using JSON as an intermediary; is there another more efficient way of doing this?</p>
","<p>This is the same idea as Simon's answer, but with a little more error handling: </p>

<p><a href=""http://play.golang.org/p/tN8mxT_V9h"">http://play.golang.org/p/tN8mxT_V9h</a></p>

<pre><code>func SetField(obj interface{}, name string, value interface{}) error {
    structValue := reflect.ValueOf(obj).Elem()
    structFieldValue := structValue.FieldByName(name)

    if !structFieldValue.IsValid() {
        return fmt.Errorf(""No such field: %s in obj"", name)
    }

    if !structFieldValue.CanSet() {
        return fmt.Errorf(""Cannot set %s field value"", name)
    }

    structFieldType := structFieldValue.Type()
    val := reflect.ValueOf(value)
    if structFieldType != val.Type() {
        return errors.New(""Provided value type didn't match obj field type"")
    }

    structFieldValue.Set(val)
    return nil
}

type MyStruct struct {
    Name string
    Age  int64
}

func (s *MyStruct) FillStruct(m map[string]interface{}) error {
    for k, v := range m {
        err := SetField(s, k, v)
        if err != nil {
            return err
        }
    }
    return nil
}

func main() {
    myData := make(map[string]interface{})
    myData[""Name""] = ""Tony""
    myData[""Age""] = int64(23)

    result := &amp;MyStruct{}
    err := result.FillStruct(myData)
    if err != nil {
        fmt.Println(err)
    }
    fmt.Println(result)
}
</code></pre>
","26746461"
"Check whether a string slice contains a certain value in Go","23007","","<p>What is the best way to check whether a certain value is in a string slice? I would use a Set in other languages, but Go doesn't have one.</p>

<p>My best try is this so far:</p>

<pre><code>package main

import ""fmt""

func main() {
    list := []string{""a"", ""b"", ""x""}
    fmt.Println(isValueInList(""b"", list))
    fmt.Println(isValueInList(""z"", list))
}

func isValueInList(value string, list []string) bool {
    for _, v := range list {
        if v == value {
            return true
        }
    }
    return false
}
</code></pre>

<p><a href=""http://play.golang.org/p/gkwMz5j09n"" rel=""noreferrer"">http://play.golang.org/p/gkwMz5j09n</a></p>

<p>This solution should be ok for small slices, but what to do for slices with many elements?</p>
","<p>If you have a slice of strings in an arbitrary order, finding if a value exists in the slice requires O(n) time. This applies to all languages.</p>

<p>If you intend to do a search over and over again, you can use other data structures to make lookups faster. However, building these structures require at least O(n) time. So you will only get benefits if you do lookups using the data structure more than once.</p>

<p>For example, you could load your strings into a map. Then lookups would take O(1) time. Insertions also take O(1) time making the initial build take O(n) time:</p>

<pre><code>set := make(map[string]bool)
for _, v := range list {
    set[v] = true
}

fmt.Println(set[""b""])
</code></pre>

<p>You can also sort your string slice and then do a binary search. Binary searches occur in O(log(n)) time. Building can take O(n*log(n)) time.</p>

<pre><code>sort.Strings(list)
i := sort.SearchStrings(list, ""b"")
fmt.Println(i &lt; len(list) &amp;&amp; list[i] == ""b"")
</code></pre>

<p>Although in theory given an infinite number of values, a map is faster, in practice it is very likely searching a sorted list will be faster. You need to benchmark it yourself.</p>
","13520185"
"Any good advice about how to avoid import cycle in Go?","22995","","<p>I'm working on a Go project for a month. The good thing is Go is really highly efficient. But after a month of development I've already got thousands lines of code and many <code>packages</code>. To avoid import cycle is a major issue for me that anytime I got a import cycle error, I have no idea where the problem may be at first time.</p>

<p>The Go compiler also only have very simple notice that always not good enough to locate issue quickly like: <code>main.go:7:3: import cycle not allowed</code>. It will only help you to know which file may cause the problem but nothing more deeply. Since <code>import</code> relationship just become more and more complex while code grows, I'm eager to know how to avoid import cycle more efficiently in Go. Any help is much appreciated.</p>
","<pre><code>go list -f '{{join .Deps ""\n""}}' &lt;import-path&gt;
</code></pre>

<p>Will show import dependencies for package at <code>&lt;import-path&gt;</code> - or in current directory if <code>&lt;import-path&gt;</code> is left empty. Alternatively</p>

<pre><code>go list -f '{{join .DepsErrors ""\n""}}' &lt;import-path&gt;
</code></pre>

<p>hopefully shows some useful information in your case. See also the output of</p>

<pre><code>go help list
</code></pre>

<p>for additional information about the go list tool.</p>
","16169115"
"Go: Append if unique","22960","","<p>Is there a way to check slices/maps for the presence of a value?</p>

<p>I would like to add a value to a slice <strong><em>only</em></strong> if it does <strong><em>not</em></strong> exist in the slice. </p>

<p>This works, but it seems verbose. Is there a beter way to do this?</p>

<pre><code>orgSlice := []int{1, 2, 3}
newSlice := []int{}
newInt := 2

newSlice = append(newSlice, newInt)
for _, v := range orgSlice {
    if v != newInt {
        newSlice = append(newSlice, v)
    }
}

newSlice == [2 1 3]
</code></pre>
","<p>Your approach would take linear time for each insertion. A better way would be to use a <code>map[int]struct{}</code>. Alternatively, you could also use a <code>map[int]bool</code> or something similar, but the empty <code>struct{}</code> has the advantage that it doesn't occupy any additional space. Therefore <code>map[int]struct{}</code> is a popular choice for a set of integers.</p>

<p><strong>Example:</strong></p>

<pre><code>set := make(map[int]struct{})
set[1] = struct{}{}
set[2] = struct{}{}
set[1] = struct{}{}
// ...

for key := range(set) {
  fmt.Println(key)
}
// each value will be printed only once, in no particular order


// you can use the ,ok idiom to check for existing keys
if _, ok := set[1]; ok {
  fmt.Println(""element found"")
} else {
  fmt.Println(""element not found"")
}
</code></pre>
","9251352"
"Go HTTP Post and use Cookies","22781","","<p>I'm trying to use Go to log into a website and store the cookies for later use.</p>

<p>Could you give example code for posting a form, storing the cookies, and accessing another page using the cookies?</p>

<p>I think I might need to make a Client to store the cookies, by studying <a href=""http://gotour.golang.org/src/pkg/net/http/client.go"" rel=""noreferrer"">http://gotour.golang.org/src/pkg/net/http/client.go</a></p>

<pre><code>package main

import (""net/http""
        ""log""
        ""net/url""
        )

func Login(user, password string) string {
        postUrl := ""http://www.pge.com/eum/login""

        // Set up Login
        values := make(url.Values)
        values.Set(""user"", user)
        values.Set(""password"", password)

        // Submit form
        resp, err := http.PostForm(postUrl, values)
        if err != nil {
                log.Fatal(err)
        }
        defer resp.Body.Close()

        // How do I store cookies?
        return ""Hello""
}

func ViewBill(url string, cookies) string {

//What do I put here?

}
</code></pre>
","<p>Go <a href=""http://golang.org/doc/go1.1"">1.1</a> introduced a cookie jar implementation <a href=""http://golang.org/pkg/net/http/cookiejar/""><code>net/http/cookiejar</code></a>.</p>

<pre><code>import (
    ""net/http""
    ""net/http/cookiejar""
)

cookieJar, _ := cookiejar.New(nil)

client := &amp;http.Client{
    Jar: cookieJar,
}
</code></pre>
","19386573"
"Showing custom 404 error page with standard http package","22672","","<p>Assuming that we have:</p>

<pre><code>http.HandleFunc(""/smth"", smthPage)
http.HandleFunc(""/"", homePage)
</code></pre>

<p>User sees a plain ""404 page not found"" when they try a wrong URL. How can I return a custom page for that case?</p>

<p><strong>Update concerning gorilla/mux</strong></p>

<p>Accepted answer is ok for those using pure net/http package.</p>

<p>If you use gorilla/mux you should use something like this:</p>

<pre><code>func main() {
    r := mux.NewRouter()
    r.NotFoundHandler = http.HandlerFunc(notFound)
}
</code></pre>

<p>And implement <code>func notFound(w http.ResponseWriter, r *http.Request)</code> as you want.</p>
","<p>I usually do this:</p>

<pre><code>package main

import (
    ""fmt""
    ""net/http""
)

func main() {
    http.HandleFunc(""/"", homeHandler)
    http.HandleFunc(""/smth/"", smthHandler)
    http.ListenAndServe("":12345"", nil)
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
    if r.URL.Path != ""/"" {
        errorHandler(w, r, http.StatusNotFound)
        return
    }
    fmt.Fprint(w, ""welcome home"")
}

func smthHandler(w http.ResponseWriter, r *http.Request) {
    if r.URL.Path != ""/smth/"" {
        errorHandler(w, r, http.StatusNotFound)
        return
    }
    fmt.Fprint(w, ""welcome smth"")
}

func errorHandler(w http.ResponseWriter, r *http.Request, status int) {
    w.WriteHeader(status)
    if status == http.StatusNotFound {
        fmt.Fprint(w, ""custom 404"")
    }
}
</code></pre>

<p>Here I've simplified the code to only show custom 404, but I actually do more with this setup: I handle all the HTTP errors with <code>errorHandler</code>, in which I log useful information and send email to myself.</p>
","10001309"
"golang: slice of struct != slice of interface it implements?","22622","","<p>I have an interface <code>Model</code>, which is implemented by struct <code>Person</code>.</p>

<p>To get a model instance, I have the following helper functions:</p>

<pre><code>func newModel(c string) Model {
    switch c {
    case ""person"":
        return newPerson()
    }
    return nil
}

func newPerson() *Person {
    return &amp;Person{}
}
</code></pre>

<p>The above approach allows me to return a properly typed Person instance (can easily add new models later with same approach).</p>

<p>When I attempted to do something similar for returning a slice of models, I get an error. Code:</p>

<pre><code>func newModels(c string) []Model {
    switch c {
    case ""person"":
        return newPersons()
    }
    return nil
}

func newPersons() *[]Person {
    var models []Person
    return &amp;models
}
</code></pre>

<p>Go complains with: <code>cannot use newPersons() (type []Person) as type []Model in return argument</code></p>

<p>My goal is to return a slice of whatever model type is requested (whether <code>[]Person</code>, <code>[]FutureModel</code>, <code>[]Terminator2000</code>, w/e). What am I missing, and how can I properly implement such a solution?</p>
","<p>This is very similar to a question I just answered: <a href=""https://stackoverflow.com/a/12990540/727643"">https://stackoverflow.com/a/12990540/727643</a></p>

<p>The short answer is that you are correct. A slice of structs is not equal to a slice of an interface the struct implements.</p>

<p>A <code>[]Person</code> and a <code>[]Model</code> have different memory layouts. This is because the types they are slices of have different memory layouts. A <code>Model</code> is an interface value which means that in memory it is two words in size. One word for the type information, the other for the data. A <code>Person</code> is a struct whose size depends on the fields it contains. In order to convert from a <code>[]Person</code> to a <code>[]Model</code>, you will need to loop over the array and do a type conversion for each element.</p>

<p>Since this conversion is an O(n) operation and would result in a new slice being created, Go refuses to do it implicitly. You can do it explicitly with the following code.</p>

<pre><code>models := make([]Model, len(persons))
for i, v := range persons {
    models[i] = Model(v)
}
return models
</code></pre>

<p>And as <a href=""https://stackoverflow.com/a/12994884/727643"">dskinner pointed out</a>, you most likely want a slice of pointers and not a pointer to a slice. A pointer to a slice is not normally needed.</p>

<pre><code>*[]Person        // pointer to slice
[]*Person        // slice of pointers
</code></pre>
","12994852"
"Global variables / Get command line argument and print it","22473","","<p>This may sound stupid but how do I define a global variable in Go? <code>const myglobalvariable = ""Hi there!""</code> doesn't really work...</p>

<p>I just want to get the command line argument and after this I want to print it. I do this using this code snippet:</p>

<pre><code>package main

import (
    ""flag""
    ""fmt""
)

func main() {
    gettext();
    fmt.Println(text)
}

func gettext() {
    flag.Parse()
    text := flag.Args()
    if len(text) &lt; 1 {
        fmt.Println(""Please give me some text!"")
    }
}
</code></pre>

<p>The problem is that it just prints an empty line so I thought about declaring a global variable using <code>const myglobalvariable = ""Hi there!""</code> but I just get the error <code>cannot use flag.Args() (type []string) as type ideal string in assignment</code>...
...I know this is a noob question so I hope you can help me...</p>
","<p>Why do you need a global variable? For example,</p>

<pre><code>package main

import (
    ""flag""
    ""fmt""
)

func main() {
    text := gettext()
    fmt.Println(text)
}

func gettext() []string {
    flag.Parse()
    text := flag.Args()
    if len(text) &lt; 1 {
        fmt.Println(""Please give me some text!"")
    }
    return text
}
</code></pre>
","9540586"
"How can I do test setup using the testing package in Go","22390","","<p>How can I do overall test setup processing which sets the stage for all the tests when using the <a href=""http://golang.org/pkg/testing/"" rel=""noreferrer"">testing package</a>?</p>

<p>As an example in Nunit there is a <code>[SetUp]</code> attribute.</p>

<pre><code>[TestFixture]
public class SuccessTests
{
  [SetUp] public void Init()
  { /* Load test data */ }
}
</code></pre>
","<p>Starting with Go 1.4 you can implement setup/teardown (no need to copy your functions before/after each test). The documentation is outlined <a href=""https://golang.org/pkg/testing/"">here</a> in the <strong>Main</strong> section:</p>

<blockquote>
  <p>TestMain runs in the main goroutine and can do whatever setup and
  teardown is necessary around a call to m.Run. It should then call
  os.Exit with the result of m.Run</p>
</blockquote>

<p>It took me some time to figure out that this means that if a test contains a function <code>func TestMain(m *testing.M)</code> then this function will be called instead of running the test. And in this function I can define how the tests will run. For example I can implement global setup and teardown:</p>

<pre><code>func TestMain(m *testing.M) { 
    mySetupFunction()
    retCode := m.Run()
    myTeardownFunction()
    os.Exit(retCode)
}
</code></pre>

<p>A couple of other examples <a href=""http://cs-guy.com/blog/2015/01/test-main/"">can be found here</a>.</p>
","34102842"
"Serve homepage and static content from root","22388","","<p>In Golang, how do I serve static content out of the root directory while still having a root directory handler for serving the homepage.</p>

<p>Use the following simple web server as an example:</p>

<pre><code>package main

import (
    ""fmt""
    ""net/http""
)

func main() {
    http.HandleFunc(""/"", HomeHandler) // homepage
    http.ListenAndServe("":8080"", nil)
}

func HomeHandler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, ""HomeHandler"")
}
</code></pre>

<p>If I do</p>

<pre><code>http.Handle(""/"", http.FileServer(http.Dir(""./"")))
</code></pre>

<p>I receive a panic saying that I have two registrations for ""/"". Every Golang example I've found on the internet suggests serving their static content out of different directories, but that doesn't help much for things like sitemap.xml, favicon.ico, robots.txt and other files which are by-practice or mandated to always be served out of the root.</p>

<p>The behavior I seek is the behavior which is found in most web servers such as Apache, Nginx, or IIS, where it first traverses your rules, and if no rule is found it looks for an actual file, and if no file is found it 404s. My guess is that instead of writing a <code>http.HandlerFunc</code>, I need to write a <code>http.Handler</code> which checks if I am referencing a file with an extension, and if so checks for file existence and serves the file, otherwise it 404s or serves the homepage is the request was for ""/"". Unfortunately I'm not certain how to even begin such a task.</p>

<p>Part of me says I'm massively over-complicating the situation which makes me think that I am missing something? Any guidance would be appreciated. </p>
","<p>One thing I thought of that might help you is that you can create your own ServeMux. I added to your example so that chttp is a ServeMux that you can have serve static files. The HomeHandler then checks to see if it should serve a file or not. I just check for a ""."" but you could do a lot of things. Just an idea, might not be what you are looking for.</p>

<pre><code>package main

import (
    ""fmt""
    ""net/http""
    ""strings""
)   

var chttp = http.NewServeMux()

func main() {

    chttp.Handle(""/"", http.FileServer(http.Dir(""./"")))

    http.HandleFunc(""/"", HomeHandler) // homepage
    http.ListenAndServe("":8080"", nil)
}   

func HomeHandler(w http.ResponseWriter, r *http.Request) {

    if (strings.Contains(r.URL.Path, ""."")) {
        chttp.ServeHTTP(w, r)
    } else {
        fmt.Fprintf(w, ""HomeHandler"")
    }   
} 
</code></pre>
","14086560"
"How to call function from another file in go language?","22267","","<p>I want to call function from another file in go lang, can any one help?
test1.go</p>

<pre><code>package main

func main() {
    demo()
}
</code></pre>

<p>test2.go</p>

<pre><code>package main

import ""fmt""

func main() {
}

func demo() {
    fmt.Println(""HI"")
}
</code></pre>

<p>How to call demo in test2 from test1?</p>
","<p>You can't have more than one <code>main</code> in your package.</p>

<p>More generally, you can't have more than one function with a given name in a package.</p>

<p>Remove the <code>main</code> in <code>test2.go</code> and compile the application. The <code>demo</code> function will be visible from <code>test1.go</code>.</p>
","14155156"
"importing go files in same folder","22177","","<p>I am having difficulty in importing a local go file into another go file.</p>

<p>My project structure is like something below</p>

<pre><code>-samplego
--pkg
--src
---github.com
----xxxx
-----a.go
-----b.go
--bin
</code></pre>

<p>I am trying to import a.go inside b.go. I tried the following,</p>

<pre><code>import ""a""
import ""github.com/xxxx/a""
</code></pre>

<p>None of these worked..I understand I have to meddle up with GOPATH but I couldn't get it right. Presently my GOPATH is pointing to samplego(/workspace/samplego).I get the below error</p>

<pre><code>cannot find package ""a"" in any of:
/usr/local/go/src/pkg/a (from $GOROOT)
/workspace/samplego/src/a (from $GOPATH)
</code></pre>

<p>Also, how does GOPATH work when these source files are imported into another project/module? Would the local imports be an issue then? What is the best practice in this case - is it to have just one go file in module(with associated tests)? </p>
","<p>Any number of files in a directory are a single package; symbols declared in one file are available to the others without any <code>import</code>s or qualifiers. All of the files do need the same <code>package foo</code> declaration at the top (or you'll get an error from <code>go build</code>). </p>

<p>You do need <code>GOPATH</code> set to the directory where your <code>pkg</code>, <code>src</code>, and <code>bin</code> directories reside. This is just a matter of preference, but it's common to have a single workspace for all your apps (sometimes <code>$HOME</code>), not one per app.</p>

<p>Normally a Github path would be <code>github.com/username/reponame</code> (not just <code>github.com/xxxx</code>). So if you want to have <code>main</code> and another package, you may end up doing something under <code>workspace/src</code> like</p>

<pre><code>github.com/
  username/
    reponame/
      main.go   // package main, importing ""github.com/username/reponame/b""
      b/
        b.go    // package b
</code></pre>

<p>Note you always import with the full <code>github.com/...</code> path: relative imports aren't allowed in a workspace. If you get tired of typing paths, use <code>goimports</code>. If you were getting by with <code>go run</code>, it's time to switch to <code>go build</code>: <code>run</code> deals poorly with multiple-file <code>main</code>s and I didn't bother to test but heard (from Dave Cheney <a href=""https://plus.google.com/+ChalmersBrown/posts/KgEV8Y8eFwe"" rel=""noreferrer"">here</a>) <code>go run</code> doesn't rebuild dirty dependencies.</p>

<p>Sounds like you've at least tried to set GOPATH to the right thing, so if you're still stuck, maybe include exactly how you set the environment variable (the command, etc.) and what command you ran and what error happened. <a href=""https://stackoverflow.com/questions/20628918/cannot-download-gopath-not-set/20629533#20629533"">Here are instructions on how to set it (and make the setting persistent) under Linux/UNIX</a> and <a href=""http://golang.org/doc/code.html"" rel=""noreferrer"">here is the Go team's advice on workspace setup</a>. Maybe neither helps, but take a look and at least point to which part confuses you if you're confused.</p>
","26942393"
"golang json unmarshal part of map[string]interface{}","22102","","<p>I have the following code to try to Unmarshal this json file, however the line json.Unmarshal([]byte(msg[""restaurant""]), &amp;restaurant) always gives an error. How can I make Unmarshal ignore the ""restaurant"" or pass only the ""restaurant"" data to the Unmarshal function?</p>

<p>Thanks!</p>

<pre><code>{
  ""restaurant"": {
    ""name"": ""Tickets"",
    ""owner"": {
      ""name"": ""Ferran""
    }
  }
}


    file, e := ioutil.ReadFile(""./rest_read.json"")
    if e != nil {
            fmt.Println(""file error"")
            os.Exit(1)
    }

    var data interface{}
    json.Unmarshal(file, &amp;data)

    msg := data.(map[string]interface{})
    log.Println(msg)
    log.Println(msg[""restaurant""])
    log.Println(reflect.TypeOf(msg[""restaurant""]))

    var restaurant Restaurant
    json.Unmarshal([]byte(msg[""restaurant""]), &amp;restaurant)

    log.Println(""RName: "", restaurant.Name)
    log.Println(""Name: "", restaurant.Owner.Name)
</code></pre>
","<p>I  would propose to construct a proper model for your data. This will enable you to cleanly unmarshal your data into a Go struct.</p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
)

type Restaurant struct {
    Restaurant RestaurantData `json:""restaurant""`
}

type RestaurantData struct {
    Name  string `json:""name""`
    Owner Owner  `json:""owner""`
}

type Owner struct {
    Name string `json:""name""`
}

func main() {
    data := `{""restaurant"":{""name"":""Tickets"",""owner"":{""name"":""Ferran""}}}`
    r := Restaurant{}
    json.Unmarshal([]byte(data), &amp;r)

    fmt.Printf(""%+v"", r)
}
</code></pre>
","23250776"
"""Unknown escape sequence"" error in Go","22042","","<p>I have the following function written in Go.  The idea is the function has a string passed to it and returns the first IPv4 IP address found.  If no IP address is found, an empty string is returned.</p>

<pre><code>func parseIp(checkIpBody string) string {
    reg, err := regexp.Compile(""[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+"")
    if err == nil {
        return """"
    }   
    return reg.FindString(checkIpBody)
}
</code></pre>

<p>The compile-time error I'm getting is</p>

<blockquote>
  <p>unknown escape sequence: .</p>
</blockquote>

<p>How can I tell Go that the <code>'.'</code> is the actual character I'm looking for?  I thought escaping it would do the trick, but apparently I'm wrong.</p>
","<p>The <code>\</code> backslash  isn't being interpreted by the regex parser, it's being interpreted in the string literal. You should escape the backslash again:</p>



<pre class=""lang-golang prettyprint-override""><code>regexp.Compile(""[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+"")
</code></pre>

<p>A string quoted with <code>""</code> double-quote characters is known as an ""interpreted string literal"" in Go. Interpreted string literals are like string literals in most languages: <code>\</code> backslash  characters aren't included literally, they're used to give special meaning to the next character. The source must included <code>\\</code> two backslashes in a row to obtain an a single backslash character in the parsed value.</p>

<p>As <a href=""https://stackoverflow.com/questions/6770898/unknown-escape-sequence/6770913#comment8032027_6770913"">Evan Shaw pointed out in the comments</a>, Go has another alternative which can be useful when writing string literals for regular expressions. A ""raw string literal"" is quoted by <code>`</code> backtick characters. There are no special characters in a raw string literal, so as long as your pattern doesn't include a backtick you can use this syntax without escaping anything:</p>

<pre class=""lang-golang prettyprint-override""><code>regexp.Compile(`[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+`)
</code></pre>

<p>This is described in <a href=""http://golang.org/ref/spec#String_literals"" rel=""noreferrer"">the ""String literals"" section of the Go spec</a>.</p>
","6770913"
"Basic HTTP Auth in Go","22016","","<p>I'm trying to do basic HTTP auth with the code below, but it is throwing out the following error:</p>

<p>2013/05/21 10:22:58 Get mydomain.com: unsupported protocol scheme """"
exit status 1</p>

<pre><code>func basicAuth() string {
    var username string = ""foo""
    var passwd string = ""bar""
    client := &amp;http.Client{}
    req, err := http.NewRequest(""GET"", ""mydomain.com"", nil)
    req.SetBasicAuth(username, passwd)
    resp, err := client.Do(req)
    if err != nil{
        log.Fatal(err)
    }
    bodyText, err := ioutil.ReadAll(resp.Body)
    s := string(bodyText)
    return s
}
</code></pre>

<p>Any idea what I may be doing wrong?</p>
","<p>You need to specify the protocol for NewRequest, e.g. ""http://"", see <a href=""http://play.golang.org/p/bX0r-PbCv2"">here</a>.</p>

<pre><code>req, err := http.NewRequest(""GET"", ""http://mydomain.com"", nil)
</code></pre>
","16673875"
"Bcrypt password hashing in Golang (compatible with Node.js)?","21687","","<p>I set up a site with Node.js+passport for user authentication. </p>

<p>Now I need to migrate to Golang, and need to do authentication with the user passwords saved in db. </p>

<p>The Node.js encryption code is:</p>

<pre><code>    var bcrypt = require('bcrypt');

    bcrypt.genSalt(10, function(err, salt) {
        if(err) return next(err);

        bcrypt.hash(user.password, salt, function(err, hash) {
            if(err) return next(err);
            user.password = hash;
            next();
        });
    });
</code></pre>

<p>How to make the same hashed string as Node.js bcrypt with Golang?</p>
","<p>Using the <a href=""http://godoc.org/golang.org/x/crypto/bcrypt"" rel=""noreferrer"">golang.org/x/crypto/bcrypt</a> package, I believe the equivalent would be:</p>

<pre><code>hashedPassword, err := bcrypt.GenerateFromPassword(password, bcrypt.DefaultCost)
</code></pre>

<p><strong>Working example:</strong></p>

<pre><code>package main

import (
    ""golang.org/x/crypto/bcrypt""
    ""fmt""
)

func main() {
    password := []byte(""MyDarkSecret"")

    // Hashing the password with the default cost of 10
    hashedPassword, err := bcrypt.GenerateFromPassword(password, bcrypt.DefaultCost)
    if err != nil {
        panic(err)
    }
    fmt.Println(string(hashedPassword))

    // Comparing the password with the hash
    err = bcrypt.CompareHashAndPassword(hashedPassword, password)
    fmt.Println(err) // nil means it is a match
}
</code></pre>
","23259804"
"How to measure code coverage in Golang?","21681","","<p>Has anyone succeeded in generating code coverage for Go unit tests? I can't find a tool for that on the web.</p>
","<p>Note that <a href=""http://code.google.com/p/go/downloads/list?can=2"" rel=""noreferrer"">Go 1.2 (Q4 2013, rc1 is available)</a> will now display <strong><a href=""http://tip.golang.org/doc/go1.2#cover"" rel=""noreferrer"">test coverage results</a></strong>:</p>

<blockquote>
  <p>One major new feature of <code>go test</code> is that <strong>it can now compute and, with help from a new, separately installed ""<code>go tool cover</code>"" program, display test coverage results</strong>.</p>
  
  <p>The <code>cover</code> tool is part of the <a href=""https://code.google.com/p/go/source/checkout?repo=tools"" rel=""noreferrer""><code>go.tools</code> subrepository</a>. It can be installed by running</p>
</blockquote>

<pre><code>$ go get golang.org/x/tools/cmd/cover
</code></pre>

<blockquote>
  <p>The cover tool does two things. </p>
  
  <ul>
  <li>First, when ""<code>go test</code>"" is given the <code>-cover</code> flag, it is run automatically to rewrite the source for the package and insert instrumentation statements. The test is then compiled and run as usual, and basic coverage statistics are reported:</li>
  </ul>
</blockquote>

<pre><code>$ go test -coverprofile fmt
ok      fmt 0.060s  coverage: 91.4% of statements
$
</code></pre>

<blockquote>
  <p>Second, for more detailed reports, different flags to ""go test"" can create a coverage profile file, which the cover program, invoked with ""<code>go tool cover</code>"", can then analyze.</p>
</blockquote>

<p><a href=""https://stackoverflow.com/users/10259/frank-shearar"">Frank Shearar</a> <a href=""https://stackoverflow.com/users/10259/frank-shearar"">mentions</a>:</p>

<blockquote>
  <p>The latest versions of Go (2013/09/19) use: </p>
</blockquote>

<pre><code>go test -coverprofile &lt;filename&gt; &lt;package name&gt;
</code></pre>

<blockquote>
  <p>Details on how to generate and analyze coverage statistics can be found by running the commands</p>
</blockquote>

<pre><code>$ go help testflag
$ go tool cover -help
</code></pre>

<hr>

<p><a href=""https://stackoverflow.com/users/1816872/ivan-black"">Ivan Black</a> mentions <a href=""https://stackoverflow.com/questions/10516662/code-coverage-tool-for-go/18911602#comment46046413_18911602"">in the comments</a>:</p>

<blockquote>
  <p><code>go test -coverprofile cover.out</code> and then<br>
  <code>go tool cover -html=cover.out -o cover.html</code> opens <code>cover.html</code> in browser</p>
</blockquote>

<p>I don't even want to wait for the browser to open, so I defined this alias:</p>

<pre><code>alias gc=grep -v -e "" 1$"" coverage.out
</code></pre>

<p>That I just type <code>gc</code>, and have a list of all the lines <em>not</em> yet covered (here: with a <code>coverage.out</code> line <em>not</em> ending with "" <code>1</code>"").</p>
","18911602"
"Cannot unmarshal string into Go value of type int64","21651","","<p>I have struct</p>

<pre><code>type tySurvey struct {
    Id     int64            `json:""id,omitempty""`
    Name   string           `json:""name,omitempty""`
}
</code></pre>

<p>I do <code>json.Marshal</code> write JSON bytes in HTML page. jQuery modifies <code>name</code> field in object and encodes object using jQueries <code>JSON.stringify</code> and jQuery posts string to Go handler.</p>

<p><code>id</code> field encoded as string.</p>

<p>Sent: <code>{""id"":1}</code> Received: <code>{""id"":""1""}</code></p>

<p>Problem is that <code>json.Unmarshal</code> fails to unmarshal that JSON because <code>id</code> is not integer anymore.</p>

<pre><code>json: cannot unmarshal string into Go value of type int64
</code></pre>

<p>What is best way to handle such data? I do not wish to manually convert every field. I wish to write compact, bug free code.</p>

<p>Quotes is not too bad. JavaScript does not work well with int64.</p>

<p>I would like to learn the easy way to unmarshal json with string values in int64 values.</p>
","<p>This is handled by adding <code>,string</code> to your tag as follows:</p>

<pre><code>type tySurvey struct {
   Id   int64  `json:""id,string,omitempty""`
   Name string `json:""name,omitempty""`
}
</code></pre>

<p>This can be found about halfway through the documentation for <a href=""http://golang.org/pkg/encoding/json/#Marshal"" rel=""noreferrer"">Marshal</a>.</p>

<p>Please note that you cannot decode the empty string by specifying <code>omitempty</code> as it is only used when encoding.</p>
","21152548"
"golang: convert struct pointer to interface{}","21641","","<p>If I have:</p>

<pre><code>   type foo struct{
   }

   func bar(baz interface{}) {
   }
</code></pre>

<p>The above are set in stone - I can't change foo or bar. Additionally, baz must converted back to a foo struct pointer inside bar. How do I cast &amp;foo{} to interface{} so I can use it as a parameter when calling bar? </p>
","<p>To turn <code>*foo</code> into an <code>interface{}</code> is trivial:</p>

<pre><code>f := &amp;foo{}
bar(f) // every type implements interface{}. Nothing special required
</code></pre>

<p>In order to get back to a <code>*foo</code>, you can either do a <strong><a href=""http://golang.org/ref/spec#Type_assertions"" rel=""noreferrer"">type assertion</a></strong>:</p>

<pre><code>func bar(baz interface{}) {
    f, ok := baz.(*foo)
    if !ok {
        // baz was not of type *foo. The assertion failed
    }

    // f is of type *foo
}
</code></pre>

<p>Or a <strong><a href=""http://golang.org/ref/spec#Switch_statements"" rel=""noreferrer"">type switch</a></strong> (similar, but useful if <code>baz</code> can be multiple types):</p>

<pre><code>func bar(baz interface{}) {
    switch f := baz.(type) {
    case *foo: // f is of type *foo
    default: // f is some other type
    }
}
</code></pre>
","24423099"
"Go naming conventions for const","21638","","<p>I'm trying to determine whether there is a naming convention for the names of <code>const</code> in Golang.</p>

<p>I personally would tend to follow the C style and write them in upper case, but I haven't found anything on this page <a href=""http://golang.org/doc/effective_go.html"" rel=""noreferrer"">http://golang.org/doc/effective_go.html</a> which seems to list some naming conventions for the language.</p>
","<p>The standard library uses camel-case, so I advise you do that as well. The first letter is uppercase or lowercase depending on whether you want to export the constant.</p>

<p>A few examples:</p>

<ul>
<li><code>md5.BlockSize</code></li>
<li><code>os.O_RDONLY</code> is an exception because it was borrowed directly from POSIX.</li>
<li><code>os.PathSeparator</code></li>
</ul>
","22688926"
"Go golang, syntax error: unexpected ++, expecting :","21634","","<pre><code>  func test(args ...string) {
    var msg map[string] interface{}

    i := 0
    msg[""product""] = args[i++]
    msg[""key""] = args[i++]
    msg[""signature""] = args[i++]
    msg[""string_to_sign""] = args[i++]
  }

  go build utils.go
</code></pre>

<p>after compile, I get the error message</p>

<pre><code>    ./utils.go:28: syntax error: unexpected ++, expecting :
    ./utils.go:28: missing statement after label
    ./utils.go:29: syntax error: unexpected ++, expecting :
    ./utils.go:30: syntax error: unexpected ++, expecting :
    ./utils.go:31: syntax error: unexpected ++, expecting :
    ./utils.go:36: syntax error: unexpected ++, expecting :
    ./utils.go:37: syntax error: unexpected ++, expecting :
</code></pre>

<p>why can't I put i++ in index of slice? is there any limitation in index of slice?</p>
","<blockquote>
  <p><a href=""http://golang.org/doc/faq"">Go Frequently Asked Questions (FAQ)</a></p>
  
  <p><a href=""http://golang.org/doc/faq#inc_dec"">Why are ++ and -- statements and not expressions? And why postfix,
  not prefix?</a></p>
  
  <p>Without pointer arithmetic, the convenience value of pre- and postfix
  increment operators drops. By removing them from the expression
  hierarchy altogether, expression syntax is simplified and the messy
  issues around order of evaluation of ++ and -- (consider f(i++) and
  p[i] = q[++i]) are eliminated as well. The simplification is
  significant. As for postfix vs. prefix, either would work fine but the
  postfix version is more traditional; insistence on prefix arose with
  the STL, a library for a language whose name contains, ironically, a
  postfix increment.</p>
  
  <p><a href=""http://golang.org/ref/spec"">The Go Programming Language Specification</a></p>
  
  <p><a href=""http://golang.org/ref/spec#IncDec_statements"">IncDec statements</a></p>
  
  <p>The ""++"" and ""--"" statements increment or decrement their operands by
  the untyped constant 1. As with an assignment, the operand must be
  addressable or a map index expression.</p>

<pre><code>IncDecStmt = Expression ( ""++"" | ""--"" ) .
</code></pre>
  
  <p>The following assignment statements are semantically equivalent:</p>

<pre><code>IncDec statement    Assignment
x++                 x += 1
x--                 x -= 1
</code></pre>
</blockquote>

<p>Write,</p>

<pre><code>func test(args ...string) {
    var msg map[string]interface{}
    i := 0
    msg[""product""] = args[i]
    i++
    msg[""key""] = args[i]
    i++
    msg[""signature""] = args[i]
    i++
    msg[""string_to_sign""] = args[i]
}
</code></pre>

<p>Which, in your particular case, simplifies to,</p>

<pre><code>func test(args ...string) {
    var msg map[string]interface{}
    msg[""product""] = args[0]
    msg[""key""] = args[1]
    msg[""signature""] = args[2]
    msg[""string_to_sign""] = args[3]
}
</code></pre>
","25800388"
"os.Error - string value (Golang)","21608","","<p>How do I get the string value of os.Error? ie. assign to a variable.</p>
","<p>For example,</p>

<pre><code>package main

import (
    ""errors""
    ""fmt""
)

func main() {
    err := errors.New(""an error message"")
    s := err.Error()
    fmt.Printf(""type: %T; value: %q\n"", s, s)
}
</code></pre>

<p>Output:</p>

<pre><code>type: string; value: ""an error message""
</code></pre>
","6012756"
"How do I create an executable from Golang that doesn't open a command (cmd) window when run?","21534","","<p>I created an application that I want to run invisibly in the background (no command / cmd console). How do I do this?</p>

<p>(This is for Windows, tested on Windows 7 Pro 64 bit)</p>
","<p>The documentation found online says I can compile with something along the lines of,</p>

<p><code>go build -ldflags -Hwindowsgui filename.go</code></p>

<p>But this gives an error: <code>unknown flag -Hwindowsgui</code></p>

<p>With more recent (1.1?) versions of the compiler, this should work:</p>

<p><code>go build -ldflags -H=windowsgui filename.go</code></p>

<p>When I continued searching around I found a note that the official documentation should be updated soon, but in the meantime there are a lot of older-style example answers out there that error.</p>
","23250506"
"Access HTTP response as string in Go","21531","","<p>I'd like to parse the response of a web request, but I'm getting trouble accessing it as string. </p>

<pre><code>func main() {
    resp, err := http.Get(""http://google.hu/"")
    if err != nil {
        // handle error
    }
    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)

    ioutil.WriteFile(""dump"", body, 0600)

    for i:= 0; i &lt; len(body); i++ {
        fmt.Println( body[i] ) // This logs uint8 and prints numbers
    }

    fmt.Println( reflect.TypeOf(body) )
    fmt.Println(""done"")
}
</code></pre>

<p>How can I access the response as string? <code>ioutil.WriteFile</code> writes correctly the response to a file. </p>

<p>I've already checked the package reference but it's not really helpful.</p>
","<p><code>bs := string(body)</code> should be enough to give you a string.</p>

<p>From there, you can use it as a regular string.</p>

<p>A bit as <a href=""https://groups.google.com/forum/#!topic/golang-nuts/Zdo8YVYz08k"" rel=""noreferrer"">in this thread</a>:</p>

<pre><code>var client http.Client
resp, err := client.Get(url)
if err != nil {
    // err
}
defer resp.Body.Close()

if resp.StatusCode == http.StatusOK {
    bodyBytes, err2 := ioutil.ReadAll(resp.Body)
    bodyString := string(bodyBytes)
}
</code></pre>

<p>See also <a href=""http://dlintw.github.io/gobyexample/public/http-client.html"" rel=""noreferrer"">GoByExample</a>.</p>

<p>As commented below (and in <a href=""https://stackoverflow.com/users/3435777/zzn"">zzn</a>'s <a href=""https://stackoverflow.com/a/38674536/6309"">answer</a>), this is a <strong><a href=""https://blog.golang.org/slices#TOC_12"" rel=""noreferrer"">conversion</a></strong> (see <a href=""https://golang.org/ref/spec#Conversions"" rel=""noreferrer"">spec</a>).<br>
See ""<a href=""https://stackoverflow.com/a/14373714/6309"">How expensive is <code>[]byte(string)</code>?</a>"" (reverse problem, but the same conclusion apply) where <a href=""https://stackoverflow.com/users/1065241/zzzz"">zzzz</a> mentioned:</p>

<blockquote>
  <p>Some conversions are the same as a cast, like <code>uint(myIntvar)</code>, which just reinterprets the bits in place. </p>
</blockquote>

<p><a href=""https://stackoverflow.com/users/620399/sonia"">Sonia</a> adds:</p>

<blockquote>
  <p>Making a string out of a byte slice, definitely involves allocating the string on the heap. The immutability property forces this.<br>
  Sometimes you can optimize by doing as much work as possible with []byte and then creating a string at the end. The <a href=""https://golang.org/pkg/bytes/#Buffer"" rel=""noreferrer""><code>bytes.Buffer</code></a> type is often useful.</p>
</blockquote>
","38673698"
"Check if string is int golang","21521","","<p>How can I check if a string value is an integer or not in Golang?</p>

<p>Something like</p>

<pre><code>v := ""4""
if isInt(v) {
  fmt.Println(""We have an int, we can safely cast this with strconv"")
}
</code></pre>

<p>Note: I know that <code>strconv.Atoi</code> returns an error, but is there any other function to do this?</p>

<p><s>The problem with <code>strconv.Atoi</code> is that it will return <code>7</code> for <code>""a7""</code></s></p>
","<p>As you said, you can use strconv.Atoi for this. </p>

<pre><code>if _, err := strconv.Atoi(v); err == nil {
    fmt.Printf(""%q looks like a number.\n"", v)
}
</code></pre>

<p>You could use <code>scanner.Scanner</code> (from <code>text/scanner</code>) in mode <code>ScanInts</code>, or use a regexp to validate the string, but <code>Atoi</code> is the right tool for the job.</p>
","22593449"
"Read from initial stdin in GO?","21438","","<p>I would like to read from the original stdin of a go program. For example, if I did <code>echo test stdin | go run test.go</code>, I would want to have access to ""test stdin"". I've tried reading from <code>os.Stdin</code>, but if there's nothing in it, then it will wait for input. I also tried checking the size first, but the <code>os.Stdin.Stat().Size()</code> is 0 even when input is passed in.</p>

<p>What can I do? </p>
","<p>I think your question per se has no sensible answer because there's just no such thing as ""initial stdin"".  Unix-like OSs, and Windows implement the concept of <a href=""http://en.wikipedia.org/wiki/Stdin"" rel=""noreferrer"">""standard streams""</a>, which works like this (simplified): when a process is created, it automagically has three file descriptors (handles in Windows) open &mdash; stdin, stdout and stderr.  No doubts, you're familiar with this concept, but I'd like to stress the meaning of the word ""stream"" there &mdash; in your example, when you call</p>

<pre><code>$ echo 'test stdin' | ./stdin
</code></pre>

<p>the shell creates a <a href=""http://linux.die.net/man/2/pipe"" rel=""noreferrer"">pipe</a>, spawns two processes (one for <code>echo</code> and one for your binary) and makes use of the pipe it created: the pipe's write FD is attached to the <code>echo</code>'s stdout and the pipe's read FD is attached to your binary's stdin.  Then whatever the <code>echo</code> process pleases to write to its stdout is piped (sic!) to the stdin of your process.
(In reality most today's shells implement <code>echo</code> as a built-in primitive but this does not in any way change the semantics; your could as well have tried <code>/bin/echo</code> instead, which is a real program.  Also note that I just used <code>./stdin</code> to refer to your program &mdash; this is for clarity, as <code>go run stdin.go</code> would do exactly this, in the end.)</p>

<p>Note several crucial things here:</p>

<ul>
<li>The writing process (<code>echo</code> in your case) is not oblidged to write anything to its stdout (for instance, <code>echo -n</code> would not write anything to its stdout and exit successfully).</li>
<li>It's also able to make arbitrary delays writing its data (either because it wants to make such delays or because it has been preempted by the OS or sleeps in some syscall waiting on some busy system resource etc).</li>
<li>The OS buffers transfers over pipes.  This means what the writing process sends to a pipe, might come out in arbitrary chunks on the reading side.<sup>1</sup></li>
<li>There are only two ways to know the writing side has no more data to send over the pipe:

<ul>
<li>Somehow encode this in the data itself (this means using an agreed upon data transfer protocol between the writer and the reader).</li>
<li>The writer might close its side of the pipe which would result in the ""end of file"" condition on the reader side (but only after the buffer is drained and one another call to <code>read</code> is attempted, which fails).</li>
</ul></li>
</ul>

<p>Let's wrap this up: the behaviour you're observing is correct and normal.  If you expect to get any data from stdin, you must not expect it to be readily available.  If you also don't want to block on stdin, then create a goroutine which would do blocking reads from stdin in an endless loop (but checking for the EOF condition) and pass collected data up over a channel (possibly after certain processing, if needed).</p>

<p><sup>1</sup> This is why certain tools which usually occur between two pipes in a pipeline, such as <code>grep</code>, might have special options to make them flush their stdout after writing each line &mdash; read about the <code>--line-buffered</code> option in the <a href=""http://linux.die.net/man/1/grep"" rel=""noreferrer""><code>grep</code> manual page</a> for one example.  People who are not aware of this ""full buffering by default"" semantics are puzzled why <code>tail -f /path/to/some/file.log | grep whatever | sed ...</code> seems to stall and not display anything when it's obvious the monitored file gets updated.</p>

<hr>

<p>As a side note: if you were to run your binary ""as is"", like in</p>

<pre><code>$ ./stdin
</code></pre>

<p>that would not meant the spawned process would not have stdin (or ""initial stdin"" or whaveter), instead, its stdin would be connected to the same stream your shell receives your keyboard import from (so you could directly type something to your process's stdin).</p>

<p>The only sure way to have a process's stdin connected to nowhere is to use</p>

<pre><code>$ ./stdin &lt;/dev/null
</code></pre>

<p>on Unix-like OSes and</p>

<pre><code>C:\&gt; stdin &lt;NUL
</code></pre>

<p>on Windows.  This <a href=""http://en.wikipedia.org/wiki/Null_device"" rel=""noreferrer"">""null device""</a> makes the process see EOF on the first <code>read</code> from its stdin.</p>
","12384207"
"Golang json Unmarshal ""unexpected end of JSON input""","21392","","<p>I am working on some code to parse the JSON data from an HTTP response. The code I have looks something like this:</p>

<pre><code>type ResultStruct struct {
    result []map[string]string
}

var jsonData ResultStruct
err = json.Unmarshal(respBytes, &amp;jsonData)
</code></pre>

<p>The json in the <code>respBytes</code> variable looks like this:</p>

<pre><code>{
 ""result"": [
  {
   ""id"": ""ID 1""
  },
  {
   ""id"": ""ID 2""
  }
 ]
}
</code></pre>

<p>However, <code>err</code> is not nil. When I print it out it says <code>unexpected end of JSON input</code>. What is causing this? The JSON seems to valid. Does this error have something to do with my custom struct?</p>

<p>Thanks in advance!</p>
","<p>The <code>unexpected end of JSON input</code> is the result of <a href=""https://github.com/golang/go/blob/9af454c588ee0bef7fc6ae588e2b2e866edcb915/src/encoding/json/scanner.go#L160"" rel=""nofollow"">a syntax error</a> in the JSON input (likely a missing <code>""</code>, <code>}</code>, or <code>]</code>). The error does not depend on the type of the value that you are decoding to.</p>

<p>I ran the code with the example JSON input <a href=""http://play.golang.org/p/bhtjDbwKJi"" rel=""nofollow"">on the playground</a>. It runs without error.</p>

<p>The code does not decode anything because the <code>result</code> field is not exported. If you export the result field:</p>

<pre><code>type ResultStruct struct {
   Result []map[string]string
}
</code></pre>

<p>then the input is decoded as shown in this <a href=""http://play.golang.org/p/KLYR9MTKnm"" rel=""nofollow"">playground example</a>.</p>

<p>I suspect that you are not reading the entire response body in your application. I suggest decoding the JSON input using:</p>

<pre><code>err := json.NewDecoder(resp.Body).Decode(&amp;jsonData)
</code></pre>

<p>The decoder reads directly from the response body.</p>
","27995141"
"How to reduce compiled file size?","21391","","<p>Lets compare c and go:
Hello_world.c :</p>

<pre><code>#include&lt;stdio.h&gt;
int main(){
    printf(""Hello world!"");
}
</code></pre>

<p>Hello_world.go:</p>

<pre><code>package main
import ""fmt""
func main(){
    fmt.Printf(""Hello world!"")
}
</code></pre>

<p>Compile both:</p>

<pre><code>$gcc Hello_world.c -o Hello_c 
$8g Hello_world.go -o Hello_go.8
$8l Hello_go.8 -o Hello_go
</code></pre>

<p>and ... what is it?</p>

<pre><code>$ls -ls
... 5,4K 2010-10-05 11:09 Hello_c
... 991K 2010-10-05 11:17 Hello_go
</code></pre>

<p>About 1Mb Hello world. Are you kidding me?
What I do wrong?</p>

<p>(strip Hello_go   -> 893K only)</p>
","<p>Is it a problem that the file is larger? I don't know Go but I would assume that it statically links some runtime lib which is not the case for the C program. But probably that is nothing to worry about as soon as your program gets larger. </p>

<p>As described <a href=""http://golang.org/doc/gccgo_install.html"" rel=""noreferrer"">here</a>, statically linking the Go runtime is the default. That page also tells you how to set up for dynamic linking.</p>
","3861677"
"How can I use golang's ""compress/gzip"" package to gzip a file?","21383","","<p>I'm new to golang, and can't figure out how to use golang's ""compress/gzip"" package to my advantage. Basically, I just want to write something to a file, gzip it and read it directly from the zipped format through another script. I would really appreciate if someone could give me an example on how to do this.</p>
","<p>All the compress packages implement the same interface. You would use something like this to compress:</p>

<pre><code>var b bytes.Buffer
w := gzip.NewWriter(&amp;b)
w.Write([]byte(""hello, world\n""))
w.Close()
</code></pre>

<p>And this to unpack:</p>

<pre><code>r, err := gzip.NewReader(&amp;b)
io.Copy(os.Stdout, r)
r.Close()
</code></pre>
","16890765"
"How to start a Go program as a daemon in Ubuntu?","21351","","<p>What is the proper way to start a Go program as a daemon in Ubuntu ? I will then monitor it with Monit. Should I just do something like:</p>

<pre><code>go run myapp.go &amp;
</code></pre>

<p>Are there things specific to Go that I should take into account ?</p>
","<p>You should build an executable for your program (<code>go build</code>) and then either write a script for <a href=""https://launchpad.net/upstart"">upstart</a> and it will run your program as a daemon for you, or use an external tool like <a href=""http://software.clapper.org/daemonize/"">daemonize</a>. I prefer the latter solution, because it does not depend on a system-dependent upstart. With daemonize you can start your application like</p>

<pre><code>daemonize -p /var/run/myapp.pid -l /var/lock/subsys/myapp -u nobody /path/to/myapp.exe
</code></pre>

<p>This will give you a well-behaving unix daemon process with all necessary daemon preparations done by daemonize.</p>
","10068950"
"How to do ""go get"" on a specific tag of a github repository","21341","","<p>I am trying to compile the InfluxDB database (version v0.8.8) using <code>go get github.com/influxdb/influxdb</code></p>

<p>But this pulls the master branch, and I need the <code>v0.8.8</code> tag.</p>

<p>I have tried to do:  <code>go get github.com/influxdb/influxdb/releases/tag/v0.8.8</code> but this fails saying unable to find.</p>

<p>I also tried to do a regular <code>go get</code> of the master branch, and then manually checking out the tag using <code>git</code> in <code>GOPATH/src/github...</code> in order to set the corret version.</p>

<p>The problem using the last approach is that when I try to pull the dependencies with <code>go get -u -f ./...</code> it tries to find them in the master branch, and some of them do not exist on the master branch...</p>

<p><strong>TL;DR</strong>: perform <code>go get</code> on a specific github tag, and pull the correct dependencies.</p>
","<p>It is not possible using the <code>go get</code> tool. Instead you need to use a third party go package management tool or create your own forks for the packages that you wish to manage more fine grained.</p>

<p>Spoke to a guy that works at Google and he acknowledged this problem/requirement, he said that vendoring which his team used was bulky and they will probably solve it with the official tools soon.</p>

<p><strong>Read more:</strong></p>

<ul>
<li><a href=""https://github.com/golang/go/wiki/PackageManagementTools"">Reference of third party package management tools</a></li>
<li><a href=""https://groups.google.com/forum/#!topic/golang-dev/nMWoEAG55v8%5B1-25%5D"">Blog post by golang team discussing the approach for implementing vendoring</a></li>
</ul>

<p><strong>Vendoring in Go</strong></p>

<p>Vendoring has been <a href=""https://blog.golang.org/go1.6"">released from experimental in go 1.6</a> (after this post was initially written) that makes the process of using specific tags / versions of packages using third party tools easier. <code>go get</code> does still not have the functionality to fetch specific tags or versions.</p>

<p>More about how vendoring works: <a href=""https://blog.gopheracademy.com/advent-2015/vendor-folder/"">Understanding and using the vendor folder</a></p>
","30188904"
"Golang. What to use? http.ServeFile(..) or http.FileServer(..)?","21329","","<p>I'm a little bit confused. Much of examples shows usage of both: <code>http.ServeFile(..)</code> and <code>http.FileServer(..)</code>, but seems they have very close functionality. Also I have found no information about how to set custom NotFound handler. </p>

<pre><code>// This works and strip ""/static/"" fragment from path
fs := http.FileServer(http.Dir(""static""))
http.Handle(""/static/"", http.StripPrefix(""/static/"", fs))

// This works too, but ""/static2/"" fragment remains and need to be striped manually
http.HandleFunc(""/static2/"", func(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, r.URL.Path[1:])
})

http.ListenAndServe("":8080"", nil)
</code></pre>

<p>I've tried to read source code and both of them use <code>serveFile(ResponseWriter, *Request, FileSystem, string, bool)</code> underlying function. However <code>http.FileServer</code> return <code>fileHandler</code> with its own <code>ServeHTTP()</code> method and make some preparation work before serving file (eg path.Clean()).</p>

<p>So why need this separation? Which method better to use? And how can I set custom NotFound handler, for example when requested file not found?</p>
","<p>The main difference is that <code>http.FileServer</code> does effectively almost 1:1 mapping of an HTTP prefix with a filesystem. In plain english, it serves up an entire directory path. and all its children.</p>

<p>Say you had a  directory called <code>/home/bob/static</code> and you had this setup: </p>

<pre><code>fs := http.FileServer(http.Dir(""/home/bob/static""))
http.Handle(""/static/"", http.StripPrefix(""/static"", fs))
</code></pre>

<p>Your server would take requests for e.g. <code>/static/foo/bar</code> and serve whatever is at <code>/home/bob/static/foo/bar</code> (or 404)</p>

<p>In contrast, the <code>ServeFile</code> is a lower level helper that can be used to implement something similar to FileServer, or implement your own path munging potentially, and any number of things. It simply takes the named local file and sends it over the HTTP connection. By itself, it won't serve a whole directory prefix (unless you wrote a handler that did some lookup similar to FileServer)</p>

<p><strong>NOTE</strong> Serving up a filesystem naively is a potentially dangerous thing (there are potentially ways to break out of the rooted tree) hence I recommend that unless you <em>really</em> know what you're doing, use <code>http.FileServer</code> and <code>http.Dir</code> as they include checks to make sure people can't break out of the FS, which <code>ServeFile</code> doesn't.</p>

<p><em>Addendum</em>
Your secondary question, how do you do a custom NotFound handler, unfortunately, is not easily answered. Because this is called from internal function <code>serveFile</code> as you noticed, there's no super easy place to break into that. There are potentially some sneaky things like intercepting the response with your own <code>ResponseWriter</code> which intercepts the 404 response code, but I'll leave that exercise to you.</p>
","28798174"
"In Go, does it make sense to write non-blocking code?","21328","","<p>coming from node.js point of view, where all code is non-blocking.</p>

<p>In Go, non-blocking is easily achieved using channels.</p>

<p>if one were writing a node.js type server in go, does it make sense to make it non-blocking?  for example, having a database connect() function return a channel, as versus blocking while waiting for the connection to occur.</p>

<p>to me, this seems the correct approach</p>

<p>but ...</p>
","<p>Blocking and non-blocking aren't really about performance, they are about an interface.
If you have a single thread of execution then a blocking call prevents your program from doing any useful work while it's waiting.
But if you have multiple threads of execution a blocking call doesn't really matter because you can just leave that thread blocked and do useful work in another.</p>

<p>In Go, a goroutine is swapped out for another one when it blocks on I/O. The Go runtime uses non-blocking I/O syscalls to avoid the operating system blocking the thread so a different goroutine can be run on it while the first is waiting for it's I/O.</p>

<p>Goroutines are really cheap so writing non-blocking style code is not needed.</p>
","6335389"
"How can I handle http requests of different methods to / in Go?","21276","","<p>I'm trying to figure out the best way to handle requests to <code>/</code> and only <code>/</code> in Go and handle different methods in different ways. Here's the best I've come up with:</p>

<pre><code>package main

import (
    ""fmt""
    ""html""
    ""log""
    ""net/http""
)

func main() {
    http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) {
        if r.URL.Path != ""/"" {
            http.NotFound(w, r)
            return
        }

        if r.Method == ""GET"" {
            fmt.Fprintf(w, ""GET, %q"", html.EscapeString(r.URL.Path))
        } else if r.Method == ""POST"" {
            fmt.Fprintf(w, ""POST, %q"", html.EscapeString(r.URL.Path))
        } else {
            http.Error(w, ""Invalid request method."", 405)
        }
    })

    log.Fatal(http.ListenAndServe("":8080"", nil))
}
</code></pre>

<p>Is this idiomatic Go? Is this the best I can do with the standard http lib? I'd much rather do something like <code>http.HandleGet(""/"", handler)</code> as in express or Sinatra. Is there a good framework for writing simple REST services? <a href=""https://github.com/hoisie/web"" rel=""noreferrer"">web.go</a> looks attractive but appears stagnant.</p>

<p>Thank you for your advice.</p>
","<p>To ensure that you only serve the root: You're doing the right thing. In some cases you would want to call the ServeHttp method of an http.FileServer object instead of calling NotFound; it depends whether you have miscellaneous files that you want to serve as well.</p>

<p>To handle different methods differently: Many of my HTTP handlers contain nothing but a switch statement like this:</p>

<pre><code>switch r.Method {
case ""GET"":
    // Serve the resource.
case ""POST"":
    // Create a new record.
case ""PUT"":
    // Update an existing record.
case ""DELETE"":
    // Remove the record.
default:
    // Give an error message.
}
</code></pre>

<p>Of course, you may find that a third-party package like gorilla works better for you.</p>
","15253422"
"dot dot dot in Golang. interface with empty braces","21251","","<p>This is a Golang code piece I have question about:
what is ""a"" in this function?</p>

<pre><code>func DPrintf(format string, a ...interface{}) (n int, err error) {
  if Debug &gt; 0 {
    n, err = fmt.Printf(format, a...)
  }
  return
</code></pre>

<p>Could anyone tell me what is dot dot dot  here?
And what does <code>...interface{}</code> do?</p>

<p>This dot dot dot  is really hard to google,want to know meanings of them
Thanks!</p>
","<p>A parameter type prefixed with three dots (...) is called a <em>variadic parameter</em>. That means you can pass any number or arguments into that parameter (just like with <code>fmt.Printf()</code>). The function will receive the list of arguments for the parameter as a slice of the type declared for the parameter (<code>[]interface{}</code> in your case). The <a href=""http://golang.org/ref/spec#Function_types"" rel=""nofollow noreferrer"">Go Specification</a> states:</p>

<blockquote>
  <p>The final parameter in a function signature may have a type prefixed with .... A function with such a parameter is called variadic and may be invoked with zero or more arguments for that parameter.</p>
</blockquote>

<p>A parameter:</p>

<pre><code>a ...interface{}
</code></pre>

<p>Is, for the function equivalent to:</p>

<pre><code>a []interface{}
</code></pre>

<p>The difference is how you pass the arguments to such a function. It is done either by giving each element of the slice separately, or as a single slice, in which case you will have to suffix the slice-value with the three dots. The following examples will result in the same call:</p>

<pre><code>fmt.Println(""First"", ""Second"", ""Third"")
</code></pre>

<p>Will do the same as:</p>

<pre><code>s := []interface{}{""First"", ""Second"", ""Third""}
fmt.Println(s...)
</code></pre>

<p>This is explained quite well in the <a href=""http://golang.org/ref/spec#Passing_arguments_to_..._parameters"" rel=""nofollow noreferrer"">Go Specification</a> as well:</p>

<blockquote>
  <p>Given the function and calls</p>

<pre><code>   func Greeting(prefix string, who ...string)
   Greeting(""nobody"")
   Greeting(""hello:"", ""Joe"", ""Anna"", ""Eileen"")
</code></pre>
  
  <p>within <code>Greeting</code>, <code>who</code> will have the value <code>nil</code> in the first call, and <code>[]string{""Joe"", ""Anna"", ""Eileen""}</code> in the second.</p>
  
  <p>If the final argument is assignable to a slice type <code>[]T</code>, it may be passed unchanged as the value for a <code>...T</code> parameter if the argument is followed by <code>...</code>. In this case no new slice is created.</p>
  
  <p>Given the slice <code>s</code> and call</p>

<pre><code>   s := []string{""James"", ""Jasmine""}
   Greeting(""goodbye:"", s...)
</code></pre>
  
  <p>within <code>Greeting</code>, <code>who</code> will have the same value as <code>s</code> with the same underlying array.</p>
</blockquote>
","23669857"
"Golang function pointer as a part of a struct","21102","","<p>I have the following code:</p>

<pre><code>type FWriter struct {
    WriteF func(p []byte) (n int,err error)
}

func (self *FWriter) Write(p []byte) (n int, err error) {
    return self.WriteF(p)
}

func MyWriteFunction(p []byte) (n int, err error) { 
    // this function implements the Writer interface but is not named ""Write""
    fmt.Print(""%v"",p)
    return len(p),nil
}

MyFWriter := new(FWriter)
MyFWriter.WriteF = MyWriteFunction
// I want to use MyWriteFunction with io.Copy
io.Copy(MyFWriter,os.Stdin)
</code></pre>

<p>What I am trying to do is to create a Writer interface to wrap MyWriteFunction because it is not named ""Write"" and I cant use it with anything that require a ""Writer"" interface.</p>

<p>this code wont work as it complains:</p>

<pre><code>method MyWriterFunction is not an expression, must be called
</code></pre>

<p>what am I doing wrong here? how can I set WriteF to be MyWriteFunction?</p>

<p>Note: I simplified this problem as much as I can and in reality I have a struct which have MyWriteFunction AND a normal Write function so it gets a little bit complicated... (also if there is a better way to solve this problem of mine then Ill be glad to hear it!)</p>

<p>Thanks!!</p>

<hr>

<p>EDIT:: I have notice my typo and fixed it (MyWriterFunction --> MyWriteFunction)</p>

<p>I think I over-simplified the question in a manner that mislead you of my original intent.
Following the Anonymous comment and peterSO kind comments I have re-created the error to better demonstrate my problem:</p>

<pre><code>package main

import (
    ""fmt""
    ""io""
    ""strings""
)

type ProxyWrite interface {
    Write(p []byte) (n int, err error)
    SpecialWrite(p []byte) (n int, err error)
}

type Implementer struct {
    counter int
}

func (self Implementer) Write(p []byte) (n int, err error) {
    fmt.Print(""Normal write: %v"", p)
    return len(p),nil
}

func (self Implementer) SpecialWrite(p []byte) (n int, err error) {
    fmt.Print(""Normal write: %v\n"", p)
    fmt.Println(""And something else"")
    self.counter += 1
    return len(p),nil
}


type WriteFunc func(p []byte) (n int, err error)

func (wf WriteFunc) Write(p []byte) (n int, err error) {
    return wf(p)
}

func main() {
    Proxies := make(map[int]ProxyWrite,2)
    Proxies[1] = new(Implementer)
    Proxies[2] = new(Implementer)

    /* runs and uses the Write method normally */
    io.Copy(Proxies[1], strings.NewReader(""Hello world""))
    /* gets ./main.go:45: method Proxies[1].SpecialWrite is not an expression, must be called */
    io.Copy(WriteFunc(Proxies[1].SpecialWrite), strings.NewReader(""Hello world""))
}
</code></pre>

<p>I hope it clarify what I meant to present on the first attempt.</p>

<p>any thoughts?</p>
","<p>There's a typo in your code, but wrapping the func into a struct is unnecessary anyway. Instead, you can just define a WriteFunc type that wraps a function, and that you can define a Write method on. Here's a full example.</p>

<pre><code>package main

import (
    ""fmt""
    ""io""
    ""strings""
)

type WriteFunc func(p []byte) (n int, err error)

func (wf WriteFunc) Write(p []byte) (n int, err error) {
    return wf(p)
}

func myWrite(p []byte) (n int, err error) {
    fmt.Print(""%v"", p)
    return len(p), nil
}

func main() {
    io.Copy(WriteFunc(myWrite), strings.NewReader(""Hello world""))
}
</code></pre>
","20729726"
"Golang, Go : convert string to float number","21088","","<p><a href=""http://play.golang.org/p/7kR2uZlV5-"" rel=""noreferrer"">http://play.golang.org/p/7kR2uZlV5-</a></p>

<p>This is my playground link.
I have an array of numbers but in string. I tried to convert them to float number but it does not give me anything. What is wrong with it? </p>

<pre><code>var numbers []float64

for _, elem := range str_numbers {
    i, err := strconv.ParseFloat(elem, 64)
    if err != nil {
        numbers = append(numbers, i)
    }
}
fmt.Println(numbers)    
    // this gives me nothing  []
</code></pre>
","<p>Change</p>

<pre><code>if err != nil {
</code></pre>

<p>to</p>

<pre><code>if err == nil {
</code></pre>

<p>(You may be doing this already, but <a href=""https://github.com/smartystreets/goconvey"">unit testing</a> is a great way to catch bugs like this.)</p>
","19215461"
"Can't get Golang to work in Ubuntu","21003","","<p>Ok, So I've downloaded Go 1.1 and put it into $HOME/Documents/go.</p>

<p>Then, I've modified my <code>.bashrc</code> to be:</p>

<pre><code>export GOPATH=$HOME/Documents/go                                                
export GOROOT=$GOPATH
export GOARCH=amd64
export GOOS=linux
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN
</code></pre>

<p>Than I've sourced the <code>.bashrc</code>, and tried:</p>

<pre><code>jan@janpc:~$ go version
go version go1.1 linux/amd64
</code></pre>

<p>But I can't get it to compile or install any dependencies.
Eg. I try to run my little test program:</p>

<pre><code>jan@janpc:~/Documents/go/src/github.com/jan/scrypt$ go run scrypt.go 
warning: GOPATH set to GOROOT (/home/jan/Documents/go) has no effect
scrypt.go:9:3: cannot find package ""github.com/dchest/scrypt"" in any of:
    /home/jan/Documents/go/src/pkg/github.com/dchest/scrypt (from $GOROOT)
    ($GOPATH not set)
jan@janpc:~/Documents/go/src/github.com/jan/scrypt$ 
</code></pre>

<p>And when I try to install dependencies:</p>

<pre><code>jan@janpc:~/Documents/go/src/github.com/jan/scrypt$ go get ""github.com/dchest/scrypt""
warning: GOPATH set to GOROOT (/home/jan/Documents/go) has no effect
package github.com/dchest/scrypt: cannot download, $GOPATH must not be set to $GOROOT. For more details see: go help gopath
</code></pre>

<p>It compiles and works fine on mac. I can't figure out whats wrong with my config, if I try to remove <code>$GOROOT</code> or <code>$GOPATH</code> nothing works, and I don't know what else to set them to, other than the path to Go.</p>

<p>EDIT:
There is no $GOROOT set on my mac. But if I remove <code>$GOROOT</code> on ubuntu, I get bunch of errors like these when I try to compile.</p>

<pre><code>cannot find package ""fmt"" in any of:
    /usr/local/go/src/pkg/fmt (from $GOROOT)
    /home/jan/Documents/go/src/fmt (from $GOPATH)
</code></pre>
","<p>Your enviroment variable you've set by</p>

<pre><code>$ export GOROOT=$GOPATH
</code></pre>

<p>is a mistake. Nowhere is such setting required nor recommended. Actually, it cripples the environment seen by the Go build system.</p>

<p>Remove that setting, recreate your environment (<code>. bashrc</code>) or open a new terminal and it should work (if no other problems exists).</p>

<p>Additionally, if you're not cross compiling, I recommend to remove also these:</p>

<pre><code>export GOARCH=amd64
export GOOS=linux
</code></pre>

<p>In short, proper exported GOPATH is the <em>only</em> environment variable which is, in the first approximation, really needed. Some more hints <a href=""http://golang.org/doc/install/source#environment"">here</a>.</p>

<p>EDIT: Okay, so I've downloaded the binary distribution (go1.1.linux-amd64.tar.gz). Quoting from README:</p>

<hr>

<blockquote>
  <p>Binary Distribution Notes</p>
  
  <p>If you have just untarred a binary Go distribution, you need to set
  the environment variable $GOROOT to the full path of the go
  directory (the one containing this README).  You can omit the
  variable if you unpack it into /usr/local/go, or if you rebuild
  from sources by running all.bash (see doc/install.html).
  You should also add the Go binary directory $GOROOT/bin
  to your shell's path.</p>
  
  <p>For example, if you extracted the tar file into $HOME/go, you might
  put the following in your .profile:</p>
</blockquote>

<pre><code>export GOROOT=$HOME/go
export PATH=$PATH:$GOROOT/bin
</code></pre>

<blockquote>
  <p>See doc/install.html for more details.</p>
</blockquote>

<hr>

<p>From this it's clear that you must have not followed properly the above instructions. Fix that and I hope it will work for you then.</p>
","16977772"
"Serving static content with a root URL with the Gorilla toolkit","20911","","<p>I am attempting to use the Gorilla toolkit's <a href=""http://www.gorillatoolkit.org/pkg/mux"" rel=""noreferrer""><code>mux</code> package</a> to route URLs in a Go web server.  Using <a href=""https://stackoverflow.com/questions/14081066/gae-golang-gorilla-mux-404-page-not-found/14082905#14082905"">this question</a> as a guide I have the following Go code: </p>

<pre><code>func main() {
    r := mux.NewRouter()
    r.Handle(""/"", http.FileServer(http.Dir(""./static/"")))
    r.HandleFunc(""/search/{searchTerm}"", Search)
    r.HandleFunc(""/load/{dataId}"", Load)
    http.Handle(""/"", r)
    http.ListenAndServe("":8100"", nil)
}
</code></pre>

<p>The directory structure is:</p>

<pre><code>...
main.go
static\
  | index.html
  | js\
     | &lt;js files&gt;
  | css\
     | &lt;css files&gt;
</code></pre>

<p>The Javascript and CSS files are referenced in <code>index.html</code> like this:</p>

<pre><code>...
&lt;link rel=""stylesheet"" href=""css/redmond/jquery-ui.min.css""/&gt;
&lt;script src=""js/jquery.min.js""&gt;&lt;/script&gt;
...
</code></pre>

<p>When I access <code>http://localhost:8100</code> in my web browser the <code>index.html</code> content is delivered successfully, however, all the <code>js</code> and <code>css</code> URLs return 404s.</p>

<p>How can I get the program to serve files out of <code>static</code> sub-directories?</p>
","<p>I think you might be looking for <code>PathPrefix</code>... </p>

<pre><code>func main() {
    r := mux.NewRouter()
    r.HandleFunc(""/search/{searchTerm}"", Search)
    r.HandleFunc(""/load/{dataId}"", Load)
    r.PathPrefix(""/"").Handler(http.FileServer(http.Dir(""./static/"")))
    http.Handle(""/"", r)
    http.ListenAndServe("":8100"", nil)
}
</code></pre>
","15835185"
"How do you get a Golang program to print the line number of the error it just called?","20900","","<p>I was trying to throw errors in my Golang program with <code>log.Fatal</code> but, <code>log.Fatal</code> does not also print the line where the <code>log.Fatal</code> was ran. Is there no way of getting access to the line number that called log.Fatal? i.e. is there a way to get the line number when throwing an error?</p>

<p>I was trying to google this but was unsure how. The best thing I could get was <a href=""http://golang.org/pkg/runtime/debug/#PrintStack"">printing the stack trace</a>, which I guess is good but might be a little too much. I also don't want to write <code>debug.PrintStack()</code> every time I need the line number, I am just surprised there isn't any built in function for this like <code>log.FatalStackTrace()</code> or something that isn't costume.</p>

<p>Also, the reason I do not want to make my own debugging/error handling stuff is because I don't want people to have to learn how to use my special costume handling code. I just want something standard where people can read my code later and be like </p>

<blockquote>
  <p>""ah ok, so its throwing an error and doing X...""</p>
</blockquote>

<p>The less people have to learn about my code the better :)</p>
","<p>You can set the Flags on either a custom Logger, or the default to include <a href=""http://golang.org/pkg/log/#pkg-constants""><code>Llongfile</code> or <code>Lshortfile</code></a></p>

<pre><code>// to change the flags on the default logger
log.SetFlags(log.LstdFlags | log.Lshortfile)
</code></pre>
","24809859"
"os.MkDir and os.MkDirAll permission value?","20639","","<p>I'm trying to create a log file at the start of my program.</p>

<p>I need to check if a ""/log"" directory exists, if it doesn't create the directory then move on to creating the log file.</p>

<p>Well I tried to use os.Mkdir (as well as os.MkDirAll), but no matter what value I put into the second parameter I get a locked out folder with no permissions. What value should this be in order to get a read / write for user folder? I thought it would be 0x700 but it doesn't seem to work.</p>

<p>Thanks!</p>
","<p>You can use octal notation directly:</p>

<pre><code>os.Mkdir(""dirname"", 0700)
</code></pre>

<p><strong>Permission Bits</strong></p>

<pre><code>+-----+---+--------------------------+
| rwx | 7 | Read, write and execute  |
| rw- | 6 | Read, write              |
| r-x | 5 | Read, and execute        |
| r-- | 4 | Read,                    |
| -wx | 3 | Write and execute        |
| -w- | 2 | Write                    |
| --x | 1 | Execute                  |
| --- | 0 | no permissions           |
+------------------------------------+

+------------+------+-------+
| Permission | Octal| Field |
+------------+------+-------+
| rwx------  | 0700 | User  |
| ---rwx---  | 0070 | Group |
| ------rwx  | 0007 | Other |
+------------+------+-------+
</code></pre>

<p><strong>Common Permission Usages</strong></p>

<p><strong>0755</strong> Commonly used on web servers. The owner can read, write, execute. Everyone else can read and execute but not modify the file.</p>

<p><strong>0777</strong> Everyone can read write and execute. On a web server, it is not advisable to use ‘777’ permission for your files and folders, as it allows anyone to add malicious code to your server. </p>

<p><strong>0644</strong> Only the owner can read and write. Everyone else can only read. No one can execute the file.</p>

<p><strong>0655</strong> Only the owner can read and write, but not execute the file. Everyone else can read and execute, but cannot modify the file.</p>

<p><em>Source: <a href=""http://www.maketecheasier.com/file-permissions-what-does-chmod-777-means/"">www.maketecheasier.com/file-permissions-what-does-chmod-777-means/</a></em></p>

<p><strong>Permissions Calculator</strong></p>

<p><a href=""http://permissions-calculator.org/""><img src=""https://i.stack.imgur.com/Qb9jq.png"" alt=""permissions calculator""></a></p>

<p>A handy <a href=""http://permissions-calculator.org/"">permissions calculator</a>.</p>
","31151508"
"Getting ""bytes.Buffer does not implement io.Writer"" error message","20597","","<p>I'm trying to have some Go object implement io.Writer, but writes to a string instead of a file or file-like object. I thought <code>bytes.Buffer</code> would work since it implements <code>Write(p []byte)</code>. However when I try this:</p>

<pre><code>import ""bufio""
import ""bytes""

func main() {
    var b bytes.Buffer
    foo := bufio.NewWriter(b)
}
</code></pre>

<p>I get the following error:</p>

<pre><code>cannot use b (type bytes.Buffer) as type io.Writer in function argument:
bytes.Buffer does not implement io.Writer (Write method has pointer receiver)
</code></pre>

<p>I am confused, since it clearly implements the interface. How do I resolve this error?</p>
","<p>Pass a pointer to the buffer, instead of the buffer itself:</p>

<pre><code>import ""bufio""
import ""bytes""

func main() {
    var b bytes.Buffer
    writer := bufio.NewWriter(&amp;b)
}
</code></pre>
","23454941"
"How can I print to Stderr in Go without using log","20585","","<p>How can I write a message to Stderr without using <code>log</code>?</p>

<p><a href=""https://stackoverflow.com/questions/28934859/how-to-print-message-to-stderr-in-go"">A comment in this SO post</a> shows how to do it with <code>log</code>: <code>log.Println(""Message"")</code>, but what if I don't want a timestamp?</p>

<p>Is the following good Go?</p>

<p><code>os.Stderr.WriteString(""Message"")</code></p>
","<p>If you don't want timestamps, just create a new <a href=""http://golang.org/pkg/log/#Logger""><code>log.Logger</code></a> with <code>flag</code> set to <code>0</code>:</p>

<pre><code>l := log.New(os.Stderr, """", 0)
l.Println(""log msg"")
</code></pre>

<p><strong>EDIT:</strong></p>

<blockquote>
  <p>Is the following good Go?</p>

<pre><code>os.Stderr.WriteString(""Message"")
</code></pre>
</blockquote>

<p>This is acceptable, and you can also use <a href=""http://golang.org/pkg/fmt/#Fprintf""><code>fmt.Fprintf</code></a> and friends to get formatted output:</p>

<pre><code>fmt.Fprintf(os.Stderr, ""number of foo: %d"", nFoo)
</code></pre>
","29721505"
"Golang: Installation directory error?","20565","","<p>I have the error:</p>

<pre><code>go install: no install location for directory /Users/xwilly/Dropbox/go/project/src outside GOPATH 
</code></pre>

<p>I'm using go version 1.1 on OS X.</p>

<p>I can build &amp; run but can't install packages.</p>

<p>My environment:</p>

<pre><code>GOPATH=/Users/xwilly/Dropbox/go/project
PATH=/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/go/bin:/Users/xwilly/Dropbox/go/project/bin
</code></pre>

<p>Project tree:</p>

<pre><code>/Users/xwilly/Dropbox/go/project
bin
pkg
src
</code></pre>

<p>I can build without error:</p>

<pre><code>..:src xwilly$ go build test.go 
..:src xwilly$ go install test.go
go install: no install location for directory /Users/xwilly/Dropbox/go/project/src outside GOPATH
</code></pre>

<p>Here is a simple example:</p>

<pre><code>xwilly$ cat test.go 
package main

import (
    ""fmt""
)

func main() {
    fmt.Println(""Bonjour"")
}
xwilly$ go run test.go 
Bonjour
xwilly$ go install test.go 
go install: no install location for directory /Users/xwilly/Dropbox/go/project/src/learning outside GOPATH
</code></pre>
","<blockquote>
  <p><a href=""http://golang.org/cmd/go/"">Command go</a></p>
  
  <p><a href=""http://golang.org/cmd/go/#hdr-GOPATH_environment_variable"">GOPATH environment variable</a></p>
  
  <p>Each directory listed in <code>GOPATH</code> must have a prescribed structure:</p>
  
  <p>The <code>src/</code> directory holds source code. The path below '<code>src</code>' determines
  the import path or executable name.</p>
  
  <p>The <code>pkg/</code> directory holds installed package objects. As in the Go tree,
  each target operating system and architecture pair has its own
  subdirectory of <code>pkg</code> (<code>pkg/GOOS_GOARCH</code>).</p>
  
  <p>If <code>DIR</code> is a directory listed in the <code>GOPATH</code>, a package with source in
  DIR/src/foo/bar can be imported as ""<code>foo/bar</code>"" and has its compiled form
  installed to ""<code>DIR/pkg/GOOS_GOARCH/foo/bar.a</code>"".</p>
  
  <p>The <code>bin/</code> directory holds compiled commands. Each command is named for
  its source directory, but only the final element, not the entire path.
  That is, the command with source in <code>DIR/src/foo/quux</code> is installed into
  DIR/bin/quux, not <code>DIR/bin/foo/quux</code>. The <code>foo/</code> is stripped so that you
  can add <code>DIR/bin</code> to your <code>PATH</code> to get at the installed commands. If the
  <code>GOBIN</code> environment variable is set, commands are installed to the
  directory it names instead of <code>DIR/bin</code>.</p>
  
  <p>Here's an example directory layout:</p>

<pre><code>GOPATH=/home/user/gocode

/home/user/gocode/
    src/
        foo/
            bar/               (go code in package bar)
                x.go
            quux/              (go code in package main)
                y.go
    bin/
        quux                   (installed command)
    pkg/
        linux_amd64/
            foo/
                bar.a          (installed package object)
</code></pre>
</blockquote>

<p>Your directory structure is wrong. You are trying to install a command (<code>package main</code>). It should be in a source directory named after your command. See the <code>quux</code> command above.</p>

<p>In your case, assume your command is going to be named <code>billy</code>.</p>

<pre><code>$ mkdir -p /Users/xwilly/Dropbox/go/project/src/billy
</code></pre>

<p>which is inside your <code>GOPATH</code>. Move your <code>test.go</code> file to this directory. Run</p>

<pre><code>$ go install billy
</code></pre>

<p>The command <code>billy</code> should, unless you have set <code>GOBIN</code>, be installed in the </p>

<pre><code>/Users/xwilly/Dropbox/go/project/bin
</code></pre>

<p>directory inside your <code>GOPATH</code>, which should be in your <code>PATH</code>.</p>
","17525644"
"How can I open files using relative paths in Go?","20469","","<p>I'm using <code>io/ioutil</code> to read a small text file:</p>

<pre><code>fileBytes, err := ioutil.ReadFile(""/absolute/path/to/file.txt"")
</code></pre>

<p>And that works fine, but this isn't exactly portable. In my case, the files I want to open are in my GOPATH, for example:</p>

<pre><code>/Users/matt/Dev/go/src/github.com/mholt/mypackage/data/file.txt
</code></pre>

<p>Since the <code>data</code> folder rides right alongside the source code, I'd love to just specify the relative path:</p>

<pre><code>data/file.txt
</code></pre>

<p>But then I get this error:</p>

<blockquote>
  <p>panic: open data/file.txt: no such file or directory</p>
</blockquote>

<p>How can I open files using their relative path, especially if they live alongside my Go code?</p>
","<p>Hmm... the <code>path/filepath</code> package has <a href=""http://golang.org/pkg/path/filepath/#Abs""><code>Abs()</code></a> which does what I need (so far) though it's a bit inconvenient:</p>

<pre><code>absPath, _ := filepath.Abs(""../mypackage/data/file.txt"")
</code></pre>

<p>Then I use <code>absPath</code> to load the file and it works fine.</p>

<p>Note that, in my case, the data files are in a package separate from the <code>main</code> package from which I'm running the program. If it was all in the same package, I'd remove the leading <code>../mypackage/</code>. Since this path is obviously relative, different programs will have different structures and need this adjusted accordingly.</p>

<p>If there's a better way to use external resources with a Go program and keep it portable, feel free to contribute another answer.</p>
","17072096"
"How to search for an element in a golang slice","20417","","<p>I have a slice of structs.</p>

<pre><code>type Config struct {
Key string
Value string
}

// I form a slice of the above struct
var myconfig []Config 

// unmarshal a response body into the above slice
if err := json.Unmarshal(respbody, &amp;myconfig); err != nil {
    panic(err)
}

fmt.Println(config)

Here is the output of this
[{key1 test} {web/key1 test2}]
</code></pre>

<p>How can I search this array to get the element where <code>key=""key1""</code>?</p>
","<p>With a simple <code>for</code> loop:</p>

<pre><code>for _, v := range myconfig {
    if v.Key == ""key1"" {
        // Found!
    }
}
</code></pre>

<p>Note that since element type of the slice is a <code>struct</code> (not a pointer), this may be inefficient if the struct type is ""big"" as the loop will copy each visited element into the loop variable.</p>

<p>It would be faster to use a <code>range</code> loop just on the index, this avoids copying the elements:</p>

<pre><code>for i := range myconfig {
    if myconfig[i].Key == ""key1"" {
        // Found!
    }
}
</code></pre>

<p><strong>Notes:</strong></p>

<p>It depends on your case whether multiple configs may exist with the same <code>key</code>, but if not, you should <code>break</code> out of the loop if a match is found (to avoid searching for others).</p>

<pre><code>for i := range myconfig {
    if myconfig[i].Key == ""key1"" {
        // Found!
        break
    }
}
</code></pre>

<p>Also if this is a frequent operation, you should consider building a <code>map</code> from it which you can simply index, e.g.</p>

<pre><code>// Build a config map:
confMap := map[string]string{}
for _, v := range myconfig {
    confMap[v.Key] = v.Value
}

// And then to find values by key:
if v, ok := confMap[""key1""]; ok {
    // Found
}
</code></pre>
","38654444"
"Why is *a{...} invalid indirect?","20387","","<p><code>invalid indirect of oauth.RequestToken literal (type oauth.RequestToken)</code></p>

<p>Why is the following line invalid?</p>

<pre><code>func (s *Service) Callback(r *http.Request, req *RequestOauth, resp *Response) error {
    c := endpoints.NewContext(r)
    consumer.HttpClient=urlfetch.Client(c)
    ====&gt;requestToken := *oauth.RequestToken{Token:req.Oauth_token, Secret:""""}&lt;======
    b, err := TwitterApi(requestToken, req.Oauth_verifier)
    resp.Message=b.Name
    return err
}

func TwitterApi(requestToken *oauth.RequestToken, verificationCode string) (u *UserT, err error) {
    accessToken, err := consumer.AuthorizeToken(requestToken, verificationCode)
    if err != nil {log.Fatal(err)}
    response, err := consumer.Get(""https://api.twitter.com/1.1/account/verify_credentials.json"", nil, accessToken)
    if err != nil {log.Fatal(err)}
    defer response.Body.Close()
    b, err := ioutil.ReadAll(response.Body)
    err = json.Unmarshal(b, &amp;u)
    return
}
</code></pre>
","<p>This line:</p>

<pre><code>requestToken := *oauth.RequestToken{Token:req.Oauth_token, Secret:""""}
</code></pre>

<p>translated literally says ""create an instance of <code>oauth.RequestToken</code>, then attempt to dereference it as a pointer.""  i.e. it is attempting to perform an indirect (pointer) access via a literal struct value.</p>

<p>Instead, you want to create the instance and take its address (<code>&amp;</code>), yielding a pointer-to-RequestToken, <code>*oauth.RequestToken</code>:</p>

<pre><code>requestToken := &amp;oauth.RequestToken{Token:req.Oauth_token, Secret:""""}
</code></pre>

<p>Alternatively, you could create the token as a local value, then pass it by address to the <code>TwitterApi</code> function:</p>

<pre><code>requestToken := oauth.RequestToken{Token:req.Oauth_token, Secret:""""}

b, err := TwitterApi(&amp;requestToken, req.Oauth_verifier)
</code></pre>
","20891081"
"Obtain user's home directory","20334","","<p>Is the following the best way of obtaining the running user's home directory? Or is there a specific function that I've ovelooked?</p>

<pre><code>os.Getenv(""HOME"")
</code></pre>

<p>If the above is correct, does anyone happen to know whether this approach is guaranteed to work on non-Linux platforms, e.g. Windows?</p>
","<p>In go 1.0.3 ( probably earlier, too ) the following works:</p>

<pre><code>package main
import (
    ""os/user""
    ""fmt""
    ""log""
)
func main() {
    usr, err := user.Current()
    if err != nil {
        log.Fatal( err )
    }
    fmt.Println( usr.HomeDir )
}
</code></pre>

<p>If it is important to cross-compile, consider <a href=""https://github.com/mitchellh/go-homedir"">the <code>homedir</code> library</a></p>
","13004756"
"How to reliably detect os/platform in Go","20333","","<p>Here's what I'm currently using, which I think gets the job done, but there's got to be a better way:</p>

<pre><code>func isWindows() bool {
    return os.PathSeparator == '\\' &amp;&amp; os.PathListSeparator == ';'
}
</code></pre>

<p>As you can see, in my case all I need to know is how to detect windows but I'd like to know the way to detect any platform/os.</p>

<p>Play:</p>

<p><a href=""http://play.golang.org/p/r4lYWDJDxL"" rel=""noreferrer"">http://play.golang.org/p/r4lYWDJDxL</a></p>
","<h2>Detection at compile time</h2>

<p>If you're doing this to have different implementations depending on the OS, it is more useful to 
have separate files with the implementation of that feature and add build tags to each
of the files. This is used in many places in the standard library, for example <a href=""http://golang.org/src/pkg/os/"" rel=""noreferrer"">in the <code>os</code> package</a>.</p>

<p>These so called 'Build constraints' or 'Build tags' are explained <a href=""http://golang.org/pkg/go/build/#hdr-Build_Constraints"" rel=""noreferrer"">here</a>.</p>

<p>Say you have the constant <code>PATH_SEPARATOR</code> and you want that platform dependant, you 
would make two files, one for windows and one for the (unix) rest:</p>

<pre><code>/project/path_windows.go
/project/path_unix.go
</code></pre>

<p>The code of these files would then be:</p>

<h3>path_windows.go</h3>

<pre><code>// +build windows

package project

const PATH_SEPARATOR = '\\'
</code></pre>

<h3>path_unix.go</h3>

<pre><code>// +build !windows

package project

const PATH_SEPARATOR = '/'
</code></pre>

<p>You can now access <code>PATH_SEPARATOR</code> in your code and have it platform dependant.</p>

<h2>Detection at runtime</h2>

<p>If you want to determine the operating system at runtime, use the <a href=""http://golang.org/pkg/runtime/#GOOS"" rel=""noreferrer""><code>runtime.GOOS</code></a>
variable:</p>

<pre><code>if runtime.GOOS == ""windows"" {
    fmt.Println(""Hello from Windows"")
}
</code></pre>

<p>While this is compiled into the runtime and therefore ignores the environment, 
you can nevertheless be relatively certain that the value is correct. 
The reason for this is that every platform that is worth distinguishing needs 
rebuilding due to different executable formats and thus has a new <code>GOOS</code> value.</p>
","19847868"
"Why no generics in Go?","20314","","<p>Disclaimer: I've only played with Go for one day now, so there's a good chance I've missed a lot.</p>

<p>Does anybody know why there is no real support for generics/templates/whatsInAName in Go? So there is a generic <code>map</code>, but that's supplied by the compiler, while a Go programmer can't write her own implementation. With all the talk about making Go as orthogonal as possible, why can I USE a generic type but not CREATE a new one?</p>

<p>Especially when it comes to functional programming, there are lambdas, even closures, but with a static type system lacking generics, how do I write, well, generic higher order functions like <code>filter(predicate, list)</code>? OK, Linked lists and the like can be done with <code>interface{}</code> sacrificing type safety.</p>

<p>As a quick search on SO / Google did not reveal any insights, it looks like generics, if at all, will be added to Go as an afterthought. I do trust Thompson to do way better than the Java guys, but why keep generics out? Or are they planned and just not implemented yet?</p>
","<p>this answer you will find here: <a href=""http://golang.org/doc/faq#generics"" rel=""noreferrer"">http://golang.org/doc/faq#generics</a></p>

<blockquote>
  <p>Why does Go not have generic types?</p>
  
  <p>Generics may well be added at some point. We don't feel an urgency for them, although we understand some programmers do.</p>
  
  <p>Generics are convenient but they come at a cost in complexity in the type system and run-time. We haven't yet found a design that gives value proportionate to the complexity, although we continue to think about it. Meanwhile, Go's built-in maps and slices, plus the ability to use the empty interface to construct containers (with explicit unboxing) mean in many cases it is possible to write code that does what generics would enable, if less smoothly.</p>
  
  <p>This remains an open issue.</p>
</blockquote>
","3912095"
"Testing equivalence of maps (Golang)","20222","","<p>I have a table-driven test case like this one:</p>

<pre><code>func CountWords(s string) map[string]int

func TestCountWords(t *testing.T) {
  var tests = []struct {
    input string
    want map[string]int
  }{
    {""foo"", map[string]int{""foo"":1}},
    {""foo bar foo"", map[string]int{""foo"":2,""bar"":1}},
  }
  for i, c := range tests {
    got := CountWords(c.input)
    // TODO test whether c.want == got
  }
}
</code></pre>

<p>I could check whether the lengths are the same and write a loop that checks if every key-value pair is the same. But then I have to write this check again when I want to use it for another type of map (say <code>map[string]string</code>).</p>

<p>What I ended up doing is, I converted the maps to strings and compared the strings:</p>

<pre><code>func checkAsStrings(a,b interface{}) bool {
  return fmt.Sprintf(""%v"", a) != fmt.Sprintf(""%v"", b) 
}

//...
if checkAsStrings(got, c.want) {
  t.Errorf(""Case #%v: Wanted: %v, got: %v"", i, c.want, got)
}
</code></pre>

<p>This assumes that the string representations of equivalent maps are the same, which seems to be true in this case (if the keys are the same then they hash to the same value, so their orders will be the same). Is there a better way to do this? What is the idiomatic way to compare two maps in table-driven tests?</p>
","<p>The Go library has already got you covered. Do this:</p>

<pre><code>import ""reflect""
// m1 and m2 are the maps we want to compare
eq := reflect.DeepEqual(m1, m2)
if eq {
    fmt.Println(""They're equal."")
} else {
    fmt.Println(""They're unequal."")
}
</code></pre>

<p>If you look at the <a href=""http://golang.org/src/pkg/reflect/deepequal.go?s=2432:2441#L98"" rel=""noreferrer"">source code</a> for <code>reflect.DeepEqual</code>'s <code>Map</code> case, you'll see that it first checks if both maps are nil, then it checks if they have the same length before finally checking to see if they have the same set of (key, value) pairs.</p>

<p>Because <code>reflect.DeepEqual</code> takes an interface type, it will work on any valid map (<code>map[string]bool, map[struct{}]interface{}</code>, etc). Note that it will also work on non-map values, so be careful that what you're passing to it are really two maps. If you pass it two integers, it will happily tell you whether they are equal.</p>
","18211675"
"Missing type in composite literal","20196","","<pre><code>type A struct {
    B struct {
        Some string
        Len  int
    }
}
</code></pre>

<p>Simple question. How to initialize this struct? I would like to do something like this:</p>

<pre><code>a := &amp;A{B:{Some: ""xxx"", Len: 3}} 
</code></pre>

<p>Expectedly i'm getting an error:</p>

<pre><code>missing type in composite literal
</code></pre>

<p>Sure, i can create a separated struct B and initialize it this way:</p>

<pre><code>type Btype struct {
    Some string
    Len int
}

type A struct {
    B Btype
}

a := &amp;A{B:Btype{Some: ""xxx"", Len: 3}}
</code></pre>

<p>But it not so useful than the first way. Is there a shortcut to initialize anonymous structure?</p>
","<p>The <a href=""http://golang.org/ref/spec#Assignability"">assignability rules</a> are forgiving for anonymous types which leads to another possibility where you can retain the original definition of <code>A</code> while allowing short composite literals of that type to be written. If you really insist on an anonymous type for the <code>B</code> field, I would probably write something like:</p>

<pre><code>package main

import ""fmt""

type (
        A struct {
                B struct {
                        Some string
                        Len  int
                }
        }

        b struct {
                Some string
                Len  int
        }
)

func main() {
        a := &amp;A{b{""xxx"", 3}}
        fmt.Printf(""%#v\n"", a)
}
</code></pre>

<p><a href=""http://play.golang.org/p/5tkQ4R98kJ"">Playground</a></p>

<hr>

<p>Output</p>

<pre><code>&amp;main.A{B:struct { Some string; Len int }{Some:""xxx"", Len:3}}
</code></pre>
","17913030"
"What's the meaning of interface{}?","20194","","<p>I'm new to interfaces and trying to do SOAP request by <a href=""https://github.com/webconnex/xmlutil/blob/master/xmlutil.go"">github</a>  </p>

<p>I don't understand the meaning of </p>

<pre><code>Msg interface{}
</code></pre>

<p>in this code:  </p>

<pre><code>type Envelope struct {
    Body `xml:""soap:""`
}

type Body struct {
    Msg interface{}
}
</code></pre>

<p>I've observed the same syntax in</p>

<pre><code>fmt.Println
</code></pre>

<p>but don't understand what's being achieved by </p>

<pre><code>interface{}
</code></pre>
","<p>You can refer to the article ""<a href=""http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go"">How to use interfaces in Go</a>"" (based on ""<a href=""http://research.swtch.com/interfaces"">Russ Cox’s description of interfaces</a>""):</p>

<blockquote>
  <p>What <em>is</em> an interface?  </p>
  
  <p>An interface is two things: </p>
  
  <ul>
  <li>it is a set of methods, </li>
  <li>but it is also a type</li>
  </ul>
  
  <p>The <strong><code>interface{}</code></strong> type, the <strong>empty interface</strong> is the interface that has no methods. </p>
  
  <p>Since there is no implements keyword, all types implement at least zero methods, and satisfying an interface is done automatically, <strong>all types satisfy the empty interface</strong>.<br>
  That means that if you write a function that takes an <code>interface{}</code> value as a parameter, <strong>you can supply that function with any value</strong>.</p>
</blockquote>

<p>(That is what <code>Msg</code> represents in your question: any value)</p>



<pre class=""lang-golang prettyprint-override""><code>func DoSomething(v interface{}) {
   // ...
}
</code></pre>

<blockquote>
  <p>Here’s where it gets confusing:  </p>
  
  <p>inside of the <code>DoSomething</code> function, <strong>what is <code>v</code>'s type?</strong> </p>
  
  <p>Beginner gophers are led to believe that “<code>v</code> is of any type”, but that is wrong.<br>
  <code>v</code> is not of any type; <strong>it is of <code>interface{}</code> type</strong>. </p>
  
  <p>When passing a value into the <code>DoSomething</code> function, the Go runtime will perform a <strong>type conversion</strong> (if necessary), and <strong>convert the value to an <code>interface{}</code> value</strong>.<br>
  All values have exactly one type at runtime, and <code>v</code>'s one static type is <code>interface{}</code>.</p>
  
  <p><strong>An interface value is constructed of two words of data</strong>: </p>
  
  <ul>
  <li>one word is used to point to a method table for the value’s underlying type, </li>
  <li>and the other word is used to point to the actual data being held by that value. </li>
  </ul>
</blockquote>

<hr>

<p>Addendum: This is were Russ's article is quite complete regarding an interface structure:</p>

<pre class=""lang-golang prettyprint-override""><code>type Stringer interface {
    String() string
}
</code></pre>

<blockquote>
  <p>Interface values are represented as a two-word pair giving a pointer to information about the type stored in the interface and a pointer to the associated data.<br>
  Assigning b to an interface value of type Stringer sets both words of the interface value. </p>
</blockquote>

<p><img src=""https://i.stack.imgur.com/5c0TS.png"" alt=""http://research.swtch.com/gointer2.png""></p>

<blockquote>
  <p><strong>The first word in the interface value points at what I call an interface table or itable</strong> (pronounced i-table; in the runtime sources, the C implementation name is Itab).<br>
  The itable begins with some metadata about the types involved and then becomes a list of function pointers.<br>
  <strong>Note that the itable corresponds to the interface type, not the dynamic type</strong>.<br>
  In terms of our example, the itable for <code>Stringer</code> holding type Binary lists the methods used to satisfy Stringer, which is just <code>String</code>: Binary's other methods (<code>Get</code>) make no appearance in the <code>itable</code>.</p>
  
  <p><strong>The second word in the interface value points at the actual data</strong>, in this case a copy of <code>b</code>.<br>
  The assignment <code>var s Stringer = b</code> makes a copy of <code>b</code> rather than point at <code>b</code> for the same reason that <code>var c uint64 = b</code> makes a copy: if <code>b</code> later changes, <code>s</code> and <code>c</code> are supposed to have the original value, not the new one.<br>
  Values stored in interfaces might be arbitrarily large, but only one word is dedicated to holding the value in the interface structure, so the assignment allocates a chunk of memory on the heap and records the pointer in the one-word slot. </p>
</blockquote>
","23148998"
"Image manipulation in Golang","20177","","<p>I have the following:</p>

<ol>
<li>Background image (bi)</li>
<li>Image1 (i1)</li>
<li>Image3 (i2)</li>
</ol>

<p>I want to position i1 and i2 over bi with some angle and then produce a final image. I have x and y axis value for i1 and i2 and their expected rotation angle. i1 and i2 may partially overlay on each other. but I have z index for i1 and i2 to know, if in case they overlap then who will be in foreground.</p>

<p>I am trying to achieve this in Golang.<br>
<a href=""http://golang.org/doc/articles/image_draw.html"" rel=""nofollow"">http://golang.org/doc/articles/image_draw.html</a> seems to do this. Anyone knows any similar example of code, that may help. Or can you show me couple of lines in Golang as a pseudo program?</p>

<p>Thanks.</p>
","<p>Not sure exactly what you are looking for and I haven't worked with the image package much at all ... but just following the sample code and using <a href=""http://code.google.com/p/graphics-go/"">graphics-go</a> package (it works for me), I was able to do something at least.</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
    ""image/draw""
    ""image""
    ""image/jpeg""
    ""code.google.com/p/graphics-go/graphics""
)

func main() {
    fImg1, _ := os.Open(""arrow1.jpg"")
    defer fImg1.Close()
    img1, _, _ := image.Decode(fImg1)

    fImg2, _ := os.Open(""arrow2.jpg"")
    defer fImg2.Close()
    img2, _, _ := image.Decode(fImg2)

    m := image.NewRGBA(image.Rect(0, 0, 800, 600))
    draw.Draw(m, m.Bounds(), img1, image.Point{0,0}, draw.Src)
    //draw.Draw(m, m.Bounds(), img2, image.Point{-200,-200}, draw.Src)
    graphics.Rotate(m, img2, &amp;graphics.RotateOptions{3.5})

    toimg, _ := os.Create(""new.jpg"")
    defer toimg.Close()

    jpeg.Encode(toimg, m, &amp;jpeg.Options{jpeg.DefaultQuality})
}
</code></pre>
","12434107"
"How to import and use different packages of the same name in Go language?","20148","","<p>For example, I want to use both  text/template and html/template in one source file.
But the code below throw errors.</p>

<pre><code>import (
    ""fmt""
    ""net/http""
    ""text/template"" // template redeclared as imported package name
    ""html/template"" // template redeclared as imported package name
)

func handler_html(w http.ResponseWriter, r *http.Request) {
    t_html, err := html.template.New(""foo"").Parse(`{{define ""T""}}Hello, {{.}}!{{end}}`)
    t_text, err := text.template.New(""foo"").Parse(`{{define ""T""}}Hello, {{.}}!{{end}}`)

}
</code></pre>
","<pre><code>import (
    ""text/template""
    htemplate ""html/template"" // this is now imported as htemplate
)
</code></pre>

<p>Read more about it <a href=""http://golang.org/ref/spec#Import_declarations"" rel=""noreferrer"">in the spec</a>.</p>
","10408720"
"Golang tests in sub-directory","20087","","<p>I want to create a package in Go with tests and examples for the package as subdirectories to keep the workspace cleaner. Is this possible and if so how? </p>

<p>All the documentation always puts the testing code in the same place as the other code, is this better in some way or just convention?</p>

<p>Thanks.</p>
","<p>Note that you <em>can</em> run <code>go test</code> ""recursively"": you need to <strong>list all the packages you want to test</strong>.</p>

<p>If you are are the root folder of your Go project, type:</p>

<pre><code>go test ./...
</code></pre>

<p>The '<code>./...</code>' notation is described in the section ""<a href=""http://golang.org/cmd/go/#hdr-Description_of_package_lists"" rel=""noreferrer"">Description of package lists</a>"" of the ""<a href=""http://golang.org/cmd/go/"" rel=""noreferrer"">command <code>go</code></a>"":</p>

<blockquote>
  <p>An import path is a pattern if it includes one or more ""<code>...</code>"" wildcards, each of which can match any string, including the empty string and strings containing slashes. </p>
  
  <p>Such a pattern expands to all package directories found in the <code>GOPATH</code> trees with names matching the patterns. </p>
  
  <p>As a special case, <code>x/...</code> matches <code>x</code> as well as <code>x</code>'s subdirectories.<br>
  For example, <code>net/...</code> expands to <code>net</code> and packages in its subdirectories.</p>
</blockquote>

<hr>

<p>If you keep your <code>_test.go</code> files in a subfolder, the '<code>go test ./...</code>' command will be able to pick them up.<br>
But:</p>

<ul>
<li>you will need to prefix your exported variables and functions (used in your tests) with the name of your package, in order for the test file to be able to access the package exported content.</li>
<li>you wouldn't access non-exported content.</li>
</ul>

<p>That being said, I would still prefer keep the <code>_test.go</code> file right beside the main source file: it is easier to find.</p>
","21725603"
"Case insensitive string search in golang","20042","","<p>How do I search through a file for a word in a <em>case insensitive</em> manner? </p>

<p><strong>For example</strong> </p>

<p>If I'm searching for <code>UpdaTe</code> in the file, if the file contains update, the search should pick it and count it as a match.</p>
","<p><code>strings.EqualFold()</code> can check if two strings are equal, while ignoring case. It even works with Unicode. See <a href=""http://golang.org/pkg/strings/#EqualFold"" rel=""noreferrer"">http://golang.org/pkg/strings/#EqualFold</a> for more info.</p>

<p><a href=""http://play.golang.org/p/KDdIi8c3Ar"" rel=""noreferrer"">http://play.golang.org/p/KDdIi8c3Ar</a></p>

<pre><code>package main

import (
    ""fmt""
    ""strings""
)

func main() {
    fmt.Println(strings.EqualFold(""HELLO"", ""hello""))
    fmt.Println(strings.EqualFold(""ÑOÑO"", ""ñoño""))
}
</code></pre>

<p>Both return true.</p>
","26623607"
"How do you create a new instance of a struct from its type at run time in Go?","20020","","<p>In Go, how do you create the instance of an object from its type at run time?  I suppose you would also need to get the actual <code>type</code> of the object first too?</p>

<p>I am trying to do lazy instantiation to save memory.</p>
","<p>In order to do that you need <code>reflect</code>.</p>

<pre><code>package main

import (
    ""fmt""
    ""reflect""
)

func main() {
    // one way is to have a value of the type you want already
    a := 1
    // reflect.New works kind of like the built-in function new
    // We'll get a reflected pointer to a new int value
    intPtr := reflect.New(reflect.TypeOf(a))
    // Just to prove it
    b := intPtr.Elem().Interface().(int)
    // Prints 0
    fmt.Println(b)

    // We can also use reflect.New without having a value of the type
    var nilInt *int
    intType := reflect.TypeOf(nilInt).Elem()
    intPtr2 := reflect.New(intType)
    // Same as above
    c := intPtr2.Elem().Interface().(int)
    // Prints 0 again
    fmt.Println(c)
}
</code></pre>

<p>You can do the same thing with a struct type instead of an int. Or anything else, really. Just be sure to know the distinction between new and make when it comes to map and slice types.</p>
","7855298"
"Go: cast any int value to int64 in type switch","19976","","<p>I often have a situation, where I expect an <code>int</code> (of any type, <code>int/int8/16/32/64</code>) and check for it using a type switch</p>

<pre><code>switch t := v.(type) {
  case int, int8, int16, int32, int64:
    // cast to int64
  case uint, uint8, uint16, uint32, uint64:
    // cast to uint64
}
</code></pre>

<p>Now I cannot use a direct cast, because <code>t</code> in this case will be of type <code>interface{}</code>. Do I really have to split this up into <code>case</code>s for each integer type?</p>

<p>I know that I could do it via reflection using <code>reflect.ValueOf(v).Int()</code>, but shouldn't there be a better (less verbose) way of doing this?</p>

<p><em><strong>UPDATE:</em></strong></p>

<p>Filed an issue, and Rob advised to just use <code>reflect</code> in this case.</p>
","<p>It's hard to give you an opinion without more context but it looks like you're trying to make your implementation too generic, which is common from people that worked mostly with more dynamic languages or w/ generic support.</p>

<p>Part of the process of Learning Go is learning to embrace its type system, and depending on where you're coming from, it can be challenging.</p>

<p>Usually, in Go, you want to support one type that can hold all possible values you need to handle. In your case it would probably be a int64.</p>

<p>Take a look on the math package, for example. It only work with int64 and expect anyone using it to typecast it properly instead of trying to convert everything.</p>

<p>Another option is to use a interface to be type-agnostic, like the sort package does. Basically, any method that are type specific will be implemented outside of your package and you expect certain methods to be defined.</p>

<p>It takes a while to learn and accept these attributes but overall, in the end, it proves to be good in terms of maintainability and robustness. Interfaces ensure you have orthogonality and strong types makes sure you're in control of type conversions, which in the end can cause bugs and also unnecessary copies in memory.</p>

<p>Cheers</p>
","17223287"
"Go memory consumption management","19894","","<p>I am new to Go and trying to figure out how it manages memory consumption.</p>

<p>I have trouble with memory in one of my test projects. I don't understand why Go uses more and more memory (never freeing it) when my program runs for a long time.</p>

<p>I am running the test case provided below. After the first allocation, program uses nearly 350 MB of memory (according to ActivityMonitor). Then I try to free it and ActivityMonitor shows that memory consumption doubles. Why?</p>

<p>I am running this code on OS X using Go 1.0.3.</p>

<p>What is wrong with this code? And what is the right way to manage large variables in Go programs?</p>

<p>I had another memory-management-related problem when implementing an algorithm that uses a lot of time and memory; after running it for some time it throws an ""out of memory"" exception.</p>

<pre><code>package main

import (""fmt"" 
""time""
)

func main() {
  fmt.Println(""getting memory"")
  tmp := make([]uint32, 100000000)
  for kk, _ := range tmp {
    tmp[kk] = 0
  }
  time.Sleep(5 * time.Second)
  fmt.Println(""returning memory"")
  tmp = make([]uint32, 1)
  tmp = nil
  time.Sleep(5 * time.Second)
  fmt.Println(""getting memory"")
  tmp = make([]uint32, 100000000)
  for kk, _ := range tmp {
    tmp[kk] = 0
  }
  time.Sleep(5 * time.Second)
  fmt.Println(""returning memory"")
  tmp = make([]uint32, 1)
  tmp = nil
  time.Sleep(5 * time.Second)  
  return
}
</code></pre>
","<p>Currently, go uses a <a href=""http://en.wikipedia.org/wiki/Mark-and-sweep#Na.C3.AFve_mark-and-sweep"" rel=""nofollow noreferrer"">mark-and-sweep garbage collector</a>, which in general does not define when the object is thrown away.</p>

<p>However, if you look closely, there is a go routine called <a href=""https://github.com/golang/go/blob/be589f8d2b721aa86fd5e406733f61a5ed245d3a/src/runtime/proc.go#L4185"" rel=""nofollow noreferrer""><code>sysmon</code></a> which essentially runs as long as your program does and calls the GC periodically:</p>

<pre><code>// forcegcperiod is the maximum time in nanoseconds between garbage
// collections. If we go this long without a garbage collection, one
// is forced to run.
//
// This is a variable for testing purposes. It normally doesn't change.
var forcegcperiod int64 = 2 * 60 * 1e9

(...)

// If a heap span goes unused for 5 minutes after a garbage collection,
// we hand it back to the operating system.
scavengelimit := int64(5 * 60 * 1e9)
</code></pre>

<p><a href=""https://github.com/golang/go/blob/be589f8d2b721aa86fd5e406733f61a5ed245d3a/src/runtime/proc.go#L4175-L4180"" rel=""nofollow noreferrer""><code>forcegcperiod</code></a> determines the period after which the GC is called by force. <a href=""https://github.com/golang/go/blob/be589f8d2b721aa86fd5e406733f61a5ed245d3a/src/runtime/proc.go#L4191-L4193"" rel=""nofollow noreferrer""><code>scavengelimit</code></a> determines when spans are returned to the operating system. <a href=""https://github.com/golang/go/blob/be589f8d2b721aa86fd5e406733f61a5ed245d3a/src/runtime/malloc.go#L22"" rel=""nofollow noreferrer"">Spans are a number of memory pages</a> which can hold several objects. They're kept for <code>scavengelimit</code> time and are freed if no object is on them and <code>scavengelimit</code> is exceeded.</p>

<p>Further down in the code you can see that there is a trace option. You can use this to see, whenever the
scavenger thinks he needs to clean up:</p>

<pre><code>$ GOGCTRACE=1 go run gc.go
gc1(1): 0+0+0 ms 0 -&gt; 0 MB 423 -&gt; 350 (424-74) objects 0 handoff
gc2(1): 0+0+0 ms 1 -&gt; 0 MB 2664 -&gt; 1437 (2880-1443) objects 0 handoff
gc3(1): 0+0+0 ms 1 -&gt; 0 MB 4117 -&gt; 2213 (5712-3499) objects 0 handoff
gc4(1): 0+0+0 ms 2 -&gt; 1 MB 3128 -&gt; 2257 (6761-4504) objects 0 handoff
gc5(1): 0+0+0 ms 2 -&gt; 0 MB 8892 -&gt; 2531 (13734-11203) objects 0 handoff
gc6(1): 0+0+0 ms 1 -&gt; 1 MB 8715 -&gt; 2689 (20173-17484) objects 0 handoff
gc7(1): 0+0+0 ms 2 -&gt; 1 MB 5231 -&gt; 2406 (22878-20472) objects 0 handoff
gc1(1): 0+0+0 ms 0 -&gt; 0 MB 172 -&gt; 137 (173-36) objects 0 handoff
getting memory
gc2(1): 0+0+0 ms 381 -&gt; 381 MB 203 -&gt; 202 (248-46) objects 0 handoff
returning memory
getting memory
returning memory
</code></pre>

<p>As you can see, no gc invoke is done between getting and returning. However, if you change
the delay from 5 seconds to 3 minutes (more than the 2 minutes from <code>forcegcperiod</code>), 
the objects are removed by the gc:</p>

<pre><code>returning memory
scvg0: inuse: 1, idle: 1, sys: 3, released: 0, consumed: 3 (MB)
scvg0: inuse: 381, idle: 0, sys: 382, released: 0, consumed: 382 (MB)
scvg1: inuse: 1, idle: 1, sys: 3, released: 0, consumed: 3 (MB)
scvg1: inuse: 381, idle: 0, sys: 382, released: 0, consumed: 382 (MB)
gc9(1): 1+0+0 ms 1 -&gt; 1 MB 4485 -&gt; 2562 (26531-23969) objects 0 handoff
gc10(1): 1+0+0 ms 1 -&gt; 1 MB 2563 -&gt; 2561 (26532-23971) objects 0 handoff
scvg2: GC forced // forcegc (2 minutes) exceeded
scvg2: inuse: 1, idle: 1, sys: 3, released: 0, consumed: 3 (MB)
gc3(1): 0+0+0 ms 381 -&gt; 381 MB 206 -&gt; 206 (252-46) objects 0 handoff
scvg2: GC forced
scvg2: inuse: 381, idle: 0, sys: 382, released: 0, consumed: 382 (MB)
getting memory
</code></pre>

<p>The memory is still not freed, but the GC marked the memory region as unused. Freeing will begin when
the used span is unused and older than <code>limit</code>. From scavenger code:</p>

<pre><code>if(s-&gt;unusedsince != 0 &amp;&amp; (now - s-&gt;unusedsince) &gt; limit) {
    // ...
    runtime·SysUnused((void*)(s-&gt;start &lt;&lt; PageShift), s-&gt;npages &lt;&lt; PageShift);
}
</code></pre>

<p>This behavior may of course change over time, but I hope you now get a bit of a feel when objects
are thrown away by force and when not. </p>

<p>As pointed out by zupa, releasing objects may not return the memory to the operating system, so on
certain systems you may not see a change in memory usage. This seems to be the case for Plan 9
and Windows according to <a href=""https://groups.google.com/forum/#!topic/golang-nuts/vfmd6zaRQVs"" rel=""nofollow noreferrer"">this thread on golang-nuts</a>.</p>
","14586361"
"Getting CPU usage with golang","19876","","<p>My Go program needs to know the current cpu usage percentage of all system and user processes.</p>

<p>How can I obtain that?</p>
","<p>I had a similar issue and never found a lightweight implementation. Here is a slimmed down version of my solution that answers your specific question. I sample the <code>/proc/stat</code> file just like tylerl recommends. You'll notice that I wait 3 seconds between samples to match top's output, but I have also had good results with 1 or 2 seconds. I run similar code in a loop within a go routine, then I access the cpu usage when I need it from other go routines.  </p>

<p>You can also parse the output of <code>top -n1 | grep -i cpu</code> to get the cpu usage, but it only samples for half a second on my linux box and it was way off during heavy load. Regular top seemed to match very closely when I synchronized it and the following program:</p>

<pre><code>package main

import (
    ""fmt""
    ""io/ioutil""
    ""strconv""
    ""strings""
    ""time""
)

func getCPUSample() (idle, total uint64) {
    contents, err := ioutil.ReadFile(""/proc/stat"")
    if err != nil {
        return
    }
    lines := strings.Split(string(contents), ""\n"")
    for _, line := range(lines) {
        fields := strings.Fields(line)
        if fields[0] == ""cpu"" {
            numFields := len(fields)
            for i := 1; i &lt; numFields; i++ {
                val, err := strconv.ParseUint(fields[i], 10, 64)
                if err != nil {
                    fmt.Println(""Error: "", i, fields[i], err)
                }
                total += val // tally up all the numbers to get total ticks
                if i == 4 {  // idle is the 5th field in the cpu line
                    idle = val
                }
            }
            return
        }
    }
    return
}

func main() {
    idle0, total0 := getCPUSample()
    time.Sleep(3 * time.Second)
    idle1, total1 := getCPUSample()

    idleTicks := float64(idle1 - idle0)
    totalTicks := float64(total1 - total0)
    cpuUsage := 100 * (totalTicks - idleTicks) / totalTicks

    fmt.Printf(""CPU usage is %f%% [busy: %f, total: %f]\n"", cpuUsage, totalTicks-idleTicks, totalTicks)
}
</code></pre>

<p>It seems like I'm allowed to link to the full implementation that I wrote on bitbucket; if it's not, feel free to delete this. It only works on linux so far, though: <a href=""https://bitbucket.org/bertimus9/systemstat/"">systemstat.go</a></p>
","17783687"
"Convert between slices of different types","19696","","<p>I get a byte slice (<code>[]byte</code>) from a UDP socket and want to treat it as an integer slice (<code>[]int32</code>) without changing the underlying array, and vice versa. In C(++) I would just cast between pointer types; how would I do this in Go?</p>
","<p>As others have said, casting the pointer is considered bad form in Go. Here are examples of the proper Go way and the equivalent of the C array casting.</p>

<p>WARNING: all code untested.</p>

<h1>The Right Way</h1>

<p>In this example, we are using the <code>encoding/binary</code> package to convert each set of 4 bytes into an <code>int32</code>. This is better because we are specifying the endianness. We are also not using the <code>unsafe</code> package to break the type system.</p>

<pre><code>import ""encoding/binary""

const SIZEOF_INT32 = 4 // bytes

data := make([]int32, len(raw)/SIZEOF_INT32)
for i := range data {
    // assuming little endian
    data[i] = int32(binary.LittleEndian.Uint32(raw[i*SIZEOF_INT32:(i+1)*SIZEOF_INT32]))
}
</code></pre>

<h1>The Wrong Way (C array casting)</h1>

<p>In this example, we are telling Go to ignore the type system. This is not a good idea because it may fail in another implementation of Go. It is assuming things not in the language specification. However, this one does not do a full copy. This code uses unsafe to access the ""SliceHeader"" which is common in all slices. The header contains a pointer to the data (C array), the length, and the capacity. Instead of just converting the header to the new slice type, we first need to change the length and capacity since there are less elements if we treat the bytes as a new type.</p>

<pre><code>import (
    ""reflect""
    ""unsafe""
)

const SIZEOF_INT32 = 4 // bytes

// Get the slice header
header := *(*reflect.SliceHeader)(unsafe.Pointer(&amp;raw))

// The length and capacity of the slice are different.
header.Len /= SIZEOF_INT32
header.Cap /= SIZEOF_INT32

// Convert slice header to an []int32
data := *(*[]int32)(unsafe.Pointer(&amp;header))
</code></pre>
","11927363"
"How to replicate do while in go?","19650","","<p>I want a set of code to be executed until user explicitly wants to exit the function. For eg: when a user runs the program, he will see 2 options:</p>

<ol>
<li>Run again   </li>
<li>Exit</li>
</ol>

<p>this will be achieved using switch case structure. Here if user presses 1, set of functions associated with 1 will execute and if user presses 2, the program will exit. How should i achieve this scenario in golang ? In java, i believe this could be done using do while structure but go doesn't support do while loop. Following is my code which i tried but this goes in a infinite loop:</p>

<pre><code>func sample() {
    var i = 1
    for i &gt; 0 {
        fmt.Println(""Press 1 to run"")
        fmt.Println(""Press 2 to exit"")
        var input string
        inpt, _ := fmt.Scanln(&amp;input)
        switch inpt {
        case 1:
            fmt.Println(""hi"")
        case 2:
            os.Exit(2)
        default:
            fmt.Println(""def"")
        }
    }
}
</code></pre>

<p>The program irrespective of the input, prints only ""hi"". Could someone please correct me what wrong i am doing here ?</p>

<p>Thanks.</p>
","<p>When this question was asked this was a better answer <em>for this specific scenario</em> (little did I know this would be the #1 result when searching Google for ""do while loop golang""). For answering this question generically please see <a href=""https://stackoverflow.com/a/32844744/455678"">@LinearZoetrope's answer below</a>.</p>

<p>Wrap your function in a for loop:</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
)

func main() {
    fmt.Println(""Press 1 to run"")
    fmt.Println(""Press 2 to exit"")
    for {
        sample()
    }
}

func sample() {
    var input int
    n, err := fmt.Scanln(&amp;input)
    if n &lt; 1 || err != nil {
         fmt.Println(""invalid input"")
         return
    }
    switch input {
    case 1:
        fmt.Println(""hi"")
    case 2:
        os.Exit(2)
    default:
        fmt.Println(""def"")
    }
}
</code></pre>

<p>A <code>for</code> loop without any declarations is equivalent to a <code>while</code> loop in other C-like languages. Check out the <a href=""https://golang.org/doc/effective_go.html#for"" rel=""nofollow noreferrer"">Effective Go documentation</a> which covers the <code>for</code> loop.</p>
","32834707"
"golang: Best way to implement global counters for highly concurrent applications?","19549","","<p>What is the best way to implement global counters for a highly concurrent application?  In my case I may have 10K-20K go routines performing ""work"", and I want to count the number and types of items that the routines are working on collectively...</p>

<p>The ""classic"" synchronous coding style would look like:</p>

<pre><code>var work_counter int

func GoWorkerRoutine() {
    for {
        // do work
        atomic.AddInt32(&amp;work_counter,1)
    }    
}
</code></pre>

<p>Now this gets more complicated because I want to track the ""type"" of work being done, so really I'd need something like this:</p>

<pre><code>var work_counter map[string]int
var work_mux sync.Mutex

func GoWorkerRoutine() {
    for {
        // do work
        work_mux.Lock()
        work_counter[""type1""]++
        work_mux.Unlock()
    }    
}
</code></pre>

<p>It seems like there should be a ""go"" optimized way using channels or something similar to this:</p>

<pre><code>var work_counter int
var work_chan chan int // make() called somewhere else (buffered)

// started somewher else
func GoCounterRoutine() {
    for {
        select {
            case c := &lt;- work_chan:
                work_counter += c
                break
        }
    }
}

func GoWorkerRoutine() {
    for {
        // do work
        work_chan &lt;- 1
    }    
}
</code></pre>

<p>This last example is still missing the map, but that's easy enough to add.  Will this style provide better performance than just a simple atomic increment?  I can't tell if this is more or less complicated when we're talking about concurrent access to a global value versus something that may block on I/O to complete...</p>

<p>Thoughts are appreciated.</p>

<p>Update 5/28/2013:</p>

<p>I tested a couple implementations, and the results were not what I expected, here's my counter source code:</p>

<pre><code>package helpers

import (
)

type CounterIncrementStruct struct {
    bucket string
    value int
}

type CounterQueryStruct struct {
    bucket string
    channel chan int
}

var counter map[string]int
var counterIncrementChan chan CounterIncrementStruct
var counterQueryChan chan CounterQueryStruct
var counterListChan chan chan map[string]int

func CounterInitialize() {
    counter = make(map[string]int)
    counterIncrementChan = make(chan CounterIncrementStruct,0)
    counterQueryChan = make(chan CounterQueryStruct,100)
    counterListChan = make(chan chan map[string]int,100)
    go goCounterWriter()
}

func goCounterWriter() {
    for {
        select {
            case ci := &lt;- counterIncrementChan:
                if len(ci.bucket)==0 { return }
                counter[ci.bucket]+=ci.value
                break
            case cq := &lt;- counterQueryChan:
                val,found:=counter[cq.bucket]
                if found {
                    cq.channel &lt;- val
                } else {
                    cq.channel &lt;- -1    
                }
                break
            case cl := &lt;- counterListChan:
                nm := make(map[string]int)
                for k, v := range counter {
                    nm[k] = v
                }
                cl &lt;- nm
                break
        }
    }
}

func CounterIncrement(bucket string, counter int) {
    if len(bucket)==0 || counter==0 { return }
    counterIncrementChan &lt;- CounterIncrementStruct{bucket,counter}
}

func CounterQuery(bucket string) int {
    if len(bucket)==0 { return -1 }
    reply := make(chan int)
    counterQueryChan &lt;- CounterQueryStruct{bucket,reply}
    return &lt;- reply
}

func CounterList() map[string]int {
    reply := make(chan map[string]int)
    counterListChan &lt;- reply
    return &lt;- reply
}
</code></pre>

<p>It uses channels for both writes and reads which seems logical.</p>

<p>Here are my test cases:</p>

<pre><code>func bcRoutine(b *testing.B,e chan bool) {
    for i := 0; i &lt; b.N; i++ {
        CounterIncrement(""abc123"",5)
        CounterIncrement(""def456"",5)
        CounterIncrement(""ghi789"",5)
        CounterIncrement(""abc123"",5)
        CounterIncrement(""def456"",5)
        CounterIncrement(""ghi789"",5)
    }
    e&lt;-true
}

func BenchmarkChannels(b *testing.B) {
    b.StopTimer()
    CounterInitialize()
    e:=make(chan bool)
    b.StartTimer()

    go bcRoutine(b,e)
    go bcRoutine(b,e)
    go bcRoutine(b,e)
    go bcRoutine(b,e)
    go bcRoutine(b,e)

    &lt;-e
    &lt;-e
    &lt;-e
    &lt;-e
    &lt;-e

}

var mux sync.Mutex
var m map[string]int
func bmIncrement(bucket string, value int) {
    mux.Lock()
    m[bucket]+=value
    mux.Unlock()
}

func bmRoutine(b *testing.B,e chan bool) {
    for i := 0; i &lt; b.N; i++ {
        bmIncrement(""abc123"",5)
        bmIncrement(""def456"",5)
        bmIncrement(""ghi789"",5)
        bmIncrement(""abc123"",5)
        bmIncrement(""def456"",5)
        bmIncrement(""ghi789"",5)
    }
    e&lt;-true
}

func BenchmarkMutex(b *testing.B) {
    b.StopTimer()
    m=make(map[string]int)
    e:=make(chan bool)
    b.StartTimer()

    for i := 0; i &lt; b.N; i++ {
        bmIncrement(""abc123"",5)
        bmIncrement(""def456"",5)
        bmIncrement(""ghi789"",5)
        bmIncrement(""abc123"",5)
        bmIncrement(""def456"",5)
        bmIncrement(""ghi789"",5)
    }

    go bmRoutine(b,e)
    go bmRoutine(b,e)
    go bmRoutine(b,e)
    go bmRoutine(b,e)
    go bmRoutine(b,e)

    &lt;-e
    &lt;-e
    &lt;-e
    &lt;-e
    &lt;-e

}
</code></pre>

<p>I implemented a simple benchmark with just a mutex around the map (just testing writes), and benchmarked both with 5 goroutines running in parallel.  Here are the results:</p>

<pre><code>$ go test --bench=. helpers
PASS
BenchmarkChannels         100000             15560 ns/op
BenchmarkMutex   1000000              2669 ns/op
ok      helpers 4.452s
</code></pre>

<p>I would not have expected the mutex to be that much faster...</p>

<p>Further thoughts?</p>
","<p>Don't use <a href=""http://golang.org/pkg/sync/atomic/"" rel=""noreferrer"">sync/atomic</a> - from the linked page</p>

<blockquote>
  <p>Package atomic provides low-level atomic memory primitives useful for
  implementing synchronization algorithms.
  These functions require great care to be used correctly. Except for
  special, low-level applications, synchronization is better done with
  channels or the facilities of the sync package</p>
</blockquote>

<p><a href=""https://github.com/ncw/go-nflog-acctd"" rel=""noreferrer"">Last time I had to do this</a> I benchmarked something which looked like your second example with a mutex and something which looked like your third example with a channel.  The channels code won when things got really busy, but make sure you make the channel buffer big.</p>
","16797428"
"Initialize array of interfaces in Golang","19515","","<p>Here is a example of variable:</p>

<p><code>
names := []interface{}{""first"", ""second""}
</code></p>

<p>But how to initialize it dynamically from the array of strings?</p>
","<pre><code>strs := []string{""first"", ""second""}
names := make([]interface{}, len(strs))
for i, s := range strs {
    names[i] = s
}
</code></pre>

<p>Would be the simplest</p>
","20954087"
"Slice of slices types","19499","","<p>I'm currently working my way through the excellent <a href=""https://tour.golang.org/"">Tour of Go</a>.
I finished one of the exercises (#45) with the following solution:</p>

<pre><code>func Pic(dx, dy int) [][]uint8 {
    pic := make([][]uint8, dy) /* type declaration */
    for i := range pic {
        pic[i] = make([]uint8, dx) /* again the type? */
        for j := range pic[i] {
            pic[i][j] = uint8((i+j)/2)
        }
    }
    return pic
}
</code></pre>

<p>I don't understand why I have to use a <code>make</code> statement with the <code>uint8</code> type twice (see comments in snippet). That seems redundant but I can't figure out how to do it in an other way.</p>
","<p>There is no other way to do this in Go.</p>

<p>Yes, I agree it is verbose, but necessary. The second make() statement is entirely independent of the first one. It could be argued that the compiler should be able to infer the type from <code>pic[i]</code>, but it doesn't at this point.</p>

<p>Another point: how would the make() statement look if you omitted the type in the second case? The make() is still required to do the actual allocation and to be able to specify the required len/capacity. </p>

<p>As a side note, you mixed up the slice lengths. The exercise states the top level slice should have length <code>dy</code>, not <code>dx</code> as you put in your code.</p>
","7703629"
"Difference between some operators ""|"", ""^"", ""&"", ""&^"". Golang","19483","","<p>Recently I read golang specification and faced with some interesting operators:</p>

<pre><code>&amp;    bitwise AND            integers
|    bitwise OR             integers
^    bitwise XOR            integers
&amp;^   bit clear (AND NOT)    integers
</code></pre>

<p>I've tried to play with it, but the only one I have understood is that ""|"" add integers and ""+"" operator additionally work with floats, strings etc.</p>

<p>What they are used for in practice? Could anyone give some explanation about these 4 operators above?</p>
","<p>Bitwise operators come into play when you have to work with <em>byte- or bit-level data</em>.</p>

<p>Here I list a handful of examples using bit operations with code samples (in no particular order):</p>

<hr>

<p><strong>1.</strong> They are common and part of many algorithms in <em>cryptography</em> and <em>hash functions</em> (e.g. <a href=""http://en.wikipedia.org/wiki/MD5"">MD5</a>).</p>

<p><strong>2.</strong> They are also often used if you want to ""save"" space and you <em>pack multiple ""bool"" variables</em> into one <code>int</code> for example, you assign a bit to each bool variable. You have to use bitwise operators to be able to individually change/read the bits.</p>

<p>For example packing 8 bits/bools into one <code>int</code>:</p>

<pre><code>flags := 0x00  // All flags are 0
flags |= 0x02  // Turn the 2nd bit to 1 (leaving rest unchanged)
flags |= 0xff  // Turn 8 bits (0..7) to 1
flags &amp;= 0xfe  // Set the lowest bit to 0 (leaving rest unchanged)

istrue := flags&amp;0x04 != 0 // Test if 3rd bit is 1
</code></pre>

<p><strong>3.</strong> Another area is <em>compressing data</em> where you want to get the most out of a <code>byte</code> and use all its bits to store/retreive some info (a bit is the basic unit of information in computing and digital communications).</p>

<p><strong>4.</strong> Similar to compression but not quite the same: <em>bitstreams</em>. It is also used to save space in a data stream by not sending complete bytes but rather fields having arbitrary bit-length.</p>

<p>I've written and published a highly optimized bit-level Reader and Writer package, open sourced here: <a href=""https://github.com/icza/bitio""><strong>github.com/icza/bitio</strong></a>. You will see extensive usage of all kinds of bit operations in its sources.</p>

<p><strong>5.</strong> Another practical usage: <em>testing certain properties of an (integer) number</em>. Knowing the binary representation of integer numbers (<a href=""http://en.wikipedia.org/wiki/Two&#39;s_complement"">Two's complement</a>) there are certain characteristics of numbers in their binary representation. For example an integer number (in 2's complement) is <em>even</em> (can be divided by 2) if the lowest bit is 0:</p>

<pre><code>func isEven(i int) bool {
    return i&amp;0x01 == 0
}
</code></pre>

<p>By testing the bits of an integer you can also tell if it's a power of 2. For example if a positive number only contains one <code>1</code> bit, then it is a power of 2 (e.g. <code>2 = 0x02 = 00000010b</code>, <code>16 = 0x10 = 00010000</code> but for example <code>17 = 0x11 = 00010001</code> not power of 2).</p>

<p><strong>6.</strong> <em>Many encoding/decoding procedures</em> also use bit operations. The most trivial is the <a href=""http://en.wikipedia.org/wiki/UTF-8"">UTF-8 encoding</a> which uses a variable-length encoding for representing unicode code points (<code>rune</code> in Go) as byte sequences.<br>
A simple variation of a variable-length encoding could be to use the highest bit of a byte (8th or 7th if 0-indexed) to signal if more bytes are required to decode a number, and the remaining 7 bits are always the ""useful"" data. You can test the highest bit and ""separate"" the 7 useful bits like this:</p>

<pre><code>b := readOneByte()
usefulBits := b &amp; 0x7f
hasMoreBytes := b &amp; 0x80 != 0
</code></pre>

<p>The profit of using such a variable-length encoding is that even if you use <code>uint64</code> type in Go which is 8 bytes in memory, small numbers can still be represented using less bytes (numbers in the range <code>0..127</code> only require 1 byte!). If the samples you want to store or transfer have many small values, this alone can compress the data to 1/8th = 12.5 %. The down side is that big numbers (which have bits even in the highest byte) will use more than 8 bytes. Whether it's worth it depends on the heuristic of the samples.</p>

<p><strong>X.</strong> <em>And the list goes on...</em></p>

<hr>

<p>Can you live without knowing/using bitwise operators in Go (and in many other programming languages)? The answer is Yes. But if you know them, sometimes they can make your life easier and your programs more efficient.</p>

<p>If you want to learn more on the topic, read the Wikipedia article: <a href=""http://en.wikipedia.org/wiki/Bitwise_operation"">Bitwise operation</a> and google the term ""Bitwise Operators Tutorial"", there are many good articles.</p>
","28433370"
"Function for copying arrays in Go language","19419","","<p>Is there any built-in function in Go for copying one array to another?
Will this work in case of two (or more) dimensional arrays?</p>
","<blockquote>
  <p>Is there any built-in function in Go language for copying one array to another?</p>
</blockquote>

<p>Yes: <a href=""http://play.golang.org/p/_lYNw9SXN5"">http://play.golang.org/p/_lYNw9SXN5</a></p>

<pre><code>a := []string{
    ""hello"",
    ""world"",
}
b := []string{
    ""goodbye"",
    ""world"",
}

copy(a, b)

// a == []string{""goodbye"", ""world""}
</code></pre>

<hr>

<blockquote>
  <p>Will this work in case of two (or more) dimensional arrays?</p>
</blockquote>

<p><code>copy</code> will do a shallow copy of the rows: <a href=""http://play.golang.org/p/0gPk6P1VWh"">http://play.golang.org/p/0gPk6P1VWh</a></p>

<pre><code>a := make([][]string, 10)

b := make([][]string, 10)
for i := range b {
    b[i] = make([]string, 10)
    for j := range b[i] {
        b[i][j] = strconv.Itoa(i + j)
    }
}

copy(a, b)

// a and b look the same

b[1] = []string{""some"", ""new"", ""data""}

// b's second row is different; a still looks the same

b[0][0] = ""apple""

// now a looks different
</code></pre>

<p>I don't think there's a built-in for doing deep-copys of multi-dimensional arrays: you can do it manually like: <a href=""http://play.golang.org/p/nlVJq-ehzC"">http://play.golang.org/p/nlVJq-ehzC</a></p>

<pre><code>a := make([][]string, 10)

b := make([][]string, 10)
for i := range b {
    b[i] = make([]string, 10)
    for j := range b[i] {
        b[i][j] = strconv.Itoa(i + j)
    }
}

// manual deep copy
for i := range b {
    a[i] = make([]string, len(b[i]))
    copy(a[i], b[i])
}

b[0][0] = ""apple""

// a still looks the same
</code></pre>

<p>edit: As pointed out in the comments, I assumed by ""copy an array"" you meant ""do a deep copy of a slice"", as arrays can be deep-copied with the <code>=</code> operator as per jnml's answer (because arrays are value types): <a href=""http://play.golang.org/p/8EuFqXnqPB"">http://play.golang.org/p/8EuFqXnqPB</a></p>
","18560025"
"Check for nil and nil interface in Go","19407","","<p>Currently I'm using this helper function to check for nil and nil interfaces</p>

<pre><code>func isNil(a interface{}) bool {
  defer func() { recover() }()
  return a == nil || reflect.ValueOf(a).IsNil()
}
</code></pre>

<p>Since <code>reflect.ValueOf(a).IsNil()</code> panics if the value's Kind is anything other than <code>Chan</code>, <code>Func</code>, <code>Map</code>, <code>Ptr</code>, <code>Interface</code> or <code>Slice</code>, I threw in the deferred <code>recover()</code> to catch those.</p>

<p>Is there a better way to achieve this check? It think there should be a more straight forward way to do this.</p>
","<p>See for example Kyle's answer in this <a href=""https://groups.google.com/d/topic/golang-nuts/wnH302gBa4I/discussion"" rel=""noreferrer"">thread</a> at the golang-nuts mailing list.</p>

<p>In short: If you never store <code>(*T)(nil)</code> in an interface, then you can reliably use comparison against nil, no need to use reflection. On the other hand, assigning untyped nil to an interface is always OK.</p>
","13476765"
"How do you statically link a c library in go using cgo?","19313","","<p>So there's a bunch of stuff on the group that suggests you can do this in go (although not on the cgo documentation):</p>

<pre><code>package bridge

import ""fmt""

// #cgo CFLAGS: -I/Users/doug/projects/c/go-bridge/include
// #cgo LDFLAGS: /Users/doug/projects/c/go-bridge/build/libgb.a
// #include &lt;junk.h&gt;
import ""C""

func Run() {
  fmt.Printf(""Invoking c library...\n"")
  C.x(10)
  fmt.Printf(""Done\n"")
}
</code></pre>

<p>However, it doesn't seem to work:</p>

<pre><code>/var/folders/.../bridge.a(bridge.cgo2.o)(__TEXT/__text): x: not defined
</code></pre>

<p>This seems to work fine using a dynamic library, and inspecting the generated files, it actually has the symbol 'x' in there:</p>

<pre><code>/var/folders/rg/hj4s3qlj3sz1d1b5p50ws0vc0000gn/T/go-build442792776/bridge/_obj/_cgo_.o:
0000000100001048 S _NXArgc 
0000000100001050 S _NXArgv 
0000000100001060 S ___progname 
0000000100000dc0 T __cgo_2d7eefe3d6d4_Cfunc_x
0000000100000da0 T __cgo_allocate 
0000000100000db0 T __cgo_panic
0000000100000000 T __mh_execute_header 
0000000100000d90 T _crosscall2
0000000100001058 S _environ
                 U _exit 
0000000100000d80 T _main
                 U _puts 
0000000100001000 s _pvars 
0000000100000de0 T _x                &lt;------- Exists
                 U dyld_stub_binder 
0000000100000d40 T start
</code></pre>

<p>but obviously is just a marker in bridge.cgo2.o:</p>

<pre><code>/var/folders/rg/hj4s3qlj3sz1d1b5p50ws0vc0000gn/T/go-build442792776/bridge.a(bridge.cgo2.o):
0000000000000368 s EH_frame0
0000000000000000 T __cgo_2d7eefe3d6d4_Cfunc_x
0000000000000380 S __cgo_2d7eefe3d6d4_Cfunc_x.eh
                 U _x
</code></pre>

<p>What am I doing wrong?</p>

<p>For ref, the c header:</p>

<pre><code>int x(int y);
</code></pre>

<p>And code:</p>

<pre><code>#include &lt;junk.h&gt;
#include &lt;stdio.h&gt;

int x(int y) {
  printf(""Hello World\n"");
  return y;
}
</code></pre>

<p>--</p>

<p>Edit:</p>

<p>No, -L and -l don't work either; there's actually some specific discussion on the google group that this (-l/blah/blah.a) does not work for cgo, and the correct syntax <em>is</em> in fact to omit the -l and just list the .a file... but hey, if it'd worked, I'd totally just use it. But it doesn't:</p>

<pre><code>dougs-mini:go doug$ go run test.go
# bridge
ld: library not found for -l/Users/doug/projects/c/go-bridge/build/libgb.a
collect2: ld returned 1 exit status
dougs-mini:go doug$ ls -l /Users/doug/projects/c/go-bridge/build/libgb.a
-rw-r--r--  1 doug  staff  872 25 May 14:02 /Users/doug/projects/c/go-bridge/build/libgb.a
</code></pre>

<p>verbose version:</p>

<pre><code>dougs-mini:go doug$ go build -work -x test.go
WORK=/var/folders/rg/hj4s3qlj3sz1d1b5p50ws0vc0000gn/T/go-build354497708
mkdir -p $WORK/bridge/_obj/
cd /Users/doug/projects/c/go-bridge/go/src/bridge
/Users/doug/projects/go/go/pkg/tool/darwin_amd64/cgo -objdir $WORK/bridge/_obj/ -- -I/Users/doug/projects/c/go-bridge/include -I $WORK/bridge/_obj/ bridge.go
/Users/doug/projects/go/go/pkg/tool/darwin_amd64/6c -FVw -I $WORK/bridge/_obj/ -I /Users/doug/projects/go/go/pkg/darwin_amd64 -o $WORK/bridge/_obj/_cgo_defun.6 -DGOOS_darwin -DGOARCH_amd64 $WORK/bridge/_obj/_cgo_defun.c
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -I/Users/doug/projects/c/go-bridge/include -I $WORK/bridge/_obj/ -o $WORK/bridge/_obj/_cgo_main.o -c $WORK/bridge/_obj/_cgo_main.c
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -I/Users/doug/projects/c/go-bridge/include -I $WORK/bridge/_obj/ -o $WORK/bridge/_obj/_cgo_export.o -c $WORK/bridge/_obj/_cgo_export.c
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -I/Users/doug/projects/c/go-bridge/include -I $WORK/bridge/_obj/ -o $WORK/bridge/_obj/bridge.cgo2.o -c $WORK/bridge/_obj/bridge.cgo2.c
gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -o $WORK/bridge/_obj/_cgo_.o $WORK/bridge/_obj/_cgo_main.o $WORK/bridge/_obj/_cgo_export.o $WORK/bridge/_obj/bridge.cgo2.o -l/Users/doug/projects/c/go-bridge/build/libgb.a
# bridge
ld: library not found for -l/Users/doug/projects/c/go-bridge/build/libgb.a
collect2: ld returned 1 exit status
</code></pre>

<p>It's worth noting that the failure when you try to link like this (using -l) is typical of gcc failing to link because you're attempting to combine a set of object files.</p>

<p>ie. This:</p>

<pre><code>gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -o ... -l/path/libgb.a
</code></pre>

<p>Will never compile under gcc; you <em>must</em> link a static library like this:</p>

<pre><code>gcc -I . -g -O2 -fPIC -m64 -pthread -fno-common -o ... /path/libgb.a
</code></pre>

<p>ie. It is absolutely not that I'm missing a -l or -L.</p>
","<p>Turns out my code is 100% fine; it was a copy of Go 1.0; under go 1.1 this works.
Under go 1.0, it doesn't.</p>

<p>(it's a bit lame answering my own question, I know; but the 'use -L -l answers below aren't right either; it had nothing to do with that).</p>

<p>A working solution example is up on github here for anyone who find's this question later:</p>

<p><a href=""https://github.com/shadowmint/go-static-linking"" rel=""noreferrer"">https://github.com/shadowmint/go-static-linking</a></p>

<p>in short that looks like:</p>

<pre><code>CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags '-s' src/myapp/myapp.go
</code></pre>

<p>see also:
<a href=""https://github.com/golang/go/issues/9344"" rel=""noreferrer"">https://github.com/golang/go/issues/9344</a></p>
","16748467"
"How to get the name of a function in Go?","19288","","<p>Given a function, is it possible to get its name? Say:</p>

<pre><code>func foo() {
}

func GetFunctionName(i interface{}) string {
    // ...
}

func main() {
    // Will print ""name: foo""
    fmt.Println(""name:"", GetFunctionName(foo))
}
</code></pre>

<p>I was told that <a href=""http://golang.org/pkg/runtime/#Func.FuncForPC"" rel=""noreferrer"">runtime.FuncForPC</a> would help, but I failed to understand how to use it.</p>
","<p>Sorry for answering my own question, but I found a solution:</p>

<pre><code>package main

import (
    ""fmt""
    ""reflect""
    ""runtime""
)

func foo() {
}

func GetFunctionName(i interface{}) string {
    return runtime.FuncForPC(reflect.ValueOf(i).Pointer()).Name()
}

func main() {
    // This will print ""name: main.foo""
    fmt.Println(""name:"", GetFunctionName(foo))
}
</code></pre>
","7053871"
"go install: no install location for directory outside GOPATH","19205","","<p>Ok, I've seen this question pop up a lot, but no solutions are working for me. I've tried countless times to solve this issue, but nothing. Here's what I have done:</p>

<ul>
<li>Installed Go.</li>
</ul>

<p>I then added path requirements to my <strong>.bash_profile</strong>:</p>

<ul>
<li><code>export PATH=$PATH:/usr/local/go/bin</code></li>
<li><code>export GOPATH=$HOME/go</code></li>
</ul>

<p>I then setup the correct folders:</p>

<p><img src=""https://i.stack.imgur.com/00Rjm.png"" alt=""Folders""></p>

<p>As you can see, I also created a projected called <strong>tire</strong>.</p>

<p>The contents for <strong>main.go</strong> are simply:</p>

<pre><code>package main

import ""fmt""

func main() {
  fmt.Println(""Hello, world!"")
}
</code></pre>

<p>I would assume this is all you need to get things working correctly, but no matter what I do, I always get the following error when I try to run <code>go install</code>:</p>

<p><code>go install: no install location for directory /Users/Daryl/go/src/tire outside GOPATH</code></p>

<p>I know I could just run <code>go install tire</code>, but that's not the issue. I'd rather know what's going on.</p>

<p>Here's what I get when I run <code>go env</code>:</p>

<pre><code>GOARCH=""amd64""
GOBIN=""""
GOCHAR=""6""
GOEXE=""""
GOHOSTARCH=""amd64""
GOHOSTOS=""darwin""
GOOS=""darwin""
GOPATH=""/Users/daryl/go""
GORACE=""""
GOROOT=""/usr/local/go""
GOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""
TERM=""dumb""
CC=""clang""
GOGCCFLAGS=""-g -O2 -fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fno-common""
CXX=""clang++""
CGO_ENABLED=""1""
</code></pre>

<p>Is this familiar to any of you? Did I miss something? Any help would be appreciated.</p>
","<p>The problem was as James Henstridge <a href=""https://stackoverflow.com/questions/26134975/go-install-no-install-location-for-directory-outside-gopath?noredirect=1#comment40964222_26134975"">commented</a>, for some reason there was an issue with my user directory name case. Even though the directory <em>is</em> lowercase, I had to make it capitalized.</p>

<p>This worked:</p>

<p><code>GOPATH=/Users/Daryl/go</code></p>

<p>This didn't:</p>

<p><code>GOPATH=$HOME/go</code></p>

<p>However, since moving to a rMBP from my iMac, I had no problems whatsoever setting up Go, so, to this day, I'm not sure what was going on, but in that instance the capitalization fixed it.</p>
","27430341"
"How Do I Parse a JSON file into a struct with Go","19137","","<p>I'm trying to configure my Go program by creating a JSON file and parsing it into a struct:</p>

<pre><code>var settings struct {
    serverMode bool
    sourceDir  string
    targetDir  string
}

func main() {

    // then config file settings

    configFile, err := os.Open(""config.json"")
    if err != nil {
        printError(""opening config file"", err.Error())
    }

    jsonParser := json.NewDecoder(configFile)
    if err = jsonParser.Decode(&amp;settings); err != nil {
        printError(""parsing config file"", err.Error())
    }

    fmt.Printf(""%v %s %s"", settings.serverMode, settings.sourceDir, settings.targetDir)
    return
}
</code></pre>

<p>The config.json file:</p>

<pre><code>{
    ""serverMode"": true,
    ""sourceDir"": ""."",
    ""targetDir"": "".""
}
</code></pre>

<p>The Program compiles and runs without any errors, but the print statement outputs:</p>

<pre><code>false  
</code></pre>

<p>(false and two empty strings)</p>

<p>I've also tried with <code>json.Unmarshal(..)</code> but had the same result.</p>

<p>How do I parse the JSON in a way that fills the struct values?</p>
","<p>You're not exporting your struct elements.  They all begin with a lower case letter.</p>

<pre><code>var settings struct {
    ServerMode bool `json:""serverMode""`
    SourceDir  string `json:""sourceDir""`
    TargetDir  string `json:""targetDir""`
}
</code></pre>

<p>Make the first letter of your stuct elements upper case to export them.  The JSON encoder/decoder wont use struct elements which are not exported.</p>
","16681033"
"Converting string to json or struct in GoLang","19132","","<p>I want to get a string that represents a json like this one: </p>

<blockquote>
  <p>{ ""votes"": { ""option_A"": ""3"" } }</p>
</blockquote>

<p><strong>and include a ""count"" key in it</strong> so it ends like this: </p>

<blockquote>
  <p>{ ""votes"": { ""option_A"": ""3"" }, ""count"": ""1"" }</p>
</blockquote>

<p>This is why I planned to convert it to json so I could add the count and then make it a string again. <strong>The problem is I don't know the structure of that json</strong>, so I can't use <code>json.Unmarshal(in, &amp;myStruct)</code> because that struct varies. 
How can I do this? Thank you very much</p>
","<p>You really just need a single struct, and as mentioned in the comments the correct annotations on the field will yield the desired results. JSON is not some extremely variant data format, it is well defined and any piece of json, no matter how complicated and confusing it might be to you can be represented fairly easily and with 100% accuracy both by a schema and in objects in Go and most other OO programming languages. Here's an example;</p>

<pre><code>package main

import (
    ""fmt""
    ""encoding/json""
)

type Data struct {
    Votes *Votes `json:""votes""`
    Count string `json:""count,omitempty""`
}

type Votes struct {
    OptionA string `json:""option_A""`
}

func main() {
    s := `{ ""votes"": { ""option_A"": ""3"" } }`
    data := &amp;Data{
        Votes: &amp;Votes{},
    }
    err := json.Unmarshal([]byte(s), data)
    fmt.Println(err)
    fmt.Println(data.Votes)
    s2, _ := json.Marshal(data)
    fmt.Println(string(s2))
    data.Count = ""2""
    s3, _ := json.Marshal(data)
    fmt.Println(string(s3))
}
</code></pre>

<p><a href=""https://play.golang.org/p/ScuxESTW5i"" rel=""noreferrer"">https://play.golang.org/p/ScuxESTW5i</a></p>

<p>Based on your most recent comment you could address that by using an <code>interface{}</code> to represent data besides the count, making the count a string and having the rest of the blob shoved into the <code>interface{}</code> which will accept essentially anything. That being said, Go is a statically typed language with a fairly strict type system and to reiterate, your comments stating 'it can be anything' are not true. JSON cannot be anything. For any piece of JSON there is schema and a single schema can define many many variations of JSON. I advise you take the time to understand the structure of your data rather than hacking something together under the notion that it cannot be defined when it absolutely can and is probably quite easy for someone who knows what they're doing.</p>
","40429618"
"How do you get the output of a system command in Go?","19120","","<p>Let's say I want to run 'ls' in a go program, and store the results in a string. There seems to be a few commands to fork processes in the exec and os packages, but they require file arguments for stdout, etc. Is there a way to get the output as a string?</p>
","<p>Use <a href=""http://golang.org/pkg/exec/#Cmd.Run"" rel=""noreferrer"">exec.Run</a> by specifying <a href=""http://golang.org/pkg/exec/#Constants"" rel=""noreferrer"">Pipe</a> as the stdout (and stderr if you want). It will return cmd, which contains an <a href=""http://golang.org/pkg/os/#File"" rel=""noreferrer"">os.File</a> in the Stdout (and Stderr) fields. Then you can read it using for example <a href=""http://golang.org/pkg/io/ioutil/#ReadAll"" rel=""noreferrer"">ioutil.ReadAll</a>.</p>

<p>Example:</p>

<pre><code>package main

import (
    ""exec"";
    ""io/ioutil"";
)

func main() {
    if cmd, e := exec.Run(""/bin/ls"", nil, nil, exec.DevNull, exec.Pipe, exec.MergeWithStdout); e == nil {
        b, _ := ioutil.ReadAll(cmd.Stdout)
        println(""output: "" + string(b))
    }
}
</code></pre>
","1886140"
"Go Error Handling Techniques","19110","","<p>I'm just getting started with Go. My code is starting to have a lot of this:</p>

<pre><code>   if err != nil {
      //handle err
   }
</code></pre>

<p>or this</p>

<pre><code>  if err := rows.Scan(&amp;some_column); err != nil {
      //handle err
  }
</code></pre>

<p>Are there some good idioms/strategies/best-practices for checking and handling errors in Go?</p>

<p>EDIT to clarify: I'm not bellyaching or suggesting that the Go team come up with something better. I'm asking if I'm doing it right or have I missed some technique that the community came up with. Thanks all.</p>
","<p>Your code is idiomatic and in my opinion it is the best practice available. Some would disagree for sure, but I would argue that this is the style seen all over <a href=""https://github.com/golang/go/tree/master/src"" rel=""noreferrer"">the standard libraries in Golang</a>. In other words, Go authors write error handling in this way.</p>
","16963472"
"Golang http request results in EOF errors when making multiple requests successively","19110","","<p>I am trying to debug a very unusual error I am receiving for a simple REST library I <a href=""https://github.com/chourobin/go.firebase"">wrote</a>.</p>

<p>I am using the standard net/http package to make Get, Post, Put, Delete requests but my tests occasionally fail when I make multiple requests successively. My test looks like this:</p>

<pre><code>func TestGetObject(t *testing.T) {
    firebaseRoot := New(firebase_url)
    body, err := firebaseRoot.Get(""1"")
    if err != nil {
        t.Errorf(""Error: %s"", err)
    }
    t.Logf(""%q"", body)
}  

func TestPushObject(t *testing.T) {
    firebaseRoot := New(firebase_url)
    msg := Message{""testing"", ""1..2..3""}
    body, err := firebaseRoot.Push(""/"", msg)
    if err != nil {
        t.Errorf(""Error: %s"", err)
    }
    t.Logf(""%q"", body)
}
</code></pre>

<p>And I am making the request like this:</p>

<pre><code>// Send HTTP Request, return data
func (f *firebaseRoot) SendRequest(method string, path string, body io.Reader) ([]byte, error) {
url := f.BuildURL(path)

// create a request
req, err := http.NewRequest(method, url, body)
if err != nil {
    return nil, err
}

// send JSON to firebase
resp, err := http.DefaultClient.Do(req)
if err != nil {
    return nil, err
}

if resp.StatusCode != http.StatusOK {
    return nil, fmt.Errorf(""Bad HTTP Response: %v"", resp.Status)
}

defer resp.Body.Close()
b, err := ioutil.ReadAll(resp.Body)
if err != nil {
    return nil, err
}

return b, nil
} 
</code></pre>

<p>Sometimes it works, but most of the time I get 1 or 2 failures:</p>

<pre><code>--- FAIL: TestGetObject (0.00 seconds)
firebase_test.go:53: Error: Get https://go-firebase-test.firebaseio.com/1.json: EOF
firebase_test.go:55: """"

--- FAIL: TestPushObject (0.00 seconds)
firebase_test.go:63: Error: Post https://go-firebase-test.firebaseio.com/.json: EOF
firebase_test.go:65: """"
FAIL
exit status 1
FAIL    github.com/chourobin/go.firebase    3.422s
</code></pre>

<p>The failures happen when I make more than 1 request. If I comment out everything except for the PUT request, the tests consistently pass. Once I include a second test, such as GET, one or the other fails (sometimes both pass).</p>

<p>Any help appreciated, and thanks!</p>

<p>Link to the source: <a href=""http://github.com/chourobin/go.firebase"">http://github.com/chourobin/go.firebase</a></p>
","<p>I'm going to guess there is no problem with your code. The most likely cause of your problem is because the server is closing the connection. Rate limiting is one possible reason for this.</p>

<p>Your test shouldn't be relying on an external service that's very brittle and not hermetic. Instead you should think about spinning up a test server locally.</p>
","17735392"
"Trim string's suffix or extension?","19050","","<p>For example, I have a string, consists of ""sample.zip"". How do I remove the "".zip"" extension using strings package or other else? </p>
","<p><strong>Edit: Go has moved on. Please see <a href=""https://stackoverflow.com/a/21538822/83264"">Keith's answer</a>.</strong></p>

<p>Use <a href=""http://golang.org/pkg/path/filepath/#Ext"" rel=""noreferrer"">path/filepath.Ext</a> to get the extension. You can then use the length of the extension to retrieve the substring minus the extension.</p>

<pre><code>var filename = ""hello.blah""
var extension = filepath.Ext(filename)
var name = filename[0:len(filename)-len(extension)]
</code></pre>

<p>Alternatively you could use <a href=""http://golang.org/pkg/strings/#example_LastIndex"" rel=""noreferrer"">strings.LastIndex</a> to find the last period (.) but this may be a little more fragile in that there will be edge cases (e.g. no extension) that <code>filepath.Ext</code> handles that you may need to code for explicitly, or if Go were to be run on a theoretical O/S that uses a extension delimiter other than the period.</p>
","13027975"
"Go - append to slice in struct","19039","","<p>I am trying to implement 2 simple structs as follows:</p>

<pre><code>package main

import (
    ""fmt""
)

type MyBoxItem struct {
    Name string
}

type MyBox struct {
    Items []MyBoxItem
}

func (box *MyBox) AddItem(item MyBoxItem) []MyBoxItem {
    return append(box.Items, item)
}

func main() {

    item1 := MyBoxItem{Name: ""Test Item 1""}
    item2 := MyBoxItem{Name: ""Test Item 2""}

    items := []MyBoxItem{}
    box := MyBox{items}

    AddItem(box, item1)  // This is where i am stuck

    fmt.Println(len(box.Items))
}
</code></pre>

<p>What am i doing wrong?  I simply want to call the addItem method on the box struct and pass an item in</p>
","<p>Hmm... This is the most common mistake that people make when appending to slices in Go. You must assign the result back to slice.</p>

<pre><code>func (box *MyBox) AddItem(item MyBoxItem) []MyBoxItem {
    box.Items = append(box.Items, item)
    return box.Items
}
</code></pre>

<p>Also, you have defined <code>AddItem</code> for <code>*MyBox</code> type, so call this method as <code>box.AddItem(item1)</code></p>
","18042563"
"Why can't the interface be implemented with pointer receivers","19027","","<p>I'm confused as to why this fails to compile with:</p>

<blockquote>
  <blockquote>
    <p>impossible type assertion:
         Faz does not implement Foo (Bar method has pointer receiver)</p>
  </blockquote>
</blockquote>

<p>if I make the receiver for Faz.Bar a Faz value rather than a Faz pointer then it compiles fine, but I thought it was always better to have pointer receivers so values aren't being copied around?</p>

<pre><code>package main

import (
    ""log""
)

func main() {
    foo := New().(Faz)
    log.Println(foo)
}

type Foo interface {
    Bar() string
}

func New() Foo {
    return &amp;Faz{}
}

type Faz struct {
}

func (f *Faz) Bar() string {
    return `Bar`
}
</code></pre>
","<p>Because it's <code>*Faz</code> not <code>Faz</code>.</p>

<pre><code>func main() {
    foo := New().(*Faz)
    log.Println(foo)
}
</code></pre>
","30403752"
"JSON and dealing with unexported fields","19004","","<p>Is there a technical reason why unexported fields are not included by encoding/json? If not and it is an arbitrary decision could there be an additional back door option (say '+') to include even though unexported?</p>

<p>Requiring client code to export to get this functionality feels unfortunate, especially if lower case is providing encapsulation or the decision to marshal structures comes much later than design of them.</p>

<p>How are people dealing with this? Just export everything?</p>

<p>Also, doesn't exporting field names make it difficult to follow suggested idioms. I think if a struct X has field Y, you can not have an accessor method Y(). If you want to provide interface access to Y you have to come up with a new name for the getter and no matter what you'll get something un-idiomatic according to <a href=""http://golang.org/doc/effective_go.html#Getters"" rel=""noreferrer"">http://golang.org/doc/effective_go.html#Getters</a></p>
","<p>There is a technical reason. The json library does not have the power to view fields using reflect unless they are exported. A package can only view the unexported fields of types within its own package</p>

<p>In order to deal with your problem, what you can do is make an unexported type with exported fields. Json will unmarshal into an unexported type if passed to it without a problem but it would not show up in the API docs. You can then make an exported type that embeds the unexported type. This exported type would then need methods to implement the <code>json.Marshaler</code> and <code>json.Unmarshaler</code> interfaces.</p>

<p>Note: all code is untested and may not even compile.</p>

<pre><code>type jsonData struct {
    Field1 string
    Field2 string
}

type JsonData struct {
    jsonData
}

// Implement json.Unmarshaller
func (d *JsonData) UnmarshalJSON(b []byte) error {
    return json.Unmarshal(b, &amp;d.jsonData)
}

// Getter
func (d *JsonData) Field1() string {
    return d.jsonData.Field1
}
</code></pre>
","11129474"
"Golang floating point precision float32 vs float64","18993","","<p>I wrote a program to demonstrate floating point error in Go: </p>

<pre><code>func main() {
    a := float64(0.2) 
    a += 0.1
    a -= 0.3
    var i int
    for i = 0; a &lt; 1.0; i++ {
        a += a
    }
    fmt.Printf(""After %d iterations, a = %e\n"", i, a)
}
</code></pre>

<p>It prints:</p>

<pre><code>After 54 iterations, a = 1.000000e+00
</code></pre>

<p>This matches the behaviour of the same program written in C (using the <code>double</code> type) </p>

<p>However, if <code>float32</code> is used instead, the program gets stuck in an infinite loop! If you modify the C program to use a <code>float</code> instead of a <code>double</code>, it prints</p>

<pre><code>After 27 iterations, a = 1.600000e+00
</code></pre>

<p>Why doesn't the Go program have the same output as the C program when using <code>float32</code>?</p>
","<p>Agree with ANisus, go is doing the right thing. Concerning C, I'm not convinced by his guess.</p>

<p>The C standard does not dictate, but most implementations of libc will convert the decimal representation to nearest float (at least to comply with IEEE-754 2008 or ISO 10967), so I don't think this is the most probable explanation.</p>

<p>There are several reasons why the C program behavior might differ... Especially, some intermediate computations might be performed with excess precision (double or long double).</p>

<p>The most probable thing I can think of, is if ever you wrote 0.1 instead of 0.1f in C.<br>
In which case, you might have cause excess precision in initialization<br>
(you sum float a+double 0.1 => the float is converted to double, then result is converted back to float)</p>

<p>If I emulate these operations</p>

<pre><code>float32(float32(float32(0.2) + float64(0.1)) - float64(0.3))
</code></pre>

<p>Then I find something near 1.1920929e-8f</p>

<p>After 27 iterations, this sums to 1.6f</p>
","22341200"
"Is there no XOR operator for booleans in golang?","18973","","<p>Is there no XOR operator for booleans in golang?</p>

<p>I was trying to do something like <code>b1^b2</code> but it said it wasn't defined for booleans.</p>
","<p>There is not. Go does <em>not</em> provide <a href=""http://golang.org/ref/spec#Logical_operators"">a <em>logical</em></a> exclusive-OR operator (i.e. XOR over booleans) and <a href=""http://golang.org/ref/spec#Arithmetic_operators"">the <em>bitwise</em> XOR operator</a> applies only to integers.</p>

<p>However, <a href=""http://en.wikipedia.org/wiki/Exclusive_or"">an exclusive-OR</a> can be rewritten in terms of other logical operators. When re-evaluation of the expressions (X and Y) is ignored,</p>

<pre><code>X xor Y -&gt; (X || Y) &amp;&amp; !(X &amp;&amp; Y)
</code></pre>

<p>Or, more trivially as Jsor pointed out,</p>

<pre><code>X xor Y &lt;-&gt; X != Y
</code></pre>
","23025720"
"How to add new methods to an existing type in go?","18972","","<p>I want to add a convenience util method on to gorilla/mux Route and Router types:</p>

<pre><code>package util

import(
    ""net/http""
    ""github.com/0xor1/gorillaseed/src/server/lib/mux""
)

func (r *mux.Route) Subroute(tpl string, h http.Handler) *mux.Route{
    return r.PathPrefix(""/"" + tpl).Subrouter().PathPrefix(""/"").Handler(h)
}

func (r *mux.Router) Subroute(tpl string, h http.Handler) *mux.Route{
    return r.PathPrefix(""/"" + tpl).Subrouter().PathPrefix(""/"").Handler(h)
}
</code></pre>

<p>but the compiler informs me</p>

<blockquote>
  <p>Cannot define new methods on non-local type mux.Router</p>
</blockquote>

<p>So how would I achieve this? Do I create a new struct type that has an anonymous mux.Route and mux.Router fields? Or something else?</p>
","<p>As the compiler mentions, you can't extend existing types in another package. You can define your own alias or sub-package as follows:</p>

<pre><code>type MyRouter mux.Router

func (m *MyRouter) F() { ... }
</code></pre>

<p>or by embedding the original router:</p>

<pre><code>type MyRouter struct {
    *mux.Router
}

func (m *MyRouter) F() { ... }

...
r := &amp;MyRouter{router}
r.F()
</code></pre>
","28800807"
"Is there a queue implementation?","18883","","<p>Can anyone suggest Go container for simple and fast FIF/queue, Go has 3 different containers: <code>heap</code>, <code>list</code> and <code>vector</code>. Which one is more suitable to implement a queue?</p>
","<p>Either vector or list should work, but vector is probably the way to go. I say this because vector will probably allocate less often than list and garbage collection (in the current Go implementation) is fairly expensive. In a small program it probably won't matter, though.</p>
","2819439"
"Number of elements in a channel","18855","","<p>Using a buffered channel, how do measure how many elements are in the channel? For example, I'm creating and sending on a channel like this:</p>

<pre><code>send_ch := make(chan []byte, 100)
// code
send_ch &lt;- msg
</code></pre>

<p>I want to measure how many <strong>msgs</strong> are in the channel <strong>send_ch</strong>.</p>

<p>I'm aware that due to concurrency the measurement won't be exact, as pre-emption could occur between measurement and action (eg discussed in this video <a href=""http://www.youtube.com/watch?v=f6kdp27TYZs"" rel=""noreferrer"">Google I/O 2012 - Go Concurrency Patterns</a>). I'll be using this for flow control between producers and consumers ie once I've passed through a high watermark, changing some behaviour until I pass back through a low watermark.</p>
","<p><a href=""http://golang.org/pkg/builtin/#len"" rel=""noreferrer"">http://golang.org/pkg/builtin/#len</a></p>

<blockquote>
  <p><strong>func len(v Type) int</strong><br>
  The len built-in function returns the length of v, according to its type:</p>
  
  <ul>
  <li>Array: the number of elements in v.  </li>
  <li>Pointer to array: the number of elements in *v (even if v is nil).  </li>
  <li>Slice, or map: the number of elements in v; if v is nil, len(v) is zero.  </li>
  <li>String: the number of bytes in v.  </li>
  <li>Channel: the number of elements queued (unread) in the channel buffer; if v is nil, len(v) is zero.</li>
  </ul>
</blockquote>



<pre><code>package main

import ""fmt""

func main() {
        c := make(chan int, 100)
        for i := 0; i &lt; 34; i++ {
                c &lt;- 0
        }
        fmt.Println(len(c))
}
</code></pre>

<p>will output:</p>

<pre><code>34
</code></pre>
","13003823"
"How to get the last X Characters of a Golang String?","18841","","<p>If I have the string ""12121211122"" and I want to get the last 3 characters (e.g. ""122""), is that possible in Go? I've looked in the <code>string</code> package and didn't see anything like <code>getLastXcharacters</code>.</p>
","<p>You can use a <a href=""https://golang.org/ref/spec#Slice_expressions"">slice expression</a> on a string to get the last three bytes.</p>

<pre><code>s      := ""12121211122""
first3 := s[0:3]
last3  := s[len(s)-3:]
</code></pre>

<p>Or if you're using unicode you can do something like:</p>

<pre><code>s      := []rune(""世界世界世界"")
first3 := string(s[0:3])
last3  := string(s[len(s)-3:])
</code></pre>

<p>Check <a href=""http://blog.golang.org/strings"">Strings, bytes, runes and characters in Go</a> and <a href=""https://code.google.com/p/go-wiki/wiki/SliceTricks"">Slice Tricks</a>.</p>
","26166654"
"Cast a struct pointer to interface pointer in Golang","18825","","<p>I have a function </p>

<pre><code>func doStuff(inout *interface{}) {
   ...
}
</code></pre>

<p>the purpose of this function is to be able to treat a pointer of any type as input.
But when I want to call it with a the pointer of a struct I have an error.</p>

<pre><code>type MyStruct struct {
    f1 int
}
</code></pre>

<p>When calling <code>doStuff</code> </p>

<pre><code>ms := MyStruct{1}
doStuff(&amp;ms)
</code></pre>

<p>I have </p>

<pre><code>test.go:38: cannot use &amp;ms (type *MyStruct) as type **interface {} in argument to doStuff
</code></pre>

<p>How can I cast <code>&amp;ms</code> to be compatible with <code>*interface{}</code>?</p>
","<p>There is no such thing as a ""pointer to an interface"" (technically, you can use one, but generally you don't need it).</p>

<p>As seen in ""<a href=""https://stackoverflow.com/a/23148998/6309"">what is the meaning of interface{} in golang?</a>"", <code>interface</code> is a container with two words of data:</p>

<ul>
<li>one word is used to point to a method table for the value’s underlying type,</li>
<li>and the other word is used to <strong>point</strong> to the actual data being held by that value.</li>
</ul>

<p><img src=""https://i.stack.imgur.com/5c0TS.png"" alt=""interface""></p>

<p>So remove the pointer, and <code>doStuff</code> will work just fine: the interface data will be <code>&amp;ms</code>, your pointer:</p>

<pre><code>func doStuff(inout interface{}) {
   ...
}
</code></pre>

<p>See <a href=""https://play.golang.org/p/096tGZ53ui"" rel=""noreferrer"">this example</a>:</p>

<pre><code>ms := MyStruct{1}
doStuff(&amp;ms)
fmt.Printf(""Hello, playground: %v\n"", ms)
</code></pre>

<p>Output:</p>

<pre><code>Hello, playground: {1}
</code></pre>

<hr>

<p>As <a href=""https://stackoverflow.com/users/86989/newacct"">newacct</a> mentions <a href=""https://stackoverflow.com/questions/27178635/cast-a-struct-pointer-to-interface-pointer-in-golang/27178682#comment42954742_27178682"">in the comments</a>:</p>

<blockquote>
  <p>Passing the pointer to the interface directly works because if <code>MyStruct</code> conforms to a protocol, then <code>*MyStruct</code> also conforms to the protocol (since a type's method set is included in its pointer type's method set). </p>
  
  <p>In this case, the interface is the empty interface, so it accepts all types anyway, but still.</p>
</blockquote>
","27178682"
"breaking out of a select statement when all channels are closed","18772","","<p>I have two goroutines independently producing data, each sending it to a channel. In my main goroutine, I'd like to consume each of these outputs as they come in, but don't care the order in which they come in. Each channel will close itself when it has exhausted its output. While the select statement is the nicest syntax for consuming inputs independently like this, I haven't seen a concise way for looping over each of until both of the channels have closed.</p>

<pre><code>for {
    select {
    case p, ok := &lt;-mins:
        if ok {
            fmt.Println(""Min:"", p) //consume output
        }
    case p, ok := &lt;-maxs:
        if ok {
            fmt.Println(""Max:"", p) //consume output
        }
    //default: //can't guarantee this won't happen while channels are open
    //    break //ideally I would leave the infinite loop
                //only when both channels are done
    }
}
</code></pre>

<p>the best I can think to do is the following (just sketched, may have compile errors):</p>

<pre><code>for {
    minDone, maxDone := false, false
    select {
    case p, ok := &lt;-mins:
        if ok {
            fmt.Println(""Min:"", p) //consume output
        } else {
            minDone = true
        }
    case p, ok := &lt;-maxs:
        if ok {
            fmt.Println(""Max:"", p) //consume output
        } else {
            maxDone = true
        }
    }
    if (minDone &amp;&amp; maxDone) {break}
}
</code></pre>

<p>But this looks like it would get untenable if you're working with more than two or three channels. The only other method I know of is to use a timout case in the switch statement, which will either be small enough to risk exiting early, or inject too much downtime into the final loop. Is there a better way to test for channels being within a select statement?</p>
","<p>Your example solution would not work well. Once one of them closed, it would always be available for communication immediately. This means your goroutine will never yield and other channels may never be ready. You would effectively enter an endless loop. I posted an example to illustrate the effect here: <a href=""http://play.golang.org/p/rOjdvnji49"" rel=""noreferrer"">http://play.golang.org/p/rOjdvnji49</a></p>

<p>So, how would I solve this problem? A nil channel is never ready for communication. So each time you run into a closed channel, you can nil that channel ensuring it is never selected again. Runable example here: <a href=""http://play.golang.org/p/8lkV_Hffyj"" rel=""noreferrer"">http://play.golang.org/p/8lkV_Hffyj</a></p>

<pre><code>for {
    select {
    case x, ok := &lt;-ch:
        fmt.Println(""ch1"", x, ok)
        if !ok {
            ch = nil
        }
    case x, ok := &lt;-ch2:
        fmt.Println(""ch2"", x, ok)
        if !ok {
            ch2 = nil
        }
    }

    if ch == nil &amp;&amp; ch2 == nil {
        break
    }
}
</code></pre>

<p>As for being afraid of it becoming unwieldy, I don't think it will. It is very rare you have channels going to too many places at once. This would come up so rarely that my first suggestion is just to deal with it. A long if statement comparing 10 channels to nil is not the worst part of trying to deal with 10 channels in a select.</p>
","13666733"
"Why does Go have a ""goto"" statement","18727","","<p>Google's Go language is a new language. Therefor I was surprised to find that it has a <a href=""http://golang.org/ref/spec#Goto_statements"">'goto'</a> statement. I've always been taught that 'goto' statements are a thing of the past and evil for it occludes the actual flow of a program. Function (or methods if you will) are always a better way of controlling flow.</p>

<p>I must be missing something. Why and when is using 'goto' a good idea? Or why did Google include it?</p>
","<p>When we actually check Gos source code (<em>the standard library</em>), we can see where <code>goto</code>s are actually well applied.</p>

<p>For example, in the <code>math/gamma.go</code> file, <a href=""https://golang.org/src/math/gamma.go"">the goto statement is used</a>:</p>

<pre><code>  for x &lt; 0 {
    if x &gt; -1e-09 {
      goto small
    }
    z = z / x
    x = x + 1
  }
  for x &lt; 2 {
    if x &lt; 1e-09 {
      goto small
    }
    z = z / x
    x = x + 1
  }

  if x == 2 {
    return z
  }

  x = x - 2
  p = (((((x*_gamP[0]+_gamP[1])*x+_gamP[2])*x+_gamP[3])*x+_gamP[4])*x+_gamP[5])*x + _gamP[6]
  q = ((((((x*_gamQ[0]+_gamQ[1])*x+_gamQ[2])*x+_gamQ[3])*x+_gamQ[4])*x+_gamQ[5])*x+_gamQ[6])*x + _gamQ[7]
  return z * p / q

small:
  if x == 0 {
    return Inf(1)
  }
  return z / ((1 + Euler*x) * x)
}
</code></pre>

<p>The <code>goto</code> in this case saves us from introducing another (boolean) variable used just for control-flow, checked for at the end. <em>In this case</em>, the <code>goto</code> statement makes the code actually better to read and easier follow (quite in contrary to the argument against <code>goto</code> you mentioned).</p>

<p>Also note, that the <code>goto</code> statement has a very specific use-case. The <a href=""http://golang.org/ref/spec#Goto_statements"">language specification on goto</a> states that it may not jump over variables coming into scope (being declared), and it may not jump into other (code-)blocks.</p>
","11065563"
"Got error ""cannot download, $GOPATH not set,"" yet I have it set","18724","","<p>However when I have already set it. I've even created sub directories which I don't know if necesary:</p>

<pre><code>$ echo $GOPATH &amp;&amp; ls -r $GOPATH
/home/cyrus/.go
src  pkg  bin

$ echo $GOROOT &amp;&amp; ls $GOROOT
/usr/local/go
api  AUTHORS  bin  CONTRIBUTORS  doc  favicon.ico  include  lib  LICENSE  misc  PATENTS  pkg  README  robots.txt  src  test  VERSION
</code></pre>

<p>Why do I still get the error when I do:</p>

<pre><code>$ go get code.google.com/p/go-tour/gotour                                                                                                               
package code.google.com/p/go-tour/gotour: cannot download, $GOPATH not set. For more details see: go help gopath
</code></pre>
","<p>If you set a variable like this:</p>

<pre><code>GOPATH=$HOME/go
</code></pre>

<p>It won't be exported to any subprocesses. It's only available to that process. If you want to export it to subprocesses, use <code>export</code>:</p>

<pre><code>export GOPATH
</code></pre>

<p>You can also combine the assignment and export:</p>

<pre><code>export GOPATH=$HOME/go
</code></pre>
","17872387"
"Catching return values from goroutines","18647","","<p>I am a newbie to golang, so please excuse if this is a very basic question. The below code gives compilation error saying 'unexpected go':</p>

<pre><code>x := go doSomething(arg)

func doSomething(arg int) int{
    ...
    return my_int_value
}
</code></pre>

<p>I know, I can fetch the return value if call the function normally, without using goroutine. Or I can use channels etc.</p>

<p>My question is why is it not possible to fetch a return value like this from a goroutine.</p>
","<p>The strict answer is that you <em>can</em> do that. It's just probably not a good idea. Here's code that would do that:</p>

<pre><code>var x int
go func() {
    x = doSomething()
}()
</code></pre>

<p>This will spawn off a new goroutine which will calculate <code>doSomething()</code> and then assign the result to <code>x</code>. The problem is: how are you going to use <code>x</code> from the original goroutine? You probably want to make sure the spawned goroutine is done with it so that you don't have a race condition. But if you want to do that, you'll need a way to communicate with the goroutine, and if you've got a way to do that, why not just use it to send the value back?</p>
","20945350"
"Golang serialize and deserialize back","18478","","<p>What's the best way (completeness and performance) in Golang to serialize and deserialize a struct to string and vice versa?</p>

<p>for example, if I have this struct:</p>

<pre><code>struct Session {
   Properties map[string]interface{}
   Permissions []int64
}
</code></pre>

<p>I want to store it on <a href=""http://github.com/garyburd/redigo/redis"">Redis</a> and fetch it back. I have tried to save, int and string, it's fine, but how to store struct object?</p>

<pre><code>conn := redisConnectors.Get()

// set example

_, err := conn.Do(`SETEX`, `uid_key`, EXPIRE_SEC, user_id)
_, err = conn.Do(`SETEX`, `email_key`, EXPIRE_SEC, login_email)

// get example

user_id, err := redis.Int64(conn.Do(`GET`, `uid_key`))
login_email, err := redis.String(conn.Do(`GET`, `email_key`))
</code></pre>
","<p>Using <a href=""https://golang.org/pkg/encoding/gob/"">gob</a> and <a href=""https://golang.org/pkg/encoding/base64/"">base64</a> could solve the problem, for example:</p>

<pre><code>import (
    ""encoding/base64""
    ""encoding/gob""
    ""bytes""
)

type SX map[string]interface{}

// go binary encoder
func ToGOB64(m SX) string {
    b := bytes.Buffer{}
    e := gob.NewEncoder(&amp;b)
    err := e.Encode(m)
    if err != nil { fmt.Println(`failed gob Encode`, err) }
    return base64.StdEncoding.EncodeToString(b.Bytes())
}

// go binary decoder
func FromGOB64(str string) SX {
    m := SX{}
    by, err := base64.StdEncoding.DecodeString(str)
    if err != nil { fmt.Println(`failed base64 Decode`, err); }
    b := bytes.Buffer{}
    b.Write(by)
    d := gob.NewDecoder(&amp;b)
    err = d.Decode(&amp;m)
    if err != nil { fmt.Println(`failed gob Decode`, err); }
    return m
}
</code></pre>

<p>and when you need to serialize custom struct or type (for example <code>Session</code> struct), just add these lines:</p>

<pre><code>func init() {
    gob.Register(SX{})
    gob.Register(Session{}) 
}
</code></pre>
","30721381"
"Comparing arrays in Go language","18448","","<p>How can I correctly compare two arrays in Go?</p>

<p>For instance, how can I compare two dimensional arrays with <em>int</em> entries, or any other types?</p>

<p>How deep is that comparison?</p>
","<p>To compare two arrays use the <a href=""http://golang.org/ref/spec#Comparison_operators"">comparison operators</a> <code>==</code> or <code>!=</code>. Quoting from the link:</p>

<blockquote>
  <p>Array values are comparable if values of the array element type are comparable. Two array values are equal if their corresponding elements are equal.</p>
</blockquote>

<p>As a 2D (or ND) array fits the above requirement, you can compare it in the same way.</p>

<p>The question <em>""How deep is that comparison?""</em> doesn't make sense for arrays.</p>
","18561258"
"How to pipe several commands in Go?","18438","","<p>How can I pipe several external commands together in Go? I've tried this code but I get an error that says <code>exit status 1</code>.</p>

<pre><code>package main

import (
    ""io""
    ""log""
    ""os""
    ""os/exec""
)

func main() {
    c1 := exec.Command(""ls"")
    stdout1, err := c1.StdoutPipe()
    if err != nil {
        log.Fatal(err)
    }

    if err = c1.Start(); err != nil {
        log.Fatal(err)
    }
    if err = c1.Wait(); err != nil {
        log.Fatal(err)
    }

    c2 := exec.Command(""wc"", ""-l"")
    c2.Stdin = stdout1

    stdout2, err := c2.StdoutPipe()
    if err != nil {
        log.Fatal(err)
    }

    if err = c2.Start(); err != nil {
        log.Fatal(err)
    }
    if err = c2.Wait(); err != nil {
        log.Fatal(err)
    }

    io.Copy(os.Stdout, stdout2)
}
</code></pre>
","<blockquote>
  <p>StdoutPipe returns a pipe that will be connected to the command's
  standard output when the command starts. The pipe will be closed
  automatically after Wait sees the command exit.</p>
</blockquote>

<p>(from <a href=""http://golang.org/pkg/os/exec/#Cmd.StdinPipe"" rel=""noreferrer"">http://golang.org/pkg/os/exec/#Cmd.StdinPipe</a> )</p>

<p>The fact you do <code>c1.Wait</code> closes the <code>stdoutPipe</code>.</p>

<p>I made a working example (just a demo, add error catching!) :</p>

<pre><code>package main

import (
    ""bytes""
    ""io""
    ""os""
    ""os/exec""
)

func main() {
    c1 := exec.Command(""ls"")
    c2 := exec.Command(""wc"", ""-l"")

    r, w := io.Pipe() 
    c1.Stdout = w
    c2.Stdin = r

    var b2 bytes.Buffer
    c2.Stdout = &amp;b2

    c1.Start()
    c2.Start()
    c1.Wait()
    w.Close()
    c2.Wait()
    io.Copy(os.Stdout, &amp;b2)
}
</code></pre>
","10781582"
"How to execute an IN lookup in SQL using Golang?","18375","","<p>What does Go want for the second param in this SQL query.
I am trying to use the <code>IN</code> lookup in postgres.  </p>

<pre><code>stmt, err := db.Prepare(""SELECT * FROM awesome_table WHERE id= $1 AND other_field IN $2"")
rows, err := stmt.Query(10, ???)
</code></pre>

<p>What I really want:</p>

<pre><code>SELECT * FROM awesome_table WHERE id=10 AND other_field IN (this, that);
</code></pre>
","<p>Query just takes varargs to replace the params in your sql
so, in your example, you would just do</p>

<pre><code>rows, err := stmt.Query(10)
</code></pre>

<p>say, this and that of your second example were dynamic, then you'd do</p>

<pre><code>stmt, err := db.Prepare(""SELECT * FROM awesome_table WHERE id=$1 AND other_field IN ($2, $3)"")
rows, err := stmt.Query(10,""this"",""that"")
</code></pre>

<p>If you have variable args for the ""IN"" part, you can do (<a href=""http://play.golang.org/p/oagPvpxP7-"">play</a>)</p>

<pre><code>package main

import ""fmt""
import ""strings""

func main() {
    stuff := []interface{}{""this"", ""that"", ""otherthing""}
    sql := ""select * from foo where id=? and name in (?"" + strings.Repeat("",?"", len(stuff)-1) + "")""
    fmt.Println(""SQL:"", sql)
    args := []interface{}{10}
    args = append(args, stuff...)
    fakeExec(args...)
    // This also works, but I think it's harder for folks to read
    //fakeExec(append([]interface{}{10},stuff...)...)
}

func fakeExec(args ...interface{}) {
    fmt.Println(""Got:"", args)
}
</code></pre>
","20275714"
"How to create client server in Go language?","18312","","<p>I am new to go,
I was trying to prepare client server in go language and tried to write code, but it's not giving any output. It's not giving any error but just listening.</p>

<p>Please someone help me, I want to create authentication system using go where server authenticate client using Username password..</p>

<p><strong>server :</strong></p>

<pre><code>package main

import (
        ""fmt""
        ""net""
)

func main() {
        service := ""0.0.0.0:8080""
        tcpAddr, err := net.ResolveTCPAddr(""tcp"", service)
        checkError(err)
        listener, err := net.ListenTCP(""tcp"", tcpAddr)
        checkError(err)
        for {
                conn, err := listener.Accept()
                //fmt.Println(""Server listerning"")
                _, err = conn.Read([]byte(""HEAD""))
                if err != nil {
                        conn.Close()
                }
                if err != nil {
                        continue
                }
        }
}

func checkError(err error) {
        if err != nil {
                fmt.Println(""Fatal error "", err.Error())
        }
}
</code></pre>

<p><strong>client :</strong></p>

<pre><code>package main

import (
        ""bufio""
        ""fmt""
        ""net""
        ""os""
        ""strings""
)

func main() {
        if len(os.Args) != 2 {
                fmt.Println(""Usage: "", os.Args[0], ""host"")
                os.Exit(1)
        }
        host := os.Args[1]
        conn, err := net.Dial(""tcp"", host+"":8080"")
        checkError(err)
        _, err = conn.Write([]byte(""HEAD""))
        reader := bufio.NewReader(os.Stdin)
        for {
                line, err := reader.ReadString('\n')
                ftm.Println(err)
                line = strings.TrimRight(line, "" \t\r\n"")
                if err != nil {
                        conn.Close()
                        break

                }
        }
}
func checkError(err error) {
        if err != nil {
                fmt.Println(""Fatal error "", err.Error())
        }
}
</code></pre>
","<p>I'm not sure you need to resolve your address in order to listen.</p>

<p>You should be able to do just this :</p>

<pre><code>listener, err := net.Listen(""tcp"", "":8080"")
</code></pre>

<p>And you don't seem to do anything with the received bytes server side (you discard the result of <code>Read</code>), which explains why you think you receive nothing.</p>

<p>Note that your code can only handle one connection at a time. You should handle each opened connection in a new goroutine.</p>

<p>Here's an <a href=""https://stackoverflow.com/questions/11202058/unable-to-send-gob-data-over-tcp-in-go-programming/11202252#11202252"">example of client-server communication over TCP</a> in a related question.</p>
","13644769"
"Set UserAgent in http request","18171","","<p>I'm trying to make my Go application specify itself as a specific <code>UserAgent</code>, but can't find anything on how to go about doing this with <code>net/http</code>. I'm creating an <code>http.Client</code>, and using it to make <code>Get</code> requests, via <code>client.Get()</code>.</p>

<p>Is there a way to set the <code>UserAgent</code> in the Client, or at all?</p>
","<p>When creating your request use <code>request.Header.Set(""key"", ""value"")</code>:</p>

<pre><code>package main

import (
        ""io/ioutil""
        ""log""
        ""net/http""
)

func main() {
        client := &amp;http.Client{}

        req, err := http.NewRequest(""GET"", ""http://httpbin.org/user-agent"", nil)
        if err != nil {
                log.Fatalln(err)
        }

        req.Header.Set(""User-Agent"", ""Golang_Spider_Bot/3.0"")

        resp, err := client.Do(req)
        if err != nil {
                log.Fatalln(err)
        }

        defer resp.Body.Close()
        body, err := ioutil.ReadAll(resp.Body)
        if err != nil {
                log.Fatalln(err)
        }

        log.Println(string(body))

}
</code></pre>

<p>Result:</p>

<pre><code>2012/11/07 15:05:47 {
  ""user-agent"": ""Golang_Spider_Bot/3.0""
}
</code></pre>

<p>P.S. <a href=""http://httpbin.org"" rel=""noreferrer"">http://httpbin.org</a> is amazing for testing this kind of thing!</p>
","13263993"
"How can my Go program keep all the CPU cores busy?","18149","","<p>Goroutines are light-weight processes that are automatically time-sliced onto one or more operating system threads by the Go runtime. (This is a <em>really cool</em> feature of Go!)</p>

<p>Suppose I have a concurrent application like a webserver. There is plenty of stuff happening concurrently in my hypothetical program, without much non-concurrent (Amdahl's Law) ratio.</p>

<p>It seems that the default number of operating system threads in use is currently 1. Does this mean that only one CPU core gets used?</p>

<p>If I start my program with</p>

<pre><code>runtime.GOMAXPROCS(runtime.NumCPU())
</code></pre>

<p>will that give reasonably efficient use of <strong>all</strong> the cores on my PC?</p>

<p>Is there any ""parallel slackness"" benefit from having <em>even more</em> OS threads in use, e.g. via some heuristic</p>

<pre><code>runtime.GOMAXPROCS(runtime.NumCPU() * 2)
</code></pre>

<p>?</p>
","<p>From the Go FAQ:</p>

<blockquote>
  <p><strong>Why doesn't my multi-goroutine program use multiple CPUs?</strong></p>
  
  <p>You must set the GOMAXPROCS shell environment variable or use the similarly-named function of the runtime package to allow the run-time support to utilize more than one OS thread.</p>
  
  <p>Programs that perform parallel computation should benefit from an increase in GOMAXPROCS. However, be aware that concurrency is not parallelism.</p>
</blockquote>

<p>(UPDATE 8/28/2015: Go 1.5 is set to make the default value of GOMAXPROCS the same as the number of CPUs on your machine, so this shouldn't be a problem anymore)</p>

<p>And</p>

<blockquote>
  <p><strong>Why does using GOMAXPROCS > 1 sometimes make my program slower?</strong></p>
  
  <p>It depends on the nature of your program. Problems that are intrinsically sequential cannot be sped up by adding more goroutines. Concurrency only becomes parallelism when the problem is intrinsically parallel.</p>
  
  <p>In practical terms, programs that spend more time communicating on channels than doing computation will experience performance degradation when using multiple OS threads. This is because sending data between threads involves switching contexts, which has significant cost. For instance, the prime sieve example from the Go specification has no significant parallelism although it launches many goroutines; increasing GOMAXPROCS is more likely to slow it down than to speed it up.</p>
  
  <p>Go's goroutine scheduler is not as good as it needs to be. In future, it should recognize such cases and optimize its use of OS threads. For now, GOMAXPROCS should be set on a per-application basis.</p>
</blockquote>

<p>In short: it is very difficult to make Go use ""efficient use of all your cores"". Simply spawning a billion goroutines and increasing GOMAXPROCS is just as likely to degrade your performance as speed it up because it will be switching thread contexts all the time. If you have a large program that is parallelizable, then increasing GOMAXPROCS to the number of parallel components works fine. If you have a parallel problem embedded in a largely non-parallel program, it may speed up, or you may have to make creative use of functions like runtime.LockOSThread() to ensure the runtime distributes everything correctly (generally speaking Go just dumbly spreads currently non-blocking Goroutines haphazardly and evenly among all active threads).</p>

<p>Also, GOMAXPROCS is the number of CPU cores to use, if it's greater than NumCPU I'm fairly sure that it simply clamps to NumCPU. GOMAXPROCS isn't strictly equal to the number of threads. I'm not 100% sure of exactly when the runtime decides to spawn new threads, but one instance is when the number of blocking goroutines using runtime.LockOSThread() is greater than or equal to GOMAXPROCs -- it will spawn more threads than cores so it can keep the rest of the program running sanely.</p>

<p>Basically, it's quite simple to increase GOMAXPROCS and make go <strong>use</strong> all cores of your CPU. It's quite another thing at this point in Go's development to actually get it to <strong>smartly and efficiently use</strong> all cores of your CPU, requiring a lot of program design and finagling to get right.</p>
","17868720"
"Create a Map in Golang from database Rows","18110","","<p>Basically after doing a query I'd like to take the resulting rows and produce a <code>[]map[string]interface{}</code>, but I do not see how to do this with the API since the <code>Rows.Scan()</code> function needs a specific number of parameters matching the requested number of columns (and possibly the types as well) to correctly obtain the data.</p>

<p>Again, I'd like to generalize this call and take any query and turn it into a <code>[]map[string]interface{}</code>, where the map contains column names mapped to the values for that row.</p>

<p>This is likely very inefficient, and I plan on changing the structure later so that <code>interface{}</code> is a struct for a single data point.</p>

<p>How would I do this using just the database/sql package, or if necessary the database/sql/driver package?</p>
","<p>Look at using <a href=""https://github.com/jmoiron/sqlx"" rel=""nofollow"">sqlx</a>, which can do this a little more easily than the standard database/sql library:</p>

<pre><code>places := []Place{}
err := db.Select(&amp;places, ""SELECT * FROM place ORDER BY telcode ASC"")
if err != nil {
    fmt.Printf(err)
    return
}
</code></pre>

<p>You could obviously replace <code>[]Place{}</code> with a <code>[]map[string]interface{}</code>, but where possible it is better to use a struct if you know the structure of your database. You won't need to undertake any type assertions as you might on an <code>interface{}</code>.</p>
","17848801"
"Stack vs heap allocation of structs in Go, and how they relate to garbage collection","18022","","<p>I'm new to Go and I'm experiencing a bit of congitive dissonance between C-style stack-based programming where automatic variables live on the stack and allocated memory lives on the heap and and Python-style stack-based-programming where the only thing that lives on the stack are references/pointers to objects on the heap.</p>

<p>As far as I can tell, the two following functions give the same output:</p>

<pre><code>func myFunction() (*MyStructType, error) {
    var chunk *MyStructType = new(HeaderChunk)

    ...

    return chunk, nil
}


func myFunction() (*MyStructType, error) {
    var chunk MyStructType

    ...

    return &amp;chunk, nil
}
</code></pre>

<p>i.e. allocate a new struct and return it.</p>

<p>If I'd written that in C, the first one would have put an object on the heap and the second would have put it on the stack. The first would return a pointer to the heap, the second would return a pointer to the stack, which would have evaporated by the time the function had returned, which would be a Bad Thing.</p>

<p>If I'd written it in Python (or many other modern languages except C#) example 2 would not have been possible.</p>

<p>I get that Go garbage collects both values, so both of the above forms are fine. </p>

<p>To quote:</p>

<blockquote>
  <p>Note that, unlike in C, it's perfectly OK to return the address of a
  local variable; the storage associated with the variable survives
  after the function returns. In fact, taking the address of a composite
  literal allocates a fresh instance each time it is evaluated, so we
  can combine these last two lines.</p>
  
  <p><a href=""http://golang.org/doc/effective_go.html#functions"">http://golang.org/doc/effective_go.html#functions</a></p>
</blockquote>

<p>But it raises a couple of questions.</p>

<p>1 - In example 1, the struct is declared on the heap. What about example 2? Is that declared on the stack in the same way it would be in C or does it go on the heap too?</p>

<p>2 - If example 2 is declared on the stack, how does it stay available after the function returns?</p>

<p>3 - If example 2 is actually declared on the heap, how is it that structs are passed by value rather than by reference? What's the point of pointers in this case?</p>
","<p>It's worth noting that the words ""stack"" and ""heap"" do not appear anywhere in the language spec.  Your question is worded with ""...is declared on the stack,"" and ""...declared on the heap,"" but note that Go declaration syntax says nothing about stack or heap.</p>

<p>That technically makes the answer to all of your questions implementation dependent.  In actuality of course, there is a stack (per goroutine!) and a heap and some things go on the stack and some on the heap.  In some cases the compiler follows rigid rules (like ""<code>new</code> always allocates on the heap"") and in others the compiler does ""escape analysis"" to decide if an object can live on the stack or if it must be allocated on the heap.</p>

<p>In your example 2, escape analysis would show the pointer to the struct escaping and so the compiler would have to allocate the struct.  I think the current implementation of Go follows a rigid rule in this case however, which is that if the address is taken of any part of a struct, the struct goes on the heap.</p>

<p>For question 3, we risk getting confused about terminology.  Everything in Go is passed by value, there is no pass by reference.  Here you are returning a pointer value.  What's the point of pointers?  Consider the following modification of your example:</p>

<pre><code>type MyStructType struct{}

func myFunction1() (*MyStructType, error) {
    var chunk *MyStructType = new(MyStructType)
    // ...
    return chunk, nil
}

func myFunction2() (MyStructType, error) {
    var chunk MyStructType
    // ...
    return chunk, nil
}

type bigStruct struct {
    lots [1e6]float64
}

func myFunction3() (bigStruct, error) {
    var chunk bigStruct
    // ...
    return chunk, nil
}
</code></pre>

<p>I modified myFunction2 to return the struct rather than the address of the struct.  Compare the assembly output of myFunction1 and myFunction2 now,</p>

<pre><code>--- prog list ""myFunction1"" ---
0000 (s.go:5) TEXT    myFunction1+0(SB),$16-24
0001 (s.go:6) MOVQ    $type."""".MyStructType+0(SB),(SP)
0002 (s.go:6) CALL    ,runtime.new+0(SB)
0003 (s.go:6) MOVQ    8(SP),AX
0004 (s.go:8) MOVQ    AX,.noname+0(FP)
0005 (s.go:8) MOVQ    $0,.noname+8(FP)
0006 (s.go:8) MOVQ    $0,.noname+16(FP)
0007 (s.go:8) RET     ,

--- prog list ""myFunction2"" ---
0008 (s.go:11) TEXT    myFunction2+0(SB),$0-16
0009 (s.go:12) LEAQ    chunk+0(SP),DI
0010 (s.go:12) MOVQ    $0,AX
0011 (s.go:14) LEAQ    .noname+0(FP),BX
0012 (s.go:14) LEAQ    chunk+0(SP),BX
0013 (s.go:14) MOVQ    $0,.noname+0(FP)
0014 (s.go:14) MOVQ    $0,.noname+8(FP)
0015 (s.go:14) RET     ,
</code></pre>

<p>Don't worry that myFunction1 output here is different than in peterSO's (excellent) answer.  We're obviously running different compilers.  Otherwise, see that I modfied myFunction2 to return myStructType rather than *myStructType.  The call to runtime.new is gone, which in some cases would be a good thing.  Hold on though, here's myFunction3,</p>

<pre><code>--- prog list ""myFunction3"" ---
0016 (s.go:21) TEXT    myFunction3+0(SB),$8000000-8000016
0017 (s.go:22) LEAQ    chunk+-8000000(SP),DI
0018 (s.go:22) MOVQ    $0,AX
0019 (s.go:22) MOVQ    $1000000,CX
0020 (s.go:22) REP     ,
0021 (s.go:22) STOSQ   ,
0022 (s.go:24) LEAQ    chunk+-8000000(SP),SI
0023 (s.go:24) LEAQ    .noname+0(FP),DI
0024 (s.go:24) MOVQ    $1000000,CX
0025 (s.go:24) REP     ,
0026 (s.go:24) MOVSQ   ,
0027 (s.go:24) MOVQ    $0,.noname+8000000(FP)
0028 (s.go:24) MOVQ    $0,.noname+8000008(FP)
0029 (s.go:24) RET     ,
</code></pre>

<p>Still no call to runtime.new, and yes it really works to return an 8MB object by value.  It works, but you usually wouldn't want to.  The point of a pointer here would be to avoid pushing around 8MB objects.</p>
","10866871"
"What does an underscore in front of an import statement mean in Golang?","17941","","<p>I saw <a href=""https://github.com/mattn/go-sqlite3/blob/master/_example/simple/simple.go"" rel=""noreferrer"">this example from <code>sqlite3</code> on <code>GitHub</code></a> :</p>

<pre><code>import (
        ""database/sql""
        ""fmt""
        _ ""github.com/mattn/go-sqlite3""
        ""log""
        ""os""
)
</code></pre>

<p>and cannot seem to find what the underscore in front of an import statement means.</p>
","<h3>Short answer:</h3>

<p>It's for importing a package solely for its side-effects.</p>

<p>From <a href=""http://golang.org/ref/spec#Import_declarations"">the Go Specification</a>:</p>

<blockquote>
  <p>To import a package solely for its side-effects (initialization), use the blank identifier as explicit package name:</p>
  
  <p>import _ ""lib/math""</p>
</blockquote>

<h3>In sqlite3</h3>

<p>In the case of <a href=""https://github.com/mattn/go-sqlite3/blob/master/sqlite3.go"">go-sqlite3</a>, the underscore import is used for the side-effect of registering the <code>sqlite3</code> driver as a database driver in the <code>init()</code> function, without importing any other functions: </p>

<pre><code>sql.Register(""sqlite3"", &amp;SQLiteDriver{})
</code></pre>

<p>Once it's registered in this way, sqlite3 can be used with the standard library's <code>sql</code> interface in your code like in the example:</p>

<pre><code>db, err := sql.Open(""sqlite3"", ""./foo.db"")
</code></pre>
","21225073"
"How do I convert a string to a lower case representation?","17900","","<p>How do I convert a string to a lower case representation?</p>

<p>I feel that there must be built-in function for it, but I just can't find it.</p>

<p>I did find a ToLower in ""unicode/letter"", but it only works one rune at a time.</p>
","<p>Yes there is, check <a href=""https://golang.org/pkg/strings/#ToLower"" rel=""nofollow noreferrer"">the strings package</a>.</p>

<pre><code>package main

import (
    ""fmt""
    ""strings""
)

func main() {
    fmt.Println(strings.ToLower(""Gopher""))
}
</code></pre>
","10411579"
"Parallel processing in golang","17881","","<p>Given the following code:</p>

<pre><code>package main

import (
    ""fmt""
    ""math/rand""
    ""time""
)

func main() {
    for i := 0; i &lt; 3; i++ {
        go f(i)
    }

    // prevent main from exiting immediately
    var input string
    fmt.Scanln(&amp;input)
}

func f(n int) {
    for i := 0; i &lt; 10; i++ {
        dowork(n, i)
        amt := time.Duration(rand.Intn(250))
        time.Sleep(time.Millisecond * amt)
    }
}

func dowork(goroutine, loopindex int) {
    // simulate work
    time.Sleep(time.Second * time.Duration(5))
    fmt.Printf(""gr[%d]: i=%d\n"", goroutine, loopindex)
}
</code></pre>

<p>Can i assume that the 'dowork' function will be executed in parallel?</p>

<p>Is this a correct way of achieving parallelism or is it better to use channels and separate 'dowork' workers for each goroutine?</p>
","<p>Your code will run concurrently, but not in parallel. You can make it run in parallel by setting <code>GOMAXPROCS</code>; see the article <a href=""http://www.goinggo.net/2014/01/concurrency-goroutines-and-gomaxprocs.html"" rel=""noreferrer"">http://www.goinggo.net/2014/01/concurrency-goroutines-and-gomaxprocs.html</a> for a good summary.</p>

<p>It's not clear exactly what you're trying to accomplish here, but it looks like a perfectly valid way of achieving concurrency to me.</p>
","25106690"
"Go Unpacking Array As Arguments","17807","","<p>So in Python and Ruby there is the splat operator (*) for unpacking an array as arguments. In Javascript there is the .apply() function. Is there a way of unpacking an array/slice as function arguments in Go? Any resources for this would be great as well!</p>

<p>Something along the lines of this:</p>

<pre><code>func my_func(a, b int) (int) {
    return a + b
}

func main() {
    arr := []int{2,4}
    sum := my_func(arr)
}
</code></pre>

<p>I do apologize if I'm making an syntactical/assorted mistakes. I'm new to Go.</p>
","<p>You can use a vararg syntax similar to C:</p>

<pre><code>package main
import ""fmt""

func my_func( args ...int) int {
   sum := 0
   for _,v := range args {
      sum = sum + v
   }

   return sum;
}

func main() {
    arr := []int{2,4}
    sum := my_func(arr...)
    fmt.Println(""Sum is "", sum)
}
</code></pre>

<p>Now you can sum as many things as you'd like. Notice the important <code>...</code> after when you call the <code>my_func</code> function.</p>

<p>Running example: <a href=""http://ideone.com/8htWfx"">http://ideone.com/8htWfx</a></p>
","17556146"
"Strip all whitespace from a string","17674","","<p>What is the fastest way to strip all whitespace from some arbitrary string in Go.</p>

<p>I am chaining two function from the string package:</p>

<pre><code>response = strings.Join(strings.Fields(response),"""")
</code></pre>

<p>Anyone have a better way to do this?</p>
","<p>Here is a solution that generates less intermediate data by using <a href=""https://godoc.org/strings#Map""><code>strings.Map</code></a>:</p>

<pre><code>strings.Map(func(r rune) rune {
  if unicode.IsSpace(r) {
    return -1
  }
  return r
}, response)
</code></pre>

<p>Below are the benchmarks between both functions (<a href=""https://www.gutenberg.org/ebooks/2264.txt.utf-8"">source data</a>):</p>

<pre>
BenchmarkSpaceMap        500       2941575 ns/op      221184 B/op          2 allocs/op
BenchmarkSpaceFieldsJoin         300       4967475 ns/op      524288 B/op          3 allocs/op
</pre>

<pre><code>package main_test

import (
    ""strings""
    ""unicode""
    ""testing""
)

func SpaceMap(str string) string {
    return strings.Map(func(r rune) rune {
        if unicode.IsSpace(r) {
            return -1
        }
        return r
    }, str)
}

func SpaceFieldsJoin(str string) string {
    return strings.Join(strings.Fields(str), """")
}

func BenchmarkSpaceMap(b *testing.B) {
    for n := 0; n &lt; b.N; n++ {
        SpaceMap(data)
    }
}

func BenchmarkSpaceFieldsJoin(b *testing.B) {
    for n := 0; n &lt; b.N; n++ {
        SpaceFieldsJoin(data)
    }
}
</code></pre>
","32081891"
"Static local variable in golang","17669","","<p>Is it possible to define a local variable in Golang that can maintain its value from one function call to another? In C, we can do this using the reserved word <code>static</code>.</p>

<p>Example in C:</p>

<pre class=""lang-c prettyprint-override""><code>int func() {
    static int x = 0; 
    x++;
    return x;
}
</code></pre>
","<p>Use a <a href=""http://golang.org/ref/spec#Function_literals"">closure</a>:</p>

<blockquote>
  <p>Function literals are closures: they may refer to variables defined in
  a surrounding function. Those variables are then shared between the
  surrounding function and the function literal, and they survive as
  long as they are accessible.</p>
</blockquote>

<p>It doesn't have to be in global scope, just outside the function definition.</p>

<pre><code>func main() {

    x := 1

    y := func() {
        fmt.Println(""x:"", x)
        x++
    }

    for i := 0; i &lt; 10; i++ {
        y()
    }
}
</code></pre>

<p>(Sample on the <a href=""https://play.golang.org/p/onKjdWDtBE"">Go Playground</a>)</p>
","30558173"
"Why is my webserver in golang not handling concurrent requests?","17585","","<p>This simple HTTP server contains a call to time.Sleep() that makes
each request take five seconds. When I try quickly loading multiple
tabs in a browser, it is obvious that each request
is queued and handled sequentially. How can I make it handle concurrent requests?</p>

<pre><code>package main

import (
   ""fmt""
   ""net/http""
   ""time""
)

func serve(w http.ResponseWriter, r *http.Request) {
   fmt.Fprintln(w, ""Hello, world."")
   time.Sleep(5 * time.Second)
}

func main() {
   http.HandleFunc(""/"", serve)
   http.ListenAndServe("":1234"", nil) 
}
</code></pre>

<p>Actually, I just found the answer to this after writing the question, and it is very subtle. I am posting it anyway, because I couldn't find the answer on Google. Can you see what I am doing wrong?</p>
","<p>Your program already handles the requests concurrently. You can test it with <code>ab</code>, a benchmark tool which is shipped with Apache 2:</p>

<pre><code>ab -c 500 -n 500 http://localhost:1234/
</code></pre>

<p>On my system, the benchmark takes a total of 5043ms to serve all 500 concurrent requests. <strong>It's just your browser which limits the number of connections per website.</strong></p>

<p>Benchmarking Go programs isn't that easy by the way, because you need to make sure that your benchmark tool isn't the bottleneck and that it is also able to handle that many concurrent connections. Therefore, it's a good idea to use a couple of dedicated computers to generate load.</p>
","10722919"
"Syntax error at end of input in PostgreSQL","17560","","<p>I have used the next SQL statement in both MySQL and PostgreSQL, but it fails in PostgreSQL</p>

<pre><code>db.Query(`SELECT COUNT(*) as N FROM email WHERE address = ?`, email)
</code></pre>

<p>with this error:</p>

<pre><code>pq: F:""scan.l"" M:""syntax error at end of input"" S:""ERROR"" C:""42601"" P:""50"" R:""scanner_yyerror"" L:""993""
</code></pre>

<p>What's the problem? The error messages in PostgreSQL are very cryptic.</p>
","<p>You haven't provided any details about the language/environment, but I'll try a wild guess anyway:</p>

<p>MySQL's prepared statements natively use <code>?</code> as the parameter placeholder, but PostgreSQL uses <code>$1</code>, <code>$2</code> etc. Try replacing the <code>?</code> with <code>$1</code> and see if it works:</p>

<pre><code>WHERE address = $1
</code></pre>

<blockquote>
  <p>The error messages in PostgreSQL are very cryptic.</p>
</blockquote>

<p>In general, Postgres error messages are very clear, but in this instance you've managed to confuse the parser beyond sanity. :)</p>
","13119872"
"Executing a Bash Script from Golang","17544","","<p>I am trying to figure out a way to execute a script (.sh) file from Golang. I have found a couple of easy ways to execute commands (e.g. os/exec), but what I am looking to do is to execute an entire sh file (the file sets variables etc.).</p>

<p>Using the standard os/exec method for this does not seem to be straightforward: both trying to input ""./script.sh"" and loading the content of the script into a string do not work as arguments for the exec function. </p>

<p>for example, this is an sh file that I want to execute from Go:</p>

<pre><code>OIFS=$IFS;
IFS="","";

# fill in your details here
dbname=testDB
host=localhost:27017
collection=testCollection
exportTo=../csv/

# get comma separated list of keys. do this by peeking into the first document in the collection and get his set of keys
keys=`mongo ""$host/$dbname"" --eval ""rs.slaveOk();var keys = []; for(var key in db.$collection.find().sort({_id: -1}).limit(1)[0]) { keys.push(key); }; keys;"" --quiet`;
# now use mongoexport with the set of keys to export the collection to csv
mongoexport --host $host -d $dbname -c $collection --fields ""$keys"" --csv --out $exportTo$dbname.$collection.csv;

IFS=$OIFS;
</code></pre>

<p>from the Go program:</p>

<pre><code>out, err := exec.Command(mongoToCsvSH).Output()
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf(""output is %s\n"", out)
</code></pre>

<p>where mongoToCsvSH can be either the path to the sh or the actual content - both do not work.</p>

<p>Any ideas how to achieve this? </p>
","<p>For your shell script to be directly runnable you have to:</p>

<ol>
<li><p>Start it with <code>#!/bin/sh</code> (or <code>#!/bin/bash</code>, etc).</p></li>
<li><p>You have to make it executable, aka <code>chmod +x script</code>.</p></li>
</ol>

<p>If you don't want to do that, then you will have to execute <code>/bin/sh</code> with the path to the script.</p>

<pre><code>cmd := exec.Command(""/bin/sh"", mongoToCsvSH)
</code></pre>
","25834357"
"golang pointers on pointers as function parameters","17502","","<p>I have the function </p>

<pre><code>func addCatsToMap(m map[string][]CatHouse, meowId int, treats Set, dog *Dog) {

//if (complicated thing) add Cat to m

}
</code></pre>

<p>Is it true that m, treats, and dog are passed-by-reference, and meowId has it's value copied.</p>

<p>Since m is map, its pass-by-reference.</p>

<p>Dog is a struct. So, I should pass the pointer to avoid copying the data.</p>

<p>Set is an interface, as defined here:</p>

<pre><code>type Set interface {
  Add(value string)
  Contains(value string) (bool)
  Length() (int)
  RemoveDuplicates()
}
</code></pre>

<p>Is Set pass-by-value?</p>
","<p>An interface type is simply a set of methods.  Notice that the members of an interface definition do not specify whether or not the receiver type is a pointer.  That is because <em>the method set of a value type is a subset of the method set of its associated pointer type</em>.  That's a mouthful.  What I mean is, if you have the following:</p>

<pre><code>type Whatever struct {
    Name string
}
</code></pre>

<p>and you define the following two methods:</p>

<pre><code>func (w *Whatever) Foo() {
    ...
}

func (w Whatever) Bar() {
    ...
}
</code></pre>

<p>Then the type <code>Whatever</code> has only the method <code>Bar()</code>, while the type <code>*Whatever</code> has the methods <code>Foo()</code> and <code>Bar()</code>.  That means if you have the following interface:</p>

<pre><code>type Grits interface {
    Foo()
    Bar()
}
</code></pre>

<p>Then <code>*Whatever</code> implements <code>Grits</code> but <code>Whatever</code> does not, because <code>Whatever</code> lacks the method <code>Foo()</code>.  When you define the input to a function as an interface type, you have no idea whether it's a pointer or a value type.</p>

<p>The following example illustrates a function that takes an interface type in both ways:</p>

<pre><code>package main

import ""fmt""

type Fruit struct {
    Name string
}

func (f Fruit) Rename(name string) {
    f.Name = name
}

type Candy struct {
    Name string
}

func (c *Candy) Rename(name string) {
    c.Name = name
}

type Renamable interface {
    Rename(string)
}

func Rename(v Renamable, name string) {
    v.Rename(name)
    // at this point, we don't know if v is a pointer type or not.
}

func main() {
    c := Candy{Name: ""Snickers""}
    f := Fruit{Name: ""Apple""}
    fmt.Println(f)
    fmt.Println(c)
    Rename(f, ""Zemo Fruit"")
    Rename(&amp;c, ""Zemo Bar"")
    fmt.Println(f)
    fmt.Println(c)
}
</code></pre>

<p>you could call <code>Raname(&amp;f, ""Jorelli Fruit"")</code> but not <code>Rename(c, ""Jorelli Bar"")</code>, because both <code>Fruit</code> and <code>*Fruit</code> implement <code>Renamable</code>, while <code>*Candy</code> implements <code>Renable</code> and <code>Candy</code> does not.</p>

<p><a href=""http://play.golang.org/p/Fb-L8Bvuwj"">http://play.golang.org/p/Fb-L8Bvuwj</a></p>
","11131348"
"How to cross compile from Windows to Linux?","17439","","<p>I've installed Go 1.2 on a Windows machine, wrote up a dummy program and set the environment variables <code>GOARCH</code> and <code>GOOS</code> to ""AMD64"" and ""linux"" respectively.</p>

<p>When i issue the ""<code>go build</code>"" command, i receive an error:</p>

<pre><code>go build runtime: linux/amd64 must be bootstrapped using make.bat
</code></pre>

<p>What does this mean?</p>
","<p>It tells you it needs all tools built before you can use them.</p>

<p>If your windows GOARCH is amd64, then you could ""build"" all required tools by running this small batch programs:</p>

<pre><code>set GOARCH=amd64
set GOOS=linux
go tool dist install -v pkg/runtime
go install -v -a std
</code></pre>

<p>If that succeeds then you should be able to do what you've described (just use amd64, not AMD64 - it is case sensitive).</p>

<p>If your windows GOARCH is 386, then you would need to build your 386 tools first. You would need to download mingw gcc for that. Do what user2714852 said.</p>

<p>Here <a href=""https://golang.org/wiki/WindowsCrossCompiling"">https://golang.org/wiki/WindowsCrossCompiling</a> are similar instructions for linux, perhaps you find them helpful.</p>

<p>Alex</p>
","20830892"
"Is there a way to iterate over a slice in reverse in Go?","17437","","<p>It would be convenient to be able to say something like:</p>

<pre><code>for _, element in reverse range mySlice {
        ...
}
</code></pre>
","<p>No there is no convenient operator for this to add to the range one in place. You'll have to do a normal for loop counting down:</p>

<pre><code>s := []int{5, 4, 3, 2, 1}
for i := len(s)-1; i &gt;= 0; i-- {
   fmt.Println(s[i])
}
</code></pre>
","13191474"
"Creating a TCP client in golang","17357","","<p>Hi i'm attempted to learn some socket programming in golang, I'm following along with this tutorial </p>

<p><a href=""http://synflood.at/tmp/golang-slides/mrmcd2012.html#1"">http://synflood.at/tmp/golang-slides/mrmcd2012.html#1</a></p>

<p>Here is the final result of the tutorial on one page.
<a href=""https://github.com/akrennmair/telnet-chat/blob/master/03_chat/chat.go"">https://github.com/akrennmair/telnet-chat/blob/master/03_chat/chat.go</a></p>

<p>I'm confused on how to write the client side of this program, I create a connection and dial into the same port/ip as the server is running on but from there I don't know. I have read() and write() functions for the newly created connection but no idea where to delimit the read or anything. Considering the text input is handeled in the server I imagine I'd only need to do a read of some kind?</p>

<pre><code>package main

import (
    ""bufio""
    ""fmt""
    ""net""
    ""os""
)

func main() {
    conn, err := net.Dial(""tcp"", ""127.0.0.1:6000"")
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }

    for {
        fmt.Println(bufio.NewReader(conn).ReadString([]byte(""\n"")))
    }

}
</code></pre>
","<p><code>bufio.NewReader</code>should be used only once, in your case, just before the <code>for</code>. For example <code>connbuf := bufio.NewReader(conn)</code>. Then you can use ReadString on connbuf, that returns the string and maybe an error. For example:</p>

<pre><code>connbuf := bufio.NewReader(conn)
for{
    str, err := connbuf.ReadString('\n')
    if len(str)&gt;0 {
        fmt.Println(str)
    }
    if err!= nil {
        break
    }
}
</code></pre>

<p>I'm checking <code>len</code>and <code>err</code> because <code>ReadString</code> may return data and an error (connection error, connection reset, etc.) so you need to check both.</p>
","23140818"
"Private fields and methods for a struct","17330","","<p>In the following test code I would like to have both <code>mytype</code> and the <code>doPrivate</code> method private, so that only members of <code>mytype</code> can access it, but not other types\functions in the scope of the <code>mypackage</code> package.</p>

<p>Can I do this in golang?</p>

<pre><code>package mypackage

type mytype struct {
    size          string
    hash          uint32
}

func (r *mytype) doPrivate() string {
    return r.size
}

func (r *mytype) Do() string {
    return doPrivate(""dsdsd"")
}
</code></pre>

<p>Fields <code>size</code> and <code>hash</code> as well as the <code>doPrivate</code> method should be encapsulated and no other type should have access to them. </p>
","<p>That's not how ""privacy"" works in Go: the granularity of privacy is the package.</p>

<p>If you <em>really</em> want only the members of <code>mytype</code> to access some fields, then you must isolate the struct and the functions in their own package.</p>

<p>But that's not the usual practice. Whether Go is OOP or not is debatable but clearly the practice isn't to encapsulate the code by a struct like you seem to want to do. Usually a package is small enough to be coherent: if you don't want to access fields from within the package, don't access them.</p>
","22148186"
"Set status code on http.ResponseWriter","17316","","<p>How do I set the http status code on an <code>http.ResponseWriter</code>?</p>

<p>i.e a 500, or 403.</p>

<p>I can see that requests normally have a status code of 200 attached to them.</p>
","<p>Use <a href=""https://godoc.org/net/http#ResponseWriter"" rel=""noreferrer""><code>http.ResponseWriter.WriteHeader</code></a>. From the documentation:</p>

<blockquote>
  <p>WriteHeader sends an HTTP response header with status code. If WriteHeader is not called explicitly, the first call to Write will trigger an implicit WriteHeader(http.StatusOK). Thus explicit calls to WriteHeader are mainly used to send error codes.</p>
</blockquote>

<p>Example:</p>

<pre><code>func ServeHTTP(w http.ResponseWriter, r *http.Request) {
    w.WriteHeader(http.StatusInternalServerError)
    w.Write([]byte(""500 - Something bad happened!""))
}
</code></pre>
","40096757"
"Golang : from []bytes to get hexadecimal","17300","","<p><a href=""http://play.golang.org/p/SKtaPFtnKO"">http://play.golang.org/p/SKtaPFtnKO</a></p>

<pre><code>func md(str string) []byte {
    h := md5.New()
    io.WriteString(h, str)

    fmt.Printf(""%x"", h.Sum(nil))
    // base 16, with lower-case letters for a-f
    return h.Sum(nil)
}
</code></pre>

<p>All I need is Hash-key string that is converted from an input string. I was able to get it in bytes format usting h.Sum(nil) and able to print out the Hash-key in %x format. But I want to return the %x format from this function so that I can use it to convert email address to Hash-key and use it to access Gravatar.com.</p>

<p>How do I get %x format Hash-key using md5 function in Go?</p>

<p>Thanks,</p>
","<p>If I understood correctly you want to return the %x format:</p>

<p>you can import hex and use the <code>EncodeToString</code> method</p>

<pre><code>str := hex.EncodeToString(h.Sum(nil))
</code></pre>

<p>or just Sprintf the value:</p>

<pre><code>func md(str string) string {
    h := md5.New()
    io.WriteString(h, str)

    return fmt.Sprintf(""%x"", h.Sum(nil))
}
</code></pre>

<p>note that Sprintf is slower because it needs to parse the format string and then reflect based on the type found</p>

<p><a href=""http://play.golang.org/p/vsFariAvKo"">http://play.golang.org/p/vsFariAvKo</a></p>
","19329027"
"Golang cannot range over pointer to slice","17285","","<p>I keep getting this error when trying to range over a slice pointer.</p>

<pre><code>app/domain/repositories/class_repository.go:24: cannot range over classes (type *[]entities.Class)
</code></pre>

<p>What am I doing wrong?</p>

<p>Here is the struct:</p>

<pre><code> package repositories

import (
    ""mobifit/app/domain/entities""
)

type ClassRepository struct {
    *Repository
}

func (c *ClassRepository) ClassesForLastNDays(days int) *[]entities.Class {
    classes := new([]entities.Class)
    query := Select(""*"").
        From(""Class"").
        Where(""VisibleAt &gt; CURRENT_TIMESTAMP() - INTERVAL ? DAY"").
        OrderBy(""ClassTypeId"").
        Sql()
    c.Repository.Select(classes, query, days)
    c.populateClassRelationships(classes)
    return classes
}

func (c *ClassRepository) populateClassRelationships(classes *[]entities.Class) {
    for i := range classes {  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Here is the problem
        class := classes[i]

        // ClassType
        c.Repository.GetById(class.ClassType, class.ClassTypeId)

        //Instructor
        c.Repository.GetById(class.Instructor, class.ClassType.InstructorId)

        // Equipment
        query := Select(""E.*"").
            From(""Equipment E"").
            Join(""ClassEquipment CE on E.Id = CE.EquipmentId"").
            Where(""CE.ClassId = ?"").
            Sql()
        c.Repository.Select(class.Equipment, query, class.Id)
    }
}
</code></pre>

<p>Here is the Class struct:</p>

<pre><code>package entities

import (
    ""time""
)

    type Class struct {
        Id                int
        ClassTypeId       int
        VideoPath         string
        VideoSize         int
        Duration          float64
        CreatedAt         time.Time
        VisibleAt         time.Time
        NoLongerVisibleAt time.Time

        // Relationships
        ClassType  ClassType
        Instructor User
        Equipment  []Equipment
    }
</code></pre>
","<p>You're assuming the pointer to a slice will be automatically dereferenced for the iteration.</p>

<p>That's not the case and there's no reason for that because a slice is already a kind of pointer, rendering a pointer to a slice totally useless.</p>

<p>From <a href=""http://golang.org/doc/effective_go.html#slices"">Effective Go</a> :</p>

<blockquote>
  <p>If a function takes a slice argument, changes it makes to the elements
  of the slice will be visible to the caller, analogous to passing a
  pointer to the underlying array.</p>
</blockquote>

<p>Internally, a slice is made of</p>

<ul>
<li>a pointer to the first element of the slice in the underlying array</li>
<li>the length of the slice</li>
<li>the capacity of the slice (the slice can usually be extended until the end of the array)</li>
</ul>

<p>This structure is very small, rendering a pointer useless.</p>
","21279292"
"How to get file length in Go?","17235","","<p>I looked up  <a href=""http://golang.org/pkg/os/#File"">golang.org/pkg/os/#File</a> , but still have no idea.
Seems there is no way to get file length, did I miss something?</p>

<p>How to get file length in Go?</p>
","<p><code>(*os.File).Stat()</code> returns a <code>os.FileInfo</code> value, which in turn has a <code>Size()</code> method. So, given a file <code>f</code>, the code would be akin to</p>

<pre><code>fi, err := f.Stat()
if err != nil {
  // Could not obtain stat, handle error
}

fmt.Printf(""The file is %d bytes long"", fi.Size())
</code></pre>
","17133613"
"How I should run my Golang process in background?","17209","","<p>This question is not strictly programming related, but for sure important for programmers.</p>

<p>I wrote a simple smtp server, when I run it from console all is fine, except it is blocking the command line.</p>

<p>I know I can run it via</p>

<pre><code>nohup ... &amp;
</code></pre>

<p>or via screen / tmux etc</p>

<p>But the question is, how should I implement my program it runs in the background and it will be a pleasure for a system administrator to set it up and manage the process ?</p>

<p>Some guys with far more experience than me, at <a href=""https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/othxUDO-EoE"" rel=""nofollow"">golang-nuts</a>, wrote, they don't use fork etc, and use some ""wrapper"" in form from monit etc.</p>

<p>The target platform is Debian based, all other stuff on the box are init.d based.</p>

<p>Any good resources for that topic or sources of a well written example project ?</p>
","<p>As Nick mentioned <a href=""http://supervisord.org/"" rel=""noreferrer"">Supervisord</a> is a great option that has also worked well in my experience. </p>

<p>Nick mentioned problems with forking- forking itself works fine AFAICT. The issue is not forking but dropping privileges. Due to the way the Go runtime starts the thread pool that goroutines are multiplexed over (when GOMAXPROX > 1), the setuid systemcall <a href=""https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/BZWXqv3YSg4"" rel=""noreferrer"">is not a reliable way to drop permissions</a>.</p>

<p>Instead, you should run your program as a non-privileged user and use the <a href=""http://linux.die.net/man/8/setcap"" rel=""noreferrer"">setcap</a> utility to grant it the needed permissions.</p>

<p>For example, to allow binding to a low port number (like 80) run will need to run setcap once on the executable: <code>sudo setcap 'cap_net_bind_service=+ep' /opt/yourGoBinary</code></p>

<p>You may need to install setcap: <code>sudo aptitude install libcap2-bin</code></p>
","14573592"
"What is the usage of backtick in golang structs definition?","17195","","<pre><code>type NetworkInterface struct {
    Gateway              string `json:""gateway""`
    IPAddress            string `json:""ip""`
    IPPrefixLen          int    `json:""ip_prefix_len""`
    MacAddress           string `json:""mac""`
    ...
}
</code></pre>

<p>I'm quite confused what's the function of contents in backtick, like <code>json:""gateway""</code>.</p>

<p>Is it just comment, like <code>//this is the gateway</code>?</p>
","<p>You can add extra meta information to Go structs in the form of tags. <a href=""https://stackoverflow.com/questions/10858787/what-are-the-uses-for-tags-in-go"">Here are some examples of use cases</a>.</p>

<p>In this case, the <code>json:""gateway""</code> is used by the <a href=""http://golang.org/pkg/encoding/json/"" rel=""noreferrer"">json package</a> to encode the value of <code>Gateway</code> into the key <code>gateway</code> in the corresponding json object.</p>

<p>Example:</p>

<pre><code>n := NetworkInterface{
   Gateway : ""foo""
}
json.Marshal(n)
// will output `{""gateway"":""foo"",...}`
</code></pre>
","30681110"
"Assignment operator in Go language","17085","","<p>Lately I was playing with google's new programming language <a href=""http://golang.org/"">Go</a></p>

<p>and was wondering why the assignment operator <code>:=</code> has a colon in front of the equal sign <code>=</code>
Is there a particular reason why the authors of the language wanted to use <code>name := ""John""</code> instead of <code>name = ""John""</code></p>
","<p>The <code>:=</code> notation serves both as a declaration and as initialization.</p>

<pre><code>foo := ""bar""
</code></pre>

<p>is equivalent to</p>

<pre><code>var foo = ""bar""
</code></pre>

<p>Why not using only <code>foo = ""bar""</code> like in any scripting language, you may ask ? Well, that's to avoid typos.</p>

<pre><code>foo = ""bar""
fooo = ""baz"" + foo + ""baz""   // Oops, is fooo a new variable or did I mean 'foo' ?
</code></pre>
","16521530"
"How to get underlying value from a reflect.Value in golang?","17072","","<p>So I found some code that help me get started with reflection in Go (golang), but I'm having trouble getting a the underlying value so that I can basically create a <code>map[string]string</code> from a struct and it's fields.</p>

<p>Eventually, I'd like to make the result into a <code>map[string]interface{}</code>, but this one issue is kind of blocking me.</p>

<p>The code I have at the moment:</p>

<pre><code>package main

import (
    ""fmt""
    ""reflect""
)

type Foo struct {
    FirstName string `tag_name:""tag 1""`
    LastName  string `tag_name:""tag 2""`
    Age       int  `tag_name:""tag 3""`
}

func inspect(f interface{}) map[string]string {

    m := make(map[string]string)
    val := reflect.ValueOf(f).Elem()

    for i := 0; i &lt; val.NumField(); i++ {
        valueField := val.Field(i)
        typeField := val.Type().Field(i)

        f := valueField.Interface()
        val := reflect.ValueOf(f)
        m[typeField.Name] = val.String()
    }

    return m
}

func dump(m map[string]string) {

    for k, v := range m {
        fmt.Printf(""%s : %s\n"", k, v)
    }
}

func main() {
    f := &amp;Foo{
        FirstName: ""Drew"",
        LastName:  ""Olson"",
        Age:       30,
    }

    a := inspect(f)

    dump(a)
}
</code></pre>

<p>The output from running the code:</p>

<pre><code>FirstName : Drew
LastName : Olson
Age : &lt;int Value&gt;
</code></pre>

<p>From what I understand the output for FirstName and LastName are actual reflect.Value objects but for strings the String() method on value just outputs the underlying String.  I'd like to either get the int and change it into a string, but from the relfect package documentation I'm not immediately seeing how that's done.</p>

<p>Soo.... How do I get the underlying value from a reflect.Value in golang?</p>
","<p>A good example of how to parse values is the <code>fmt</code> package. See <a href=""http://code.google.com/p/go/source/browse/src/pkg/fmt/scan.go?name=release-branch.go1.1#994"">this code</a>.</p>

<p>Using the mentioned code to match your problem would look like this:</p>

<pre><code>switch val.Kind() {
case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
    m[typeField.Name] = strconv.FormatInt(val.Int(), 10)
case reflect.String:
    m[typeField.Name] = val.String()    
// etc...
}
</code></pre>

<p>Basically you need to check for all <a href=""http://golang.org/pkg/reflect/#Kind"">available Kinds</a>.</p>
","18109639"
"In Golang how do you convert a slice into an array","16993","","<p>I am new to Go and trying to write an application that reads RPM files.  The start of each block has a Magic char of <code>[4]byte</code>.  </p>

<p>Here is my struct</p>

<pre><code>type Lead struct {
  Magic        [4]byte
  Major, Minor byte
  Type         uint16
  Arch         uint16
  Name         string
  OS           uint16
  SigType      uint16
}
</code></pre>

<p>I am trying to do the following:</p>

<pre><code>lead := Lead{}
lead.Magic = buffer[0:4]
</code></pre>

<p>I am searching online and not sure how to go from a slice to an array (without copying).  I can always make the Magic <code>[]byte</code> (or even <code>uint64</code>), but I was more curious on how would I go from type <code>[]byte</code> to <code>[4]byte</code> if needed to?</p>
","<p>The built in method <em>copy</em> will only copy a slice to a slice NOT a slice to an array.</p>

<p>You must trick <em>copy</em> into thinking the array is a slice</p>

<pre><code>copy(varLead.Magic[:], someSlice[0:4])
</code></pre>

<p>Or use a for loop to do the copy:</p>

<pre><code>for index, b := range someSlice {

    varLead.Magic[index] = b

}
</code></pre>

<p>Or do as zupa has done using literals. I have added onto their working example.</p>

<p><a href=""http://play.golang.org/p/ZGqRAarFEH"">Go Playground</a></p>
","21399657"
"golang - how to initialize a map field within a struct?","16973","","<p>I'm confused about the best way to initialize a struct that contains a map.  Running this code produces <code>panic: runtime error: assignment to entry in nil map</code>:</p>

<pre><code>package main

type Vertex struct {
   label string
} 

type Graph struct {
  connections map[Vertex][]Vertex
} 

func main() {
  v1 := Vertex{""v1""}
  v2 := Vertex{""v2""}

  g := new(Graph)
  g.connections[v1] = append(g.coonections[v1], v2)
  g.connections[v2] = append(g.connections[v2], v1)
}
</code></pre>

<p>One idea is to create a constructor, as in <a href=""https://stackoverflow.com/questions/4498998"">this answer</a>.</p>

<p>Another idea is to use an <code>add_connection</code> method that can initialize the map if it's empty:</p>

<pre><code>func (g *Graph) add_connection(v1, v2 Vertex) {
  if g.connections == nil {
    g.connections = make(map[Vertex][]Vertex)
  }
  g.connections[v1] = append(g.connections[v1], v2)
  g.connections[v2] = append(g.connections[v2], v1)
}
</code></pre>

<p>Are there other options?  Just wanted to see if there is a commonly-accepted way to do this.</p>
","<p>I would probably use a constructor to do this:</p>

<pre><code>func NewGraph() *Graph {
    var g Graph
    g.connections = make(map[Vertex][]Vertex)
    return &amp;g
}
</code></pre>

<p>I've found this example in the standard <a href=""http://golang.org/src/image/image.go?s=15627:15660#L557"" rel=""noreferrer""><code>image/jpeg</code></a> package (not with a map though, but with a slice):</p>

<pre><code>type Alpha struct {
    Pix []uint8
    Stride int
    Rect Rectangle
}

func NewAlpha(r Rectangle) *Alpha {
    w, h := r.Dx(), r.Dy()
    pix := make([]uint8, 1*w*h)
    return &amp;Alpha{pix, 1 * w, r}
}
</code></pre>
","27553571"
"how to listen to N channels? (dynamic select statement)","16944","","<p>to start an endless loop of executing two goroutines, I can use the code below:</p>

<p>after receiving the msg it will start a new goroutine and go on for ever. </p>

<pre><code>c1 := make(chan string)
c2 := make(chan string)

go DoShit(c1, 5)
go DoShit(c2, 2)

for ; true;  {
    select {
    case msg1 := &lt;-c1:
        fmt.Println(""received "", msg1)
        go DoShit(c1, 1)
    case msg2 := &lt;-c2:
        fmt.Println(""received "", msg2)
        go DoShit(c2, 9)
    }
}
</code></pre>

<p>I would now like to have the same behavior for N goroutines, but how will the select statement look in that case?</p>

<p>This is the code bit I have started with, but I am confused how to code the select statement</p>

<pre><code>numChans := 2

//I keep the channels in this slice, and want to ""loop"" over them in the select statemnt
var chans = [] chan string{}

for i:=0;i&lt;numChans;i++{
    tmp := make(chan string);
    chans = append(chans, tmp);
    go DoShit(tmp, i + 1)

//How shall the select statment be coded for this case?  
for ; true;  {
    select {
    case msg1 := &lt;-c1:
        fmt.Println(""received "", msg1)
        go DoShit(c1, 1)
    case msg2 := &lt;-c2:
        fmt.Println(""received "", msg2)
        go DoShit(c2, 9)
    }
}
</code></pre>
","<p>You can do this using the <code>Select</code> function from the <a href=""http://golang.org/pkg/reflect/"">reflect</a> package:</p>

<blockquote>
  <p><code>func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)</code></p>
  
  <p>Select executes a select operation described by the list of cases. Like
  the Go select statement, it blocks until at least one of the cases can
  proceed, makes a uniform pseudo-random choice, and then executes that
  case. It returns the index of the chosen case and, if that case was a
  receive operation, the value received and a boolean indicating whether
  the value corresponds to a send on the channel (as opposed to a zero
  value received because the channel is closed).</p>
</blockquote>

<p>You pass in an array of <code>SelectCase</code> structs that identify the channel to select on, the direction of the operation, and a value to send in the case of a send operation.</p>

<p>So you could do something like this:</p>

<pre><code>cases := make([]reflect.SelectCase, len(chans))
for i, ch := range chans {
    cases[i] = reflect.SelectCase{Dir: reflect.SelectRecv, Chan: reflect.ValueOf(ch)}
}
chosen, value, ok := reflect.Select(cases)
# ok will be true if the channel has not been closed.
ch := chans[chosen]
msg := value.String()
</code></pre>

<p>You can experiment with a more fleshed out example here: <a href=""http://play.golang.org/p/8zwvSk4kjx"">http://play.golang.org/p/8zwvSk4kjx</a></p>
","19992525"
"Loop over array in Go language","16920","","<p>Is it possible to iterate over array indices in Go language and choose not all indices but throw some period (1, 2, 3 for instance.</p>

<p>For example, </p>

<pre><code>for i, v := range array {
//do something with i,v
}
</code></pre>

<p>iterates over all indices in  the array</p>

<p>What I want to know is there any chance to have something like that</p>

<pre><code>for i:=1, v := range array {
//do something with i,v
i += 4
}
</code></pre>
","<p>What's wrong with</p>

<pre><code>i := 1
for _, v := range array {
    // do something
    i += 4
}
</code></pre>

<p>if you want i-values other than indices, or if you want to skip the indices,</p>

<pre><code>for i := 1; i &lt; len(array); i += 4 {
    v := array[i]
}
</code></pre>

<p>?</p>
","18566902"
"Create pdf from html in golang","16908","","<p>How to create PDF files from an HTML input in Google Go? If it is not possible yet, are there any initations that aims to solve this problem?</p>

<p>I'm looking for a solution like TCPDF in php.</p>
","<p>what about <strong>gopdf</strong> (<a href=""https://github.com/signintech/gopdf"">https://github.com/signintech/gopdf</a>) or <strong>gofpdf</strong> (<a href=""http://godoc.org/code.google.com/p/gofpdf"">http://godoc.org/code.google.com/p/gofpdf</a>). </p>

<p>It seems like you are looking for.</p>
","24324299"
"Different ways to pass channels as arguments in function in go (golang)","16839","","<p>I was reading some go code and say a few different ways to pass go channels. Maybe they are the same but I was wondering if there is any difference since I couldn't find documentation online:</p>

<p>1)</p>

<pre><code>func serve(ch &lt;-chan interface{}){ //do stuff }
</code></pre>

<p>2)</p>

<pre><code>func serve(ch chan&lt;- interface{}){ //do stuff }
</code></pre>

<p>3)</p>

<pre><code>func serve(ch chan interface{}){ //do stuff }
</code></pre>

<p>4)</p>

<pre><code>func server(ch *chan interface{}){ //do stuff}
</code></pre>

<p>I was wondering what the difference between them were and if they were just equivalent ways to do the same thing: pass a channel around different goroutines.</p>

<p>NOTE: I am aware that there is no reason to pass a pointer to a chan, map, or slice, or function value, since those are all reference types which internally contain a pointer (the exception would be if you want the callee to change the reference type header). The only reason I provided it is for completeness (i.e. to really provide every way a channel could be attempted to be passed as a parameter and to make on question that hopefully, references all ways to do this and compares them).</p>
","<p>These are different <strong>types</strong> of channels. See <a href=""http://golang.org/ref/spec#Channel_types"" rel=""noreferrer"">http://golang.org/ref/spec#Channel_types</a> . For the pointer stuff: Uncommon, but might be useful if you want to change the channel from inside the function (never saw that in the wild).</p>
","24868915"
"What's the best way to bundle static resources in a Go program?","16773","","<p>I'm working on a small web application in Go that's meant to be used as a tool on a developer's machine to help debug their applications/web services. The interface to the program is a web page which includes not only the HTML, but some JavaScript (for functionality), images and CSS (for styling). I'm planning on open-sourcing this application, so users should simply be able to run a Makefile and all the resources will go where they need to go. However, I'd also like to be able to simply distribute an executable with as few files/dependencies as possible. <strong>Is there a good way to bundle the HTML/CSS/JS with the executable, so users only have to download and worry about one file?</strong></p>

<hr>

<p>Right now, in my app, serving a static file looks a little like this:</p>

<pre><code>// called via http.ListenAndServe
func switchboard(w http.ResponseWriter, r *http.Request) {

    // snipped dynamic routing...

    // look for static resource
    uri := r.URL.RequestURI()
    if fp, err := os.Open(""static"" + uri); err == nil {
        defer fp.Close()
        staticHandler(w, r, fp)
        return
    }

    // snipped blackhole route
}
</code></pre>

<p>So it's pretty simple: if the requested file exists in my static directory, invoke the handler, which simply opens the file and tries to set a good <code>Content-Type</code> before serving. My thought was that there's no reason this needs to be based on the real filesystem: if there were compiled resources, I could simply index them by the request URI and serve them as such.</p>

<p>If there's not a good way to do this, or I'm barking up the wrong tree by trying to do this, let me know. I just figured the end-user would appreciate as few files as possible to manage.</p>

<p><sup>If there are more appropriate tags than <a href=""/questions/tagged/go"" class=""post-tag"" title=""show questions tagged 'go'"" rel=""tag"">go</a>, please feel free to add them or let me know.</sup></p>
","<p>The go-bindata package looks like it might be what you're interested in.</p>

<p><a href=""https://github.com/jteeuwen/go-bindata"">https://github.com/jteeuwen/go-bindata</a></p>

<p>It will allow you to convert any static file into a function call that can be embedded in your code and will return a byte slice of the file content when called.</p>
","13904528"
"How to pass data struct as parameter in golang","16763","","<p>XML to Json</p>

<pre><code>package main

import (
    ""encoding/json""
    ""encoding/xml""
    ""fmt""
)

type Persons struct {
    Person []struct {
        Name string
        Age  int
    }
}
type Places struct {
    Place []struct {
        Name    string
        Country string
    }
}

type Parks struct {
    Park struct {
        Name     []string
        Capacity []int
    }
}

const personXml = `
    &lt;Persons&gt;
        &lt;Person&gt;&lt;Name&gt;Koti&lt;/Name&gt;&lt;Age&gt;30&lt;/Age&gt;&lt;/Person&gt;
        &lt;Person&gt;&lt;Name&gt;Kanna&lt;/Name&gt;&lt;Age&gt;29&lt;/Age&gt;&lt;/Person&gt;
    &lt;/Persons&gt;
`

const placeXml = `
    &lt;Places&gt;
        &lt;Place&gt;&lt;Name&gt;Chennai&lt;/Name&gt;&lt;Country&gt;India&lt;/Country&gt;&lt;/Place&gt;
        &lt;Place&gt;&lt;Name&gt;London&lt;/Name&gt;&lt;Country&gt;UK&lt;/Country&gt;&lt;/Place&gt;
    &lt;/Places&gt;
`

const parkXml = `
    &lt;Parks&gt;
        &lt;Park&gt;&lt;Name&gt;National Park&lt;/Name&gt;&lt;Capacity&gt;10000&lt;/Capacity&gt;&lt;/Park&gt;
        &lt;Park&gt;Asian Park&lt;/Name&gt;&lt;Capacity&gt;20000&lt;/Capacity&gt;&lt;/Park&gt;
    &lt;/Parks&gt;
`

func WhatIamUsing() {
    var persons Persons
    xml.Unmarshal([]byte(personXml), &amp;persons)
    per, _ := json.Marshal(persons)
    fmt.Printf(""%s\n"", per)

    var places Places
    xml.Unmarshal([]byte(placeXml), &amp;places)
    pla, _ := json.Marshal(places)
    fmt.Printf(""%s\n"", pla)

    var parks Parks
    xml.Unmarshal([]byte(parkXml), &amp;parks)
    par, _ := json.Marshal(parks)
    fmt.Printf(""%s\n"", par)
}
</code></pre>

<p>What i want is a generic function which takes xml string and dataStruct
and returns a Json output. But below function is throwing an error
How to impliment this?</p>

<pre><code>func Xml2Json(xmlString string, DataStruct interface{}) (jsobj string, err error) {
    var dataStruct DataStruct
    xml.Unmarshal([]byte(personXml), &amp;dataStruct)
    js, _ := json.Marshal(dataStruct)
    return fmt.Sprintf(""%s\n"", js), nil
}

func main() {
    jsonstring, _ := Xml2Json(personXml, Persons)
}
</code></pre>

<p>Error message:</p>

<p>prog.go:73: DataStruct is not a type</p>

<p>prog.go:80: type Persons is not an expression</p>

<p>goplay link: <a href=""http://play.golang.org/p/vayb0bawKx"">http://play.golang.org/p/vayb0bawKx</a></p>
","<p>You can not store a type (like <code>Persons</code>) in an interface. You could pass a <code>reflect.Type</code> to your function. Then, your call would look like <code>Xml2Json(personXml, reflect.TypeOf(Persons))</code> which is quite ugly in my opinion.</p>

<p>The better approach is probably:</p>

<pre><code>func Xml2Json(xmlString string, value interface{}) (string, error) {
    if err := xml.Unmarshal([]byte(xmlString), value); err != nil {
        return """", err
    }
    js, err := json.Marshal(value)
    if err != nil {
        return """", err
    }
    return string(js), nil
}
</code></pre>

<p>You can use this function with <code>Xml2Json(personXml, new(Persons))</code> if you are not interested in the value itself, and</p>

<pre><code>var persons Persons
Xml2Json(personXML, &amp;persons)
</code></pre>

<p>when you also want to retrieve the struct value for later processing.</p>
","18249242"
"Convert arbitrary Golang interface to byte array","16728","","<p>I'm trying to write a hash that will accept all datatypes. Once in the function, I handle the data as a byte array. I'm having trouble figuring out how to cast an arbitrary <code>interface{}</code> to a byte array.</p>

<p>I tried using the binary package but it seemed to depend on the type of data passed in. One of the parameters of the <code>Write()</code> fn <a href=""http://golang.org/pkg/encoding/binary/#Write"">(docs)</a> required knowing the byte order of the parameter.</p>

<p>All datatype sizes are some multiple of a byte (even the bool), so this should be simple in theory.</p>

<p>Code in question below, </p>

<pre><code>package bloom

import (
    ""encoding/gob""
    ""bytes""
)

// adapted from http://bretmulvey.com/hash/7.html
func ComputeHash(key interface{}) (uint, error) {
    var buf bytes.Buffer
    enc := gob.NewEncoder(&amp;buf)
    err := enc.Encode(key)
    if err != nil {
        return 0, err
    }
    data := buf.Bytes()

    var a, b, c uint
    a, b = 0x9e3779b9, 0x9e3779b9
    c = 0;
    i := 0;

    for i = 0; i &lt; len(data)-12; {
        a += uint(data[i+1] | data[i+2] &lt;&lt; 8 | data[i+3] &lt;&lt; 16 | data[i+4] &lt;&lt; 24)
        i += 4
        b += uint(data[i+1] | data[i+2] &lt;&lt; 8 | data[i+3] &lt;&lt; 16 | data[i+4] &lt;&lt; 24)
        i += 4
        c += uint(data[i+1] | data[i+2] &lt;&lt; 8 | data[i+3] &lt;&lt; 16 | data[i+4] &lt;&lt; 24)

        a, b, c = mix(a, b, c);
    }

    c += uint(len(data))

    if i &lt; len(data) {
        a += uint(data[i])
        i++
    }
    if i &lt; len(data) {
        a += uint(data[i] &lt;&lt; 8)
        i++
    }
    if i &lt; len(data) {
        a += uint(data[i] &lt;&lt; 16)
        i++
    }
    if i &lt; len(data) {
        a += uint(data[i] &lt;&lt; 24)
        i++
    }


    if i &lt; len(data) {
        b += uint(data[i])
        i++
    }
    if i &lt; len(data) {
        b += uint(data[i] &lt;&lt; 8)
        i++
    }
    if i &lt; len(data) {
        b += uint(data[i] &lt;&lt; 16)
        i++
    }
    if i &lt; len(data) {
        b += uint(data[i] &lt;&lt; 24)
        i++
    }

    if i &lt; len(data) {
        c += uint(data[i] &lt;&lt; 8)
        i++
    }
    if i &lt; len(data) {
        c += uint(data[i] &lt;&lt; 16)
        i++
    }
    if i &lt; len(data) {
        c += uint(data[i] &lt;&lt; 24)
        i++
    }

    a, b, c = mix(a, b, c)
    return c, nil
}

func mix(a, b, c uint) (uint, uint, uint){
    a -= b; a -= c; a ^= (c&gt;&gt;13);
    b -= c; b -= a; b ^= (a&lt;&lt;8);
    c -= a; c -= b; c ^= (b&gt;&gt;13);
    a -= b; a -= c; a ^= (c&gt;&gt;12);
    b -= c; b -= a; b ^= (a&lt;&lt;16);
    c -= a; c -= b; c ^= (b&gt;&gt;5);
    a -= b; a -= c; a ^= (c&gt;&gt;3);
    b -= c; b -= a; b ^= (a&lt;&lt;10);
    c -= a; c -= b; c ^= (b&gt;&gt;15);

    return a, b, c
}
</code></pre>
","<p>Other problems in my code led me away from the <code>gob</code> package earlier, turns out it was the proper way as @nvcnvn suggested. Relevant code on how to solve this issue below:</p>

<pre><code>package bloom

import (
    ""encoding/gob""
    ""bytes""
)

func GetBytes(key interface{}) ([]byte, error) {
    var buf bytes.Buffer
    enc := gob.NewEncoder(&amp;buf)
    err := enc.Encode(key)
    if err != nil {
        return nil, err
    }
    return buf.Bytes(), nil
}
</code></pre>
","23004209"
"Golang : anonymous struct and empty struct","16682","","<p><a href=""http://play.golang.org/p/vhaKi5uVmm"" rel=""noreferrer"">http://play.golang.org/p/vhaKi5uVmm</a></p>

<pre><code>package main

import ""fmt""

var battle = make(chan string)

func warrior(name string, done chan struct{}) {
    select {
    case opponent := &lt;-battle:
        fmt.Printf(""%s beat %s\n"", name, opponent)
    case battle &lt;- name:
        // I lost :-(
    }
    done &lt;- struct{}{}
}

func main() {
    done := make(chan struct{})
    langs := []string{""Go"", ""C"", ""C++"", ""Java"", ""Perl"", ""Python""}
    for _, l := range langs { go warrior(l, done) }
    for _ = range langs { &lt;-done }
}
</code></pre>

<p><strong>[1st Question]</strong></p>

<pre><code> done &lt;- struct{}{}
</code></pre>

<p>How and Why do we need this weird-looking struct? Is it empty struct or anonymous struct? I googled it but couldn't find the right answer or documentation to explain about this.</p>

<p>The original source is from Andrew Gerrand's talk
<a href=""http://nf.wh3rd.net/10things/#10"" rel=""noreferrer"">http://nf.wh3rd.net/10things/#10</a></p>

<p>Here</p>

<pre><code> make(chan struct{})
</code></pre>

<p>done is a channel of type struct{}</p>

<p>So I tried with </p>

<pre><code> done &lt;- struct{}
</code></pre>

<p>But it is not working. Why do I need an extra brackets for this line?</p>

<pre><code> done &lt;- struct{}{}
</code></pre>

<hr>

<p><strong>[2nd Question]</strong></p>

<pre><code> for _ = range langs { &lt;-done }
</code></pre>

<p>Why do I need this line? I know that this line is necessary because without this line, no output. But Why and what does this line do? And what makes it necessary in this code? I know that <code>&lt;-done</code> is to receive values from the channel done and discard the received values. But why do I need to do this?</p>

<p>Thanks!</p>
","<blockquote>
  <p><a href=""http://golang.org/ref/spec#Composite_literals"" rel=""noreferrer"">Composite literals</a></p>
  
  <p>Composite literals construct values for structs, arrays, slices, and
  maps and create a new value each time they are evaluated. They consist
  of the type of the value followed by a brace-bound list of composite
  elements. An element may be a single expression or a key-value pair.</p>
</blockquote>

<p><code>struct{}{}</code> is a composite literal of type <code>struct{}</code>, the type of the value followed by a brace-bound list of composite elements.</p>

<p><code>for _ = range langs { &lt;-done }</code> is waiting until all the goroutines for all the <code>langs</code> have sent <code>done</code> messages.</p>
","20793625"
"Go map of functions","16659","","<p>I have Go program that has a function defined. I also have a map that should have a key for each function. How can I do that?</p>

<p>I have tried this, but this doesn't work.</p>

<pre>
func a(param string) {

}

m := map[string] func {
    'a_func': a,
}

for key, value := range m {
   if key == 'a_func' {
    value(param) 
   }
}
</pre>
","<p>Are you trying to do something like this? I've revised the example to use varying types and numbers of function parameters.</p>

<pre><code>package main

import ""fmt""

func f(p string) {
    fmt.Println(""function f parameter:"", p)
}

func g(p string, q int) {
    fmt.Println(""function g parameters:"", p, q)
}

func main() {
    m := map[string]interface{}{
        ""f"": f,
        ""g"": g,
    }
    for k, v := range m {
        switch k {
        case ""f"":
            v.(func(string))(""astring"")
        case ""g"":
            v.(func(string, int))(""astring"", 42)
        }
    }
}
</code></pre>
","6770333"
"Go update slice iterating error ""does not support indexing""","16630","","<p>I'm trying to iterate through slice values and update one or more values, accessing it by index or iterating through them. Then I have the following problem.</p>

<pre><code>package main

import ""fmt""

type Member struct {
    Name, Surname string
    Age           int
}
type Members []Member

func main() {
    members1 := Members{
        {""Bob"", ""Doe"", 30},
        {""Jack"", ""Doe"", 30},
        {""John"", ""Doe"", 30},
    }
    members1.ModifyName()
    members1.ModifyAllNames1()
    members1.ModifyAllNames2()
    fmt.Println(members1)
}

func (members *Members) ModifyName() {

    *members[0].Name = ""-""
}

func (members *Members) ModifyAllNames1() {

    for i := 0; i &lt; len(*members); i++ {
        *members[i].Name = ""-""
    }
}

func (members *Members) ModifyAllNames2() {

    for _, m := range *members {
        m.Name = ""-""
    }
}   
</code></pre>

<p>Then I get the following errors:</p>

<pre><code>invalid operation: members[0] (type *Members does not support indexing)
invalid operation: members[i] (type *Members does not support indexing)
</code></pre>
","<p>Type <code>*Members</code> does not support indexing, type <code>Members</code> does.</p>

<pre><code>m := make([]Members, 5)
pm := &amp;m

m[:2]     // good
pm[:2]    // bad
(*pm)[:2] // good
</code></pre>

<hr>

<p><a href=""http://play.golang.org/p/_26TUBHdDm"">http://play.golang.org/p/_26TUBHdDm</a></p>

<pre><code>package main

import ""fmt""

type Member struct {
    Name, Surname string
    Age           int
}
type Members []Member

func main() {
    members1 := Members{
        {""Bob"", ""Doe"", 30},
        {""Jack"", ""Doe"", 30},
        {""John"", ""Doe"", 30},
    }
    members1.ModifyName()
    members1.ModifyAllNames1()
    members1.ModifyAllNames2()
    fmt.Println(members1)
}

func (members *Members) ModifyName() {
    (*members)[0].Name = ""-""
}

func (members *Members) ModifyAllNames1() {
    for i := 0; i &lt; len(*members); i++ {
        (*members)[i].Name = ""-""
    }
}

func (members *Members) ModifyAllNames2() {
    for _, m := range *members {
        m.Name = ""-""
    }
}
</code></pre>
","25291002"
"Is it OK to leave a channel open?","16575","","<p>Is it OK to leave a Go channel open forever (never close the channel) if I never check for its state? Will it lead to memory leaks? Is the following code OK?</p>

<pre><code>func (requestCh chan&lt;- Request) GetResponse(data RequestData) Response {
    reply := make(chan Response)
    requestCh &lt;- Request{data: data, replyCh: reply}
    return &lt;-reply
}
</code></pre>
","<p>It's OK to leave a Go channel open forever and never close it. When the channel is no longer used, it will be garbage collected.</p>

<blockquote>
  <p>Note that it is only necessary to close a channel if the receiver is
  looking for a close.  Closing the channel is a control signal on the
  channel indicating that no more data follows. </p>
  
  <p><a href=""https://groups.google.com/d/msg/golang-nuts/pZwdYRGxCIk/qpbHxRRPJdUJ"">Design Question: Channel Closing</a></p>
</blockquote>
","8593986"
"How to find a character index in Golang?","16552","","<p>I'm trying to find ""@"" string character in Go but I cannot find a way to do it. I know how to index characters like ""HELLO[1]"" which would output ""E"". However I'm trying to find index number of the found char.</p>

<p>In Python I'd do it in following way:</p>

<pre><code>x = ""chars@arefun""
split = x.find(""@"")
chars = x[:split]
arefun = x[split+1:]

&gt;&gt;&gt;print split
5
&gt;&gt;&gt;print chars
chars
&gt;&gt;&gt;print arefun
arefun
</code></pre>

<p>So chars would return ""chars"" and arefun would return ""arefun"" while using ""@"" delimeter. I've been trying to find solution for hours and I cannot seem to find proper way to do it in Golang.</p>
","<p>You can use the <a href=""https://golang.org/pkg/strings/#Index"" rel=""noreferrer"">Index</a> function of package <code>strings</code> </p>

<p>Playground: <a href=""https://play.golang.org/p/_WaIKDWCec"" rel=""noreferrer"">https://play.golang.org/p/_WaIKDWCec</a></p>

<pre><code>package main

import ""fmt""
import ""strings""

func main() {
    x := ""chars@arefun""

    i := strings.Index(x, ""@"")
    fmt.Println(""Index: "", i)
    if i &gt; -1 {
        chars := x[:i]
        arefun := x[i+1:]
        fmt.Println(chars)
        fmt.Println(arefun)
    } else {
        fmt.Println(""Index not found"")
        fmt.Println(x)
    }
}
</code></pre>
","20827655"
"How to run a GO project in eclipse with goclipse installed","16504","","<p>I have installed goclipse in my eclipse and created a new go project.</p>

<p>Now this is what I have:</p>

<p><img src=""https://i.stack.imgur.com/Aeo6I.png"" alt=""enter image description here""></p>

<p>And I have hello.go looks like this:</p>

<pre><code>package main

import ""fmt""

func main() {
     fmt.Println(""Hello"")
}
</code></pre>

<p>Then I press run button, or right click the file hello.go, and then run, it gives nothing. Besides, it is also empty in bin folder.</p>

<p>Then I press <code>run configurations</code> button, almost empty there with only a project name. it gives:</p>

<pre><code>Given Go package not found.
</code></pre>

<p>This is my Preferences for Go:
<img src=""https://i.stack.imgur.com/aqDHl.png"" alt=""enter image description here""></p>

<p>I noticed that both GOROOT and GOPATH are different from those listed in explorer, but once I changed them to C:\Go\src\pkg or C:\Go\src, the Apply and OK button becomes disabled. Besides, I don't have C:\Go\src\pkg folder either.</p>

<p>I can <code>go install</code> or <code>go build</code> in command line, but I would like to use eclipse for another much larger project. It's windows 7, and the eclipse version is Luna Service Release 1 (4.4.1). Thank you.</p>

<p>EDIT: Now I have the following configurations, and it works fine:
Go is installed at c:\Go
in Preferences: GOROOT:C:\Go, GOPATH: C:\Users\Tiina\go_workspace
The rest in Preferences is filled in automatically.
helloTest project is located at C:\Users\Tiina\go_workspace\src\helloTest
hello.go is located at C:\Users\Tiina\go_workspace\src\helloTest\hello.go
Maybe because I create a project from existing code, and there was something left behind, it automatically adds another GOPATH, in Preferences delete it.</p>
","<p>If <code>GOROOT</code> refers to where go is installed (<code>C:\Go</code>), then you need to make sure that:</p>

<ul>
<li><code>GOPATH</code> differs from <code>GOROOT</code> (it is important, because <code>GOROOT/[src|pkg|bin]</code> are folders for the Go language itself, not for your own sources)</li>
<li><code>GOPPATH</code> points to a folder under which all your different Go project will reside (for instance <code>C:\Users\yourName\Go</code>: that defines a <strong><a href=""https://golang.org/doc/code.html#Workspaces"" rel=""nofollow noreferrer"">workspace</a></strong>)</li>
<li>your eclipse project is created in <code>GOPATH\src\myproject</code></li>
</ul>

<p>See ""<a href=""https://golang.org/doc/code.html"" rel=""nofollow noreferrer"">How to Write Go Code</a>"" to make sure that your installation and project sources respect the expected organization.</p>

<hr>

<p>The <a href=""https://stackoverflow.com/users/1348691/tiina"">OP Tiina</a> reports <a href=""https://stackoverflow.com/questions/27477855/how-to-run-a-go-project-in-eclipse-with-goclipse-installed/27478923#comment43392452_27478923"">in the comments</a>:</p>

<blockquote>
  <p>Now it works, but I noticed two things odd. </p>
  
  <ul>
  <li>First what I did: I move <code>helloTest</code> folder into <code>C:\Users\Tiina\go_workspace\src</code>, so now it is at <code>C:\Users\Tiina\go_workspace\src\helloTest</code>. </li>
  <li>Then I create project from existing code. Nothing else changed. Now I have two <code>GOPATH</code> in explorer, one is <code>C:\Users\Tiina\go_workspace\src</code>, the other one is <code>C:\Users\Tiina\go_workspace\helloTest\src</code>.<br>
  The latter one did no exist at the beginning</li>
  </ul>
</blockquote>

<p>I suspect what <a href=""https://github.com/GoClipse/goclipse"" rel=""nofollow noreferrer"">goclipse</a> does is define one <code>GOPATH</code> per project (or complete the existing <code>GOPATH</code>).<br>
If you create or import a project, it will define/complete <code>GOPATH</code> in <code>&lt;that project/src&gt;</code><br>
If you hello.go is within that <code>&lt;that project/src/&gt;</code> folder, then it should build and work as expected.</p>

<p>The <a href=""https://github.com/GoClipse/goclipse/blob/54ccc78d67dc6353f6b477fec95be1122e63791b/documentation/UserGuide.md#project-structure"" rel=""nofollow noreferrer"">user guide ""project structure"" of goclipse</a> mentions:</p>

<blockquote>
  <p>The project location is not part of any <code>GOPATH</code> entry.<br>
  In this case the project location will implicitly be added as an entry to the <code>GOPATH</code>, and a Go workspace structure with the <code>bin</code>, <code>pkg</code>, and <code>src</code> directories will be used in the project. </p>
  
  <p>Note that the project's implicit <code>GOPATH</code> entry will only apply to the source modules in that project. It will not be visible to other Goclipse projects (unless the entry is explicitly added to the global <code>GOPATH</code>).</p>
  
  <p>In the <code>src</code> folder you can create Go source files that will be compiled into a library package (and placed into <code>pkg</code>), or into an executable (and placed in <code>bin</code>)</p>
</blockquote>
","27478923"
"multiple response.WriteHeader calls in really simple example?","16499","","<p>I have the most basic net/http program that I'm using to learn the namespace in Go:</p>

<pre><code>package main

import (
    ""fmt""
    ""log""
    ""net/http""
)

func main() {
    http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) {
        fmt.Println(r.URL)
        go HandleIndex(w, r)
    })

    fmt.Println(""Starting Server..."")
    log.Fatal(http.ListenAndServe("":5678"", nil))
}

func HandleIndex(w http.ResponseWriter, r *http.Request) {
    w.WriteHeader(200)
    w.Write([]byte(""Hello, World!""))
}
</code></pre>

<p>When I run the program and connect to <code>localhost:5678</code> in Chrome, I get this in the console:</p>

<pre><code>Starting Server...
/
2015/01/15 13:41:29 http: multiple response.WriteHeader calls
/favicon.ico
2015/01/15 13:41:29 http: multiple response.WriteHeader calls
</code></pre>

<p>But I don't see how that's possible. I print the URL, start up a new goroutine, write the header once, and give it a static body of <code>Hello, World!</code> It seems like one of two things is happening. Either something behind the scenes is writing another header or somehow <code>HandleIndex</code> is called twice for the same request. What can I do to stop writing multiple headers?</p>

<p>EDIT: It seems to have something to do with the <code>go HandleIndex(w, r)</code> line because if I remove <code>go</code> and just make it a function call instead of a goroutine, I don't get any issues and the browser gets it's data. With it being a goroutine, I get the multiple WriteHeader error and the browser doesn't show ""Hello World."" Why is making this a goroutine breaking it?</p>
","<p>Take a look at the anonymous function you register as the handler of incoming requests:</p>

<pre><code>func(w http.ResponseWriter, r *http.Request) {
    fmt.Println(r.URL)
    go HandleIndex(w, r)
}
</code></pre>

<p>It prints the URL (to the standard output) then calls <code>HandleIndex()</code> in a new goroutine and continues execution.</p>

<p>If you have a handler function where you do not set the response status before the first call to <code>Write</code>, Go will automatically set the response status to 200 (HTTP OK). If the handler function does not write anything to the response (and does not set the response status and completes normally), that is also treated as a successful handling of the request and the response status 200 will be sent back. Your anonymous function does not set it, it does not even write anything to the response. So Go will do just that: set the response status to 200 HTTP OK.</p>

<p>Note that handling each request runs in its own goroutine.</p>

<p>So if you call <code>HandleIndex</code> in a new goroutine, your original anonymous function will continue: it will end and so the response header will be set - meanwhile (concurrently) your started new goroutine will also set the response header - hence the <code>""multiple response.WriteHeader calls""</code> error.</p>

<p>If you remove the <code>""go""</code>, your <code>HandleIndex</code> function will set the response header in the same goroutine before your handler function returns, and the ""net/http"" will know about this and will not try to set the response header again, so the error you experienced will not happen.</p>
","27973060"
"Why add ""()"" after closure body in Golang?","16496","","<p>I'm reading <code>The Go Programming Language Specifications</code> and found myself not truly understand with ""()"" after closure body:</p>

<p>In <code>Function literals</code>:</p>

<blockquote>
  <p>func(ch chan int) { ch &lt;- ACK }<strong>(replyChan)</strong>`</p>
</blockquote>

<p>In <code>Defer statements</code>'s example:</p>

<pre><code>// f returns 1
func f() (result int) {
    defer func() {
        result++
    }() // why and how?
    return 0
}
</code></pre>

<p>I'm not clear about the reason to add &amp; usage of ""()"" after closure body, hope someone can explain this clearly.</p>
","<p>It's not that <code>()</code> must be added after (only) a <em>closure</em> in <code>defer</code>. The language specs for the <a href=""http://golang.org/ref/spec#Defer_statements"">defer statement</a> mandate that its 'Expression' <em>always</em> must be a function call.</p>

<p>And why is it so? It's the same as with any other function, in 'defer' or not:</p>

<p>Consider:</p>

<pre><code>func f() int { return 42 }
</code></pre>

<p>and</p>

<pre><code>a := f
</code></pre>

<p>vs</p>

<pre><code>b := f()
</code></pre>

<p>The first expression RHS is a function value. In the second version the RHS is the value <em>returned by the function</em> - i.e. a function call.</p>

<p>So is the semantics of:</p>

<pre><code>defer f
</code></pre>

<p>vs</p>

<pre><code>defer f()
</code></pre>

<p>except that the first version doesn't make sense in the context of 'defer', and so the specifications mention that it must be the second form (only).</p>

<p>It's IMHO also easier to learn because of the orthogonality with the above discussed function call outside of the 'defer' statement.</p>

<p>Also note that a function call is not only fn-expr followed by <code>()</code>, but an expression list is generally inside the parenthesis (including an empty list). There's a big difference between:</p>

<pre><code>for i := range whatever {
        defer func() { fmt. Println(i) }()
}
</code></pre>

<p>and </p>

<pre><code>for i := range whatever {
        defer func(n int) { fmt. Println(n) }(i)
}
</code></pre>

<p>The first version prints the value of 'i' in the moment when the closure <em>executes</em>, the second prints the value of 'i' in the moment when the defer statement <em>was</em> executed.</p>
","16008757"
"Can Go really be that much faster than python?","16474","","<p>I think I may have implemented this incorrectly because the results do not make sense. I have a go program that counts to 1000000000</p>

<pre><code>    package main

    import (
        ""fmt""
    )

    func main() {
        for i := 0; i &lt; 1000000000; i++ {}
        fmt.Println(""Done"") 
    }
</code></pre>

<p>It finishes in less than a second. On the other hand I have a python script</p>

<pre><code>    x = 0
    while x &lt; 1000000000:
        x+=1
    print 'Done'
</code></pre>

<p>It finishes in a few minutes.</p>

<p>Why is the Go version so much faster. Are they both counting up to 1000000000 or am I missing something?</p>
","<p>One billion is not a very big number. Any reasonably modern machine <em>should</em> be able to do this in a few seconds at most, <em>if it's able to do the work with native types</em>. I verified this by writing an equivalent C program, reading the assembly to make sure that it actually was doing addition, and timing it (it completes in about 1.8 seconds on my machine).</p>

<p>Python, however, doesn't have a concept of natively typed variables (or meaningful type annotations at all), so it has to do hundreds of times as much work in this case. In short, the answer to your headline question is ""yes"". Go really <em>can</em> be that much faster than Python, even without any kind of compiler trickery like optimizing away a side-effect-free loop.</p>
","12575141"
"Go: ""Static"" method design","16433","","<p>I'm looking for advice on the best way to clean-up the following structure. I know Go doesn't have static methods and it's usually <a href=""https://groups.google.com/d/topic/golang-nuts/mKXyUoVT6m4"" rel=""noreferrer"">better to encapsulate functionality in a separate package</a>. My struct types reference each other, and so cannot be declared in separate packages because of circular imports.</p>

<pre><code>type Payment struct {
    User *User
}

type User struct {
    Payments *[]Payments
}

func (u *User) Get(id int) *User {
    // Returns the user with the given id 
}

func (p *Payment) Get(id int) *Payment {
    // Returns the payment with the given id 
}
</code></pre>

<p>But, if I want to load a user or payment, I'm just throwing away the receiver:</p>

<pre><code>var u *User
user := u.Get(585)
</code></pre>

<p>I could namespace the functions themselves, which strikes me as unclean:</p>

<pre><code>func GetUser(id int) *User {
    // Returns the user with the given id 
}

func GetPayment(id int) *Payment {
    // Returns the payment with the given id 
}
</code></pre>

<p>I would really like to be able to just call <code>.Get</code> or similar on the struct without writing the name of the struct in the function itself. What's the idiomatic way to do this?</p>
","<p><code>GetUser()</code> and <code>GetPayment()</code> strike me as perfectly clear and idiomatic.  I'm not sure what you find unclean about them.</p>

<p>Calling <code>.Get()</code> on a struct to return <em>another</em> struct is the thing that strikes me as very odd, unclear, and unidiomatic.</p>

<p>I think this might be a case of just sticking with the idiom and trusting that you'll get used to it.</p>
","18678246"
"Casting from one pointer to pointer type to another in Golang error","16428","","<p>Can anyone tell my why this wouldn't compile?</p>

<pre><code>package main

type myint int
func set(a **myint) {
    i := myint(5)
    *a = &amp;i 
}

func main() {
    var k *int
    set( (**myint)(&amp;k) ) // cannot convert &amp;k (type **int) to type **myint
    print( *k )
}
</code></pre>

<p>My reasoning so far is this. All types in Golang are different, but it allows to convert from one type to another with C-like cast syntax as long as underlying types are identical. In my example, converting 'int' to 'myint' is not a problem. '*int' to '*myint' isn't either. It's when you have pointer to pointer problems arise. I've been stuck on this for the second day now. Any help is appreciated.</p>
","<p>Here's my analysis.</p>

<p><code>(**myint)(&amp;k)</code> -- cannot convert <code>&amp;k</code> (<code>type **int</code>) to <code>type **myint</code>:</p>

<p><code>type **int</code> and <code>type **myint</code> are unnamed pointer types and their pointer base types, <code>type *int</code> and <code>type *myint</code>, don't have identical underlying types.</p>

<p>If T (<code>*int</code> or <code>*myint</code>) is a pointer type literal, the corresponding underlying type is T itself.</p>

<p><code>(*myint)(k)</code> -- can convert <code>k</code> (<code>type *int</code>) to <code>type *myint</code>:</p>

<p><code>type *int</code> and <code>type *myint</code> are unnamed pointer types and their pointer base types, <code>type int</code> and <code>type myint</code> (<code>type myint int</code>), have identical underlying types.</p>

<p>If T (<code>int</code>) is a predeclared type, the corresponding underlying type is T itself. If T (<code>myint</code>) is neither a predeclared type or nor a type literal, T's underlying type is the underlying type of the type to which T refers in its type declaration (<code>type myint int</code>). </p>

<p><code>(myint)(*k)</code> -- can convert <code>*k</code> (<code>type int</code>) to <code>type myint</code>:</p>

<p><code>type int</code> and <code>type myint</code> have identical underlying types. </p>

<p>If T (<code>int</code>) is a predeclared type, the corresponding underlying type is T itself. If T (<code>myint</code>) is neither a predeclared type or nor a type literal, T's underlying type is the underlying type of the type to which T refers in its type declaration (<code>type myint int</code>). </p>

<p>Here's the underlying type example from the Types section revised to use integers and int pointers.</p>

<pre><code>type T1 int
type T2 T1
type T3 *T1
type T4 T3
</code></pre>

<p>The underlying type of <code>int</code>, <code>T1</code>, and <code>T2</code> is <code>int</code>. The underlying type of <code>*T1</code>, <code>T3</code>, and <code>T4</code> is <code>*T1</code>. </p>

<p>References:</p>

<p><a href=""http://golang.org/doc/go_spec.html"" rel=""noreferrer"">The Go Programming Language Specification</a></p>

<p><a href=""http://golang.org/doc/go_spec.html#Conversions"" rel=""noreferrer"">Conversions</a></p>

<p><a href=""http://golang.org/doc/go_spec.html#Types"" rel=""noreferrer"">Types</a></p>

<p><a href=""http://golang.org/doc/go_spec.html#Properties_of_types_and_values"" rel=""noreferrer"">Properties of types and values</a></p>

<p><a href=""http://golang.org/doc/go_spec.html#Type_declarations"" rel=""noreferrer"">Type declarations</a></p>

<p><a href=""http://golang.org/doc/go_spec.html#Predeclared_identifiers"" rel=""noreferrer"">Predeclared identifiers</a></p>

<p><a href=""http://golang.org/doc/go_spec.html#Pointer_types"" rel=""noreferrer"">Pointer Type</a></p>
","5372575"
"golang html/template: how to index a slice element?","16398","","<p>I have a slice: <code>Keys []* datastore.Key</code></p>

<p>How could I index one of them in the template file? I guessed <code>{{.Keys[3] }}</code>, but that doesn't work and I searched a lot but with no clue.</p>

<p>Any suggestions would be welcome, thanks.</p>
","<p>Use the <a href=""http://golang.org/pkg/text/template/#Functions"" rel=""noreferrer""><code>index</code></a> command like so:</p>

<pre><code>{{index .Keys 3}}
</code></pre>
","12701495"
"Golang defer behavior","16391","","<p><a href=""https://golang.org/doc/effective_go.html#defer"" rel=""noreferrer"">Effective Go</a>
states the following regarding defer:</p>

<blockquote>
  <p>The arguments to the deferred function (which include the receiver if the function is a method) are evaluated when the <em>defer</em> executes, not when the <em>call</em> executes. Besides avoiding worries about variables changing values as the function executes, this means that a single deferred call site can defer multiple function executions. Here's a silly example.</p>

<pre><code>for i := 0; i &lt; 5; i++ {
    defer fmt.Printf(""%d "", i)
}
</code></pre>
  
  <p>Deferred functions are executed in LIFO order, so this code will cause <code>4 3 2 1 0</code> to be printed when the function returns.</p>
</blockquote>

<p>This example confuses me. If parameters are evaluated when the defer call is executed, then the defers in the for loop should print <code>5 5 5 5 5</code> since the defers will be called when the for loop ends, and at that time <code>i</code> would be 5. Evaluating defers at the end of the for loop will thus result in 5 for all calls.</p>

<p>Am I missing something here?</p>
","<p>That seems coherent (see also ""<a href=""http://blog.golang.org/defer-panic-and-recover"" rel=""noreferrer"">Defer, Panic, and Recover</a>"") </p>

<p>Deferred function calls are executed in Last In First Out order <em>after</em> the surrounding function returns.</p>

<p>This function prints ""3210"":</p>

<pre><code>func b() {
    for i := 0; i &lt; 4; i++ {
        defer fmt.Print(i)
    }
}
</code></pre>

<p>The last call when the <code>defer</code> is evaluated means <code>i=3</code>, the previous to last means <code>i=2</code> and so on.</p>

<p><a href=""http://golang.org/ref/spec#Defer_statements"" rel=""noreferrer"">Golang spec</a>:</p>

<blockquote>
  <p>Each time the ""<code>defer</code>"" statement executes, the function value and parameters to the call are evaluated as usual and saved anew but the actual function body is not executed.</p>
</blockquote>

<hr>

<blockquote>
  <p>the <code>defers</code> will be called when func ends</p>
</blockquote>

<p>yes, but their arguments are evaluated before, while the loop is running.  </p>

<p>You have a trickier defer case in ""<a href=""https://stackoverflow.com/q/16010694/6309"">How golang's “defer” capture closure's parameter?</a>"" when  used with closure (<a href=""http://golang.org/ref/spec#Function_literals"" rel=""noreferrer"">function literal</a>), as detailed in ""<a href=""https://stackoverflow.com/q/16008604/6309"">Why add “<code>()</code>” after closure body in Golang?</a>"". </p>
","24720120"
"How to debug ""exit status 1"" error when running exec.Command in Golang","16325","","<p>When I run the code below:</p>

<pre><code>cmd := exec.Command(""find"", ""/"", ""-maxdepth"", ""1"", ""-exec"", ""wc"", ""-c"", ""{}"", ""\\"")
var out bytes.Buffer
cmd.Stdout = &amp;out
err := cmd.Run()
if err != nil {
    fmt.Println(err)
    return
}
fmt.Println(""Result: "" + out.String())
</code></pre>

<p>I am getting this error:</p>

<blockquote>
  <p>exit status 1</p>
</blockquote>

<p>However this is not helpful to debug the exact cause of the error.</p>

<p>How to get more detailed information?</p>
","<p>The solution is to use the <code>Stderr</code> property of the Command object. This can be done like this:</p>

<pre><code>cmd := exec.Command(""find"", ""/"", ""-maxdepth"", ""1"", ""-exec"", ""wc"", ""-c"", ""{}"", ""\\"")
var out bytes.Buffer
var stderr bytes.Buffer
cmd.Stdout = &amp;out
cmd.Stderr = &amp;stderr
err := cmd.Run()
if err != nil {
    fmt.Println(fmt.Sprint(err) + "": "" + stderr.String())
    return
}
fmt.Println(""Result: "" + out.String())
</code></pre>

<p>Running the above code, would make it clear what the issue is:</p>

<blockquote>
  <p>exit status 1: find: -exec: no terminating "";"" or ""+""</p>
</blockquote>
","18159705"
"Exit with error code in go?","16291","","<p>What's the idiomatic way to exit a program with some error code?</p>

<p>The documentation for Exit says ""The program terminates immediately; deferred functions are not run."", and log.Fatal just calls Exit. For things that aren't heinous errors, terminating the program without running deferred functions seems extreme.</p>

<p>Am I supposed to pass around some state that indicate that there's been an error, and then call Exit(1) at some point where I know that I can exit safely, with all deferred functions having been run?</p>
","<p>I do something along these lines in most of my real <code>main</code> packages, so that the <code>return err</code> convention is adopted as soon as possible, and has a proper termination:</p>

<pre><code>func main() {
    if err := run(); err != nil {
        fmt.Fprintf(os.Stderr, ""error: %v\n"", err)
        os.Exit(1)
    }
}

func run() error {
    err := something()
    if err != nil {
        return err
    }
    // etc
}
</code></pre>
","18969976"
"Call a Struct and its Method by name in Go?","16281","","<p>I have found a function call <code>MethodByName()</code> here <a href=""http://golang.org/pkg/reflect/#Value.MethodByName"" rel=""noreferrer"">http://golang.org/pkg/reflect/#Value.MethodByName</a> but it's not exactly what I want! (maybe because I don't know how to use it ... I cannot find any example with it). What I want is:</p>

<pre><code>type MyStruct struct {
//some feilds here
} 
func (p *MyStruct) MyMethod { 
    println(""My statement.""); 
} 

CallFunc(""MyStruct"", ""MyMethod""); 
//print out My statement."" 
</code></pre>

<p>So I guess, first I need something like <code>StructByName()</code> and after that use it for <code>MethodByName()</code>, is that right!?</p>
","<p>To call a method on an object, first use <code>reflect.ValueOf</code>. Then find the method by name, and then finally call the found method. For example:</p>

<pre><code>package main

import ""fmt""
import ""reflect""

type T struct {}

func (t *T) Foo() {
    fmt.Println(""foo"")
}

func main() {
    var t T
    reflect.ValueOf(&amp;t).MethodByName(""Foo"").Call([]reflect.Value{})
}
</code></pre>
","8106349"
"GO: multiple-value in single-value context ERROR","16261","","<p>I got this error while compiling my GO code:</p>

<pre><code>multiple-value fmt.Println() in single-value context
</code></pre>

<p>I'm trying to create a function that takes in variable number of ints and prints each variable on a line.</p>

<p>GO:</p>

<pre><code>package main 

import (
    ""fmt""
)

func main() {
    slice := []int{1,3,4,5}
    vf(slice...)
}

func vf(a ...int) int {
    if len(a)==0 {
        return 0
    }
    var x int
    for _, v := range a {
        x = fmt.Println(v)
    }
    return x
}
</code></pre>

<p>Hmm what's wrong?</p>
","<p>Check out <a href=""http://godoc.org/fmt#Println"">http://godoc.org/fmt#Println</a></p>

<p><code>fmt.Println</code> returns multiple values.. an int and and error:</p>

<p><code>func Println(a ...interface{}) (n int, err error)</code></p>

<p>You are only assigning to the int.  try this:</p>

<pre><code>package main 

import (
    ""fmt""
)

func main() {
    slice := []int{1,3,4,5}
    vf(slice...)
}

func vf(a ...int) int {
    if len(a)==0 {
        return 0
    }
    var x int
    for _, v := range a {
        x, _ = fmt.Println(v)
    }
    return x
}
</code></pre>
","25017863"
"int16 to byte array","16243","","<p>I'm trying to convert a int16 to a byte array but i cant seem to get it to work.<br />
Here is what i've got right now:</p>

<pre><code>int16 i := 41
a := []byte(string(i))//this line is wrong
</code></pre>

<p>Also if someone wonder the array needs to be a length of 2.</p>
","<p>If you want to get the bytes of an int16, try something like this:</p>

<pre><code>var i int16 = 41
var h, l uint8 = uint8(i&gt;&gt;8), uint8(i&amp;0xff)
</code></pre>

<p>Go tries to make it difficult to write programs that depend on attributes of your platform such as byte order. Thence, type punning that leads to such dependencies (such as overlaying a byte-array with an int16) is forbidden.</p>

<p>In case you really want to shoot yourself in the foot, try the package <a href=""http://golang.org/pkg/unsafe"">unsafe</a>.</p>
","17260211"
"Golang how do I batch sql statements with package database.sql","16214","","<p>How do I batch sql statements with Golang's database.sql package?</p>

<p>In Java I would do it like this :</p>

<pre><code>// Create a prepared statement
String sql = ""INSERT INTO my_table VALUES(?)"";
PreparedStatement pstmt = connection.prepareStatement(sql);

// Insert 10 rows of data
for (int i=0; i&lt;10; i++) {
    pstmt.setString(1, """"+i);
    pstmt.addBatch();
}

// Execute the batch
int [] updateCounts = pstmt.executeBatch();
</code></pre>

<p>How would I achieve the same in Golang?</p>
","<p>I don't know exactly what <em>batching</em> in Java does on an SQL level, but you can use <strong>transactions</strong> to achieve a batch execution of several statements at once. Just make sure your DB engine supports it.</p>

<p><a href=""http://golang.org/pkg/database/sql/#DB.Begin"" rel=""nofollow""><code>func (db *DB) Begin() (*Tx, error)</code></a></p>

<blockquote>
  <p>Begin starts a transaction. The isolation level is dependent on the driver.</p>
</blockquote>

<p><a href=""http://golang.org/pkg/database/sql/#Tx.Prepare"" rel=""nofollow""><code>func (tx *Tx) Prepare(query string) (*Stmt, error)</code></a></p>

<blockquote>
  <p>Prepare creates a prepared statement for use within a transaction.</p>
</blockquote>

<p><a href=""http://golang.org/pkg/database/sql/#Tx.Commit"" rel=""nofollow""><code>func (tx *Tx) Commit() error</code></a></p>

<blockquote>
  <p>Commit commits the transaction.</p>
</blockquote>
","12490811"
"Is it safe to remove selected keys from Golang map within a range loop?","16209","","<p>How can one remove selected keys from a Golang map?
Is it safe to combine delete() with range, as in the code below?</p>

<p><a href=""http://play.golang.org/p/u1vufvEjSw"">http://play.golang.org/p/u1vufvEjSw</a></p>

<pre><code>package main

import ""fmt""

type Info struct {
    value string
}

func main() {
    table := make(map[string]*Info)

    for i := 0; i &lt; 10; i++ {
        str := fmt.Sprintf(""%v"", i)
        table[str] = &amp;Info{str}
    }

    for key, value := range table {
        fmt.Printf(""deleting %v=&gt;%v\n"", key, value.value)
        delete(table, key)
    }
}
</code></pre>
","<p>This is safe! You can also find a similar sample in <a href=""http://golang.org/doc/effective_go.html#for"" rel=""noreferrer"">Effective Go</a>:</p>

<pre><code>for key := range m {
    if key.expired() {
        delete(m, key)
    }
}
</code></pre>

<p>And <a href=""https://golang.org/ref/spec#For_statements"" rel=""noreferrer"">the language specification</a>:</p>

<blockquote>
  <p>The iteration order over maps is not specified and is not guaranteed to be the same from one iteration to the next. If map entries that have not yet been reached are <strong>removed during iteration</strong>, the corresponding iteration values will not be produced. If map entries are <strong>created during iteration</strong>, that entry may be produced during the iteration or may be skipped. The choice may vary for each entry created and from one iteration to the next. If the map is nil, the number of iterations is 0.</p>
</blockquote>
","23230406"
"How to define multiple name tags in a struct","16122","","<p>I need to get an item from a mongo database, so I defined a struct like this</p>

<pre><code>type Page struct {
    PageId string                 `bson:""pageId""`
    Meta   map[string]interface{} `bson:""meta""`
}
</code></pre>

<p>Now I also need to encode it to JSON, but it encodes the fields as uppercase (i get PageId instead of pageId) so i also need to define field tags for JSON. I tried something like this but it didn't work:</p>

<pre><code>type Page struct {
    PageId string                 `bson:""pageId"",json:""pageId""`
    Meta   map[string]interface{} `bson:""meta"",json:""pageId""`
}
</code></pre>

<p>So how can this be done, define multiple name tags in a struct?</p>
","<p>It says in the documentation of the <code>reflect</code> package:</p>

<blockquote>
  <p>By convention, tag strings are a concatenation of optionally space-separated key:""value"" pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 ' '), quote (U+0022 '""'), and colon (U+003A ':'). Each value is quoted using U+0022 '""' characters and Go string literal syntax.</p>
</blockquote>

<p>What you need to do is to use space instead of comma as tag string separator.</p>

<pre><code>type Page struct {
    PageId string                 `bson:""pageId"" json:""pageId""`
    Meta   map[string]interface{} `bson:""meta"" json:""pageId""`
}
</code></pre>
","18635910"
"All possible GOOS value?","16113","","<p>If I get it right, <code>GOOS</code> is determined when compile the source code.</p>

<p>To better support multiple OS, I'm interested in what <code>GOOS</code> could be.</p>

<p>Of course, there might be infinite possibilities of it, since Go is opensourced. So what I really want is a ""common list"".</p>

<p>Known values are:</p>

<ul>
<li><code>windows</code></li>
<li><code>linux</code></li>
<li><code>darwin</code> or <code>freebsd</code> or <code>unix</code>? I know that at least one of them must exist.</li>
</ul>
","<p>Note that those values are defined in <a href=""https://github.com/golang/go/blob/master/src/go/build/syslist.go""><code>src/go/build/syslist.go</code></a>.</p>

<p>With Go 1.5 (Q3 2015), <code>GOARCH</code> will become <em>much</em> more complete.<br>
See <a href=""https://github.com/golang/go/commit/1eebb91a5828c26532125b9464c92f721cd79d0f"">commit 1eebb91</a> by <a href=""https://github.com/minux"">Minux Ma (<code>minux</code>)</a></p>

<blockquote>
  <h2><code>go/build</code>: reserve <code>GOARCH</code> values for <em>all</em> common architectures</h2>
  
  <p>Whenever we introduce a new <code>GOARCH</code>, older Go releases won't recognize them and this causes trouble for both our users and us (we need to add unnecessary build tags).</p>
  
  <p>Go 1.5 has introduced three new GOARCHes so far: <code>arm64 ppc64 ppc64le</code>, we can take the time to introduce GOARCHes for all common architectures that Go might support in the future to avoid the problem.</p>
</blockquote>

<pre><code>const goosList = ""android darwin dragonfly freebsd linux nacl \ 
  netbsd openbsd plan9 solaris windows ""

const goarchList = ""386 amd64 amd64p32 arm arm64 ppc64 ppc64le \
   mips mipsle mips64 mips64le mips64p32 mips64p32le \ # (new)
   ppc s390 s390x sparc sparc64 "" # (new)
</code></pre>

<p>The list is still being review in <a href=""https://go-review.googlesource.com/#/c/9644/"">Change 9644</a>, with comments like:</p>

<blockquote>
  <p>I wouldn't bother with Itanium. It's basically a dead architecture.<br>
  Plus, it's so hard to write a compiler for it that I really can't see it happening except as a labor of love, and nobody loves the Itanium.</p>
</blockquote>

<p>The <a href=""https://golang.org/doc/install/source#environment""><strong>official documentation</strong></a> now (GO 1.5+ Q3 2015) reflects that completed list.</p>
","30068222"
"strings.Split in Go","16050","","<p>The file names.txt consists of many names in the form of:</p>

<pre><code>""KELLEE"",""JOSLYN"",""JASON"",""INGER"",""INDIRA"",""GLINDA"",""GLENNIS""
</code></pre>

<p>Does anyone know how to split the string so that it is individual names separated by commas?</p>

<pre><code>KELLEE,JOSLYN,JASON,INGER,INDIRA,GLINDA,GLENNIS
</code></pre>

<p>The following code splits by comma and leaves quotes around the name, what is the escape character to split out the <code>""</code>. Can it be done in one Split statement, splitting out <code>"",""</code> and leaving a comma to separate?</p>

<pre><code>package main

import ""fmt""
import ""io/ioutil""
import ""strings""

func main() {
        fData, err := ioutil.ReadFile(""names.txt"")  // read in the external file
    if err != nil {
        fmt.Println(""Err is "", err)     // print any error
    }
    strbuffer := string(fData)  // convert read in file to a string

    arr := strings.Split(strbuffer, "","")

    fmt.Println(arr)

}
</code></pre>

<p>By the way, this is part of Project Euler problem # 22. <a href=""http://projecteuler.net/problem=22"" rel=""nofollow"">http://projecteuler.net/problem=22</a> </p>
","<p>Jeremy's answer is basically correct and does exactly what you have asked for. But the format of your ""names.txt"" file is actually a well known and is called <a href=""http://en.wikipedia.org/wiki/Comma-separated_values"">CSV</a> (comma separated values). Luckily, Go comes with an <a href=""http://golang.org/pkg/encoding/csv/"">encoding/csv</a> package (which is part of the standard library) for decoding and encoding such formats easily. In addition to your + Jeremy's solution, this package will also give exact error messages if the format is invalid, supports multi-line records and does proper unquoting of quoted strings.</p>

<p>The basic usage looks like this:</p>

<pre><code>package main

import (
    ""encoding/csv""
    ""fmt""
    ""io""
    ""os""
)

func main() {
    file, err := os.Open(""names.txt"")
    if err != nil {
        fmt.Println(""Error:"", err)
        return
    }
    defer file.Close()
    reader := csv.NewReader(file)
    for {
        record, err := reader.Read()
        if err == io.EOF {
            break
        } else if err != nil {
            fmt.Println(""Error:"", err)
            return
        }

        fmt.Println(record) // record has the type []string
    }
}
</code></pre>

<p>There is also a <a href=""http://golang.org/pkg/encoding/csv/#Reader.ReadAll"">ReadAll</a> method that might make your program even shorter, assuming that the whole file fits into the memory.</p>

<p><strong>Update:</strong> dystroy has just pointed out that your file has only one line anyway. The CSV reader works well for that too, but the following, less general solution should also be sufficient:</p>

<pre><code>for {
    if n, _ := fmt.Fscanf(file, ""%q,"", &amp;name); n != 1 {
        break
    }
    fmt.Println(""name:"", name)
}
</code></pre>
","11465817"
"Runtime error: ""assignment to entry in nil map""","16025","","<p>I'm trying to create a slice of Maps. Although the code compiles fine, I get the runtime error below:</p>

<pre><code>mapassign1: runtime·panicstring(""assignment to entry in nil map"");
</code></pre>

<p>I attempt to make an array of Maps, with each Map containing two indicies, a ""Id"" and a ""Investor"".  My code looks like this:</p>

<pre><code>for _, row := range rows {
        var inv_ids []string
        var inv_names []string

        //create arrays of data from MySQLs GROUP_CONCAT function
        inv_ids = strings.Split(row.Str(10), "","")
        inv_names = strings.Split(row.Str(11), "","")
        length := len(inv_ids);

        invs := make([]map[string]string, length)

        //build map of ids =&gt; names
        for i := 0; i &lt; length; i++ {
            invs[i] = make(map[string]string)
            invs[i][""Id""] = inv_ids[i]
            invs[i][""Investor""] = inv_names[i]
        }//for

        //build Message and return
        msg := InfoMessage{row.Int(0), row.Int(1), row.Str(2), row.Int(3), row.Str(4), row.Float(5), row.Float(6), row.Str(7), row.Str(8), row.Int(9), invs}
        return(msg)
    } //for
</code></pre>

<p>I initially thought something like below would work, however that did not fix the issue either.  Any ideas?</p>

<pre><code>invs := make([]make(map[string]string), length)
</code></pre>
","<p>You are trying to create a <strong>slice</strong> of maps; consider the following example:</p>

<p><a href=""http://play.golang.org/p/gChfTgtmN-"">http://play.golang.org/p/gChfTgtmN-</a></p>

<pre><code>package main

import ""fmt""

func main() {
    a := make([]map[string]int, 100)
    for i := 0; i &lt; 100; i++ {
        a[i] = map[string]int{""id"": i, ""investor"": i}
    }
    fmt.Println(a)
}
</code></pre>

<p>You can rewrite these lines:</p>

<pre><code>invs[i] = make(map[string]string)
invs[i][""Id""] = inv_ids[i]
invs[i][""Investor""] = inv_names[i]
</code></pre>

<p>as:</p>

<pre><code>invs[i] = map[string]string{""Id"": inv_ids[i], ""Investor"": inv_names[i]}
</code></pre>

<p>this is called a <em>composite literal</em>.</p>

<p>Now, in a more idiomatic program, you'd most probably want to use a <code>struct</code> to represent an investor:</p>

<p><a href=""http://play.golang.org/p/vppK6y-c8g"">http://play.golang.org/p/vppK6y-c8g</a></p>

<pre><code>package main

import (
    ""fmt""
    ""strconv""
)

type Investor struct {
    Id   int
    Name string
}

func main() {
    a := make([]Investor, 100)
    for i := 0; i &lt; 100; i++ {
        a[i] = Investor{Id: i, Name: ""John"" + strconv.Itoa(i)}
        fmt.Printf(""%#v\n"", a[i])
    }
}
</code></pre>
","15118148"
"Converting from an integer to its binary representation","16019","","<p>Has anyone got an idea if there is any inbuilt functionality in Go for converting from any one of the numeric types to its binary number form.</p>

<p>For example, if <code>123</code> was the input, the string <code>""1111011""</code> would be the output.</p>
","<p>The <code>strconv</code> package has <code>FormatInt</code>, which accepts an <code>int64</code> and lets you specify the base.</p>

<pre><code>n := int64(123)

fmt.Println(strconv.FormatInt(n, 2)) // 1111011
</code></pre>

<p><em><strong>DEMO:</em></strong> <a href=""http://play.golang.org/p/leGVAELMhv"">http://play.golang.org/p/leGVAELMhv</a></p>

<blockquote>
  <p><a href=""http://golang.org/pkg/strconv/#FormatInt"">http://golang.org/pkg/strconv/#FormatInt</a></p>
  
  <p><code>func FormatInt(i int64, base int) string</code></p>
  
  <p>FormatInt returns the string representation of i in the given base, for 2 &lt;= base &lt;= 36. The result uses the lower-case letters 'a' to 'z' for digit values >= 10. </p>
</blockquote>
","13870865"
"Golang : convert uint8 to string","16013","","<p><a href=""http://play.golang.org/p/BoZkHC8_uA"" rel=""noreferrer"">http://play.golang.org/p/BoZkHC8_uA</a></p>

<p>I want to convert uint8 to string but can't figure out how.</p>

<pre><code>  package main

  import ""fmt""
  import ""strconv""

  func main() {

    str := ""Hello""
    fmt.Println(str[1])  // 101

    fmt.Println(strconv.Itoa(str[1]))
  }
</code></pre>

<p>This gives me <code>prog.go:11: cannot use str[1] (type uint8) as type int in function argument
 [process exited with non-zero status]</code></p>

<p>Any idea?</p>
","<p>Simply <a href=""http://golang.org/ref/spec#Conversions"" rel=""noreferrer"">convert it</a> :</p>

<pre><code>    fmt.Println(strconv.Itoa(int(str[1])))
</code></pre>
","19223319"
"Golang function similar to getchar","15952","","<p>Is there function similar to <code>getchar</code> able to handle tab press in console? I want to make some sort of completion in my console app.</p>
","<p>C's <code>getchar()</code> example: </p>

<pre><code>#include &lt;stdio.h&gt;
void main()
{
    char ch;
    ch = getchar();
    printf(""Input Char Is :%c"",ch);
}
</code></pre>

<p>Go equivalent: </p>

<pre><code>package main

import (
    ""bufio""
    ""fmt""
    ""os""
)

func main() {

    reader := bufio.NewReader(os.Stdin)
    input, _ := reader.ReadString('\n')

    fmt.Printf(""Input Char Is : %v"", string([]byte(input)[0]))

    // fmt.Printf(""You entered: %v"", []byte(input))
}
</code></pre>

<p>The last commented line just shows that when you press <code>tab</code> the first element is U+0009 ('CHARACTER TABULATION'). </p>

<p>However for your needs (detecting tab) C's <code>getchar()</code> is not suitable as it requires the user to hit enter. What you need is something like ncurses' getch()/ readline/ jLine as mentioned by @miku. With these, you actually wait for a single keystroke. </p>

<p>So you have multiple options: </p>

<ol>
<li><p>Use <code>ncurses</code> / <code>readline</code> binding, for example <a href=""https://code.google.com/p/goncurses/"" rel=""nofollow"">https://code.google.com/p/goncurses/</a> or equivalent like <a href=""https://github.com/nsf/termbox"" rel=""nofollow"">https://github.com/nsf/termbox</a> </p></li>
<li><p>Roll your own see <a href=""http://play.golang.org/p/plwBIIYiqG"" rel=""nofollow"">http://play.golang.org/p/plwBIIYiqG</a> for starting point</p></li>
<li><p>use <code>os.Exec</code> to run stty or jLine.</p></li>
</ol>

<p>refs: </p>

<p><a href=""https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/zhBE5MH4n-Q"" rel=""nofollow"">https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/zhBE5MH4n-Q</a></p>

<p><a href=""https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/S9AO_kHktiY"" rel=""nofollow"">https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/S9AO_kHktiY</a></p>

<p><a href=""https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/icMfYF8wJCk"" rel=""nofollow"">https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/icMfYF8wJCk</a></p>
","14098314"
"read ""SELECT *"" columns into []string in go","15937","","<p>I want to write a Go program to dump rows from from a database table into a csv file using <code>SELECT *</code>.</p>

<p>Go provides the excellent <a href=""http://golang.org/pkg/database/sql"" rel=""nofollow noreferrer"">sql</a> and <a href=""http://golang.org/pkg/encoding/csv/"" rel=""nofollow noreferrer"">csv</a> apis, but <code>csv</code> expects arrays of strings and the <code>Scan</code> method in <code>Rows</code> ""fills"" fields according to their types.
As I don't know the table before, I have no idea how many columns there are and what their types are.</p>

<p>It's my first program in Go, so I'm struggling a little.</p>

<p>How do I best read the columns from a <code>Rows</code> instance into a <code>[]string</code> - and is that the ""right"" way?</p>

<p>Thanks!</p>

<p><strong>UPDATE</strong></p>

<p>I'm still struggling with the parameters. This is my code, for now I'm using <code>panic</code> instead of returning an <code>error</code>, but I'm going to change that later. In my test, I'm passing the query result and <code>os.Stdout</code>.</p>

<pre><code>func dumpTable(rows *sql.Rows, out io.Writer) error {
    colNames, err := rows.Columns()
    if err != nil {
        panic(err)
    }
    if rows.Next() {
        writer := csv.NewWriter(out)
        writer.Comma = '\t'
        cols := make([]string, len(colNames))
        processRow := func() {
            err := rows.Scan(cols...)
            if err != nil {
                panic(err)
            }
            writer.Write(cols)
        }
        processRow()
        for rows.Next() {
            processRow()
        }
        writer.Flush()
    }
    return nil
}
</code></pre>

<p>For this, I get <code>cannot use cols (type []string) as type []interface {} in function argument</code> (at the <code>writer.Write(cols)</code> line.</p>

<p>I then tested</p>

<pre><code>    readCols := make([]interface{}, len(colNames))
    writeCols := make([]string, len(colNames))
    processRow := func() {
        err := rows.Scan(readCols...)
        if err != nil {
            panic(err)
        }
        // ... CONVERSION?
        writer.Write(writeCols)
    }
</code></pre>

<p>which lead to <code>panic: sql: Scan error on column index 0: destination not a pointer</code>.</p>

<p><strong>UPDATE 2</strong></p>

<p>I independently arrived at <a href=""https://stackoverflow.com/users/694331/anisus"">ANisus</a>' solution. This is the code I'm using now.</p>

<pre><code>func dumpTable(rows *sql.Rows, out io.Writer) error {
    colNames, err := rows.Columns()
    if err != nil {
        panic(err)
    }
    writer := csv.NewWriter(out)
    writer.Comma = '\t'
    readCols := make([]interface{}, len(colNames))
    writeCols := make([]string, len(colNames))
    for i, _ := range writeCols {
        readCols[i] = &amp;writeCols[i]
    }
    for rows.Next() {
        err := rows.Scan(readCols...)
        if err != nil {
            panic(err)
        }
        writer.Write(writeCols)
    }
    if err = rows.Err(); err != nil {
        panic(err)
    }
    writer.Flush()
    return nil
}
</code></pre>
","<p>In order to directly <code>Scan</code> the values into a <code>[]string</code>, you must create an <code>[]interface{}</code> slice pointing to each string in your string slice.</p>

<p>Here you have a working example for MySQL (just change the <code>sql.Open</code>-command to match your settings):</p>

<pre><code>package main

import (
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
    ""database/sql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:pass@tcp(localhost:3306)/test?charset=utf8"")
    defer db.Close()

    if err != nil {
        fmt.Println(""Failed to connect"", err)
        return
    }

    rows, err := db.Query(`SELECT 'one' col1, 'two' col2, 3 col3, NULL col4`)
    if err != nil {
        fmt.Println(""Failed to run query"", err)
        return
    }

    cols, err := rows.Columns()
    if err != nil {
        fmt.Println(""Failed to get columns"", err)
        return
    }

    // Result is your slice string.
    rawResult := make([][]byte, len(cols))
    result := make([]string, len(cols))

    dest := make([]interface{}, len(cols)) // A temporary interface{} slice
    for i, _ := range rawResult {
        dest[i] = &amp;rawResult[i] // Put pointers to each string in the interface slice
    }

    for rows.Next() {
        err = rows.Scan(dest...)
        if err != nil {
            fmt.Println(""Failed to scan row"", err)
            return
        }

        for i, raw := range rawResult {
            if raw == nil {
                result[i] = ""\\N""
            } else {
                result[i] = string(raw)
            }
        }

        fmt.Printf(""%#v\n"", result)
    }
}
</code></pre>
","14500756"
"Serving a websocket in Go","15928","","<p>I'm starting to play around with websockets + go and well I think I'm misunderstanding something quite basic with websockets in Go.</p>

<p>I'd like to simply listen for a websocket connection and process accordingly. However all examples I see in Go using websocket is serving the web page that then connects to the websocket, is this a requirement?</p>

<p>The following is a basic echo server I have setup:</p>

<pre><code>package main

import (
  ""fmt""
  ""code.google.com/p/go.net/websocket""
  ""net/http""
)

func webHandler(ws *websocket.Conn) {
  var s string
  fmt.Fscan(ws, &amp;s)
  fmt.Println(""Received: "", s)
}

func main() {
  fmt.Println(""Starting websock server: "")
  http.Handle(""/echo"", websocket.Handler(webHandler))
  err := http.ListenAndServe("":8080"", nil)
  if err != nil {
    panic(""ListenAndServe: "" + err.Error())
  }
}
</code></pre>

<p>This is the javascript used to connect: </p>

<pre><code>ws = new WebSocket(""ws://localhost:8080/echo"");
ws.onmessage = function(e) {
    console.log(""websock: "" + e.data);
};
</code></pre>

<p>However this results in:
   WebSocket connection to 'ws://localhost:8080/echo' failed: Unexpected response code: 403 </p>
","<p>When working with websockets from Javascript, you will seldom have to read the frames directly. To be honest, I am not even sure how to do that.</p>

<p>Fortunately, the websocket package already has a type, <code>Codec</code> that does this for you. My suggestion is to use the predefined websocket.Message codec to <code>Recieve</code> and <code>Send</code> messages instead.</p>

<blockquote>
  <p>Message is a codec to send/receive text/binary data in a frame on WebSocket connection. To   send/receive text frame, use string type. To send/receive binary frame, use []byte type.</p>
</blockquote>

<p>Using websocket.Message, your webHandler would look something like this:</p>

<pre><code>func webHandler(ws *websocket.Conn) {
    var in []byte
    if err := websocket.Message.Receive(ws, &amp;in); err != nil {
        return
    }
    fmt.Printf(""Received: %s\n"", string(in))
    websocket.Message.Send(ws, in)      
}
</code></pre>

<p>And, no, it is not a requirement that Go serves the webpage. The 403 error you received does not have to do with Go or the websocket package.</p>
","19709019"
"Get exit code - Go","15905","","<p>I'm using the package: os/exec <a href=""http://golang.org/pkg/os/exec/"">http://golang.org/pkg/os/exec/</a> to execute a command in the operating system but I don't seem to find the way to get the exit code. I can read the output though </p>

<p>ie.</p>

<pre><code>package main

import(
    ""os/exec""
    ""bytes""
    ""fmt""
    ""log""
    )

func main() {
    cmd := exec.Command(""somecommand"", ""parameter"")
    var out bytes.Buffer
    cmd.Stdout = &amp;out
    if err := cmd.Run() ; err != nil {
        //log.Fatal( cmd.ProcessState.Success() )
        log.Fatal( err )
    }
    fmt.Printf(""%q\n"", out.String() )
}
</code></pre>
","<p>It's easy to determine if the exit code was 0 or something else. In the first case, <code>cmd.Wait()</code> will return nil (unless there is another error while setting up the pipes).</p>

<p>Unfortunately, there is no platform independent way to get the exit code in the error case. That's also the reason why it isn't part of the API. The following snippet will work with Linux, but I haven't tested it on other platforms:</p>

<pre><code>package main

import ""os/exec""
import ""log""
import ""syscall""

func main() {
    cmd := exec.Command(""git"", ""blub"")

    if err := cmd.Start(); err != nil {
        log.Fatalf(""cmd.Start: %v"")
    }

    if err := cmd.Wait(); err != nil {
        if exiterr, ok := err.(*exec.ExitError); ok {
            // The program has exited with an exit code != 0

            // This works on both Unix and Windows. Although package
            // syscall is generally platform dependent, WaitStatus is
            // defined for both Unix and Windows and in both cases has
            // an ExitStatus() method with the same signature.
            if status, ok := exiterr.Sys().(syscall.WaitStatus); ok {
                log.Printf(""Exit Status: %d"", status.ExitStatus())
            }
        } else {
            log.Fatalf(""cmd.Wait: %v"", err)
        }
    }
}
</code></pre>

<p>Just <a href=""http://golang.org/pkg/os/exec/#Cmd.Wait"" rel=""noreferrer"">follow</a> <a href=""http://golang.org/pkg/os/exec/#ExitError"" rel=""noreferrer"">the</a> <a href=""http://golang.org/pkg/os/#ProcessState"" rel=""noreferrer"">api</a> <a href=""http://golang.org/pkg/syscall/#WaitStatus"" rel=""noreferrer"">docs</a> to find out more :)</p>
","10385867"
"In Go, how do I capture stdout of a function into a string?","15897","","<p>In Python, for example, I can do the following:</p>

<pre><code>realout = sys.stdout
sys.stdout = StringIO.StringIO()
some_function() # prints to stdout get captured in the StringIO object
result = sys.stdout.getvalue()
sys.stdout = realout
</code></pre>

<p>Can you do this in Go?</p>
","<p>I agree you should use the <code>fmt.Fprint</code> functions if you can manage it. However, if you don't control the code whose output you're capturing, you may not have that option.</p>

<p>Mostafa's answer works, but if you want to do it without a temporary file you can use <a href=""http://golang.org/pkg/os/#Pipe"" rel=""noreferrer"">os.Pipe</a>. Here's an example that's equivalent to Mostafa's with some code inspired by Go's testing package.</p>

<pre><code>package main

import (
    ""bytes""
    ""fmt""
    ""io""
    ""os""
)

func print() {
    fmt.Println(""output"")
}

func main() {
    old := os.Stdout // keep backup of the real stdout
    r, w, _ := os.Pipe()
    os.Stdout = w

    print()

    outC := make(chan string)
    // copy the output in a separate goroutine so printing can't block indefinitely
    go func() {
        var buf bytes.Buffer
        io.Copy(&amp;buf, r)
        outC &lt;- buf.String()
    }()

    // back to normal state
    w.Close()
    os.Stdout = old // restoring the real stdout
    out := &lt;-outC

    // reading our temp stdout
    fmt.Println(""previous output:"")
    fmt.Print(out)
}
</code></pre>
","10476304"
"How to return a function in scala","15872","","<p>How can I return a <strike>function</strike> <em><a href=""https://stackoverflow.com/questions/22288329/side-effecting-lexical-closure-vs-function-in-scala"">side-effecting lexical closure</a></em><sup>1</sup>  in Scala? </p>

<p>For instance, I was looking at <a href=""http://golang.org/doc/play/#598466966704134886"" rel=""nofollow noreferrer"">this code sample in Go</a>:</p>

<pre><code>...    
// fib returns a function that returns
// successive Fibonacci numbers.
func fib() func() int {
    a, b := 0, 1
    return func() int {
        a, b = b, a+b
        return b
    }
}
...
println(f(), f(), f(), f(), f())
</code></pre>

<p>prints 
    1 2 3 5 8</p>

<p>And I can't figure out how to write the same in Scala.</p>

<p><sup>1. Corrected after <a href=""https://stackoverflow.com/questions/4262241/how-to-return-a-function-in-scala/4262932#4262932"">Apocalisp</a> comment</sup></p>
","<p>Slightly shorter, you don't need the return.</p>

<pre><code>def fib() = {
    var a = 0
    var b = 1
    () =&gt; { 
        val t = a;
        a = b
        b = t + b
        b
    }
}
</code></pre>
","4262915"
"How do you time a function in Go and return its runtime in milliseconds?","15822","","<p>How do you time a function in Go and return its runtime in milliseconds?</p>
","<p>Use the Go <a href=""http://golang.org/pkg/testing/"" rel=""noreferrer""><code>testing</code></a> package to benchmark the function. For example,</p>

<pre><code>package main

import (
    ""fmt""
    ""testing""
)

// the function to be benchmarked
func Function(n int) int64 {
    n64 := int64(n)
    return n64 * n64
}

func BenchmarkFunction(b *testing.B) {
    n := 42
    for i := 0; i &lt; b.N; i++ {
        _ = Function(n)
    }
}

func main() {
    br := testing.Benchmark(BenchmarkFunction)
    fmt.Println(br)
}
</code></pre>

<p>Output:</p>

<pre><code>500000000            4.22 ns/op
</code></pre>

<p>You can also use the Go <a href=""http://golang.org/cmd/gotest/"" rel=""noreferrer"">gotest</a> command to run benchmarks.</p>
","8350913"
"How to not marshal an empty struct into JSON with Go?","15810","","<p>I have a struct like this:</p>

<pre><code>type Result struct {
    Data       MyStruct  `json:""data,omitempty""`
    Status     string    `json:""status,omitempty""`
    Reason     string    `json:""reason,omitempty""`
}
</code></pre>

<p>But even if the instance of MyStruct is entirely empty (meaning, all values are default), it's being serialized as:</p>

<pre><code>""data"":{}
</code></pre>

<p>I know that the <a href=""http://golang.org/pkg/encoding/json/#Marshal"" rel=""noreferrer"">encoding/json</a> docs specify that ""empty"" fields are:</p>

<blockquote>
  <p>false, 0, any nil pointer or interface value, and any array,
  slice, map, or string of length zero</p>
</blockquote>

<p>but with no consideration for a struct with all empty/default values. All of its fields are also tagged with <code>omitempty</code>, but this has no effect.</p>

<p>How can I get the JSON package to <em>not</em> marshal my field that is an empty struct?</p>
","<p>Oh! Easy fix: ""any nil pointer."" -- make the struct a pointer.</p>

<p>Fix:</p>

<pre><code>type Result struct {
    Data       *MyStruct `json:""data,omitempty""`
    Status     string    `json:""status,omitempty""`
    Reason     string    `json:""reason,omitempty""`
}
</code></pre>

<p>Notice the <code>*MyStruct</code> -- when I create a <code>MyStruct</code> now, I simply do so by reference:</p>

<pre><code>myStruct := &amp;MyStruct{ /* values */ }
</code></pre>

<p>And now the ""empty"" <code>MyStruct</code> is no longer marshaled into JSON as desired.</p>
","18088527"
"Go: cannot find package ""fmt"" error","15780","","<p>I'm trying to follow a simple <code>Hello, World</code> application in go:</p>

<pre><code>package main

import (
    ""fmt""
)

func main() {
    fmt.Println(""Hello World!"")
}
</code></pre>

<p>But when I build and run it, I get the following error:</p>

<pre><code>main.go:5:2: cannot find package ""fmt"" in any of:
    /home/user/go/src/pkg/fmt (from $GOROOT)
    /home/user/gocode/src/fmt (from $GOPATH)
package test_program
    imports runtime: cannot find package ""runtime"" in any of:
    /home/user/go/src/pkg/runtime (from $GOROOT)
    /home/user/gocode/src/runtime (from $GOPATH)
</code></pre>

<p>Here is the ouput of <code>go env</code>:</p>

<pre><code>GOARCH=""amd64""
GOBIN=""""
GOCHAR=""6""
GOEXE=""""
GOHOSTARCH=""amd64""
GOHOSTOS=""linux""
GOOS=""linux""
GOPATH=""/home/user/gocode""
GORACE=""""
GOROOT=""/home/user/go""
GOTOOLDIR=""/home/user/go/pkg/tool/linux_amd64""
CC=""gcc""
GOGCCFLAGS=""-g -O2 -fPIC -m64 -pthread""
CGO_ENABLED=""1""
</code></pre>
","<p><a href=""http://dave.cheney.net/2013/06/14/you-dont-need-to-set-goroot-really"" rel=""noreferrer"">Unset GOROOT</a> - the go tools know where they are supposed to be and you rarely need to set it.</p>

<p>You've set it to <code>/home/user/go</code> and unless you build go in there that is unlikely to be the right place to find the fmt package.</p>
","21510972"
"Deploying Go web applications with Apache","15687","","<p>I can not find a mod_go for deploying Go web applications. Is there any other way to run web applications in Go with an Apache web server (or even IIS)?</p>

<p><strong>Update</strong>: Now after doing Go full time for nearly a year; doing this (Go with Apache) is nullifying the very purpose of Go (Performance in terms of being highly concurrent). And I'm using nginx as a reverse proxy for http/https and having my Go backends behind it nicely. Though you have to change your mindset on webapps a bit when using Go.</p>
","<p>There's no mod_go. (At least I've not heard of such a thing.)</p>

<p>A go web app by itself is a capable web server. You can listen to port 80 in your app and then directly run it on your server. Trust me: it really works!</p>

<p>But if you are not doing that (for reasons such as having other virtual servers on the same machine, load balancing, etc.), you can use a HTTP server such as nginx or Apache as a HTTP proxy in front of your Go app. I use nginx and it's great. <a href=""http://nf.id.au/posts/2010/10/deploying-go-web-services-behind-nginx-under.html"" rel=""noreferrer"">Here's an outdated but still very useful</a> guide on how to do that with nginx. I haven't done it with Apache, but <a href=""http://httpd.apache.org/docs/2.2/mod/mod_proxy.html"" rel=""noreferrer"">this</a> should help.</p>

<p>I recommend your Go web app by itself or nginx as a HTTP proxy.</p>
","10036552"
"MINGW64 ""make build"" error: ""bash: make: command not found""","15680","","<p>I am working on Windows 10. I want to run a ""make build"" in MINGW64 but following error comes up:</p>

<pre><code>$ make build
bash: make: command not found
</code></pre>

<p>I want to build <a href=""https://github.com/Masterminds/glide"" rel=""nofollow"" title=""Glide for Golang"">Glide for Golang</a></p>

<p>I tried following:</p>

<pre><code>$ sudo yum install build-essential
bash: sudo: command not found
</code></pre>

<p>As well as:</p>

<pre><code>$ yum install build-essential
bash: yum: command not found
</code></pre>

<p>And:</p>

<pre><code>$ apt-cyg build-essential
bash: apt-cyg: command not found
</code></pre>

<p>How can I ""work-around"" this problem?</p>
","<p>You have to install mingw-get and after that you can run ""mingw-get install make"" to have the command make. Here is a link for what you want <a href=""http://www.mingw.org/wiki/getting_started"" rel=""nofollow"">http://www.mingw.org/wiki/getting_started</a></p>
","36771170"
"Golang catch signals","15670","","<p>I want to implement a ""process wrapper"" in Go. Basically what it will do, is launch a process (lets say a node server) and monitor it (catch signals like SIGKILL, SIGTERM ...)</p>

<p>I think the way to do is to launch the node server in a go routine using <code>syscall.Exec</code>: </p>

<pre><code>func launchCmd(path string, args []string) {
  err := syscall.Exec(path, args, os.Environ())
  if err != nil {
    panic(err)
  }
}
</code></pre>

<p>Then I'd like to catch every possible signals generated by the command executed by <code>syscall</code>. I'm pretty new to Go, any help would be appreciated.</p>
","<p>There are three ways of executing a program in Go:</p>

<ol>
<li><code>syscall</code> package with <a href=""http://golang.org/pkg/syscall/#Exec"" rel=""noreferrer"">syscall.Exec</a>, <a href=""http://golang.org/pkg/syscall/#ForkExec"" rel=""noreferrer"">syscall.ForkExec</a>, <a href=""http://golang.org/pkg/syscall/#StartProcess"" rel=""noreferrer"">syscall.StartProcess</a></li>
<li><code>os</code> package with <a href=""http://golang.org/pkg/os/#StartProcess"" rel=""noreferrer"">os.StartProcess</a></li>
<li><code>os/exec</code> package with <a href=""http://golang.org/pkg/os/exec/#Command"" rel=""noreferrer"">exec.Command</a></li>
</ol>

<p><a href=""http://golang.org/pkg/syscall/#StartProcess"" rel=""noreferrer"">syscall.StartProcess</a> is low level. It returns a <code>uintptr</code> as a handle.</p>

<p><code>os.StartProcess</code> gives you a nice <code>os.Process</code> struct that you can call <a href=""http://golang.org/pkg/os/#Process.Signal"" rel=""noreferrer"">Signal</a> on. <code>os/exec</code> gives you <code>io.ReaderWriter</code> to use on a pipe. Both use <code>syscall</code> internally.</p>

<p>Reading signals sent <em>from</em> a process other than your own seems a bit tricky. If it was possible, <code>syscall</code> would be able to do it. I don't see anything obvious in the higher level packages.</p>

<p>To receive a signal you can use <a href=""http://golang.org/pkg/os/signal/#Notify"" rel=""noreferrer"">signal.Notify</a> like this:</p>

<pre><code>sigc := make(chan os.Signal, 1)
signal.Notify(sigc,
    syscall.SIGHUP,
    syscall.SIGINT,
    syscall.SIGTERM,
    syscall.SIGQUIT)
go func() {
    s := &lt;-sigc
    // ... do something ...
}()
</code></pre>

<p>You just need to change the signals you're interested in listening to. If you don't specify a signal, it'll catch all the signals that can be captured.</p>

<p>You would use <a href=""http://golang.org/pkg/syscall/#Kill"" rel=""noreferrer"">syscall.Kill</a> or <a href=""http://golang.org/pkg/os/#Process.Signal"" rel=""noreferrer"">Process.Signal</a> to map the signal. You can get the pid from <code>Process.Pid</code> or as a result from <a href=""http://golang.org/pkg/syscall/#StartProcess"" rel=""noreferrer"">syscall.StartProcess</a>.</p>
","18106962"
"golang: installing packages in a local directory","15658","","<p>What is the best practice to install packages (those with <code>go get...</code>) in a local directory?</p>

<p>Example: I'd like to try out the <a href=""http://robfig.github.com/revel/"">Revel</a> web framework, but I don't want to clutter my go installation at <code>/usr/local/go</code>.</p>

<p>Normally I'd say <code>sudo go get github.com/robfig/revel</code> as written on the home page, but that would install it beneath <code>/usr/local/go/src/pkg/...</code>.</p>

<p>Is there an easy way to say (for example) <code>go get --local ...</code> and have the package in the current (sub) directory?</p>
","<p>You can export the env variable <code>GOPATH</code>. For me it is <code>~/local/lib/go</code>. This folder has the subfolders <code>bin</code>, <code>pkg</code> and <code>src</code>, so it's just like <code>/usr/local/go</code>. The <code>go</code>-tool will then automatically download , build and install packages into this directory.</p>
","12514191"
"What are the primary differences between 'gc' and 'gccgo'?","15631","","<p>What are the primary differences between the two popular Go compilers, 'gc' and 'gccgo'?  Build performance? Run-time performance? Command line options?  Licensing?</p>

<p>I'm not looking for opinions on which is best, just a basic overview of their differences, so I can decide which is best for my needs.</p>
","<p>You can see more in ""<a href=""https://golang.org/doc/install/gccgo"" rel=""noreferrer"">Setting up and using gccgo</a>"":</p>

<blockquote>
  <p>gccgo, a compiler for the Go language. The gccgo compiler is a new frontend for GCC.<br>
  Note that gccgo is not the gc compiler</p>
</blockquote>

<p>As explained in ""<a href=""http://blog.golang.org/gccgo-in-gcc-471"" rel=""noreferrer"">Gccgo in GCC 4.7.1</a>"" (July 2012)</p>

<blockquote>
  <p>The Go language has always been defined by a spec, not an implementation. The Go team has written two different compilers that implement that spec: gc and gccgo.</p>
  
  <ul>
  <li>Gc is the original compiler, and the go tool uses it by default. </li>
  <li>Gccgo is a different implementation with a different focus</li>
  </ul>
  
  <p>Compared to gc, gccgo is slower to compile code but supports more powerful optimizations, so a CPU-bound program built by gccgo will usually run faster.</p>
</blockquote>

<p>Also:</p>

<blockquote>
  <ul>
  <li>The gc compiler supports only the most popular processors: x86 (32-bit and 64-bit) and ARM. </li>
  <li>Gccgo, however, supports all the processors that GCC supports.<br>
  Not all those processors have been thoroughly tested for gccgo, but many have, including x86 (32-bit and 64-bit), SPARC, MIPS, PowerPC and even Alpha.<br>
  Gccgo has also been tested on operating systems that the gc compiler does not support, notably Solaris.</li>
  </ul>
  
  <p>if you install the go command from a standard Go release, it already supports gccgo via the <code>-compiler</code> option: <code>go build -compiler gccgo myprog</code>. </p>
</blockquote>

<hr>

<p>In short: <strong>gccgo: more optimization, more processors</strong>.  </p>

<hr>

<p>However, as <a href=""https://stackoverflow.com/questions/25811445/what-are-the-primary-differences-between-go-and-gccgo#comment40376438_25811505"">commented</a> by <a href=""https://stackoverflow.com/users/145587/oneofone"">OneOfOne</a> (<a href=""https://golang.org/doc/go1.3#gccgo"" rel=""noreferrer"">source</a>), there is often a desynchronization between go supported by gccgo, and the latest go release:</p>

<blockquote>
  <p><strong>gccgo only supports up to version go v1.2</strong>, so if you need anything new in 1.3 / 1.4 (tip) gccgo cant be used. –</p>
  
  <p><strong><a href=""https://www.gnu.org/software/gcc/gcc-4.9/"" rel=""noreferrer"">GCC release 4.9</a> will contain the Go 1.2 (not 1.3) version of gccgo</strong>.<br>
  The release schedules for the GCC and Go projects do not coincide, which means that 1.3 will be available in the development branch but that the next GCC release, 4.10, will likely have the Go 1.4 version of gccgo. </p>
</blockquote>

<hr>

<p><a href=""https://stackoverflow.com/users/2714852/twotwotwo"">twotwotwo</a> mentions <a href=""https://stackoverflow.com/questions/25811445/what-are-the-primary-differences-between-go-and-gccgo#comment40381603_25811505"">in the comments</a> the <a href=""http://talks.golang.org/2014/gocon-tokyo.slide#54"" rel=""noreferrer"">slide of Brad Fitzpatrick's presentation</a> </p>

<blockquote>
  <p>gccgo generates very good code<br>
  ... but lacks escape analysis: kills performance with many small allocs + garbage<br>
  ... GC isn't precise. Bad for 32-bit.</p>
</blockquote>

<p>twotwotwo adds:</p>

<blockquote>
  <p>Another slide mentions that non-gccgo ARM code generation is wonky.<br>
  Assuming it's an interesting option for your project, probably compare binaries for your use case on your target architecture. </p>
</blockquote>

<hr>

<p>As <a href=""https://stackoverflow.com/users/221700/peterso"">peterSO</a> <a href=""https://stackoverflow.com/questions/25811445/what-are-the-primary-differences-between-gc-and-gccgo/25811505?noredirect=1#comment54456058_25811505"">comments</a>, <a href=""https://golang.org/doc/go1.5"" rel=""noreferrer"">Go 1.5</a> now (Q3/Q4 2015) means:</p>

<blockquote>
  <p>The compiler and runtime are now written entirely in Go (with a little assembler).<br>
  <strong>C is no longer involved in the implementation, and so the C compiler that was once necessary for building the distribution is gone</strong>. </p>
</blockquote>

<p><a href=""https://talks.golang.org/2015/gogo.slide#2"" rel=""noreferrer"">The ""Go in Go"" slide</a> do mention:</p>

<blockquote>
  <p>C is gone.<br>
  Side note: gccgo is still going strong. </p>
</blockquote>
","25811505"
"How to sort a Map[string]int by its values?","15629","","<p>Given this code block</p>

<pre><code>map[string]int {""hello"":10, ""foo"":20, ""bar"":20}
</code></pre>

<p>I would like to print out</p>

<pre><code>foo, 20
bar, 20
hello, 10
</code></pre>

<p>In the order of highest to lowest</p>

<p>Thanks!</p>
","<p>Found the answer on Golang-nuts by Andrew Gerrand</p>

<p>You can implement the sort interface by writing the len/less/swap functions</p>

<pre><code>func rankByWordCount(wordFrequencies map[string]int) PairList{
  pl := make(PairList, len(wordFrequencies))
  i := 0
  for k, v := range wordFrequencies {
    pl[i] = Pair{k, v}
    i++
  }
  sort.Sort(sort.Reverse(pl))
  return pl
}

type Pair struct {
  Key string
  Value int
}

type PairList []Pair

func (p PairList) Len() int { return len(p) }
func (p PairList) Less(i, j int) bool { return p[i].Value &lt; p[j].Value }
func (p PairList) Swap(i, j int){ p[i], p[j] = p[j], p[i] }
</code></pre>

<p>For the original post, please find it here <a href=""https://groups.google.com/forum/#!topic/golang-nuts/FT7cjmcL7gw"">https://groups.google.com/forum/#!topic/golang-nuts/FT7cjmcL7gw</a></p>
","18695740"
"go install always attempts to use GOROOT and GOPATH is not listed under go env","15617","","<p>I'm having a quite frustrating problem with the <code>GOPATH</code>, which, despite being set in <code>.profile</code>, is not appearing when invoking <code>go env</code>, and does not appear to be affecting the <code>go install</code> target location.</p>

<p>I'm attempting to use <code>go install</code> to install packages, and am getting this error, which clearly shows that it is attempting to install in <code>/usr/lib/go</code>, rather than the intended directory of <code>/home/me/dev/go</code>.</p>

<pre><code>$ go install github.com/songgao/colorgo
go install github.com/songgao/go.pipeline: mkdir /usr/lib/go/pkg/linux_386/github.com: permission denied
</code></pre>

<p><code>go env</code> gives the following results.</p>

<pre><code>$ go env
GOROOT=""/usr/lib/go""
GOBIN=""""
GOARCH=""386""
GOCHAR=""8""
GOOS=""linux""
GOEXE=""""
GOHOSTARCH=""386""
GOHOSTOS=""linux""
GOTOOLDIR=""/usr/lib/go/pkg/tool/linux_386""
GOGCCFLAGS=""-g -O2 -fPIC -m32 -pthread""
CGO_ENABLED=""1""
</code></pre>

<p>But it most certainly <em>is</em> set.</p>

<pre><code>$ echo $GOPATH
/home/me/dev/go
</code></pre>

<p><strong>Update:</strong> I have exported GOPATH in <code>~/.profile</code> and sourced it, but I'm still having the same problem.</p>

<pre><code>$ export GOPATH=/home/me/dev/go
$ go env
GOROOT=""/usr/lib/go""
GOBIN=""""
GOARCH=""386""
GOCHAR=""8""
GOOS=""linux""
GOEXE=""""
GOHOSTARCH=""386""
GOHOSTOS=""linux""
GOTOOLDIR=""/usr/lib/go/pkg/tool/linux_386""
GOGCCFLAGS=""-g -O2 -fPIC -m32 -pthread""
CGO_ENABLED=""1""
</code></pre>

<p><strong>Update again:</strong> This problem has ceased since I upgraded to go1.1beta2. I'm not sure what was wrong, because <code>GOPATH</code> appeared to be set correctly, but it's all apparently working now.</p>
","<p><a href=""http://golang.org/doc/code.html"" rel=""nofollow noreferrer""><code>GOPATH</code> and workspaces</a></p>

<pre><code>$ mkdir -p $HOME/dev/go/src
$ mkdir -p $HOME/dev/go/bin
</code></pre>

<p>In <code>$HOME/.profile</code>:</p>

<pre><code>export GOPATH=$HOME/dev/go:
export PATH=$PATH:$HOME/dev/go/bin
</code></pre>

<p>Then reboot or log out and log in.</p>

<p>As soon as you have logged in, before anything else, run:</p>

<pre><code>$ env | grep -i '^GO'
GOPATH=/home/me/dev/go
$ cat $HOME/.profile
</code></pre>

<p>What output do you get?</p>
","15846956"
"WSDL/SOAP support on Go?","15589","","<p>I looked around and all I could find is the support for xml. </p>

<p>Are there any packages to support SOAP/WSDL on Go? </p>
","<p>Nope.</p>

<p>SOAP sucks, but I had to implement a server of an already-defined protocol that uses SOAP, so I listened with <code>net/http</code> and decoded/encoded envelopes with <code>encoding/xml</code>. In few minutes, I already served my first envelope with Go.</p>
","11767902"
"Is it possible to have nested templates in Go using the standard library? (Google App Engine)","15583","","<p>How do I get nested templates like Jinja has in the python runtime. TBC what I mean is how do I have a bunch of templates inherit from a base templates, just filing in blocks of the base templates, like Jinja/django-templates does. Is it possible using just <code>html/template</code> in the standard library.</p>

<p>If that is not a possibility, what are my alternatives. Mustache seems to be an option but would I then be missing out on those nice subtle features of <code>html/template</code> like the context sensitive escaping etc.? What other alternatives are ther?</p>

<p>(Environment: Google App Engin, Go runtime v1, Dev - Mac OSx lion)</p>

<p>Thanks for reading.</p>
","<p>Yes it is possible. A <code>html.Template</code> is actually a set of template files. If you execute a defined block in this set, it has access to all the other blocks defined in this set.</p>

<p>If you create a map of such template sets on your own, you have basically the same flexibility that Jinja / Django offers. The only difference is that the <a href=""http://golang.org/pkg/html/template/"" rel=""noreferrer"">html/template</a> package has no direct access to the file system, so you have to parse and compose the templates on your own.</p>

<p>Consider the following example with two different pages (""index.html"" and ""other.html"") that both inherit from ""base.html"":</p>

<pre><code>// Content of base.html:
{{define ""base""}}&lt;html&gt;
  &lt;head&gt;{{template ""head"" .}}&lt;/head&gt;
  &lt;body&gt;{{template ""body"" .}}&lt;/body&gt;
&lt;/html&gt;{{end}}

// Content of index.html:
{{define ""head""}}&lt;title&gt;index&lt;/title&gt;{{end}}
{{define ""body""}}index{{end}}

// Content of other.html:
{{define ""head""}}&lt;title&gt;other&lt;/title&gt;{{end}}
{{define ""body""}}other{{end}}
</code></pre>

<p>And the following map of template sets:</p>

<pre><code>tmpl := make(map[string]*template.Template)
tmpl[""index.html""] = template.Must(template.ParseFiles(""index.html"", ""base.html""))
tmpl[""other.html""] = template.Must(template.ParseFiles(""other.html"", ""base.html""))
</code></pre>

<p>You can now render your ""index.html"" page by calling </p>

<pre><code>tmpl[""index.html""].Execute(""base"", data)
</code></pre>

<p>and you can render your ""other.html"" page by calling</p>

<pre><code>tmpl[""other.html""].Execute(""base"", data)
</code></pre>

<p>With some tricks (e.g. a consistent naming convention of your template files), it's even possible to generate the <code>tmpl</code> map automatically.</p>
","11468132"
"How to read a binary file in Go","15564","","<p>I'm completely new to Go and I'm trying to read a binary file, either byte by byte or several bytes at a time. The documentation doesn't help much and I cannot find any tutorial or simple example (by the way, how could Google give their language such an un-googlable name?). Basically, how can I open a file, then read some bytes into a buffer? Any suggestion?</p>
","<p>For manipulating files, the <code>os</code> package is your friend:</p>

<pre><code>f, err := os.Open(""myfile"")
if err != nil {
   panic(err)
}
defer f.Close()
</code></pre>

<p>For more control over how the file is open, see <code>os.OpenFile()</code> instead <a href=""http://golang.org/pkg/os/#OpenFile"" rel=""noreferrer"">(doc)</a>.</p>

<p>For reading files, there are many ways. The <code>os.File</code> type returned by <code>os.Open</code> (the <code>f</code> in the above example) implements the <code>io.Reader</code> interface (it has a <code>Read()</code> method with the right signature), it can be used directly to read some data in a buffer (a <code>[]byte</code>) or it can also be wrapped in a buffered reader (type <code>bufio.Reader</code>).</p>

<p>Specifically for binary data, the <code>encoding/binary</code> package can be useful, to read a sequence of bytes into some typed structure of data. You can see an example in the <a href=""http://golang.org/pkg/encoding/binary/#Read"" rel=""noreferrer"">Go doc here</a>. The <code>binary.Read()</code> function can be used with the file read using the <code>os.Open()</code> function, since as I mentioned, it is a <code>io.Reader</code>.</p>

<p>And there's also the simple to use <code>io/ioutil</code> package, that allows you to read the whole file at once in a byte slice (<code>ioutil.ReadFile()</code>, which takes a file name, so you don't even have to open/close the file yourself), or <code>ioutil.ReadAll()</code> which takes a <code>io.Reader</code> and returns a slice of bytes containing the whole file. Here's the <a href=""http://golang.org/pkg/io/ioutil/#ReadAll"" rel=""noreferrer"">doc on ioutil</a>.</p>

<p>Finally, as others mentioned, you can google about the Go language using ""golang"" and you should find all you need. The <a href=""https://groups.google.com/forum/#!forum/golang-nuts"" rel=""noreferrer"">golang-nuts mailing list</a> is also a great place to look for answers (make sure to search first before posting, a lot of stuff has already been answered). To look for third-party packages, check the <a href=""http://godoc.org/"" rel=""noreferrer"">godoc.org</a> website.</p>

<p>HTH</p>
","14514619"
"How to compile a program in Go Language?","15563","","<p>I'm walking the first steps with Go language and I'm trying to install it in Debian Squeeze. 
I follow the step of downloading the source code and then, I did this on my terminal:</p>

<pre><code>cd $GOROOT/src
./all.bash
</code></pre>

<p>At the end, it says this:</p>

<pre><code># Checking API compatibility.
Go version is ""go1.1.1"", ignoring -next /root/go/api/next.txt
~pkg net, func ListenUnixgram(string, *UnixAddr) (*UDPConn, error)
~pkg syscall (darwin-386), func Fchflags(string, int) error
~pkg syscall (darwin-386-cgo), func Fchflags(string, int) error
~pkg syscall (darwin-amd64), func Fchflags(string, int) error
~pkg syscall (darwin-amd64-cgo), func Fchflags(string, int) error
~pkg syscall (freebsd-386), func Fchflags(string, int) error
~pkg syscall (freebsd-amd64), func Fchflags(string, int) error
~pkg text/template/parse, type DotNode bool
~pkg text/template/parse, type Node interface { Copy, String, Type }

    ALL TESTS PASSED

---
Installed Go for linux/amd64 in /root/go
Installed commands in /root/go/bin
</code></pre>

<p>So, the book says that I need to do some tests and compile it with 6g. But I try it this way:</p>

<p>Compile this first Go-program with:       6g test.go
This compiles to a file:                           test.6
which is linked with the command:           6l test.6
This produces the executable named:          6.out
which executes with the command:             ./6.out
and produces the output:                           Hello, world</p>

<p>But nothing works, my code is:</p>

<pre><code>package main
func main() {
         println(“Hello”, “world”)
}
</code></pre>

<p>So, I do not know what more to do... I do know now the name of my compiler, so I have no idea how to compile this in Debian... If you please, give a hand with this... I would be really thankfully to you! </p>
","<p>It looks like you are following instructions from:</p>

<blockquote>
  <p>The Way to Go: A Thorough Introduction to the Go Programming Language
  By Ivo Balbaert.
  Section 2.3 Installing Go on a Linux system</p>
</blockquote>

<p>These instructions are out of date. They use an obsolete release of Go, release 0.60. You have installed Go release 1.1.1.</p>

<p>For up-to-date instructions see <a href=""http://golang.org/doc/install/source"" rel=""noreferrer"">Installing Go from source</a></p>

<p>Also, when you copy programs from the book, the book uses “ (left double quotation mark) and ” (right double quotation mark) in the code examples. Go expects "" (quotation mark).</p>

<p>Write the <code>test.go</code> Go program as:</p>

<pre><code>package main

func main() {
    println(""Hello"", ""world"")
}
</code></pre>

<p>When you installed Go, it told you it ""<code>Installed commands in /root/go/bin</code>."" You need to have <code>/root/go/bin</code> in your $PATH so that it can find (recognize) the Go commands.</p>

<p>From the directory which contains the <code>test.go</code> file, run</p>

<pre><code>$ export PATH=$PATH:/root/go/bin
$ go version
go version go1.1.1 linux/amd64
$ go run test.go
Hello world
</code></pre>

<p>If this fails, what output do you get?</p>
","17335989"
"What are conventions for filenames in Go?","15558","","<p>I could find the conventions for naming packages in Go: no underscore between words, everything lowercase.</p>

<p>Does this convention apply to the filenames too?</p>

<p>Do you also put one struct in one file as if you did for a java class and then name the file after the struct?</p>

<p>Currently, if I have a struct WebServer, I put it in a file web_server.go.</p>
","<p>There's a few guidelines to follow.</p>

<ol>
<li>File names that begin with ""."" or ""_"" are ignored by the go tool</li>
<li>Files with the suffix <code>_test.go</code> are only compiled and run by the <code>go test</code> tool.</li>
<li>Files with os and architecture specific suffixes automatically follow those same constraints, e.g. <code>name_linux.go</code> will only build on linux, <code>name_amd64.go</code> will only build on amd64. This is the same as having a <code>//+build amd64</code> line at the top of the file </li>
</ol>

<p>See the docs for the <code>go build</code> tool for more details: <a href=""https://golang.org/pkg/go/build/"">https://golang.org/pkg/go/build/</a></p>
","25162021"
"How should I use vendor in Go 1.6?","15508","","<p>First I have read this answer: <a href=""https://stackoverflow.com/questions/35999046/vendoring-in-go-1-6"">Vendoring in Go 1.6</a>, then I use it as my example.</p>

<p>My gopath is <code>GOPATH=""/Users/thinkerou/xyz/""</code>, and the follow like:</p>

<pre><code>thinkerou@MacBook-Pro-thinkerou:~/xyz/src/ou$ pwd
/Users/baidu/xyz/src/ou
thinkerou@MacBook-Pro-thinkerou:~/xyz/src/ou$ ls
main.go vendor
</code></pre>

<p>Now, I use <code>go get</code>, then becomes this:</p>

<pre><code>thinkerou@MacBook-Pro-thinkerou:~/xyz/src/ou$ ls
main.go vendor
thinkerou@MacBook-Pro-thinkerou:~/xyz/src/ou$ cd vendor/
thinkerou@MacBook-Pro-thinkerou:~/xyz/src/ou/vendor$ ls
vendor.json
thinkerou@MacBook-Pro-thinkerou:~/xyz/src/ou/vendor$ cd ../..
thinkerou@MacBook-Pro-thinkerou:~/xyz/src$ ls
github.com ou
thinkerou@MacBook-Pro-thinkerou:~/xyz/src$ cd github.com/
thinkerou@MacBook-Pro-thinkerou:~/xyz/src/github.com$ ls
zenazn
</code></pre>

<p><code>vendor.json</code> is this:</p>

<pre><code>{
    ""comment"": """",
    ""package"": [
        {
            ""path"": ""github.com/zenazn/goji""
        }
    ]
}
</code></pre>

<p>then, I should use what commands? why have no use <code>vendor</code>? My go version is 1.6.2.</p>
","<p>With Go1.6, vendoring is built in as you read.  What does this mean?  Only one thing to keep in mind:</p>

<blockquote>
  <p>When using the <code>go</code> tools such as <code>go build</code> or <code>go run</code>, they first check to see if the dependencies are located in <code>./vendor/</code>.  If so, use it.  If not, revert to the <code>$GOPATH/src/</code> directory.</p>
</blockquote>

<p>The actual ""lookup paths"" in Go 1.6 are, in order:</p>

<pre><code>./vendor/github.com/zenazn/goji
$GOPATH/src/github.com/zenazn/goji
$GOROOT/src/github.com/zenazn/goji
</code></pre>

<p>With that said, <code>go get</code> will continue to install into you <code>$GOPATH/src</code>; and, <code>go install</code> will install into <code>$GOPATH/bin</code> for binaries or <code>$GOPATH/pkg</code> for package caching.</p>

<h1>So, how do I use ./vendor?!?!</h1>

<p>Hehe, armed with the knowledge above, it's pretty simple:</p>

<pre><code>mkdir -p $GOPATH/src/ou/vendor/github.com/zenazn/goji
cp -r $GOPATH/src/github.com/zenazn/goji/ $GOPATH/src/ou/vendor/github.com/zenazn/goji
</code></pre>

<p>In short, to use vendoring, you copy the files using the same <code>github.com/zenazn/goji</code> full path, into your vendor director.</p>

<p>Now, the go build/install/run tooling will see and use your vendor folder.</p>

<h1>An easier way instead of copying everything manually</h1>

<p>Instead of finding and copying all 25+ vendor items, managing their versions, updating other projects etc...  It would be better to use a <em>dependency management tool</em>.  There are many out there and a little googling will point to you several.</p>

<p>Let me mention two that works with the vendor folder and doesn't fight you:</p>

<ul>
<li>godep</li>
<li>govendor</li>
</ul>

<p>In short, these tools will inspect your <code>ou</code> code, find the remote dependencies, and copy them <em>from</em> your <code>$GOPATH/src</code> <em>to</em> your <code>$GOPATH/src/ou/vendor</code> directory (actually, whatever current directory you are in when you run them).</p>

<p>For example, say you have all of your dependencies installed and working normally in your <code>$GOPATH/src/ou/</code> project using the normal GOPATH/src/github installation of your dependencies.  Your project runs and your tests validate everything is working with the exact version of the repos you have.  With Godep as an example, you'd run this from your project root folder <code>$GOPATH/src/ou/</code>:</p>

<pre><code>godep save ./...
</code></pre>

<p>This would copy all dependencies your project uses into your ./vendor folder.</p>

<p>Godep is by far and large the most popular.  They have their own Slack channel on the Gopher Slack group.  And, it's the one I use on my teams.</p>

<p>Govendor is another alternative I read has a nice sync feature.  I haven't used it though.</p>

<h1>Over Usage of Dependency Management Tool</h1>

<p>This is purely opinion, and I'm sure haters will downvote...  But as I need to finish my blog post on the subject, let me mention here that most people worry too much about depdency management in Go.  </p>

<p>Yes, there is a need to lock in a repo to a version you depend on so you can ensure your system builds in production.  Yes there is a need to ensure no breaking changes to a way a dependency is interrupting something.  </p>

<p>Use dependency management for those, absolutely.</p>

<p>But, there is overuse of simple projects that lock in huge amounts of dependencies when in reality...</p>

<blockquote>
  <p>You may only need to lock in only 1 dependencies; otherwise, you want the latest version of MySQL drivers and test assertion frameworks for bug fixes.</p>
</blockquote>

<p>This is where using the <code>./vendor/</code> folder apart from dependency managrment tools can really shine: you'd only need to copy that repo that need you lock in.</p>

<p>You selectively pick the one misbehaving repo and put it into your ./vendor/ folder.  By doing this, you are telling your consumers:</p>

<blockquote>
  <p>Hey, this one repo needs to be held back at this revision.  All others are fine and use the latest of those and update often with <code>go get -u ./...</code>; but, this one failed with newer versions so don't upgrade this one repo.</p>
</blockquote>

<p>But if blanketly saving all your dependencies with a dependency management tool, you are basically telling your consumers:</p>

<blockquote>
  <p>There may or may not be a problem with one or more repos out of the 20 in the vendor folder.  You may or may not be able to update them.  You may or may not be able to get the latest MySQL driver.  We simply don't know which may or may not be causing problems and just locked in something that worked at the time that I ran <code>godep save</code>.  So yeah, upgrade at your own risk.</p>
</blockquote>

<p>Personally, I have ran into this several times.  A dependency was updated with a breaking change, and we have dozens of repos dependent on it.  Vendoring just that one repo in /vendor allows us to use that one version of dependency, while <code>go get ./...</code> continues to run normally for all other repos to get the latest.  We run with the latest bug fixes in PSQL and MySQL and others (there are constant fixes for these!) and so on.</p>
","37238226"
"shuffle array in Go","15421","","<p>I tried to translate the following Python code to Go </p>

<pre><code>import random

list = [i for i in range(1, 25)]
random.shuffle(list)
print(list)
</code></pre>

<p>but found my Go version lengthy and awkward because there is no shuffle function and I had to implement interfaces and convert types.</p>

<p>What would be an idiomatic Go version of my code?</p>
","<p>As your list is just the integers from 1 to 25, you can use <a href=""http://golang.org/pkg/math/rand/#Rand.Perm"">Perm</a> :</p>

<pre><code>list := rand.Perm(25)
for i, _ := range list {
    list[i]++
}
</code></pre>

<p>Note that using a permutation given by <code>rand.Perm</code> is an effective way to shuffle any array.</p>

<pre><code>dest := make([]int, len(src))
perm := rand.Perm(len(src))
for i, v := range perm {
    dest[v] = src[i]
}
</code></pre>
","12264918"
"Go language how detect file changing?","15410","","<p>I need to know how to detect when a file changes using Go. I know that Unix provides a function named <code>fcntl()</code> which notifies when a specific file is changed but I have not found this one in Go.
Please help me.</p>
","<p>There is currently an experimental package <a href=""https://github.com/fsnotify/fsnotify"" rel=""nofollow"">here</a>. It should be merged into core as <code>os/fsnotify</code> in go1.3</p>
","22672784"
"Encode/Decode base64","15372","","<p>here is my code and i don't understand why the decode function doesn't work.</p>

<p>Little insight would be great please.</p>

<pre><code>func EncodeB64(message string) (retour string) {
    base64Text := make([]byte, base64.StdEncoding.EncodedLen(len(message)))
    base64.StdEncoding.Encode(base64Text, []byte(message))
    return string(base64Text)
}

func DecodeB64(message string) (retour string) {
    base64Text := make([]byte, base64.StdEncoding.DecodedLen(len(message)))
    base64.StdEncoding.Decode(base64Text, []byte(message))
    fmt.Printf(""base64: %s\n"", base64Text)
    return string(base64Text)
}
</code></pre>

<p>It gaves me :
[Decode error - output not utf-8][Decode error - output not utf-8]</p>
","<p><code>DecodedLen</code> returns the <strong>maximal</strong> length. </p>

<p>This length is useful for sizing your buffer but part of the buffer won't be written and thus won't be valid UTF-8.</p>

<p>You have to use only the real written length returned by the <code>Decode</code> function.</p>

<pre><code>l, _ := base64.StdEncoding.Decode(base64Text, []byte(message))
log.Printf(""base64: %s\n"", base64Text[:l])
</code></pre>
","15334435"
"What is the shortest way to simply sort an array of structs by (arbitrary) field names?","15339","","<p>I just had a problem where I had an array of structs, e.g.</p>

<pre><code>package main

import ""log""

type Planet struct {
    Name       string  `json:""name""`
    Aphelion   float64 `json:""aphelion""`   // in million km
    Perihelion float64 `json:""perihelion""` // in million km
    Axis       int64   `json:""Axis""`       // in km
    Radius     float64 `json:""radius""`
}

func main() {
    var mars = new(Planet)
    mars.Name = ""Mars""
    mars.Aphelion = 249.2
    mars.Perihelion = 206.7
    mars.Axis = 227939100
    mars.Radius = 3389.5

    var earth = new(Planet)
    earth.Name = ""Earth""
    earth.Aphelion = 151.930
    earth.Perihelion = 147.095
    earth.Axis = 149598261
    earth.Radius = 6371.0

    var venus = new(Planet)
    venus.Name = ""Venus""
    venus.Aphelion = 108.939
    venus.Perihelion = 107.477
    venus.Axis = 108208000
    venus.Radius = 6051.8

    planets := [...]Planet{*mars, *venus, *earth}
    log.Println(planets)
}
</code></pre>

<p>Lets say you want to sort it by <code>Axis</code>. How do you do that?</p>

<p>(Note: I have seen <a href=""http://golang.org/pkg/sort/"" rel=""noreferrer"">http://golang.org/pkg/sort/</a> and it seems to work, but I have to add about 20 lines just for simple sorting by a very simple key. I have a python background where it is as simple as <code>sorted(planets, key=lambda n: n.Axis)</code> - is there something similar simple in Go?)</p>
","<p>If you want something a bit less verbose than the standard library <code>sort</code> package, you could use the third party <a href=""http://godoc.org/github.com/bradfitz/slice""><code>github.com/bradfitz/slice</code></a> package.  It uses some tricks to generate the <code>Len</code> and <code>Swap</code> methods needed to sort your slice, so you only need to provide a <code>Less</code> method.</p>

<p>With this package, you can perform the sort with:</p>

<pre><code>slice.Sort(planets[:], func(i, j int) bool {
    return planets[i].Axis &lt; planets[j].Axis
})
</code></pre>

<p>The <code>planets[:]</code> part is necessary to produce a slice covering your array.  If you make <code>planets</code> a slice instead of an array you could skip that part.</p>
","29000001"
"How do I check for an empty slice?","15319","","<p>I am calling a function that returns an empty array if there are no values.</p>

<p>When I do this it doesn't work:</p>

<pre><code>if r == [] {
    fmt.Println(""No return value"")            
}
</code></pre>

<p>The work around I'm using is:</p>

<pre><code>var a [0]int
if r == a {
    fmt.Println(""No return value"")            
}
</code></pre>

<p>But declaring a variable just to check the return value doesn't seem right. What's the better way to do this?</p>
","<p><a href=""https://golang.org/pkg/builtin/#len"" rel=""noreferrer""><code>len()</code></a> returns the number of elements in a slice or array.</p>

<p>Assuming <code>whatever()</code> is the function you invoke, you can do something like:</p>

<pre><code>r := whatever()
if len(r) &gt; 0 {
  // do what you want
}
</code></pre>

<p>or if you don't need the items</p>

<pre><code>if len(whatever()) &gt; 0 {
  // do what you want
}
</code></pre>
","38144180"
"How to get URL in http.Request","15318","","<p>I built an HTTP server. I am using the code below to get the request URL, but it does not get full URL.   </p>

<pre><code>func Handler(w http.ResponseWriter, r *http.Request) {  
    fmt.Printf(""Req: %s %s"", r.URL.Host, r.URL.Path)
}
</code></pre>

<p>I only get <code>""Req:  / ""</code> and <code>""Req: /favicon.ico""</code>.</p>

<p>I want to get full client request URL as <code>""1.2.3.4/""</code> or <code>""1.2.3.4/favicon.ico""</code>.</p>

<p>Thanks.</p>
","<p>From the documentation of net/http package:</p>

<pre><code>type Request struct {
   ...
   // The host on which the URL is sought.
   // Per RFC 2616, this is either the value of the Host: header
   // or the host name given in the URL itself.
   // It may be of the form ""host:port"".
   Host string
   ...
}
</code></pre>

<p>Modified version of your code:</p>

<pre><code>func Handler(w http.ResponseWriter, r *http.Request) {
    fmt.Printf(""Req: %s %s\n"", r.Host, r.URL.Path) 
}
</code></pre>

<p>Example output:</p>

<pre><code>Req: localhost:8888 /
</code></pre>
","23152483"
"Writing a Python extension in Go (Golang)","15275","","<p>I currently use Cython to link C and Python, and get speedup in slow bits of python code. However, I'd like to use goroutines to implement a really slow (and very parallelizable) bit of code, but it must be callable from python. (I've already seen <a href=""https://stackoverflow.com/questions/1743526/differences-between-go-and-cython"">this question</a>)</p>

<p>I'm (sort of) happy to go via C (or Cython) to set up data structures etc if necessary, but avoiding this extra layer would be good from a bug fix/avoidance point of view.</p>

<p>What is the simplest way to do this without having to reinvent any wheels?</p>
","<p><strong>Update 2015</strong>: possible as of Go 1.5 <a href=""https://blog.filippo.io/building-python-modules-with-go-1-5/"" rel=""noreferrer"">https://blog.filippo.io/building-python-modules-with-go-1-5/</a></p>

<blockquote>
  <p>with Go 1.5 you can build .so objects and import them as Python modules, running Go code (instead of C) directly from Python.</p>
</blockquote>
","32813045"
"How do I debug a program written in the Go language?","15245","","<p>How do I debug a Go program? I have been using the <a href=""http://gohelp.wordpress.com/"" rel=""noreferrer"">Gedit Go IDE</a>,  but it doesn't have debugging.  Is there a way to step though my code and inspect memory?  Or am I stuck with print statements?  Can I use <a href=""http://msdn.microsoft.com/en-us/library/aa363362(VS.85).aspx"" rel=""noreferrer"">OutputDebugString</a>?</p>
","<p><strong>Update</strong>: There is now an official page in the docs on <a href=""http://golang.org/doc/gdb"" rel=""noreferrer"">Debugging Go Code with GDB</a>. Much has changed since this answer was written, and several of the limitations listed below have been removed. I'm leaving the rest of this answer for posterity, but if you want to debug Go code, follow the link above.</p>

<p>The Go linkers <a href=""http://blog.golang.org/2010/11/debugging-go-code-status-report.html"" rel=""noreferrer"">now emit</a> DWARF debugging symbols that can be interpreted by gdb version 7.x.</p>

<p>Highlight from the blog post linked above:</p>

<p>You can...</p>

<ul>
<li>load a Go program in GDB version 7.x</li>
<li>list all Go, C, and assembly source files by line (parts of the Go runtime are written in C and assembly),</li>
<li>set breakpoints by line and step through the code,</li>
<li>print stack traces and inspect stack frames, and</li>
<li>find the addresses and print the contents of most variables.</li>
</ul>

<p>There are still some inconveniences:</p>

<ul>
<li>The emitted DWARF code is unreadable by the GDB version 6.x that ships with Mac OS X. We would gladly accept patches to make the DWARF output compatible with the standard OS X GDB, but until that’s fixed you’ll need to download, build, and install GDB 7.x to use it under OS X. The source can be found at <a href=""http://sourceware.org/gdb/download/"" rel=""noreferrer"">http://sourceware.org/gdb/download/</a>. Due to the particulars of OS X you’ll need to install the binary on a local file system with chgrp procmod and chmod g+s.</li>
<li>Names are qualified with a package name and, as GDB doesn't understand Go packages, you must reference each item by its full name. For example, the variable named v in package main must be referred to as 'main.v', in single quotes. A consequence of this is that tab completion of variable and function names does not work.</li>
<li>Lexical scoping information is somewhat obfuscated. If there are multiple variables of the same name, the nth instance will have a suffix of the form ‘#n’. We plan to fix this, but it will require some changes to the data exchanged between the compiler and linker.</li>
<li>Slice and string variables are represented as their underlying structure in the runtime library. They will look something like {data = 0x2aaaaab3e320, len = 1, cap = 1}. For slices, you must dereference the data pointer to inspect the elements.</li>
</ul>

<p>Some things don't work:</p>

<ul>
<li>Channel, function, interface, and map variables cannot be inspected.</li>
<li>Only Go variables are annotated with type information; the runtime's C variables are not.</li>
<li>Windows and ARM binaries do not contain DWARF debugging information and, as such, cannot be inspected with GDB.</li>
</ul>
","5514122"
"How to solve ""too many arguments to return"" issue in Golang?","15170","","<p>In a print function I am writing, I am trying to return a value based on the result of a switch statement; however, I am getting the error too many arguments to return.</p>

<p>Forgive me if this question has a simple answer, but shouldn't it not matter how many arguments a function has and it can return just one thing? Or does it need to return one thing for each argument.</p>

<p>Here is my code. I am getting an error on the return line ( Too many arguments to return ). How can I fix it so that it returns the string set in the switch statement?</p>

<pre><code>package bay

func Print(DATA []TD, include string, exclude []string, str string) {
    result := NBC(DATA, include, exclude, str)
    var sentAnal string
    switch result {
    case 1:
        sentAnal = ""Strongly Negative""
    case 2:
        sentAnal = ""Very Negative""
    case 3:
        sentAnal = ""Negative""
    case 4:
        sentAnal = ""Little Negative""
    case 5:
        sentAnal = ""Neurtral""
    case 6:
        sentAnal = ""Little Positive""
    case 7:
        sentAnal = ""Positive""
    case 8:
        sentAnal = ""More Positive""
    case 9:
        sentAnal = ""Very Positive""
    case 10:
        sentAnal = ""Strongly Positive""
    default:
        sentAnal = ""Unknown""
    }
    return sentAnal
}
</code></pre>
","<p>You need to specify what you will return after specifying the input parameters, this is not python.</p>

<p>This:</p>

<pre><code>func Print(DATA []TD, include string, exclude []string, str string) {
</code></pre>

<p>Should be:</p>

<pre><code>func Print(DATA []TD, include string, exclude []string, str string) string {
</code></pre>

<p>Recommended reads:</p>

<ul>
<li><p><a href=""http://golang.org/doc/effective_go.html#multiple-returns"">http://golang.org/doc/effective_go.html#multiple-returns</a></p></li>
<li><p><a href=""http://golang.org/doc/effective_go.html#named-results"">http://golang.org/doc/effective_go.html#named-results</a></p></li>
</ul>

<p>Or even all of <a href=""http://golang.org/doc/effective_go.html"">effective go</a></p>
","25455284"
"Gorm Golang orm associations","15138","","<p>I'm using Go with the <a href=""https://github.com/jinzhu/gorm"">GORM ORM</a>.
I have the following structs. The relation is simple. One Town has multiple Places and one Place belongs to one Town.</p>

<pre><code>type Place struct {
  ID          int
  Name        string
  Town        Town
}

type Town struct {
  ID   int
  Name string
}
</code></pre>

<p>Now i want to query all places and get along with all their fields the info of the corresponding town.
This is my code:</p>

<pre><code>db, _ := gorm.Open(""sqlite3"", ""./data.db"")
defer db.Close()

places := []Place{}
db.Find(&amp;places)
fmt.Println(places)
</code></pre>

<p>My sample database has this data:</p>

<pre><code>/* places table */
id  name    town_id
 1  Place1        1
 2  Place2        1

/* towns Table */
id name
 1 Town1
 2 Town2
</code></pre>

<p>i'm <strong>receiving</strong> this: </p>

<p><code>[{1 Place1 {0 }} {2 Mares Place2 {0 }}]</code></p>

<p>But i'm <strong>expecting</strong> to receive something like this (both places belongs to the same town): </p>

<p><code>[{1 Place1 {1 Town1}} {2 Mares Place2 {1 Town1}}]</code></p>

<p>How can i do such query ? I tried using <code>Preloads</code> and <code>Related</code> without success (probably the wrong way). I can't get working the expected result.</p>
","<p><code>TownID</code> must be specified as the foreign key. The <code>Place</code> struct gets like this: </p>

<pre><code>type Place struct {
  ID          int
  Name        string
  Description string
  TownID      int
  Town        Town
}
</code></pre>

<p>Now there are different approach to handle this. For example:</p>

<pre><code>places := []Place{}
db.Find(&amp;places)
for i, _ := range places {
    db.Model(places[i]).Related(&amp;places[i].Town)
}
</code></pre>

<p>This will certainly produce the expected result, but notice the log output and the queries triggered.</p>

<pre><code>[4.76ms]  SELECT  * FROM ""places""
[1.00ms]  SELECT  * FROM ""towns""  WHERE (""id"" = '1')
[0.73ms]  SELECT  * FROM ""towns""  WHERE (""id"" = '1')

[{1 Place1  {1 Town1} 1} {2 Place2  {1 Town1} 1}]
</code></pre>

<p>The output is the expected but this approach has a fundamental flaw, notice that for every place there is the need to do another db query which produce a <code>n + 1</code> problem issue. This could solve the problem but will quickly gets out of control as the amount of places grow. </p>

<p>It turns out that the <strong>good</strong> approach is fairly simple using preloads.</p>

<pre><code>db.Preload(""Town"").Find(&amp;places)
</code></pre>

<p>That's it, the query log produced is:</p>

<pre><code>[22.24ms]  SELECT  * FROM ""places""
[0.92ms]  SELECT  * FROM ""towns""  WHERE (""id"" in ('1'))

[{1 Place1  {1 Town1} 1} {2 Place2  {1 Town1} 1}]
</code></pre>

<p>This approach will only trigger two queries, one for all places, and one for all towns that has places. This approach scales well regarding of the amount of places and towns (only two queries in all cases).</p>
","29579994"
"Compare two slices","15131","","<p>Is there a way in Go to compare two slices and get the elements in slice X that are not in slice Y and vice versa?</p>

<pre><code>    X := []int{10, 12, 12, 12, 13}
    Y := []int{12, 14, 15}

func compare(X, Y []int)  

calling compare(X, Y)   
    result1 := []int{10, 12, 12, 13} // if you're looking for elements in slice X that are not in slice Y

calling compare(Y, X)
    result2 := []int{14, 15} // if you're looking for elements in slice Y that are not in slice X
</code></pre>
","<p>Something like this should work:</p>

<pre><code>package main

import ""fmt""

func main() {
    X := []int{10, 12, 12, 12, 13}
    Y := []int{12, 14, 15}

    fmt.Println(compare(X, Y))
    fmt.Println(compare(Y, X))
}

func compare(X, Y []int) []int {
    m := make(map[int]int)

    for _, y := range Y {
        m[y]++
    }

    var ret []int
    for _, x := range X {
        if m[x] &gt; 0 {
            m[x]--
            continue
        }
        ret = append(ret, x)
    }

    return ret
}
</code></pre>

<p><a href=""http://play.golang.org/p/4DujR2staI"" rel=""nofollow"">http://play.golang.org/p/4DujR2staI</a></p>
","23874751"
"How to get capturing group functionality in Golang regular expressions?","15120","","<p>I'm porting a library from Ruby to Go, and have just discovered that regular expressions in Ruby are not compatible with Go (google RE2). It's come to my attention that Ruby &amp; Java (plus other languages use PCRE regular expressions (perl compatible, which supports capturing groups)), so I need to re-write my expressions so that they compile ok in Go.</p>

<p>For example, I have the following regex:</p>

<pre><code>`(?&lt;Year&gt;\d{4})-(?&lt;Month&gt;\d{2})-(?&lt;Day&gt;\d{2})`
</code></pre>

<p>This should accept input such as:</p>

<pre><code>2001-01-20
</code></pre>

<p>The capturing groups allow the year, month and day to be captured into variables. To get the value of each group, it's very easy; you just index into the returned matched data with the group name and you get the value back. So, for example to get the year, something like this pseudo code:</p>

<pre><code>m=expression.Match(""2001-01-20"")
year = m[""Year""]
</code></pre>

<p>This is a pattern I use a lot in my expressions, so I have a lot of re-writing to do.</p>

<p>So, is there a way to get this kind of functionality in Go regexp; how should I re-write these expressions?</p>
","<blockquote>
  <p>how should I re-write these expressions?</p>
</blockquote>

<p>Add some Ps, as defined <a href=""http://golang.org/pkg/regexp/syntax/"">here</a>:</p>

<pre><code>(?P&lt;Year&gt;\d{4})-(?P&lt;Month&gt;\d{2})-(?P&lt;Day&gt;\d{2})
</code></pre>

<p>And use <a href=""http://play.golang.org/p/UhKvADlPfD"">as follows</a>:</p>

<pre><code>package main

import (
    ""fmt""
    ""regexp""
)

func main() {
    r := regexp.MustCompile(`(?P&lt;Year&gt;\d{4})-(?P&lt;Month&gt;\d{2})-(?P&lt;Day&gt;\d{2})`)
    fmt.Printf(""%#v\n"", r.FindStringSubmatch(`2015-05-27`))
}
</code></pre>
","30483899"
"Emacs mode for Go?","15113","","<p>Is there a suitable Emacs mode for Go? C mode doesn't work without semicolons. The best I have found is the <a href=""http://www.brgeight.se/downloads/emacs/javascript.el"" rel=""noreferrer"">JavaScript mode by Karl Landstrom</a>, since JavaScript also doesn't require semicolons.</p>
","<p>Try <code>misc/emacs/go-mode.el</code> (<a href=""https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins"" rel=""nofollow noreferrer"">web link</a>) in the Go distribution.</p>

<p>If you are using <a href=""http://sachachua.com/blog/2011/01/emacs-24-package-manager/"" rel=""nofollow noreferrer"">Emacs 24 and marmalade repo</a>, use <code>M-x package-install &lt;RET&gt; go-mode</code> to install it directly.</p>
","1715502"
"Singleton in go","15077","","<p>How does one implement the Singleton design pattern in the go programming language?</p>
","<p>Setting aside the argument of whether or not implementing the singleton pattern is a good idea, here's a possible implementation:</p>

<pre><code>package singleton

type single struct {
        O interface{};
}

var instantiated *single = nil

func New() *single {
        if instantiated == nil {
                instantiated = new(single);
        }
        return instantiated;
}
</code></pre>

<p><code>single</code> and <code>instantiated</code> are private, but <code>New()</code> is public. Thus, you can't directly instantiate <code>single</code> without going through <code>New()</code>, and it tracks the number of instantiations with the private boolean <code>instantiated</code>. Adjust the definition of <code>single</code> to taste.</p>

<p>However, as several others have <a href=""http://marcio.io/2015/07/singleton-pattern-in-go/"" rel=""noreferrer"">noted</a>, this is not thread-safe, unless you're only initializing your singleton in <code>init()</code>. A better approach would be to leverage <code>sync.Once</code> to do the hard work for you:</p>

<pre><code>package singleton

import ""sync""

type single struct {
        O interface{};
}

var instantiated *single
var once sync.Once

func New() *single {
        once.Do(func() {
                instantiated = &amp;single{}
        })
        return instantiated
}
</code></pre>

<p>See also, hasan j's suggestion of just thinking of a package <em>as</em> a singleton. And finally, do consider what others are suggesting: that singletons are often an indicator of a problematic implementation.</p>
","1836064"
"Reading specific number of bytes from a buffered reader in golang","15070","","<p>I am aware of the specific function in golang from the <strong>bufio</strong> package.</p>

<pre><code>func (b *Reader) Peek(n int) ([]byte, error)
</code></pre>

<blockquote>
  <p>Peek returns the next n bytes <strong>without advancing the reader</strong>. The bytes
  stop being valid at the next read call. If Peek returns fewer than n
  bytes, it also returns an error explaining why the read is short. The
  error is ErrBufferFull if n is larger than b's buffer size.</p>
</blockquote>

<p>I need to be able to read a specific number of bytes from a Reader that <strong>will advance the reader</strong>.  Basically, identical to the function above, but it advances the reader.  Does anybody know how to accomplish this?</p>
","<pre><code>func (b *Reader) Read(p []byte) (n int, err error)
</code></pre>

<p><a href=""http://golang.org/pkg/bufio/#Reader.Read"" rel=""noreferrer"">http://golang.org/pkg/bufio/#Reader.Read</a></p>

<p>The number of bytes read will be limited to <code>len(p)</code></p>
","13661436"
"Find the path to the executable","15060","","<p>I compile a program with Go for various platforms and run it by calling a relative path or just by its name (if it is in the PATH variable).</p>

<p>Is it possible to find out where the executable is?</p>

<p>Say, my program is called ""<code>foo</code>(<code>.exe</code>)"". I can run <code>./foo</code>, <code>foo</code> (if it's in the PATH), <code>../../subdir/subdir/foo</code>.</p>

<p>I have tried to use <code>os.Args[0]</code> and I guess I should check if the program name contains something different besides ""foo"". If yes, use <code>filepath.Abs</code>, if no, use (I can't find the function name, there is a function that looks through the PATH to check where the program is).</p>
","<p>Use package <a href=""https://github.com/kardianos/osext"">osext</a>.</p>

<p>It's providing function <code>Executable()</code> that returns an absolute path to the current program executable.
It's portable between systems.</p>

<p><a href=""http://godoc.org/github.com/kardianos/osext"">Online documentation</a></p>

<pre><code>package main

import (
    ""github.com/kardianos/osext""
    ""fmt""
)

func main() {
    filename, _ := osext.Executable()
    fmt.Println(filename)
}
</code></pre>
","15038241"
"How do I reverse sort a slice of integer Go?","15058","","<p>I am trying to reverse-sort a slice of integers in Go.</p>

<pre><code>  example := []int{1,25,3,5,4}
  sort.Ints(example) // this will give me a slice sorted from 1 to the highest number
</code></pre>

<p>How do I sort it so that it goes from highest to lowest? so [25 5 4 3 1]</p>

<p>I have tried this </p>

<pre><code>sort.Sort(sort.Reverse(sort.Ints(keys)))
</code></pre>

<p>Source: <a href=""http://golang.org/pkg/sort/#Reverse"">http://golang.org/pkg/sort/#Reverse</a></p>

<p>However, I am getting the error below</p>

<pre><code># command-line-arguments
./Roman_Numerals.go:31: sort.Ints(keys) used as value
</code></pre>
","<p><a href=""http://golang.org/pkg/sort/#Ints"">sort.Ints</a> is a convenient function to sort a couple of ints. Generally you need to implement the <a href=""http://golang.org/pkg/sort/#Interface"">sort.Interface</a> interface if you want to sort something and <a href=""http://golang.org/pkg/sort/#Reverse"">sort.Reverse</a> just returns a different implementation of that interface that redefines the <code>Less</code> method.</p>

<p>Luckily the sort package contains a predefined type called <a href=""http://golang.org/pkg/sort/#IntSlice"">IntSlice</a> that implements sort.Interface:</p>

<pre><code>keys := []int{3, 2, 8, 1}
sort.Sort(sort.Reverse(sort.IntSlice(keys)))
fmt.Println(keys)
</code></pre>
","18343326"
"Getting a use of package without selector error","15039","","<p>I'm using this config library called <a href=""https://github.com/spf13/viper"" rel=""noreferrer"">Viper</a></p>

<p>In my main I have this:</p>

<pre><code>viper.SetConfigName(""development"")
viper.AddConfigPath(""config/settings/"")
err := viper.ReadInConfig()
if err != nil {
    fmt.Println(""viper config read error %v"", err)
}
</code></pre>

<p>I then have a struct that takes a viper as parameter:</p>

<pre><code>type MyConfig struct {
  v *viper.Viper
}
</code></pre>

<p>In my main I have a function that returns this MyConfig like:</p>

<pre><code>func NewMyConfig(v *viper.Viper) *MyConfig {
    return &amp;MyConfig{v: v}
}
</code></pre>

<p>I am getting this error:</p>

<pre><code>./main.go:55: use of package viper without selector
</code></pre>

<p>Not sure what I should be doing?</p>
","<p>When you <a href=""https://golang.org/ref/spec#Import_declarations"" rel=""noreferrer"">import</a> a package like</p>

<pre><code>import ""github.com/spf13/viper""
</code></pre>

<p>the package name (which is <code>viper</code> in this case) will be available to you as a new identifier. You may use this identifier to construct <a href=""https://golang.org/ref/spec#Qualified_identifiers"" rel=""noreferrer"">qualified identifiers</a> to refer to <a href=""https://golang.org/ref/spec#Exported_identifiers"" rel=""noreferrer"">exported identifiers</a> of the package (identifiers that start wtih an uppercase letter).</p>

<p>The package name itself cannot be used by itself. The line that gives you error:</p>

<pre><code>myConfig = NewMyConfig(&amp;viper)
</code></pre>

<p>You used package name <code>viper</code> without specifying what exported identifier you want to refer to from the package.</p>

<p>You want to use your <code>NewMyConfig()</code> function to obtain a pointer to a new value of your <code>MyConfig</code> struct. Your <code>NewMyConfig()</code> function expects a value of <code>*viper.Viper</code>. Since the <code>viper.Viper</code> struct contains unexported fields, you can just create it like <code>&amp;viper.Viper{}</code>, but the <code>viper</code> package exports a function <a href=""https://godoc.org/github.com/spf13/viper#New"" rel=""noreferrer""><code>viper.New()</code></a> which can be used to obtain a pointer to a new, initialized <code>viper.Viper</code> value. You may use it like:</p>

<pre><code>vp := viper.New()
myConfig = NewMyConfig(vp)
</code></pre>

<p>Note that the <code>viper</code> package declares an internal, global, unexported <code>viper.Viper</code> ""instance"". There are many exported <em>functions</em> that match <em>methods</em> of the <code>viper.Viper</code> type. These ""matching"" functions work on the global, unexported <code>viper.Viper</code> instance. So you may choose to use all the exported global functions of the <code>viper</code> package, or create your own <code>Viper</code> instance and then keep using its methods afterwards.</p>
","36995058"
"How to pipe an HTTP response to a file in Go?","15014","","<p>How do I convert the below code to use streams/pipes so that I don't need to read the full content into memory?
Something like:
<code>http.Get(""http://example.com/"").Pipe(""./data.txt"")</code></p>

<pre><code>package main
import (""net/http"";""io/ioutil"")

func main() {
        resp, err := http.Get(""http://example.com/"")
        check(err)
        defer resp.Body.Close()
        body, err := ioutil.ReadAll(resp.Body)
        check(err)
        err = ioutil.WriteFile(""./data.txt"", body, 0666)
        check(err)
}
func check(e error) {
        if e != nil {
                panic(e)
        }
}
</code></pre>
","<p>How about <code>io.Copy()</code>?  Its documentation can be found at: <a href=""http://golang.org/pkg/io/#Copy"" rel=""noreferrer"">http://golang.org/pkg/io/#Copy</a></p>

<p>It's pretty simple, though.  Give it an <code>io.Reader</code> and an <code>io.Writer</code> and it copies the data over, one small chunk at a time (e.g. not all in memory at once).</p>

<p>So you might try writing something like:</p>

<pre><code>func main() {
  resp, err := http.Get(""..."")
  check(err)
  defer resp.Body.Close()
  out, err := os.Create(""filename.ext"")
  if err != nil {
    // panic?
  }
  defer out.Close()
  io.Copy(out, resp.Body)
}
</code></pre>

<p>I haven't tested the above; I just hacked it together quickly from your above example, but it should be close if not on the money.</p>
","16311368"
"Go language on iPhone","14964","","<p>Is it possible to write in Go for iPhone?
I think following steps are required</p>

<ol>
<li><p>Compile Go as ARM Mach-O binary (I expect GCCGO be able to do that)</p></li>
<li><p>Compile iPhone app as static library (I think it possible to rename main() -> main2(), etc)</p></li>
<li><p>Compile Go as Mach-O binary linked with iPhone static library. Go will have to call main2.</p></li>
<li><p>make some plist files, zip, sign</p></li>
</ol>
","<p>Minux maintains the Go iOS port here: <a href=""https://bitbucket.org/minux/goios/wiki/Home"">https://bitbucket.org/minux/goios/wiki/Home</a></p>
","12688342"
"mkdir if not exists using golang","14919","","<p>I am learning golang(beginner) and I have been searching on both google and stackoverflow but I could not find an answer so excuse me if already asked, but how can I mkdir if not exists in golang.</p>

<p>For example in node I would use fs-extra with the function <a href=""https://github.com/jprichardson/node-fs-extra#ensuredirdir-callback"" rel=""noreferrer"">ensureDirSync</a> (if blocking is of no concern of course)</p>

<pre><code>fs.ensureDir(""./public"");
</code></pre>
","<p>I've ran across two ways:</p>

<ol>
<li><p>Check for the directory's existence and create it if it doesn't exist:</p>

<pre><code>if _, err := os.Stat(path); os.IsNotExist(err) {
    os.Mkdir(path, mode)
}
</code></pre></li>
<li><p>Attempt to create the directory and ignore any issues:</p>

<pre><code>_ = os.Mkdir(path, mode)
</code></pre></li>
</ol>
","37932674"
"golang ""go get"" command showing ""go: missing Git command"" error","14914","","<p>I'm new in go lang. Trying to import a go library using ""go get"" command but in cmd getting this error:</p>

<pre><code>go: missing Git command. See https://golang.org/s/gogetcmd
package github.com/ttacon/chalk: exec: ""git"": executable file not found in  %PATH%
</code></pre>

<p><strong>My Go Env:</strong></p>

<pre><code>set GOARCH=amd64
set GOBIN=
set GOEXE=.exe
set GOHOSTARCH=amd64
set GOHOSTOS=windows
set GOOS=windows
set GOPATH=F:\Works\Go
set GORACE=
set GOROOT=C:\Go
set GOTOOLDIR=C:\Go\pkg\tool\windows_amd64
set GO15VENDOREXPERIMENT=1
set CC=gcc
set GOGCCFLAGS=-m64 -mthreads -fmessage-length=0
set CXX=g++
set CGO_ENABLED=1
</code></pre>

<p>What's wrong with my Go environment?</p>
","<p><code>go get</code> requires git if any of the packages lives (and is being fetched) from a git repository. For Windows, you can install git from the <a href=""https://git-scm.com/download/win"">git website</a>.</p>
","36044581"
"Sizeof struct in Go","14900","","<p>I'm having a look at Go, which looks quite promising.
I am trying to figure out how to get the size of a go struct, for
example something like</p>

<pre><code>type Coord3d struct {
    X, Y, Z int64
}
</code></pre>

<p>Of course I know that it's 24 bytes, but I'd like to know it programmatically..</p>

<p>Do you have any ideas how to do this ?</p>
","<pre><code>import unsafe ""unsafe""

/* Structure describing an inotify event.  */
type INotifyInfo struct {
    Wd     int32  // Watch descriptor
    Mask   uint32 // Watch mask
    Cookie uint32 // Cookie to synchronize two events
    Len    uint32 // Length (including NULs) of name
}

func doSomething() {
    var info INotifyInfo
    const infoSize = unsafe.Sizeof(info)
    ...
}
</code></pre>

<p><strong>NOTE:</strong> The OP is mistaken. The unsafe.Sizeof does return 24 on the example Coord3d struct. See comment below.</p>
","2115688"
"Golang read request body","14871","","<p>I am writing my own logginMiddleware. Basically, I need to log body of the request and the response. The problem that I faced is that when I read body, it becomes empty and I cannot read it twice. 
I understand that it happens because it is of type ReadCloser. Is there a way to rewind body to the beginning? </p>
","<h3>Inspecting and mocking request body</h3>

<p>When you first read the body, you have to store it so once you're done with it, you can set a new <a href=""https://golang.org/pkg/io/#ReadCloser"" rel=""noreferrer""><code>io.ReadCloser</code></a> as the request body constructed from the original data. So when you advance in the chain, the next handler can read the same body.</p>

<p>One option is to read the whole body using <a href=""https://golang.org/pkg/io/ioutil/#ReadAll"" rel=""noreferrer""><code>ioutil.ReadAll()</code></a>, which gives you the body as a byte slice.</p>

<p>You may use <a href=""https://golang.org/pkg/bytes/#NewBuffer"" rel=""noreferrer""><code>bytes.NewBuffer()</code></a> to obtain an <a href=""https://golang.org/pkg/io/#Reader"" rel=""noreferrer""><code>io.Reader</code></a> from a byte slice.</p>

<p>The last missing piece is to make the <code>io.Reader</code> an <code>io.ReadCloser</code>, because <code>bytes.Buffer</code> does not have a <code>Close()</code> method. For this you may use <a href=""https://golang.org/pkg/io/ioutil/#NopCloser"" rel=""noreferrer""><code>ioutil.NopCloser()</code></a> which wraps an <code>io.Reader</code>, and returns an <code>io.ReadCloser</code>, whose added <code>Close()</code> method will be a no-op (does nothing).</p>

<p>Note that you may even modify the contents of the the byte slice you use to create the ""new"" body. You have full control over it.</p>

<p><sup>Care must be taken though, as there might be other HTTP fields like content-length and checksums which may become invalid if you modify only the data. If subsequent handlers check those, you would also need to modify those too!</sup></p>

<h3>Inspecting / modifying response body</h3>

<p>If you also want to read the response body, then you have to wrap the <a href=""https://golang.org/pkg/net/http/#ResponseWriter"" rel=""noreferrer""><code>http.ResponseWriter</code></a> you get, and pass the wrapper on the chain. This wrapper may cache the data sent out, which you can inspect either after, on on-the-fly (as the subsequent handlers write to it).</p>

<p>Here's a simple <code>ResponseWriter</code> wrapper, which just caches the data, so it'll be available after the subsequent handler returns:</p>

<pre><code>type MyResponseWriter struct {
    http.ResponseWriter
    buf *bytes.Buffer
}

func (mrw *MyResponseWriter) Write(p []byte) (int, error) {
    return mrw.buf.Write(p)
}
</code></pre>

<p>Note that <code>MyResponseWriter.Write()</code> just writes the data to a buffer. You may also choose to inspect it on-the-fly (in the <code>Write()</code> method) and write the data immediately to the wrapped / embedded <code>ResponseWriter</code>. You may even modify the data. You have full control.</p>

<p><sup>Care must be taken again though, as the subsequent handlers may also send HTTP response headers related to the response data –such as length or checksums– which may also become invalid if you alter the response data.</sup></p>

<h3>Full example</h3>

<p>Putting the pieces together, here's a full working example:</p>

<pre><code>func loginmw(handler http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        body, err := ioutil.ReadAll(r.Body)
        if err != nil {
            log.Printf(""Error reading body: %v"", err)
            http.Error(w, ""can't read body"", http.StatusBadRequest)
            return
        }

        // Work / inspect body. You may even modify it!

        // And now set a new body, which will simulate the same data we read:
        r.Body = ioutil.NopCloser(bytes.NewBuffer(body))

        // Create a response wrapper:
        mrw := &amp;MyResponseWriter{
            ResponseWriter: w,
            buf:            &amp;bytes.Buffer{},
        }

        // Call next handler, passing the response wrapper:
        handler.ServeHTTP(mrw, r)

        // Now inspect response, and finally send it out:
        // (You can also modify it before sending it out!)
        if _, err := io.Copy(w, mrw.buf); err != nil {
            log.Printf(""Failed to send out response: %v"", err)
        }
    })
}
</code></pre>
","43021236"
"What is ""_,"" in a Golang declaration?","14760","","<p>I am new to Golang and trying to learn it, coming from PHP and Java.</p>

<p>And I can't seem to understand this kind of variable declaration:</p>

<pre><code>_, prs := m[""example""]
</code></pre>

<p>What exactly is ""_,"" doing and why have they declared a variable like this instead of</p>

<pre><code>prs := m[""example""]
</code></pre>

<p>I found it in this example:
<a href=""https://gobyexample.com/maps"" rel=""noreferrer"">https://gobyexample.com/maps</a></p>

<p>Thanks for helping me out!</p>
","<p>It avoids having to declare all the variables for the returns values.<br>
It is called the <a href=""https://golang.org/doc/effective_go.html#blank"" rel=""noreferrer""><strong>blank identifier</strong></a>.</p>

<p>As in:</p>

<pre><code>_, y, _ := coord(p)  // coord() returns three values; only interested in y coordinate
</code></pre>

<p>(the <a href=""https://stackoverflow.com/q/26972615/6309"">other '<code>_</code>' use case is for import</a>)</p>

<p>Since it discards the return value, it is helpful when you want to check only one of the returned values, as in ""<a href=""https://stackoverflow.com/a/2051011/6309"">How to test key existence in a map?</a>"" shown in ""<a href=""http://golang.org/doc/effective_go.html#maps"" rel=""noreferrer"">Effective Go, map</a>"":</p>

<pre><code>_, present := timeZone[tz]
</code></pre>

<blockquote>
  <p>To test for presence in the map without worrying about the actual value, you can use the blank identifier, a simple underscore (<code>_</code>).<br>
  The blank identifier can be assigned or declared with any value of any type, with the value discarded harmlessly.<br>
  For testing presence in a map, use the blank identifier in place of the usual variable for the value.</p>
</blockquote>

<p>As <a href=""https://stackoverflow.com/users/901827/jsor"">Jsor</a> adds <a href=""https://stackoverflow.com/questions/27764421/what-is-in-a-golang-declaration/27764432#comment43940322_27764432"">in the comments</a>:</p>

<blockquote>
  <p>""generally accepted standard"" is to call the membership test variables ""ok"" (same for checking if a channel read was valid or not)</p>
</blockquote>

<p>That allows you to combine it with test:</p>

<pre><code>if _, err := os.Stat(path); os.IsNotExist(err) {
    fmt.Printf(""%s does not exist\n"", path)
}
</code></pre>

<p>You would find it also in loop:</p>

<blockquote>
  <p>If you only need the second item in the range (the value), use the blank identifier, an underscore, to discard the first:</p>
</blockquote>

<pre><code>sum := 0
for _, value := range array {
    sum += value
}
</code></pre>
","27764432"
"Go template.ExecuteTemplate include html","14753","","<p>I have followed this tutorial: <a href=""http://golang.org/doc/articles/wiki/final.go"" rel=""nofollow noreferrer"">http://golang.org/doc/articles/wiki/final.go</a> and have slightly modified it for my needs/wants. The problem is I would like to support HTML in the templates. I realize this is a security risk but it's not a concern at the moment.</p>

<p>The result of a page render:</p>

<pre><code>&lt;h1&gt;this&lt;strong&gt;is&lt;/strong&gt;a test&lt;/h1&gt;
</code></pre>

<p>Let me explain a little bit of the code:</p>

<pre><code>type Page struct {
    Title string
    Body  []byte
}
</code></pre>

<p>The data I would like to have HTML is stored in <code>Page.Body</code>. This is type <code>[]byte</code> which means I can't (or can I?) run <code>html/template.HTML(Page.Body)</code> as that function expects a string.</p>

<p>I have this which pre-renders the templates:</p>

<pre><code>var (
    templates = template.Must(template.ParseFiles(""tmpl/edit.html"", ""tmpl/view.html""))
)
</code></pre>

<p>And the actual <code>ExecuteTemplate</code> looks like this:</p>

<pre><code>err := templates.ExecuteTemplate(w, tmpl+"".html"", p)
</code></pre>

<p>Where w is <code>w http.ResponseWriter</code>, tmpl is <code>tmpl string</code>, and p is <code>p *Page</code></p>

<p>Finally my <code>'view.html'</code> (template) looks like the following:</p>

<pre><code>&lt;h1&gt;{{.Title}}&lt;/h1&gt;
&lt;p&gt;[&lt;a href=""/edit/{{.Title}}""&gt;edit&lt;/a&gt;]&lt;/p&gt;
&lt;div&gt;{{printf ""%s"" .Body}}&lt;/div&gt;
</code></pre>

<p><strong>Things I have tried:</strong></p>

<ul>
<li><code>{{printf ""%s"" .Body | html}}</code> doesn't do anything </li>
<li>I have included <code>github.com/russross/blackfriday</code> (Markdown processor) and have run <code>p.Body = blackfriday.MarkdownCommon(p.Body)</code> which correctly converts Markdown to HTML, but the HTML is still output as entities.</li>
<li><p><strong>EDIT:</strong> I have attempted the following bit of code (I don't know why the format is messed up) and it still outputs the exact same.</p>

<p><code>var s template.HTML</code>
<code>s = template.HTML(p.Body)</code>
<code>p.Body = []byte(s)</code></p></li>
</ul>

<p>Any guidance is greatly appreciated. If I'm being confusing please ask and I can modify my question.</p>
","<p>Convert your <code>[]byte</code> or <code>string</code> to type <code>template.HTML</code> (documented <a href=""http://golang.org/pkg/html/template/#HTML"">here</a>)</p>

<pre><code>p.Body = template.HTML(s) // where s is a string or []byte
</code></pre>

<p>Then, in your template, just:</p>

<pre><code>{{.Body}}
</code></pre>

<p>It will be printed without escaping.</p>

<p><strong>EDIT</strong></p>

<p>In order to be able to include HTML in you page's body you need to change the <code>Page</code> type declaration:</p>

<pre><code>type Page struct {
    Title string
    Body  template.HTML
}
</code></pre>

<p>then assign to it.</p>
","18185705"
"Runtime error: invalid memory address or nil pointer dereference","14743","","<p>I am new to go and trying to make a simple webcrawler. I keep getting a ""panic: runtime error: invalid memory address or nil pointer dereference"" and have no idea how to fix the issue. I have an ""advancedFetcher"" function and a ""basicFetcher"" function and I get the same error under either one. <a href=""https://stackoverflow.com/questions/21044079/invalid-memory-address-or-nil-pointer-dereference-when-use-http-get/21044970#21044970"">This answer</a> suggests checking each error (which I have I think) but I am still getting an error. Thanks!</p>

<pre><code>package main

import (
    ""crypto/tls""
    ""fmt""
    ""io/ioutil""
    ""net""
    ""net/http""
    ""time""
)

var tr = &amp;http.Transport{
    TLSClientConfig:     &amp;tls.Config{InsecureSkipVerify: true},
    MaxIdleConnsPerHost: 25,
    DisableKeepAlives:   true,
    Proxy:               http.ProxyFromEnvironment,
    Dial: (&amp;net.Dialer{
        Timeout:   10 * time.Second,
        KeepAlive: 10 * time.Second,
    }).Dial,
    TLSHandshakeTimeout: 5 * time.Second,
}
var client = &amp;http.Client{Transport: tr}

func makeGetRequest(uri string) *http.Response {
    req, err := http.NewRequest(""GET"", uri, nil)
    if err != nil {
        fmt.Println(err)
    }
    req.Header.Add(""User-Agent"", ""Hi it's me again"")
    resp, err := client.Do(req)
    if err != nil {
        fmt.Println(err)
    }
    return resp
}

func advancedFetcher(uri string, c chan int) {
    fmt.Println(""Getting: "", uri)
    resp := makeGetRequest(uri)
    defer resp.Body.Close()
    c &lt;- resp.StatusCode
}

func basicFetcher(uri string, c chan int) {
    fmt.Println(""Getting: "", uri)
    resp, err := http.Get(uri)
    if err != nil {
        fmt.Println(err)
    }
    defer resp.Body.Close()
    _, err = ioutil.ReadAll(resp.Body)
    c &lt;- resp.StatusCode
}

func main() {
    c := make(chan int)
    rows := []string{""https://www.google.com"", ""http://www.fdicconnect.gov""}
    for _, row := range rows {
        //go basicFetcher(row, c)
        go advancedFetcher(row, c)
    }
    for _ = range rows {
        select {
        case result := &lt;-c:
            fmt.Println(result)
        }
    }
    fmt.Println(""All Done"")
}
</code></pre>

<p>EDIT #1:</p>

<pre><code>Getting:  https://www.google.com
Getting:  http://www.fdicconnect.gov
200
Get http://www.fdicconnect.gov: dial tcp 167.176.6.86:80: i/o timeout
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x0 pc=0x400ff2]

goroutine 21 [running]:
runtime.panic(0x6594c0, 0x7e9b53)
    /usr/local/go/src/pkg/runtime/panic.c:279 +0xf5
main.advancedFetcher(0x6c3b70, 0x1a, 0xc208004180)
    /home/me/go/src/testfolder/tester/main.go:41 +0x1c2
created by main.main
    /home/me/go/src/testfolder/tester/main.go:61 +0x123

goroutine 16 [chan receive]:
main.main()
    /home/me/go/src/testfolder/tester/main.go:65 +0x198

goroutine 19 [finalizer wait]:
runtime.park(0x413bd0, 0x7ee660, 0x7ec8c9)
    /usr/local/go/src/pkg/runtime/proc.c:1369 +0x89
runtime.parkunlock(0x7ee660, 0x7ec8c9)
    /usr/local/go/src/pkg/runtime/proc.c:1385 +0x3b
runfinq()
    /usr/local/go/src/pkg/runtime/mgc0.c:2644 +0xcf
runtime.goexit()
    /usr/local/go/src/pkg/runtime/proc.c:1445

goroutine 17 [syscall]:
runtime.goexit()
    /usr/local/go/src/pkg/runtime/proc.c:1445
</code></pre>
","<p>Is your program printing an error before panicking? If memory serves, if <code>http.Get</code> returns an error, then <code>resp.Body == nil</code>, which would cause your error because you can't call <code>resp.Body.Close()</code> on <code>nil</code>. </p>

<p>As <a href=""https://stackoverflow.com/questions/26726203/runtime-error-invalid-memory-address-or-nil-pointer-dereference/26738639#comment42044181_26726203"">twotwotwo suggests</a>, you should write your function so that it returns a (result, error) pair so you can terminate it gracefully before running into problems.</p>
","26738639"
"Pointer to a map","14660","","<p>Having some maps defined as:</p>

<pre><code>var valueToSomeType = map[uint8]someType{...}
var nameToSomeType = map[string]someType{...}
</code></pre>

<p>I would want a variable that points to the address of the maps (to don't copy all variable). I tried it using:</p>

<pre><code>valueTo := &amp;valueToSomeType
nameTo := &amp;nameToSomeType
</code></pre>

<p>but at using <code>valueTo[number]</code>, it shows<br>
<em>internal compiler error: var without type, init: new</em></p>

<p>How to get it?</p>

<p><strong>Edit</strong>  </p>

<p>The error was showed by another problem.</p>
","<p>Maps are reference types, so they are allways passed by reference. You don't need a pointer.</p>
","2809775"
"Golang conditional compilation","14633","","<p>I've got a trouble with conditional compilation in Go 1.</p>

<p>Here is my test code. Is there anything I misunderstand about the ""// +build"" constraint and the ""-tags"" flag?</p>

<p>main1.go</p>

<pre><code>// +build main1
package main

import (
    ""fmt""
)

func main() {
    fmt.Println(""This is main 1"")
}
</code></pre>

<p>main2.go</p>

<pre><code>// +build main2
package main

import (
    ""fmt""
)

func main() {
    fmt.Println(""This is main 2"")
}
</code></pre>

<p>when running ""go build"", I still got compile error</p>

<pre><code>$ go build -tags 'main1'
# test
./main2.go:8: main redeclared in this block
        previous declaration at ./main1.go:8
</code></pre>
","<p>You must follow <code>// +build XXX</code> with a blank line.</p>

<p>In my brief search, I couldn't find where/if this is documented. But <a href=""https://code.google.com/p/go/source/browse/src/pkg/go/build/build.go?r=2449e85a115014c3d9251f86d499e5808141e6bc#790"" rel=""noreferrer"">the source</a> clearly calls it out</p>
","10649653"
"convert a byte to string in golang","14605","","<p>I am new to golang, try to do something like this:</p>

<pre><code>bytes := [4]byte{1,2,3,4}
str := convert(bytes)

//str == ""1,2,3,4""
</code></pre>

<p>searched a lot, really no idea how to do this.</p>

<p>I know this will not work:</p>

<pre><code>str = string(bytes[:])
</code></pre>
","<p>Not the most efficient way to implement it, but you can simply write:</p>

<pre><code>func convert( b []byte ) string {
    s := make([]string,len(b))
    for i := range b {
        s[i] = strconv.Itoa(int(b[i]))
    }
    return strings.Join(s,"","")
}
</code></pre>

<p>to be called by:</p>

<pre><code>bytes := [4]byte{1,2,3,4}
str := convert(bytes[:])
</code></pre>
","31221013"
"Empty or not required struct fields in golang","14604","","<p>I'm somewhat new to typed languages like Go and am trying to learn the best ways to implement things. </p>

<p>I have two structs that represent models that will be inserted into a mongodb database. One struct (Investment) has the other struct (Group) as one of its fields.</p>

<pre><code>Group struct {
    Base
    Name string `json:""name"" bson""name""`
}

Investment struct {
    Base
    Symbol string `json:""symbol"" bson:""symbol"" binding:""required""`
    Group  Group  `json:""group"" bson:""group""`
    Fields bson.M `json:""fields"" bson:""fields""`
}
</code></pre>

<p>The problem I'm having is that in the Investment model, Group is not required. If there is no group, I think its better for it to not be inserted in the db. Whats the best way to handle a db model such as this in Go? </p>
","<p><strong>tl;dr</strong>: Use <code>,omitempty</code>, and if you need to worry about the difference between a <a href=""http://golang.org/ref/spec#The_zero_value"">zero value</a> and null/not specified, <a href=""https://willnorris.com/2014/05/go-rest-apis-and-pointers"">do what the GitHub API does and use a pointer</a>.</p>

<hr>

<p>Both <code>json</code> and <code>bson</code> support the <code>,omitempty</code> tag. For json, ""empty values are false, 0, <strong>any nil pointer</strong> or interface value, and any array, slice, map, <strong>or string</strong> of length zero"" (<a href=""http://golang.org/pkg/encoding/json/"">json docs</a>). For bson, <code>,omitempty</code> means ""Only include the field if it's not set to the zero value for the type or to empty slices or maps"", and <a href=""http://golang.org/ref/spec#The_zero_value"">zero values</a> include empty strings and nil pointers (<a href=""http://godoc.org/labix.org/v2/mgo/bson"">bson docs</a>).</p>

<p>So if you really need a Group struct, you can put a <code>*Group</code> in instead, and it won't be stored when the pointer is nil. If <code>Investment</code> only needs to hold the group's <em>name</em>, it's even simpler: <code>""""</code> as group name keeps a group key from being stored.</p>

<p><code>bson</code> defaults to using the lowercased field name already so you can omit that from the struct tag when they match. <code>json</code> will default to the Capitalized name, so specify the lowercase name in a tag if you need lowercase.</p>

<p>So, best case, maybe you can just use:</p>

<pre><code>type Investment struct {
    Base
    Symbol string `json:""symbol"" binding:""required""`
    Group string  `json:""group,omitempty"" bson:"",omitempty""`
    Fields bson.M `json:""fields""`
}
</code></pre>

<p>If you ever run into fields where the zero value for the type ("""", 0, false, etc.) is distinct from ""not specified"", you can <a href=""https://willnorris.com/2014/05/go-rest-apis-and-pointers"">do what the GitHub API does and put pointers in your structures</a>--essentially an extension of the <code>*Group</code> trick.</p>
","24217094"
"How to import local packages in go?","14589","","<p>I am new to go and working on an example code that I want to localize.</p>

<p>In the original <code>main.go</code> import statement it was:</p>

<pre><code> import (
    ""log""
    ""net/http""
   ""github.com/foo/bar/myapp/common""
    ""github.com/foo/bar/myapp/routers""
)
</code></pre>

<p>Now I have <code>common</code> and <code>routers</code> package in <code>/home/me/go/src/myapp</code></p>

<p>So I converted the import statement to:</p>

<pre><code>import (
    ""log""
    ""net/http""
    ""./common""
    ""./routers""
)
</code></pre>

<p>But when I run <code>go install myapp</code> I get these errors:</p>

<pre><code>can't load package: /home/me/go/src/myapp/main.go:7:3: local import ""./common"" in non-local package
</code></pre>

<p>Also, when I use <code>common</code> and <code>routers</code> instead of <code>./common</code> and <code>./routers</code> in the import statement, I get:</p>

<pre><code>myapp/main.go:7:3: cannot find package ""common"" in any of:
    /usr/local/go/src/common (from $GOROOT)
    /home/me/go/src/common (from $GOPATH)
myapp/main.go:8:2: cannot find package ""routers"" in any of:
    /usr/local/go/src/routers (from $GOROOT)
    /home/me/go/src/routers (from $GOPATH)
</code></pre>

<p>How can I fix this?</p>
","<p>Well, I figured out the problem. 
Basically Go starting path for import is <code>$HOME/go/src</code></p>

<p>So I just needed to add <code>myapp</code> in front of the package names, that is, the import should be:</p>

<pre><code>import (
    ""log""
    ""net/http""
    ""myapp/common""
    ""myapp/routers""
)
</code></pre>
","35511866"
"server returned error on SASL authentication step: Authentication failed","14576","","<p>The following is my MongoDB connection dial from GoLang. But it's returning a panic ""<em>server returned error on SASL authentication step: Authentication failed.</em>"". My username, password, hostAddrs and dbName are correct. What am I missing here?</p>

<pre><code>dbName: = os.Getenv(""ENV_DBNAME"")
userName: = os.Getenv(""ENV_DBUSER"")
password: = os.Getenv(""ENV_DBPASS"")
dbHost: = os.Getenv(""ENV_DBHOST"")
mongoDialInfo: = &amp; mgo.DialInfo {
 Addrs: [] string {
  dbHost
 },
 Database: dbName,
 Username: userName,
 Password: password,
 Timeout: 60 * time.Second,
}
sess, err: = mgo.DialWithInfo(mongoDialInfo)
if (err != nil) {
 panic(err)

}
</code></pre>
","<p>I faced similar error and added <code>--authenticationDatabase</code> parameter and it worked while we connecting to a remote MongoDB</p>

<p>Use the similar below format in your code :</p>

<pre><code>$mongorestore --host databasehost:98761 --username restoreuser
--password restorepwd --authenticationDatabase admin --db targetdb ./path/to/dump/
</code></pre>
","43749668"
"Golang method with pointer receiver","14564","","<p>I have this example code</p>

<pre><code>package main

import (
    ""fmt""
)

type IFace interface {
    SetSomeField(newValue string)
    GetSomeField() string
}

type Implementation struct {
    someField string
}

func (i Implementation) GetSomeField() string {
    return i.someField
}

func (i Implementation) SetSomeField(newValue string) {
    i.someField = newValue
}

func Create() IFace {
    obj := Implementation{someField: ""Hello""}
    return obj // &lt;= Offending line
}

func main() {
    a := Create()
    a.SetSomeField(""World"")
    fmt.Println(a.GetSomeField())
}
</code></pre>

<p><code>SetSomeField</code> does not work as expected because its receiver is not of pointer type.</p>

<p>If I change the method to a pointer receiver, what I would expect to work, it looks like this:</p>

<pre><code>func (i *Implementation) SetSomeField(newValue string) { ...
</code></pre>

<p>Compiling this leads to the following error:</p>

<pre><code>prog.go:26: cannot use obj (type Implementation) as type IFace in return argument:
Implementation does not implement IFace (GetSomeField method has pointer receiver)
</code></pre>

<p>How can I have the <code>struct</code> implement the interface <strong>and</strong> the method <code>SetSomeField</code> change the value of the actual instance without creating a copy?</p>

<p>Here's a hackable snippet:
<a href=""https://play.golang.org/p/ghW0mk0IuU"" rel=""nofollow noreferrer"">https://play.golang.org/p/ghW0mk0IuU</a></p>

<p>I've already seen this question <a href=""https://stackoverflow.com/questions/29221854/in-go-golang-how-can-you-cast-an-interface-pointer-into-a-struct-pointer"">In go (golang), how can you cast an interface pointer into a struct pointer?</a>, but I cannot see how it is related to this example.</p>
","<p>Your pointer to the struct should implement the Interface. In that way you can modify its fields.</p>

<p>Look at how I modified your code, to make it working as you expect: </p>

<pre><code>package main

import (
    ""fmt""
)

type IFace interface {
    SetSomeField(newValue string)
    GetSomeField() string
}

type Implementation struct {
    someField string
}    

func (i *Implementation) GetSomeField() string {
    return i.someField
}

func (i *Implementation) SetSomeField(newValue string) {
    i.someField = newValue
}

func Create() *Implementation {
    return &amp;Implementation{someField: ""Hello""}
}

func main() {
    var a IFace
    a = Create()
    a.SetSomeField(""World"")
    fmt.Println(a.GetSomeField())
}
</code></pre>
","33937234"
"How to do a SOAP call in Go?","14550","","<p>Given that Adwords is a Google thing, and Go is a Google thing, how long until there's a version of the Adwords API written in Go? </p>

<p>Associated with that question, another: are there any SOAP libraries for Go yet?</p>
","<p>The <a href=""http://code.google.com/p/google-api-go-client/"" rel=""nofollow"">Google APIs for Go</a> is a work in progress.</p>
","12261859"
"Getting invalid operation: mymap[""title""] (type interface {} does not support indexing) when trying to index a map","14538","","<p>I have data that's in a map, and I want to index into the map by key to get a value.</p>

<pre><code>mdi, err := page.Metadata()
fmt.Println(mdi[""title""])
</code></pre>

<p>However I keep getting the error message <code>invalid operation: mdi[""title""] (type interface {} does not support indexing)</code>. I am confused, because the data is a map and I should be able to index into it to get the value. In case the type wasn't clear, I also tried to cast the value to a string:</p>

<pre><code>title, ok := mdi[""title""].(string)
checkOk(ok)
fmt.Println(title)
</code></pre>

<p>However, I got the same error message. What am I doing wrong?</p>
","<p>The data type here was the key. <code>mdi</code> was not actually a map, but an <code>interface{}</code>, which could be anything - a map, a string, an int. You need to cast it to a map first, or do the awkward <code>case</code> switch outlined in <a href=""http://blog.golang.org/json-and-go"">JSON and Go</a>.</p>

<pre><code>mdi, err := page.Metadata()
md, ok := mdi.(map[string]interface{})
fmt.Println(md[""title""])
</code></pre>
","25214037"
"Serving gzipped content for Go","14508","","<p>I'm starting to write server-side applications in Go. I'd like to use the Accept-Encoding request header to determine whether to GZIP the response entity. I had hoped to find a way to do this directly using the http.Serve or http.ServeFile methods.</p>

<p>This is quite a general requirement; did I miss something or do I need to roll my own solution?</p>
","<p>There is no “out of the box” support for gzip-compressed HTTP responses yet. But adding it is pretty trivial. Have a look at </p>

<p><a href=""https://gist.github.com/the42/1956518"">https://gist.github.com/the42/1956518</a></p>

<p>also</p>

<p><a href=""https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/cgUp8_ATNtc"">https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/cgUp8_ATNtc</a></p>
","14076990"
"Is there a way to convert integers to bools in go or vice versa?","14498","","<p>Is there a builtin way to cast bools to integers or vice versa? I've tried normal casting, but since they use different underlying types, conversion isn't possible the classic way. I've poured over some of the specification, and I haven't found an answer yet.</p>
","<p>Int to bool is easy, just <code>x != 0</code> will do the trick. To go the other way, since Go doesn't support a ternary operator, you'd have to do:</p>

<pre><code>var x int
if b {
    x = 1
} else {
    x = 0
}
</code></pre>

<p>You could of course put this in a function:</p>

<pre><code>func Btoi(b bool) int {
    if b {
        return 1
    }
    return 0
 }
</code></pre>

<p>There are so many possible boolean interpretations of integers, none of them necessarily natural, that it sort of makes sense to have to say what you mean.</p>

<p>In my experience (YMMV), you don't have to do this often if you're writing good code. It's appealing sometimes to be able to write a mathematical expression based on a boolean, but your maintainers will thank you for avoiding it.</p>
","8394755"
"Go: strings.Split on newline?","14495","","<p>I'm trying to do the rather simple task of splitting a string by newlines.</p>

<p>This does not work:</p>

<pre><code>temp := strings.Split(result,`\n`)
</code></pre>

<p>I also tried ' instead of ` but no luck.</p>

<p>Any ideas?</p>
","<p>You have to use <code>""\n""</code>.</p>

<p>Splitting on `\n`, searches for an actual <code>\</code> followed by <code>n</code> in the text, not the newline byte.</p>

<p><a href=""http://play.golang.org/p/KXjd4x2xwd"" rel=""noreferrer""><kbd>playground</kbd></a></p>
","25080930"
"go-lang simple webserver : serve static image","14494","","<p>I want to write a simple webserver in go that does the following: when i go to <a href=""http://example.go:8080/image"">http://example.go:8080/image</a>, it returns a static image.
I'm following an example i found <a href=""http://golang.org/doc/articles/wiki/"">here</a>. In this example they implement this method:</p>

<pre><code>func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, ""Hi there, I love %s!"", r.URL.Path[1:])
}
</code></pre>

<p>and then refer to it here :</p>

<pre><code>...
...
http.HandleFunc(""/"", handler)
</code></pre>

<p>Now, what i wanna do is serve an image instead of writing to the string.
How would i go about that?</p>
","<p>You can serve static files using the <a href=""http://golang.org/pkg/net/http/#FileServer"" rel=""noreferrer""><code>http.FileServer</code></a> function.</p>

<pre><code>package main

import (
    ""log""
    ""net/http""
)

func main() {
    http.Handle(""/"", http.StripPrefix(""/"", http.FileServer(http.Dir(""path/to/file""))))
    if err := http.ListenAndServe("":8080"", nil); err != nil {
        log.Fatal(""ListenAndServe: "", err)
    }
}
</code></pre>

<p>EDIT: More <a href=""http://golang.org/doc/effective_go.html#introduction"" rel=""noreferrer"">idiomatic</a> code.</p>

<p>EDIT 2: This code above will return an image <code>image.png</code> when the browser requests <a href=""http://example.go/image.png"" rel=""noreferrer"">http://example.go/image.png</a></p>

<p>The <a href=""http://golang.org/pkg/net/http/#StripPrefix"" rel=""noreferrer""><code>http.StripPrefix</code></a> function here is strictly unnecessary in this case as the path being handled is the web root. If the images were to be served from the path <a href=""http://example.go/images/image.png"" rel=""noreferrer"">http://example.go/images/image.png</a> then the line above would need to be <code>http.Handle(""/images/"", http.StripPrefix(""/images/"", http.FileServer(http.Dir(""path/to/file""))))</code>.</p>

<p><a href=""http://play.golang.org/p/e9kx6mJpI1"" rel=""noreferrer"">Playground</a></p>
","16672682"
"How to generate hash number of a string in Go?","14429","","<p>For example:</p>

<pre><code>hash(""HelloWorld"") = 1234567
</code></pre>

<p>Is there any built-in function could do this ?</p>

<p>Thanks.</p>
","<p>The <a href=""http://golang.org/pkg/hash/"" rel=""noreferrer"">hash</a> package is helpful for this. Note it's an abstraction over specific hash implementations. Some ready made are found in the package <a href=""http://golang.org/pkg/hash/#pkg-subdirectories"" rel=""noreferrer"">subdirectories</a>.</p>

<p>Example:</p>

<pre><code>package main

import (
        ""fmt""
        ""hash/fnv""
)

func hash(s string) uint32 {
        h := fnv.New32a()
        h.Write([]byte(s))
        return h.Sum32()
}

func main() {
        fmt.Println(hash(""HelloWorld""))
        fmt.Println(hash(""HelloWorld.""))
}
</code></pre>

<p>(Also <a href=""http://play.golang.org/p/_J2YysdEqE"" rel=""noreferrer"">here</a>)</p>

<hr>

<p>Output:</p>

<pre><code>926844193
107706013
</code></pre>
","13582881"
"go run: cannot run non-main package","14425","","<p>here the simple go application.  I am getting ""go run: cannot run non-main package"" error, if I run following code.</p>

<pre><code>package zsdfsdf

import (
    ""fmt""
)

func Main() {
    fmt.Println(""sddddddd"")
}
</code></pre>

<p>to fix it, I just need to name the package to main.but i dont understand why I need to do that. I should be able to name the package whatever I want.</p>

<p>another question, I know main function is the entry point of the program, you need it. otherwise it will not work. but i see some codes that didn't have main function still works.</p>

<p>click on this link, the example at the bottom of the page didn't use package main and main function, and it still works. just curious why.</p>

<p><a href=""https://developers.google.com/appengine/docs/go/gettingstarted/usingdatastore"">https://developers.google.com/appengine/docs/go/gettingstarted/usingdatastore</a></p>
","<p>You need to specify in your app.yaml file what your app access point is. Take a look <a href=""https://developers.google.com/appengine/docs/go/gettingstarted/helloworld"">here</a>. You need to specify:</p>

<pre><code>application: zsdfsdf
</code></pre>

<p>Also see from that above link:</p>

<blockquote>
  <p>""Note: When writing a stand-alone Go program we would place this code
  in package main. The Go App Engine Runtime provides a special main
  package, so you should put HTTP handler code in a package of your
  choice (in this case, hello).""</p>
</blockquote>

<p>You are correct that all Go programs need the <code>Main</code> method. But it is provided by Google App Engine. That is why your provided example works. Your example would not work locally (not on GAE).</p>
","23870944"
"Instance new Type (Golang)","14339","","<p>Can anyone tell me how to create a new instance of Type from a string? Reflect?</p>

<p>There are examples but they are for the older (pre Go 1 versions) of the language [:(]</p>
","<p>So, if I understand your question correctly, you are asking about how you can create an object when you just have the name of the type as string. So, for example, you might have a string ""MyStruct"" and you want to create an object of this type.</p>

<p>Unfortunately, that's not easily possible because Go is a statically typed language and the linker will eliminate dead code (or inline parts of it). So, there is no guarantee, that your final executable will even contain the code of ""MyStruct"".</p>

<p>You can however, maintain a global <code>map[string]reflect.Type</code> manually. For example by initializing this map in the <code>init()</code> function of your packages which defines such discover-able types. This will also tell the compiler that you are using the types. Afterwards, you can use this map to look up the <a href=""http://golang.org/pkg/reflect/#Type"" rel=""noreferrer"">reflect.Type</a> of the type you want to create and use <a href=""http://golang.org/pkg/reflect/#New"" rel=""noreferrer"">reflect.New</a> to get a pointer to a new object of that type (stored as a reflect.Value). You can extract the object into an interface with something like this:</p>

<pre><code>reflect.New(yourtype).Elem().Interface()
</code></pre>

<p><a href=""http://golang.org/pkg/reflect/#Value.Elem"" rel=""noreferrer"">Elem()</a> will de-reference the pointer and <a href=""http://golang.org/pkg/reflect/#Value.Interface"" rel=""noreferrer"">Interface()</a> will return the reflected value as an <code>interface{}</code>. See <a href=""http://blog.golang.org/2011/09/laws-of-reflection.html"" rel=""noreferrer"">The Laws of Reflection</a> for further details.</p>

<p>PS: There might be a better way to structure your program which doesn't even require reflection and which let the compiler catch more errors. Have you considered using a <a href=""http://en.wikipedia.org/wiki/Factory_method_pattern"" rel=""noreferrer"">factory method</a> for example? An other easy solution might be to maintain a <code>map[string]func() interface{}</code> of functions which can be invoked to create a new object with that name. </p>
","10211940"
"The best way to get a string from a Writer in Go","14329","","<p>I have a piece of code that returns a web page using the built-in template system. It accepts a <code>ResponseWriter</code> to which the resulting markup is written. I now want to get to the markup <strong>as a string</strong> and put it in a database in some cases. I factored out a method that accepts a normal <code>Writer</code> instead of a <code>ResponseWriter</code> and am now trying to get to the written content. Aha - a <code>Pipe</code> may be what I need and then I can get the string with <code>ReadString</code> from the <code>bufio</code> library. But it turns out that the <code>PipeReader</code> coming out from the pipe is not compatible with <code>Reader</code> (that I would need for the <code>ReadString</code> method). W00t. Big surprise. So I could just read into byte[]s using the <code>PipeReader</code> but it feels a bit wrong when <code>ReadString</code> is there. </p>

<p>So what would be the best way to do it? Should I stick with the <code>Pipe</code> and read bytes or is there something better that I haven't found in the manual?</p>
","<p>If your function accepts an io.Writer, you can pass a <code>*bytes.Buffer</code> to capture the output.</p>

<pre><code>// import ""bytes""
buf := new(bytes.Buffer)
f(buf)
buf.String() // returns a string of what was written to it
</code></pre>

<p>If it requires an http.ResponseWriter, you can use a <code>*httptest.ResponseRecorder</code>. A response recorder holds all information that can be sent to a ResponseWriter, but the body is just a <code>*bytes.Buffer</code>.</p>

<pre><code>// import ""net/http/httptest""
r := httptest.NewRecorder
f(r)
r.Body.String() // r.Body is a *bytes.Buffer
</code></pre>
","13766062"
"How to get all dependency files for a program using Golang","14324","","<p>I make a program in golang and after completing the code, if i want to run this code on other pc or VM,, then it does not get all the dependency package files. how can i get all dependency files? </p>
","<p>You can use <code>godep save</code> in your local pc where you complete your program. godep save collect all the dependency files for you. When you move to other pc, just copy the Godep folder with your code and it will solve your problems.</p>
","32758318"
"is there a way to create an instance of a struct from a string?","14293","","<p>Given a struct:</p>

<pre><code>type MyStruct struct {
    A int
    B int
}
</code></pre>

<p>and a string with the struct's name</p>

<pre><code>a := ""MyStruct""
</code></pre>

<p>or</p>

<pre><code>a := ""mypkg.MyStruct""
</code></pre>

<p>How do I create an instance of my struct from the string name rather than the struct? The idea is that I would create an application with all of the structures linked into the binary but create the runtime instances from the strings. (sort of a meta-meta)</p>
","<p>There is no central registry of types in Go, so what you ask is impossible in the general case.</p>

<p>You could build up your own registry by hand to support such a feature using a map from strings to <code>reflect.Type</code> values corresponding to each type.  For instance:</p>

<pre><code>var typeRegistry = make(map[string]reflect.Type)

func init() {
    typeRegistry[""MyString""] = reflect.TypeOf(MyString{})
    ...
}
</code></pre>

<p>You can then create instances of the types like so:</p>

<pre><code>func makeInstance(name string) interface{} {
    v := reflect.New(typeRegistry[name]).Elem()
    // Maybe fill in fields here if necessary
    return v.Interface()
}
</code></pre>
","23031445"
"Golang : Escaping single quotes","14273","","<p>Is there a way to escape single quotes in go?</p>

<p>The following:</p>

<pre><code>str := ""I'm Bob, and I'm 25.""
str = strings.Replace(str, ""'"", ""\'"", -1)
</code></pre>

<p>Gives the error: unknown escape sequence: '</p>

<p>I would like str to be</p>

<pre><code>""I\'m Bob, and I\'m 25.""
</code></pre>
","<p>You need to ALSO escape the slash in strings.Replace.</p>

<pre><code>str := ""I'm Bob, and I'm 25.""
str = strings.Replace(str, ""'"", ""\\'"", -1)
</code></pre>

<p><a href=""https://play.golang.org/p/mZaaNU3FHw"" rel=""noreferrer"">https://play.golang.org/p/mZaaNU3FHw</a></p>
","33170699"
"How to implement interface method with return type is an interface in Golang","14191","","<p>Here is my code:</p>

<pre><code>type IA interface {
    FB() IB
}

type IB interface {
    Bar() string
}

type A struct {
    b *B
}

func (a *A) FB() *B {
    return a.b
}

type B struct{}

func (b *B) Bar() string {
    return ""Bar!""
}
</code></pre>

<p>I get an error:</p>

<pre><code>cannot use a (type *A) as type IA in function argument:
    *A does not implement IA (wrong type for FB method)
        have FB() *B
        want FB() IB
</code></pre>

<p>Here is the full code: <a href=""http://play.golang.org/p/udhsZgW3W2"">http://play.golang.org/p/udhsZgW3W2</a><br>
I should edit the <strong>IA</strong> interface or modifi my <strong>A</strong> struct?<br>
What if I define IA, IB in a other package (so I can share these interface), I must import my package and use the IB as returned type of A.FB(), is it right?</p>
","<p>Just change </p>

<pre><code>func (a *A) FB() *B {
    return a.b
}
</code></pre>

<p>into</p>

<pre><code>func (a *A) FB() IB {
    return a.b
}
</code></pre>

<p>Surely <code>IB</code> can be defined in another package. So if both interfaces are defined in package <code>foo</code> and the implementations are in package <code>bar</code>, then the declaration is</p>

<pre><code>type IA interface {
    FB() IB
}
</code></pre>

<p>while the implementation is</p>

<pre><code>func (a *A) FB() foo.IB {
    return a.b
}
</code></pre>
","11921975"
"Go templates : range over slice of structs instead of struct of slices","14164","","<p>Having played around with golang's html templates a bit, all the examples I found for looping over objects in templates were passing structs of slices to the template, somewhat like in this example :</p>

<pre><code>type UserList struct {
    Id   []int
    Name []string
}

var templates = template.Must(template.ParseFiles(""main.html""))

func rootHandler(w http.ResponseWriter, r *http.Request) {
    users := UserList{
        Id:   []int{0, 1, 2, 3, 4, 5, 6, 7},
        Name: []string{""user0"", ""user1"", ""user2"", ""user3"", ""user4""},
    }
    templates.ExecuteTemplate(w, ""main"", &amp;users)
}
</code></pre>

<p>with the ""main"" template being :</p>

<pre><code>{{define ""main""}}
    {{range .Name}}
        {{.}}
    {{end}}
{{end}}
</code></pre>

<p>This works, but i don't get how i'm supposed to display each Id just next to its corresponding Name if i'm ranging on the .Name property only. I would find it more logical to treat each user as an object to group its properties when displaying.</p>

<p>Thus my question :</p>

<p><strong>Now, what if i wanted to pass a slice of structs to the template ?</strong> What would be the syntax to make this work ? I haven't found or understood how to in the official html/template doc.
I imagined something looking remotely like this :</p>

<pre><code>type User struct {
    Id   int
    Name string
}
type UserList []User
var myuserlist UserList = ...
</code></pre>

<p>and a template looking somewhat like this : (syntax here is deliberately wrong, it's just to get understood)</p>

<pre><code>{{define ""main""}}
    {{for each User from myuserlist as myuser}}
        {{myuser.Id}}
        {{myuser.Name}}
    {{end}}
{{end}}
</code></pre>

<p>Thanks.</p>
","<p>Use:</p>

<pre><code>{{range .}}
    {{.Id}}
    {{.Name}}
{{end}}
</code></pre>

<p>for the template.<br>
Here is a example: <a href=""http://play.golang.org/p/A4BPJOcfpB"" rel=""noreferrer"">http://play.golang.org/p/A4BPJOcfpB</a><br>
You need to read more out the ""dot"" in the package overview <a href=""http://golang.org/pkg/text/template/#pkg-overview"" rel=""noreferrer"">http://golang.org/pkg/text/template/#pkg-overview</a> (checkout the Pipelines part)</p>
","24556460"
"How to execute a simple Windows DOS command in Golang?","14138","","<p>Can someone be so kind to tell me how to run a simple DOS command in Go? </p>

<p>When running something like this:</p>

<pre><code>exec.Command(""del"", ""c:\\aaa.txt"")
</code></pre>

<p>The output is:</p>

<p>""del: executable file not found in %path%""</p>

<p>Again I thought this would be simple task in Go, but after 2 hours of searching, I could find no examples of this. Can someone also tell me what I'm doing wrong, because I cannot find good examples on the simplest common tasks in Go.</p>
","<p>I got the same error as you.
But dystroy is correct: You can't run <code>del</code> or any other command built into <code>cmd</code> because there is no <code>del.exe</code> file (or any other del-executable for that matter).</p>

<p>I got it to work with:</p>

<pre><code>package main

import(
    ""fmt""
    ""os/exec""
)

func main(){    
    c := exec.Command(""cmd"", ""/C"", ""del"", ""D:\\a.txt"")

    if err := c.Run(); err != nil { 
        fmt.Println(""Error: "", err)
    }   
}
</code></pre>
","13013520"
"How do you select all records from a mongodb collection in golang using mgo","14101","","<p>In MongoDB doing something like <code>db.mycollection.find()</code> returns all documents in a collection.</p>

<p>When working in GoLang using the package <strong>labix.org/v2/mgo</strong> and I do for example:</p>

<pre><code>query := db.C(""client"").Find();
</code></pre>

<p>It complains that it requires input in the form of an interface. All I need to do is retrieve all documents and iterate through them and display each one for now. How do I achieve this effect? All examples I have seen seem to have filters in place.</p>
","<p>Found a solution:</p>

<pre><code>    var results []client

    err := db.C(""client"").Find(nil).All(&amp;results)
    if err != nil {
        // TODO: Do something about the error
    } else {
        fmt.Println(""Results All: "", results) 
    }
</code></pre>
","24681244"
"Return pointer to local struct","14064","","<p>I see some code samples with constructs like this:</p>

<pre><code>type point struct {
  x, y int
}

func newPoint() *point {
  return &amp;point{10, 20}
}
</code></pre>

<p>I have C++ background and it seems like error for me. What are the semantic of such construct? Is new point allocated on the stack or heap?</p>
","<p>Go performs pointer escape analysis. If the pointer escapes the local stack, which it does in this case, the object is allocated on the heap. If it doesn't escape the local function, the compiler is free to allocate it on the stack (although it makes no guarantees; it depends on whether the pointer escape analysis can prove that the pointer stays local to this function).</p>
","13715281"
"How to read input from a HTML form and save it in a file - Golang","13963","","<p>I am trying to set up a very simple web server where the user access a site and writes a string and an int.Then I want to save these two inputs, my idea was to do it to a text file that also can be displayed in the browser: .../textfile/</p>

<p>I don´t know what the norm on SO is on how much code is OK to post but here is what I have so far:</p>

<pre><code>type Person struct {
    name  string
    hours int
}

const filename string = ""timelister""

func upload(w http.ResponseWriter, r *http.Request) {
    t, _ := template.ParseFiles(""upload.html"")
    t.Execute(w, nil)
}

func (person *Person) open() {
    newFilename := filename + "".txt""
    _, err := os.OpenFile(newFilename, os.O_RDWR|os.O_APPEND|os.O_CREATE, 0666)
    if err != nil {
        log.Fatal(""Open Filename: "", err)
    }
}

func returnInput() //want to implement this
func saveInput() //want to implemet this


func main() {
    http.HandleFunc(""/"", upload)
    http.ListenAndServe("":8080"", nil)

}
</code></pre>

<p>And my HTML-form: (without all the formating)</p>

<pre><code>     Name: &lt;input type=""text"" name=""Name""&gt;
        &lt;input type=""submit"" value=""submit""&gt;&lt;/br&gt;
     Hours: &lt;input type=""text"" name=""Hours""&gt;
            &lt;input type=""submit"" value=""submit""&gt;
</code></pre>

<p>So my initial thoughts was to implement two functions returnInput() and saveInput() but maybe there are som built in functions that are easier to use?</p>

<p>If somebody could point me in the right direction on how to save the input from the HTML form than I would be very greatful! Thanks in advance.</p>
","<p>You'll need to pick a format to write to the file. Let's pick JSON for no reason in particular. So given a form like:</p>

<pre><code>&lt;form action=""/save"" method=""post""&gt; ... &lt;/form&gt;
</code></pre>

<p>you could have the following handler</p>

<pre><code>import (
    ""strconv""
    ""http""
    ""os""
    ""encoding/json""
)

type Data struct {
    Name string
    Hours int
}

func save(w http.ResponseWriter, r *http.Request) {
    name := r.FormValue(""Name"")
    hours, err := strconv.Atoi(r.FormValue(""Hours""))
    if err != nil {
        http.Error(w, err.Error(), 500)
        return
    }

    data := &amp;Data{name, hours}

    b, err := json.Marshal(data)
    if err != nil {
        http.Error(w, err.Error(), 500)
        return
    }

    f, err := os.Open(""somefile.json"")
    if err != nil {
        http.Error(w, err.Error(), 500)
        return
    }

    f.Write(b)
    f.Close()
}

func init() {
    http.HandleFunc(""/save"", save)
}
</code></pre>
","12514465"
"Nullable time.Time in golang","13939","","<p>I have a struct that I intend to populate with a database record, one of the datetime columns is nullable:</p>

<pre><code>type Reminder struct {
    Id         int
    CreatedAt  time.Time
    RemindedAt *time.Time
    SenderId   int
    ReceiverId int
}
</code></pre>

<p>Since pointers can be <code>nil</code>, I've made <code>RemindedAt</code> a pointer, but this will require the code to know the difference between the <code>At</code> variables. Is there a more elegant way to handle this?</p>
","<p>You can use <code>pq.NullTime</code>.</p>

<p>From <a href=""https://github.com/lib/pq/blob/8c6ee72f3e6bcb1542298dd5f76cb74af9742cec/encode.go#L586"" rel=""nofollow noreferrer"">lib/pq</a> on github:</p>

<pre><code>type NullTime struct {
    Time  time.Time
    Valid bool // Valid is true if Time is not NULL
}

// Scan implements the Scanner interface.
func (nt *NullTime) Scan(value interface{}) error {
    nt.Time, nt.Valid = value.(time.Time)
    return nil
}

// Value implements the driver Valuer interface.
func (nt NullTime) Value() (driver.Value, error) {
    if !nt.Valid {
        return nil, nil
    }
    return nt.Time, nil
}
</code></pre>
","24564724"
"Go json.Marshal(struct) returns ""{}""","13868","","<pre><code>type TestObject struct {
    kind string `json:""kind""`
    id   string `json:""id, omitempty""`
    name  string `json:""name""`
    email string `json:""email""`
}

func TestCreateSingleItemResponse(t *testing.T) {
    testObject := new(TestObject)
    testObject.kind = ""TestObject""
    testObject.id = ""f73h5jf8""
    testObject.name = ""Yuri Gagarin""
    testObject.email = ""Yuri.Gagarin@Vostok.com""

    fmt.Println(testObject)

    b, err := json.Marshal(testObject)

    if err != nil {
        fmt.Println(err)
    }

    fmt.Println(string(b[:]))
}
</code></pre>

<p>Here is the output:</p>

<pre><code>[ `go test -test.run=""^TestCreateSingleItemResponse$""` | done: 2.195666095s ]
    {TestObject f73h5jf8 Yuri Gagarin Yuri.Gagarin@Vostok.com}
    {}
    PASS
</code></pre>

<p>Why is the JSON essentially empty?</p>
","<p>You need to <a href=""https://golang.org/ref/spec#Exported_identifiers"" rel=""noreferrer"">export</a> the fields in TestObject by starting the field names with a Unicode uppercase letter.</p>

<pre><code>type TestObject struct {
 Kind string `json:""kind""`
 ID   string `json:""id,omitempty""`
 Name  string `json:""name""`
 Email string `json:""email""`
}
</code></pre>

<p>The encoding/json package and similar packages ignore unexported fields.</p>

<p>The <code>`json:""...""`</code> strings that follow the field declarations are <a href=""https://golang.org/pkg/reflect/#StructTag"" rel=""noreferrer"">struct tags</a>. The tags in this struct set the names of the struct's fields when marshaling to and from JSON.</p>

<p><kbd><a href=""http://play.golang.org/p/Ed0MHybrAb"" rel=""noreferrer"">playground</a></kbd></p>
","26327436"
"Default value in Go's method","13833","","<p>Is there a way to specify default value in Go's function? I am trying to find this in the documentation but I can't find anything that specifies that this is even possible.</p>

<pre><code>func SaySomething(i string = ""Hello"")(string){
...
}
</code></pre>
","<p>No, the powers that be at Google chose not to support that.</p>

<p><a href=""https://groups.google.com/forum/#!topic/golang-nuts/-5MCaivW0qQ"" rel=""noreferrer"">https://groups.google.com/forum/#!topic/golang-nuts/-5MCaivW0qQ</a></p>
","19612688"
"SSL is not enabled on the server","13815","","<p>Trying to communicate with a postgres database with go, preparing the statement like this:</p>

<pre><code>var stmt *sql.Stmt
var err error

stmt, err = db.Prepare(selectStatement)
if err != nil {
    fmt.Printf(""db.Prepare error: %v\n"",err)
    return err
}
</code></pre>

<p>Throws the following error:</p>

<pre><code>db.Prepare error: pq: SSL is not enabled on the server
</code></pre>

<p>Any solution ?</p>

<p>I can add more information, if needed.</p>
","<p>You should establish DB connection without SSL encryption, like that:</p>

<pre><code>db, err := sql.Open(""postgres"", ""user=test password=test dbname=test sslmode=disable"") 
</code></pre>
","21959214"
"Access out of loop value inside golang template's loop","13746","","<p>I have this struct :</p>

<pre><code>type Site struct {
    Name string
    Pages []int
}
</code></pre>

<p>I pass an instance of <code>Site</code> to a <a href=""http://golang.org/pkg/text/template/"" rel=""noreferrer"">template</a>.</p>

<p>If I want to write a list of all pages, I do</p>

<pre><code>{{range .Pages}}
    &lt;li&gt;&lt;a href=""{{.}}""&gt;{{.}}&lt;/a&gt;&lt;/li&gt;
{{end}}
</code></pre>

<p>Now, what's the simplest way to use the <code>Name</code> field inside the loop (for example to change the <code>href</code> to <code>Name/page</code>) ?</p>

<p>Note that a solution based on the fact that the external object is the global one that was passed to the template would be OK.</p>
","<p>You should know that the variable passed in to the template is available as <code>$</code>.</p>

<pre><code>{{range .Pages}}
    &lt;li&gt;&lt;a href=""{{.}}""&gt;{{$.Name}}&lt;/a&gt;&lt;/li&gt;
{{end}}
</code></pre>

<p>(See the <a href=""http://golang.org/pkg/text/template/#hdr-Variables"" rel=""noreferrer"">text/template</a> documentation under ""Variables"".)</p>
","22873315"
"golang - mysql Insert multiple data at once?","13723","","<p>I know that Insert multiple data at once more efficiency:</p>

<pre><code>INSERT INTO test(n1, n2, n3) 
VALUES(v1, v2, v3),(v4, v5, v6),(v7, v8, v9);
</code></pre>

<p>How to do that in golang?</p>

<pre><code>data := []map[string]string{
   {""v1"":""1"", ""v2"":""1"", ""v3"":""1""},
   {""v1"":""2"", ""v2"":""2"", ""v3"":""2""},
   {""v1"":""3"", ""v2"":""3"", ""v3"":""3""},
}
//I do not want to do it
for _, v := range data {
    sqlStr := ""INSERT INTO test(n1, n2, n3) VALUES(?, ?, ?)""
    stmt, _ := db.Prepare(sqlStr)
    res, _ := stmt.Exec(v[""v1""], v[""v2""], v[""v3""])
}
</code></pre>

<p>Use string splice, but it's not good. db.Prepare more safer, right?</p>

<pre><code>sqlStr := ""INSERT INTO test(n1, n2, n3) VALUES""
for k, v := range data {
    if k == 0 {
        sqlStr += fmt.Sprintf(""(%v, %v, %v)"", v[""v1""], v[""v2""], v[""v3""])
    } else {
        sqlStr += fmt.Sprintf("",(%v, %v, %v)"", v[""v1""], v[""v2""], v[""v3""])
    } 
}
res, _ := db.Exec(sqlStr)
</code></pre>

<p>I need a function safer and efficient insert mulitple data at once.</p>
","<p>why not something like this? (writing here without testing so there might be syntax errors):</p>

<pre><code>sqlStr := ""INSERT INTO test(n1, n2, n3) VALUES ""
vals = []interface{}{}

for _, row := range data {
    sqlStr += ""(?, ?, ?),""
    vals = append(vals, row[""v1""], row[""v2""], row[""v3""])
}
//trim the last ,
sqlStr = sqlStr[0:len(sqlStr)-2]
//prepare the statement
stmt, _ := db.Prepare(sqlStr)

//format all vals at once
res, _ := stmt.Exec(vals...)
</code></pre>
","21112176"
"Golang struct calling embedded type methods when method has been overloaded","13706","","<p>I am trying to learn Go, and I found a good resource <a href=""https://github.com/Unknwon/build-web-application-with-golang_EN/blob/master/eBook/02.5.md#method-overload"">here</a>.</p>

<p>The example given on method overloading is reproduced below:</p>

<pre><code>package main
import ""fmt""

type Human struct {
    name string
    age int
    phone string
}


type Employee struct {
    Human 
    company string
}

func (h *Human) SayHi() {
    fmt.Printf(""Hi, I am %s you can call me on %s\n"", h.name, h.phone)
}

func (e *Employee) SayHi() {
    fmt.Printf(""Hi, I am %s, I work at %s. Call me on %s\n"", e.name,
        e.company, e.phone) //Yes you can split into 2 lines here.
}

func main() {
    sam := Employee{Human{""Sam"", 45, ""111-888-XXXX""}, ""Golang Inc""}
    sam.SayHi()
}
</code></pre>

<p>Is it possible to call the ""base"" struct's (Human's) methods, eg. sam.Human.SayHi()  Downcasting doesn't work (because there is no type hierarchy right?)</p>
","<p>You can access the embedded struct of a parent struct by calling the member of the parent with the name of the embedded type's name. That's a mouthful, so it's probably easier to demonstrate it.</p>

<pre><code> sam := Employee{Human{""Sam"", 45, ""111-888-XXXX""}, ""Golang Inc""}
 sam.SayHi() // calls Employee.SayHi
 sam.Human.SayHi() // calls Human.SayHi
</code></pre>

<p>Outputs</p>

<pre><code> Hi, I am Sam, I work at Golang Inc. Call me on 111-888-XXXX
 Hi, I am Sam you can call me on 111-888-XXXX
</code></pre>
","20862467"
"Checking if a channel has a ready-to-read value, using Go","13692","","<p>How do I check if a channel has a value for me to read?</p>

<p>I don't want to block when reading a channel. I want to see if it has a value. If it does have one, I'll read it. If it doesn't have one (yet), I'll do something else and check back again later.</p>

<p>Thanks!</p>
","<p><strong>WARNING</strong>: This is no longer accurate, see the answer below.</p>

<p><s>From the docs:</p>

<blockquote>
  <p>If a receive expression is used in an
  assignment or initialization of the
  form</p>

<pre><code>x, ok = &lt;-ch
x, ok := &lt;-ch
var x, ok = &lt;-ch
</code></pre>
  
  <p>the receive operation becomes
  non-blocking. If the operation can
  proceed, the boolean variable ok will
  be set to true and the value stored in
  x; otherwise ok is set to false and x
  is set to the zero value for its type
  </s></p>
</blockquote>
","3398545"
"golang - how to download file in browser from golang server?","13676","","<p>My code get file from remote url and download file in browser:</p>

<pre><code>func Index(w http.ResponseWriter, r *http.Request) {
    url := ""http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png""

    ...

    resp, err := client.Get(url)
    if err != nil {
        fmt.Println(err)
    }
    defer resp.Body.Close()

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(err)
    }

    fmt.Println(len(body))
    //download the file in browser

}

func main() {
    http.HandleFunc(""/"", Index)
    err := http.ListenAndServe("":8000"", nil)

    if err != nil {
        fmt.Println(err)
    }
}
</code></pre>

<p>code: <a href=""http://play.golang.org/p/x-EyR2zFjv"">http://play.golang.org/p/x-EyR2zFjv</a></p>

<p>Get file is ok, but how to downloaded it in browser?</p>

<p>Thanks.</p>
","<p>To make the browser open the download dialog, add a <code>Content-Disposition</code> and <code>Content-Type</code> headers to the response:</p>

<pre><code>w.Header().Set(""Content-Disposition"", ""attachment; filename=WHATEVER_YOU_WANT"")
w.Header().Set(""Content-Type"", r.Header.Get(""Content-Type""))
</code></pre>

<p>Do this BEFORE sending the content to the client. You might also want to copy the <code>Content-Length</code> header of the response to the client, to show proper progress.</p>

<p>To stream the response body to the client without fully loading it into memory (for big files this is important) - simply copy the body reader to the response writer:</p>

<pre><code>io.Copy(w, resp.Body)
</code></pre>

<p><code>io.Copy</code> is a nice little function that take a reader interface and writer interface, reads data from one and writes it to the other. Very useful for this kind of stuff!</p>

<p>I've modified your code to do this: <a href=""http://play.golang.org/p/v9IAu2Xu3_"" rel=""noreferrer"">http://play.golang.org/p/v9IAu2Xu3_</a></p>
","24116517"
"Call a method from a Go template","13653","","<p>Let's say I have</p>

<pre><code>type Person struct {
  Name string
}
func (p *Person) Label() string {
  return ""This is "" + p.Name
}
</code></pre>

<p>How can I use this method from a html/template ? I would need something like this in my template:</p>

<pre><code>{{ .Label() }}
</code></pre>
","<p>Just omit the parentheses and it should be fine. Example:</p>

<pre><code>package main

import (
    ""html/template""
    ""log""
    ""os""
)

type Person string

func (p Person) Label() string {
    return ""This is "" + string(p)
}

func main() {
    tmpl, err := template.New("""").Parse(`{{.Label}}`)
    if err != nil {
        log.Fatalf(""Parse: %v"", err)
    }
    tmpl.Execute(os.Stdout, Person(""Bob""))
}
</code></pre>

<p>According to the <a href=""https://golang.org/pkg/text/template/#hdr-Arguments"" rel=""nofollow noreferrer"">documentation</a>, you can call any method which returns one value (of any type) or two values if the second one is of type <code>error</code>. In the later case, <code>Execute</code> will return that error if it is non-nil and stop the execution of the template.</p>
","10200273"
"Golang: Accessing a map using its reference","13609","","<p>I try to loop through a map, that I pass as a pointer to a function, but I can't find a way to access the elements. This is the code:</p>

<pre><code>func refreshSession(sessions *map[string]Session) {
    now := time.Now()
    for sid := range *sessions {
        if now.After(*sessions[sid].timestamp.Add(sessionRefresh)) {
            delete( *sessions, sid )
        }
    }
}
</code></pre>

<p>Line 4 in this example return following compile error:</p>

<pre><code>./controller.go:120: invalid operation: sessions[sid] (type *map[string]Session does not support indexing)
</code></pre>

<p>I tried brackets, but it had no effect. If I take away all reference operators (* &amp;) then it compiles fine. </p>

<p>How must I write this?</p>
","<p>You don't need to use a pointer with a map.</p>

<blockquote>
  <p>Map types are reference types, like pointers or slices[1]</p>
</blockquote>

<p>If you needed to change the <code>Session</code> you could use a pointer:</p>

<p><code>map[string]*Session</code></p>

<p><a href=""https://blog.golang.org/go-maps-in-action"">[1]https://blog.golang.org/go-maps-in-action</a></p>
","28384528"
"Convert Value type to Map in Golang?","13590","","<p>I'm getting this return value from a function call in the ""reflect"" package: </p>

<p><code>&lt; map[string]string Value &gt;</code>.</p>

<p>Wondering if I can access the actual map inside the return value and if so, how?</p>

<p>EDIT:</p>

<p>So this is where I'm making the call which returns the Value object. 
It returns <code>[&lt; map[string]string Value &gt;]</code> to which I grab the first object in that array. However, I'm not sure how to convert <code>[&lt; map[string]string Value &gt;]</code> into a regular map. </p>

<pre><code>view_args := reflect.ValueOf(&amp;controller_ref).MethodByName(action_name).Call(in)
</code></pre>
","<p>Most reflect <code>Value</code> objects can be converted back to a <code>interface{}</code> value using the <a href=""http://golang.org/pkg/reflect/#Value.Interface""><code>.Interface()</code> method</a>.</p>

<p>After obtaining this value, you can assert it back to the map you want. Example (<a href=""http://play.golang.org/p/0ae0poz9w1"">play</a>):</p>

<pre><code>m := map[string]int{""foo"": 1, ""bar"": 3}
v := reflect.ValueOf(m)
i := v.Interface()
a := i.(map[string]int)

println(a[""foo""]) // 1
</code></pre>

<p>In the example above, <code>m</code> is your original map and <code>v</code> is the reflected value. The interface value <code>i</code>, acquired by the <code>Interface</code> method is asserted to be of type <code>map[string]int</code> and this value is used as such in the last line.</p>
","20714739"
"how to interpolate a number in a string in golang","13571","","<pre><code>package main

import (
    ""fmt""
)

func main() {
    fmt.Println(say(9))
}

func say(num int)(total string){
return fmt.Sprintf(""There are %s reasons to code!"", num)
}
</code></pre>

<p>my output is</p>

<pre><code>There are %!s(int=9) reasons to code!
</code></pre>

<p>What should I be doing to interpolate a number inside a string?</p>
","<p>If you want to always use the ""default"" representation of no matter what type, use <code>%v</code> as in</p>

<pre><code>fmt.Sprintf(""There are %v reasons to code!"", num)
</code></pre>
","21449451"
"Is a Go goroutine a coroutine?","13564","","<p>In the Google I/O 2012 presentation <a href=""https://www.youtube.com/watch?v=f6kdp27TYZs"" rel=""noreferrer""><em>Go Concurrency Patterns</em></a>, Rob Pike mentions that several <em>goroutines</em> can live in one thread. Does this imply that they are implemented as <a href=""http://en.wikipedia.org/wiki/Coroutine"" rel=""noreferrer"">coroutines</a>? If not, how they are implemented? Links to source code would be welcome.</p>
","<p>Not quite. The Go FAQ section <a href=""http://golang.org/doc/faq#goroutines""><em>Why goroutines instead of threads?</em></a> explains:</p>

<blockquote>
  <p>Goroutines are part of making concurrency easy to use. The idea, which has been around for a while, is to multiplex independently executing functions—coroutines—onto a set of threads. When a coroutine blocks, such as by calling a blocking system call, the run-time automatically moves other coroutines on the same operating system thread to a different, runnable thread so they won't be blocked. The programmer sees none of this, which is the point. The result, which we call goroutines, can be very cheap: unless they spend a lot of time in long-running system calls, they cost little more than the memory for the stack, which is just a few kilobytes.</p>
  
  <p>To make the stacks small, Go's run-time uses segmented stacks. A newly minted goroutine is given a few kilobytes, which is almost always enough. When it isn't, the run-time allocates (and frees) extension segments automatically. The overhead averages about three cheap instructions per function call. It is practical to create hundreds of thousands of goroutines in the same address space. If goroutines were just threads, system resources would run out at a much smaller number.</p>
</blockquote>
","19486183"
"How to `go test` all testings in my project?","13516","","<p>The <code>go test</code> command covers <code>*_test.go</code> files in only one dir.</p>

<p>I want to <code>go test</code> the whole project, which means the test should cover all <code>*_test.go</code> files in the dir <code>./</code> and every chindren tree dir under the dir <code>./</code>.</p>

<p>What's the command to do this?</p>
","<p>This should run all tests in current directory and all of its subdirectories:</p>

<pre><code>$ go test ./...
</code></pre>

<p>This should run all tests with import path prefixed with <code>foo/</code>:</p>

<pre><code>$ go test foo/...
</code></pre>

<p>This should run all tests import path prefixed with <code>foo</code>:</p>

<pre><code>$ go test foo...
</code></pre>

<p>This should run all tests in your $GOPATH:</p>

<pre><code>$ go test ...
</code></pre>
","16353449"
"In golang how can I write the stdout of an exec.Cmd to a file?","13512","","<p>I am trying to run a shell command, capture stdout and write that output to a file. However, I seem to be missing a few steps, as the file I am trying to write is empty when the program exists. How can I capture the stdout of the command and write that to a file?</p>

<pre><code>package main

import (
    ""bufio""
    ""io""
    ""os""
    ""os/exec""
)

func main() {

    cmd := exec.Command(""echo"", ""'WHAT THE HECK IS UP'"")

    // open the out file for writing
    outfile, err := os.Create(""./out.txt"")
    if err != nil {
        panic(err)
    }
    defer outfile.Close()

    stdoutPipe, err := cmd.StdoutPipe()
    if err != nil {
        panic(err)
    }

    writer := bufio.NewWriter(outfile)

    err = cmd.Start()
    if err != nil {
        panic(err)
    }

    go io.Copy(writer, stdoutPipe)
    cmd.Wait()
}
</code></pre>
","<p>You need to flush the writer. Add the following:</p>

<pre><code>    writer := bufio.NewWriter(outfile)
    defer writer.Flush()
</code></pre>
","18987089"
"Golang remove all contents of a directory","13498","","<p>I'm new to Go and can't seem to find a way to delete all the contents of a directory when I don't know the contents.</p>

<p>I've tried:</p>

<pre><code>os.RemoveAll(""/tmp/*"")
os.Remove(""/tmp/*"")
</code></pre>

<p>but get <code>remove *: no such file or directory</code> or <code>invalid argument</code>.</p>

<p>And of course if you do:</p>

<pre><code>os.RemoveAll(""/tmp/"")
</code></pre>

<p>it deletes the <code>tmp</code> directory as well. Which is not what I want.</p>
","<p>Write a simple <code>RemoveContents</code> function. For example,</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
    ""path/filepath""
    ""strings""
)

func RemoveContents(dir string) error {
    d, err := os.Open(dir)
    if err != nil {
        return err
    }
    defer d.Close()
    names, err := d.Readdirnames(-1)
    if err != nil {
        return err
    }
    for _, name := range names {
        err = os.RemoveAll(filepath.Join(dir, name))
        if err != nil {
            return err
        }
    }
    return nil
}

func main() {
    dir := strings.TrimSuffix(filepath.Base(os.Args[0]), filepath.Ext(os.Args[0]))
    dir = filepath.Join(os.TempDir(), dir)
    dirs := filepath.Join(dir, `tmpdir`)
    err := os.MkdirAll(dirs, 0777)
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
    file := filepath.Join(dir, `tmpfile`)
    f, err := os.Create(file)
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
    f.Close()
    file = filepath.Join(dirs, `tmpfile`)
    f, err = os.Create(file)
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
    f.Close()

    err = RemoveContents(dir)
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
}
</code></pre>
","33451503"
"Why doesn't Go allow nested function declarations (functions inside functions)?","13483","","<p><em>Edit:</em> If it was not clear what I was asking: <strong>what are the problems that are mitigated by not allowing nested function declarations?</strong></p>

<p>Lambdas work as expected:</p>

<pre><code>func main() {
    inc := func(x int) int { return x+1; }
}
</code></pre>

<p>However, the following declaration inside a declaration is not allowed:</p>

<pre><code>func main() {
    func inc(x int) int { return x+1; }
}
</code></pre>

<p>For what reason are nested functions not allowed?</p>
","<p>I think there are 3 reasons why this obvious feature isn't allowed</p>

<ol>
<li>It would complicate the compiler slightly.  At the moment the compiler knows all functions are at the top level.</li>
<li>It would make a new class of programmer error - you could refactor something and accidentally nest some functions.</li>
<li>Having a different syntax for functions and closures is a good thing.  Making a closure is potentially more expensive than making a function so you should know you are doing it.</li>
</ol>

<p>Those are just my opinions though - I haven't seen an official pronouncement from the language designers.</p>
","21967381"
"Go net/http request","13457","","<p>Can somebody help to convert my ruby code to Go.  Kindly refer to my ruby code below.</p>

<pre><code> query=       ""test""
 request =        Net::HTTP::Post.new(url)
 request.body =     query
 response =   Net::HTTP.new(host, post).start{|http http.request(request)}   
</code></pre>

<p>to Go. </p>
","<p>You seem to want to POST a query, which would be similar <a href=""https://stackoverflow.com/q/24455147/6309"">to this answer</a>:</p>

<pre><code>import (
    ""bytes""
    ""fmt""
    ""io/ioutil""
    ""net/http""
)


func main() {
    url := ""http://xxx/yyy""
    fmt.Println(""URL:&gt;"", url)

    var query = []byte(`your query`)
    req, err := http.NewRequest(""POST"", url, bytes.NewBuffer(query))
    req.Header.Set(""X-Custom-Header"", ""myvalue"")
    req.Header.Set(""Content-Type"", ""text/plain"")

    client := &amp;http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()

    fmt.Println(""response Status:"", resp.Status)
    fmt.Println(""response Headers:"", resp.Header)
    body, _ := ioutil.ReadAll(resp.Body)
    fmt.Println(""response Body:"", string(body))
}
</code></pre>

<p>Replace ""<code>text/plain</code>"" with ""<code>application/json</code>"" if your query is a JSON one.</p>
","27034623"
"Error: struct Type is not an expression","13428","","<p>Using <code>struct</code> and a function that is supposed to print out the struct's elements, I have written this simple program:</p>

<pre><code>package main

import ""fmt""

type Salutation struct {
    name     string
    greeting string
}

func Greet(salutation Salutation) {
    fmt.Println(salutation.name)
    fmt.Println(salutation.greeting)
}

func main() {
    var s = Salutation
    s.name = ""Alex""
    s.greeting = ""Hi""
    Greet(s)
}
</code></pre>

<p>When I run it I get the error <code>go:16: type Salutation is not an expression</code>. What goes wrong here?</p>

<p>Interestingly enough, when I change the definition of <code>s</code> to <code>var s = Salutation {""Alex"", ""Hi""}</code> it works just fine. But they are basically different syntactic ways to define the same entity. That's why I don't understand the source of the error. </p>
","<p>The error is on this line</p>

<pre><code>    var s = Salutation
</code></pre>

<p>The thing to the right of the = must evaluate to a value. <code>Salutation</code> is type, not  value.  Here are three ways to declare s:</p>

<pre><code> var s Salutation      // variable declaration using a type 

 var s = Salutation{}  // variable declaration using a value

 s := Salutation{}     // short variable declaration
</code></pre>

<p>The result of all three declarations is identical. The third variation is usually preferred to the second, but cannot be used to declare a package-level variable.</p>

<p>See the language specification <a href=""https://golang.org/ref/spec#Variable_declarations"">for all of the details on variable declarations</a>.</p>
","27455400"
"golang range references instead values","13417","","<p>I saw that range returns the key and the ""copy"" of the value. Is there a way for that range to return the adress of the item? Example</p>

<pre><code>package main

import ""fmt""

type MyType struct {
    field string
}

func main() {
    var array [10]MyType

    for _, e := range array {
        e.field = ""foo""
    }

    for _, e := range array {
        fmt.Println(e.field)
        fmt.Println(""--"")
    }
}
</code></pre>

<p><a href=""http://play.golang.org/p/AFOGG9NGpx"" rel=""noreferrer"">http://play.golang.org/p/AFOGG9NGpx</a></p>

<p>Here ""field"" is not modified because range sends the copy of field, 
Do I have to use index or is there any other way to modify the value?</p>

<p>Thanks for reading.</p>
","<p>The short &amp; direct answer: <strong>no, use the array index instead of the value</strong></p>

<p>So the above code becomes:</p>

<pre><code>package main

import ""fmt""

type MyType struct {
    field string
}

func main() {
    var array [10]MyType

    for idx, _ := range array {
        array[idx].field = ""foo""
    }

    for _, e := range array {
        fmt.Println(e.field)
        fmt.Println(""--"")
    }
}
</code></pre>
","29498133"
"In Go, how to write a multi-line statement?","13409","","<p>In python, we use backslash to indicate that the current statement continues to next line</p>

<p>for example,</p>

<pre><code>a = b + c + s \
    + x + y
</code></pre>

<p>or simply,</p>

<pre><code>a = b + c + s +
    x + y
</code></pre>

<p>Is it possible to do that in Go language? Thanks</p>
","<p>Sure it is, just put an operator at the end, for example:</p>

<pre><code>a = b + c + s +
    x + y
</code></pre>

<p>Also note that it's not possible to break the line before the operator. The following code is <strong>invalid</strong>:</p>

<pre><code>a = b + c + s
    + x + y
</code></pre>

<p>The rule is described <a href=""http://golang.org/doc/effective_go.html#semicolons"" rel=""noreferrer"">here</a> and in the <a href=""http://golang.org/doc/go_spec.html#Semicolons"" rel=""noreferrer"">specification</a>.</p>
","6460470"
"how can i pass struct to function as parameter in go lang","13398","","<p>how can i pass struct to function as parameter in go lang</p>

<p>there is my code;</p>

<pre><code>package main

import (
    ""fmt""
)

type MyClass struct {
    Name string
}

func test(class interface{}) {
    fmt.Println(class.Name)
}

func main() {

    test(MyClass{Name: ""Jhon""})
}
</code></pre>

<p>when i run it, i am getting an error like this</p>

<pre><code># command-line-arguments
/tmp/sandbox290239038/main.go:12: class.Name undefined (type interface {} has no field or method Name)
</code></pre>

<p>there is play.google.com <a href=""http://play.golang.org/p/do3YDFsyLD"" rel=""nofollow"">fiddle</a> address </p>
","<p>You're looking for;</p>

<pre><code>func test(class MyClass) {
    fmt.Println(class.Name)
}
</code></pre>

<p>As it stands the method recognizes <code>class</code> as some object which implements the empty interface (meaning in that scope it's fields and methods are completely unknown) which is why you get the error.</p>

<p>Your other option is something like this;</p>

<pre><code>func test(class interface{}) {
     if c, ok := class.(MyClass); ok { // type assert on it    
         fmt.Println(c.Name)
     }
}
</code></pre>

<p>But there is no reason to in your example. It only makes sense if you're going to do a type switch or have multiple code paths that do different things based on the actual type of <code>class</code>.</p>
","29805635"
"Go: returning from defer","13367","","<p>I want to return an error from a function if it panics (in Go):</p>

<pre><code>func getReport(filename string) (rep report, err error) {
    rep.data = make(map[string]float64)

    defer func() {
        if r := recover(); r != nil {
            fmt.Println(""Recovered in f"", r)
            err, _ = r.(error)
            return nil, err
        }
    }()
    panic(""Report format not recognized."")
    // rest of the getReport function, which can try to out-of-bound-access a slice
    ...
} 
</code></pre>

<p>I appear to have misunderstood the very concept of panic and defer. Can anybody enlighten me?</p>
","<p>In a deferred function you can alter the returned parameters, but you can't return a new set.  So a simple change to what you have will make it work.</p>

<p>There is another problem with what you wrote, namely that the you've paniced with a <code>string</code> but are expecting an <code>error</code> in your type assertion.</p>

<p>Here is a fix for both of those (<a href=""http://play.golang.org/p/1IMWPWtTzt"">Play</a>)</p>

<pre><code>defer func() {
    if r := recover(); r != nil {
        fmt.Println(""Recovered in f"", r)
        // find out exactly what the error was and set err
        switch x := r.(type) {
        case string:
            err = errors.New(x)
        case error:
            err = x
        default:
            err = errors.New(""Unknown panic"")
        }
        // invalidate rep
        rep = nil
        // return the modified err and rep
    }
}()
</code></pre>
","19934989"
"easy way to unzip file with golang","13288","","<p>is there a easy way to unzip file with golang ?</p>

<p>right now my code is:</p>

<pre><code>func Unzip(src, dest string) error {
    r, err := zip.OpenReader(src)
    if err != nil {
        return err
    }
    defer r.Close()

    for _, f := range r.File {
        rc, err := f.Open()
        if err != nil {
            return err
        }
        defer rc.Close()

        path := filepath.Join(dest, f.Name)
        if f.FileInfo().IsDir() {
            os.MkdirAll(path, f.Mode())
        } else {
            f, err := os.OpenFile(
                path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
            if err != nil {
                return err
            }
            defer f.Close()

            _, err = io.Copy(f, rc)
            if err != nil {
                return err
            }
        }
    }

    return nil
}
</code></pre>
","<p>Slight rework of the OP's solution to create the containing directory <code>dest</code> if it doesn't exist, and to wrap the file extraction/writing in a closure to eliminate stacking of <code>defer .Close()</code> calls per <a href=""https://stackoverflow.com/users/164234/nick-craig-wood"">@Nick Craig-Wood</a>'s comment:</p>

<pre><code>func Unzip(src, dest string) error {
    r, err := zip.OpenReader(src)
    if err != nil {
        return err
    }
    defer func() {
        if err := r.Close(); err != nil {
            panic(err)
        }
    }()

    os.MkdirAll(dest, 0755)

    // Closure to address file descriptors issue with all the deferred .Close() methods
    extractAndWriteFile := func(f *zip.File) error {
        rc, err := f.Open()
        if err != nil {
            return err
        }
        defer func() {
            if err := rc.Close(); err != nil {
                panic(err)
            }
        }()

        path := filepath.Join(dest, f.Name)

        if f.FileInfo().IsDir() {
            os.MkdirAll(path, f.Mode())
        } else {
            os.MkdirAll(filepath.Dir(path), f.Mode())
            f, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
            if err != nil {
                return err
            }
            defer func() {
                if err := f.Close(); err != nil {
                    panic(err)
                }
            }()

            _, err = io.Copy(f, rc)
            if err != nil {
                return err
            }
        }
        return nil
    }

    for _, f := range r.File {
        err := extractAndWriteFile(f)
        if err != nil {
            return err
        }
    }

    return nil
}
</code></pre>

<p><strong>Note:</strong> Updated to include Close() error handling as well (if we're looking for best practices, may as well follow ALL of them).</p>
","24792688"
"Parse input from HTML <form> in Golang","13287","","<p>I got something running with the <a href=""http://goji.io"" rel=""nofollow"">Goji framework</a>:</p>

<pre><code>package main

import (
        ""fmt""
        ""net/http""

        ""github.com/zenazn/goji""
        ""github.com/zenazn/goji/web""
)

func hello(c web.C, w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, ""Hello, %s!"", c.URLParams[""name""])
}

func main() {
        goji.Get(""/hello/:name"", hello)
        goji.Serve()
}
</code></pre>

<p>What I was hoping someone could help me do is figure out how when an HTML form is submitted to send that data to Golang code.</p>

<p>So if there is an input field with the name attribute and the value of that is name and the user types a name in there and submits, then on the form submitted page the Golang code will print hello, name.</p>

<p>Here is what I could come up with:</p>

<pre><code>package main

import(
    ""fmt""
    ""net/http""

    ""github.com/zenazn/goji""
    ""github.com/zenazn/goji/web""
)

func hello(c web.C, w http.ResponseWriter, r *http.Request){
    name := r.PostFormValue(""name"")
    fmt.Fprintf(w, ""Hello, %s!"", name)
}

func main(){
    goji.Handle(""/hello/"", hello)
    goji.Serve()
}
</code></pre>

<p>and here is my hello.html file:</p>

<p>in the body:</p>

<pre><code>&lt;form action="""" method=""get""&gt;
    &lt;input type=""text"" name=""name"" /&gt;
&lt;/form&gt;
</code></pre>

<p>How do I connect <code>hello.html</code> to <code>hello.go</code> so that the Golang code gets what is in the input and returns hello, name in the form submitted page?</p>

<p>I'd greatly appreciate any and all help!</p>
","<p>In order to read html form values you have to first call <a href=""http://golang.org/pkg/net/http/#Request.ParseForm"" rel=""nofollow""><code>r.ParseForm()</code></a>. The you can get at the form values.</p>

<p>So this code:</p>

<pre><code>func hello(c web.C, w http.ResponseWriter, r *http.Request){
    name := r.PostFormValue(""name"")
    fmt.Fprintf(w, ""Hello, %s!"", name)
}
</code></pre>

<p>Should be this:</p>

<pre><code>func hello(c web.C, w http.ResponseWriter, r *http.Request){

    //Call to ParseForm makes form fields available.
    err := r.ParseForm()
    if err != nil {
        // Handle error here via logging and then return            
    }

    name := r.PostFormValue(""name"")
    fmt.Fprintf(w, ""Hello, %s!"", name)
}
</code></pre>

<p><strong>Edit:</strong> I should note that this was a point that tripped me up when learning the <code>net/http</code> package</p>
","23284299"
"Problems about `slice` and `append` in Go","13284","","<p>I have written the following code. But I can't have it compiled. Here is my code:</p>

<pre class=""lang-go prettyprint-override""><code>package main

import ""fmt""

func main() {
    tmp := make([]int, 10)
    for i := 0; i &lt; 10; i++ {
        tmp[i] = i
    }
    res := mapx(foo, tmp)
    fmt.Printf(""%v\n"", res)
}

func foo(a int) int {
    return a + 10
}

func mapx(functionx func(int) int, list []int) (res []int) {
    res = make([]int, 10)
    for _, i := range(list) {
        append(res, functionx(i))
    }
    return
}
</code></pre>

<p>Meanwhile the error message is also very confusing:
<code>prog.go:21: append(res, functionx(i)) not used</code></p>

<p>But if I replace <code>append(res, functionx(i))</code>(line 21) with <code>res = append(res, functionx(i))</code>, it works quite well. Can anybody help me?</p>

<p>Thank you!</p>
","<blockquote>
  <p><a href=""http://golang.org/ref/spec#Appending_and_copying_slices"" rel=""noreferrer"">Appending to and copying slices</a></p>
  
  <p>The variadic function append appends zero or more values x to s of
  type S, which must be a slice type, and returns the resulting slice,
  also of type S.</p>
  
  <p>If the capacity of s is not large enough to fit the additional values,
  append allocates a new, sufficiently large slice that fits both the
  existing slice elements and the additional values. Thus, the returned
  slice may refer to a different underlying array.</p>
  
  <p><a href=""http://golang.org/ref/spec#Calls"" rel=""noreferrer"">Calls</a></p>
  
  <p>In a function call, the function value and arguments are evaluated in
  the usual order. After they are evaluated, the parameters of the call
  are passed by value to the function and the called function begins
  execution. The return parameters of the function are passed by value
  back to the calling function when the function returns.</p>
</blockquote>

<p>In Go, arguments are passed by value.</p>

<p>You need to write <code>res = append(res, functionx(i))</code> so that you don't discard the new value for res, which refers to a different slice and, possibly, a different underlying array.</p>

<p>For example,</p>

<pre><code>package main

import ""fmt""

func main() {
    res := []int{0, 1}
    fmt.Println(res)
    _ = append(res, 2) // discard
    fmt.Println(res)
    res = append(res, 2) // keep
    fmt.Println(res)
}
</code></pre>

<p>Output:</p>

<pre><code>[0 1]
[0 1]
[0 1 2]
</code></pre>
","10740460"
"Go - How to import a struct that is inside of other package?","13276","","<p>I tried to learn Go but I frequently feel frustrating because some basic features that other languages has seems not working in Go. So basically, I would like to use struct type that is 
define in other file. I was able to use functions except struct type. In main.go, </p>

<pre><code>  package main

  import (
      ""list""
  )

  func main() {
      lst := list.NewList(false)         
      lst.Insert(5)
      lst.Insert(7)
      lst.InsertAt(2, 1)
      lst.PrintList()
  }
</code></pre>

<p>This works perfectly (and all other functions) as I expect (list is in $GOPATH). In package list, I defined struct as follow:</p>

<pre><code>type LinkedList struct {
    head    *node
    size    int
    isFixed bool
}
</code></pre>

<p>I wanted to use this struct in other struct, so I attempted to do something like this,</p>

<pre><code>type SomeType struct {
    lst *LinkedList
}
</code></pre>

<p>But unfortunately, I got error that the type LinkedList is not defined. How can I use a struct that is defined in other package?</p>
","<p>The <code>LinkedList</code> type is in the <code>list</code> namespace, so change your usage of the type to:</p>

<pre><code>type SomeType struct {
    lst *list.LinkedList
}
</code></pre>
","21198945"
"Date parsing in Go","13242","","<p>I'm trying to parse a timestamp as produced by tar such as '2011-01-19 22:15' but can't work out the funky API of time.Parse.</p>

<p>The following produces 'parsing time ""2011-01-19 22:15"": month out of range'</p>

<pre><code>package main
import (
    ""fmt""
    ""time""
    )

func main () {
    var time , error = time.Parse(""2011-01-19 22:15"",""2011-01-19 22:15"")
    if error != nil {
        fmt.Println(error.String())
        return
        }
    fmt.Println(time)
    }
</code></pre>
","<p>Follow the instructions in the Go <a href=""http://golang.org/pkg/time/"" rel=""noreferrer"">time package</a> documentation.</p>

<blockquote>
  <p>The standard time used
  in the layouts is:</p>
  
  <blockquote>
    <p>Mon Jan 2 15:04:05 MST 2006  (MST is
    GMT-0700)</p>
  </blockquote>
  
  <p>which is Unix time <code>1136243045</code>. (Think
  of it as <code>01/02 03:04:05PM '06 -0700</code>.)
  To define your own format, write down
  what the standard time would look like
  formatted your way.</p>
</blockquote>

<p>For example,    </p>

<pre><code>package main

import (
    ""fmt""
    ""time""
)

func main() {
    t, err := time.Parse(""2006-01-02 15:04"", ""2011-01-19 22:15"")
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(time.SecondsToUTC(t.Seconds()))
}

Output: Wed Jan 19 22:15:00 UTC 2011
</code></pre>
","6590606"
"Golang/mgo: How can I ask MongoDB to use current time in a field?","13223","","<p>I have this struct that matches the types of a MongoDB collection I'm using:</p>

<pre><code>type AppInstance struct {
    Id bson.ObjectId ""_id,omitempty""
    Url string
    Priority int
    LastSeen string
}
</code></pre>

<p>I want the LastSeen field to hold the time of the last interaction with that particular app.  So, the app registers itself setting current time (as a string).</p>

<p>What I would like is Mongo to dynamically set its own current time into that field when it inserts, just like MySQL's NOW() function would do.</p>

<p>I have this helper function: </p>

<pre><code>func mongoNow() bson.JavaScript {
    return bson.JavaScript{Code: 
         ""return (new Date()).ISODate('YYYY-MM-DD hh:mm:ss');""}
}
</code></pre>

<p>And I tried this:</p>

<pre><code>c := mongoSession.DB(""myapp"").C(""instances"")
rand.Seed(time.Now().UnixNano())
err := c.Insert(
   struct{Id, Serial, Priority, Url, LastSeen interface{}}{ 
      Id: bson.NewObjectId(), 
      Url: getInformedHost() + "":"" + getRunningPortString(), 
      Priority: rand.Int(), 
      LastSeen: mongoNow() }
)
checkError(err, ""Could not register on MongoDB server."", 3)
</code></pre>

<p>the LastSeen field gets stored as a script instead of evaluated:</p>

<pre><code>[_id] =&gt; MongoId Object (
    [$id] =&gt; 502d6f984eaead30a134fa10
)
[id] =&gt; MongoId Object (
    [$id] =&gt; 502d6f98aa443e0ffd000001
)
[priority] =&gt; 1694546828
[url] =&gt; 127.0.0.1:8080
[lastseen] =&gt; MongoCode Object (
    [code] =&gt; (new Date()).ISODate('YYYY-MM-DD hh:mm:ss')
    [scope] =&gt; Array (
    )
)
</code></pre>

<p>So, I think there are to questions:</p>

<p>First, how can I insert the current time?</p>

<p>Second, how can I get some javascript evaluated instead of inserted?</p>

<p>The answer to the second one could be enough to answer the first one, but it might as well not be.</p>
","<p>Don't store time as string. mgo supports <a href=""http://golang.org/pkg/time/#Time"" rel=""noreferrer"">time.Time</a> which is like a <code>Date</code> object in Javascript:</p>

<pre><code>type Event struct {
    Id    bson.ObjectId ""_id,omitempty""
    Which string
    Date  time.Time
}
</code></pre>

<p>Insert an event that happened now:</p>

<pre><code>e := Event{
    Which: ""first event"",
    Date: time.Now(),
}
c.Insert(e)
</code></pre>
","11997153"
"Unpack Golang slices on assignment?","13221","","<p>Is there an elegant way in Golang to do multiple assignments from arrays like in Python? Here is a Python example of what I'm trying to do (split a string and then assign the resulting array into two variables).</p>

<pre><code>python:
&gt;&gt;&gt; a, b = ""foo;bar"".split("";"")
</code></pre>

<p>My current solution is:</p>

<pre><code>x := strings.Split(""foo;bar"", "";"")
a, b := x[0], x[1]
</code></pre>

<p>I'm can see this getting messy in some constructs. The practical example I'm currently facing is a bookmark file parsing and assigning to a map:</p>

<pre><code>bookmark := make(map[string]string)
x := strings.Split(""foo\thttps://bar"", ""\t"")
name, link := x[0], x[1]
bookmark[name] = link
</code></pre>

<p>Now I have a useless variable ""x"" sitting around. I'd like to do something like:</p>

<pre><code>bookmark := make(map[string]string)
name, line := strings.Split(""foo\thttps://bar"", ""\t"")
bookmark[name] = link
</code></pre>

<p>but that's invalid.</p>
","<p>As Sergio Tulentsev mentioned, general packing/unpacking as is done in Python is not supported. I think the way to go there is to define your own small ad-hoc function using multiple return values:</p>

<pre><code>func splitLink(s, sep string) (string, string) {
    x := strings.Split(s, sep)
    return x[0], x[1]
}
</code></pre>

<p>And you can then write:</p>

<pre><code>name, link := splitLink(""foo\thttps://bar"", ""\t"")
</code></pre>

<p>But this will obviously work only when at least two substrings are being split, and silently ignore if more than two were. If this is something you use a lot, it might make your code more readable though.</p>

<p><strong>--EDIT--</strong></p>

<p>Another way to unpack an array is via variadic pointer arguments:</p>

<pre><code>func unpack(s []string, vars... *string) {
    for i, str := range s {
        *vars[i] = str
    }
}
</code></pre>

<p>Which let you write:</p>

<pre><code>var name, link string
unpack(strings.Split(""foo\thttps://bar"", ""\t""), &amp;name, &amp;link)
bookmarks[name] = link
</code></pre>

<p>This will work for any array size, but it is arguably less readable, and you have to declare your variables explicitly.</p>
","19832661"
"Is it possible to define equality for named types/structs?","13184","","<p>After reading a <a href=""https://stackoverflow.com/questions/20297503/slice-as-a-key-in-map"">related question</a> about using slices in maps, I became curious about equality in Go.</p>

<p>I know it's possible to override the <code>equals</code> method of a Java <code>Object</code>. Is there a similar way to define how Go checks user defined types/structs for equality? If so, there would be a workaround for the issue referenced above. I thought using <a href=""http://play.golang.org/p/8CzhmDnDLQ"" rel=""nofollow noreferrer""><code>interface{}</code> values</a> might offer a solution but I received the error message <code>panic: runtime error: hash of unhashable type []int</code>.</p>
","<p>Go supports equality checking structs. </p>

<pre><code>type Person struct {
    Name string
}

a := Person{""Bill DeRose""}
b := Person{""Bill DeRose""}

a == b // true
</code></pre>

<p>It won't work with pointer fields (in the way you want) because the pointer addresses are different. </p>

<pre><code>type Person struct {
    Friend *Person
}

a := Person{Friend: &amp;Person{}}
b := Person{Friend: &amp;Person{}}

a == b // false
</code></pre>

<p>You can't modify the equality operator and there is no built-in way to add support for custom types to use <code>==</code> syntax. Instead you should compare the pointer values using <a href=""https://golang.org/pkg/reflect/#DeepEqual"" rel=""noreferrer""><code>reflect.DeepEqual</code></a>.</p>

<pre><code>import ""reflect""

a := Person{Friend: &amp;Person{}}
b := Person{Friend: &amp;Person{}}

reflect.DeepEqual(a, b) // true
</code></pre>

<p>Keep in mind there are caveats.</p>

<blockquote>
  <p>In general DeepEqual is a recursive relaxation of Go's == operator. However, this idea is impossible to implement without some inconsistency. Specifically, it is possible for a value to be unequal to itself, either because it is of func type (uncomparable in general) or because it is a floating-point NaN value (not equal to itself in floating-point comparison), or because it is an array, struct, or interface containing such a value.</p>
</blockquote>
","40534972"
"How do I make go find my package?","13180","","<p>Where should I put my package so that it can be imported by another package?</p>

<pre><code>$ tree
.
├── main.go
└── src
    └── test.go

1 directory, 2 files

$ cat src/test.go 
package test

$ cat main.go 
package main

import ""test""

$ go build main.go 
main.go:3:8: import ""test"": cannot find package
</code></pre>
","<p>Set your GOPATH. Put your package foo source(s) in GOPATH/src/optional-whatever/foo/*.go and use it in code as</p>

<pre><code>import ""optional-whatever/foo""
</code></pre>

<p>You <em>don't</em> need to explicitly install foo, the go tool is a build tool, it will do that automagically for you whenever necessary.</p>
","10601334"
"How to pass variable length arguments as arguments on another function in Golang?","13180","","<p>How to pass variable length arguments in <code>Go</code>? for example, I want to call</p>

<pre><code>func MyPrint(format string, args ...interface{}) {
  fmt.Printf(""[MY PREFIX] "" + format, ???)
}

// to be called as: MyPrint(""yay %d"", 213) 
//              or  MyPrint(""yay"")
//              or  MyPrint(""yay %d %d"",123,234)
</code></pre>
","<p>Ah found it..</p>

<pre><code>package main

import ""fmt""

func MyPrint(format string, args ...interface{}) {
  fmt.Printf(""[MY PREFIX] "" + format, args...)
}

func main() {
 MyPrint(""yay %d %d\n"",123,234);
 MyPrint(""yay %d\n "",123);
 MyPrint(""yay %d\n"");
}
</code></pre>
","27169176"
"How Can I Make the Go HTTP Client NOT Follow Redirects Automatically?","13173","","<p>I'm currently writing some software in Go that interacts with a REST API. The REST API endpoint I'm trying to query returns an HTTP 302 redirect along with an HTTP Location header, pointing to a resource URI.</p>

<p>I'm trying to use my Go script to grab the HTTP Location header for later processing.</p>

<p>Here's what I'm currently doing to achieve this functionality currently:</p>

<pre><code>package main

import (
        ""errors""
        ""fmt""
        ""io/ioutil""
        ""net/http""
)

var BASE_URL = ""https://api.stormpath.com/v1""
var STORMPATH_API_KEY_ID = ""xxx""
var STORMPATH_API_KEY_SECRET = ""xxx""

func noRedirect(req *http.Request, via []*http.Request) error {
        return errors.New(""Don't redirect!"")
}

func main() {

        client := &amp;http.Client{
            CheckRedirect: noRedirect
        }
        req, err := http.NewRequest(""GET"", BASE_URL+""/tenants/current"", nil)
        req.SetBasicAuth(STORMPATH_API_KEY_ID, STORMPATH_API_KEY_SECRET)

        resp, err := client.Do(req)

        // If we get here, it means one of two things: either this http request
        // actually failed, or we got an http redirect response, and should process it.
        if err != nil {
            if resp.StatusCode == 302 {
                fmt.Println(""got redirect"")
            } else {
                panic(""HTTP request failed."")
            }
        }
        defer resp.Body.Close()

}
</code></pre>

<p>This feels like a bit of a hack to me. By overriding the <code>http.Client</code>'s <code>CheckRedirect</code> function, I'm essentially forced to treat HTTP redirects like errors (which they aren't).</p>

<p>I've seen several other places suggesting to use an HTTP transport instead of an HTTP client -- but I'm not sure how to make this work since I need the HTTP Client as I need to use HTTP Basic Auth to communicate with this REST API.</p>

<p>Can any of you tell me a way to make HTTP requests with Basic Authentication -- while not following redirects -- that doesn't involve throwing errors and error handling?</p>

<p>Thank you.</p>
","<p>There's a much simpler solution right now:</p>

<pre><code>client: &amp;http.Client{
    CheckRedirect: func(req *http.Request, via []*http.Request) error {
        return http.ErrUseLastResponse
    },
}
</code></pre>

<p>This way, the <code>http</code> package automatically knows: ""Ah, I shouldn't follow any redirects"", but does not throw any error. From the comment in the source code:</p>

<blockquote>
  <p>As a special case, if CheckRedirect returns ErrUseLastResponse,
  then the most recent response is returned with its body
  unclosed, along with a nil error.</p>
</blockquote>
","38150816"
"convert string to fixed size byte array in Go","13153","","<p>Is there convenient way for initial a byte array?</p>

<pre><code>package main
import ""fmt""
type T1 struct {
  f1 [5]byte  // I use fixed size here for file format or network packet format.
  f2 int32
}
func main() {
  t := T1{""abcde"", 3}
  // t:= T1{[5]byte{'a','b','c','d','e'}, 3} // work, but ugly
  fmt.Println(t)
}
</code></pre>

<p>prog.go:8: cannot use ""abcde"" (type string) as type [5]uint8 in field value</p>

<p>if I change the line to <code>t := T1{[5]byte(""abcde""), 3}</code></p>

<p>prog.go:8: cannot convert ""abcde"" (type string) to type [5]uint8</p>
","<p>You could copy the string into a slice of the byte array:</p>

<pre><code>package main
import ""fmt""
type T1 struct {
  f1 [5]byte
  f2 int
}
func main() {
  t := T1{f2: 3}
  copy(t.f1[:], ""abcde"")
  fmt.Println(t)
}
</code></pre>

<p>Edit: using named form of T1 literal, by jimt's suggestion.</p>
","8045921"
"Build and reference my own local package in Go","13120","","<p>I'm playing with Google Go and I'm having fun (!), but I'm having some problems with package subsystem.</p>

<p>I'm running <strong>Go 1.0.1</strong> on Mac OS X Lion. I've build also various single file programs without problems (I've also build a small webapp using html/templates without problems and it compiles and runs without any error).</p>

<p>I've defined a ""reusable"" package (even.go):</p>

<pre><code>package even

func Even(i int) bool {
    return i % 2 == 0
}

func Odd(i int) bool {
    return i % 2 == 1
}
</code></pre>

<p>and a consumer program (useeven.go):</p>

<pre><code>package main

import (
    ""./even""
    ""fmt""
)

func main() {
    a := 5
    b := 6

    fmt.Printf(""%d is even %v?\n"", a, even.Even(a))
    fmt.Printf(""%d is odd %v?\n"", b, even.Odd(b))
}
</code></pre>

<p>But when I compile the ""library"" using</p>

<pre><code>go build even.go
</code></pre>

<p>I got nothing... No errors, no message... What happens?</p>

<p>How should I do this?</p>
","<p>The answer to your question, ""How should I do this?"" is explained in <a href=""http://golang.org/doc/code.html"">How to Write Go Code.</a>  It's really pretty important stuff and is a foundation you should have before going much further.</p>

<p>The behavior of <code>go build</code> might seem puzzling, but is actually conventional for command line programs--no output means that the program ran successfully.  So what did it do?  For that you can read the docs.  <code>go help build</code> explains,</p>

<blockquote>
  <p>... Otherwise build compiles the packages but discards the results,
  serving only as a check that the packages can be built.</p>
</blockquote>

<p>What, you wanted more?  Of course.  ""How to Write Go Code"" explains good ways of doing this.  For a quick fix to your program, I'll explain that the go command expects each package and each executable program to be in a separate directory.  If you just make a directory called even, immediately under the location of useeven.go, and move even.go to it, then <code>go run useeven.go</code> should run just as you have it.</p>
","10417714"
"MongoDB in Go (golang) with mgo: How do I update a record, find out if update was successful and get the data in a single atomic operation?","13102","","<p>I am using mgo driver for MongoDB under Go.</p>

<p>My application asks for a task (with just a record select in Mongo from a collection called ""jobs"") and then registers itself as an asignee to complete that task (an update to that same ""job"" record, setting itself as assignee).</p>

<p>The program will be running on several machines, all talking to the same Mongo.  When my program lists the available tasks and then picks one, other instances might have already obtained that assignment, and the current assignment would have failed.</p>

<p>How can I get sure that the record I read and then update does or does not have a certain value (in this case, an assignee) at the time of being updated?</p>

<p>I am trying to get one assignment, no matter wich one, so I think I should first select a pending task and try to assign it, keeping it just in the case the updating was successful.</p>

<p>So, my query should be something like:</p>

<p>""From all records on collection 'jobs', update <strong>just one</strong> that has asignee=null, setting my ID as the assignee.  <strong>Then, give me that record</strong> so I could run the job.""</p>

<p>How could I express that with mgo driver for Go?</p>
","<p>I hope you saw the comments on the answer you selected, but that approach is incorrect. Doing a select and then update will result in a round trip and two machines and be fetching for the same job before one of them can update the <code>assignee</code>. You need to use the <code>findAndModify</code> method instead: <a href=""http://www.mongodb.org/display/DOCS/findAndModify+Command"" rel=""nofollow"">http://www.mongodb.org/display/DOCS/findAndModify+Command</a></p>
","12354931"
"How to test only one benchmark function?","13072","","<p>In my Go package there are several benchmark files like <code>map1_benchmark_test.go</code> and <code>map2_benchmark_test.go</code>. In every <code>*_benchmark_test.go</code> file, there is more than one benchmark function like <code>func BenchmarkMapTravel(b *testing.B)</code> and <code>func BenchmarkMapGet(b *testing.B)</code>.</p>

<p>Question is, how can I test just one benchmark function?</p>

<p>I attempted to read some manuals, and got nothing about benchmark by running <code>go help test</code>.</p>
","<blockquote>
  <p><a href=""https://golang.org/cmd/go/#hdr-Description_of_testing_flags"">Description of testing flags</a></p>

<pre><code>-test.bench pattern
    Run benchmarks matching the regular expression.
    By default, no benchmarks run.

-test.run pattern
    Run only those tests and examples matching the regular
    expression.
</code></pre>
  
  <p>For convenience, each of these <code>-test.X</code> flags of the test binary is
  also available as the flag <code>-X</code> in '<code>go test</code>' itself.</p>
</blockquote>

<p>For help,</p>

<pre><code>$ go help testflag
</code></pre>

<p>For example,</p>

<pre><code>go test -test.bench MapTravel
go test -test.bench MapGet
</code></pre>

<p>or</p>

<pre><code>go test -bench MapTravel
go test -bench MapGet
</code></pre>

<p>To bypass test functions, include a <code>-test.run</code> pattern that filters out every single test. For example,</p>

<pre><code>go test -test.bench MapTravel -test.run=thisexpressionwontmatchanytest
</code></pre>

<p>or</p>

<pre><code>go test -bench MapTravel -run=^$
</code></pre>
","16161605"
"Inserting data into MongoDB with mgo","13050","","<p>I'm trying to insert some data in MongoDB using Go.</p>

<p>Here is the data struct:</p>

<pre><code>type Entry struct {
    Id          string `json:""id"",bson:""_id,omitempty""`
    ResourceId  int    `json:""resource_id,bson:""resource_id""`
    Word        string `json:""word"",bson:""word""`
    Meaning     string `json:""meaning"",bson:""meaning""`
    Example     string `json:""example"",bson:""example""`
}
</code></pre>

<p>This is my insert function:</p>

<pre><code>func insertEntry(db *mgo.Session, entry *Entry) error {
    c := db.DB(*mongoDB).C(""entries"")
    count, err := c.Find(bson.M{""resourceid"": entry.ResourceId}).Limit(1).Count()
    if err != nil {
        return err
    }
    if count &gt; 0 {
        return fmt.Errorf(""resource %s already exists"", entry.ResourceId)
    }
    return c.Insert(entry)
}
</code></pre>

<p>And finally, this is how I call it:</p>

<pre><code>entry := &amp;Entry{
    ResourceId:  resourceId,
    Word:        word,
    Meaning:     meaning,
    Example:     example,
}
err = insertEntry(db, entry)
if err != nil {
    log.Println(""Could not save the entry to MongoDB:"", err)
}
</code></pre>

<p>The trouble is, I was expecting my <code>bson</code> tags to magically work, but they don't.
Instead of data being saved as:</p>

<blockquote>
  <p>{ ""_id"" : ObjectId(""53700d9cd83e146623e6bfb4""), ""resource_id"" :
  7660708, ""word"" : ""Foo"" ...}</p>
</blockquote>

<p>It gets saved as:</p>

<blockquote>
  <p>{ ""_id"" : ObjectId(""53700d9cd83e146623e6bfb4""), ""id"" : """",
  ""resourceid"" : 7660708, ""word"" : ""Foo""...}</p>
</blockquote>

<p>How can I fix this?</p>
","<p>Change entry to:</p>

<pre><code>type Entry struct {
    Id          string `json:""id"" bson:""_id,omitempty""`
    ResourceId  int    `json:""resource_id"" bson:""resource_id""`
    Word        string `json:""word"" bson:""word""`
    Meaning     string `json:""meaning"" bson:""meaning""`
    Example     string `json:""example"" bson:""example""`
}
</code></pre>

<p>The syntax for Struct Tags does not use commas between tags. I believe this should fix it.</p>
","23600271"
"panic: runtime error: slice bounds out of range","12989","","<p>I'm following this tutorial: <a href=""https://gobyexample.com/slices"" rel=""nofollow"">https://gobyexample.com/slices</a></p>

<p>I was in the middle:</p>

<pre><code>package main

import ""fmt""

func main() {

    s := make([]string, 3)
    fmt.Println(""emp:"", s)

    s[0] = ""a""
    s[1] = ""b""
    s[2] = ""c""
    fmt.Println(""set:"", s)

    c := make([]string, len(s))
    copy(c, s)
    fmt.Println(""copy:"", c)

    l := s[2:5]
    fmt.Println(""sl1:"", l)
}
</code></pre>

<p>when I suddenly encountered this error:</p>

<pre><code>alex@alex-K43U:~/golang$ go run hello.go
emp: [  ]
set: [a b c]
copy: [a b c]
panic: runtime error: slice bounds out of range

goroutine 1 [running]:
main.main()
    /home/alex/golang/hello.go:19 +0x2ba

goroutine 2 [syscall]:
created by runtime.main
    /usr/lib/go/src/pkg/runtime/proc.c:221
exit status 2
</code></pre>

<p>What does it mean? Is the tutorial mistaken? What can I do to fix it?</p>
","<p>Your code omits these lines from the original example:</p>

<pre><code>s = append(s, ""d"")
s = append(s, ""e"", ""f"")
</code></pre>

<p>Without these lines, len(s) == 3. </p>
","26385358"
"Golang regex replace does nothing","12954","","<p>I want to replace any non-alphanumeric character sequences with a dash. A snippet of what I wrote is below. However it does not work and I'm completely clueless why. Could anyone explain me why the snippet behaves not like I expect it to and what would be the correct way to accomplish this?</p>

<pre><code>package main

import (
    ""fmt""
    ""regexp""
    ""strings""
)

func main() {
    reg, _ := regexp.Compile(""/[^A-Za-z0-9]+/"")
    safe := reg.ReplaceAllString(""a*-+fe5v9034,j*.AE6"", ""-"")
    safe = strings.ToLower(strings.Trim(safe, ""-""))
    fmt.Println(safe)  // Output: a*-+fe5v9034,j*.ae6
}
</code></pre>
","<p>The forward slashes are not matched by your string.</p>

<pre><code>package main

import (
        ""fmt""
        ""log""
        ""regexp""
        ""strings""
)

func main() {
        reg, err := regexp.Compile(""[^A-Za-z0-9]+"")
        if err != nil {
                log.Fatal(err)
        }

        safe := reg.ReplaceAllString(""a*-+fe5v9034,j*.AE6"", ""-"")
        safe = strings.ToLower(strings.Trim(safe, ""-""))
        fmt.Println(safe)   // Output: a*-+fe5v9034,j*.ae6
}
</code></pre>

<hr>

<p>(Also <a href=""http://play.golang.org/p/OyaspEUY-u"" rel=""noreferrer"">here</a>)</p>

<p>Output</p>

<pre><code>a-fe5v9034-j-ae6
</code></pre>
","13673151"
"Pretty printing golang variable","12952","","<p>Is there something like <code>Ruby</code>'s <code>awesome_print</code> in <code>Golang</code>?</p>

<p>For example in ruby you could write:</p>

<pre><code>require 'ap'
x = {a:1,b:2} // also works for class
ap x
</code></pre>

<p>the output would be:</p>

<pre><code>{ 
  ""a"" =&gt; 1,
  ""b"" =&gt; 2
}
</code></pre>

<p>closest thing that I could found is <code>Printf(""%#v"", x)</code></p>
","<p>If your goal is to avoid importing a third-party package, your other option is to use <a href=""http://golang.org/pkg/encoding/json/#MarshalIndent"">json.MarshalIndent</a>:</p>

<pre><code>x := map[string]interface{}{""a"": 1, ""b"": 2}
b, err := json.MarshalIndent(x, """", ""  "")
if err != nil {
    fmt.Println(""error:"", err)
}
fmt.Print(string(b))
</code></pre>

<p>Output:</p>

<pre><code>{
    ""a"": 1,
    ""b"": 2
}
</code></pre>

<p>Working sample: <a href=""http://play.golang.org/p/SNdn7DsBjy"">http://play.golang.org/p/SNdn7DsBjy</a></p>
","27117994"
"Using go-websocket behind Apache mod_proxy_wstunnel","12935","","<p><em>Note: Updated config and added trailing slash to websocket path. Still same problem</em></p>

<p>Is it possible to use <a href=""https://github.com/garyburd/go-websocket"">go-websocket</a> behind a Apache reverse proxy with <a href=""http://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html"">mod_proxy_wstunnel</a>?</p>

<p>I tried and failed to get things working.</p>

<p>I tried to use <a href=""https://github.com/garyburd/go-websocket/tree/master/examples/chat"">the Chat example</a> behind an Apache reverse proxy (with <a href=""http://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html"">mod_proxy_wstunnel</a> enabled). And it doesn't work. The proxy is a success, while the websocket part does not work at all.</p>

<p>My Apache config looks similar to this:</p>

<pre><code>&lt;VirtualHost *:80&gt;
    DocumentRoot /var/www/foobar
    ServerName foobar.com
    ProxyPass / http://localhost:8080/
    ProxyPassReverse / http://localhost:8080/
    ProxyPass /ws/ ws://localhost:8080/ws/
    ProxyPassReverse /ws/ ws://localhost:8080/ws/
    ErrorLog logs/error_log-foobar
    CustomLog logs/access_log-foobar common
    LogLevel debug
&lt;/VirtualHost&gt;
</code></pre>

<p>And of course I'm running the chat server on port 8080. I've tested it with SSH tunnel, and things work perfectly. Then I moved on to Apache.</p>

<p>The first time I tried, the javascript console complains this:</p>

<pre><code>NetworkError: 403 Forbidden - http://foobar.com/ws/
</code></pre>

<p>The request seems to be stucked at the origin check.
Then I tried again after comment out the origin check, it get this:</p>

<pre><code>NetworkError: 400 Bad Request - http://foobar.com/ws/
</code></pre>

<p>It seems the chat server do not get the upgrade request at all.</p>

<p>How should I debug this?
Where should I start looking?</p>
","<p>Thanks everyone! After taking several advices above, I found the solution.</p>

<p>And for someone who might have similar issue, here is the solution to my question:</p>

<ol>
<li><p>As <a href=""https://stackoverflow.com/users/684167/aralo"">Aralo</a> suggested, trailing slash must be added to the WebSocket path (in my case: ""/ws/""). It looks Apache will only handle WebSocket with a valid GET request.</p></li>
<li><p><a href=""https://stackoverflow.com/users/721283/james-henstridge"">James Henstridge</a> was right. The order of ProxyPass relevant. ProxyPass of /ws/ must be put before the / line.</p></li>
<li><p>After consulting the Chat example code, I found <a href=""https://github.com/garyburd/go-websocket/blob/master/examples/chat/conn.go#L97"" rel=""nofollow noreferrer"">an origin check</a> in the function <a href=""https://github.com/garyburd/go-websocket/blob/master/examples/chat/conn.go#L92"" rel=""nofollow noreferrer""><strong>ServeWs()</strong></a> and removed.</p></li>
</ol>

<p>Everything works now.</p>

<p>And thanks <a href=""https://stackoverflow.com/users/98959/covener"">covener</a>, reading logs does help.</p>
","18822599"
"Gorilla mux custom middleware","12930","","<p>I am using gorilla mux for manage routing. What I am missing is to integrate a middleware between every request. </p>

<p>For example</p>

<pre><code>package main

import (
    ""fmt""
    ""github.com/gorilla/mux""
    ""log""
    ""net/http""
    ""strconv""
)

func HomeHandler(response http.ResponseWriter, request *http.Request) {

    fmt.Fprintf(response, ""Hello home"")
}

func main() {

    port := 3000
    portstring := strconv.Itoa(port)

    r := mux.NewRouter()
    r.HandleFunc(""/"", HomeHandler)
    http.Handle(""/"", r)

    log.Print(""Listening on port "" + portstring + "" ... "")
    err := http.ListenAndServe("":""+portstring, nil)
    if err != nil {
        log.Fatal(""ListenAndServe error: "", err)
    }
}
</code></pre>

<p>Every incoming request should pass through the middleware. How can I integrate here a midleware?</p>

<p><strong>Update</strong></p>

<p>I will use it in combination with gorilla/sessions, and they say:</p>

<blockquote>
  <p>Important Note: If you aren't using gorilla/mux, you need to wrap your
  handlers with context.ClearHandler as or else you will leak memory! An
  easy way to do this is to wrap the top-level mux when calling
  http.ListenAndServe:</p>
</blockquote>

<p>How can I prevent this scenario?</p>
","<p>Just create a wrapper, it's rather easy in Go:</p>

<pre><code>func HomeHandler(response http.ResponseWriter, request *http.Request) {

    fmt.Fprintf(response, ""Hello home"")
}

func Middleware(h http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        log.Println(""middleware"", r.URL)
        h.ServeHTTP(w, r)
    })
}
func main() {
    r := mux.NewRouter()
    r.HandleFunc(""/"", HomeHandler)
    http.Handle(""/"", Middleware(r))
}
</code></pre>
","26204709"
"What is the fastest way to generate a long random string in Go?","12913","","<p>Like [a-zA-Z0-9] string:</p>

<p><em>na1dopW129T0anN28udaZ</em></p>

<p>or hexadecimal string:</p>

<p><em>8c6f78ac23b4a7b8c0182d</em></p>

<p>By long I mean 2K and more characters.</p>
","<p>This does about 200MBps on my box.  There's obvious room for improvement.</p>

<pre><code>type randomDataMaker struct {
    src rand.Source
}

func (r *randomDataMaker) Read(p []byte) (n int, err error) {
    for i := range p {
        p[i] = byte(r.src.Int63() &amp; 0xff)
    }
    return len(p), nil
}
</code></pre>

<p>You'd just use <code>io.CopyN</code> to produce the string you want.  Obviously you could adjust the character set on the way in or whatever.</p>

<p>The nice thing about this model is that it's just an <code>io.Reader</code> so you can use it making anything.</p>

<p>Test is below:</p>

<pre><code>func BenchmarkRandomDataMaker(b *testing.B) {
    randomSrc := randomDataMaker{rand.NewSource(1028890720402726901)}
    for i := 0; i &lt; b.N; i++ {
        b.SetBytes(int64(i))
        _, err := io.CopyN(ioutil.Discard, &amp;randomSrc, int64(i))
        if err != nil {
            b.Fatalf(""Error copying at %v: %v"", i, err)
        }
    }
}
</code></pre>

<p>On one core of my 2.2GHz i7:</p>

<pre><code>BenchmarkRandomDataMaker       50000        246512 ns/op     202.83 MB/s
</code></pre>

<p><strong>EDIT</strong></p>

<p>Since I wrote the benchmark, I figured I'd do the obvious improvement thing (call out to the random less frequently).  With 1/8 the calls to rand, it runs about 4x faster, though it's a big uglier:</p>

<p>New version:</p>

<pre><code>func (r *randomDataMaker) Read(p []byte) (n int, err error) {
    todo := len(p)
    offset := 0
    for {
        val := int64(r.src.Int63())
        for i := 0; i &lt; 8; i++ {
            p[offset] = byte(val &amp; 0xff)
            todo--
            if todo == 0 {
                return len(p), nil
            }
            offset++
            val &gt;&gt;= 8
        }
    }

    panic(""unreachable"")
}
</code></pre>

<p>New benchmark:</p>

<pre><code>BenchmarkRandomDataMaker      200000        251148 ns/op     796.34 MB/s
</code></pre>

<p><strong>EDIT 2</strong></p>

<p>Took out the masking in the cast to byte since it was redundant.  Got a good deal faster:</p>

<pre><code>BenchmarkRandomDataMaker      200000        231843 ns/op     862.64 MB/s
</code></pre>

<p>(this is so much easier than real work <em>sigh</em>)</p>

<p><strong>EDIT 3</strong></p>

<p>This came up in irc today, so I released a library.  Also, my actual benchmark tool, while useful for relative speed, isn't sufficiently accurate in its reporting.</p>

<p>I created <a href=""https://github.com/dustin/randbo"">randbo</a> that you can reuse to produce random streams wherever you may need them.</p>
","12810288"
"How to cast reflect.Value to its type?","12887","","<p>How to cast reflect.Value to its type?</p>

<pre><code>type Cat struct { 
    Age int
}

cat := reflect.ValueOf(obj)
fmt.Println(cat.Type()) // Cat

fmt.Println(Cat(cat).Age) // doesn't compile
fmt.Println((cat.(Cat)).Age) // same
</code></pre>

<p>Thanks!</p>
","<p>Ok, I found it</p>

<p><code>reflect.Value</code> has a function <code>Interface()</code> that converts it to <code>interface{}</code></p>
","17262330"
"How to check if a map is empty in Golang?","12884","","<pre><code>if map == nil {
    log.Fatal(""map is empty"")
}
</code></pre>

<p>In order to debug the issue <code>fmt.Println(map)</code> was added:</p>

<pre><code>map[]
</code></pre>

<p>The following:</p>

<pre><code>if map == map[] {
    log.Fatal(""map is empty"")
}
</code></pre>

<p>results in:</p>

<pre><code>syntax error: unexpected ]
</code></pre>
","<p>You can use <code>len</code>:</p>

<pre><code>if len(map) == 0 {
    ....
}
</code></pre>

<p>From <a href=""https://golang.org/ref/spec#Length_and_capacity"" rel=""noreferrer"">https://golang.org/ref/spec#Length_and_capacity</a></p>

<blockquote>
  <p>len(s) map[K]T          map length (number of defined keys)</p>
</blockquote>
","35005294"
"How to iterate through a map in golang in order?","12869","","<p>Please see below my map</p>

<pre><code>var romanNumeralDict map[int]string = map[int]string{
  1000: ""M"",
  900 : ""CM"",
  500 : ""D"",
  400 : ""CD"",
  100 : ""C"",
  90  : ""XC"",
  50  : ""L"",
  40  : ""XL"",
  10  : ""X"",
  9   : ""IX"",
  5   : ""V"",
  4   : ""IV"",
  1   : ""I"",
}
</code></pre>

<p>I am looking to loop through this map in the order of the size of the key</p>

<pre><code>  for k, v := range romanNumeralDict {
    fmt.Println(""k:"", k, ""v:"", v)
  }
</code></pre>

<p>However, this prints out </p>

<pre><code>k: 1000 v: M
k: 40 v: XL
k: 5 v: V
k: 4 v: IV
k: 900 v: CM
k: 500 v: D
k: 400 v: CD
k: 100 v: C
k: 90 v: XC
k: 50 v: L
k: 10 v: X
k: 9 v: IX
k: 1 v: I
</code></pre>

<p>Is there a way that I can print them out in the order of the size of the key so, I would like to loop through this map like this</p>

<pre><code>k:1
K:4
K:5
K:9
k:10
</code></pre>

<p>etc...</p>

<p>Thank you very much for your help!</p>
","<p>Collect all keys, sort them and iterate your map by key, like the following:</p>

<pre><code>keys := make([]int, 0)
for k, _ := range romanNumeralDict {
    keys = append(keys, k)
}
sort.Ints(keys)
for _, k := range keys {
    fmt.Println(k, romanNumeralDict[k])
}
</code></pre>
","18342865"
"git library for Go","12825","","<p>As a pet project, I want to develop a note taking app using git as storage backend. (I suspect this doesn't exist yet, given this guy's blog post: <a href=""http://jarofgreen.co.uk/2012/08/how-about-a-mobile-note-app-backed-by-git/"" rel=""noreferrer"">http://jarofgreen.co.uk/2012/08/how-about-a-mobile-note-app-backed-by-git/</a> )</p>

<p>Now, I'd like to take this as an opportunity to play around with Go a bit. However, I cannot seem to find any (not even the tiniest approach to) git library for Go.
Is there actually any?</p>

<p>Obviously my knowledge of Go is non-existant, so writing bindings for libgit doesn't seem a fun way to start... (and I would probably resort to ruby, which I don't know either)</p>
","<p>I'd say <a href=""https://github.com/libgit2/git2go"" rel=""nofollow noreferrer"">git2go</a> is the git bindings library to use in Go. It is updated regularly and maintained by the people running libgit2.</p>

<p>If you are looking for a git implementation purely written in Go, <a href=""https://github.com/src-d/go-git"" rel=""nofollow noreferrer"">go-git</a> from <a href=""http://sourced.tech/"" rel=""nofollow noreferrer"">source{d}</a> is the most mature and active option.</p>
","17429478"
"what is the GOMAXPROCS default value","12724","","<p>Is it guaranteed that GOMAXPROCS is set to 1 when the environment variable of the same name is not set?</p>

<p>This code shows the value:</p>

<pre><code>package main

import (
    ""runtime""
    ""fmt""
)

func getGOMAXPROCS() int {
    return runtime.GOMAXPROCS(0)
}

func main() {
    fmt.Printf(""GOMAXPROCS is %d\n"", getGOMAXPROCS())
}
</code></pre>

<p>and running it like this:</p>

<pre><code>$ GOMAXPROCS= go run max.go 
GOMAXPROCS is 1
</code></pre>

<p>shows that it is 1 in this case, but I am looking for some confirmation here.</p>
","<p>No, there's no guarantee about what the default is; even though all known implementations use the value '1'. If your code, in absence of the environment variable, requires a specific default value then you should set it in code. <a href=""http://golang.org/pkg/runtime/#GOMAXPROCS"" rel=""nofollow"">Additionally</a>:</p>

<blockquote>
  <p>GOMAXPROCS sets the maximum number of CPUs that can be executing simultaneously and returns the previous setting. If n &lt; 1, it does not change the current setting. The number of logical CPUs on the local machine can be queried with NumCPU. <strong>This call will go away when the scheduler improves.</strong></p>
</blockquote>

<p>(Emphasis mine)</p>
","17853959"
"GO language: fatal error: all goroutines are asleep - deadlock","12684","","<p>Code below works fine with hard coded JSON data however doesn't work when I read JSON data from a file. I'm getting <code>fatal error: all goroutines are asleep - deadlock</code> error when using <code>sync.WaitGroup</code>.</p>

<p><strong>WORKING EXAMPLE WITH HARD-CODED JSON DATA:</strong></p>

<pre><code>package main

import (
    ""bytes""
    ""fmt""
    ""os/exec""
    ""time""
)

func connect(host string) {
    cmd := exec.Command(""ssh"", host, ""uptime"")
    var out bytes.Buffer
    cmd.Stdout = &amp;out
    err := cmd.Run()
    if err != nil {
        fmt.Println(err)
    }
    fmt.Printf(""%s: %q\n"", host, out.String())
    time.Sleep(time.Second * 2)
    fmt.Printf(""%s: DONE\n"", host)
}

func listener(c chan string) {
    for {
        host := &lt;-c
        go connect(host)
    }
}

func main() {
    hosts := [2]string{""user1@111.79.154.111"", ""user2@111.79.190.222""}
    var c chan string = make(chan string)
    go listener(c)

    for i := 0; i &lt; len(hosts); i++ {
        c &lt;- hosts[i]
    }
    var input string
    fmt.Scanln(&amp;input)
}
</code></pre>

<p><strong>OUTPUT:</strong></p>

<pre><code>user@user-VirtualBox:~/go$ go run channel.go
user1@111.79.154.111: "" 09:46:40 up 86 days, 18:16,  0 users,  load average: 5""
user2@111.79.190.222: "" 09:46:40 up 86 days, 17:27,  1 user,  load average: 9""
user1@111.79.154.111: DONE
user2@111.79.190.222: DONE
</code></pre>

<p><strong>NOT WORKING - EXAMPLE WITH READING JSON DATA FILE:</strong></p>

<pre><code>package main

import (
    ""bytes""
    ""fmt""
    ""os/exec""
    ""time""
    ""encoding/json""
    ""os""
    ""sync""
)

func connect(host string) {
    cmd := exec.Command(""ssh"", host, ""uptime"")
    var out bytes.Buffer
    cmd.Stdout = &amp;out
    err := cmd.Run()
    if err != nil {
        fmt.Println(err)
    }
    fmt.Printf(""%s: %q\n"", host, out.String())
    time.Sleep(time.Second * 2)
    fmt.Printf(""%s: DONE\n"", host)
}

func listener(c chan string) {
    for {
        host := &lt;-c
        go connect(host)
    }
}

type Content struct {
    Username string `json:""username""`
    Ip       string `json:""ip""`
}

func main() {
    var wg sync.WaitGroup

    var source []Content
    var hosts []string
    data := json.NewDecoder(os.Stdin)
    data.Decode(&amp;source)

    for _, value := range source {
        hosts = append(hosts, value.Username + ""@"" + value.Ip)
    }

    var c chan string = make(chan string)
    go listener(c)

    for i := 0; i &lt; len(hosts); i++ {
        wg.Add(1)
        c &lt;- hosts[i]
        defer wg.Done()
    }

    var input string
    fmt.Scanln(&amp;input)

    wg.Wait()
}
</code></pre>

<p><strong>OUTPUT</strong></p>

<pre><code>user@user-VirtualBox:~/go$ go run deploy.go &lt; hosts.txt 
user1@111.79.154.111: "" 09:46:40 up 86 days, 18:16,  0 users,  load average: 5""
user2@111.79.190.222: "" 09:46:40 up 86 days, 17:27,  1 user,  load average: 9""
user1@111.79.154.111 : DONE
user2@111.79.190.222: DONE
fatal error: all goroutines are asleep - deadlock!

goroutine 1 [semacquire]:
sync.runtime_Semacquire(0xc210000068)
    /usr/lib/go/src/pkg/runtime/sema.goc:199 +0x30
sync.(*WaitGroup).Wait(0xc210047020)
    /usr/lib/go/src/pkg/sync/waitgroup.go:127 +0x14b
main.main()
    /home/user/go/deploy.go:64 +0x45a

goroutine 3 [chan receive]:
main.listener(0xc210038060)
    /home/user/go/deploy.go:28 +0x30
created by main.main
    /home/user/go/deploy.go:53 +0x30b
exit status 2
user@user-VirtualBox:~/go$
</code></pre>

<p><strong>HOSTS.TXT</strong></p>

<pre><code>[
   {
      ""username"":""user1"",
      ""ip"":""111.79.154.111""
   },
   {
      ""username"":""user2"",
      ""ip"":""111.79.190.222""
   }
]
</code></pre>
","<p><strong>Go program ends when the main function ends.</strong></p>

<p>From the <a href=""http://golang.org/ref/spec#Program_execution"" rel=""nofollow noreferrer"">language specification</a></p>

<blockquote>
  <p>Program execution begins by initializing the main package and then invoking the function main. When that function invocation returns, the program exits. It does not wait for other (non-main) goroutines to complete.</p>
</blockquote>

<p>Therefore, you need to wait for your goroutines to finish. The common solution for this is to use <a href=""http://golang.org/pkg/sync/#WaitGroup"" rel=""nofollow noreferrer"">sync.WaitGroup</a> object.</p>

<p>The simplest possible code to synchronize goroutine:</p>

<pre><code>package main

import ""fmt""
import ""sync""

var wg sync.WaitGroup // 1

func routine() {
    defer wg.Done() // 3
    fmt.Println(""routine finished"")
}

func main() {
    wg.Add(1) // 2
    go routine() // *
    wg.Wait() // 4
    fmt.Println(""main finished"")
}
</code></pre>

<p>And for synchronizing multiple goroutines</p>

<pre><code>package main

import ""fmt""
import ""sync""

var wg sync.WaitGroup // 1

func routine(i int) {
    defer wg.Done() // 3
    fmt.Printf(""routine %v finished\n"", i)
}

func main() {
    for i := 0; i &lt; 10; i++ {
        wg.Add(1) // 2
        go routine(i) // *
    }
    wg.Wait() // 4
    fmt.Println(""main finished"")
}
</code></pre>

<p>WaitGroup usage in order of execution.</p>

<ol>
<li>Declaration of global variable. Making it global is the easiest way to make it visible to all functions and methods.</li>
<li>Increasing the counter. This must be done in main goroutine because there is no guarantee that newly started goroutine will execute before 4 due to memory model <a href=""http://golang.org/ref/mem#tmp_5"" rel=""nofollow noreferrer"">guarantees</a>.</li>
<li>Decreasing the counter. This must be done at the exit of goroutine. Using deferred call, we make sure that it will <a href=""http://golang.org/ref/spec#Defer_statements"" rel=""nofollow noreferrer"">be called whenever function ends</a> no matter but no matter how it ends.</li>
<li>Waiting for the counter to reach 0. This must be done in main goroutine to prevent program exit.</li>
</ol>

<p>* The actual parameters are <a href=""http://golang.org/ref/spec#Go_statements"" rel=""nofollow noreferrer"">evaluated before starting new gouroutine</a>. Thus it is needed to evaluate them explicitly before <code>wg.Add(1)</code> so the possibly panicking code would not leave increased counter. </p>

<p>Use</p>

<pre><code>param := f(x)
wg.Add(1)
go g(param)
</code></pre>

<p>instead of</p>

<pre><code>wg.Add(1)
go g(f(x))
</code></pre>
","26928625"
"Go Resizing Images","12637","","<p>I am using the Go resize package here: <a href=""https://github.com/nfnt/resize"" rel=""noreferrer"">https://github.com/nfnt/resize</a></p>

<p>1) I am pulling an Image from S3, as such:</p>

<pre><code>      image_data, err := mybucket.Get(key)
      // this gives me data []byte
</code></pre>

<p>2) After that, I need to resize the image:</p>

<pre><code>      new_image := resize.Resize(160, 0, original_image, resize.Lanczos3)
      // problem is that the original_image has to be of type image.Image
</code></pre>

<p>3) Upload the image to my S3 bucket</p>

<pre><code>     err : = mybucket.Put('newpath', new_image, 'image/jpg', 'aclstring')
     // problem is that new image needs to be data []byte
</code></pre>

<p>How do I transform a data []byte to ---> image.Image and back to ----> data []byte ??</p>

<p>Thanks in advance for the help!</p>
","<p>Read <a href=""http://golang.org/pkg/image"" rel=""noreferrer"">http://golang.org/pkg/image</a></p>

<pre><code>// you need the image package, and a format package for encoding/decoding
import (
    ""bytes""
    ""image""
    ""image/jpeg""

    // if you don't need to use jpeg.Encode, import like so:
    // _ ""image/jpeg""
)

// Decoding gives you an Image.
// If you have an io.Reader already, you can give that to Decode 
// without reading it into a []byte.
image, _, err := image.Decode(bytes.NewReader(data))
// check err

newImage := resize.Resize(160, 0, original_image, resize.Lanczos3)

// Encode uses a Writer, use a Buffer if you need the raw []byte
err = jpeg.Encode(someWriter, newImage, nil)
// check err
</code></pre>
","22940904"
"What can you do in 30 lines of Go? Can you create a useful, complete program that demonstrates its features?","12597","","<p>So, the big buzz in the last few days is <a href=""http://golang.org/"" rel=""noreferrer"">Go</a>, the new language from Google. Assuming you're all obsessive programming language geeks like me, you've all downloaded it, built it, and run your ""Hello, 世界"" program (isn't it nice using a language written by the inventors of UTF-8?). You've all read <a href=""http://golang.org/doc/go_tutorial.html"" rel=""noreferrer"">the tutorial</a>, <a href=""http://golang.org/doc/effective_go.html"" rel=""noreferrer"">Effective Go</a>, and some of the other docs.</p>

<p>Now, what are you going to do with it?</p>

<p>I'd like to see some demos that show off the power of Go. What can you do in a brief program? Show off your best example code. While the true measure of a language can't really be taken until you've written and maintained a large codebase with a team of many programmers over the course of a project with changing requirements, seeing how much you can do in a limited amount of code does help to demonstrate the expressive power of a language. I'd like to see short, complete programs that truly exercise the unique new features of Go; not just snippets or ""Hello, World"".</p>

<p>So, post some cool code you've written with Go. Take advantage of its unique features, like its goroutines and channels for concurrency, or its interface based type system. Can you write a primitive chat server, or cool IRC bot? Implement a parallel Mandelbrot set that scales to many cores? Write an interpreter for some tiny language? And can you do it all in 30 lines? </p>

<p>I chose 30 arbitrarily as about as much as you can fit into a Stack Overflow code block without it overflowing and getting a scroll bar; it should be enough to do something interesting without golfing too much, but short enough to keep everyone's attention for a quick demo. For instance, with just a bit of reformatting, the example <a href=""http://golang.org/doc/effective_go.html#web_server"" rel=""noreferrer"">web server</a> should be able to fit (not counting the data).</p>

<p>Show us your Go code!</p>
","<p>This makes a PNG (on stdout) of a clock face showing the current time. It's barely golfed to fit thirty lines, so the code is not quite as clean as it should be.</p>

<pre><code>package main
import (""image""; ""image/png""; ""math""; ""bufio""; ""os""; ""time"")
const clock_size = 200;
const radius = clock_size / 3;
var colour image.RGBAColor;
func circle (clock *image.RGBA) {
    for angle := float64(0); angle &lt; 360; angle++ {
        radian_angle := math.Pi * 2 * angle / 360;
        x := radius * math.Sin (radian_angle) + clock_size/2;
        y := radius * math.Cos (radian_angle) + clock_size/2;
        clock.Set (int (x), int (y), colour);}}
func hand (clock *image.RGBA, angle float64, length float64) {
    radian_angle := math.Pi * 2 * angle;
    x_inc := math.Sin (radian_angle);
    y_inc := -math.Cos (radian_angle);
    for i := float64(0); i &lt; length; i++ {
        x := i * x_inc + clock_size/2;
        y := i * y_inc + clock_size/2;
        clock.Set (int (x), int (y), colour);}}
func main () {
    clock := image.NewRGBA (clock_size, clock_size);
    colour.A = 255;
    circle (clock);
    time := time.LocalTime ();
    hand (clock, (float64(time.Hour) + float64(time.Minute)/60)/12, radius*0.6); // hour hand
    hand (clock, (float64(time.Minute) + float64(time.Second)/60)/60, radius*0.8); // minute hand
    out := bufio.NewWriter(os.Stdout);
    defer out.Flush();
    png.Encode(out, clock);
}
</code></pre>

<p>Run it like</p>

<pre>
8.out > clock.png
</pre>

<p>Notice all those float64 casts? I've NEVER seen a language as strict as Go about types. </p>

<hr>

<p>This is the same code fixed with <code>go fix</code> (and some manual tweaking) and then automatically formatted using <code>go fmt</code>. Some newlines where inserted manually.</p>

<pre><code>package main

import (
    ""bufio""
    ""image""
    ""image/color""
    ""image/png""
    ""math""
    ""os""
    ""time""
)

const clock_size = 200
const radius = clock_size / 3

var colour color.RGBA

func circle(clock *image.RGBA) {
    for angle := float64(0); angle &lt; 360; angle++ {
        radian_angle := math.Pi * 2 * angle / 360
        x := radius*math.Sin(radian_angle) + clock_size/2
        y := radius*math.Cos(radian_angle) + clock_size/2
        clock.Set(int(x), int(y), colour)
    }
}

func hand(clock *image.RGBA, angle float64, length float64) {
    radian_angle := math.Pi * 2 * angle
    x_inc := math.Sin(radian_angle)
    y_inc := -math.Cos(radian_angle)
    for i := float64(0); i &lt; length; i++ {
        x := i*x_inc + clock_size/2
        y := i*y_inc + clock_size/2
        clock.Set(int(x), int(y), colour)
    }
}

func main() {
    clock := image.NewRGBA(image.Rect(0, 0, clock_size, clock_size))
    colour.A = 255
    circle(clock)
    time := time.Now()
    hand(clock, (float64(time.Hour())+float64(time.Minute())/60)/12, radius*0.6)   // hour hand
    hand(clock, (float64(time.Minute())+float64(time.Second())/60)/60, radius*0.8) // minute hand
    out := bufio.NewWriter(os.Stdout)
    defer out.Flush()
    png.Encode(out, clock)
}
</code></pre>
","1740367"
"maps - deleting data","12574","","<p>How does one delete data from a map in Go? For example, having</p>

<pre><code>m := map[string]string{ ""key1"":""val1"", ""key2"":""val2"" };
</code></pre>

<p>I want to make m drop the ""key1"" without copying the entire map by iterating over its keys (which could get big in some uses). Is it enough to assign a nil value to ""key1"", or will that still keep the key in the map structure with an assigned value of nil? That is, if I later iterate over the keys of the map, will ""key1"" appear?</p>
","<blockquote>
  <p><a href=""http://golang.org/ref/spec#Deletion_of_map_elements"" rel=""noreferrer"">Deletion of map elements</a></p>
  
  <p>The built-in function <code>delete</code> removes the element with key k from a map
  m.</p>

<pre><code>delete(m, k)  // remove element m[k] from map m
</code></pre>
</blockquote>

<p>For example,</p>

<pre><code>package main

import ""fmt""

func main() {
    m := map[string]string{""key1"": ""val1"", ""key2"": ""val2""}
    fmt.Println(m)
    delete(m, ""key1"")
    fmt.Println(m)
}
</code></pre>

<p>Output:</p>

<pre><code>map[key1:val1 key2:val2]
map[key2:val2]
</code></pre>
","9233810"
"init function for structs","12565","","<p>I realize that Go does not have classes but pushes the idea of structs instead.</p>

<p>Do structs have any sort of initialization function that can be called similar to a __construct() function of a class?</p>

<p>Example:</p>

<pre><code>type Console struct {
    X int
    Y int
}

func (c *Console) init() {
    c.X = ""5""
}

// Here I want my init function to run
var console Console

// or here if I used
var console Console = new(Console)
</code></pre>
","<p>Go doesn't have implicit constructors. You would likely write something like this.</p>

<pre><code>package main

import ""fmt""

type Console struct {
    X int
    Y int
}

func NewConsole() *Console {
    return &amp;Console{X: 5}
}

var console Console = *NewConsole()

func main() {
    fmt.Println(console)
}
</code></pre>

<p>Output:</p>

<pre><code>{5 0}
</code></pre>
","8304550"
"How to convert (type *bytes.Buffer) to use as []byte in argument to w.Write","12529","","<p>I'm trying to return some json back from the server but get this error with the following code</p>

<pre><code>cannot use buffer (type *bytes.Buffer) as type []byte in argument to w.Write
</code></pre>

<p>With a little googling, I found <a href=""https://stackoverflow.com/questions/23454940/getting-bytes-buffer-does-not-implement-io-writer-error-message"">this SO answer</a> but couldn't get it to work (see second code sample with error message)</p>

<p>1st code sample</p>

<pre><code>buffer := new(bytes.Buffer)

for _, jsonRawMessage := range sliceOfJsonRawMessages{
    if err := json.Compact(buffer, jsonRawMessage); err != nil{
        fmt.Println(""error"")

    }

}   
fmt.Println(""json returned"", buffer)//this is json
w.Header().Set(""Content-Type"", contentTypeJSON)

w.Write(buffer)//error: cannot use buffer (type *bytes.Buffer) as type []byte in argument to w.Write
</code></pre>

<p>2nd code sample with error</p>

<pre><code>cannot use foo (type *bufio.Writer) as type *bytes.Buffer in argument to json.Compact
 cannot use foo (type *bufio.Writer) as type []byte in argument to w.Write


var b bytes.Buffer
foo := bufio.NewWriter(&amp;b)

for _, d := range t.J{
    if err := json.Compact(foo, d); err != nil{
        fmt.Println(""error"")

    }

}


w.Header().Set(""Content-Type"", contentTypeJSON)

w.Write(foo)
</code></pre>
","<p>Write requires a <code>[]byte</code> (slice of bytes), and you have a <code>*bytes.Buffer</code> (pointer to a buffer).</p>

<p>You could get the data from the buffer with <a href=""http://golang.org/pkg/bytes/#Buffer.Bytes"">Buffer.Bytes()</a> and give that to <code>Write()</code>:</p>

<pre><code>_, err = w.Write(buffer.Bytes())
</code></pre>

<p>...or use <a href=""http://golang.org/pkg/bytes/#Buffer.WriteTo"">Buffer.WriteTo()</a> to copy the buffer contents directly to a <code>Writer</code>:</p>

<pre><code>_, err = buffer.WriteTo(w)
</code></pre>

<p>Using a <code>bytes.Buffer</code> is not strictly necessary.  <a href=""http://golang.org/pkg/encoding/json/#Marshal"">json.Marshal()</a> returns a <code>[]byte</code> directly:</p>

<pre><code>var buf []byte

buf, err = json.Marshal(thing)

_, err = w.Write(buf)
</code></pre>
","29237675"
"How to use pprof in Go program","12511","","<p>How to use pprof in Go program?</p>

<p>There is a Go package named <a href=""http://golang.org/pkg/net/http/pprof/"">net/http/pprof</a>,but I can't use it.</p>

<p>The document says <code>go tool pprof http://localhost:6060/debug/pprof/heap</code> ,which does not work.</p>

<p>And,what does the below _ mean?</p>

<p><code>import _ ""net/http/pprof""</code></p>
","<p>Based on <a href=""https://stackoverflow.com/questions/13699297/how-to-use-pprof-in-go-program#comment18812277_13699612"">your comment</a>, the issue might be that you're not using the correct port number. </p>

<p>If you are running an http server at <code>http://localhost:9997</code>, then I think you want to run the command with <code>http://localhost:9997</code>:</p>

<pre><code>$ go tool pprof http://localhost:9997/debug/pprof/heap
</code></pre>

<p>According to the <a href=""http://golang.org/pkg/net/http/pprof/#pkg-overview"" rel=""nofollow noreferrer"">net/http/pprof pkg doc page</a>, if your application is already running an http server you do not need to start one and only need to include the <code>import _ ""net/http/pprof""</code> somewhere in your program. <code>http://localhost:6060</code> is the server started as an example and the host and port are arbitrary. </p>

<p><code>import _ ""net/http/pprof""</code> means the package is imported but you do not use any of its exported identifiers. According to the <a href=""http://golang.org/ref/spec#Import_declarations"" rel=""nofollow noreferrer"">go language spec</a>, this will import the package solely for its side effects. These side effects involve, I think, the execution of the <a href=""http://golang.org/doc/effective_go.html#init"" rel=""nofollow noreferrer"">init() functions</a> defined in the <a href=""http://golang.org/src/pkg/net/http/pprof/pprof.go?#L59"" rel=""nofollow noreferrer"">package's source files</a> and, apparently, <a href=""http://golang.org/pkg/expvar/#pkg-overview"" rel=""nofollow noreferrer"">registered variables</a>.</p>

<p>Also, you might find this blog post helpful:</p>

<p><a href=""http://blog.golang.org/2011/06/profiling-go-programs.html"" rel=""nofollow noreferrer"">http://blog.golang.org/2011/06/profiling-go-programs.html</a></p>
","13815841"
"Golang: pointer to function from string (function's name)","12449","","<p>Is there any chance to get pointer to function from function's name, presented as string? This needed for example to send some function as argument to another function. Some sort of metaprogramming, you know.</p>

<p>Thanks!</p>
","<p>Go functions are first class values. You don't need to revert to the poor tricks from dynamic languages.</p>

<pre><code>package main

import ""fmt""

func someFunction1(a, b int) int {
        return a + b
}

func someFunction2(a, b int) int {
        return a - b
}

func someOtherFunction(a, b int, f func(int, int) int) int {
        return f(a, b)
}

func main() {
        fmt.Println(someOtherFunction(111, 12, someFunction1))
        fmt.Println(someOtherFunction(111, 12, someFunction2))
}
</code></pre>

<p><a href=""http://play.golang.org/p/0S4M8OMwd_"" rel=""noreferrer"">Playground</a></p>

<hr>

<p>Output:</p>

<pre><code>123
99
</code></pre>

<p>If the selection of the function depends on some run-time-only known value, you can use a map:</p>

<pre><code>m := map[string]func(int, int) int {
        ""someFunction1"": someFunction1,
        ""someFunction2"": someFunction2,
}

...

z := someOtherFunction(x, y, m[key])
</code></pre>
","18018153"
":= operator and if statement in Golang","12420","","<p>The following works as a function to open a file</p>

<pre><code>func openFile(filename string) {
  var file *os.File
  var err error
  if file, err = os.Open(filename); err != nil {
    log.Printf(""Failed to open the file: %s."", filename)
    return
  }
  defer file.Close()
  // blahblahblah
}
</code></pre>

<p>however, this does not work, when I try to use := to declare the variable file</p>

<pre><code>func updateFrequencies(filename string, frequencyForWord map[string]int) {
  if file, err := os.Open(filename); err != nil {
     ....
  }
}
</code></pre>

<p>error: ./word_frequencies_2.go:30: undefined: file</p>

<p>But if I changed this slightly, this works</p>

<pre><code>file, err := os.Open(filename)
if err != nil {
   log.Printf(""Failed to open the file: %s."", filename)
   return
}
</code></pre>

<p>why can't I use := as part of the if statement?</p>
","<blockquote>
  <p>Why can't I use := as part of the if statement?</p>
</blockquote>

<p>You can, but then the variables are defined within the scope of the <code>if</code> block. So, <code>file</code> is not defined outside of your <code>if</code> block.</p>

<p>The same rule applies to definitions in <code>for</code>, <code>switch</code>, and similar blocks.</p>
","18698091"
"Initialize embedded struct in Go","12356","","<p>I have the following <code>struct</code> which contains a <code>net/http.Request</code>:</p>

<pre><code>type MyRequest struct {
    http.Request
    PathParams map[string]string
}
</code></pre>

<p>Now I want to initialize the anonymous inner struct <code>http.Request</code> in the following function:</p>

<pre><code>func New(origRequest *http.Request, pathParams map[string]string) *MyRequest {
    req := new(MyRequest)
    req.PathParams = pathParams
    return req
}
</code></pre>

<p>How can I initialize the inner struct with the parameter <code>origRequest</code>?</p>
","<p>What about:</p>

<pre><code>func New(origRequest *http.Request, pathParams map[string]string) *MyRequest {
        return &amp;MyRequest{*origRequest, pathParams}
}
</code></pre>

<p>It shows that instead of</p>

<pre><code>New(foo, bar)
</code></pre>

<p>you might prefer just</p>

<pre><code>&amp;MyRequest{*foo, bar}
</code></pre>

<p>directly.</p>
","12537860"
"Not buffered http.ResponseWritter in Golang","12326","","<p>I'm writing a simple web app in Go and I want my responses to be streamed to the client (i.e. not buffered and sent in blocks once the request is fully processed) :</p>

<pre><code>func handle(res http.ResponseWriter, req *http.Request) {
  fmt.Fprintf(res, ""sending first line of data"")
  sleep(10) //not real code
  fmt.Fprintf(res, ""sending second line of data"")
}
</code></pre>

<p>From the client point of view, the two lines will be sent at the same time. Any suggestions are appreciated :)</p>

<h3>Edit after @dystroy answer</h3>

<p>It's possible to flush after each write I personally make, but in my use case it's not enough:</p>

<pre><code>cmd := exec.Command(""a long command that outputs lots of lines"")
cmd.Stdout = res //where res is a http.ResponseWritter
cmd.Stderr = res
err := cmd.Run()
</code></pre>

<p>I want the output of my <code>cmd</code> to be flushed as well. Anyway to ""autoflush"" the ResponseWritter ?</p>

<h3>Solution</h3>

<p>I found help on golang's mailing list. There is 2 way to achieve this: using <a href=""http://golang.org/pkg/net/http/#example_Hijacker"" rel=""noreferrer"">hijacker</a> that allow to take over the underlying TCP connection of HTTP, or piping the stdout and stderr of the command in a go routine that will write and flush :</p>

<pre><code>pipeReader, pipeWriter := io.Pipe()
cmd.Stdout = pipeWriter
cmd.Stderr = pipeWriter
go writeCmdOutput(res, pipeReader)
err := cmd.Run()
pipeWriter.Close()

//---------------------
func writeCmdOutput(res http.ResponseWriter, pipeReader *io.PipeReader) {
  buffer := make([]byte, BUF_LEN)
  for {
    n, err := pipeReader.Read(buffer)
    if err != nil {
      pipeReader.Close()
      break
    }

    data := buffer[0:n]
    res.Write(data)
    if f, ok := res.(http.Flusher); ok {
      f.Flush()
    }
    //reset buffer
    for i := 0; i &lt; n; i++ {
      buffer[i] = 0
    }
  } 
}
</code></pre>

<h3>Last update</h3>

<p>Even nicer: <a href=""http://play.golang.org/p/PpbPyXbtEs"" rel=""noreferrer"">http://play.golang.org/p/PpbPyXbtEs</a></p>
","<p>As implied in <a href=""http://golang.org/pkg/net/http/#Flusher"">the documentation</a>, some <code>ResponseWriter</code> may implement the <code>Flusher</code> interface.</p>

<p>This means you can do something like this :</p>

<pre><code>func handle(res http.ResponseWriter, req *http.Request) {
  fmt.Fprintf(res, ""sending first line of data"")
  if f, ok := res.(http.Flusher); ok {
     f.Flush()
  } else {
     log.Println(""Damn, no flush"");
  }
  sleep(10) //not real code
  fmt.Fprintf(res, ""sending second line of data"")
}
</code></pre>

<p>Be careful that buffering can occur in many other places in the network or client side.</p>
","19292461"
"Save and load crypto/rsa PrivateKey to and from the disk","12323","","<p>I'm using <code>crypto/rsa</code>, and trying to find a way to <em>properly</em> save and load a key. Is there a correct way to create a <code>[]byte</code> from an <code>rsa.PrivateKey</code>. If so, is there a way to properly do so for an <code>rsa.PublicKey</code>?</p>

<p>Thank you all very much.</p>
","<p>You need some sort of format to marshal the key into. One format supported by the Go standard library can be found here: <a href=""http://golang.org/pkg/crypto/x509/#MarshalPKCS1PrivateKey"" rel=""noreferrer"">http://golang.org/pkg/crypto/x509/#MarshalPKCS1PrivateKey</a></p>

<pre><code>func MarshalPKCS1PrivateKey(key *rsa.PrivateKey) []byte
</code></pre>

<p>The inverse function is <a href=""http://golang.org/pkg/crypto/x509/#ParsePKCS1PrivateKey"" rel=""noreferrer"">http://golang.org/pkg/crypto/x509/#ParsePKCS1PrivateKey</a>.</p>

<pre><code>func ParsePKCS1PrivateKey(der []byte) (key *rsa.PrivateKey, err error)
</code></pre>

<hr>

<p>However, it is relatively standard to encode the marshaled key into a PEM file.</p>

<pre><code>pemdata := pem.EncodeToMemory(
    &amp;pem.Block{
        Type: ""RSA PRIVATE KEY"",
        Bytes: x509.MarshalPKCS1PrivateKey(key),
    },
)
</code></pre>

<p>You can find a full example <a href=""https://golang.org/src/crypto/tls/generate_cert.go"" rel=""noreferrer"">here</a>.</p>
","13555138"
"Access a map value using a variable key in a Go template","12313","","<p>How can I look up the value of a map by using a variable key without iterating? </p>

<p>So one can lookup a constant key on variable map $x with <code>$x.key1</code>, but is it possible to do <code>amap.$key</code>?</p>
","<p>You use the <code>index</code> function:</p>

<pre><code>{{index .Amap ""key1""}}
</code></pre>

<p>From <a href=""http://golang.org/pkg/text/template/"">http://golang.org/pkg/text/template/</a>:</p>

<pre><code>index
    Returns the result of indexing its first argument by the
    following arguments. Thus ""index x 1 2 3"" is, in Go syntax,
    x[1][2][3]. Each indexed item must be a map, slice, or array.
</code></pre>
","26152110"
"How to convert an int64 to int in Go?","12301","","<p>In Go, what is the best strategy for converting <code>int64</code> to <code>int</code>? I am having difficulty comparing the two</p>

<pre><code>package main 

import (
    ""math""
    ""strings""
    ""strconv""
)

type largestPrimeFactor struct {
    N      int
    Result int
}

func main() {
    base := largestPrimeFactor{N:13195}
    max := math.Sqrt(float64(base.N))

    maxStr := strconv.FormatFloat(max, 'E', 'G', 64)
    maxShift := strings.Split(maxStr, ""."")[0]
    maxInt, err := strconv.ParseInt(maxShift, 10, 64)

    if (err != nil) {
        panic(err)
    }
</code></pre>

<p>on this next line</p>

<pre><code>    for a := 2; a &lt; maxInt; a++ {
        if isPrime(a) {
            if base.N % a == 0 {
                base.Result = a
            }
        }
    }

    println(base)
}

func isPrime(n int) bool {
    flag := false

    max := math.Sqrt(float64(n))

    maxStr := strconv.FormatFloat(max, 'E', 'G', 64)
    maxShift := strings.Split(maxStr, ""."")[0]
    maxInt, err := strconv.ParseInt(maxShift, 10, 64)

    if (err != nil) {
        panic(err)
    }

    for a := 2; a &lt; maxInt; a++ {
        if (n % a == 0) {
            flag := true
        }
    }
    return flag
}
</code></pre>
","<p>You convert them with a type <a href=""https://golang.org/ref/spec#Conversions"" rel=""noreferrer"">""conversion""</a></p>

<pre><code>var a int
var b int64
int64(a) &lt; b
</code></pre>

<p>When comparing values, you always want to convert the smaller type to the larger. Converting the other way will possibly truncate the value:</p>

<pre><code>var x int32 = 0
var y int64 = math.MaxInt32 + 1 // y == 2147483648
if x &lt; int32(y) {
// this evaluates to false, because int32(y) is -2147483648
</code></pre>

<p>Or in your case to convert the <code>maxInt</code> <code>int64</code> value to an <code>int</code>, you could use</p>

<pre><code>for a := 2; a &lt; int(maxInt); a++ {
</code></pre>

<p>which would fail to execute correctly if <code>maxInt</code> overflows the max value of the <code>int</code> type on your system. </p>
","38750602"
"How do I dump the struct into the byte array without reflection?","12299","","<p>I already found <a href=""http://golang.org/pkg/encoding/binary/"" rel=""nofollow noreferrer"">encoding/binary</a> package to deal with it, but it depended on <a href=""http://golang.org/pkg/reflect/"" rel=""nofollow noreferrer"">reflect</a> package so it didn't work with uncapitalized(that is, unexported) struct fields. However I spent a week to find that problem out, I still have a question: if struct fields should not be exported, how do I dump them easily into binary data?</p>

<p><strong>EDIT:</strong> Here's the example. If you capitalize the name of fields of <code>Data</code> struct, that works properly. But <code>Data</code> struct was intended to be an abstract type, so I don't want to export these fields.</p>

<pre class=""lang-go prettyprint-override""><code>package main
import (
    ""fmt""
    ""encoding/binary""
    ""bytes""
)

type Data struct {
    id int32
    name [16]byte
}


func main() {
    d := Data{Id: 1}
    copy(d.Name[:], []byte(""tree""))
    buffer := new(bytes.Buffer)
    binary.Write(buffer, binary.LittleEndian, d)
    // d was written properly
    fmt.Println(buffer.Bytes())
    // try to read...
    buffer = bytes.NewBuffer(buffer.Bytes())
    var e = new(Data)
    err := binary.Read(buffer, binary.LittleEndian, e)
    fmt.Println(e, err)
}
</code></pre>
","<p>Your best option would probably be to use the <a href=""http://golang.org/pkg/encoding/gob"" rel=""noreferrer"">gob package</a> and let your struct implement the <a href=""http://golang.org/pkg/encoding/gob/#GobDecoder"" rel=""noreferrer"">GobDecoder</a> and <a href=""http://golang.org/pkg/encoding/gob/#GobEncoder"" rel=""noreferrer"">GobEncoder</a> interfaces in order to serialize and deserialize private fields.</p>

<p>This would be safe, platform independent, and efficient. And you have to add those GobEncode and GobDecode functions only on structs with unexported fields, which means you don't clutter the rest of your code.</p>

<pre><code>func (d *Data) GobEncode() ([]byte, error) {
    w := new(bytes.Buffer)
    encoder := gob.NewEncoder(w)
    err := encoder.Encode(d.id)
    if err!=nil {
        return nil, err
    }
    err = encoder.Encode(d.name)
    if err!=nil {
        return nil, err
    }
    return w.Bytes(), nil
}

func (d *Data) GobDecode(buf []byte) error {
    r := bytes.NewBuffer(buf)
    decoder := gob.NewDecoder(r)
    err := decoder.Decode(&amp;d.id)
    if err!=nil {
        return err
    }
    return decoder.Decode(&amp;d.name)
}

func main() {
    d := Data{id: 7}
    copy(d.name[:], []byte(""tree""))
    buffer := new(bytes.Buffer)
    // writing
    enc := gob.NewEncoder(buffer)
    err := enc.Encode(d)
    if err != nil {
        log.Fatal(""encode error:"", err)
    }
    // reading
    buffer = bytes.NewBuffer(buffer.Bytes())
    e := new(Data)
    dec := gob.NewDecoder(buffer)
    err = dec.Decode(e)
    fmt.Println(e, err)
}
</code></pre>
","12854659"
"Does it make sense to have two packages in the same directory? (golang)","12278","","<p>Ok, I have a project that provides a library (exports some funcs) and also must provide a command-line interface (there must be an executable file).</p>

<p>Example of directory structure:</p>

<pre><code>whatever.io/
    myproject/
        main.go
        myproject.go
</code></pre>

<p>The go compiler needs the <em>package main</em> and <em>func main</em> to start execution. My library needs the <em>package myproject</em> where I put stuff on it. This is what the go tool says when I am building another project that tries to import myproject:</p>

<pre><code>main.go:5:2: found packages myproject (myproject.go) and main (main.go) in $GOPATH/src/whatever.io/myproject
</code></pre>

<p>So I believe there is no way to do it.</p>

<p>Should I move the library or the CLI to another package?</p>
","<p>Just move your packages inside a new folder within the same directory of main.go.
Remember to import the new package from the reference of the $GOPATH.</p>

<p>Example:</p>

<pre><code>user@user:~/p/go/test/so-multipack$ ls -R
.:
a  main.go

./a:
a.go
user@user:~/p/go/test/so-multipack$ cat main.go 
package main

import (
    ""../so-multipack/a""
)
func main(){
    a.Hello()
}
user@user:~/p/go/test/so-multipack$ cat a/a.go 
package a
import (
    ""fmt""
)
func Hello(){
    fmt.Println(""hello from a"")
}
user@user:~/p/go/test/so-multipack$ go run main.go 
hello from a
user@user:~/p/go/test/so-multipack$ go build 
user@user:~/p/go/test/so-multipack$ ls
a  main.go  so-multipack
user@user:~/p/go/test/so-multipack$ 
</code></pre>

<p>Useful link:</p>

<p><a href=""https://stackoverflow.com/questions/19234445/go-build-vs-go-build-file-go/19240125#19240125"">go build vs go build file.go</a></p>
","20428573"
"Golang Determining whether *File points to file or directory","12265","","<p>Is there a way to determine whether my *File is pointing to a file or a directory?</p>

<pre><code>fileOrDir, err := os.Open(name)
// How do I know whether I have a file or directory?
</code></pre>

<p>I want to be able to read stats about the file if it is just a file, and be able to read the files within the directory if it is a directory</p>

<pre><code>fileOrDir.Readdirnames(0) // If dir
os.Stat(name) // If file
</code></pre>
","<p>For example,</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
)

func main() {
    name := ""FileOrDir""
    fi, err := os.Stat(name)
    if err != nil {
        fmt.Println(err)
        return
    }
    switch mode := fi.Mode(); {
    case mode.IsDir():
        // do directory stuff
        fmt.Println(""directory"")
    case mode.IsRegular():
        // do file stuff
        fmt.Println(""file"")
    }
}
</code></pre>

<p>Note:</p>

<p>The example is for Go 1.1. For Go 1.0, replace <code>case mode.IsRegular():</code> with <code>case mode&amp;os.ModeType == 0:</code>.</p>
","8824952"
"Go string pointer to string","12251","","<p>Is it possible to get the string value from a pointer to a string?</p>

<p>I'm using the <a href=""https://github.com/droundy/goopt"">goopt package</a> to handle flag parsing and the package returns *string only. But I want to use these value to call a function in a map.</p>

<p>As an example.</p>

<pre><code>var strPointer = new(string)
*strPointer = ""string""

functions := map[string]func() {
    ""string"": func(){
        fmt.Println(""works"")
    },
}  

//Do something to get the string value

functions[strPointerValue]()
</code></pre>

<p>You can see the problem demonstrated here <a href=""http://play.golang.org/p/1s0-d-GO-L"">http://play.golang.org/p/1s0-d-GO-L</a></p>
","<p>Dereference the pointer:</p>

<pre><code>strPointerValue := *strPointer
</code></pre>
","26494015"
"json unmarshal time that isn't in RFC 3339 format","12228","","<p>What is the appropriate way to handle deserialization of different time formats in Go? The encoding/json package seems to be entirely rigid in only accepted RFC 3339. I can deserialize into a string, transform that into RFC 3339 and then unmarshal it but I don't really want to do that. Any better solutions?</p>
","<p>You will have to implement the <a href=""http://golang.org/pkg/encoding/json/#Marshaler"" rel=""noreferrer""><code>json.Marshaler</code></a> / <a href=""http://golang.org/pkg/encoding/json/#Unmarshaler"" rel=""noreferrer""><code>json.Unmarshaler</code></a> interfaces on a custom type and use that instead, an <a href=""http://play.golang.org/p/UcE229WT98"" rel=""noreferrer"">example</a>:</p>

<pre><code>type CustomTime struct {
    time.Time
}

const ctLayout = ""2006/01/02|15:04:05""

func (ct *CustomTime) UnmarshalJSON(b []byte) (err error) {
    s := strings.Trim(string(b), ""\"""")
    if s == ""null"" {
       ct.Time = time.Time{}
       return
    }
    ct.Time, err = time.Parse(ctLayout, s)
    return
}

func (ct *CustomTime) MarshalJSON() ([]byte, error) {
  if ct.Time.UnixNano() == nilTime {
    return []byte(""null""), nil
  }
  return []byte(fmt.Sprintf(""\""%s\"""", ct.Time.Format(ctLayout))), nil
}

var nilTime = (time.Time{}).UnixNano()
func (ct *CustomTime) IsSet() bool {
    return ct.UnixNano() != nilTime
}

type Args struct {
    Time CustomTime
}

var data = `
    {""Time"": ""2014/08/01|11:27:18""}
`

func main() {
    a := Args{}
    fmt.Println(json.Unmarshal([]byte(data), &amp;a))
    fmt.Println(a.Time.String())
}
</code></pre>

<p><strong>edit</strong>: added <code>CustomTime.IsSet()</code> to check it was actually set or not, for future reference.</p>
","25088283"
"Load package dynamically in golang","12203","","<p>Is it possible to load a specific package during runtime? 
I want to have a kind of plugins where each one has the same functions than the others but with different behaviour, and depending on the configuration file, load one or other.
Thanks. </p>
","<p>You might consider executing the ‘plugin’ packages at runtime, by writing out a new program (say, to a temp directory) and executing via <a href=""http://golang.org/pkg/os/exec/"">exec.Command</a>, something along the lines of <code>exec.Command(""go"", ""run"", files…).Run()</code></p>

<p>You’ll see some similar code <a href=""https://github.com/clipperhouse/gen/blob/master/execute.go"">here</a>.</p>
","24641415"
"Unmarshaling json in Golang: required field?","12128","","<p>Is it possible to generate an error if a field was not found in json while unmarshaling in Golang? I could not find it in documentation. Is there any tag that specifies the field as required?</p>
","<p>There is no tag in the <code>encoding/json</code> package that sets a field to ""required"". You will either have to write your own <code>MarshalJSON()</code> method, or do a post check for missing fields.</p>

<p>To check for missing fields, you will have to use pointers in order to distinguish between missing/null and zero values:</p>

<pre><code>type JsonStruct struct {
    String *string
    Number *float64
}
</code></pre>

<p>Full working example:</p>

<pre><code>package main

import (
    ""fmt""
    ""encoding/json""
)

type JsonStruct struct {
    String *string
    Number *float64
}

var rawJson = []byte(`{
    ""string"":""We do not provide a number""
}`)


func main() {
    var s *JsonStruct
    err := json.Unmarshal(rawJson, &amp;s)
    if err != nil {
        panic(err)
    }

    if s.String == nil {
        panic(""String is missing or null!"")
    }

    if s.Number == nil {
        panic(""Number is missing or null!"")
    }

    fmt.Printf(""String: %s  Number: %f\n"", *s.String, *s.Number)
}
</code></pre>

<p><a href=""http://play.golang.org/p/kjpsbsXV2q"">Playground</a></p>
","19634141"
"Which types are mutable and immutable in the Google Go Language?","12113","","<p>In Google Go, I read that Strings are immutable, ok but are int's?
What about other types? As a slightly older programmer I prefer mutability even though I know the benefits of immutability, I prefer to live dangerously.</p>

<p>Know what types are mutable or immutable would be very helpful.</p>

<hr>

<p>Update, what I am mostly concerned about is the practical issues depending upon the type being mutable or immutable. As in the typical example in Java, if you create a String in a loop and loop for 10,000 times, you will get 10,000 String's created which are then later garbage collected. This has actually been a serious issue in a project in a company I worked at.</p>

<p>The the question is, does Go's Immutability in some cases cause the same problem? </p>

<p>It affects how you should treat the var. (or I assume it does).</p>

<hr>

<p>Update again, I am also concerned about other practical concerns. Knowing that something is immutable means that I can write code which is parallel and updates to one reference of the object should not update the other references. However sometimes I wish to do dangerous things, I want mutability.</p>

<p>These are consequences of mutability vs immutability and affect how I can write the code.</p>
","<p>Don't worry -- Go will let you shoot yourself in the foot if you really want to :-)</p>

<p>Go is not like Erlang, which might be what you are getting at with the question.</p>

<pre><code>x := 1
x = 2
</code></pre>

<p>allocates one variable, <code>x</code>, with a value of <code>1</code>, then reassigns it to <code>2</code> -- no additional memory is allocated here.  </p>

<p>As you note, strings are immutable, so doing a string manipulation can result in making copies.  If you find that you want to do in-place modifications to character data, you'll probably want to operate on variables of <code>[]byte</code> via the <code>bytes</code> package.</p>

<p>Russ Cox's post about this should answer most of your questions about basic data structures: <a href=""http://research.swtch.com/2009/11/go-data-structures.html"">http://research.swtch.com/2009/11/go-data-structures.html</a></p>

<p>As other commenters noted, you'll want to look at the value semantics of Go functions -- they might be a little surprising at first.</p>

<p>If you have the following function:</p>

<pre><code>func (t MyType) myFunc() {
    // do something to set a field in t
}
</code></pre>

<p>and you call in your code</p>

<pre><code>myVar.myFunc()
</code></pre>

<p>you might be surprised to see that this doesn't do what you want because the <code>t</code> that is seen in <code>myFunc()</code> is really a <em>copy</em> of <code>myVar</code>.  </p>

<p>But, the following <em>will</em> work:</p>

<pre><code>func (t *myType) myFunc() {
    // do something to set a field in t
}
</code></pre>

<p>because the function has a copy of the <em>pointer</em> and can access the underlying structure via that pointer.</p>
","8021805"
"How can I make net.Read wait for input in golang?","12110","","<p>So I'm making a server for my elevator in Go, and I'm running the function ""handler"" as a goroutine with a TCP-connection.
I want it to read from a connection, and if no signal is detected within a certain timespan I want it to return an error. </p>

<pre><code>func handler(conn net.Conn){
    conn.SetReadTimeout(5e9)
    for{
        data := make([]byte, 512)
        _,err := conn.Read(data)
    }
}
</code></pre>

<p>As long as I have a client sending stuff over the connection it seems to be working fine, but as soon as the client stops sending the net.Read function returns the error EOF and starts looping with no delay whatsoever.</p>

<p>This might be how Read is supposed to work, but could someone suggest another way to handle the problem without having to close and open the connection every time I want to read something?</p>
","<p>Read is working as expected I think. It sounds like you want the net.Read to work like a channel in Go. This is pretty easy in go just wrap the net.Read in a running goroutine and use select to read from channels a goroutine is really cheap and so is a channel</p>

<p>Example:</p>

<pre><code>ch := make(chan []byte)
eCh := make(chan error)

// Start a goroutine to read from our net connection
go func(ch chan []byte, eCh chan error) {
  for {
    // try to read the data
    data := make([]byte, 512)
    _,err := conn.Read(data)
    if err != nil {
      // send an error if it's encountered
      eCh&lt;- err
      return
    }
    // send data if we read some.
    ch&lt;- data
  }
}(ch, eCh)

ticker := time.Tick(time.Second)
// continuously read from the connection
for {
  select {
     // This case means we recieved data on the connection
     case data := &lt;-ch:
       // Do something with the data
     // This case means we got an error and the goroutine has finished
     case err := &lt;-eCh:
       // handle our error then exit for loop
       break;
     // This will timeout on the read.
     case &lt;-ticker:
       // do nothing? this is just so we can time out if we need to.
       // you probably don't even need to have this here unless you want
       // do something specifically on the timeout.
  }
}
</code></pre>
","9764191"
"How to share mysql connection between http goroutines?","12081","","<p>I'm a Go noob and can't find any complete examples of opening a mysql connection in Go and then sharing it among http handlers. Here is my code so far, how would I use the db connection that I opened in main() in my HomeHandler? </p>

<pre><code>package main

import (
  ""database/sql""
  ""fmt""
  _ ""github.com/go-sql-driver/mysql""
  ""github.com/gorilla/mux""
  ""log""
  ""net/http""
)

func main() {

  fmt.Println(""starting up"")

  db, err := sql.Open(""mysql"", ""root:@/mydb?charset=utf8"")
  if err != nil {
    log.Fatalf(""Error opening database: %v"", err)
  }

  db.SetMaxIdleConns(100)

  r := mux.NewRouter()
  r.HandleFunc(""/"", HomeHandler)

  http.Handle(""/"", r)
  http.ListenAndServe("":8080"", nil)

}

func HomeHandler(w http.ResponseWriter, r *http.Request) {

  fmt.Fprintf(w, ""home"")

}
</code></pre>
","<p>The database/sql package manages the connection pooling automatically for you.</p>

<p><code>sql.Open(..)</code> returns a handle which <strong>represents a connection pool</strong>, not a single connection. The database/sql package automatically opens a new connection if all connections in the pool are busy.</p>

<p>Applied to your code this means, that you just need to share the db-handle and use it in the HTTP handlers:</p>

<pre><code>package main

import (
    ""database/sql""
    ""fmt""
    ""github.com/gorilla/mux""
    _ ""github.com/go-sql-driver/mysql""
    ""log""
    ""net/http""
)

var db *sql.DB // global variable to share it between main and the HTTP handler

func main() {
    fmt.Println(""starting up"")

    var err error
    db, err = sql.Open(""mysql"", ""root@unix(/tmp/mysql.sock)/mydb"") // this does not really open a new connection
    if err != nil {
        log.Fatalf(""Error on initializing database connection: %s"", err.Error())
    }

    db.SetMaxIdleConns(100)

    err = db.Ping() // This DOES open a connection if necessary. This makes sure the database is accessible
    if err != nil {
        log.Fatalf(""Error on opening database connection: %s"", err.Error())
    }

    r := mux.NewRouter()
    r.HandleFunc(""/"", HomeHandler)

    http.Handle(""/"", r)
    http.ListenAndServe("":8080"", nil)
}

func HomeHandler(w http.ResponseWriter, r *http.Request) {
    var msg string
    err := db.QueryRow(""SELECT msg FROM hello WHERE page=?"", ""home"").Scan(&amp;msg)
    if err != nil {
        fmt.Fprintf(w, ""Database Error!"")
    } else {
        fmt.Fprintf(w, msg)
    }
}
</code></pre>
","17384204"
"Why do I get a ""cannot assign"" error when setting value to a struct as a value in a map?","12077","","<p>New to Go. Encountered this error and have had no luck finding the cause or the rationale for it:</p>

<p>If I create a struct, I can obviously assign and re-assign the values no problem:</p>

<pre><code>type Person struct {
 name string
 age int
}

func main() {
  x := Person{""Andy Capp"", 98}
  x.age = 99
  fmt.Printf(""age: %d\n"", x.age)
}
</code></pre>

<p>but if the struct is one value in a map:</p>

<pre><code>type Person struct {
     name string
     age int
 }

type People map[string]Person

func main() {
  p := make(People)
  p[""HM""] = Person{""Hank McNamara"", 39}
  p[""HM""].age = p[""HM""].age + 1
  fmt.Printf(""age: %d\n"", p[""HM""].age)
}
</code></pre>

<p>I get <code>cannot assign to p[""HM""].age</code>. That's it, no other info. <a href=""http://play.golang.org/p/VRlSItd4eP"" rel=""noreferrer"">http://play.golang.org/p/VRlSItd4eP</a></p>

<p>I found a way around this - creating an <code>incrementAge</code> func on Person, which can be called and the result assigned to the map key, eg <code>p[""HM""] = p[""HM""].incrementAge()</code>.</p>

<p>But, my question is, what is the reason for this ""cannot assign"" error, and why shouldn't I be allowed to assign the struct value directly?</p>
","<p><code>p[""HM""]</code> isn't quite a regular <a href=""https://golang.org/ref/spec#Address_operators"" rel=""noreferrer"">addressable</a> value: <a href=""https://en.wikipedia.org/wiki/Hash_table#Dynamic_resizing"" rel=""noreferrer"">hashmaps can grow at runtime</a>, and then their values get moved around in memory, and the old locations become outdated. If values in maps were treated as regular addressable values, those internals of the <code>map</code> implementation would get exposed. </p>

<p>So, instead, <code>p[""HM""]</code> is a slightly different thing called a ""map <a href=""https://golang.org/ref/spec#Index_expressions"" rel=""noreferrer"">index expression</a>"" in the spec; if you search the spec for the phrase ""index expression"" you'll see you can do certain things with them, like read them, assign to them, and use them in increment/decrement expressions (for numeric types). But you can't do everything. They could have chosen to implement <em>more</em> special cases than they did, but I'm guessing they didn't just to keep things simple.</p>

<p>Your approach seems good here--you change it to a regular assignment, one of the specifically-allowed operations. Another approach (maybe good for larger structs you want to avoid copying around?) is to <a href=""https://play.golang.org/p/n5C4CsKOAV"" rel=""noreferrer"">make the map value a regular old pointer</a> that you can modify the underlying object through: </p>

<pre><code>package main

import ""fmt""
type Person struct {
     name string
     age int
 }

type People map[string]*Person

func main() {
  p := make(People)
  p[""HM""] = &amp;Person{""Hank McNamara"", 39}
  p[""HM""].age += 1
  fmt.Printf(""age: %d\n"", p[""HM""].age)
}
</code></pre>
","32751792"
"Calling a template with several pipeline parameters","12038","","<p>In a Go template, sometimes the way to pass the right data to the right template feels awkward to me. Calling a template with a pipeline parameter looks like calling a function with only one parameter.</p>

<p>Let's say I have a site for Gophers about Gophers. It has a home page main template, and a utility template to print a list of Gophers.</p>

<p><a href=""http://play.golang.org/p/Jivy_WPh16"" rel=""nofollow noreferrer"">http://play.golang.org/p/Jivy_WPh16</a></p>

<p>Output :</p>

<pre><code>*The great GopherBook*    (logged in as Dewey)

    [Most popular]  
        &gt;&gt; Huey
        &gt;&gt; Dewey
        &gt;&gt; Louie

    [Most active]   
        &gt;&gt; Huey
        &gt;&gt; Louie

    [Most recent]   
        &gt;&gt; Louie
</code></pre>

<p>Now I want to add a bit of context in the subtemplate : format the name ""Dewey"" differently inside the list because it's the name of the currently logged user. But I can't pass the name directly because there is <a href=""http://golang.org/pkg/text/template/#hdr-Actions"" rel=""nofollow noreferrer"">only one</a> possible ""dot"" argument pipeline! What can I do? </p>

<ul>
<li>Obviously I can copy-paste the subtemplate code into the main template (I don't want to because it drops all the interest of having a subtemplate).</li>
<li>Or I can juggle with some kind of global variables with accessors (I don't want to either).</li>
<li>Or I can create a new specific struct type for each template parameter list (not great).</li>
</ul>
","<p>You could register a ""dict"" function in your templates that you can use to pass multiple values to a template call. The call itself would then look like that:</p>

<pre><code>{{template ""userlist"" dict ""Users"" .MostPopular ""Current"" .CurrentUser}}
</code></pre>

<p>The code for the little ""dict"" helper, including registering it as a template func is here:</p>

<pre><code>var tmpl = template.Must(template.New("""").Funcs(template.FuncMap{
    ""dict"": func(values ...interface{}) (map[string]interface{}, error) {
        if len(values)%2 != 0 {
            return nil, errors.New(""invalid dict call"")
        }
        dict := make(map[string]interface{}, len(values)/2)
        for i := 0; i &lt; len(values); i+=2 {
            key, ok := values[i].(string)
            if !ok {
                return nil, errors.New(""dict keys must be strings"")
            }
            dict[key] = values[i+1]
        }
        return dict, nil
    },
}).ParseGlob(""templates/*.html"")
</code></pre>
","18276968"
"Compile 32 bit binary on 64 bit system","12033","","<p>I've coded a Go program in a 64 bit system but I want to compile a 32 bit binary! How can I do it? The 64 bit binary is working just great but I have no idea how to create a 32 bit binary.
I'd be very grateful if someone could help me on this!</p>

<p>Thanks in advance!</p>

<p>PS: I'm using windows OS.</p>
","<p>If you built your Go from source, then you can build any additional compilers and libraries for any CPU and OS. If you are on windows/amd64 and want to build for windows/386, then this will build everything you need to compile for windows/386:</p>

<pre class=""lang-none prettyprint-override""><code>set GOARCH=386  
cd %GOROOT%\src  
make.bat --no-clean  
</code></pre>

<p>Once you have done that, you can build your windows/386 executable with:</p>

<pre class=""lang-none prettyprint-override""><code>set GOARCH=386  
cd %YOUR_PROG_DIR%  
go build  
</code></pre>

<p>Since you are on windows/amd64, you should be able to even run / test your windows/386 programs too. Just make sure to <code>set GOARCH=386</code> before you invoke any commands for windows/386.</p>

<p>One caveat: this does not support <code>cgo</code>, so you cannot use any packages that use <code>cgo</code>.</p>
","16554633"
"How best do I keep a long running Go program, running?","12000","","<p>I've a long running server written in Go.  Main fires off several goroutines where the logic of the program executes.  After that main does nothing useful.  Once main exits, the program will quit.  The method I am using right now to keep the program running is just a simple call to fmt.Scanln().  I'd like to know how others keep main from exiting.  Below is a basic example.  What ideas or best practices could be used here?</p>

<p>I considered creating a channel and delaying exit of main by receiving on said channel, but I think that could be problematic if all my goroutines become inactive at some point.</p>

<p>Side note:  In my server (not the example), the program isn't actually running connected to a shell, so it doesn't really make sense to interact with the console anyway.  For now it works, but I'm looking for the ""correct"" way, assuming there is one.</p>

<pre><code>package main

import (
    ""fmt""
    ""time""
)

func main() {
    go forever()
    //Keep this goroutine from exiting
    //so that the program doesn't end.
    //This is the focus of my question.
    fmt.Scanln()
}

func forever() {
    for ; ; {
    //An example goroutine that might run
    //indefinitely. In actual implementation
    //it might block on a chanel receive instead
    //of time.Sleep for example.
        fmt.Printf(""%v+\n"", time.Now())
        time.Sleep(time.Second)
    }
}
</code></pre>
","<p>The current design of Go's runtime assumes that the programmer is responsible for detecting when to terminate a goroutine and when to terminate the program. The programmer needs to compute the termination condition for goroutines and also for the entire program. A program can be terminated in a normal way by calling <a href=""http://golang.org/pkg/os/#Exit"" rel=""noreferrer""><code>os.Exit</code></a> or by returning from the <code>main()</code> function.</p>

<p>Creating a channel and delaying exit of <code>main()</code> by immediately receiving on said channel is a valid approach of preventing <code>main</code> from exiting. But it does not solve the problem  of detecting when to terminate the program.</p>

<p>If the number of goroutines cannot be computed before the <code>main()</code> function enters the wait-for-all-goroutines-to-terminate loop, you need to be sending deltas so that <code>main</code> function can keep track of how many goroutines are in flight:</p>

<pre><code>// Receives the change in the number of goroutines
var goroutineDelta = make(chan int)

func main() {
    go forever()

    numGoroutines := 0
    for diff := range goroutineDelta {
        numGoroutines += diff
        if numGoroutines == 0 { os.Exit(0) }
    }
}

// Conceptual code
func forever() {
    for {
        if needToCreateANewGoroutine {
            // Make sure to do this before ""go f()"", not within f()
            goroutineDelta &lt;- +1

            go f()
        }
    }
}

func f() {
    // When the termination condition for this goroutine is detected, do:
    goroutineDelta &lt;- -1
}
</code></pre>

<p>An alternative approach is to replace the channel with <a href=""http://golang.org/pkg/sync/#WaitGroup"" rel=""noreferrer""><code>sync.WaitGroup</code></a>. A drawback of this approach is that <code>wg.Add(int)</code> needs to be called before calling <code>wg.Wait()</code>, so it is necessary to create at least 1 goroutine in <code>main()</code> while subsequent goroutines can be created in any part of the program:</p>

<pre><code>var wg sync.WaitGroup

func main() {
    // Create at least 1 goroutine
    wg.Add(1)
    go f()

    go forever()
    wg.Wait()
}

// Conceptual code
func forever() {
    for {
        if needToCreateANewGoroutine {
            wg.Add(1)
            go f()
        }
    }
}

func f() {
    // When the termination condition for this goroutine is detected, do:
    wg.Done()
}
</code></pre>
","9544599"
"How to break a long line of code in Golang?","11988","","<p>Coming from Python, I'm not used to see code lines longer than 80 columns.
So when I encounter this:</p>

<pre><code>err := database.QueryRow(""select * from users where user_id=?"", id).Scan(&amp;ReadUser.ID, &amp;ReadUser.Name, &amp;ReadUser.First, &amp;ReadUser.Last, &amp;ReadUser.Email)
</code></pre>

<p>I tried to break it to </p>

<pre><code>err := database.QueryRow(""select * from users where user_id=?"", id) \
    .Scan(&amp;ReadUser.ID, &amp;ReadUser.Name, &amp;ReadUser.First, &amp;ReadUser.Last, &amp;ReadUser.Email)
</code></pre>

<p>But I get </p>

<pre><code> syntax error: unexpected \
</code></pre>

<p>I also tried just breaking the line with hitting enter and put a semicolon at the end:</p>

<pre><code>err := database.QueryRow(""select * from users where user_id=?"", id) 
.Scan(&amp;ReadUser.ID, &amp;ReadUser.Name, &amp;ReadUser.First, &amp;ReadUser.Last, &amp;ReadUser.Email);
</code></pre>

<p>But the I again get:</p>

<pre><code>syntax error: unexpected .
</code></pre>

<p>So I'm wondering what's the golangic way to do so?</p>
","<p>First some background. The formal grammar of Go uses semicolons <code>"";""</code> as terminators in many productions, but Go programs may omit most of them (and they should to have a clearer, easily readable source; <code>gofmt</code> also removes unnecessary semicolons).</p>

<p>The specification lists the exact rules. <a href=""https://golang.org/ref/spec#Semicolons"" rel=""noreferrer"">Spec: Semicolons:</a></p>

<blockquote>
  <p>The formal grammar uses semicolons "";"" as terminators in a number of productions. Go programs may omit most of these semicolons using the following two rules:</p>
  
  <ol>
  <li><p>When the input is broken into tokens, a semicolon is automatically inserted into the token stream immediately after a line's final token if that token is</p>
  
  <ul>
  <li>an <a href=""https://golang.org/ref/spec#Identifiers"" rel=""noreferrer"">identifier</a></li>
  <li>an <a href=""https://golang.org/ref/spec#Integer_literals"" rel=""noreferrer"">integer</a>, <a href=""https://golang.org/ref/spec#Floating-point_literals"" rel=""noreferrer"">floating-point</a>, <a href=""https://golang.org/ref/spec#Imaginary_literals"" rel=""noreferrer"">imaginary</a>, <a href=""https://golang.org/ref/spec#Rune_literals"" rel=""noreferrer"">rune</a>, or <a href=""https://golang.org/ref/spec#String_literals"" rel=""noreferrer"">string</a> literal</li>
  <li>one of the <a href=""https://golang.org/ref/spec#Keywords"" rel=""noreferrer"">keywords</a> <code>break</code>, <code>continue</code>, <code>fallthrough</code>, or <code>return</code></li>
  <li>one of the <a href=""https://golang.org/ref/spec#Operators_and_Delimiters"" rel=""noreferrer"">operators and delimiters</a> ++, --, ), ], or }</li>
  </ul></li>
  <li><p>To allow complex statements to occupy a single line, a semicolon may be omitted before a closing "")"" or ""}"".</p></li>
  </ol>
</blockquote>

<p>So as you can see if you insert a newline character after the parenthesis <code>)</code>, a semicolon <code>;</code> will be inserted automatically and so the next line will not be treated as the continuation of the previous line. This is what happened in your case, and so the next line starting with <code>.Scan(&amp;ReadUser.ID,...</code> will give you a compile-time error as this standing by <em>itself</em> (without the previous line) is a compile-time error: <code>syntax error: unexpected .</code></p>

<p>So you may break your line at any point which does not conflict with the rules listed under point <code>1.</code> above.</p>

<p><strong>Typically you can break your lines after comma <code>,</code>, after <em>opening</em> parenthesis e.g. <code>(</code>, <code>[</code>, <code>{</code>, and after a dot <code>.</code> which may be referencing a field or method of some value. You can also break your line after binary operators (those that require 2 operands), e.g.:</strong></p>

<pre><code>i := 1 +
        2
fmt.Println(i) // Prints 3
</code></pre>

<p>One thing worth noting here is that if you have a struct or slice or map literal listing the initial values, and you want to break line after listing the last value, you have to put a mandatory comma <code>,</code> even though this is the last value and no more will follow, e.g.:</p>

<pre><code>s := []int {
    1, 2, 3,
    4, 5, 6,  // Note it ends with a comma
}
</code></pre>

<p>This is to conform with the semicolon rules, and also so that you can rearrange and add new lines without having to take care of adding / removing the final comma; e.g. you can simply swap the 2 lines without having to remove and to add a new comma:</p>

<pre><code>s := []int {
    4, 5, 6,
    1, 2, 3,
}
</code></pre>

<p>The same applies when listing arguments to a function call:</p>

<pre><code>fmt.Println(""first"",
    ""second"",
    ""third"",       // Note it ends with a comma
)
</code></pre>
","34848928"
"How can I generate HTML documents using `godoc`?","11987","","<p>I have written a small go program, and I want to generate standalone HTML documents from source code that can be viewed without godoc server. But I can't find any way to achieve it. if anyone could help me, I'll appreciate it.</p>
","<p>A simple HTML documentation can be produced by, for example:</p>

<pre><code>$ godoc -html container/heap Interface &gt; page.html
</code></pre>

<p>A bit better form can by produced by:</p>

<pre><code>$ godoc -url ""http://localhost:6060/pkg/container/heap/"" &gt; page.html 
</code></pre>

<p>(I have godoc server running at :6060 and I'm not sure if that's a prerequisite).</p>

<p>The HTML would probably look better if combined with original CSS styles found in the Go repository by adjusting the produced HTML files to properly refer to it.</p>
","13530336"
"How to call the Scan variadic function in Golang using reflection?","11970","","<p>I'm looking to call the <a href=""http://golang.org/pkg/database/sql/#Rows.Scan"" rel=""noreferrer"">Rows.Scan()</a> function using reflection.  However it takes a variable number of pointers, but I'm new to Golang and there are not a lot of source examples.  I need to use reflection because I plan on filling a slice with the values from a Query call.  So basically using <code>rows.Columns()</code> to get the length of the row and then <code>make()</code> a slice of <code>[]interface{}</code> to fill with the data points that would normally be filled using the pointers passed to the <code>Scan()</code> function.</p>

<p>Basically something like this code:</p>

<pre><code>col := rows.Columns()
vals := make([]interface{}, len(cols))
rows.Scan(&amp;vals)
</code></pre>

<p>Anyone have an example of calling a variadic function that takes pointers using reflection that I can take a look at?</p>

<p>Edit:
Sample code that doesn't appear to do what I'm after.</p>

<pre><code>package main

import (
    _ ""github.com/lib/pq""
    ""database/sql""
    ""fmt""
)


func main() {

    db, _ := sql.Open(
        ""postgres"",
        ""user=postgres dbname=Go_Testing password=ssap sslmode=disable"")

    rows, _ := db.Query(""SELECT * FROM _users;"")

    cols, _ := rows.Columns()

    for rows.Next() {

        data := make([]interface{}, len(cols))

        rows.Scan(data...)

        fmt.Println(data)
    }

}
</code></pre>

<p>The results:</p>

<pre><code>[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;]
[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;]
[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;]
[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;]
[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;]
[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;]
</code></pre>
","<p>Here's the solution that I've arrived at.  It doesn't get the Types before traversing the data, and so doesn't know before hand the type of each value before pulling the values out through <code>Scan()</code>, but the point really is to not have to know the types before hand.</p>

<p>The trick was to create 2 slices, one for the values, and one that holds pointers in parallel to the values slice.  Then once the pointers are used to fill data, the values array is actually filled with the data, which can then be used to populate other data structures.</p>

<pre><code>package main

import (
    ""fmt""
    _ ""github.com/lib/pq""
    ""database/sql""
)

func main() {

    db, _ := sql.Open(
        ""postgres"",
        ""user=postgres dbname=go_testing password=pass sslmode=disable"")

    rows, _ := db.Query(""SELECT * FROM _user;"")

    columns, _ := rows.Columns()
    count := len(columns)
    values := make([]interface{}, count)
    valuePtrs := make([]interface{}, count)

    for rows.Next() {

        for i, _ := range columns {
            valuePtrs[i] = &amp;values[i]
        }

        rows.Scan(valuePtrs...)

        for i, col := range columns {

            var v interface{}

            val := values[i]

            b, ok := val.([]byte)

            if (ok) {
                v = string(b)
            } else {
                v = val
            }

            fmt.Println(col, v)
        }
    }
}
</code></pre>
","17885636"
"Go Interface Fields","11962","","<p>I'm familiar with the fact that, in Go, interfaces define functionality, rather than data.  You put a set of methods into an interface, but you are unable to specify any fields that would be required on anything that implements that interface.</p>

<p>For example: </p>

<pre><code>// Interface
type Giver interface {
    Give() int64
}

// One implementation
type FiveGiver struct {}

func (fg *FiveGiver) Give() int64 {
    return 5
}

// Another implementation
type VarGiver struct {
    number int64
}

func (vg *VarGiver) Give() int64 {
    return vg.number
}
</code></pre>

<p>Now we can use the interface and its implementations:</p>

<pre><code>// A function that uses the interface
func GetSomething(aGiver Giver) {
    fmt.Println(""The Giver gives: "", aGiver.Give())
}

// Bring it all together
func main() {
    fg := &amp;FiveGiver{}
    vg := &amp;VarGiver{3}
    GetSomething(fg)
    GetSomething(vg)
}

/*
Resulting output:
5
3
*/
</code></pre>

<p>Now, what you <em>can't</em> do is something like this:</p>

<pre><code>type Person interface {
    Name string
    Age int64
}

type Bob struct implements Person { // Not Go syntax!
    ...
}

func PrintName(aPerson Person) {
    fmt.Println(""Person's name is: "", aPerson.Name)
}

func main() {
    b := &amp;Bob{""Bob"", 23}
    PrintName(b)
}
</code></pre>

<p>However, after playing around with interfaces and embedded structs, I've discovered a way to do this, after a fashion:</p>

<pre><code>type PersonProvider interface {
    GetPerson() *Person
}

type Person struct {
    Name string
    Age  int64
}

func (p *Person) GetPerson() *Person {
    return p
}

type Bob struct {
    FavoriteNumber int64
    Person
}
</code></pre>

<p>Because of the embedded struct, Bob has everything Person has.  It also implements the PersonProvider interface, so we can pass Bob into functions that are designed to use that interface.</p>

<pre><code>func DoBirthday(pp PersonProvider) {
    pers := pp.GetPerson()
    pers.Age += 1
}

func SayHi(pp PersonProvider) {
    fmt.Printf(""Hello, %v!\r"", pp.GetPerson().Name)
}

func main() {
    b := &amp;Bob{
        5,
        Person{""Bob"", 23},
    }
    DoBirthday(b)
    SayHi(b)
    fmt.Printf(""You're %v years old now!"", b.Age)
}
</code></pre>

<p><a href=""http://play.golang.org/p/s9A8M7eT3i"">Here is a Go Playground</a> that demonstrates the above code.</p>

<p>Using this method, I can make an interface that defines data rather than behavior, and which can be implemented by any struct just by embedding that data.  You can define functions that explicitly interact with that embedded data and are unaware of the nature of the outer struct.  And everything is checked at compile time!  (The only way you could mess up, that I can see, would be embedding the interface <code>PersonProvider</code> in <code>Bob</code>, rather than a concrete <code>Person</code>.  It would compile and fail at runtime.)</p>

<p>Now, here's my question: is this a neat trick, or should I be doing it differently?</p>
","<p>It is definitely a neat trick, and works as long as you're cool giving access to those fields as part of your API. The alternative I'd consider on is keeping the embeddable struct/<code>interface</code> setup, but defining the interface in terms of getters and setters.</p>

<p>Hiding properties behind getters and setters gives you some extra flexibility to make backwards-compatible changes later. Say you someday want to change <code>Person</code> to store not just a single ""name"" field but first/middle/last/prefix; if you have methods <code>Name() string</code> and <code>SetName(string)</code>, you can keep existing users of the <code>Person</code> interface happy while adding new finer-grained methods. Or you might want to be able to mark a database-backed object as ""dirty"" when it has unsaved changes; you can do that when data updates all go through <code>SetFoo()</code> methods. </p>

<p>So: with getters/setters, you can change struct fields while maintaining a compatible API, and add logic around property get/sets since no one can just do <code>p.Name = ""bob""</code> without going through your code. </p>

<p>That flexibility is more relevant when your type does something more complicated. If you have a <code>PersonCollection</code>, it might be internally backed by an <code>sql.Rows</code>, a <code>[]*Person</code>, a <code>[]uint</code> of database IDs, or whatever. Using the right interface, you can save callers from caring which it is, the way <code>io.Reader</code> makes network connections and files look alike.</p>

<p>One specific thing: <code>interface</code>s in Go have the peculiar property that you can implement one without importing the package that defines it; that can help you <a href=""https://stackoverflow.com/questions/20380333/cyclic-dependencies-and-interfaces-in-golang"">avoid cyclic imports</a>. If your interface returns a <code>*Person</code>, instead of just strings or whatever, all <code>PersonProviders</code> have to import the package where <code>Person</code> is defined. That may be fine or even inevitable; it's just a consequence to know about.</p>

<p>All that said, there's no Go convention that you have to hide all your data. (This is a welcome difference from, say, C++.) The stdlib does things like let you initialize an <code>http.Server</code> with your config and promises that a zero <code>bytes.Buffer</code> is usable. It's fine to do your own stuff like that, and, indeed, I don't think you have to do premature abstraction if the more concrete, data-exposing version works. It's just about being aware of the tradeoffs.</p>
","26027902"
"How to fmt.Printf an integer with thousands comma","11917","","<p>Does Go's <code>fmt.Printf</code> support outputting a number with the thousands comma?</p>

<p><code>fmt.Printf(""%d"", 1000)</code> outputs <code>1000</code>, what format can I specify to output <code>1,000</code> instead?</p>

<p>The <a href=""http://golang.org/pkg/fmt/"" rel=""noreferrer"">docs</a> don't seem to mention commas, and I couldn't immediately see anything in the <a href=""https://code.google.com/p/go/source/browse/src/pkg/fmt/"" rel=""noreferrer"">source</a>.</p>
","<p>None of the fmt print verbs support thousands separators.  </p>
","13020503"
"In Go Language, how do I unmarshal json to array of object?","11917","","<p>I have the following JSON, and I want to parse it into array of class:</p>

<pre><code>{
    ""1001"": {""level"":10, ""monster-id"": 1001, ""skill-level"": 1, ""aimer-id"": 301}
    ""1002"": {""level"":12, ""monster-id"": 1002, ""skill-level"": 1, ""aimer-id"": 302}
    ""1003"": {""level"":16, ""monster-id"": 1003, ""skill-level"": 2, ""aimer-id"": 303}
}
</code></pre>

<p>Here is what i am trying to do but failed:</p>

<pre><code>type Monster struct {
    MonsterId  int32
    Level      int32
    SkillLevel int32
    AimerId    int32
}


type MonsterCollection struct {
    Pool map[string]Monster
}

func (mc *MonsterCollection) FromJson(jsonStr string) {
    var data interface{}
    b := []byte(jsonStr)
    err := json.Unmarshal(b, &amp;data)
    if err != nil {
        return
    }

    m := data.(map[string]interface{})

    i := 0
    for k, v := range m {

        monster := new(Monster)
        monster.Level = v[""level""]
        monster.MonsterId = v[""monster-id""]
        monster.SkillLevel = v[""skill-level""]
        monster.AimerId = v[""aimer-id""]

        mc.Pool[i] = monster
        i++
    }

}
</code></pre>

<p>The compiler complain about the  v[""level""] 
&lt;&lt; invalid operation. index of type interface().</p>
","<p>This code has many errors in it. To start with, the json isn't valid json. You are missing the commas in between key pairs in your top level object. I added the commas and pretty printed it for you:</p>

<pre><code>{
   ""1001"":{
      ""level"":10,
      ""monster-id"":1001,
      ""skill-level"":1,
      ""aimer-id"":301
   },
   ""1002"":{
      ""level"":12,
      ""monster-id"":1002,
      ""skill-level"":1,
      ""aimer-id"":302
   },
   ""1003"":{
      ""level"":16,
      ""monster-id"":1003,
      ""skill-level"":2,
      ""aimer-id"":303
   }
}
</code></pre>

<hr>

<p>Your next problem (the one you asked about) is that <code>m := data.(map[string]interface{})</code> makes <code>m</code> a <code>map[string]interface{}</code>. That means when you index it such as the <code>v</code> in your range loop, the type is <code>interface{}</code>. You need to type assert it again with <code>v.(map[string]interface{})</code> and then type assert each time you read from the map.</p>

<hr>

<p>I also notice that you next attempt <code>mc.Pool[i] = monster</code> when i is an int and mc.Pool is a map[string]Monster. An int is not a valid key for that map.</p>

<hr>

<p>Your data looks very rigid so I would make unmarshall do most of the work for you. Instead of providing it a map[string]interface{}, you can provide it a map[string]Monster.</p>

<p>Here is a quick example. As well as changing how the unmarshalling works, I also added an error return. The error return is useful for finding bugs. That error return is what told me you had invalid json.</p>

<pre><code>type Monster struct {
    MonsterId  int32 `json:""monster-id""`
    Level      int32 `json:""level""`
    SkillLevel int32 `json:""skill-level""`
    AimerId    int32 `json:""aimer-id""`
}

type MonsterCollection struct {
    Pool map[string]Monster
}

func (mc *MonsterCollection) FromJson(jsonStr string) error {
    var data = &amp;mc.Pool
    b := []byte(jsonStr)
    return json.Unmarshal(b, data)
}
</code></pre>

<p>I posted a working example to goplay: <a href=""http://play.golang.org/p/4EaasS2VLL"" rel=""noreferrer"">http://play.golang.org/p/4EaasS2VLL</a></p>
","16931866"
"go-lang project folder structure convention","11913","","<p>I just wanted to confirm my understanding of a typical project folder structure in a Go project, which follows the <a href=""http://golang.org/doc/code.html"" rel=""noreferrer"">Go tool conventions</a>.</p>

<p>If i'm writing a package called <code>my-package</code>, which uses another 3rd party external package - <code>other-package</code>. Then based on conventions, is this directory structure correct ?</p>

<pre><code>+bin
+pkg
+src
  |
  --- my-package.com/..
  |
  --- external-package.com/..
</code></pre>

<p>The reason I ask this again after reading the docs is because unlike other language conventions, the user and 3rd party code are in the same top level folder.</p>
","<p><em>via irc #go-nuts</em></p>

<p>A user's machine will have a common <code>$GOPATH/src</code> for all projects. This <code>$GOPATH/src</code> could have multiple projects (user's, external packages etc.) there. The user would just commit the <code>$GOPATH/src/mypackage</code> to their src repo.</p>

<p>If you want to have separate directories for your src, and 3rd party package source, then prepend another path to <code>$GOPATH</code>. <code>go get</code> will download the 3rd party packages to that path. <code>go-get</code> downloads 3rd packages to the first path it finds in the array of paths specified by <code>$GOPATH</code>.</p>
","22989790"
"Go language benchmarks?","11907","","<p>I see the claims that Go is supposed to be almost comparable in speed to C, but are there any benchmarks available yet?</p>
","<p>There is a benchmark folder in the distribution. Check out <a href=""http://golang.org/test/bench/"" rel=""noreferrer""><code>$GOROOT/test/bench</code></a>.</p>
","1725905"
"How to unmarshal json into interface{} in golang?","11876","","<p>I'm a newbie in golang and now I have a problem. I have a type called Message, it is a struct like this:</p>

<pre><code>type Message struct {
    Cmd string `json:""cmd""`
    Data interface{} `json:""data""`
}
</code></pre>

<p>I also have a type called CreateMessage like this: </p>

<pre><code>type CreateMessage struct {
    Conf map[string]int `json:""conf""`
    Info map[string]int `json:""info""`
}
</code></pre>

<p>And I have a json string like <code>{""cmd"":""create"",""data"":{""conf"":{""a"":1},""info"":{""b"":2}}}</code>. </p>

<p>When I use <code>json.Unmarshal</code> to decode that into a Message variable, the answer is <code>{Cmd:create Data:map[conf:map[a:1] info:map[b:2]]}</code>.</p>

<p>So could I decode the json into a Message struct and change its Data's interface{} to type CreateMessage according to the Cmd?</p>

<p>I tried to convert Data directly into type CreateMessage but the complier told me that Data is a map[sting]interface{} type.</p>
","<p>Define a struct type for the fixed part of the message with a <a href=""http://godoc.org/encoding/json#RawMessage"" rel=""noreferrer"">json.RawMessage</a> field to capture the variant part of the message. Define struct types for each of the variant types and decode to them based on the the command.</p>

<pre><code>type Message struct {
  Cmd string `json:""cmd""`
  Data      json.RawMessage
}  

type CreateMessage struct {
    Conf map[string]int `json:""conf""`
    Info map[string]int `json:""info""`
}  

func main() {
    var m Message
    if err := json.Unmarshal(data, &amp;m); err != nil {
        log.Fatal(err)
    }
    switch m.Cmd {
    case ""create"":
        var cm CreateMessage
        if err := json.Unmarshal([]byte(m.Data), &amp;cm); err != nil {
            log.Fatal(err)
        }
        fmt.Println(m.Cmd, cm.Conf, cm.Info)
    default:
        log.Fatal(""bad command"")
    }
}
</code></pre>

<p><a href=""http://play.golang.org/p/aAFa3yxYP4"" rel=""noreferrer"">playground example</a></p>
","28254703"
"syntax error: unexpected semicolon or newline, expecting }","11846","","<p>I have this sample code where I'm defining an array but it doesn't compile: </p>

<pre><code>$ cat a.go
package f
func t() []int  {
    arr := [] int {
        1,
        2
    }
    return arr
}

oreyes@OREYES-WIN7 ~/code/go
$ go build a.go
# command-line-arguments
.\a.go:5: syntax error: unexpected semicolon or newline, expecting }
.\a.go:7: non-declaration statement outside function body
.\a.go:8: syntax error: unexpected }
</code></pre>

<p>However if I remove the newline it works: </p>

<pre><code>$ cat a.go
package f
func t() []int  {
    arr := [] int {
        1,
        2 }
    return arr
}

oreyes@OREYES-WIN7 ~/code/go
$ go build a.go
</code></pre>

<p>Howcome?</p>
","<p>Simply put a comma (<code>,</code>) at the end of all lines containing elements of the array:</p>

<pre><code>arr :=  [] func(int) int {
    func( x int ) int { return x + 1 },
    func( y int ) int { return y * 2 }, // A comma (to prevent automatic semicolon insertion)
}
</code></pre>
","9637792"
"How to unmarshal an escaped JSON string in Go?","11771","","<p>am using Sockjs with Go, but when the javascript client send json to the server it escapes it, and send's it as a []byte. i'm trying to figure out how to parse the json, so that i can read the data. but i get this error.</p>

<p>json: cannot unmarshal string into Go value of type main.Msg</p>

<p>How can i fix this? html.UnescapeString() have no effect :/</p>

<pre><code>val, err := session.ReadMessage()
if err != nil {
break
}
var msg Msg

err = json.Unmarshal(val, &amp;msg)

fmt.Printf(""%v"", val)
fmt.Printf(""%v"", err)

type Msg struct {
    Channel string
    Name    string
    Msg     string
}


//Output
""{\""channel\"":\""buu\"",\""name\"":\""john\"", \""msg\"":\""doe\""}""
json: cannot unmarshal string into Go value of type main.Msg
</code></pre>
","<p>You might want to use <a href=""http://golang.org/pkg/strconv/#Unquote"" rel=""nofollow noreferrer""><code>strconv.Unquote</code></a> on your JSON string first :)</p>

<p><a href=""http://play.golang.org/p/id4f4r9tEr"" rel=""nofollow noreferrer"">Here's an example</a>, kindly provided by @gregghz:</p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
    ""strconv""
)

type Msg struct {
    Channel string
    Name string
    Msg string
}

func main() {
    var msg Msg
    var val []byte = []byte(`""{\""channel\"":\""buu\"",\""name\"":\""john\"", \""msg\"":\""doe\""}""`)

    s, _ := strconv.Unquote(string(val))

    err := json.Unmarshal([]byte(s), &amp;msg)

    fmt.Println(s)
    fmt.Println(err)
    fmt.Println(msg.Channel, msg.Name, msg.Msg)
}
</code></pre>
","16847249"
"golang map prints out of order","11740","","<p>Why is the map printing out of order, and how do I get it in to order?</p>

<pre><code>package main

import (
    ""fmt""
)

type monthsType struct {
    no   int
    text string
}

var months = map[int]string{
    1:""January"", 2:""Fabruary"", 3:""March"", 4:""April"", 5:""May"", 6:""June"",
    7:""July"", 8:""August"", 9:""September"", 10:""October"", 11:""Novenber"", 12:""December"",
}

func main(){
    for no, month := range months {
        fmt.Print(no)
        fmt.Println(""-"" + month)
    }
}
</code></pre>

<p>Prints out:</p>

<pre><code>10-October
7-July
1-January
9-September
4-April
5-May
2-Fabruary
12-December
11-Novenber
6-June
8-August
3-March
</code></pre>
","<p>Code:</p>

<pre><code>func DemoSortMap() (int, error) {
    fmt.Println(""use an array to access items by number:"")
    am := [2]string{""jan"", ""feb""}
    for i, n := range am {
        fmt.Printf(""%2d: %s\n"", i, n)
    }
    fmt.Println(""maps are non-sorted:"")
    mm := map[int]string{2: ""feb"", 1: ""jan""}
    for i, n := range mm {
        fmt.Printf(""%2d: %s\n"", i, n)
    }
    fmt.Println(""access items via sorted list of keys::"")
    si := make([]int, 0, len(mm))
    for i := range mm {
        si = append(si, i)
    }
    sort.Ints(si)
    for _, i := range si {
        fmt.Printf(""%2d: %s\n"", i, mm[i])
    }

    return 0, nil
}
</code></pre>

<p>(most of it stolen from M. Summerfield's <a href=""http://books.google.de/books?id=HW-5SZ1HKusC&amp;pg=PT217&amp;lpg=PT217&amp;dq=%224.3.4%20Key-Ordered%20Map%20Iteration%22&amp;source=bl&amp;ots=Fp7245_0iv&amp;sig=IhJnSkLX2hFA021V2XkBPRiREf4&amp;hl=de#v=onepage&amp;q=%224.3.4%20Key-Ordered%20Map%20Iteration%22&amp;f=false"">book</a>)</p>

<p>output:</p>

<pre><code>use an array to access items by number:
 0: jan
 1: feb
maps are non-sorted:
 2: feb
 1: jan
access items via sorted list of keys::
 1: jan
 2: feb
</code></pre>
","12108865"
"How to find the difference between two slices of strings in Golang?","11735","","<p>Here is my desired outcome</p>

<pre><code>slice1 := []string{""foo"", ""bar"",""hello""}
slice2 := []string{""foo"", ""bar""}

difference(slice1, slice2)
=&gt; [""hello""]
</code></pre>

<p>I am looking for the difference between the two string slices!</p>
","<p>Depending on the size of the slices, different solutions might be best.</p>

<p>My answer assumes order doesn't matter.</p>

<p><strong>Using simple loops, only to be used with smaller slices:</strong></p>

<pre><code>package main

import ""fmt""

func difference(slice1 []string, slice2 []string) []string {
    var diff []string

    // Loop two times, first to find slice1 strings not in slice2,
    // second loop to find slice2 strings not in slice1
    for i := 0; i &lt; 2; i++ {
        for _, s1 := range slice1 {
            found := false
            for _, s2 := range slice2 {
                if s1 == s2 {
                    found = true
                    break
                }
            }
            // String not found. We add it to return slice
            if !found {
                diff = append(diff, s1)
            }
        }
        // Swap the slices, only if it was the first loop
        if i == 0 {
            slice1, slice2 = slice2, slice1
        }
    }

    return diff
}

func main() {
    slice1 := []string{""foo"", ""bar"", ""hello""}
    slice2 := []string{""foo"", ""world"", ""bar"", ""foo""}

    fmt.Printf(""%+v\n"", difference(slice1, slice2))
}
</code></pre>

<p><em>Output:</em></p>

<pre><code>[hello world]
</code></pre>

<p>Playground: <a href=""http://play.golang.org/p/KHTmJcR4rg"">http://play.golang.org/p/KHTmJcR4rg</a></p>
","19374861"
"Are channels passed by reference implicitly","11728","","<p>The go tour has this example for channels: <a href=""http://tour.golang.org/#63"" rel=""noreferrer"">http://tour.golang.org/#63</a></p>

<pre><code>package main

import ""fmt""

func sum(a []int, c chan int) {
    sum := 0
    for _, v := range a {
        sum += v
    }
    c &lt;- sum // send sum to c
}

func main() {
    a := []int{7, 2, 8, -9, 4, 0}

    c := make(chan int)
    go sum(a[:len(a)/2], c)
    go sum(a[len(a)/2:], c)
    x, y := &lt;-c, &lt;-c // receive from c

    fmt.Println(x, y, x+y)
}
</code></pre>

<p>The channel c is modified in the sum function and the changes persist after the function has terminated. Obviously c was passed by reference but no pointer to c was created. Are channels implicitly passed by reference in go ?</p>
","<p><strike>Technically they're copied, because when you use <code>make</code>, you are allocating something on the heap, so it's technically a pointer behind the scenes. But the pointer type is not exposed, so they can be thought of as a reference type.</strike></p>

<p><strong>EDIT</strong>: From the spec:</p>

<blockquote>
  <p>The built-in function make takes a type T, which must be a slice, map or channel type, optionally followed by a type-specific list of expressions. It returns a value of type T (not *T). The memory is initialized as described in the section on initial values.</p>
</blockquote>

<p>A channel must be initialized before it can be used. Make does this, so it can be used as a reference type.</p>

<p>What this basically means is that you can pass it into a function and write to or read from it. The general rule of thumb is if you use <code>make</code>, <code>new</code> or <code>&amp;</code>, you can pass it to another function without copying the underlying data.</p>

<p>So, the following are ""reference"" types:</p>

<ul>
<li>slices</li>
<li>maps</li>
<li>channels</li>
<li>pointers</li>
<li>functions</li>
</ul>

<p>Only data types (numbers, bools and structs, etc) are copied when passing into a function. Strings are special, because they're immutable, but not passed by value. This means that the following won't work as expected:</p>

<pre><code>type A struct {
    b int
}
func f(a A) {
    a.b = 3
}
func main() {
    s := A{}
    f(s)
    println(s.b) // prints 0
}
</code></pre>
","16590291"
"golang embed file for later parsing execution use","11699","","<p>I am essentially trying to walk through a folder of html files. I want to embed them into the binary file and be able to parse them upon request for template execution purposes. (Please excuse me if im not wording this properly).</p>

<p>Any ideas, tips, tricks or better way of accomplishing this is much appreciated.</p>

<pre class=""lang-go prettyprint-override""><code>// Template Files
type TempFiles struct {
    Files map[string]string
}

// Loop through view files and load them
func LoadTempFiles() {
    t := new(TempFiles)

    // Load template files
    filepath.Walk(""application/views"", func(path string, info os.FileInfo, err error) error {
    if !info.IsDir() {
        content, _ := ioutil.ReadFile(path)
        t.Files[path] = string(content)
    }
    return nil
    })
}

func ViewTemp(w http.ResponseWriter, path string) {
    t := new(TempFiles)

    temp, err := template.New().Parse(t.Files[path])
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
    } else {
        temp.Execute(w, nil)
    }
}
</code></pre>
","<p>I do this with most of my Go web apps. I use <a href=""https://github.com/jteeuwen/go-bindata"">go-bindata</a> to auto-generate Go source code from all the files I want to embed and then compile them into the binary.
All this is done automatically during build.</p>

<p>One downside is that the current go build tools do not offer a way to hook into the build process, so I use a Makefile for this purpose. When the makefile is invoked, it runs <code>go-bindata</code> to generate the sources for all necessary files, then usually performs some additional code generation bits and bobs (notably, creating a Go source file which lists all the embedded files in a map.. A Table of Contents if you will). It then proceeds to compile the actual program.</p>

<p>This can become a little messy, but you only have to set it all up once.
Another downside, is that the use of a Makefile means the software is not compatible with the <code>go get</code> command. But since most of my web apps are not meant to be shared anyway, this has not been a problem so far.</p>

<p>When it comes to debugging/developing such an application, there is another issue that arises from embedding the static web content: I can't just edit an HTML or CSS file and refresh the browser to see its effects. I would have to stop the server, rebuild it and restart it with every edit. This is obviously not ideal, so I split the Makefile up into a <code>debug</code> and <code>release</code> mode. The release mode does what I described above. The debug mode, however, wil not actually embed the static files. It does generate source files for each of them, but instead of having them contain the actual file data, it contains a stub which simply loads the data from the filesystem.</p>

<p>As far as the server code is concerned, there is no difference in the generated code. All it does is call a function to fetch the contents of a given static file. It does not care whether that content is actually embedded in the binary, or if it's loaded from an external source. So the two build modes are freely interchangeable.</p>

<p>For example, the same generated function to fetch static file content in release and debug mode would look as follows:</p>

<p>Release mode:</p>

<pre><code>func index_html() []byte {
    return []byte {
        ....
    }
}
</code></pre>

<p>Debug mode:</p>

<pre><code>func index_html() []byte {
   data, err := ioutil.ReadFile(""index.html"")
   ...
   return data
}
</code></pre>

<p>The interface in both cases is identical. This allows for easy and care-free development and debugging.</p>
","12483181"
"Proper package naming for testing with the Go language","11637","","<p>I have seen several different test package naming strategies within Go and wanted to know what pros and cons of each are and which one I should use.</p>

<p><strong>Strategy 1:</strong></p>

<p>File name: github.com/user/myfunc.go</p>

<pre><code>package myfunc
</code></pre>

<p>Test file name: github.com/user/myfunc_test.go</p>

<pre><code>package myfunc
</code></pre>

<p>See <a href=""http://golang.org/src/pkg/compress/bzip2/bzip2_test.go"">bzip2</a> for an example.</p>

<p><strong>Strategy 2:</strong></p>

<p>File name: github.com/user/myfunc.go</p>

<pre><code>package myfunc
</code></pre>

<p>Test file name: github.com/user/myfunc_test.go</p>

<pre><code>package myfunc_test

import (
    ""github.com/user/myfunc""
)
</code></pre>

<p>See <a href=""https://github.com/btcsuite/btcd/blob/master/wire/msgtx_test.go"">wire</a> for an example.</p>

<p><strong>Strategy 3:</strong></p>

<p>File name: github.com/user/myfunc.go</p>

<pre><code>package myfunc
</code></pre>

<p>Test file name: github.com/user/myfunc_test.go</p>

<pre><code>package myfunc_test

import (
    . ""myfunc""
)
</code></pre>

<p>See <a href=""http://golang.org/src/pkg/strings/search_test.go"">strings</a> for an example.</p>

<p>The Go standard library seems to use a mixture of strategy 1 and 2. Which of all three should I use? It's a pain appending <code>package *_test</code> to my testing packages as it means I can't test my package private methods but maybe there is a hidden advantage I am not aware of? </p>
","<p>The fundamental difference between the three strategies you've listed is whether or not the test code is in the same package as the code under test. The decision to use <code>package myfunc</code> or <code>package myfunc_test</code> in the test file depends on whether you want to perform <a href=""https://en.wikipedia.org/wiki/White-box_testing"">white-box</a> or <a href=""https://en.wikipedia.org/wiki/Black-box_testing"">black-box</a> testing.</p>

<p>There's nothing wrong with using both methods in a project. For instance, you could have <code>myfunc_whitebox_test.go</code> and <code>myfunx_blackbox_test.go</code>. </p>

<h2>Test Code Package Comparison</h2>

<ul>
<li><strong>Black-box Testing:</strong> Use <code>package myfunc_test</code>, which will ensure you're only using the <a href=""https://golang.org/ref/spec#Exported_identifiers"">exported identifiers</a>.</li>
<li><strong>White-box Testing:</strong> Use <code>package myfunc</code> so that you have access to the non-exported identifiers. Good for unit tests that require access to non-exported variables, functions, and methods.</li>
</ul>

<h2>Comparison of Strategies Listed in Question</h2>

<ul>
<li><strong>Strategy 1:</strong> The file <code>myfunc_test.go</code> uses <code>package myfunc</code> — In this case the test code in <code>myfunc_test.go</code> will be in the same package as the code being tested in <code>myfunc.go</code>, which is <code>myfunc</code> in this example.</li>
<li><strong>Strategy 2:</strong> The file <code>myfunc_test.go</code> uses <code>package myfunc_test</code> — In this case the test code in <code>myfunc_test.go</code> ""will be compiled as a separate package, and then linked and run with the main test binary."" [Source: Lines 58–59 in the <a href=""http://golang.org/src/cmd/go/test.go"">test.go</a> source code]</li>
<li><strong>Strategy 3:</strong> The file <code>myfunc_test.go</code> uses <code>package myfunc_test</code> but imports <code>myfunc</code> using the dot notation — This is a variant of Strategy 2, but uses the dot notation to import <code>myfunc</code>.</li>
</ul>
","31443271"
"Best practice to maintain a mgo session","11624","","<p>I'm currently using a mongodb with mgo lib for a web application, but I'm not sure if the way I'm using it, is good one ..</p>

<pre><code>package db

import (
    ""gopkg.in/mgo.v2""
)

const (
    MongoServerAddr = ""192.168.0.104""
    RedisServerAddr = ""192.168.0.104""
)

var (
    MongoSession, err = mgo.Dial(MongoServerAddr)

    MDB  = MongoSession.DB(""message"")
    MCol = MDB.C(""new"")
    MSav = MDB.C(""save"")

    UDB  = MongoSession.DB(""account"")
    UCol = UDB.C(""user"")
)
</code></pre>

<p>I init the db session and create variables who takes the collection and document value,
so when I need to query a collection, I use the variable to make it.</p>

<p>Like that :</p>

<pre><code>func UserExist(username string) bool {
    user := Users{}
    err := db.UCol.Find(bson.M{""username"": username}).One(&amp;user)
    if err != nil {
        return false
    } else {
        return true
    }
}
</code></pre>

<p>So is there a best practice or this one is fine ..?
Thanks</p>
","<p>I suggest not using a global session like that. Instead, you can create a type that is responsible for all the database interaction. For example:</p>

<pre><code>type DataStore struct {
    session *mgo.Session
}

func (ds *DataStore) ucol() *mgo.Collection { ... }

func (ds *DataStore) UserExist(user string) bool { ... }
</code></pre>

<p>There are many benefits to that design. An important one is that it allows you to have multiple sessions in flight at the same time, so if you have an http handler, for example, you can create a local session that is backed by an independent session just for that one request:</p>

<pre><code>func (s *WebSite) dataStore() *DataStore {
    return &amp;DataStore{s.session.Copy()}
}    

func (s *WebSite) HandleRequest(...) {
    ds := s.dataStore()
    defer ds.Close()
    ...
}
</code></pre>

<p>The mgo driver behaves nicely in that case, as sessions are internally cached and reused/maintained. Each session will also be backed by an independent socket while in use, and may have independent settings configured, and will also have independent error handling. These are issues you'll eventually have to deal with if you're using a single global session.</p>
","26576589"
"Adding hours, minutes, seconds to current time","11607","","<p>How do I add hours, minutes, and seconds (defined as ints) to the current time, similar to <code>AddDate</code>?</p>

<pre><code>timein := time.Now().Local().AddDate(Hours, Mins, Sec)
</code></pre>

<p>but with hours, minutes, and seconds.</p>
","<p>I guess what you are looking for is</p>

<pre><code>timein := time.Now().Local().Add(time.Hour * time.Duration(Hours) +
                                 time.Minute * time.Duration(Mins) +
                                 time.Second * time.Duration(Sec))
</code></pre>
","40589596"
"Dumping MySQL tables to JSON with Golang","11596","","<p>Was putting together a quick dumper for MySQL to JSON in Go.  However I find that everything that I retrieve from the database is a <code>[]byte</code> array.  Thus instead of native JSON integers or booleans, I'm getting everything encoded as strings.</p>

<p>Subset of the code:</p>

<pre><code>import (
    ""encoding/json""
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)


func dumpTable(w io.Writer, table) {
    // ...

    rows, err := Query(db, fmt.Sprintf(""SELECT * FROM %s"", table))
    checkError(err)
    columns, err := rows.Columns()
    checkError(err)

    scanArgs := make([]interface{}, len(columns))
    values   := make([]interface{}, len(columns))

    for i := range values {
        scanArgs[i] = &amp;values[i]
    }

    for rows.Next() {
        err = rows.Scan(scanArgs...)
        checkError(err)

        record := make(map[string]interface{})

        for i, col := range values {
            if col != nil {
                fmt.Printf(""\n%s: type= %s\n"", columns[i], reflect.TypeOf(col))

                switch t := col.(type) {
                default:
                    fmt.Printf(""Unexpected type %T\n"", t)
                case bool:
                    fmt.Printf(""bool\n"")
                    record[columns[i]] = col.(bool)
                case int:
                    fmt.Printf(""int\n"")
                    record[columns[i]] = col.(int)
                case int64:
                    fmt.Printf(""int64\n"")
                    record[columns[i]] = col.(int64)
                case float64:
                    fmt.Printf(""float64\n"")
                    record[columns[i]] = col.(float64)
                case string:
                    fmt.Printf(""string\n"")
                    record[columns[i]] = col.(string)
                case []byte:   // -- all cases go HERE!
                    fmt.Printf(""[]byte\n"")
                    record[columns[i]] = string(col.([]byte))
                case time.Time:
                    // record[columns[i]] = col.(string)
                }
            }
        }

        s, _ := json.Marshal(record)
        w.Write(s)
        io.WriteString(w, ""\n"")
    }
}
</code></pre>
","<p>I also needed to dump database tables to json and here is how I achieved: 
(different than another answer in this topic, everything is not string, thanks to this answer: <a href=""https://stackoverflow.com/a/17885636/4124416"">https://stackoverflow.com/a/17885636/4124416</a>, I could get integer fields correctly) </p>

<pre><code>func getJSON(sqlString string) (string, error) {
  rows, err := db.Query(sqlString)
  if err != nil {
      return """", err
  }
  defer rows.Close()
  columns, err := rows.Columns()
  if err != nil {
      return """", err
  }
  count := len(columns)
  tableData := make([]map[string]interface{}, 0)
  values := make([]interface{}, count)
  valuePtrs := make([]interface{}, count)
  for rows.Next() {
      for i := 0; i &lt; count; i++ {
          valuePtrs[i] = &amp;values[i]
      }
      rows.Scan(valuePtrs...)
      entry := make(map[string]interface{})
      for i, col := range columns {
          var v interface{}
          val := values[i]
          b, ok := val.([]byte)
          if ok {
              v = string(b)
          } else {
              v = val
          }
          entry[col] = v
      }
      tableData = append(tableData, entry)
  }
  jsonData, err := json.Marshal(tableData)
  if err != nil {
      return """", err
  }
  fmt.Println(string(jsonData))
  return string(jsonData), nil 
}
</code></pre>

<p>Here is a sample output:
[{""ID"":0,""Text"":""Zero""},{""ID"":1,""Text"":""One""},{""ID"":2,""Text"":""Two""}]</p>
","29164115"
"Convert array to slice in Go","11569","","<p>This seems like it would be a fairly common thing and abundant examples across the interwebs, but I can't seem to find an example of how to convert an <code>[32]byte</code> to <code>[]byte</code>.</p>

<p>I have a function that I call from an external lib that returns an array</p>

<pre><code>func Foo() [32]byte {...}
</code></pre>

<p>I then need to pass that result to a different function for further processing.</p>

<pre><code>func Bar(b []byte) { ... }
</code></pre>

<p>Unforunately, if I try to call</p>

<pre><code>d := Foo()
Bar(d)
</code></pre>

<p>I get</p>

<pre><code>cannot convert d (type [32]byte) to type []byte
</code></pre>

<p>Doing</p>

<pre><code>[]byte(d)
</code></pre>

<p>isn't much better.  How do I do this, especially without creating a copy of the data (seems silly to copy this data when all I'm doing is passing it along).</p>
","<p>This should work:</p>

<pre><code>func Foo() [32]byte {
    return [32]byte{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}
}

func Bar(b []byte) {
    fmt.Println(string(b))
}

func main() {
    x := Foo()
    Bar(x[:])
}
</code></pre>

<p>And it doesn't create a copy of the underlying buffer</p>
","28886764"
"Decompiling a compiled program with Go","11558","","<p>I have built a simple executable program with <code>Go</code>. </p>

<p>I've compiled the code into a static binary program.</p>

<p>I want to decompile the output binary file and get the Go source code.</p>

<p>Is this possible or not?</p>
","<p>There is no tool to do that and as Go programs are compiled into machine code, they do not contain enough information to translate them back into Go code. Standard disassembly techniques are still possible though.</p>
","25034437"
"Unable to build protobuf to go endpoint","11550","","<p>using protobuf version 2.6.1 ( which i installed via homebrew)  </p>

<p>I am trying to run  </p>

<pre><code>$ protoc --go_out=../cloud/ *.proto
</code></pre>

<p>I keep receiving this error. </p>

<pre><code>$ protoc-gen-go: program not found or is not executable
$ --go_out: protoc-gen-go: Plugin failed with status code 1.
</code></pre>

<p>I have the protoc-gen-go installed in my go path. 
Anyone else have this issue?</p>
","<p><code>protoc-gen-go</code> needs to be in your <em>shell</em> path, i.e. one of the directories listed in the <code>PATH</code> environment variable, which is different from the Go path. You can test this by simply typing <code>protoc-gen-go</code> at the command line: If it says ""command not found"" (or similar) then it's not in your <code>PATH</code>.</p>
","30097929"
"Convert int32 to string in Golang","11538","","<p>I need to convert an <code>int32</code> to <code>string</code> in Golang. Is it possible to convert <code>int32</code> to <code>string</code> in Golang without converting to <code>int</code> or <code>int64</code> first?</p>

<p><code>Itoa</code> needs an <code>int</code>. <code>FormatInt</code> needs an <code>int64</code>.</p>
","<p>One line answer is <code>fmt.Sprint(i)</code>.</p>

<p>Anyway there are many conversions, even inside standard library function like <code>fmt.Sprint(i)</code>, so you have some options (try <a href=""https://play.golang.org/p/VymwuAD-gV"">The Go Playground</a>):  </p>

<hr>

<p>1- You may write your conversion function (<strong>Fastest</strong>):</p>

<pre><code>func String(n int32) string {
    buf := [11]byte{}
    pos := len(buf)
    i := int64(n)
    signed := i &lt; 0
    if signed {
        i = -i
    }
    for {
        pos--
        buf[pos], i = '0'+byte(i%10), i/10
        if i == 0 {
            if signed {
                pos--
                buf[pos] = '-'
            }
            return string(buf[pos:])
        }
    }
}
</code></pre>

<hr>

<p>2- You may use <code>fmt.Sprint(i)</code>  (<strong>Slow</strong>)<br>
See inside:</p>

<pre><code>// Sprint formats using the default formats for its operands and returns the resulting string.
// Spaces are added between operands when neither is a string.
func Sprint(a ...interface{}) string {
    p := newPrinter()
    p.doPrint(a)
    s := string(p.buf)
    p.free()
    return s
}
</code></pre>

<hr>

<p>3- You may use <code>strconv.Itoa(int(i))</code>  (<strong>Fast</strong>)<br>
See inside:</p>

<pre><code>// Itoa is shorthand for FormatInt(int64(i), 10).
func Itoa(i int) string {
    return FormatInt(int64(i), 10)
}
</code></pre>

<hr>

<p>4- You may use <code>strconv.FormatInt(int64(i), 10)</code> (<strong>Faster</strong>)<br>
See inside:</p>

<pre><code>// FormatInt returns the string representation of i in the given base,
// for 2 &lt;= base &lt;= 36. The result uses the lower-case letters 'a' to 'z'
// for digit values &gt;= 10.
func FormatInt(i int64, base int) string {
    _, s := formatBits(nil, uint64(i), base, i &lt; 0, false)
    return s
}
</code></pre>

<hr>

<p>Comparison &amp; Benchmark (with 50000000 iterations):</p>

<pre><code>s = String(i)                       takes:  5.5923198s
s = String2(i)                      takes:  5.5923199s
s = strconv.FormatInt(int64(i), 10) takes:  5.9133382s
s = strconv.Itoa(int(i))            takes:  5.9763418s
s = fmt.Sprint(i)                   takes: 13.5697761s
</code></pre>

<p>Code:</p>

<pre><code>package main

import (
    ""fmt""
    //""strconv""
    ""time""
)

func main() {
    var s string
    i := int32(-2147483648)
    t := time.Now()
    for j := 0; j &lt; 50000000; j++ {
        s = String(i) //5.5923198s
        //s = String2(i) //5.5923199s
        //s = strconv.FormatInt(int64(i), 10) // 5.9133382s
        //s = strconv.Itoa(int(i)) //5.9763418s
        //s = fmt.Sprint(i) // 13.5697761s
    }
    fmt.Println(time.Since(t))
    fmt.Println(s)
}

func String(n int32) string {
    buf := [11]byte{}
    pos := len(buf)
    i := int64(n)
    signed := i &lt; 0
    if signed {
        i = -i
    }
    for {
        pos--
        buf[pos], i = '0'+byte(i%10), i/10
        if i == 0 {
            if signed {
                pos--
                buf[pos] = '-'
            }
            return string(buf[pos:])
        }
    }
}

func String2(n int32) string {
    buf := [11]byte{}
    pos := len(buf)
    i, q := int64(n), int64(0)
    signed := i &lt; 0
    if signed {
        i = -i
    }
    for {
        pos--
        q = i / 10
        buf[pos], i = '0'+byte(i-10*q), q
        if i == 0 {
            if signed {
                pos--
                buf[pos] = '-'
            }
            return string(buf[pos:])
        }
    }
}
</code></pre>
","39444005"
"Getting the union of two maps in go","11491","","<p>I have a recursive function that creates objects representing file paths (the keys are paths and the values are info about the file). It's recursive as it's only meant to handle files, so if a directory is encountered, the function is recursively called on the directory.</p>

<p>All that being said, I'd like to do the equivalent of a set union on two maps (i.e. the ""main"" map updated with the values from the recursive call). Is there an idiomatic way to do this aside from iterating over one map and assigning each key, value in it to the same thing in the other map?</p>

<p>That is: given <code>a,b</code> are of type <code>map [string] *SomeObject</code>, and <code>a</code> and <code>b</code> are eventually populated, is there any way to update <code>a</code> with all the values in <code>b</code>?</p>
","<p>There is no built in way, nor any method in the standard packages to do such a merge.</p>

<p>The idomatic way is to simply iterate:</p>

<pre><code>for k, v := range b {
    a[k] = v
}
</code></pre>
","22621838"
"Idiomatic way to validate structs in Go?","11471","","<p>I need to validate that a struct value is correct and this means I need to check every field individually, which is easy for a small number of small structs but I was wondering if there's a better way to do it. Here's how I'm doing it right now.</p>

<pre><code>type Event struct {
    Id     int
    UserId int
    Start  time.Time
    End    time.Time
    Title  string
    Notes  string
}

func (e Event) IsValid() error {
    if e.Id &lt;= 0 {
        return errors.New(""Id must be greater than 0"")
    }
    if e.UserId &lt;= 0 {
        return errors.New(""UserId must be greater than 0"")
    }
    if e.End &lt;= e.Start {
        return errors.New(""End must be after Start"")
    }
    if e.Start &lt; time.Now() {
        return errors.New(""Cannot create events in the past"")
    }
    if e.Title == """" {
        return errors.New(""Title cannot be empty"")
    }
    return nil
}
</code></pre>

<p>Is this the idiomatic way to validate the values of fields in a struct? It looks cumbersome.</p>
","<p>I don't see any other way to do this quickly. But I found a go package which can help you with this: <a href=""https://github.com/go-validator/validator"">https://github.com/go-validator/validator</a></p>

<p>The README file gives this example:</p>

<pre><code>type NewUserRequest struct {
    Username string `validator:""min=3,max=40,regexp=^[a-zA-Z]$""`
    Name string     `validator:""nonzero""`
    Age int         `validator:""min=21""`
    Password string `validator:""min=8""`
}

nur := NewUserRequest{Username: ""something"", Age: 20}
if valid, errs := validator.Validate(nur); !valid {
    // values not valid, deal with errors here
}
</code></pre>
","23955640"
"What does ""..."" mean when next to a parameter in a go function declaration?","11458","","<p>I was going through some code written in Google's Go language, and I came across this:</p>

<pre><code>func Statusln(a ...interface{})
func Statusf(format string, a ...interface{})
</code></pre>

<p>I don't understand what the <code>...</code> means. Does anybody know?</p>
","<p>It means that you can call Statusln with a <a href=""http://golang.org/ref/spec#Passing_arguments_to_..._parameters"" rel=""noreferrer"">variable number of arguments</a>. For example, calling this function with:</p>

<pre><code>Statusln(""hello"", ""world"", 42)
</code></pre>

<p>Will assign the parameter a the following value:</p>

<pre><code>a := []interface{}{""hello"", ""world"", 42}
</code></pre>

<p>So, you can iterate over this slice a and process all parameters, no matter how many there are. A good and popular use-case for variadic arguments is for example fmt.Printf() which takes a format string and a variable number of arguments which will be formatted according to the format string.</p>
","10128870"
"Defining golang struct function using pointer or not","11456","","<p>Can someone explain to me why appending to an array works when you do this:</p>

<pre><code>func (s *Sample) Append(name string) {
    d := &amp;Stuff{
        name: name,
    }
    s.data = append(s.data, d)
}
</code></pre>

<p><a href=""http://play.golang.org/p/QCNEJG1nC9"">Full code here</a></p>

<p>But not when you do this:</p>

<pre><code>func (s Sample) Append(name string) {
    d := &amp;Stuff{
        name: name,
    }
    s.data = append(s.data, d)
}
</code></pre>

<p>Is there any reason at all why you would want to use the second example.</p>
","<p>As mentioned <a href=""https://golang.org/doc/faq#methods_on_values_or_pointers"" rel=""nofollow noreferrer"">in the FAQ</a></p>

<h3>Should I define methods on values or pointers?</h3>

<pre><code>func (s *MyStruct) pointerMethod() { } // method on pointer
func (s MyStruct)  valueMethod()   { } // method on value
</code></pre>

<blockquote>
  <p><strong>First, and most important, does the method need to modify the receiver? If it does, the receiver must be a pointer.</strong> (Slices and maps act as references, so their story is a little more subtle, but for instance to change the length of a slice in a method the receiver must still be a pointer.)</p>
  
  <p>In the examples above, if pointerMethod modifies the fields of s, the caller will see those changes, but valueMethod is called with a <strong>copy of the caller's argument</strong> (that's the definition of passing a value), so changes it makes will be invisible to the caller.</p>
</blockquote>

<p>In your case, <code>func (s Sample) Append(name string)</code> modifies a copy.</p>

<p><a href=""https://stackoverflow.com/users/303698/laher"">laher</a> reminds us <a href=""https://stackoverflow.com/questions/25382073/defining-golang-struct-function-using-pointer-or-not/25382203?noredirect=1#comment39721822_25382203"">in the comments</a> that using a value instead of pointer also means getting a copy, and respecting the <strong>immutable</strong> nature of an object::</p>

<blockquote>
  <p>You'd want to use the non-pointer <code>valueMethod</code> when (for nstance) you're returning a [value derived from an] 'immutable' private property.</p>
</blockquote>

<p>See ""<a href=""https://stackoverflow.com/a/18436251/6309"">Why are receivers pass by value in Go?</a>"":</p>

<blockquote>
  <p>Can be useful if for instance you have a small immutable object. The caller can know for certain that this method doesn't modify it's receiver.<br>
  They can't know this if the receiver is a pointer without reading the code first.</p>
</blockquote>
","25382203"
"Go-Sublime-build configuration","11450","","<p>Im having issues trying to set up go to run the current file from Sublime text 2. 
Here's what I have in my go.sublime-build file</p>

<pre><code>{
    ""cmd"": [ ""go"", ""run"", ""${file}"" ]
}
</code></pre>

<p>When I try to run build on a go source file, I get the error </p>

<pre><code>[Error 6] The handle is invalid
[cmd:  [u'go run', u'C:\\Users\\gprasant\\Documents\\GitHub\\programming_pearls\\src\\go\\quicksort.go']]
[dir:  C:\Users\gprasant\Documents\GitHub\programming_pearls\src\go]
</code></pre>

<p>Is there any way to get this fixed ? Or is there another plugin in Sublime text for Go development? </p>
","<p>Installing <a href=""https://github.com/DisposaBoy/GoSublime"" rel=""noreferrer"">GoSublime</a> should get this working for you. After installing and restarting ST2: do ctrl-B, type ""run"" and hit enter.</p>
","13818754"
"Golang: Implementing a cron / executing tasks at a specific time","11412","","<p>I have been looking around for examples on how to implement a function that allows you to execute tasks at a certain time in Go, but I couldn't find anything.</p>

<p>I implemented one myself and I am sharing it in the answers, so other people can have a reference for their own implementation.</p>
","<p>This is a general implementation, which lets you set:</p>

<ul>
<li>interval period</li>
<li>hour to tick</li>
<li>minute to tick</li>
<li>second to tick</li>
</ul>

<p>A running example can be found here:
<a href=""http://play.golang.org/p/xEtiMDZhXt"">http://play.golang.org/p/xEtiMDZhXt</a></p>

<pre><code>import (
""fmt""
""time""
)

const INTERVAL_PERIOD time.Duration = 24 * time.Hour

const HOUR_TO_TICK int = 23
const MINUTE_TO_TICK int = 00
const SECOND_TO_TICK int = 03

func runningRoutine() {
    ticker := updateTicker()
    for {
        &lt;-ticker.C
        fmt.Println(time.Now(), ""- just ticked"")
        ticker = updateTicker()
    }
}

func updateTicker() *time.Ticker {
    nextTick := time.Date(time.Now().Year(), time.Now().Month(), time.Now().Day(), HOUR_TO_TICK, MINUTE_TO_TICK, SECOND_TO_TICK, 0, time.Local)
    if !nextTick.After(time.Now()) {
        nextTick = nextTick.Add(INTERVAL_PERIOD)
    }
    fmt.Println(nextTick, ""- next tick"")
    diff := nextTick.Sub(time.Now())
    return time.NewTicker(diff)
}
</code></pre>
","19549474"
"Expand tilde to home directory","11381","","<p>I have a program that accepts a destination folder where files will be created. My program should be able to handle absolute paths as well as relative paths. My problem is that I don't know how to expand <code>~</code> to the home directory.</p>

<p>My function to expand the destination looks like this. If the path given is absolute it does nothing otherwise it joins the relative path with the current working directory.</p>

<pre><code>import ""path""
import ""os""

// var destination *String is the user input

func expandPath() {
        if path.IsAbs(*destination) {
                return
        }
        cwd, err := os.Getwd()
        checkError(err)
        *destination = path.Join(cwd, *destination)
}
</code></pre>

<p>Since <a href=""http://godoc.org/path#Join""><code>path.Join</code></a> doesn't expand <code>~</code> it doesn't work if the user passes something like <code>~/Downloads</code> as the destination.</p>

<p>How should I solve this in a cross platform way?</p>
","<p>Normally, the <code>~</code> is expanded by the shell <em>before</em> your program sees it.<br>
Adjust how your program acquires its arguments from the command line in a way compatible with the shell expansion mechanism.</p>

<p>One of the possible problems is using <a href=""http://golang.org/pkg/os/exec/#Command"" rel=""nofollow noreferrer"">exec.Command</a> like this:</p>

<pre><code>cmd := exec.Command(""some-binary"", someArg) // say 'someArg' is ""~/foo""
</code></pre>

<p>which will not get expanded. You can, for example use instead:</p>

<pre><code>cmd := exec.Command(""sh"", ""-c"", fmt.Sprintf(""'some-binary %q'"", someArg))
</code></pre>

<p>which will get the standard <code>~</code> expansion from the shell.</p>

<p>EDIT: fixed the 'sh -c' example.</p>
","17609894"
"reading json data from a file","11371","","<p>I am running a server with Go programming language, and when I load the server in the browser, the temp handler function is called and the getjson.html file is served by this temp Handler function. Now the screen shows a ""Get Json Data"" button. On clicking this button, I am not getting any results (as something should be displayed on the screen).</p>

<p>I checked the javascript console and there are no errors as such. 
I am not able to figure out what the problem is, why isn't there any output on the screen.</p>

<p>Contents of servejson.go : </p>

<pre><code>package main

import (
    ""http""
    ""flag""
)

var path = flag.String(""root"", ""/home/chinmay/work/json/getjson.html"", ""Set root directory, use absolute path"")

func temp(w http.ResponseWriter, r *http.Request){
    w.Header().Set(""Content-Type"", ""text/html"")
    http.ServeFile(w,r,*path)
}

func main(){
    http.HandleFunc(""/"",temp)
    http.ListenAndServe("":8080"", nil)
}
</code></pre>

<p>Contents of getjson.html : </p>

<pre><code>package main

import (
    ""http""
    ""flag""
)

var path = flag.String(""root"", ""/home/chinmay/work/json/getjson.html"", ""Set root directory, use absolute path"")

func temp(w http.ResponseWriter, r *http.Request){
    w.Header().Set(""Content-Type"", ""text/html"")
    http.ServeFile(w,r,*path)
}

func main(){
    http.HandleFunc(""/"",temp)
    http.ListenAndServe("":8080"", nil)
}
</code></pre>

<p>Contents of json_data.js:</p>

<pre><code>{ 
  ""firstName"": ""John"",
  ""lastName"": ""Doe"",
  ""age"": 25
}
</code></pre>
","<p>Yes, you can. <a href=""http://jsbin.com/alateh"" rel=""nofollow"">Live example.</a> Provided that <code>json.txt</code> is a resource next to the document in which this code is running, and (on some browsers) provided this is not running from a local file (e.g., a <code>file://</code> URL rather than an <code>http://</code> one; some browsers are okay with local files accessing other local files via ajax, others are not).</p>

<p>A couple of notes:</p>

<ul>
<li><p>In the</p>

<pre><code>$(""div"").append(field + "" "");
</code></pre>

<p>line, <code>field</code> will be the <em>value</em> of each property (e.g., ""John"").</p></li>
<li>The order in which the properties are listed is completely undefined.</li>
</ul>

<p>So for this <em>specific</em> example, you'd probably be better off with</p>

<pre><code>&lt;script type=""text/javascript""&gt;
$(document).ready(function(){
  $(""button"").click(function(){
    $.getJSON(""json.txt"",function(result){
      $(""div"").append(result.firstName + "" "" + result.lastName + "" "" + result.age);
    });
  });
});
&lt;/script&gt;
</code></pre>

<p><a href=""http://jsbin.com/alateh/2"" rel=""nofollow"">Live example</a></p>

<hr>

<p><strong>Update</strong>: From your comments on another answer, it seems like you might be unclear on where and how the script code is running. The JavaScript script runs on the client's browser. The path to use to reference <code>json.txt</code> is exactly like (say) the path to an image you want to show on a page. <code>json.txt</code> must be accessible via the web server, just like an image would need to be accessible via the web server. Think of <code>json.txt</code> as just another resource used by your web page, like any other. In terms of the path, and how you have to make <code>json.txt</code> available, the same rules apply. To be clear: Script running client-side in a web page cannot access a server-side file that can't be retrieved by the browser.</p>

<hr>

<p><strong>Update 2</strong>: You've posted more code, and it looks like you've made your server <em>only</em> serve the <code>getjson.html</code> file. Your server <em>also</em> has to serve the <code>json.txt</code> file, or the browser can't access it.</p>
","6483512"
"Meaning of a struct with embedded anonymous interface?","11356","","<p><code>sort</code> package:</p>

<pre><code>type Interface interface {
    Len() int
    Less(i, j int) bool
    Swap(i, j int)
}

...

type reverse struct {
    Interface
}
</code></pre>

<p>What is the meaning of anonymous interface <code>Interface</code> in struct <code>reverse</code>?</p>
","<p>In this way reverse implements the <code>sort.Interface</code> and we can override a specific method
without having to define all the others</p>

<pre><code>type reverse struct {
        // This embedded Interface permits Reverse to use the methods of
        // another Interface implementation.
        Interface
}
</code></pre>

<p>Notice how here it swaps <code>(j,i)</code> instead of <code>(i,j)</code> and also this is the only method declared for the struct <code>reverse</code> even if <code>reverse</code> implement <code>sort.Interface</code></p>

<pre><code>// Less returns the opposite of the embedded implementation's Less method.
func (r reverse) Less(i, j int) bool {
        return r.Interface.Less(j, i)
}
</code></pre>

<p>Whatever struct is passed inside this method we convert it to a new <code>reverse</code> struct. </p>

<pre><code>// Reverse returns the reverse order for data.
func Reverse(data Interface) Interface {
        return &amp;reverse{data}
}
</code></pre>

<p>The real value comes if you think what would you have to do if this approach was not possible.</p>

<ol>
<li>Add another <code>Reverse</code> method to the <code>sort.Interface</code> ?</li>
<li>Create another ReverseInterface ?</li>
<li>... ?</li>
</ol>

<p>Any of this change would require many many more lines of code across thousands of packages that want to use the standard reverse functionality.</p>
","24537977"
"Why does json.Unmarshal work with reference but not pointer?","11320","","<p>This example from the <a href=""http://golang.org/pkg/encoding/json/#Unmarshal"">json.Unmarshal</a> docs (slightly modified for simplicity to use <code>Animal</code> instead of <code>[]Animal</code>) works, no errors:</p>

<p><a href=""http://play.golang.org/p/dFeihe9DUc"">Playground link of working example</a></p>

<pre><code>// ...
var animals Animal
err := json.Unmarshal(jsonBlob, &amp;animals)
// ...
</code></pre>

<p>But this slightly modified example doesn't:</p>

<p><a href=""http://play.golang.org/p/T33L87SbWi"">Playground link of non-working example</a></p>

<pre><code>// ...
var animals *Animal
err := json.Unmarshal(jsonBlob, animals)
// ...
</code></pre>

<p>It displays this obscure error that really isn't helpful (looks more like a function call than an error IMO):</p>

<blockquote>
  <p>json: Unmarshal(nil *main.Animal)</p>
</blockquote>

<p>This appears to be because <code>animals</code> is an uninitialized pointer. But the docs say (emphasis mine):</p>

<blockquote>
  <p>Unmarshal unmarshals the JSON into the value pointed at by the pointer. <strong>If the pointer is nil, Unmarshal allocates a new value for it to point to.</strong></p>
</blockquote>

<p>So why does unmarshaling fail in the second example and show that obscure error?</p>

<p>(Also, is it ""unmarshalling"" or ""unmarshaling"" (one L)? The docs use both.)</p>
","<p>You've encountered an <a href=""http://golang.org/pkg/encoding/json/#InvalidUnmarshalError"" rel=""noreferrer"">InvalidUnmarshalError</a> (see <a href=""http://golang.org/src/pkg/encoding/json/decode.go?s=3588:3724#L109"" rel=""noreferrer"">lines 109 and 110 in decode.go</a>).</p>

<blockquote>
  <p>// An InvalidUnmarshalError describes an invalid argument passed to Unmarshal.<br>
  // <strong>(The argument to Unmarshal must be a non-nil pointer.)</strong></p>
</blockquote>

<p>It seems the docs could do with some clarification as the quote above and the comment below <a href=""http://golang.org/src/pkg/encoding/json/decode.go?s=905:1025#L34"" rel=""noreferrer"">from the <code>Unmarshal</code> source</a> seem to contradict each other.</p>

<blockquote>
  <p>If the pointer is nil, Unmarshal allocates a new value for it to point to.</p>
</blockquote>
","20489948"
"what's the difference between fmt.Println() and println() in go","11298","","<p>In go, if we want to print something, we can do so as follows:</p>

<pre><code>import ""fmt""
func main(){
    fmt.Println(""Hello world!"")
}
</code></pre>

<p>But I found that one can do the same without importing <code>fmt</code>:</p>

<pre><code>func main(){
    println(""Hello world!"")
}
</code></pre>

<p>Could someone please explain?</p>
","<p><code>println</code> is an inbuilt function (into the runtime) that may go away, while the <code>fmt</code> package is in the standard library, which will persist. See <a href=""http://golang.org/ref/spec#Bootstrapping"">the spec</a> on that topic.</p>

<p>For language developers it is handy to have a <code>println</code> without dependencies, but the way to go is to use the <code>fmt</code> package or something similar (<code>log</code> for example).</p>

<p>As you can <a href=""http://code.google.com/p/go/source/browse/src/pkg/runtime/print.c#12"">see in the implementation</a> the <code>print(ln)</code> functions are not designed to even remotely support a different output mode and are mainly a debug tool.</p>
","14680373"
"Golang: how to verify number of processors on which a Go program is running","11290","","<p>I am new to Google Go (Golang). My question is related to this post <a href=""https://stackoverflow.com/q/13107958/984260"">What exactly does runtime.Gosched do?</a>. The structure of code is as copied below. My question, is that when I change the number of processor in GOMAXPROCS, how do I verify how many processors it is running on. When I do 'top', it shows a.out process which consumes 100% or less resources even when GOMAXPROCS is more than 1. I would be grateful for your help.</p>

<pre><code>package main

import (
    ""fmt""
    ""runtime""
    ""sync""
)

var wg sync.WaitGroup

func doTasks() {
    fmt.Println("" Doing task "")
    for ji := 1; ji &lt; 100000000; ji++ {
        for io := 1; io &lt; 10; io++ {
            //Some computations
        }
    }
    runtime.Gosched()

    wg.Done()
}

func main() {
    wg.Add(1)
    runtime.GOMAXPROCS(1) // or 2 or 4
    go doTasks()
    doTasks()
    wg.Wait()
}
</code></pre>
","<p>The largest number of logical CPUs the process can be running on at a given time is no more than the minimum of <a href=""http://golang.org/pkg/runtime/#GOMAXPROCS"" rel=""noreferrer""><code>runtime.GOMAXPROCS(0)</code></a> and <a href=""http://golang.org/pkg/runtime/#NumCPU"" rel=""noreferrer""><code>runtime.NumCPU()</code></a>.</p>

<pre><code>func MaxParallelism() int {
    maxProcs := runtime.GOMAXPROCS(0)
    numCPU := runtime.NumCPU()
    if maxProcs &lt; numCPU {
        return maxProcs
    }
    return numCPU
}
</code></pre>
","13245047"
"Why does fmt.Println inside a goroutine not print a line?","11270","","<p>I have the following code:</p>

<pre><code>package main

import ""net""
import ""fmt""
import ""bufio""

func main() {
    conn, _ := net.Dial(""tcp"", ""irc.freenode.net:6667"")

    reader := bufio.NewReader(conn)
    go func() {
        str, err := reader.ReadString('\n')
        if err != nil {
            // handle it
            fmt.Println(err)
        }
        fmt.Println(str)
    }()

}
</code></pre>

<p>If I don't have the code that reads from the  buffer in a goroutine, it outputs a message like this, which is what I expect to happen:</p>

<pre><code>:zelazny.freenode.net NOTICE * :*** Looking up your hostname...
</code></pre>

<p>However, having it inside a goroutine prints nothing.</p>

<p>Can someone explain why that is?</p>
","<p>Your program will exit when the <code>main()</code> function finishes.  This is likely to happen before your goroutine has time to run and print its output.</p>

<p>One option would be to have the main goroutine block reading from a channel, and have the goroutine write to the channel when it has completed its work.</p>
","16229329"
"How do I do a literal *int64 in Go?","11267","","<p>I have a struct type with a <code>*int64</code> field.</p>

<pre><code>type SomeType struct {
    SomeField *int64
}
</code></pre>

<p>At some point in my code, I want to declare a literal of this (say, when I know said value should be 0, or pointing to a 0, you know what I mean)</p>

<pre><code>instance := SomeType{
    SomeField: &amp;0,
}
</code></pre>

<p>...except this doesn't work</p>

<pre><code>./main.go:xx: cannot use &amp;0 (type *int) as type *int64 in field value
</code></pre>

<p>So I try this</p>

<pre><code>instance := SomeType{
    SomeField: &amp;int64(0),
}
</code></pre>

<p>...but this also doesn't work</p>

<pre><code>./main.go:xx: cannot take the address of int64(0)
</code></pre>

<p>How do I do this? The only solution I can come up with is using a placeholder variable</p>

<pre><code>var placeholder int64
placeholder = 0

instance := SomeType{
    SomeField: &amp;placeholder,
}
</code></pre>

<p><s>Note: the <code>&amp;0</code> syntax works <em>fine</em> when it's a *int instead of an <code>*int64</code>.</s> Edit: no it does not. Sorry about this.</p>

<p>Edit:</p>

<p>Aparently there was too much ambiguity to my question. I'm looking for a way to <em>literally state</em> a <code>*int64</code>. This could be used inside a constructor, or to state literal struct values, or even as arguments to other functions. But helper functions or using a different type are not solutions I'm looking for.</p>
","<p>The Go Language Specification (<a href=""http://golang.org/ref/spec#Address_operators"" rel=""noreferrer"">Address operators</a>) does not allow to take the address of a numeric constant (not of an <em>untyped</em> nor of a <em>typed</em> constant).</p>

<blockquote>
  <p>The operand must be <em>addressable</em>, that is, either a variable, pointer indirection, or slice indexing operation; or a field selector of an addressable struct operand; or an array indexing operation of an addressable array. As an exception to the addressability requirement, <code>x</code> [in the expression of <code>&amp;x</code>] may also be a (possibly parenthesized) <a href=""http://golang.org/ref/spec#Composite_literals"" rel=""noreferrer"">composite literal</a>.</p>
</blockquote>

<p>For reasoning why this isn't allowed, see related question: <a href=""https://stackoverflow.com/questions/35146286/find-address-of-constant-in-go/35146856#35146856"">Find address of constant in go</a>. A similar question (similarly not allowed to take its address): <a href=""https://stackoverflow.com/questions/34197248/how-can-i-store-reference-to-the-result-of-an-operation-in-go/34197367#34197367"">How can I store reference to the result of an operation in Go?</a></p>

<p>Your options (try all on the <a href=""http://play.golang.org/p/9r-JMFSx9C"" rel=""noreferrer"">Go Playground</a>):</p>

<h3>1) With <code>new()</code></h3>

<p>You can simply use the builtin <a href=""http://golang.org/pkg/builtin/#new"" rel=""noreferrer""><code>new()</code></a> function to allocate a new zero-valued <code>int64</code> and get its address:</p>

<pre><code>instance := SomeType{
    SomeField: new(int64),
}
</code></pre>

<p>But note that this can only be used to allocate and obtain a pointer to the zero value of any type.</p>

<h3>2) With slice literal, indexing and taking address</h3>

<p>If you would want <code>*SomeField</code> to be other than <code>0</code>, then you need something addressable.</p>

<p>You can still do that, but that's ugly:</p>

<pre><code>instance2 := SomeType{
    SomeField: &amp;[]int64{2}[0],
}
fmt.Println(*instance2.SomeField) // Prints 2
</code></pre>

<p>What happens here is an <code>[]int64</code> slice is created with a literal, having one element (<code>2</code>). And it is indexed (0th element) and the address of the 0th element is taken. In the background an array of <code>[1]int64</code> will also be allocated and used as the backing array for the slice. So there is a lot of boilerplate here.</p>

<h3>3) With helper variable</h3>

<p>Simplest and recommended for non-zero elements is to use a helper variable whose address can be taken:</p>

<pre><code>helper := int64(3)
instance3 := SomeType{
    SomeField: &amp;helper,
}
</code></pre>

<h3>4) With helper function</h3>

<p>Or if you need this many times, you can create a helper function which allocates and returns an <code>*int64</code>:</p>

<pre><code>func create(x int64) *int64 {
    return &amp;x
}
</code></pre>

<p>And using it:</p>

<pre><code>instance4 := SomeType{
    SomeField: create(4),
}
</code></pre>

<h3>5) With a one-liner anonymous function</h3>

<pre><code>instance5 := SomeType{
    SomeField: func() *int64 { i := int64(5); return &amp;i }(),
}
</code></pre>

<p>Or as a (shorter) alternative:</p>

<pre><code>instance5 := SomeType{
    SomeField: func(i int64) *int64 { return &amp;i }(5),
}
</code></pre>

<h3>6) With a helper struct literal</h3>

<p>Let's examine the exception to the addressability requirements:</p>

<blockquote>
  <p>As an exception to the addressability requirement, <code>x</code> [in the expression of <code>&amp;x</code>] may also be a (possibly parenthesized) <a href=""http://golang.org/ref/spec#Composite_literals"" rel=""noreferrer"">composite literal</a>.</p>
</blockquote>

<p>This means that taking the address of a composite literal, e.g. a struct literal is ok. If we do so, we will have the struct value allocated and a pointer obtained to it. But if so, another requirement will become available to us: <strong>""field selector of an addressable struct operand""</strong>. So if the struct literal contains a field of type <code>int64</code>, we can also take the address of that field!</p>

<p>Let's see this option in action. We will use this wrapper struct type:</p>

<pre><code>type intwrapper struct {
    x int64
}
</code></pre>

<p>And now we can do:</p>

<pre><code>i6 := SomeType{
    SomeField: &amp;(&amp;intwrapper{6}).x,
}
</code></pre>

<p>Note that this</p>

<pre><code>&amp;(&amp;intwrapper{6}).x
</code></pre>

<p>means the following:</p>

<pre><code>&amp; ( (&amp;intwrapper{6}).x )
</code></pre>

<p>But we can omit the ""outer"" parenthesis as the address operator <code>&amp;</code> is applied to the result of the <a href=""https://golang.org/ref/spec#Selectors"" rel=""noreferrer"">selector expression</a>.</p>

<p>Also note that in the background the following will happen (this is also a valid syntax):</p>

<pre><code>&amp;(*(&amp;intwrapper{6})).x
</code></pre>

<h3>7) With helper anonymous struct literal</h3>

<p>The principle is the same as with case #6, but we can also use an anonymous struct literal, so no helper/wrapper struct type definition needed:</p>

<pre><code>i7 := SomeType{
    SomeField: &amp;(&amp;struct{ x int64 }{7}).x,
}
</code></pre>
","30716481"
"Golang XML attribute and value","11261","","<p>I can't seem to figure out why this isn't working</p>

<pre><code> type HostProperties struct {                                                                                                                     
          XMLName xml.Name   `xml:HostProperties""`                                                                                                 
          Info    []InfoList `xml:""tag""`                                                                                                           
 }                                                                                                                                                
  type InfoList struct {                                                                                                                           
          HostEnd         string  `xml:"",chardata""`                                                                                                
          PatchSummary    string  `xml:"",chardata""`                                                                                                
          CPE1            string  `xml:"",chardata""`                                                                                                
          CPE0            string  `xml:"",chardata""`                                                                                                
          SystemType      string  `xml:"",chardata""`                                                                                                
          OperatingSystem string  `xml:"",chardata""`                                                                                                
          MacAddress      string  `xml:"",chardata""`                                                                                                
          Traceroute      string  `xml:"",chardata""`                                                                                                
          IP              string  `xml:"",chardata""`                                                                                                
          FQDN            string  `xml:"",chardata""`                                                                                                
          HostStart       string  `xml:"",chardata""`                                                                                                
  }
&lt;HostProperties&gt;
&lt;tag name=""HOST_END""&gt;Thu Feb 20 12:38:24 2014&lt;/tag&gt;
&lt;tag name=""patch-summary-total-cves""&gt;4&lt;/tag&gt;
&lt;tag name=""cpe-1""&gt;cpe:/a:openbsd:openssh:5.6 -&amp;gt; OpenBSD OpenSSH 5.6&lt;/tag&gt;
&lt;tag name=""cpe-0""&gt;cpe:/o:vmware:esx_server&lt;/tag&gt;
&lt;tag name=""system-type""&gt;hypervisor&lt;/tag&gt;
&lt;tag name=""operating-system""&gt;VMware ESXi&lt;/tag&gt;
&lt;tag name=""mac-address""&gt;00:00:00:00:00:00&lt;/tag&gt;
&lt;tag name=""traceroute-hop-0""&gt;172.28.28.29&lt;/tag&gt;
&lt;tag name=""host-ip""&gt;172.28.28.29&lt;/tag&gt;
&lt;tag name=""host-fqdn""&gt;foobar.com&lt;/tag&gt;
&lt;tag name=""HOST_START""&gt;Thu Feb 20 12:30:14 2014&lt;/tag&gt;
&lt;/HostProperties&gt;
</code></pre>

<p><strong>Results</strong></p>

<pre><code>{HostEnd:172.28.28.29 PatchSummary: CPE1: CPE0: SystemType: OperatingSystem: MacAddress: Traceroute: IP: FQDN: HostStart:}
</code></pre>

<p>It creates a bunch of new slices with only the first element filled in and even then it's the wrong element.  It's not filling out the other variables.  The rest of the file seems to parse fine, just can't figure out this part.</p>
","<p>I don't think you can make the XML parsing work like that.  Here is the best I could come up with  (<a href=""http://play.golang.org/p/3Ccor0ADsc"">run it on the playground</a>)</p>

<pre><code>var data = `&lt;HostProperties&gt;
&lt;tag name=""HOST_END""&gt;Thu Feb 20 12:38:24 2014&lt;/tag&gt;
&lt;tag name=""patch-summary-total-cves""&gt;4&lt;/tag&gt;
&lt;tag name=""cpe-1""&gt;cpe:/a:openbsd:openssh:5.6 -&amp;gt; OpenBSD OpenSSH 5.6&lt;/tag&gt;
&lt;tag name=""cpe-0""&gt;cpe:/o:vmware:esx_server&lt;/tag&gt;
&lt;tag name=""system-type""&gt;hypervisor&lt;/tag&gt;
&lt;tag name=""operating-system""&gt;VMware ESXi&lt;/tag&gt;
&lt;tag name=""mac-address""&gt;00:00:00:00:00:00&lt;/tag&gt;
&lt;tag name=""traceroute-hop-0""&gt;172.28.28.29&lt;/tag&gt;
&lt;tag name=""host-ip""&gt;172.28.28.29&lt;/tag&gt;
&lt;tag name=""host-fqdn""&gt;foobar.com&lt;/tag&gt;
&lt;tag name=""HOST_START""&gt;Thu Feb 20 12:30:14 2014&lt;/tag&gt;
&lt;/HostProperties&gt;`

type HostProperties struct {
    XMLName xml.Name `xml:HostProperties""`
    Tags    []Tag    `xml:""tag""`
}

type Tag struct {
    Key   string `xml:""name,attr""`
    Value string `xml:"",chardata""`
}

func main() {
    v := new(HostProperties)
    err := xml.Unmarshal([]byte(data), v)
    if err != nil {
        fmt.Printf(""error: %v"", err)
        return
    }
    fmt.Printf(""v = %#v\n"", v)

}
</code></pre>

<p>If you really want that <code>InfoList</code> structure you'll have to run through the <code>Tags</code> and fill it in.  I'd probably just stick it in a <code>map[string]string</code> though like this</p>

<pre><code>tags := make(map[string]string)
for _, tag := range v.Tags {
    tags[tag.Key] = tag.Value
}
fmt.Printf(""map = %#v\n"", tags)
</code></pre>
","23127352"
"Golang pointers","11200","","<p>I am currently learning to program with Go language.
I am having some difficulties understanding Go pointers (and my C/C++ is far away now...).
In the Tour of Go #52 (<a href=""http://tour.golang.org/#52"" rel=""noreferrer"">http://tour.golang.org/#52</a>) for example, I read:</p>

<pre><code>type Vertex struct {
    X, Y float64
}

func (v *Vertex) Abs() float64 {
    return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func main() {
    v := &amp;Vertex{3, 4}
    fmt.Println(v.Abs())
}
</code></pre>

<p>But if instead of</p>

<pre><code>func (v *Vertex) Abs() float64 {
[...]
v := &amp;Vertex{3, 4}
</code></pre>

<p>I wrote:</p>

<pre><code>func (v Vertex) Abs() float64 {
[...]
v := Vertex{3, 4}
</code></pre>

<p>Or even:</p>

<pre><code>func (v Vertex) Abs() float64 {
[...]
v := &amp;Vertex{3, 4}
</code></pre>

<p>and vice-versa:</p>

<pre><code>func (v *Vertex) Abs() float64 {
[...]
v := Vertex{3, 4}
</code></pre>

<p>I got the exact same result. Is there a difference (memory-wise, etc)?</p>
","<p>There are two different rules of the Go language used by your examples:</p>

<ol>
<li><p>It is possible to derive a method with a pointer receiver from a method with a value receiver. Thus <code>func (v Vertex) Abs() float64</code> will automatically generate an additional method implementation:</p>

<pre><code>func (v Vertex) Abs() float64 { return math.Sqrt(v.X*v.X+v.Y*v.Y) }
func (v *Vertex) Abs() float64 { return Vertex.Abs(*v) }  // GENERATED METHOD
</code></pre>

<p>The compiler will automatically find the generated method:</p>

<pre><code>v := &amp;Vertex{3, 4}
v.Abs()  // calls the generated method
</code></pre></li>
<li><p>Go can automatically take the address of a variable. In the following example:</p>

<pre><code>func (v *Vertex) Abs() float64 { return math.Sqrt(v.X*v.X+v.Y*v.Y) }
func main() {
    v := Vertex{3, 4}
    v.Abs()
}
</code></pre>

<p>the expression <code>v.Abs()</code> is equivalent to the following code:</p>

<pre><code>vp := &amp;v
vp.Abs()
</code></pre></li>
</ol>
","15098892"
"Import struct from another package and file golang","11163","","<p>I have a problem trying to import a type from another package and file. The struct that I'm trying to import is the one underneath.</p>

<pre><code>type PriorityQueue []*Item

type Item struct {
   value string
   priority int   
   index int 
}
</code></pre>

<p>If I would put the PriorityQueue alongside with all of its methods in the same file I'd declare it with</p>

<pre><code>pq:= &amp;PriorityQueue{}
</code></pre>

<p>I've been searching the internet like a madman for an answer on this simple question but I have not found an answer. I usually program in java and import classes is so elementary. </p>
","<p>In Go you don't import types or functions, you import <a href=""https://golang.org/ref/spec#Packages"" rel=""noreferrer""><em>packages</em></a> (see <a href=""https://golang.org/ref/spec#Import_declarations"" rel=""noreferrer"">Spec: Import declarations</a>).</p>

<p>An example import declaration:</p>

<pre><code>import ""container/list""
</code></pre>

<p>And by importing a package you get access to all of its <em>exported</em> identifiers and you can refer to them as <code>packagename.Identifiername</code>, for example:</p>

<pre><code>var mylist *list.List = list.New()

// Or simply:
l := list.New()
</code></pre>

<p>There are some tricks in import declaration, for example by doing:</p>

<pre><code>import m ""container/list""
</code></pre>

<p>You could refer to the exported identifiers with <code>""m.Identifiername""</code>, e.g.</p>

<pre><code>l := m.New()
</code></pre>

<p>Also by doing:</p>

<pre><code>import . ""container/list""
</code></pre>

<p>You can leave out the package name completely:</p>

<pre><code>l := New()
</code></pre>

<p>But only use these ""in emergency"" or when there are name collisions (which are rare).</p>
","29898669"
"Go matrix library","11148","","<p>Are there any libraries for matrix multiplication in Go? </p>

<p>I want to write and deploy some scalable and lightning fast ML algorithms on some server nodes, but I'm afraid that the speed and power I'll get with Go are going to be outweighed by the maturity of Matlab or even numpy implementations in ""slower"" languages that will be much faster. </p>

<p>I'd rather not deal with C/C++, though they are the king of performance.</p>

<p>Fast matrix multiplication and other operations is just simply a necessity for this task, and if Go isn't quite mature enough to have one...well I'll need to decide if I'm the one to start it, or simply use another tool. </p>

<p>thanks</p>
","<p>If you want to have a native solution, you may want to use <a href=""https://github.com/skelterjohn/go.matrix"" rel=""noreferrer"">skelterjohn/go.matrix</a>. To the best of my knowledge this is the most advanced matrix implementation in pure go.</p>

<p>It features, amongst other things, <a href=""https://github.com/skelterjohn/go.matrix/blob/go1/dense_arithmetic.go#L234"" rel=""noreferrer"">parallel matrix multiplication</a> as discussed <a href=""https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/RVX-BhHcugM"" rel=""noreferrer"">here</a>.</p>

<p>Keep in mind that it is possible to interface C/C++ libraries using <code>cgo</code>. So if you have a library in mind but don't want to write C/C++, you might write some wrapper for the methods you need and write the rest in go. This was done, for example, for <a href=""https://github.com/hrautila/linalg"" rel=""noreferrer"">BLAS/LAPACK</a>. </p>

<p><strong>Update</strong>: As @Malcom pointed out, development of the mentioned cgo wrapper seems to 
have stalled. Have a look at <a href=""http://code.google.com/p/biogo/"" rel=""noreferrer"">biogo</a>.</p>
","16542808"
"What's the proper way to convert a json.RawMessage to a struct?","11132","","<p>I have this <code>struct</code></p>

<pre><code>type SyncInfo struct {
    Target string
}
</code></pre>

<p>Now I query some <code>json</code> data from ElasticSearch. <code>Source</code> is of type <code>json.RawMessage</code>.
All I want is to map <code>source</code> to my <code>SyncInfo</code> which I created the variable <code>mySyncInfo</code> for.</p>

<p>I even figured out how to do that...but it seems weird. I first call <code>MarshalJSON()</code> to get a <code>[]byte</code> and then feed that to <code>json.Unmarshal()</code> which takes an <code>[]byte</code> and a pointer to my struct. </p>

<p>This works fine but it feels as if I'm doing an extra hop. Am I missing something or is that the intended way to get from a <code>json.RawMessage</code> to a <code>struct</code>?</p>

<pre><code>var mySyncInfo SyncInfo

jsonStr, _ := out.Hits.Hits[0].Source.MarshalJSON()
json.Unmarshal(jsonStr, &amp;mySyncInfo)

fmt.Print(mySyncInfo.Target)
</code></pre>
","<p>As said, the underlying type of <code>json.RawMessage</code> is <code>[]byte</code>, so you <em>can</em> use a <code>json.RawMessage</code> as the data parameter to <code>json.Unmarshal</code>.</p>

<p>However, your problem is that you have a pointer (<code>*json.RawMessage</code>) and not a value. All you have to do is to dereference it:</p>

<pre><code>err := json.Unmarshal(*out.Hits.Hits[0].Source, &amp;mySyncInfo)
</code></pre>

<p><strong>Working example:</strong></p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
)

type SyncInfo struct {
    Target string
}

func main() {
    data := []byte(`{""target"": ""localhost""}`)
    Source := (*json.RawMessage)(&amp;data)

    var mySyncInfo SyncInfo
    // Notice the dereferencing asterisk *
    err := json.Unmarshal(*Source, &amp;mySyncInfo)
    if err != nil {
        panic(err)
    }

    fmt.Printf(""%+v\n"", mySyncInfo)
}
</code></pre>

<p><strong>Output:</strong></p>

<pre><code>{Target:localhost}
</code></pre>

<p><strong>Playground:</strong> <a href=""http://play.golang.org/p/J8R3Qrjrzx"" rel=""noreferrer"">http://play.golang.org/p/J8R3Qrjrzx</a></p>
","23256630"
"getpasswd functionality in Go?","11126","","<p>Would like to be able to take password entry from the stdin console, but, of course, without echoing what the user types.</p>

<p>Is there something comparable to getpasswd functionality in Go? (Google's Go language)</p>

<p>I tried using syscall.Read, but it echoes what is typed.</p>
","<p>you can do this by execing <code>stty -echo</code> to turn off echo and then <code>stty echo</code> after reading in the password to turn it back on </p>
","2137390"
"How to convert a rune to unicode-style-string like `\u554a` in Golang?","11100","","<p>If you run <code>fmt.Println(""\u554a"")</code>, it shows '啊'.</p>

<p>But how to get unicode-style-string <code>\u554a</code> from a rune '啊' ?</p>
","<p>IMHO, it should be better:</p>

<pre><code>func RuneToAscii(r rune) string {
    if r &lt; 128 {
        return string(r)
    } else {
        return ""\\u"" + strconv.FormatInt(int64(r), 16)
    }
}
</code></pre>
","16684343"
"How to lock/synchronize access to a variable in Go during concurrent goroutines?","11095","","<p>In his answer to this question:  <a href=""https://stackoverflow.com/questions/3918941/golang-for-windows-erratic-behavior"">Golang for Windows erratic behavior?</a>
user @distributed recommended to lock/synchronize access to a shared variable on concurrent goroutines.</p>

<p>How can I do that?</p>

<p>More on the issue:</p>

<p>I get this code (the returned function with a closure on <code>views</code>) running on several goroutines at the same time:</p>

<pre><code>func makeHomeHandler() func(c *http.Conn, r *http.Request) {
    views := 1
    return func(c *http.Conn, r *http.Request) {
        fmt.Fprintf(c, ""Counting %s, %d so far."", r.URL.Path[1:], views)
        views++
    }
}
</code></pre>

<p>It looks like the IO function takes it's time, and as a result I get this kind of output:</p>

<pre><code>Counting monkeys, 5 so far.
Counting monkeys, 5 so far.
Counting monkeys, 5 so far.
Counting monkeys, 8 so far.
Counting monkeys, 8 so far.
Counting monkeys, 8 so far.
Counting monkeys, 11 so far.
</code></pre>

<p>It increments fine, but when it gets printed I can see that the operation printing+incrementing is not atomic at all.</p>

<p>If I change it to:</p>

<pre><code>func makeHomeHandler() func(c *http.Conn, r *http.Request) {
    views := 0
    return func(c *http.Conn, r *http.Request) {
        views++
        // I can only hope that other goroutine does not increment the counter 
        // at this point, i.e., right after the previous line and before the 
        // next one are executed!
        views_now := views
        fmt.Fprintf(c, ""Counting %s, %d so far."", r.URL.Path[1:], views_now)
    }
}
</code></pre>

<p>It seems to work fine, but I'm not completely sure if it will not fail eventually... </p>
","<p>If a synchronized counter is all you want, then using <code>sync.Mutex</code> is the canonical solution. The sync/atomic package should only be used for low level stuff or when you've measured a serious performance problem.</p>

<pre><code>type Counter struct {
    mu  sync.Mutex
    x   int64
}

func (c *Counter) Add(x int64) {
    c.mu.Lock()
    c.x += x
    c.mu.Unlock()
}

func (c *Counter) Value() (x int64) {
    c.mu.Lock()
    x = c.x
    c.mu.Unlock()
    return
}

func makeHomeHandler() func(c http.ResponseWriter, r *http.Request) {
    var views Counter
    return func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, ""Counting %s, %d so far."", r.URL.Path[1:], views.Value())
        views.Add(1)
    }
}
</code></pre>

<p>For your particular problem, I'd suggest defining a new type that satisfies the http.Handler interface, rather than returning a closure. That looks simpler too:</p>

<pre><code>type homeHandler struct {
    mu  sync.Mutex
    views   int64
}

func (h *homeHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    h.mu.Lock()
    defer h.mu.Unlock()
    fmt.Fprintf(w, ""Counting %s, %d so far."", r.URL.Path[1:], h.views)
    h.views++
}

func init() {
    http.Handle(""/"", new(homeHandler))
}
</code></pre>
","10735763"
"URL Builder/Query builder in Go","11095","","<p>I am interested in dynamically taking arguments from the user as input through a browser or a CLI to pass in those parameters to the REST API call and hence construct the URL dynamically using Go which is going to ultimately fetch me some JSON data. I wanted to know some techniques in Go which could help me do that. One ideal way I thought was to use a map and populate it with arguments keys and corresponding values and iterate over it and append it to the URL string.But when it comes to dynamically taking the arguments and populating the map,I am not very sure how to do that in Go. Can someone help me out with some code snippet in Go?</p>

<p>Example -</p>

<p>http://:port?api=fetchJsonData&amp;arg1=val1&amp;arg2=val2&amp;arg3=val3.....&amp;argn=valn</p>
","<p>There's already <a href=""http://golang.org/pkg/net/url/"" rel=""noreferrer""><code>url.URL</code></a> that handles that kind of things for you.</p>

<p>For http handlers (incoming requests) it's a part of <a href=""http://golang.org/pkg/net/http/#Request"" rel=""noreferrer""><code>http.Request</code></a> (access it with req.URL.Query()).</p>

<p>A very good example from the official <a href=""http://golang.org/pkg/net/url/#example_URL"" rel=""noreferrer"">docs</a>:</p>

<pre><code>u, err := url.Parse(""http://bing.com/search?q=dotnet"")
if err != nil {
    log.Fatal(err)
}
u.Scheme = ""https""
u.Host = ""google.com""
q := u.Query()
q.Set(""q"", ""golang"")
u.RawQuery = q.Encode()
fmt.Println(u)
</code></pre>
","26987017"
"Go, tcp too many open files debug","11092","","<p>Here's a straightforward Go http (tcp) connection test script</p>

<pre><code>func main() {
    ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintln(w, ""Hello, client"")
    }))
    defer ts.Close()
    var wg sync.WaitGroup
    for i := 0; i &lt; 2000; i++ {
        wg.Add(1)
        go func(i int) {
            defer wg.Done()
            resp, err := http.Get(ts.URL)
            if err != nil {
                panic(err)
            }
            greeting, err := ioutil.ReadAll(resp.Body)
            resp.Body.Close()
            if err != nil {
                panic(err)
            }
            fmt.Printf(""%s"", i, greeting)
        }(i)
    }
    wg.Wait()
}
</code></pre>

<p>And If I run this in Ubuntu I get:</p>

<p><code>panic: Get http://127.0.0.1:33202: dial tcp 127.0.0.1:33202: too many open files</code></p>

<p>Other posts say to make sure <code>Close</code> the connection, which I am doing it all here.
And others say to increase the limit of maximum connection with <code>ulimit</code> or try <code>sudo sysctl -w fs.inotify.max_user_watches=100000</code> but still does not work.</p>

<p>How do I run millions of tcp connection goroutines in a single server?
It crashes only with 2,000 connections.</p>

<p>Thanks,</p>
","<p>I think you need to change your max file descriptors.  I have run into the same problem on one of my development VMs before and needed to change the file descriptors max, not anything with inotify settings.  </p>

<p>FWIW, your program runs fine on my VM.</p>

<pre><code>·&gt; ulimit -n
120000
</code></pre>

<p>But after I run</p>

<pre><code>·&gt; ulimit -n 500
·&gt; ulimit -n
500
</code></pre>

<p>I get:</p>

<pre><code>panic: Get http://127.0.0.1:51227: dial tcp 127.0.0.1:51227: socket: too many open files
</code></pre>
","32325509"
"Golang read from pipe reads tons of data","11088","","<p>I'm trying to read an archive that's being tarred, streaming, to stdin, but I'm somehow reading <em>far</em> more data in the pipe than tar is sending.</p>

<p>I run my command like this:</p>

<pre><code>tar -cf - somefolder | ./my-go-binary
</code></pre>

<p>The source code is like this:</p>

<pre><code>package main

import (
    ""bufio""
    ""io""
    ""log""
    ""os""
)

// Read from standard input
func main() {
    reader := bufio.NewReader(os.Stdin)
    // Read all data from stdin, processing subsequent reads as chunks.
    parts := 0
    for {
        parts++
        data := make([]byte, 4&lt;&lt;20) // Read 4MB at a time
        _, err := reader.Read(data)
        if err == io.EOF {
            break
        } else if err != nil {
            log.Fatalf(""Problems reading from input: %s"", err)
        }
    }
    log.Printf(""Total parts processed: %d\n"", parts)
}
</code></pre>

<p>For a 100MB tarred folder, I'm getting 1468 chunks of 4MB (that's 6.15GB)! Further, it doesn't seem to matter how large the <code>data []byte</code> array is: if I set the chunk size to 40MB, I still get ~1400 chunks of 40MB data, which makes no sense at all.</p>

<p>Is there something I need to do to read data from <code>os.Stdin</code> properly with Go?</p>
","<p>Your code is inefficient. It's allocating and initializing <code>data</code> each time through the loop.</p>

<pre><code>for {
    data := make([]byte, 4&lt;&lt;20) // Read 4MB at a time
}
</code></pre>

<p>The code for your <code>reader</code> as an <code>io.Reader</code> is wrong. For example, you ignore the number of bytes read by <code>_, err := reader.Read(data)</code> and you don't handle <code>err</code> errors properly.</p>

<blockquote>
  <p><a href=""http://golang.org/pkg/io/"">Package io</a></p>

<pre><code>import ""io"" 
</code></pre>
  
  <p><a href=""http://golang.org/pkg/io/#Reader"">type Reader</a></p>

<pre><code>type Reader interface {
        Read(p []byte) (n int, err error)
}
</code></pre>
  
  <p>Reader is the interface that wraps the basic Read method.</p>
  
  <p>Read reads up to len(p) bytes into p. It returns the number of bytes
  read (0 &lt;= n &lt;= len(p)) and any error encountered. Even if Read
  returns n &lt; len(p), it may use all of p as scratch space during the
  call. If some data is available but not len(p) bytes, Read
  conventionally returns what is available instead of waiting for more.</p>
  
  <p>When Read encounters an error or end-of-file condition after
  successfully reading n > 0 bytes, it returns the number of bytes read.
  It may return the (non-nil) error from the same call or return the
  error (and n == 0) from a subsequent call. An instance of this general
  case is that a Reader returning a non-zero number of bytes at the end
  of the input stream may return either err == EOF or err == nil. The
  next Read should return 0, EOF regardless.</p>
  
  <p>Callers should always process the n > 0 bytes returned before
  considering the error err. Doing so correctly handles I/O errors that
  happen after reading some bytes and also both of the allowed EOF
  behaviors.</p>
  
  <p>Implementations of Read are discouraged from returning a zero byte
  count with a nil error, except when len(p) == 0. Callers should treat
  a return of 0 and nil as indicating that nothing happened; in
  particular it does not indicate EOF.</p>
  
  <p>Implementations must not retain p.</p>
</blockquote>

<p>Here's a model file read program that conforms to the <code>io.Reader</code> interface:</p>

<pre><code>package main

import (
    ""bufio""
    ""io""
    ""log""
    ""os""
)

func main() {
    nBytes, nChunks := int64(0), int64(0)
    r := bufio.NewReader(os.Stdin)
    buf := make([]byte, 0, 4*1024)
    for {
        n, err := r.Read(buf[:cap(buf)])
        buf = buf[:n]
        if n == 0 {
            if err == nil {
                continue
            }
            if err == io.EOF {
                break
            }
            log.Fatal(err)
        }
        nChunks++
        nBytes += int64(len(buf))
        // process buf
        if err != nil &amp;&amp; err != io.EOF {
            log.Fatal(err)
        }
    }
    log.Println(""Bytes:"", nBytes, ""Chunks:"", nChunks)
}
</code></pre>

<p>Output:</p>

<pre>
2014/11/29 10:00:05 Bytes: 5589891 Chunks: 1365
</pre>
","27196786"
"How to convert uint32 to string?","11075","","<p>I need to convert an uint32 to string. How can I do that . strconv.Itoa doesn't seem to work.
Long store: 
I need to convert an UID received through the imap package to string so that I can set it later a a sequence. As a side note I'm wondering why such conversions are difficult in Go. A cast <code>string(t)</code> could have been so much easier</p>
","<p>I would simply use Sprintf or even just Sprint:</p>

<pre><code>var n uint32 = 42
str := fmt.Sprint(n)
println(str)
</code></pre>

<p>Go is strongly typed. Casting a number directly to a string would not make sense. Think about C where string are <code>char *</code> which is a pointer to the first letter of the string terminated by <code>\0</code>. Casting a number to a string would result in having the first letter pointer to the address of the number, which does not make sense. This is why you need to ""actively"" convert.</p>
","24886924"
"Golang issue with accessing Nested JSON Array after Unmarshalling","11036","","<p>I'm still in the learning process of Go but am hitting a wall when it comes to JSON response arrays.  Whenever I try to access a nested element of the ""objects"" array, Go throws (type interface {} does not support indexing)</p>

<p>What is going wrong and how can I avoid making this mistake in the future?</p>

<pre><code>package main    

import (
        ""encoding/json""
        ""fmt""
)    

func main() {
        payload := []byte(`{""query"": ""QEACOR139GID"",""count"": 1,""objects"": [{""ITEM_ID"": ""QEACOR139GID"",""PROD_CLASS_ID"": ""BMXCPGRIPS"",""AVAILABLE"": 19}]}`)
        var result map[string]interface{}
        if err := json.Unmarshal(payload, &amp;result); err != nil {
            panic(err)
        }        

        fmt.Println(result[""objects""][""ITEM_ID""])    

}
</code></pre>

<p><a href=""http://play.golang.org/p/duW-meEABJ"">http://play.golang.org/p/duW-meEABJ</a></p>

<p>edit: Fixed link</p>
","<p>As the error says, interface variables do not support indexing.  You will need to use a <a href=""http://golang.org/ref/spec#Type_assertions"">type assertion</a> to convert to the underlying type.</p>

<p>When decoding into an <code>interface{}</code> variable, the JSON module represents arrays as <code>[]interface{}</code> slices and dictionaries as <code>map[string]interface{}</code> maps.</p>

<p>Without error checking, you could dig down into this JSON with something like:</p>

<pre><code>objects := result[""objects""].([]interface{})
first := objects[0].(map[string]interface{})
fmt.Println(first[""ITEM_ID""])
</code></pre>

<p>These type assertions will panic if the types do not match. You can use the two-return form, you can check for this error.  For example:</p>

<pre><code>objects, ok := result[""objects""].([]interface{})
if !ok {
    // Handle error here
}
</code></pre>

<p>If the JSON follows a known format though, a better solution would be to decode into a structure.  Given the data in your example, the following might do:</p>

<pre><code>type Result struct {
    Query   string `json:""query""`
    Count   int    `json:""count""`
    Objects []struct {
        ItemId      string `json:""ITEM_ID""`
        ProdClassId string `json:""PROD_CLASS_ID""`
        Available   int    `json:""AVAILABLE""`
    } `json:""objects""`
}
</code></pre>

<p>If you decode into this type, you can access the item ID as <code>result.Objects[0].ItemId</code>.</p>
","24378004"
"Golang passing a variable by reference to a structure member value","11017","","<h2>Thanks for the help some really useful stuff here!</h2>

<p>I am having difficulties passing a value to a struct by reference or by passing a pointer. I will outline what I am trying to achieve:</p>

<pre><code>type FooStruct struct {
    foo1, foo2, foo3 int //etc
    connection *net.Conn
}

func(session FooStruct) Run(conn *net.Conn) {
    session.connection = conn
    session.connection.RemoteAddr()
    ......
}

func main() {
    server, err := net.Listen(""tcp"", "":8484"")
    connection, err := server.Accept()
    foo := FooStruct{}
    foo.Run(&amp;connection)
}
</code></pre>

<p>The above is an example of what I am trying to achive I only want to pass a reference pointer to the connection variable in the struct. I have tried reading the documentation and going through the tutorial but I have become confused.</p>

<p>I hope it is clear as I have tried to distil the problem down to its core.</p>

<p>Edit (forgot to mention the error):</p>

<p>When compiling I get the error - session.connection.RemoteAddr undefined (type * net.Conn has no field or method RemoteAddr). It does have that method as when copying the variable it works fine. However that is not what I want to do.</p>

<p>Edit: Removed comma in struct</p>
","<p>Since <code>net.Conn</code> is an interface, not a struct, you should pass and store it directly. Like this:</p>

<pre><code>type FooStruct struct {
    foo1, foo2, foo3 int
    connection       net.Conn
}

func(session *FooStruct) Run(conn net.Conn) {
    session.connection = conn
    session.connection.RemoteAddr()
}

func main() {
    server, err := net.Listen(""tcp"", "":8484"")
    connection, err := server.Accept()
    foo := FooStruct{}
    foo.Run(connection)
}
</code></pre>

<p>See also the Go FAQ entry on <a href=""http://golang.org/doc/faq#pointer_to_interface"" rel=""noreferrer"">passing interfaces to pointers</a>.</p>

<p>Also note that I changed the receiver of the <code>Run</code> method to a pointer, <a href=""http://golang.org/doc/faq#methods_on_values_or_pointers"" rel=""noreferrer"">which is generally what you want</a>.</p>
","23964301"
"How to properly use build tags?","10982","","<p>I need to be able to build different versions of a go application; a 'debug' version and a normal version.</p>

<p>This is easy to do; I simply have a const DEBUG, that controls the behaviour of the application, but it's annoying to have to edit the config file every time I need to swap between build types.</p>

<p>I was reading about go build (<a href=""http://golang.org/pkg/go/build/"" rel=""noreferrer"">http://golang.org/pkg/go/build/</a>) and tags, I thought perhaps I could do this:</p>

<p>config.go:</p>

<pre><code>// +build !debug
package build
const DEBUG = false
</code></pre>

<p>config.debug.go:</p>

<pre><code>// +build debug
package build
const DEBUG = true
</code></pre>

<p>Then I should be able to build using ""go build"" or ""go build -tags debug"", and the tags should exclude config.go and include config.debug.go.</p>

<p>...but this doesn't work. I get:</p>

<blockquote>
  <p>src/build/config.go:3: DEBUG redeclared in this block (&lt;0>) previous
  declaration at src/build/config.debug.go:3</p>
</blockquote>

<p>What am I doing wrong?</p>

<p>Is there another and more appropriate #ifdef style way of doing this I should be using?</p>
","<p>See <a href=""https://stackoverflow.com/questions/10646531/golang-conditional-compilation/10649653#10649653"">my answer to another question</a>. You need a blank line after the ""// +build"" line.</p>

<p>Also, you probably want the ""!"" in config.go, not in config.debug.go; and presumably you want one to be ""DEBUG = false"".</p>
","15214560"
"How to set Golang's log output back to console?","10974","","<p>Google Go's <code>log</code> package has <a href=""https://golang.org/pkg/log/#SetOutput"">SetOutput</a> - a function for setting the log output to any io.Writer. After I set it for testing, I would like to revert the output back to the standard console output - how do I do that? I don't see any obvious way of resetting it in the <code>log</code> or <code>io</code> packages.</p>
","<p>For standard error (the default):  </p>

<pre><code>log.SetOutput(os.Stderr)
</code></pre>

<p>For standard output: </p>

<pre><code>log.SetOutput(os.Stdout)
</code></pre>

<p><a href=""http://golang.org/src/log/log.go"" rel=""noreferrer"">http://golang.org/src/log/log.go</a></p>
","30697774"
"What is the difference between Go's multithreading and pthread or Java Threads?","10946","","<p>What is the difference between Go's multithreading approach and other approaches, such as pthread, boost::thread or Java Threads?</p>
","<p>Quoted from <a href=""https://git.ustclug.org/zhsso/go/blob/fa3d86ca39f9d168f194b232538794bd09f887f3/doc/GoCourseDay3.pdf"" rel=""nofollow noreferrer"">Day 3 Tutorial</a> &lt;- read this for more information.</p>

<blockquote>
  <p>Goroutines are multiplexed as needed
  onto system threads. When a goroutine
  executes a blocking system call, no
  other goroutine is blocked.</p>
  
  <p>We will do the same for CPU-bound
  goroutines at some point, but for now,
  if you want user-level parallelism you
  must set $GOMAXPROCS. or call
  runtime.GOMAXPROCS(n).</p>
</blockquote>

<p>A goroutine does not necessarily correspond to an OS thread. It can have smaller initial stack size and the stack will grow as needed. </p>

<p>Multiple gorouitines may be multiplexed into a single thread when needed.</p>

<p>More importantly, the concept is as outlined above, that a goroutine is a sequential program that may block itself but does not block other goroutines.</p>

<p>Goroutines is implemented as pthreads in gccgo, so it can be identical to OS thread, too.
It's separating the concept of OS thread and our thinking of multithreading when programming.</p>
","1739685"
"Why IntelliJ Idea cannot find location of GO SDK?","10939","","<ol>
<li>I downloaded <a href=""https://golang.org/dl/"" rel=""nofollow noreferrer"">go1.4.darwin-amd64-osx10.8.tar.gz</a> and extract it on my local directory.</li>
<li>Based on what <a href=""https://golang.org/doc/install"" rel=""nofollow noreferrer"">Installing to a custom location</a> says I added GOROOT in env variable.</li>
<li>Based on what <a href=""https://golang.org/doc/install"" rel=""nofollow noreferrer"">Test your installation</a> says I created a go file.</li>
<li>I finally ran it and I got expected result as following screenshot.</li>
</ol>

<p><img src=""https://i.stack.imgur.com/lHowX.png"" alt=""enter image description here""></p>

<ul>
<li>I actually have IntelliJ v.14 however, based on <a href=""http://dennissuratna.com/setup-intellij-for-golang/"" rel=""nofollow noreferrer"">this article</a> I installed <code>Go Language (golang.org)</code> version 0.9.15.3 in my IntelliJ Idea.</li>
<li>I created a Go project and during creation it asked me to add GO SDK. I gave it <code>~/Desktop/go/sdk</code> however it wasn't able to recognise it. I got this error in Event Log:</li>
</ul>

<blockquote>
  <p>14:03:02 IllegalArgumentException: Argument for @NotNull parameter
  'virtualFile' of
  com/intellij/openapi/projectRoots/impl/ProjectRootContainerImpl.addRoot
  must not be null</p>
</blockquote>

<p>Any idea how IntelliJ Idea is able to recognize it would be appreciated. Thanks.</p>
","<p>Please consider using one of the alpha releases for 0.9.16. I believe that alpha7 could be the more stable one rather than alpha9. You can get them from <a href=""https://github.com/go-lang-plugin-org/go-lang-idea-plugin/releases"" rel=""nofollow noreferrer"">GitHub releases</a></p>

<p>The v1.0.0-alpha0 branch is, as the name implies, an alpha release and it's in the early stages of development, that's why there's no release done yet for it as well.</p>

<p>P.S. I'm one of the contributors to the plugin.</p>
","27939351"
"Reading from multiple channels simultaneously in Golang","10919","","<p>I am new to Golang. Right now I am trying to figure out how to make an any-to-one channel in Golang, where the setup is as follows:</p>

<p>say I have two goroutines numgen1 and numgen2 executing concurrently and writing numbers to channels num1 resp. num2. I would like to add the numbers sent from numgen1 and numgen2 in a new process, addnum.  I have tried something like this:</p>

<pre><code>func addnum(num1, num2, sum chan int) {
    done := make(chan bool)
    go func() {
        n1 := &lt;- num1
        done &lt;- true
    }()
        n2 := &lt;- num2
        &lt;- done
    sum &lt;- n1 + n2
}
</code></pre>

<p>but this seems sadly incorrect. Could someone please give me some ideas?</p>

<p>Thank you very much for your help.</p>
","<p>Depending on your requirements, you may need to read <em>both</em> of the channels for every iteration (i.e. a sort-of 'zip' function). You can do this with a select, similarly to <a href=""https://stackoverflow.com/users/860302/user860302"">user860302</a>'s answer:</p>

<pre><code>func main() {

  c1 := make(chan int)
  c2 := make(chan int)
  out := make(chan int)

  go func(in1, in2 &lt;-chan int, out chan&lt;- int) {
    for {
      sum := 0
      select {
      case sum = &lt;-in1:
        sum += &lt;-in2

      case sum = &lt;-in2:
        sum += &lt;-in1
      }
      out &lt;- sum
    }
  }(c1, c2, out)
}
</code></pre>

<p>This runs forever. My preferred way to terminate goroutines like this one is to close the input channels. In this case you would need to wait for both to close, then <code>close(out)</code> before terminating.</p>

<p>Tip: note the use of directional channels as goroutine formal parameters. The compiler catches more mistakes when you write it this way. Happiness!</p>
","20607625"
"How do I find the size of the array in go","10846","","<p>I have tried <code>len()</code> function but it gives the declared value. The <code>size()</code> function gives an error.</p>

<p>Code:</p>

<pre><code>package main
var check [100]int
func main() {
    println(len(check))
}
</code></pre>

<p>The output is <code>100</code> here, I need the total items in array (i.e. <code>0</code>).</p>
","<p>Arrays in Go are fixed sizes: once you create an array in Go, you can't change its size later on. This is so to an extent that the length of an array is part of the array type (this means the types <code>[2]int</code> and <code>[3]int</code> are 2 distinct types). That being said the length of a value of some array type is always the same, and it is determined by its type. For example the length of an array value of type <code>[100]int</code> is always <code>100</code>, (which can be queried using the built-in function <a href=""https://golang.org/pkg/builtin/#len"" rel=""noreferrer""><code>len()</code></a>).</p>

<p><a href=""https://golang.org/ref/spec#Array_types"" rel=""noreferrer"">Spec: Array Types:</a></p>

<blockquote>
  <p>The length is part of the array's type; it must evaluate to a non-negative <a href=""https://golang.org/ref/spec#Constants"" rel=""noreferrer"">constant</a> representable by a value of type <code>int</code>. The length of array <code>a</code> can be discovered using the built-in function <a href=""https://golang.org/ref/spec#Length_and_capacity"" rel=""noreferrer"">len</a>.</p>
</blockquote>

<p>If you're looking for the answer to ""How many elements have been set?"", that is not tracked in Go. The ""total items in array"" you're looking for is also always the same as the array length: when you create an array in Go, all elements in the array are initialized to the <a href=""https://golang.org/ref/spec#The_zero_value"" rel=""noreferrer"">zero-value</a> of the element's type (unless otherwise specified e.g. by using a <a href=""https://golang.org/ref/spec#Composite_literals"" rel=""noreferrer"">composite literal</a>).</p>

<p>For example after this line:</p>

<pre><code>var arr [100]int
</code></pre>

<p>The array <code>arr</code> already has 100 <code>int</code>s, all being <code>0</code> (because that is the zero-value of type <code>int</code>). After the following line:</p>

<pre><code>var arr2 = [3]int{1, 2, 3}
</code></pre>

<p>The array <code>arr2</code> has 3 <code>int</code> elements, being <code>1</code>, <code>2</code> and <code>3</code>. And after the following line</p>

<pre><code>var arr3 = [...]bool{3: true}
</code></pre>

<p>The array <code>arr3</code> has 4 <code>bool</code> elements, being <code>false</code>, <code>false</code>, <code>false</code> and <code>true</code> (<code>false</code> is the zero value of type <code>bool</code> and we only specified the 4th element to be <code>true</code> which is at index <code>3</code>).</p>

<p>Your question might have more meaning if you would ask about <a href=""https://golang.org/ref/spec#Slice_types"" rel=""noreferrer"">slices</a>:</p>

<blockquote>
  <p>A slice is a descriptor for a contiguous segment of an <em>underlying array</em> and provides access to a numbered sequence of elements from that array.</p>
</blockquote>

<p>So basically a slice is a ""view"" of some (contiguous) part of an array. A slice header or descriptor contains a pointer to the first value of the part it describes in the array, it contains a length and the capacity (which is the max value to which the length can be extended).</p>

<p>I really recommend to read the following blog posts:</p>

<p><a href=""http://blog.golang.org/go-slices-usage-and-internals"" rel=""noreferrer"">The Go Blog: Go Slices: usage and internals</a></p>

<p><a href=""https://blog.golang.org/slices"" rel=""noreferrer"">The Go Blog: Arrays, slices (and strings): The mechanics of 'append'</a></p>
","35939008"
"Does fmt.Print() write to stdout in GoLang?","10844","","<p>I may be overthinking this too much, but in GoLang, does <code>fmt.Print()</code> write to stdout or do I have to use <code>os.Stdout.Write</code>?</p>
","<p>From <a href=""https://golang.org/pkg/fmt/#Print"" rel=""noreferrer"">the documentation</a>:</p>

<blockquote>
  <p>Print formats using the default formats for its operands and writes to standard output.</p>
</blockquote>

<p>So yep, it writes to stdout.</p>
","28033745"
"How to write simple regex in golang?","10796","","<p>I am trying to write regexp that returns the substring for string that begins with dot and until first space. But I am new in regular expressions, so I tried something
 like that and it doesn't work at all:</p>

<pre><code>package main

import ""fmt""
import ""regexp""

func main() {
    re := regexp.MustCompile(""\\.* "")
    fmt.Printf(re.FindString("".d 1000=11,12"")) // Must return d
    fmt.Printf(re.FindString(""e 2000=11""))     // Must return nothing or """"
    fmt.Printf(re.FindString("".e2000=11""))     // Must return nothing or """"
}
</code></pre>

<p>this code just white 3 white space in golang. What I am doing wrong?</p>
","<p>While <code>*</code> is the wildcard in glob matching, it's not the wildcard in regex. In regex, <code>.</code> is the wildcard and <code>*</code> means repetition of 0 or more times. You probably want:</p>

<pre><code>re := regexp.MustCompile(""\\..* "")
</code></pre>

<p><a href=""http://play.golang.org/p/jXhhO__Dkj"" rel=""noreferrer"">go playground</a></p>

<p>But you might notice that it's also returning the dot and space. You can use <code>FindStringSubmatch</code> and use a capture group to fix this, and you can use backsticks so that you don't have to double escape things:</p>

<pre><code>re := regexp.MustCompile(`\.(.*) `)
match := re.FindStringSubmatch("".d 1000=11,12"")
if len(match) != 0 {fmt.Printf(""1. %s\n"", match[1])}
</code></pre>

<p><a href=""http://play.golang.org/p/6J3kk5S8yo"" rel=""noreferrer"">go playground</a></p>

<p>Though I would prefer using <code>\S*</code> (matches non-space characters) instead of <code>.*</code> to get this match, since it'll reduce the possible backtracking:</p>

<pre><code>re := regexp.MustCompile(`\.(\S*) `)
</code></pre>

<p><a href=""http://play.golang.org/p/rZUW_7s6LY"" rel=""noreferrer"">go playground</a></p>
","22283443"
"Is there an easy way to stub out time.Now() globally in golang during test?","10770","","<p>Part of our code is time sensitive and we need to able to reserve something and then release it in 30-60 seconds etc, which we can just do a <code>time.Sleep(60 * time.Second)</code></p>

<p>I have just implemented time interface and during test use a stubbed implementation of the time interface, similar to <a href=""https://groups.google.com/forum/#!topic/golang-nuts/Mkonfn4j4jo"" rel=""nofollow noreferrer"">this golang-nuts discussion</a>.</p>

<p>However, <code>time.Now()</code> is called in multiple sites which means we need to pass a variable around to keep track of how much time we have actually slept. </p>

<p>I was wondering if there is an alternative way to stub out <code>time.Now()</code> globally. Maybe making a system call to change the system clock?</p>

<p>Maybe we can write our own time package which basically wraps around the time package but allows us to change it? </p>

<p>Our current implementation works well, I am a go beginner and I am curious to see if anyone has other ideas?</p>
","<p>With implementing a custom interface you <strong>are already on the right way</strong>. I take it you use the following advise from the golang nuts thread you've posted:</p>

<hr>

<pre><code>type Clock interface {
  Now() time.Time
  After(d time.Duration) &lt;-chan time.Time
}
</code></pre>

<blockquote>
  <p>and provide a concrete implementation</p>
</blockquote>

<pre><code>type realClock struct{}
func (realClock) Now() time.Time { return time.Now() }
func (realClock) After(d time.Duration) &lt;-chan time.Time { return time.After(d) }
</code></pre>

<blockquote>
  <p>and a testing implementation. </p>
</blockquote>

<hr>

<p><sup><a href=""https://groups.google.com/d/msg/golang-nuts/Mkonfn4j4jo/0ZhWPUwul7gJ"" rel=""nofollow noreferrer"">Original</a></sup></p>

<p><strong>Changing the system time while making tests (or in general) is a bad idea</strong>.
You don't know what depends on the system time while executing tests and you don't want to find out the hard way by spending days of debugging into that. Just don't do it.</p>

<p><strong>There is also no way to shadow the time package globally</strong> and doing that would not do 
anything more you couldn't do with the interface solution. You can write your own time package
which uses the standard library and provides a function to switch to a mock time library for
testing if it is the time object you need to pass around with the interface solution that is bothering you.</p>

<p>The best way to design and test your code would probably be to make as much code stateless as possible.
Split your functionality in testable, stateless parts. Testing these components separately is much easier then. Also, less side effects means that it is much easier to make the code run concurrently.</p>
","18970352"
"Go printing date to console","10766","","<p>I'm trying to pint the month, day, and year, separately to the console. </p>

<p>I need to be able to access each section of the date individually. I can get the whole thing using time.now() from the ""time"" package but I'm stuck after that. </p>

<p>Can anyone show me where I am going wrong please?</p>
","<p>You're actually pretty close :) Then return value from <code>time.Now()</code> is a <code>Time</code> type, and looking at the package docs <a href=""http://golang.org/pkg/time/#Time"" rel=""noreferrer"">here</a> will show you some of the methods you can call (for a quicker overview, go <a href=""http://golang.org/pkg/time/"" rel=""noreferrer"">here</a> and look under <code>type Time</code>). To get each of the attributes you mention above, you can do this:</p>

<pre><code>package main

import (
    ""fmt""
    ""time""
)

func main() {
    t := time.Now()
    fmt.Println(t.Month())
    fmt.Println(t.Day())
    fmt.Println(t.Year())
}
</code></pre>

<p>If you are interested in printing the <code>Month</code> as an integer, you can use the <code>Printf</code> function:</p>

<pre><code>package main

import (
    ""fmt""
    ""time""
)

func main() {
    t := time.Now()
    fmt.Printf(""%d\n"", t.Month())
}
</code></pre>
","18627479"
"Removing NUL characters from bytes","10765","","<p>To teach myself Go I'm building a simple server that takes some input, does some processing, and sends output back to the client (that includes the original input).</p>

<p>The input can vary in length from around 5 - 13 characters + endlines and whatever other guff the client sends.</p>

<p>The input is read into a byte array and then converted to a string for some processing. Another string is appended to this string and the whole thing is converted back into a byte array to get sent back to the client.</p>

<p>The problem is that the input is padded with a bunch of NUL characters, and I'm not sure how to get rid of them.</p>

<p>So I could loop through the array and when I come to a nul character, note the length (n), create a new byte array of that length, and copy the first n characters over to the new byte array and use that. Is that the best way, or is there something to make this easier for me?</p>

<p>Some stripped down code:</p>

<pre><code>data := make([]byte, 16)
c.Read(data)

s := strings.Replace(string(data[:]), ""an"", """", -1)
s = strings.Replace(s, ""\r"", """", -1)
s += ""some other string""
response := []byte(s)
c.Write(response)
c.close()
</code></pre>

<p>Also if I'm doing anything else obviously stupid here it would be nice to know.</p>
","<p>In package ""bytes"", <a href=""http://golang.org/pkg/bytes/#Trim"" rel=""noreferrer""><code>func Trim(s []byte, cutset string) []byte</code></a> is your friend:</p>

<blockquote>
  <p>Trim returns a subslice of s by slicing off all leading and trailing UTF-8-encoded Unicode code points contained in cutset.</p>
</blockquote>

<pre><code>// Remove any NULL characters from 'b'
b = bytes.Trim(b, ""\x00"")
</code></pre>
","15431565"
"How do I create crossplatform file paths in Go?","10749","","<p>I want to open a given file <code>""directory/subdirectory/file.txt""</code> in golang. What is the recommended way to express such a path in an OS agnostic way (ie backslashes in Windows, forward slashes in Mac and Linux)? Something like Python's <code>os.path</code> module?</p>
","<p>For creating and manipulating OS-specific paths directly use <a href=""http://golang.org/pkg/os"" rel=""noreferrer""><code>os.PathSeparator</code></a> and the <a href=""http://golang.org/pkg/path/filepath/"" rel=""noreferrer""><code>path/filepath</code></a> package.</p>

<p>An alternative method is to always use <code>'/'</code> and the <a href=""http://golang.org/pkg/path/"" rel=""noreferrer""><code>path</code></a> package throughout your program. The <code>path</code> package uses <code>'/'</code> as path separator irrespective of the OS. Before opening or creating a file, convert the /-separated path into an OS-specific path string by calling <a href=""http://golang.org/pkg/path/filepath/#FromSlash"" rel=""noreferrer""><code>filepath.FromSlash(path string)</code></a>. Paths returned by the OS can be converted to /-separated paths by calling <a href=""http://golang.org/pkg/path/filepath/#ToSlash"" rel=""noreferrer""><code>filepath.ToSlash(path string)</code></a>.</p>
","9373342"
"golang how to access interface fields","10732","","<p>I have a function as below which decodes some json data and returns it as an interface</p>

<pre><code>package search

func SearchItemsByUser(r *http.Request) interface{} {

    type results struct {
        Hits             hits
        NbHits           int
        NbPages          int
        HitsPerPage      int
        ProcessingTimeMS int
        Query            string
        Params           string
    }

    var Result results

    er := json.Unmarshal(body, &amp;Result)
    if er != nil {
        fmt.Println(""error:"", er)
    }
    return Result

}
</code></pre>

<p>I'm trying to access the data fields ( e.g. Params) but for some reasons it says that the interface  has no such field. Any idea why ?</p>

<pre><code>func test(w http.ResponseWriter, r *http.Request) {

    result := search.SearchItemsByUser(r)
        fmt.Fprintf(w, ""%s"", result.Params)
</code></pre>
","<p>An interface variable can be used to store any value that conforms to the interface, and call methods that art part of that interface.  Note that you won't be able to access fields on the underlying value through an interface variable.</p>

<p>In this case, your <code>SearchItemsByUser</code> method returns an <code>interface{}</code> value (i.e. the empty interface), which can hold any value but doesn't provide any direct access to that value.  You can extract the dynamic value held by the interface variable through a type assertion, like so:</p>

<pre><code>dynamic_value := interface_variable.(typename)
</code></pre>

<p>Except that in this case, the type of the dynamic value is private to your SearchItemsByUser method.  I would suggest making two changes to your code:</p>

<ol>
<li><p>Define your <code>results</code> type at the top level, rather than within the method body.</p></li>
<li><p>Make <code>SearchItemsByUser</code> directly return a value of the <code>results</code> type instead of <code>interface{}</code>.</p></li>
</ol>
","21796240"
"What language is the Go programming language written in?","10724","","<p>I think the title is self explanatory.</p>
","<p>Programming languages aren't programs, hence they're not ""written"" in any language. They are often described by formal grammars (e.g. BNF).</p>

<p>Interpreters and compilers for programming languages <em>are</em> programs and so must be written in some kind of programming language.</p>

<p>Go has at least two compilers, <a href=""http://golang.org/doc/install.html"" rel=""noreferrer""><code>gc</code></a> and <a href=""http://golang.org/doc/gccgo_install.html"" rel=""noreferrer""><code>gccgo</code></a>. The former was written in C, but is now written in Go itself. While the latter is a gcc frontend written mainly in C++. Go's libraries are written in Go.</p>
","3327703"
"Go Tour Exercise: Equivalent Binary Trees","10704","","<p>I am trying to solve <a href=""http://tour.golang.org/#69"" rel=""noreferrer"">equivalent binary trees</a> exercise on go tour. Here is what I did;</p>

<pre><code>package main

import ""tour/tree""
import ""fmt""

// Walk walks the tree t sending all values
// from the tree to the channel ch.
func WalkRecurse(t *tree.Tree, ch chan int) {
    if t.Left != nil {
        Walk(t.Left, ch)
    }
    ch &lt;- t.Value
    if t.Right != nil {
        Walk(t.Right,ch)
    }

}

func Walk(t *tree.Tree, ch chan int) {
    WalkRecurse(t, ch)
    close(ch)
}

// Same determines whether the trees
// t1 and t2 contain the same values.
func Same(t1, t2 *tree.Tree) bool {
    ch1 := make(chan int)
    ch2 := make(chan int)
    go Walk(t1, ch1)
    go Walk(t2, ch2)
    for k := range ch1{
        select {
        case g := &lt;-ch2:
            if k != g {
                return false
            }
        default:
            break
        }
    }
    return true
}

func main() {
    fmt.Println(Same(tree.New(1), tree.New(1)))
    fmt.Println(Same(tree.New(1), tree.New(2)))
}
</code></pre>

<p>However, I couldn't find out how to signal if any no more elements left in trees. I can't use <code>close(ch)</code> on <code>Walk()</code> because it makes the channel close before all values are sent (because of recursion.) Can anyone lend me a hand here?</p>
","<p>You could use close() if your Walk function doesn't recurse on itself. i.e.  Walk would just do: </p>

<pre><code>func Walk(t *tree.Tree, ch chan int) {
   walkRecurse(t, ch)
   close(ch)
}
</code></pre>

<p>Where walkRecurseis more or less your current Walk function, but recursing on walkRecurse.
(or you rewrite Walk to be iterative - which, granted, is more hazzle)
With this approach, your Same() function have to learn that the channels was <a href=""http://golang.org/pkg/builtin/#close"">closed</a>, which is done with the channel receive of the form</p>

<pre><code>k,ok1 := &lt;-ch
g,ok2 := &lt;-ch
</code></pre>

<p>And take proper action when <code>ok1</code> and <code>ok2</code> are different, or when they're both <code>false</code></p>

<p>Another way, but probably not in the spirit of the exercise, is to count the number of nodes in the tree:</p>

<pre><code>func Same(t1, t2 *tree.Tree) bool {
    countT1 := countTreeNodes(t1)
    countT2 := countTreeNodes(t2)
    if countT1!= countT2 {
       return false
    }
    ch1:=make(chan int)
    ch2:=make(chan int)
    go Walk(t1, ch1)
    go Walk(t2, ch2)
    for i:=0; i&lt;countT1; i++ {
        if &lt;-ch1 != &lt;-ch2 {
            return false
        }
    }

    return true
}  
</code></pre>

<p>You'l have to implement the countTreeNodes()function, which should count the number of nodes in a *Tree</p>
","12224111"
"What does the '.' (dot or period) in a Go import statement do?","10677","","<p>In the Go tutorial, and most of the Go code I've looked at, packages are imported like this:</p>

<pre><code>import (
    ""fmt""
    ""os""
    ""launchpad.net/lpad""
    ...
)
</code></pre>

<p>But in <a href=""http://bazaar.launchpad.net/~niemeyer/lpad/trunk/view/head:/session_test.go"">http://bazaar.launchpad.net/~niemeyer/lpad/trunk/view/head:/session_test.go</a>, the gocheck package is imported with a <code>.</code> (period):</p>

<pre><code>import (
    ""http""
    . ""launchpad.net/gocheck""
    ""launchpad.net/lpad""
    ""os""    
)
</code></pre>

<p>What is the significance of the <code>.</code> (period)?</p>
","<p>It allows the identifiers in the imported package to be referred to in the local file block without a qualifier.</p>

<blockquote>
  <p>If an explicit period (.) appears instead of a name, all the package's exported identifiers will be declared in the current file's file block and can be accessed without a qualifier.</p>
  
  <p>Assume we have compiled a package containing the package clause package math, which exports function Sin, and installed the compiled package in the file identified by ""lib/math"". This table illustrates how Sin may be accessed in files that import the package after the various types of import declaration.</p>
</blockquote>

<pre><code>Import declaration          Local name of Sin

import   ""lib/math""         math.Sin
import M ""lib/math""         M.Sin
import . ""lib/math""         Sin
</code></pre>

<p>Ref: <a href=""http://golang.org/doc/go_spec.html#Import_declarations"">http://golang.org/doc/go_spec.html#Import_declarations</a></p>
","6478990"
"Unmarshal Json data in a specific struct in Go","10666","","<p>I want to unmarshal the following JSON data in Golang:</p>

<pre><code>b := []byte(`{""Asks"": [[21, 1], [22, 1]] ,""Bids"": [[20, 1], [19, 1]]}`)
</code></pre>

<p>I know how to do that, i define a struct like this:</p>

<pre><code>type Message struct {
    Asks [][]float64 `json:""Bids""`
    Bids [][]float64 `json:""Asks""`
}
</code></pre>

<p>What i don't know is if there is a simple way to specialize
this a bit more.
I would like to have the data after the unmarshaling in a format like this:</p>

<pre><code>type Message struct {
    Asks []Order `json:""Bids""`
    Bids []Order `json:""Asks""`
}

type Order struct {
    Price float64
    Volume float64
}
</code></pre>

<p>So that i can use it later after unmarshaling like this:</p>

<pre><code>m := new(Message)
err := json.Unmarshal(b, &amp;m)
fmt.Println(m.Asks[0].Price)
</code></pre>

<p>I don't really know how to easy or idiomatically do that in GO
so I hope that there is a nice solution for that.</p>
","<p>You can do this with by implementing the <a href=""http://golang.org/pkg/encoding/json/#Unmarshaler"" rel=""noreferrer""><code>json.Unmarshaler</code> interface</a> on your <code>Order</code> struct.  Something like this should do:</p>

<pre><code>func (o *Order) UnmarshalJSON(data []byte) error {
    var v [2]float64
    if err := json.Unmarshal(data, &amp;v); err != nil {
        return err
    }
    o.Price = v[0]
    o.Volume = v[1]
    return nil
}
</code></pre>

<p>This basically says that the <code>Order</code> type should be decoded from a 2 element array of floats rather than the default representation for a struct (an object).</p>

<p>You can play around with this example here: <a href=""http://play.golang.org/p/B35Of8H1e6"" rel=""noreferrer"">http://play.golang.org/p/B35Of8H1e6</a></p>
","26511766"
"How do I handle plain text HTTP Get response in Golang?","10643","","<p>I am making an HTTP GET to an endpoint that returns a response that has a plain text response.</p>

<p>How do I grab the string of the plain text response?</p>

<p>My code looks like the following</p>

<pre><code>    url := ""http://someurl.com""
    response,err := http.Get(url)
    if err != nil {
        log.Fatal(err)
    }
    defer response.Body.Close()

    responseString := //NOT SURE HOW TO GRAB THE PLAIN TEXT STRING
</code></pre>
","<p>Response of the body can be read using any method that could read data from incoming byte stream. Simplest of them is ReadAll function provided in ioutil package.</p>

<pre><code>responseData,err := ioutil.ReadAll(response.Body)
if err != nil {
    log.Fatal(err)
}
</code></pre>

<p>It will give you API response in []byte. If response is plain text you can easily convert it into string using type conversion:</p>

<pre><code>responseString := string(responseData)
</code></pre>

<p>And Check the result </p>

<pre><code>fmt.Println(responseString)
</code></pre>

<p><strong>Sample Program:</strong></p>

<pre><code>package main

import (
    ""fmt""
    ""io/ioutil""
    ""log""
    ""net/http""
)

func main() {
    url := ""http://country.io/capital.json""
    response, err := http.Get(url)
    if err != nil {
        log.Fatal(err)
    }
    defer response.Body.Close()

    responseData, err := ioutil.ReadAll(response.Body)
    if err != nil {
        log.Fatal(err)
    }

    responseString := string(responseData)

    fmt.Println(responseString)
}
</code></pre>
","38807963"
"Is it possible to include inline assembly in Google Go code?","10629","","<p>Is it possible to include inline assembly in Google Go code?</p>
","<p>There is no support for inline assembly, but you can link with code written in assembly through C, compiling with cgo and using <code>import ""C""</code>, like in <a href=""http://code.google.com/p/go/source/browse/misc/cgo/gmp/gmp.go?r=release"" rel=""noreferrer"">gmp.go</a>. You could alternatively write in a style of assembly that is directly compatible with Go, like in <a href=""http://golang.org/src/pkg/syscall/asm_linux_amd64.s"" rel=""noreferrer"">asm_linux_amd64.s</a>, that requires that function names start with ""·"".</p>

<p>Or, you can use nasm and gccgo, my favorite way so far. (Note that Nasm does not seem to support functions starting with ""·"").</p>

<p>Here's a working ""hello world"" example:</p>

<p>hello.asm:</p>

<pre><code>; Based on hello.asm from nasm

    SECTION .data       ; data section
msg:    db ""Hello World"",10 ; the string to print, 10=cr
len:    equ $-msg       ; ""$"" means ""here""
                ; len is a value, not an address

    SECTION .text       ; code section

global go.main.hello        ; make label available to linker (Go)
go.main.hello:

    ; --- setup stack frame
    push rbp            ; save old base pointer
    mov rbp,rsp   ; use stack pointer as new base pointer

    ; --- print message
    mov edx,len     ; arg3, length of string to print
    mov ecx,msg     ; arg2, pointer to string
    mov ebx,1       ; arg1, where to write, screen
    mov eax,4       ; write sysout command to int 80 hex
    int 0x80        ; interrupt 80 hex, call kernel

    ; --- takedown stack frame
    mov rsp,rbp  ; use base pointer as new stack pointer
    pop rbp      ; get the old base pointer

    ; --- return
    mov rax,0       ; error code 0, normal, no error
    ret         ; return
</code></pre>

<p>main.go:</p>

<pre><code>package main

func hello();

func main() {
    hello()
    hello()
}
</code></pre>

<p>And a handy Makefile:</p>

<pre><code>main: main.go hello.o
    gccgo hello.o main.go -o main

hello.o: hello.asm
    nasm -f elf64 -o hello.o hello.asm

clean:
    rm -rf _obj *.o *~ *.6 *.gch a.out main
</code></pre>

<p>I call <code>hello()</code> twice in main.go, just to double check that hello() returns properly.</p>

<p>Note that calling interrupt 80h directly is not considered good style on Linux, and calling functions written is C is more ""future proof"". Also note that this is assembly specifically for 64-bit Linux, and is not platform-independent in any way, shape or form.</p>

<p>I know it's not a direct answer to your question, but it's the easiest route I know for using assembly with Go, in lack of inlining. If you really need inlining, it's possible to write a script that extracts inline assembly from source files and prepares it in a way that follows the pattern above. Close enough? :)</p>

<p>Quick example for Go, C and Nasm: <a href=""http://roboticoverlords.org/gonasm/gonasm.tgz"" rel=""noreferrer"">gonasm.tgz</a></p>

<p><strong>Update:</strong> Later versions of gccgo needs the -g flag and only ""main.hello"" is needed instead of ""go.main.hello"". Here is an updated example for Go, C and Yasm: <a href=""http://roboticoverlords.org/gonasm/goyasm.tgz"" rel=""noreferrer"">goyasm.tgz</a></p>
","6535590"
"Golang how to open a remote mysql connection?","10622","","<p>I'm trying to connect to remote mysql database using go and the database/sql package.
I find the go/mysql documentation confusing. It seems there is no single example how to connect to a remote host. Like everyone would use localhost.
So far I have this </p>

<pre><code>   import (
        ""database/sql""
        _ ""github.com/ziutek/mymysql/godrv""    
        db, err := sql.Open(""mymysql"", ""tcp:""+dbHost*dbName+""/""+user+""/""+pass)
        defer db.Close()
</code></pre>

<p>Based on the docs from <a href=""https://github.com/ziutek/mymysql"">https://github.com/ziutek/mymysql</a> </p>

<pre><code>[PROTOCOL_SPECFIIC*]DBNAME/USER/PASSWD
//
// where protocol specific part may be empty (this means connection to
// local server using default protocol). Currently possible forms:
//   DBNAME/USER/PASSWD
//   unix:SOCKPATH*DBNAME/USER/PASSWD
//   unix:SOCKPATH,OPTIONS*DBNAME/USER/PASSWD
//   tcp:ADDR*DBNAME/USER/PASSWD
//   tcp:ADDR,OPTIONS*DBNAME/USER/PASSWD
</code></pre>

<p>I also tried</p>

<pre><code> db, err := sql.Open(""mymysql"", ""tcp:""+dbHost, dbName+""/""+user+""/""+pass) 
</code></pre>

<p>and it's not working either. The whole syntax seems cryptic.</p>
","<p>These sites are both really helpful in understanding Go SQL: <a href=""https://github.com/go-sql-driver/mysql/"" rel=""noreferrer"">https://github.com/go-sql-driver/mysql/</a> (even if you are using a different driver) and <a href=""http://go-database-sql.org/"" rel=""noreferrer"">http://go-database-sql.org/</a></p>

<p>There are a few things that might help:</p>

<ol>
<li>The connection string for <code>sql.Open()</code> is in DSN format.  <code>db, err := sql.Open(""mysql"", ""&lt;username&gt;:&lt;pw&gt;@tcp(&lt;HOST&gt;:&lt;port&gt;)/&lt;dbname&gt;"")</code> works for me for my connections.  Check the use of parenthesis for TCP connections.</li>
<li>The driver you are using has the command <code>mysql.New()</code> which can open connections using the format you've listed above: <code>db := mysql.New(proto, """", addr, user, pass, dbname)</code> (see <a href=""https://github.com/ziutek/mymysql/blob/master/examples/simple.go"" rel=""noreferrer"">https://github.com/ziutek/mymysql/blob/master/examples/simple.go</a>)</li>
<li>Confusingly, <code>sql.Open</code> doesn't actually open a connection, it just creates a db resource. You can verify that it's working by running <code>db.Ping()</code></li>
</ol>
","23550874"
"golang plugin on notepad++","10609","","<p>did someone try using golang (go programming language) plugin for Notepad++?</p>

<p>I tried the instructions published at below url, but it did not work for me. just wondering if it worked for anyone.
<a href=""http://go-lang.cat-v.org/text-editors/notepad-plus-plus/"">http://go-lang.cat-v.org/text-editors/notepad-plus-plus/</a></p>
","<p>For newer version of Notepad++
Go to Language -> Define your language -> Import. Import userDefineLanguage file and restart Notepad++.
<a href=""https://gist.github.com/blinksmith/99e5234ea601af8ba8bfab35c8fbebef"" rel=""noreferrer"" title=""Golang udl on gist github"">view Go.NPP.udl.xml on gist github</a> this file using default color that always comes with npp.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://gist.github.com/blinksmith/99e5234ea601af8ba8bfab35c8fbebef.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
","36329825"
"Go interactive shell","10581","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/8513609/does-go-provide-repl"">Does Go provide REPL?</a>  </p>
</blockquote>



<p>Does anyone know if there is an REPL (interactive go shell, similar to irb) available for go which allows the user to use import statements? I'd like to be able to do something like this:</p>

<pre><code>$igo import ( 
             ""log""
             ""mypackage/pkg""
            )
log.Print(""hello, world!"")
pkg.Print(""Hello"")
...
</code></pre>

<p>I've tried igo but that doesn't seem to support this yet.</p>
","<p>There is <a href=""https://github.com/sbinet/go-eval""><code>go-eval</code></a> from the same author as <code>igo</code>.</p>

<p>It's an improvement on the old <code>exp/eval</code> package.</p>

<p>However, I was not able to import packages due to missing symbols, which is probably the reason for <code>igo</code> not supporting the <code>import</code> statement.</p>

<p>It's probably the best to go with compile/execute software as seen on play.golang.org.</p>
","12628898"
"Replace all spaces in a string with +","10561","","<p>I have a string and I want to replace every space in this string with a + I tired this by using:</p>

<pre><code>tw.Text = strings.Replace(tw.Text, "" "", ""+"", 1)
</code></pre>

<p>But that didn't worked for me...any solutions?</p>

<p>For example the string could look like:</p>

<pre><code>The answer of the universe is 42
</code></pre>
","<p>from the Go documentation: <a href=""http://golang.org/pkg/strings/#Replace"" rel=""noreferrer"">func Replace</a></p>

<blockquote>
  <p>If n &lt; 0, there is no limit on the number of replacements.</p>
</blockquote>

<p>try</p>

<pre><code>strings.Replace(tw.Text, "" "", ""+"", -1)
</code></pre>
","8689281"
"How to have a global variable accessible across all packages in golang","10560","","<p>I have a main.go file which has:</p>

<pre><code>// running the router in port 9000
func main() {
    router,Global := routers.InitApp()
    fmt.println(Global)
    router.RunTLS("":9000"" , ""domain.crt"" , ""domain.key"")
}
</code></pre>

<p>In router.InitMap I want to declare a global variable which can be accessed throughout my application anywhere. Is is possible? I tried</p>

<pre><code>func InitApp() (*gin.Engine,string) {
        var Global= ""myvalue""           
        router := gin.New()
        return router,Global


}
</code></pre>

<p>But I can's access the variable <code>Global</code> even in the same package.</p>
","<p>declare a variable at the top level - outside of any functions:</p>

<pre><code>var Global = ""myvalue""

func InitApp() (string) {
        var Global= ""myvalue""
        return Global

}
</code></pre>

<p>Since the name of the variable starts with an uppercase letter, the variable will be available both in the current package through its name - and in any other package when you import the package defining the variable and qualify it with the package name as in: <code>return packagename.Global</code>.</p>

<p>Here's another illustration (also in the Go playground: <a href=""https://play.golang.org/p/h2iVjM6Fpk"" rel=""noreferrer"">https://play.golang.org/p/h2iVjM6Fpk</a>):</p>

<pre><code>package main

import (
    ""fmt""
)

var greeting = ""Hello, world!""

func main() {
    fmt.Println(greeting)
}
</code></pre>

<p>See also Go Tour: ""Variables"" <a href=""https://tour.golang.org/basics/8"" rel=""noreferrer"">https://tour.golang.org/basics/8</a> and ""Exported names"" <a href=""https://tour.golang.org/basics/3"" rel=""noreferrer"">https://tour.golang.org/basics/3</a>.</p>
","38655908"
"golang using timeouts with channels","10550","","<p>I am using goroutines/channels to check if list of urls are reachable. Here is my code. This seems to always return true. Why is the timeout case not getting executed? The goal is to return false even if one of the urls is not reachable</p>

<pre><code>import ""fmt""
import ""time""

func check(u string) bool {
    time.Sleep(4 * time.Second)
    return true
}

func IsReachable(urls []string) bool {

    ch := make(chan bool, 1)
    for _, url := range urls {
        go func(u string) {
            select {
            case ch &lt;- check(u):
            case &lt;-time.After(time.Second):
                ch&lt;-false
            }
        }(url)
    }
    return &lt;-ch
}
func main() {
    fmt.Println(IsReachable([]string{""url1""}))
}
</code></pre>
","<p><code>check(u)</code> will sleep in the <em>current</em> goroutine, i.e. the one that's running <code>func</code>. The <code>select</code> statement is only run properly once it returns, and by that time, both branches are runnable and the runtime can pick whichever one it pleases.</p>

<p>You can solve it by running <code>check</code> inside yet another goroutine:</p>

<pre><code>package main

import ""fmt""
import ""time""

func check(u string, checked chan&lt;- bool) {
    time.Sleep(4 * time.Second)
    checked &lt;- true
}

func IsReachable(urls []string) bool {

    ch := make(chan bool, 1)
    for _, url := range urls {
        go func(u string) {
            checked := make(chan bool)
            go check(u, checked)
            select {
            case ret := &lt;-checked:
                ch &lt;- ret
            case &lt;-time.After(1 * time.Second):
                ch &lt;- false
            }
        }(url)
    }
    return &lt;-ch
}
func main() {
    fmt.Println(IsReachable([]string{""url1""}))
}
</code></pre>

<p>It seems you want to check reachability of a set of URLs, and return true if one of them is available. If the timeout is long compared to the time it takes to spin up a goroutine, you could simplify this by having just one timeout for all URLs together. But we need to make sure that the channel is large enough to hold the answers from all checks, or the ones that don't ""win"" will block forever:</p>

<pre><code>package main

import ""fmt""
import ""time""

func check(u string, ch chan&lt;- bool) {
    time.Sleep(4 * time.Second)
    ch &lt;- true
}

func IsReachable(urls []string) bool {
    ch := make(chan bool, len(urls))
    for _, url := range urls {
        go check(url, ch)
    }
    time.AfterFunc(time.Second, func() { ch &lt;- false })
    return &lt;-ch
}
func main() {
    fmt.Println(IsReachable([]string{""url1"", ""url2""}))
}
</code></pre>
","23582452"
"Golang basics struct and new() keyword","10519","","<p>I was learning golang, and as I was going through the chapter that describes Structures, I came across different ways to initialize structures. </p>

<pre><code>p1 := passport{}
var p2 passport
p3 := passport{
    Photo: make([]byte, 0, 0),
    Name: ""Scott"",
    Surname: ""Adam"",
    DateOfBirth: ""Some time"",
}

fmt.Printf(""%s\n%s\n%s\n"", p1, p2, p3)
</code></pre>

<p>While these print the values of the structures as</p>

<p><code>{   }
{   }
{ Scott Adam Some time}</code>
, the following code below prints with an ampersand because it is a reference.</p>

<pre><code>pointerp1 := &amp;p3
fmt.Printf(""%s"", pointerp1)
pointerp2 := new(passport)
pointerp2.Name = ""Anotherscott""
fmt.Printf(""%s"", pointerp2)
</code></pre>

<p><code>&amp;{ Scott Adam Some time}&amp;{ Anotherscott  }</code></p>

<p>Kindly help me with my doubts.</p>

<ol>
<li><p>in the usage <code>pointerp1 := &amp;p3</code>, <code>pointerp1</code> is the reference variable to <code>p3</code>, which holds the actual data. Similarly, what would be the actual variable that holds the data for <code>pointerp2</code>?</p></li>
<li><p>What would be the best scenarios to use these different types of initialization?</p></li>
</ol>
","<p><code>new</code> allocates zeroed storage for a new item or type whatever and then returns a pointer to it. I don't think it really matters on if you use <code>new</code> vs short variable declaration <code>:= type{}</code> it's mostly just preference</p>

<p>As for <code>pointer2</code>, the <code>pointer2</code> variable holds its own data, when you do </p>

<pre><code>// initializing a zeroed 'passport in memory'
pointerp2 := new(passport)
// setting the field Name to whatever
pointerp2.Name = ""Anotherscott""
</code></pre>

<p><code>new</code> allocates zeroed storage in memory and returns a pointer to it, so in short, new will return a pointer to whatever you're making that is why <code>pointerp2</code> returns <code>&amp;{ Anotherscott }</code></p>

<p>You mainly want to use pointers when you're passing a variable around that you need to modify (but be careful of data races use mutexes or channels If you need to read and write to a variable from different functions)</p>

<p>A common method people use instead of <code>new</code> is just short dec a pointer type:</p>

<p><code>blah := &amp;passport{}</code></p>

<p>blah is now a pointer to type passport</p>

<p>You can see in this playground:</p>

<p><a href=""http://play.golang.org/p/9OuM2Kqncq"" rel=""noreferrer"">http://play.golang.org/p/9OuM2Kqncq</a></p>

<p>When passing a pointer, you can modify the original value. When passing a non pointer you can't modify it. That is because in go variables are passed as a copy. So in the <code>iDontTakeAPointer</code> function it is receiving a copy of the tester struct then modifying the name field and then returning, which does nothing for us as it is modifying the copy and not the original. </p>
","34543716"
"Go, X does not implement Y (... method has a pointer receiver)","10492","","<p>There are already several Q&amp;As on this ""<em>X does not implement Y (... method has a pointer receiver)</em>"" thing, but to me, they seems to be talking about different things, and not applying to my specific case.</p>

<p>So, instead of making the question very specific, I'm making it broad and abstract -- Seems like there are several different cases that can make this error happen, can someone summary it up please?</p>

<p>I.e., how to avoid the problem, and if it occurs, what are the possibilities? Thx.</p>
","<p>This compile-time error arises when you try to assign or pass (or convert) a <em>concrete</em> type to an interface type; and the type itself does not implement the interface, only a <em>pointer to the type</em>.</p>

<p>Let's see an example:</p>

<pre><code>type Stringer interface {
    String() string
}

type MyType struct {
    value string
}

func (m *MyType) String() string { return m.value }
</code></pre>

<p>The <code>Stringer</code> interface type has one method only: <code>String()</code>. Any value that is stored in an interface value <code>Stringer</code> must have this method. We also created a <code>MyType</code>, and we created a method <code>MyType.String()</code> with <strong>pointer</strong> receiver. This means the <code>String()</code> method is in the <a href=""https://golang.org/ref/spec#Method_sets"" rel=""noreferrer"">method set</a> of the <code>*MyType</code> type, but not in that of <code>MyType</code>.</p>

<p>When we attempt to assign a value of <code>MyType</code> to a variable of type <code>Stringer</code>, we get the error in question:</p>

<pre><code>m := MyType{value: ""something""}

var s Stringer
s = m // cannot use m (type MyType) as type Stringer in assignment:
      //   MyType does not implement Stringer (String method has pointer receiver)
</code></pre>

<p>But everything is ok if we try to assign a value of type <code>*MyType</code> to <code>Stringer</code>:</p>

<pre><code>s = &amp;m
fmt.Println(s)
</code></pre>

<p>And we get the expected outcome (try it on the <a href=""https://play.golang.org/p/TSaT30PRD0"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>something
</code></pre>

<p><strong>So the requirements to get this compile-time error:</strong></p>

<ul>
<li>A value of <em>non-pointer</em> concrete type being assigned (or passed or converted)</li>
<li>An interface type being assigned to (or passed to, or converted to)</li>
<li>The concrete type has the required method of the interface, but with a <em>pointer receiver</em></li>
</ul>

<p><strong>Possibilities to resolve the issue:</strong></p>

<ul>
<li>A pointer to the value must be used, whose method set will include the method with the pointer receiver</li>
<li>Or the receiver type must be changed to <em>non-pointer</em>, so the method set of the non-pointer concrete type will also contain the method (and thus satisfy the interface). This may or may not be viable, as if the method has to modify the value, a non-pointer receiver is not an option.</li>
</ul>

<h3>Structs and embedding</h3>

<p>When using <a href=""https://golang.org/ref/spec#Struct_types"" rel=""noreferrer"">structs and embedding</a>, often it's not ""you"" that implement an interface (provide a method implementation), but a type you embed in your <code>struct</code>. Like in this example:</p>

<pre><code>type MyType2 struct {
    MyType
}

m := MyType{value: ""something""}
m2 := MyType2{MyType: m}

var s Stringer
s = m2 // Compile-time error again
</code></pre>

<p>Again, compile-time error, because the method set of <code>MyType2</code> does not contain the <code>String()</code> method of the embedded <code>MyType</code>, only the method set of <code>*MyType2</code>, so the following works (try it on the <a href=""https://play.golang.org/p/3MuyevNpL8"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>var s Stringer
s = &amp;m2
</code></pre>

<p>We can also make it work, if we embed <code>*MyType</code> and using only a <em>non-pointer</em> <code>MyType2</code> (try it on the <a href=""https://play.golang.org/p/BMG5EctMVa"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>type MyType2 struct {
    *MyType
}

m := MyType{value: ""something""}
m2 := MyType2{MyType: &amp;m}

var s Stringer
s = m2
</code></pre>

<p>Also, whatever we embed (either <code>MyType</code> or <code>*MyType</code>), if we use a pointer <code>*MyType2</code>, it will always work (try it on the <a href=""https://play.golang.org/p/3MuyevNpL8"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>type MyType2 struct {
    *MyType
}

m := MyType{value: ""something""}
m2 := MyType2{MyType: &amp;m}

var s Stringer
s = &amp;m2
</code></pre>

<p>Relevant section from the spec (from section <a href=""https://golang.org/ref/spec#Struct_types"" rel=""noreferrer"">Struct types</a>):</p>

<blockquote>
  <p>Given a struct type <code>S</code> and a type named <code>T</code>, promoted methods are included in the method set of the struct as follows:</p>
  
  <ul>
  <li>If <code>S</code> contains an anonymous field <code>T</code>, the method sets of <code>S</code> and <code>*S</code> both include promoted methods with receiver <code>T</code>. The method set of <code>*S</code> also includes promoted methods with receiver <code>*T</code>.</li>
  <li>If <code>S</code> contains an anonymous field <code>*T</code>, the method sets of <code>S</code> and <code>*S</code> both include promoted methods with receiver <code>T</code> or <code>*T</code>.</li>
  </ul>
</blockquote>

<p>So in other words: if we embed a non-pointer type, the method set of the non-pointer embedder only gets the methods with non-pointer receivers (from the embedded type).</p>

<p>If we embed a pointer type, the method set of the non-pointer embedder gets methods with both pointer and non-pointer receivers (from the embedded type).</p>

<p>If we use a pointer value to the embedder, regardless of whether the embedded type is pointer or not, the method set of the pointer to the embedder always gets methods with both the pointer and non-pointer receivers (from the embedded type).</p>

<p><strong>Note:</strong></p>

<p>There is a very similar case, namely when you have an interface value which wraps a value of <code>MyType</code>, and you try to <a href=""https://golang.org/ref/spec#Type_assertions"" rel=""noreferrer"">type assert</a> another interface value from it, <code>Stringer</code>. In this case the assertion will not hold for the reasons described above, but we get a slightly different runtime-error:</p>

<pre><code>m := MyType{value: ""something""}

var i interface{} = m
fmt.Println(i.(Stringer))
</code></pre>

<p>Runtime panic (try it on the <a href=""https://play.golang.org/p/Mos344EWbH"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>panic: interface conversion: main.MyType is not main.Stringer:
    missing method String
</code></pre>

<p>Attempting to convert instead of type assert, we get the compile-time error we're talking about:</p>

<pre><code>m := MyType{value: ""something""}

fmt.Println(Stringer(m))
</code></pre>
","40824044"
"How to cast to a type alias in Go?","10487","","<p>See <strong><a href=""http://play.golang.org/p/RynMln1E7c"">this playground snippet</a></strong>.</p>

<p>Relevant code:</p>

<pre><code>type somethingFuncy func(int) bool

func funcy(i int) bool {
    return i%2 == 0
}

var a interface{} = funcy

func main() {

    _ = a.(func(int) bool)  // Works

    fmt.Println(""Awesome -- apparently, literally specifying the func signature works."")

    _ = a.(somethingFuncy)  // Panics

    fmt.Println(""Darn -- doesn't get here. But somethingFuncy is the same signature as func(int) bool."")
}
</code></pre>

<p>The first cast works, by explicitly declaring the type. But the second cast panics. Why? Is there a clean way to cast to a longer func signature?</p>
","<h3>tl;dr</h3>

<p>For type assertions (which you use) only the actual type matters. So <code>somethingFuncy</code> is only equal to <code>somethingFuncy</code> and not to <code>func(int) bool</code>.</p>

<h3>Explanation</h3>

<p>To start with, this has nothing to do with casting. There is no casting in go.
There are <a href=""http://golang.org/ref/spec#Type_assertions"" rel=""noreferrer"">type assertions</a> and <a href=""http://golang.org/ref/spec#Conversions"" rel=""noreferrer"">type conversions</a>.</p>

<p>You're dealing with a type assertion and are assuming that the same conditions hold
as for type <strong>conversions</strong>. I made the same mistake while reading your question but actually there is a huge difference in behaviour.</p>

<p>Suppose you have two types, say <code>int</code> and <code>type MyInt int</code>. These are convertible as they both
share the same underlying type (one of the conversion rules), so this works (<a href=""http://play.golang.org/p/aCTamybRQ4"" rel=""noreferrer"">play</a>):</p>

<pre><code>var a int = 10
var b MyInt = MyInt(a)
</code></pre>

<p>Now, suppose <code>a</code> is not of type <code>int</code> but of type <code>interface{}</code> (<a href=""http://play.golang.org/p/Ww-yV3l3mX"" rel=""noreferrer"">play</a>):</p>

<pre><code>var a interface{} = int(10)
var b MyInt = MyInt(a)
</code></pre>

<p>The compiler will tell you:</p>

<blockquote>
  <p>cannot convert a (type interface {}) to type MyInt: need type assertion</p>
</blockquote>

<p>So now we're not doing <em>conversions</em> anymore but <em>assertions</em>. We need to do this (<a href=""http://play.golang.org/p/cM_mCzaQ9S"" rel=""noreferrer"">play</a>):</p>

<pre><code>var a interface{} = int(10)
var b MyInt = a.(MyInt)
</code></pre>

<p>Now we have the same problem as in your question. This assertion fails with this panic:</p>

<blockquote>
  <p>panic: interface conversion: interface is int, not main.MyInt</p>
</blockquote>

<p>The reason for this is stated in the <a href=""http://golang.org/ref/spec#Type_assertions"" rel=""noreferrer"">type assertions section</a> of the spec:</p>

<blockquote>
  <p>For an expression x of interface type and a type <code>T</code>, the primary expression <code>x.(T)</code>
  asserts that <code>x</code> is not <code>nil</code> and that the value stored in <code>x</code> is of type <code>T</code>. The notation 
  <code>x.(T)</code> is called a type assertion.
  <strong>More precisely, if <code>T</code> is not an interface type, <code>x.(T)</code> asserts that the dynamic 
  type of <code>x</code> is identical to the type <code>T</code></strong>.</p>
</blockquote>

<p>So <code>int</code> must be identical to <code>MyInt</code>. The rules of <a href=""http://golang.org/ref/spec#Type_identity"" rel=""noreferrer"">type identity</a> state that 
(amongst other rules):</p>

<blockquote>
  <p>Two named types are identical if their type names originate in the same TypeSpec.</p>
</blockquote>

<p>As <code>int</code> and <code>MyInt</code> have different declarations (<a href=""http://golang.org/ref/spec#Type_declarations"" rel=""noreferrer"">TypeSpecs</a>) they're not equal
and the assertion fails. When you assert <code>a</code> to <code>int</code>, the assertion works.
So what you're doing is not possible.</p>

<h3>Bonus:</h3>

<p>The actual check happens <a href=""http://code.google.com/p/go/source/browse/src/pkg/runtime/iface.c?name=go1.1.2#312"" rel=""noreferrer"">in this code</a>, which simply checks if both types are
the same, as expected.</p>
","19579058"
"Define a new type of time in golang","10457","","<p>I want to have a struct like this:</p>

<pre><code>type Person struct {
    Name string
    DateJoined time
}
</code></pre>

<p>The struct above will not compile because there is no type ""time"". Or is there?</p>

<p>Or should I just simply use a type string and put the time/date info in that instead?</p>

<p>Thank you.</p>
","<p><code>time</code> isn't a type. <code>time.Time</code> is. See the package docs for the types: <a href=""http://golang.org/pkg/time/"">http://golang.org/pkg/time/</a></p>

<pre><code>import time

type Person struct {
    Name string
    DateJoined time.Time
}
</code></pre>
","22138005"
"error connecting to database with mysqldriver","10437","","<p>I'm trying to follow the instructions here <a href=""https://github.com/go-sql-driver/mysql#installation"">https://github.com/go-sql-driver/mysql#installation</a> and <a href=""http://go-database-sql.org/accessing.html"">http://go-database-sql.org/accessing.html</a> to create a sql.db.</p>

<p>The first line of my code has this</p>

<pre><code>db, err := sql.Open(""mysql"", ""username@localhost/my_db"")
</code></pre>

<p>When I ran the program on the terminal, I got this:</p>

<pre><code>Default addr for network ''localhost'' unknown
</code></pre>

<p>Why is this? When I checked the user and host to mysql it states 'username' and 'localhost'. I followed the parameters like this:</p>

<pre><code>[username[:password]@][protocol[(address)]]/dbname[?param1=value1&amp;...&amp;paramN=valueN]
</code></pre>
","<p>You might want to specify the protocol (like '<code>tcp</code>'), instead of <code>localhost</code> directly.<br>
See <a href=""https://github.com/go-sql-driver/mysql#examples"" rel=""noreferrer"">those examples</a>:</p>

<pre><code>user:password@tcp(localhost:5555)/dbname
</code></pre>

<p>In your case:</p>

<pre><code>username@tcp(localhost)/my_db
</code></pre>

<hr>

<p>Note, if you use the default protocol (<code>tcp</code>) and host (<code>localhost:3306</code>), this could be rewritten as</p>

<pre><code>user:password@/dbname
</code></pre>
","25244131"
"What is the correct way to find the min between two integers in Go?","10423","","<p>I imported the math library in my program, and I was trying to find the minimum of three numbers in the following way:</p>

<p><code>v1[j+1] = math.Min(v1[j]+1, math.Min(v0[j+1]+1, v0[j]+cost))</code></p>

<p>where v1 is declared as:</p>

<pre><code>t := ""stackoverflow""
v1 := make([]int, len(t)+1)
</code></pre>

<p>However, when I run my program I get the following error:</p>

<pre><code>./levenshtein_distance.go:36: cannot use int(v0[j + 1] + 1) (type int) as type float64 in argument to math.Min
</code></pre>

<p>I thought it was weird because I have another program where I write</p>

<p><code>fmt.Println(math.Min(2,3))</code></p>

<p>and that program outputs <code>2</code> without complaining.</p>

<p>so I ended up casting the values as float64, so that <code>math.Min</code> could work:</p>

<pre><code>v1[j+1] = math.Min(float64(v1[j]+1), math.Min(float64(v0[j+1]+1), float64(v0[j]+cost)))
</code></pre>

<p>With this approach, I got the following error:</p>

<pre><code>./levenshtein_distance.go:36: cannot use math.Min(int(v1[j] + 1), math.Min(int(v0[j + 1] + 1), int(v0[j] + cost))) (type float64) as type int in assignment
</code></pre>

<p>so to get rid of the problem, I just casted the result back to <code>int</code></p>

<p>I thought this was extremely inefficient and hard to read:</p>

<pre><code>v1[j+1] = int(math.Min(float64(v1[j]+1), math.Min(float64(v0[j+1]+1), float64(v0[j]+cost))))
</code></pre>

<p>I also wrote a small <code>minInt</code> function, but I think this should be unnecessary because the other programs that make use of <code>math.Min</code> work just fine when taking integers, so I concluded this has to be a problem of my program and not the library per se.</p>

<p>Is there anything that I'm doing terrible wrong? </p>

<p>Here's a program that you can use to reproduce the issues above, line 36 specifically:
package main</p>

<pre><code>import (
    ""math""
)

func main() {
    LevenshteinDistance(""stackoverflow"", ""stackexchange"")
}

func LevenshteinDistance(s string, t string) int {
    if s == t {
        return 0
    }
    if len(s) == 0 {
        return len(t)
    }
    if len(t) == 0 {
        return len(s)
    }

    v0 := make([]int, len(t)+1)
    v1 := make([]int, len(t)+1)

    for i := 0; i &lt; len(v0); i++ {
        v0[i] = i
    }

    for i := 0; i &lt; len(s); i++ {
        v1[0] = i + 1
        for j := 0; j &lt; len(t); j++ {
            cost := 0
            if s[i] != t[j] {
                cost = 1
            }
            v1[j+1] = int(math.Min(float64(v1[j]+1), math.Min(float64(v0[j+1]+1), float64(v0[j]+cost))))
        }

        for j := 0; j &lt; len(v0); j++ {
            v0[j] = v1[j]
        }
    }
    return v1[len(t)]
}
</code></pre>
","<p>Nope, I think writing something like that is fine: for instance, <a href=""http://golang.org/src/sort/sort.go"" rel=""nofollow noreferrer"">the stdlib's sort.go</a> does it near the top of the file:</p>

<pre><code>func min(a, b int) int {
    if a &lt; b {
        return a
    }
    return b
}
</code></pre>

<p>Your <code>math.Min(2, 3)</code> worked because <a href=""http://blog.golang.org/constants"" rel=""nofollow noreferrer"">numeric constants in Go are untyped</a>. Besides just avoiding unnecessary casting, it seems best practice not to use float functions for integers because not every <code>int64</code> has a precise <code>float64</code> representation (<a href=""http://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64"" rel=""nofollow noreferrer"">ones above 2^53 don't, specifically</a>). </p>
","27516559"
"Write to Client UDP Socket in Go","10417","","<p>I'm looking for a good solution for a client/server communication with UDP sockets in Go language.</p>

<p>The examples I found on the Internet show me how to send data to the server, but they do not teach how to send them back to the client.</p>

<p>To demonstrate, my program does the following:</p>

<p>My client program creates a socket on the 4444 port, like this:</p>

<pre><code>con, err := net.Dial(""udp"", ""127.0.0.1:4444"")
</code></pre>

<p>I sent a string and the local address to the server, so it could print the string and send an OK message. I am using gob for this:</p>

<pre><code>enc := gob.NewEncoder(con)
enc.Encode(Data{""test"", con.LocalAddr().String()})
</code></pre>

<p>My Data struct looks like this:</p>

<pre><code>type Data struct{
    Msg string
    Addr string
}
</code></pre>

<p>My server listens to the 4444 port and decodes the Gob correctly, but how can I send the OK message back? I'm using the client address to do so (on the server .go file):</p>

<pre><code>con, err := net.Dial(""udp"", data.Addr)
</code></pre>

<p>Then, I get an error code:</p>

<pre><code>write udp 127.0.0.1:35290: connection refused
</code></pre>

<p>When the client tries to connect to the Server's port 4444, the client creates a port with a random number (in this case, 35290) so they can communicate. I know I shouldn't be passing the client's address to the server, but conn.RemoteAddress() does not work. A solution that discovers the client's address would be most appreciated.</p>

<p>Obs.: I know there is ReadFromUDP, so I can read the package. Should I read it, discover the client's address, and send the data to Gob so it can decode it?</p>
","<p>Check the below samples for client/server communication over UDP. The sendResponse routine is for sending response back to client.</p>

<p><strong>udpclient.go</strong></p>

<pre><code>package main
import (
    ""fmt""
    ""net""
    ""bufio""
)

func main() {
    p :=  make([]byte, 2048)
    conn, err := net.Dial(""udp"", ""127.0.0.1:1234"")
    if err != nil {
        fmt.Printf(""Some error %v"", err)
        return
    }
    fmt.Fprintf(conn, ""Hi UDP Server, How are you doing?"")
    _, err = bufio.NewReader(conn).Read(p)
    if err == nil {
        fmt.Printf(""%s\n"", p)
    } else {
        fmt.Printf(""Some error %v\n"", err)
    }
    conn.Close()
}
</code></pre>

<p><strong>udpserver.go</strong></p>

<pre><code>package main
import (
    ""fmt"" 
    ""net""  
)


func sendResponse(conn *net.UDPConn, addr *net.UDPAddr) {
    _,err := conn.WriteToUDP([]byte(""From server: Hello I got your mesage ""), addr)
    if err != nil {
        fmt.Printf(""Couldn't send response %v"", err)
    }
}


func main() {
    p := make([]byte, 2048)
    addr := net.UDPAddr{
        Port: 1234,
        IP: net.ParseIP(""127.0.0.1""),
    }
    ser, err := net.ListenUDP(""udp"", &amp;addr)
    if err != nil {
        fmt.Printf(""Some error %v\n"", err)
        return
    }
    for {
        _,remoteaddr,err := ser.ReadFromUDP(p)
        fmt.Printf(""Read a message from %v %s \n"", remoteaddr, p)
        if err !=  nil {
            fmt.Printf(""Some error  %v"", err)
            continue
        }
        go sendResponse(ser, remoteaddr)
    }
}
</code></pre>
","26032240"
"Passing a query parameter to the Go HTTP request handler using the MUX package","10388","","<p>I am trying to pass an additional parameter in the request I am trying to send to the Go server -</p>

<pre><code>websocket.create_connection(""ws://&lt;ip&gt;:port/x/y?token=""qwerty"")
</code></pre>

<p>The Go server implementation is as follows - </p>

<pre><code>func main() {
    err := config.Parse()
    if err != nil {
        glog.Error(err)
        os.Exit(1)
        return
    }

    flag.Parse()
    defer glog.Flush()

    router := mux.NewRouter()
    http.Handle(""/"", httpInterceptor(router))

    router.Handle(""/v1/x"", common.ErrorHandler(stats.GetS)).Methods(""GET"")
    router.Handle(""/v1/x/y"", common.ErrorHandler(stats.GetS)).Methods(""GET"")

    var listen = fmt.Sprintf(""%s:%d"", config.Config.Ip, config.Config.Port)
    err = http.ListenAndServe(listen, nil)

    if err != nil {
        glog.Error(err)
        os.Exit(1)
    }
}

func httpInterceptor(router http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
        startTime := time.Now()

        if !auth.Auth(w, req) {
            http.Error(w, ""Failed authentication"", 401)
            return
        }

        router.ServeHTTP(w, req)

        finishTime := time.Now()
        elapsedTime := finishTime.Sub(startTime)

        switch req.Method {
        case ""GET"":
        case ""POST"":
        }

    })
}
</code></pre>

<p>How should I look and parse for the token in the Go server so that the authentication is successful? </p>

<p>Library function</p>

<pre><code>func ParseFromRequest(req *http.Request, keyFunc Keyfunc) (token *Token, err error) {

    // Look for an Authorization header
    if ah := req.Header.Get(""Authorization""); ah != """" {
        // Should be a bearer token
        if len(ah) &gt; 6 &amp;&amp; strings.ToUpper(ah[0:6]) == ""BEARER"" {
            return Parse(ah[7:], keyFunc)
        }
    }

    // Look for ""access_token"" parameter
    req.ParseMultipartForm(10e6)
    if tokStr := req.Form.Get(""access_token""); tokStr != """" {
        return Parse(tokStr, keyFunc)
    }

    return nil, ErrNoTokenInRequest

}
</code></pre>
","<p>Call <a href=""http://godoc.org/net/http#Request.FormValue"">FormValue</a> to get a query parameter:</p>

<pre><code>token := req.FormValue(""token"")
</code></pre>

<p><code>req</code> is a the <code>*http.Request</code></p>

<p>An alternative is to call <a href=""http://godoc.org/net/http#Request.ParseForm"">ParseForm</a> and access req.Form directly:</p>

<pre><code>if err := req.ParseForm(); err != nil {
   // handle error
}
token := req.Form.Get(""token"")
</code></pre>

<p>The OP asks in a comment how to map ""token"" to ""access_token"" for an external package that's looking ""access_token"".  Execute this code before calling the external package:</p>

<pre><code>if err := req.ParseForm(); err != nil {
   // handle error
}
req.Form[""access_token""] = req.Form[""token""]
</code></pre>

<p>When the external package calls <code>req.Form.Get(""access_token"")</code>, it will get the same value as the ""token"" parameter.</p>
","28159544"
"golang template - how to render templates?","10369","","<p>One layout template with three children templates.</p>

<p>layout.html</p>

<pre><code>&lt;html&gt;
  &lt;body&gt;
    {{template ""tags""}}

    {{template ""content""}}

    {{template ""comment""}}
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>tags.html</p>

<pre><code>{{define ""tags""}}
&lt;div&gt;
    {{.Name}}
&lt;div&gt;
{{end}}
</code></pre>

<p>content.html</p>

<pre><code>{{define ""content""}}
&lt;div&gt;
   &lt;p&gt;{{.Title}}&lt;/p&gt;
   &lt;p&gt;{{.Content}}&lt;/p&gt;
&lt;/div&gt;
{{end}}
</code></pre>

<p>comment.html</p>

<pre><code>{{define ""tags""}}
&lt;div&gt;
    {{.Note}}
&lt;/div&gt;
{{end}}
</code></pre>

<h2>gocode</h2>

<pre><code>type Tags struct {
   Id int
   Name string
}

type Content struct {
   Id int
   Title string
   Content string
}

type Comment struct {
   Id int
   Note string
}


func main() {
    tags := &amp;Tags{""Id"":1, ""Name"":""golang""}
    Content := &amp;Content{""Id"":9, ""Title"":""Hello"", ""Content"":""World!""}
    Comment := &amp;Comment{""Id"":2, ""Note"":""Good Day!""}
}
</code></pre>

<p>I am confused that how to render each children template and combine the result to layout output.</p>

<p>Thanks.</p>
","<p>As always, <a href=""http://golang.org/pkg/html/template/"" rel=""noreferrer"">the doc</a> is a good place to start.</p>

<p><a href=""http://play.golang.org/p/f4HPQ_WKv9"" rel=""noreferrer"">I wrote a working example on the playground</a></p>

<p>To explain a bit:</p>

<ol>
<li>You don't need strings in struct literals: <code>&amp;Tags{Id: 1}</code>, not <code>&amp;Tags{""Id"":1}</code></li>
<li>You can only pass a single object to your template to execute, which will dispatch objects to each subtemplate as you require in the <code>{{template &lt;name&gt; &lt;arg&gt;}}</code> instruction. I used a ad-hoc <code>Page</code> struct, but a <code>map[string]interface{}</code> would do if you prefer.</li>
<li>You need to parse each template (I used strings in the Playground, but <a href=""http://golang.org/pkg/html/template/#ParseFiles"" rel=""noreferrer"">ParseFiles</a> would do if you have your html files already)</li>
<li>I used os.Stdout to execute it, but you should obviously replace that by the corresponding <code>ResponseWriter</code></li>
</ol>

<p>And the whole code:</p>

<pre><code>package main

import ""fmt""
import ""html/template""
import ""os""

var page = `&lt;html&gt;
  &lt;body&gt;
    {{template ""tags"" .Tags}}

    {{template ""content"" .Content}}

    {{template ""comment"" .Comment}}
  &lt;/body&gt;
&lt;/html&gt;`

var tags = `{{define ""tags""}}
&lt;div&gt;
    {{.Name}}
&lt;div&gt;
{{end}}`

var content = `{{define ""content""}}
&lt;div&gt;
   &lt;p&gt;{{.Title}}&lt;/p&gt;
   &lt;p&gt;{{.Content}}&lt;/p&gt;
&lt;/div&gt;
{{end}}`

var comment = `{{define ""comment""}}
&lt;div&gt;
    {{.Note}}
&lt;/div&gt;
{{end}}`

type Tags struct {
   Id int
   Name string
}

type Content struct {
   Id int
   Title string
   Content string
}

type Comment struct {
   Id int
   Note string
}

type Page struct {
    Tags *Tags
    Content *Content
    Comment *Comment
}

func main() {
    pagedata := &amp;Page{Tags:&amp;Tags{Id:1, Name:""golang""},
                      Content: &amp;Content{Id:9, Title:""Hello"", Content:""World!""},
                      Comment: &amp;Comment{Id:2, Note:""Good Day!""}}
    tmpl := template.New(""page"")
    var err error
    if tmpl, err = tmpl.Parse(page); err != nil {
        fmt.Println(err)
    }
    if tmpl, err = tmpl.Parse(tags); err != nil {
        fmt.Println(err)
    }
    if tmpl, err = tmpl.Parse(comment); err != nil {
        fmt.Println(err)
    }
    if tmpl, err = tmpl.Parse(content); err != nil {
        fmt.Println(err)
    }
    tmpl.Execute(os.Stdout, pagedata)
}
</code></pre>
","19548019"
"Golang testing: ""no test files""","10367","","<p>I'm creating a simple test within my package directory called reverseTest.go</p>

<pre><code>package main
import ""testing""

func TestReverse(t *testing.T) {
    cases := []struct {
        in, want string
    }{
        {""Hello, world"", ""dlrow ,olleH""},
        {""Hello, 世界"", ""界世 ,olleH""},
        {"""", """"},
    }
    for _, c := range cases {
    got := Reverse(c.in)
    if got != c.want {
        t.Errorf(""Reverse(%q) == %q, want %q"", c.in, got, c.want)
    }
}
}
</code></pre>

<p>whenever i try to run it the output is</p>

<pre><code>exampleFolder[no test files] 
</code></pre>

<p>this is my go env</p>

<pre><code>GOARCH=""amd64""
GOBIN=""""
GOCHAR=""6""
GOEXE=""""
GOHOSTARCH=""amd64""
GOHOSTOS=""linux""
GOOS=""linux""
GOPATH=""/home/juan/go""
GORACE=""""
GOROOT=""/usr/lib/go""
GOTOOLDIR=""/usr/lib/go/pkg/tool/linux_amd64""
TERM=""dumb""
CC=""gcc""
GOGCCFLAGS=""-g -O2 -fPIC -m64 -pthread""
CXX=""g++""
CGO_ENABLED=""1""
</code></pre>

<p>Any help will be greatly appreciated. Thanks!!</p>
","<p>Files containing tests should be called <code>name_test</code>, with the <code>_test</code> suffix. From <a href=""http://golang.org/doc/code.html#Testing"">How to Write Go Code</a>:</p>

<blockquote>
  <p>You write a test by creating a file with a name ending in <code>_test.go</code> that contains functions named <code>TestXXX</code> with signature <code>func (t *testing.T)</code>. The test framework runs each such function; if the function calls a failure function such as <code>t.Error</code> or <code>t.Fail</code>, the test is considered to have failed. </p>
</blockquote>
","28240537"
"use a literal for type in assignment","10361","","<p>I'm using the code in <code>func Root</code> as a guide to create another method <code>Login</code> shown below. In particular, in <code>Root</code>, I assign the literal <code>Book{}</code> to <code>b</code> and then use the result in the <code>Scan</code>.  That code doesn't throw any errors (although I'm not sure if it's nice code), but when I try to do something similar in the <code>Login</code> function, which I'm modifying from this <a href=""http://shadynasty.biz/blog/2012/09/05/auth-and-sessions/"" rel=""nofollow"">blogpost</a>, I get this error</p>

<pre><code>cannot use User literal (type User) as type *User in assignment
</code></pre>

<p>for what it's worth, I also get this error right above when I compile</p>

<pre><code>no new variables on left side of :=
</code></pre>

<p>but aren't I doing the same thing in the second method, namely assigning the literal <code>u := User{}</code> to a variable and then using it in the scan? </p>

<p>Can you explain using the code below when you can and can't use a literal for type in an assignment?</p>

<pre><code>func Root(w http.ResponseWriter, r *http.Request) {

    rows, err := db.Query(""SELECT title, author, description FROM books"")
    books := []Book{}
    for rows.Next() {
        b := Book{}
        err := rows.Scan(&amp;b.Title, &amp;b.Author, &amp;b.Description)
        PanicIf(err)
        books = append(books, b)
    }
    ...//code ommitted



func Login(password, email string) (u *User, err error) {
    u := User{}
    db.QueryRow(""select * from users where email=$1 "", email).Scan(&amp;u.Id, &amp;u.Password, &amp;u.Email)
    if err != nil {
        return
    }

    err = bcrypt.CompareHashAndPassword(u.Password, []byte(password))
    if err != nil {
        u = nil
    }
    return
}
</code></pre>
","<p>Simplifying your example to focus on the essentials:</p>

<pre><code>package main

import ""net/http""

type Book struct{}

type User struct{}

func Root(w http.ResponseWriter, r *http.Request) {
    books := []Book{}
    _ = books
}

func Login(password, email string) (u *User, err error) {
    // no new variables on left side of :=
    // cannot use User literal (type User) as type *User in assignment
    // u := User{}
    u = &amp;User{}
    return
}

func main() {}
</code></pre>

<p>The function declaration for <code>Login</code> declares a result parameter <code>u *User</code>, a pointer to type <code>User</code>.</p>

<p>The <code>u := User{}</code> statement is a short variable declaration of type <code>User</code>.</p>

<blockquote>
  <p><a href=""http://golang.org/ref/spec"" rel=""nofollow"">The Go Programming Language
  Specification</a></p>
  
  <p><a href=""http://golang.org/ref/spec#Short_variable_declarations"" rel=""nofollow"">Short variable
  declarations</a></p>
  
  <p>A short variable declaration uses the syntax:</p>
  
  <p>ShortVarDecl = IdentifierList "":="" ExpressionList .</p>
  
  <p>It is shorthand for a regular variable declaration with initializer
  expressions but no types:</p>
  
  <p>""var"" IdentifierList = ExpressionList .</p>
  
  <p>Unlike regular variable declarations, a short variable declaration may
  redeclare variables provided they were originally declared earlier in
  the same block with the same type, and at least one of the non-blank
  variables is new. As a consequence, redeclaration can only appear in a
  multi-variable short declaration. Redeclaration does not introduce a
  new variable; it just assigns a new value to the original.</p>
</blockquote>

<p>Since the variable <code>u</code> has already been declared in the same block (<code>u *User</code>), the compiler complains that <code>u := User{}</code> has ""<code>no new variables on left side of :=</code>."" Write <code>u = User{}</code> for a simple assignment.</p>

<p>The statement <code>books := []Book{}</code> is a short variable declaration for a new variable, <code>book</code>, in the block.</p>

<p>The declaration <code>u *User</code> says that <code>u</code> is a pointer to a variable of type <code>User</code>.</p>

<blockquote>
  <p><a href=""http://golang.org/ref/spec"" rel=""nofollow"">The Go Programming Language
  Specification</a></p>
  
  <p><a href=""http://golang.org/ref/spec#Composite_literals"" rel=""nofollow"">Composite literals</a></p>
  
  <p>Composite literals construct values for structs, arrays, slices, and
  maps and create a new value each time they are evaluated. They consist
  of the type of the value followed by a brace-bound list of composite
  elements. An element may be a single expression or a key-value pair.</p>
  
  <p>The LiteralType must be a struct, array, slice, or map type (the
  grammar enforces this constraint except when the type is given as a
  TypeName). The types of the expressions must be assignable to the
  respective field, element, and key types of the LiteralType; there is
  no additional conversion.</p>
  
  <p>Taking the address of a composite literal generates a pointer to a
  unique instance of the literal's value.</p>
</blockquote>

<p>The composite literal <code>User{}</code> is a literal value of type <code>User</code>, not <code>*User</code>. The compiler complains that ""<code>cannot use User literal (type User) as type *User in assignment</code>."" Take the address of the composite literal for a pointer to a literal value of type <code>User</code> (<code>*User</code>). Write <code>u = &amp;User{}</code>.</p>
","25334318"
"Reading log files as they're updated in Go","10352","","<p>I'm trying to parse some log files as they're being written in Go but I'm not sure how I would accomplish this without rereading the file again and again while checking for changes.</p>

<p>I'd like to be able to read to EOF, wait until the next line is written and read to EOF again, etc. It feels a bit like how <code>tail -f</code> looks.</p>
","<p>I have written a Go package -- <a href=""https://github.com/ActiveState/tail"">github.com/ActiveState/tail</a> -- to do exactly this.</p>

<pre><code>t, err := tail.TailFile(""/var/log/nginx.log"", tail.Config{Follow: true})
for line := range t.Lines {
    fmt.Println(line.Text)
}
</code></pre>

<p>...</p>

<p>Quoting kostix's answer:</p>

<blockquote>
  <p>in real life files might be truncated, replaced or renamed (because that's what tools like logrotate are supposed to do).</p>
</blockquote>

<p>If a file gets truncated, it will automatically be re-opened. To support re-opening renamed files (due to logrotate, etc.), you can set <a href=""http://godoc.org/github.com/ActiveState/tail#Config"">Config.ReOpen</a>, viz.:</p>

<pre><code>t, err := tail.TailFile(""/var/log/nginx.log"", tail.Config{
    Follow: true,
    ReOpen: true})
for line := range t.Lines {
    fmt.Println(line.Text)
}
</code></pre>

<p><code>Config.ReOpen</code> is analogous to <code>tail -F</code> (capital F):</p>

<pre><code> -F      The -F option implies the -f option, but tail will also check to see if the file being followed has been
         renamed or rotated.  The file is closed and reopened when tail detects that the filename being read from
         has a new inode number.  The -F option is ignored if reading from standard input rather than a file.
</code></pre>
","15328871"
"Golang Convert String to io.Writer?","10321","","<p>Is it possible to convert a <code>string</code> to an <code>io.Writer</code> type in Golang?</p>

<p>I will be using this string in <code>fmt.Fprintf()</code> but I am unable to convert the type.</p>
","<p>You can't write into a <code>string</code>, <code>string</code>s in Go are immutable.</p>

<p>The best alternative is the <a href=""https://golang.org/pkg/bytes/#Buffer"" rel=""noreferrer""><code>bytes.Buffer</code></a> type: it implements <a href=""https://golang.org/pkg/io/#Writer"" rel=""noreferrer""><code>io.Writer</code></a> so you can write into it, and you can obtain its content as a <code>string</code> with <a href=""https://golang.org/pkg/bytes/#Buffer.String"" rel=""noreferrer""><code>Buffer.String()</code></a> or as a byte slice with <a href=""https://golang.org/pkg/bytes/#Buffer.Bytes"" rel=""noreferrer""><code>Buffer.Bytes()</code></a>.</p>

<p>You can also have a <code>string</code> as the initial content of the buffer if you create the buffer with <code>bytes.NewBufferString()</code>:</p>

<pre><code>s := ""Hello""
buf := bytes.NewBufferString(s)
fmt.Fprint(buf, "", World!"")
fmt.Println(buf.String())
</code></pre>

<p>Output (try it on the <a href=""http://play.golang.org/p/1t1WbejN0c"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>Hello, World!
</code></pre>

<p>If you want to append a variable of type <code>string</code>, you can simply use <a href=""https://golang.org/pkg/bytes/#Buffer.WriteString"" rel=""noreferrer""><code>Buffer.WriteString()</code></a>:</p>

<pre><code>s2 := ""to be appended""
buf.WriteString(s2)
</code></pre>

<p>Or:</p>

<pre><code>fmt.Fprint(buf, s2)
</code></pre>

<p>Also note that if you just want to concatenate 2 <code>string</code>s, you don't need to create a buffer and use <code>fmt.Fprintf()</code>, you can simply use the <code>+</code> operator to concatenate them:</p>

<pre><code>s := ""Hello""
s2 := "", World!""

s3 := s + s2  // ""Hello, World!""
</code></pre>

<p>Also see: <a href=""https://stackoverflow.com/questions/11123865/golang-format-a-string-without-printing/31742265#31742265"">Golang: format a string without printing?</a></p>
","36302391"
"Go array slice from function return statement","10289","","<p>I have the following functions:</p>

<pre><code>func (c *Class)A()[4]byte
func B(x []byte)
</code></pre>

<p>I want to call</p>

<pre><code>B(c.A()[:])
</code></pre>

<p>but I get this error:</p>

<pre><code>cannot take the address of c.(*Class).A()
</code></pre>

<p>How do I properly get a slice of an array returned by a function in Go?</p>
","<p>The value of <code>c.A()</code>, the return value from a method, is not addressable.</p>

<blockquote>
  <p><a href=""http://golang.org/doc/go_spec.html#Address_operators"" rel=""nofollow"">Address operators</a></p>
  
  <p>For an operand x of type T, the address operation &amp;x generates a
  pointer of type *T to x. The operand must be addressable, that is,
  either a variable, pointer indirection, or slice indexing operation;
  or a field selector of an addressable struct operand; or an array
  indexing operation of an addressable array. As an exception to the
  addressability requirement, x may also be a composite literal.</p>
  
  <p><a href=""http://golang.org/ref/spec#Slice_expressions"" rel=""nofollow"">Slices</a></p>
  
  <p>If the sliced operand is a string or slice, the result of the slice
  operation is a string or slice of the same type. If the sliced operand
  is an array, it must be addressable and the result of the slice
  operation is a slice with the same element type as the array.</p>
</blockquote>

<p>Make the value of <code>c.A()</code>, an array, addressable for the slice operation <code>[:]</code>. For example, assign the value to a variable; a variable is addressable.</p>

<p>For example,</p>

<pre><code>package main

import ""fmt""

type Class struct{}

func (c *Class) A() [4]byte { return [4]byte{0, 1, 2, 3} }

func B(x []byte) { fmt.Println(""x"", x) }

func main() {
    var c Class
    // B(c.A()[:]) // cannot take the address of c.A()
    xa := c.A()
    B(xa[:])
}
</code></pre>

<p>Output:</p>

<pre><code>x [0 1 2 3]
</code></pre>
","8319074"
"What does the asterisk do in ""Go""","10284","","<p>I'm a web developer looking to expand my horizons in order to get better at programming as a whole. I've done a bit Java and some simple Android applications. I'm now looking into lower level languages like C and Go (which I must say has some beautiful syntax and great ideas thus far, though I'm maybe too inexperienced to comment).</p>

<p>So yeah I've been going though and trying to understand the examples on the <a href=""http://golang.org/doc/go_tutorial.html"" rel=""noreferrer"">Go website</a> and I keep coming across a special asterisk character in example like this:</p>

<pre><code>s := ""hello""
if s[1] != 'e' {
    os.Exit(1)
}
s = ""good bye""
var p *string = &amp;s
*p = ""ciao""
</code></pre>

<p>Also, I just noticed, whats with the ""&amp;s"" is it assignment by reference (I might be using PHP talk here)? </p>
","<p>Im guessing it means the same as in C</p>

<p><code>p is a pointer to a string</code></p>

<p>The statement <code>var p *string = &amp;s</code> would assign the address of the <code>s</code> object to <code>p</code></p>

<p>Next line <code>*p = ""ciao""</code> would change the contents of <code>s</code></p>

<p>See this link from the <a href=""http://golang.org/doc/go_faq.html#Pointers"" rel=""noreferrer"">Language Design FAQ</a></p>

<p>Interestingly, no pointer arithmetic</p>

<blockquote>
  <p>Why is there no pointer arithmetic?
  Safety. Without pointer arithmetic
  it's possible to create a language
  that can never derive an illegal
  address that succeeds incorrectly.
  Compiler and hardware technology have
  advanced to the point where a loop
  using array indices can be as
  efficient as a loop using pointer
  arithmetic. Also, the lack of pointer
  arithmetic can simplify the
  implementation of the garbage
  collector.</p>
</blockquote>

<p>Now I want to start learning GO!</p>
","3552645"
"go test can't find function in a same package","10273","","<p>The directory structure is :</p>

<p>src
src/pkg
src/pkg/t1.go
src/pkg/t1_test.go</p>

<p>t1.go</p>

<pre><code>package pkg

import (
""fmt""
)

func SayHI(){
    fmt.Println(""this is t1"")
}
</code></pre>

<p>t1_test.go</p>

<pre><code>package pkg

import (
    ""testing""
)

func TestXYZ(t *testing.T) {
    SayHI()
}
</code></pre>

<p>Invoke go test from command line at dir src/pkg</p>

<p>go test t1_test.go</p>

<p>error:
./t1_test.go:8: undefined: SayHI
FAIL    command-line-arguments [build failed]</p>

<p>but the function is there</p>

<p>thanks for any hints</p>
","<p>It is working as intended.</p>

<pre><code>jnml@fsc-r630:~/src/pkg$ go help test
usage: go test [-c] [-i] [build flags] [packages] [flags for test binary]

'Go test' automates testing the packages named by the import paths.
It prints a summary of the test results in the format:

    ok   archive/tar   0.011s
    FAIL archive/zip   0.022s
    ok   compress/gzip 0.033s
    ...

followed by detailed output for each failed package.

'Go test' recompiles each package along with any files with names matching
the file pattern ""*_test.go"".  These additional files can contain test functions,
benchmark functions, and example functions.  See 'go help testfunc' for more.

By default, go test needs no arguments.  It compiles and tests the package
with source in the current directory, including tests, and runs the tests.

The package is built in a temporary directory so it does not interfere with the
non-test installation.

In addition to the build flags, the flags handled by 'go test' itself are:

    -c  Compile the test binary to pkg.test but do not run it.

    -i
        Install packages that are dependencies of the test.
        Do not run the test.

The test binary also accepts flags that control execution of the test; these
flags are also accessible by 'go test'.  See 'go help testflag' for details.

For more about build flags, see 'go help build'.
For more about specifying packages, see 'go help packages'.

See also: go build, go vet.
jnml@fsc-r630:~/src/pkg$ 
</code></pre>

<p>IOW:</p>

<ul>
<li><code>go test</code> is okay.</li>
<li><code>go test pkg</code> (assuming $GOPATH is ~ and the package is in ~/src/pkg) is okay.</li>
<li><code>go test whatever_test.go</code> is not okay as that is not supported <em>as documented</em> above.</li>
</ul>

<p>To select which tests to run use the <code>-run RE</code> flag (RE is a regexp, interpreted like <code>*RE*</code>). For example</p>

<pre><code>$ go test -run Say # from within the package's directory
</code></pre>

<p>or</p>

<pre><code>$ go test -run Say my/package/import/path # from anywhere
</code></pre>
","14723658"
"Rendering CSS in a Go Web Application","10265","","<p>I wrote a very basic web application, following <a href=""http://golang.org/doc/articles/wiki/"" rel=""noreferrer"">this</a> tutorial. I want to add css rules in an external stylesheet, but it's not working - when the HTML templates are rendered, something goes wrong and the CSS is completely ignored. If I put the rules in  tags, it works, but I don't want to have to deal with that.</p>

<p>In a Go web application, how do I render an external CSS stylesheet?</p>
","<p>Add a handler to handle serving static files from a specified directory.</p>

<p>eg. create {server.go directory}/resources/ and use</p>

<pre><code>http.Handle(""/resources/"", http.StripPrefix(""/resources/"", http.FileServer(http.Dir(""resources"")))) 
</code></pre>

<p>along with /resources/somethingsomething.css</p>

<p>The reason for using StripPrefix is that you can change the served directory as you please, but keep the reference in HTML the same.</p>

<p>eg. to serve from /home/www/</p>

<pre><code>http.Handle(""/resources/"", http.StripPrefix(""/resources/"", http.FileServer(http.Dir(""/home/www/""))))
</code></pre>

<p>Note that this will leave the resources directory listing open.
If you want to prevent that, there is a good snippet on the go snippet blog:</p>

<p><a href=""http://gosnip.posterous.com/disable-directory-listing-with-httpfileserver"">http://gosnip.posterous.com/disable-directory-listing-with-httpfileserver</a></p>

<p><strong>Edit:</strong> Posterous is now gone, so I just pulled the code off of the golang mailing list and will post it here.</p>

<pre><code>type justFilesFilesystem struct {
    fs http.FileSystem
}

func (fs justFilesFilesystem) Open(name string) (http.File, error) {
    f, err := fs.fs.Open(name)
    if err != nil {
        return nil, err
    }
    return neuteredReaddirFile{f}, nil
}

type neuteredReaddirFile struct {
    http.File
}

func (f neuteredReaddirFile) Readdir(count int) ([]os.FileInfo, error) {
    return nil, nil
}
</code></pre>

<p>Original post discussing it: <a href=""https://groups.google.com/forum/#!topic/golang-nuts/bStLPdIVM6w"">https://groups.google.com/forum/#!topic/golang-nuts/bStLPdIVM6w</a></p>

<p>And use it like this in place of the line above:</p>

<pre><code> fs := justFilesFilesystem{http.Dir(""resources/"")}
 http.Handle(""/resources/"", http.StripPrefix(""/resources/"", http.FileServer(fs)))
</code></pre>
","13303943"
"How do I use the strconv.Atoi() method in Go?","10260","","<p>I am trying to get a user input in this small program. I have tried doing this several ways with the <code>strconv.Atoi()</code> method (my input is obviously a string, and I'm trying to convert it to an integer). Here's my first attempt:</p>

<pre><code>package main
    import (
        ""fmt""
        ""strconv""
    )

    func main() {
        //fmt.Println(strconv.Itoa)
        fmt.Println(""Say something, in numbers."")
        var inputstr string
        fmt.Scanln(""%s"", &amp;inputstr)
        input := strconv.Atoi(inputstr)
        output := (input * 2)
        outputstr := strconv.Itoa(output)
        fmt.Println(outputstr)
    }
</code></pre>

<p>and got the following error when it came to compiling:</p>

<blockquote>
  <p>(line 19) multiple-value strconv.Atoi() in single-value context</p>
</blockquote>

<p>I then looked into Godocs and tried to figure this out for myself, and then realized that an error value is returned as well. So, I changed the</p>

<pre><code>input := strconv.Atoi(inputstr)
</code></pre>

<p>to</p>

<pre><code>input, _ := strconv.Atoi(inputstr)
</code></pre>

<p>Now this compiles just fine, without any errors. However, when I run the program, here's what I get:</p>

<blockquote>
  <p>Say something, in numbers.</p>
  
  <p>0</p>
</blockquote>

<p>and then it exits... What am I doing wrong? I believe this is a question about to <code>Atoi()</code> method, but if it's concerning the <code>Scanln()</code> then please correct me. </p>
","<p>The problem turns out to be the Scanln.  Scanln is returning an error <code>type not a pointer</code> because of the %s. This then leaves inputstr blank, which when given to Atoi is returning an error: <code>strconv.ParseInt: parsing """": invalid syntax</code>.</p>

<p>Using Scanf as follows with no change to the Atoi:</p>

<pre><code>func main() {
    //fmt.Println(strconv.Itoa)
    fmt.Println(""Say something, in numbers."")
    var inputstr string

    //fmt.Scanln(""%s"", &amp;inputstr)
    _, err := fmt.Scanf(""%s"", &amp;inputstr)
    if err != nil {
        fmt.Println(err)
    }
    input, e := strconv.Atoi(inputstr)
    if e != nil {
        fmt.Println(e)
    }
    output := (input * 2)
    outputstr := strconv.Itoa(output)
    fmt.Println(outputstr)
}
</code></pre>

<p>Probably the simplest solution is to remove the ""%s"" from the Scanln.</p>
","19531978"
"Assigning null to JSON fields instead of empty strings in Golang","10253","","<p>Since empty string is the zero/default value for Golang <code>string</code>, I decided to define all such fields as <code>interface{}</code> instead. for example </p>

<pre><code>type student struct {
    FirstName  interface{} `json:""first_name""`
    MiddleName interface{} `json:""middle_name""`
    LastName   interface{} `json:""last_name""`
}
</code></pre>

<p>The application I am sending my data expect a null instead of an empty string if value is not available for that specific field.</p>

<p>Is this the correct approach or can someone please point me to something better than this. </p>
","<p>In <a href=""http://golang.org/pkg/encoding/json/"">json package documentation</a> :</p>

<blockquote>
  <p>Pointer values encode as the value pointed to. A nil pointer encodes as the null JSON object.</p>
</blockquote>

<p>So you can store a pointer to a string which will be encoded as a string if not nil and will be encoded as ""null"" if nil </p>

<pre><code>type student struct {
  FirstName  *string `json:""first_name""`
  MiddleName *string `json:""middle_name""`
  LastName   *string `json:""last_name""`
}
</code></pre>
","31048860"
"Call a function from another package in Go","10248","","<p>Hi Im newbie in golang.</p>

<p>I have two files <code>main.go</code> which is under <code>package main</code>, and another file with some functions in the package called functions.</p>

<p>My question is: How can I call a function from <code>package main</code>?</p>

<p><strong>File 1: main.go (located in MyProj/main.go)</strong></p>

<pre><code>package main

import ""fmt""
import ""functions"" // I dont have problem creating the reference here

func main(){
    c:= functions.getValue() // &lt;---- this is I want to do
}
</code></pre>

<p><strong>File 2: functions.go (located in MyProj/functions/functions.go)</strong></p>

<pre><code>package functions

func getValue() string{
    return ""Hello from this another package""
}
</code></pre>

<p>Thanks so much for your help.</p>
","<p>You import the package by its import path, and reference all its exported symbols (those starting <strong>with a capital letter</strong>) through the package name, like so:</p>

<pre><code>import ""MyProj/functions""

functions.GetValue()
</code></pre>
","26142332"
"Golang function and function variable semantics","10237","","<p>Why can't I define a recursive function as a variable? I seem to be able to define arbitrary functions except when they recurse.</p>

<p>This is legal:</p>

<pre><code>func f(i int) int {
    if i == 0 {
        return 1
    }
    return i * f(i-1)
}

func main() {
    fmt.Println(f(2))
}
</code></pre>

<p>This is illegal:</p>

<pre><code>var f func(int) int = func(i int) int {
    if i == 0 {
        return 1
    }
    return i * f(i-1)
}

func main() {
    fmt.Println(f(2))
}
</code></pre>

<p>This is legal and I'm guessing it is just because you can figure out f after initialization:</p>

<pre><code>func main() {
    var f *func(int) int;
    t := func(i int) int {
        if i == 0 {
            return 1
        }
        return i * (*f)(i-1)
    }
    f = &amp;t
    fmt.Println((*f)(2))
}
</code></pre>

<p>So it looks like it comes down to function and variable declarations of a function type are treated differently though from the reading the documentation I wouldn't expect that to be the case. Did I miss the part of the documentation detailing this? </p>

<p>I would expect the illegal case to work just because it works in other languages. Like in JavaScript:</p>

<pre><code>(function () {
  var f = function (i) {
    if (i == 0) {
      return 1;
    }
    return i * f(i - 1);
  };

  console.log(f(2));
})();
</code></pre>
","<p>The below code would be the preferred way of doing what you describe. Note that you do not have to create an additional variable, nor do you have a <em>pointer</em> to a function:</p>

<pre><code>package main

import ""fmt""

func main() {
    var f func(int) int
    f = func(i int) int {
        if i == 0 {
            return 1
        }
        return i * f(i-1)
    }
    fmt.Println(f(2))
}
</code></pre>
","28572612"
"nested struct initialization literals","10232","","<p>How can I do this:</p>

<pre><code>type A struct {
    MemberA string
}

type B struct {
    A
    MemberB string
}
</code></pre>

<p>...</p>

<pre><code>b := B {
    MemberA: ""test1"",
    MemberB: ""test2"",
}
fmt.Printf(""%+v\n"", b)
</code></pre>

<p>Compiling that gives me: ""unknown B field 'MemberA' in struct literal""</p>

<p>How can I initialize MemberA (from the ""parent"" struct) when I provide literal struct member values like this?</p>
","<p>While initialization the anonymous struct is only known under its type name (in your case <code>A</code>).
The members and functions associated with the struct are only exported to the outside after the
instance exists.</p>

<p>You have to supply a valid instance of <code>A</code> to initialize <code>MemberA</code>:</p>

<pre><code>b := B {
    A: A{MemberA: ""test1""},
    MemberB: ""test2"",
}
</code></pre>

<p>The compiler error </p>

<blockquote>
  <p>unknown B field 'MemberA' in struct literal</p>
</blockquote>

<p>says exactly that: there's no <code>MemberA</code> as it is still in <code>A</code> and not in <code>B</code>. In fact,
<code>B</code> will never have <code>MemberA</code>, it will always remain in <code>A</code>. Being able to access <code>MemberA</code>
on an instance of <code>B</code> is only syntactic sugar.</p>
","19325760"
"How do packages with multiple files work in golang?","10225","","<p><a href=""https://github.com/jcelliott/lumber"" rel=""nofollow"">This</a> repo has 3 go files all begin with ""package lumber"".
To use this package, I'm supposed to put this in my <code>GOROOT</code> and simply</p>

<pre><code>import lumber
</code></pre>

<p>in my program. How do variables and types in this package connect with each other across multiple files? How does the go compiler know which file to begin reading first? </p>

<p>In case I want to read the package, where should I begin reading to understand the package? What exactly is the flow of things here?</p>
","<p>No, you're not <em>""supposed to put this in my GOROOT""</em>. You're supposed to execute</p>

<pre><code>$ go get github.com/jcelliott/lumber
</code></pre>

<p>which will clone the repository into <code>$GOPATH/src/github.com/jcelliott/lumber</code>. Then you can use the package by importing it in your code as</p>

<pre><code>import ""github.com/jcelliott/lumber""
</code></pre>

<p>About the scoping rules: <a href=""http://golang.org/ref/spec#Declarations_and_scope"" rel=""noreferrer"">Declarations and scope</a></p>
","16933558"
"How can I convert from int to hex in Golang?","10202","","<p>I want to convert from int to hex in Golang.
In strconv, there is a method that converts strings to hex. Is there a similar method to get a hex string from an int?</p>
","<p>Since hex is a <a href=""https://golang.org/ref/spec#Integer_literals"" rel=""noreferrer"">Integer literal</a>, you can ask the <a href=""https://golang.org/pkg/fmt/"" rel=""noreferrer"">fmt package</a> for a string representation of that integer, using <a href=""https://golang.org/pkg/fmt/#Sprintf"" rel=""noreferrer""><code>fmt.Sprintf()</code></a>, and the <code>%x</code> or <code>%X</code> format.<br>
<a href=""http://play.golang.org/p/GXleKw0OiF"" rel=""noreferrer"">See playground</a></p>

<pre><code>i := 255
h := fmt.Sprintf(""%x"", i)
fmt.Printf(""Hex conv of '%d' is '%s'\n"", i, h)
h = fmt.Sprintf(""%X"", i)
fmt.Printf(""HEX conv of '%d' is '%s'\n"", i, h)
</code></pre>

<p>Output:</p>

<pre><code>Hex conv of '255' is 'ff'
HEX conv of '255' is 'FF'
</code></pre>
","33582214"
"Golang: cast an interface to a typed variable dynamically","10135","","<p>In go, is it possible to cast variables dynamically somehow?</p>

<p>For example, if a simple cast would be:</p>

<pre><code>var intAge  = interfaceAge.(int)
</code></pre>

<p>What if I do not know that age is an int in advance? A simple way of writing it would be </p>

<pre><code>var x = getType()
var someTypeAge = interfaceAge(.x)
</code></pre>

<p>Is there a way of achieving something like this? The reflect package gives some ways of determining or casting a type at runtime - but I couldn't find anything like the above mentioned (a generic scheme that would work for all types). </p>
","<p>No you can't. Go is a static typed language. The type of a variable is determined at compile time.</p>

<p>If you want to determine dynamically the <code>type</code>of an <code>interface{}</code> you could use <a href=""http://golang.org/doc/effective_go.html#type_switch"" rel=""nofollow noreferrer"">type switching</a>: </p>

<pre><code>var t interface{}
t = functionOfSomeType()
switch t := t.(type) {
default:
    fmt.Printf(""unexpected type %T"", t)       // %T prints whatever type t has
case bool:
    fmt.Printf(""boolean %t\n"", t)             // t has type bool
case int:
    fmt.Printf(""integer %d\n"", t)             // t has type int
case *bool:
    fmt.Printf(""pointer to boolean %t\n"", *t) // t has type *bool
case *int:
    fmt.Printf(""pointer to integer %d\n"", *t) // t has type *int
}
</code></pre>
","27972247"
"Go: Named type assertions and conversions","10126","","<p>If I have a custom type that simply redefines a pre-defined type with a name:</p>

<pre><code>type Answer string
</code></pre>

<p>And I try to use it in a function that accepts the pre-defined type:</p>

<pre><code>func acceptMe(str string) {
    fmt.Println(str)
}

func main() {
    type Answer string
    var ans Answer = ""hello""

    // cannot use ans (type Answer) as type string in function argument
    acceptMe(ans)          
    // invalid type assertion: ans.(string) (non-interface type Answer on left)
    acceptMe(ans.(string)) 
    // Does work, but I don't understand why if the previous doesn't:
    acceptMe(string(ans))
}
</code></pre>

<p>Why does the type assertion fail, but the conversion work?</p>
","<p>Type assertion works for interfaces only. Interface can have arbitrary underlying type, so we have type assertion and type switch to the rescue. Type assertion returns <code>bool</code> as the second return value to indicate if assertion was successful.</p>

<p>Your custom type <code>Answer</code> can have only one underlying type. You already know the exact type - <code>Answer</code> and the underlying type - <code>string</code>. You don't need assertions, since conversion to the underlying type will always be successful.</p>

<h2>Old answer:</h2>

<p>Just convert your custom type to <code>string</code>. The conversion will succeed since your custom type has <code>string</code> as an underlying type. The conversion syntax: string(ans). <a href=""http://play.golang.org/p/yr1KkE4LVJ"" rel=""nofollow noreferrer"">Go Play</a></p>
","18692017"
"Package selection in Go","10109","","<p>I'm trying to write an application to pull status from a database, but I seem to be getting stuck on a really basic principle of the language.  I have the program written, but it doesn't compile due to the error <code>use of package time not in selector</code>.</p>

<p>A really basic example (from play.golang.org's own test environment)</p>

<pre><code>package main

import (
    ""fmt""
    ""time""
)

func main() {
    s_str := time.Now()
    fmt.Println( printT(s_str) )
}

func printT(t time) time {
    return t.Add(100)
}
</code></pre>

<p>Unfortunately, I've found documentation and helpdocs online a bit wanting.  My understanding is that the <code>import</code> statement should include the library for the entire program like in C++ correct?</p>
","<p>You have to prefix the imported types or variables with the name you gave to the package in the import (here you use the default name, that is ""time""). That's what you did for the function <code>Now</code> but you have to do it also for the types.</p>

<p>So the type isn't <code>time</code> but <code>time.Time</code> (that is : the type <a href=""http://golang.org/pkg/time/#Time"" rel=""noreferrer""><code>Time</code></a> that is declared in the package you import with the name <code>""time""</code>).</p>

<p>Change your function to</p>

<pre><code>func printT(t time.Time) time.Time {
    return t.Add(100)
}
</code></pre>

<p>And for your second question : No, the <code>import</code> statement doesn't include the library for the entire program but only for the current file.</p>
","18790026"
"What is the equivalent of a Java ArrayList<E> in Golang?","10104","","<p>In my particular use case, I would like to know how the following Java code would be implemented in Go - </p>

<pre><code>class Channel {
    public String name;
    public Channel(){}
}

ArrayList&lt;Channel&gt; channels = new ArrayList&lt;Channel&gt;();
</code></pre>

<p>I've gotten started, and I think this would be the appropriate struct for Channel  in Go -</p>

<pre><code>type Channel struct {
    Name string
}
</code></pre>

<p>I just need to know how ArrayList would work in Go</p>
","<p>Use a slice:</p>

<pre><code>var channels []Channel  // an empty list
channels = append(channels, Channel{name:""some channel name""})
</code></pre>

<p>Also, your Channel declaration is slightly off, you need the 'type' keyword:</p>

<pre><code>type Channel struct {
    name string
}
</code></pre>

<p>Here's a complete example: <a href=""http://play.golang.org/p/HnQ30wOftb"" rel=""noreferrer"">http://play.golang.org/p/HnQ30wOftb</a></p>

<p>For more info, see the <a href=""http://golang.org/doc/articles/slices_usage_and_internals.html"" rel=""noreferrer"">slices article</a>.</p>

<p>There's also the go tour (tour.golang.org) and the language spec (golang.org/ref/spec, see #Slice_types, #Slices, and #Appending_and_copying_slices).</p>
","10060868"
"Strange golang package import issue","10098","","<p>Here is the directory tree:</p>

<pre><code>+/project  
  +---/bin  
  +---/pkg  
  +---/src  
    +---/client_test  
      +---client_test.go  
    +---main.go  
</code></pre>

<p>In main.go:</p>

<pre><code>package main
import (""client_test"")
func main() {
  client_test.Send()
}
</code></pre>

<p>In client_test.go:</p>

<pre><code>package client_test
func Send() {
}
</code></pre>

<p>Error:</p>

<pre><code>src/main.go|8| imported and not used: ""client_test""
src/main.go|32| undefined: client_test
</code></pre>

<p>I've read <a href=""https://stackoverflow.com/questions/15049903/how-to-use-custom-packages-in-golang"">How to use custom packages in golang?</a> and I think I've had the same solution like this guy, but I just don't know how to solve this problem. Please help.</p>

<p>go env:</p>

<pre><code>GOARCH=""amd64""  
GOBIN=""/usr/local/go/bin""  
GOCHAR=""6""  
GOEXE=""""  
GOGCCFLAGS=""-g -O2 -fPIC -m64 -pthread -fno-common""  
GOHOSTARCH=""amd64""  
GOHOSTOS=""darwin""  
GOOS=""darwin""  
GOPATH=""/Users/staff/projects/Minigame_Server"" (that's exactly my working directory)  
GOROOT=""/usr/local/go""  
GOTOOLDIR=""/usr/local/go/pkg/tool/darwin_amd64""  
CGO_ENABLED=""1""  
</code></pre>
","<blockquote>
  <p><a href=""http://golang.org/cmd/go/#hdr-Test_packages"">Command go, Test packages.</a></p>
  
  <p>... files with names matching the file pattern ""*_test.go"" ... can
  contain test functions, benchmark functions, and example functions.</p>
</blockquote>

<p>Don't use reserved names. For example, replace <code>client_test</code> with <code>clienttest</code> throughout.</p>
","15409527"
"List of printing format in Go lang","10094","","<p>Just want to know the list of printing format using the fmt package's functions.</p>

<p>For example, like:</p>

<p>%v is use for print the value.
%T can print the type of value.</p>

<p>What else?</p>
","<p>The list of format ""verbs"" is available in the <a href=""http://golang.org/pkg/fmt/""><strong>documentation of the fmt package</strong></a> :</p>

<p><strong>General:</strong></p>

<pre><code>%v  the value in a default format.
    when printing structs, the plus flag (%+v) adds field names
%#v a Go-syntax representation of the value
%T  a Go-syntax representation of the type of the value
%%  a literal percent sign; consumes no value
</code></pre>

<p><strong>Boolean:</strong></p>

<pre><code>%t  the word true or false
</code></pre>

<p><strong>Integer:</strong></p>

<pre><code>%b  base 2
%c  the character represented by the corresponding Unicode code point
%d  base 10
%o  base 8
%q  a single-quoted character literal safely escaped with Go syntax.
%x  base 16, with lower-case letters for a-f
%X  base 16, with upper-case letters for A-F
%U  Unicode format: U+1234; same as ""U+%04X""
</code></pre>

<p><strong>Floating-point and complex constituents:</strong></p>

<pre><code>%b  decimalless scientific notation with exponent a power of two,
    in the manner of strconv.FormatFloat with the 'b' format,
    e.g. -123456p-78
%e  scientific notation, e.g. -1234.456e+78
%E  scientific notation, e.g. -1234.456E+78
%f  decimal point but no exponent, e.g. 123.456
%g  whichever of %e or %f produces more compact output
%G  whichever of %E or %f produces more compact output
</code></pre>

<p><strong>String and slice of bytes:</strong></p>

<pre><code>%s  the uninterpreted bytes of the string or slice
%q  a double-quoted string safely escaped with Go syntax
%x  base 16, lower-case, two characters per byte
%X  base 16, upper-case, two characters per byte
</code></pre>

<p><strong>Pointer:</strong></p>

<pre><code>%p  base 16 notation, with leading 0x
</code></pre>

<p><strong>Other flags:</strong></p>

<pre><code>+   always print a sign for numeric values;
    guarantee ASCII-only output for %q (%+q)
-   pad with spaces on the right rather than the left (left-justify the field)
#   alternate format: add leading 0 for octal (%#o), 0x for hex (%#x);
    0X for hex (%#X); suppress 0x for %p (%#p);
    print a raw (backquoted) string if possible for %q (%#q);
    write e.g. U+0078 'x' if the character is printable for %U (%#U).
' ' (space) leave a space for elided sign in numbers (% d);
    put spaces between bytes printing strings or slices in hex (% x, % X)
0   pad with leading zeros rather than spaces
</code></pre>
","12781811"
"Golang how to have an inplace string that updates at stdout?","10067","","<p>I want to output to stdout and have the output ""overwrite"" the previous output.</p>

<p>For example; if I output <code>On 1/10</code>, I want the next output <code>On 2/10</code> to overwrite <code>On 1/10</code>. How can I do this?</p>
","<p><code>stdout</code> is a stream (<code>io.Writer</code>). You cannot modify what was already written to it. What <em>can</em> be changed is how that stream's represented in case it is printed to a terminal. Note that there's no good reason to assume this scenario. For example, a user could redirect stdout to a pipe or to a file at will.</p>

<p>So the proper approach is to first check:</p>

<ul>
<li>if the stdout is going to a terminal</li>
<li>what is that terminal's procedure to overwrite a line/screen</li>
</ul>

<p>Both of the above are out of this question's scope, but let's assume that a terminal is our device. Then usually, printing:</p>

<pre><code>fmt.Printf(""\rOn %d/10"", i)
</code></pre>

<p>will overwrite the previous line in the terminal. <code>\r</code> stands for <code>carriage return</code>, implemented by many terminals as moving the cursor to the beginning of the current line, hence providing the ""overwrite line"" facility.</p>

<p>As an example of ""other"" terminal with a differently supported 'overwriting', here is an example at the <a href=""http://play.golang.org/p/b1LlRwxPdu"" rel=""nofollow noreferrer"">playground</a>.</p>
","15442704"
"Struct's Zero value in golang","10051","","<p>Here is sample code:</p>

<pre><code>package main

import (
    ""fmt""
)

type A struct {
    Name string
}

func (this *A) demo(tag string) {
    fmt.Printf(""%#v\n"", this)
    fmt.Println(tag)
}

func main() {
    var ele A
    ele.demo(""ele are called"")

    ele2 := A{}
    ele2.demo(""ele2 are called"")
}
</code></pre>

<p>Run results:</p>

<pre><code>&amp;main.A{Name:""""}
ele are called
&amp;main.A{Name:""""}
ele2 are called
</code></pre>

<p>It looks like those are the same about <code>var ele A</code> and <code>ele2 := A{}</code></p>

<p>So, the struct's Zero value is not <code>nil</code> , but a struct that all of the property are initialized Zero value. Is the guess right ?</p>

<p>If the guess is right, then the nature of <code>var ele A</code> and <code>ele2 := A{}</code> are the same right ? I'm not sure.</p>
","<p>Why guess (correctly) when there's <a href=""https://golang.org/ref/spec#The_zero_value"" rel=""nofollow noreferrer"">some documentation</a> ?</p>

<blockquote>
  <p>When storage is allocated for a variable, either through a declaration or a call of new, or when a new value is created, <strong>either through a composite literal or a call of make, and no explicit initialization is provided</strong>, the variable or value is given a default value.</p>
  
  <p><strong>Each element of such a variable or value is set to the zero value for its type</strong>:</p>
  
  <ul>
  <li><code>false</code> for booleans, </li>
  <li><code>0</code> for integers, </li>
  <li><code>0.0</code> for floats, </li>
  <li><code>""""</code> for strings,</li>
  <li>and <code>nil</code> for pointers, functions, interfaces, slices, channels, and maps. </li>
  </ul>
  
  <p>This initialization is done recursively, so for instance each element of an array of structs will have its fields zeroed if no value is specified.</p>
</blockquote>

<p>Note that there's no way to set a struct value to <code>nil</code> (but you could set the value of a pointer to a struct to <code>nil</code>).</p>
","28625828"
"Convert byte array ""[]uint8"" to float64 in GoLang","10041","","<p>I'm trying to convert a <code>[]uint8</code> byte array into a <code>float64</code> in GoLang.  I can't find a solution for this issue online.  I've seen suggestions of converting to a string first and then to a <code>float64</code> but this doesn't seem to work, it loses it's value and I end up with zeroes.</p>

<p>Example:</p>

<pre><code>metric.Value, _ = strconv.ParseFloat(string(column.Value), 64)
</code></pre>

<p>And it doesn't work...</p>
","<p>For example,</p>

<pre><code>package main

import (
    ""encoding/binary""
    ""fmt""
    ""math""
)

func Float64frombytes(bytes []byte) float64 {
    bits := binary.LittleEndian.Uint64(bytes)
    float := math.Float64frombits(bits)
    return float
}

func Float64bytes(float float64) []byte {
    bits := math.Float64bits(float)
    bytes := make([]byte, 8)
    binary.LittleEndian.PutUint64(bytes, bits)
    return bytes
}

func main() {
    bytes := Float64bytes(math.Pi)
    fmt.Println(bytes)
    float := Float64frombytes(bytes)
    fmt.Println(float)
}
</code></pre>

<p>Output:</p>

<pre><code>[24 45 68 84 251 33 9 64]
3.141592653589793
</code></pre>
","22492518"
"Go, Golang : does not make sense that I have to have files before import","10014","","<p>How do I import an external package from scratch?</p>

<p>I've written a library package in Go and testing to distribute through github. I am following <a href=""http://golang.org/doc/code.html"" rel=""nofollow"">http://golang.org/doc/code.html</a> and using mac but getting error message </p>

<p>cmd I put is following.</p>

<pre><code>$ mkdir $HOME/go
$ export GOPATH=$HOME/go
$ export PATH=$PATH:$GOPATH/bin
$ mkdir -p $GOPATH/src/github.com/user
$ mkdir $GOPATH/src/github.com/user/project
</code></pre>

<p>Then I put </p>

<pre><code>$ go get github.com/user/project
</code></pre>

<p>Still errors with go install</p>

<pre><code>can't load package: package github.com/golingorg/goling: no Go source files in /Users/user_name/go/src/github.com/user/project
</code></pre>

<p>I do not understand why we need files to import an external package in Go. External package means that I get something and create files from the external package.</p>

<p>My question is how I import an external package from scratch. Most of documents just say something like </p>

<pre><code> go get github.com/yasushi-saito/fifo_queue
</code></pre>

<p>this gives me ""$GOPATH not set.""
I am getting frustrated setting up the environment for ""go get"" to work, as a beginner. Thanks a lot in advance.</p>

<p>Summary</p>

<pre><code>   How do I import an external package from scratch?
</code></pre>
","<p>Go is a static type language thus it needs to resolve any reference to external package at compile time. The ""go"" tool expects the source of external packages in locally accessible path thus you need to use ""go get"" to download them. </p>

<p>From what you described, you probably did not set the GOPATH. Use ECHO $GOPATH to check if it is set correctly.</p>

<p>For my GO project, I normally use GOPATH as workspace, similar to virtualenv in Python or rbenv/rvm in Ruby. Let say my project ""myproject"" has root at /projects/myproject, my source file will be located at /projects/myproject/src/myproject and there is an import of ""github.com/user/project"", then</p>

<pre><code>&gt; cd /projects/myproject
&gt; export GOPATH=`pwd`          # or export GOPATH=/projects/myproject
&gt; go get github.com/user/project
</code></pre>

<p>After ""go get"" command, the source of ""github.com/user/project"" will be downloaded to /projects/myproject/src/github.com/user/project.</p>

<p>When you use ""go build"" or ""go install"" then, it will compile as the external packages is in the $GOPATH/src folder.</p>

<p>If you install Go in the default folder, you need to include Go installed bin folder in the PATH environment variable. After that GOPATH is the other environment variable you need for ""go"" tool to work.</p>
","19074416"
"How to return dynamic type struct in Golang?","10007","","<p>I am using Golang Revel for some web project and I did like 12 projects in that so far. In all of them I have a lot of code redundancy because of return types. Look at this two functions:</p>

<pre><code>func (c Helper) Brands() []*models.Brand{

    //do some select on rethinkdb and populate correct model
    var brands []*models.Brand
    rows.All(&amp;brands)

    return brands

}

func (c Helper) BlogPosts() []*models.Post{

    //do some select on rethinkdb and populate correct model
    var posts []*models.Post
    rows.All(&amp;posts)

    return posts

}
</code></pre>

<p>As you can see they they both returns same type of data (type struct).
My idea was just to pass string var like this:</p>

<pre><code>func (c Helper) ReturnModels(modelName string) []*interface{} {

    //do rethinkdb select with modelName and return []*interface{} for modelName
}
</code></pre>

<p>Like this I can have just one helper for returning data types instead of
doing same thing over and over again for different models but same data type.</p>

<p>My questions are:</p>

<ol>
<li>Is this possible at all</li>
<li>If yes can you point me to right docs</li>
<li>If no, I will be more then happy to return your answer :)</li>
</ol>
","<p>Yes it's possible however your function should return <code>interface{}</code> and not <code>[]*interface</code>.</p>

<pre><code>func (c Helper) ReturnModels(modelName string) interface{} {}
</code></pre>

<p>In this case you could use <a href=""https://golang.org/doc/effective_go.html#type_switch"" rel=""noreferrer"">Type Switches and/or Type Assertions</a> to cast the return value into it's original type.</p>

<p><strong>Example</strong></p>

<p>Note: I've never used Revel, but the following snippet should give you an a general idea:</p>

<p><a href=""https://play.golang.org/p/1sLXtWpnuW"" rel=""noreferrer"">Playground</a></p>

<pre><code>package main

import ""fmt""

type Post struct {
    Author  string
    Content string
}

type Brand struct {
    Name string
}

var database map[string]interface{}

func init() {
    database = make(map[string]interface{})

    brands := make([]Brand, 2)
    brands[0] = Brand{Name: ""Gucci""}
    brands[1] = Brand{Name: ""LV""}

    database[""brands""] = brands

    posts := make([]Post, 1)
    posts[0] = Post{Author: ""J.K.R"", Content: ""Whatever""}

    database[""posts""] = posts
}

func main() {
    fmt.Println(""List of Brands: "")
    if brands, ok := ReturnModels(""brands"").([]Brand); ok {
        fmt.Printf(""%v"", brands)
    }

    fmt.Println(""\nList of Posts: "")
    if posts, ok := ReturnModels(""posts"").([]Post); ok {
        fmt.Printf(""%v"", posts)
    }

}

func ReturnModels(modelName string) interface{} {

    return database[modelName]
}
</code></pre>
","35657622"
"Assigning to map in golang","10004","","<p>In the following go snippet, what am I doing wrong?</p>

<pre><code>type Element interface{}

func buncode(in *os.File) (e Element) {
    &lt;snip&gt;
    e = make(map[string]interface{})
    for {
        var k string = buncode(in).(string)
        v := buncode(in)
        e[k] = v
    }
    &lt;snip&gt;
}
</code></pre>

<p>Compiling gives me this error:</p>

<pre><code>gopirate.go:38: invalid operation: e[k] (index of type Element)
</code></pre>

<p>Double ewe T eff?</p>
","<p>In the <code>buncode</code> function you declare <code>e Element</code>, where <code>type e Element interface{}</code>. The variable <code>e</code> is a scalar value, which you are trying to index.</p>

<blockquote>
  <p><a href=""http://golang.org/doc/go_spec.html#Types"" rel=""nofollow"">Types</a></p>
  
  <p>The static type (or just type) of a variable is the type defined by
  its declaration. Variables of interface type also have a distinct
  dynamic type, which is the actual type of the value stored in the
  variable at run-time. The dynamic type may vary during execution but
  is always assignable to the static type of the interface variable. For
  non-interface types, the dynamic type is always the static type.</p>
</blockquote>

<p>The static type of <code>e</code> is <code>Element</code>, a scalar. The dynamic type of <code>e</code> is <code>map[string]interface{}</code>.</p>

<p>Here's a revised, compilable version of your code.</p>

<pre><code>type Element interface{}

func buncode(in *os.File) (e Element) {
    m := make(map[string]interface{})
    for {
        var k string = buncode(in).(string)
        v := buncode(in)
        m[k] = v
    }
    return m
}
</code></pre>

<p>Why are you making the recursive calls to <code>buncode</code>?</p>
","7041191"
"Convert interface{} to map in Golang","10004","","<p>I am trying to create a function that could accept following</p>

<pre><code>*struct
[]*struct
map[string]*struct
</code></pre>

<p>Here struct could be any struct not just a specific one.
Converting interface to <code>*struct</code> or <code>[]*struct</code> is working fine.
But giving error for map.</p>

<p>After reflect it shows it is map[] but giving error when try to iterate over range.</p>

<p>Here is code</p>

<pre><code>package main

import (
    ""fmt""
    ""reflect""
)

type Book struct {
    ID     int
    Title  string
    Year   int
}

func process(in interface{}, isSlice bool, isMap bool) {
    v := reflect.ValueOf(in)

    if isSlice {
        for i := 0; i &lt; v.Len(); i++ {
            strct := v.Index(i).Interface()
            //... proccess struct
        }
        return
    }

    if isMap {
        fmt.Printf(""Type: %v\n"", v)     // map[]
        for _, s := range v {           // Error: cannot range over v (type reflect.Value)
            fmt.Printf(""Value: %v\n"", s.Interface())
        }
    }    
}

func main() {
    b := Book{}
    b.Title = ""Learn Go Language""
    b.Year = 2014
    m := make(map[string]*Book)
    m[""1""] = &amp;b

    process(m, false, true)
}
</code></pre>

<p>Is there any way to convert <code>interface{}</code> to map and iterate or get it's elements.</p>
","<p>If the map value can be any type, then use reflect to iterate through the map:</p>

<pre><code>if v.Kind() == reflect.Map {
    for _, key := range v.MapKeys() {
        strct := v.MapIndex(key)
        fmt.Println(key.Interface(), strct.Interface())
    }
}
</code></pre>

<p><a href=""https://play.golang.org/p/pEQhIP4R2m"" rel=""nofollow"">playground example</a></p>

<p>If there's a small and known set of struct types, then a <a href=""https://golang.org/ref/spec#Type_switches"" rel=""nofollow"">type switch</a> can be used:</p>

<pre><code>func process(in interface{}) {
  switch v := in.(type) {
  case map[string]*Book:
     for s, b := range v {
         // b has type *Book
         fmt.Printf(""%s: book=%v\n"" s, b)
     }
  case map[string]*Author:
     for s, a := range v {
         // a has type *Author
         fmt.Printf(""%s: author=%v\n"" s, a)
     }
   case []*Book:
     for i, b := range v {
         fmt.Printf(""%d: book=%v\n"" i, b)
     }
   case []*Author:
     for i, a := range v {
         fmt.Printf(""%d: author=%v\n"" i, a)
     }
   case *Book:
     fmt.Ptintf(""book=%v\n"", v)
   case *Author:
     fmt.Printf(""author=%v\n"", v)
   default:
     // handle unknown type
   }
}
</code></pre>
","38186057"
"How to get ajax post request value in Go lang?","9997","","<p>I am working in <code>Go</code>. Following code to handle the client request.</p>

<pre><code>package main

import (
    ""net/http""
    ""fmt""
 )

func main() {
  http.HandleFunc(""/"", func(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, ""&lt;html&gt;&lt;head&gt;&lt;script&gt;function createGroup(){var xmlhttp,number = document.getElementById('phoneNumber').value,email = document.getElementById('emailId').value; var values = {}; values.number = phoneNumber; values.email= emailId; if (window.XMLHttpRequest){xmlhttp=new XMLHttpRequest();}else{xmlhttp=new ActiveXObject('Microsoft.XMLHTTP');}xmlhttp.open('POST','createGroup',true);xmlhttp.send(values.toString());}&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Group&lt;/h1&gt;&lt;input type='text' name='phoneNumber' id='phoneNumber'/&gt;&lt;input type='email' id='emailId' name='emailId'/&gt;&lt;button onClick='createGroup()'&gt;Create Group&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;"")
 })
 http.HandleFunc(""/createGroup"",func(w http.ResponseWriter, r *http.Request) {
    fmt.Println(r)
    //Try to get the user information
 })
 panic(http.ListenAndServe("":8080"", nil))
}
</code></pre>

<h3>Note</h3>

<p><code>Client:</code> Contains two text box to get the <code>phone number</code>, <code>email</code> and <code>createGroup</code> button.</p>

<ol>
<li><p>If user clicks the <code>createGroup</code>, Post request of <code>/createGroup</code> is triggered using ajax.</p></li>
<li><p>createGroup request is handled in server(Go)</p></li>
</ol>

<h3>Problem</h3>

<p>How to get the phone number and email in server side?</p>

<p>I have printed the request in <code>/createGroup</code> handler but values are missing.</p>

<pre><code>Output: &amp;{POST /createGroup HTTP/1.1 1 1 map[Accept:[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8] Accept-Encoding:[gzip, deflate] Content-Length:[15] Content-Type:[text/plain; charset=UTF-8] Connection:[keep-alive] Pragma:[no-cache] Cache-Control:[no-cache] User-Agent:[Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:25.0) Gecko/20100101 Firefox/25.0] Accept-Language:[en-US,en;q=0.5] Referer:[http://localhost:8080/]] 0xc200099ac0 15 [] false localhost:8080 map[] map[] &lt;nil&gt; map[] 127.0.0.1:59523 /createGroup &lt;nil&gt;}
</code></pre>

<p>Any help will be grateful.</p>
","<p>Use <a href=""http://golang.org/pkg/net/http/#Request.ParseForm""><code>ParseForm</code></a> and <a href=""http://golang.org/pkg/net/http/#Request.FormValue""><code>r.FormValue</code></a>, for example :</p>

<pre><code>http.HandleFunc(""/createGroup"",func(w http.ResponseWriter, r *http.Request) {
    r.ParseForm()
    fmt.Println(r.Form)
    fmt.Println(r.FormValue(""email""))
})
</code></pre>
","23198038"
"Building and linking dynamically from a go binary","9993","","<p>My problem is the following:</p>

<ol>
<li>I have a go binary on a machine</li>
<li>From that binary I need to compile an external .go file</li>
<li>Once compiled, I need to link the compiled go file into the current binary so I can use the just-compiled go code.</li>
</ol>

<p>Do you think that's possible ?</p>

<p>I did a few researches and it does not seem to be possible, but I might have overlooked something.</p>

<p>Thanks :)</p>

<p>The first go binary would contain something like</p>

<pre><code>func main() {
    // Here I need to compile an external go file (or package) which contains
    // The definition of runFoo()

    // Once the file/package is compiled and linked I need to call the compiled code
    runFoo()

    // Continue the execution process normally here
}
</code></pre>
","<p><strong>Update:</strong> It is now possible do do this in mainline Go, see <a href=""https://docs.google.com/document/d/1nr-TQHw_er6GOQRsF6T43GGhFDelrAP0NqSS_00RgZQ/edit"" rel=""nofollow noreferrer"">Go Execution Modes</a></p>

<p>From the <a href=""https://golang.org/doc/go1.5"" rel=""nofollow noreferrer"">Go 1.5 release notes</a>:</p>

<blockquote>
  <p>For the amd64 architecture only, the compiler has a new option,
  -dynlink, that assists dynamic linking by supporting references to Go symbols defined in external shared libraries.</p>
</blockquote>

<p><strong>Old Answer</strong> (<em>useful discussion of other options</em>): </p>

<p>It is not currently possible to create dynamically linked libraries* in main line Go. There has been some talk about this, so you may see support in the future. However, there is a 3rd party go project called <a href=""https://github.com/eliasnaur/goandroid"" rel=""nofollow noreferrer"">goandriod</a> that needed the same functionality you need, so they maintain patches that should allow you to patch the official Go code base to support the dynamic linked support you are requesting.</p>

<p>If you want to use a the standard Go run-time, I would recommend the one of the following.
Invoke your Go program from your other program, and communicate using:</p>

<ol>
<li>Pipes to communicate</li>
<li>A UNIX domain socket</li>
<li>A mmaped region of shared memory.

<ol>
<li>That is create a file on /dev/shm and have both programs mmap it.</li>
<li>Go mmap library: <a href=""https://github.com/edsrzf/mmap-go"" rel=""nofollow noreferrer"">https://github.com/edsrzf/mmap-go</a></li>
</ol></li>
</ol>

<p>Each consecutive option will take more effort to setup, be more platform specific, but potentially be more powerful than the previous one.</p>

<p><strong>*Note:</strong> That is DLLs in the Windows world, and .so files in the UNIX/Linux world.</p>
","19919835"
"How to make a channel that receive multiple return values from a goroutine","9972","","<p>I have a function in Go that returns two values. I want to run this as a goroutine, but I can't figure out the syntax for creating a channel that receives two values. Could someone point me in the right direction?</p>
","<p>Define a custom type with fields for both values, then create a <code>chan</code> of that type.</p>

<p>EDIT: I've also added an example (right at the bottom) that uses multiple channels rather than a custom type. I'm not sure which is more idiomatic.</p>

<p>For example:</p>

<pre><code>type Result struct {
    Field1 string
    Field2 int
}
</code></pre>

<p>then</p>

<pre><code>ch := make(chan Result)
</code></pre>

<p>Example of using a channel of a custom type (<a href=""http://play.golang.org/p/2WmxcQ0OeC"">Playground</a>):</p>

<pre><code>package main

import (
    ""fmt""
    ""strings""
)

type Result struct {
    allCaps string
    length  int
}

func capsAndLen(words []string, c chan Result) {
    defer close(c)
    for _, word := range words {
        res := new(Result)
        res.allCaps = strings.ToUpper(word)
        res.length = len(word)
        c &lt;- *res       
    }
}

func main() {
    words := []string{""lorem"", ""ipsum"", ""dolor"", ""sit"", ""amet""}
    c := make(chan Result)
    go capsAndLen(words, c)
    for res := range c {
        fmt.Println(res.allCaps, "","", res.length)
    }
}
</code></pre>

<p>Produces:</p>

<blockquote>
  <p>LOREM , 5<br>
  IPSUM , 5<br>
  DOLOR , 5<br>
  SIT , 3<br>
  AMET , 4  </p>
</blockquote>

<p>EDIT: Example using multiple channels instead of a custom type to produce the same output (<a href=""http://play.golang.org/p/ocvGsen3gw"">Playground</a>):</p>

<pre><code>package main

import (
    ""fmt""
    ""strings""
)

func capsAndLen(words []string, cs chan string, ci chan int) {
    defer close(cs)
    defer close(ci)
    for _, word := range words {
        cs &lt;- strings.ToUpper(word)
        ci &lt;- len(word)
    }
}

func main() {
    words := []string{""lorem"", ""ipsum"", ""dolor"", ""sit"", ""amet""}
    cs := make(chan string)
    ci := make(chan int)
    go capsAndLen(words, cs, ci)
    for allCaps := range cs {
        length := &lt;-ci
        fmt.Println(allCaps, "","", length)
    }
}
</code></pre>
","17825968"
"Dereferencing a map index in Golang","9969","","<p>I'm learning Go currently and I made this simple and crude inventory program just to tinker with structs and methods to understand how they work. In the driver file I try to call a method from and item type from the items map of the Cashier type. My method have pointer reciever to use the structs directly instead of making copies. When I run the program I get this error <code>.\driver.go:11: cannot call pointer method on f[0]
    .\driver.go:11: cannot take the address of f[0]</code></p>

<p>Inventory.go:</p>

<pre><code>package inventory


type item struct{
    itemName string
    amount int
}

type Cashier struct{
    items map[int]item
    cash int
}

func (c *Cashier) Buy(itemNum int){
    item, pass := c.items[itemNum]

    if pass{
        if item.amount == 1{
            delete(c.items, itemNum)
        } else{
            item.amount--
            c.items[itemNum] = item 
        }
        c.cash++
    }
}


func (c *Cashier) AddItem(name string, amount int){
    if c.items == nil{
        c.items = make(map[int]item)
    }
    temp := item{name, amount}
    index := len(c.items)
    c.items[index] = temp
}

func (c *Cashier) GetItems() map[int]item{
    return c.items;
}

func (i *item) GetName() string{
    return i.itemName
}

func (i *item) GetAmount() int{
    return i.amount
}
</code></pre>

<p>Driver.go:</p>

<pre><code>package main

import ""fmt""
import ""inventory""

func main() {
    x := inventory.Cashier{}
    x.AddItem(""item1"", 13)
    f := x.GetItems()

    fmt.Println(f[0].GetAmount())
}
</code></pre>

<p>The part of the code that really pertains to my problem is the <code>GetAmount</code> function in <code>inventory.go</code> and print statement in the <code>driver.go</code></p>
","<p>A map entry cannot be addressed (as its address might change during map growth/shrink), so you cannot call pointer receiver methods on them. </p>

<p>Detail here: <a href=""https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/4_pabWnsMp0"">https://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/4_pabWnsMp0</a></p>
","20224852"
"Golang XML parse","9942","","<p>My XML data:</p>

<pre><code>&lt;dictionary version=""0.8"" revision=""403605""&gt;
    &lt;grammemes&gt;
        &lt;grammeme parent=""""&gt;POST&lt;/grammeme&gt;
        &lt;grammeme parent=""POST""&gt;NOUN&lt;/grammeme&gt;
    &lt;/grammemes&gt;
&lt;/dictionary&gt;
</code></pre>

<p>My code:</p>

<pre><code>type Dictionary struct {
    XMLName xml.Name `xml:""dictionary""`
    Grammemes *Grammemes `xml:""grammemes""`
}

type Grammemes struct {
    Grammemes []*Grammeme `xml:""grammeme""`
}

type Grammeme struct {
    Name string `xml:""grammeme""`
    Parent string `xml:""parent,attr""`
}
</code></pre>

<p>I get Grammeme.Parent attribute, but i don't get Grammeme.Name. Why?</p>
","<p>If you want a field to hold the contents of the current element, you can use the tag <code>xml:"",chardata""</code>.  The way you've tagged your structure, it is instead looking for a <code>&lt;grammeme&gt;</code> sub-element.</p>

<p>So one set of structures you could decode into is:</p>

<pre><code>type Dictionary struct {
    XMLName   xml.Name   `xml:""dictionary""`
    Grammemes []Grammeme `xml:""grammemes&gt;grammeme""`
}

type Grammeme struct {
    Name   string `xml:"",chardata""`
    Parent string `xml:""parent,attr""`
}
</code></pre>

<p>You can test out this example here: <a href=""http://play.golang.org/p/7lQnQOCh0I"">http://play.golang.org/p/7lQnQOCh0I</a></p>
","22655853"
"$GOPATH must not be set to $GOROOT, why not?","9925","","<p>I've installed Go on my Linux machine in <code>/usr/local/go</code>, and intended to use <code>/usr/local/go/src</code> for development. However when I try this I get the following error:</p>

<pre><code>$GOPATH must not be set to $GOROOT
</code></pre>

<p>Effectively as I understand it, this means you shouldn't use <code>/usr/local/go</code> for development. Why not?</p>
","<p>Because <code>/usr/local/go/src</code> already contains the code for the standard library, and you should keep your own code separate from that.</p>

<p>I know, other development tools would have no problem with that, but Go is a little more strict in some ways. It's probably the same philosophy that lies behind flagging unused variables or imports as errors - avoiding problems which may seem small at first, but can lead  to bigger headaches in the future.</p>
","22877941"
"Embed a scripting language inside Go","9922","","<p>Is it possible to embed a language inside Go? With example on how the embedded language could access Go's variables. I need it to create plugins inside my application.</p>
","<p>At the first, I'll explain cgo. Go provides API to export values into C language.</p>

<p><a href=""http://golang.org/cmd/cgo/"" rel=""nofollow noreferrer"">http://golang.org/cmd/cgo/</a></p>

<p>For example, you can export string as <code>char*</code> like below.</p>

<pre><code>package main

/*
#include &lt;stdio.h&gt;
static void myputs(char* s) {
    puts(s);
}
*/
import ""C""

func main() {
    s := ""hello world""
    C.myputs(C.CString(s))
}
</code></pre>

<p>So you need to write functions to access C library. But there are some packages to use script languages. See:</p>

<p><a href=""https://github.com/mattn/go-mruby"" rel=""nofollow noreferrer"">https://github.com/mattn/go-mruby</a></p>

<p><a href=""https://github.com/mattn/go-v8"" rel=""nofollow noreferrer"">https://github.com/mattn/go-v8</a></p>

<p>Or if you don't want to use C language. You can use native go language like otto</p>

<p><a href=""https://github.com/robertkrimen/otto"" rel=""nofollow noreferrer"">https://github.com/robertkrimen/otto</a></p>

<p><a href=""https://github.com/mattn/anko"" rel=""nofollow noreferrer"">https://github.com/mattn/anko</a></p>
","27496898"
"How can I compile a Go program?","9906","","<p>I got <strong>Go</strong> to compile: </p>

<pre>
0 known bugs; 0 unexpected bugs
</pre>

<p>and typed in the ""hello world"":</p>

<pre><code>package main

import ""fmt""

func main() {
  fmt.Printf(""Hello, 世界\n"")
}
</code></pre>

<p>Then I tried to compile it, but it wouldn't go:</p>

<pre>
$ 8c gotest2
gotest2:1 not a function
gotest2:1 syntax error, last name: main
</pre>

<p>This is going on on Ubuntu Linux on Pentium. Go installed and passed its tests. So where did I go wrong? Can someone tell me where to go from here?</p>

<p>I also tried <a href=""http://golang.org/doc/go_tutorial.html#tmp%5F32"" rel=""noreferrer"">this program</a>:</p>

<pre><code>package main

import fmt ""fmt""  // Package implementing formatted I/O.


func main() {
    fmt.Printf(""Hello, world; or Καλημέρα κόσμε; or こんにちは 世界\n"");
}
</code></pre>

<p>But this was also no go <sub>(must stop making go puns)</sub>:</p>

<pre>
$ 8c gotest3.go
gotest3.go:1 not a function
gotest3.go:1 syntax error, last name: main
</pre>
","<p>You're using 8c, which is the c compiler. 8g will compile go, and 8l will link.</p>
","1714731"
"""method requires pointer receiver"" in Go Programming Language","9867","","<p>I just saw a presentation of the Go programming language and thought I'd try to write a few lines. Everything worked fine until I tried to use an interface in this situation. How do I solve this?</p>

<pre><code>package main

import ""fmt""

type entity float32

func (e *entity) inc() {
    *e++
}

type incer interface {
    inc()
}

func doSomething(i incer) {
    i.inc()
}

func main() {
    fmt.Println(""Hello, 世界"")

    var e entity = 3
    e.inc()
    doSomething(e)
    fmt.Println(e)
}
</code></pre>

<p>I get the compiler error:</p>

<pre><code>prog.go:24: cannot use e (type entity) as type incer in function argument:
entity does not implement incer (inc method requires pointer receiver)
</code></pre>

<p>I want to use a pointer so that the inc() will affect the enity outside the function. What is the syntax I should use?</p>

<p>/Ricky</p>
","<p>I think there is some confusion here. <code>inc</code> is a method of the type <code>*entity</code>, and not of the type <code>entity</code> (while you can call methods on values directly on pointers; you cannot generally call methods on pointers directly on values). What you may be confused about is why you could call <code>e.inc()</code>, instead of having to do <code>(&amp;e).inc()</code>. This is a little-known special case documented at the bottom of the <a href=""http://golang.org/doc/go_spec.html#Calls"" rel=""noreferrer"">Calls</a> section in the language specification, that says if <code>x</code> is addressable, and <code>&amp;x</code>'s method set contains <code>m</code>, then <code>x.m()</code> is shorthand for <code>(&amp;x).m()</code>. This applies to this case because <code>e</code> is a variable, so it is addressable; but other expressions may not be addressable. I would recommend that you not use this shortcut, however, as it causes confusion; it makes you think that <code>e</code> conforms to the interface <code>inter</code>, while it does not.</p>
","7438958"
"Go: Write Struct to Json File using Struct Fields (not json keys)","9862","","<p>How can I read a json file into a struct, and then Marshal it back out to a json string with the Struct fields as keys (rather than the original json keys)?</p>

<p>(see <code>Desired Output to Json File</code> below...)</p>

<p>Code:</p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
)

type Rankings struct {
    Keyword  string `json:""keyword""`
    GetCount uint32 `json:""get_count""`
    Engine   string `json:""engine""`
    Locale   string `json:""locale""`
    Mobile   bool   `json:""mobile""`
}

func main() {
    var jsonBlob = []byte(`
        {""keyword"":""hipaa compliance form"", ""get_count"":157, ""engine"":""google"", ""locale"":""en-us"", ""mobile"":false}
    `)
    rankings := Rankings{}
    err := json.Unmarshal(jsonBlob, &amp;rankings)
    if err != nil {
        // nozzle.printError(""opening config file"", err.Error())
    }

    rankingsJson, _ := json.Marshal(rankings)
    err = ioutil.WriteFile(""output.json"", rankingsJson, 0644)
    fmt.Printf(""%+v"", rankings)
}
</code></pre>

<p>Output on screen:</p>

<pre><code>{Keyword:hipaa compliance form GetCount:157 Engine:google Locale:en-us Mobile:false}
</code></pre>

<p>Output to Json File: </p>

<pre><code>{""keyword"":""hipaa compliance form"",""get_count"":157,""engine"":""google"",""locale"":""en-us"",""mobile"":false}
</code></pre>

<p><strong><em>Desired Output to Json File:</em></strong></p>

<pre><code>{""Keyword"":""hipaa compliance form"",""GetCount"":157,""Engine"":""google"",""Locale"":""en-us"",""Mobile"":false}
</code></pre>
","<p>If I understand your question correctly, all you want to do is remove the json tags from your struct definition.</p>

<p>So:</p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
    ""io/ioutil""
)

type Rankings struct {
    Keyword  string 
    GetCount uint32 
    Engine   string 
    Locale   string 
    Mobile   bool   
}

func main() {
    var jsonBlob = []byte(`
        {""keyword"":""hipaa compliance form"", ""get_count"":157, ""engine"":""google"", ""locale"":""en-us"", ""mobile"":false}
    `)
    rankings := Rankings{}
    err := json.Unmarshal(jsonBlob, &amp;rankings)
    if err != nil {
        // nozzle.printError(""opening config file"", err.Error())
    }

    rankingsJson, _ := json.Marshal(rankings)
    err = ioutil.WriteFile(""output.json"", rankingsJson, 0644)
    fmt.Printf(""%+v"", rankings)
}
</code></pre>

<p>Results in:</p>

<pre><code>{Keyword:hipaa compliance form GetCount:0 Engine:google Locale:en-us Mobile:false}
</code></pre>

<p>And the file output is:</p>

<pre><code>{""Keyword"":""hipaa compliance form"",""GetCount"":0,""Engine"":""google"",""Locale"":""    en-us"",""Mobile"":false}
</code></pre>

<p>Running example at <a href=""http://play.golang.org/p/dC3s37HxvZ"" rel=""nofollow noreferrer"">http://play.golang.org/p/dC3s37HxvZ</a></p>

<p>Note: GetCount shows 0, since it was read in as <code>""get_count""</code>. If you want to read in JSON that has <code>""get_count""</code> vs. <code>""GetCount""</code>, but output <code>""GetCount""</code> then you'll have to do some additional parsing.</p>

<p>See <a href=""https://stackoverflow.com/q/11527935/1162491"">Go- Copy all common fields between structs</a> for additional info about this particular situation.</p>
","24770435"
"Convert byte array to int using GO language","9860","","<p>I see some answers to exactly the same question I have: How to convert Byte array to int in GO programming language?</p>

<p>I wrote below function to convert byte array to int</p>

<pre><code>func convertByteToInt(in []byte) int32 {
    return  (int32(in[0]) &lt;&lt; 24 | int32(in[1]) &lt;&lt; 16 | int32(in[2]) &lt;&lt; 8 | int32(in[3]))
}
</code></pre>

<p>Before that, I made sure that byte array has correct(base 256) values.
    in[0] = 54 (ASCII for 6),
    in[1] = 54 (ASCII for 6),
    in[2] = 49 (ASCII for 1),
    in[3] = 49 (ASCII for 1).</p>

<p>So I am expecting to retrieve integer 6611 value from byte array, but I ended up getting 909521201. I fail to understand what is exactly going on in such a simple conversion.
Can anyone flash some light?</p>

<p>THanks</p>
","<p>@Volker is right in his comment, you don't have a <em>binary</em> number in your array, you have an <em>ASCII</em> string. Yet, you try to decode it as binary. Note there's no need to validate any input (maybe except the length) if you were dealing with binary number, as all single byte values are valid.</p>

<p>@Ainar-G gave you a way of converting ASCII number into integer.</p>

<p>Compare these two approaches: (<a href=""http://play.golang.org/p/_wufZ4P_aE"" rel=""noreferrer"">http://play.golang.org/p/_wufZ4P_aE</a>)</p>

<pre><code>buf := []byte{54, 54, 49, 49}

x, _ := strconv.Atoi(string(buf))
fmt.Println(x)
</code></pre>

<p>This prints <strong>6611</strong>; but look at this:</p>

<pre><code>var y int32
_ = binary.Read(bytes.NewReader(buf), binary.BigEndian, &amp;y)
fmt.Println(y)
</code></pre>

<p>This prints <strong>909521201</strong>, so exactly what you got (and didn't expect). As a side note, you're manually decoding it as <em>BigEndian</em>, so this is not ""such a simple conversion"" at the end, because there're some more factors to consider.</p>

<p>Your handcrafted conversion from ASCII would look more or less as follows:</p>

<pre><code>var x int32
for _, c := range in {
    x = x*10 + int32(c - '0')
}
return x
</code></pre>

<p>But using <code>strconv</code> is the way to go.</p>
","27292579"
"What is most idiomatic way to create an iterator in Go?","9840","","<p>One option is to use channels. Channels are like iterators in a way and you can iterate over them using range keyword. But when you find out you can't break out of this loop without leaking goroutine the usage becomes limited.</p>

<p>What is the idiomatic way to create iterator pattern in go?</p>

<p><strong>Edit</strong>:</p>

<p>The fundamental problem with channels is they are a push model. Iterator is is a pull model. You don't have to tell iterator to stop. I'm looking for a way to iterate over collections in a nice expressive way. I would also like to chain iterators (map, filter, fold alternatives).</p>
","<p>Channels are useful, but closures are often more suitable.</p>

<pre><code>package main

import ""fmt""

func main() {
    gen := newEven()
    fmt.Println(gen())
    fmt.Println(gen())
    fmt.Println(gen())
    gen = nil // release for garbage collection
}

func newEven() func() int {
    n := 0
    // closure captures variable n
    return func() int {
        n += 2
        return n
    }
}
</code></pre>

<p>Playground: <a href=""http://play.golang.org/p/W7pG_HUOzw"">http://play.golang.org/p/W7pG_HUOzw</a></p>

<p>Don't like closures either?  Use a named type with a method:</p>

<pre><code>package main

import ""fmt""

func main() {
    gen := even(0)
    fmt.Println(gen.next())
    fmt.Println(gen.next())
    fmt.Println(gen.next())
}

type even int

func (e *even) next() int {
    *e += 2
    return int(*e)
}
</code></pre>

<p>Playground: <a href=""http://play.golang.org/p/o0lerLcAh3"">http://play.golang.org/p/o0lerLcAh3</a></p>

<p>There are tradeoffs among the three techniques so you can't nominate one as idiomatic.  Use whatever best meets your needs.</p>

<p>Chaining is easy because functions are first class objects.  Here's an extension of the closure example.  I added a type intGen for integer generator which makes it clear where generator functions are used as arguments and return values.  mapInt is defined in a general way to map any integer function to an integer generator.  Other functions such as filter and fold could be defined similarly.</p>

<pre><code>package main

import ""fmt""

func main() {
    gen := mapInt(newEven(), square)
    fmt.Println(gen())
    fmt.Println(gen())
    fmt.Println(gen())
    gen = nil // release for garbage collection
}

type intGen func() int

func newEven() intGen {
    n := 0
    return func() int {
        n += 2
        return n
    }
}

func mapInt(g intGen, f func(int) int) intGen {
    return func() int {
        return f(g())
    }
}

func square(i int) int {
    return i * i
}
</code></pre>

<p>Playground: <a href=""http://play.golang.org/p/L1OFm6JuX0"">http://play.golang.org/p/L1OFm6JuX0</a></p>
","14002760"
"Multiple files using template.ParseFiles in golang","9831","","<p>For example.go, I have</p>

<pre><code>package main

import ""html/template""
import ""net/http""

func handler(w http.ResponseWriter, r *http.Request) {
    t, _ := template.ParseFiles(""header.html"", ""footer.html"")
    t.Execute(w, map[string] string {""Title"": ""My title"", ""Body"": ""Hi this is my body""})
}

func main() {
    http.HandleFunc(""/"", handler)
    http.ListenAndServe("":8080"", nil)
}
</code></pre>

<p>In header.html:</p>

<pre><code>Title is {{.Title}}
</code></pre>

<p>In footer.html:</p>

<pre><code>Body is {{.Body}}
</code></pre>

<p>When going to <code>http://localhost:8080/</code>, I only see ""Title is My title"", and not the second file, footer.html. How can I load multiple files with template.ParseFiles? What's the most efficient way to do this?</p>

<p>Thanks in advance.</p>
","<p>Only the first file is used as the main template. The other template files need to be included from the first like so:</p>

<pre><code>Title is {{.Title}}
{{template ""footer.html"" .}}
</code></pre>

<p>The dot after <code>""footer.html""</code> passes the data from <code>Execute</code> through to the footer template -- the value passed becomes <code>.</code> in the included template.</p>
","12229127"
"Go - time - milliseconds","9826","","<p>I need the time in milliseconds for what could be a large volume of transactions, so I want something that is correct, and fast. Will the following work and do the job best? :</p>

<pre><code>
    iMilli  := int((time.Nanoseconds() % 1e6) / 1e3)
</code></pre>

<p>TIA</p>
","<p><strong>EDIT</strong>: <em>Since this answer was first written, escape analysis code has been added to the Go compilers.  This allows the compiler to avoid unnecessary allocations in certain situations, including (probably) the one described below.  With the latest weeklies, therefore, it may be just as good to use a more straightforward call to time.Nanoseconds(). Please do your own profiling.</em></p>

<p>Most of the time functions cause a heap allocation (that then subsequently needs to be collected, causing a pause in your application).  So if you're looking up the time frequently, which it sounds like you are, you'll need to use syscall.Gettimeofday() directly (it's the function that the other time functions end up calling anyway).  See the discussion here for more information:</p>

<p><a href=""http://groups.google.com/group/golang-nuts/browse_thread/thread/f2209022f43efcca?pli=1"" rel=""nofollow"">http://groups.google.com/group/golang-nuts/browse_thread/thread/f2209022f43efcca?pli=1</a></p>

<p>The solution I'm using is to pre-allocate a <code>tv syscall.Timeval</code>, and each time through my inner loop I do this:</p>

<pre><code>syscall.Gettimeofday(&amp;tv)
</code></pre>

<p>You can then get the milliseconds with:</p>

<pre><code>(int64(tv.Sec)*1e3 + int64(tv.Usec)/1e3)
</code></pre>

<p>I've found this to perform a lot better than calling time.Nanoseconds() or one of the other higher-level time functions.</p>
","6189490"
"What is a concise way to create a 2D slice in Go?","9815","","<p>I am learning Go by going through <a href=""https://tour.golang.org/list"" rel=""noreferrer"">A Tour of Go</a>. One of the exercises there asks me to create a 2D slice of <code>dy</code> rows and <code>dx</code> columns containing <code>uint8</code>. My current approach, which works, is this:  </p>

<pre><code>a:= make([][]uint8, dy)       // initialize a slice of dy slices
for i:=0;i&lt;dy;i++ {
    a[i] = make([]uint8, dx)  // initialize a slice of dx unit8 in each of dy slices
}
</code></pre>

<p>I think that iterating through each slice to initialize it is too verbose. And if the slice had more dimensions, the code would become unwieldy. Is there a concise way to initialize 2D (or n-dimensional) slices in Go?  </p>
","<p>There isn't a more concise way, what you did is the ""right"" way; because slices are always one-dimensional but may be composed to construct higher-dimensional objects. See this question for more details: <a href=""https://stackoverflow.com/questions/39561140/go-how-is-two-dimensional-arrays-memory-representation"">Go: How is two dimensional array&#39;s memory representation</a>.</p>

<p>One thing you can simplify on it is to use the <code>for range</code> construct:</p>

<pre><code>a := make([][]uint8, dy)
for i := range a {
    a[i] = make([]uint8, dx)
}
</code></pre>

<p>Also note that if you initialize your slice with a <a href=""https://golang.org/ref/spec#Composite_literals"" rel=""noreferrer"">composite literal</a>, you get this for ""free"", for example:</p>

<pre><code>a := [][]uint8{
    {0, 1, 2, 3},
    {4, 5, 6, 7},
}
fmt.Println(a) // Output is [[0 1 2 3] [4 5 6 7]]
</code></pre>

<p>Yes, this has its limits as seemingly you have to enumerate all the elements; but there are some tricks, namely you don't have to enumerate all values, only the ones that are not the <a href=""https://golang.org/ref/spec#The_zero_value"" rel=""noreferrer"">zero values</a> of the element type of the slice. For more details about this, see <a href=""https://stackoverflow.com/questions/36302441/keyed-items-in-golang-array-initialization"">Keyed items in golang array initialization</a>.</p>

<p>For example if you want a slice where the first 10 elements are zeros, and then follows <code>1</code> and <code>2</code>, it can be created like this:</p>

<pre><code>b := []uint{10: 1, 2}
fmt.Println(b) // Prints [0 0 0 0 0 0 0 0 0 0 1 2]
</code></pre>

<p>Also note that if you'd use <a href=""https://golang.org/ref/spec#Array_types"" rel=""noreferrer"">arrays</a> instead of <a href=""https://golang.org/ref/spec#Slice_types"" rel=""noreferrer"">slices</a>, it can be created very easily:</p>

<pre><code>c := [5][5]uint8{}
fmt.Println(c)
</code></pre>

<p>Output is:</p>

<pre><code>[[0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0]]
</code></pre>

<p>In case of arrays you don't have to iterate over the ""outer"" array and initialize ""inner"" arrays, as arrays are not descriptors but values. See blog post <a href=""https://blog.golang.org/slices"" rel=""noreferrer"">Arrays, slices (and strings): The mechanics of 'append'</a> for more details.</p>

<p>Try the examples on the <a href=""https://play.golang.org/p/YN4K-vqybs"" rel=""noreferrer"">Go Playground</a>.</p>
","39806983"
"Pick a random value from a Go Slice","9797","","<p>So in my quest to learn new languages,I have decided to learn Go and this is the very first day so please be gentle on me..I have a slice of values and i need to randomly pickup a value and then concatenate it with a fixed string..This is what i have till now..</p>

<pre><code>func main() {
//create the reasons slice and append reasons to it
reasons := make([]string, 0)
reasons = append(reasons,
    ""Locked out"",
    ""Pipes broke"",
    ""Food poisoning"",
    ""Not feeling well"")

message := fmt.Sprint(""Gonna work from home..."", pick a random reason )
}
</code></pre>

<p>Is there an inbuilt function which can help me do that ""pick a random reason"" part..?</p>
","<p>Use function <a href=""https://golang.org/pkg/math/rand/#Intn"" rel=""noreferrer""><code>Intn</code></a> from <code>rand</code> package to select a random index.</p>

<pre><code>import (
  ""math/rand""
  ""time""
)

// ...

rand.Seed(time.Now().Unix()) // initialize global pseudo random generator
message := fmt.Sprint(""Gonna work from home..."", reasons[rand.Intn(len(reasons))])
</code></pre>

<p>Other solution is to use <code>Rand</code> object.</p>

<pre><code>s := rand.NewSource(time.Now().Unix())
r := rand.New(s) // initialize local pseudorandom generator 
r.Intn(len(reasons))
</code></pre>
","33994791"
"Structs as keys in Go maps","9775","","<p>I was looking into using structs as keys in golang maps. A field in this struct is supposed to be a map also and this seems to go against the documentation provided <a href=""http://blog.golang.org/go-maps-in-action"" rel=""noreferrer"">here</a> which says that only structs that have fields that can be compared with <code>==</code> and <code>!=</code> can be in the fields of structs that are used as keys in maps. I however went ahead to try the following:</p>

<pre><code>package main

import ""fmt""
import ""strings""

func main() {
    fmt.Println(""Hello, 世界"")
    fmt.Println(strings.Join([]string{""obi"", ""$"", ""56""}, """"))
    z := make(map[string]float64)

    z[""obi""] = 0.003

    x := &amp;test{
        name:""testing"",
        code:z,
    }

    a := &amp;test{
        name:""testing2"",
        code:z,
    }

    y := make(map[*test] string)

    y[x] = ""go home""
    y[a] = ""come home""

    for key, val := range y{
        fmt.Println(key.name, key.code, val)
    }

}

type test struct{
    name string
    code map[string]float64
}
</code></pre>

<p>The output was:</p>

<pre><code>Hello, 世界
obi$56
testing map[obi:0.003] go home
testing2 map[obi:0.003] come home
</code></pre>

<p>This seems to go against the documentation as a field in the struct used as a key is a map. What do I seem to be getting wrong?</p>
","<p>In your example the map key is a pointer to the struct, not the struct itself. Pointers can be compared for equality even when the items they point to can't be compared. This comparison is not based on the contents of the item, but only on its memory address.</p>
","21065393"
"Reading image from HTTP request's body in Go","9751","","<p>I'm playing with Go (first time ever) and I want to build a tool to retrieve images from Internet and cut them (even resize) but I'm stuck on the first step.</p>

<pre><code>package main

import (
  ""fmt""
  ""http""
)

var client = http.Client{}

func cutterHandler(res http.ResponseWriter, req *http.Request) {
  reqImg, err := client.Get(""http://www.google.com/intl/en_com/images/srpr/logo3w.png"")
  if err != nil {
    fmt.Fprintf(res, ""Error %d"", err)
    return
  }
  buffer := make([]byte, reqImg.ContentLength)
  reqImg.Body.Read(buffer)
  res.Header().Set(""Content-Length"", fmt.Sprint(reqImg.ContentLength)) /* value: 7007 */
  res.Header().Set(""Content-Type"", reqImg.Header.Get(""Content-Type"")) /* value: image/png */
  res.Write(buffer)
}

func main() {
  http.HandleFunc(""/cut"", cutterHandler)
  http.ListenAndServe("":8080"", nil) /* TODO Configurable */
}
</code></pre>

<p>I'm able to request an image (let's use Google logo) and to get its kind and size.</p>

<p>Indeed, I'm just re-writing the image (look at this as a toy ""proxy""), setting Content-Length and Content-Type and writing the byte slice back but I get it wrong somewhere. See how it looks the final image rendered on Chromium 12.0.742.112 (90304):</p>

<p><img src=""https://i.stack.imgur.com/4L5f7.png"" alt=""Grotesque result""></p>

<p>Also I checked the downloaded file and it is a 7007 bytes PNG image. It should be working properly if we look at the request:</p>

<p></p>

<blockquote>
  <p>GET /cut HTTP/1.1<br/>
  User-Agent: curl/7.22.0 (i486-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.0e zlib/1.2.3.4 libidn/1.23 libssh2/1.2.8 librtmp/2.3<br/>
  Host: 127.0.0.1:8080<br/>
  Accept: <em>/</em></p>
  
  <p>HTTP/1.1 200 OK<br/>
  Content-Length: 7007<br/>
  Content-Type: image/png<br/>
  Date: Tue, 27 Dec 2011 19:51:53 GMT</p>
  
  <p>[PNG data]</p>
</blockquote>

<p>What do you think I'm doing wrong here?</p>

<p>Disclaimer: I'm scratching my own itch, so probably I'm using the wrong tool :) Anyway, I can implement it on Ruby but before I would like to give Go a try.</p>

<p>Update: still scratching itches but... I think this is going to be a good side-of-side project so I'm opening it <a href=""https://github.com/imdario/go-lazor"" rel=""nofollow noreferrer"">https://github.com/imdario/go-lazor</a> If it is not useful, at least somebody can find usefulness with the references used to develop it. They were for me.</p>
","<p>I tried your code and noticed that the image you were serving was the right size, but the contents of the file past a certain point were all 0x00.</p>

<p>Review the <a href=""http://golang.org/pkg/io/#Reader"" rel=""nofollow"">io.Reader documentation</a>. The important thing to remember is that Read reads <strong>up to</strong> the number of bytes you request. It can read fewer with no error returned. (You should be checking the error too, but that's not an issue here.)</p>

<p>If you want to make sure your buffer is completely full, use io.ReadFull. In this case it's simpler to just copy the entire contents of the Reader with io.Copy.</p>

<p>It's also important to remember to close HTTP request bodies.</p>

<p>I would rewrite the code this way:</p>

<pre><code>package main

import (
    ""fmt""
    ""http""
    ""io""
)

var client = http.Client{}

func cutterHandler(res http.ResponseWriter, req *http.Request) {
    reqImg, err := client.Get(""http://www.google.com/intl/en_com/images/srpr/logo3w.png"")
    if err != nil {
        fmt.Fprintf(res, ""Error %d"", err)
        return
    }
    res.Header().Set(""Content-Length"", fmt.Sprint(reqImg.ContentLength))
    res.Header().Set(""Content-Type"", reqImg.Header.Get(""Content-Type""))
    if _, err = io.Copy(res, reqImg.Body); err != nil {
        // handle error
    }
    reqImg.Body.Close()
}

func main() {
    http.HandleFunc(""/cut"", cutterHandler)
    http.ListenAndServe("":8080"", nil) /* TODO Configurable */
}
</code></pre>
","8649000"
"Convert rune to int?","9726","","<p>In the following code, I iterate over a <code>string</code> rune by rune, but I'll actually need an <code>int</code> to perform some checksum calculation. Do I really need to encode the <code>rune</code> into a <code>[]byte</code>, then convert it to a <code>string</code> and then use <code>Atoi</code> to get an <code>int</code> out of the <code>rune</code>? Is this the idiomatic way to do it?</p>

<pre><code>// The string `s` only contains digits.
var factor int
for i, c := range s[:12] {
    if i % 2 == 0 {
        factor = 1
    } else {
        factor = 3
    }
    buf := make([]byte, 1)
    _ = utf8.EncodeRune(buf, c)
    value, _ := strconv.Atoi(string(buf))
    sum += value * factor
}
</code></pre>

<p>On the playground: <a href=""http://play.golang.org/p/noWDYjn5rJ"">http://play.golang.org/p/noWDYjn5rJ</a></p>
","<p>The problem is simpler than it looks. You convert a <code>rune</code> value to an <code>int</code> value with <code>int(r)</code>. But your code implies you want the integer value out of the ASCII (or UTF-8) representation of the digit, which you can trivially get with <code>r - '0'</code> as a <code>rune</code>, or <code>int(r - '0')</code> as an <code>int</code>. Be aware that out-of-range runes will corrupt that logic.</p>
","21322694"
"how to make an absolute path http redirect in golang","9718","","<p>I was reading the source code <a href=""https://github.com/nf/goto"" rel=""nofollow"">goto</a>, and I found the code below in <a href=""https://github.com/nf/goto/blob/master/talk/code/0/main.go"" rel=""nofollow"">goto/talk/0/main.go</a>:</p>

<pre><code>http.Redirect(w, r, url, http.StatusFound)
</code></pre>

<p>According to the context, <code>url</code> was an absolute path, and an absolute path redirect was expected. But as the <a href=""http://golang.org/pkg/net/http/#Redirect"" rel=""nofollow"">golang/http/redirect</a> mentioned:</p>

<blockquote>
  <p><code>Redirect</code> replies to the request with a redirect to url, which may be a path relative to the request path.</p>
</blockquote>

<p>It results as a relative path redirect. I don't know if <code>http.Redirect</code> did an absolute path redirect before, but it doesn't nowadays.</p>

<p>So how can I make an absolute path redirect in golang?
I searched the Internet, but found nothing,can anyone help me?
Thanks in advance.</p>
","<p>I finally found that to perform an absolute path redirect, the <code>url</code> must be a complete url, such as <code>http://www.stackoverflow.com</code> or <code>https://github.com</code>, but not <code>www.stackoverflow.com</code>.</p>
","11934373"
"Golang: how to redirect to a url","9717","","<p>I would like to show client another page after data has been collected from previous page. But I have trouble redirect the new URL on the server side. Here is my logic:</p>

<ol>
<li>submit user input with POST action to server;</li>
<li>server run function saveChoice() to save user input into a database;</li>
<li>After user input is saved, server send a new URL to client;</li>
<li>By the time the client GET the new URL, server reads the database and get saved data out</li>
</ol>

<p>And I am stuck on step 3 (here is an example of the flow):</p>

<pre><code>type Stuff struct{
    List []string
}

func checkcheck(w http.ResponseWriter, r *http.Request) {
    sinfo := Stuff{
        List: some_slice
    }

    t, err := template.New("""").Parse(tpl_ds)
    checkErr(err)
    err = r.ParseForm()
    checkErr(err)
    err = t.Execute(w, sinfo)
    checkErr(err)

    if r.Method == ""POST"" {
        saveChoice(r.Form[""choices""])
        /* step 3: make user open another URL */
    }
}
</code></pre>

<p>And here is the template:</p>

<pre><code>&lt;html&gt;
&lt;script&gt;
  $(function () {
    $('form').on('submit', function (e) {
      e.preventDefault();
      $.ajax({
        type: 'post',
        data: $('form').serialize(),
      });
    });
  });
&lt;/script&gt;
&lt;body&gt;
  &lt;form method=""POST""&gt;
    {{range .List}}
        &lt;input type=""checkbox"" name=""choices"" value=""{{.}}""&gt; &lt;span&gt;{{.}}&lt;/span&gt;&lt;br&gt;
    {{end}}
    &lt;input type=""submit"" value=""Submit""&gt;
  &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>May I know how I can redirect to a new page?</p>

<p>p.s. If I put URL on button, then server is not going to run saveChoice()</p>

<p>Thanks!</p>
","<p>The http status 303 is the appropriate response here. So redirect the request with it.</p>

<pre><code>if r.Method == ""POST"" {
    saveChoice(r.Form[""choices""])
    http.Redirect(w, r, newUrl, http.StatusSeeOther)
}
</code></pre>

<p>And if your <code>newUrl</code> is supposed to return a proper html page to the browser, you don't need to use ajax. Use an html form.</p>

<pre><code>&lt;form action=""/postHandler"" method=""post""&gt;
   {{range .List}}
    &lt;input type=""checkbox"" name=""choices"" value=""{{.}}""&gt; &lt;span&gt;{{.}}&lt;/span&gt;&lt;br&gt;
   {{end}}
    &lt;input type=""submit"" value=""Submit""&gt;
&lt;/form&gt;
</code></pre>

<p>Notice <code>action</code> of the form is defined as <code>/postHandler</code>. Put the name of the endpoint that runs your <code>saveChoice</code> function there.</p>

<p>So to avoid <code>http: multiple response.WriteHeader calls</code> error you get use this code.</p>

<pre><code>  func checkcheck(w http.ResponseWriter, r *http.Request) {
    if r.Method == ""GET"" {
      sinfo := Stuff{
        List: some_slice
      }

      t, err := template.New("""").Parse(tpl_ds)
      checkErr(err)
      err = r.ParseForm()
      checkErr(err)
      err = t.Execute(w, sinfo)
      checkErr(err)
    }

    if r.Method == ""POST"" {
        saveChoice(r.Form[""choices""])
        http.Redirect(w, r, newUrl, http.StatusSeeOther)
    }
  }
</code></pre>

<p>Otherwise, the server attempts to render both the form and the redirected url which will result in mutiple calls to the response writer.</p>
","35934496"
"Golang struct initialization","9710","","<p>There is a simple struct like this:</p>

<pre><code>type Event struct {
    Id         int
    Name       string
}
</code></pre>

<p>What is the difference between these two initialization methods?</p>

<pre><code>e1 := Event{Id: 1, Name: ""event 1""}
e2 := &amp;Event{Id: 2, Name: ""event 2""}
</code></pre>

<p>Any why would I use either of these initialization methods?</p>

<p>Thanks</p>
","<p>The first method</p>

<pre><code>e1 := Event{Id: 1, Name: ""event 1""}
</code></pre>

<p>is initializing the variable <code>e1</code> as an value with type <code>Event</code>. The second </p>

<pre><code>e2 := &amp;Event{Id: 1, Name: ""event1""}
</code></pre>

<p>is initializing <code>e2</code> as a pointer to a value of type <code>Event</code> <s>As you stated in the comments, the set of methods defined on a value of a given type are a subset of the set of methods defined on a pointer to a value of that type. This means that if you have a method</p>

<pre><code>func (e Event) GetName() string {
    return e.Name
}
</code></pre>

<p>then both <code>e1</code> and <code>e2</code> can call this method, but if you had another method, say:</p>

<pre><code>func (e *Event) ChangeName(s string) {
    e.Name = s
}
</code></pre>

<p>Then <code>e1</code> is not able to use the <code>ChangeName</code> method, while <code>e2</code> is.</s></p>

<p><strong>This (<code>e1</code> is not able to use the <code>ChangeName</code> method, while <code>e2</code> is) is not the case (although it may have been at the time of writing for this help), thanks to @DannyChen for bringing this up and @GilbertNwaiwu for testing and posting in the comments below.</strong></p>

<p>(To address the striked out section above: The set of methods defined on a struct type consist of the methods defined for the type and pointers to the type. </p>

<p>Instead, Go now automatically dereferences the argument to a method, so that if a method receives a pointer, Go calls the method on a pointer to that struct, and if the method recieves a value, Go calls the method on the value pointed to by that struct. At this point my attempt to update this answer may be missing something important in semantics so if someone would like to correct this or clarify feel free to add a comment pointing to a more comprehensive answer. Here is a bit from the go playground illustrating this issue: <a href=""https://play.golang.org/p/JcD0izXZGz"" rel=""nofollow noreferrer"">https://play.golang.org/p/JcD0izXZGz</a>. </p>

<p>To some extent, this change in how pointers and values work as arguments to methods defined on function affects some areas of the discourse below but I will leave the rest unedited unless someone encourages me to update it as it seems to be more or less correct within the context of general semantics of languages that pass by value vs. pointer.) </p>

<p>As to the difference between pointers and values, this example is illustrative, as pointers are ordinarily used in Go to allow you mutate the values a variable is pointing to (but there are many more reasons one might use pointers as well! Although for typical use, this is normally a solid assumption). Thus, if you defined <code>ChangeName</code> instead as:</p>

<pre><code>func (e Event) ChangeName(s string) {
    e.Name = s
}
</code></pre>

<p>This function would not be very useful if called on the value receiver, as values (not pointers) won't keep changes that are made to them if they're passed into a function. This has to do with an area of language design around how variables are assigned and passed: <a href=""https://stackoverflow.com/questions/373419/whats-the-difference-between-passing-by-reference-vs-passing-by-value"">What&#39;s the difference between passing by reference vs. passing by value?</a></p>

<p>You can see this on this example in the Go Playground: <a href=""https://play.golang.org/p/j7yxvu3Fe6"" rel=""nofollow noreferrer"">https://play.golang.org/p/j7yxvu3Fe6</a></p>
","39780979"
"""invalid character '\x00' after top-level value""","9686","","<p>I am getting this error while unmarshalling json in a for loop.
The first time through the loop is unmarshalling fine but on the next iteration I am getting this error.</p>

<p>I am new to golang and this error message is not clear. Can someone please explain in what cases this error occurs and how I am supposed to avoid it.</p>
","<p>Thank you for answering my question.</p>

<p>This error came due to incorrect json before that there is little more story to this,</p>

<p>I have a field <strong>detail</strong> of type json.RawMessage I have SELECT query where I am trying to read json from the table and scan to <strong>detail</strong> and appending it to the struct.</p>

<p>After for loop ends when I look at <strong>detail</strong> JSON it got same record multiple times with and without end braces. After giving it so much thinking I figured casting detail with byte helped.</p>

<p>Eg: instead of just rows.Scan(&amp;detail) try this:
rows.Scan((*[]byte)(&amp;detail)) solved the above problem </p>
","25252597"
"Anonymous interface implementation in Golang","9685","","<p>In Go, is there a way to satisfy an interface anonymously? It doesn't seem like there is, but this was my best attempt.</p>

<p>(In the <a href=""http://play.golang.org/p/4i-8o087dg"" rel=""noreferrer"">Playground</a>)</p>

<pre><code>package main

import ""fmt""

type Thing interface {
    Item() float64
    SetItem(float64)
}

func newThing() Thing {
    item := 0.0
    return struct {
        Item (func() float64)
        SetItem (func(float64))
    }{
        Item: func() float64 { return item },
        SetItem: func(x float64) { item = x },
    }
}

func main() {
    thing := newThing()
    fmt.Println(""Hello, playground"")
    fmt.Println(thing)
}
</code></pre>
","<p>Go uses <a href=""http://golang.org/ref/spec#Method_sets"">method sets</a> to declare which methods belong to a type. There is only one way to declare functions with receiver types (methods):</p>

<pre><code>func (v T) methodName(...) ... { }
</code></pre>

<p>Since nested functions are forbidden, there is no way to define a method set on anonymous structs.</p>

<p>The second thing that will not allow this is that methods are read-only. <a href=""http://golang.org/ref/spec#Method_values"">Method values</a> were introduced to allow to pass methods around and use them in goroutines but not to manipulate the method set.</p>

<p>What you can do instead is to provide a ProtoThing and refer to underlying implementations of your anonymous struct (<a href=""http://play.golang.org/p/k0lCJqyF6p"">on play</a>):</p>

<pre><code>type ProtoThing struct { 
    itemMethod func() float64
    setItemMethod func(float64)
}

func (t ProtoThing) Item() float64 { return t.itemMethod() }
func (t ProtoThing) SetItem(x float64) { t.setItemMethod(x) }

// ...

t := struct { ProtoThing }{}

t.itemMethod = func() float64 { return 2.0 }
t.setItemMethod = func(x float64) { item = x }
</code></pre>

<p>This works because by embedding <code>ProtoThing</code> the method set is inherited. Thus the anonymous struct also satisfies the <code>Thing</code> interface.</p>
","31362378"
"Golang reverse proxy with multiple apps","9662","","<p>I want to serve two or more web applications running in a VM (different ports and some time in different directory under the same port) from the host machine and because I need the user to be logged before he can access those apps I can not use a static proxy like Nginx or Apache.</p>

<p>So here is my situation :</p>

<blockquote>
  <p>192.168.1.1 : is the host ip<br>
  192.168.1.2 : is the VM ip</p>
</blockquote>

<p>Inside the VM I have this :</p>

<blockquote>
  <p>192.168.1.2/owncloud : owncloud address<br>
  192.168.1.2:8080 : an other app<br>
  192.168.1.2:8888 : 3rd app</p>
</blockquote>

<p>I want to have this :  </p>

<blockquote>
  <p>192.168.1.1/app1 --> 192.168.1.2/owncloud<br>
  192.168.1.1/app2 --> 192.168.1.2:8080<br>
  192.168.1.1/app2 --> 192.168.1.2:8888</p>
</blockquote>

<p>I have tried to use golang httputil.ReverseProxy to achieve this routing but with no much success:
my code is based on this work : <a href=""https://gist.github.com/JalfResi/6287706"" rel=""nofollow"">gist</a></p>

<pre><code>package main

import(
    ""log""
    ""net/url""
    ""net/http""
    ""net/http/httputil""
)

func main() {
    remote, err := url.Parse(""http://192.168.1.2:8080"")
    if err != nil {
            panic(err)
    }

    proxy := httputil.NewSingleHostReverseProxy(remote)
    http.HandleFunc(""/app2"", handler(proxy))
    err = http.ListenAndServe("":80"", nil)
    if err != nil {
            panic(err)
    }
}

func handler(p *httputil.ReverseProxy) func(http.ResponseWriter, *http.Request) {
    return func(w http.ResponseWriter, r *http.Request) {
        log.Println(r.URL)
        r.URL.Path = ""/""                
            p.ServeHTTP(w, r)
    }
}
</code></pre>

<p><strong>Edit :</strong><br>
I have changed the vm ip address: 192.168.1.2 not 192.168.1.1</p>
","<p>You'd be better off doing this by hostname rather than URL. eg</p>

<pre><code>owncloud.domain.com -&gt; IP 192.168.1.2,
app2.domain.com     -&gt; IP 192.168.1.3
</code></pre>

<p>If you weren't already aware, the hostname is just a HTTP request header (Host: domain.com), so you can have several hostnames per IP (Apache calls this ""named virtual hosts"").</p>

<p>The benefit of using hostnames rather than URLs is that the web app at the other end isn't aware of the URLs you're prefixing yet needs to honour them, so you can run into problems with the URLs being written by the web app not working against the URLs being expected by the reverse proxy. Where as hostname based proxies should work as most web apps wont rewrite the domain name. (this is a huge generalisation though, some web apps will allow you to add a proxy address - but generally you'll run into less issues with hostnames)</p>

<p>The biggest issue is having to set up sub-domains on your name server. I'm assuming your registra / DNS providers allow you to create subdomains free of charge (most should), but if you're using something like dynamic DNS with this running off your home broadband connection, then you will run into problems and will have to buy your own domain name with the subdomains CNAME'ed to your dynamic DNS address (or use a paid account with your dynamic DNS providers if they offer subdomains).</p>

<p>One last thing, if you're looking into owncloud then you might also want to take a look at Pydio (formally AjaxExplore) as well. They both have different strengths and weaknesses, but in my personal opinion Pydio is a better product.</p>
","21207079"
"Convert uint64 to string in golang","9653","","<p>I am trying to print a <code>string</code> with a <code>uint64</code> but no combination of <code>strconv</code> methods that I use is working.</p>

<pre><code>log.Println(""The amount is: "" + strconv.Itoa((charge.Amount)))
</code></pre>

<p>Gives me:</p>

<p><code>cannot use charge.Amount (type uint64) as type int in argument to strconv.Itoa</code></p>

<p>How can I print this <code>string</code>?</p>
","<p><a href=""https://golang.org/pkg/strconv/#Itoa"" rel=""noreferrer""><code>strconv.Itoa()</code></a> expects a value of type <code>int</code>, so you have to give it that:</p>

<pre><code>log.Println(""The amount is: "" + strconv.Itoa(int(charge.Amount)))
</code></pre>

<p>But know that this may lose precision if <code>int</code> is 32-bit (while <code>uint64</code> is 64), also sign-ness is different. <a href=""https://golang.org/pkg/strconv/#FormatUint"" rel=""noreferrer""><code>strconv.FormatUint()</code></a> would be better as that expects a value of type <code>uint64</code>:</p>

<pre><code>log.Println(""The amount is: "" + strconv.FormatUint(charge.Amount, 10))
</code></pre>

<p>For more options, see this answer: <a href=""https://stackoverflow.com/questions/11123865/golang-format-a-string-without-printing/31742265#31742265"">Golang: format a string without printing?</a></p>

<p>If your purpose is to just print the value, you don't need to convert it, neither to <code>int</code> nor to <code>string</code>, use one of these:</p>

<pre><code>log.Println(""The amount is:"", charge.Amount)
log.Printf(""The amount is: %d\n"", charge.Amount)
</code></pre>
","41787650"
"Embedding text file into compiled executable","9646","","<p>I have some text file that I read from my Go program. I'd like to ship a single executable, without supplying that text file additionally.
How do I embed it into compilation?</p>

<p>The question is both for Windows and Linux.</p>
","<p>Use <a href=""https://github.com/jteeuwen/go-bindata"">go-bindata</a>. From the README:</p>

<blockquote>
  <p>This tool converts any file into managable Go source code. Useful for
  embedding binary data into a go program. The file data is optionally
  gzip compressed before being converted to a raw byte slice.</p>
</blockquote>
","17797641"
"Using sql database driver","9626","","<p>Could an end-user (development or production) please recommend an Sql driver package that preferably uses the ""database/sql"" package. I'm interested in Postgres, ODBC, MySql (and possibly something else but for high-volume - ie. not Sqlite) that can preferably be used on Windows and/or Linux (preferably both). To be of interest to me it likely needs to have recently been updated /maintained and must work with latest Go release. Efficiency (throughput) is obviously important. Any relevant comments are welcome.</p>
","<p>GO-SQL-Driver(MySQL):</p>

<blockquote>
  <p><a href=""https://github.com/Go-SQL-Driver/MySQL"">https://github.com/Go-SQL-Driver/MySQL</a></p>
</blockquote>

<p>Sample table:</p>

<pre><code>CREATE TABLE `userinfo` (
    `uid` INT(10) NOT NULL AUTO_INCREMENT,
    `username` VARCHAR(64) NULL DEFAULT NULL,
    `departname` VARCHAR(64) NULL DEFAULT NULL,
    `created` DATE NULL DEFAULT NULL,
    PRIMARY KEY (`uid`)
)

CREATE TABLE `userdetail` (
    `uid` INT(10) NOT NULL DEFAULT '0',
    `intro` TEXT NULL,
    `profile` TEXT NULL,
    PRIMARY KEY (`uid`)
)
</code></pre>

<p>Sample code:</p>

<pre><code>package main

import (
    _ ""github.com/Go-SQL-Driver/MySQL""
    ""database/sql""
    ""fmt""
)

func main() {
    db, err := sql.Open(""mysql"", ""reckhou:reckhou@/test?charset=utf8"")
    checkErr(err)

    //Insert
    stmt, err := db.Prepare(""INSERT userinfo SET username=?,departname=?,created=?"")
    checkErr(err)

    res, err := stmt.Exec(""reckhou"", ""IT"", ""2010-10-02"")
    checkErr(err)

    id, err := res.LastInsertId()
    checkErr(err)

    fmt.Println(id)

    // Update
    stmt, err = db.Prepare(""update userinfo set username=? where uid=?"")
    checkErr(err)

    res, err = stmt.Exec(""update"", id)
    checkErr(err)

    affect, err := res.RowsAffected()
    checkErr(err)

    fmt.Println(affect)

    //Query
    rows, err := db.Query(""SELECT * FROM userinfo"")
    checkErr(err)

    for rows.Next() {
        var uid int
        var username string
        var department string
        var created string
        err = rows.Scan(&amp;uid, &amp;username, &amp;department, &amp;created)
        checkErr(err)
        fmt.Println(uid)
        fmt.Println(username)
        fmt.Println(department)
        fmt.Println(created)
    }

    //Delete
    stmt, err = db.Prepare(""delete from userinfo where uid=?"")
    checkErr(err)

    res, err = stmt.Exec(id)
    checkErr(err)

    affect, err = res.RowsAffected()
    checkErr(err)

    fmt.Println(affect)

    db.Close()

}

func checkErr(err error) {
    if err != nil {
        panic(err)
    }
}
</code></pre>

<p>PostgreSQL:</p>

<blockquote>
  <p><a href=""https://github.com/bmizerany/pq"">https://github.com/bmizerany/pq</a></p>
</blockquote>

<p>Sample table:</p>

<pre><code>CREATE TABLE userinfo
(
    uid serial NOT NULL,
    username character varying(100) NOT NULL,
    departname character varying(500) NOT NULL,
    Created date,
    CONSTRAINT userinfo_pkey PRIMARY KEY (uid)
)
WITH (OIDS=FALSE);

CREATE TABLE userdeatail
(
    uid integer,
    intro character varying(100),
    profile character varying(100)
)
WITH(OIDS=FALSE);
</code></pre>

<p>Sample code:</p>

<pre><code>import (
    ""database/sql""
    ""fmt""
    _ ""github.com/bmizerany/pq""
)

func main() {
    db, err := sql.Open(""postgres"", ""user=reckhou password=reckhou dbname=test sslmode=disable"")
    checkErr(err)

    //Insert
    stmt, err := db.Prepare(""INSERT INTO userinfo(username,departname,created) VALUES($1,$2,$3) RETURNING uid"")
    checkErr(err)

    res, err := stmt.Exec(""reckhou"", ""IT"", ""2010-10-01"")
    checkErr(err)

    id, err := res.LastInsertId()
    checkErr(err)

    fmt.Println(id)

    // Update
    stmt, err = db.Prepare(""update userinfo set username=$1 where uid=$2"")
    checkErr(err)

    res, err = stmt.Exec(""update"", 1)
    checkErr(err)

    affect, err := res.RowsAffected()
    checkErr(err)

    fmt.Println(affect)

    // Query
    rows, err := db.Query(""SELECT * FROM userinfo"")
    checkErr(err)

    for rows.Next() {
        var uid int
        var username string
        var department string
        var created string
        err = rows.Scan(&amp;uid, &amp;username, &amp;department, &amp;created)
        checkErr(err)
        fmt.Println(uid)
        fmt.Println(username)
        fmt.Println(department)
        fmt.Println(created)
    }

    // Delete
    stmt, err = db.Prepare(""delete from userinfo where uid=$1"")
    checkErr(err)

    res, err = stmt.Exec(1)
    checkErr(err)

    affect, err = res.RowsAffected()
    checkErr(err)

    fmt.Println(affect)

    db.Close()

}

func checkErr(err error) {
    if err != nil {
        panic(err)
    }
}
</code></pre>
","16058741"
"Golang: how to specify certificate in TLS config for http client","9625","","<p>I have a cert file, that location is: <code>/usr/abc/my.crt</code> and I want to use that cert for my tls config, so that my http client uses that certificate when communicate with other servers. My current code is as follows:</p>

<pre><code>mTLSConfig := &amp;tls.Config {
    CipherSuites: []uint16 {
        tls.TLS_RSA_WITH_RC4_128_SHA,
        tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA,
        tls.TLS_RSA_WITH_AES_128_CBC_SHA,
        tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA,
        tls.TLS_RSA_WITH_AES_128_CBC_SHA,
        tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
    }
}

mTLSConfig.PreferServerCipherSuites = true
mTLSConfig.MinVersion = tls.VersionTLS10
mTLSConfig.MaxVersion = tls.VersionTLS10

tr := &amp;http.Transport{
    TLSClientConfig: mTLSConfig,
}

c := &amp;http.Client{Transport: tr}
</code></pre>

<p>So how to assign a certificate in my TLS config? I see the certificate settings at <a href=""http://golang.org/pkg/crypto/tls/#Config"">http://golang.org/pkg/crypto/tls/#Config</a> can someone suggest how to config my cert location there?</p>

<p><code>mTLSConfig.Config{Certificates: []tls.Certificate{'/usr/abc/my.crt'}}</code> &lt;-- is wrong because I am passing string.right? I DON'T have ANY other files such as .pem or .key etc, just only this my.cert. I am blank how to do it?</p>

<p>Earlier, I had edited the go source code <a href=""http://golang.org/src/pkg/crypto/x509/root_unix.go"">http://golang.org/src/pkg/crypto/x509/root_unix.go</a>  and added <code>/usr/abc/my.crt</code> after line no. 12 and it worked. But the problem is my certificate file location can change, so I have removed the hardcoded line from root_unix.go and trying to pass it dynamically, when building TLSConfig.</p>
","<p>You can replace the system CA set by providing a root CA pool in tls.Config.</p>

<pre><code>certs := x509.NewCertPool()

pemData, err := ioutil.ReadFile(pemPath)
if err != nil {
    // do error
}
certs.AppendCertsFromPEM(pemData)
mTLSConfig.RootCAs = certs
</code></pre>

<p>If you still want the system's roots however, I think you'll need to recreate the functionality in <code>initSystemRoots()</code>. I don't see any exposed method for merging a cert into the default system roots.</p>
","21564404"
"Command not found go — on Mac after installing Go","9580","","<p>I want to use golang, but I'm having trouble running the go command. I installed go1.5.2 darwin/amd64, but when I run the command <code>go version</code>, I get an error in the terminal <code>zsh: command not found: go</code>.  I added the path <code>export PATH=$PATH:/usr/local/go/bin</code> to the bash profile, but I still get the error (I restarted the terminal btw).  I uninstalled and reinstalled, but no luck.  Can anybody help me troubleshoot this?  I'm not sure if there was an error in the installation, but it downloaded ok. I may have to download an older version of go if this doesn't workout.</p>
","<p>Like <a href=""https://stackoverflow.com/users/1020958/bjhaid"">bjhaid</a> mentioned in the comments above: </p>

<p>This is happening because you must add your <code>PATH</code> to your <code>~/.zshrc</code> file.</p>

<p>in the <code>~/.zshrc</code> you should add the line:</p>

<pre><code>export PATH=$PATH:/usr/local/go/bin
</code></pre>

<p>you should then source you <code>.zshrc</code> file:</p>

<pre><code>. ~/.zshrc
</code></pre>
","35076805"
"Go StartsWith(str string)","9565","","<p>Is there a StartsWith(str1, str2 string) function that can check if str1 is a prefix of str2 in Go language?</p>

<p>I want a function similar to the Java startsWith <a href=""http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html#startsWith(java.lang.String"" rel=""noreferrer"">http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html#startsWith(java.lang.String</a>) </p>
","<p>The strings package has what you are looking for. Specifically the HasPrefix function: <a href=""http://golang.org/pkg/strings/#HasPrefix"" rel=""noreferrer"">http://golang.org/pkg/strings/#HasPrefix</a></p>

<p>Example:</p>

<pre><code>fmt.Println(strings.HasPrefix(""my string"", ""prefix""))  // false
fmt.Println(strings.HasPrefix(""my string"", ""my""))      // true
</code></pre>

<p>That package is full of a lot of different string helper functions you should check out.</p>
","12667373"
"vim - automatically formatting golang source code when saving","9561","","<p>I'm using vim with the <a href=""https://github.com/jnwhiteh/vim-golang"">vim-golang</a> plugin. This plugin comes with <a href=""https://github.com/jnwhiteh/vim-golang/blob/master/ftplugin/go/fmt.vim"">a function called :Fmt</a> that ""reformats"" the source code using <a href=""http://gofmt.com/"">gofmt</a>, a command-line executable.</p>

<p>I want to invoke the :Fmt function each time that I save the file, so it is continuously re-formatted. I think this should be done with a <a href=""http://vimdoc.sourceforge.net/htmldoc/autocmd.html"">autocmd</a> directive. But I have two doubts:</p>

<ol>
<li>I could not find a way to execute the function. I tried writting Fmt and :Fmt at the end of the autocmd line, but it didn't seem to work. I think I miss something, like ""call"".</li>
<li>I want this to happen only when saving a file of filetype 'go'. I don't know how to combine those two conditions - I can activate variables depending on the file type, and I can do small stuff, like removing trailing spaces, whenever a file is saved, but separatedly.</li>
</ol>

<p>So this is what I have so far:</p>

<pre><code>"" I can set variables for go like this
autocmd FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4 nolist

"" I can clean trailing spaces(conserving cursor position) on save like this
autocmd BufWritePre * kz|:%s/\s\+$//e|'z

"" None of these worked:
autocmd BufWritePre,FileType go Fmt
autocmd BufWritePre,FileType go :Fmt
</code></pre>
","<p>The <code>FileType</code> event doesn't fire on buffer writes; <code>BufWritePre</code> is the correct one, but you need to provide a file pattern, e.g. <code>*.go</code>:</p>

<pre><code>autocmd BufWritePre *.go Fmt
</code></pre>

<p>The only downside is that this duplicates the detection of the <em>go</em> filetype. You could delegate this by hooking into the <code>FileType</code> event, and then define the formatting autocmd for each Go buffer by using the special <code>&lt;buffer&gt;</code> pattern:</p>

<pre><code>autocmd FileType go autocmd BufWritePre &lt;buffer&gt; Fmt
</code></pre>

<p>This has the downside that if the filetype ever gets set multiple times, you'll run the formatting multiple times, too. That could be solved via a custom <code>:augroup</code>, but now it becomes really complex. Or, if you're really sure that this is the only <code>BufWritePre</code> autocmd for Go buffers, you could use <code>:autocmd! BufWritePre ...</code> (with a <code>!</code>).</p>
","10969574"
"""variable declared and not used"" compilation error","9558","","<p>I am learning Google's new language <a href=""http://golang.org/"" rel=""nofollow noreferrer"">Go</a>. I am just trying stuff out and I noticed
that if you declare a variable and do not do anything with it the go compiler (<em>8g</em> in my case) fails to<br>
compile with this error: <code>hello.go:9: error declared and not used</code>. I was suprised at this since most language compilers just <strong>warn</strong> you about unused variables but still compile.</p>

<p>Is there anyway I can get around this? I checked the documentation for the compiler and I don't see anything that would change this behaviour. Is there a way to just delete <code>error</code> so that this will compile?</p>

<pre><code>package main

import ""fmt""
import ""os""

func main()
{
     fmt.Printf(""Hello World\n"");
     cwd, error := os.Getwd();
     fmt.Printf(cwd);
}
</code></pre>
","<p>You could try this:</p>

<pre><code>cwd, _ := os.Getwd();
</code></pre>

<p>but it seems like it would be better to keep the error like in Jurily's answer so you know if something went wrong.</p>
","1718801"
"Golang YAML reading with map of maps","9557","","<p>Here is my YAML file.</p>

<pre><code>description: fruits are delicious
fruits:
  apple:
    - red
    - sweet
  lemon:
    - yellow
    - sour
</code></pre>

<p>I can read a flatter version of this with the <code>gopkg.in/yaml.v1</code> package but I'm stuck trying to figure out how to read this YAML file when it's got what seems like a map of maps.</p>

<pre><code>package main

import (
  ""fmt""
  ""gopkg.in/yaml.v1""
  ""io/ioutil""
  ""path/filepath""
)

type Config struct {
  Description string
  Fruits []Fruit
}

type Fruit struct {
  Name string
  Properties []string
}

func main() {
  filename, _ := filepath.Abs(""./file.yml"")
  yamlFile, err := ioutil.ReadFile(filename)

  if err != nil {
    panic(err)
  }

  var config Config

  err = yaml.Unmarshal(yamlFile, &amp;config)
  if err != nil {
    panic(err)
  }

  fmt.Printf(""Value: %#v\n"", config.Description)
  fmt.Printf(""Value: %#v\n"", config.Fruits)
}
</code></pre>

<p>It can't get the nested Fruits out.  It seems to come back empty.  <code>Value: []main.Fruit(nil)</code>.</p>
","<p>Use a map of string slices to represent the fruit properties:</p>

<pre><code>type Config struct {
  Description string
  Fruits map[string][]string
}
</code></pre>

<p>Printing the unmarshaled configuration with</p>

<pre><code>fmt.Printf(""%#v\n"", config)
</code></pre>

<p>produces the following output (not including the whitespace I added for readability):</p>

<pre><code>main.Config{Description:""fruits are delicious"", 
     Fruits:map[string][]string{
          ""lemon"":[]string{""yellow"", ""sour""}, 
          ""apple"":[]string{""red"", ""sweet""}}}
</code></pre>
","26290943"
"Difference between http.Handle and http.HandleFunc?","9550","","<p>The Go docs have the following example for the http package:</p>

<pre><code>http.Handle(""/foo"", fooHandler)
http.HandleFunc(""/bar"", func(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, ""Hello, %q"", html.EscapeString(r.URL.Path))
})
</code></pre>

<p>I'm having sort of a difficulty understanding the difference between Handle and HandleFunc and why two are needed. Can somebody try to explain to a new Gopher in clear words?</p>
","<p>Basically, the HTTP server's ""mux"" has a map of path -> handler interface</p>

<p>Interfaces are used here, I assume, to allow you to implement complex path handlers that have state.</p>

<p>For example the <a href=""http://golang.org/src/pkg/net/http/fs.go?s=12662:12702#L418"">file server</a> from the standard package is a struct that contains the root dir for file service and implements the handler interface.</p>

<p>that said, for simple stuff, a func is easier and more clear.  So they added a special generator so you can easily pass in a func.</p>

<p>Take a look at: <a href=""http://golang.org/src/pkg/net/http/server.go?s=42132:42200#L1216"">server.go</a></p>

<p>from line: 1216 (as of today)</p>

<pre><code>  1216  type HandlerFunc func(ResponseWriter, *Request)
  1217  
  1218  // ServeHTTP calls f(w, r).
  1219  func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) {
  1220      f(w, r)
  1221  }
</code></pre>

<p>What they are doing is implementing the interface on a custom type (which happens to match the api of the interface) that just calls itself.</p>
","21958412"
"Go, Golang : traverse through struct","9528","","<p><a href=""http://play.golang.org/p/fJACxhSrXX"" rel=""nofollow"">http://play.golang.org/p/fJACxhSrXX</a></p>

<p>I want to traverse through an array of structs.</p>

<pre><code> func GetTotalWeight(data_arr []struct) int {
    total := 0
    for _, elem := range data_arr {
        total += elem.weight
    }
    return total
 }
</code></pre>

<p>But I am getting syntax error</p>

<pre><code>   syntax error: unexpected ), expecting {
</code></pre>

<p>Is it possible to traverse through structs?</p>
","<p>Your function is almost entirely correct. You want to define TrainData as a <code>type</code>, and change the type signature of <code>GetTotalWeight</code> to <code>[]TrainData</code>, not <code>[]struct</code>, like so:</p>

<pre><code>import ""fmt""

type TrainData struct {
    sentence string
    sentiment string
    weight int
}

var TrainDataCity = []TrainData {
    {""I love the weather here."", ""pos"", 1700},
    {""This is an amazing place!"", ""pos"", 2000},
    {""I feel very good about its food and atmosphere."", ""pos"", 2000},
    {""The location is very accessible."", ""pos"", 1500},
    {""One of the best cities I've ever been."", ""pos"", 2000},
    {""Definitely want to visit again."", ""pos"", 2000},
    {""I do not like this area."", ""neg"", 500},
    {""I am tired of this city."", ""neg"", 700},
    {""I can't deal with this town anymore."", ""neg"", 300},
    {""The weather is terrible."", ""neg"", 300},
    {""I hate this city."", ""neg"", 100},
    {""I won't come back!"", ""neg"", 200},
}

func GetTotalWeight(data_arr []TrainData) int {
    total := 0
    for _, elem := range data_arr {
        total += elem.weight
    }
    return total
}

func main() {
    fmt.Println(""Hello, playground"")
    fmt.Println(GetTotalWeight(TrainDataCity))
}
</code></pre>

<p>Running this gives:</p>

<pre><code>Hello, playground
13300
</code></pre>
","19439503"
"Looking for reasonable stack implementation in golang?","9524","","<p>So far my naive approach is </p>

<pre><code>type stack []int

func (s *stack) Push(v int) {
    *s = append(*s, v)
}

func (s *stack) Pop() int {
    res:=(*s)[len(*s)-1]
    *s=(*s)[:len(*s)-1]
    return res
}
</code></pre>

<p>it works - <a href=""https://play.golang.org/p/0-auehHDzY"" rel=""noreferrer"">playground</a>, but looks ugly and has too much dereferencing. Can I do better? </p>
","<p>It's a matter of style and personal taste, <strong>your code is fine</strong> (apart from not being thread safe and panicking if you pop from an empty stack). To simplify it a bit you can work with value methods and return the stack itself, it's slightly more elegant <em>to some tastes</em>. i.e.</p>

<pre><code>type stack []int

func (s stack) Push(v int) stack {
    return append(s, v)
}

func (s stack) Pop() (stack, int) {
    // FIXME: What do we do if the stack is empty, though?

    l := len(s)
    return  s[:l-1], s[l-1]
}


func main(){
    s := make(stack,0)
    s = s.Push(1)
    s = s.Push(2)
    s = s.Push(3)

    s, p := s.Pop()
    fmt.Println(p)

}
</code></pre>

<p>Another approach is to wrap it in a struct, so you can also easily add a mutex to avoid race conditions, etc. something like:</p>

<pre><code>type stack struct {
     lock sync.Mutex // you don't have to do this if you don't want thread safety
     s []int
}

func NewStack() *stack {
    return &amp;stack {sync.Mutex{}, make([]int,0), }
}

func (s *stack) Push(v int) {
    s.lock.Lock()
    defer s.lock.Unlock()

    s.s = append(s.s, v)
}

func (s *stack) Pop() (int, error) {
    s.lock.Lock()
    defer s.lock.Unlock()


    l := len(s.s)
    if l == 0 {
        return 0, errors.New(""Empty Stack"")
    }

    res := s.s[l-1]
    s.s = s.s[:l-1]
    return res, nil
}


func main(){
    s := NewStack()
    s.Push(1)
    s.Push(2)
    s.Push(3)
    fmt.Println(s.Pop())
    fmt.Println(s.Pop())
    fmt.Println(s.Pop())
}
</code></pre>
","28542256"
"Golang parse form","9515","","<p>If I have the following form setup:</p>

<pre><code>{{ range $key, $value := .Scores }}
    &lt;input id=""{{$value.Id}}_rating__1"" type=""radio"" name=""rating[{{$value.Id}}]"" value=""-1""&gt;
    &lt;input id=""{{$value.Id}}_rating__0"" type=""radio"" name=""rating[{{$value.Id}}]"" value=""0""&gt;
    &lt;input id=""{{$value.Id}}_rating__2"" type=""radio"" name=""rating[{{$value.Id}}]"" value=""+1""&gt;
{{ end }}
</code></pre>

<p>How can I then extract that data correctly? Knowing that there <code>.Scores</code> can contain multiple structs</p>

<pre><code>func categoryViewSubmit(w http.ResponseWriter, r *http.Request) {
    err := r.ParseForm()
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(""POST"")

    fmt.Printf(""%+v\n"", r.Form()) // annot call non-function r.Form (type url.Values)
    fmt.Printf(""%+v\n"", r.FormValue(""rating"")) // Returns nothing
}
</code></pre>
","<p>The form keys look like <code>rating[id]</code> where <code>id</code> is a value identifier.  To get one of the values, call <code>r.FormValue(""rating[id]"")</code> after substituting <code>id</code> for an actual id value.</p>

<p>I suggest printing the form to see what's going on:</p>

<pre><code>fmt.Printf(""%+v\n"", r.Form)  // No () following Form, Form is not a function
</code></pre>

<p>The <a href=""http://godoc.org/net/http#Request.Form"" rel=""noreferrer"">form</a> is an <a href=""http://godoc.org/net/url#Values"" rel=""noreferrer"">url.Values</a>. An url.Values is a map[string][]string. You can iterate through the form as follows:</p>

<pre><code>for key, values := range r.Form {   // range over map
  for _, value := range values {    // range over []string
     fmt.Println(key, value)
  }
}
</code></pre>
","28259624"
"Go: unexpected EOF while reading from a socket","9507","","<p>I have the following simple golang program to download Google's privacy policy. Unfortunately it always crashes with the error <code>unexpected EOF</code> after reading 6861 bytes, even though the document is much longer. Why?</p>

<pre><code>package main

import ""net""
import ""fmt""
import ""io""
import ""os""

func die(msg string, s os.Error) {
    fmt.Printf(""%s crashed: %v\n"", msg, s)
    os.Exit(1)
}

func main() {
    fd, err := net.Dial(""tcp"", ""google.com:80"")
    if err != nil { die(""dial"", err) }

    req := []byte(""GET /intl/en/privacy/ HTTP/1.0\r\nHost: www.google.com\r\n\r\n"")
    _, err = fd.Write(req)
    if err != nil { die(""dial write"", err) }

    buf := make([]byte, 1024)
    nr := 1

    for nr &gt; 0 {
        nr, err = io.ReadFull(fd, buf)
        if err != nil { die(""dial read"", err) }
        fmt.Printf(""read %d\n"", nr)
    }
}
</code></pre>

<p>outputs:</p>

<pre><code>read 1024
read 1024
read 1024
read 1024
read 1024
read 1024
dial read crashed: unexpected EOF
</code></pre>
","<p>Function <code>io.ReadFull(fd, buf)</code> should be used only when you <strong>know</strong> that <code>fd</code> can feed <strong>at least</strong> <code>len(buf)</code> bytes.</p>

<p>Instead, try the following:</p>

<pre><code>var buf bytes.Buffer

nr, err := io.Copy(&amp;buf, fd)
if err != nil {
    die(""dial read"", err)
}
</code></pre>

<p>If copying to a file, use an <code>os.File</code> instead of <code>bytes.Buffer</code>.</p>
","7944069"
"Resolving an invalid memory address or nil pointer dereference","9503","","<p>Banging my head on this one. I can't get an HTTP Response to assign to a struct.</p>

<p>I have my structs set up like so:</p>

<pre><code>type DataConnect struct {
    Response *Response
}

type Response struct {
    response []byte
    errors   []string
}
</code></pre>

<p>Then the function in question is laid out like so (trimmed for readability):</p>

<pre><code>137 func (d *DataConnect) send() bool {

    ...

154    out, err := ioutil.ReadAll(resp.Body)
155    if err != nil {
156        fmt.Println(err)
157    }
158
159    fmt.Printf(""%s\n"", out) // THIS WORKS
160    d.Response.response = out // THIS DOES NOT WORK
161 }
</code></pre>

<p>Doing that results in the following error:</p>

<pre><code>panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x0 pc=0x36532]

goroutine 1 [running]:
github.com/DataConnect.(*DataConnect).send(0xc2000af4a0, 0x232a00)
github.com/DataConnect/DataConnect.go:160 +0xc22
</code></pre>

<p>Now if I change <code>DataConnect.Response.response</code> to type <code>interface{}</code> I can save successfully to it, however I need it in <code>[]byte</code> as later I will be doing a json.Unmarshal on the content.</p>

<p>Does anybody have any idea why this isn't working?</p>
","<p>I suspect either d is nil or d.Response is nil on line 160. If that is true, you need to decide if that is appropriate and change your code if it is not.</p>
","18753141"
"In golang, is it possible to get reflect.Type from the type itself, from name as string?","9492","","<pre><code>type t1 struct { i int; s string }
var v1 reflect.Type = /* how to set to t1's reflect.Type? */
</code></pre>

<ol>
<li><p>is it possible to get the reflect.Type of t1 without having to instantiate it?</p></li>
<li><p>is it possible to get the reflect.Type of t1 from having its name ""t1"" as a string?</p></li>
</ol>
","<p>On 1, yes, kinda:</p>

<pre><code>var v1 reflect.Type = reflect.TypeOf((*t1)(nil)).Elem()
fmt.Println(v1)  // prints ""main.t1""
</code></pre>

<p>No instantiation needed. However, Go doesn't have type literals, which is I think what you're asking for. To get the runtime value of a type, you need to have a value of some sort. If you don't want to or can't create the value at runtime, you can pull it from a typed nil. If you don't like the idea of looking this up every time, you can store this runtime type in a variable.</p>

<p>On 2, no, not really. This would require the Go runtime to maintain a map of all types in the current binary, which has a number of problems. You <em>could</em> create a type registry package, and register all types you may want to retrieve by string, but that's always going to be incomplete, and if you know what type you want, you can always just use TypeOf. The situation is made a bit more complicated by the fact that you can have anonymous types, and the name like ""t1"" isn't certain to be unique, as another package may have a type of the same name. It is possible for the Go runtime to provide a function that gives a type from a string name, but I doubt that will happen.</p>
","6391185"
"Google Go and SQLite: What library to use and how?","9477","","<p>I'm fairly new to Google's Go, but I'm trying to learn more by writing a simple application to talk to an SQLite 3 database. So far I've come across a few different sqlite libraries, but they all seem to be sparsely maintained or have little or no documentation.</p>

<p>I was hoping someone here would be able to point me in the right direction by suggesting a library to use for SQLite 3, and giving me some demo code for simple INSERTs and SELECTs.</p>

<p>Thank you for your time.</p>
","<p><strong>Edit:</strong> relevant also for Go 1.</p>

<p>With a recent go weekly, and an installed Sqlite3 library on a Linux system, you should:</p>

<pre><code>$ go get github.com/mattn/go-sqlite3
sqlite3.go: In function ‘_cgo_7e09c699097a_Cfunc_sqlite3_prepare_v2’:
sqlite3.go:198:2: warning: passing argument 5 of ‘sqlite3_prepare_v2’ from incompatible pointer type [enabled by default]
/usr/local/include/sqlite3.h:2924:16: note: expected ‘const char **’ but argument is of type ‘char **’
$ # those warnings are OK, don't worry
$ mkdir $GOPATH/src/myproject &amp;&amp; cd $GOPATH/src/myproject
$ wget https://raw.github.com/mattn/go-sqlite3/master/example/main.go
$ vi main.go # this is an example how to use go-sqlite3
</code></pre>

<p>This should get you started.</p>
","9349351"
"How can I pass a slice as a variadic input?","9461","","<p>I have a function <code>func more(... t)</code>. I'm wondering if it's possible to use a slice to populate a list of arguments <code>...</code> . </p>

<p>I'm trying to solve the following program. Basically to mimic a normal shell which receives the command as a string.
 <a href=""http://golang.org/pkg/os/exec/#Command"" rel=""noreferrer"">Command</a> function requires a ""list"" of arguments and I don't see how I can convert a string into a such list </p>

<pre><code>    import ""os/exec""
    import ""strings""
    func main(){
        plainCommand  := ""echo hello world""
        sliceA := strings.Fields(plainCommand)
        cmd := exec.Command(sliceA)
    }
</code></pre>
","<blockquote>
  <p><a href=""http://golang.org/ref/spec"">The Go Programming Language Specification</a></p>
  
  <p><a href=""http://golang.org/ref/spec#Passing_arguments_to_..._parameters"">Passing arguments to ... parameters</a></p>
  
  <p>If f is variadic with final parameter type ...T, then within the
  function the argument is equivalent to a parameter of type []T. At
  each call of f, the argument passed to the final parameter is a new
  slice of type []T whose successive elements are the actual arguments,
  which all must be assignable to the type T. The length of the slice is
  therefore the number of arguments bound to the final parameter and may
  differ for each call site.</p>
</blockquote>

<hr>

<blockquote>
  <p><a href=""http://golang.org/pkg/os/exec/"">Package exec</a></p>
  
  <p><a href=""http://golang.org/pkg/os/exec/#Command"">func Command</a></p>

<pre><code>func Command(name string, arg ...string) *Cmd
</code></pre>
  
  <p>Command returns the Cmd struct to execute the named program with the
  given arguments.</p>
  
  <p>The returned Cmd's Args field is constructed from the command name
  followed by the elements of arg, so arg should not include the command
  name itself. For example, Command(""echo"", ""hello"")</p>
</blockquote>

<hr>

<p>For example,</p>

<pre><code>package main

import (
    ""fmt""
    ""os/exec""
)

func main() {
    name := ""echo""
    args := []string{""hello"", ""world""}
    cmd := exec.Command(name, args...)
    out, err := cmd.Output()
    if err != nil {
        fmt.Println(err)
    }
    fmt.Println(string(out))
}
</code></pre>

<p>Output:</p>

<pre><code>hello world
</code></pre>
","23724092"
"Golang fork process","9447","","<p>I need help understanding how to demonize a process in Go.</p>

<pre><code>package main

import (
   ""fmt""
   ""os""
)

func start() {
   var procAttr os.ProcAttr 
   procAttr.Files = []*os.File{nil, nil, nil}
   _, err := os.StartProcess(""/Path/prog"", nil, &amp;procAttr)
   if err != nil {
       fmt.Printf(""%v"", err)
   }
}


func main () {
   start()
} 
</code></pre>

<p>If you start this code on the command line the program returns control, but is still connected with cmd. Closing the cmd closes the program.</p>

<p>How can I decouple it from the cmd?  Adding:</p>

<pre><code>procAttr.Sys.HideWindow = true
</code></pre>

<p>Results in this error: ""panic"" to wrong memory pointer</p>
","<p>I asked in 'golang-nuts', and found out that golang has a link option:</p>

<pre><code>go tool 8l -o output.exe -Hwindowsgui input.8
</code></pre>
","10070021"
"Using named matches from Go regex","9441","","<p>I'm coming from python, so I'm probably just not looking at this the right way.  I'd like to create a fairly complicated regex and be able to access the fields match by name.  I can't seem to find a good example.  The closest I've managed to get is this:</p>

<pre><code>package main

import (
  ""fmt""
  ""regexp""
)

var myExp = regexp.MustCompile(`(?P&lt;first&gt;\d+)\.(\d+).(?P&lt;second&gt;\d+)`)

func main() {
  fmt.Printf(""%+v"", myExp.FindStringSubmatch(""1234.5678.9""))

  match := myExp.FindStringSubmatch(""1234.5678.9"")
    for i, name := range myExp.SubexpNames() {
        fmt.Printf(""'%s'\t %d -&gt; %s\n"", name, i, match[i])
    }
    //fmt.Printf(""by name: %s %s\n"", match[""first""], match[""second""])
}
</code></pre>

<p>The commented out line is how I would expect to access the named fields in python.  What's the equivalent way to do this in go?   Or if I need to convert the match to a map, what's the most idiomatic way in go to make and then access the map?</p>
","<p>You can reference your named capture groups by utilizing <code>map</code> as follows:</p>

<pre><code>package main

import (
  ""fmt""
  ""regexp""
)

var myExp = regexp.MustCompile(`(?P&lt;first&gt;\d+)\.(\d+).(?P&lt;second&gt;\d+)`)

func main() {
  match  := myExp.FindStringSubmatch(""1234.5678.9"")
  result := make(map[string]string)
  for i, name := range myExp.SubexpNames() {
    if i != 0 { result[name] = match[i] }
  }
  fmt.Printf(""by name: %s %s\n"", result[""first""], result[""second""])
}
</code></pre>

<p><kbd><a href=""https://play.golang.org/p/xmDojHdX69"" rel=""noreferrer""><strong>GoPlay</strong></a></kbd></p>
","20751656"
"How to loop through a UTF-8 string in Go?","9439","","<p>I have a string in Chinese:</p>

<pre><code>x = ""你好""
</code></pre>

<p>I'd like to loop through it and do something with each character in it, something like:</p>

<pre><code>for i, len := 0, len(x); i &lt; len; i++ {
    foo( x[i] ) // do sth.
}
</code></pre>

<p>I found that <code>len(x)</code> would return <code>6</code> instead of <code>2</code>, after Google I found the method <code>RuneCountInString</code> which would return the real length of the string, but I still don't know how to loop to make <code>x[i]</code> get the right character, <code>x[0] == '你'</code> for example..</p>

<p>Thanks</p>
","<p>Use <code>range</code>.</p>

<pre><code>x = ""你好""
for _, c := range x {
    // do something with c
}
</code></pre>

<p>If you want random-access, you'll need to use code unit indexes rather than character indexes.  Fortunately, there is no good reason to need character indexes, so code unit indexes are fine.</p>

<p>Most languages have the exact same problem.  For example, Java and C# use UTF-16, which is also a variable-length encoding (but some people pretend it isn't).</p>

<p>See the <a href=""http://www.utf8everywhere.org/"" rel=""noreferrer"">UTF-8 Manifesto</a> for more information about why Go uses UTF-8.</p>
","12740259"
"Go, AppEngine: How to structure templates for application","9434","","<p>How are people handling the use of templates in their Go-based AppEngine applications?</p>

<p>Specifically, I'm looking for a project structure that affords the following:</p>

<ul>
<li>Hierarchical (directory) structure of templates and partial templates</li>
<li>Allow me to use HTML tools/editors on my templates (embedding template text in xxx.go files makes this difficult)</li>
<li>Automatic reload of template text when on dev server</li>
</ul>

<p>Potential stumbling blocks are:</p>

<ul>
<li>template.ParseGlob() will not traverse recursively.</li>
<li>For performance reasons it has been recommended not to upload your templates as raw text files (because those text files reside on different servers than executing code).</li>
</ul>

<p>Please note that I am not looking for a tutorial/examples of the use of the template package.  This is more of an app structure question.  That being said, if you have code that solves the above problems, I would love to see it.  Thanks in advance.</p>
","<p>One of my favorite features of Go is the ability to easily add handlers inside of packages. This greatly simplifies the processes of writing modular code.</p>

<p>For Example:</p>

<p><strong>File Structure</strong></p>

<pre><code>|-- app.yaml
|-- app
|   +-- http.go
|-- templates
|   +-- base.html
+-- github.com
    +-- storeski
        +-- appengine
            |-- products
            |   |-- http.go
            |   +-- templates
            |       |-- list.html
            |       +-- detail.html 
            +-- account
                |-- http.go
                +-- templates
                    |-- overview.html
                    +-- notifications.html 
</code></pre>

<p>Each packages has a http.go file that takes ownership of a url prefix. For example the <code>products</code> package under <code>github.com/storeski/appengine/products</code> would own any inbound url starting with <code>/products</code>. </p>

<p>With this modular approach it is beneficial to store the templates within the <code>products</code> package. If you would like to maintain a consistant base template for the site you can establish a convention where you extend <code>templates/base.html</code>.</p>

<p><strong>Example</strong></p>

<p><em>templates/base.html</em></p>

<pre><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;{{.Store.Title}}&lt;/title&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div id=""content""&gt;
      {{template ""content"" .}}
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p><em>github.com/storeski/appengine/products/templates/list.html</em></p>

<pre><code>{{define ""content""}}
  &lt;h1&gt; Products List &lt;/h1&gt;
{{end}}
</code></pre>

<p><em>github.com/storeski/appengine/products/http.go</em></p>

<pre><code>func init() {
  http.HandleFunc(""/products"", listHandler)
}

var listTmpl = template.Must(template.ParseFiles(""templates/base.html"",
  ""github.com/storeski/appengine/products/templates/list.html""))

func listHandler(w http.ResponseWriter, r *http.Request) {

  tc := make(map[string]interface{})
  tc[""Store""] = Store
  tc[""Products""] = Products

  if err := listTmpl.Execute(w, tc); err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
  }
}
</code></pre>

<p>This approach is very exciting because it makes the sharing of apps/package trivial. If I write a package that handles authentication which takes ownership of the <code>/auth</code> url. Any developer that, then, adds the package to their product root instantly has all of the functionality. All they have to do is create a base template (<code>templates/base.html</code>) and direct their users to <code>/auth</code>.</p>
","9587616"
"Golang JSON/HTTP request like curl","9430","","<p>I am looking for a quick tutorial on how to perform requests with Golang that emulate those one would use with curl. I have two APIs that I want to communicate with that both essentially work the same way. One is ElasticSearch, the other is Phillips Hue. I know that both of these have libraries in Go. That's not what I'm after, I'm trying to learn how to do this: </p>

<pre><code>$ curl -XGET 'http://localhost:9200/twitter/tweet/_search' -d '{
""query"" : {
    ""term"" : { ""user"" : ""kimchy"" }
} }'
</code></pre>

<p>With Golang. Everything I can find people seem to be hard coding to </p>

<pre><code>http://url:port/api/_function?something=value?anotherthing=value...
</code></pre>

<p>But I already have JSON objects floating around in the software. Is there a way that I can emulate the -d feature of CURL with a JSON string or struct or something similar?</p>
","<p>As commenter @JimB pointed out, doing a GET request with a body is not disallowed by the HTTP/1.1 specification; however, it is also not required that servers actually parse the body, so do not be surprised if you encounter strange behavior.</p>

<p>That said, here is how you would perform a GET request with a body using a golang HTTP client:</p>

<pre><code>reader := strings.NewReader(`{""body"":123}`)
request, err := http.NewRequest(""GET"", ""http://localhost:3030/foo"", reader)
// TODO: check err
client := &amp;http.Client{}
resp, err := client.Do(request)
// TODO: check err
</code></pre>

<p>The web server will see a request like this:</p>

<pre><code>GET /foo HTTP/1.1
Host: localhost:3030
User-Agent: Go 1.1 package http
Content-Length: 12
Accept-Encoding: gzip

{""body"":123}
</code></pre>

<p>To build a command-line tool like ""curl"" you will need to use a number of go packages (e.g. for <a href=""http://golang.org/pkg/flag/"" rel=""noreferrer"">flag parsing</a> and <a href=""http://golang.org/pkg/net/http/"" rel=""noreferrer"">HTTP request handling</a>) but presumably you can find what you need from the (excellent) docs.</p>
","29379781"
"Convert UTC to ""local"" time - Go","9419","","<p>How can I convert UTC time to local time ?
  I've created a map with the UTC difference for all the countries I need the local time. Then I add that difference as duration to the current time (UTC) and print the result hoping that's the local time of that specific country.
  For some reasons the result is wrong. For example on <a href=""http://www.timeanddate.com/worldclock/hungary/budapest"" rel=""noreferrer"">Hungary</a> there is one hour difference. Any idea why I'm getting incorrect results ?</p>

<pre><code>package main

import ""fmt""
import ""time""

func main() {

    m := make(map[string]string)
    m[""Hungary""] = ""+01.00h""

    offSet, err := time.ParseDuration(m[""Hungary""])
    if err != nil {
        panic(err)
    }
    t := time.Now().UTC().Add(offSet)
    nice := t.Format(""15:04"")

    fmt.Println(nice)
}
</code></pre>
","<p>Keep in mind that the playground has the time set to <code>2009-11-10 23:00:00 +0000 UTC</code>, so it is working.</p>

<p>The proper way is to use <code>time.LoadLocation</code> though, here's an example:</p>

<pre><code>var countryTz = map[string]string{
    ""Hungary"": ""Europe/Budapest"",
    ""Egypt"":   ""Africa/Cairo"",
}

func timeIn(name string) time.Time {
    loc, err := time.LoadLocation(countryTz[name])
    if err != nil {
        panic(err)
    }
    return time.Now().In(loc)
}

func main() {
    utc := time.Now().UTC().Format(""15:04"")
    hun := timeIn(""Hungary"").Format(""15:04"")
    eg := timeIn(""Egypt"").Format(""15:04"")
    fmt.Println(utc, hun, eg)
}
</code></pre>
","25318452"
"How to test a unexported (private) function in go (golang)?","9415","","<p>I was interested in creating unit test for ""unexported (private) functions"" in go. However, its basically really hard to create unit tests form them in the test package because I have to make them ""public"". Which in the end, defeats the whole point of them being private. The point is that these helper function help modularize and now that they are modular, it would be nice to be able to create unit tests for them without making them available to everyone except the testing package, nice they are not functions that should be accessed or used by anyone else except the testing suite or the actual package itself.</p>

<p>Any suggestions? Is it possible to <strong>only</strong> export to its own package and 1 additional package or something of that sort in go?</p>
","<p>create a test file within the package</p>

<p>library_test.go</p>

<pre><code>package mypkg

func TestPrivateStruct(t *testing.T){
  pf := private{ ""Private Field"" }
  ....
}
</code></pre>

<p>library.go</p>

<pre><code>package mypkg

type private struct {
  privateField string
}
</code></pre>

<p><code>go test mypkg -v</code> will run your Tests with your private struct</p>
","24622424"
"Golang Map struct in another one","9407","","<p>I'm new working on golang, In this case I have  a map [string]  which has a struct. 
At this point everything is works.</p>

<p>But I would like to have a map[string] in which I can access at the same time to another map[string] which has it self struct.</p>

<p>This is the code in which I'm trying to work.</p>

<pre><code>type myStruct struct{
    atrib1       string
    atrib2       string 

}

var apiRequest map[string] map[string]myStruct
</code></pre>

<p>I would like acces to something like this:</p>

<pre><code>func main() {
    apiRequest = make(map[string] map[string]myStruct)

    apiKeyTypeRequest[""Key""][""MyFirstOption""].atrib1 = ""first Value first op"" 
    apiKeyTypeRequest[""Key""][""MyFirstOption""].atrib2 = ""second Value first op"" 
    apiKeyTypeRequest[""Key""][""MysecondtOption""].atrib1 = ""first Value second op"" 

}
</code></pre>
","<p>An alternative to using a map inside a map, is to have a single <code>map[mapKey]</code> where <code>mapKey</code> is a struct:</p>

<pre><code>type mapkey struct {
    Key    string
    Option string
}
</code></pre>

<p>The benefits is that you only have to do a single lookup when searching for a <code>myStruct</code>, and you only have to create a single map.<br>
The downside is in case you need to be able to get that options <code>map[string]myStruct</code> map, since it does not exist. Also, you cannot check if a certain key exists or not, because keys and options exists in pairs.</p>

<p><strong>Working example:</strong></p>

<pre><code>package main

import ""fmt""

type myStruct struct {
    atrib1 string
    atrib2 string
}

type mapKey struct {
    Key    string
    Option string
}

func main() {
    apiKeyTypeRequest := make(map[mapKey]myStruct)

    apiKeyTypeRequest[mapKey{""Key"", ""MyFirstOption""}] = myStruct{""first Value first op"", ""second Value first op""}
    apiKeyTypeRequest[mapKey{""Key"", ""MysecondtOption""}] = myStruct{atrib1: ""first Value second op""}

    fmt.Printf(""%+v\n"", apiKeyTypeRequest)
}
</code></pre>

<p><strong>Playground:</strong> <a href=""http://play.golang.org/p/tGd7ja7QI2"">http://play.golang.org/p/tGd7ja7QI2</a></p>
","23900201"
"What's the point of one-way channels in Go?","9403","","<p>I'm learning Go and so far very impressed with it.  I've read all the online docs at golang.org and am halfway through Chrisnall's ""The Go Programming Language Phrasebook"".  I get the concept of channels and think that they will be extremely useful.  However, I must have missed something important along the way, as I can't see the point to one-way channels.</p>

<p>If I'm interpreting them correctly, a read-only channel can only be received on and a write-only channel can only be transmitted on, so why have a channel that you can send to and never receive on?  Can they be cast from one ""direction"" to the other?  If so, again, what's the point if there's no actual constraint?  Are they nothing more than a hint to client code of the channel's purpose?</p>
","<p>A read-only channel can be made read-only to whomever receives it, while the sender still has a two-way channel on which they can write. For example:</p>

<pre><code>func F() &lt;-chan int {
    // Create a regular, two-way channel.
    c := make(chan int)

    go func() {
        defer close(c)

        // Do stuff
        c &lt;- 123
    }()

    // Returning it, implicitely converts it to read-only,
    // as per the function return value.
    return c
}
</code></pre>

<p>Whom ever calls <code>F()</code>, receives a channel on which they can only read.
This is mostly useful to catch potential miss-uses of a channel at compile time.
Because read/write-only channels are distinct types, the compiler can use
its existing type-checking mechanisms to ensure the caller does not try to write
stuff into a channel it has no business writing to.</p>
","13596472"
"Sharing a globally defined db conn with multiple packages in Golang","9392","","<p>I've read a few StackOverflow answers on how we handling the db connection. Since it's a pool, we can define it globally and use it in multiple goroutines and it's safe. </p>

<p>The issue I'm having is that I have split my REST API into multiple packages. Each of these packages require a db connection, so I open a database connection in the startup. But even if I define the connection globally, it's only at the package level. What can I do to potentially share it among multiple packages? </p>

<p>For some context I'm using the PostgreSQL driver and gin-gonic in my application.</p>
","<p>There is also the option of creating another package to hold your database connection related settings. It can then have a package level global, which can be initialized in <code>main</code> and used in any package that is importing it. </p>

<p>This way, you can explicitly see that the database package is being imported. Here is some sample code.</p>

<pre><code>package database

var (
    // DBCon is the connection handle
    // for the database
    DBCon *sql.DB
)
</code></pre>

<hr>

<pre><code>package main

import ""myApp/database""

func main() {

    var err error
    database.DBCon, err = sql.Open(""postgres"", ""user=myname dbname=dbname sslmode=disable"")

}
</code></pre>

<hr>

<pre><code>package user

import ""myApp/database""

func Index() {
    // database handle is available here
    database.DBCon

    ...
}
</code></pre>
","31228542"
"How to use Delve debugger in Visual Studio Code","9387","","<p>I have installed the Go extension for VS Code, but unable to make it work.</p>

<p>""dlv debug"" works alright from the terminal.  </p>

<pre><code>dlv debug src/github.com/user/hello
</code></pre>

<p>The <code>launch.json</code>:</p>

<pre><code>{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Launch"",
            ""type"": ""go"",
            ""request"": ""launch"",
            ""mode"": ""debug"",
            ""program"": ""${workspaceRoot}"",
            ""env"": {},
            ""args"": []
        }
    ]
}
</code></pre>

<p>Do you know how to set it up?</p>
","<p>For using Delve debugger in Visual Studio Code with Golang, do the following steps:  </p>

<pre><code>( Note: for Windows OS replace all $GOPATH with %GOPATH% )
</code></pre>

<ul>
<li>Install Latest <a href=""https://golang.org/dl"" rel=""noreferrer"">Golang</a> and set <code>GOROOT</code> and <code>GOPATH</code></li>
<li>Add <code>$GOPATH/bin</code> to your OS <code>PATH</code> environment variable.  </li>
<li>set environment variable: <code>GO15VENDOREXPERIMENT = 1</code>  </li>
<li>run: <code>go get github.com/derekparker/delve/cmd/dlv</code>  and make sure <code>dlv</code> binary generated in your <code>$GOPATH/bin</code>  </li>
<li>Install <a href=""https://code.visualstudio.com/"" rel=""noreferrer"">Visual Studio Code</a>  </li>
<li>Launch VS Code Quick Open (<kbd>Ctrl</kbd>+<kbd>P</kbd>), paste this command: <code>ext install Go</code> , and press enter.  </li>
<li>click install <code>Rich Go language support for Visual Studio Code</code>  </li>
<li>click <code>Enable</code> and restart Visual Studio Code  </li>
<li>Inside <code>Visual Studio Code</code> Open Folder <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>E</kbd> , e.g.: <code>$GOPATH\src\hello\</code></li>
<li>Then Open <code>hello.go</code> from that folder (or make new file <kbd>Ctrl</kbd>+<kbd>N</kbd> and save it on this folder):  </li>
</ul>

<pre class=""lang-golang prettyprint-override""><code>package main

import ""fmt""

func main() {
    fmt.Println(""Hello World!"")
    i := 101
    fmt.Println(i)
}
</code></pre>

<ul>
<li>Then Open Debugger <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>D</kbd></li>
<li>on this line: <code>i := 101</code> press <kbd>F9</kbd> to set or toggle beakpoint.  </li>
<li>Press <kbd>F5</kbd> to start debugging or to Run the application, if asked to select environment: select <code>Go</code>.  </li>
<li>Press <kbd>F10</kbd> to  Step Over.  </li>
<li>Press <kbd>F11</kbd> to Step Into.  </li>
<li>Press <kbd>Shift</kbd>+<kbd>F11</kbd> to Step Out.  </li>
<li>Press <kbd>Shift</kbd>+<kbd>F5</kbd> to Stop Debugging.  </li>
<li>Press <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F5</kbd> to Restart Debugging.  </li>
</ul>

<p>My <code>launch.json</code> untouched:</p>

<pre><code>{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Launch"",
            ""type"": ""go"",
            ""request"": ""launch"",
            ""mode"": ""debug"",
            ""remotePath"": """",
            ""port"": 2345,
            ""host"": ""127.0.0.1"",
            ""program"": ""${workspaceRoot}"",
            ""env"": {},
            ""args"": [],
            ""showLog"": true
        }
    ]
}
</code></pre>

<p>Result: </p>

<p><a href=""https://i.stack.imgur.com/sxUZ0.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/sxUZ0.png"" alt=""enter image description here""></a></p>
","39062734"
"throw: all goroutines are asleep - deadlock","9369","","<p>Given the following simple Go program</p>

<pre><code>package main

import (
    ""fmt""
)

func total(ch chan int) {
    res := 0
    for iter := range ch {
        res += iter
    }
    ch &lt;- res
}

func main() {
    ch := make(chan int)
    go total(ch)
    ch &lt;- 1
    ch &lt;- 2
    ch &lt;- 3
    fmt.Println(""Total is "", &lt;-ch)
}
</code></pre>

<p>I am wondering if someone can enlighten me as to why I get</p>

<pre><code>throw: all goroutines are asleep - deadlock!
</code></pre>

<p>thank you</p>
","<p>As you never close the <code>ch</code> channel, the range loop will never finish.</p>

<p>You can't send back the result on the same channel. A solution is to use a different one.</p>

<p>Your program could be adapted like this :</p>

<pre><code>package main

import (
    ""fmt""
)

func total(in chan int, out chan int) {
    res := 0
    for iter := range in {
        res += iter
    }
    out &lt;- res // sends back the result
}

func main() {
    ch := make(chan int)
    rch  := make(chan int)
    go total(ch, rch)
    ch &lt;- 1
    ch &lt;- 2
    ch &lt;- 3
    close (ch) // this will end the loop in the total function
    result := &lt;- rch // waits for total to give the result
    fmt.Println(""Total is "", result)
}
</code></pre>
","12400826"
"GOPATH environment variable not set","9354","","<p>I'm trying to install the Oracle Driver for Go (go-oci8) following these <a href=""https://github.com/Centny/Centny/blob/master/Articles/How%20build%20github.com:mattn:go-oci8.md"" rel=""nofollow noreferrer"">instructions</a></p>

<p>The problem I'm facing is with the $GOPATH environment variable. 
When I execute the command: </p>

<p><code>sudo go get github.com/mattn/go-oci8</code></p>

<p>I get the error : </p>

<p><code>cannot download, $GOPATH not set. For more details see: go help gopath</code></p>

<p>However, I have the GOPATH properly set. My environment looks like this:</p>

<p><code>env | grep GO</code></p>

<p><code>GOARCH=amd64</code><br>
<code>GOROOT=/usr/local/go</code><br>
<code>GOOS=linux</code><br>
<code>GOPATH=/home/myuser/go/</code><br></p>

<p><code>ls $GOPATH</code><br>
<code>bin    pkg    src</code></p>

<p>I've found a similar <a href=""https://stackoverflow.com/questions/17872223/cannot-download-gopath-not-set"">post</a> but the solution does not apply to my case.</p>
","<p>Sudo won't honor all your ENV variables for some very good security reasons. </p>

<p>The simplest way to fix this is /bin/env</p>

<pre><code>sudo /bin/env GOPATH=/home/myuser/go go get &lt;stuff&gt;
</code></pre>

<p>But you don't need to do that, you really shouldn't need root to write 
to GOPATH, only GOROOT. </p>
","19864442"
"Go ""inheritance"" - using anonymous type in a struct as a method parameter","9332","","<p>I'm trying to firm up the concept of inheritence that Go provides (rather ""composition"" than pure inheritence, perhaps). However, I'm failing to grasp why I can't use the ""parent"" type as a <code>func</code> parameter to produce a generic function that acts on the parameter.</p>

<pre><code>package main

import ""log""

type Animal struct {
    Colour string
    Name string
}

type Dog struct {
    Animal
}

func PrintColour(a *Animal) {
    log.Printf(""%s\n"", a.Colour)
}


func main () {
    a := new (Animal)
    a.Colour = ""Void""
    d := new (Dog)
    d.Colour = ""Black""

    PrintColour(a)
    PrintColour(d)
}
</code></pre>

<p>Assuming my understanding's incorrect, how can I achieve what I want in Go?</p>

<p><strong>Edit</strong>
Note: </p>

<ul>
<li><p>I don't want to attach the behaviour to the struct</p></li>
<li><p>I'd like to keep the pointer type as the method parameter because I'm working separately on a pet project and this requires I manipulate the struct passed in before then acting on it.</p></li>
<li><p>In reality my <code>Dog</code> struct would have additional fields/members; hopefully this doesn't muddy the water further</p></li>
</ul>
","<p>I like the answers here so far and I want to add one that allows you to do static type checking on the interface you pass in using an interface:</p>

<pre><code>package main

import (
    ""fmt""
)

type Animalizer interface {
    GetColour() string
}

type Animal struct {
    Colour string
    Name   string
}

type Dog struct {
    Animal
}

func (a *Animal) GetColour() string {
    return a.Colour
}

func PrintColour(a Animalizer) {
    fmt.Print(a.GetColour())
}

func main() {
    a := new(Animal)
    a.Colour = ""Void""
    d := new(Dog)
    d.Colour = ""Black""

    PrintColour(a)
    PrintColour(d)
}
</code></pre>

<p><a href=""http://play.golang.org/p/FE8sEqAs8P"" rel=""noreferrer""><strong>On the playground</strong></a></p>

<p>It will be possible to add further fields to <code>Dog</code>. The difference to Uriel's Answer is that calls to <code>PrintColour</code> will fail at compile time if something else than a struct implementing <code>Animalizer</code> is passed in. </p>

<p>Also you won't have to use a typeswitch since the compiler knows an <code>Animalizer</code> is implementing <code>GetColour</code>.</p>

<p>And, finally, the behaviour (printing) is separated from the struct, <code>GetColour</code> just returns the colour.</p>
","21551995"
"How to add pause to a Go program?","9327","","<p>When i ever execute a Go Console program it just executes in one second, I've been looking on Google, the Go website and Stackoverflow.</p>

<pre><code>import (
    ""fmt""
)

func main() {
    fmt.Println()
}
</code></pre>

<p>It closes immediately when i execute it.</p>

<p>EDIT 2
actually i wanted the program to permanently stay paused untill the user presses a button</p>
","<p>You can pause the program for an arbitrarily long time by using <a href=""http://golang.org/pkg/time/#example_Sleep""><code>time.Sleep()</code></a>. For example:</p>

<pre><code>package main
import ( ""fmt""
         ""time""
       )   

func main() {
  fmt.Println(""Hello world!"")
  duration := time.Second
  time.Sleep(duration)
}
</code></pre>

<p>To increase the duration arbitrarily you can do:</p>

<pre><code>duration := time.Duration(10)*time.Second // Pause for 10 seconds
</code></pre>

<p>EDIT: Since the OP added additional constraints to the question the answer above no longer fits the bill. You can pause until the <kbd>Enter</kbd> key is pressed by creating a new buffer reader which waits to read the newline (<code>\n</code>) character.</p>

<pre><code>package main
import ( ""fmt""
         ""bufio""
         ""os""
       )

func main() {
  fmt.Println(""Hello world!"")
  fmt.Print(""Press 'Enter' to continue..."")
  bufio.NewReader(os.Stdin).ReadBytes('\n') 
}
</code></pre>
","17690896"
"Golang bitwise operations as well as general byte manipulation","9315","","<p>I have some c# code that performs some bitwise operations on a byte. I am trying to do the same in golang but am having difficulties.</p>

<p>Example in c#</p>

<pre><code>byte a, c;
byte[] data; 
int j;
c = data[j];
c = (byte)(c + j);
c ^= a;
c ^= 0xFF;
c += 0x48;
</code></pre>

<p>I have read that golang cannot perform bitwise operations on the byte type. Therefore will I have to modify my code to a type uint8 to perform these operations? If so is there a clean and correct/standard way to implement this?</p>
","<p>Go certainly can do bitwise operations on the <code>byte</code> type, which is simply an alias of <code>uint8</code>. The only changes I had to make to your code were:</p>

<ol>
<li>Syntax of the variable declarations</li>
<li>Convert <code>j</code> to <code>byte</code> before adding it to <code>c</code>, since Go lacks (by design) integer promotion conversions when doing arithmetic.</li>
<li>Removing the semicolons.</li>
</ol>

<p>Here you go </p>

<pre><code>var a, c byte
var data []byte
var j int
c = data[j]
c = c + byte(j)
c ^= a
c ^= 0xFF
c += 0x48
</code></pre>

<p>If you're planning to do bitwise-not in Go, note that the operator for that is <code>^</code>, not the <code>~</code> that is used in most other contemporary programming languages. This is the same operator that is used for xor, but the two are not ambiguous, since the compiler can tell which is which by determining whether the <code>^</code> is used as a unary or binary operator.</p>
","24106178"
"golang reference struct in same package in another file","9312","","<p>main.go</p>

<p>lib/file_1.go</p>

<pre><code>...
package lib
...
type MyStruct struct{
}
....
</code></pre>

<p>How to reference ""MyStruct"" in another file in the same package/folder?</p>

<p>I get undefined: MyStruct when go build lib/file_2.go. I can run go install with no error, should I just ignore the build error?</p>

<p>lib/file_2.go</p>

<pre><code>...
package lib
...
{
m MyStruct
}
....
</code></pre>

<p>Thanks</p>
","<p>You're asking the go tool to compile <code>lib/file_1.go</code>, you never mention <code>lib/file_2.go</code> so how is it supposed to know it should compile it? </p>

<p>From <code>go help build</code>:</p>

<pre><code>Build compiles the packages named by the import paths,
along with their dependencies, but it does not install the results.

If the arguments are a list of .go files, build treats them as a list
of source files specifying a single package.
</code></pre>
","27550661"
"Go Package Initialization","9311","","<p>Go package A is composed of 3 .go files, and I use functions from another package B in each file.</p>

<p>I have to import package B at the beginning of each of the three files, but is package B actually initialized 3 times or only 1?  </p>
","<p>Short answer: Initialization will be performed only once.</p>

<p>Long answer: Quoting the relevant specification section - <a href=""http://golang.org/ref/spec#Program_execution"">Program execution</a>:</p>

<blockquote>
  <p>A package with no imports is initialized by assigning initial values to all its package-level variables and then calling any package-level function with the name and signature of</p>

<pre><code>func init()
</code></pre>
  
  <p>defined in its source. A package-scope or file-scope identifier with name <code>init</code> may only be declared to be a function with this signature. Multiple such functions may be defined, even within a single source file; they execute in unspecified order.</p>
  
  <p>Within a package, package-level variables are initialized, and constant values are determined, according to order of reference: if the initializer of A depends on B, A will be set after B. Dependency analysis does not depend on the actual values of the items being initialized, only on their appearance in the source. A depends on B if the value of A contains a mention of B, contains a value whose initializer mentions B, or mentions a function that mentions B, recursively. It is an error if such dependencies form a cycle. If two items are not interdependent, they will be initialized in the order they appear in the source, possibly in multiple files, as presented to the compiler. Since the dependency analysis is done per package, it can produce unspecified results if A's initializer calls a function defined in another package that refers to B.</p>
  
  <p>An <code>init</code> function cannot be referred to from anywhere in a program. In particular, <code>init</code> cannot be called explicitly, nor can a pointer to <code>init</code> be assigned to a function variable.</p>
  
  <p>If a package has imports, the imported packages are initialized before initializing the package itself. If multiple packages import a package P, P will be initialized only once.</p>
  
  <p>The importing of packages, by construction, guarantees that there can be no cyclic dependencies in initialization.</p>
  
  <p>A complete program is created by linking a single, unimported package called the <em>main package</em> with all the packages it imports, transitively. The main package must have package name <code>main</code> and declare a function <code>main</code> that takes no arguments and returns no value.</p>

<pre><code>func main() { … }
</code></pre>
  
  <p>Program execution begins by initializing the main package and then invoking the function <code>main</code>. When the function <code>main</code> returns, the program exits. It does not wait for other (non-main) goroutines to complete.</p>
  
  <p>Package initialization—variable initialization and the invocation of <code>init</code> functions—happens in a single goroutine, sequentially, one package at a time. An <code>init</code> function may launch other goroutines, which can run concurrently with the initialization code. However, initialization always sequences the <code>init</code> functions: it will not start the next <code>init</code> until the previous one has returned.</p>
</blockquote>
","17733407"
"flag package in Go - do I have to always set default value?","9305","","<p>Is it possible not to set default value in flag package in Go? For example, in flag package you can write out the following line:</p>

<pre><code>filename := flag.String(""file"", ""test.csv"", ""Filename to cope with"")
</code></pre>

<p>In the above code, I don't want to necessarily set default value, which is <code>test.csv</code> in this case, and instead always make users specify their own filename, and if it's not specified then I want to cause an error and exit the program.</p>

<p>One of the way I came up with is that I first check the value of <code>filename</code> after doing <code>flag.Parse()</code>, and if that value is <code>test.csv</code> then I have the program exits with the appropriate error message. However, I don't want to write such redundant code if it can be evaded - and even if it can't, I'd like to hear any better way to cope with the issue here.</p>

<p>You can do those kind of operations in Python's <code>argparse</code> module by the way - I just want to implement the similar thing if I can...</p>

<p>Also, can I implement both short and long arguments (in other words both <code>-f</code> and <code>-file</code> argument?) in flag package?</p>

<p>Thanks.</p>
","<p>I think it's idiomatic to design your flag values in such a way which implies ""not present"" when equal to the zero value of their respective types. For example:</p>

<pre><code>optFile := flag.String(""file"", """", ""Source file"")
flag.Parse()
fn := *optFile
if fn == """" {
        fn = ""/dev/stdin""
}
f, err := os.Open(fn)
...
</code></pre>

<p>Ad the 2nd question: IINM, the flag package <em>by design</em> doesn't distinguish between <code>-flag</code> and <code>--flag</code>. IOW, you can have both <code>-f</code> and <code>--file</code> in your flag set and write any version of <code>-</code> or <code>--</code> before both <code>f</code> and <code>file</code>. However, considering another defined flag <code>-g</code>, the flag package will <em>not</em> recognize <code>-gf foo</code> as being equvalent of <code>-g -f foo</code>.</p>
","18429991"
"Golang Dependency Management Best Practice","9304","","<p>In Golang, we can specify open source libraries on GitHub as dependencies. For example:</p>

<pre><code>import ""github.com/RichardKnop/somelibrary""
</code></pre>

<p>This will try to look for a branch based on your Go version and default to master if I understand correctly.</p>

<p>So there is no way to import a specific release of a dependency, e.g.:</p>

<pre><code>import ""github.com/RichardKnop/somelibrary#v1.4.8""
</code></pre>

<p>What is the best practise to manage dependencies in Go then?</p>

<p>I can see two approaches.</p>

<h2>I. Version Modules</h2>

<p>Is it to create new modules for major versions with breaking changes?</p>

<p>For example, my Go library could define modules v1 and v2 so then you could do:</p>

<pre><code>import ""github.com/RichardKnop/somelibrary/v1""
</code></pre>

<p>Or:</p>

<pre><code>import ""github.com/RichardKnop/somelibrary/v2""
</code></pre>

<p>Based on what you need. Any changes made to v1 or v2 would be required not to break any APIs or working functionality.</p>

<h2>II. Forking</h2>

<p>This would give you a complete control over a version of external dependency your Go code requires.</p>

<p>For example, you could fork github.com/RichardKnop/somelibrary into your own GitHub account and then in your code do:</p>

<pre><code>import ""github.com/ForkingUser/somelibrary""
</code></pre>

<p>Then you would have to fork all external dependencies which seems a bit overkill. However it would give you total control over versions. You could keep your forks at a version you know is working with your code and only update forks once you have checked that new releases of dependencies do not break anything.</p>

<p>Thoughts?</p>
","<p>Note: June 2015, the first support for vendoring appears in Go 1.5!</p>

<p>See <a href=""https://go-review.googlesource.com/#/c/10923/"" rel=""nofollow noreferrer"">c/10923/</a>:</p>

<blockquote>
  <p>When <code>GO15VENDOREXPERIMENT=1</code> is in the environment, this CL changes the resolution of import paths according to the Go 1.5 vendor proposal: </p>
  
  <ul>
  <li>If there is a source directory <code>d/vendor</code>, then, when compiling a source file within the subtree rooted at <code>d</code>, <code>import ""p""</code> is interpreted as <code>import ""d/vendor/p""</code> if that exists. </li>
  <li>When there are multiple possible resolutions, the most specific (longest) path wins. </li>
  <li>The short form must always be used: no import path can contain “<code>/vendor/</code>” explicitly. </li>
  <li>Import comments are ignored in vendored packages.</li>
  </ul>
</blockquote>

<hr>

<p>Update January 2016: Go 1.6 will make vendoring the default.<br>
And as detailed in <a href=""https://blog.filippo.io/most-go-tools-now-work-with-go15vendorexperiment/"" rel=""nofollow noreferrer"">the article ""MOST GO TOOLS NOW WORK WITH GO15VENDOREXPERIMENT""</a>:</p>

<blockquote>
  <p>1.6 brings support for <code>/vendor/</code> to most tools (like the oracle) out of the box; use the Beta to rebuild them.</p>
</blockquote>

<ul>
<li><a href=""https://github.com/golang/go/issues/12278"" rel=""nofollow noreferrer"">issue 12278</a> has been resolved.</li>
<li><strike>there still is an <a href=""https://github.com/golang/go/issues/13644"" rel=""nofollow noreferrer"">issue with <code>goimports</code></a>, and there is a <a href=""https://go-review.googlesource.com/#/c/17728/"" rel=""nofollow noreferrer"">CL</a> that <a href=""https://go.googlesource.com/tools/+/d25ec44442101bba6b45bc06f43b63a77ad85b76"" rel=""nofollow noreferrer"">can be cherry-picked</a></strike>.</li>
</ul>
","30950192"
"Draw a rectangle in Golang?","9303","","<p>Is the only way to draw a shape in Go with some line width to do it with primitives pixel by pixel?</p>

<p>I want to draw a label with a few rectangles and barcodes, generate and output a PNG/PDF.</p>
","<p>The standard Go library does not provide primitive drawing or painting capabilities.</p>

<p>What it provides is models for colors (<a href=""http://golang.org/pkg/image/color/"" rel=""noreferrer""><code>image/color</code></a> package) and an <a href=""http://golang.org/pkg/image/#Image"" rel=""noreferrer""><code>Image</code></a> interface with several implementations (<a href=""http://golang.org/pkg/image/"" rel=""noreferrer""><code>image</code></a> package). The blog post <a href=""http://blog.golang.org/go-image-package"" rel=""noreferrer""><strong>The Go Image package</strong></a> is a good introduction to this.</p>

<p>It also provides a capability to combine images (e.g. draw them on each other) with different operations in the <a href=""http://golang.org/pkg/image/draw/"" rel=""noreferrer""><code>image/draw</code></a> package. This can be used to a lot more than it sounds at first. There is a nice blog article about the <code>image/draw</code> package which showcases some of its potential:  <a href=""http://blog.golang.org/go-imagedraw-package"" rel=""noreferrer""><strong>The Go image/draw package</strong></a></p>

<p>Another example is the open-source game <a href=""https://github.com/gophergala/golab"" rel=""noreferrer"">Gopher's Labyrinth</a> (<em>disclosure: I'm the author</em>) which has a graphical interface and it uses nothing else just the standard Go library to assemble its view.</p>

<p><img src=""https://i.stack.imgur.com/cIyhe.png"" alt=""Gopher&#39;s Labyrinth Screenshot""></p>

<p>It's open source, check out its sources how it is done. It has a scrollable game view with moving images/animations in it.</p>

<p>The standard library also supports reading and writing common image formats like <a href=""http://golang.org/pkg/image/gif/"" rel=""noreferrer"">GIF</a>, <a href=""http://golang.org/pkg/image/jpeg/"" rel=""noreferrer"">JPEG</a>, <a href=""http://golang.org/pkg/image/png/"" rel=""noreferrer"">PNG</a>, and support for other formats are available out of the box: <a href=""http://godoc.org/golang.org/x/image/bmp"" rel=""noreferrer"">BMP</a>, <a href=""http://godoc.org/golang.org/x/image/riff"" rel=""noreferrer"">RIFF</a>, <a href=""http://godoc.org/golang.org/x/image/tiff"" rel=""noreferrer"">TIFF</a> and even <a href=""http://godoc.org/golang.org/x/image/webp"" rel=""noreferrer"">WEBP</a> (only a reader/decoder).</p>

<p>Although support is not given by the standard library, it is fairly easy to draw lines and rectangles on an image. Given an <code>img</code> image which supports changing a pixel with a method: <code>Set(x, y int, c color.Color)</code> (for example <a href=""http://golang.org/pkg/image/#RGBA"" rel=""noreferrer""><code>image.RGBA</code></a> is perfect for us) and a <code>col</code> of type <a href=""http://golang.org/pkg/image/color/#Color"" rel=""noreferrer""><code>color.Color</code></a>:</p>

<pre><code>// HLine draws a horizontal line
func HLine(x1, y, x2 int) {
    for ; x1 &lt;= x2; x1++ {
        img.Set(x1, y, col)
    }
}

// VLine draws a veritcal line
func VLine(x, y1, y2 int) {
    for ; y1 &lt;= y2; y1++ {
        img.Set(x, y1, col)
    }
}

// Rect draws a rectangle utilizing HLine() and VLine()
func Rect(x1, y1, x2, y2 int) {
    HLine(x1, y1, x2)
    HLine(x1, y2, x2)
    VLine(x1, y1, y2)
    VLine(x2, y1, y2)
}
</code></pre>

<p>Using these simple functions here is a runnable example program which draws a line and a rectangle and saves the image into a <code>.png</code> file:</p>

<pre><code>import (
    ""image""
    ""image/color""
    ""image/png""
    ""os""
)

var img = image.NewRGBA(image.Rect(0, 0, 100, 100))
var col color.Color

func main() {
    col = color.RGBA{255, 0, 0, 255} // Red
    HLine(10, 20, 80)
    col = color.RGBA{0, 255, 0, 255} // Green
    Rect(10, 10, 80, 50)

    f, err := os.Create(""draw.png"")
    if err != nil {
        panic(err)
    }
    defer f.Close()
    png.Encode(f, img)
}
</code></pre>

<p>If you want to draw texts, you can use the <a href=""https://github.com/golang/freetype"" rel=""noreferrer"">Go implementation of FreeType</a>. Also check out this question for a simple introduction to drawing strings on images: <a href=""https://stackoverflow.com/questions/38299930/how-do-add-a-text-label-to-an-image-in-go"">How to add a simple text label to an image in Go?</a></p>

<p>If you want advanced and more complex drawing capabilities, there are also <a href=""https://github.com/golang/go/wiki/Projects#graphics-and-audio"" rel=""noreferrer"">many external libraries</a> available, for example:</p>

<p><a href=""http://github.com/llgcode/draw2d/"" rel=""noreferrer"">http://github.com/llgcode/draw2d/</a></p>
","29004191"
"Marshal nested structs into JSON","9303","","<p>How do I marshal a nested struct into JSON? I know how to marshal the struct without any nested structs. However when I try to make the JSON response look like this:</p>

<pre><code>{""genre"": {""country"": ""taylor swift"", ""rock"": ""aimee""}}
</code></pre>

<p>I run into problems.</p>

<p>My code looks like this:</p>

<p>Go:</p>

<pre><code>type Music struct {
  Genre struct { 
    Country string
    Rock string
  }
}

resp := Music{
  Genre: { // error on this line.
    Country: ""Taylor Swift"",
    Rock: ""Aimee"",
  },
}

js, _ := json.Marshal(resp)
w.Write(js)
</code></pre>

<p>However, I get the error </p>

<p><code>Missing type in composite literal</code></p>

<p>How do I resolve this?</p>
","<p>Here's the composite literal for your type:</p>

<pre><code>resp := Music{
    Genre: struct {
        Country string
        Rock    string
    }{ 
        Country: ""Taylor Swift"",
        Rock:    ""Aimee"",
    },
}
</code></pre>

<p><a href=""http://play.golang.org/p/wxBD9U2430"" rel=""noreferrer"">playground example</a></p>

<p>You need to repeat the anonymous type in the literal. To avoid the repetition, I recommend defining a type for Genre. Also, use field tags to specify lowercase key names in the output.</p>

<pre><code>type Genre struct {
  Country string `json:""country""
  Rock    string `json:""rock""
}

type Music struct {
  Genre Genre `json:""genre""
}

resp := Music{
    Genre{
        Country: ""Taylor Swift"",
        Rock:    ""Aimee"",
    },
}
</code></pre>

<p><a href=""http://play.golang.org/p/wYA3O31KFs"" rel=""noreferrer"">playground example</a></p>
","27676856"
"Golang: cannot type switch on non-interface value","9298","","<p>I am playing with type assertion using the following dummy code, and I got the error: </p>

<blockquote>
  <p>cannot type switch on non-interface value</p>
</blockquote>

<p>Does anyone know what does that mean?</p>

<pre><code>package main

import ""fmt""
import ""strconv""

type Stringer interface {
    String() string
}

type Number struct {
    v int
}

func (number *Number) String() string {
    return strconv.Itoa(number.v)
}

func main() {
    n := &amp;Number{1}
    switch v := n.(type) {
    case Stringer:
        fmt.Println(""Stringer:"", v)
    default:
        fmt.Println(""Unknown"")
    }
}
</code></pre>

<p><a href=""http://play.golang.org/p/Ti4FG0m1mc"" rel=""noreferrer"">http://play.golang.org/p/Ti4FG0m1mc</a></p>
","<p>Type switches require an interface to introspect.  If you are passing a value of known type to it it bombs out.  If you make a function that accepts an interface as a parameter, it will work:</p>

<pre><code>func typeSwitch(tst interface{}) {
    switch v := tst.(type) {
        case Stringer:
           fmt.Println(""Stringer:"", v)
        default:
           fmt.Println(""Unknown"")
    }
}
</code></pre>

<p>See the full code here <a href=""http://play.golang.org/p/QNyf0eG71_"">http://play.golang.org/p/QNyf0eG71_</a> and the golang documentation on interfaces <a href=""http://golang.org/doc/effective_go.html#interfaces"">http://golang.org/doc/effective_go.html#interfaces</a>.</p>
","23172455"
"How to get value from map - GOLang?","9298","","<p>I am working in <code>GOLANG</code></p>

<h3>Problem</h3>

<p>Fetching data from map</p>

<h3>Data Format</h3>

<pre><code>res = map[Event_dtmReleaseDate:2009-09-15 00:00:00 +0000 +00:00 Trans_strGuestList:&lt;nil&gt; strID:TSTB]
</code></pre>

<h3>Note</h3>

<p>How to get the following value from the above result</p>

<p>1.Event_dtmReleaseDate</p>

<p>2.strID</p>

<p>3.Trans_strGuestList</p>

<p><strong>What i tried:</strong></p>

<ol>
<li>res.Map(""Event_dtmReleaseDate"");</li>
</ol>

<blockquote>
  <p>Error : res.Map undefined (type map[string]interface {} has no field or method Map)</p>
</blockquote>

<ol start=""2"">
<li>res.Event_dtmReleaseDate;</li>
</ol>

<blockquote>
  <p>Error: v.id undefined (type map[string]interface {} has no field or method id)</p>
</blockquote>

<p>Any suggestion will be grateful</p>
","<p>Your variable is a <code>map[string]interface {}</code> which means the key is a string but the value can be anything. In general the way to access this is:</p>

<pre><code>mvVar := myMap[key].(VariableType)
</code></pre>

<p>Or in the case of a string value:</p>

<pre><code>id  := res[""strID""].(string)
</code></pre>

<p>Note that this will panic if the type is not correct or the key does not exist in the map, but I suggest you read more about Go maps and type assertions.</p>

<p>Read about maps here: <a href=""http://golang.org/doc/effective_go.html#maps"">http://golang.org/doc/effective_go.html#maps</a></p>

<p>And about type assertions and interface conversions here: <a href=""http://golang.org/doc/effective_go.html#interface_conversions"">http://golang.org/doc/effective_go.html#interface_conversions</a></p>

<p>The safe way to do it without a chance to panic is something like this:</p>

<pre><code>var id string
var ok bool
if x, found := res[""strID""]; found {
     if id, ok = x.(string); !ok {
        //do whatever you want to handle errors - this means this wasn't a string
     }
} else {
   //handle error - the map didn't contain this key
}
</code></pre>
","27545403"
"Grouping of constants in Go language","9297","","<p>What is preferred (or right) way to group large number of related constants in the Go language? For example C# and C++ both have <code>enum</code> for this.</p>
","<p><code>const</code>?</p>

<pre><code>const (
    pi = 3.14
    foo = 42
    bar = ""hello""
)
</code></pre>
","6939840"
"Can I type assert a slice of interface values?","9291","","<p>I am trying to type assert from a <code>[]Node</code>, to <code>[]Symbol</code>. In my code, <code>Symbol</code> implements the <code>Node</code> interface.</p>

<p>Here is some surrounding code:</p>

<pre><code> 43 func applyLambda(args []Node, env Env) Node {
 44     if len(args) &gt; 2 {
 45         panic(""invalid argument count"")
 46     }
 47     fixed, rest := parseFormals(args.([]Symbol))
 48     return Func{
 49         Body: args[1],
 50         FixedVarNames: fixed,
 51         RestVarName: rest,
 52     }
 53 }
</code></pre>

<p>Here's the error I get:</p>

<pre><code>./builtins.go:47: invalid type assertion: args.([]Symbol) (non-interface type []Node on left)
</code></pre>

<p>I'm sure there's a good reason for this. What's the best way to proceed?</p>
","<p>In saying <code>x.(T)</code> variable <code>x</code> should be of interface type, because only for variables of type interface dynamic type is not fixed. And while <code>Node</code> is an interface, <code>[]Node</code> is not. A slice is a distinct, non-interface type. So it just doesn't make sense to assume a slice of interface values is an interface too.</p>

<p>Type <code>Node</code> has a clear definition in your code and thus is an interface. You have specified the list of methods for it. Type <code>[]Node</code> isn't like that. What methods does it define?</p>

<p>I understand where your are coming from with this. It may be a useful shortcut, but just doesn't make sense. It's kind of like expecting <code>syms.Method()</code> to work when <code>syms</code>'s type is <code>[]Symbol</code> and <code>Method</code> is for <code>Symbol</code>.</p>

<p>Replacing line 47 with this code does what you want:</p>

<pre><code>symbols := make([]Symbol, len(args))
for i, arg := range args { symbols[i] = arg.(Symbol) }
fixed, rest := parseFormals(symbols)
</code></pre>
","10479187"
"How to list installed go packages","9291","","<p>To my knowledge <code>go distribution</code> comes with some sort of <code>package manager</code>. After <code>go 1.4.1</code> installation I've run <code>go help</code> in order to find any sub-command capable of listing locally installed <code>go packages</code>, but unfortunately got none.</p>

<p>So how to do it?</p>
","<h2><code>goinstall</code> is now history</h2>

<p><code>goinstall</code> was replaced by <code>go get</code>. <code>go get</code> is used to manage external / 3rd party libraries (e.g. to download them, update them, install them etc).</p>

<p>Type <code>go help get</code> to see command line help, or check out these pages:</p>

<p><a href=""https://golang.org/cmd/go/""><strong>Command go</strong></a></p>

<p><a href=""https://golang.org/doc/articles/go_command.html""><strong>About the go command</strong></a> (blog post)</p>

<p>If you want to list installed packages, you can do that with the <code>go list</code> command:</p>

<h2>Listing Packages</h2>

<p>To list packages in your workspace, go to your workspace folder and run this command:</p>

<pre><code>go list ./...
</code></pre>

<p><code>./</code> tells to start from the current folder, <code>...</code> tells to go down recursively. Of course this works in any other folders not just in your go workspace (but usually that is what you're interested in).</p>

<h2>List All Packages</h2>

<p>Executing</p>

<pre><code>go list ...
</code></pre>

<p>in any folder lists all the packages, including packages of the standard library first followed by external libraries in your go workspace.</p>

<h2>Packages and their Dependencies</h2>

<p>If you also want to see the imported packages by each package, you can try this custom format:</p>

<pre><code>go list -f ""{{.ImportPath}} {{.Imports}}"" ./...
</code></pre>

<p><code>-f</code> specifies an alternate format for the list, using the syntax of package <a href=""https://golang.org/pkg/text/template/""><code>template</code></a>. The struct whose fields can be referenced can be printed by the <code>go help list</code> command.</p>

<p>If you want to see all the dependencies <em>recursively</em> (dependencies of imported packages recursively), you can use this custom format:</p>

<pre><code>go list -f ""{{.ImportPath}} {{.Deps}}"" ./...
</code></pre>

<p>But usually this is a long list and just the single imports (<code>""{{.Imports}}""</code>) of each package is what you want.</p>
","28166550"
"Month to int in Go","9279","","<p>I am new to the GO language and now I am facing a little problem.
When I call the Time's Second(), Year(), etc they gave me an integer but when I call the Month(), it gave me a Month type variable.</p>

<p>From the online document, I saw </p>

<pre><code>type Month int
...
func (m Month) String() string
</code></pre>

<p>but I don't quite understand it.
my code has the following error because m is not int.
How should I get int from Month?</p>

<blockquote>
  <p>invalid operation: <code>m / time.Month(10) + offset</code> (mismatched types time.Month and int)</p>
</blockquote>
","<p>Considering:</p>

<pre><code>var m time.Month
</code></pre>

<p><code>m</code>'s type <em>underlying</em> type is <code>int</code>, so it can be <a href=""http://golang.org/ref/spec#Conversions"" rel=""noreferrer"">converted</a> to <code>int</code>:</p>

<pre><code>var i int = int(m) // normally written as 'i := int(m)'
</code></pre>

<p>On a side note: The question shows a division '<code>m / time.Month(10)</code>'. That may be a bug unless you want to compute some <em>dekamonth</em> value ;-)</p>
","16686866"
"Generating Random Numbers in Go","9261","","<p>I am trying to generate random numbers (integers) in Go, to no avail. I found the <code>rand</code> package in <a href=""http://golang.org/pkg/crypto/rand/"" rel=""noreferrer""><code>crypto/rand</code></a>, which seems to be what I want, but I can't tell from the documentation how to use it. This is what I'm trying right now:</p>

<pre><code>    b := []byte{}
    something, err := rand.Read(b)
    fmt.Printf(""something = %v\n"", something)
    fmt.Printf(""err = %v\n"", err)
</code></pre>

<p>But unfortunately this always outputs:</p>

<pre><code>    something = 0
    err = &lt;nil&gt;
</code></pre>

<p>Is there a way to fix this so that it actually generates random numbers? Alternatively, is there a way to set the upper bound on the random numbers this generates?</p>
","<p><code>crypto/rand</code> provides only binary stream of random data, but you can read integers from it using <code>encoding/binary</code>:</p>

<pre><code>package main

import ""encoding/binary""
import ""crypto/rand""

func main() {
    var n int32
    binary.Read(rand.Reader, binary.LittleEndian, &amp;n)
    println(n)
}
</code></pre>
","6181475"
"How to get memory size of variable?","9252","","<p>Does anybody know how to get memory size of the variable (<code>int</code>, <code>string</code>, <code>[]struct</code>, etc) and print it? Is it possible?</p>

<pre><code>var i int = 1
//I want to get something like this:
fmt.Println(""Size of i is: %?"", i)
//Also, it would be nice if I could store the value into a string
</code></pre>
","<p>You can use the <a href=""http://godoc.org/unsafe"" rel=""noreferrer"">unsafe.Sizeof</a> function for this.
It returns the size in bytes, occupied by the value you pass into it.
Here's <a href=""http://play.golang.org/p/ZqeA6OaaCi"" rel=""noreferrer"">a working example</a>:</p>

<pre><code>package main

import ""fmt""
import ""unsafe""

func main() {
    a := int(123)
    b := int64(123)
    c := ""foo""
    d := struct {
        FieldA float32
        FieldB string
    }{0, ""bar""}

    fmt.Printf(""a: %T, %d\n"", a, unsafe.Sizeof(a))
    fmt.Printf(""b: %T, %d\n"", b, unsafe.Sizeof(b))
    fmt.Printf(""c: %T, %d\n"", c, unsafe.Sizeof(c))
    fmt.Printf(""d: %T, %d\n"", d, unsafe.Sizeof(d))
}
</code></pre>

<p>Take note that some platforms explicitly disallow the use of unsafe, because it is.. well, unsafe. This used to include AppEngine. Not sure if that is still the case today, but I imagine so.</p>

<p>As @Timur Fayzrakhmanov notes, <code>reflect.TypeOf(variable).Size()</code> will give you the same information. For the <code>reflect</code> package, the same restriction goes as for the <code>unsafe</code> package. I.e.: some platforms may not allow its use.</p>
","26975872"
"Go- Copy all common fields between structs","9243","","<p>I have a database that stores JSON, and a server that provides an external API to whereby through an HTTP post, values in this database can be changed. The database is used by different processes internally, and as such have a common naming scheme.</p>

<p>The keys the customer sees are different, but map 1:1 with the keys in the database (there are unexposed keys). For example:</p>

<p>This is in the database:</p>

<pre><code>{ ""bit_size"": 8, ""secret_key"": false }
</code></pre>

<p>And this is presented to the client:</p>

<pre><code>{ ""num_bits"": 8 }
</code></pre>

<p>The API can change with respect to field names, but the database always has consistent keys.</p>

<p>I have named the fields the same in the struct, with different flags to the json encoder:</p>

<pre><code>type DB struct {
    NumBits int  `json:""bit_size""`
    Secret  bool `json:""secret_key""`
}
type User struct {
    NumBits int `json:""num_bits""`
}
</code></pre>

<p>I'm using <code>encoding/json</code> to do the Marshal/Unmarshal.</p>

<p>Is <code>reflect</code> the right tool for this? Is there an easier way since all of the keys are the same? I was thinking some kind of <code>memcpy</code> (if I kept the user fields in the same order).</p>
","<p>Here's a solution using reflection. You have to further develop it if you need more complex structures with embedded struct fields and such.</p>

<p><a href=""http://play.golang.org/p/iTaDgsdSaI"" rel=""nofollow"">http://play.golang.org/p/iTaDgsdSaI</a></p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
    ""reflect""
)

type M map[string]interface{} // just an alias

var Record = []byte(`{ ""bit_size"": 8, ""secret_key"": false }`)

type DB struct {
    NumBits int  `json:""bit_size""`
    Secret  bool `json:""secret_key""`
}

type User struct {
    NumBits int `json:""num_bits""`
}

func main() {
    d := new(DB)
    e := json.Unmarshal(Record, d)
    if e != nil {
        panic(e)
    }
    m := mapFields(d)
    fmt.Println(""Mapped fields: "", m)
    u := new(User)
    o := applyMap(u, m)
    fmt.Println(""Applied map: "", o)
    j, e := json.Marshal(o)
    if e != nil {
        panic(e)
    }
    fmt.Println(""Output JSON: "", string(j))
}

func applyMap(u *User, m M) M {
    t := reflect.TypeOf(u).Elem()
    o := make(M)
    for i := 0; i &lt; t.NumField(); i++ {
        f := t.FieldByIndex([]int{i})
        // skip unexported fields
        if f.PkgPath != """" {
            continue
        }
        if x, ok := m[f.Name]; ok {
            k := f.Tag.Get(""json"")
            o[k] = x
        }
    }
    return o
}

func mapFields(x *DB) M {
    o := make(M)
    v := reflect.ValueOf(x).Elem()
    t := v.Type()
    for i := 0; i &lt; v.NumField(); i++ {
        f := t.FieldByIndex([]int{i})
        // skip unexported fields
        if f.PkgPath != """" {
            continue
        }
        o[f.Name] = v.FieldByIndex([]int{i}).Interface()
    }
    return o
}
</code></pre>
","11544854"
"Go Syntax and interface as parameter to function","9210","","<p>I am new to Go programming language and recently encountered the following code:</p>

<pre><code>func (rec *ContactRecord) Less(other interface{}) bool {
  return rec.sortKey.Less(other.(*ContactRecord).sortKey);
}
</code></pre>

<p>However, I do not understand  the meaning behind the function signature. It accepts an interface as a parameter. Could you please explain me how this works ? Thanks</p>
","<p>Go uses interfaces for generalization of types. So if you want a function that takes a specific interface
you write</p>

<pre><code>func MyFunction(t SomeInterface) {...}
</code></pre>

<p>Every type that satisfies <code>SomeInterface</code> can be passed to <code>MyFunction</code>.</p>

<p>Now, <code>SomeInterface</code> can look like this:</p>

<pre><code>type SomeInterface interface {
    SomeFunction()
}
</code></pre>

<p>To satisfy <code>SomeInterface</code>, the type implementing it must implement <code>SomeFunction()</code>. </p>

<p>If you, however, require an empty interface (<code>interface{}</code>) the object does not need to
implement any method to be passed to the function:</p>

<pre><code>func MyFunction(t interface{}) { ... }
</code></pre>

<p>This function above will take every type as <a href=""http://golang.org/ref/spec#Interface_types"" rel=""noreferrer"">all types implement the empty interface</a>.</p>

<h3>Getting the type back</h3>

<p>Now that you can have every possible type, the question is how to get the type back that
was actually put in before. The empty interface does not provide any methods, thus you
can't call anything on such a value.</p>

<p>For this you need type assertions: let the runtime check whether there is type X in value Y and
convert it to that type if so.</p>

<p>Example:</p>

<pre><code>func MyFunction(t interface{}) {
    v, ok := t.(SomeConcreteType)
    // ...
}
</code></pre>

<p>In this example the input parameter <code>t</code> is asserted to be of type <code>SomeConcreteType</code>. If <code>t</code>
is in fact of type <code>SomeConcreteType</code>, <code>v</code> will hold the instance of that type and <code>ok</code> will
be true. Otherwise, <code>ok</code> will be false. See <a href=""http://golang.org/ref/spec#Type_assertions"" rel=""noreferrer"">the spec on type assertions</a> for details.</p>
","20315155"
"How to format floating point numbers into a string using Go","9189","","<p>Using Go I'm trying to find the ""best"" way to format a floating point number into a string. I've looked for examples however I cannot find anything that specifically answers the questions I have.  All I want to do is use the ""best"" method to format a floating point number into a string. The number of decimal places may vary but will be known (eg. 2 or 4 or zero).
An example of what I want to achieve is below.
Based on the example below should I use
     fmt.Sprintf() 
or
   strconv.FormatFloat()
or
something else?
and, what is the normal usage of each and differences between each?</p>

<p>I also don't understand the significance of using either 32 or 64 in the following which currently has 32 :</p>

<pre><code>strconv.FormatFloat(float64(fResult), 'f', 2, 32)
</code></pre>

<p>Example:</p>

<pre><code>package main

import (
    ""fmt""
    ""strconv""
)

func main() {

    var (
        fAmt1 float32 = 999.99
        fAmt2 float32 = 222.22
    )

    var fResult float32 = float32(int32(fAmt1*100) +int32(fAmt2*100)) / 100

    var sResult1 string = fmt.Sprintf(""%.2f"", fResult)

    println(""Sprintf value = "" + sResult1)

    var sResult2 string = strconv.FormatFloat(float64(fResult), 'f', 2, 32)

    println(""FormatFloat value = "" + sResult2)

}
</code></pre>
","<p>Both <code>fmt.Sprintf</code> and <code>strconv.FormatFloat</code> use the same string formatting routine under the covers, so should give the same results.</p>

<p>If the precision that the number should be formatted to is variable, then it is probably easier to use <code>FormatFloat</code>, since it avoids the need to construct a format string as you would with <code>Sprintf</code>.  If it never changes, then you could use either.</p>

<p>The last argument to <code>FormatFloat</code> controls how values are rounded.  From the documentation:</p>

<blockquote>
  <p>It rounds the
  result assuming that the original was obtained from a floating-point
  value of bitSize bits (32 for float32, 64 for float64)</p>
</blockquote>

<p>So if you are working with <code>float32</code> values as in your sample code, then passing <code>32</code> is correct.</p>
","18951525"
"GoLang: Nested properties for structs with unknown property names?","9170","","<p>I'm using json to get some values into a struct from an external source.  Using UnMarshal to put the values in a struct.</p>

<p>I have a struct like this that UnMarshal puts values into:</p>

<pre><code>type Frame struct{
Type string
Value map[string]interface{}
}
var data Frame
</code></pre>

<p>After the UnMarshal, I can access type by: <code>data.Type</code></p>

<p>but if I try doing something like:</p>

<pre><code>if data.Type == 'image'{
    fmt.Println(fmt.Sprintf(""%s"", data.Value.Imagedata))
}
</code></pre>

<p>The compiler complains about no such value <code>data.Value.Imagedata</code></p>

<p>So my question is, how do I reference properties in GoLang in the code that I know WILL be there depending on some condition?</p>

<p>Doing this works:</p>

<pre><code>type Image struct{
Filename string
}

type Frame struct{
Type string
Value map[string]interface{}
}
</code></pre>

<p>But that isn't very flexible as I will be receiving different <code>Value</code>s</p>
","<p>The UnMarshal wil do its best to place the data where it best aligns with your struct. Technically your first example will work, but you are trying to access the <code>Value</code> field with dot notation, even though you declared it to be a map:</p>

<p>This should give you some form of output:</p>

<pre><code>if data.Type == 'image'{
    fmt.Printf(""%v\n"", data.Value[""Imagedata""])
}
</code></pre>

<p>... considering that ""Imagedata"" was a key in the json.</p>

<p>You have the option of defining the struct as deeply as you want or expect the structure to be, or using an interface{} and then doing type assertions on the values. With the Value field being a map, you would always access the keys like <code>Value[key]</code>, and then value of that map is an interface{} which you could type assert like  <code>Value[key].(float64)</code></p>

<p>As for doing more explicit structures, I have found that you could either break up the objects into their own structs, or, define it nested in one place:</p>

<h3>Nested (with anonymous struct)</h3>

<pre><code>type Frame struct {
    Type    string
    Value struct {
        Imagedata string `json:""image_data""`
    } 
}
</code></pre>

<h3>Seperate structs</h3>

<pre><code>type Frame struct {
    Type    string
    Value   value 
}

type value struct {
    Imagedata string `json:""image_data""`
}
</code></pre>

<p>I'm still learning Go myself, so this the extent of my current understanding :-)</p>
","9801442"
"How do I compare two functions for pointer equality in the latest Go weekly?","9148","","<p>In Go, is there any way to compare two non-nil function pointers to test for equality? My standard of equality is pointer equality. If not, is there any particular reason why pointer equality is not allowed?</p>

<p>As of now, if I attempt to do this in the straight-forward way:</p>

<pre><code>package main

import ""fmt""

func SomeFun() {
}

func main() {
    fmt.Println(SomeFun == SomeFun)
}
</code></pre>

<p>I get</p>

<pre><code>./func-pointers.go:12: invalid operation: SomeFun == SomeFun (func can only be compared to nil)
</code></pre>

<p>It is my understanding that this behavior was introduced recently.</p>

<hr>

<p>I've found an answer using the reflect package; however Atom suggests below that this actually produces undefined behavior. See Atom's post for more info and a possible alternative solution.</p>

<pre><code>package main

import ""fmt""
import ""reflect""

func SomeFun() { }

func AnotherFun() { }

func main() {
    sf1 := reflect.ValueOf(SomeFun)
    sf2 := reflect.ValueOf(SomeFun)
    fmt.Println(sf1.Pointer() == sf2.Pointer())

    af1 := reflect.ValueOf(AnotherFun)
    fmt.Println(sf1.Pointer() == af1.Pointer())
}
</code></pre>

<p>Outputs:</p>

<pre><code>true
false
</code></pre>
","<p>Note that there is a difference between equality and identity. The operators <code>==</code> and <code>!=</code> in Go1 are comparing the values for equivalence (except when comparing channels), not for identity. Because these operators are trying <em>not</em> to mix equality and identity, Go1 is more consistent than pre-Go1 in this respect.</p>

<p>Function equality is different from function identity.</p>

<hr>

<p>One reason for not allowing <code>==</code> and <code>!=</code> on function types is performance. For example, the following closure is not using any variables from its environment:</p>

<pre><code>f := func(){fmt.Println(""foo"")}
</code></pre>

<p>Disallowing comparisons of functions enables the compiler to generate a single implementation for the closure, instead of requiring the run-time to create a new closure (at run-time). So, from performance viewpoint the decision to disallow function comparisons was a good decision.</p>

<hr>

<p>In relation to using the <code>reflect</code> package to determine function identity, a code like</p>

<pre><code>func SomeFun()    {}
func AnotherFun() {}

func main() {
    sf1 := reflect.ValueOf(SomeFun)
    sf2 := reflect.ValueOf(SomeFun)
    fmt.Println(sf1.Pointer() == sf2.Pointer())  // Prints true

    af1 := reflect.ValueOf(AnotherFun)
    fmt.Println(sf1.Pointer() == af1.Pointer())  // Prints false
}
</code></pre>

<p>relies on <strong>undefined behavior</strong>. There are no guarantees as to what the program will print. The compiler may decide that it will merge <code>SomeFun</code> and <code>AnotherFun</code> into a single implementation, in which case the 2nd print statement would print <code>true</code>. In fact, there is absolutely no guarantee that the 1st print statement will print <code>true</code> (it may, under some other Go1 compiler and run-time, print <code>false</code>).</p>

<hr>

<p>A correct answer to your original question is:</p>

<pre><code>package main

import ""fmt""

func F1() {}
func F2() {}

var F1_ID = F1  // Create a *unique* variable for F1
var F2_ID = F2  // Create a *unique* variable for F2

func main() {
    f1 := &amp;F1_ID  // Take the address of F1_ID
    f2 := &amp;F2_ID  // Take the address of F2_ID

    // Compare pointers
    fmt.Println(f1 == f1)  // Prints true
    fmt.Println(f1 == f2)  // Prints false
}
</code></pre>
","9644797"
"Storing Golang JSON into Postgresql","9140","","<p>I want to store a certain struct into my database that has a JSON field within it.</p>

<pre><code>type Comp struct {
    CompId               int64           `db:""comp_id"" json:""comp_id""`
    StartDate            time.Time       `db:""start_date"" json:""start_date""`
    EndDate              time.Time       `db:""end_date"" json:""end_date""`
    WeeklySchedule       json.RawMessage `db:""weekly_schedule"" json:""weekly_schedule""`
}
</code></pre>

<p>The schema for the table is:</p>

<pre><code>CREATE TABLE IF NOT EXISTS Tr.Comp(
    comp_id                 SERIAL,
    start_date              timestamp NOT NULL,
    end_date                timestamp NOT NULL,
    weekly_schedule         json NOT NULL,
    PRIMARY KEY (comp_id)
);
</code></pre>

<p>I am using sqlx and lib/pq driver in my project and the following will not execute. Instead it panics saying there is a nil pointer. DB is a global <code>*sqlx.DB</code> struct</p>

<pre><code>    tx := DB.MustBegin()

    compFixture := Comp{
        StartDate:            time.Now(),
        EndDate:              time.Now().AddDate(1, 0, 0),
        WeeklySchedule:       json.RawMessage([]byte(""{}"")),
    }
    _, err = tx.NamedExec(
        `INSERT INTO 
            Tr.Comp(comp_id, 
                start_date, end_date, weekly_schedule) 
            VALUES (DEFAULT, 
                :start_date, :end_date, :weekly_schedule)  
            RETURNING comp_id;`, compFixture)
    if err != nil {
        t.Fatal(""Error creating fixture."", err)
    }
</code></pre>

<p>When I remove <code>weekly_schedule</code> from the schema and fixture things run fine. But for some reason, the when this field is included, the program panics. Any idea as to how I should define the <code>weekly_schedule</code> field in both my DB schema and Go struct?</p>
","<p>sqlx has a type <code>JSONText</code> in <code>github.com/jmoiron/sqlx/types</code> that will do what you need</p>

<p><a href=""http://godoc.org/github.com/jmoiron/sqlx/types#JSONText"" rel=""nofollow"">doc</a> for JSONText</p>
","25797431"
"Golang Converting image.Image to []byte","9139","","<p>Having trouble converting an image.Image to []byte. The problem spot is wrapped in dotted lines. </p>

<pre><code>image_data, err := mybucket.Get(key)

if err != nil {
    panic(err.Error())
}

// reset format of data []byte to image.Image

original_image, _, err := image.Decode(bytes.NewReader(image_data))

new_image := resize.Resize(160, 0, original_image, resize.Lanczos3)
- - - - - - - - - - - - - - - - - - - - - - - - - - -
// reset format the image.Image to data []byte here
var send_S3 []byte
var byteWriter = bufio.NewWriter(send_S3)
- - - - - - - - - - - - - - - - - - - - - - - - - -
err = jpeg.Encode(byteWriter, new_image, nil)

new_path := key + ""_sm""

err = mybucket.Put(new_path, send_S3, ""image/jpg"", ""aclstring"")
</code></pre>

<p>Basically, I need new_image to be in []byte format so that I can send it up to my S3 bucket.</p>

<p>Thanks for the help.</p>
","<p>You want a bytes.Buffer, not a bufio.Writer. bytes.Buffer is used when you need a writer that writes to memory. bufio.Writer just caches data in memory before forwarding it to another writer.</p>

<pre><code>buf := new(bytes.Buffer)
err := jpeg.Encode(buf, new_image, nil)
send_s3 := buf.Bytes()
</code></pre>
","22945643"
"Golang idiomatic error handling","9139","","<p>I have created a ""base"" repository struct for standalone and embedded use (e.g with CustomerRepository) to avoid having to check errors all the time, and to create an abstraction for Gorp (the database toolkit), and to create an API slightly more to my liking. </p>

<p>I check for errors in this base struct and panic if one is found, as if one does exist in my opinion it then indicates a dev error and the code may as well panic, seeing as validation etc. should happen before data gets to the Repository.</p>

<p>I found this question <a href=""https://stackoverflow.com/questions/16963298/golang-error-handling-techniques"">Go Error Handling Techniques</a>, but it doesn't cover wrapping errors up in a base struct like I have done and just panicking.</p>

<p>Is what I have done idiomatic Go?</p>

<pre><code>package repositories

import (
    ""github.com/coopernurse/gorp""
)

type Repository struct {
    Gorp gorp.SqlExecutor
}

func (r *Repository) GetById(i interface{}, id int) interface{} {
    obj, err := r.Gorp.Get(i, id)
    if err != nil {
        panic(err)
    }
    return obj
}

func (r *Repository) Get(holder interface{}, query string, args ...interface{}) interface{} {
    if err := Gorp.SelectOne(holder, query, args); err != nil {
        panic(err)
    }
}

func (r *Repository) Select(i interface{}, query string, args ...interface{}) {
    if _, err := Gorp.Select(holder, query, args); err != nil {
        panic(err)
    }
}

func (r *Repository) Insert(list ...interface{}) {
    if err := r.Gorp.Insert(list...); err != nil {
        panic(err)
    }
}

func (r *Repository) Update(list ...interface{}) int64 {
    count, err := r.Gorp.Update(list...)
    if err != nil {
        panic(err)
    }
    return count
}

func (r *Repository) Delete(list ...interface{}) int64 {
    count, err := r.Gorp.Delete(list...)
    if err != nil {
        panic(err)
    }
    return count
}
</code></pre>
","<p>The idiomatic way would be to return the error with the associated type value, i.e. </p>

<pre><code>func (list ...interface{}) (v int46, err error) {}
</code></pre>

<p>... and subsequently check err != nil where these functions are called.</p>

<p>Ultimately using panic() will result in Exception-like error handling and more boiler-plate code (if you deem the error to be recoverable).</p>

<p>Idiomatic error handling is verbose in Go, but less so than emulating exceptions (which is fundamentally not the ""Go way"").</p>
","21265646"
"Why does adding concurrency slow down this golang code?","9139","","<p>I've got a bit of Go code that I've been tinkering with to answer a little curiosity of mine related to a video game my brother-in-law plays. </p>

<p>Essentially, the code below simulates interactions with monsters in the game and how often he can expect them to drop items upon their defeat. The problem I'm having is that I would expect a piece of code like this to be perfect for parallelization, but when I add in concurrency the time it takes to do all of the simulations tends to slow down by 4-6 times the original without concurrency. </p>

<p>To give you a better understanding of how the code works, I have three main functions: The interaction function which is a simple interaction between the player and a monster. It returns 1 if the monster drops an item, and 0 otherwise. The simulation function runs several interactions and returns a slice of interaction results (i.e., 1's and 0's representing successful/unsuccessful interactions). Finally, there is the test function which runs a set of simulations and returns a slice of simulation results which are the total number of interactions that resulted in a dropped item. It's the last function which I am trying to run in parallel. </p>

<p>Now, I could understand why the code would slow down if I created a goroutine for each test that I want to run. Assuming I'm running 100 tests, the context switching between each of the goroutines across the 4 CPUs my MacBook Air has would kill the performance, but I'm only creating as many goroutines as I have processors and dividing the number of tests between the goroutines. I would expect this to actually speed up the code's performance since I am running each of my tests in parallel, but, of course, I'm getting a major slow down instead. </p>

<p>I'd love to figure out why this is happening, so any help would be greatly appreciated.</p>

<p>Below is the regular code without the go routines:</p>

<pre><code>package main

import (
    ""fmt""
    ""math/rand""
    ""time""
)

const (
    NUMBER_OF_SIMULATIONS = 1000
    NUMBER_OF_INTERACTIONS = 1000000
    DROP_RATE = 0.0003
)

/**
 * Simulates a single interaction with a monster
 *
 * Returns 1 if the monster dropped an item and 0 otherwise
 */
func interaction() int {
    if rand.Float64() &lt;= DROP_RATE {
        return 1
    }
    return 0
}

/**
 * Runs several interactions and retuns a slice representing the results
 */
func simulation(n int) []int {
    interactions := make([]int, n)
    for i := range interactions {
        interactions[i] = interaction()
    }
    return interactions
}

/**
 * Runs several simulations and returns the results
 */
func test(n int) []int {
    simulations := make([]int, n)
    for i := range simulations {
        successes := 0
        for _, v := range simulation(NUMBER_OF_INTERACTIONS) {
            successes += v
        }
        simulations[i] = successes
    }
    return simulations
}

func main() {
    rand.Seed(time.Now().UnixNano())
    fmt.Println(""Successful interactions: "", test(NUMBER_OF_SIMULATIONS))
}
</code></pre>

<p>And, here is the concurrent code with the goroutines:</p>

<pre><code>package main

import (
    ""fmt""
    ""math/rand""
    ""time""
    ""runtime""
)

const (
    NUMBER_OF_SIMULATIONS = 1000
    NUMBER_OF_INTERACTIONS = 1000000
    DROP_RATE = 0.0003
)

/**
 * Simulates a single interaction with a monster
 *
 * Returns 1 if the monster dropped an item and 0 otherwise
 */
func interaction() int {
    if rand.Float64() &lt;= DROP_RATE {
        return 1
    }
    return 0
}

/**
 * Runs several interactions and retuns a slice representing the results
 */
func simulation(n int) []int {
    interactions := make([]int, n)
    for i := range interactions {
        interactions[i] = interaction()
    }
    return interactions
}

/**
 * Runs several simulations and returns the results
 */
func test(n int, c chan []int) {
    simulations := make([]int, n)
    for i := range simulations {
        for _, v := range simulation(NUMBER_OF_INTERACTIONS) {
            simulations[i] += v
        }
    }
    c &lt;- simulations
}

func main() {
    rand.Seed(time.Now().UnixNano())

    nCPU := runtime.NumCPU()
    runtime.GOMAXPROCS(nCPU)
    fmt.Println(""Number of CPUs: "", nCPU)

    tests := make([]chan []int, nCPU)
    for i := range tests {
        c := make(chan []int)
        go test(NUMBER_OF_SIMULATIONS/nCPU, c)
        tests[i] = c
    }

    // Concatentate the test results
    results := make([]int, NUMBER_OF_SIMULATIONS)
    for i, c := range tests {
        start := (NUMBER_OF_SIMULATIONS/nCPU) * i
        stop := (NUMBER_OF_SIMULATIONS/nCPU) * (i+1)
        copy(results[start:stop], &lt;-c)
    }

    fmt.Println(""Successful interactions: "", results)
}
</code></pre>

<p><strong>UPDATE (01/12/13 18:05)</strong> </p>

<p>I've added a new version of the concurrent code below that creates a new Rand instance for each goroutine per ""the system""'s suggestion below. I'm now seeing a very slight speed up compared to the serial version of the code (around a 15-20% reduction in overall time taken). I'd love to know why I don't see something closer to a 75% reduction in time since I'm spreading the workload over my MBA's 4 cores. Does anyone have any further suggestions that could help out?</p>

<pre><code>package main

import (
    ""fmt""
    ""math/rand""
    ""time""
    ""runtime""
)

const (
    NUMBER_OF_SIMULATIONS = 1000
    NUMBER_OF_INTERACTIONS = 1000000
    DROP_RATE = 0.0003
)

/**
 * Simulates a single interaction with a monster
 *
 * Returns 1 if the monster dropped an item and 0 otherwise
 */
func interaction(generator *rand.Rand) int {
    if generator.Float64() &lt;= DROP_RATE {
        return 1
    }
    return 0
}

/**
 * Runs several interactions and retuns a slice representing the results
 */
func simulation(n int, generator *rand.Rand) []int {
    interactions := make([]int, n)
    for i := range interactions {
        interactions[i] = interaction(generator)
    }
    return interactions
}

/**
 * Runs several simulations and returns the results
 */
func test(n int, c chan []int) {
    source := rand.NewSource(time.Now().UnixNano())
    generator := rand.New(source)
    simulations := make([]int, n)
    for i := range simulations {
        for _, v := range simulation(NUMBER_OF_INTERACTIONS, generator) {
            simulations[i] += v
        }
    }
    c &lt;- simulations
}

func main() {
    rand.Seed(time.Now().UnixNano())

    nCPU := runtime.NumCPU()
    runtime.GOMAXPROCS(nCPU)
    fmt.Println(""Number of CPUs: "", nCPU)

    tests := make([]chan []int, nCPU)
    for i := range tests {
        c := make(chan []int)
        go test(NUMBER_OF_SIMULATIONS/nCPU, c)
        tests[i] = c
    }

    // Concatentate the test results
    results := make([]int, NUMBER_OF_SIMULATIONS)
    for i, c := range tests {
        start := (NUMBER_OF_SIMULATIONS/nCPU) * i
        stop := (NUMBER_OF_SIMULATIONS/nCPU) * (i+1)
        copy(results[start:stop], &lt;-c)
    }

    fmt.Println(""Successful interactions: "", results)
}
</code></pre>

<p><strong>UPDATE (01/13/13 17:58)</strong></p>

<p>Thanks everyone for the help in figuring out my problem. I did finally get the answer I was looking for and so I thought I would just summarize here for anyone who has the same problem. </p>

<p>Essentially I had two main issues: first, even though my code was <a href=""http://en.wikipedia.org/wiki/Embarrassingly_parallel"">embarrassingly parallel</a>, it was running slower when I split it up amongst the available processors, and second, the solution opened up another issue, which was my serial code was running twice as slow as the concurrent code running on single processor, which you would expect to be roughly the same . In both cases the issue was the random number generator function <code>rand.Float64</code>. Basically, this is a convenience function provided by the <code>rand</code> package. In that package, a global instance of the <code>Rand</code> struct is created and used by each of the convenience functions. This global <code>Rand</code> instance has a mutex lock associated with it. Since I was using this convenience function, I wasn't truly able to parallelize my code since each of the goroutines would have to line up for access to the global <code>Rand</code> instance. The solution (as ""the system"" suggests below) is to create a separate instance of the <code>Rand</code> struct for each goroutine. This solved the first problem but created the second one.</p>

<p>The second problem was that my non-parallel concurrent code (i.e., my concurrent code running with only a single processor) was running twice as fast as the sequential code. The reason for this was that, even though I was only running with a single processor and a single goroutine, that goroutine had its own instance of the <code>Rand</code> struct that I had created, and I had created it without the mutex lock. The sequential code was still using the <code>rand.Float64</code> convenience function which made use of the global mutex protected <code>Rand</code> instance. The cost of acquiring that lock was causing the sequential code to run twice as slow. </p>

<p>So, the moral of the story is, whenever performance matters, make sure you create an instance of the <code>Rand</code> struct and call the function you need off of it rather than using the convenience functions provided by the package.</p>
","<p>The issue seems to come from your use of <code>rand.Float64()</code>, which uses a shared global object with a Mutex lock on it.</p>

<p>Instead, if for each CPU you create a separate <code>rand.New()</code>, pass it through to the <code>interactions()</code>, and use it to create the <code>Float64()</code>, there's a massive improvement.</p>

<hr>

<p><em>Update to show the changes to the new example code in the question that now uses <code>rand.New()</code></em></p>

<p>The <code>test()</code> function was modified to either use a given channel, or return the result.</p>

<pre><code>func test(n int, c chan []int) []int {
    source := rand.NewSource(time.Now().UnixNano())
    generator := rand.New(source)
    simulations := make([]int, n)
    for i := range simulations {
        for _, v := range simulation(NUMBER_OF_INTERACTIONS, generator) {
            simulations[i] += v
        }   
    }   
    if c == nil {
        return simulations
    }   
    c &lt;- simulations
    return nil 
}
</code></pre>

<p>The <code>main()</code> function was updated to run both tests, and output the timed result.</p>

<pre><code>func main() {
    rand.Seed(time.Now().UnixNano())

    nCPU := runtime.NumCPU()
    runtime.GOMAXPROCS(nCPU)
    fmt.Println(""Number of CPUs: "", nCPU)

    start := time.Now()
    fmt.Println(""Successful interactions: "", len(test(NUMBER_OF_SIMULATIONS, nil)))
    fmt.Println(time.Since(start))

    start = time.Now()
    tests := make([]chan []int, nCPU)
    for i := range tests {
        c := make(chan []int)
        go test(NUMBER_OF_SIMULATIONS/nCPU, c)
        tests[i] = c
    }

    // Concatentate the test results
    results := make([]int, NUMBER_OF_SIMULATIONS)
    for i, c := range tests {
        start := (NUMBER_OF_SIMULATIONS/nCPU) * i
        stop := (NUMBER_OF_SIMULATIONS/nCPU) * (i+1)
        copy(results[start:stop], &lt;-c)
    }
    fmt.Println(""Successful interactions: "", len(results))
    fmt.Println(time.Since(start))
}
</code></pre>

<p>The output is I received:</p>

<pre>
> Number of CPUs:  2 
>
> Successful interactions:  1000 
> 1m20.39959s
>
> Successful interactions:  1000
> 41.392299s
</pre>
","14299220"
"Default rules in Make","9104","","<p>Is there a mechanism in make to allow for default global implicit rules that are available anywhere, similar to the built-in rules?</p>

<p>Make provides some built-inimplicit rules for compiling C/C++/Fortran files, without even requiring a <code>Makefile</code> for simple cases.  However, when compiling other languages (e.g. Go programming language files), a <code>Makefile</code> is always required.  I would like to extend my Makeenvironment to have implicit rules available by default.</p>
","<p>This is not normally desirable, as it would cause your Makefile to be less portable; it wouldn't work on somebody else's machine if they didn't have it set up that way.</p>

<p>However, if you want to do this, create a ""global"" Makefile somewhere with your default rules for Go files, then add its path to the MAKEFILES environment variable. This global Makefile will be processed before any Makefile when you run ""make"", just as if you had included its source at the top of the file.</p>
","3038293"
"How encode []rune into []byte using utf8 in golang?","9099","","<p>So it's really easy to decode a <code>[]byte</code> into a <code>[]rune</code> (simply cast to <code>string</code>, then cast to <code>[]rune</code> works very nicely, I'm assuming it defaults to utf8 and with filler bytes for invalids). My question is - how are you suppose to decode this <code>[]rune</code> back to <code>[]byte</code> in utf8 form?</p>

<p>Am I missing something or do I have manually call <a href=""http://golang.org/pkg/unicode/utf8/#EncodeRune"" rel=""nofollow"">EncodeRune</a> for every single rune in my <code>[]rune</code>? Surely there is an encoder that I can simply pass a <code>Writer</code> to.</p>
","<p>You can simply convert a rune slice (<code>[]rune</code>) to <code>string</code> which you can convert back to <code>[]byte</code>.</p>

<p>Example:</p>

<pre><code>rs := []rune{'H', 'e', 'l', 'l', 'o', ' ', '世', '界'}
bs := []byte(string(rs))

fmt.Printf(""%s\n"", bs)
fmt.Println(string(bs))
</code></pre>

<p>Output (try it on the <a href=""http://play.golang.org/p/9RYoQhUTHj"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>Hello 世界
Hello 世界
</code></pre>

<p>The <a href=""http://golang.org/ref/spec#Conversions"" rel=""noreferrer"">Go Specification: Conversions</a> mentions this case explicitly: <a href=""http://golang.org/ref/spec#Conversions_to_and_from_a_string_type"" rel=""noreferrer"">Conversions to and from a string type</a>, point #3:</p>

<blockquote>
  <p>Converting a slice of runes to a string type yields a string that is the concatenation of the individual rune values converted to strings.</p>
</blockquote>
","29255836"
"Unexpected invalid memory address or nil pointer dereference","9099","","<p>I'm getting a runtime error for an invalid memory address.</p>

<pre><code>panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x10 pc=0x4e0f24]

goroutine 1192592 [running]:
panic(0x793540, 0xc420010040)
#011/usr/local/go/src/runtime/panic.go:500 +0x1a1
foobar/sd.(*Channel).Attributes(0x0, 0xc420110101, 0xc42278f9b0, 0x9)
#011/home/app/go/src/foobar/sd/channel.go:36 +0x54
</code></pre>

<p>channel.go looks like this:</p>

<pre><code>35 func (m *Channel) Attributes() (*ChannelAttrs, error) {
36    redisHash := ""sd:channels:"" + m.hash
37
38    rc := m.ctx.RedisPool.Get()
39    values, err := redis.Values(rc.Do(""HGETALL"", redisHash))
40    rc.Close()
41    if err != nil {
42        return nil, err
43    }
44    attrs := ChannelAttrs{}
45    redis.ScanStruct(values, &amp;attrs)
46    return &amp;attrs, nil
47 }
</code></pre>

<p>How is it possible that the line 36 is causing this? Is it somehow possible for <code>m</code> to be nil? If so, how?</p>

<p>Note: hash is defined as string</p>
","<p>This means that <code>Attributes</code> is being called with receiver <code>m</code> as <code>nil</code>.</p>

<p>In principle methods can be called with <code>nil</code> receivers (and this may even be useful if they check for <code>nil</code>) - see <a href=""http://groups.google.com/forum/#!topic/golang-nuts/wcrZ3P1zeAk"" rel=""noreferrer"">here</a> - but this particular method <code>Attributes()</code> is not designed to be called with a <code>nil</code> receiver, as <code>m</code> is being dereferenced without a <code>nil</code> check. This (method being called with a <code>nil</code> receiver <code>m</code>) is what is happening in your calling code. </p>

<p>See a simplified example <a href=""https://play.golang.org/p/d-MxAtKMPG"" rel=""noreferrer"">on the playground here</a>, and note that commenting out <code>+ m.hash</code> makes the whole thing work fine, as <a href=""http://play.golang.org/p/KSQ0cMxkmb"" rel=""noreferrer"">here</a>.</p>

<p>Code below:</p>

<pre><code>package main

import (
    ""fmt""
)

type Channel struct {
    hash string
}

func (m *Channel) Attributes() {
    r := ""x"" + m.hash
    fmt.Println(r)
}

func main() {
    var c *Channel
    c.Attributes()
}
</code></pre>

<p>The output of which is:</p>

<pre><code>panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0xffffffff addr=0x0 pc=0x20131]

goroutine 1 [running]:
panic(0x102360, 0x1040a038)
    /usr/local/go/src/runtime/panic.go:500 +0x720
main.(*Channel).Attributes(0x0, 0x104000f0)
/tmp/sandbox285779060/main.go:12 +0x131
main.main()
    /tmp/sandbox285779060/main.go:18 +0x20
</code></pre>
","40201281"
"Golang background processing","9081","","<p>How can one do background processing/queueing in Go?</p>

<p>For instance, a user signs up, and you send them a confirmation email - you want to send the confirmation email in the background as it may be slow, and the mail server may be down etc etc.</p>

<p>In Ruby a very nice solution is <a href=""https://github.com/collectiveidea/delayed_job"">DelayedJob</a>, which queues your job to a relational database (i.e. simple and reliable), and then uses background workers to run the tasks, and retries if the job fails.</p>

<p>I am looking for a simple and reliable solution, not something low level if possible.</p>
","<p>While you could just open a goroutine and do every async task you want, this is not a great solution if you want reliability, i.e. the promise that if you trigger a task it will get done. </p>

<p>If you really need this to be production grade, opt for a distributed work queue. I don't know of any such queues that are specific to golang, but you can work with rabbitmq, beanstalk, redis or similar queuing engines to offload such tasks from your process and add fault tolerance and queue persistence.</p>
","21749062"
"Built-in ""html/template"" or ""mustache"", which one shall I use?","9080","","<p>I'm new to <a href=""http://golang.org"">golang</a>, and want to use it to build a web app.</p>

<p>I found it has built-in <a href=""http://golang.org/pkg/html/template/"">html/template</a>, which can render html template with specified data, and there is also a <a href=""https://github.com/hoisie/mustache"">mustache port</a> which seems good.</p>

<p>I'm not sure which one shall I use. Please give me some advices or comparations between them to let me decide, thank you.</p>
","<p>I prefer use html/template because it comes in Go library, and by its simple design.</p>

<p>You can see in the next web application how powerfull it is:</p>

<p><a href=""https://bitbucket.org/jzs/sketchground/src"">https://bitbucket.org/jzs/sketchground/src</a></p>
","10777727"
"Specifically check for timeout error","9074","","<p>I use the following to check for timeouts when calling a webservice, but I would like to check specifically if there is a timeout error returned. How do I do that :S</p>

<p>I have this:</p>

<pre><code>// Timeout
type Timeout struct {
    Connect   time.Duration
    ReadWrite time.Duration
}

// TimeoutDialer
func TimeoutDialer(timeout *Timeout) func(net, addr string) (c net.Conn, err error) {
    return func(netw, addr string) (net.Conn, error) {    
        conn, err := net.DialTimeout(netw, addr, timeout.Connect)
        if err != nil {
            return nil, err
        }
        conn.SetDeadline(time.Now().Add(timeout.ReadWrite))
        return conn, nil
    }
}

// HttpClient
func HttpClient(config Config) *http.Client {
    to := &amp;Timeout{
        Connect:   time.Duration(config.MaxWait) * time.Second,
        ReadWrite: time.Duration(config.MaxWait) * time.Second,
    }

    return &amp;http.Client{
        Transport: &amp;http.Transport{
            Dial: TimeoutDialer(to),
        },
    }
}
</code></pre>
","<p>As of go1.6, all errors from timeouts should conform to <code>net.Error</code> with <code>Timeout()</code> set properly. All you need to check for is: </p>

<pre><code>if err, ok := err.(net.Error); ok &amp;&amp; err.Timeout() {
</code></pre>

<hr>

<p>In older versions, checking for timeout through the http package was more difficult.</p>

<ul>
<li>You can get a <code>*net.OpError</code> with Timeout() if you hit a Deadline set on the underlying connection.</li>
<li>You can get a <code>tlsHandshakeTimeoutError</code> (which is obviously not exported) that implements the <code>net.Error</code> interface.</li>
<li>You can get a <code>url.Error</code>, if there was a problem within the url package (timeout during initial connection)</li>
<li>You can get an error with ""use of closed network connection"" if you hit a timeout set with <code>http.Client.Timeout</code>[go1.3+] (which calls <code>Transport.CancelRequest</code>). As of go1.5, this will have the Timeout property set correctly.</li>
</ul>

<p>You could check for a <code>net.Error</code> with a type switch:</p>

<pre><code>switch err := err.(type) {
case net.Error:
    if err.Timeout() {
        fmt.Println(""This was a net.Error with a Timeout"")
    }
case *url.Error:
    fmt.Println(""This is a *url.Error"")
    if err, ok := err.Err.(net.Error); ok &amp;&amp; err.Timeout() {
        fmt.Println(""and it was because of a timeout"")
    }
}
</code></pre>

<p>With go &lt; 1.5 you will need to check the error string for an <code>http.Client</code> timeout:</p>

<pre><code>if err != nil &amp;&amp; strings.Contains(err.Error(), ""use of closed network connection"") {
    fmt.Println(""Could be from a Transport.CancelRequest"")
}
</code></pre>
","23497404"
"How do I read a streaming response body using Golang's net/http package?","9068","","<p>I am trying to connect to an endpoint that does http streaming of json data.  I was wondering how to perform a basic request using Go's net/http package and read the response as it comes in.  Currently, I am only able to read the response when the connection closes.  </p>

<pre><code>resp, err := http.Get(""localhost:8080/stream"")
if err != nil {
    ...
}
...
// perform work while connected and getting data
</code></pre>

<p>Any insight would be greatly appreciated!</p>

<p>Thanks!</p>

<p>-RC</p>
","<p>The way to do streaming JSON parsing is with a Decoder: </p>

<pre><code>json.NewDecoder(resp.Body).Decode(&amp;yourStuff)
</code></pre>

<p>For a streaming API where it's a bunch of objects coming back (a la Twitter), that should stream great with this model and the built-in encoding/json API. But if it's a large response where you have an object that's got a giant array with 10MB of stuff, you probably need to write your own Decoder to pull those inner pieces out and return them. I'm running into that problem with a library I've written.</p>
","22115519"
"go tool: no such tool ""tour""","9066","","<p>I'm trying out Go for the first time. I was following <a href=""https://tour.golang.org/welcome/3"" rel=""noreferrer"">these docs</a> and wanted to run the go tour locally, but I haven't figured out how to get it to work.  </p>

<p>Where is the tool ""tour"" supposed to be found?<br>
I'm on OSX 10.11.3, and I installed Go via Homebrew<br>
my Go entries in <code>.zshrc</code></p>

<pre><code>export GOPATH=$HOME/code/Go
export GOROOT=/usr/local/opt/go/libexec
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:$GOROOT/bin
</code></pre>
","<p><code>tour</code> is not installed by default with an installation of go. You need to <code>go get</code> it: </p>

<pre><code>go get golang.org/x/tour/gotour
</code></pre>

<p>Docs: <a href=""https://github.com/golang/tour/"">https://github.com/golang/tour/</a></p>
","34938306"
"importing packages in go","9066","","<p>In the go programming language, why after importing a package do I still have to prefix a method within that package with the package name?</p>

<p>i.e.</p>

<pre><code>import ""io/ioutil""

func main() { 
    content, err = iotuil.ReadFile(""somefile.txt"")
    // etc..
}
</code></pre>

<p>Isn't this redundant?  In Java, for example, you can do things like Files.readAllLines etc without having Files imported.</p>
","<p>I guess this doesn't really answer your question, but if you want, you can actually call the methods without explicitly stating the package - just import with a <code>.</code> in front of the names (but this is not recommended; see below):</p>

<pre><code>package main

import (
  . ""fmt""
  . ""io/ioutil""
)

func main () {
  content, err := ReadFile(""testfile"")
  if err != nil {
    Println(""Errors"")
  }
  Println(""My file:\n"", string(content))
}
</code></pre>

<p>Note @jimt's comment below - this practice is <strong>not</strong> advised outside of tests as it could cause name conflicts with future releases. Also, definitely agree with @DavidGrayson's point of being nicer to read/see where things come from.</p>
","12925693"
"Go Connecting to S3","9050","","<p>Working on learning Go, and I am writing a component to manage pictures.</p>

<p>I've been looking at the s3 library here: <a href=""https://godoc.org/launchpad.net/goamz/s3#ACL"" rel=""nofollow noreferrer"">https://godoc.org/launchpad.net/goamz/s3#ACL</a></p>

<p>In Node, I use the Knox client and connect to my bucket like this:</p>

<pre><code>    var bucket = knox.createClient({
        key: config.get('AWS_KEY'),
        secret: config.get('AWS_SECRET'),
        bucket: ""bucketName""
    });
</code></pre>

<p>In the Go s3 library I see all of the functions I need to work with the s3 bucket, but I can't find the connect function - similar to this one above.</p>

<p>So far, I've found this in the Docs:</p>

<pre><code>    type Auth struct {
        AccessKey, SecretKey string
    }
</code></pre>

<p>And it seems like I need to call this function:</p>

<pre><code>    func EnvAuth() (auth Auth, err error)
</code></pre>

<p>This is the EnvAuth function:</p>

<pre><code>    func EnvAuth() (auth Auth, err error) {
        auth.AccessKey = os.Getenv(""AWS_ACCESS_KEY_ID"")
        auth.SecretKey = os.Getenv(""AWS_SECRET_ACCESS_KEY"")
        // We fallback to EC2_ env variables if the AWS_ variants are not used.
        if auth.AccessKey == """" &amp;&amp; auth.SecretKey == """" {
            auth.AccessKey = os.Getenv(""EC2_ACCESS_KEY"")
            auth.SecretKey = os.Getenv(""EC2_SECRET_KEY"")
        }
        if auth.AccessKey == """" {
            err = errors.New(""AWS_ACCESS_KEY_ID not found in environment"")
        }
        if auth.SecretKey == """" {
            err = errors.New(""AWS_SECRET_ACCESS_KEY not found in environment"")
        }
        return
     }
</code></pre>

<p>In the S3 docs, I see all of the things that I need. I am just unsure about how I use the library, this is the first time I use a Go library.</p>

<p>A guide on connecting to AWS/S3, then making a delete call would be very helpful!</p>

<p>Many thanks :)</p>
","<p>It's probably easier than you've thought. This sample code lists a bucket. You have to use your credentials and a bucket name, of course...</p>

<pre><code>package main

import (
    ""fmt""
    ""launchpad.net/goamz/aws""
    ""launchpad.net/goamz/s3""
    ""log""
)

func main() {
    auth := aws.Auth{
        AccessKey: ""ASDFASDFASDFASDK"",
        SecretKey: ""DSFSDFDWESDADSFASDFADFDSFASDF"",
    }
    euwest := aws.EUWest

    connection := s3.New(auth, euwest)
    mybucket := connection.Bucket(""mytotallysecretbucket"")
    res, err := mybucket.List("""", """", """", 1000)
    if err != nil {
        log.Fatal(err)
    }
    for _, v := range res.Contents {
        fmt.Println(v.Key)
    }
}
</code></pre>
","22867817"
"Easy way to check string is in json format in golang?","9038","","<p>I want to create a function to receive an input string which can be string in json format or just a string. For example, something easy like following function.</p>

<pre><code>func checkJson(input string){
   if ... input is in json ... {
      fmt.Println(""it's json!"")
   } else {
      fmt.Println(""it's normal string!"")
   }
}
</code></pre>
","<p>I was unclear if you needed to know about just a ""quoted string"" or if you needed to know about json, or the difference between both of them, so this shows you how to detect both scenarios so you can be very specific.</p>

<p>I posted the interactive code sample here as well: <a href=""http://play.golang.org/p/VmT0BVBJZ7"">http://play.golang.org/p/VmT0BVBJZ7</a></p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
)

func isJSONString(s string) bool {
    var js string
    return json.Unmarshal([]byte(s), &amp;js) == nil

}

func isJSON(s string) bool {
    var js map[string]interface{}
    return json.Unmarshal([]byte(s), &amp;js) == nil

}

func main() {
    var tests = []string{
        `""Platypus""`,
        `Platypus`,
        `{""id"":""1""}`,
    }

    for _, t := range tests {
        fmt.Printf(""isJSONString(%s) = %v\n"", t, isJSONString(t))
        fmt.Printf(""isJSON(%s) = %v\n\n"", t, isJSON(t))
    }

}
</code></pre>

<p>Which will output this:</p>

<pre><code>isJSONString(""Platypus"") = true
isJSON(""Platypus"") = false

isJSONString(Platypus) = false
isJSON(Platypus) = false

isJSONString({""id"":""1""}) = false
isJSON({""id"":""1""}) = true
</code></pre>
","22129435"
"Ticker Stop behaviour in Golang","9027","","<p>If I am ranging over a ticker channel and call stop() the channel is stopped but not closed.</p>

<p>In this Example:</p>

<pre><code>package main

import (
    ""time""
    ""log""
)

func main() {
    ticker := time.NewTicker(1 * time.Second)
    go func(){
        for _ = range ticker.C {
            log.Println(""tick"")
        }
        log.Println(""stopped"")
    }()
    time.Sleep(3 * time.Second)
    log.Println(""stopping ticker"")
    ticker.Stop()
    time.Sleep(3 * time.Second)
}
</code></pre>

<p>Running produces:</p>

<pre><code>2013/07/22 14:26:53 tick
2013/07/22 14:26:54 tick
2013/07/22 14:26:55 tick
2013/07/22 14:26:55 stopping ticker
</code></pre>

<p>So that goroutine never exits. Is there a better way to handle this case? Should I care that the goroutine never exited?</p>
","<p>Signal ""done"" on a second channel and select in your goroutine between ticker and done channel.</p>

<p>Depending on what you really want to do a better solution might exist, but this is hard to tell from the reduced demo code.</p>
","17798451"
"Unstructured MongoDB collections with mgo","9024","","<p>I'm VERY new to Go. From what I've seen in the examples of mGo, in order to query a collection and then read from it, you have to predefine the data that will be coming back in a struct.</p>

<pre><code>type Person struct {
    ID        bson.ObjectId `bson:""_id,omitempty""`
    Name      string
    Phone     string
    Timestamp time.Time
}
</code></pre>

<p>In PHP, the document was assigned to an array. This was perfect as one record may have completely different set of keys (may not contain Name or Phone but contain Email) and I could access it directly without setting up a predefined class / struct / variable.</p>

<p>Is there a way to do the same in Go / mGo?</p>
","<p>There are multiple ways you can handle this.</p>

<p><strong>Using a map:</strong></p>

<pre><code>var m bson.M
err := collection.Find(nil).One(&amp;m)
check(err)
for key, value := range m {
    fmt.Println(key, value)
}
</code></pre>

<p>Note that there's nothing special about <a href=""http://labix.org/v2/mgo/bson#M"" rel=""noreferrer"">bson.M</a> as far as mgo is concerned. It's just a <code>map[string]interface{}</code> type, and you can define your own map types and use them with mgo, even if they have a different value type.</p>

<p><strong>Using a document slice:</strong></p>

<p>The <a href=""http://labix.org/v2/mgo/bson#D"" rel=""noreferrer"">bson.D</a> is a slice that is internally known to mgo, and it exists both to offer a more efficient mechanism and to offer a way to preserve the ordering of keys, which is used by MongoDB in some circumstances (for example, when defining indexes).</p>

<p>For example:</p>

<pre><code>var d bson.D
err := collection.Find(nil).One(&amp;d)
check(err)
for i, elem := range d {
    fmt.Println(elem.Name, elem.Value)
}
</code></pre>

<p><strong>Using an ,inline map field</strong></p>

<p>The <code>,inline</code> bson <a href=""http://labix.org/v2/mgo/bson#Marshal"" rel=""noreferrer"">flag</a> can also be used in a map field, so that you can have your cake and eat it too. In other words, it enables using a struct so that manipulating known fields is convenient, and at the same time allows dealing with unknown fields via the inline map.</p>

<p>For example:</p>

<pre><code>type Person struct {
    ID        bson.ObjectId `bson:""_id,omitempty""`
    Name      string
    Phone     string
    Extra     bson.M `bson:"",inline""`
}
</code></pre>
","18346347"
"expected declaration, found 'IDENT' item","8987","","<p>Im writing a small code using Memcache Go API to Get data stored in one of its keys . Here are few of lines of code i used ( got the code from <a href=""https://cloud.google.com/appengine/docs/go/memcache/"">Go app-engine  docs</a> ) </p>

<pre><code>import ""appengine/memcache""

item := &amp;memcache.Item {
Key:   ""lyric"",
Value: []byte(""Oh, give me a home""),
}
</code></pre>

<p>But the line 2 gives me a compilation error  <strong><em>""expected declaration, found 'IDENT' item""</em></strong></p>

<p>I'm new to Go , not able to figure out the problem </p>
","<p>The <code>:=</code> <a href=""http://golang.org/ref/spec#Short_variable_declarations"">Short variable declaration</a> can only be used inside functions.</p>

<p>So either put the <code>item</code> variable declaration inside a function like this:</p>

<pre><code>import ""appengine/memcache""

func MyFunc() {
    item := &amp;memcache.Item {
        Key:   ""lyric"",
        Value: []byte(""Oh, give me a home""),
    }
    // do something with item
}
</code></pre>

<p>Or make it a global variable and use the <code>var</code> keyword:</p>

<pre><code>import ""appengine/memcache""

var item = &amp;memcache.Item {
    Key:   ""lyric"",
    Value: []byte(""Oh, give me a home""),
}
</code></pre>
","28941788"
"How to run a command once in Docker compose","8987","","<p>So I'm working on a docker compose file to deploy my Go web server. My server uses mongo, so I added a data volume container and the mongo service in docker compose.
Then I wrote a Dockerfile in order to build my Go project, and finally run it.</p>

<p>However, there is another step that must be done. Once my project has been compiled, I have to run the following command:
<code>./my-project -setup</code></p>

<p>This will add some necessary information to the database, and the information <strong>only needs to be added once</strong>.
I can't however add this step on the Dockerfile (in the build process) because mongo must already be started.</p>

<p>So, how can I achieve this? Even if I restart the server and then run again <code>docker-compose up</code> I don't want this command to be executed again.</p>

<p>I think I'm missing some Docker understanding, because I don't actually understand everything about data volume containers (are they just <em>stopped</em> containers that mount a volume?).
Also, if I restart the server, and then run <code>docker-compose up</code>, which commands will be run? Will it just start the same container that was now stopped with the given CMD?</p>

<p>In any case, here is my docker-compose.yml:</p>

<pre><code>version: '2'
services:
  mongodata:
    image: mongo:latest
    volumes:
      - /data/db
    command: --break-mongo
  mongo:
    image: mongo:latest
    volumes_from:
      - mongodata
    ports:
      - ""28001:27017""
    command: --smallfiles --rest --auth
  my_project:
    build: .
    ports:
      - ""6060:8080""
    depends_on:
      - mongo
      - mongodata
    links:
      - mongo
</code></pre>

<p>And here is my Dockerfile to build my project image:</p>

<pre><code>FROM golang

ADD . /go/src/my_project
RUN cd /go/src/my_project &amp;&amp; go get
RUN go install my_project
RUN my_project -setup
ENTRYPOINT /go/bin/my_project

EXPOSE 8080
</code></pre>
","<p>I suggest to add an entrypoint-script to your container; in this entrypoint-script, you can check if the database has been initialized, and if it isn't, perform the required steps.</p>

<p>As you noticed in your question, the order in which services / containers are started should not be taken for granted, so it's possible your application container is started <em>before</em> the database container, so the script should take that into account.</p>

<p>As an example, have a look at the official WordPress image, which performs a one-time initialization of the database in it's entrypoint-script. The script attempts to connect to the database (and retries if the database cannot be contacted (yet)), and checks if initialization is needed; <a href=""https://github.com/docker-library/wordpress/blob/df190dc9c5752fd09317d836bd2bdcd09ee379a5/apache/docker-entrypoint.sh#L146-L171"" rel=""nofollow"">https://github.com/docker-library/wordpress/blob/df190dc9c5752fd09317d836bd2bdcd09ee379a5/apache/docker-entrypoint.sh#L146-L171</a></p>

<p><strong>NOTE</strong></p>

<p>I notice you created a ""data-only container"" to attach your volume to. Since docker 1.9, docker has volume management, including naming volumes. Because of this, you no longer need to use ""data-only"" containers.</p>

<p>You can remove the data-only container from your compose file, and change your mongo service to look something like this;</p>

<pre><code>  mongo:
    image: mongo:latest
    volumes:
      - mongodata:/data/db
    ports:
      - ""28001:27017""
    command: --smallfiles --rest --auth
</code></pre>

<p>This should create a new volume, named <code>mongodata</code> if it doesn't exist, or re-use the existing volume with that name. You can list all volumes using <code>docker volume ls</code> and remove a volume with <code>docker volume rm &lt;some-volume&gt;</code> if you no longer need it</p>
","36417087"
"Cyclic dependencies and interfaces in Golang","8982","","<p>I am a long time python developer. I was trying out Go, converting an existing python app to Go. It is modular and works really well for me.</p>

<p>Upon creating the same structure in Go, I seem to land in cyclic import errors, a lot more than I want to. Never had any import problems in python. I never even had to use import aliases. So I may have had some cyclic imports which were not evident in python. I actually find that strange.  </p>

<p>Anyways, I am lost, trying to fix these in Go. I have read that interfaces can be used to avoid cyclic dependencies. But I don't understand how. I didn't find any examples on this either. Can somebody help me on this?</p>

<p>The current python application structure is as follows:</p>

<pre><code>/main.py

/settings/routes.py      contains main routes depends on app1/routes.py, app2/routes.py etc
/settings/database.py    function like connect() which opens db session
/settings/constants.py   general constants

/apps/app1/views.py      url handler functions
/apps/app1/models.py     app specific database functions depends on settings/database.py
/apps/app1/routes.py     app specific routes

/apps/app2/views.py      url handler functions
/apps/app2/models.py     app specific database functions depends on settings/database.py
/apps/app2/routes.py     app specific routes
</code></pre>

<p><code>settings/database.py</code> has generic functions like <code>connect()</code> which opens a db session. So an app in the apps package calls <code>database.connect()</code> and a db session is opened. </p>

<p>The same is the case with <code>settings/routes.py</code> it has functions that allow apps to add their sub-routes to the main route object. </p>

<p>The settings package is more about functions than data/constants. This contains code that is used by apps in the apps package, that would otherwise have to be duplicated in all the apps. So if I need to change the router class, for instance, I just have to change <code>settings/router.py</code> and the apps will continue to work with no modifications. </p>
","<p>There're two high-level pieces to this: figuring out which code goes in which package, and tweaking your APIs to reduce the need for packages to take on as many dependencies. </p>

<p>On designing APIs that avoid the need for some imports:</p>

<ul>
<li><p>Write config functions for hooking packages up to each other <em>at run time rather than compile time</em>. Instead of <code>routes</code> importing all the packages that define routes, it can <em>export</em> <code>routes.Register</code>, which <code>main</code> (or code in each app) can call. In general, configuration info probably flows from <code>main</code> or a dedicated package; you don't want it scattered throughout your app.</p></li>
<li><p><em>Pass around basic types and <code>interface</code> values.</em> If you're depending on a package for just a type name, maybe you can avoid that. Maybe some code handling a <code>[]Page</code> can get instead use a <code>[]string</code> of filenames or a <code>[]int</code> of IDs or some more general interface (<code>sql.Rows</code>) instead. </p></li>
<li><p><em>Consider having 'schema' packages with just pure data types and interfaces,</em> so <code>User</code> is separate from code that might load users from the database. It doesn't have to depend on much (maybe on anything), so you can include it from anywhere. <a href=""https://go-talks.appspot.com/github.com/benbjohnson/structuring-applications-for-growth/main.slide#1"" rel=""noreferrer"">Ben Johnson gave a lightning talk at GopherCon 2016</a> suggesting that and organizing packages by dependencies.</p></li>
</ul>

<p>On organizing code into packages:</p>

<ul>
<li><p>As a rule, <em>split a package up when each piece could be useful on its own</em>. If two pieces of functionality are really intimately related, you don't have to split them into packages at all; you can organize with multiple files or types instead. Big packages can be OK; Go's <code>net/http</code> is one, for instance.</p></li>
<li><p><em>Break up grab-bag packages (<code>utils</code>, <code>tools</code>) by topic or dependency.</em> Otherwise you can end up importing a huge <code>utils</code> package (and taking on all its dependencies) for one or two pieces of functionality (that wouldn't have so many dependencies if separated out).</p></li>
<li><p><em>Consider pushing reusable code 'down' into lower-level packages untangled from your particular use case.</em>  If you have a <code>package page</code> containing both logic for your content management system and all-purpose HTML-manipulation code, consider moving the HTML stuff ""down"" to a <code>package html</code> so you can use it without importing unrelated content management stuff. </p></li>
</ul>

<hr>

<p>Here, I'd rearrange things so the router doesn't need to include the routes: instead, each app package calls a <code>router.Register()</code> method. This is what <a href=""http://www.gorillatoolkit.org/pkg/mux"" rel=""noreferrer"">the Gorilla web toolkit's <code>mux</code> package</a> does. Your <code>routes</code>, <code>database</code>, and <code>constants</code> packages sound like low-level pieces that should be imported by your app code and not import it.</p>

<p>Generally, try to build your app in layers. Your higher-layer, use-case-specific app code should import lower-layer, more fundamental tools, and never the other way around. Here are some more thoughts:</p>

<ul>
<li><p>Packages are for separating <strong>independently usable bits of functionality</strong>; you don't need to split one off whenever a source file gets large. Unlike in, say, Python or Java, in Go one can split and combine and rearrange files completely independent of the package structure, so you can break up huge files without breaking up packages. </p>

<p>The standard library's <code>net/http</code> is about 7k lines (counting comments/blanks but not tests). Internally, it's split into many smaller files and types. But it's one package, I think 'cause there was no reason users would want, say, just cookie handling on its own. On the other hand, <code>net</code> and <code>net/url</code> <em>are</em> separate because they have uses outside HTTP.</p>

<p>It's great if you <em>can</em> push ""down"" utilities into libraries that are independent and feel like their own polished products, or cleanly layer your application itself (e.g., UI sits atop an API sits atop some core libraries and data models). Likewise ""horizontal"" separation may help you hold the app in your head (e.g., the UI layer breaks up into user account management, the application core, and administrative tools, or something finer-grained than that). But, the core point is, <em>you're free to split or not as works for you</em>.</p></li>
<li><p><strong>Set up APIs to configure behavior at run-time so you don't have to import it at compile time.</strong> So, for example, your URL router can expose a <code>Register</code> method instead of importing <code>appA</code>, <code>appB</code>, etc. and reading a <code>var Routes</code> from each. You could make a <code>myapp/routes</code> package that imports <code>router</code> and all your views and calls <code>router.Register</code>. The fundamental idea is that the router is all-purpose code that needn't import your application's views.</p>

<p>Some ways to put together config APIs:</p>

<ul>
<li><p><em>Pass app behavior via <code>interface</code>s or <code>func</code>s:</em> <code>http</code> can be passed custom implementations of <code>Handler</code> (of course) but also <code>CookieJar</code> or <code>File</code>. <code>text/template</code> and <code>html/template</code> can accept functions to be accessible from templates (in a <code>FuncMap</code>).</p></li>
<li><p><em>Export shortcut functions from your package if appropriate:</em> In <code>http</code>, callers can either make and separately configure some <code>http.Server</code> objects, or call <code>http.ListenAndServe(...)</code> that uses a global <code>Server</code>. That gives you a nice design--everything's in an object and callers can create multiple <code>Server</code>s in a process and such--but it <em>also</em> offers a lazy way to configure in the simple single-server case. </p></li>
<li><p><em>If you have to, just duct-tape it:</em> You don't have to limit yourself to super-elegant config systems if you can't fit one to your app: maybe for some stuff a <code>package ""myapp/conf""</code> with a global <code>var Conf map[string]interface{}</code> is useful. 
But be aware of downsides to global conf. If you want to write reusable libraries, they can't import <code>myapp/conf</code>; they need to accept all the info they need in constructors, etc. Globals also risk hard-wiring in an assumption something will always have a single value app-wide when it eventually won't; maybe today you have a single database config or HTTP server config or such, but someday you don't.</p></li>
</ul></li>
</ul>

<p>Some more specific ways to move code or change definitions to reduce dependency issues:</p>

<ul>
<li><p><strong>Separate fundamental tasks from app-dependent ones.</strong> One app I work on in another language has a ""utils"" module mixing general tasks (e.g., formatting datetimes or working with HTML) with app-specific stuff (that depends on the user schema, etc.). But the users package imports the utils, creating a cycle. If I were porting to Go, I'd move the user-dependent utils ""up"" out of the utils module, maybe to live with the user code or even above it.</p></li>
<li><p><strong>Consider breaking up grab-bag packages.</strong> Slightly enlarging on the last point: if two pieces of functionality are independent (that is, things still work if you move some code to another package) <em>and</em> unrelated from the user's perspective, they're candidates to be separated into two packages. Sometimes the bundling is harmless, but other times it leads to extra dependencies, or a less generic package name would just make clearer code. So my <code>utils</code> above might be broken up by topic or dependency (e.g., <code>strutil</code>, <code>dbutil</code>, etc.). If you wind up with lots of packages this way, we've got <a href=""https://github.com/bradfitz/goimports"" rel=""noreferrer""><code>goimports</code></a> to help manage them.</p></li>
<li><p><strong>Replace import-requiring object types in APIs with basic types and <code>interface</code>s.</strong> Say two entities in your app have a many-to-many relationship like <code>User</code>s and <code>Group</code>s. If they live in different packages (a big 'if'), you can't have both <code>u.Groups()</code> returning a <code>[]group.Group</code> and <code>g.Users()</code> returning <code>[]user.User</code> because that requires the packages to import each other. </p>

<p>However, you could change one or both of those return, say, a <code>[]uint</code> of IDs or a <code>sql.Rows</code> or some other <code>interface</code> you can get to without <code>import</code>ing a specific object type. Depending on your use case, types like <code>User</code> and <code>Group</code> might be so intimately related that it's better just to put them in one package, but if you decide they should be distinct, this is a way. </p></li>
</ul>



<p>Thanks for the detailed question and followup.</p>
","20394211"
"Shared library in Go?","8958","","<p>Is it possible to create a Shared Library (.so) using Go?</p>

<p><strong>UPDATED</strong>: created an ""<a href=""http://code.google.com/p/go/issues/detail?id=256"" rel=""noreferrer"">issue</a>"" for it.</p>
","<p>This is possible now using -linkshared flag</p>

<p>What you need to do is to first run this command:</p>

<pre><code>go install -buildmode=shared -linkshared  std
</code></pre>

<p>(Above code makes all common packages shareable!)
then </p>

<pre><code>go install  -buildmode=shared -linkshared userownpackage
</code></pre>

<p>finally when compiling your code you need to run:</p>

<pre><code>go build -linkshared yourprogram
</code></pre>

<p>What the above those is now it rather than statically linking everything only dynamically links them and you will end up with much smaller compiled files. Just to give you an idea my ""hello.go"" file with static linking is 2.3MB while the same code using dynamic linking is just 12KB!</p>
","35060357"
"Execute gofmt on file save in IntelliJ","8955","","<p>I use IntelliJ with the Golang plugin.  Is it possible to configure the IDE to execute gofmt on file save?</p>
","<p>Of course you can.</p>

<ol>
<li>install <a href=""http://plugins.jetbrains.com/plugin/7177"" rel=""noreferrer"">File Watchers plugin</a></li>
<li>open ""Preferences->Tools->File Watchers"" &amp; Add a new watcher</li>
<li>set <code>File Type</code>: <code>Go</code>, <code>Program</code>: the abosolute path of <code>gofmt</code>, <code>Arguments</code>: <code>-w $FilePath$</code></li>
<li>click <code>OK</code></li>
</ol>

<p><a href=""https://i.stack.imgur.com/dDSyh.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/dDSyh.png"" alt=""enter image description here""></a></p>
","33776710"
"How do I fork a go process?","8923","","<p>I want to fork a go process and get back the id of the new process(es), but all I can see in the <code>exec</code> or <code>os</code> libraries is to start a new process.</p>
","<p>You supposedly want <code>syscall.ForkExec()</code> from the <a href=""http://golang.org/pkg/syscall/""><code>syscall</code></a> package.</p>

<p>Note that <code>fork()</code> has been invented at the time when no threads were used at all, and a process had always had just a single thread of execution in it, and hence forking it was safe. With Go, the situation is radically different as it heavily uses OS-level threads to power its goroutine scheduling.</p>

<p>Now, unadorned <a href=""http://linux.die.net/man/2/fork""><code>fork(2)</code></a> on Linux will make the child process have just the single thread&mdash;the one which called <code>fork(2)</code> in the parent process&mdash;among all those which were active, including some crucial threads used by the Go runtime.  Basically this means that you simply <em>cannot expect the child procss to be able to continue executing Go code,</em> and the only thing you can sensibly do is to somehow immediately perform <code>exec(2)</code>.  Notice that that's what <code>syscall.ForkExec()</code> is suppsed to be used for.</p>

<p>And now think about the problem further.  I'd say these days the only thing a direct call to <code>fork(2)</code> is useful for is ""best-effort asynchronous process state snapshotting""&mdash;the kind, say, <a href=""http://redis.io"">Redis</a> uses.  This technique relies on the fact the child process inherits all the memory data pages from its parent, but the OS uses copy-on-write technique to not really copy all that data, so the child can just sit there and save all the data structures to disk while its parent is chugging away modifying them in its own address space.  Every other conceivable use for <code>fork()</code> implies immediate <code>exec()</code>, and that's what <code>exec.Command()</code> et al is for, so why just not use it?</p>
","28371586"
"package code.google.com/p/go.example/hello: exec: ""hg"": executable file not found in %PATH%. How to get remote golang packages?","8897","","<p>I do as written an the Golang tutorial <a href=""http://golang.org/doc/code.html#remote"" rel=""noreferrer"">http://golang.org/doc/code.html#remote</a></p>

<p>My env settings:</p>

<pre><code>C:\sbox\go\example&gt;set go
    GOPATH=C:\sbox\go\example
    GOROOT=C:\Go
</code></pre>

<p>The <code>example/</code> folder has only <code>src/</code> folder:</p>

<pre><code>C:\sbox\go\example\
             |
             --src\
</code></pre>

<p>Now I call <code>go get</code> as described and get an error:</p>

<pre><code>C:\sbox\go\example&gt;go get code.google.com/p/go.example/hello
# cd .; hg clone -U https://code.google.com/p/go.example C:\sbox\go\example\src\code.google.com\p\go.example
package code.google.com/p/go.example/hello: exec: ""hg"": executable file not found in %PATH%
</code></pre>

<p>After calling <code>go get</code>, though, my <code>example/</code> folder becomes like this:</p>

<pre><code>C:\sbox\go\example\
             |
             --src\
                |
                code.google.com\
                       |
                       --p\
</code></pre>

<p>And that's all. Nothing more installed.</p>

<p>Then I add a code to my directory structure and it becomes like this:</p>

<pre><code>C:\sbox\go\example\
             |
             --src\
                |
                ---code.google.com\
                |        |
                |        --p\
                |
                ---github.com\
                       |
                       --user\
                           |
                           --hello\
                           |   |
                           |   --hello.go
                           |
                           --newmath\
                                |
                                --sqrt.go
</code></pre>

<p><code>hello.go</code> is like this:</p>

<pre><code>package main

import (
    ""fmt""
    ""github.com/user/newmath""
    //""code.google.com/p/go.example/newmath""
)

func main() {
    fmt.Printf(""Hello, world.  Sqrt(2) = %v\n"", newmath.Sqrt(2))
}
</code></pre>

<p><code>sqrt.go</code> is like this:</p>

<pre><code>// Package newmath is a trivial example package.
package newmath

// Sqrt returns an approximation to the square root of x.
func Sqrt(x float64) float64 {
    z := 0.0
    for i := 0; i &lt; 1000; i++ {
        z -= (z*z - x) / (2 * x)
    }
    return z
}
</code></pre>

<p>I just cope/paste them. All as written in the tutorial. Then I do <code>go install</code> and run the project. All works fine:</p>

<pre><code>C:\sbox\go\example\src\github.com\user\hello&gt;go install

C:\sbox\go\example\bin&gt;hello
Hello, world.  Sqrt(2) = 1.414213562373095
</code></pre>

<p>Now I again run <code>go get</code> and get the same error:</p>

<pre><code>C:\sbox\go\example&gt;go get code.google.com/p/go.example/hello
# cd .; hg clone -U https://code.google.com/p/go.example C:\sbox\go\example\src\code.google.com\p\go.example
package code.google.com/p/go.example/hello: exec: ""hg"": executable file not found in %PATH%
</code></pre>

<p>Ok, I add <code>bin/</code> directory to the PATH and run <code>go get</code> again but get the same error:</p>

<pre><code>C:\sbox\go\example&gt;set PATH=%PATH%;C:\sbox\go\example\bin

C:\sbox\go\example&gt;go get code.google.com/p/go.example/hello
# cd .; hg clone -U https://code.google.com/p/go.example C:\sbox\go\example\src\code.google.com\p\go.example
package code.google.com/p/go.example/hello: exec: ""hg"": executable file not found in %PATH%
</code></pre>

<p>What do I need to do get the result as described in the tutorial - remote packages are installed and I can use them?</p>
","<p>The package you are trying to install is under the Mercurial (<code>hg</code>) source control system. You need to install <a href=""https://www.mercurial-scm.org"" rel=""nofollow noreferrer"">Mercurial</a> to be able to clone the package.</p>
","16900607"
"Golang Gorilla mux with http.FileServer returning 404","8871","","<p>The problem I'm seeing is that I'm trying to use the <code>http.FileServer</code> with the Gorilla mux Router.Handle function.</p>

<p>This doesn't work (the image returns a 404)..</p>

<pre><code>myRouter := mux.NewRouter()
myRouter.Handle(""/images/"", http.StripPrefix(""/images/"", http.FileServer(http.Dir(HomeFolder + ""images/""))))
</code></pre>

<p>this works (the image is shown ok)..</p>

<pre><code>http.Handle(""/images/"", http.StripPrefix(""/images/"", http.FileServer(http.Dir(HomeFolder + ""images/""))))
</code></pre>

<p>Simple go web server program below, showing the problem...</p>

<pre><code>package main

import (
    ""fmt""
    ""net/http""
    ""io""
    ""log""
    ""github.com/gorilla/mux""
)

const (
    HomeFolder = ""/root/test/""
)

func HomeHandler(w http.ResponseWriter, req *http.Request) {
    io.WriteString(w, htmlContents)
}

func main() {

    myRouter := mux.NewRouter()
    myRouter.HandleFunc(""/"", HomeHandler)
    //
    // The next line, the image route handler results in 
    // the test.png image returning a 404.
    // myRouter.Handle(""/images/"", http.StripPrefix(""/images/"", http.FileServer(http.Dir(HomeFolder + ""images/""))))
    //
    myRouter.Host(""mydomain.com"")
    http.Handle(""/"", myRouter)

    // This method of setting the image route handler works fine.
    // test.png is shown ok.
    http.Handle(""/images/"", http.StripPrefix(""/images/"", http.FileServer(http.Dir(HomeFolder + ""images/""))))

    // HTTP - port 80
    err := http.ListenAndServe("":80"", nil)

    if err != nil {
        log.Fatal(""ListenAndServe: "", err)
        fmt.Printf(""ListenAndServe:%s\n"", err.Error())
    }
}

const htmlContents = `&lt;!DOCTYPE HTML&gt;
&lt;html lang=""en""&gt;
  &lt;head&gt;
    &lt;title&gt;Test page&lt;/title&gt;
    &lt;meta charset = ""UTF-8"" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p align=""center""&gt;
        &lt;img src=""/images/test.png"" height=""640"" width=""480""&gt;
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
`
</code></pre>
","<p><em>I posted this on golang-nuts discussion group and got <a href=""https://groups.google.com/forum/#!msg/golang-nuts/gCxMpMabVJQ/hE7q3rHqkSEJ"" rel=""noreferrer"">this solution from Toni Cárdenas</a> ...</em></p>

<p>The standard net/http ServeMux (which is the standard handler you are using when you use <code>http.Handle</code>) and the mux Router have different ways of matching an address. </p>

<p>See the differences between <a href=""http://golang.org/pkg/net/http/#ServeMux"" rel=""noreferrer"">http://golang.org/pkg/net/http/#ServeMux</a> and <a href=""http://godoc.org/github.com/gorilla/mux"" rel=""noreferrer"">http://godoc.org/github.com/gorilla/mux</a>.</p>

<p>So basically, <code>http.Handle('/images/', ...)</code> matches '/images/whatever', while <code>myRouter.Handle('/images/', ...)</code> <em>only</em> matches '/images/', and if you want to handle '/images/whatever', you have to ...</p>

<ol>
<li>set a regular expression match in your router or </li>
<li>use the PathPrefix method on your router, like:</li>
</ol>

<p>Code examples</p>

<p>1.</p>

<pre><code>myRouter.Handle('/images/{rest}', 
    http.StripPrefix(""/images/"", http.FileServer(http.Dir(HomeFolder + ""images/"")))
)
</code></pre>

<p>2.</p>

<pre><code>myRouter.PathPrefix(""/images/"").Handler(
    http.StripPrefix(""/images/"", http.FileServer(http.Dir(HomeFolder + ""images/"")))
)
</code></pre>
","21251658"
"How to add item to array in struct in golang","8864","","<p>With the code below how do I add an IP struct to the Server struct's ips array?</p>

<pre><code>import (
    ""net""
)

type Server struct {
    id int
    ips []net.IP
}

func main() {
    o := 5
    ip := net.ParseIP(""127.0.0.1"")
    server := Server{o, ??ip??}
}
</code></pre>

<p>Do I even have the ips array correct? Is it better to use a pointer?</p>
","<p>A slice literal looks like <code>[]net.IP{ip}</code> (or <code>[]net.IP{ip1,ip2,ip3...}</code>. Stylistically, struct initializers with names are preferred, so <code>Server{id: o, ips: []net.IP{ip}}</code> is more standard. The whole code sample with those changes:</p>

<pre><code>package main

import (
    ""fmt""
    ""net""
)

type Server struct {
    id  int
    ips []net.IP
}

func main() {
    o := 5
    ip := net.ParseIP(""127.0.0.1"")
    server := Server{id: o, ips: []net.IP{ip}}
    fmt.Println(server)
}
</code></pre>

<p>You asked</p>

<blockquote>
  <p>Do I even have the ips array correct? Is it better to use a pointer?</p>
</blockquote>

<p>You don't need to use a pointer to a slice. Slices are little structures that <em>contain</em> a pointer, length, and capacity.</p>
","20308615"
"Sorting a Map of Structs - GOLANG","8863","","<p>I have a map of structs that I am populating by streaming data to a Go program.  The way the map is updated is similar to the example below.  </p>

<p>Once I have this map of structs populated, what is the best (or good) way to sort this map by the values of the <code>count</code> field in the struct?  </p>

<pre><code>package main

type data struct {
    count int64
}

func main() {
    m := make(map[string]data)
    m[""x""] = data{0, 0}
    if xx, ok := m[""x""]; ok {
        xx.count = 2
        m[""x""] = xx
    } else {
        panic(""X isn't in the map"")
    }
}
</code></pre>

<p>This example can be run here: <a href=""http://play.golang.org/p/OawL6QIXuO"">http://play.golang.org/p/OawL6QIXuO</a> </p>
","<p>As siritinga already pointed out, the elements of a <code>map</code> isn't ordered, so you cannot sort it.</p>

<p>What you can do is to create a <code>slice</code> and sort the elements using the <code>sort</code> package:</p>

<pre><code>package main

import (
    ""fmt""
    ""sort""
)

type dataSlice []*data

type data struct {
    count int64
    size  int64
}

// Len is part of sort.Interface.
func (d dataSlice) Len() int {
    return len(d)
}

// Swap is part of sort.Interface.
func (d dataSlice) Swap(i, j int) {
    d[i], d[j] = d[j], d[i]
}

// Less is part of sort.Interface. We use count as the value to sort by
func (d dataSlice) Less(i, j int) bool {
    return d[i].count &lt; d[j].count
}

func main() {
    m := map[string]*data {
        ""x"": {0, 0},
        ""y"": {2, 9},
        ""z"": {1, 7},
    }

    s := make(dataSlice, 0, len(m))

    for _, d := range m {
        s = append(s, d)
    }       

    // We just add 3 to one of our structs
    d := m[""x""]
    d.count += 3

    sort.Sort(s)

    for _, d := range s {
        fmt.Printf(""%+v\n"", *d)
    }
}
</code></pre>

<p>Output:</p>

<blockquote>
  <p>{count:1 size:7}<br>
  {count:2 size:9}<br>
  {count:3 size:0}</p>
</blockquote>

<p><a href=""http://play.golang.org/p/Y0G4TupjnC"">Playground</a></p>

<p><strong>Edit</strong></p>

<p>Updated the example to use pointers and to include a map so that you can both do lookups and have a slice to sort over.</p>
","19948360"
"Working with function types in Go","8839","","<p>I wanted to create a function of a certain type. I've found one way to do it, but there must be other, cleaner and nicer ways that do not include using <code>var</code>. What are the alternative ways to declare the function <code>english</code> of type <code>Greeting</code>?</p>

<pre><code>package main

import ""fmt""

type Greeting func(name string) string

func (g Greeting) exclamation(name string) string {
    return g(name) + ""!""
}

var english = Greeting(func(name string) string {
    return ""Hello, "" + name
})

func main() {
    fmt.Println(english(""ANisus""))
    fmt.Println(english.exclamation(""ANisus""))  
}
</code></pre>

<p>In the example above, I can't exchange <code>var english = Greeting...</code> with <code>english := Greeting...</code>, nor can I remove the <code>Greeting(func ...)</code> and just have the <code>func</code> stand alone since then I won't be able to access the <em>exclamation</em> method.</p>
","<p>If mentioning <code>var</code> is your main problem, you can drop it easily, by changing <code>=</code> into <code>:=</code>, like this:</p>

<pre><code>english := Greeting(func(name string) string {
    return (""Hello, "" + name);
})
</code></pre>

<p>But you don't even have to cast your function into <code>Greeting</code>. The spec says this about <a href=""http://weekly.golang.org/doc/go_spec.html#Function_types"" rel=""noreferrer"">function types</a>:</p>

<blockquote>
  <p>A function type denotes the set of all functions with the same parameter and result types.</p>
</blockquote>

<p>And this about <a href=""http://weekly.golang.org/doc/go_spec.html#Type_identity"" rel=""noreferrer"">type identity</a>:</p>

<blockquote>
  <p>Two function types are identical if they have the same number of parameters and result values, corresponding parameter and result types are identical, and either both functions are variadic or neither is. Parameter and result names are not required to match.</p>
</blockquote>

<p>This means that each function has its own function type. If two functions have the same signature (parameter and result types), they share one function type. By writing <code>type Greeting func...</code> you're just giving a name to a particular function type, not defining a new one.</p>

<p>So the following code works, and I hope shows the right way to work with function types in Go:</p>

<pre><code>package main

import ""fmt""

type Greeting func(name string) string

func say(g Greeting, n string) { fmt.Println(g(n)) }

func french(name string) string { return ""Bonjour, "" + name }

func main() {
        english := func(name string) string { return ""Hello, "" + name }

        say(english, ""ANisus"")
        say(french, ""ANisus"")
}
</code></pre>

<p>Notice that I also dropped semicolon and parenthesis from your <code>english</code> function. Go developers don't use these punctuations if they don't have to.</p>

<p><strong>UPDATE:</strong> Now that you've provided a sample code I can clearly understand the problem.</p>

<p>For this purpose your code is good enough and there are not much other ways of doing it. If you like you can cast just before calling the method:</p>

<pre><code>english := func(name string) string { return ""Hello, "" + name }
Greeting(english).exclamation(""ANisus"")
</code></pre>

<p>But I'm not sure this is an improvement. I'm just saying that for what you want to do there does not seem to be other ways to write the code.</p>

<p>That is, if we don't want to change your types. I mean, the whole idea of calling a method on a function type seems a little weird. Not that it's wrong, but a little rare. Another way of achieving the same effect in a more usual way is through a struct type and having a field for the function. Something like this:</p>

<pre><code>package main

import ""fmt""

type Greeting struct {
    say func(name string) string
}

func newGreeting(f func(string) string) *Greeting {
    return &amp;Greeting{say: f}
}

func (g *Greeting) exclamation(name string) string { return g.say(name) + ""!"" }

func main() {
    english := &amp;Greeting{say: func(name string) string {
        return ""Hello, "" + name
    }}

    french := newGreeting(func(name string) string {
        return ""Bonjour, "" + name
    })

    fmt.Println(english.exclamation(""ANisus""))
    fmt.Println(french.exclamation(""ANisus""))
}
</code></pre>

<p>Here <code>english</code> and <code>french</code> show two different ways of coding the same thing. Again, I'm not saying that this is the better solution, but a more usual and more flexible way of achieving the same effect.</p>
","9399214"
"Go--no buildable Go source file in","8834","","<p>everyone. I have a problem with golang 's build.</p>

<p>The details:</p>

<p>I have a folder named ""12"" and creating a go source file named 12_test.go. Codes are below:</p>

<pre><code>package main

import ""fmt""

func main() {
    fmt.Println(""Hello world"")
}
</code></pre>

<p>.Then typing ""go build 12_test.go"". Something going wrong:</p>

<pre><code>""go build command-line-arguments: no buildable Go source files in D:\12""
</code></pre>

<p>So,Could someone tell me why? Thanks and apology for my poor English.</p>
","<p>The suffix <code>_test</code> has special meaning in Go. It is where you put tests for your go programs. The build tool will ignore these completely .. they are run with <code>go test</code>.</p>

<p>Remove <code>_test</code> from the file name or just name it <code>test.go</code>.</p>
","29136519"
"Does a Go's channel return two values?","8832","","<p>I saw some code in this link, and got confused:<a href=""http://www.darkcoding.net/software/go-lang-after-four-months/"">http://www.darkcoding.net/software/go-lang-after-four-months/</a></p>

<p>What's the meaning of the second value(ok)?</p>

<pre><code>for self.isRunning {

    select {
    case serverData, ok = &lt;-fromServer:   // What's the meaning of the second value(ok)?
        if ok {
            self.onServer(serverData)
        } else {
            self.isRunning = false
        }

    case userInput, ok = &lt;-fromUser:
        if ok {
            self.onUser(userInput)
        } else {
            self.isRunning = false
        }
    }

}
</code></pre>
","<p>The boolean variable <code>ok</code> returned by a <a href=""http://golang.org/ref/spec#Receive_operator"" rel=""noreferrer"">receive operator</a> indicates whether the received value was sent on the channel (true) or is a zero value returned because the channel is closed and empty (false).</p>

<p>The <code>for</code> loop terminates when some other part of the Go program closes the <code>fromServer</code> or the <code>fromUser</code> channel. In that case one of the case statements will set <code>ok</code> to true. So if the user closes the connection or the remote server closes the connection, the program will terminate.</p>

<p><a href=""http://play.golang.org/p/4fJDkgaa9O"" rel=""noreferrer"">http://play.golang.org/p/4fJDkgaa9O</a>:</p>

<pre><code>package main

import ""runtime""

func onServer(i int) { println(""S:"", i) }
func onUser(i int)   { println(""U:"", i) }

func main() {
    fromServer, fromUser := make(chan int),make(chan int)
    var serverData, userInput int
    var ok bool

    go func() {
        fromServer &lt;- 1
        fromUser &lt;- 1
        close(fromServer)
        runtime.Gosched()
        fromUser &lt;- 2
        close(fromUser)
    }()

    isRunning := true
    for isRunning {
        select {
            case serverData, ok = &lt;-fromServer:
                if ok {
                    onServer(serverData)
                } else {
                    isRunning = false
                }

            case userInput, ok = &lt;-fromUser:
                if ok {
                    onUser(userInput)
                } else {
                    isRunning = false
                }
            }
        }
        println(""end"")
}
</code></pre>
","10438269"
"How to handle preflight CORS requests on a Go server","8828","","<p>So I'm writing this RESTful backend in Go, which will be called with cross-site HTTP requests, i.e. from content served by another site (actually, just another port, but the same-origin policy kicks in, so here we are).</p>

<p>In this scenario, the user agent will, in some cases, send preflight OPTIONS requests to check if the actual request is safe to send.</p>

<p>My question is how to best deal with, and adequately respond to, these preflight requests in a Go context. The ways I have conceived don't feel very elegant, and I'm wondering if there's some other approach to this that I haven't thought of.</p>

<p>Using the standard <code>net/http</code> package, I can check the request method in the handler func, perhaps like this:</p>

<pre><code>func AddResourceHandler(rw http.ResponseWriter, r *http.Request) {
  switch r.Method {
  case ""OPTIONS"":
    // handle preflight
  case ""PUT"":
    // respond to actual request
  }
}
</code></pre>

<p>I can also use <a href=""http://www.gorillatoolkit.org/pkg/mux"" rel=""noreferrer"">Gorilla's</a> <code>mux</code> package, and register a preflight ""OPTIONS"" handler for each relevant URL path.</p>

<pre><code>r := mux.NewRouter()
r.HandleFunc(""/someresource/item"", AddResourceHandler).Methods(""PUT"")
r.HandleFunc(""/someresource/item"", PreflightAddResourceHandler).Methods(""OPTIONS"")
</code></pre>

<p>Maybe the response to this question is simply: <em>Yup, those are your basic options.</em> But I thought there might be some best practice around this that I'm unaware of.</p>
","<p>One simple way to separate out your logic and re-use the CORS handler you define would be to wrap your REST handler. For example, if you're using net/http and the <code>Handle</code> method you could always do something like:</p>

<pre><code>func corsHandler(h http.Handler) http.HandlerFunc {
  return func(w http.ResponseWriter, r *http.Request) {
    if (r.Method == ""OPTIONS"") {
      //handle preflight in here
    } else {
      h.ServeHTTP(w,r)
    }
  }
}
</code></pre>

<p>You can wrap like this:</p>

<pre><code>http.Handle(""/endpoint/"", corsHandler(restHandler))
</code></pre>
","22973724"
"Go fork/exec permission denied error","8787","","<p>I recently installed Go onto our server with CentOS 6.3.  The install appears to have gone fine.  However I made a test ""hello world"" script, and when I run I get the following output.</p>

<pre><code>fork/exec /tmp/go-build967564990/command-line-arguments/_obj/a.out: permission denied
</code></pre>

<p>Now running go env or other go commands seem to work.  At first I figured it was a permission issue, however running as root user I get the same thing.  An</p>
","<p>Just guessing: Your nix perhaps disables for security reasons executing programs in /tmp. It might be configurable in CentOS, but I don't know that.</p>

<p>The alternative solution: It seems you're trying <code>go run</code> to execute a Go program (which is as script as C is a script). Try (assuming <code>$GOPATH=~</code>, the easy possibility) instead a normal build, i.e. instead of</p>

<pre><code>me:~/src/foo$ go run main.go
</code></pre>

<p>try</p>

<pre><code>me:~/src/foo$ go build # main.go should not be necessary here
me:~/src/foo$ ./foo
</code></pre>

<p>This approach will still use /tmp-whatever to create the binary, IIRC, but it will not attempt to execute it from there.</p>

<p>PS: <em>Do not</em> run these command as root. No need for that with correct setup.</p>
","14944160"
"What exactly does runtime.Gosched do?","8779","","<p>In <a href=""http://tour.golang.org/"">a version prior to the release of go 1.5 of the Tour of Go website</a>, there's a piece of code that looks like this.</p>

<pre><code>package main

import (
    ""fmt""
    ""runtime""
)

func say(s string) {
    for i := 0; i &lt; 5; i++ {
        runtime.Gosched()
        fmt.Println(s)
    }
}

func main() {
    go say(""world"")
    say(""hello"")
}
</code></pre>

<p>The output looks like this:</p>

<pre><code>hello
world
hello
world
hello
world
hello
world
hello
</code></pre>

<p>What is bothering me is that when <code>runtime.Gosched()</code> is removed, the program no longer prints ""world"".</p>

<pre><code>hello
hello
hello
hello
hello
</code></pre>

<p>Why is that so? How does <code>runtime.Gosched()</code> affect the execution?</p>
","<p>When you run Go program without specifying GOMAXPROCS environment variable, Go goroutines are scheduled for execution in single OS thread. However, to make program appear to be multithreaded (that's what goroutines are for, aren't they?), the Go scheduler must sometimes switch the execution context, so each goroutine could do its piece of work.</p>

<p>As I said, when GOMAXPROCS variable is not specified, Go runtime is only allowed to use one thread, so it is impossible to switch execution contexts while goroutine is performing some conventional work,  like computations or even IO (which is mapped to plain C functions). The context can be switched only when Go concurrency primitives are used, e.g. when you switch on several chans, or (this is your case) when you explicitly tell the scheduler to switch the contexts - this is what <code>runtime.Gosched</code> is for.</p>

<p>So, in short, when execution context in one goroutine reaches <code>Gosched</code> call, the scheduler is instructed to switch the execution to another goroutine. In your case there are two goroutines, main (which represents 'main' thread of the program) and additional, the one you have created with <code>go say</code>. If you remove <code>Gosched</code> call, the execution context will never be transferred from the first goroutine to the second, hence no 'world' for you. When <code>Gosched</code> is present, the scheduler transfers the execution on each loop iteration from first goroutine to the second and vice versa, so you have 'hello' and 'world' interleaved.</p>

<p>FYI, this is called 'cooperative multitasking': goroutines must explicitly yield the control to other goroutines. The approach used in most contemporary OSes is called 'preemptive multitasking': execution threads are not concerned with control transferring; the scheduler switches execution contexts transparently to them instead. Cooperative approach is frequently used to implement 'green threads', that is, logical concurrent coroutines which do not map 1:1 to OS threads - this is how Go runtime and its goroutines are implemented.</p>

<p><strong>Update</strong></p>

<p>I've mentioned GOMAXPROCS environment variable but didn't explain what is it. It's time to fix this.</p>

<p>When this variable is set to a positive number <code>N</code>, Go runtime will be able to create up to <code>N</code> native threads, on which all green threads will be scheduled. Native thread a kind of thread which is created by the operating system (Windows threads, pthreads etc). This means that if <code>N</code> is greater than 1, it is possible that goroutines will be scheduled to execute in different native threads and, consequently, run in parallel (at least, up to your computer capabilities: if your system is based on multicore processor, it is likely that these threads will be truly parallel; if your processor has single core, then preemptive multitasking implemented in OS threads will create a visibility of parallel execution).</p>

<p>It is possible to set GOMAXPROCS variable using <code>runtime.GOMAXPROCS()</code> function instead of pre-setting the environment variable. Use something like this in your program instead of the current <code>main</code>:</p>

<pre><code>func main() {
    runtime.GOMAXPROCS(2)
    go say(""world"")
    say(""hello"")
}
</code></pre>

<p>In this case you can observe interesting results. It is possible that you will get 'hello' and 'world' lines printed interleaved unevenly, e.g.</p>

<pre><code>hello
hello
world
hello
world
world
...
</code></pre>

<p>This can happen if goroutines are scheduled to separate OS threads. This is in fact how preemptive multitasking works (or parallel processing in case of multicore systems): threads are parallel, and their combined output is indeterministic. BTW, you can leave or remove <code>Gosched</code> call, it seems to have no effect when GOMAXPROCS is bigger than 1.</p>

<p>The following is what I got on several runs of the program with <code>runtime.GOMAXPROCS</code> call.</p>

<pre><code>hyperplex /tmp % go run test.go
hello
hello
hello
world
hello
world
hello
world
hyperplex /tmp % go run test.go
hello
world
hello
world
hello
world
hello
world
hello
world
hyperplex /tmp % go run test.go
hello
hello
hello
hello
hello
hyperplex /tmp % go run test.go
hello
world
hello
world
hello
world
hello
world
hello
world
</code></pre>

<p>See, sometimes output is pretty, sometimes not. Indeterminism in action :)</p>

<p><strong>Another update</strong></p>

<p>Looks like that in newer versions of Go compiler Go runtime forces goroutines to yield not only on concurrency primitives usage, but on OS system calls too. This means that execution context can be switched between goroutines also on IO functions calls. Consequently, in recent Go compilers it is possible to observe indeterministic behavior even when GOMAXPROCS is unset or set to 1.</p>
","13108469"
"Save an image from url to file","8778","","<p>Very new to Go (first simple project I'm working on).</p>

<p>Question: How do I get an image from URL and then save it to my computer?</p>

<p>Here's what I have so far:</p>

<pre><code>package main

import (
""fmt""
""net/http""
""image""
""io/ioutil""
)

func main() {
        url := ""http://i.imgur.com/m1UIjW1.jpg""
        // don't worry about errors
    response, _ := http.Get(url);

    defer response.Body.Close()
    m, _, err := image.Decode(response.Body)

    error := ioutil.WriteFile(""/images/asdf.jpg"", m, 0644)
}
</code></pre>

<p>However, when I run this code, I get <code>cannot use m (type image.Image) as type []byte in function argument</code></p>

<p>I'm assuming I have to convert image.Image (variable <code>m</code>) into an undefined amount of bytes?  Is that the correct way to go about this?</p>
","<p>There is no need to decode the file. Simply copy the response body to a file you've opened. Here's the deal in the modified example: </p>

<ol>
<li><code>response.Body</code> is a stream of data, and implements the <code>Reader</code> interface - meaning you can sequentially call <code>Read</code> on it, as if it was an open file. </li>
<li>The file I'm opening here implements the <code>Writer</code> interface. This is the opposite - it's  a stream you can call <code>Write</code> on.</li>
<li><code>io.Copy</code> ""patches"" a reader and a writer, consumes the reader stream and writes its contents to a Writer. </li>
</ol>

<p>This is one of my favorite things about go - implicit interfaces. You don't have to declare you're implementing an interface, you just have to implement it to be used in some context. This allows mixing and matching of code that doesn't need to know about other code it's interacting with.</p>

<p>package main</p>

<pre><code>import (
    ""fmt""
    ""io""
    ""log""
    ""net/http""
    ""os""
)

func main() {
    url := ""http://i.imgur.com/m1UIjW1.jpg""
    // don't worry about errors
    response, e := http.Get(url)
    if e != nil {
        log.Fatal(e)
    }

    defer response.Body.Close()

    //open a file for writing
    file, err := os.Create(""/tmp/asdf.jpg"")
    if err != nil {
        log.Fatal(err)
    }
    // Use io.Copy to just dump the response body to the file. This supports huge files
    _, err = io.Copy(file, response.Body)
    if err != nil {
        log.Fatal(err)
    }
    file.Close()
    fmt.Println(""Success!"")
}
</code></pre>
","22417396"
"Why using unbuffered channel in the the same goroutine gives a deadlock","8751","","<p>I'm sure that there is a simple explanation to this trivial situation, but I'm new to the <code>go</code> concurrency model.</p>

<p>when I run this example</p>

<pre><code>package main

import ""fmt""

func main() {
    c := make(chan int)    
    c &lt;- 1   
    fmt.Println(&lt;-c)
}
</code></pre>

<p>I get this error :</p>

<pre><code>fatal error: all goroutines are asleep - deadlock!

goroutine 1 [chan send]:
main.main()
    /home/tarrsalah/src/go/src/github.com/tarrsalah/tour.golang.org/65.go:8 +0x52
exit status 2
</code></pre>

<p>Why ?</p>

<hr>

<p>Wrapping <code>c &lt;-</code> in a <code>goroutine</code> makes the example run as we expected </p>

<pre><code>package main

import ""fmt""

func main() {
    c := make(chan int)        
    go func(){
       c &lt;- 1
    }()
    fmt.Println(&lt;-c)
}
</code></pre>

<p>Again, why ?</p>

<p>Please, I need deep explanation , not just how to eliminate the deadlock and fix the code. </p>
","<p>From <a href=""http://golang.org/doc/effective_go.html#channels"">the documentation</a> :</p>

<blockquote>
  <p>If the channel is unbuffered, the sender blocks until the receiver has received the value. If the channel has a buffer, the sender blocks only until the value
  has been copied to the buffer; if the buffer is full, this means
  waiting until some receiver has retrieved a value.</p>
</blockquote>

<p>Said otherwise :</p>

<ul>
<li>when a channel is full, the sender waits for another goroutine to make some room by receiving</li>
<li>you can see an unbuffered channel as an always full one : there must be another goroutine to take what the sender sends.</li>
</ul>

<p>This line</p>

<pre><code>c &lt;- 1
</code></pre>

<p>blocks because the channel is unbuffered. As there's no other goroutine to receive the value, the situation can't resolve, this is a deadlock.</p>

<p>You can make it not blocking by changing the channel creation to</p>

<pre><code>c := make(chan int, 1) 
</code></pre>

<p>so that there's room for one item in the channel before it blocks.</p>

<p>But that's not what concurrency is about. Normally, you wouldn't use a channel without other goroutines to handle what you put inside. You could define a receiving goroutine like this :</p>

<pre><code>func main() {
    c := make(chan int)    
    go func() {
        fmt.Println(""received:"", &lt;-c)
    }()
    c &lt;- 1   
}
</code></pre>

<p><a href=""http://play.golang.org/p/B4y6Ie3T0d"">Demonstration</a></p>
","18660709"
"Go destructors?","8727","","<p>I know there are no destructors in Go since technically there are no classes. As such, I use <code>initClass</code> to perform the same functions as a constructor. However, is there any way to create something to mimic a destructor in the event of a termination, for the use of, say, closing files? Right now I just call <code>defer deinitClass</code>, but this is rather hackish and I think a poor design. What would be the proper way?</p>
","<p>In the Go ecosystem, there exists a ubiquitous idiom for dealing with objects which wrap precious (and/or external) resources: a special method designated for freeing that resource, called <em>explicitly</em> &mdash; typically via the <code>defer</code> mechanism.</p>

<p>This special method is typically named <code>Close()</code>, and the user of the object has to call it explicitly when they're done with the resource the object represents. The <code>io</code> standard package does even have a special interface, <a href=""https://golang.org/pkg/io/#Closer"" rel=""nofollow noreferrer""><code>io.Closer</code></a>, declaring that single method.  Objects implementing I/O on various resources such as TCP sockets, UDP endpoints and files all satisfy <code>io.Closer</code>, and are expected to be explicitly <code>Close</code>d after use.</p>

<p>Calling such a cleanup method is typically done via the <code>defer</code> mechanism which guarantees the method will run no matter if some code which executes after resource acquisition will <code>panic()</code> or not.</p>

<p>You might also notice that not having implicit ""destructors"" quite balances not having implicit ""constructors"" in Go.  This actually has nothing to do with not having ""classes"" in Go: the language designers just avoid <em>magic</em> as much as practically possible.</p>

<hr>

<p>Note that Go's approach to this problem might <em>appear</em> to be somewhat low-tech but in fact it's the only workable solution for the runtime featuring garbage-collection.  In a language with objects but without GC, say C++, destructing an object is a well-defined operation because an object is destroyed either when it goes out of scope or when <code>delete</code> is called on its memory block.  In a runtime with GC, the object will be destroyed at some mostly indeterminate point in the future by the GC scan, and <em>may not be destroyed at all.</em>  So if the object wraps some precious resource, that resource might not get reclaimed at all, as has been well explained by @twotwotwo in their respective answer.</p>

<p>If you're familiar with .NET, it deals with resource cleanup in a way which resembles that of Go quite closely: your objects which wrap some precious resource have to implement the <code>IDisposable</code> interface, and a method, <code>Dispose()</code>, exported by that interface, must be called explicitly when you're done with such an object.  C# provides some syntactic sugar for this use case via the <code>using</code> statement which makes the compiler arrange for calling <code>Dispose()</code> on the object when it goes out of the scope declared by the said statement.  In Go, you'll typically <code>defer</code> calls to cleanup methods.</p>

<hr>

<p>One more note of caution.  Go wants you to treat errors very seriously (unlike most mainstream programming language with their <a href=""http://250bpm.com/blog:4"" rel=""nofollow noreferrer"">""just throw an exception and don't give a fsck about what happens due to it elsewhere and what state the program will be in"" attitude</a>) and so you might consider checking error returns of at least <em>some</em> calls to cleanup methods.</p>

<p>A good example is instances of the <code>os.File</code> type representing files on a filesystem.  The fun stuff is that calling <code>Close()</code> on an open file <em>might</em> fail due to legitimate reasons, and if you were <em>writing</em> to that file this might indicate that not all the data you wrote to that file had actually landed in it <em>on the file system.</em>  For an explanation, please read the ""Notes"" section in the <a href=""http://linux.die.net/man/2/close"" rel=""nofollow noreferrer""><code>close(2)</code> manual</a>.</p>

<p>In other words, just doing something like</p>

<pre><code>fd, err := os.Open(""foo.txt"")
defer fd.Close()
</code></pre>

<p>is okay for read-only files in the 99.9% of cases, but for files opening for writing, you might want to implement more involved error checking and some strategy for dealing with them (mere reporting, wait-then-retry, ask-then-maybe-retry or whatever).</p>
","32781054"
"How to convert ISO 8601 time in golang?","8723","","<p>What is the equivalent code in golang for the following shell command ?
<code>date -u +%Y-%m-%dT%T%z</code></p>
","<pre><code>package main

import (
    ""fmt""
    ""time""
)

func main() {
    fmt.Println(time.Now().UTC().Format(""2006-01-02T15:04:05-0700""))
}
</code></pre>
","35479255"
"Test Index out of range golang","8721","","<p>Sorry for this noob question, but I'm not sure how I test to see if an element I'm accessing is valid for an array, consider the following contrived code:</p>

<pre><code>func main() {
    strings := []string{""abc"", ""def"", ""ghi"", ""jkl""}
    for i := 0; i&lt;5; i++ {
        if strings[i] {
            fmt.Println(strings[i])
        }
    }
}
</code></pre>

<p><a href=""https://play.golang.org/p/8QjGadu6Fu"" rel=""nofollow"">https://play.golang.org/p/8QjGadu6Fu</a></p>

<p>I'm obviously going outside of the bounds, but I'm not sure how I test to prevent the error. I'm used to PHP where I would use an <code>isset</code> or <code>!empty</code> test, does go have such a thing?</p>

<p>I've browsed other questions and seen the <code>len</code> function used, but that doesn't appear to work.</p>
","<p>In Go, this is not quite as easy as in PHP - but keep in mind that in PHP it's only easy because ""indexed"" arrays are actually associative arrays under the hood. Otherwise you wouldn't be able to ""punch holes"" into arrays by unsetting individual elements.</p>

<p>With Go arrays/slices, you have to actually check against the length of the array, as you wrote:</p>

<pre><code>if i&gt;=0 &amp;&amp; i&lt;len(strings) {...}
</code></pre>

<p>Personally, I've yet to come across a real life situation that requires doing this - in your example, you could use <code>range(strings)</code> and stop worrying about indexes.</p>

<p>With maps, which are the Go equivalent of PHP arrays, you can do ""isset"" by writing:</p>

<pre><code>value, isset := map[index]
</code></pre>

<p>if <code>index</code> is present in the map, <code>value</code> will be set appropriately and <code>isset</code> will be true; if not, <code>value</code> will be set to the zero value of the map's type and <code>isset</code> will be false.</p>
","28968065"
"Function in same package undefined","8720","","<p>My project structure is like this.</p>

<pre><code>packagetest/
    main.go
    lib.go
</code></pre>

<p>In <code>main.go</code>, I have this code.</p>

<pre><code>package main

import ""fmt""

func main() {
    fmt.Println(""Hello from main.go."")
    Test()
}
</code></pre>

<p>While in <code>lib.go</code>, I have this code.</p>

<pre><code>package main

import ""fmt""

func Test() {
    fmt.Println(""This is the Test function in lib.go."")
}
</code></pre>

<p>When I try to compile with <code>go build main.go</code>, I get <code>./main.go:7: undefined: Test</code>. Is this way of structuring my code possible?</p>
","<p>Try running just <code>go build</code>. When you give it a go file as an argument, it will not look for other go files. You can also do <code>go build *.go</code></p>
","25171468"
"Combine URL paths with path.Join()","8700","","<p>Is there a way in Go to combine URL paths similarly as we can do with filepaths using <code>path.Join()</code>?</p>

<p>For example see e.g. <a href=""https://stackoverflow.com/q/13078314/772000"">Combine absolute path and relative path to get a new absolute path</a>. </p>

<p>When I use <code>path.Join(""http://foo"", ""bar"")</code>, I get <code>http:/foo/bar</code>. </p>

<p>See in <a href=""https://play.golang.org/p/VPaiToD_XO"" rel=""nofollow noreferrer"">Golang Playground</a>.</p>
","<p><a href=""https://golang.org/pkg/net/url/#ResolveReference"" rel=""noreferrer"">ResolveReference() in net/url package</a></p>

<p>The accepted answer will not work for relative url paths containing file endings like .html or .img. The ResolveReference() function is the correct way to join url paths in go.</p>

<pre><code>package main

import (
    ""fmt""
    ""log""
    ""net/url""
)

func main() {
    u, err := url.Parse(""../../..//search?q=dotnet"")
    if err != nil {
        log.Fatal(err)
    }
    base, err := url.Parse(""http://example.com/directory/"")
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(base.ResolveReference(u))
}
</code></pre>
","43415988"
"init of slice in struct","8700","","<p>i am struggling with the initiation of a slice in a struct (GO-language). This may be easy, but still I can not solve it. I get</p>

<blockquote>
  <p>syntax error: unexpected var, expecting }<br>
  ./test.go:28: no new variables on left side of :=<br>
  ./test.go:29: non-name g.s on left side of := is the code;</p>
</blockquote>

<p>I believe that s should be declared as part of the struct, so wonder why I get that error. Someone got some advice?</p>

<pre><code>package main

import ""fmt""

type node struct {
value int
}

type graph struct {
nodes , edges int
var s []int
} 

func main() {
g:= graphCreate()
}

func input(tname string)(number int){
fmt.Println(""input a number of "" + tname)
fmt.Scan(&amp;number)
return 
}

func graphCreate()(g graph){
g:= graph{input(""nodes""), input(""edges"")}
g.s := make([]int, 100)
return 
}
</code></pre>
","<p>You have a few errors :</p>

<ul>
<li><code>g.s</code> is already defined by the type <code>graph</code> when <code>g</code> is of type <code>graph</code>. So it's not a ""new variable""</li>
<li>you can't use <code>var</code> inside a type declaration</li>
<li>you have <code>g</code> already declared (as a return type) in your <code>graphCreate</code> function</li>
<li>when you write a literal struct, <a href=""http://golang.org/doc/effective_go.html#composite_literals"" rel=""nofollow"">you must pass none or all the field values or name them</a></li>
<li>you must use the variables you declare</li>
</ul>

<p>here's a compiling code :</p>

<pre><code>package main

import ""fmt""

type node struct {
    value int
}

type graph struct {
    nodes, edges int
    s            []int // &lt;= there was var here
}

func main() {
    graphCreate() // &lt;= g wasn't used
}

func input(tname string) (number int) {
    fmt.Println(""input a number of "" + tname)
    fmt.Scan(&amp;number)
    return
}

func graphCreate() (g graph) { // &lt;= g is declared here
    g = graph{nodes:input(""nodes""), edges:input(""edges"")} // &lt;= name the fields
    g.s = make([]int, 100) // &lt;= g.s is already a known name
    return
}
</code></pre>
","18827957"
"How to ping an IP Address in golang","8680","","<p>How can you ping an IP address from a golang application? The ultimate goal is to check if a server is online.</p>

<p>Does go have a way in the standard library to implement a network ping?</p>
","<p>As @desaipath mentions, there is no way to do this in the standard library. However, you do not need to write the code for yourself - it has already been done:</p>

<blockquote>
  <p><a href=""https://github.com/tatsushid/go-fastping"" rel=""noreferrer"">https://github.com/tatsushid/go-fastping</a></p>
</blockquote>

<p><em>Note, sending ICMP packets requires root privileges</em> </p>
","35194144"
"Can I have multiple GOPATH directories?","8673","","<p>I set my GOPATH to</p>

<pre><code>/Users/me/dev/go
</code></pre>

<p>and I have</p>

<pre><code>/Users/me/dev/go/src/client1
/Users/me/dev/go/src/client2
/Users/me/dev/go/src/client3
</code></pre>

<p>and also</p>

<pre><code>/Users/me/dev/client1/rails_project
/Users/me/dev/client2/php_project
etc.
</code></pre>

<p>I don't like how in my root dev folder I'm forced to have this general ""go"" dir that holds many different client's go projects.</p>
","<p>Yes, <code>GOPATH</code> is a list of directories (like <code>PATH</code>). Run <code>go help gopath</code> for details. For example, on Linux, I have:</p>

<pre><code>$ go env
GOROOT=""/home/peter/go""
GOPATH=""/home/peter/gopath:/home/peter/public/gopath""
$
</code></pre>

<p>I have something similar on Windows.</p>

<p>Note: Linux uses <code>:</code> as the <code>GOPATH</code> list separator; Windows uses <code>;</code> as the separator.</p>

<p>If you use <code>go get</code> it will default to the first directory in the list.</p>

<p>Run <code>go env</code> to check that everything is correct.</p>
","36017866"
"Convert []string to []interface{}","8663","","<p>I just want to write some code like this:</p>

<pre><code>func (w Writer) WriteVString(strs []string) (int, error) {
    return writeV(func(index int, str interface{}) (int, error) {
        return w.WriteString(str.(string))
    }, strs) // it doesn't work
}

func (w Writer) WriteV(bs [][]byte) (int, error) {
    return writeV(func(index int, b interface{}) (int, error) {
        return w.Write(b.([]byte))
    }, []interface{}{bs...}) // it also can't be compiled
}
type writeFunc func(int, interface{}) (int, error)

func writeV(fn writeFunc, slice []interface{}) (n int, err error) {
    var m int
    for index, s := range slice {
        if m, err = fn(index, s); err != nil {
            break
        }
        n += m
    )
    return
}
</code></pre>

<p>I thought <code>interface{}</code> can represent any type, so <code>[]interface</code> can also represent any <code>[]type</code> before, now I know I'm wrong, <code>[]type</code> is a whole type, can't be considered as <code>[]interface{}</code>.</p>

<p>So, can anyone help me how to make these code work, or any other solution?.</p>

<p><strong>PS</strong>: I know that <code>[]byte</code> or <code>string</code> can be convert to other one, but it's not actually my intention, may be there any other type rather than <code>[]byte</code> and <code>string</code>.</p>
","<blockquote>
  <p>now I know I'm wrong, <code>[]type</code> is a whole type, can't be considered as <code>[]interface{}</code>.</p>
</blockquote>

<p>Yes, and that is because <code>interface{}</code> is its own type (and not an ""alias"" for any other type).<br>
As I mention in ""<a href=""https://stackoverflow.com/a/23148998/6309"">what is the meaning of <code>interface{}</code> in golang?</a>"" (if <code>v</code> is a <code>interface{}</code> variable):</p>

<blockquote>
  <p>Beginner gophers are led to believe that “<code>v</code> is of any type”, but that is wrong.<br>
  <code>v</code> is not of any type; it is of <code>interface{}</code> type. </p>
</blockquote>

<p>The <a href=""https://golang.org/doc/faq#convert_slice_of_interface"" rel=""nofollow noreferrer"">FAQ mentions</a></p>

<blockquote>
  <p><strong>they do not have the same representation in memory</strong>. </p>
  
  <p>It is necessary to <strong>copy the elements individually to the destination slice</strong>.<br>
  This example converts a slice of int to a slice of <code>interface{}</code>:</p>
</blockquote>

<pre><code>t := []int{1, 2, 3, 4}
s := make([]interface{}, len(t))
for i, v := range t {
    s[i] = v
}
</code></pre>
","27689178"
"Mapping strings to multiple types for json objects?","8645","","<p>I want to create a map that I can transform into a json object such as</p>

<pre><code>{
   ""a"": ""apple"",
   ""b"": 2
}
</code></pre>

<p>but golang specifies that the map be declare with types, so I can have map[string]string or map[string]int.  How do I create a json object like the above?</p>

<p>Note: I won't know what data and/or types I need until runtime or when I need to create the json object.  Therefore I can't just create an object like</p>

<pre><code>type Foo struct {
    A string `json:""a""`
    B int `json:""b""`
}
</code></pre>
","<p>You can always use <code>interface{}</code>to store any type. As the documentation in the <code>encoding/json</code> package says:</p>

<blockquote>
  <p>To unmarshal JSON into an interface value, Unmarshal unmarshals the JSON into the concrete value contained in the interface value. If the interface value is nil, that is, has no concrete value stored in it, Unmarshal stores one of these in the interface value:  </p>
  
  <p>bool, for JSON booleans<br>
  float64, for JSON numbers<br>
  string, for JSON strings<br>
  []interface{}, for JSON arrays<br>
  map[string]interface{}, for JSON objects<br>
  nil for JSON null  </p>
</blockquote>

<p>Just do the following:</p>

<pre><code>m := map[string]interface{}{""a"":""apple"", ""b"":2}
</code></pre>
","18526240"
"ctag database for Go","8625","","<p>How to generate tags file for Go source</p>

<p>In mac, I installed exuberant ctags , and tried the below command in source directory</p>

<pre><code>ctags -f gosource.tags -R `pwd`
</code></pre>

<p>But, it doesn't consider *.go files. Do I have to use -h option? But, isn't it only for header files, as per the manual?</p>

<p>Please give me the correct command so that I can use the tags file with vim. I also prefer absolute path so that I can keep the file anywhere</p>

<p>Thanks.</p>

<p>Edit:
I assumed current ctags support Go, seeing <a href=""http://groups.google.com/group/golang-nuts/browse_thread/thread/3a4848db231b02c9"" rel=""nofollow noreferrer"">http://groups.google.com/group/golang-nuts/browse_thread/thread/3a4848db231b02c9</a>.</p>

<p>but, <a href=""http://ctags.sourceforge.net/languages.html"" rel=""nofollow noreferrer"">http://ctags.sourceforge.net/languages.html</a>  desn't have go listed.</p>
","<p>Add the following to ~/.ctags</p>

<pre><code>--langdef=Go
--langmap=Go:.go
--regex-Go=/func([ \t]+\([^)]+\))?[ \t]+([a-zA-Z0-9_]+)/\2/d,func/
--regex-Go=/var[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,var/
--regex-Go=/type[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/d,type/
</code></pre>

<p>(From <a href=""http://go-wise.blogspot.com/2011/09/using-ctags-with-go.html"" rel=""noreferrer"">http://go-wise.blogspot.com/2011/09/using-ctags-with-go.html</a>)</p>
","8236826"
"Reading body of http.Request without modifying request state?","8624","","<p>I have a type implementing the <code>http.Handler</code> interface where, in its <code>ServeHTTP</code> method, incoming HTTP requests are inspected, some action is taken, and then the requests are forwarded to a reverse proxy handler (<code>httputil.NewSingleHostReverseProxy</code>).</p>

<p>This works fine, so long as I'm only inspecting the basic request properties, such as the URL or headers.</p>

<p>When I want to inspect the body of an incoming POST request, e.g. by calling <code>req.ParseForm()</code> and then using the <code>req.Form</code> property, I run into an error once the request is passed onto the reverse proxy:</p>

<blockquote>
  <p><code>http: proxy error: http: Request.ContentLength=687 with Body length 0</code></p>
</blockquote>

<p>I imagine this happens because looking at the body of the HTTP request causes the <code>req.Body.Reader</code> stream to be drained, meaning it cannot be read again by the proxy handler.</p>

<p>I've been playing with things like <code>io.Copy()</code> and <code>bufio.Peek()</code>, but I'm not really getting anywhere.</p>

<p>Is there a way to peek at the HTTP request body (and use the built-in parsing of <code>req.ParseForm</code> etc.), while leaving the original request object in its original state, so that it can be passed to the reverse proxy?</p>
","<p>Try reading into a buffer and then using the buffer to back two new readers, one for you to use, and one for subsequent consumers to use. For example, imagine that we want to modify the following code:</p>

<pre><code>doStuff(r.Body) // r is an http.Request
</code></pre>

<p>We could do:</p>

<pre><code>buf, _ := ioutil.ReadAll(r.Body)
rdr1 := ioutil.NopCloser(bytes.NewBuffer(buf))
rdr2 := ioutil.NopCloser(bytes.NewBuffer(buf))

doStuff(rdr1)
r.Body = rdr2 // OK since rdr2 implements the io.ReadCloser interface

// Now the program can continue oblivious to the fact that
// r.Body was ever touched.
</code></pre>

<p>Note that <code>*bytes.Buffer</code> does not have a <code>Close() error</code> method, so it doesn't implement the <code>io.ReadCloser</code> interface. Thus, we have to wrap our <code>*bytes.Buffer</code> values in calls to <code>ioutil.NopCloser</code>.</p>
","23077519"
"Concat multiple slices in golang","8618","","<p>I'm trying to merge multiple slices as follows,</p>

<pre><code>package routes

import (
    ""net/http""
)

type Route struct {
    Name        string
    Method      string
    Pattern     string
    Secured     bool
    HandlerFunc http.HandlerFunc
}

type Routes []Route

var ApplicationRoutes Routes

func init() {
    ApplicationRoutes = append(
        WifiUserRoutes,
        WifiUsageRoutes,
        WifiLocationRoutes,
        DashboardUserRoutes,
        DashoardAppRoutes,
        RadiusRoutes,
        AuthenticationRoutes...
    )
}
</code></pre>

<p>However the builtin append() is capable of appending two slices, hence it throws <strong>too many arguments to append</strong> at compile time. Is there an alternative function to achieve the task? or is there a better way to merge the slices?</p>
","<p><code>append</code> operates on individual elements, not on entire slices. Append each slice in a loop</p>

<pre><code>routes := []Routes{
    WifiUserRoutes,
    WifiUsageRoutes,
    WifiLocationRoutes,
    DashboardUserRoutes,
    DashoardAppRoutes,
    RadiusRoutes,
    AuthenticationRoutes,
}

var ApplicationRoutes []Route
for _, r := range routes {
    ApplicationRoutes = append(ApplicationRoutes, r...)
}
</code></pre>
","37884510"
"Variables inside templates in golang","8598","","<p>What is the namespace of variables inside <code>html/text</code> templates? I thought that a variable <code>$x</code> can change value inside a template, but this example shows me that I cannot.</p>

<p>I failed when I tried to group tournaments according year - something like this (<a href=""http://play.golang.org/p/EX1Aut_ULD"" rel=""nofollow"">http://play.golang.org/p/EX1Aut_ULD</a>):</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
    ""text/template""
    ""time""
)

func main() {
    tournaments := []struct {
        Place string
        Date  time.Time
    }{
        // for clarity - date is sorted, we don't need sort it again
        {""Town1"", time.Date(2015, time.November, 10, 23, 0, 0, 0, time.Local)},
        {""Town2"", time.Date(2015, time.October, 10, 23, 0, 0, 0, time.Local)},
        {""Town3"", time.Date(2014, time.November, 10, 23, 0, 0, 0, time.Local)},
    }
    t, err := template.New("""").Parse(`
{{$prev_year:=0}}
{{range .}}
    {{with .Date}}
        {{$year:=.Year}}
                    {{if ne $year $prev_year}}
                        Actions in year {{$year}}:
                {{$prev_year:=$year}}
            {{end}}
    {{end}}

        {{.Place}}, {{.Date}}
    {{end}}

    `)
    if err != nil {
        panic(err)
    }
    err = t.Execute(os.Stdout, tournaments)
    if err != nil {
        fmt.Println(""executing template:"", err)
    }
}
</code></pre>
","<p><a href=""https://golang.org/pkg/text/template/#hdr-Variables"" rel=""nofollow"">https://golang.org/pkg/text/template/#hdr-Variables</a>:</p>

<blockquote>
  <p>A variable's scope extends to the ""end"" action of the control
  structure (""if"", ""with"", or ""range"") in which it is declared, or to
  the end of the template if there is no such control structure.</p>
</blockquote>

<p>So the <code>$prev_year</code> you define with <code>{{$prev_year:=$year}}</code> only lives until.. the next line (<code>{{end}}</code>).</p>

<p>It seems there is no way of going around that.</p>

<p>The ""right"" way to do this is to take that logic out of your template, and do the grouping in your Go code.</p>

<p>Here is a working example : <a href=""https://play.golang.org/p/DZoSXo9WQR"" rel=""nofollow"">https://play.golang.org/p/DZoSXo9WQR</a></p>

<pre><code>package main

import (
    ""fmt""
    ""os""
    ""text/template""
    ""time""
)

type Tournament struct {
    Place string
    Date  time.Time
}

type TournamentGroup struct {
    Year        int
    Tournaments []Tournament
}

func groupTournamentsByYear(tournaments []Tournament) []TournamentGroup {
    if len(tournaments) == 0 {
        return nil
    }

    result := []TournamentGroup{
        {
            Year:        tournaments[0].Date.Year(),
            Tournaments: make([]Tournament, 0, 1),
        },
    }

    i := 0
    for _, tournament := range tournaments {
        year := tournament.Date.Year()
        if result[i].Year == year {
            // Add to existing group
            result[i].Tournaments = append(result[i].Tournaments, tournament)
        } else {
            // New group
            result = append(result, TournamentGroup{
                Year: year,
                Tournaments: []Tournament{
                    tournament,
                },
            })
            i++
        }
    }

    return result
}

func main() {
    tournaments := []Tournament{
        // for clarity - date is sorted, we don't need sort it again
        {""Town1"", time.Date(2015, time.November, 10, 23, 0, 0, 0, time.Local)},
        {""Town2"", time.Date(2015, time.October, 10, 23, 0, 0, 0, time.Local)},
        {""Town3"", time.Date(2014, time.November, 10, 23, 0, 0, 0, time.Local)},
    }

    t, err := template.New("""").Parse(`
{{$prev_year:=0}}
{{range .}}
    Actions in year {{.Year}}:
    {{range .Tournaments}}

            {{.Place}}, {{.Date}}
    {{end}}
    {{end}}

    `)
    if err != nil {
        panic(err)
    }
    err = t.Execute(os.Stdout, groupTournamentsByYear(tournaments))
    if err != nil {
        fmt.Println(""executing template:"", err)
    }
}
</code></pre>
","33037076"
"Get pointer to value using reflection","8597","","<p>I have a function that iterates through all fields of an interface passed as parameter. In order to achieve this is I am using reflection. The issue is that I do not know how to obtain the address of a non-pointer field. Here is an example:</p>

<pre><code>type Z struct {
    Id int
}

type V struct {
    Id int
    F Z
}

type T struct {
    Id int
    F V
}
</code></pre>

<p>The above code represents my test structures. Now here is the actual function which traverses a specified structure and lists details about it:</p>

<pre><code>func InspectStruct(o interface{}) {
     val := reflect.ValueOf(o)
     if val.Kind() == reflect.Interface &amp;&amp; !val.IsNil() {
        elm := val.Elem()
        if elm.Kind() == reflect.Ptr &amp;&amp; !elm.IsNil() &amp;&amp; elm.Elem().Kind() == reflect.Ptr {
            val = elm
        }
     }
     if val.Kind() == reflect.Ptr {
        val = val.Elem()
     }

    for i := 0; i &lt; val.NumField(); i++ {
        valueField := val.Field(i)
        typeField := val.Type().Field(i)
        address := ""not-addressable""

        if valueField.Kind() == reflect.Interface &amp;&amp; !valueField.IsNil() {
            elm := valueField.Elem()
            if elm.Kind() == reflect.Ptr &amp;&amp; !elm.IsNil() &amp;&amp; elm.Elem().Kind() == reflect.Ptr {
                valueField = elm
            }
        }
        if valueField.Kind() == reflect.Ptr {
            valueField = valueField.Elem()
        }
        if valueField.CanAddr() {
            address = fmt.Sprint(valueField.Addr().Pointer())
        }

        fmt.Printf(""Field Name: %s,\t Field Value: %v,\t Address: %v\t, Field type: %v\t, Field kind: %v\n"", typeField.Name, 
            valueField.Interface(), address, typeField.Type, valueField.Kind())

        if valueField.Kind() == reflect.Struct {
            InspectStruct(valueField.Interface())
        }
    }
}
</code></pre>

<p>And here is the actual test after structure instantiation/initialization:</p>

<pre><code>t := new(T)
t.Id = 1
t.F = *new(V)
t.F.Id = 2
t.F.F = *new(Z)
t.F.F.Id = 3

InspectStruct(t)
</code></pre>

<p>And finally the output of InspectStruct call:</p>

<pre><code>Field Name: Id,  Field Value: 1,     Address: 408125440 , Field type: int   , Field kind: int
Field Name: F,   Field Value: {2 {3}},   Address: 408125444 , Field type: main.V    , Field kind: struct
Field Name: Id,  Field Value: 2,     Address: not-addressable   , Field type: int   , Field kind: int
Field Name: F,   Field Value: {3},   Address: not-addressable   , Field type: main.Z    , Field kind: struct
Field Name: Id,  Field Value: 3,     Address: not-addressable   , Field type: int   , Field kind: int
</code></pre>

<p>As you can see I am using recursion, so if one of the fields is a struct kind then I call InspectStruct for it.
<strong>My issue is that though all fields have been initialized for the entire structure ""t"" hierarchy, I am not able to get the address for any field located at a higher depth than ""t"". I would really appreciate any help.</strong></p>
","<p>Passing <code>reflect.Value</code> instead of <code>interface{}</code> seems to fix the problem, however I don't know why <code>valueField.Interface()</code> doesn't work.</p>

<p>Working example : <a href=""http://play.golang.org/p/nleA2YWMj8"">http://play.golang.org/p/nleA2YWMj8</a></p>

<pre><code>func InspectStructV(val reflect.Value) {
    if val.Kind() == reflect.Interface &amp;&amp; !val.IsNil() {
        elm := val.Elem()
        if elm.Kind() == reflect.Ptr &amp;&amp; !elm.IsNil() &amp;&amp; elm.Elem().Kind() == reflect.Ptr {
            val = elm
        }
    }
    if val.Kind() == reflect.Ptr {
        val = val.Elem()
    }

    for i := 0; i &lt; val.NumField(); i++ {
        valueField := val.Field(i)
        typeField := val.Type().Field(i)
        address := ""not-addressable""

        if valueField.Kind() == reflect.Interface &amp;&amp; !valueField.IsNil() {
            elm := valueField.Elem()
            if elm.Kind() == reflect.Ptr &amp;&amp; !elm.IsNil() &amp;&amp; elm.Elem().Kind() == reflect.Ptr {
                valueField = elm
            }
        }

        if valueField.Kind() == reflect.Ptr {
            valueField = valueField.Elem()

        }
        if valueField.CanAddr() {
            address = fmt.Sprintf(""0x%X"", valueField.Addr().Pointer())
        }

        fmt.Printf(""Field Name: %s,\t Field Value: %v,\t Address: %v\t, Field type: %v\t, Field kind: %v\n"", typeField.Name,
            valueField.Interface(), address, typeField.Type, valueField.Kind())

        if valueField.Kind() == reflect.Struct {
            InspectStructV(valueField)
        }
    }
}

func InspectStruct(v interface{}) {
    InspectStructV(reflect.ValueOf(v))
}
</code></pre>
","24348352"
"Packaging Go application for Debian","8557","","<p>How can I put my Go binary into a Debian package? Since Go is statically linked, I just have a single executable--I don't need a lot of complicated project metadata information. Is there a simple way to package the executable and resource files without going through the trauma of <code>debuild</code>?</p>

<p>I've looked all over for existing questions; however, all of my research turns up questions/answers about a .deb file containing the golang development environment (i.e., what you would get if you do <code>sudo apt-get install golang-go</code>). </p>
","<p>Well. I think the only ""trauma"" of <code>debuild</code> is that it runs <code>lintian</code> after building the package, and it's <code>lintian</code> who tries to spot problems with your package.</p>

<p>So there are two ways to combat the situation:</p>

<ul>
<li>Do not use <code>debuild</code>: this tool merely calls <code>dpkg-buildpackage</code> which really does the necessary powerlifting. The usual call to build a binary package is <code>dpkg-buildpackage -us -uc -b</code>. You still might call <code>debuild</code> for other purposes, like <code>debuild clean</code> for instance.</li>
<li>Add the so-called <a href=""http://lintian.debian.org/manual/section-2.4.html"">""lintian override""</a> which can be used to make <code>lintian</code> turn a blind eye to <em>selected</em> problems with your package which, you insist, are not problems.</li>
</ul>

<p>Both approaches imply that you <em>do not attempt to build</em> your application by the packaging tools but rather treat it as a blob which is just wrapped to a package. This would require slightly abstraining from the normal way <code>debian/rules</code> work (to not attempt to build anything).</p>

<p>Another solution which <em>might be</em> possible (and is really way more Debian-ish) is to try to use <code>gcc-go</code> (plus <code>gold</code> for linking): since it's a GCC front-end, this tool produces a dynamically-linked application (which links against <code>libgo</code> or something like this). I, personally, have no experience with it yet, and would only consider using it if you intend to try to push your package into the Debian proper.</p>

<p>Regarding the general question of packaging Go programs for Debian, you might find the following resources useful:</p>

<ul>
<li><a href=""http://thread.gmane.org/gmane.comp.lang.go.general/81527"">This thread</a> started on go-nuts by one of Go for Debian packagers.</li>
<li>In particular, the first post in that thread links to <a href=""http://thread.gmane.org/gmane.linux.debian.devel.general/179252"">this discussion</a> on debian-devel.</li>
<li><a href=""http://lists.debian.org/debian-devel/2013/01/msg00590.html"">The second thread</a> on debian-devel regarding that same problem (it's a logical continuation of the former thread).</li>
</ul>

<hr>

<p><strong>Update</strong> on 2015-10-15.</p>

<p>(Since this post appears to still be searched and found and studied by people I've decided to update it to better reflec the current state of affairs.)</p>

<p>Since then the situation with packaging Go apps and packages got improved dramatically, and it's possible to build a Debian package using ""classic"" Go (the so-called <code>gc</code> suite originating from Google) rather than <code>gcc-go</code>.
And there exist a good infrastructure for packages as well.</p>

<p>The key tool to use when debianizing a Go program now is <code>dh-golang</code> described <a href=""https://wiki.debian.org/MichaelStapelberg/GoPackaging"">here</a>.</p>
","15106726"
"Golang - Timezone parsing","8529","","<p>In the example bellow the result is always ""[date] 05:00:00 +0000 UTC"" regardless the timezone you choose for the parseAndPrint function. What is wrong with this code? The time should change depending on the timezone you choose. (Go Playground servers are apparently configured in UTC timezone).</p>

<p><a href=""http://play.golang.org/p/wP207BWYEd"" rel=""nofollow"">http://play.golang.org/p/wP207BWYEd</a></p>

<pre><code>package main

import (
    ""fmt""
    ""time""
)

func main() {
    now := time.Now()
    parseAndPrint(now, ""BRT"")
    parseAndPrint(now, ""EDT"")
    parseAndPrint(now, ""UTC"")
}

func parseAndPrint(now time.Time, timezone string) {
    test, err := time.Parse(""15:04:05 MST"", fmt.Sprintf(""05:00:00 %s"", timezone))
    if err != nil {
        fmt.Println(err)
        return
    }

    test = time.Date(
        now.Year(),
        now.Month(),
        now.Day(),
        test.Hour(),
        test.Minute(),
        test.Second(),
        test.Nanosecond(),
        test.Location(),
    )

    fmt.Println(test.UTC())
}
</code></pre>

<p>Thanks!</p>
","<p>When you Parse a time, you are parsing it in your current location, which is OK as long as that's what you're expecting, and the timezone abbreviation is known from within your location.</p>

<p>If you can forgo timezones, it's far easier to normalize all the times you're dealing with into UTC.</p>

<p>The next easiest is handling everything with explicit offsets, like <code>-05:00</code>.</p>

<p>If you want to deal with times originating in other timezones, you need to use <code>time.Location</code>. You can load Locations from the local timezone db with <code>time.LoadLocation</code>, and parse times there with <code>time.ParseInLocation</code>. </p>
","25368749"
"Golang/mgo: Why does mgo not return the ID of inserted document?","8529","","<p>According to the documentation (<a href=""http://godoc.org/launchpad.net/mgo/v2"">http://godoc.org/launchpad.net/mgo/v2</a>) you can obtain the ID of your ""Upserted"" document if you use the Upsert method.</p>

<p>There is also an Insert method that does not provide this functionality.<br>
Why is that?  What if I want to perform an Insert instead of an Upsert?  (or wouldn't ever be any valid reason to want to do that? I'm starting to wonder.)</p>
","<p>You use <a href=""http://go.pkgdoc.org/launchpad.net/mgo/v2/bson""><code>bson</code></a>.<a href=""http://go.pkgdoc.org/launchpad.net/mgo/v2/bson#NewObjectId""><code>NewObjectId()</code></a> to generate an ID to be inserted.</p>

<p>This is how you'd insert a new document:</p>

<pre><code>i := bson.NewObjectId()
c.Insert(bson.M{""_id"": i, ""foo"": ""bar""})
</code></pre>

<p>Since you don't know if you're going to insert or update when you issue an <code>Upsert</code>, it would be superfluous to generate an ID just to drop it right after the query (in case an update happens). That's why it's generated db-side and returned to you when applicable.</p>
","12012102"
"How to encrypt and decrypt plain text with a RSA keys in Go?","8523","","<p>I am trying to write a utility program which encrypts and decrypts plain text files using a RSA key pair. The RSA keys were generated with ssh-keygen and are stored in .ssh, as usual.</p>

<p>I am having trouble understanding how to do that with the Go language crypto and crypto/rsa packages? The documentation on those is a little sparse (even more so because I am new to encryption) and there are very few examples. I checked the rsa_test.go file  for any clues, but it only confused me more.  </p>

<p>In short I am trying to load the public/private key pair from the id_rsa and id_rsa.pub files in .ssh and use them to encrypt/decrypt a plain text file.</p>

<p>Thank you in advance!</p>
","<p>Keep in mind that RSA is not designed to be a block cipher.  Usually RSA is used to encrypt a symmetric key that is then used to encrypt the data.  With that in mind, however, here is a program which can use an RSA private key to encrypt data that can be decrypted by itself:</p>

<pre><code>package main

import (
    ""crypto/rand""
    ""crypto/rsa""
    ""crypto/sha1""
    ""crypto/x509""
    ""encoding/pem""
    ""flag""
    ""io/ioutil""
    ""log""
)

// Command-line flags
var (
    keyFile = flag.String(""key"", ""id_rsa"", ""Path to RSA private key"")
    inFile  = flag.String(""in"", ""in.txt"", ""Path to input file"")
    outFile = flag.String(""out"", ""out.txt"", ""Path to output file"")
    label   = flag.String(""label"", """", ""Label to use (filename by default)"")
    decrypt = flag.Bool(""decrypt"", false, ""Decrypt instead of encrypting"")
)

func main() {
    flag.Parse()

    // Read the input file
    in, err := ioutil.ReadFile(*inFile)
    if err != nil {
        log.Fatalf(""input file: %s"", err)
    }

    // Read the private key
    pemData, err := ioutil.ReadFile(*keyFile)
    if err != nil {
        log.Fatalf(""read key file: %s"", err)
    }

    // Extract the PEM-encoded data block
    block, _ := pem.Decode(pemData)
    if block == nil {
        log.Fatalf(""bad key data: %s"", ""not PEM-encoded"")
    }
    if got, want := block.Type, ""RSA PRIVATE KEY""; got != want {
        log.Fatalf(""unknown key type %q, want %q"", got, want)
    }

    // Decode the RSA private key
    priv, err := x509.ParsePKCS1PrivateKey(block.Bytes)
    if err != nil {
        log.Fatalf(""bad private key: %s"", err)
    }

    var out []byte
    if *decrypt {
        if *label == """" {
            *label = *outFile
        }
        // Decrypt the data
        out, err = rsa.DecryptOAEP(sha1.New(), rand.Reader, priv, in, []byte(*label))
        if err != nil {
            log.Fatalf(""decrypt: %s"", err)
        }
    } else {
        if *label == """" {
            *label = *inFile
        }
        out, err = rsa.EncryptOAEP(sha1.New(), rand.Reader, &amp;priv.PublicKey, in, []byte(*label))
        if err != nil {
            log.Fatalf(""encrypt: %s"", err)
        }
    }

    // Write data to output file
    if err := ioutil.WriteFile(*outFile, out, 0600); err != nil {
        log.Fatalf(""write output: %s"", err)
    }
}
</code></pre>
","14944339"
"golang: How do I determine the number of lines in a file efficiently?","8508","","<p>In Golang, I am looking for an efficient way to determine the number of lines a file has.</p>

<p>Of course, I can always loop through the entire file, but does not seem very efficient.</p>

<pre><code>file, _ := os.Open(""/path/to/filename"")
fileScanner := bufio.NewScanner(file)
lineCount := 0
for fileScanner.Scan() {
    lineCount++
}
fmt.Println(""number of lines:"", lineCount)
</code></pre>

<p>Is there a better (quicker, less expensive) way to find out how many lines a file has?</p>
","<p>Here's a faster line counter using <code>bytes.Count</code> to find the newline characters.</p>

<p>It's faster because it takes away all the extra logic and buffering required to return whole lines, and takes advantage of some assembly optimized functions offered by the bytes package to search characters in a byte slice.</p>

<p>Larger buffers also help here, especially with larger files. On my system, with the file I used for testing, a 32k buffer was fastest.</p>

<pre><code>func lineCounter(r io.Reader) (int, error) {
    buf := make([]byte, 32*1024)
    count := 0
    lineSep := []byte{'\n'}

    for {
        c, err := r.Read(buf)
        count += bytes.Count(buf[:c], lineSep)

        switch {
        case err == io.EOF:
            return count, nil

        case err != nil:
            return count, err
        }
    }
}
</code></pre>

<p>and the benchmark output:</p>

<pre><code>BenchmarkBuffioScan   500      6408963 ns/op     4208 B/op    2 allocs/op
BenchmarkBytesCount   500      4323397 ns/op     8200 B/op    1 allocs/op
BenchmarkBytes32k     500      3650818 ns/op     65545 B/op   1 allocs/op
</code></pre>
","24563853"
"What is the most portable/cross-platform way to represent a newline in go/golang?","8504","","<p>Currently, to represent a newline in go programs, I use <code>\n</code>. For example:</p>

<pre><code>package main

import ""fmt""


func main() {
    fmt.Printf(""%d is %s \n"", 'U', string(85))
}
</code></pre>

<p>... will yield <code>85 is U</code> followed by a newline.</p>

<p>However, this doesn't seem all that cross-platform. Looking at other languages, PHP represents this with a global constant ( <code>PHP_EOL</code> ). Is <code>\n</code> the right way to represent newlines in a cross-platform specific manner in go / golang?</p>
","<p>I got curious about this so decided to see what exactly is done by <code>fmt.Println</code>. <a href=""http://golang.org/src/pkg/fmt/print.go"" rel=""noreferrer"">http://golang.org/src/pkg/fmt/print.go</a></p>

<p>If you scroll to the very bottom, you'll see an <code>if addnewline</code> where <code>\n</code> is always used. I can't hardly speak for if this is the most ""cross-platform"" way of doing it, and go was originally tied to linux in the early days, but that's where it is for the std lib.</p>

<p>I was originally going to suggest just using <code>fmt.Fprintln</code> and this might still be valid as if the current functionality isn't appropriate, a bug could be filed and then the code would simply need to be compiled with the latest Go toolchain.</p>
","14494187"
"Is it required to assign default value to variable in Golang?","8497","","<p>In Golang when a variable is declared it is initialized with zero value as described in the specification.</p>

<p><a href=""http://golang.org/ref/spec#The_zero_value"" rel=""nofollow noreferrer"">http://golang.org/ref/spec#The_zero_value</a></p>

<p>But is it good coding practice to make use of this property and do not explicitly initialize your variable if it needs to initialized with the default value.</p>

<p>for example in the following example</p>

<p><a href=""http://play.golang.org/p/Mvh_zwFkOu"" rel=""nofollow noreferrer"">http://play.golang.org/p/Mvh_zwFkOu</a></p>

<pre><code>package main

import ""fmt""

type B struct {
    isInit bool
    Greeting string
}

func (b *B) Init() {
    b.isInit = true
    b.Greeting = ""Thak you for your time""
}

func (b *B) IsInitialized() bool {
    return b.isInit
}

func main() {
    var b B
    if !b.IsInitialized(){
        b.Init()
    }
    fmt.Println(b.Greeting)
}
</code></pre>

<p>the program relies on the default value of boolean to be false.</p>
","<p>As everyone says, specification is clear here: all memory is initialised (zeroed). You <em>should</em> take advantage of this as standard packages do. In particular, it allows you to rely on ""default constructor"" for your own types and often skip <code>New() *T</code> kind of functions in favour of <code>&amp;T{}</code>.</p>

<p>Many types in standard packages take advantage of this, some examples:</p>

<p><a href=""http://golang.org/pkg/net/http/#Client"" rel=""nofollow"">http.Client</a></p>

<blockquote>
  <p>A Client is an HTTP client. <strong>Its zero value</strong> (DefaultClient) is a usable client that uses DefaultTransport.</p>
</blockquote>

<p>And then you will find <code>var DefaultClient = &amp;Client{}</code> declared in the package.</p>

<p><a href=""http://golang.org/pkg/net/http/#Server"" rel=""nofollow"">http.Server</a></p>

<blockquote>
  <p>A Server defines parameters for running an HTTP server. <strong>The zero value</strong> for Server is a valid configuration.</p>
</blockquote>

<p><a href=""http://golang.org/pkg/bytes/#Buffer"" rel=""nofollow"">bytes.Buffer</a></p>

<blockquote>
  <p>A Buffer is a variable-sized buffer of bytes with Read and Write methods. <strong>The zero value</strong> for Buffer is an empty buffer ready to use.</p>
</blockquote>

<p>This is great, because you can just do <code>var buf bytes.Buffer</code> and start using it. As a consequence of this you will also often see boolean member variables to be used in a ""negated"" form – for example <code>InsecureSkipVerify</code> in <a href=""http://golang.org/pkg/crypto/tls/#Config"" rel=""nofollow""><code>tls.Config</code></a> is not called <code>Verify</code>, because the default behaviour wouldn't then validate certificates (think I want the <code>false</code> – or zero – value to be used for desirable defaults).</p>

<p>Finally, answering your question:</p>

<blockquote>
  <p>But is it good coding practice to make use of this property and do not explicitly initialize your variable if it needs to be initialized with default value?</p>
</blockquote>

<p>Yes, it is.</p>
","31588595"
"Go: Disable a log.Logger?","8492","","<p>I have some heavily instrumented code that makes use of the <code>log</code> package. Now it's come time to turn off the logging, and I can't determine how to turn off the standard logger.</p>

<p>Have I missed something? Should I be checking a flag before making log calls, or commenting them out in production?</p>
","<p>For completely disabling logs, it's actually better to call <code>log.SetFlags(0)</code><sup><a href=""https://stackoverflow.com/questions/10571182/go-disable-a-log-logger#comment43485550_10688098"">Joril</a></sup> and set the output to a no-op <code>io.Writer</code> (i.e., <code>log.SetOutput(ioutil.Discard)</code>)</p>

<p>But even after this, the operations will idle around <a href=""https://gist.github.com/Avinash-Bhat/48c4f06b0cc840d9fd6c#file-log_test-go"" rel=""noreferrer"" title=""YMMV, tested on i7-4500U CPU @ 1.80GHz"">500-600 ns/op</a><sup><em>1</em></sup></p>

<p>This can still be cut short (to around <em>100 ns/op</em>) by using a custom <code>Logger</code> implementation, and implementing all the functions to be no-op -- as demonstrated <a href=""https://gist.github.com/Avinash-Bhat/48c4f06b0cc840d9fd6c#file-log_test-go"" rel=""noreferrer"" title=""benchmark for package log"">here</a> (only overriding <code>Println</code> for bervity).</p>

<p>The alternative to all these is to use a custom logging framework with levels and set it to complete OFF.</p>

<p>Note though, one of the commonly used library for logging (<a href=""https://github.com/Sirupsen/logrus"" rel=""noreferrer"">logrus</a>) has <a href=""https://github.com/Sirupsen/logrus/issues/125"" rel=""noreferrer"" title=""Issue #125"">performance implications</a> -- the same can be found in the <a href=""https://gist.github.com/Avinash-Bhat/48c4f06b0cc840d9fd6c"" rel=""noreferrer"" title=""Gist"">benchmarks</a> where it perform with <em>3K+ ns/op</em>, regardless.</p>

<p><em>Biased opinion: from the benchmarks, the library <a href=""https://github.com/op/go-logging"" rel=""noreferrer"">go-logging</a> performs in par with the custom <code>Logger</code> implementation when setting the <code>Level</code> to <code>-1</code>, regardless of the backend and formatting</em></p>

<p>(the benchmark source can be found <a href=""https://gist.github.com/Avinash-Bhat/48c4f06b0cc840d9fd6c"" rel=""noreferrer"" title=""Gist"">here</a>)</p>

<p>the output of the benchmark is as follows:</p>

<pre><code>testing: warning: no tests to run
PASS
BenchmarkGoLogging-4                                             1000000          2068 ns/op
BenchmarkGoLoggingNullBackend-4                                  5000000           308 ns/op
BenchmarkGoLoggingNullBackendWithFancyFormatter-4                3000000           435 ns/op
BenchmarkGoLoggingOffLevel-4                                    20000000           109 ns/op
BenchmarkGoLoggingNullBackendAndOffLevel-4                      20000000           108 ns/op
BenchmarkGoLoggingNullBackendWithFancyFormatterAndOffLevel-4    20000000           109 ns/op
BenchmarkLog15-4                                                  200000          7359 ns/op
BenchmarkLog15WithDiscardHandler-4                               2000000           922 ns/op
BenchmarkLog15WithDiscardHandlerAndOffLevel-4                    2000000           926 ns/op
BenchmarkLog15WithNopLogger-4                                   20000000           108 ns/op
BenchmarkLog15WithNopLoggerDiscardHandlerA-4                    20000000           112 ns/op
BenchmarkLog15WithNopLoggerAndDiscardHandlerAndOffLevel-4       20000000           112 ns/op
BenchmarkLog-4                                                   1000000          1217 ns/op
BenchmarkLogIoDiscardWriter-4                                    2000000           724 ns/op
BenchmarkLogIoDiscardWriterWithoutFlags-4                        3000000           543 ns/op
BenchmarkLogCustomNullWriter-4                                   2000000           731 ns/op
BenchmarkLogCustomNullWriterWithoutFlags-4                       3000000           549 ns/op
BenchmarkNopLogger-4                                            20000000           113 ns/op
BenchmarkNopLoggerWithoutFlags-4                                20000000           112 ns/op
BenchmarkLogrus-4                                                 300000          3832 ns/op
BenchmarkLogrusWithDiscardWriter-4                                500000          3032 ns/op
BenchmarkLogrusWithNullFormatter-4                                500000          3814 ns/op
BenchmarkLogrusWithPanicLevel-4                                   500000          3872 ns/op
BenchmarkLogrusWithDiscardWriterAndPanicLevel-4                   500000          3085 ns/op
BenchmarkLogrusWithDiscardWriterAndNullFormatterAndPanicLevel-4   500000          3064 ns/op
ok      log-benchmarks  51.378s
go test -bench .  62.17s user 3.90s system 126% cpu 52.065 total
</code></pre>

<p><sup><em>#1: <strong>YMMV</strong>, tested on i7-4500U CPU @ 1.80GHz</em></sup></p>
","34457930"
"Passing pointer through channel in Go Lang","8489","","<p>It is possible to pass pointer over channel in go lang? I need to pass struct, do changes in it and have theese changes in the same function from where struct was passed?</p>

<p>I tried </p>

<pre><code>chan &lt;- &amp;data
</code></pre>

<p>and I got</p>

<pre><code># command-line-arguments .\o.go:130: cannot use &amp;duom[i] (type *KaVartoti) as type KaVartoti in send
</code></pre>

<p>after this I tried</p>

<pre><code>chan &lt;- *data
</code></pre>

<p>and I got</p>

<pre><code># command-line-arguments .\o.go:130: invalid indirect of duom[i] (type KaVartoti)
</code></pre>

<p>So, it is possible to send pointer through channel in Go ir not?</p>
","<p>Sure you can, e.g.</p>

<pre><code>package main

type Data struct {
    i int
}

func func1(c chan *Data ) {
    for {
        var t *Data;
        t = &lt;-c //receive
        t.i += 10 //increment
        c &lt;- t   //send it back
    }
}

func main() {
    c := make(chan *Data)
    t := Data{10}
    go func1(c)
    println(t.i)
    c &lt;- &amp;t //send a pointer to our t
    i := &lt;-c //receive the result
    println(i.i)
    println(t.i)
}
</code></pre>

<p>The error you get tells you that your channel takes a KaVartoti struct, you'll have to create a channel of KaVartoti pointers (a <code>chan *KaVartoti</code>). </p>

<p>At a guess, your <code>duom</code> variable is an array/slice, so if you want to send a pointer to one of the elements, you'd use your first approach of <code>&amp;duom[i]</code></p>
","20848487"
"Conversion of time.Duration type microseconds value to milliseconds","8472","","<p>I am using go-ping ( <a href=""https://github.com/sparrc/go-ping"" rel=""noreferrer"">https://github.com/sparrc/go-ping</a> )library of golang for unprivileged ICMP ping.</p>

<pre><code>timeout := time.Second*1000
interval := time.Second
count := 5
host := p.ipAddr
pinger, cmdErr := ping.NewPinger(host)

pinger.Count = count
pinger.Interval = interval
pinger.Timeout = timeout
pinger.SetPrivileged(false)
pinger.Run()
stats := pinger.Statistics()

latency = stats.AvgRtt  // stats.AvgRtt is time.Duration type
jitter = stats.StdDevRtt// stats.StdDevRtt is time.Duration type
</code></pre>

<p>From running this, I am getting latency in milliseconds and jitter in microseconds. I want same unit for both let's say millisecond so when I am doing <code>jitter = stats.StdDevRtt/1000</code> or <code>jitter = jitter/1000</code> (to convert microseconds to milliseconds), what I am getting is jitter in nanoseconds :(. Is there any way to get same unit milliseconds for both latency and jitter.</p>
","<h3>Number to <code>time.Duration</code></h3>

<p><a href=""https://golang.org/pkg/time/#Duration"" rel=""noreferrer""><code>time.Duration</code></a> is a type having <code>int64</code> as its <a href=""https://golang.org/ref/spec#Types"" rel=""noreferrer"">underlying type</a>, which stores the duration in nanoseconds.</p>

<p>If you know the value but you want other than nanoseconds, simply multiply the unit you want, e.g.:</p>

<pre><code>d := 100 * time.Microsecond
fmt.Println(d) // Output: 100µs
</code></pre>

<p>The above works because <code>100</code> is an untyped <a href=""https://golang.org/ref/spec#Constants"" rel=""noreferrer"">constant</a>, and it can be converted automatically to <code>time.Duration</code> which has <code>int64</code> underlying type.</p>

<p>Note that if you have the value as a typed value, you have to use explicit <a href=""https://golang.org/ref/spec#Conversions"" rel=""noreferrer"">type conversion</a>:</p>

<pre><code>value := 100 // value is of type int

d2 := time.Duration(value) * time.Millisecond
fmt.Println(d2) // Output: 100ms
</code></pre>

<h3><code>time.Duration</code> to number</h3>

<p>So <code>time.Duration</code> is always the nanoseconds. If you need it in milliseconds for example, all you need to do is divide the <code>time.Duration</code> value with the number of nanoseconds in a millisecond:</p>

<pre><code>ms := int64(d2 / time.Millisecond)
fmt.Println(""ms:"", ms) // Output: ms: 100
</code></pre>

<p>Other examples:</p>

<pre><code>fmt.Println(""ns:"", int64(d2/time.Nanosecond))  // ns: 100000000
fmt.Println(""µs:"", int64(d2/time.Microsecond)) // µs: 100000
fmt.Println(""ms:"", int64(d2/time.Millisecond)) // ms: 100
</code></pre>

<p>Try the examples on the <a href=""https://play.golang.org/p/xLmj_Qzb81"" rel=""noreferrer"">Go Playground</a>.</p>

<p>If your jitter (duration) is less than the unit you whish to convert it to, you need to use floating point division, else an integer division will be performed which cuts off the fraction part. For details see: <a href=""https://stackoverflow.com/questions/39544571/golang-round-to-nearest-0-05/39544897#39544897"">Golang Round to Nearest 0.05</a>.</p>

<p>Convert both the jitter and unit to <code>float64</code> before dividing:</p>

<pre><code>d := 61 * time.Microsecond
fmt.Println(d) // Output: 61µs

ms := float64(d) / float64(time.Millisecond)
fmt.Println(""ms:"", ms) // Output: ms: 0.061
</code></pre>

<p>Output (try it on the <a href=""https://play.golang.org/p/mdB_JMw_zN"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>61µs
ms: 0.061
</code></pre>
","41503910"
"how do you use golang with a private gitlab repo?","8463","","<p>Gitlab is a free, open-source way to host private .git repositories but it does not seem to work with golang. When you create a project it generates a URL of the form:</p>

<pre><code>git@1.2.3.4:private-developers/project.git
</code></pre>

<p>where:
    1.2.3.4 is the IP address of the gitlab server
    private-developers is a user group which has access to the private repo</p>

<p>Golang 1.2.1 doesn't seem to understand this syntax.</p>

<pre><code>go get git@1.2.3.4:private-developers/project.git
</code></pre>

<p>results in:</p>

<pre><code>package git@23.251.148.129/project.git: unrecognized import path ""git@1.2.3.4/project.git""
</code></pre>

<p>Is there a way to get this to work?</p>

<p>thanks!</p>
","<p>This issue is now resolved in Gitlab 8.* but is still unintuitive. The most difficult challenge indeed is <code>go get</code> and the following steps will allow you to overcome those:</p>

<ol>
<li><p>Create an SSH key pair. Be sure to not overwrite an existing pair that is by default saved in <code>~/.ssh/</code>.</p>

<pre><code>ssh-keygen -t rsa -b 4096
</code></pre></li>
<li><p>Create a new <em>Secret Variable</em> in your Gitlab project. Use <code>SSH_PRIVATE_KEY</code> as <em>Key</em> and the content of your <em>private</em> key as <em>Value</em>.</p></li>
<li><p>Modify your <code>.gitlab-ci.yml</code> with a <code>before_script</code>.</p>

<pre><code>before_script:
  # install ssh-agent if not already installed
  - 'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )'
  # run ssh-agent
  - eval $(ssh-agent -s)
  # add the SSH key stored in SSH_PRIVATE_KEY
  - ssh-add &lt;(echo ""$SSH_PRIVATE_KEY"")
  # for Docker builds disable host key checking
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] &amp;&amp; echo -e ""Host *\n\tStrictHostKeyChecking no\n\n"" &gt; ~/.ssh/config'
</code></pre></li>
<li><p>Add the <em>public</em> key from the key pair created in step 1 as a <em>Deploy Key</em> in the project that you need to <code>go get</code>.</p></li>
</ol>
","44036234"
"Golang : Express-like framework for building APIs","8455","","<p>I have built some basic APIs with the node.js Express framework. I'm thinking of switching to Go, since callback code gets hard to reason about pretty quickly. I really like Express as a framework, is there something similar in Go?</p>
","<p>The Gorilla Toolkit is great.  In particular, you might want to look at github.com/gorilla/mux.  Larger frameworks exist, but go users tend to opt for the simpler option, because the language and standard library get you quite far and a framework isn't as necessary to manage the complexity as it is in other languages and may just complicate things unnecessarily.</p>

<p>The <a href=""http://godoc.org/code.google.com/p/gorilla/mux"" rel=""nofollow"">API docs</a> are a good reference and you can also check out <a href=""https://sourcegraph.com/github.com/gorilla/mux/symbols/go/github.com/gorilla/mux"" rel=""nofollow"">examples of how other people use it</a>.</p>
","18754843"
"In Go, why isn't my Stringer interface method getting invoked? When using fmt.Println","8432","","<p>Suppose I have the following code:</p>

<pre><code>package main

import ""fmt""

type Car struct{
    year int
    make string
}

func (c *Car)String() string{
    return fmt.Sprintf(""{make:%s, year:%d}"", c.make, c.year)
}

func main() {
    myCar := Car{year:1996, make:""Toyota""}
    fmt.Println(myCar)
}
</code></pre>

<p>When I call fmt.Println(myCar) and the object in question is a pointer, my String() method gets called properly.  If, however the object is a value, my output is formatted using the default formatting built into Go and my code to format the said object is not called.</p>

<p>The interesting thing is in either case if I call myCar.String() manually it works properly whether my object is either a pointer or value.</p>

<p>How can I get my object formatted the way I want no matter if the object is value-based or pointer-based when used with Println?  </p>

<p>I don't want to use a value method for String because then that means every time it's invoked the object is copied which seams unreasonable.  And I don't want to have to always manually called .String() either because I'm trying to let the duck-typing system do it's work.</p>

<p>Thanks in advance!</p>

<p>-Ralph</p>
","<p>When calling <code>fmt.Println</code>, <code>myCar</code> is implicitly converted to a value of type <code>interface{}</code> as you can see from the function signature. The code from the <code>fmt</code> package then does a <a href=""http://golang.org/ref/spec#Switch_statements"">type switch</a> to figure out how to print this value, looking something like this:</p>

<pre><code>switch v := v.(type) {
case string:
    os.Stdout.WriteString(v)
case fmt.Stringer:
    os.Stdout.WriteString(v.String())
// ...
}
</code></pre>

<p>However, the <code>fmt.Stringer</code> case fails because <code>Car</code> doesn't implement <code>String</code> (as it is defined on <code>*Car</code>). Calling <code>String</code> manually works because the compiler sees that <code>String</code> needs a <code>*Car</code> and thus automatically converts <code>myCar.String()</code> to <code>(&amp;myCar).String()</code>. For anything regarding interfaces, you have to do it manually. So you either have to implement <code>String</code> on <code>Car</code> or always pass a pointer to <code>fmt.Println</code>:</p>

<pre><code>fmt.Println(&amp;myCar)
</code></pre>
","16978611"
"Golang parse a json with DYNAMIC key","8422","","<p>I have a json string as follows:</p>

<pre><code>j := `{""bvu62fu6dq"": {
           ""name"": ""john"",
           ""age"": 23,
           ""xyz"": ""weu33s""
           .....
           .....}
      }`
</code></pre>

<p>I want to extract the value of <code>name</code> and <code>age</code> from above json string. I looked at this example given at golang site <a href=""http://play.golang.org/p/YQgzP7KPp9"">http://play.golang.org/p/YQgzP7KPp9</a></p>

<p>But my problem is the key in the json on top level is dynamic. That means <code>bvu62fu6dq</code> is dynamic. I have created struct like this:</p>

<pre><code> type Info struct {
   UniqueID map[string]string
 }
</code></pre>

<p>But not sure how to extract <code>name</code> and <code>age</code>. My code is at <a href=""http://play.golang.org/p/Vbdkd3XIKc"">http://play.golang.org/p/Vbdkd3XIKc</a></p>
","<p>I believe you want something like this:</p>

<pre><code>type Person struct {
    Name string `json:""name""`
    Age  int    `json:""age""`
}

type Info map[string]Person
</code></pre>

<p>Then, after decoding this works:</p>

<pre><code>fmt.Printf(""%s: %d\n"", info[""bvu62fu6dq""].Name, info[""bvu62fu6dq""].Age)
</code></pre>

<p>Full example: <a href=""http://play.golang.org/p/FyH-cDp3Na"" rel=""noreferrer"">http://play.golang.org/p/FyH-cDp3Na</a></p>
","18412465"
"golang convert ""type []string"" to string","8418","","<p>I'm sure this is a simple question, but I keep bumping into this. I see others are as well. </p>

<p>I see some people create a <code>for</code> loop and run through the slice as to create a string, is there an easier way to convert a <code>[]string</code> to a <code>string</code>?</p>

<p>Will <code>sprintf</code> do it?</p>
","<p>You can use <code>strings.Join(arr []string, seperator string) string</code>, as in pretty much any other language I know</p>

<p><a href=""https://golang.org/pkg/strings/#Join"" rel=""noreferrer"">https://golang.org/pkg/strings/#Join</a></p>
","41756465"
"Golang: tests and working directory","8412","","<p>I'm writing some unit tests for my application in Go. The tests fail however because it cannot find the configuration files. Normally the binary looks for the configuration files in the working directory under the path <code>conf/*.conf</code>.</p>

<p>I figured that browsing to the directory that has <code>conf/</code> and running <code>go test</code> in it would solve it, but it still reports that the file system cannot find the path specified.</p>

<p>How can I tell <code>go test</code> to use a certain directory as the working directory so that the tests may actually be executed?</p>
","<p>I do not believe this is possible. I have not been able to find documentation stating this explicitly, but I believe <code>go test</code> always uses the package directory (containing the go source files) as the working directory.</p>
","23847429"
"Google App Engine Golang - how to get user's IP address?","8404","","<p>I want to integrate ReCAPTCHA to my GAE Golang web application. In order to verify a captcha, I need to get user's IP address. How can I fetch user's IP address from a form post?</p>
","<p>inside your handler function call r.RemoteAddr to receive ip:port</p>

<p>like this:</p>

<pre><code>func renderIndexPage(w http.ResponseWriter, r *http.Request) {
  ip := strings.Split(r.RemoteAddr,"":"")[0] 

}
</code></pre>

<p>update 02/15/2017
as <a href=""https://stackoverflow.com/a/21615321/1230414"">@Aigars Matulis</a> pointed out, in current version there is already a function todo this</p>

<pre><code>ip, _, _ := net.SplitHostPort(r.RemoteAddr)
</code></pre>
","17222252"
"GOPATH error in windows ""GOPATH entry is relative; must be absolute path: ""","8391","","<p>I am new to GO and getting an error when initializing GOPATH in windows. 
In my project folder is</p>

<p>C:\Users\kamin\Documents\pm-manager</p>

<p>and i am try to set path in environment variable (GOPATH)but it is getting an error 
go: GOPATH entry is relative; must be absolute path: "":/cygdrive/c/Users/kamin/Documents/pm-manager\r\r"".
Run 'go help gopath' for usage.</p>
","<p>Ran into same problem. Fix is quite simple: just specify the drive in front of the entire path name. The issue occurred because I was following the instructions on Go ""Getting Started"" page and set <code>GOPATH=%HOMEPATH%\Work</code> . The problem was that <code>%HOMEPATH%</code> was defined as a relative path (<code>\Users\MyName</code>), and so <code>GOPATH</code> now pointed to <code>\Users\MyName\Work</code> . All I needed to do was set <code>GOPATH=c:\Users\MyName\Work</code> and the error goes away.</p>
","36971792"
"Golang how to escape back ticks","8381","","<p>MySQL requires tables that shadow reserved words to be back ticked. I have a table Role which is a reserved word, but I have already put my query in back ticks so I can write it over multiple lines (this is a toy query, large ones will not fit on one line...).</p>

<p>How do I escape the back ticks?</p>

<p>Here is my code:</p>

<pre><code>dbmap := db.InitDb()

var roles []entities.Role
query :=
    ` &lt;&lt; Difficult to see with SO's code editor widget, but here is a back tick
SELECT *
FROM `Role` &lt;&lt;&lt; Needs escaping
`  &lt;&lt; Difficult to see, but here is a back tick

_, err := dbmap.Select(&amp;roles, query, nil)
if err != nil {
    panic(err)
}

fmt.Println(roles)
</code></pre>
","<p>You cannot escape backticks inside backticks, but you can do:</p>

<pre><code>dbmap := db.InitDb()

var roles []entities.Role
query := `
SELECT *
FROM ` + ""`Role`""

_, err := dbmap.Select(&amp;roles, query, nil)
if err != nil {
    panic(err)
}

fmt.Println(roles)
</code></pre>
","21199041"
"How do goroutines work? (or: goroutines and OS threads relation)","8376","","<p>How can other goroutines keep executing whilst invoking a syscall? (when using GOMAXPROCS=1)<br>
As far as I'm aware of, when invoking a syscall the thread gives up control until the syscall returns.
How can Go achieve this concurrency without creating a system thread per blocking-on-syscall goroutine?</p>

<p>From the <a href=""http://golang.org/doc/effective_go.html#goroutines"">documentation</a>:</p>

<blockquote>
  <p>Goroutines</p>
  
  <p>They're called goroutines because the existing terms—threads,
  coroutines, processes, and so on—convey inaccurate connotations. A
  goroutine has a simple model: it is a function executing concurrently
  with other goroutines in the same address space. It is lightweight,
  costing little more than the allocation of stack space. And the stacks
  start small, so they are cheap, and grow by allocating (and freeing)
  heap storage as required.</p>
  
  <p>Goroutines are multiplexed onto multiple OS threads so if one should
  block, such as while waiting for I/O, others continue to run. Their
  design hides many of the complexities of thread creation and
  management.</p>
</blockquote>
","<p>If a goroutine is blocking, the runtime will start a new OS thread to handle the other goroutines until the blocking one stops blocking.</p>

<p>Reference : <a href=""https://groups.google.com/forum/#!topic/golang-nuts/2IdA34yR8gQ"">https://groups.google.com/forum/#!topic/golang-nuts/2IdA34yR8gQ</a></p>
","24599790"
"Type cast custom types to base types","8372","","<p>How can I convert custom type to <code>interface{}</code> and then to base type (ex. <code>uint8</code>)?</p>

<p>I can't use direct cast like <code>uint16(val.(Year))</code> because I may not know all custom types, but I can determinate base types (<code>uint8</code>, <code>uint32</code>,...) in runtime</p>

<hr>

<p>There are many custom types (usually used as enums) based on numeric:</p>

<p>ex:</p>

<pre><code>type Year  uint16
type Day   uint8
type Month uint8
</code></pre>

<p>and so on...</p>

<p>The question is about type casting from <code>interface{}</code> to base types:</p>

<pre><code>package main

import ""fmt""

type Year uint16

// ....
//Many others custom types based on uint8

func AsUint16(val interface{}) uint16 {
    return val.(uint16) //FAIL:  cannot convert val (type interface {}) to type uint16: need type assertion
}

func AsUint16_2(val interface{}) uint16 {
    return uint16(val) //FAIL:   cannot convert val (type interface {}) to type uint16: need type assertion
}

func main() {
    fmt.Println(AsUint16_2(Year(2015)))
}
</code></pre>

<p><a href=""http://play.golang.org/p/cyAnzQ90At"">http://play.golang.org/p/cyAnzQ90At</a></p>
","<p>You can accomplish this by using the <a href=""https://godoc.org/reflect"" rel=""noreferrer""><code>reflect</code></a> package:</p>

<pre><code>package main

import ""fmt""
import ""reflect""

type Year uint16

func AsUint16(val interface{}) uint16 {
    ref := reflect.ValueOf(val)
    if ref.Kind() != reflect.Uint16 {
        return 0
    }
    return uint16(ref.Uint())
}

func main() {
    fmt.Println(AsUint16(Year(2015)))
}
</code></pre>

<p>Depending on your situation, you may want to return <code>(uint16, error)</code>, instead of returning the empty value.</p>

<p><a href=""https://play.golang.org/p/sYm1jTCMIf"" rel=""noreferrer"">https://play.golang.org/p/sYm1jTCMIf</a></p>
","30719144"
"Mapping an array to a file via Mmap in Go","8369","","<p>I'm trying to map an array to a file via Mmap, the array could be any type, like float64. In C, I find this <a href=""http://www.linuxquestions.org/questions/programming-9/mmap-tutorial-c-c-511265/"">one</a>. After  reading some texts, I wrote this <a href=""http://pastebin.com/DMmjUBev"">sample</a>. I don't know if it is correct, and it is not writing the values to the file. If I increase the size of array a lot, e.g from 1000 to 10000, it crashes. If someone know how to do that in the correctly way, please, tell me.</p>

<p>Thanks!</p>
","<p>For example, revising your sample program,</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
    ""syscall""
    ""unsafe""
)

func main() {
    const n = 1e3
    t := int(unsafe.Sizeof(0)) * n

    map_file, err := os.Create(""/tmp/test.dat"")
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
    _, err = map_file.Seek(int64(t-1), 0)
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
    _, err = map_file.Write([]byte("" ""))
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }

    mmap, err := syscall.Mmap(int(map_file.Fd()), 0, int(t), syscall.PROT_READ|syscall.PROT_WRITE, syscall.MAP_SHARED)
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
    map_array := (*[n]int)(unsafe.Pointer(&amp;mmap[0]))

    for i := 0; i &lt; n; i++ {
        map_array[i] = i * i
    }

    fmt.Println(*map_array)

    err = syscall.Munmap(mmap)
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
    err = map_file.Close()
    if err != nil {
        fmt.Println(err)
        os.Exit(1)
    }
}
</code></pre>
","9205079"
"Static Initialization in Go?","8362","","<p>I'm currently working on the Go Lang tutorial, but ran into problem with one of the exercises:</p>

<p><a href=""https://tour.golang.org/methods/23"" rel=""nofollow noreferrer"">https://tour.golang.org/methods/23</a></p>

<p>The exercise has me implement a ROT13 cipher. I decided to implement the cipher using a map from a byte to its rotated value but I'm not sure of the best way to initialize this map. I don't want to initialize the map using a literal, but would prefer to do it programmatically by looping through an alphabet and setting (key, value) pairs within the loop. I would also like the map to only be accessible from Rot13Reader struct/object and have all instances(?) share the same map (rather than one copy per Rot13Reader).</p>

<p>Here's my current working Go program:</p>

<pre><code>package main

import (
    ""io""
    ""os""
    ""strings""
)

type rot13Reader struct {
    r io.Reader
}

var rot13Map = map[byte]byte{}

func (rotr *rot13Reader) Read(p []byte) (int, error) {
    n, err := rotr.r.Read(p)
    for i := 0; i &lt; n; i++ {
        if sub := rot13Map[p[i]]; sub != byte(0) {
            p[i] = sub
        }
    }
    return n, err
}

func main() {
    func() {
        var uppers = []byte(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")
        var lowers = []byte(""abcdefghijklmnopqrstuvwxyz"")

        var init = func (alphabet []byte) {
            for i, char := range alphabet {
                rot13_i := (i + 13) % 26
                rot13Map[char] = alphabet[rot13_i]
            }
        }

        init(uppers)
        init(lowers)
    }()

    s := strings.NewReader(""Lbh penpxrq gur pbqr!"")
    r := rot13Reader{s}
    io.Copy(os.Stdout, &amp;r)
}
</code></pre>

<p>Here are the problems I have with this:</p>

<ul>
<li>I don't want to have to prepare <code>rot13Map</code> in <code>main()</code></li>
<li>I don't want <code>rot13Map</code> to be in global scope.</li>
<li>I don't want each copy of a <code>rot13Reader</code> to have a separate <code>rot13Map</code></li>
</ul>

<p>Is there a way to achieve what I want in Go?</p>
","<p>In order to do this, I would make a rot13 package. You can programmatically create the map in an init() function and provide it as a package level global to all your rot13 decoders. The init function runs when your package is imported.</p>

<p>Because Rot13Reader is the only type in the package, it is the only one able to access your map.</p>

<p>WARNING: All code untested.</p>

<pre><code>package rot13

import (
    ""io""
)

var rot13Map = map[byte]byte{}

func init() {
    var uppers = []byte(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")
    var lowers = []byte(""abcdefghijklmnopqrstuvwxyz"")

    var init = func(alphabet []byte) {
        for i, char := range alphabet {
            rot13_i := (i + 13) % 26
            rot13Map[char] = alphabet[rot13_i]
        }
    }

    init(uppers)
    init(lowers)
}

type Reader struct {
    r io.Reader
}

func (rotr Reader) Read(p []byte) (int, error) {
    n, err := rotr.r.Read(p)
    for i := 0; i &lt; n; i++ {
        if sub := rot13Map[p[i]]; sub != byte(0) {
            p[i] = sub
        }
    }
    return n, err
}
</code></pre>

<p>Obviously, you can't make another package in the go tour. You are stuck with rot13Map being accessible by main. You will need to run Go locally to get the separation you want.</p>
","16380953"
"How do I use fmt.Scanf in Go","8361","","<p>I seem to be having a queer problem while getting user input within a for loop in go. 
Here is my <a href=""http://play.golang.org/p/r2ViReKCrl"" rel=""nofollow"">code</a></p>

<pre><code>package main

import ""fmt""

func main() {
    var num int
    for i := 0; i &lt; 10; i++ {
        fmt.Printf(""Debug: i : %d "", i)
        fmt.Scanf(""%d"", &amp;num)
        fmt.Println(num)
    }
}
</code></pre>

<p>What happens when I run this code is this : </p>

<pre><code>Debug: i : 0
Enter next number
1
1
Debug: i : 1
Enter next number
1
Debug: i : 2
Enter next number
2
2
Debug: i : 3
Enter next number
2
Debug: i : 4
Enter next number
3
3
Debug: i : 5
Enter next number
3
Debug: i : 6
Enter next number
4
4
Debug: i : 7
Enter next number
4
Debug: i : 8
Enter next number
5
5
Debug: i : 9
Enter next number
5
</code></pre>

<p>What I notice is that each iteration of the loop happens twice, Could this be because Go is using parallelism by default and causing both processors to run the code within a for loop?  </p>
","<p>What OS are you using? Windows?</p>

<p>Try this:</p>

<pre><code>package main

import ""fmt""

func main() {
    var num int
    for i := 0; i &lt; 10; i++ {
        fmt.Printf(""Debug: i : %d\n"", i)
        fmt.Println(""Enter next number"")
        n, err := fmt.Scanf(""%d\n"", &amp;num)
        if err != nil {
            fmt.Println(n, err)
        }
        fmt.Println(num)
    }
}
</code></pre>

<p>Output:</p>

<pre><code>Debug: i : 0
Enter next number
1
1
Debug: i : 1
Enter next number
2
2
Debug: i : 2
Enter next number
3
3
Debug: i : 3
Enter next number
4
4
Debug: i : 4
Enter next number
5
5
Debug: i : 5
Enter next number
6
6
Debug: i : 6
Enter next number
7
7
Debug: i : 7
Enter next number
8
8
Debug: i : 8
Enter next number
9
9
Debug: i : 9
Enter next number
10
10
</code></pre>
","14000981"
"Reflect.Value.FieldByName causing Panic","8361","","<p>I'm getting the following error when calling the .FieldByName method of a reflected value, the exact error is :-</p>

<pre><code>panic: reflect: call of reflect.Value.FieldByName on ptr Value
</code></pre>

<p>and the code is :-</p>

<pre><code>s := reflect.ValueOf(&amp;value).Elem() (value is a struct)
metric := s.FieldByName(subval.Metric).Interface() (subval.Metric is a string)
</code></pre>

<p>I understand this isn't much, but this is all the information I can get.</p>

<p>Here's a link to the code on Go Playground: <a href=""http://play.golang.org/p/E038cPOoGp"" rel=""nofollow"">http://play.golang.org/p/E038cPOoGp</a></p>
","<p>Your <code>value</code> is already a pointer to a struct. Try printing out <code>s.Kind()</code> in your code.</p>

<p>There's no reason to take the address of <code>value</code>, then call <code>Elem()</code> on that <code>reflect.Value</code>, which dereferences the pointer you just created.</p>

<pre><code>s := reflect.ValueOf(value).Elem()
metric := s.FieldByName(subvalMetric).Interface()
fmt.Println(metric)
</code></pre>
","24537985"
"How to copy array into part of another in Go?","8338","","<p>I am new to Go, and would like to copy an array (slice) into part of another. For example, I have a largeArray [1000]byte or something and a smallArray [10]byte and I want the first 10 bytes of largeArray to be equal to the contents of smallArray. I have tried:</p>

<pre><code>largeArray[0:10] = smallArray[:]
</code></pre>

<p>But that doesn't seem to work. Is there a built-in memcpy-like function, or will I just have to write one myself?</p>

<p>Thanks!</p>
","<p>Use the <a href=""http://golang.org/doc/go_spec.html#Appending_and_copying_slices"" rel=""noreferrer"">copy</a> built-in function.</p>

<pre><code>package main

func main() {
    largeArray := make([]byte, 1000)
    smallArray := make([]byte, 10)
    copy(largeArray[0:10], smallArray[:])
}
</code></pre>
","7253254"
"Go Unmarshal nested JSON structure","8329","","<p>Go Unmarshal nested JSON structure</p>

<p><a href=""http://play.golang.org/p/f6ilWnWTjm"">http://play.golang.org/p/f6ilWnWTjm</a></p>

<p>I am trying to decode the following string but only getting null values.</p>

<p>How do I decode nested JSON structure in Go?</p>

<p>I want to convert the following to map data structure.</p>

<p>Please let me know.</p>

<pre><code>package main

import (
  ""encoding/json""
  ""fmt""
)

func main() {
  jStr := `
{
    ""AAA"": {
        ""assdfdff"": [""asdf""],
        ""fdsfa"": [""1231"", ""123""]
    }
}
`
  type Container struct {
    Key string `json:""AAA""`
  }
  var cont Container

  json.Unmarshal([]byte(jStr), &amp;cont)
  fmt.Println(cont)
}
</code></pre>
","<p>Use nested structs in Go to match the nested structure in JSON.</p>

<p>Here's one example of how to handle your example JSON:</p>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
    ""log""
)

func main() {
    jStr := `
    {
        ""AAA"": {
            ""assdfdff"": [""asdf""],
            ""fdsfa"": [""1231"", ""123""]
        }
    }
    `

    type Inner struct {
        Key2 []string `json:""assdfdff""`
        Key3 []string `json:""fdsfa""`
    }
    type Container struct {
        Key Inner `json:""AAA""`
    }
    var cont Container
    if err := json.Unmarshal([]byte(jStr), &amp;cont); err != nil {
        log.Fatal(err)
    }
    fmt.Printf(""%+v\n"", cont)
}
</code></pre>

<p><a href=""http://play.golang.org/p/bOWRZS6ntu"">playground link</a></p>

<p>You can also use an anonymous type for the inner struct:</p>

<pre><code>type Container struct {
    Key struct {
        Key2 []string `json:""assdfdff""`
        Key3 []string `json:""fdsfa""`
    }  `json:""AAA""`
}
</code></pre>

<p><a href=""http://play.golang.org/p/if3q2yfqzb"">playground link</a></p>

<p>or both the outer and inner structs:</p>

<pre><code>var cont struct {
    Key struct {
        Key2 []string `json:""assdfdff""`
        Key3 []string `json:""fdsfa""`
    } `json:""AAA""`
}
</code></pre>

<p><a href=""http://play.golang.org/p/aH2YbnXaWE"">playground link</a></p>

<p>If you don't know the field names in the inner structure, then use a map:</p>

<pre><code>type Container struct {
    Key map[string][]string `json:""AAA""`
}
</code></pre>

<p><a href=""http://play.golang.org/p/gwugHlCPLK"">http://play.golang.org/p/gwugHlCPLK</a></p>

<p>There are more options. Hopefully this gets you on the right track.</p>
","25966781"
"Golang blocking and non blocking","8326","","<p>I am somewhat confused over how Go handles non blocking IO.
API's mostly look synchronous to me, and when watching presentations on Go, its not uncommon to hear comments like ""and the call blocks""</p>

<p>Is Go using blocking IO when reading from files or network?
Or is there some kind of magic that re-writes the code when used from inside a Go Routine?</p>

<p>Coming from a C# background, this feels very non intuitive, in C# we have the <code>await</code> keyword when consuming async API's.
Which clearly communicates that the API can yield the current thread and continue later inside a continuation.</p>

<p>So TLDR;
Will Go block the current thread when doing IO inside a Go routine, or will it be transformed into a C# like async await state machine using continuations?</p>
","<p>Go has a scheduler that lets you write synchronous code, and does context switching on its own and uses async IO under the hood. So if you're running several goroutines, they might run on a single system thread, and when your code is blocking from the goroutine's view, it's not really blocking. It's not magic, but yes, it masks all this stuff from you.</p>

<p>The scheduler will allocate system threads when they're needed, and during operations that are really blocking (I think file IO is blocking for example, or calling C code). But if you're doing some simple http server, you can have thousands and thousands of goroutine using actually a handful of ""real threads"". </p>

<p>You can read more about the inner workings of Go here: </p>

<p><a href=""https://morsmachine.dk/go-scheduler"">https://morsmachine.dk/go-scheduler</a></p>
","36112564"
"How can I clear the terminal screen in Go?","8320","","<p>Are there any standard method in Golang to clear the terminal screen when I run a GO script? or I have to use some other libraries?</p>
","<p>You have to define a clear method for every different OS, like this. When the user's os is unsupported it panics</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
    ""os/exec""
    ""runtime""
    ""time""
)

var clear map[string]func() //create a map for storing clear funcs

func init() {
    clear = make(map[string]func()) //Initialize it
    clear[""linux""] = func() { 
        cmd := exec.Command(""clear"") //Linux example, its tested
        cmd.Stdout = os.Stdout
        cmd.Run()
    }
    clear[""windows""] = func() {
        cmd := exec.Command(""cmd"", ""/c"", ""cls"") //Windows example, its tested 
        cmd.Stdout = os.Stdout
        cmd.Run()
    }
}

func CallClear() {
    value, ok := clear[runtime.GOOS] //runtime.GOOS -&gt; linux, windows, darwin etc.
    if ok { //if we defined a clear func for that platform:
        value()  //we execute it
    } else { //unsupported platform
        panic(""Your platform is unsupported! I can't clear terminal screen :("")
    }
}

func main() {
    fmt.Println(""I will clean the screen in 2 seconds!"")
    time.Sleep(2 * time.Second)
    CallClear()
    fmt.Println(""I'm alone..."")
}
</code></pre>

<p>(the command execution is from @merosss' answer)</p>
","22896706"
"Postgres drop database error: pq: cannot drop the currently open database","8318","","<p>I'm trying to drop the database I'm currently connected to like so, but I'm getting this error:</p>

<pre><code>pq: cannot drop the currently open database
</code></pre>

<p>I don't really understand how I'm expected to drop the database if I have to close my connection, because then I don't think I will be able to use dbConn.Exec to execute my DROP DATABASE statement?</p>

<pre><code>dbConn *sql.DB

func stuff() error {
  _, err := dbConn.Exec(fmt.Sprintf(`DROP DATABASE %s;`, dbName))
  if err != nil {
    return err
  }

  return dbConn.Close()
}
</code></pre>

<p>I guess I could connect to a different database and then execute it on that connection, but I'm not even sure if that'd work, and it seems really weird to have to connect to a new database just to drop a different database. Any ideas? Thanks.</p>
","<p>Because, you are trying to execute <code>dropDb</code> command on database, to which you have open connection.</p>

<p>According to postgres documentation:</p>

<blockquote>
  <p>You cannot be connected to the database you are about to remove. Instead, connect to template1 or any other database and run this command again.</p>
</blockquote>

<p>This makes sense, because when you drop the entire database, all the open connection referencing to that database becomes invalid, So the recommended approach is to connect to different database, and execute this command again.</p>

<p>If you are facing a situation, where a different client is connected to the database, and you really want to drop the database, you can forcibly disconnect all the client from that particular database.</p>

<p>For example, to forcibly disconnect all clients from database <code>mydb</code>:</p>

<p><code>SELECT pg_terminate_backend(procpid) FROM pg_stat_activity WHERE datname = 'mydb';</code></p>

<p><strong>Note:</strong> This command requires superuser privileges.</p>

<p>Then, you can connect to different database, and run <code>dropDb</code> command again.</p>
","36503031"
"How to slice a string using a delimiter","8298","","<p>In Go, if I have a string variable s:</p>

<pre><code>var s string = ""a,b,c,d,e""
</code></pre>

<p>How can I convert or split or explode it into a slice or an array of strings so that it will become:</p>

<pre><code>arr[0] = ""a""
...
arr[4] = ""e""
</code></pre>
","<p>You should use the <code>strings</code> package for that.</p>

<pre><code>stringSlice := strings.Split(s, "","")
</code></pre>

<p><a href=""http://play.golang.org/p/UKZbcuJUPP"">http://play.golang.org/p/UKZbcuJUPP</a></p>
","14263778"
"golang - how to sort string or []byte?","8274","","<p>Some function can sort string or []byte: </p>

<pre><code>""bcad"" to ""abcd""
or
[]byte(""bcad"") to []byte(""abcd"")
</code></pre>

<p>The string only letters. </p>

<p>if letters and number?</p>

<p>I found sort package but not a function a want.</p>

<p>Thanks.</p>
","<p>It feels wasteful to create a string for each character just to <code>Join</code> them.</p>

<p>Here's one that is a little less wasteful, but with more boiler plate. <a href=""http://play.golang.org/p/XEckr_rpr8"" rel=""noreferrer"">playground://XEckr_rpr8</a></p>

<pre><code>type sortRunes []rune

func (s sortRunes) Less(i, j int) bool {
    return s[i] &lt; s[j]
}

func (s sortRunes) Swap(i, j int) {
    s[i], s[j] = s[j], s[i]
}

func (s sortRunes) Len() int {
    return len(s)
}

func SortString(s string) string {
    r := []rune(s)
    sort.Sort(sortRunes(r))
    return string(r)
}

func main() {
    w1 := ""bcad""
    w2 := SortString(w1)

    fmt.Println(w1)
    fmt.Println(w2)
}
</code></pre>
","22698017"
"Can Go's `flag` package print usage?","8271","","<p>Is it possible for me to customize Go's <code>flag</code> package so that it prints a custom usage string? I have an application with current output</p>

<pre><code>Usage of ./mysqlcsvdump:
  -compress-file=false: whether compress connection or not
  -hostname="""": database host
  -outdir="""": where output will be stored
  -password="""": database password
  -port=3306: database port
  -single-transaction=true: whether to wrap everything in a transaction or not.
  -skip-header=false: whether column header should be included or not
  -user=""root"": database user
</code></pre>

<p>and would rather have something like</p>

<pre><code>Usage: ./mysqlcsvdump [options] [table1 table2 ... tableN]

Parameters:
  -compress-file=false: whether compress connection or not
  -hostname="""": database host
  -outdir="""": where output will be stored
  -password="""": database password
  -port=3306: database port
  -single-transaction=true: whether to wrap everything in a transaction or not.
  -skip-header=false: whether column header should be included or not
  -user=""root"": database user
</code></pre>
","<p>Yes, you can do that by modifying <a href=""http://golang.org/pkg/flag/#pkg-variables""><code>flag.Usage</code></a>:</p>

<blockquote>
<pre><code>var Usage = func() {
        fmt.Fprintf(os.Stderr, ""Usage of %s:\n"", os.Args[0])
        PrintDefaults()
}
</code></pre>
  
  <p>Usage prints to standard error a usage message documenting all defined
  command-line flags. The function is a variable that may be changed to
  point to a custom function.</p>
</blockquote>

<p>Example use from outside of <code>flag</code>:</p>

<pre><code>flag.Usage = func() {
    fmt.Fprintf(os.Stderr, ""This is not helpful.\n"")
}
</code></pre>
","23726033"
"Check if a process exists in go way","8267","","<p>If I have the PID of a process, is <a href=""http://godoc.org/os#FindProcess"" rel=""noreferrer"">os.FindProcess</a> enough to test for the existing of the process? I mean if it returns <code>err</code> can I assume that it's terminated (or killed)?</p>

<p>Edit:</p>

<p>I've just wrote a wrapper function around <code>kill -s 0</code> (old-style bash process testing). This works without any problem, but I'm still happy if there is other solutions (done with go libraries) to this problem.:</p>

<pre><code>func checkPid(pid int) bool {
    out, err := exec.Command(""kill"", ""-s"", ""0"", strconv.Itoa(pid)).CombinedOutput()
    if err != nil {
        log.Println(err)
    }

    if string(out) == """" {
        return true // pid exist
    }
    return false
}
</code></pre>
","<p>Here is the traditional unix way to see if a process is alive - send it a signal of 0 (like you did with your bash example).</p>

<p>From <code>kill(2)</code>:</p>

<blockquote>
<pre><code>   If  sig  is 0, then no signal is sent, but error checking is still per‐
   formed; this can be used to check for the existence of a process ID  or
   process group ID.
</code></pre>
</blockquote>

<p>And translated into Go</p>

<pre><code>package main

import (
    ""fmt""
    ""log""
    ""os""
    ""strconv""
    ""syscall""
)

func main() {
    for _, p := range os.Args[1:] {
        pid, err := strconv.ParseInt(p, 10, 64)
        if err != nil {
            log.Fatal(err)
        }
        process, err := os.FindProcess(int(pid))
        if err != nil {
            fmt.Printf(""Failed to find process: %s\n"", err)
        } else {
            err := process.Signal(syscall.Signal(0))
            fmt.Printf(""process.Signal on pid %d returned: %v\n"", pid, err)
        }

    }
}
</code></pre>

<p>When you run it you get this, showing that process 123 is dead, process 1 is alive but not owned by you and process 12606 is alive and owned by you.</p>

<pre><code>$ ./kill 1 $$ 123
process.Signal on pid 1 returned: operation not permitted
process.Signal on pid 12606 returned: &lt;nil&gt;
process.Signal on pid 123 returned: no such process
</code></pre>
","15210305"
"What could happen if I don't close response.Body in golang?","8263","","<p>In golang I have some http responses and I sometimes forget to call: </p>

<pre><code>resp.Body.Close()
</code></pre>

<p>What happens in this case? will there be a memory leak? Also is it safe to put in <code>defer resp.Body.Close()</code> immediately after getting the response object?</p>

<pre><code>client := http.DefaultClient
resp, err := client.Do(req)
defer resp.Body.Close()
if err != nil {
    return nil, err
}
</code></pre>

<p>What if there is an error, could <code>resp</code> or <code>resp.Body</code> be nil? </p>
","<blockquote>
  <p>What happens in this case? will there be a memory leak? </p>
</blockquote>

<p>It's a resource leak. The connection can remain open, in which case the file descriptor won't be freed. </p>

<blockquote>
  <p>Also is it safe to put in defer resp.Body.Close() immediately after getting the response object?</p>
</blockquote>

<p>No, follow the example provided in the documentation and close it immediately after checking the error. </p>

<pre><code>client := http.DefaultClient
resp, err := client.Do(req)
if err != nil {
    return nil, err
}
defer resp.Body.Close()
</code></pre>

<p>From the <code>http.Client</code> documentation:</p>

<blockquote>
  <p>On error, any Response can be ignored. A non-nil Response with a non-nil error only occurs when CheckRedirect fails, and even then the returned Response.Body is already closed.</p>
</blockquote>
","33238755"
"In Go, how do I create a ""constructor"" for a type with a string base type?","8253","","<p>trying to have a type <code>Char</code> that is a <code>string</code> one character long.  what I'm unable to do is create a ""constructor"".  I know I'm missing something completely obvious.</p>

<p>declare the <code>Char</code> type</p>

<pre>
  type Char string
</pre>

<p>can use that type with a declaration</p>

<pre>
  var c1 Char(""abc"")
  var c2 Char = ""abc""
</pre>

<p>these are wrong:  <code>c1</code> and <code>c2</code> need to be ""a"", not ""abc""</p>

<p>what I really want is a ""constructor"" to limit Char to one character</p>

<pre>
 func Char( s string ) Char {
   var ch string = s[0]
   return ch
 }
</pre>

<p>of course having the <code>type Char</code> and <code>func Char</code> is not the way to do it</p>

<pre>
 type.go:8: Char redeclared in this block
</pre>

<p>is there any way for to force <code>type</code> initialization through a constructor?  or am I even asking the correct question?</p>

<p>let me state differently: if the user says <code>var c Char = ""abc""</code> they will have an invalid value for type <code>Char</code> - is there any way to force the user into <code>func NewChar(string) Char</code> as <code>Char</code>'s only valid constructor?</p>
","<p>This is the <code>char</code> package. Note the unexported <code>Char</code> <code>struct</code> field <code>c</code>.</p>

<pre><code>package char

type Char struct {
    c rune
}

func New(c rune) *Char {
    return &amp;Char{c}
}

func (c *Char) Char() rune {
    return c.c
}

func (c *Char) String() string {
    return string(c.c)
}
</code></pre>

<p>Here's an example of how to use the <code>char</code> package.</p>

<pre><code>package main

import (
    ""char""
    ""fmt""
)

func main() {
    var c = char.New('z')
    var d = c.Char()
    hello := ""Hello, world; or สวัสดีชาวโลก""
    h := []rune(hello)
    ก := char.New(h[len(h)-1])
    fmt.Println(c, ""a-""+c.String(), '0' &lt;= d &amp;&amp; d &lt;= '9', ก)
}
</code></pre>

<p>Output:</p>

<pre><code>z a-z false ก
</code></pre>
","6424425"
"Tool to convert (translate) C to Go?","8229","","<p>What tool to use to convert C source code into Go source code?</p>

<p>For example, if the C code contains:</p>

<pre><code>struct Node {
    struct Node *left, *right;
    void        *data;
};

char charAt(char *s, int i) {
    return s[i];
}
</code></pre>

<p>the corresponding Go code generated by the tool should be:</p>

<pre><code>type Node struct {
    left, right *Node
    data        interface{}
}

func charAt(s string, i int) byte {
    return s[i]
}
</code></pre>

<p>The tool does not need to be perfect. It is OK if some parts of the generated Go code need to be corrected by hand.</p>
","<p>I guess no such (C to Go source code conversion) tool exist today. You might consider to make your own converter. The question becomes: is it worth it, and how to do that?</p>

<p>It probably might not be worth the effort, because Go and C could be somehow interoperable. For example, if you use the  GCC 4.6 (or to be released 4.7, i.e. the latest snapshot) your probably can link C &amp; Go code together, with some care.</p>

<p><sup>Of course, as usual, the evil is in the details.</sup></p>

<p>If you want a converter, do you want the obtained Go code to be readable and editable (then the task is more difficult, since you want to keep the structure of the code, and you also want to keep the comments)? In that case, you probably need your own C parser (and it is a difficult task).</p>

<p>If you don't care about readability of the generated Go code, you could for example extend an existing compiler to do the work. For example, GCC is extensible thru plugins or thru <a href=""http://gcc-melt.org/"" rel=""nofollow"">MELT</a> extensions, and you could customize GCC (with MELT, or your own C plugin for GCC) to transform Gimple representation (the main internal representation for instructions inside GCC) to unreadable Go code. This is somehow simpler (but still require more than a week of work).</p>

<p>Of course, Go interfaces, channels and even memory management (garbage collected memory) has no standard C counterpart.</p>
","8789146"
"Which is the nicer way to initialize a map in Golang?","8229","","<p>As <code>map</code> is a reference type. What is difference between:?</p>

<pre><code>m := make(map[string]int32)
</code></pre>

<p>and</p>

<pre><code>m := map[string]int32{}
</code></pre>
","<p>One allows you to initialize capacity, one allows you to initialize values:</p>

<pre><code>// Initializes a map with space for 15 items
m := make(map[string]int32, 15)
</code></pre>

<p>vs</p>

<pre><code>// Initializes a map with an entry relating the name ""bob"" to the number 5
m := map[string]int{""bob"": 5} 
</code></pre>

<p>For an empty map with capacity 0, they're the same and it's just preference.</p>
","31064737"
"Stick with PHP or learn Go-lang?","8226","","<p>I have learned in my University time <code>Pascal</code> and <code>C</code> and <code>RedHat Linux/Unix</code> . </p>

<p>To get quickly one job, i started learning <code>Microsoft Visual Basic 6.0</code> for speed in development etc. In that time, with C its like more time consuming and i was not confident to use it for job purpose, where most of the companies demand fast/rapid development.</p>

<p>After that i had problems with my companies because they want web applications, then i started using PHP which is also great, because customers demand web projects and they expect Google like applications in short time frame, which is doable because PHP gives that speed and its huge community.</p>

<p>To explain my need for Go-lang is following:</p>

<ul>
<li>PHP the syntax is friendly compared to C/Pascal. </li>
<li><p>I was very happy to learn Python, but its syntax is very much different then C. 
Which just  not gonna work with me to accept and really learn it better and better. </p></li>
<li><p>I have tried to learn Ruby, at-least so that i can have the knowledge of Python 
like syntax, but i really skipped Ruby because of 2x time slower then PHP</p></li>
</ul>

<p>Therefore, </p>

<p>Is Go-lang is the perfect choice for SPEED vs PHP vs Ruby, for Web development + Gtk?</p>
","<p>Alas, I'd love to have 1 asset that I could use for all conditions but it's just not available in the world of computing. You're going to have to learn 2 or more.</p>

<p>PHP is very widely used, so you might as well stick with it. If you can create decent webapps using it, go for it. I would suggest learning C/C++ too so you can write any high-performance modules using that and call them from your PHP code. That's probably the best of all worlds for your webapps.</p>

<p>If you wanted to write for desktops, I think you'll be best off learning C++ with Qt (and look at Wt) (as it appears you're a Linux dev), or C#/VB.NET for Windows. </p>

<p>For mobiles, learn C/C++ as you can write apps in that no matter which platform even if you have to put up with some platform-dependant extensions - you either have to learn Java for Android, Objective-C for iOS, or (well we're not quite sure what MS has planned for Windows Phone 8, but I hear they like native code again, that means C++/CX). You can see where I'm going with this!</p>

<p>so anyway, if you're happy with PHP then keep with it. There is a ton of code out there that runs PHP so it's not like you're working with some bleeding-edge or hardly-used obscure language.</p>
","9241134"
"Go - convert string which represent binary number into int","8215","","<p>I wrote a stupid solution for this, any better recipe?
As you can see lots of useless conversions there.</p>

<pre><code>package main

import (
    ""fmt""
    ""strconv""
    ""math""
)

func conv(str string) int {
    l := len(str)
    result := 0.0
    for i,n := range str {
        number,_ := strconv.Atof64(string(n))
        result += math.Exp2(float64(l-i-1))*number
    }
    return int(result)
}

func main() {
    fmt.Println(conv(""1001""))
}
</code></pre>
","<p>If you're using the current Go release (release.r60.3), you want the <a href=""http://golang.org/pkg/strconv/#Btoi64"" rel=""noreferrer""><code>strconv.Btoi64()</code></a> function, which converts from an arbitrary base.</p>

<pre><code>package main

import (
    ""fmt""
    ""strconv""
)

func main() {
    if i, err := strconv.Btoi64(""1001"", 2); err != nil {
        fmt.Println(err)
    } else {
        fmt.Println(i)
    }
}
</code></pre>

<hr>

<p>If you're using Go 1, you want the <code>strconv.ParseInt()</code> function, which converts from an arbitrary base, into a given bit size.</p>

<pre><code>package main

import (
    ""fmt""
    ""strconv""
)

func main() {
    if i, err := strconv.ParseInt(""1001"", 2, 64); err != nil {
        fmt.Println(err)
    } else {
        fmt.Println(i)
    }
}
</code></pre>
","9271589"
"Add days to date in Go","8196","","<p>I'm trying to add a number of days (actually a number of weeks) to an existing date in Go. I have tried 
<code>myDate.Add(time.Hour * 24 * 7 * weeksToAdd)</code></p>

<p>But I get an error when I try to build: <code>invalid operation: time.Hour * startAdd (mismatched types time.Duration and float64)</code></p>

<p>So <code>weeksToAdd</code> is currently a <code>float64</code>, but I can change it to an int or whatever. Changing it to an int only changed my error to say that <code>int</code> and <code>Duration</code> can't be multiplied.</p>

<p>How do I add days to a date?</p>
","<p>Use <a href=""https://golang.org/pkg/time/#Time.AddDate""><code>Time.AddDate()</code></a>:</p>

<pre><code>myDate.AddDate(0, 0, 7 * weeksToAdd)
</code></pre>
","32998966"
"How to link GOPATH to LiteIDE?","8187","","<p>I've installed LiteIde and exported <code>GOROOT</code> and <code>GOPATH</code> in my <code>.bashrc</code>. When I use LiteIDE, the auto-completion works just fine, but it can't build/run my code. When I look at 'Manage GOPATH', the System GOPATH box is empty, and I can't type into it either.</p>

<p>Looking up online, the solution seems to be - 'link' the <code>GOPATH</code> and LiteIDE. How do I 'link' the two?</p>
","<p>Select the correct environment for you system from the drop-down:</p>

<p><img src=""https://i.stack.imgur.com/d3hKs.png"" alt=""enter image description here""></p>

<p>For example, if you're on a Mac and used the package installer it would be ""darwin64-local"" on a 64 bit Mac.</p>

<p>Then click on the ""Go"" folder icon on the left of the drop-down.</p>

<p><img src=""https://i.stack.imgur.com/VNfuM.png"" alt=""enter image description here""></p>

<p>Click ""Add Directory..."" and add a folder path that contains <code>src</code>, <code>pkg</code>, and <code>bin</code> folders. Essentially what you set <code>GOPATH</code> to.</p>

<p>Make sure you <strong>do not</strong> set GOROOT in <code>.bashrc</code> at all. <a href=""http://dave.cheney.net/2013/06/14/you-dont-need-to-set-goroot-really"">You don't need to set GOROOT, really</a>.</p>
","18166659"
"Idiomatically buffer os.Stdout","8175","","<p>os.Stdout.Write() is an unbuffered write.  To get a buffered write, one can use:</p>

<pre><code>f := bufio.NewWriter(os.Stdout)
f.Write(b)
</code></pre>

<p>Is there a more idiomatic way to get buffered output?</p>
","<p>No, that is the most idiomatic way to buffer writes to Stdout. In many cases, you will want to do also add a defer:</p>

<pre><code>f := bufio.NewWriter(os.Stdout)
defer f.Flush()
f.Write(b)
</code></pre>

<p>This will ensure that the buffer is flushed when you return from the function.</p>
","13422464"
"Understanding goroutines","8170","","<p>I'm trying to understand concurrency in Go.  In particular, I wrote this thread-unsafe program:</p>

<pre class=""lang-go prettyprint-override""><code>package main

import ""fmt""

var x = 1

func inc_x() { //test
  for {
    x += 1
  }
}

func main() {
  go inc_x()
  for {
    fmt.Println(x)
  }
}
</code></pre>

<p>I recognize that I should be using channels to prevent race conditions with <code>x</code>, but that's not the point here.  The program prints <code>1</code> and then seems to loop forever (without printing anything more).  I would expect it to print an infinite list of numbers, possibly skipping some and repeating others due to the race condition (or worse -- printing the number while it is being updated in <code>inc_x</code>).</p>

<p>My question is:  Why does the program only print one line?</p>

<p>Just to be clear:  I'm not using channels on purpose for this toy example.</p>
","<p>There are a few things to keep in mind about Go's goroutines.</p>

<ol>
<li>They are not threads in the sense of Java's or C++ threads.

<ol>
<li>They are more like greenlets.</li>
</ol></li>
<li>The go runtime multiplexes the goroutines across the system threads

<ol>
<li>The number of system threads is controlled by an environment variable GOMAXPROCS and defaults to 1 currently I think. This may change in the future.</li>
</ol></li>
<li>The way goroutines yield back to their current thread is controlled by several different constructs.

<ol>
<li>The select statement can yield control back to the thread.</li>
<li>sending on a channel can yield control back to the thread.</li>
<li>Doing IO operations can yield control back to the thread.</li>
<li>runtime.Gosched() explicitly yields control back to the thread.</li>
</ol></li>
</ol>

<p>The behavior you are seeing is because the main function never yields back to the thread and is instead involved in a busy loop and since there is only one thread the main loop has no place to run.</p>
","10096686"
"Golang bad file descriptor","8168","","<p>I am getting a bad file descriptor when trying to append to a logging file within my go routine. </p>

<p><code>write ./log.log: bad file descriptor</code></p>

<p>The file exists and has 666 for permissions. At first I thought well maybe it is because each one of them is trying to open the file at the same time. I implemented a mutex to try and avoid that but got the same issue so I removed it. </p>

<pre><code>logCh := make(chan string, 150)
go func() {
    for {
        msg, ok := &lt;-logCh
        if ok {
            if f, err := os.OpenFile(""./log.log"", os.O_APPEND, os.ModeAppend); err != nil {
                panic(err)
            } else {
                logTime := time.Now().Format(time.RFC3339)
                if _, err := f.WriteString(logTime + "" - "" + msg); err != nil {
                    fmt.Print(err)
                }
                f.Close()
            }
        } else {
            fmt.Print(""Channel closed! \n"")
            break
        }
    }
}()
</code></pre>
","<p>You need to add the <code>O_WRONLY</code> flag :</p>

<pre><code>if f, err := os.OpenFile(""./log.log"", os.O_APPEND|os.O_WRONLY, os.ModeAppend); err != nil { /*[...]*/ }
</code></pre>

<p>To explain, here is the linux documentation for open: <a href=""http://man7.org/linux/man-pages/man2/openat.2.html"">http://man7.org/linux/man-pages/man2/openat.2.html</a> :</p>

<blockquote>
  <p>The argument flags must include one of the following access modes:
         O_RDONLY, O_WRONLY, or O_RDWR.  These request opening the file read-
         only, write-only, or read/write, respectively.</p>
</blockquote>

<p>If you check /usr/local/go/src/syscall/zerrors_linux_amd64.go:660, you can see that:</p>

<pre><code>O_RDONLY                         = 0x0
O_RDWR                           = 0x2
O_WRONLY                         = 0x1
</code></pre>

<p>So by default you get a read-only file descriptor.</p>
","33852107"
"Remove invalid UTF-8 characters from a string (Go lang)","8159","","<p>I get this on json.Marshal of a list of strings:</p>

<pre><code>json: invalid UTF-8 in string: ""...ole\xc5\""
</code></pre>

<p>The reason is obvious, but how can I delete/replace such strings in Go? I've been reading docst on <code>unicode</code> and <code>unicode/utf8</code> packages and there seems no obvious/quick way to do it.</p>

<p>In Python for example you have methods for it where the invalid characters can be deleted, replaced by a specified character or strict setting which raises exception on invalid chars. How can I do equivalent thing in Go?</p>

<p>UPDATE: I meant the reason for getting an exception (panic?) - illegal char in what json.Marshal expects to be valid UTF-8 string.</p>

<p>(how the illegal byte sequence got into that string is not important, the usual way - bugs, file corruption, other programs that do not conform to unicode, etc)</p>
","<p>For example,</p>

<pre><code>package main

import (
    ""fmt""
    ""unicode/utf8""
)

func main() {
    s := ""a\xc5z""
    fmt.Printf(""%q\n"", s)
    if !utf8.ValidString(s) {
        v := make([]rune, 0, len(s))
        for i, r := range s {
            if r == utf8.RuneError {
                _, size := utf8.DecodeRuneInString(s[i:])
                if size == 1 {
                    continue
                }
            }
            v = append(v, r)
        }
        s = string(v)
    }
    fmt.Printf(""%q\n"", s)
}
</code></pre>

<p>Output:</p>

<pre><code>""a\xc5z""
""az""
</code></pre>

<blockquote>
  <p><a href=""http://unicode.org/"">Unicode Standard</a></p>
  
  <p><a href=""http://www.unicode.org/faq/utf_bom.html"">FAQ - UTF-8, UTF-16, UTF-32 &amp; BOM</a></p>
  
  <p>Q: Are there any byte sequences that are not generated by a UTF? How
  should I interpret them?</p>
  
  <p>A: None of the UTFs can generate every arbitrary byte sequence. For
  example, in UTF-8 every byte of the form 110xxxxx2 must be followed
  with a byte of the form 10xxxxxx2. A sequence such as &lt;110xxxxx2
  0xxxxxxx2> is illegal, and must never be generated. When faced with
  this illegal byte sequence while transforming or interpreting, a UTF-8
  conformant process must treat the first byte 110xxxxx2 as an illegal
  termination error: for example, either signaling an error, filtering
  the byte out, or representing the byte with a marker such as FFFD
  (REPLACEMENT CHARACTER). In the latter two cases, it will continue
  processing at the second byte 0xxxxxxx2.</p>
  
  <p>A conformant process must not interpret illegal or ill-formed byte
  sequences as characters, however, it may take error recovery actions.
  No conformant process  may use irregular byte sequences to encode
  out-of-band information.</p>
</blockquote>
","20403220"
"Wait for the termination of n goroutines","8158","","<p>I need to start a huge amount of goroutines and wait for their termination. The intuitive way seems to use a channel to wait till all of them are finished :</p>

<pre><code>package main

type Object struct {
    //data
}

func (obj *Object) Update(channel chan int) {
    //update data
    channel &lt;- 1
    return
}

func main() {

    channel := make(chan int, n)
    list := make([]Object, n, m)
    for {
        for _, object := range list {
            go object.Update(channel)
        }
        for i := 0; i &lt; n; i++ {
            &lt;-channel
        }
        //now everything has been updated. start again
    }
}
</code></pre>

<p>But the problem is that the amount of objects and therefore the amount of goroutines could change. Is it possible to change the buffer size of a channel ?</p>

<p>Is there maybe a more elegant way to do this ?</p>
","<p>I've used <a href=""http://golang.org/pkg/sync/#WaitGroup"">WaitGroup</a> as a solution to this problem. Translating your current code, with some logs to make it clear what's happening:</p>

<pre><code>package main

import ""sync""
import ""fmt""
import ""time""

type Object struct {
    //data
}

func (obj *Object) Update(wg *sync.WaitGroup) {
    //update data
    time.Sleep(time.Second)
    fmt.Println(""Update done"")
    wg.Done()
    return
}

func main() {
    var wg sync.WaitGroup
    list := make([]Object, 5)
    for {
        for _, object := range list {
            wg.Add(1)
            go object.Update(&amp;wg)
        }
        //now everything has been updated. start again
        wg.Wait()
        fmt.Println(""Group done"")
    }
}
</code></pre>
","16591197"
"How to calculate sha256 file checksum in Go","8152","","<p>I need utility for Windows that calculates sha256 file checksum so that when I download
fedora I can verify checksum from here: <a href=""https://fedoraproject.org/static/checksums/Fedora-18-i386-CHECKSUM"" rel=""noreferrer"">https://fedoraproject.org/static/checksums/Fedora-18-i386-CHECKSUM</a></p>

<p>Microsoft utility from <a href=""http://support.microsoft.com/kb/889768"" rel=""noreferrer"">http://support.microsoft.com/kb/889768</a> does only md5 and sha1.</p>

<p>I don't want to use other downloadable tools that are not signed and not available from https or from sources that I don't know about, because it does not make any sense to download unsigned code over unencrypted connection or from untrusted source to verify signature of another code to trust it.</p>

<p>Luckily google provides possibility to use https for all downloads so I can download Go over secure connection and start from there.</p>

<p>Here is simple code that does that for a small file, but it's not very good for big files because it's not streaming.</p>

<pre><code>package main

import (
    ""io/ioutil""
    ""crypto/sha256""
    ""os""
    ""log""
    ""encoding/hex""
)

func main() {
    hasher := sha256.New()
    s, err := ioutil.ReadFile(os.Args[1])    
    hasher.Write(s)
    if err != nil {
        log.Fatal(err)
    }

    os.Stdout.WriteString(hex.EncodeToString(hasher.Sum(nil)))
}
</code></pre>

<p>How to make it to use streams so that it works on any file size.</p>
","<p>The SHA256 hasher implements the <code>io.Writer</code> interface, so one option would be to use the <code>io.Copy()</code> function to copy the data from an appropriate <code>io.Reader</code> in blocks.  Something like this should do:</p>

<pre><code>f, err := os.Open(os.Args[1])
if err != nil {
    log.Fatal(err)
}
defer f.Close()
if _, err := io.Copy(hasher, f); err != nil {
    log.Fatal(err)
}
</code></pre>
","15892717"
"Override the layout used by json.Marshal to format time.Time","8152","","<p>In Golang, is there a way to make the generic <code>encoding/json</code> Marshal to use a different layout when Marshaling the <code>time.Time</code> fields?</p>

<p>Basically I have this struct:</p>

<pre><code>s := {""starttime"":time.Now(), ""name"":""ali""}
</code></pre>

<p>and I want to encoding to json using <code>encdoding/json</code>'s <code>Marshal</code> function, but I want to use my custom layout, I imagine somewhere <code>time.Format(layout)</code> is being called, I want to control that layout,</p>
","<p>As inspired by zeebo's answer and hashed out in the comments to that answer:</p>

<p><a href=""http://play.golang.org/p/pUCBUgrjZC"" rel=""noreferrer"">http://play.golang.org/p/pUCBUgrjZC</a></p>

<pre><code>package main

import ""fmt""
import ""time""
import ""encoding/json""

type jsonTime struct {
    time.Time
    f string
}

func (j jsonTime) format() string {
    return j.Time.Format(j.f)
}

func (j jsonTime) MarshalText() ([]byte, error) {
    return []byte(j.format()), nil
}

func (j jsonTime) MarshalJSON() ([]byte, error) {
    return []byte(`""` + j.format() + `""`), nil
}

func main() {
    jt := jsonTime{time.Now(), time.Kitchen}
    if jt.Before(time.Now().AddDate(0, 0, 1)) { // 1
        x := map[string]interface{}{
            ""foo"": jt,
            ""bar"": ""baz"",
        }
        data, err := json.Marshal(x)
        if err != nil {
            panic(err)
        }
        fmt.Printf(""%s"", data)
    }
}
</code></pre>

<p>This solution <a href=""http://golang.org/ref/spec#Struct_types"" rel=""noreferrer"">embeds</a> the time.Time into the jsonTime struct. Embedding promotes all of time.Time's methods to the jsonTime struct, allowing their use without explicit type conversion (see // 1).</p>

<p>Embedding a time.Time has the downside of also promoting the MarshalJSON method, which the encoding/json marshaling code prioritizes higher than the MarshalText method for backwards compatibility reasons (<a href=""http://golang.org/doc/go1.2#encoding"" rel=""noreferrer"">MarshalText was added in Go 1.2</a>, MarshalJSON predates that). As a result the default time.Time format is used instead of a custom format provided by MarshalText.</p>

<p>To overcome this problem we override MarshalJSON for the jsonTime struct.</p>
","20510912"
"math.Mod in Go returns integer part instead of floating-point remainder","8120","","<p>Golang's <strong>math.Mod(10, 4)</strong> returns 2 -- ie. the integer part of division result 2.5 -- but shouldn't it be ""the floating point remainder"", that is, 0.5?</p>
","<p>The result is correct. <a href=""https://golang.org/pkg/math/#Mod"" rel=""noreferrer"">math.Mod</a> returns the remainder, which really is 2 in this case. It's equivalent to the % operator, but for floating point numbers.</p>
","10650169"
"Whats a good best practice with Go workspaces?","8115","","<p>I'm just getting into learning Go, and reading through existing code to learn ""how others are doing it"". In doing so, the use of a go ""workspace"", especially as it relates to a project's dependencies, seems to be all over the place.</p>

<p>What (or is there) a common best practice around using a single or multiple Go workspaces (i.e. definitions of $GOPATH) while working on various Go projects? Should I be expecting to have a single Go workspace that's sort of like a central repository of code for all my projects, or explicitly break it up and set up $GOPATH as I go to work on each of these projects (kind of like a python virtualenv)?</p>
","<p>I used to use multiple GOPATHs -- dozens, in fact. Switching between projects and maintaining the dependencies was a lot harder, because pulling in a useful update in one workspace required that I do it in the others, and sometimes I'd forget, and scratch my head, wondering why that dependency works in one project but not another. Fiasco.</p>

<p>I now have just <em>one</em> GOPATH and I actually put all my dev projects - Go or not - within it. With one central workspace, I can still keep each project in its own git repository (<code>src/&lt;whatever&gt;</code>) and use git branching to manage dependencies when necessary (in practice, very seldom).</p>

<p>My recommendation: use just one workspace, or maybe two (like if you need to keep, for example, work and personal code more separate, though the recommended package path naming convention should do that for you).</p>
","20725538"
"Explanation of checking if value implements interface. Golang","8101","","<p>I've read ""Effective Go"" and other Q&amp;As like this: <a href=""https://stackoverflow.com/questions/17994519/golang-interface-compliance-compile-type-check"">golang interface compliance compile type check</a> , but nonetheless I can't understand properly how to use this technique.</p>

<p>Please, see example:</p>

<pre><code>type Somether interface {
    Method() bool
}

type MyType string

func (mt MyType) Method2() bool {
    return true
}

func main() {
    val := MyType(""hello"")

    //here I want to get bool if my value implements Somether
    _, ok := val.(Somether)
    //but val must be interface, hm..what if I want explicit type?

    //yes, here is another method:
    var _ Iface = (*MyType)(nil)
    //but it throws compile error
    //it would be great if someone explain the notation above, looks weird
}
</code></pre>

<p>Is there any simple ways (eg without using reflection) check value if it implements an interface?</p>
","<p>You only have to check if a value implements an interface if you don't know the value's type.
If the type is known, that check is automatically done by the compiler.</p>

<p>If you really want to check anyways, you can do it with the second method you gave:</p>

<pre><code>var _ Somether = (*MyType)(nil)
</code></pre>

<p>which would error at compile time:</p>

<pre><code>prog.go:23: cannot use (*MyType)(nil) (type *MyType) as type Somether in assignment:
    *MyType does not implement Somether (missing Method method)
 [process exited with non-zero status]
</code></pre>

<p>What you are doing here, is assigning a pointer of <code>MyType</code> type (and <code>nil</code> value) to a variable of type <code>Somether</code>, but since the variable name is <code>_</code> it is disregarded.</p>

<p>If <code>MyType</code> implemented <code>Somether</code>, it would compile and do nothing</p>
","27804417"
"Go lang differentiate ""\n"" and line break","8099","","<p>I am trying read certain string output generated by linux command by the following code: </p>

<pre><code>out, err := exec.Command(""sh"", ""-c"", cmd).Output()
</code></pre>

<p>The above out is of <code>[]byte</code> type, how can I differentiate the ""\n"" character contained in line content with the real line break? I tried     </p>

<pre><code>strings.Split(output, ""\n"")
</code></pre>

<p>and</p>

<pre><code>bufio.NewScanner(strings.NewReader(output))
</code></pre>

<p>but they both split the whole string buffer whenever seeing a ""\n"" character.</p>

<p>OK, to clarify, an ""unreal"" break is a ""\n"" character contained in a string as follows, 
<code>
Print first result: ""123;\n234;\n""
Print second result: ""456;\n""
</code></p>

<p>The whole output is one big multi-line string, it may also contain some other quoted strings, and I am processing the whole string output in my go program, but I can't control the command output and add a back slash before the ""\n"" character.</p>

<p>Further clarify: I meant to process byte sequence which contains string of strings, and want to preserve the ""<code>\n</code>"" contained in the inner string and use the the outer layer ""<code>\n</code>"" to break lines. So for the following byte sequence:</p>

<pre><code>First line: ""test1""
Second line: ""123;\n234;\n345;""
Third line: ""456;\n567;""
Fourth line: ""test4""
</code></pre>

<p>I want to get 3 lines when processing the whole sequence, instead of getting 7 total lines. It's a old project, but I remember I can use Python to directly get 3 lines using syntax like ""<code>for line in f</code>"", and print the content of second inner string instead of rendering it.</p>
","<p>There is no distinction between a ""real"" and an ""unreal"" line break.</p>

<p>If you're using a Unix-like system, the end of a line in a text file is denoted by the LF or <code>'\n'</code> character. You cannot have a <code>'\n'</code> character in the middle of a line.</p>

<p>A string in memory can contain as many <code>'\n'</code> characters as you like. The string <code>""foo\nbar\n""</code>, when written to a text file, will create two lines, <code>""foo""</code> and <code>""bar""</code>.</p>

<p>There is no effective difference between</p>

<pre><code>fmt.Println(""foo"")
fmt.Println(""bar"")
</code></pre>

<p>and</p>

<pre><code>fmt.Printf(""foo\nbar\n"")
</code></pre>

<p>Both print the same sequence of 2 lines, as does this:</p>

<pre><code>fmt.Println(""foo\nbar"")
</code></pre>
","32062543"
"""The selected directory is not a valid home for Go Sdk""","8095","","<p>I'm using IntelliJ Idea, and the google-go-lang-idea-plugin from:</p>

<blockquote>
  <p><a href=""https://github.com/mtoader/google-go-lang-idea-plugin/issues/173"" rel=""noreferrer"">https://github.com/mtoader/google-go-lang-idea-plugin/issues/173</a></p>
</blockquote>

<p>When I try to add my APT provided Go installation to the Go SDK list, I get the following error</p>

<p><img src=""https://i.stack.imgur.com/fUi9m.png"" alt=""The selected directory is not a valid home for Go Sdk""></p>

<p>I have tried adding the following directories as the Go SDK root</p>

<ul>
<li><code>/usr/share/go/</code></li>
<li><code>/usr/share/src/</code></li>
<li><code>/usr/lib/go/</code></li>
<li><code>/usr/lib/go/src/</code></li>
<li><code>/usr/lib/go/pkg/</code></li>
<li><code>/usr/lib/go/pkg/linux_amd64</code></li>
</ul>

<p>Does anyone know how to get this working? I've commented on the various issues in the bugtracker, however the maintainer claimed that this was fixed 10 months ago.</p>

<p>Failing that, does anyone know what this plugin is actually looking for that would make a directory look like the SDK directory?</p>
","<p>It turns out that <code>google-go-lang-idea-plugin</code> requires a slightly different folder structure than the default apt install produces. To fix it:</p>

<pre><code># mkdir /usr/lib/go/bin
# ln -s /usr/bin/go    /usr/lib/go/bin/go
# ln -s /usr/bin/godoc /usr/lib/go/bin/godoc
# ln -s /usr/bin/gofmt /usr/lib/go/bin/gofmt
</code></pre>
","20533130"
"Using golang and mgo, how do I search for a range of values in MongoDB?","8093","","<p>I worked through the example on the <a href=""http://labix.org/mgo"" rel=""noreferrer"">mgo homepage</a>, but I'm struggling to find a way to query a range of values.  The line:<br>
<code>searchResults, searchErr = SearchReading(bson.M{""k"": key, ""t"": { $gte: start, $lte: end } }, limit)</code><br>
fails with:<br>
<code>line67: syntax error: unexpected $</code><br>
<code>line67: missing type in composite literal</code></p>

<p>I left out the non-essential bits of code...</p>

<pre><code>type Reading struct {
    K string  ""k""
    T int64   ""t""
    V float64 ""v""
}

func SearchReading(q interface{}, limit int) (searchResults []Reading, searchErr string) {
    searchErr = """"
    searchResults = []Reading{}
    query := func(c *mgo.Collection) error {
        fn := c.Find(q).Limit(limit).All(&amp;searchResults)
        if limit &lt; 0 {
            fn = c.Find(q).All(&amp;searchResults)
        }
        return fn
    }
    search := func() error {
        return withCollection(""reading"", query)
    }
    err := search()
    if err != nil {
        searchErr = ""Database Error""
    }
    return
}

func GetReadingsForKey(key string, start int64, end int64, limit int) (searchResults []Reading, searchErr string) {
    searchResults, searchErr = SearchReading(bson.M{""k"": key, ""t"": { $gte: start, $lte: end } }, limit)
    return
}
</code></pre>
","<p>The line:</p>

<pre><code>searchResults, searchErr = SearchReading(bson.M{""k"": key, ""t"": { $gte: start, $lte: end } }, limit)
</code></pre>

<p>needs to change to:</p>

<pre><code>searchResults, searchErr = SearchReading(bson.M{""k"": key, ""t"": bson.M{""$gte"": start, ""$lte"": end}}, limit)
</code></pre>
","13158585"
"Process command line arguments in go test","8088","","<p>Is there a way to get the command line arguments in go ""tests"",<br>
When you call <code>go test</code> obviously your <code>main</code> is not run, so is there a way to process command line arguments,   </p>

<p>One way would be to use the <code>flags</code> packages and check for the command line arguments in each test or function being tested, but that is not ideal for that you need to do this in lots and lots of places, unlike the way you to it just in <code>main</code> when you run the application.   </p>

<p>EDIT: mainly to down-voters, I imagine you are downvoting the question because you think it is a wrong thing to do, and is against purity of unit-tests,  </p>

<ol>
<li>not all tests are unit tests</li>
<li>it is very functional not to rely on ""ENV"" variables and actually pass the stuff as arguments in command line,</li>
<li>please put your opinion in the answers so that future generations can benefit,</li>
</ol>

<p>EDIT 2: for the record I ended up putting an <code>init()</code> function in one of my <code>_test</code> files, and set the variable that is set through flags when the main is called this way.  </p>
","<p>Environmental configs are best kept in environment variables, in my experience.  You can rely on global variables like so:</p>

<pre><code>var envSetting = os.Getenv(""TEST_ENV"")
</code></pre>

<p>Alternatively, if using flags is a requirement, you could place your initialization code inside a function called init().</p>

<pre><code>func init() {
    flags.Parse()
    myEnv = *envFlag
    // ...
}
</code></pre>
","21352256"
"How to connect to Oracle in go","8079","","<p>I gather there are two ways to connect to Oracle DB in Go (on windows):</p>

<ol>
<li>github.com/tgulacsi/goracle</li>
<li>github.com/mattn/go-oci8</li>
</ol>

<p>But for someone of my level (beginner in open source+golang), those two methods/drivers are awfully tricky.</p>

<p>It's also a burden having to go through all of that for deployment, development on different machines etc. (Also assuming it will work). </p>

<p>Is there a better way to connect to Oracle db in golang or if there is not then can someone explain to me in high level view or any view for that matter that would make this easier?</p>

<p>Pointers would be very much appreciated.</p>

<p>TQ.</p>
","<p>If you are still interested, I have been working with Go and Oracle on Windows for a few months now. My favorite driver so far is go-oci8. It is much faster than goracle and seems to be more active.</p>

<p>Some of our applications need to be deployed on computers that we don't have access to. Both native SQL drivers are compiled with the application without the need for any external configuration, so that is a huge plus. The computer will still need Oracle client installed, but that is the only external dependency.</p>

<p>I won't say go-oci8 is production ready yet, but it's stable enough when you know its limitations. One example is that it panics when running on multiple goroutines simultaneously, so if you need that you might want to use a mutex.</p>

<p>I have basically followed this tutorial to install it: <a href=""https://gist.github.com/mnadel/8678269"" rel=""noreferrer"">https://gist.github.com/mnadel/8678269</a></p>

<p>The trickiest part was creating oci8.pc corretly. Mine is:</p>

<pre><code>prefix=/devel/target/1.0
exec_prefix=${prefix}
libdir=C:/oracle/instantclient_12_1_64/sdk/lib/msvc
includedir=C:/oracle/instantclient_12_1_64/sdk/include
oralib=C:/oracle/instantclient_12_1_64/sdk/lib/msvc
orainclude=C:/oracle/instantclient_12_1_64/sdk/include
gcclib=c:/MinGW_64/mingw64/lib
gccinclude=c:/MinGW_64/mingw64/lib
glib_genmarshal=glib-genmarshal
gobject_query=gobject-query
glib_mkenums=glib-mkenums
Name: oci8
Version: 12.1
Description: oci8 library
Libs: -L${oralib} -L${gcclib} -loci
Libs.private:
Cflags: -I${orainclude} -I${gccinclude}
</code></pre>

<p>Some things might be reduntant, I might try to improve it on a clean machine.</p>

<p>An important thing to have in mind is that you should use the same architecture for Go and the Oracle client. So if you want to use the 64 bit version of Go you will also need the 64 bit version of Oracle. I have both 32 and 64 bit versions of both, and while 64 bit is my default I use bat files to change the necessary paths and environment variables when I need to build a 32 bit version.</p>

<p>It might be worth investing some time to make it work, you will probably get much better performance than using ODBC. I have been using it with somewhat high data volume (queries that fetch 5+ million rows) and it works very well.</p>
","25941106"
"""go build"" became very slow after installing a new version of Go","8074","","<p>After upgrading from Go 1.2.1 to 1.3 (Windows 7 64 bit) ""go build"" execution time has increased from around 4 to over 45 seconds. There were no other changes except the go version update. Switching off the virus scanner seems to have no effect. Any clues?</p>
","<p>You probably have dependencies that are being recompiled each time. Try <code>go install -a mypackage</code> to rebuild all dependencies.  </p>

<p>Removing <code>$GOPATH/pkg</code> also helps to ensure you don't have old object files around. </p>

<p>Building with the <code>-x</code> flag will show you if the toolchain is finding incompatible versions. </p>
","24341946"
"How can I generate a random int using the ""crypto/rand"" package?","8062","","<p>Say I would like to generate a secure random int between 0 and 27 using:</p>

<pre><code>func Int(rand io.Reader, max *big.Int) (n *big.Int, err error)
</code></pre>

<p>in the <code>""crypto/rand""</code> package.</p>

<p>How would I do that?</p>

<p>I do not really understand how this works, why does it not return one of the built in Go ints instead of pointer to some big.Int type?</p>

<p>EDIT:</p>

<p>Would this be considered secure enough for tokens?</p>

<pre><code>func getToken(length int) string {
    token := """"
    codeAlphabet := ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    codeAlphabet += ""abcdefghijklmnopqrstuvwxyz""
    codeAlphabet += ""0123456789""

    for i := 0; i &lt; length; i++ {
        token += string(codeAlphabet[cryptoRandSecure(int64(len(codeAlphabet)))])
    }
    return token
}

func cryptoRandSecure(max int64) int64 {
    nBig, err := rand.Int(rand.Reader, big.NewInt(max))
    if err != nil {
        log.Println(err)
    }
    return nBig.Int64()
}

func main() {
    fmt.Println(getToken(32))
}
</code></pre>

<p>This would output something like this:</p>

<pre><code>qZDbuPwNQGrgVmZCU9A7FUWbp8eIfn0Z

EwZVoQ5D5SEfdhiRsDfH6dU6tAovILCZ

cOqzODVP0GwbiNBwtmqLA78rFgV9d3VT
</code></pre>
","<p>If you're generating secure tokens for session IDs, OAuth Bearer tokens, CSRF or similar: you want to generate a token of (ideally) 256 bits (32 bytes) or no less than 192 bits (24 bytes). </p>

<p>A token with values between (0-27) can be brute-forced in less than a second and could not be considered secure. </p>

<p>e.g. </p>

<pre><code>package main

import (
    ""crypto/rand""
    ""encoding/base64""
)

// GenerateRandomBytes returns securely generated random bytes.
// It will return an error if the system's secure random
// number generator fails to function correctly, in which
// case the caller should not continue.
func GenerateRandomBytes(n int) ([]byte, error) {
    b := make([]byte, n)
    _, err := rand.Read(b)
    // Note that err == nil only if we read len(b) bytes.
    if err != nil {
        return nil, err
    }

    return b, nil
}

// GenerateRandomString returns a URL-safe, base64 encoded
// securely generated random string.
func GenerateRandomString(s int) (string, error) {
    b, err := GenerateRandomBytes(s)
    return base64.URLEncoding.EncodeToString(b), err
}

func main() {
    // Example: this will give us a 44 byte, base64 encoded output
    token, err := GenerateRandomString(32)
    if err != nil {
        // Serve an appropriately vague error to the
        // user, but log the details internally.
    }
}
</code></pre>

<p>The base64 output is safe for headers, HTTP forms, JSON bodies, etc. </p>

<p>If you need an integer it may help to explain your use-case, as it would be odd for a system to require tokens as ints. </p>
","32351471"
"How to .Scan() a MySQL TIMESTAMP value into a time.Time variable?","8042","","<p>I have this Go code:</p>

<pre><code>package main

import (
    ""fmt""
    ""database/sql""
    _""github.com/go-sql-driver/mysql""
    ""time""
)

type User struct {
    id                  uint32
    name                string
    email               string
    rating              uint8
    subscription        uint8
    date_registered     time.Time
    online              string
}

// main entry point
func main() {
    // setup db connection
    db, err := sql.Open(""mysql"", ""user:@tcp(127.0.0.1:3306)/c9?parseTime=true"")
    if err != nil {
        fmt.Println(err)
    }
    defer db.Close()

    // query
    rows, err := db.Query(""SELECT * FROM users WHERE id = ?"", 1)
    if err != nil {
        fmt.Println(err)
    }
    defer rows.Close()

    usr := User{}
    for rows.Next() {
        err := rows.Scan(&amp;usr.id, &amp;usr.name, &amp;usr.email, &amp;usr.rating, &amp;usr.subscription, &amp;usr.date_registered, &amp;usr.online)
        if err != nil {
            fmt.Println(err)
        }
    }
    fmt.Println(usr)
    err = rows.Err()
    if err != nil {
        fmt.Println(err)
    }
}
</code></pre>

<p>This is what I get from MySQL console:</p>

<pre><code>mysql&gt; describe users;
+-----------------+---------------------+------+-----+-------------------+----------------+
| Field           | Type                | Null | Key | Default           | Extra          |
+-----------------+---------------------+------+-----+-------------------+----------------+
| id              | int(10) unsigned    | NO   | PRI | NULL              | auto_increment |
| name            | varchar(50)         | NO   |     | NULL              |                |
| email           | varchar(50)         | NO   |     | NULL              |                |
| rating          | tinyint(3) unsigned | YES  |     | NULL              |                |
| subscription    | tinyint(3) unsigned | NO   |     | 0                 |                |
| date_registered | timestamp           | NO   |     | CURRENT_TIMESTAMP |                |
| online          | char(1)             | NO   |     | N                 |                |
+-----------------+---------------------+------+-----+-------------------+----------------+
7 rows in set (0.00 sec)

mysql&gt; SELECT * FROM users;
+----+------------+-----------------------+--------+--------------+---------------------+--------+
| id | name       | email                 | rating | subscription | date_registered     | online |
+----+------------+-----------------------+--------+--------------+---------------------+--------+
|  1 | alakhazamm | abcdefghhhh@gmail.com |   NULL |            0 | 2014-10-28 15:37:44 | N      |
+----+------------+-----------------------+--------+--------------+---------------------+--------+
1 row in set (0.00 sec)
</code></pre>

<hr>

<p>After <code>.Scan()</code>, <code>fmt.Println(usr)</code> prints</p>

<pre><code>{1 alakhazamm abcdefghhhh@gmail.com 0 0 {0 0 &lt;nil&gt;} }
</code></pre>

<p>The last two fields of the struct are wrong but I have no idea why.
I've tried using <code>date_registered string</code> in the struct definition, but I get an empty string after <code>.Scan()</code>.
I've also read in the driver's docs that <code>?parseTime=true</code> parses MySQL DATE and DATETIME values into time.Time, but they don't mention TIMESTAMP which is what I'm currently using.</p>

<p>Am I missing something important or is it a bug/missing feature of the library?</p>
","<p>I've found the cause of the error.</p>

<p>Since <code>rating</code> is NULL in the database, the scanner gave the error </p>

<blockquote>
  <p>sql: Scan error on column index 3: converting string ""nil"" to a
  uint8: strconv.ParseUint: parsing ""nil"": invalid syntax</p>
</blockquote>

<p>I've updated the database row and now <code>usr.date_registered</code> and <code>usr.online</code> hold the correct values.</p>

<p>I guess I'll have to make the MySQL field NOT NULL and just use -1 to indicate a non-initialised value.</p>
","26619396"
"structure with nested maps golang","8029","","<p>Hi I'm new to go and was trying to figure out how maps work.
I have made up a little test program and can't seem to get it to work.
What I'm doing wrong? </p>

<pre><code>package main

import (
    ""fmt""
)

type Stats struct {
    cnt      int
    category map[string]Events
}

type Events struct {
    cnt   int
    event map[string]Event
}

type Event struct {
    value int64
}

func main() {

    stats := new(Stats)
    stats.cnt = 33
    stats.category[""aa""].cnt = 66
    stats.category[""aa""].event[""bb""].value = 99

    fmt.Println(stats.cnt, stats.category[""aa""].event[""bb""].value)
}
</code></pre>
","<p>There are couple of issues with the code:
1. Map needs to be initialized using make function. Currently they are nil
2. Return value from map is non-addressable, this because if map is growing it needs to relocated which will cause memory address to change. Hence we need to extract value explicitly from map to a variable, update it and assigning it back. 
3. Use pointer</p>

<p>I have updated the solution to show both updated it value returned and assigning it back and pointer.</p>

<p><a href=""http://play.golang.org/p/lv50AONXyU"" rel=""nofollow"">http://play.golang.org/p/lv50AONXyU</a></p>

<pre><code>package main

import (
    ""fmt""
)

type Stats struct {
    cnt      int
    category map[string]Events
}

type Events struct {
    cnt   int
    event map[string]*Event
}

type Event struct {
    value int64
}

func main() {

    stats := new(Stats)
    stats.cnt = 33
    stats.category = make(map[string]Events)
    e, f := stats.category[""aa""]
    if !f {
        e = Events{}
    }
    e.cnt = 66

    e.event = make(map[string]*Event)
    stats.category[""aa""] = e
    stats.category[""aa""].event[""bb""] = &amp;Event{}
    stats.category[""aa""].event[""bb""].value = 99

    fmt.Println(stats)
    fmt.Println(stats.cnt, stats.category[""aa""].event[""bb""].value)
}
</code></pre>
","34972468"
"Go template function","8017","","<p>It noticed a weird thing with Go templates when I try to use <code>Funcs</code> and <code>FuncMap</code>. The following code works as expected:</p>

<pre><code>buffer := bytes.NewBufferString("""")

funcMap := template.FuncMap{
    ""label"": strings.Title,
}

t, _ := template.New(""alex"").Funcs(funcMap).Parse(""{{label \""alex\""}}"") 

t.Execute(buffer, """")

return string(buffer.Bytes()) //=&gt; ""Alex""
</code></pre>

<p>But when I try to put the template in a file, it does not work (<code>Execute()</code> says: <code>""alex"" is an incomplete or empty template</code>):</p>

<pre><code>t, _ := template.New(""alex"").Funcs(funcMap).ParseFiles(""template.html"") 
</code></pre>

<p>With template.html:</p>

<pre><code>{{label \""alex\""}}
</code></pre>

<p>Any idea why ? Is this a bug ? Are there simpler ways to use methods/functions in templates ?</p>
","<p>ParseFiles could probably use better documentation.  A template object can have multiple templates in it and each one has a name.  If you look at the implementation of ParseFiles, you see that it uses the <em>filename</em> as the template name inside of the template object.  So, name your file the same as the template object, (probably not generally practical) or else use ExecuteTemplate instead of just Execute.</p>
","10200169"
"Sorting by time.Time in Golang","8014","","<p>I am trying to sort struct in GOlang by its member which is of type time.Time.
the structure is as follows.</p>

<pre><code>type reviews_data struct {
    review_id string
    date time.Time
    score int
    firstname string
    anonymous bool
    review_text string
    title_text string
    rating float64
    upcount int
}
</code></pre>

<p>I have the below functions for sorting </p>

<pre><code>type timeSlice []reviews_data

// Forward request for length
func (p timeSlice) Len() int {
    return len(p) 
}

// Define compare
func (p timeSlice) Less(i, j int) bool {
    return p[i].date.Before(p[j].date)
}

// Define swap over an array
func (p timeSlice) Swap(i, j int) {
    p[i], p[j] = p[j], p[i] 
}
</code></pre>

<p>A map is defined as follows</p>

<pre><code>var reviews_data_map = make(map[string]reviews_data)
</code></pre>

<p>After the map gets filled with values,sorting of the map by values is done as below</p>

<pre><code>//Sort the map by date
    date_sorted_reviews := make(timeSlice, 0, len(reviews_data_map))
    for _, d := range reviews_data_map {
        date_sorted_reviews = append(date_sorted_reviews, d)
    }       
    sort.Sort(date_sorted_reviews)
</code></pre>

<p>The problem is that the result is not sorted.Can anyone tell me what the problem is.
Thanks in advance.</p>
","<p>It looks sorted to me:</p>

<pre><code>package main

import (
    ""fmt""
    ""sort""
    ""time""
)

type reviews_data struct {
    review_id   string
    date        time.Time
    score       int
    firstname   string
    anonymous   bool
    review_text string
    title_text  string
    rating      float64
    upcount     int
}

type timeSlice []reviews_data

func (p timeSlice) Len() int {
    return len(p)
}

func (p timeSlice) Less(i, j int) bool {
    return p[i].date.Before(p[j].date)
}

func (p timeSlice) Swap(i, j int) {
    p[i], p[j] = p[j], p[i]
}

func main() {
    var reviews_data_map = make(map[string]reviews_data)
    reviews_data_map[""1""] = reviews_data{date: time.Now().Add(12 * time.Hour)}
    reviews_data_map[""2""] = reviews_data{date: time.Now()}
    reviews_data_map[""3""] = reviews_data{date: time.Now().Add(24 * time.Hour)}
    //Sort the map by date
    date_sorted_reviews := make(timeSlice, 0, len(reviews_data_map))
    for _, d := range reviews_data_map {
        date_sorted_reviews = append(date_sorted_reviews, d)
    }
    fmt.Println(date_sorted_reviews)
    sort.Sort(date_sorted_reviews)
    fmt.Println(date_sorted_reviews)
}
</code></pre>

<p>Output:</p>

<pre><code>[{ {63393534000 0 0x1ba3e0} 0  false   0 0} { {63393490800 0 0x1ba3e0} 0  false   0 0} { {63393577200 0 0x1ba3e0} 0  false   0 0}]
[{ {63393490800 0 0x1ba3e0} 0  false   0 0} { {63393534000 0 0x1ba3e0} 0  false   0 0} { {63393577200 0 0x1ba3e0} 0  false   0 0}]
</code></pre>
","23121427"
"Can command line flags in Go be set to mandatory?","7997","","<p>Is there a way how to set that certain flags are mandatory, or do I have to check for their presence on my own?</p>
","<p>The <a href=""https://golang.org/pkg/flag/"" rel=""noreferrer""><code>flag</code></a> package does not support mandatory or required flags (meaning the flag must be specified explicitly).</p>

<p>What you can do is use sensible default values for (all) flags. And if a flag is something like there is no sensible default, check the value at the start of your application and halt with an error message. You should do flag value validation anyway (not just for required flags), so this shouldn't mean any (big) overhead, and this is a good practice in general.</p>
","31786364"
"colorizing golang test run output","7992","","<p>I like it when terminal/console test runs actually show their output in either red or green text.  It seems like a lot of the testing libraries available for Go have this.  However, I'd like to just use the default testing package that comes with Go.  Is there a way to colorize it's output with red and green?</p>
","<p>You can create a wrapper shell script for this and color it using color escape sequence. Here's a simple example on Linux (I'm not sure how this would look on windows, but I guess there is a way.. :) )</p>

<pre><code>go test -v . | sed ''/PASS/s//$(printf ""\033[32mPASS\033[0m"")/'' | sed ''/FAIL/s//$(printf ""\033[31mFAIL\033[0m"")/''
</code></pre>
","27245610"
"Defining a function that returns a slice of variable size in golang","7956","","<p>I would like to build a function that returns a slice of any size.  I know I can do</p>

<pre><code>func BuildSlice() [100]int { return [100]int{} }
</code></pre>

<p>but I would like to be able to return slices of different sizes from the same function.  Something like:</p>

<pre><code>func BuildSlice(int size) [...]int { return [size]int{} }
</code></pre>

<p>I've tried the above as well as</p>

<pre><code>func BuildSlice(size int) []int { return [size]int{} }
</code></pre>

<p>Please point me in the right direction. </p>

<p>Thanks.</p>
","<p>First of all, slices are already of ""variable size"": <code>[100]int</code> and <code>[...]int</code> are array type definitions.</p>

<p><code>[]int</code> is the correct syntax for a slice, and you could implement the function as:</p>

<pre><code>func BuildSlice(size int) []int {
    return make([]int, size)
}
</code></pre>

<p>This will return a slice of zero values with the desired size, similar to what your array version does.</p>
","22318864"
"How can I get a file's ctime,atime,mtime and change them using Golang?","7946","","<p>How can I get file's ctime,mtime,atime use golang and change them?</p>

<p>In Go 1.1.2,
* os.Stat can only get mtime
* os.Chtimes can change mtime and atime but not ctime.</p>
","<blockquote>
  <p>Linux</p>
  
  <p><a href=""http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime"" rel=""noreferrer"">ctime</a></p>
  
  <p>ctime is the inode or file change time. The ctime gets updated when
  the file attributes are changed, like changing the owner, changing the
  permission or moving the file to an other filesystem but will also be
  updated when you modify a file.</p>
</blockquote>

<p>The file ctime and atime are OS dependent. For Linux, ctime is set by Linux to the current timestamp when the inode or file is changed.</p>

<p>Here's an example, on Linux, of implicitly changing ctime by setting atime and mtime to their original values.</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
    ""syscall""
    ""time""
)

func statTimes(name string) (atime, mtime, ctime time.Time, err error) {
    fi, err := os.Stat(name)
    if err != nil {
        return
    }
    mtime = fi.ModTime()
    stat := fi.Sys().(*syscall.Stat_t)
    atime = time.Unix(int64(stat.Atim.Sec), int64(stat.Atim.Nsec))
    ctime = time.Unix(int64(stat.Ctim.Sec), int64(stat.Ctim.Nsec))
    return
}

func main() {
    name := ""stat.file""
    atime, mtime, ctime, err := statTimes(name)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(atime, mtime)
    fmt.Println(ctime)
    err = os.Chtimes(name, atime, mtime)
    if err != nil {
        fmt.Println(err)
        return
    }
    atime, mtime, ctime, err = statTimes(name)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Println(atime, mtime)
    fmt.Println(ctime)
}
</code></pre>

<p>Output:</p>

<pre><code>2014-01-02 02:21:26.262111165 -0500 EST 2014-01-02 02:18:13.253154086 -0500 EST
2014-01-02 02:21:25.666108207 -0500 EST
2014-01-02 02:21:26.262111165 -0500 EST 2014-01-02 02:18:13.253154086 -0500 EST
2014-01-02 02:21:43.814198198 -0500 EST
</code></pre>
","20877193"
"How do I unpack various form of integers in a byte buffer in Golang?","7946","","<p>I need to extract various fields in a byte buffer. I came up with this solution:</p>

<pre><code>func (fs *FileSystem) readSB() {
    // fs.f is a *os.File
    buf := make([]byte, 1024)
    fs.f.ReadAt(buf, 1024)

    // Offset: type
    var p *bytes.Buffer

    // 0: uint32
    p = bytes.NewBuffer(buf[0:])
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.inodeCount)
    // 4: uint32
    p = bytes.NewBuffer(buf[4:])
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.blockCount)
    // 20: uint32
    p = bytes.NewBuffer(buf[20:])
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.firstDataBlock)
    // 24: uint32
    p = bytes.NewBuffer(buf[24:])
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.blockSize)
    fs.sb.blockSize = 1024 &lt;&lt; fs.sb.blockSize
    // 32: uint32
    p = bytes.NewBuffer(buf[32:])
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.blockPerGroup)
    // 40: uint32
    p = bytes.NewBuffer(buf[40:])
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.inodePerBlock)
}
</code></pre>

<p>Is there a more better/idiomatic/straightforward way of doing this?</p>

<ul>
<li>I want to keep offsets explicit</li>
<li>I want to read from the byte buffer, not seeking and reading from the file when possible.</li>
</ul>
","<p>You could avoid creating a new buffer every time by using <a href=""http://golang.org/pkg/bytes/#Buffer.Next"" rel=""noreferrer""><code>.Next()</code></a> to skip the bytes you don't want to read:</p>

<pre><code>{
    // Offset: type
    p := bytes.NewBuffer(buf)

    // 0: uint32
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.inodeCount)

    // 4: uint32
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.blockCount)

    // Skip [8:20)
    p.Next(12)

    // 20: uint32
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.firstDataBlock)

    // 24: uint32
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.blockSize)
    fs.sb.blockSize = 1024 &lt;&lt; fs.sb.blockSize

    // Skip [28:32)
    p.Next(4)

    // 32: uint32
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.blockPerGroup)

    // Skip [36:40)
    p.Next(4)

    // 40: uint32
    binary.Read(p, binary.LittleEndian, &amp;fs.sb.inodePerBlock)
}
</code></pre>

<p>Or you could avoid reading chunk by chunk and create a header structure which you read directly using <code>binary.Read</code>:</p>

<pre><code>type Head struct {
    InodeCount      uint32  //  0:4
    BlockCount      uint32  //  4:8
    Unknown1        uint32  //  8:12
    Unknown2        uint32  // 12:16
    Unknown3        uint32  // 16:20
    FirstBlock      uint32  // 20:24
    BlockSize       uint32  // 24:28
    Unknown4        uint32  // 28:32
    BlocksPerGroup  uint32  // 32:36
    Unknown5        uint32  // 36:40
    InodesPerBlock  uint32  // 40:44
}

func main() {
    var header Head

    err = binary.Read(file, binary.LittleEndian, &amp;header)

    if err != nil {
        log.Fatal(err)
    }

    log.Printf(""%#v\n"", header)
}
</code></pre>
","12369469"
"print the Address of slice in golang","7946","","<p>I have some exp in C and i am totally new to golang</p>

<pre><code>func learnArraySlice() {
intarr := [5]int{12, 34, 55, 66, 43}
slice := intarr[:]
fmt.Printf(""the len is %d and cap is %d \n"", len(slice), cap(slice))
fmt.Printf(""address of slice 0x%x add of Arr 0x%x \n"", &amp;slice, &amp;intarr)
</code></pre>

<p>}</p>

<p>Now in golang slice is a reference of array which contains the pointer to an array len of slice and cap of slice but this slice will also be allocated in memory and i want to print the address of that memory. But unable to do that.</p>
","<p><a href=""http://golang.org/pkg/fmt/"">http://golang.org/pkg/fmt/</a></p>

<pre><code>fmt.Printf(""address of slice %p add of Arr %p \n"", &amp;slice, &amp;intarr)
</code></pre>

<p><code>%p</code> will print the address.</p>
","22811255"
"Raw Socket Sniffing in Golang","7944","","<p>I have a question concerning tcp packet sniffing with golang. 
We have written a small tool which captures all incoming TCP packets comming from a fibre Tap. </p>

<p>The current implementation uses a libpcap wrapper under Linux. We need to port this tool to Windows. Of course, it is not possible at the moment. </p>

<p>So my question is, is there a cross platform solution for sniffing packets? We only need TCP packets, IP headers , no Ethernet Data and not all features of libpcap. </p>

<p>If there is no cross platform solution, two Code implementation would be ok, too. I know one can use raw sockets under Linux (and with some limitations under Windows). Does Golang support raw sockets and is there an example implementation for sniffing packets with sockets? </p>

<p>Tanks!! :-) </p>
","<p>You should be able to use the <a href=""http://godoc.org/code.google.com/p/go.net/ipv4"">ipv4 package</a> from <a href=""http://godoc.org/code.google.com/p/go.net/"">go.net</a>.</p>

<blockquote>
  <p>Package ipv4 implements IP-level socket options for the Internet Protocol version 4.</p>
</blockquote>

<p>The <a href=""http://godoc.org/code.google.com/p/go.net/ipv4#RawConn"">ipv4.RawConn</a> type and it's associated methods should work cross-platform.</p>

<blockquote>
  <p>A RawConn represents a packet network endpoint that uses the IPv4 transport. It is used to control several IP-level socket options including IPv4 header manipulation. It also provides datagram based network I/O methods specific to the IPv4 and higher layer protocols that handle IPv4 datagram directly such as OSPF, GRE.</p>
</blockquote>

<p>There is also an equivalent package for <a href=""http://godoc.org/code.google.com/p/go.net/ipv6"">ipv6</a>.</p>
","21321342"
"google golang exec exit status 2 and 1","7940","","<p>I want execute the dexdump in Android SDK platform-tools on Go language.</p>

<p>I already set the PATH variable. (I'm use Ubuntu 12.04)</p>

<p>Here is my code:</p>

<pre><code>package main

import (
    ""bytes""
    ""fmt""
    ""log""
    ""os/exec""
)

func main() {
    path, err := exec.LookPath(""dexdump"")
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println(path)

    cmd := exec.Command(path)
    var out bytes.Buffer
    cmd.Stdout = &amp;out
    err2 := cmd.Run()
    if err2 != nil {
        log.Fatal(err2)
    }
    fmt.Printf(""%q\n"", out.String())
}
</code></pre>

<p>Result:
/home/gunwoo/android-sdk-linux/platform-tools/dexdump</p>

<p>2012/10/15 16:44:39 exit status 2</p>

<p>exit status 1</p>

<p>why go doesn't find the path?</p>
","<p>You don't provide any arguments for the <code>exec.Run</code> <code>dexdump</code> command, which possibly generates an error like:</p>

<pre><code>dexdump: no file specified
dexdump: [-f] [-h] dexfile...

-d : disassemble code sections
-f : display summary information from file header
-h : display file header details
-C : decode (demangle) low-level symbol names
-S : compute sizes only
</code></pre>

<p>What output do you get when you run the following version of the program?</p>

<pre><code>package main

import (
    ""bytes""
    ""fmt""
    ""log""
    ""os/exec""
)

func main() {
    path, err := exec.LookPath(""dexdump"")
    if err != nil {
        log.Fatal(""LookPath: "", err)
    }
    fmt.Println(path)
    cmd := exec.Command(path)
    var out bytes.Buffer
    cmd.Stdout = &amp;out
    err = cmd.Run()
    fmt.Printf(""%s\n"", out.String())
    if err != nil {
        log.Fatal(""Run: "", err)
    }
}
</code></pre>
","12891939"
"Read lines from stdin until certain character","7939","","<p>I'm learning Go.</p>

<p>My program should read data from stdin until I enter a line with a single period.</p>

<pre><code>package main

import (

  ""os""
  ""fmt""
  ""bufio""

)

func main(){

  in    := bufio.NewReader(os.Stdin)
  input := """"

  for input != ""."" {
    input, err := in.ReadString('\n')
    if err != nil {
      panic(err)
    }
  }
}
</code></pre>

<p>How I should modify my for loop, to stop the program when I enter a single dot ?</p>

<p>I tried to implement a while loop with the for statement, is there something wrong with my approach, is the condition wrong, or is ReadString messing with my data ?</p>
","<blockquote>
  <p>... is ReadString messing with my data?</p>
</blockquote>

<p>No, it isn't. It is reading up to the next <code>'\n'</code>. That means that a line with only a dot on it will have the data <code>"".\n""</code> or <code>"".\r\n""</code> depending on the operating system.</p>

<p>To remove line endings, I would do <code>input = strings.TrimRight(input, ""\r\n"")</code></p>
","14205597"
"How to import local Go package in GAE","7938","","<p>How to import local packages in Golang + GAE?</p>

<p>I wanna something like this:</p>

<pre><code>app/
-app.yaml
-/my_app
--my_app.go
--/package1
---package1.go
</code></pre>

<p>Listing of my_app.go:</p>

<pre><code>package my_app

import (
  ""http""
  ""./package1""
)

func init() {
  http.HandleFunc(""/"", package1.index)
}
</code></pre>

<p>Listing of package1.go:</p>

<pre><code>package package1

import (
  ""http""
  ""fmt""
)

func index (w http.ResponseWriter, r * http.Request) {
  fmt.Fprint(w, ""I'm index page =) "")
}
</code></pre>

<p>I this case I have an error like:</p>

<pre><code>/path/to/project/my_app/my_app.go:5: can't find import: ./package1
2011/11/03 10:50:51 go-app-builder: Failed building app: failed running 6g: exit status 1
</code></pre>

<p>Thanks for help.</p>
","<p><strike>You either need to link or copy the packages to your application directory.</strike> The path relative to the root of the application directory should match the import path.<strike> To use package1, you should configure your app directory to look like this:</p>

<pre><code>app.yaml
yourapp/yourapp.go
package1/package1.go
</code></pre>

<p></strike>
from <a href=""https://groups.google.com/d/msg/golang-nuts/coEvrWIJGTs/75GzcefKVcIJ"" rel=""nofollow"">https://groups.google.com/d/msg/golang-nuts/coEvrWIJGTs/75GzcefKVcIJ</a></p>
","7994046"
"Go fmt on a whole source tree","7921","","<p>I have a project currently organized something like this:</p>

<pre>
~/code/go
         /bin
         /pkg
         /src
             /proj/main.go
                  /some_package/package.go
                  /some_other_package/some_other_package.go
</pre>

<p>Now if I want to use the <code>go fmt</code> tool on my whole project it seems that the only way is to do it separately for each directory in my projects source tree:</p>

<pre><code>go fmt proj
go fmt proj/package
go fmt proj/some_other_package
</code></pre>

<p>Is there some way to tell the fmt command to run on the whole source tree?</p>
","<p>You can use three dots (<code>...</code>) as a wildcard. So for example, the following command will format all github.com packages:</p>

<pre><code>go fmt github.com/...
</code></pre>

<p>This wildcard also works with other go commands like <code>go list</code>, <code>go get</code> and so. There is no need to remember such an ugly find command.</p>
","13321739"
"Electron UI for Golang Program?","7920","","<p>I'd like to make a GUI in Electron for a Desktop Application written in Go (currently it's a command line tool).</p>

<p>What's the convention for communicating between the Electron and Go processes? </p>

<p>Would simply using the Go binary as an API work? Some sort of websocket communication? </p>
","<p>The interaction of an application written in electron with its backend is exactly like a Web browser, therefore you have the same options (Web Api, Web Sockets, Ajax, etc.)</p>
","36961340"
"Structs cannot be nil, but this is compiling","7917","","<p>I'm playing with Go Playground and find this code:</p>

<pre><code>package main

import (
    ""fmt""
    ""time""
)

type MyError struct {
    When time.Time
    What string
}

func (e *MyError) Error() string {
    return fmt.Sprintf(""at %v, %s"",
        e.When, e.What)
}

func run() error {
    return &amp;MyError{
        time.Now(),
        ""it didn't work"",
    }
}

func main() {
    if err := run(); err != nil {
        fmt.Println(err)
    }
}
</code></pre>

<p>So here I can see that <code>*MyError</code> implements <code>error</code> interface. However if I remove <code>&amp;</code> in <code>error</code> func and return <code>MyError</code> instead, I receive compile time error: 
<code>prog.go:19: cannot use MyError literal (type MyError) as type error in return argument: MyError does not implement error (Error method has pointer receiver)</code>. OK I can understand that, so I can make the function <code>Error</code> like this and this will compile and run successfully:</p>

<pre><code>func (e MyError) Error() string {
    return fmt.Sprintf(""at %v, %s"",
        e.When, e.What)
}

func run() error {
    return MyError{
        time.Now(),
        ""it didn't work"",
    }
}
</code></pre>

<p>Then I see in <code>main</code> func that there is check if <code>err</code> is <code>nil</code> so if I understand correctly it is perfectly possible func <code>error</code> to return <code>nil</code> in some situations. So it is possible for <code>MyError</code> struct to take <code>nil</code> values. But then if I try to compile this:</p>

<pre><code>import (
    ""fmt""
    ""time""
)

type MyError struct {
    When time.Time
    What string
}

func (e MyError) Error() string {
    return fmt.Sprintf(""at %v, %s"",
        e.When, e.What)
}

func run() error {
    return nil
    return MyError{
        time.Now(),
        ""it didn't work"",
    }
}

func main() {
    var err2 MyError = nil

    fmt.Println(err2)
    if err := run(); err != nil {
        fmt.Println(err)
    }
}
</code></pre>

<p>go compiler said that: <code>prog.go:27: cannot use nil as type MyError in assignment
 [process exited with non-zero status]</code></p>

<p>Why in the upper case the compilation is successful and in this case the compilation fails?
Is it possible for structs to be <code>nil</code> (I guess not, but then why <code>run</code> func compiles?)</p>
","<p>In the first example, <code>*MyError</code> implemented the <code>error</code> interface. As you can see, it's a pointer, and a pointer can have the <code>nil</code> value.</p>

<pre><code>var err *MyError
err == nil // true

var err *MyError = new(MyError)
err == nil // false
</code></pre>

<p>But in the second example, it is <code>MyError</code> which implements the <code>error</code> interface, and that is not a pointer any more.</p>

<pre><code>var err MyError
err == MyError{} // true
&amp;err == nil // false
err == nil // Compilation error
</code></pre>

<p>It is the adress of <code>err</code> this time that can be <code>nil</code>, not the variable itself.</p>

<hr>

<p>As a comparison, consider the <code>int</code> type: <code>var i int</code>. You can check <code>i == 0</code> for instance, but it would be an error to test if <code>i == nil</code>, because <code>nil</code> is not an integer (exactly as it was not a <code>MyError</code> before). But you could still check if the address of <code>i</code> is <code>nil</code>: <code>&amp;i == nil</code>.</p>

<hr>

<p>EDIT</p>

<p>Be aware that this function will <em>always</em> return <code>nil</code> (the execution stops right after the first <code>return</code>):</p>

<pre><code>func run() error {
    return nil
    return MyError{
        time.Now(),
        ""it didn't work"",
    }
}
</code></pre>

<p>It compiles because the prototype of the function tells that it must return an <code>error</code>, and indeed, <code>nil</code> is a valid <code>error</code>, and so is a <code>MyError{}</code> variable. But try to change this function prototype to this one:</p>

<pre><code>func run() MyError
</code></pre>

<p>You will see that the compilation fails, because <code>nil</code> is not a <code>MyError</code> variable, even though it is a valid value for the <code>error</code> type.</p>
","24465588"
"Avoid checking if error is nil repetition?","7906","","<p>I'm currently learning go and some of my code looks like this:</p>

<pre><code>a, err := doA()
if err != nil {
  return nil, err
}
b, err := doB(a)
if err != nil {
  return nil, err
}
c, err := doC(b)
if err != nil {
  return nil, err
}
... and so on ...
</code></pre>

<p>This looks kinda wrong to me because the error checking takes most of the lines. Is there a better way to do error handling? Can I maybe avoid this with some refactoring?</p>

<p><strong>UPDATE:</strong> Thank you for all the answers. Please note that in my example doB depends on a, doC depends on b and so on. Therefore most suggested refactorings don't work in this case. Any other suggestion?</p>
","<p>This is a common complaint, and there are several answers to it.</p>

<p>Here are a few common ones:</p>

<p><strong>1 - It's not so bad</strong></p>

<p>This is a very common reaction to these complaints. The fact you have a few extra lines of code in your code is not in fact so bad. It's just a bit of cheap typing, and very easy to handle when on the reading side.</p>

<p><strong>2 - It's actually a good thing</strong></p>

<p>This is based on the fact that typing and reading these extra lines is a very good reminder that in fact your logic might escape at that point, and you have to undo any resource management that you've put in place in the lines preceding it. This is usually brought up in comparison with exceptions, which can break the flow of logic in an implicit way, forcing the developer to always have the hidden error path in mind instead. Some time ago I wrote a more in-depth rant about this <a href=""http://blog.labix.org/2013/04/23/exceptional-crashes"" rel=""noreferrer"">here</a>.</p>

<p><strong>3 - Use panic/recover</strong></p>

<p>In some specific circumstances, you may avoid some of that work by using <code>panic</code> with a known type, and then using <code>recover</code> right before your package code goes out into the world, transforming it into a proper error and returning that instead. This technique is seen most commonly to unroll recursive logic such as (un)marshalers.</p>

<p>I personally try hard to not abuse this too much, because I correlate more closely with points 1 and 2.</p>

<p><strong>4 - Reorganize the code a bit</strong></p>

<p>In some circumstances, you can reorganize the logic slightly to avoid the repetition.</p>

<p>As a trivial example, this:</p>

<pre><code>err := doA()
if err != nil {
    return err
}
err := doB()
if err != nil {
    return err
}
return nil
</code></pre>

<p>can also be organized as:</p>

<pre><code>err := doA()
if err != nil {
    return err
}
return doB()
</code></pre>

<p><strong>5 - Use named results</strong></p>

<p>Some people use named results to strip out the err variable from the return statement. I'd recommend against doing that, though, because it saves very little, reduces the clarity of the code, and makes the logic prone to subtle issues when one or more results get defined before the bail-out return statement.</p>

<p><strong>6 - Use the statement before the if condition</strong></p>

<p>As Tom Wilde well reminded in the comment below, <code>if</code> statements in Go <a href=""http://blog.labix.org/2013/04/23/exceptional-crashes"" rel=""noreferrer"">accept a simple statement</a> before the condition. So you can do this:</p>

<pre><code>if err := doA(); err != nil {
    return err
}
</code></pre>

<p>This is a fine Go idiom, and used often.</p>

<p>In some specific cases, I prefer to avoid embedding the statement in this fashion just to make it stand on its own for clarity purposes, but this is a subtle and personal thing.</p>
","18772200"
"How to properly use .Call in reflect package, Golang?","7904","","<p>Been having one last issue with my code which involves the .Call function in the reflect package. </p>

<p>So I'm making a call such as this:</p>

<pre><code>params := ""some map[string][]string""
in := make([]reflect.Value,0)
return_values := reflect.ValueOf(&amp;controller_ref).MethodByName(action_name).Call(in)
</code></pre>

<p>where the method I'm making the .Call to is as follows:</p>

<pre><code>func (c *Controller) Root(params map[string][]string) map[string] string{}
</code></pre>

<p>What I don't quite understand is how to manipulate the ""in"" variable in order to properly pass the map I need to into the function. I see that the second parameter in the make() is the length of the parameter? But I don't quite understand how to format the vars in order to properly pass in my parameter. I am recursively running into the error message:</p>

<pre><code>reflect: Call with too few input arguments
</code></pre>

<p>Any help would be much appreciated! </p>
","<p>From the <a href=""http://golang.org/pkg/reflect/#Value.Call"" rel=""nofollow""><code>Value.Call documentation</code></a>:</p>

<blockquote>
  <p>Call calls the function <code>v</code> with the input arguments in. For example, if <code>len(in) == 3</code>, <code>v.Call(in)</code> represents the Go call <code>v(in[0], in[1], in[2])</code>. </p>
</blockquote>

<p>So if you want to call a function with one parameter, <code>in</code> must contain one <code>reflect.Value</code> of the 
right type, in your case <code>map[string][]string</code>.</p>

<p>The expression</p>

<pre><code>in := make([]reflect.Value,0)
</code></pre>

<p>creates a slice with length 0. Passing this to <code>Value.Call</code> will result in the panic you receive as you
need 1 parameter, not zero.</p>

<p>The correct call would be:</p>

<pre><code>m := map[string][]string{""foo"": []string{""bar""}}

in := []reflect.Value{reflect.ValueOf(m)}

myMethod.Call(in)
</code></pre>
","20715070"
"How does ngrok work behind a firewall?","7883","","<p>Ngrok (<a href=""https://ngrok.com/"">https://ngrok.com/</a>) is supposed to allow you to expose local ports and services to the world wide web through forwarding. But if I open port 80 on my local machine like this:</p>

<pre><code>ngrok 80
</code></pre>

<p>and I get back:</p>

<pre><code>Tunnel Status                 online
Version                       1.3/1.3
Forwarding                    http://3a4bfceb.ngrok.com -&gt; 127.0.0.1:80
Forwarding                    https://3a4bfceb.ngrok.com -&gt; 127.0.0.1:80
Web Interface                 http://127.0.0.1:4040
# Conn                        0
Avg Conn Time                 0.00ms
</code></pre>

<p>I understand that any requests to <a href=""http://3a4bfceb.ngrok.com"">http://3a4bfceb.ngrok.com</a> will go to my local machine on port 80 but what if I am sitting behind a NAT/Firewall that's blocking incoming traffic (a very common scenario). Does ngrok initiate polling requests to determine when data has been received?</p>
","<p>Because an ngrok tunnel is <strong>always initiated on the client-side first</strong>, this is how it can negotiate a secure channel with the server.  It's a really slick solution to getting around conventional firewall configurations.</p>

<p>This is internally accomplished by the client opening up a single long-lived tcp connection where many logical sockets are created within one physical socket connection.  This technique is called <a href=""http://en.wikipedia.org/wiki/Multiplexing"" rel=""noreferrer"">stream multiplexing</a>. With this setup in place there is no need for any kind of polling because the client and server still have fully bi-directional communication in place.</p>

<p>The client and server then stay alive with a heartbeat mechanism that makes sure the connection is open and working appropriately and will even reconnect upon error or a lost/closed connection.</p>

<p>See this for more information: <a href=""https://github.com/inconshreveable/ngrok/blob/master/docs/DEVELOPMENT.md"" rel=""noreferrer"">Developer Guide on github.com</a></p>
","23397564"
"Why ""go build"" cannot find package?","7873","","<p>I installed a <code>test0</code> package to <code>$gopath\pkg\windows_386\hello\test0.a</code>, but when i build a main package which depends on the <code>test0</code> package, the compiler says: <code>import ""hello/test0"": cannot find package</code>.  </p>

<p>why this happens?</p>

<p>I have two go file:</p>

<p><code>$gopath/src/hello.go</code></p>

<pre><code>package main

import (
    ""fmt""
    ""hello/test0""
)

func main() {
    fmt.Println(test0.Number)
}
</code></pre>

<p><code>$gopath/src/hello/test0/test0.go</code></p>

<pre><code>package test0

const (
    Number int = 255
)
</code></pre>

<p>At first,  i run <code>go install hello/test0</code>, and it generated <code>$gopath\pkg\windows_386\hello\test0.a</code></p>

<p>then, i delete the directory <code>$gopath/src/hello</code></p>

<p>finally, i run <code>go build hello.go</code>, and the compiler sayed <code>hello.go:5:2: import ""hello/test0"": cannot find package</code></p>
","<p>That doesn't seem to be normally possible for the moment : <a href=""https://code.google.com/p/go/issues/detail?id=2775"" rel=""nofollow"">https://code.google.com/p/go/issues/detail?id=2775</a></p>

<p>Maybe for Go1.1</p>

<p>A trick (that I didn't test) by Dave :</p>

<blockquote>
  <p>For a package called ""hello"", the go tool will look for .go sources in
  $GOPATH/src/hello, and only rebuild if the timestamp of the .a file is
  before the latest timestamp of the .go files. An easy way to fool it
  into accepting just the .a file is to drop a dummy .go file in the
  correct src directory and set its timestamp to before that of the .a
  file.</p>
</blockquote>

<p><em>(this is a community answer, using <a href=""https://groups.google.com/forum/?fromgroups#!topic/golang-nuts/F74GAxN_SOs"" rel=""nofollow"">what is said on golang-nuts</a>).</em></p>
","11193022"
"Golang properly instantiate os.FileMode","7871","","<p>I have seen countless examples and tutorials that show how to create a file and all of them ""cheat"" by just setting the permission bits of the file.  I would like to know / find out how to properly instantiate os.FileMode to provide to a writer during creation / updating of a file.</p>

<p>A crude example is this below:</p>

<pre><code>func FileWrite(path string, r io.Reader, uid, gid int, perms string) (int64, error){
    w, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0664)
    if err != nil {
        if path == """" {
            w = os.Stdout
        } else {
            return 0, err
        }
    }
    defer w.Close()

    size, err := io.Copy(w, r)

    if err != nil {
        return 0, err
    }
    return size, err
}
</code></pre>

<p>In the basic function above permission bits 0664 is set and although this may make sense sometimes I prefer to have a proper way of setting the filemode correctly.  As seen above a common example would be that the UID / GID is known and already provided as int values and the perms being octal digits that were previously gathered and inserted into a db as a string.</p>
","<p><code>FileMode</code> is just a uint32. <a href=""http://golang.org/pkg/os/#FileMode"" rel=""noreferrer"">http://golang.org/pkg/os/#FileMode</a></p>

<p>Setting via constants isn't ""cheating"", you use it like other numeric values. If you're not using a constant, you can use a conversion on valid numeric values:</p>

<pre><code>mode := int(0777)
os.FileMode(mode)
</code></pre>
","28969523"
"Golang: http server leaving open goroutines","7870","","<p>I've put up an http server written in Go and it's getting a little over a thousand visitors a day.  I have an accumulating Goroutine problem now.  Over the course of a day I seem to get a little over a thousand new Goroutines from the http server.</p>

<p>I'm not sure how I could mess up the handler.</p>

<pre><code>http.Handle(""/"", http.FileServer(http.Dir(config.htdocs_path)))
</code></pre>

<p>Below is one of the goroutines from the stack</p>

<pre><code>goroutine 1582 [chan receive]:
net.(*pollServer).WaitRead(0xf84007f680, 0xf84066dea0, 0xf84007aa80, 0xb, 0x1, ...)
        /home/ec2-user/go/src/pkg/net/fd.go:268 +0x73
net.(*netFD).Read(0xf84066dea0, 0xf840ec1000, 0x100000001000, 0x7f7effffffff, 0xf84007c0f0, ...)
        /home/ec2-user/go/src/pkg/net/fd.go:428 +0x1ec
net.(*TCPConn).Read(0xf84068aff8, 0xf840ec1000, 0x100000001000, 0xf800000002, 0x0, ...)
        /home/ec2-user/go/src/pkg/net/tcpsock_posix.go:87 +0xce
io.(*LimitedReader).Read(0xf840d1bc20, 0xf840ec1000, 0x100000001000, 0xdcb00000000, 0x0, ...)
        /home/ec2-user/go/src/pkg/io/io.go:394 +0xc1
bufio.(*Reader).fill(0xf8405b0900, 0xdcb00000000)
        /home/ec2-user/go/src/pkg/bufio/bufio.go:77 +0xf0
bufio.(*Reader).ReadSlice(0xf8405b0900, 0xf840d1bc0a, 0x0, 0x0, 0x0, ...)
        /home/ec2-user/go/src/pkg/bufio/bufio.go:257 +0x1b6
bufio.(*Reader).ReadLine(0xf8405b0900, 0x0, 0x0, 0x0, 0x0, ...)
        /home/ec2-user/go/src/pkg/bufio/bufio.go:283 +0x5b
net/textproto.(*Reader).readLineSlice(0xf840730660, 0xc0, 0x100000000, 0x7f7e00000001)
        /home/ec2-user/go/src/pkg/net/textproto/reader.go:55 +0x4f
net/textproto.(*Reader).ReadLine(0xf840730660, 0xf84061f300, 0x0, 0x48411c)
        /home/ec2-user/go/src/pkg/net/textproto/reader.go:36 +0x25
net/http.ReadRequest(0xf8405b0900, 0xf84061f300, 0x0, 0x0, 0x100000400ccf60, ...)
        /home/ec2-user/go/src/pkg/net/http/request.go:457 +0xb1
net/http.(*conn).readRequest(0xf8402b2b40, 0xf8400e3fc0, 0x0, 0x0, 0xf8405b0a80, ...)
        /home/ec2-user/go/src/pkg/net/http/server.go:240 +0xa8
net/http.(*conn).serve(0xf8402b2b40, 0x0)
        /home/ec2-user/go/src/pkg/net/http/server.go:594 +0x145
created by net/http.(*Server).Serve
        /home/ec2-user/go/src/pkg/net/http/server.go:1040 +0x430
</code></pre>

<p>It seems like connections are getting stuck in the read state.  Like the http server isn't timing them out.  Does the default server not have a read timeout?</p>

<p>go version go1</p>
","<p>The reason all these goroutines are reading is keep-alive. When a browser sends a keep-alive header, the server keeps the connection open to accept more requests. This is a good thing when the client is requesting many small files and the TCP connection is significant overhead. A read timeout would ensure that no connection was kept alive more than a certain time between requests. This would close keep alive connections but also prevent someone from uploading for longer than the timeout. Unfortunately, there is no keep-alive specific timeout option yet.</p>

<p>By default, there is no timeout. You can set a timeout in the Server struct <a href=""http://golang.org/pkg/net/http/#Server"" rel=""noreferrer"">http://golang.org/pkg/net/http/#Server</a></p>

<pre><code>srv := &amp;http.Server{
    Handler: http.FileServer(http.Dir(config.htdocs_path)),
    ReadTimeout: 30*time.Second,
}
srv.ListenAndServe()
</code></pre>
","10972453"
"Golang MSSQL driver for Windows7 64-bit","7858","","<p>I am trying to connect to a Microsoft SQL Server database using the database/sql package for golang.</p>

<p>There is no MSSQL-specific driver listed at <a href=""https://code.google.com/p/go-wiki/wiki/SQLDrivers"" rel=""noreferrer"">https://code.google.com/p/go-wiki/wiki/SQLDrivers</a>, so I thought I'd try an odbc driver.</p>

<p>I  tried <a href=""https://github.com/weigj/go-odbc"" rel=""noreferrer"">https://github.com/weigj/go-odbc</a> but when I run <code>go install</code> I receive
<code>cc1.exe: sorry, unimplemented: 64-bit mode not compiled in</code>. This is listed as an open issue in the github repo.</p>

<p>Does anyone have experience connecting to an MSSQL database from a 64-bit Windows 7 client? Which odbc driver is recommended?</p>
","<p>Try using this ODBC driver instead, I believe it is more widely used: <a href=""https://code.google.com/p/odbc/"">https://code.google.com/p/odbc/</a></p>
","17241675"
"Strange behaviour of golang UDP server","7855","","<p>I wrote a simple UDP server in go. </p>

<p>When I do <code>go run udp.go</code> it prints all packages I send to it. But when running <code>go run udp.go &gt; out</code> it stops passing <code>stdout</code> to the <code>out</code> file when the client stops.</p>

<p>The client is simple program that sends 10k requests. So in the file I have around 50% of sent packages. When I run the client again, the <code>out</code> file grows again until the client script finishes.</p>

<p>Server code:</p>

<pre><code>package main

import (
  ""net""

  ""fmt""
)

func main() {
  addr, _ := net.ResolveUDPAddr(""udp"", "":2000"")
  sock, _ := net.ListenUDP(""udp"", addr)

  i := 0
  for {
    i++
    buf := make([]byte, 1024)
    rlen, _, err := sock.ReadFromUDP(buf)
    if err != nil {
      fmt.Println(err)
    }
    fmt.Println(string(buf[0:rlen]))
    fmt.Println(i)
    //go handlePacket(buf, rlen)
  }
}
</code></pre>

<p>And here is the client code:</p>

<pre><code>package main

import (
  ""net""

  ""fmt""
)

func main() {

  num := 0
  for i := 0; i &lt; 100; i++ {
    for j := 0; j &lt; 100; j++ {
      num++
      con, _ := net.Dial(""udp"", ""127.0.0.1:2000"")
      fmt.Println(num)
      buf := []byte(""bla bla bla I am the packet"")
      _, err := con.Write(buf)
      if err != nil {
        fmt.Println(err)
      }
    }
  }
}
</code></pre>
","<p>As you suspected, it seems like <strong>UDP packet loss</strong> due to the nature of UDP.  Because UDP is connectionless, the client doesn't care if the server is available or ready to receive data.  So if the server is busy processing, it won't be available to handle the next incoming datagram. You can check with <code>netstat -u</code> (which should include UDP packet loss info).  I ran into the same thing, in which the server (receive side) could not keep up with the packets sent.</p>

<p>You can try two things (the second worked for me with your example):</p>

<p><strong>Call SetReadBuffer.</strong> Ensure the receive socket has enough buffering to handle everything you throw at it.</p>

<pre><code>sock, _ := net.ListenUDP(""udp"", addr)
sock.SetReadBuffer(1048576)
</code></pre>

<p><strong>Do all packet processing in a go routine.</strong>  Try to increase the datagrams per second by ensuring the server isn't busy doing other work when you want it to be available to receive.  i.e. Move the processing work to a go routine, so you don't hold up ReadFromUDP(). </p>

<pre><code>//Reintroduce your go handlePacket(buf, rlen) with a count param
func handlePacket(buf []byte, rlen int, count int)
        fmt.Println(string(buf[0:rlen]))
        fmt.Println(count)
}
</code></pre>

<p>...</p>

<pre><code>go handlePacket(buf, rlen, i)
</code></pre>

<p><em>One final option:</em></p>

<p>Lastly, and probably not what you want, you <strong>put a sleep in your client</strong> which would slow down the rate and would also remove the problem.  e.g. </p>

<pre><code>buf := []byte(""bla bla bla I am the packet"")
time.Sleep(100 * time.Millisecond)
_, err := con.Write(buf)
</code></pre>
","23576771"
"What is the difference between go get and go install?","7853","","<p>After searching and playing with the <code>go</code> tool for a while, it looks like <code>go get</code>:</p>

<ol>
<li>(optionally) download,</li>
<li>compile,</li>
<li>and install</li>
</ol>

<p>a piece of software, while <code>go install</code> simply</p>

<ol>
<li>compile</li>
<li>and install</li>
</ol>

<p>it. In this case, why do the <code>go install</code> command exist, since <code>go get</code> supersedes it?</p>
","<p><code>go install</code> is part of the workflow when working locally. Say you want to use a library, but for some reason a change is required. You would do:</p>

<ul>
<li><code>go get -d library</code>, which only downloads it;</li>
<li>make the change on the downloaded package;</li>
<li><code>go install library</code> to install the local version.</li>
</ul>

<p>As far as I know <code>go get</code> has no flags to indicate it should <em>not</em> download, so it can't replace <code>go install</code> here.</p>

<p>The same workflow is used when you develop a new package from scratch.</p>
","24878851"
"golang map of interface - panic: assignment to entry in nil map","7827","","<p>I am new to golang and I am trying to create a map of type map[string]interface{}.</p>

<p>But when I try to create a new key when it doesn't exists, I get a runtime error ""panic: assignment to entry in nil map"". Can anyone tell me what I am doing wrong please?</p>

<p>Go PlayGround: <a href=""https://play.golang.org/p/vIEE0T11yl"" rel=""nofollow"">https://play.golang.org/p/vIEE0T11yl</a></p>

<p>Here is my code:</p>

<pre><code>package main

func main() {
    buffer := Buffer{}
    buffer.AddRecord(""myKey"", 12345)
}

type Buffer struct {
    records    map[string][]interface{}
}

// ProcessRecord adds a message to the buffer.
func (buffer *Buffer) AddRecord(key string, record interface{}) {
    _, ok := buffer.records[key]
    if !ok {
        buffer.records[key] = make([]interface{}, 0)
    }

    buffer.records[key] = append(buffer.records[key], record)
}
</code></pre>
","<p>You need to initialise the map itself: <a href=""https://play.golang.org/p/wl4mMGjmRP"" rel=""noreferrer"">https://play.golang.org/p/wl4mMGjmRP</a></p>

<pre><code>func (buffer *Buffer) AddRecord(key string, record interface{}) {
    // Check for nil, else initialise the map
    if buffer.records == nil {
        buffer.records = make(map[string][]interface{})
    }
    _, ok := buffer.records[key]
    if !ok {
        buffer.records[key] = make([]interface{}, 0)
    }

    buffer.records[key] = append(buffer.records[key], record)
}
</code></pre>

<p>You could also use a constructor for your struct type - e.g. <code>NewBuffer(...) *Buffer</code> - that initialises the field as well, but it's good practice to check for nil before using it. Same goes for accessing map keys.</p>
","32644336"
"Golang: variable scope inside if statements","7782","","<p>I've just started learning Go today and have got stuck on variable scopes.</p>

<p>I've ultimately confused about how to get around the fact that I can't create a variable inside an if statement and the use it afterward.</p>

<p>This is my code. The problem is that new1 can't be created before the if statement because its size is dependent upon the result of the if statement, and by creating it inside the if statement I can't use it after the if statement ends.</p>

<pre><code>if len(array1)&gt;len(array2) {
    new1 := make([]string,0,len(array1))
    mc := Array2Map_string(array1)
    for _,tok :=range array2 {
        _, ok := mc[tok]
        if ok {
            new1[len(new1)]=tok
            }
        }
    } else {
    new1 := make([]string,0,len(array2))
    mc := Array2Map_string(array2)
    for _,tok :=range array1 {
        _, ok := mc[tok]
        if ok {
            new1[len(new1)]=tok
            }
        }
    }
new2 := make([]string,0,len(new1))
copy(new2, new1)
</code></pre>

<p>The only thing I can think of is to do something like</p>

<pre><code>var pointlessvariable uint
if len(array1)&gt;len(array2) {
pointlessvariable=len(array1)
} else {
pointlessvariable=len(array2)
}
var new1 = make([]string,0,pointlessvariable)
if len(array1)&gt;len(array2) {
...
</code></pre>

<p>To be quite honest if that is truly the solution then I don't think I want to use Golang after all.</p>

<p>So what is the best way of solving this?</p>
","<p>You can declare <code>new1</code> before the <code>if</code> block and use <code>make</code> inside:</p>

<pre><code>var new1 []string

if len(array1)&gt;len(array2) {
    new1 = make([]string, 0, len(array1))
    // instructions ...
} else {
    new1 = make([]string, 0, len(array2))
    // other instructions ...
}

new2 := make([]string, 0, len(new1))
copy(new2, new1)
</code></pre>
","24475215"
"Accessing Nested Map of Type map[string]interface{} in Golang","7761","","<p>So I'm trying to parse a JSON response. It can be multiple levels deep. This is what I did:</p>

<pre><code>var result map[string]interface{}
json.Unmarshal(apiResponse, &amp;result)
</code></pre>

<p><strong>Firstly, is this the right way to do it?</strong></p>

<p>Lets say the response was as follows:</p>

<pre><code>{
  ""args"": {
            ""foo"": ""bar""
          }
}
</code></pre>

<p>To access key <code>foo</code>, I saw a <a href=""http://play.golang.org/p/D2cz2Af4vE"" rel=""nofollow"">playground</a> doing this:</p>

<pre><code>result[""args""].(map[string]interface{})[""foo""]
</code></pre>

<p>Here, what is the <code>.()</code> notation? Is this correct?</p>
","<p>The notation <code>x.(T)</code> is called a <a href=""http://golang.org/ref/spec#Type_assertions"" rel=""noreferrer"">Type Assertion</a>.</p>

<blockquote>
  <p>For an expression <code>x</code> of interface type and a type <code>T</code>, the primary expression <code>x.(T)</code> asserts that <code>x</code> is not <code>nil</code> and that the value stored in <code>x</code> is of type <code>T</code>.</p>
</blockquote>

<p>Your example:</p>

<pre><code>result[""args""].(map[string]interface{})[""foo""]
</code></pre>

<p>It means that the value of your <code>results</code> map associated with key <code>""args""</code> is of type <code>map[string]interface{}</code> (another map with <code>string</code> keys and any values). And you want to access the element of that map associated with the key <code>""foo""</code>.</p>

<p>If you know noting about the input JSON format, then yes, you have to use a generic <code>map[string]interface{}</code> type to process it. If you know the exact structure of the input JSON, you can create a <code>struct</code> to match the expected fields, and doing so you can unmarshal a JSON text into a value of your custom <code>struct</code> type, for example:</p>

<pre><code>type Point struct {
    Name string
    X, Y int
}

func main() {
    in := `{""Name"":""center"",""X"":2,""Y"":3}`

    pt := Point{}
    json.Unmarshal([]byte(in), &amp;pt)

    fmt.Printf(""Result: %+v"", pt)
}
</code></pre>

<p>Output:</p>

<pre><code>Result: {Name:center X:2 Y:3}
</code></pre>

<p>Try it on the <a href=""http://play.golang.org/p/9P3kdq6Cg0"" rel=""noreferrer"">Go Playground</a>.</p>

<h2>Modeling your input</h2>

<p>Your current JSON input could be modelled with this type:</p>

<pre><code>type Data struct {
    Args struct {
        Foo string
    }
}
</code></pre>

<p>And accessing <code>Foo</code> (try it on the <a href=""http://play.golang.org/p/80dWvpwUsH"" rel=""noreferrer"">Go Playground)</a>:</p>

<pre><code>d := Data{}
json.Unmarshal([]byte(in), &amp;d)
fmt.Println(""Foo:"", d.Args.Foo)
</code></pre>
","28807170"
"invalid recursive type in a struct in go","7728","","<p>I am new to the Go programming language and I have an assignment to create and interpreter but I am running into the following problem:</p>

<p>I want to define an Environment as:</p>

<pre><code>type Environment struct{
    parent Environment
    symbol string
    value RCFAEValue
}

func (env Environment) lookup(lookupSymbol string) RCFAEValue{
    if lookupSymbol == env.symbol{
        return env.value
    } //if parent != nill {
        return env.parent.lookup(lookupSymbol)
}
</code></pre>

<p>But I get the error ""invalid recursive type Environment"".  Based on my research I changed the parent to type *Environment. But now when I need to create a new Environment with a var of type Environment it get the error ""cannot use fun_Val.ds (type Environment) as type *Environment in field value"".  I am creating the Environment as follows:</p>

<pre><code>Environment{fun_Val.ds,fun_Val.param,exp.arg_exp.interp(env)}
</code></pre>

<p>I am trying to keep the amount of code in this post to a limit but if you need more, or have other questions please let me know.</p>
","<p>You need to define <code>Environment</code> as:</p>

<pre><code>type Environment struct {
    parent *Environment // note that this is now a pointer
    symbol string
    value  RCFAEValue
}
</code></pre>

<p>Otherwise the compiler has no way to figure out what the size of the Environment structure is. A pointer's size is known, but how big is something that contains itself? (And the inner struct contains itself as well, as does the inner inner struct, and so on.)</p>

<p>Creating the Environment will then look like:</p>

<pre><code>Environment{&amp;fun_Val.ds, fun_Val.param, exp.arg_exp.interp(env)}
</code></pre>
","8261789"
"How does shared memory vs message passing handle large data structures?","7693","","<p>In looking at Go and Erlang's approach to concurrency, I noticed that they both rely on message passing.</p>

<p>This approach obviously alleviates the need for complex locks because there is no shared state.</p>

<p>However, consider the case of many clients wanting parallel read-only access to a single large data structure in memory -- like a suffix array.</p>

<p>My questions:</p>

<ul>
<li><p>Will using shared state be faster and use less memory than message passing, as locks will mostly be unnecessary because the data is read-only, and only needs to exist in a single location?</p></li>
<li><p>How would this problem be approached in a message passing context? Would there be a single process with access to the data structure and clients would simply need to sequentially request data from it? Or, if possible, would the data be chunked to create several processes that hold chunks?</p></li>
<li><p>Given the architecture of modern CPUs &amp; memory, is there much difference between the two solutions -- i.e., can shared memory be read in parallel by multiple cores -- meaning there is no hardware bottleneck that would otherwise make both implementations roughly perform the same?</p></li>
</ul>
","<ul>
<li><p>Yes, shared state could be faster in this case.  But only if you can forgo the locks, and this is only doable if it's absolutely read-only.  if it's 'mostly read-only' then you need a lock (unless you manage to write lock-free structures, be warned that they're even trickier than locks), and then you'd be hard-pressed to make it perform as fast as a good message-passing architecture.</p></li>
<li><p>Yes, you could write a 'server process' to share it. With really lightweight processes, it's no more heavy than writing a small API to access the data.  Think like an object (in OOP sense) that 'owns' the data.  Splitting the data in chunks to enhance parallelism (called 'sharding' in DB circles) helps in big cases (or if the data is on slow storage).</p></li>
<li><p>Even if NUMA is getting mainstream, you still have more and more cores per NUMA cell.  And a big difference is that a message can be passed between just two cores, while a lock has to be flushed from cache on ALL cores, limiting it to the inter-cell bus latency (even slower than RAM access).  If anything, shared-state/locks is getting more and more unfeasible.</p></li>
</ul>

<p>in short.... get used to message passing and server processes, it's all the rage.</p>

<p><strong>Edit</strong>: revisiting this answer, I want to add about a phrase found on Go's documentation:</p>

<blockquote>
  <p>share memory by communicating, don't communicate by sharing memory.</p>
</blockquote>

<p>the idea is: when you have a block of memory shared between threads, the typical way to avoid concurrent access is to use a lock to arbitrate.  The Go style is to pass a message with the reference, a thread only accesses the memory when receiving the message.  It relies on some measure of programmer discipline; but results in very clean-looking code that can be easily proofread, so it's relatively easy to debug.</p>

<p>the advantage is that you don't have to copy big blocks of data on every message, and don't have to effectively flush down caches as on some lock implementations.  It's still somewhat early to say if the style leads to higher performance designs or not.  (specially since current Go runtime is somewhat naive on thread scheduling)</p>
","1798578"
"golang distinguish IPv4 IPv6","7683","","<p>For a program I'm working on, I have to check whether an IP (the IP which connects me to the Internet) is public or private. For that, I need to distinguish if an IP is IPv4 or IPv6. </p>

<p>I wanted to check it by the length of the IP: </p>

<pre><code>conn, err := net.Dial(""udp"", ""8.9.10.11:2342"")
if err != nil {
    fmt.Println(""Error"", err)
}

localaddr := conn.LocalAddr()

addr, _ := net.ResolveUDPAddr(""udp"", localaddr.String())

ip := addr.IP

fmt.Println(ip)
fmt.Println(len(ip))
</code></pre>

<p>Well, my IP is 192.168.2.100, so IPv4, but len(ip) tells me that the length is 16 which would be IPv6. 
What is my mistake? Does any other method exist to distinguish between IPv4 and IPv6 which works always?</p>
","<p>jimt's answer is correct, but fairly complicated. I would simply check <code>ip.To4() != nil</code>. Since the documentation says ""if ip is not an IPv4 address, To4 returns nil"" this condition should return <code>true</code> if and only if the address is an IPv4 address.</p>
","22752227"
"Marshal of json.RawMessage","7682","","<p>Please find the code here <a href=""http://play.golang.org/p/zdQ14ItNBZ"" rel=""nofollow noreferrer"">http://play.golang.org/p/zdQ14ItNBZ</a></p>

<p>I am keeping JSON data as RawMessage, but cannot decode it out. I need the containing struct to be Marshalled and Unmarshalled, but I would expect still be able to get the JSON field.</p>

<h2>code:</h2>

<pre><code>package main

import (
    ""encoding/json""
    ""fmt""
)

type Data struct {
    Name string
    Id   int
    Json json.RawMessage
}
type Data2 struct {
    Name string
    Id   int
}


func main() {

    tmp := Data2{""World"", 2}

    b, err := json.Marshal(tmp)
    if err != nil {
        fmt.Println(""Error %s"", err.Error())
    }
    fmt.Println(""b %s"", string(b))

    test := Data{""Hello"", 1, b}
    b2, err := json.Marshal(test)
    if err != nil {
        fmt.Println(""Error %s"", err.Error())
    }

    fmt.Println(""b2 %s"", string(b2))

    var d Data
    err = json.Unmarshal(b2, &amp;d)
    if err != nil {
        fmt.Println(""Error %s"", err.Error())
    }
    fmt.Println(""d.Json %s"", string(d.Json))

    var tmp2 Data2
    err = json.Unmarshal(d.Json, &amp;tmp2)
    if err != nil {
        fmt.Println(""Error %s"", err.Error())
    }
    fmt.Println(""Data2 %+v"", tmp2)

}
</code></pre>

<h2>out:</h2>

<pre><code>b %s {""Name"":""World"",""Id"":2}
b2 %s {""Name"":""Hello"",""Id"":1,""Json"":""eyJOYW1lIjoiV29ybGQiLCJJZCI6Mn0=""}
d.Json %s ""eyJOYW1lIjoiV29ybGQiLCJJZCI6Mn0=""
Error %s json: cannot unmarshal string into Go value of type main.Data2
Data2 %+v { 0}
</code></pre>
","<p>the methods on json.RawMessage all take a pointer receiver, which is why you're not able to utilize any of them; you don't have a pointer.</p>

<p>This ""works"" in the sense that it executes, but this is likely not the strategy that you want:   <a href=""http://play.golang.org/p/jYvh8nHata"" rel=""noreferrer"">http://play.golang.org/p/jYvh8nHata</a></p>

<p>basically you need this:</p>

<pre><code>type Data struct {
    Name string
    Id   int
    Json *json.RawMessage
}
</code></pre>

<p>and then propagate that change through the rest of your program.  What... what are you actually trying to do?</p>
","19145377"
"How am I meant to use Filepath.Walk in Go?","7670","","<p>The <code>filepath.Walk</code> function takes a function callback. This is straight function with no context pointer. Surely a major use case for <code>Walk</code> is to walk a directory and take some action based on it, with reference to a wider context (e.g. entering each file into a table).</p>

<p>If I were writing this in C# I would use an object (with fields that could point back to the objects in the context) as a callback (with a given callback method) on it so the object can encapsulate the context that <code>Walk</code> is called from.</p>

<p>(EDIT: user ""<a href=""https://stackoverflow.com/users/122718/usr"">usr</a>"" suggests that the closure method occurs in C# too)</p>

<p>If I were writing this in C I'd ask for a function and a context pointer as a <code>void *</code> so the function has a context pointer that it can pass into the <code>Walk</code> function and get that passed through to the callback function.</p>

<p>But Go only has the function argument and no obvious context pointer argument.</p>

<p>(If I'd designed this function I would have taken an object as a callback rather than a function, conforming to the interface <code>FileWalkerCallback</code> or whatever, and put a <code>callback(...)</code> method on that interface. The consumer could then attach whatever context to the object before passing it to <code>Walk</code>.)</p>

<p>The only way I can think of doing it is by capturing the closure of the outer function in the callback function. Here is how I am using it:</p>

<pre><code>func ScanAllFiles(location string, myStorageThing *StorageThing) (err error) {
    numScanned = 0

    // Wrap this up in this function's closure to capture the `corpus` binding.
    var scan = func(path string, fileInfo os.FileInfo, inpErr error) (err error) {
        numScanned ++

        myStorageThing.DoSomething(path)
    }

    fmt.Println(""Scan All"")

    err = filepath.Walk(location, scan)

    fmt.Println(""Total scanned"", numScanned)

    return
}
</code></pre>

<p>In this example I create the callback function so its closure contains the variables <code>numScanned</code> and <code>myStorageThing</code>.</p>

<p>This feels wrong to me. Am I right to think it feels weird, or am I just getting used to writing Go? How is it intended for the <code>filepath.Walk</code> method to be used in such a way that the callback has a reference to a wider context?</p>
","<p>You're doing it about right.  There are two little variations you might consider.  One is that you can replace the name of an unused parameter with an underbar.  So, in your example where you only used the path, the signature could read</p>

<pre><code>func(path string, _ os.FileInfo, _ error) error
</code></pre>

<p>It saves a little typing, cleans up the code a little, and makes it clear that you are not using the parameter.  Also, for small functions especially, it's common skip assigning the function literal to a variable, and just use it directly as the argument.  Your code ends up reading,</p>

<pre><code>err = filepath.Walk(location, func(path string, _ os.FileInfo, _ error) error {
    numScanned ++

    myStorageThing.DoSomething(path)
})
</code></pre>

<p>This cleans up scoping a little, making it clear that you are using the closure just once.</p>
","11348672"
"Golang converting string to specific type of int (int8,int16,int32,int64)","7635","","<p>I am trying to parse string into integer in go-lang. The Problem I found with it is in the documentation its mentioned syntax is as follows:</p>

<pre><code>ParseInt(s string, base int, bitSize int)
</code></pre>

<p>where, <code>s</code> is the string to be parsed, <code>base</code> is implied by the string's prefix: base 16 for ""0x"", base 8 for ""0"", and base 10 otherwise. </p>

<p>The <strong><code>bitSize</code></strong> parameter is where I am facing problem. As per documentation of <a href=""http://golang.org/pkg/strconv/#ParseInt"" rel=""noreferrer"">ParseInt</a>, it specifies the integer type that the result must fit into. Bit sizes 0, 8, 16, 32, and 64 correspond to int, int8, int16, int32, and int64.</p>

<p>But for all the values like 0,8,16,32 &amp; 64. I am getting same type return value. i.e of int64 type. </p>

<p>Could anyone point me out what am I missing.</p>

<p>Code:  <a href=""https://play.golang.org/p/F3LbUh_maY"" rel=""noreferrer"">https://play.golang.org/p/F3LbUh_maY</a></p>
","<p>As per <a href=""http://golang.org/pkg/strconv/#ParseInt"">documentation</a></p>

<blockquote>
  <p>func ParseInt(s string, base int, bitSize int) (i int64, err error)</p>
</blockquote>

<p>ParseInt always return <code>int64</code> no matter what. Moreover</p>

<blockquote>
  <p>The bitSize argument specifies the integer type that the result must
  fit into</p>
</blockquote>

<p>So basically the your <code>bitSize</code> parameter only tells that the string value that you are going to parse should fit the bitSize after parsing. If not, out of range will happen.</p>

<p>Like in this <kbd><a href=""https://play.golang.org/p/4St_EVhgNq"">PlayGround</a></kbd>:  <code>strconv.ParseInt(""192"", 10, 8)</code> (as you see the value after the parsing would be bigger than maximum value of <code>int8</code>).</p>

<p>If you want to parse it to whatever value you need, just use <code>int8(i)</code> afterwards (<code>int8</code>, <code>int16</code>, <code>int32</code>).</p>

<p><strong>P.S.</strong> because you touched the topic how to convert to specific intX, I would outline that it is also possible to convert to <a href=""http://golang.org/pkg/strconv/#ParseUint"">unsigned int</a>.</p>
","30299937"
"Golang io.copy twice on the request body","7600","","<p>I am building a blob storage system and i picked Go as the programming language.
I create a stream to do a multipart file upload from client to the blob server.</p>

<p>The stream works fine, but i want to make a sha1 hash from the request body. I need to io.Copy the body twice. The sha1 gets created but the multipart streams 0 bytes after that.</p>

<ol>
<li>For creating the hash</li>
<li>For streaming the body as multipart</li>
</ol>

<p>any idea how i can do this?</p>

<p>the client upload</p>

<pre><code>func (c *Client) Upload(h *UploadHandle) (*PutResult, error) {
body, bodySize, err := h.Read()
if err != nil {
    return nil, err
}

// Creating a sha1 hash from the bytes of body
dropRef, err := drop.Sha1FromReader(body)
if err != nil {
    return nil, err
}

bodyReader, bodyWriter := io.Pipe()
writer := multipart.NewWriter(bodyWriter)

errChan := make(chan error, 1)
go func() {
    defer bodyWriter.Close()
    part, err := writer.CreateFormFile(dropRef, dropRef)
    if err != nil {
        errChan &lt;- err
        return
    }
    if _, err := io.Copy(part, body); err != nil {
        errChan &lt;- err
        return
    }
    if err = writer.Close(); err != nil {
        errChan &lt;- err
    }
}()

req, err := http.NewRequest(""POST"", c.Server+""/drops/upload"", bodyReader)
req.Header.Add(""Content-Type"", writer.FormDataContentType())
resp, err := c.Do(req)
if err != nil {
    return nil, err
}
  .....
 }
</code></pre>

<p>the sha1 func</p>

<pre><code>func Sha1FromReader(src io.Reader) (string, error) {
hash := sha1.New()
_, err := io.Copy(hash, src)
if err != nil {
    return """", err
}
return hex.EncodeToString(hash.Sum(nil)), nil
</code></pre>

<p>}</p>

<p>upload handle</p>

<pre><code>func (h *UploadHandle) Read() (io.Reader, int64, error) {
var b bytes.Buffer

hw := &amp;Hasher{&amp;b, sha1.New()}
n, err := io.Copy(hw, h.Contents)

if err != nil {
    return nil, 0, err
}

return &amp;b, n, nil
</code></pre>

<p>}</p>
","<p>You can't do that directly but you can write a wrapper that does the hashing on io.Copy</p>

<pre><code>// this works for either a reader or writer, 
//  but if you use both in the same time the hash will be wrong.
type Hasher struct {
    io.Writer
    io.Reader
    hash.Hash
    Size uint64
}

func (h *Hasher) Write(p []byte) (n int, err error) {
    n, err = h.Writer.Write(p)
    h.Hash.Write(p)
    h.Size += uint64(n)
    return
}

func (h *Hasher) Read(p []byte) (n int, err error) {
    n, err = h.Reader.Read(p)
    h.Hash.Write(p[:n]) //on error n is gonna be 0 so this is still safe.
    return
}

func (h *Hasher) Sum() string {
    return hex.EncodeToString(h.Hash.Sum(nil))
}

func (h *UploadHandle) Read() (io.Reader, string, int64, error) {
    var b bytes.Buffer

    hashedReader := &amp;Hasher{Reader: h.Contents, Hash: sha1.New()}
    n, err := io.Copy(&amp;b, hashedReader)

    if err != nil {
        return nil, """", 0, err
    }

    return &amp;b, hashedReader.Sum(), n, nil
}
</code></pre>

<p>// updated version based on @Dustin's comment since I complete forgot <code>io.TeeReader</code> existed. </p>

<pre><code>func (h *UploadHandle) Read() (io.Reader, string, int64, error) {
    var b bytes.Buffer

    hash := sha1.New()
    n, err := io.Copy(&amp;b, io.TeeReader(h.Contents, hash))

    if err != nil {
        return nil, """", 0, err
    }

    return &amp;b, hex.EncodeToString(hash.Sum(nil)), n, nil
}
</code></pre>
","25671673"
"Value receiver vs. Pointer receiver in Golang?","7584","","<p>It is very unclear for me in which case I would want to use a value receiver instead of always using a pointer receiver.<br>
To recap from the docs:</p>

<pre><code>type T struct {
    a int
}
func (tv  T) Mv(a int) int         { return 0 }  // value receiver
func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver
</code></pre>

<p>The <strong>docs</strong> says also ""For types such as basic types, slices, and small structs, a value receiver is very cheap so unless the semantics of the method requires a pointer, a value receiver is efficient and clear.""</p>

<p><strong>First point</strong> it says it is ""very cheap"", but the question is more is it cheaper then pointer receiver. So I made a small benchmark <a href=""https://gist.github.com/chrisport/f28674850ffc3d9238f8"" rel=""nofollow noreferrer"">(code on gist)</a> which showed me, that pointer receiver is faster even for a struct that has only one string field. These are the results:</p>

<pre><code>// Struct one empty string property
BenchmarkChangePointerReceiver  2000000000               0.36 ns/op
BenchmarkChangeItValueReceiver  500000000                3.62 ns/op


// Struct one zero int property
BenchmarkChangePointerReceiver  2000000000               0.36 ns/op
BenchmarkChangeItValueReceiver  2000000000               0.36 ns/op
</code></pre>

<p><em>(Edit: Please note that second point became invalid in newer go versions, see comments)</em> .<br>
<strong>Second point</strong> it says, it is ""efficient and clear"" which is more a matter of taste, isn't it? Personally I prefer consistency by using everywhere same way. Efficiency in what sense? performance wise it seems pointer are almost always more efficient. Few test-runs with one int property showed minimal advantage of Value receiver (range of 0.01-0.1 ns/op)</p>

<p>Can someone tell me a case where a value receiver clearly makes more sense then a pointer receiver? Or am I doing something wrong in the benchmark, did I overlooked other factors?</p>
","<p>Note that <a href=""http://golang.org/doc/faq#methods_on_values_or_pointers"">the FAQ does mention consistency</a></p>

<blockquote>
  <p>Next is consistency. If some of the methods of the type must have pointer receivers, the rest should too, so the method set is consistent regardless of how the type is used. See the <a href=""http://golang.org/doc/faq#different_method_sets"">section on method set</a>s for details. </p>
</blockquote>

<p>As mentioned <a href=""http://grokbase.com/t/gg/golang-nuts/1478q5p81c/go-nuts-making-a-copy-of-a-pointer-receiver"">in this thread</a>:</p>

<blockquote>
  <p>The rule about pointers vs. values for receivers is that value methods can
  be invoked on pointers and values, but pointer methods can only be invoked
  on pointers</p>
</blockquote>

<p>Now:</p>

<blockquote>
  <p>Can someone tell me a case where a value receiver clearly makes more sense then a pointer receiver?</p>
</blockquote>

<p>The <a href=""https://github.com/golang/go/wiki/CodeReviewComments#receiver-type"">Code Review comment</a> can help:</p>

<blockquote>
  <ul>
  <li>If the receiver is a map, func or chan, don't use a pointer to it.</li>
  <li>If the receiver is a slice and the method doesn't reslice or reallocate the slice, don't use a pointer to it.</li>
  <li>If the method needs to mutate the receiver, the receiver must be a pointer.</li>
  <li>If the receiver is a struct that contains a <code>sync.Mutex</code> or similar synchronizing field, the receiver must be a pointer to avoid copying.</li>
  <li>If the receiver is a large struct or array, a pointer receiver is more efficient. How large is large? Assume it's equivalent to passing all its elements as arguments to the method. If that feels too large, it's also too large for the receiver.</li>
  <li>Can function or methods, either concurrently or when called from this method, be mutating the receiver? A value type creates a copy of the receiver when the method is invoked, so outside updates will not be applied to this receiver. If changes must be visible in the original receiver, the receiver must be a pointer.</li>
  <li>If the receiver is a struct, array or slice and any of its elements is a pointer to something that might be mutating, prefer a pointer receiver, as it will make the intention more clear to the reader.</li>
  <li><strong>If the receiver is a small array or struct that is naturally a value type</strong> (for instance, something like the <code>time.Time</code> type), with no mutable fields and no pointers, or is just a simple basic type such as int or string, <strong>a value receiver makes sense</strong>.<br>
  <strong>A value receiver can reduce the amount of garbage that can be generated; if a value is passed to a value method, an on-stack copy can be used instead of allocating on the heap.</strong> (The compiler tries to be smart about avoiding this allocation, but it can't always succeed.) Don't choose a value receiver type for this reason without profiling first.</li>
  <li>Finally, when in doubt, use a pointer receiver.</li>
  </ul>
</blockquote>

<p>The part in bold is found for instance in <a href=""https://github.com/golang/go/blob/a1053ed6107a8301a62be9d1f2da8fa387bfefea/src/net/http/server.go#L713-L718""><code>net/http/server.go#Write()</code></a>:</p>

<pre><code>// Write writes the headers described in h to w.
//
// This method has a value receiver, despite the somewhat large size
// of h, because it prevents an allocation. The escape analysis isn't
// smart enough to realize this function doesn't mutate h.
func (h extraHeader) Write(w *bufio.Writer) {
...
}
</code></pre>
","27775558"
"Efficient read and write CSV in Go","7574","","<p>The Go code below reads in a 10,000 record CSV (of timestamp <code>times</code> and float <code>values</code>), runs some operations on the data, and then writes the original values to another CSV along with an additional column for <code>score</code>. However it is terribly slow (i.e. hours, but most of that is <code>calculateStuff()</code>) and I'm curious if there are any inefficiencies in the CSV reading/writing I can take care of.</p>

<pre><code>package main

import (
  ""encoding/csv""
  ""log""
  ""os""
  ""strconv""
)

func ReadCSV(filepath string) ([][]string, error) {
  csvfile, err := os.Open(filepath)

  if err != nil {
    return nil, err
  }
  defer csvfile.Close()

  reader := csv.NewReader(csvfile)
  fields, err := reader.ReadAll()

  return fields, nil
}

func main() {
  // load data csv
  records, err := ReadCSV(""./path/to/datafile.csv"")
  if err != nil {
    log.Fatal(err)
  }

  // write results to a new csv
  outfile, err := os.Create(""./where/to/write/resultsfile.csv""))
  if err != nil {
    log.Fatal(""Unable to open output"")
  }
  defer outfile.Close()
  writer := csv.NewWriter(outfile)

  for i, record := range records {
    time := record[0]
    value := record[1]

    // skip header row
    if i == 0 {
      writer.Write([]string{time, value, ""score""})
      continue
    }

    // get float values
    floatValue, err := strconv.ParseFloat(value, 64)
    if err != nil {
      log.Fatal(""Record: %v, Error: %v"", floatValue, err)
    }

    // calculate scores; THIS EXTERNAL METHOD CANNOT BE CHANGED
    score := calculateStuff(floatValue)

    valueString := strconv.FormatFloat(floatValue, 'f', 8, 64)
    scoreString := strconv.FormatFloat(prob, 'f', 8, 64)
    //fmt.Printf(""Result: %v\n"", []string{time, valueString, scoreString})

    writer.Write([]string{time, valueString, scoreString})
  }

  writer.Flush()
}
</code></pre>

<p>I'm looking for help making this CSV read/write template code as fast as possible. For the scope of this question we need not worry about the <code>calculateStuff</code> method.</p>
","<p>First you're loading the file in memory first then processing it, that can be slow with a big file.</p>

<p>You need loop and call <code>.Read</code> and process one line at a time.</p>

<pre><code>func processCSV(rc io.Reader) (ch chan []string) {
    ch = make(chan []string, 10)
    go func() {
        r := csv.NewReader(rc)
        if _, err := r.Read(); err != nil { //read header
            log.Fatal(err)
        }
        defer close(ch)
        for {
            rec, err := r.Read()
            if err != nil {
                if err == io.EOF {
                    break
                }
                log.Fatal(err)

            }
            ch &lt;- rec
        }
    }()
    return
}
</code></pre>

<p><a href=""https://play.golang.org/p/GoRVXp05cm"" rel=""noreferrer""><kbd>playground</kbd></a></p>

<p>//note it's roughly based on DaveC's comment.</p>
","32028290"
"Go failing - expected 'package', found 'EOF'","7570","","<p>I've been having a hard time trying to execute a simple golang program in a virtual machine powered by vagrant.
These are the relevant fields of my <code>go env</code>:</p>

<pre><code>GOARCH=""amd64""
GOPATH=""/usr/local/src/go""
GOROOT=""/usr/local/go""
GOTOOLDIR=""/usr/local/go/pkg/tool/linux_amd64""
</code></pre>

<p>This is the program I'm trying to execute ( located in /usr/local/src/go/program ):</p>

<pre><code>package program

import (
    ""fmt""
)

func main() {
    fmt.Print(""Aloha"")
}
</code></pre>

<p>This, the output that I get:</p>

<pre><code>main.go:4:5:
/usr/local/go/src/fmt/doc.go:1:1: expected 'package', found 'EOF'
package runtime:
/usr/local/go/src/runtime/alg.go:1:1: expected 'package', found 'EOF'
</code></pre>

<p>Take into account that this is a completely fake program. The weird thing is that it totally works in a different environment.
What am I missing here?</p>

<p>Thanks a lot!</p>
","<p>The problem wasn't neither with <code>GOROOT</code> nor <code>GOPATH</code>. The go installation failed at some point, leaving the whole thing unstable ( files created but completely empty ). When provisioning the virtual machine again, the go module checked whether the files existed. As they did, it took by granted that the installation had already take place.</p>

<p>A clean up and fresh installation from scratch solved the problem.</p>
","31112032"
"Most idiomatic way to select elements from an array in Golang?","7570","","<p>I have an array of strings, and I'd like to exclude values that start in <code>foo_</code> OR are longer than 7 characters.</p>

<p>I can loop through each element, run the <code>if</code> statement, and add it to a slice along the way. But I was curious if there was an idiomatic or more golang-like way of accomplishing that.</p>

<p>Just for example, the same thing might be done in Ruby as</p>

<pre><code>my_array.select! { |val| val !~ /^foo_/ &amp;&amp; val.length &lt;= 7 }
</code></pre>
","<p>There is no one-liner as you have it in Ruby, but with a helper function you can make it almost as short.</p>

<p>Here's our helper function that loops over a slice, and selects and returns only the elements that meet a criteria captured by a function value:</p>

<pre><code>func choose(ss []string, test func(string) bool) (ret []string) {
    for _, s := range ss {
        if test(s) {
            ret = append(ret, s)
        }
    }
    return
}
</code></pre>

<p>Using this helper function your task:</p>

<pre><code>ss := []string{""foo_1"", ""asdf"", ""loooooooong"", ""nfoo_1"", ""foo_2""}

mytest := func(s string) bool { return !strings.HasPrefix(s, ""foo_"") &amp;&amp; len(s) &lt;= 7 }
s2 := choose(ss, mytest)

fmt.Println(s2)
</code></pre>

<p>Output (try it on the <a href=""https://play.golang.org/p/FwgTVykXiT"" rel=""noreferrer"">Go Playground</a>):</p>

<pre><code>[asdf nfoo_1]
</code></pre>

<p><strong>Note:</strong></p>

<p>If it is expected that many elements will be selected, it might be profitable to allocate a ""big"" <code>ret</code> slice beforehand, and use simple assignment instead of the <code>append()</code>. And before returning, slice the <code>ret</code> to have a length equal to the number of selected elements.</p>

<p><strong>Note #2:</strong></p>

<p>In my example I chose a <code>test()</code> function which tells if an element is to be returned. So I had to invert your ""exclusion"" condition. Obviously you may write the helper function to expect a tester function which tells what to exclude (and not what to include).</p>
","37563128"
"Android App from Go programming language","7560","","<p>I am hearing buzzes about Go programming language from google. Wikipedia describes it like this: ""Go aims to provide the efficiency of a statically-typed compiled language with the ease of programming of a dynamic language"". I was thinking that since it is a language from the maker of android, they should have some support for creating android Apps. Is there any tool to create android App from Go? Is Go worthy language to learn with an assumption that ""SOMEDAY"" android might be based on GO.</p>
","<p>There's currently no way to build Android apps with Go, and some hypothetical future version of Android isn't a good reason to invest time in Go today.</p>

<p>That said, Go <em>is</em> a great language, you can do a lot with it like write webservers, command line apps, and even AppEngine apps.  So there's lots of good reasons to learn Go!  But Android isn't one of them.</p>

<p><strong>Edit</strong>:
As of Go 1.5 it is possible to write Android apps completely in Go or as a Java app calling a Go JNI library. iOS is also expected to arrive in time for the final 1.5 release. Go to <a href=""https://github.com/golang/mobile"" rel=""nofollow"">https://github.com/golang/mobile</a> for more details.</p>
","10095809"
"List of currently running process in Go","7551","","<p>How can I get the list of currently running processes in Go?</p>

<p>The OS package provides some functions: <a href=""http://golang.org/pkg/os/"" rel=""nofollow noreferrer"">http://golang.org/pkg/os/</a>
but doesn't give anything to see the list of running processes.</p>
","<p>There is no such function in the standard library and most likely never will be.</p>

<p>In most cases, the list of processes isn't required by programs. Go programs usually want to wait for a single or a smaller number of processes, not for all processes. PIDs of processes are usually obtained by other means than searching the list of all processes.</p>

<p>If you are on Linux, the list of processes can be obtained by reading contents of <code>/proc</code> directory. See question <a href=""https://stackoverflow.com/questions/939778/linux-api-to-list-running-processes"">Linux API to list running processes?</a></p>
","9034542"
"golang test temp directory","7550","","<p>I have a simple function which parses a config file as JSON.  I want to write a test which either uses some sample static config files and parses them, or creates the samples during the test and tries to parse them.</p>

<p>It's not entirely necessary to the question, but here is the basic code:</p>

<pre><code>// config.go

// ...(package,imports)...

// Overall settings - corresponds to main.conf
type MainSettings struct {
    // stuff
}

// Load main.conf from the specified file path
func LoadMainSettings(path string) (*MainSettings, error) {

    b, err := ioutil.ReadFile(path)
    if err != nil { return nil, err }

    r := &amp;MainSettings{}
    err = json.Unmarshal(b, r)
    if err != nil { return nil, err }

    return r, nil

}
</code></pre>

<p>and the test:</p>

<pre><code>// config_test.go

func TestLoadMainSettings(t *testing.T) {

    // possibly generate some example config files,
    // or use static samples packaged with the source

    s, err := LoadMainSettings(""conf/main.conf"") // &lt;-- what should this path be??
    if err != nil { panic(err) }

    // more sanity checking...

}
</code></pre>

<hr>

<p>That said, my specific questions are:</p>

<ul>
<li>Is there a proper place for static assets (like sample config files) that are only applicable to tests?</li>
<li>During test execution is there a proper (cross platform, gets cleaned up with 'go clean') location to write out temporary files?</li>
</ul>

<p>(Note: I run most of my stuff on Linux for staging and production and Mac for local dev - so using /tmp/ as a temp dir for tests works for me in practice.  But was wondering if there's a better way...)</p>

<hr>

<p><strong>EDIT:</strong> Ended up using this approach for the test:</p>

<pre><code>f, err := ioutil.TempFile("""", ""testmainconf"")
if err != nil { panic(err) }
defer syscall.Unlink(f.Name())
ioutil.WriteFile(f.Name(), []byte(""{...sample config data...}""), 0644)

s, err := LoadMainSettings(f.Name())
</code></pre>

<p>But the other suggestion of making LoadMainSettings accept an <code>io.Reader</code> instead of a <code>string</code> is also a good idea. </p>
","<p>Just to compare vs. what you have with <code>ioutil.TempDir</code>, here's what things look like with <code>io.Reader</code>:</p>

<pre><code>// Load main.conf from the specified file path
func LoadMainSettings(src io.Reader) (*MainSettings, error) {
    b, err := ioutil.ReadAll(src)
    if err != nil { return nil, err }

    r := &amp;MainSettings{}
    err = json.Unmarshal(b, r)
    if err != nil { return nil, err }

    return r, nil
}
</code></pre>

<p>Specifically, we change the argument from a <code>path</code> string to a <code>src</code> <code>io.Reader</code> instance, and we replace the <code>ioutil.ReadFile</code> with an <code>ioutil.ReadAll</code>.</p>

<p>The test case that you've written then ends up being a bit shorter precisely because we can dispense with file operations:</p>

<pre><code>s, err := LoadMainSettings(strings.NewReader(""{...sample config data...}""))
</code></pre>
","19086748"
"Typed constant declaration list","7550","","<p>I wish to create an ""enum-like"" list of constants with the following properties:</p>

<ol>
<li>The values of each identifier are sequential, with a few gaps. (I believe iota and the blank identifier help in this regard).</li>
<li>The identifiers are private to the module.</li>
<li>The constants can only be compared with other constants of the same type.</li>
</ol>

<p>The enumeration is based on the <a href=""http://fuse.git.sourceforge.net/git/gitweb.cgi?p=fuse/fuse;a=blob;f=include/fuse_kernel.h;h=c7c99a5e0838611148ac88d4e714bfd9e89e1748;hb=HEAD#l250"" rel=""nofollow""><code>enum fuse_opcode</code></a> from <a href=""http://fuse.sourceforge.net/"" rel=""nofollow"">FUSE</a>. Here's some code for what I'm trying to accomplish (and also very wrong):</p>

<pre><code>const Opcode (
    _ = iota // skip 0
    lookupOp
    forgetOp
    getattrOp
    setattrOp
    readlinkOp
    symlinkOp // 6
    _ // skip 7
    mknodOp // 8
    // et cetera ad nauseam
)
</code></pre>
","<p>Here's the Go code for the FUSE opcodes. It was created from <a href=""http://fuse.git.sourceforge.net/git/gitweb.cgi?p=fuse/fuse;a=blob;f=include/fuse_kernel.h;h=c7c99a5e0838611148ac88d4e714bfd9e89e1748;hb=HEAD#l250"" rel=""nofollow"">enum fuse_opcode</a>. Typically you would write a script to do that; I used a text editor. Since the constant values match the C enum values, explicit values are used.</p>

<pre><code>package fuse

type opCode int32

const (
    opLookup      = 1
    opForget      = 2
    opGetattr     = 3
    opSetattr     = 4
    opReadlink    = 5
    opSymlink     = 6
    opMknod       = 8
    opMkdir       = 9
    opUnlink      = 10
    opRmdir       = 11
    opRename      = 12
    opLink        = 13
    opOpen        = 14
    opRead        = 15
    opWrite       = 16
    opStatfs      = 17
    opRelease     = 18
    opFsync       = 20
    opSetxattr    = 21
    opGetxattr    = 22
    opListxattr   = 23
    opRemovexattr = 24
    opFlush       = 25
    opInit        = 26
    opOpendir     = 27
    opReaddir     = 28
    opReleasedir  = 29
    opFsyncdir    = 30
    opGetlk       = 31
    opSetlk       = 32
    opSetlkw      = 33
    opAccess      = 34
    opCreate      = 35
    opInterrupt   = 36
    opBmap        = 37
    opDestroy     = 38
    opIoctl       = 39
    opPoll        = 40
    opNotifyReply = 41
)
</code></pre>
","5037931"
"Importing local library and files in an application","7539","","<p>I'm new to Go (but not at programming), I love the language but I have a bit of trouble fully understanding the way I'm supposed to make internal libraries in an application through packages. For reference, getting external packages and then importing/using them is fine.</p>

<p>Let's say I'm making an application A.</p>

<pre><code>/home/me/A/a.go (package main)
</code></pre>

<p>Then, I realize a.go start to be rather big, so I cut it into two parts</p>

<pre><code>/home/me/A/a.go (package main)
/home/me/A/b.go (package main)
</code></pre>

<p>How am I supposed to import/include b.go from a.go to make its function available ? </p>

<p>As a continuation of the question, in the A I'm manipulation lots of objects O, so I figure it would be a lot better if I just give them their own package and encapsulate the functionalities in a public/exported api. How do I do that ?</p>

<p>I've tried creating <code>./lib/o.go</code> (package o) and <code>import lib/o</code> but I keep getting error like</p>

<pre><code>./a.go:6: imported and not used: ""o""
./a.go:43: undefined: o
</code></pre>

<p>I have no GOPATH in my env but I tried <code>export GOPATH=$GOPATH:/home/me/A</code> and it didn't change the result.</p>

<p>I've tried to read the article on ""go layout"" but it felt a bit too overwhelming at once and  I would really love a simpler explanation of that one ""small"" step I am trying to make</p>

<p>Thanks !</p>

<p>GOPATH/src/me/a/a.go:</p>

<pre><code>package main

func main() {
        test()
}
</code></pre>

<p>GOPATH/src/me/a/test.go:</p>

<pre><code>package main

import ""fmt""

func test() {
        fmt.Println(""test func !"")
}
</code></pre>

<p>Exec:</p>

<pre><code>$ go run a.go 
# command-line-arguments 
./a.go:4: undefined: test
</code></pre>

<p>EDIT: got my answer here: <a href=""https://groups.google.com/forum/?fromgroups#!topic/golang-nuts/qysy2bM_o1I"">https://groups.google.com/forum/?fromgroups#!topic/golang-nuts/qysy2bM_o1I</a></p>

<p>Either list all files in go run (<code>go run a.go test.go</code>) or use <code>go build</code> and run the resulting executable.</p>
","<p>You're trying to use the Go build system while not following the necessaary required directory layouts. You will benefit a lot from reading <a href=""http://golang.org/doc/code.html"" rel=""nofollow"">this document</a>.</p>

<p>In short, these are, wrt the go tool, the show stoppers:</p>

<ul>
<li><p>You <em>must</em> have a valid, exported GOPATH</p></li>
<li><p>Package files with import path ""example/foo"" <em>must</em> be located in the <code>$GOPATH/src/example/foo</code> directory.</p></li>
</ul>

<p>For more details please see the above linked article.</p>
","16760286"
"Golang converting from rune to string","7537","","<p>I have the following code, it is supposed to cast a <code>rune</code> into a <code>string</code> and print it. However, I am getting undefined characters when it is printed. I am unable to figure out where the bug is:</p>

<pre><code>package main

import (
    ""fmt""
    ""strconv""
    ""strings""
    ""text/scanner""
)

func main() {
    var b scanner.Scanner
    const a = `a`
    b.Init(strings.NewReader(a))
    c := b.Scan()
    fmt.Println(strconv.QuoteRune(c))
}
</code></pre>
","<p>That's because you used <a href=""https://golang.org/pkg/text/scanner/#Scanner.Scan"" rel=""noreferrer""><code>Scanner.Scan()</code></a> to read a <code>rune</code> but it does something else. <code>Scanner.Scan()</code> can be used to read <em>tokens</em> or <code>rune</code>s of special tokens controlled by the <code>Scanner.Mode</code> bitmask, and it returns special constants form the <a href=""https://golang.org/pkg/text/scanner/"" rel=""noreferrer""><code>text/scanner</code></a> package, not the read rune itself.</p>

<p>To read a single <code>rune</code> use <a href=""https://golang.org/pkg/text/scanner/#Scanner.Next"" rel=""noreferrer""><code>Scanner.Next()</code></a> instead:</p>

<pre><code>c := b.Next()
fmt.Println(c, string(c), strconv.QuoteRune(c))
</code></pre>

<p>Output:</p>

<pre><code>97 a 'a'
</code></pre>

<p>If you just want to convert a single <code>rune</code> to <code>string</code>, use a simple type <a href=""https://golang.org/ref/spec#Conversions"" rel=""noreferrer"">conversion</a>. <code>rune</code> is alias for <code>int32</code>, and converting integer numbers to <code>string</code>:</p>

<blockquote>
  <p>Converting a signed or unsigned integer value to a string type yields a string containing the UTF-8 representation of the integer.</p>
</blockquote>

<p>So:</p>

<pre><code>r := rune('a')
fmt.Println(r, string(r))
</code></pre>

<p>Outputs:</p>

<pre><code>97 a
</code></pre>

<p>Also to loop over the runes of a <code>string</code> value, you can simply use the <code>for ... range</code> construct:</p>

<pre><code>for i, r := range ""abc"" {
    fmt.Printf(""%d - %c (%v)\n"", i, r, r)
}
</code></pre>

<p>Output:</p>

<pre><code>0 - a (97)
1 - b (98)
2 - c (99)
</code></pre>

<p>Or you can simply convert a <code>string</code> value to <code>[]rune</code>:</p>

<pre><code>fmt.Println([]rune(""abc"")) // Output: [97 98 99]
</code></pre>

<p>There is also <a href=""https://golang.org/pkg/unicode/utf8/#DecodeRuneInString"" rel=""noreferrer""><code>utf8.DecodeRuneInString()</code></a>.</p>

<p>Try the examples on the <a href=""https://play.golang.org/p/y6_yDVtoQJ"" rel=""noreferrer"">Go Playground</a>.</p>

<p><strong>Note:</strong></p>

<p>Your original code (using <code>Scanner.Scan()</code>) works like this:</p>

<ol>
<li>You called <a href=""https://golang.org/pkg/text/scanner/#Scanner.Init"" rel=""noreferrer""><code>Scanner.Init()</code></a> which sets the Mode (<code>b.Mode</code>) to <code>scanner.GoTokens</code>.</li>
<li><p>Calling <code>Scanner.Scan()</code> on the input (from <code>""a""</code>) returns <code>scanner.Ident</code> because <code>""a""</code> is a valid Go identifier:</p>

<pre><code>c := b.Scan()
if c == scanner.Ident {
    fmt.Println(""Identifier:"", b.TokenText())
}

// Output: ""Identifier: a""
</code></pre></li>
</ol>
","39245813"
"How to compare the length of a list in html/template in golang?","7536","","<p>I am trying to compare the length of a list in golang html/template. But it is loading forever in html.</p>

<pre><code>{{ $length := len .SearchData }} {{ if eq $length ""0"" }}
    Sorry. No matching results found
{{ end }}
</code></pre>

<p>Could anyone help me with this?</p>
","<p>From documentation,</p>

<blockquote>
  <p>{{if pipeline}} T1 {{end}}:   If the value of the pipeline is empty, no
  output is generated;  otherwise, T1 is executed.  The empty values are
  false, 0, any     nil pointer or interface value, and any array, slice,
  map, or   string of length zero.  Dot is unaffected.</p>
</blockquote>

<p>So if you want to check if the <code>.SearchData</code> slice/array/map is empty just use,</p>

<pre><code>{{if not .SearchData}} Nothing to show {{end}}
</code></pre>

<p>Even your code runs fine if string <code>""0""</code> is replaced by int <code>0</code></p>

<pre><code>{{ $length := len .SearchData }} {{ if eq $length 0 }}
    Sorry. No matching results found
{{ end }}
</code></pre>

<p><a href=""http://play.golang.org/p/Q44qyRbKRB"" rel=""noreferrer"">http://play.golang.org/p/Q44qyRbKRB</a></p>
","35967196"
"How to fix this error ""runtime.main: undefined main.init""","7536","","<p>Trying run a simple hello world go program returns an error.</p>

<pre><code># command-line-arguments
runtime.main: undefined: main.init
runtime.main: undefined: main.main
</code></pre>

<p>The file contents:</p>

<pre><code>package main    
import ""fmt""
func main() {
  fmt.Println(""Hello, World!"")
}
</code></pre>

<p><code>main</code> is obviously defined and adding <code>func init() {}</code> doesn't help.</p>

<p>Both the <code>run</code> and <code>build</code> commands result in the same error.</p>

<pre><code>go build hello_test.go
go run hello_test.go
</code></pre>
","<p>Rename hello_test.go to e.g. hello.go and it should work as expected. Go source files ending in _test are special (for the go build system). They're reserved for the <code>go test</code> command.</p>
","14739530"
"Go: convert strings in array to integer","7535","","<p>How do I convert strings in an array to integers in an array in go?</p>

<pre><code>[""1"", ""2"", ""3""]
</code></pre>

<p>to </p>

<pre><code>[1, 2, 3]
</code></pre>

<p>I've searched for some solutions online but couldn't find it. I've tried to loop through the array and did strconv.ParseFloat(v, 64) where v is the value but it didn't work.</p>
","<p>You will have to loop through the slice indeed. If the slice only contains integers, no need of <code>ParseFloat</code>, <a href=""http://golang.org/pkg/strconv/#Atoi""><code>Atoi</code></a> is sufficient.</p>

<pre><code>import ""fmt""
import ""strconv""

func main() {
    var t = []string{""1"", ""2"", ""3""}
    var t2 = []int{}

    for _, i := range t {
        j, err := strconv.Atoi(i)
        if err != nil {
            panic(err)
        }
        t2 = append(t2, j)
    }
    fmt.Println(t2)
}
</code></pre>

<p>On <a href=""http://play.golang.org/p/B3ghyfT7m1"">Playground</a>.</p>
","24973010"
"Whats the difference of functions and methods in Go?","7525","","<p>I am trying to get started with Go and the <a href=""http://golang.org"">documentation</a> is very good. What I did not find in the documentation is the difference between functions and methods.</p>

<p>As far as I understand at the moment: functions are ""global"", which means I do not have to import a package to use functions, they are always there. Methods are bound to packages. Is this correct?</p>
","<blockquote>
  <p>As far as I understand at the moment: functions are ""global"", which means I do not have to import a package to use functions, they are always there. Methods are bound to packages. Is this correct?</p>
</blockquote>

<p>No, that's not correct. There are just a couple of functions from the <a href=""http://golang.org/pkg/builtin/"">builtin</a> package which are always available. Everything else needs to be imported.</p>

<p>The term ""method"" came up with object-oriented programming. In an OOP language (like C++ for example) you can define a ""class"" which encapsulates data and functions which belong together. Those functions inside a class are called ""methods"" and you need an instance of that class to call such a method.</p>

<p>In Go, the terminology is basically the same, although Go isn't an OOP language in the classical meaning. In Go, a function which takes a receiver is usually called a method (probably just because people are still used to the terminology of OOP).</p>

<p>So, for example:</p>

<pre><code>func MyFunction(a, b int) int {
  return a + b
}
// Usage:
// MyFunction(1, 2)
</code></pre>

<p>but</p>

<pre><code>type MyInteger int
func (a MyInteger) MyMethod(b int) int {
  return a + b
}
// Usage:
// var x MyInteger = 1
// x.MyMethod(2)
</code></pre>
","8263702"
"Organizing Environment Variables Golang","7516","","<p>In Node.js I use the nconf module to house environment variables like S3 keys, GCM keys, etc for each of my projects.</p>

<p>I haven't been able to find a similar solution in Go.</p>

<p>What are the generally accepted tools to help manage environment variables for each Go project?</p>

<p>Thanks in advance.</p>
","<p>I did some reading on this a while back when I was getting started with Go.  According to this link, <a href=""http://peter.bourgon.org/go-in-production/"" rel=""noreferrer"">http://peter.bourgon.org/go-in-production/</a>, they recommend using CLI flags (parameters) instead of environment vars - they even convert environment vars to flags to their CLI apps.</p>

<p>It took some getting used to; but, I really do see the advantages of going pure CLI flags between development, staging and production environments - having specific scripts for each environment.  </p>

<p>For example, here's a little web app I wrote recently:</p>

<pre><code>// global flags
var isdebug bool
var port int
var cert string
var key string
var dbdsn string
var dbmaxidle int
var dbmaxopen int
var imguri string

// init is the entry point for the entire web application.
func init() {

    log.Println(""Starting wwwgo ..."")

    // setup the flags
    //flag.StringVar(&amp;host, ""host"", """", ""Specify a host to redirect to. Use this to redirect all traffic to a single url."")
    flag.IntVar(&amp;port, ""port"", 8080, ""Specify the port to listen to."")
    flag.BoolVar(&amp;isdebug, ""isdebug"", false, ""Set to true to run the app in debug mode.  In debug, it may panic on some errors."")
    flag.StringVar(&amp;cert, ""cert"", """", ""Enables listening on 443 with -cert and -key files specified.  This must be a full path to the certificate .pem file. See http://golang.org/pkg/net/http/#ListenAndServeTLS for more information."")
    flag.StringVar(&amp;key, ""key"", """", ""Enables listening on 443 with -cert and -key files specified.  This must be a full path to the key .pem file. See http://golang.org/pkg/net/http/#ListenAndServeTLS for more information."")
    flag.StringVar(&amp;dbdsn, ""dbdsn"", ""root:root@tcp(localhost:3306)/dev_db?timeout=5s&amp;tls=false&amp;autocommit=true"", ""Specifies the MySql DSN connection."")
    flag.IntVar(&amp;dbmaxidle, ""dbmaxidle"", 0, ""Sets the database/sql MaxIdleConns."")
    flag.IntVar(&amp;dbmaxopen, ""dbmaxopen"", 500, ""Sets the database/sql MaxOpenConns."")
    flag.StringVar(&amp;imguri, ""imguri"", ""/cdn/uploads/"", ""Set this to the full base uri of all images, for example on a remote CDN server or local relative virtual directory."")
    flag.Parse()

    // log our flags
    if isdebug != false {
        log.Println(""DEBUG mode enabled"")
    }
    if cert != """" &amp;&amp; key != """" {
        log.Println(""Attempting SSL binding with supplied cert and key."")
    }
    if dbdsn != """" {
        log.Printf(""Using default dbdsn: %s"", dbdsn)
    }

    ...
}
</code></pre>

<p>This really becomes nice in staging/production environments.</p>

<p>A quick <code>./wwwgo -h</code> for <em>""what the heck was that parameter?""</em> gives you full documentation: </p>

<pre><code>admin@dev01:~/code/frontend/src/wwwgo [master]$ ./wwwgo -h
Usage of ./wwwgo:
  -cert="""": Enables listening on 443 with -cert and -key files specified.  This must be a full path to the certificate .pem file. See http://golang.org/pkg/net/http/#ListenAndServeTLS for more information.
  -dbdsn=""root:root@tcp(localhost:3306)/dev_db?timeout=5s&amp;tls=false&amp;autocommit=true"": Specifies the MySql DSN connection.
  -dbmaxidle=0: Sets the database/sql MaxIdleConns.
  -dbmaxopen=500: Sets the database/sql MaxOpenConns.
  -imguri=""/cdn/uploads/"": Set this to the full base uri of all images, for example on a remote CDN server or local relative virtual directory.
  -isdebug=false: Set to true to run the app in debug mode.  In debug, it may panic on some errors.
  -key="""": Enables listening on 443 with -cert and -key files specified.  This must be a full path to the key .pem file. See http://golang.org/pkg/net/http/#ListenAndServeTLS for more information.
  -port=8080: Specify the port to listen to.
</code></pre>

<p>Very nice to have many options at CLI, and no documentation required - it's built into the flags package.  </p>

<p>You can clearly see the defaults immediately. </p>

<p>With this type of documentation, I tend to setup all the defaults for common <em>""development environments""</em> that the team uses.  We all have root/root access to our local databases.  We all are using port 8080 for this particular web app during development, etc.  That way, you just have to run:</p>

<pre><code>go build
./wwwgo
</code></pre>

<p>And the app runs with all defaults - defaults that are documented.  In production, just override the defaults.  The built-in flag parsers will panic the application if any parameters are in the wrong format, which is also very nice.</p>
","24874856"
"Convert map[interface {}]interface {} to map[string]string","7503","","<p>From a source I cannot influence I am given data in a map, which arrives as <code>map[interface {}]interface {}</code>.</p>

<p>I need to process the contained data, preferably as <code>map[string]string</code> (the data within is perfectly suitable for that).</p>

<p>I need to generate a list of the keys from the data as well, as those are not known beforehand.</p>

<p>Most similar questions I could find on the web say more or less, that this is impossible, but if my map is <code>m</code>, <code>fmt.Println(m)</code> shows the data is there, readable as <code>map[k0:v0 K1:v1 k2:v2 ... ]</code>.</p>

<p>How can I do what fmt.Println is able to do?</p>
","<p>Perhaps I misunderstand the question, but would this work?</p>

<pre><code>m := make(map[interface{}]interface{})
m[""foo""] = ""bar""

m2 := make(map[string]string)   

for key, value := range m {        
    switch key := key.(type) {
    case string:
        switch value := value.(type) {
        case string:
            m2[key] = value
        }
    }
}
</code></pre>
","26976477"
"How to run the whole project in Gogland?","7478","","<p>I have a small project with several .go files. When I run main.go only this compiles but nothing else, so my application crushes. I understand that I have to change settings in Run -> Edit Configurations, but don't know what to do exactly. IDE also doesn’t see terminal pre-compiled package, so ""Package"" option instead of ""File"" doesn't work.</p>
","<p>To run the whole project you have to go <em>Run</em> -> <em>Edit Configuration</em>, set <em>Run Kind</em> to <em>Package</em> and type in field <em>Package</em> your project directory name.</p>
","41368787"
"How to preallocate and fill a slice of pointers in a go-idiomatic way?","7475","","<p><a href=""http://play.golang.org/p/j-Y0mQzTdP"" rel=""noreferrer"">http://play.golang.org/p/j-Y0mQzTdP</a></p>

<pre><code>package main

import ""fmt""

type UselessStruct struct {
    a int
    b int
}

func main() {
    mySlice := make([]*UselessStruct, 5)
    for i := 0; i != 5; i++ {
        mySlice = append(mySlice, &amp;UselessStruct{})
    }

    fmt.Println(mySlice)
}
</code></pre>

<p>Outputs: <code>[&lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; 0xc010035160 0xc010035170 0xc010035180 0xc010035190 0xc0100351a0]</code></p>

<p>What i would like to do, is preallocate memory for 5 UselessStructs, stored as pointers. If i declare a slice of struct values eq:</p>

<pre><code>mySlice := make([]UselessStruct, 5)
</code></pre>

<p>then this creates 5 empty structs - appending doesn't replace the empty structs, but rather keeps on adding to the slice, so the end result with this code:</p>

<p><a href=""http://play.golang.org/p/zBYqGVO85h"" rel=""noreferrer"">http://play.golang.org/p/zBYqGVO85h</a></p>

<pre><code>package main

import ""fmt""

type UselessStruct struct {
    a int
    b int
}

func main() {
    mySlice := make([]UselessStruct, 5)
    for i := 0; i != 5; i++ {
        mySlice = append(mySlice, UselessStruct{})
    }

    fmt.Println(mySlice)
}
</code></pre>

<p>is: <code>[{0 0} {0 0} {0 0} {0 0} {0 0} {0 0} {0 0} {0 0} {0 0} {0 0}]</code></p>

<p><strong>What is the the go-idiomatic way to preallocate and fill slices?</strong></p>
","<p>For your first example, I would do:</p>

<pre><code>mySlice := make([]*UselessStruct, 5)
for i := range mySlice {
     mySlice[i] = new(UselessStruct)
}
</code></pre>

<p>The issue you are facing in both examples is you are appending to a slice that is already the correct length. If you set <code>mySlice := make([]*UselessStruct, 5)</code>, you are asking for a slice of nil pointers of length 5. If you append one pointer, it now has length 6.</p>

<p>Instead, you want to use <code>mySlice := make([]*UselessStruct, 0, 5)</code>. This creates a slice of length 0 but capacity 5. Each time you append it will add one to the length but it won't reallocate until you exceed the slice's capacity.</p>

<pre><code>mySlice := make([]*UselessStruct, 0, 5)
for i := 0; i != 5; i++ {
    mySlice = append(mySlice, &amp;UselessStruct{})
}
// mySlice is [0xc010035160 0xc010035170 0xc010035180 0xc010035190 0xc0100351a0]
</code></pre>

<p>Both of my examples will work as you expect but I recommend the first one for purely style reasons.</p>
","16907739"
"Reading from stdin in golang","7472","","<p>I'm trying to read from Stdin in Golang as I'm trying to implement a driver for Erlang. I have the following code:</p>

<pre><code>package main

import (
    ""fmt""
    ""os""
    ""bufio""
    ""time""
)

func main() {
    go func() { 
        stdout := bufio.NewWriter(os.Stdin) 
        p := []byte{121,100,125,'\n'}
        stdout.Write(p)
        }()
    stdin := bufio.NewReader(os.Stdin)
    values := make([]byte,4,4)
    for{
        fmt.Println(""b"")
        if read_exact(stdin) &gt; 0 {
            stdin.Read(values)
            fmt.Println(""a"")
            give_func_write(values)
        }else{
            continue
        }
    }
}




func read_exact(r *bufio.Reader) int {
    bits := make([]byte,3,3)
    a,_ := r.Read(bits)
    if a &gt; 0 {
        r.Reset(r)
        return 1
    }
    return -1
}

func give_func_write(a []byte) bool {
    fmt.Println(""Yahu"")
    return true
}
</code></pre>

<p>However it seems that the <code>give_func_write</code> is never reached. I tried to start a goroutine to write to standard input after 2 seconds to test this.</p>

<p>What am I missing here?
Also the line <code>r.Reset(r)</code>. Is this valid in go? What I tried to achieve is simply restart the reading from the beginning of the file. Is there a better way?</p>

<p><strong>EDIT</strong></p>

<p>After having played around I was able to find that the code is stuck at <code>a,_ := r.Read(bits)</code> in the <code>read_exact</code> function</p>
","<blockquote>
  <p>I guess that I will need to have a protocol in which I send a \n to
  make the input work and at the same time discard it when reading it</p>
</blockquote>

<p>No, you don't. Stdin is line-buffered only if it's bound to terminal. You can run your program <code>prog &lt; /dev/zero</code> or <code>cat file | prog</code>.</p>

<blockquote>
  <p>bufio.NewWriter(os.Stdin).Write(p)</p>
</blockquote>

<p>You probably don't want to write to <code>stdin</code>. See ""<a href=""https://stackoverflow.com/questions/7383803/writing-to-stdin-and-reading-from-stdout-unix-linux-c-programming"">Writing to stdin and reading from stdout</a>"" for details.</p>

<p>Well, it's not particular clear for me what you're trying to achieve. I'm assuming, that you just want to read data from <code>stdin</code> by fixed-size chunks. Use <a href=""http://golang.org/pkg/io/#ReadFull"" rel=""nofollow noreferrer"">io.ReadFull</a> for this. Or if you want to use buffers, you can use <a href=""http://golang.org/pkg/bufio/#Reader.Peek"" rel=""nofollow noreferrer"">Reader.Peak</a> or <a href=""http://golang.org/pkg/bufio/#Scanner"" rel=""nofollow noreferrer"">Scanner</a> to ensure, that specific number of bytes is available. I've changed your program to demonstrate the usage of <code>io.ReadFull</code>:</p>

<pre><code>package main

import (
    ""fmt""
    ""io""
    ""time""
)

func main() {
    input, output := io.Pipe()

    go func() {
        defer output.Close()
        for _, m := range []byte(""123456"") {
            output.Write([]byte{m})
            time.Sleep(time.Second)
        }
    }()

    message := make([]byte, 3)
    _, err := io.ReadFull(input, message)
    for err == nil {
        fmt.Println(string(message))
        _, err = io.ReadFull(input, message)
    }
    if err != io.EOF {
        panic(err)
    }
}
</code></pre>

<p>You can easily split it in two programs and test it that way. Just change <code>input</code> to <code>os.Stdin</code>.</p>
","29089033"
"GAE Golang - log.Print()?","7469","","<p>Where can one read logs created by calling function:</p>

<pre><code>log.Print(""Message"")
</code></pre>

<p>The tab ""Logs"" under Main seems to only display information about what URLs were called, but without any debug information that would be displayed by the application.</p>
","<p>As described in the <a href=""https://cloud.google.com/appengine/docs/go/requests#Go_Logging"" rel=""noreferrer"">documentation</a>, you should use the <code>Context</code> interface to log instead of <code>log</code>, if you want your logs to show up in the console.</p>

<pre><code>c := appengine.NewContext(r)
c.Infof(""Requested URL: %v"", r.URL)
</code></pre>
","9079392"
"XML and JSON tags for a Golang struct?","7466","","<p>I have an application that can output as JSON or XML depending on the HTTP request headers. I can achieve the correct output for either by adding the correct tags to the structs I'm using, but I can't figure out how to specify the tags for both JSON and XML.</p>

<p>For example, this serializes to correct XML:</p>

<pre><code>type Foo struct {
    Id          int64       `xml:""id,attr""`
    Version     int16       `xml:""version,attr""`
}
</code></pre>

<p>...and this generates correct JSON:</p>

<pre><code>type Foo struct {
    Id          int64       `json:""id""`
    Version     int16       `json:""version""`
}
</code></pre>

<p>...but this doesn't work for either:</p>

<pre><code>type Foo struct {
    Id          int64       `xml:""id,attr"",json:""id""`
    Version     int16       `xml:""version,attr"",json:""version""`
}
</code></pre>
","<p>Go tags are space-separated. From <a href=""http://golang.org/pkg/reflect/#StructTag"" rel=""noreferrer"">the manual</a>:</p>

<blockquote>
  <p>By convention, tag strings are a concatenation of optionally space-separated key:""value"" pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 ' '), quote (U+0022 '""'), and colon (U+003A ':'). Each value is quoted using U+0022 '""' characters and Go string literal syntax.</p>
</blockquote>

<p>So, what you want to write is:</p>

<pre><code>type Foo struct {
    Id          int64       `xml:""id,attr"" json:""id""`
    Version     int16       `xml:""version,attr"" json:""version""`
}
</code></pre>
","19885276"
"Accessing struct variable outside of {{range .}} scope in golang html template","7465","","<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt; Test &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div&gt;
        &lt;h2&gt;Reply&lt;/h2&gt;
        &lt;form action=""/post/{{$threadID}}"" method=""POST""&gt;
        &lt;input type=""text"" name=""subject"" /&gt;
        &lt;input type=""text"" name=""name"" value=""Anonymous"" /&gt;
        &lt;input type=""text"" name=""message"" /&gt;
        &lt;input type=""submit"" value=""submit"" /&gt;
        &lt;/form&gt;
    &lt;/div&gt;
    &lt;div&gt;
        {{range .}}
        {{$threadID := .ThreadID}}
        &lt;h3&gt;{{.Subject}}&lt;/h3&gt;
        &lt;h3&gt;{{.Name}}&lt;/h3&gt;
        &lt;div&gt;{{.DatePosted}}&lt;/div&gt;
        &lt;div&gt;&lt;p&gt;{{.Text}}&lt;/p&gt;&lt;/div&gt;
        &lt;br /&gt;&lt;br /&gt;
        {{end}}
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p></p>

<p>I have this template, there is a form at the top of the page that requires the threadID from ANY one of the Posts sent (they're all the same, a slice of all posts with a certain threadID), this obviously doesn't work, my only other idea was something along the lines of</p>

<pre><code>{{range .}}
    {{if $threadID == nil}}
        $threadID := .ThreadID
        //build the form same as above
    {{end}}
    &lt;h3&gt;{{.Subject}}&lt;/h3&gt;
    &lt;h3&gt;{{.Name}}&lt;/h3&gt;
    &lt;div&gt;{{.DatePosted}}&lt;/div&gt;
    &lt;div&gt;&lt;p&gt;{{.Text}}&lt;/p&gt;&lt;/div&gt;
    &lt;br /&gt;&lt;br /&gt;
{{end}}
</code></pre>

<p>Here is the Post structure and methods if any of the above is unclear.</p>

<pre><code>type Post struct {
threadID int
subject string
name string
text string
date_posted string
}

func (p *Post) ThreadID()   int    { return p.threadID    }
func (p *Post) Subject()    string { return p.subject     }
func (p *Post) Name()       string { return p.name        }
func (p *Post) Text()       string { return p.text        }
func (p *Post) DatePosted() string { return p.date_posted } 
</code></pre>

<p>And the origin of the slice of posts sent to the template</p>

<pre><code>threadID := r.URL.Path[len(""/reply/""):]
replies, err := i.db.Query(""SELECT * FROM latest_threads where thread_id=""+threadID);
</code></pre>
","<p>You can pass it all as one struct like so:</p>

<pre><code>layoutData := struct {
    ThreadID int
    Posts []Post
} {
    ThreadID: threadID,
    Posts: Posts,
}
</code></pre>

<p>Then something like this will work</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt; Test &lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div&gt;
        &lt;h2&gt;Reply&lt;/h2&gt;
        &lt;form action=""/post/{{ .ThreadID }}"" method=""POST""&gt;
        &lt;input type=""text"" name=""subject"" /&gt;
        &lt;input type=""text"" name=""name"" value=""Anonymous"" /&gt;
        &lt;input type=""text"" name=""message"" /&gt;
        &lt;input type=""submit"" value=""submit"" /&gt;
        &lt;/form&gt;
    &lt;/div&gt;
    &lt;div&gt;
        {{range $post := .Posts}}
        &lt;h3&gt;{{ $post.Subject}}&lt;/h3&gt;
        &lt;h3&gt;{{$post.Name}}&lt;/h3&gt;
        &lt;div&gt;{{$post.DatePosted}}&lt;/div&gt;
        &lt;div&gt;&lt;p&gt;{{$post.Text}}&lt;/p&gt;&lt;/div&gt;
        &lt;br /&gt;&lt;br /&gt;
        {{end}}
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>
","22367435"
"Go 1.5+ : Error - imports runtime: C source files not allowed when not using cgo or SWIG","7462","","<p>My program was building perfectly with go 1.4.2. After installing go 1.5, I am getting following error.</p>

<blockquote>
  <p>imports runtime: C source files not allowed when not using cgo or
  SWIG: atomic_amd64x.c defs.c float.c heapdump.c lfstack.c malloc.c
  mcache.c mcentral.c mem_linux.c mfixalloc.c mgc0.c mheap.c msize.c
  os_linux.c panic.c parfor.c proc.c runtime.c signal.c signal_amd64x.c
  signal_unix.c stack.c string.c sys_x86.c vdso_linux_amd64.c</p>
</blockquote>

<p>The error is not program dependent. Even a ""Hello world"" programs is throwing the same error.</p>
","<blockquote>
  <p>Remove Old 1.4.x go installation and then install go 1.5.</p>
</blockquote>

<p>I faced the same problem after installing go 1.5. The issue is that I installed go 1.5 at the same place of 1.4.2. Go 1.5 does not use C anymore and if old C installation files are present it throws the error as you are shown.</p>

<p>if you want the old installation to be present as well then install 1.5 to some other location and set GOROOT to that location.</p>

<p>Hope it helps.</p>

<p><strong>Edit 1: For Linux Users:</strong></p>

<p>if you downloaded go1.5*.tar.gz then you did this: </p>

<blockquote>
  <p>tar -C /usr/local/ -xvf go1.5.linux-amd64.tar.gz</p>
</blockquote>

<p>Your old folder C files are not deleted, so the correct process is: </p>

<p>First: You should delete you old go folder.</p>

<blockquote>
  <p>sudo rm -rf /usr/local/go/</p>
</blockquote>

<p>Second: Then run  </p>

<blockquote>
  <p>tar -C /usr/local/ -xvf go1.5.x.linux-amd64.tar.gz</p>
</blockquote>
","32115271"
"How would you set and clear a single bit in Go?","7416","","<p>In Golang, how do you set and clear individual bits of an integer? For example, functions that behave like this:</p>

<pre><code> clearBit(129, 7) // returns 1
 setBit(1, 7)     // returns 129
</code></pre>
","<p>Here's a function to set a bit. First, shift the number 1 the specified number of spaces in the integer (so it becomes 0010, 0100, etc). Then OR it with the original input. This leaves the other bits unaffected but will always set the target bit to 1.</p>

<pre><code>// Sets the bit at pos in the integer n.
func setBit(n int, pos uint) int {
    n |= (1 &lt;&lt; pos)
    return n
}
</code></pre>

<p>Here's a function to clear a bit. First shift the number 1 the specified number of spaces in the integer (so it becomes 0010, 0100, etc). Then flip every bit in the mask with the <code>^</code> operator (so 0010 becomes 1101). Then use a bitwise AND, which doesn't touch the numbers <code>AND</code>'ed with 1, but which will unset the value in the mask which is set to 0.</p>

<pre><code>// Clears the bit at pos in n.
func clearBit(n int, pos uint) int {
    mask := ^(1 &lt;&lt; pos)
    n &amp;= mask
    return n
}
</code></pre>

<p>Finally here's a function to check whether a bit is set. Shift the number 1 the specified number of spaces (so it becomes 0010, 0100, etc) and then AND it with the target number. If the resulting number is greater than 0 (it'll be 1, 2, 4, 8, etc) then the bit is set.</p>

<pre><code>func hasBit(n int, pos uint) bool {
    val := n &amp; (1 &lt;&lt; pos)
    return (val &gt; 0)
}
</code></pre>
","23192263"
"Golang - How to assign default value if env var is empty?","7389","","<p>In golang, how do you assign a default value if an environment variable isn't set? </p>

<p>In python I could do <code>mongo_password = os.getenv('MONGO_PASS', 'pass')</code> where <code>pass</code> is the default value if <code>MONGO_PASS</code> env var isn't set.</p>

<p>I tried an if statement based on <code>os.Getenv</code> being empty, but that doesn't seem to work due to the scope of variable assignment within an if statement. And I'm checking for multiple env var's, so I can't act on this information within the if statement.</p>
","<p>There's no built-in to fall back to a default value,
so you have to do a good old-fashioned if-else.</p>

<p>But you can always create a helper function to make that easier:</p>

<pre><code>func getenv(key, fallback string) string {
    value := os.Getenv(key)
    if len(value) == 0 {
        return fallback
    }
    return value
}
</code></pre>

<p>Note that as <a href=""https://stackoverflow.com/users/396567/michael-hausenblas"">@michael-hausenblas</a> pointed out in a comment,
keep in mind that if the value of the environment variable is really empty, you will get the fallback value instead.</p>

<p>Even better as <a href=""https://stackoverflow.com/users/1223977/%C5%81ukasz-wojciechowski"">@ŁukaszWojciechowski</a> pointed out, using <a href=""https://golang.org/pkg/os/#LookupEnv"" rel=""noreferrer""><code>os.LookupEnv</code></a>:</p>

<pre><code>func getEnv(key, fallback string) string {
    if value, ok := os.LookupEnv(key); ok {
        return value
    }
    return fallback
}
</code></pre>
","40326580"
"Golang: Use one value in conditional from function returning multiple arguments","7388","","<p>Suppose in Go we have a function returning two arguments</p>

<pre><code>func squareAndCube(int side) (square int, cube int) {
    square = side * side
    cube = square * side
    return
}
</code></pre>

<p>Then you would like to use the first (second) value of this function in the conditional:</p>

<pre><code>square, _ := squareAndCube(n)
if square &gt; m {
    ...
}
</code></pre>

<p>However, can we do first two lines in one line if we do not need the value square to use anywhere else? E.g.</p>

<pre><code> if squareAndCube(n).First() &gt; m {
     ...
 }
</code></pre>
","<p>You cannot pick one of the multiple returned values but you can write something like</p>

<pre><code>if square, _ := squareAndCube(n); square &gt; m {
    // ...
}
</code></pre>

<p>The <code>square</code> variable will only be valid in the <code>if</code> scope. These ""simple statements"" can be used in <a href=""http://golang.org/ref/spec#If_statements""><code>if</code> statements</a>, <a href=""http://golang.org/ref/spec#Switch_statements""><code>switch</code> statements</a> and other constructs such as <code>for</code> loops.</p>

<p>See also the <a href=""http://golang.org/doc/effective_go.html#if"">effective go article on <code>if</code> statements</a>.</p>
","24912130"
"Skip some tests with go test","7381","","<p>Is it possible to skip/exclude some tests from being run with <code>go test</code>?</p>

<p>I have a fairly large amount of integration type tests which call a rest service written as standard go tests, and run with <code>go test</code>. When a new feature is developed its sometimes useful to be able to skip some of the tests, for example if the new feature is not yet deployed on the testing server and I still want to run all the existing tests (except those new ones which tests the new feature).</p>

<p>I know about <code>-run</code>, but I dont want to specify all tests I want to run, that would be a long list. At the same time I have not been able to write a regex for excluding tests.</p>

<p>Another option would be to not commit the tests which dont run in the same branch, but it would be easier if I could just specify what to exclude.</p>
","<p>Like <a href=""https://stackoverflow.com/users/6309/vonc"">VonC</a> said, you can use <code>+build</code> tags</p>

<pre><code>┌─ oneofone@Oa [/t/tst-tag]                                                                                                      
└──➜ ls
a_test.go  b_test.go  c_test.go
</code></pre>

<p><strong>a_test.go :</strong></p>

<pre><code>package tags

import ""testing""

func TestA(t *testing.T) {}
</code></pre>

<p><strong>b_test.go :</strong></p>

<pre><code>// +build !feature1

package tags

import ""testing""

func TestB(t *testing.T) {}
</code></pre>

<p><strong>c_test.go :</strong></p>

<pre><code>// +build !feature1
// +build !feature2

package tags

import ""testing""

func TestC(t *testing.T) {}
</code></pre>

<p>Then run the test with the <code>-tags</code> parameter :</p>

<pre><code>┌─ oneofone@Oa [/t/tst-tag]                                                                                                      
└──➜ go test -v . | grep PASS:
--- PASS: TestA (0.00 seconds)
--- PASS: TestB (0.00 seconds)
--- PASS: TestC (0.00 seconds)
┌─ oneofone@Oa [/t/tst-tag]                                                                                                      
└──➜ go test -v -tags feature1 . | grep PASS:
--- PASS: TestA (0.00 seconds)
┌─ oneofone@Oa [/t/tst-tag]                                                                                                      
└──➜ go test -v -tags feature2 . | grep PASS:
--- PASS: TestA (0.00 seconds)
--- PASS: TestB (0.00 seconds)
</code></pre>

<p>// Update : different logic :</p>

<p><strong>a_test.go:</strong></p>

<pre><code>// +build all

package tags

import ""testing""

func TestA(t *testing.T) {}
</code></pre>

<p><strong>b_test.go:</strong></p>

<pre><code>// +build all feature1

package tags

import ""testing""

func TestB(t *testing.T) {}
</code></pre>

<p><strong>c_test.go:</strong></p>

<pre><code>// +build all feature2

package tags

import ""testing""

func TestC(t *testing.T) {}


┌─ oneofone@Oa [/t/tst-tag]                                                                                                      
└──➜ go test -v -tags all | grep PASS:
--- PASS: TestA (0.00 seconds)
--- PASS: TestB (0.00 seconds)
--- PASS: TestC (0.00 seconds)
┌─ oneofone@Oa [/t/tst-tag]                                                                                                      
└──➜ go test -v -tags feature1 | grep PASS:
--- PASS: TestB (0.00 seconds)
┌─ oneofone@Oa [/t/tst-tag]                                                                                                      
└──➜ go test -v -tags=""feature1 feature2"" | grep PASS:
--- PASS: TestB (0.00 seconds)
--- PASS: TestC (0.00 seconds)
</code></pre>

<p>Or you call specific tests by name like :</p>

<p><strong>d_test.go:</strong></p>

<pre><code>package tags

import ""testing""

func TestA1(t *testing.T) {}
func TestB1(t *testing.T) {}
func TestC1(t *testing.T) {}
func TestD1(t *testing.T) {}
</code></pre>

<p>Output:</p>

<pre><code>┌─ oneofone@Oa [/t/tst-tag]                                                                                                      
└──➜ go test -run=""(A|B)1"" -v | grep PASS:
--- PASS: TestA1 (0.00 seconds)
--- PASS: TestB1 (0.00 seconds)
┌─ oneofone@Oa [/t/tst-tag]                                                                                                      
└──➜ go test -run=""D1"" -v | grep PASS:
--- PASS: TestD1 (0.00 seconds)
</code></pre>
","24036237"
"RabbitMQ: How to requeue message with counter","7370","","<p>Is there any way to count how many time a job is requeued (via Reject or Nak) without manually requeu the job?
I need to retry a job for 'n' time and then drop it after 'n' time.</p>

<p>ps : Currently I requeue a job manually (drop old job, create a new job with the exact content and an extra Counter header if the Counter is not there or the value is less than 'n')</p>
","<p>There are <code>redelivered</code> message property that set to true when message redelivered one or more time.</p>

<p>If you want to track redelivery count or left redelivers number (aka hop limit or ttl in IP stack) you have to store that value in message body or headers (literally - consume message, modify it and then publish it modified back to broker).</p>

<p>There are also similar question with answer which may help you: <a href=""https://stackoverflow.com/questions/23158310/how-do-i-set-a-number-of-retry-attempts-in-rabbitmq"">How do I set a number of retry attempts in RabbitMQ?</a></p>
","25237101"
"Is ""net/http""'s use of global variables considered a good practice in golang?","7352","","<p>The golang package ""net/http"" uses the global variable DefaultServeMux to register handlers. Is this considered a good practice or even an golang idiom? Is it a global variable after all?</p>

<p>The two main reasons not to use global variables are AFAIK 1) that they add to complexity and 2) are problematic in concurrent programs.</p>

<p>Maybe 1) is not considered important in this case because the developer can choose not to use DefaultServerMux? What about 2)? Are global variables always thread/goroutine safe in Go? Still, I'm surprised that it's used in Go's standard library. I've never seen such practice in other languages / standard libraries.</p>
","<blockquote>
  <p>Is it a global variable after all?</p>
</blockquote>

<p>Yes. The variable is <a href=""http://golang.org/src/pkg/net/http/server.go?s=27804:27891#L852"">defined</a> on root level, which makes it global throughout the package.</p>

<p>However, this is not a global variable which stores all the sensible information
of the <code>net/http</code> package. It is merely a convenience setup which uses the content of
the <code>net/http</code> package to provide an quickstart opportunity to the user.
This also means, that is does not add much complexity.</p>

<blockquote>
  <p>Is this considered a good practice or even an golang idiom?</p>
</blockquote>

<p>IMO, it is good practice to aid the user with the usage of a package.
If you're finding that you could save the user some time by providing a 
good default configuration, do so.</p>

<p>However, you should be careful when you're about to export variables. 
They should be made ready for concurrent access. 
The <code>DefaultServeMux</code> (or better, the underlying <code>ServeMux</code>), for example, is <a href=""http://golang.org/src/pkg/net/http/server.go?s=27804:27891#L931"">using a mutex</a> to be thread safe.</p>

<blockquote>
  <p>Are global variables always thread/goroutine safe in Go?</p>
</blockquote>

<p>No. Without proper synchronization (mutex, channel, ...), everything that is accessed concurrently is problematic and will most certainly blow everything to bits and pieces.</p>

<blockquote>
  <p>I've never seen such practice in other languages / standard libraries.</p>
</blockquote>

<p>Python's <code>logging</code> module, for example, provides a function to retrieve the root logging object, which one can call methods on to customize the logging behaviour. This could be seen as a global object, as it is mutable and defined in the module.</p>
","12335649"
"What does go install do?","7335","","<p>The docs say nothing about what <code>build</code> vs <code>install</code> does</p>

<p>My expectation was that it's like <code>make install</code>; i.e. it takes the compiled stuff and puts in its final location (<code>/usr/local/bin/my_new_toy</code> or whatever) but it seems that it puts things in <code>GOROOT/bin</code></p>

<p>Can I tell go to do a <code>make install</code> - i.e. put things elsewhere? Or do I just write a makefile (please tell me no)?</p>
","<p>If you want binary files to go to a specific location, you can use the environment variable <code>GOBIN</code> :</p>

<blockquote>
  <p>The bin/ directory holds compiled commands. Each command is named for
  its source directory, but only the final element, not the entire path.
  That is, the command with source in DIR/src/foo/quux is installed into
  DIR/bin/quux, not DIR/bin/foo/quux. The foo/ is stripped so that you
  can add DIR/bin to your PATH to get at the installed commands. <strong>If the
  GOBIN environment variable is set, commands are installed to the
  directory it names instead of DIR/bin.</strong></p>
</blockquote>

<p>Source : <a href=""http://golang.org/cmd/go/#hdr-GOPATH_environment_variable"" rel=""noreferrer"">http://golang.org/cmd/go/#hdr-GOPATH_environment_variable</a></p>

<pre><code>GOBIN=/usr/local/bin/ go install
</code></pre>

<p>If you want per-project <code>bin/</code> directory then you can simply append your project path to <code>GOPATH</code>, however you must have your code under <code>$project-path/src/</code> and <code>go install</code> will put all the binaries in <code>$project-path/bin</code>.</p>

<pre><code>export GOPATH=/dir1:/dir2:/dir3
</code></pre>

<blockquote>
  <p>If GOBIN is not set, binaries from /dir1/src end up in /dir1/bin,
  binaries from /dir2/src end up in /dir2/bin, and so on (and binaries
  from $GOROOT/src end up in $GOROOT/bin).</p>
</blockquote>

<p>Source : <a href=""https://groups.google.com/forum/#!topic/golang-nuts/-mN8R_Fx-7M"" rel=""noreferrer"">https://groups.google.com/forum/#!topic/golang-nuts/-mN8R_Fx-7M</a></p>

<p>And it completely crossed my mind, but you can always just use (thanks JimB):</p>

<pre><code>go build -o /path/binary-name
</code></pre>
","24070046"
"How check if a property was set in a struct","7334","","<p>I am trying to find how check if a structure property was set, but i cannot find any way.</p>

<p>I expect something like this but of corse this not works:</p>

<pre><code>type MyStruct struct {
    property    string
}

test := new(MyStruct)
if test.property {
    //do something with this
}
</code></pre>
","<p>Like dyoo said, you can use <code>nil</code> if your struct properties are pointers. If you want to keep them as strings you can compare with <code>""""</code>. Here is a sample: </p>

<pre><code>package main

import ""fmt""

type MyStruct struct {
    Property string
}

func main() {
    s1 := MyStruct{
        Property: ""hey"",
    }

    s2 := MyStruct{}

    if s1.Property != """" {
        fmt.Println(""s1.Property has been set"")
    }

    if s2.Property == """" {
        fmt.Println(""s2.Property has not been set"")
    }
}
</code></pre>

<p><a href=""http://play.golang.org/p/YStKFuekeZ"" rel=""nofollow noreferrer"">http://play.golang.org/p/YStKFuekeZ</a></p>
","20555126"
"How to specify default values when parsing JSON in Go","7334","","<p>I want to parse a JSON object in Go, but want to specify default values for fields that are not given. For example, I have the struct type:</p>

<pre><code>type Test struct {
    A string
    B string
    C string
}
</code></pre>

<p>The default values for A, B, and C, are ""a"", ""b"", and ""c"" respectively. This means that when I parse the json:</p>

<pre><code>{""A"": ""1"", ""C"": 3}
</code></pre>

<p>I want to get the struct:</p>

<pre><code>Test{A: ""1"", B: ""b"", C: ""3""}
</code></pre>

<p>Is this possible using the built-in package <code>encoding/json</code>? Otherwise, is there any Go library that has this functionality?</p>
","<p>This is possible using encoding/json: when calling <code>json.Unmarshal</code>, you do not need to give it an empty struct, you can give it one with default values.</p>

<p>For your example:</p>

<pre><code>var example []byte = []byte(`{""A"": ""1"", ""C"": ""3""}`)

out := Test{
    A: ""default a"",
    B: ""default b"",
    // default for C will be """", the empty value for a string
}
err := json.Unmarshal(example, &amp;out) // &lt;--
if err != nil {
    panic(err)
}
fmt.Printf(""%+v"", out)
</code></pre>

<p>Running <a href=""https://play.golang.org/p/-iiZnh5uhy"">this example in the Go playground</a> returns <code>{A:1 B:default b C:3}</code>.</p>

<p>As you can see, <code>json.Unmarshal(example, &amp;out)</code> unmarshals the JSON into <code>out</code>, overwriting the values specified in the JSON, but leaving the other fields unchanged.</p>
","30445480"
"golang XML not unmarshal-ing properly","7309","","<p>The XML format I need to unmarshal is as follows:</p>

<pre><code>data := `
&lt;table&gt;
    &lt;name&gt;
        &lt;code&gt;23764&lt;/code&gt;
        &lt;name&gt;Smith, Jane&lt;/name&gt;
    &lt;/name&gt;
    &lt;name&gt;
        &lt;code&gt;11111&lt;/code&gt;
        &lt;name&gt;Doe, John&lt;/name&gt;
    &lt;/name&gt;
&lt;/table&gt;
`
</code></pre>

<p>I have attempted the following structs and code to no avail:</p>

<pre><code>type Customers struct {

    XMLName xml.Name `xml:""table""`
    Custs []Customer
}

type Customer struct {

    XMLName xml.Name `xml:""name""`
    Code string `xml:""code""`
    Name string `xml:""name""`
}

...

var custs Customers
err := xml.Unmarshal([]byte(data), &amp;custs)
if err != nil {
    fmt.Printf(""error: %v"", err)
    return
}

fmt.Printf(""%v"", custs)

for _, cust := range custs.Custs {

    fmt.Printf(""Cust:\n%v\n"", cust)
}
</code></pre>

<p>The range prints nothing out, and printing <code>custs</code> only gives me <code>{{ table} []}</code></p>
","<p>The correct structure is the following:</p>

<pre><code>type Customer struct {
    Code string `xml:""code""`
    Name string `xml:""name""`
}

type Customers struct {
    Customers []Customer `xml:""name""`
}
</code></pre>

<p>You can try it <a href=""http://play.golang.org/p/D2CCP0dwdo"" rel=""noreferrer"">on the playground here</a>.
The problem is that you don't assign the xml tag for <code>[]Customer</code>.</p>

<p>The way you solved this, using <code>xml.Name</code> is also correct but more verbose. 
You can review working code <a href=""http://play.golang.org/p/LJFSctBgSi"" rel=""noreferrer"">here</a>.
If you need to use the <code>xml.Name</code> field for some reason, I would recommend
using a private field so that an exported version of the struct is not cluttered.</p>
","16068128"
"Reason for huge size of compiled executable of Go","7309","","<p>I complied a hello world Go program which generated native executable on my linux machine. But I was surprised to see the size of the simple Hello world Go program, it was 1.9MB !</p>

<p>Why is it that the executable of such a simple program in Go is so huge? </p>
","<p>This exact question appears in the official FAQ: <a href=""http://golang.org/doc/faq#Why_is_my_trivial_program_such_a_large_binary"" rel=""noreferrer""><strong>Why is my trivial program such a large binary?</strong></a></p>

<p>Quoting the answer:</p>

<blockquote>
  <p>The linkers in the gc tool chain (<code>5l</code>, <code>6l</code>, and <code>8l</code>) do static linking. All Go binaries therefore include the Go run-time, along with the run-time type information necessary to support dynamic type checks, reflection, and even panic-time stack traces.</p>
  
  <p>A simple C ""hello, world"" program compiled and linked statically using gcc on Linux is around 750 kB, including an implementation of <code>printf</code>. An equivalent Go program using <code>fmt.Printf</code> is around 1.9 MB, but that includes more powerful run-time support and type information.</p>
</blockquote>

<p>So the native executable of your Hello World is 1.9 MB because it contains a runtime which provides garbage collection, reflection and many other features (which your program might not really use, but it's there). And the implementation of the <code>fmt</code> package which you used to print the <code>""Hello World""</code> text (plus its dependencies).</p>

<p>Now try the following: add another <code>fmt.Println(""Hello World! Again"")</code> line to your program and compile it again. The result will not be 2x 1.9MB, but still just 1.9 MB! Yes, because all the used libraries (<code>fmt</code> and its dependencies) and the runtime are already added to the executable (and so just a few more bytes will be added to print the 2nd text which you just added).</p>
","28579099"
"Make first letter of words uppercase in a string","7294","","<p>I have a large array of strings such as this one:</p>

<p>'INTEGRATED ENGINEERING 5 Year (BSC with a Year in Industry)'</p>

<p>I want to capitalise the first letter of the words and make the rest of the words lowercase. So 'INTEGRATED' would become 'Integrated'.</p>

<p>A second spanner in the works - I want an exception to a few words such as 'and', 'in', 'a', 'with'. </p>

<p>So the above example would become:</p>

<p>Integrated Engineering 5 Year (Bsc with a Year in Industry).</p>

<p>How would I do this in Go? I can code the loop/arrays to manage the change but the actual string conversion is what I struggle with.</p>
","<p>There is an inbuilt function in the string package called Title</p>

<p>please see <a href=""https://play.golang.org/p/07dl3hMuGH"">https://play.golang.org/p/07dl3hMuGH</a></p>
","40382340"
"How to parse/deserlize a dynamic JSON in Golang","7254","","<p><strong>Scenario:</strong>
<br/>Consider the following is the JSON :</p>

<pre><code>{
   ""Bangalore_City"": ""35_Temperature"",
   ""NewYork_City"": ""31_Temperature"",
   ""Copenhagen_City"": ""29_Temperature""
}
</code></pre>

<p>If you notice, the data is structured in such a way that there is no hard-coded keys mentioning <code>City</code>/<code>Temperature</code> its basically just values.</p>

<p><strong>Issue:</strong> I am not able to parse any JSON which is dynamic. </p>

<p><strong>Question:</strong> Could anyone have found solution for this kind of JSON parsing? I tried <a href=""https://github.com/bitly/go-simplejson"" rel=""nofollow noreferrer"">go-simplejson</a>, <a href=""https://github.com/Jeffail/gabs"" rel=""nofollow noreferrer"">gabs</a> &amp; default <a href=""http://blog.golang.org/json-and-go"" rel=""nofollow noreferrer""><code>encoding/json</code></a> but no luck.</p>

<p><strong>Note:</strong> 
The above JSON is just for sample. And there are lot of applications which are using the current API, So I do not want to change how the data is structured. I mean I can't change to something as follows:</p>

<pre><code>[{
   ""City_Name"":""Bangalore"",
   ""Temperature"": ""35""
},...]
</code></pre>

<p>Then I can define <code>struct</code></p>

<pre><code>type TempData struct {
  City_Name string
  Temperature  string
}
</code></pre>
","<p>You can unmarshal into a <code>map[string]string</code> for example:</p>

<pre><code>m := map[string]string{}
err := json.Unmarshal([]byte(input), &amp;m)
if err != nil {
    panic(err)
}
fmt.Println(m)
</code></pre>

<p>Output (wrapped):</p>

<pre><code>map[Bangalore_City:35_Temperature NewYork_City:31_Temperature
    Copenhagen_City:29_Temperature]
</code></pre>

<p>Try it on the <a href=""http://play.golang.org/p/TTm4vJxaNS"" rel=""nofollow noreferrer"">Go Playground</a>.</p>

<p>This way no matter what the keys or values are, you will have all pairs in a <code>map</code> which you can print or loop over.</p>

<p>Also note that although your example contained only <code>string</code> values, but if the value type is varying (e.g. <code>string</code>, numbers etc.), you may use <code>interface{}</code> for the value type, in which case your map would be of type <code>map[string]interface{}</code>.</p>

<p>Also note that I created a library to easily work with such dynamic objects which may be a great help in these cases: <a href=""https://github.com/icza/dyno"" rel=""nofollow noreferrer""><code>github.com/icza/dyno</code></a>.</p>
","29347148"
"Time since golang nanosecond timestamp","7253","","<p><strong>Q1.</strong> How do I create a golang <a href=""http://golang.org/pkg/time/"" rel=""nofollow"">time</a> struct from a nanosecond timestamp?</p>

<p><strong>Q2.</strong> How do I then compute the number of hours since this timestamp?</p>
","<p>In Go a ""time"" object is represented by a value of the struct type <a href=""http://golang.org/pkg/time/#Time"" rel=""noreferrer""><code>time.Time</code></a>.</p>

<p>You can create a <code>Time</code> from a nanosecond timestamp using the <a href=""http://golang.org/pkg/time/#Unix"" rel=""noreferrer""><code>time.Unix(sec int64, nsec int64)</code></a> function where it is valid to pass <code>nsec</code> outside the range <code>[0, 999999999]</code>.</p>

<p>And you can use the <a href=""http://golang.org/pkg/time/#Since"" rel=""noreferrer""><code>time.Since(t Time)</code></a> function which returns the elapsed time since the specified time as a <a href=""http://golang.org/pkg/time/#Duration"" rel=""noreferrer""><code>time.Duration</code></a> (which is basically the time difference in nanoseconds).</p>

<pre><code>t := time.Unix(0, yourTimestamp)
elapsed := time.Since(t)
</code></pre>

<p>To get the elapsed time in hours, simply use the <a href=""http://golang.org/pkg/time/#Duration.Hours"" rel=""noreferrer""><code>Duration.Hours()</code></a> method which returns the duration in hours as a floating point number:</p>

<pre><code>fmt.Printf(""Elapsed time: %.2f hours"", elapsed.Hours())
</code></pre>

<p>Try it on the <a href=""http://play.golang.org/p/qtVhf4cNLM"" rel=""noreferrer"">Go Playground</a>.</p>

<p><strong>Note:</strong></p>

<p><code>Duration</code> can format itself intelligently in a format like <code>""72h3m0.5s""</code>, implemented in its <a href=""http://golang.org/pkg/time/#Duration.String"" rel=""noreferrer""><code>String()</code></a> method:</p>

<pre><code>fmt.Printf(""Elapsed time: %s"", elapsed)
</code></pre>
","28760695"
"Dynamically call method on interface{} regardless of receiver type","7251","","<p>I'm working on a templating system written in Go, which means it requires liberal use of the <code>reflect</code> package. In this specific circumstance I need to be able to dynamically call a method on an <code>interface{}</code>. The oddity is that my reflection logic works fine as long as my data is of a known type, but not if the data is of type <code>interface{}</code>.</p>

<p>The the following example you can see that the logic in <code>main()</code> and <code>Pass()</code> is identical. The only difference is whether the data is a known type or a known type inside an <code>interface{}</code></p>

<p>Go Play: <a href=""http://play.golang.org/p/FTP3wgc0sZ"" rel=""nofollow"">http://play.golang.org/p/FTP3wgc0sZ</a></p>

<pre><code>package main

import (
    ""fmt""
    ""reflect""
)

type Test struct {
    Start string
}

func (t *Test) Finish() string {
    return t.Start + ""finish""
}

func Pass(i interface{}) {
    _, ok := reflect.TypeOf(&amp;i).MethodByName(""Finish"")
    if ok {
        fmt.Println(reflect.ValueOf(&amp;i).MethodByName(""Finish"").Call([]reflect.Value{})[0])
    } else {
        fmt.Println(""Pass() fail"")
    }
}

func main() {
    i := Test{Start: ""start""}

    Pass(i)
    _, ok := reflect.TypeOf(&amp;i).MethodByName(""Finish"")
    if ok {
        fmt.Println(reflect.ValueOf(&amp;i).MethodByName(""Finish"").Call([]reflect.Value{})[0])
    } else {
        fmt.Println(""main() fail"")
    }
}
</code></pre>

<p>Upon executing this code we get the following result</p>

<pre><code>Pass() fail
startfinish
</code></pre>

<p>Which means that my methodology for dynamically calling a method works fine except in a scenario when my object is currently in an <code>interface{}</code>.</p>

<p>If instead I do not use a pointer receiver and pass <code>i</code> then it works as expected.</p>

<p>Go Play: <a href=""http://play.golang.org/p/myM0UXVYzX"" rel=""nofollow"">http://play.golang.org/p/myM0UXVYzX</a></p>

<p>This leads me to believe that my problem is that I cannot access the address of i (<code>&amp;i</code>) when it is an <code>interface{}</code>. I've scoured the reflect package and tested things such as <code>reflect.Value.Addr()</code> and <code>reflect.PtrTo()</code> but I could not get either to work the way I needed. My hunch is that it has something to do with the fact that an <code>interface{}</code> is by definition a reference object.</p>
","<p>Thanks to @Jeremy Wall I believe I was able to solve my problem. The basic issue is calling a dynamically named method on an <code>interface{}</code>. There are 4 cases.</p>

<ol>
<li><code>interface{}</code> underlying data is value and receiver is value</li>
<li><code>interface{}</code> underlying data is pointer and receiver is value</li>
<li><code>interface{}</code> underlying data is value and receiver is pointer</li>
<li><code>interface{}</code> underlying data is pointer and receiver is pointer</li>
</ol>

<p>Using reflection we can determine the underling value of our interface. Then using further reflection we can generate the alternate data type to our current type. If the data passed in was a value we need to generate a pointer to it</p>

<pre><code>value := reflect.ValueOf(data)
if value.Type().Kind() == reflect.Ptr {
    ptr = value
    value = ptr.Elem() // acquire value referenced by pointer
} else {
    ptr = reflect.New(reflect.TypeOf(i)) // create new pointer
    temp := ptr.Elem() // create variable to value of pointer
    temp.Set(value) // set value of variable to our passed in value
}
</code></pre>

<p>Now that we have both data types we can simply use each to check for an existing method</p>

<pre><code>var finalMethod reflect.Value
method := value.MethodByName(methodName)
if method.IsValid() {
    finalMethod = method
}
// check for method on pointer
method = ptr.MethodByName(methodName)
if method.IsValid() {
    finalMethod = method
}

if (finalMethod.IsValid()) {
    return finalMethod.Call([]reflect.Value{})[0].String()
}
</code></pre>

<p>Therefore with this in mind we can effectively call any method, dynamically, whether declared as <code>*receiver</code> or <code>receiver</code>.</p>

<p>Full Proof of Concept: <a href=""http://play.golang.org/p/AU-Km5VjZs"" rel=""noreferrer"">http://play.golang.org/p/AU-Km5VjZs</a></p>

<pre><code>package main

import (
    ""fmt""
    ""reflect""
)

type Test struct {
    Start string
}

// value receiver
func (t Test) Finish() string {
    return t.Start + ""finish""
}

// pointer receiver
func (t *Test) Another() string {
    return t.Start + ""another""
}

func CallMethod(i interface{}, methodName string) interface{} {
    var ptr reflect.Value
    var value reflect.Value
    var finalMethod reflect.Value

    value = reflect.ValueOf(i)

    // if we start with a pointer, we need to get value pointed to
    // if we start with a value, we need to get a pointer to that value
    if value.Type().Kind() == reflect.Ptr {
        ptr = value
        value = ptr.Elem()
    } else {
        ptr = reflect.New(reflect.TypeOf(i))
        temp := ptr.Elem()
        temp.Set(value)
    }

    // check for method on value
    method := value.MethodByName(methodName)
    if method.IsValid() {
        finalMethod = method
    }
    // check for method on pointer
    method = ptr.MethodByName(methodName)
    if method.IsValid() {
        finalMethod = method
    }

    if (finalMethod.IsValid()) {
        return finalMethod.Call([]reflect.Value{})[0].Interface()
    }

    // return or panic, method not found of either type
    return """"
}

func main() {
    i := Test{Start: ""start""}
    j := Test{Start: ""start2""}

    fmt.Println(CallMethod(i, ""Finish""))
    fmt.Println(CallMethod(&amp;i, ""Finish""))
    fmt.Println(CallMethod(i, ""Another""))
    fmt.Println(CallMethod(&amp;i, ""Another""))
    fmt.Println(CallMethod(j, ""Finish""))
    fmt.Println(CallMethod(&amp;j, ""Finish""))
    fmt.Println(CallMethod(j, ""Another""))
    fmt.Println(CallMethod(&amp;j, ""Another""))
}
</code></pre>
","14162161"
"how can I use gzip on a string in golang?","7248","","<p>I want to use go to read out a chunk from a <code>file</code>, treat it as a <code>string</code> and <code>gzip</code> this chunk. I know how to read from the <code>file</code> and treat it as a <code>string</code>, but when it comes to <code>""compress/gzip""</code> I am lost. Should I create a <code>io.writer</code>, which write to a <code>buf</code> (byte slice), use the <code>gzip.Writer(io.writer)</code> to get a writer pointer to the <code>io.writer</code>..and then use <code>gzip.Write(chunk_of_file)</code> to write the <code>chunk_of_file</code> to <code>buf</code>? then I would need to treat the string as a byte slice..   </p>
","<p>You can just write using <a href=""http://golang.org/pkg/compress/gzip/#Writer"" rel=""noreferrer""><code>gzip.Writer</code></a> as it implements <code>io.Writer</code>.</p>

<p>Example:</p>

<pre><code>package main

import (
    ""bytes""
    ""compress/gzip""
    ""fmt""
)

func main() {
    var b bytes.Buffer
    gz := gzip.NewWriter(&amp;b)
    if _, err := gz.Write([]byte(""YourDataHere"")); err != nil {
        panic(err)
    }
    if err := gz.Flush(); err != nil {
        panic(err)
    }
    if err := gz.Close(); err != nil {
        panic(err)
    }
    fmt.Println(b)
}
</code></pre>

<p><a href=""http://play.golang.org/p/nbl26mIBYR"" rel=""noreferrer"">Playground</a></p>

<p>If you want to set the compression level (Default is <a href=""http://golang.org/pkg/compress/flate/#pkg-constants"" rel=""noreferrer"">""-1"" from <code>compress/flate</code></a>) you can use <a href=""http://golang.org/pkg/compress/gzip/#NewWriterLevel"" rel=""noreferrer""><code>gzip.NewWriterLevel</code></a>.</p>
","19267224"
"Golang Templates - If not true (!true)","7238","","<p>In golang's template/html package, I can use <code>{{ if .loggedIn }}</code> to check if logged in is true.</p>

<p>How do I check if .loggedIn is false without using ne or eq?</p>

<hr>

<p>For example, I am looking for something like</p>

<pre><code>{{ if !.loggedIn }}
&lt;h1&gt;Not logged in&lt;/h1&gt;
{{ end }}
</code></pre>
","<p>Use the function <a href=""https://golang.org/pkg/text/template/#hdr-Functions"" rel=""noreferrer""><code>not</code></a>:</p>

<pre><code>{{ if not .loggedIn }}
&lt;h1&gt;Not logged in&lt;/h1&gt;
{{ end }}
</code></pre>
","41286801"
"golang: get current scope of function name","7223","","<p>For tracing purpose, I'd like to print out current function name, like the <code>__FUNCTION__</code> macro in gcc.</p>

<p>So that when I have a function</p>

<pre><code>func foo () {
   trace()
}
</code></pre>

<p>it will automatically print out <code>Entering foo()...</code> or something like that. </p>
","<p>Package <a href=""https://golang.org/pkg/runtime/"" rel=""noreferrer"">runtime</a> is your friend here:</p>

<pre><code>func trace() {
    pc := make([]uintptr, 10)  // at least 1 entry needed
    runtime.Callers(2, pc)
    f := runtime.FuncForPC(pc[0])
    file, line := f.FileLine(pc[0])
    fmt.Printf(""%s:%d %s\n"", file, line, f.Name())
}
</code></pre>
","25927915"
"Replace a line in text file Golang","7222","","<p>How do I replace a line in a text file with a new line?</p>

<p>Assume I've opened the file and have every line in an array of string objects i'm now looping through</p>

<pre><code>//find line with ']'
    for i, line := range lines {

        if strings.Contains(line, ']') {


            //replace line with ""LOL""
            ?
        }
    }
</code></pre>
","<p>What matters here is not so much what you do in that loop. It's not like you're gonna be directly editing the file on the fly.</p>

<p>The most simple solution for you is to just replace the string in the array and then write the contents of the array back to your file when you're finished.</p>

<p>Here's some code I put together in a minute or two. It properly compiles and runs on my machine.</p>

<pre><code>package main

import (
        ""io/ioutil""
        ""log""
        ""strings""
)

func main() {
        input, err := ioutil.ReadFile(""myfile"")
        if err != nil {
                log.Fatalln(err)
        }

        lines := strings.Split(string(input), ""\n"")

        for i, line := range lines {
                if strings.Contains(line, ""]"") {
                        lines[i] = ""LOL""
                }
        }
        output := strings.Join(lines, ""\n"")
        err = ioutil.WriteFile(""myfile"", []byte(output), 0644)
        if err != nil {
                log.Fatalln(err)
        }
}
</code></pre>

<p>There's a gist too (with the same code)
<a href=""https://gist.github.com/dallarosa/b58b0e3425761e0a7cf6"">https://gist.github.com/dallarosa/b58b0e3425761e0a7cf6</a></p>
","26153102"
"Does Go have callback concept?","7218","","<p>I found many talks saying that Node.js is bad because of callback hell and Go is good because of its synchronous model.  </p>

<p>What I feel is Go can also do callback as same as Node.js but in a synchronous way. As we can <a href=""http://blog.denevell.org/golang-closures-anonymous-functions.html"" rel=""nofollow noreferrer"">pass anonymous function and do closure things</a> </p>

<p>So, why are they comparing Go and Node.js in callback perspective as if Go  cannot become callback hell.</p>

<p>Or I misunderstand the meaning of callback and anonymous function in Go? </p>
","<p>A lot of things take time, e.g. waiting on a network socket, a file system read, a system call, etc. Therefore, a lot of languages, or more precisely their standard library, include asynchronous version of their functions (often in addition to the synchronous version), so that your program is able to do something else in the mean-time.</p>

<p>In node.js things are even more extreme. They use a single-threaded event loop and therefore need to ensure that your program never blocks. They have a very well written standard library that is built around the concept of being asynchronous and they use callbacks in order to notify you when something is ready. The code basically looks like this:</p>

<pre><code>doSomething1(arg1, arg2, function() {
  doSomething2(arg1, arg2, function() {
    doSomething3(function() {
      // done
    });
  });
});
somethingElse();
</code></pre>

<p><code>doSomething1</code> might take a long time to execute (because it needs to read from the network for example), but your program can still execute <code>somethingElse</code> in the mean time. After <code>doSomething1</code> has been executed, you want to call <code>doSomething2</code> and <code>doSomething3</code>.</p>

<p>Go on the other hand is based around the concept of goroutines and channels (google for ""Communicating Sequential Processes"", if you want to learn more about the abstract concept). Goroutines are very cheap (you can have several thousands of them running at the same time) and therefore you can use them everywhere. The same code might look like this in Go:</p>

<pre><code>go func() {
  doSomething1(arg1, arg2)
  doSomething2(arg1, arg2)
  doSomething3()
  // done
}()
somethingElse()
</code></pre>

<p>Whereas node.js focus on providing only asynchronous APIs, Go usually encourages you to write only synchronous APIs (without callbacks or channels). The call to <code>doSomething1</code> will block the current goroutine and <code>doSomething2</code> will only be executed after <code>doSomething1</code> has finished. But that's not a problem in Go, since there are usually other goroutines available that can be scheduled to run on the system thread. In this case, <code>somethingElse</code> is part of another goroutine and can be executed in the meantime, just like in the node.js example.</p>

<p>I personally prefer the Go code, since it's easier to read and reason about. Another advantage of Go is that it also works well with computation heavy tasks. If you start a heavy computation in node.js that doesn't need to wait for network of filesystem calls, this computation basically blocks your event loop. Go's scheduler on the other hand will do its best to dispatch the goroutines on a few number of system threads and the OS might run those threads in parallel if your CPU supports it.</p>
","23709882"