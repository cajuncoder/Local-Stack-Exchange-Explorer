title,viewcount,title,body,body,acceptedanswerid
"How to concatenate string variables in Bash?","2309655","","<p>In PHP, strings are concatenated together as follows:</p>

<pre><code>$foo = ""Hello"";
$foo .= "" World"";
</code></pre>

<p>Here, <code>$foo</code> becomes ""Hello World"".</p>

<p>How is this accomplished in Bash?</p>
","<pre><code>foo=""Hello""
foo=""$foo World""
echo $foo
&gt; Hello World
</code></pre>

<p>In general to concatenate two variables you can just write them one after another:</p>

<pre><code>a='hello'
b='world'
c=$a$b
echo $c
&gt; helloworld
</code></pre>
","4181721"
"How do I tell if a regular file does not exist in Bash?","1635589","","<p>I've used the following script to see if a file exists:</p>

<pre><code>#!/bin/bash

FILE=$1     
if [ -f $FILE ]; then
   echo ""File $FILE exists.""
else
   echo ""File $FILE does not exist.""
fi
</code></pre>

<p>What's the correct syntax to use if I only want to check if the file does <strong>not</strong> exist?</p>

<pre><code>#!/bin/bash

FILE=$1     
if [ $FILE does not exist ]; then
   echo ""File $FILE does not exist.""
fi
</code></pre>
","<p>The <a href=""http://man7.org/linux/man-pages/man1/test.1.html"" rel=""noreferrer"">test</a> command (<code>[</code> here) has a ""not"" logical operator which is the exclamation point (similar to many other languages). Try this:</p>

<pre><code>if [ ! -f /tmp/foo.txt ]; then
    echo ""File not found!""
fi
</code></pre>
","638980"
"How do I split a string on a delimiter in Bash?","1439039","","<p>I have this string stored in a variable:</p>

<pre><code>IN=""bla@some.com;john@home.com""
</code></pre>

<p>Now I would like to split the strings by <code>;</code> delimiter so that I have:</p>

<pre><code>ADDR1=""bla@some.com""
ADDR2=""john@home.com""
</code></pre>

<p>I don't necessarily need the <code>ADDR1</code> and <code>ADDR2</code> variables. If they are elements of an array that's even better.</p>

<hr>

<p>After suggestions from the answers below, I ended up with the following which is what I was after:</p>

<pre><code>#!/usr/bin/env bash

IN=""bla@some.com;john@home.com""

mails=$(echo $IN | tr "";"" ""\n"")

for addr in $mails
do
    echo ""&gt; [$addr]""
done
</code></pre>

<p>Output:</p>

<pre><code>&gt; [bla@some.com]
&gt; [john@home.com]
</code></pre>

<p>There was a solution involving setting <a href=""http://en.wikipedia.org/wiki/Internal_field_separator"" rel=""noreferrer"">Internal_field_separator</a> (IFS) to <code>;</code>. I am not sure what happened with that answer, how do you reset <code>IFS</code> back to default?</p>

<p>RE: <code>IFS</code> solution, I tried this and it works, I keep the old <code>IFS</code> and then restore it:</p>

<pre><code>IN=""bla@some.com;john@home.com""

OIFS=$IFS
IFS=';'
mails2=$IN
for x in $mails2
do
    echo ""&gt; [$x]""
done

IFS=$OIFS
</code></pre>

<p>BTW, when I tried </p>

<pre><code>mails2=($IN)
</code></pre>

<p>I only got the first string when printing it in loop, without brackets around <code>$IN</code> it works.</p>
","<p>You can set the <a href=""http://en.wikipedia.org/wiki/Internal_field_separator"" rel=""noreferrer"">internal field separator</a> (IFS) variable, and then let it parse into an array. When this happens in a command, then the assignment to <code>IFS</code> only takes place to that single command's environment (to <code>read</code> ). It then parses the input according to the <code>IFS</code> variable value into an array, which we can then iterate over.</p>

<pre><code>IFS=';' read -ra ADDR &lt;&lt;&lt; ""$IN""
for i in ""${ADDR[@]}""; do
    # process ""$i""
done
</code></pre>

<p>It will parse one line of items separated by <code>;</code>, pushing it into an array. Stuff for processing whole of <code>$IN</code>, each time one line of input separated by <code>;</code>:</p>

<pre><code> while IFS=';' read -ra ADDR; do
      for i in ""${ADDR[@]}""; do
          # process ""$i""
      done
 done &lt;&lt;&lt; ""$IN""
</code></pre>
","918931"
"String contains in Bash","1238596","","<p>Using Bash, I have a string:</p>

<pre><code>string = ""My string""
</code></pre>

<p>How can I test if it contains another string?</p>

<pre><code>if [ $string ?? 'foo' ]; then
  echo ""It's there!""
fi
</code></pre>

<p>Where <code>??</code> is my unknown operator. Do I use echo and <code>grep</code>?</p>

<pre><code>if echo ""$string"" | grep 'foo'; then
  echo ""It's there!""
fi
</code></pre>

<p>That looks a bit clumsy.</p>
","<p>You can use <a href=""https://stackoverflow.com/a/229585/3755692"">Marcus's answer (* wildcards)</a> outside a case statement, too, if you use double brackets:</p>

<pre><code>string='My long string'
if [[ $string == *""My long""* ]]; then
  echo ""It's there!""
fi
</code></pre>

<p>Note that spaces in the needle string need to be placed between double quotes, and the <code>*</code> wildcards should be outside.</p>
","229606"
"Echo newline in Bash prints literal \n","1200424","","<p>In Bash, tried this:</p>

<pre><code>echo -e ""hello\nworld""
</code></pre>

<p>But it doesn't print a newline, only <code>\n</code>. How can I make it print the newline?</p>

<p>I'm using Ubuntu 11.04.</p>
","<p>You could use <code>printf</code> instead:</p>

<pre><code>printf ""hello\nworld\n""
</code></pre>

<p><code>printf</code> has more consistent behavior than <code>echo</code>. The behavior of <code>echo</code> varies greatly between different versions.</p>
","8467449"
"Getting the source directory of a Bash script from within","1161204","","<p>How do I get the path of the directory in which a <a href=""http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"" rel=""noreferrer"">Bash</a> script is located, <em>inside</em> that script?</p>

<p>For instance, let's say I want to use a Bash script as a launcher for another application. I want to change the working directory to the one where the Bash script is located, so I can operate on the files in that directory, like so: </p>

<pre>$ ./application</pre>
","<pre><code>DIR=""$( cd ""$( dirname ""${BASH_SOURCE[0]}"" )"" &amp;&amp; pwd )""
</code></pre>

<p>is a useful one-liner which will give you the full directory name of the script no matter where it is being called from.</p>

<p>It will work as long as the last component of the path used to find the script is not a symlink (directory links are OK).  If you also want to resolve any links to the script itself, you need a multi-line solution:</p>

<pre><code>SOURCE=""${BASH_SOURCE[0]}""
while [ -h ""$SOURCE"" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=""$( cd -P ""$( dirname ""$SOURCE"" )"" &amp;&amp; pwd )""
  SOURCE=""$(readlink ""$SOURCE"")""
  [[ $SOURCE != /* ]] &amp;&amp; SOURCE=""$DIR/$SOURCE"" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR=""$( cd -P ""$( dirname ""$SOURCE"" )"" &amp;&amp; pwd )""
</code></pre>

<p>This last one will work with any combination of aliases, <code>source</code>, <code>bash -c</code>, symlinks, etc.</p>

<p>Beware: if you <code>cd</code> to a different directory before running this snippet, the result may be incorrect! Also, watch out for <a href=""http://bosker.wordpress.com/2012/02/12/bash-scripters-beware-of-the-cdpath/"" rel=""noreferrer""><code>$CDPATH</code> gotchas</a>.</p>

<p>To understand how it works, try running this more verbose form:</p>

<pre><code>#!/bin/bash

SOURCE=""${BASH_SOURCE[0]}""
while [ -h ""$SOURCE"" ]; do # resolve $SOURCE until the file is no longer a symlink
  TARGET=""$(readlink ""$SOURCE"")""
  if [[ $TARGET == /* ]]; then
    echo ""SOURCE '$SOURCE' is an absolute symlink to '$TARGET'""
    SOURCE=""$TARGET""
  else
    DIR=""$( dirname ""$SOURCE"" )""
    echo ""SOURCE '$SOURCE' is a relative symlink to '$TARGET' (relative to '$DIR')""
    SOURCE=""$DIR/$TARGET"" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  fi
done
echo ""SOURCE is '$SOURCE'""
RDIR=""$( dirname ""$SOURCE"" )""
DIR=""$( cd -P ""$( dirname ""$SOURCE"" )"" &amp;&amp; pwd )""
if [ ""$DIR"" != ""$RDIR"" ]; then
  echo ""DIR '$RDIR' resolves to '$DIR'""
fi
echo ""DIR is '$DIR'""
</code></pre>

<p>And it will print something like:</p>

<pre class=""lang-none prettyprint-override""><code>SOURCE './scriptdir.sh' is a relative symlink to 'sym2/scriptdir.sh' (relative to '.')
SOURCE is './sym2/scriptdir.sh'
DIR './sym2' resolves to '/home/ubuntu/dotfiles/fo fo/real/real1/real2'
DIR is '/home/ubuntu/dotfiles/fo fo/real/real1/real2'
</code></pre>
","246128"
"How to set a variable to the output from a command in Bash?","1036080","","<p>I am working on a simple scripting project for work that involves the use of Bash.  I have a pretty simple script that is something like the following:</p>

<pre><code>#!/bin/bash

VAR1=""$1""
VAR2=""$2""

MOREF='sudo run command against $VAR1 | grep name | cut -c7-'

echo $MOREF
</code></pre>

<p>When I run this script from the command line and pass it the arguments, I am not getting any output.  However, when I run the commands contained within the <code>$MOREF</code> variable, I am able to get output.  I would like to know how one can take the results of a command that needs to be run within a script, save it to a variable, and then output that variable on the screen?</p>
","<p>In addition to the backticks, you can use <code>$()</code>, which I find easier to read, and allows for nesting.</p>

<pre><code>OUTPUT=""$(ls -1)""
echo ""${OUTPUT}""
</code></pre>

<p>Quoting (<code>""</code>) does matter to preserve multi-line values.</p>
","4651495"
"Extract filename and extension in Bash","1031657","","<p>I want to get the filename (without extension) and the extension separately.</p>

<p>The best solution I found so far is:</p>

<pre><code>NAME=`echo ""$FILE"" | cut -d'.' -f1`
EXTENSION=`echo ""$FILE"" | cut -d'.' -f2`
</code></pre>

<p>This is wrong because it doesn't work if the file name contains multiple ""."" characters. If, let's say, I have <strong>a.b.js</strong> it will consider <strong>a</strong> and <strong>b.js</strong>, instead of <strong>a.b</strong> and <strong>js</strong>.</p>

<p>It can be easily done in Python with</p>

<pre><code>file, ext = os.path.splitext(path)
</code></pre>

<p>but I'd prefer not to fire a Python interpreter just for this, if possible.</p>

<p>Any better ideas?</p>
","<p>First, get file name without the path:</p>

<pre><code>filename=$(basename ""$fullfile"")
extension=""${filename##*.}""
filename=""${filename%.*}""
</code></pre>

<p>Alternatively, you can focus on the last '/' of the path instead of the '.' which should work even if you have unpredictable file extensions:</p>

<pre><code>filename=""${fullfile##*/}""
</code></pre>
","965072"
"Read a file line by line assigning the value to a variable","1000288","","<p>I have the following .txt file:</p>

<pre><code>Marco
Paolo
Antonio
</code></pre>

<p>I want to read it line-by-line, and for each line I want to assign a .txt line value to a variable. Supposing my variable is <code>$name</code>, the flow is:</p>

<ul>
<li>Read first line from file</li>
<li>Assign <code>$name</code> = ""Marco""</li>
<li>Do some tasks with <code>$name</code></li>
<li>Read second line from file</li>
<li>Assign <code>$name</code> = ""Paolo""</li>
</ul>
","<p>The following (save as <code>rr.sh</code>) reads a file passed as an argument line by line:</p>

<pre><code>#!/bin/bash
while IFS='' read -r line || [[ -n ""$line"" ]]; do
    echo ""Text read from file: $line""
done &lt; ""$1""
</code></pre>

<p>Explanation:</p>

<ul>
<li><code>IFS=''</code> (or <code>IFS=</code>) prevents leading/trailing whitespace from being trimmed.</li>
<li><code>-r</code> prevents backslash escapes from being interpreted.</li>
<li><code>|| [[ -n $line ]]</code> prevents the last line from being ignored if it doesn't end with a <code>\n</code> (since <code>read</code> returns a non-zero exit code when it encounters EOF).</li>
</ul>

<p>Run the script as follows:</p>

<pre><code>chmod +x rr.sh
./rr.sh filename.txt
</code></pre>

<p>....</p>
","10929511"
"How to create a file in Linux from terminal window?","965534","","<p>What's the easiest way to create a file in Linux?</p>
","<p>Depending on what you want the file to contain:</p>

<ul>
<li><code>touch /path/to/file</code> for an empty file</li>
<li><p><code>somecommand &gt; /path/to/file</code> for a file containing the output of some command.</p>

<pre><code>  eg: grep --help &gt; randomtext.txt
      echo ""This is some text"" &gt; randomtext.txt
</code></pre></li>
<li><p><code>nano /path/to/file</code> or <code>vi /path/to/file</code> (or <code>any other editor emacs,gedit etc</code>)<br>
It either opens the existing one for editing or creates &amp; opens the empty file to enter, if it doesn't exist</p></li>
</ul>
","9381492"
"How do I parse command line arguments in Bash?","914087","","<p>Say, I have a script that gets called with this line:</p>

<pre><code>./myscript -vfd ./foo/bar/someFile -o /fizz/someOtherFile
</code></pre>

<p>or this one:</p>

<pre><code>./myscript -v -f -d -o /fizz/someOtherFile ./foo/bar/someFile 
</code></pre>

<p>What's the accepted way of parsing this such that in each case (or some combination of the two) <code>$v</code>, <code>$f</code>, and  <code>$d</code> will all be set to <code>true</code> and <code>$outFile</code> will be equal to <code>/fizz/someOtherFile</code> ?</p>
","<h1>Preferred Method: Using straight bash without getopt[s]</h1>

<p>I originally answered the question as the OP asked. This Q/A is getting a lot of attention, so I should also offer the non-magic way to do this. I'm going to expand upon <a href=""https://stackoverflow.com/a/13359121/321973"">guneysus's answer</a> to fix the nasty sed and include <a href=""https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash/13359121?noredirect=1#comment29656357_13359121"">Tobias Kienzler's suggestion</a>.</p>

<p>Two of the most common ways to pass key value pair arguments are:</p>

<h2>Straight Bash Space Separated</h2>

<p>Usage     <code> ./myscript.sh -e conf -s /etc -l /usr/lib /etc/hosts </code></p>

<pre><code>#!/bin/bash

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key=""$1""

case $key in
    -e|--extension)
    EXTENSION=""$2""
    shift # past argument
    shift # past value
    ;;
    -s|--searchpath)
    SEARCHPATH=""$2""
    shift # past argument
    shift # past value
    ;;
    -l|--lib)
    LIBPATH=""$2""
    shift # past argument
    shift # past value
    ;;
    --default)
    DEFAULT=YES
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=(""$1"") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- ""${POSITIONAL[@]}"" # restore positional parameters

echo FILE EXTENSION  = ""${EXTENSION}""
echo SEARCH PATH     = ""${SEARCHPATH}""
echo LIBRARY PATH    = ""${LIBPATH}""
echo DEFAULT         = ""${DEFAULT}""
echo ""Number files in SEARCH PATH with EXTENSION:"" $(ls -1 ""${SEARCHPATH}""/*.""${EXTENSION}"" | wc -l)
if [[ -n $1 ]]; then
    echo ""Last line of file specified as non-opt/last argument:""
    tail -1 ""$1""
fi
</code></pre>

<h2>Straight Bash Equals Separated</h2>

<p>Usage <code>./myscript.sh -e=conf -s=/etc -l=/usr/lib /etc/hosts</code></p>

<pre><code>#!/bin/bash

for i in ""$@""
do
case $i in
    -e=*|--extension=*)
    EXTENSION=""${i#*=}""
    shift # past argument=value
    ;;
    -s=*|--searchpath=*)
    SEARCHPATH=""${i#*=}""
    shift # past argument=value
    ;;
    -l=*|--lib=*)
    LIBPATH=""${i#*=}""
    shift # past argument=value
    ;;
    --default)
    DEFAULT=YES
    shift # past argument with no value
    ;;
    *)
          # unknown option
    ;;
esac
done
echo ""FILE EXTENSION  = ${EXTENSION}""
echo ""SEARCH PATH     = ${SEARCHPATH}""
echo ""LIBRARY PATH    = ${LIBPATH}""
echo ""Number files in SEARCH PATH with EXTENSION:"" $(ls -1 ""${SEARCHPATH}""/*.""${EXTENSION}"" | wc -l)
if [[ -n $1 ]]; then
    echo ""Last line of file specified as non-opt/last argument:""
    tail -1 $1
fi
</code></pre>

<p>To better understand <code>${i#*=}</code> search for ""Substring Removal"" in <a href=""http://tldp.org/LDP/abs/html/string-manipulation.html"" rel=""noreferrer"">this guide</a>. It is functionally equivalent to <code>`sed 's/[^=]*=//' &lt;&lt;&lt; ""$i""`</code> which calls a needless subprocess or <code>`echo ""$i"" | sed 's/[^=]*=//'`</code> which calls <em>two</em> needless subprocesses. </p>

<h1>Using getopt[s]</h1>

<p>from: <a href=""http://mywiki.wooledge.org/BashFAQ/035#getopts"" rel=""noreferrer"">http://mywiki.wooledge.org/BashFAQ/035#getopts</a></p>

<p><strong>Never use getopt(1).</strong> <code>getopt</code> cannot handle empty arguments strings, or arguments with embedded whitespace. Please forget that it ever existed.</p>

<p>The POSIX shell (and others) offer <code>getopts</code> which is safe to use instead. Here is a simplistic <code>getopts</code> example:</p>

<pre><code>#!/bin/sh

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
output_file=""""
verbose=0

while getopts ""h?vf:"" opt; do
    case ""$opt"" in
    h|\?)
        show_help
        exit 0
        ;;
    v)  verbose=1
        ;;
    f)  output_file=$OPTARG
        ;;
    esac
done

shift $((OPTIND-1))

[ ""$1"" = ""--"" ] &amp;&amp; shift

echo ""verbose=$verbose, output_file='$output_file', Leftovers: $@""

# End of file
</code></pre>

<p>The advantages of <code>getopts</code> are:</p>

<ol>
<li>It's portable, and will work in e.g. dash.  </li>
<li>It can handle things like <code>-vf filename</code> in the expected Unix way, automatically.</li>
</ol>

<p>The disadvantage of <code>getopts</code> is that it can only handle short options (<code>-h</code>, not <code>--help</code>) without trickery.</p>

<p>There is a <a href=""http://wiki.bash-hackers.org/howto/getopts_tutorial"" rel=""noreferrer"">getopts tutorial</a> which explains what all of the syntax and variables mean.  In bash, there is also <code>help getopts</code>, which might be informative.</p>
","14203146"
"Looping through the content of a file in Bash","909642","","<p>How do I iterate through each line of a text file with <a href=""http://en.wikipedia.org/wiki/Bash"" rel=""noreferrer"">Bash</a>?</p>

<p>With this script:</p>

<pre><code>echo ""Start!""
for p in (peptides.txt)
do
    echo ""${p}""
done
</code></pre>

<p>I get this output on the screen:</p>

<pre><code>Start!
./runPep.sh: line 3: syntax error near unexpected token `('
./runPep.sh: line 3: `for p in (peptides.txt)'
</code></pre>

<p>(Later I want to do something more complicated with $p than
just output to the screen.)</p>

<hr>

<p>The environment variable SHELL is (from env):</p>

<pre><code>SHELL=/bin/bash
</code></pre>

<p><code>/bin/bash --version</code> output:</p>

<pre><code>GNU bash, version 3.1.17(1)-release (x86_64-suse-linux-gnu)
Copyright (C) 2005 Free Software Foundation, Inc.
</code></pre>

<p><code>cat /proc/version</code> output:</p>

<pre><code>Linux version 2.6.18.2-34-default (geeko@buildhost) (gcc version 4.1.2 20061115 (prerelease) (SUSE Linux)) #1 SMP Mon Nov 27 11:46:27 UTC 2006
</code></pre>

<p>The file peptides.txt contains:</p>

<pre><code>RKEKNVQ
IPKKLLQK
QYFHQLEKMNVK
IPKKLLQK
GDLSTALEVAIDCYEK
QYFHQLEKMNVKIPENIYR
RKEKNVQ
VLAKHGKLQDAIN
ILGFMK
LEDVALQILL
</code></pre>
","<p>One way to do it is:</p>

<pre><code>while read p; do
  echo $p
done &lt;peptides.txt
</code></pre>

<hr>

<p>Exceptionally, if the <a href=""https://unix.stackexchange.com/questions/107800/using-while-loop-to-ssh-to-multiple-servers"">loop body may read from standard input</a>, you can open the file using a different file descriptor:</p>

<pre><code>while read -u 10 p; do
  ...
done 10&lt;peptides.txt
</code></pre>

<p>Here, 10 is just an arbitrary number (different from 0, 1, 2).</p>
","1521498"
"How to output MySQL query results in CSV format?","823673","","<p>Is there an easy way to run a MySQL query from the Linux command line and output the results in <a href=""http://en.wikipedia.org/wiki/Comma-separated_values"" rel=""noreferrer"">CSV </a> format?</p>

<p>Here's what I'm doing now:</p>

<pre><code>mysql -u uid -ppwd -D dbname &lt;&lt; EOQ | sed -e 's/        /,/g' | tee list.csv
select id, concat(""\"""",name,""\"""") as name
from students
EOQ
</code></pre>

<p>It gets messy when there are a lot of columns that need to be surrounded by quotes, or if there are quotes in the results that need to be escaped.</p>
","<p>From <a href=""http://www.tech-recipes.com/rx/1475/save-mysql-query-results-into-a-text-or-csv-file/"" rel=""noreferrer"">http://www.tech-recipes.com/rx/1475/save-mysql-query-results-into-a-text-or-csv-file/</a></p>

<pre><code>SELECT order_id,product_name,qty
FROM orders
WHERE foo = 'bar'
INTO OUTFILE '/var/lib/mysql-files/orders.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY '""'
LINES TERMINATED BY '\n';
</code></pre>

<p>Using this command columns names will not be exported.</p>

<p>Also note that <code>/var/lib/mysql-files/orders.csv</code> will be on the <em>server</em> that is running MySQL. The user that the MySQL process is running under must have permissions to write to the directory chosen, or the command will fail.</p>

<p>If you want to write output to your local machine from a remote server (especially a hosted or virtualize machine such as Heroku or Amazon RDS), this solution is not suitable.</p>
","356605"
"Redirect all output to file","822398","","<p>I know that in Linux, to redirect output from the screen to a file, I can either use the <code>&gt;</code> or <code>tee</code>. However, I'm not sure why part of the output is still output to the screen and not written to the file. </p>

<p>Is there a way to redirect all output to file?</p>
","<p>That part is written to stderr, use <code>2&gt;</code> to redirect it. For example:</p>

<pre><code>foo &gt; stdout.txt 2&gt; stderr.txt
</code></pre>

<p>or if you want in same file:</p>

<pre><code>foo &gt; allout.txt 2&gt;&amp;1
</code></pre>

<p>Note: this works in (ba)sh, check your shell for proper syntax</p>
","6674348"
"How to permanently set $PATH on Linux/Unix?","810652","","<p>I'm trying to add a directory to my path so it will always be in my Linux path. I've tried:</p>

<pre><code>export PATH=$PATH:/path/to/dir
</code></pre>

<p>This works, however each time I exit the terminal and start a new terminal instance, this path is lost, and I need to run the export command again.</p>

<p>How can I do it so this will be set permanently?</p>
","<p><strong>You need to add it to your <code>~/.profile</code> or <code>~/.bashrc</code> file.</strong></p>

<pre><code>export PATH=$PATH:/path/to/dir
</code></pre>

<p>Depending on what you're doing, you also may want to symlink to binaries:</p>

<pre><code>cd /usr/bin
sudo ln -s /path/to/binary binary-name
</code></pre>

<p><strong>Note that this will not automatically update your path for the remainder of the session.</strong> To do this, you should run:</p>

<pre><code>source ~/.profile 
or
source ~/.bashrc
</code></pre>
","14638025"
"In the shell, what does "" 2>&1 "" mean?","789566","","<p>In a Unix shell, if I want to combine <code>stderr</code> and <code>stdout</code> into the <code>stdout</code> stream for further manipulation, I can append the following on the end of my command:</p>

<pre><code>2&gt;&amp;1
</code></pre>

<p>So, if I want to use ""head"" on the output from g++, I can do something like this:</p>

<pre><code>g++ lots_of_errors 2&gt;&amp;1 | head
</code></pre>

<p>so I can see only the first few errors. </p>

<p>I always have trouble remembering this, and I constantly have to go look it up, and it is mainly because I don't fully understand the syntax of this particular trick.  Can someone break this up and explain character by character what ""2>&amp;1""  means?</p>
","<p>File descriptor 1 is the standard output (stdout).<br>
File descriptor 2 is the standard error (stderr).</p>

<p>Here is one way to remember this construct (although it is not entirely accurate): at first, <code>2&gt;1</code> may look like a good way to redirect stderr to stdout. However, it will actually be interpreted as ""redirect stderr to a file named <code>1</code>"". <code>&amp;</code> indicates that what follows is a file descriptor and not a filename. So the construct becomes: <code>2&gt;&amp;1</code>.</p>
","818284"
"YYYY-MM-DD format date in shell script","773742","","<p>I tried using <code>$(date)</code> in my bash shell script, however I want the date in YYYY-MM-DD format. How do I get this?</p>
","<p>In Bash: </p>

<p>get <em>year-month-day</em> from <code>date</code></p>

<pre><code>DATE=`date +%Y-%m-%d`
</code></pre>

<p>get <em>year-month-day hour:minute:second</em> from <code>date</code></p>

<pre><code>DATE=`date '+%Y-%m-%d %H:%M:%S'`
</code></pre>

<p>Other available date formats can be viewed from the <a href=""http://man7.org/linux/man-pages/man1/date.1.html"" rel=""noreferrer"">date man pages</a>:</p>

<pre><code>man date
</code></pre>
","1401495"
"How to check if a variable is set in Bash?","771634","","<p>How do I know if a variable is set in Bash?</p>

<p>For example, how do I check if the user gave the first parameter to a function?</p>

<pre><code>function a {
    # if $1 is set ?
}
</code></pre>
","<h2>The right way</h2>

<pre><code>if [ -z ${var+x} ]; then echo ""var is unset""; else echo ""var is set to '$var'""; fi
</code></pre>

<p>where <code>${var+x}</code> is a <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02"" rel=""noreferrer"">parameter expansion</a> which evaluates to nothing if <code>var</code> is unset, and substitutes the string <code>x</code> otherwise.</p>

<h3>Quotes Digression</h3>

<p>Quotes can be omitted (so we can say <code>${var+x}</code> instead of <code>""${var+x}""</code>) because this syntax &amp; usage guarantees this will only expand to something that does not require quotes (since it either expands to <code>x</code> (which contains no word breaks so it needs no quotes), or to nothing (which results in <code>[ -z  ]</code>, which conveniently evaluates to the same value (true) that <code>[ -z """" ]</code> does as well)).</p>

<p>However, while quotes can be safely omitted, and it was not immediately obvious to all (it wasn't even apparent to <a href=""https://stackoverflow.com/users/2255628/destiny-architect"">the first author of this quotes explanation</a> who is also a major Bash coder), it would sometimes be better to write the solution with quotes as <code>[ -z ""${var+x}"" ]</code>, at the very small possible cost of an O(1) speed penalty.  The first author also added this as a comment next to the code using this solution giving the URL to this answer, which now also includes the explanation for why the quotes can be safely omitted.</p>

<h2>The wrong way</h2>

<pre><code>if [ -z ""$var"" ]; then echo ""var is unset""; else echo ""var is set to '$var'""; fi
</code></pre>

<p>This is because it doesn't distinguish between a variable that is unset and a variable that is set to the empty string. That is to say, if <code>var=''</code>, then the above solution will incorrectly output that var is unset.</p>

<p>But this distinction is essential in situations where the user has to specify an extension, or additional list of properties, and that not specifying them defaults to a non-empty value, whereas specifying the empty string should make the script use an empty extension or list of additional properties.</p>

<p></p>
","13864829"
"Extract substring in Bash","751793","","<p>Given a filename in the form <code>someletters_12345_moreleters.ext</code>, I want to extract the 5 digits and put them into a variable.</p>

<p>So to emphasize the point, I have a filename with x number of characters then a five digit sequence surrounded by a single underscore on either side then another set of x number of characters.  I want to take the 5 digit number and put that into a variable.</p>

<p>I am very interested in the number of different ways that this can be accomplished.</p>
","<p>Use <a href=""http://www.manpagez.com/man/1/cut/"" rel=""noreferrer"">cut</a>:</p>

<pre><code>echo 'someletters_12345_moreleters.ext' | cut -d'_' -f 2
</code></pre>

<p>More generic:</p>

<pre><code>INPUT='someletters_12345_moreleters.ext'
SUBSTRING=$(echo $INPUT| cut -d'_' -f 2)
echo $SUBSTRING
</code></pre>
","428118"
"How do I prompt for Yes/No/Cancel input in a Linux shell script?","750686","","<p>I want to pause input in a shell script, and prompt the user for choices. The standard 'Yes, No, or Cancel' type question. How do I accomplish this in a typical bash prompt?</p>
","<p>The simplest and most widely available method to get user input at a shell prompt is the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#index-read"" rel=""noreferrer""><code>read</code></a> command. The best way to illustrate its use is a simple demonstration:</p>

<pre><code>while true; do
    read -p ""Do you wish to install this program?"" yn
    case $yn in
        [Yy]* ) make install; break;;
        [Nn]* ) exit;;
        * ) echo ""Please answer yes or no."";;
    esac
done
</code></pre>

<p>Another method, pointed out by Steven Huwig, is Bash's <a href=""http://www.gnu.org/software/bash/manual/bashref.html#index-select"" rel=""noreferrer""><code>select</code></a> command. Here is the same example using <code>select</code>:</p>

<pre><code>echo ""Do you wish to install this program?""
select yn in ""Yes"" ""No""; do
    case $yn in
        Yes ) make install; break;;
        No ) exit;;
    esac
done
</code></pre>

<p>With <code>select</code> you don't need to sanitize the input &ndash; it displays the available choices, and you type a number corresponding to your choice. It also loops automatically, so there's no need for a <code>while true</code> loop to retry if they give invalid input.</p>

<p>Also, please check out the <a href=""https://stackoverflow.com/a/27875395/9084"">excellent answer</a> by F. Hauri.</p>
","226724"
"How to run a shell script on a Unix console or Mac terminal?","749411","","<p>I know it, forget it and relearn it again. Time to write it down.</p>
","<p>To run a non-executable <code>sh</code> script, use:</p>

<pre><code>sh myscript
</code></pre>

<p>To run a non-executable <code>bash</code> script, use:</p>

<pre><code>bash myscript
</code></pre>

<p>To start an executable (which is any file with executable permission); you just specify it by its path:</p>

<pre><code>/foo/bar
/bin/bar
./bar
</code></pre>

<p>To make a script executable, give it the necessary permission:</p>

<pre><code>chmod +x bar
./bar
</code></pre>

<p>When a file is executable, the <strong>kernel</strong> is responsible for figuring out how to execte it.  For non-binaries, this is done by looking at the first line of the file.  It should contain a <code>hashbang</code>:</p>

<pre><code>#! /usr/bin/env bash
</code></pre>

<p>The hashbang tells the kernel what program to run (in this case the command <code>/usr/bin/env</code> is ran with the argument <code>bash</code>).  Then, the script is passed to the program (as second argument) along with all the arguments you gave the script as subsequent arguments.</p>

<p>That means <strong>every script that is executable should have a hashbang</strong>.  If it doesn't, you're not telling the kernel what it <em>is</em>, and therefore the kernel doesn't know what program to use to interprete it.  It could be <code>bash</code>, <code>perl</code>, <code>python</code>, <code>sh</code>, or something else.  (In reality, the kernel will often use the user's default shell to interprete the file, which is very dangerous because it might not be the right interpreter at all or it might be able to parse some of it but with subtle behavioural differences such as is the case between <code>sh</code> and <code>bash</code>).</p>

<h1>A note on <code>/usr/bin/env</code></h1>

<p>Most commonly, you'll see hash bangs like so:</p>

<pre><code>#!/bin/bash
</code></pre>

<p>The result is that the kernel will run the program <code>/bin/bash</code> to interpret the script.  Unfortunately, <code>bash</code> is not always shipped by default, and it is not always available in <code>/bin</code>.  While on Linux machines it usually is, there are a range of other POSIX machines where <code>bash</code> ships in various locations, such as <code>/usr/xpg/bin/bash</code> or <code>/usr/local/bin/bash</code>.</p>

<p>To write a portable bash script, we can therefore not rely on hard-coding the location of the <code>bash</code> program.  POSIX already has a mechanism for dealing with that: <code>PATH</code>.  The idea is that you install your programs in one of the directories that are in <code>PATH</code> and the system should be able to find your program when you want to run it by name.</p>

<p>Sadly, you <strong><em>cannot</em></strong> just do this:</p>

<pre><code>#!bash
</code></pre>

<p>The kernel won't (some might) do a <code>PATH</code> search for you.  There is a program that can do a <code>PATH</code> search for you, though, it's called <code>env</code>.  Luckily, nearly all systems have an <code>env</code> program installed in <code>/usr/bin</code>.  So we start <code>env</code> using a hardcoded path, which then does a <code>PATH</code> search for <code>bash</code> and runs it so that it can interpret your script:</p>

<pre><code>#!/usr/bin/env bash
</code></pre>

<p>This approach has one downside: According to POSIX, the hashbang can have <strong>one argument</strong>.  In this case, we use <code>bash</code> as the argument to the <code>env</code> program.  That means we have no space left to pass arguments to <code>bash</code>.  So there's no way to convert something like <code>#!/bin/bash -exu</code> to this scheme.  You'll have to put <code>set -exu</code> after the hashbang instead.</p>

<p>This approach also has another advantage: Some systems may ship with a <code>/bin/bash</code>, but the user may not like it, may find it's buggy or outdated, and may have installed his own <code>bash</code> somewhere else.  This is often the case on OS X (Macs) where Apple ships an outdated <code>/bin/bash</code> and users install an up-to-date <code>/usr/local/bin/bash</code> using something like Homebrew.  When you use the <code>env</code> approach which does a <code>PATH</code> search, you take the user's preference into account and use his preferred bash over the one his system shipped with.</p>
","733901"
"How to count lines in a document?","733389","","<p>I have lines like these, and I want to know how many lines I actually have...</p>

<pre><code>09:16:39 AM  all    2.00    0.00    4.00    0.00    0.00    0.00    0.00    0.00   94.00
09:16:40 AM  all    5.00    0.00    0.00    4.00    0.00    0.00    0.00    0.00   91.00
09:16:41 AM  all    0.00    0.00    4.00    0.00    0.00    0.00    0.00    0.00   96.00
09:16:42 AM  all    3.00    0.00    1.00    0.00    0.00    0.00    0.00    0.00   96.00
09:16:43 AM  all    0.00    0.00    1.00    0.00    1.00    0.00    0.00    0.00   98.00
09:16:44 AM  all    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
09:16:45 AM  all    2.00    0.00    6.00    0.00    0.00    0.00    0.00    0.00   92.00
</code></pre>

<p>Is there a way to count them all using linux commands?</p>
","<p>Use <code>wc</code>:</p>

<pre><code>wc -l &lt;filename&gt;
</code></pre>

<p>This will output the number of lines in <code>&lt;filename&gt;</code>:</p>

<pre><code>$ wc -l /dir/file.txt
3272485 /dir/file.txt
</code></pre>

<p>Or, to omit the <code>&lt;filename&gt;</code> from the result use <code>wc -l &lt; &lt;filename&gt;</code>:</p>

<pre><code>$ wc -l &lt; /dir/file.txt
3272485
</code></pre>

<p>You can also pipe data to <code>wc</code> as well:</p>

<pre><code>$ cat /dir/file.txt | wc -l
3272485
$ curl yahoo.com --silent | wc -l
63
</code></pre>
","3137099"
"Check existence of input argument in a Bash shell script","724228","","<p>I need to check the existence of an input argument. I have the following script:</p>

<pre><code>if [ ""$1"" -gt ""-1"" ]
  then echo hi
fi
</code></pre>

<p>I get</p>

<pre><code>[: : integer expression expected
</code></pre>

<p>How do I check the input argument1 first to see if it exists?</p>
","<p>It is:</p>

<pre class=""lang-none prettyprint-override""><code>if [ $# -eq 0 ]
  then
    echo ""No arguments supplied""
fi
</code></pre>

<p>The <code>$#</code> variable will tell you the number of input arguments the script was passed.</p>

<p>Or you can check if an argument is an empty string or not like:</p>

<pre><code>if [ -z ""$1"" ]
  then
    echo ""No argument supplied""
fi
</code></pre>

<p>The <code>-z</code> switch will test if the expansion of ""$1"" is a null string or not. If it is a null string then the body is executed.</p>
","6482403"
"How to compare strings in Bash","675409","","<p>How do I compare a variable to a string (and do something if they match)?</p>
","<p>Try this:</p>

<pre><code>if [ ""$x"" == ""valid"" ]; then
  echo ""x has the value 'valid'""
fi
</code></pre>

<p>If you want to do something when they don't match, replace <code>==</code> with <code>!=</code>. You want the quotes around <code>$x</code>, because if <code>$x</code> is empty, you'll get <code>if [ == ""valid"" ]...</code> which is a syntax error.</p>

<hr>

<p>Note that <code>bash</code> allows <code>==</code> to be used with <code>[</code>, but this is not standard. Either use <code>[[ ""$x"" == ""valid"" ]]</code> (in which case, the quotes around <code>$x</code> are optional) or <code>[ ""$x"" = ""valid"" ]</code>.</p>
","2237103"
"How do I compare two string variables in an 'if' statement in Bash?","655807","","<p>I'm trying to get an <code>if</code> statement to work in <a href=""http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"" rel=""noreferrer"">Bash</a> (using <a href=""http://en.wikipedia.org/wiki/Ubuntu_%28operating_system%29"" rel=""noreferrer"">Ubuntu</a>):</p>

<pre><code>#!/bin/bash

s1=""hi""
s2=""hi""

if [""$s1"" == ""$s2""]
then
  echo match
fi
</code></pre>

<p>I've tried various forms of the <code>if</code> statement, using <code>[[""$s1"" == ""$s2""]]</code>, with and without quotes, using <code>=</code>, <code>==</code> and <code>-eq</code>, but I still get the following error:</p>

<blockquote>
  <p>[hi: command not found</p>
</blockquote>

<p>I've looked at various sites and tutorials and copied those, but it doesn't work - what am I doing wrong?</p>

<p>Eventually, I want to say if <code>$s1</code> contains <code>$s2</code>, so how can I do that?</p>

<p>I did just work out the spaces bit.. :/ How do I say contains?</p>

<p>I tried</p>

<pre><code>if [[ ""$s1"" == ""*$s2*"" ]]
</code></pre>

<p>but it didn't work.</p>
","<p>For string comparison, use:</p>

<pre><code>if [ ""$s1"" == ""$s2"" ]
</code></pre>

<p>For the <code>a</code> contains <code>b</code>, use:</p>

<pre><code>if [[ $s1 == *""$s2""* ]]
</code></pre>

<p>(and make sure to add spaces between the symbols):</p>

<p>bad:</p>

<pre><code>if [""$s1"" == ""$s2""]
</code></pre>

<p>good:</p>

<pre><code>if [ ""$s1"" == ""$s2"" ]
</code></pre>
","4277753"
"How do I iterate over a range of numbers defined by variables in Bash?","645406","","<p>How do I iterate over a range of numbers in Bash when the range is given by a variable?</p>

<p>I know I can do this (called ""sequence expression"" in the Bash <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion"" rel=""noreferrer"">documentation</a>):</p>

<pre><code> for i in {1..5}; do echo $i; done
</code></pre>

<p>Which gives:</p>

<blockquote>
  <p>1 <br/>
  2 <br/>
  3 <br/>
  4 <br/>
  5</p>
</blockquote>

<p>Yet, how can I replace either of the range endpoints with a variable? This doesn't work:</p>

<pre><code>END=5
for i in {1..$END}; do echo $i; done
</code></pre>

<p>Which prints:</p>

<blockquote>
  <p>{1..5}</p>
</blockquote>
","<pre><code>for i in $(seq 1 $END); do echo $i; done</code></pre>

<p>edit: I prefer <code>seq</code> over the other methods because I can actually remember it ;)</p>
","169517"
"Passing parameters to a Bash function","612213","","<p>I am trying to search how to pass parameters in a Bash function, but what comes up is always how to pass parameter from the command line. </p>

<p>I would like to pass parameters within my script. I tried:</p>

<pre><code>myBackupFunction("".."", ""..."", ""xx"")

function myBackupFunction($directory, $options, $rootPassword) {
     ...
}
</code></pre>

<p>But the syntax is not correct, how to pass a parameter to my function?</p>
","<p>There are two typical ways of declaring a function. I prefer the second approach.</p>

<pre><code>function function_name {
   command...
} 
</code></pre>

<p>or </p>

<pre><code>function_name () {
   command...
} 
</code></pre>

<p>To call a function with arguments:</p>

<pre><code>function_name $arg1 $arg2
</code></pre>

<p>The function refers to passed arguments by their position (not by name), that is $1, $2, and so forth. <strong>$0</strong> is the name of the script itself.</p>

<p>Example:</p>

<pre><code>function_name () {
   echo ""Parameter #1 is $1""
}
</code></pre>

<p>Also, you need to call your function <strong>after</strong> it is declared. </p>

<pre><code>#!/usr/bin/env sh

foo 1  # this will fail because foo has not been declared yet.

foo() {
    echo ""Parameter #1 is $1""
}

foo 2 # this will work.
</code></pre>

<p><strong>Output:</strong></p>

<pre class=""lang-none prettyprint-override""><code>./myScript.sh: line 2: foo: command not found
Parameter #1 is 2
</code></pre>

<p><a href=""http://tldp.org/LDP/abs/html/complexfunct.html"" rel=""noreferrer"">Reference: Advanced Bash-Scripting Guide</a>.</p>
","6212408"
"How to do a logical OR operation in Shell Scripting","604277","","<p>I am trying to do a simple condition check, but it doesn't seem to work.</p>

<p>If <code>$#</code> is equal to <code>0</code> or is greater than <code>1</code> then say hello.</p>

<p>I have tried the following syntax with no success:</p>

<pre><code>if [ ""$#"" == 0 -o ""$#"" &gt; 1 ] ; then
 echo ""hello""
fi

if [ ""$#"" == 0 ] || [ ""$#"" &gt; 1 ] ; then
 echo ""hello""
fi
</code></pre>
","<p>This should work OK.</p>

<pre><code>if [ ""$#"" == 0 ] || [ ""$#"" -gt 1 ] ; then
 echo ""hello""
fi
</code></pre>

<p>I'm not sure if this is different in other shells but if you wish to use &lt;, >, you need to put them inside double parenthesis like so: </p>

<pre><code>if ((""$#"" &gt; 1))
 ...
</code></pre>
","4111510"
"Loop through an array of strings in Bash?","592079","","<p>I want to write a script that loops through 15 strings (array possibly?) Is that possible?</p>

<p>Something like:</p>

<pre><code>for databaseName in listOfNames
then
  # Do something
end
</code></pre>
","<p>You can use it like this:</p>

<pre><code>## declare an array variable
declare -a arr=(""element1"" ""element2"" ""element3"")

## now loop through the above array
for i in ""${arr[@]}""
do
   echo ""$i""
   # or do whatever with individual element of the array
done

# You can access them using echo ""${arr[0]}"", ""${arr[1]}"" also
</code></pre>

<p>Also works for multi-line array declaration</p>

<pre><code>declare -a arr=(""element1"" 
                ""element2"" ""element3""
                ""element4""
                )
</code></pre>
","8880633"
"Specify private SSH-key to use when executing shell command with or without Ruby?","570445","","<p>A rather unusual situation perhaps, but I want to specify a private SSH-key to use when executing a shell (git) command from the local computer.</p>

<p>Basically like this: </p>

<pre><code>git clone git@github.com:TheUser/TheProject.git -key ""/home/christoffer/ssh_keys/theuser""
</code></pre>

<p>Or even better (in Ruby):</p>

<pre><code>with_key(""/home/christoffer/ssh_keys/theuser"") do
  sh(""git clone git@github.com:TheUser/TheProject.git"")
end
</code></pre>

<p>I have seen examples of connecting to a remote server with Net::SSH that uses a specified private key, but this is a local command. Is it possible?</p>
","<p>Something like this should work (suggested by orip):</p>

<pre><code>ssh-agent bash -c 'ssh-add /somewhere/yourkey; git clone git@github.com:user/project.git'
</code></pre>

<p>if you prefer subshells, you could try the following (though it is more fragile):</p>

<pre><code>ssh-agent $(ssh-add /somewhere/yourkey; git clone git@github.com:user/project.git)
</code></pre>

<p>Git will invoke SSH which will find its agent by environment variable; this will, in turn, have the key loaded.</p>

<p>Alternatively, setting <code>HOME</code> may also do the trick, provided you are willing to setup a directory that contains only a <code>.ssh</code> directory as <code>HOME</code>; this may either contain an identity.pub, or a <a href=""http://linux.die.net/man/5/ssh_config"" rel=""noreferrer"">config file</a> setting IdentityFile.</p>
","4565746"
"Converting string to lower case in Bash","569780","","<p>Is there a way in <a href=""/questions/tagged/bash"" class=""post-tag"" title=""show questions tagged &#39;bash&#39;"" rel=""tag"">bash</a> to convert a string into a lower case string?</p>

<p>For example, if I have:</p>

<pre><code>a=""Hi all""
</code></pre>

<p>I want to convert it to:</p>

<pre><code>""hi all""
</code></pre>
","<p>The are various ways:</p>

<h3><a href=""http://en.wikipedia.org/wiki/Tr_%28Unix%29"" rel=""noreferrer"">tr</a></h3>

<pre><code>$ echo ""$a"" | tr '[:upper:]' '[:lower:]'
hi all
</code></pre>

<h3><a href=""http://en.wikipedia.org/wiki/AWK"" rel=""noreferrer"">AWK</a></h3>

<pre><code>$ echo ""$a"" | awk '{print tolower($0)}'
hi all
</code></pre>

<h3><a href=""https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"" rel=""noreferrer"">Bash 4.0</a></h3>

<pre><code>$ echo ""${a,,}""
hi all
</code></pre>

<h3><a href=""http://en.wikipedia.org/wiki/Perl"" rel=""noreferrer"">Perl</a></h3>

<pre><code>$ echo ""$a"" | perl -ne 'print lc'
hi all
</code></pre>

<h3><a href=""https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"" rel=""noreferrer"">Bash</a></h3>

<pre><code>lc(){
    case ""$1"" in
        [A-Z])
        n=$(printf ""%d"" ""'$1"")
        n=$((n+32))
        printf \\$(printf ""%o"" ""$n"")
        ;;
        *)
        printf ""%s"" ""$1""
        ;;
    esac
}
word=""I Love Bash""
for((i=0;i&lt;${#word};i++))
do
    ch=""${word:$i:1}""
    lc ""$ch""
done
</code></pre>
","2264537"
"sed command find and replace in file and overwrite file doesn't work, it empties the file","551608","","<p>I would like to run a find and replace on an HTML file through the command line.</p>

<p>My command looks something like this:</p>

<pre><code>sed -e s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html &gt; index.html
</code></pre>

<p>When I run this and look at the file afterward, it is empty. It deleted the contents of my file.</p>

<p>When I run this after restoring the file again:</p>

<pre><code>sed -e s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html
</code></pre>

<p>The <code>stdout</code> is the contents of the file, and the find and replace has been executed.</p>

<p>Why is this happening?</p>
","<p>When the <strong>shell</strong> sees  <code>&gt; index.html</code> in the command line it opens the file <code>index.html</code> for <strong>writing</strong>, wiping off all its previous contents.</p>

<p>To fix this you need to pass the <code>-i</code> option to <code>sed</code> to make the changes inline and create a backup of the original file before it does the changes in-place:</p>

<pre><code>sed -i.bak s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html
</code></pre>

<p>Without the .bak the command will fail on some platforms, such as Mac OSX.</p>
","5171935"
"How do I reload .bashrc without logging out and back in?","533642","","<p>If I make changes to <code>.bashrc</code>, how do I reload it without logging out and back in?</p>
","<p>You just have to enter the command:</p>

<pre><code>source ~/.bashrc
</code></pre>

<p>or you can use the shorter version of the command:</p>

<pre><code>. ~/.bashrc
</code></pre>
","2518150"
"Listing only directories using ls in bash: An examination","527718","","<p>This command lists directories in the current path: <code>ls -d */</code></p>

<p>What exactly does the pattern <code>*/</code> do?</p>

<p>And how can we give the absolute path in the above command (e.g. <code>ls -d /home/alice/Documents</code>) for listing only directories in that path?</p>
","<p><code>*/</code> is a pattern that matches all of the subdirectories in the current directory (<code>*</code> would match all files <em>and</em> subdirectories; the <code>/</code> restricts it to directories). Similarly, to list all subdirectories under /home/alice/Documents, use <code>ls -d /home/alice/Documents/*/</code></p>
","14352330"
"How does ""cat << EOF"" work in bash?","516834","","<p>I needed to write a script to enter multi-line input to a program (<code>psql</code>).</p>

<p>After a bit of googling, I found the following syntax works:</p>

<pre><code>cat &lt;&lt; EOF | psql ---params
BEGIN;

`pg_dump ----something`

update table .... statement ...;

END;
EOF
</code></pre>

<p>This correctly constructs the multi-line string (from <code>BEGIN;</code> to <code>END;</code>, inclusive) and pipes it as an input to <code>psql</code>.</p>

<p>But I have no idea how/why it works, can some one please explain?</p>

<p>I'm referring mainly to <code>cat &lt;&lt; EOF</code>, I know <code>&gt;</code> outputs to a file, <code>&gt;&gt;</code> appends to a file, <code>&lt;</code> reads input from file. </p>

<p>What does <code>&lt;&lt;</code> exactly do?</p>

<p>And is there a man page for it?</p>
","<p>This is called <strong><em>heredoc</strong> format</em> to provide a string into stdin. See <a href=""https://en.wikipedia.org/wiki/Here_document#Unix_shells"" rel=""noreferrer"">https://en.wikipedia.org/wiki/Here_document#Unix_shells</a> for more details.</p>

<hr>

<p>From <code>man bash</code>:</p>

<blockquote>
  <h2>Here Documents</h2>
  
  <p>This type of redirection instructs the shell to read input from
  the current source until a line
  containing only word (with no trailing
  blanks)  is  seen.</p>
  
  <p>All of the lines read up to that point are then used as the
  standard input for a command.</p>
  
  <p>The format of here-documents is:</p>

<pre><code>          &lt;&lt;[-]word
                  here-document
          delimiter
</code></pre>
  
  <p>No parameter expansion, command substitution, arithmetic expansion, or
  pathname expansion is performed on
  <strong>word</strong>.  If any characters in <strong>word</strong> are
  quoted, the
  <strong>delimiter</strong> is the result of quote removal on <strong>word</strong>, and the lines
  in the <strong>here-document</strong> are not expanded.
  If <strong>word</strong> is unquoted, all lines of  the
  <strong>here-document</strong>  are  subjected  to  parameter  expansion,  command
  substitution, and arithmetic
  expansion.  In the latter case, the
  character sequence <code>\&lt;newline&gt;</code> is
  ignored, and <code>\</code> must be used to quote the characters <code>\</code>, <code>$</code>, and <code>`</code>.</p>
  
  <p>If the redirection operator is <code>&lt;&lt;-</code>, then all leading tab characters
  are stripped from input lines and the
  line containing <strong>delimiter</strong>.   This 
  allows  here-documents within shell scripts to be indented in a natural fashion.</p>
</blockquote>
","2500451"
"How can I redirect and append both stdout and stderr to a file with Bash?","513803","","<p>To redirect <em>stdout</em> to a truncated file in Bash, I know to use:</p>

<pre><code>cmd &gt; file.txt
</code></pre>

<p>To redirect <em>stdout</em> in Bash, appending to a file, I know to use:</p>

<pre><code>cmd &gt;&gt; file.txt
</code></pre>

<p>To redirect both <em>stdout</em> and <em>stderr</em> to a truncated file, I know to use:</p>

<pre><code>cmd &amp;&gt; file.txt
</code></pre>

<p>How do I redirect both <em>stdout</em> and <em>stderr</em> appending to a file? <code>cmd &amp;&gt;&gt; file.txt</code> did not work for me.</p>
","<pre><code>cmd &gt;&gt;file.txt 2&gt;&amp;1
</code></pre>

<p>Bash executes the redirects from left to right as follows:</p>

<ol>
<li><code>&gt;&gt;file.txt</code>: Open <code>file.txt</code> in append mode and redirect <code>stdout</code> there.</li>
<li><code>2&gt;&amp;1</code>: Redirect <code>stderr</code> to <em>""where <code>stdout</code> is currently going""</em>. In this case, that is a file opened in append mode. In other words, the <code>&amp;1</code> reuses the file descriptor which <code>stdout</code> currently uses.</li>
</ol>
","876242"
"How to count all the lines of code in a directory recursively?","509176","","<p>We've got a PHP application and want to count all the lines of code under a specific directory and its subdirectories.  We don't need to ignore comments, as we're just trying to get a rough idea. </p>

<pre><code>wc -l *.php 
</code></pre>

<p>That command works great within a given directory, but ignores subdirectories.  I was thinking this might work, but it is returning 74, which is definitely not the case...</p>

<pre><code>find . -name '*.php' | wc -l
</code></pre>

<p>What's the correct syntax to feed in all the files?  </p>
","<p><strong>Try:</strong></p>

<pre><code>find . -name '*.php' | xargs wc -l
</code></pre>

<p><strong><a href=""http://www.dwheeler.com/sloccount/"" rel=""noreferrer"">The SLOCCount tool</a></strong> may help as well.</p>

<p>It'll give an accurate source lines of code count for whatever
hierarchy you point it at, as well as some additional stats.</p>
","1358573"
"How to declare and use boolean variables in shell script?","501591","","<p>I tried to declare a boolean variable in a shell script using the following syntax:</p>

<pre><code>variable=$false

variable=$true
</code></pre>

<p>Is this correct? Also, if I wanted to update that variable would I use the same syntax? Finally, is the following syntax for using boolean variables as expressions correct:</p>

<pre><code>if [ $variable ]

if [ !$variable ]
</code></pre>
","<p><strong>Revised Answer (Feb 12, 2014)</strong></p>

<pre><code>the_world_is_flat=true
# ...do something interesting...
if [ ""$the_world_is_flat"" = true ] ; then
    echo 'Be careful not to fall off!'
fi
</code></pre>

<hr>

<p><strong>Original Answer</strong></p>

<p>Caveats: <a href=""https://stackoverflow.com/a/21210966/89391"">https://stackoverflow.com/a/21210966/89391</a></p>

<pre><code>the_world_is_flat=true
# ...do something interesting...
if $the_world_is_flat ; then
    echo 'Be careful not to fall off!'
fi
</code></pre>

<p>From: <a href=""https://github.com/aperezdc/perezdecastro.org/blob/master/stash/using-boolean-variables-in-bash.markdown"" rel=""noreferrer"">Using boolean variables in Bash</a></p>

<p><em>The reason the original answer is included here is because the comments before the revision on Feb 12, 2014 pertain only to the original answer, and many of the comments are wrong when associated with the revised answer. For example, Dennis Williamson's comment about bash builtin <code>true</code> on Jun 2, 2010 only applies to the original answer, not the revised.</em></p>
","2953673"
"Parsing JSON with Unix tools","500761","","<p>I'm trying to parse JSON returned from a curl request, like so:</p>

<pre><code>curl 'http://twitter.com/users/username.json' |
    sed -e 's/[{}]/''/g' | 
    awk -v k=""text"" '{n=split($0,a,"",""); for (i=1; i&lt;=n; i++) print a[i]}'
</code></pre>

<p>The above splits the JSON into fields, for example:</p>

<pre><code>% ...
""geo_enabled"":false
""friends_count"":245
""profile_text_color"":""000000""
""status"":""in_reply_to_screen_name"":null
""source"":""web""
""truncated"":false
""text"":""My status""
""favorited"":false
% ...
</code></pre>

<p>How do I print a specific field (denoted by the <code>-v k=text</code>)?</p>
","<p>There are a number of tools specifically designed for the purpose of manipulating JSON from the command line, and will be a lot easier and more reliable than doing it with Awk, such as <a href=""https://stedolan.github.io/jq/"" rel=""noreferrer""><code>jq</code></a>:</p>

<pre><code>curl -s 'https://api.github.com/users/lambda' | jq -r '.name'
</code></pre>

<p>You can also do this with tools that are likely already installed on your system, like Python using the <a href=""https://docs.python.org/2/library/json.html"" rel=""noreferrer""><code>json</code> module</a>, and so avoid any extra dependencies, while still having the benefit of a proper JSON parser. The following assume you want to use UTF-8, which the original JSON should be encoded in and is what most modern terminals use as well:</p>

<p>Python 2:</p>

<pre><code>export PYTHONIOENCODING=utf8
curl -s 'https://api.github.com/users/lambda' | \
    python -c ""import sys, json; print json.load(sys.stdin)['name']""
</code></pre>

<p>Python 3:</p>

<pre><code>curl -s 'https://api.github.com/users/lambda' | \
    python3 -c ""import sys, json; print(json.load(sys.stdin)['name'])""
</code></pre>

<h3>Historical notes</h3>

<p>This answer originally recommended <a href=""http://github.com/micha/jsawk"" rel=""noreferrer"">jsawk</a>, which should still work, but is a little more cumbersome to use than <code>jq</code>, and depends on a standalone JavaScript interpreter being installed which is less common than a Python interpreter, so the above answers are probably preferable:</p>

<pre><code>curl -s 'https://api.github.com/users/lambda' | jsawk -a 'return this.name'
</code></pre>

<p>This answer also originally used the Twitter API from the question, but that API no longer works, making it hard to copy the examples to test out, and the new Twitter API requires API keys, so I've switched to using the GitHub API which can be used easily without API keys.  The first answer for the original question would be:</p>

<pre><code>curl 'http://twitter.com/users/username.json' | jq -r '.text'
</code></pre>
","1955555"
"Get current directory name (without full path) in a Bash script","499236","","<p>How would I get just the current working directory name in a bash script, or even better, just a terminal command.</p>

<p><code>pwd</code> gives the full path of the current working directory, e.g. <code>/opt/local/bin</code> but I only want <code>bin</code></p>
","<p>No need for basename, and especially no need for a subshell running pwd (which <A HREF=""http://mywiki.wooledge.org/SubShell"" rel=""noreferrer"">adds an extra, and expensive, fork operation</A>); the shell can do this internally using <A HREF=""http://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html"" rel=""noreferrer"">parameter expansion</A>:</p>

<pre class=""lang-none prettyprint-override""><code>result=${PWD##*/}          # to assign to a variable

printf '%s\n' ""${PWD##*/}"" # to print to stdout
                           # ...more robust than echo for unusual names
                           #    (consider a directory named -e or -n)

printf '%q\n' ""${PWD##*/}"" # to print to stdout, quoted for use as shell input
                           # ...useful to make hidden characters readable.
</code></pre>
","1371283"
"How to represent multiple conditions in a shell if statement?","496798","","<p>I want to represent multiple conditions like this:</p>

<pre><code>if [ ( $g -eq 1 -a ""$c"" = ""123"" ) -o ( $g -eq 2 -a ""$c"" = ""456"" ) ]   
then  
    echo abc;  
else  
    echo efg;   
fi  
</code></pre>

<p>but when I execute the script, it shows</p>

<pre><code>syntax error at line 15: `[' unexpected, 
</code></pre>

<p>where line 15 is the one showing if ....  </p>

<p>What is wrong with this condition? I guess something is wrong with the <code>()</code>.</p>
","<p>Classic technique (escape metacharacters):</p>

<pre><code>if [ \( ""$g"" -eq 1 -a ""$c"" = ""123"" \) -o \( ""$g"" -eq 2 -a ""$c"" = ""456"" \) ]
then echo abc
else echo efg
fi
</code></pre>

<p>I've enclosed the references to <code>$g</code> in double quotes; that's good practice, in general.  Strictly, the parentheses aren't needed because the precedence of <code>-a</code> and <code>-o</code> makes it correct even without them.</p>

<p>Note that the <code>-a</code> and <code>-o</code> operators are part of the POSIX specification for <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html"" rel=""noreferrer""><code>test</code></a>, aka <code>[</code>, mainly for backwards compatibility (since they were a part of <code>test</code> in 7th Edition UNIX, for example), but they are explicitly marked as 'obsolescent' by POSIX.  Bash (see <a href=""http://www.gnu.org/software/bash/manual/bash.html#Bash-Conditional-Expressions"" rel=""noreferrer"">conditional expressions</a>) seems to preempt the classic and POSIX meanings for <code>-a</code> and <code>-o</code> with its own alternative operators that take arguments.</p>

<hr>

<p>With some care, you can use the more modern <code>[[</code> operator, but be aware that the versions in Bash and Korn Shell (for example) need not be identical.</p>

<pre><code>for g in 1 2 3
do
    for c in 123 456 789
    do
        if [[ ( ""$g"" -eq 1 &amp;&amp; ""$c"" = ""123"" ) || ( ""$g"" -eq 2 &amp;&amp; ""$c"" = ""456"" ) ]]
        then echo ""g = $g; c = $c; true""
        else echo ""g = $g; c = $c; false""
        fi
    done
done
</code></pre>

<p>Example run, using Bash 3.2.57 on Mac OS X:</p>

<pre><code>g = 1; c = 123; true
g = 1; c = 456; false
g = 1; c = 789; false
g = 2; c = 123; false
g = 2; c = 456; true
g = 2; c = 789; false
g = 3; c = 123; false
g = 3; c = 456; false
g = 3; c = 789; false
</code></pre>

<p>You don't need to quote the variables in <code>[[</code> as you do with <code>[</code> because it is not a separate command in the same way that <code>[</code> is.</p>

<hr>

<blockquote>
  <p>Isn't it a classic question?</p>
</blockquote>

<p>I would have thought so.  However, there is another alternative, namely:</p>

<pre><code>if [ ""$g"" -eq 1 -a ""$c"" = ""123"" ] || [ ""$g"" -eq 2 -a ""$c"" = ""456"" ]
then echo abc
else echo efg
fi
</code></pre>

<p>Indeed, if you read the 'portable shell' guidelines for the <code>autoconf</code> tool or related packages, this notation — using '<code>||</code>' and '<code>&amp;&amp;</code>' — is what they recommend.  I suppose you could even go so far as:</p>

<pre><code>if [ ""$g"" -eq 1 ] &amp;&amp; [ ""$c"" = ""123"" ]
then echo abc
elif [ ""$g"" -eq 2 ] &amp;&amp; [ ""$c"" = ""456"" ]
then echo abc
else echo efg
fi
</code></pre>

<p>Where the actions are as trivial as echoing, this isn't bad.  When the action block to be repeated is multiple lines, the repetition is too painful and one of the earlier versions is preferable — or you need to wrap the actions into a function that is invoked in the different <code>then</code> blocks.</p>
","3826462"
"Redirect stderr and stdout in Bash","492189","","<p>I want to redirect both stdout and stderr of a process to a single file. How do I do that in Bash?</p>
","<p>Take a look <a href=""http://tldp.org/LDP/abs/html/io-redirection.html"" rel=""noreferrer"">here</a>. Should be:</p>

<pre><code>yourcommand &amp;&gt;filename
</code></pre>

<p>(redirects both <code>stdout</code> and <code>stderr</code> to filename).</p>
","637839"
"Split string into an array in Bash","483019","","<p>In a Bash script I would like to split a line into pieces and put them into an array.</p>

<p>The line:</p>

<pre><code>Paris, France, Europe
</code></pre>

<p>I would like to have them in an array like this:</p>

<pre><code>array[0] = Paris
array[1] = France
array[2] = Europe
</code></pre>

<p>I would like to use simple code, the command's speed doesn't matter. How can I do it?</p>
","<pre><code>IFS=', ' read -r -a array &lt;&lt;&lt; ""$string""
</code></pre>

<p>Note that the characters in <code>$IFS</code> are treated individually as separators so that in this case fields may be separated by <em>either</em> a comma or a space rather than the sequence of the two characters. Interestingly though, empty fields aren't created when comma-space appears in the input because the space is treated specially.</p>

<p>To access an individual element:</p>

<pre><code>echo ""${array[0]}""
</code></pre>

<p>To iterate over the elements:</p>

<pre><code>for element in ""${array[@]}""
do
    echo ""$element""
done
</code></pre>

<p>To get both the index and the value:</p>

<pre><code>for index in ""${!array[@]}""
do
    echo ""$index ${array[index]}""
done
</code></pre>

<p>The last example is useful because Bash arrays are sparse. In other words, you can delete an element or add an element and then the indices are not contiguous.</p>

<pre><code>unset ""array[1]""
array[42]=Earth
</code></pre>

<p>To get the number of elements in an array:</p>

<pre><code>echo ""${#array[@]}""
</code></pre>

<p>As mentioned above, arrays can be sparse so you shouldn't use the length to get the last element. Here's how you can in Bash 4.2 and later:</p>

<pre><code>echo ""${array[-1]}""
</code></pre>

<p>in any version of Bash (from somewhere after 2.05b):</p>

<pre><code>echo ""${array[@]: -1:1}""
</code></pre>

<p>Larger negative offsets select farther from the end of the array. Note the space before the minus sign in the older form. It is required.</p>
","10586169"
"Check number of arguments passed to a Bash script","449518","","<p>I would like my Bash script to print an error message if the required argument count is not met.</p>

<p>I tried the following code:</p>

<pre><code>#!/bin/bash
echo Script name: $0
echo $# arguments 
if [$# -ne 1]; 
    then echo ""illegal number of parameters""
fi
</code></pre>

<p>For some unknown reason I've got the following error:</p>

<pre><code>test: line 4: [2: command not found
</code></pre>

<p>What am I doing wrong?</p>
","<p>Just like any other simple command, <code>[ ... ]</code> or <code>test</code> requires spaces between its arguments.</p>

<pre class=""lang-bash prettyprint-override""><code>if [ ""$#"" -ne 1 ]; then
    echo ""Illegal number of parameters""
fi
</code></pre>

<p>Or</p>

<pre class=""lang-bash prettyprint-override""><code>if test ""$#"" -ne 1; then
    echo ""Illegal number of parameters""
fi
</code></pre>

<p>When in Bash, prefer using <code>[[ ]]</code> instead as it doesn't do word splitting and pathname expansion to its variables that quoting may not be necessary unless it's part of an expression.</p>

<pre class=""lang-none prettyprint-override""><code>[[ $# -ne 1 ]]
</code></pre>

<p>It also has some other features like unquoted condition grouping, pattern matching (extended pattern matching with <code>extglob</code>) and regex matching.</p>

<p>The following example checks if arguments are valid. It allows a single argument or two.</p>

<pre class=""lang-none prettyprint-override""><code>[[ ($# -eq 1 || ($# -eq 2 &amp;&amp; $2 == &lt;glob pattern&gt;)) &amp;&amp; $1 =~ &lt;regex pattern&gt; ]]
</code></pre>

<p>For pure arithmetic expressions, using <code>(( ))</code> to some may still be better, but they are still possible in <code>[[ ]]</code> with its arithmetic operators like <code>-eq</code>, <code>-ne</code>, <code>-lt</code>, <code>-le</code>, <code>-gt</code>, or <code>-ge</code> by placing the expression as a single string argument:</p>

<pre class=""lang-none prettyprint-override""><code>A=1
[[ 'A + 1' -eq 2 ]] &amp;&amp; echo true  ## Prints true.
</code></pre>

<p>That should be helpful if you would need to combine it with other features of <code>[[ ]]</code> as well.</p>

<h3>References:</h3>

<ul>
<li><a href=""http://www.gnu.org/software/bash/manual/bash.html#Bash-Conditional-Expressions"">Bash Conditional Expressions</a></li>
<li><a href=""http://www.gnu.org/software/bash/manual/bash.html#Conditional-Constructs"">Conditional Constructs</a></li>
<li><a href=""http://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching"">Pattern Matching</a></li>
<li><a href=""http://www.gnu.org/software/bash/manual/bash.html#Word-Splitting"">Word Splitting</a></li>
<li><a href=""http://www.gnu.org/software/bash/manual/bash.html#Filename-Expansion"">Filename Expansion (prev. Pathname Expansion)</a></li>
</ul>
","18568726"
"How do I test if a variable is a number in Bash?","433486","","<p>I just can't figure out how do I make sure an argument passed to my script is a number or not.</p>

<p>All I want to do is something like this:</p>

<pre><code>test *isnumber* $1 &amp;&amp; VAR=$1 || echo ""need a number""
</code></pre>

<p>Any help?</p>
","<p>One approach is to use a regular expression, like so:</p>

<pre><code>re='^[0-9]+$'
if ! [[ $yournumber =~ $re ]] ; then
   echo ""error: Not a number"" &gt;&amp;2; exit 1
fi
</code></pre>

<p>If the value is not necessarily an integer, consider amending the regex appropriately; for instance:</p>

<pre><code>^[0-9]+([.][0-9]+)?$
</code></pre>

<p>...or, to handle negative numbers:</p>

<pre><code>^-?[0-9]+([.][0-9]+)?$
</code></pre>
","806923"
"How to iterate over arguments in a Bash script","430940","","<p>I have a complex command that I'd like to make a shell/bash script of.  I can write it in terms of <code>$1</code> easily:</p>

<pre><code>foo $1 args -o $1.ext
</code></pre>

<p>I want to be able to pass multiple input names to the script. What's the right way to do it?  </p>

<p>And, of course, I want to handle filenames with spaces in them.</p>
","<p>Use <code>""$@""</code> to represent all the arguments:</p>

<pre><code>for var in ""$@""
do
    echo ""$var""
done
</code></pre>

<p>This will iterate over each argument and print it out on a separate line.  $@ behaves like $* except that when quoted the arguments are broken up properly if there are spaces in them:</p>

<pre><code>sh test.sh 1 2 '3 4'
1
2
3 4
</code></pre>
","255913"
"How to reload .bash_profile from the command line?","429968","","<p>How can I reload <code>.bash_profile</code> from the command line? 
I can get the shell to recognize changes to <code>.bash_profile</code> by exiting and logging back in but I would like to be able to do it on demand.</p>
","<p>Simply type <code>source ~/.bash_profile</code></p>

<p>Alternatively, if you like saving keystrokes you can type <code>. ~/.bash_profile</code></p>
","4608197"
"Find all storage devices attached to a Linux machine","417065","","<p>I have a need to find all of the writable storage devices attached to a given machine, <strong>whether or not</strong> they are mounted.</p>

<p>The dopey way to do this would be to <em>try</em> every entry in <code>/dev</code> that corresponds to a writable devices (<code>hd* and sd*</code>)......</p>

<p>Is there a better solution, or should I stick with this one?</p>
","<p><code>/proc/partitions</code> will list all the block devices and partitions that the system recognizes.  You can then try using <code>file -s &lt;device&gt;</code> to determine what kind of filesystem is present on the partition, if any.</p>
","201091"
"Check if a program exists from a Bash script","405176","","<p>How would I validate that a program exists, in a way that will either return an error and exit, or continue with the script?</p>

<p>It seems like it should be easy, but it's been stumping me.</p>
","<h2>Answer</h2>

<p>POSIX compatible:</p>

<pre><code>command -v &lt;the_command&gt;
</code></pre>

<p>For <code>bash</code> specific environments:</p>

<pre><code>hash &lt;the_command&gt; # For regular commands. Or...
type &lt;the_command&gt; # To check built-ins and keywords
</code></pre>

<h2>Explanation</h2>

<p>Avoid <code>which</code>.  Not only is it an external process you're launching for doing very little (meaning builtins like <code>hash</code>, <code>type</code> or <code>command</code> are way cheaper), you can also rely on the builtins to actually do what you want, while the effects of external commands can easily vary from system to system.</p>

<p>Why care?</p>

<ul>
<li>Many operating systems have a <code>which</code> that <strong>doesn't even set an exit status</strong>, meaning the <code>if which foo</code> won't even work there and will <strong>always</strong> report that <code>foo</code> exists, even if it doesn't (note that some POSIX shells appear to do this for <code>hash</code> too).</li>
<li>Many operating systems make <code>which</code> do custom and evil stuff like change the output or even hook into the package manager.</li>
</ul>

<p>So, don't use <code>which</code>.  Instead use one of these:</p>

<pre><code>$ command -v foo &gt;/dev/null 2&gt;&amp;1 || { echo &gt;&amp;2 ""I require foo but it's not installed.  Aborting.""; exit 1; }
$ type foo &gt;/dev/null 2&gt;&amp;1 || { echo &gt;&amp;2 ""I require foo but it's not installed.  Aborting.""; exit 1; }
$ hash foo 2&gt;/dev/null || { echo &gt;&amp;2 ""I require foo but it's not installed.  Aborting.""; exit 1; }
</code></pre>

<p>(Minor side-note: some will suggest <code>2&gt;&amp;-</code> is the same <code>2&gt;/dev/null</code> but shorter – <em>this is untrue</em>.  <code>2&gt;&amp;-</code> closes FD 2 which causes an <strong>error</strong> in the program when it tries to write to stderr, which is very different from successfully writing to it and discarding the output (and dangerous!))</p>

<p>If your hash bang is <code>/bin/sh</code> then you should care about what POSIX says.  <code>type</code> and <code>hash</code>'s exit codes aren't terribly well defined by POSIX, and <code>hash</code> is seen to exit successfully when the command doesn't exist (haven't seen this with <code>type</code> yet).  <code>command</code>'s exit status is well defined by POSIX, so that one is probably the safest to use.</p>

<p>If your script uses <code>bash</code> though, POSIX rules don't really matter anymore and both <code>type</code> and <code>hash</code> become perfectly safe to use.  <code>type</code> now has a <code>-P</code> to search just the <code>PATH</code> and <code>hash</code> has the side-effect that the command's location will be hashed (for faster lookup next time you use it), which is usually a good thing since you probably check for its existence in order to actually use it.</p>

<p>As a simple example, here's a function that runs <code>gdate</code> if it exists, otherwise <code>date</code>:</p>

<pre><code>gnudate() {
    if hash gdate 2&gt;/dev/null; then
        gdate ""$@""
    else
        date ""$@""
    fi
}
</code></pre>
","677212"
"Comparing numbers in Bash","403559","","<p>I'm starting to learn about writing scripts for the bash terminal, but I can't work out how to get the comparisons to work properly. I'm sure this is very basic to many of you I just can't seem to find the answer to my question anywhere (or at least I'm not totally sure what to search for). The script I'm using is:</p>

<pre class=""lang-sh prettyprint-override""><code>echo ""enter two numbers"";

read a b;

echo ""a=$a"";
echo ""b=$b"";

if [ $a \&gt; $b ];
then 
    echo ""a is greater than b"";
else
    echo ""b is greater than a"";
fi;
</code></pre>

<p>The problem I have is that it compares the number from the first digit on, i.e. 9 is bigger than 10000, but 1 is greater than 09. How can I convert the numbers into a type to do a true comparison?</p>
","<p>In bash, you should do your check in <a href=""http://mywiki.wooledge.org/ArithmeticExpression"">arithmetic context</a>:</p>

<pre><code>if (( a &gt; b )); then
    ...
fi
</code></pre>

<p>For POSIX shells that don't support <code>(())</code>, you can use <code>-lt</code> and <code>-gt</code>.</p>

<pre><code>if [ ""$a"" -gt ""$b"" ]; then
    ...
fi
</code></pre>

<p>You can get a full list of comparison operators with <code>help test</code>.</p>
","18668580"
"Why do you need to put #!/bin/bash at the beginning of a script file?","401974","","<p>I have made <a href=""http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"" rel=""noreferrer"">Bash</a> scripts before and they all ran fine without this at the beginning. What's the point of putting it in? Would things be any different?</p>

<p>Also, how do you pronounce <code>#</code>? I know that <code>!</code> is pronounced as ""bang.""</p>

<p>How is <code>#!</code> pronounced?</p>
","<p>It's a convention so the *nix shell knows what kind of interpreter to run.</p>

<p>For example, older flavors of ATT defaulted to <em>sh</em> (the Bourne shell), while older versions of BSD defaulted to <em>csh</em> (the C shell).</p>

<p>Even today (where most systems run bash, the <em>""Bourne Again Shell""</em>), scripts can be in bash, python, perl, ruby, PHP, etc, etc.  For example, you might see <code>#!/bin/perl</code> or <code>#!/bin/perl5</code>.</p>

<p>PS:
The exclamation mark (<code>!</code>) is affectionately called <em>""bang""</em>.  The shell comment symbol (<code>#</code>) is sometimes called <em>""hash""</em>.</p>

<p>PPS:
Remember - under *nix, associating a suffix with a file type is merely a <em>convention</em>, not a <em>""rule""</em>.  An <em>executable</em> can be a binary program, any one of a million script types and other things as well. Hence the need for <code>#!/bin/bash</code>.</p>
","8967916"
"Syntax for a single-line Bash infinite while loop","399469","","<p>I am having trouble coming up with the right combination of semicolons and/or braces. I'd like to do this, but as a one-liner from the command line:</p>

<pre><code>while [ 1 ]
do
    foo
    sleep 2
done
</code></pre>
","<pre><code>while true; do foo; sleep 2; done
</code></pre>

<p>By the way, if you type it as a multiline (as you are showing) at the command prompt and then call the history with arrow up, you will get it on a single line, correctly punctuated.</p>

<pre><code>$ while true
&gt; do
&gt;    echo ""hello""
&gt;    sleep 2
&gt; done
hello
hello
hello
^C
$ &lt;arrow up&gt; while true; do    echo ""hello"";    sleep 2; done
</code></pre>
","1289029"
"How to run the sftp command with a password from Bash script?","397701","","<p>I need to transfer a log file to a remote host using <a href=""http://en.wikipedia.org/wiki/Secure_file_transfer_program"" rel=""noreferrer"">sftp</a> from a Linux host. I have been provided credentials for the same from my operations group. However, since I don't have control over other host, I cannot generate and share RSA keys with the other host. </p>

<p>So is there a way to run the <code>sftp</code> command (with the username/password provided) from inside the Bash script through a <a href=""http://en.wikipedia.org/wiki/Cron"" rel=""noreferrer"">cron</a> job?</p>

<p>I found a similar Stack Overflow question, <em><a href=""https://stackoverflow.com/questions/5268865"">Specify password to sftp in a Bash script</a></em>, but there was no satisfactory answer to my problem.</p>
","<p>You have a few options other than using public key authentication:</p>

<ol>
<li>Use <a href=""http://www.cyberciti.biz/faq/ssh-passwordless-login-with-keychain-for-scripts/"" rel=""noreferrer"">keychain</a> </li>
<li>Use <a href=""http://www.cyberciti.biz/faq/noninteractive-shell-script-ssh-password-provider/"" rel=""noreferrer"">sshpass</a> (less secured but probably that meets your requirement)</li>
<li>Use <a href=""http://www.linux-bsd-central.com/index.php/content/view/26/29/"" rel=""noreferrer"">expect</a> (least secured and more coding needed)</li>
</ol>

<p>If you decide to give sshpass a chance here is a working script snippet to do so:</p>

<pre><code>export SSHPASS=your-password-here
sshpass -e sftp -oBatchMode=no -b - sftp-user@remote-host &lt;&lt; !
   cd incoming
   put your-log-file.log
   bye
!
</code></pre>
","5386587"
"Find and Replace Inside a Text File from a Bash Command","391948","","<p>What's the simplest way to do a find and replace for a given input string, say <code>abc</code>, and replace with another string, say <code>XYZ</code> in file <code>/tmp/file.txt</code>?</p>

<p>I am writting an app and using IronPython to execute commands through SSH &mdash; but I don't know Unix that well and don't know what to look for.</p>

<p>I have heard that Bash, apart from being a command line interface, can be a very powerful scripting language. So, if this is true, I assume you can perform actions like these.</p>

<p>Can I do it with bash, and what's the simplest (one line) script to achieve my goal?</p>
","<p>The easiest way is to use sed (or perl):</p>

<p><code>sed -i -e 's/abc/XYZ/g' /tmp/file.txt</code></p>

<p>Which will invoke sed to do an in-place edit due to the <code>-i</code> option.  This can be called from bash.</p>

<p>If you really really want to use just bash, then the following can work:</p>

<p><code>while read a ; do echo ${a//abc/XYZ} ; done &lt; /tmp/file.txt > /tmp/file.txt.t ; mv /tmp/file.txt{.t,}</code></p>

<p>This loops over each line, doing a substitution, and writing to a temporary file (don't want to clobber the input).  The move at the end just moves temporary to the original name.</p>
","525612"
"ls command: how can I get a recursive full-path listing, one line per file?","390373","","<p>How can I get ls to spit out a flat list of recursive one-per-line paths?</p>

<p>For example, I just want a flat listing of files with their full paths:</p>

<pre><code>/home/dreftymac/.
/home/dreftymac/foo.txt
/home/dreftymac/bar.txt
/home/dreftymac/stackoverflow
/home/dreftymac/stackoverflow/alpha.txt
/home/dreftymac/stackoverflow/bravo.txt
/home/dreftymac/stackoverflow/charlie.txt
</code></pre>

<p><code>ls -a1</code> almost does what I need, but I do not want path fragments, I want full paths.</p>
","<p>If you really want to use <code>ls</code>, then format its output using awk:</p>

<pre><code>ls -R /path | awk '
/:$/&amp;&amp;f{s=$0;f=0}
/:$/&amp;&amp;!f{sub(/:$/,"""");s=$0;f=1;next}
NF&amp;&amp;f{ print s""/""$0 }'
</code></pre>
","1767559"
"Changing default shell in Linux","375679","","<p>How it is possible to change the default shell?  The <code>env</code> command currently says:</p>

<pre><code>SHELL=/bin/tcsh
</code></pre>

<p>and I want to change that to Bash.</p>
","<p>Try linux command <code>chsh</code>.</p>

<p>The detailed command is <code>chsh -s /bin/bash</code>.
It will prompt you to enter your password.
Your default login shell is <code>/bin/bash</code> now. <strong>You must log out and log back in to see this change.</strong></p>

<p>The following is quoted from man page:</p>

<blockquote>
  <p>The chsh command changes the user login shell. This determines the
  name
         of the users initial login command. A normal user may only change the
         login shell for her own account, the superuser may change the login
         shell for any account</p>
</blockquote>

<p>This command will change the default login shell permanently.</p>
","13046283"
"Replace one substring for another string in shell script","374043","","<p>I have ""I love Suzi and Marry"" and I want to change ""Suzi"" to ""Sara"".</p>

<pre><code>#!/bin/bash
firstString=""I love Suzi and Marry""
secondString=""Sara""
# do something...
</code></pre>

<p>The result must be like this:</p>

<pre><code>firstString=""I love Sara and Marry""
</code></pre>
","<p>To replaced the first occurrence of a string (regular expression actually), use <a href=""http://tldp.org/LDP/abs/html/string-manipulation.html#SUBSTRREPL00"" rel=""noreferrer""><code>${string/regexp/replacement}</code></a>:</p>

<pre><code>#!/bin/bash
original_string='I love Suzy and Mary'
string_to_replace_Suzy_with='Sara'
result_string=""${original_string/Suzy/$string_to_replace_Suzy_with}""
</code></pre>

<p>To replace <strong>all</strong> matches of $pattern with $replacement, double the first slash:</p>

<pre><code>string=""The secret code is 12345""
pattern=""[0-9]""
echo ""${string//$pattern/X}""  # The secret code is XXXXX
</code></pre>

<p>Make sure the script is executed with <code>bash</code>. Other shells (e.g. <code>sh</code>) may return ""Bad substitution"".</p>
","13210909"
"What's the difference between .bashrc, .bash_profile, and .environment?","372144","","<p>I've used a number of different *nix-based systems of the years, and it seems like every flavor of Bash I use has a different algorithm for deciding which startup scripts to run.  For the purposes of tasks like setting up environment variables and aliases and printing startup messages (e.g. MOTDs), which startup script is the appropriate place to do these?</p>

<p>What's the difference between putting things in <code>.bashrc</code>, <code>.bash_profile</code>, and <code>.environment</code>?  I've also seen other files such as <code>.login</code>, <code>.bash_login</code>, and <code>.profile</code>; are these ever relevant?  What are the differences in which ones get run when logging in physically, logging in remotely via ssh, and opening a new terminal window?  Are there any significant differences across platforms (including Mac OS X (and its Terminal.app) and Cygwin Bash)?</p>
","<p>The main difference with shell config files is that some are only read by ""login"" shells (eg. when you login from another host, or login at the text console of a local unix machine). these are the ones called, say, <code>.login</code> or <code>.profile</code> or <code>.zlogin</code> (depending on which shell you're using).</p>

<p>Then you have config files that are read by ""interactive"" shells (as in, ones connected to a terminal (or pseudo-terminal in the case of, say, a terminal emulator running under a windowing system). these are the ones with names like <code>.bashrc</code>, <code>.tcshrc</code>, <code>.zshrc</code>, etc.</p>

<p><code>bash</code> complicates this in that <code>.bashrc</code> is <strong>only read by a shell that's both <em>interactive</em> and <em>non-login</em></strong>, so you'll find most people end up telling their <code>.bash_profile</code> to also read <code>.bashrc</code> with something like</p>

<p><code>[[ -r ~/.bashrc ]] &amp;&amp; . ~/.bashrc</code></p>

<p>Other shells behave differently - eg with <code>zsh</code>, <code>.zshrc</code> is always read for an interactive shell, whether it's a login one or not.</p>

<p>The manual page for bash explains the circumstances under which each file is read. Yes, behaviour is generally consistent between machines.</p>

<p><code>.profile</code> is simply the login script filename originally used by <code>/bin/sh</code>. <code>bash</code>, being generally backwards-compatible with <code>/bin/sh</code>, will read <code>.profile</code> if one exists.</p>
","415444"
"Efficiently test if a port is open on Linux (without nmap or netcat)","370033","","<p>From a bash script how can I quickly find out whether a port <code>445</code> is open/listening on a server.</p>

<p>I have tried a couple of options, but I want something quick:<br>
1. <code>lsof -i :445</code>  (Takes seconds)<br>
2. <code>netstat -an |grep 445 |grep LISTEN</code> (Takes seconds)<br>
3. <code>telnet</code> (it doesn't return)<br>
4. <code>nmap</code>, <code>netcat</code> are not available on the server  </p>

<p>It will be nice to know of a way that doesn't enumerate first and greps after that.</p>
","<p>A surprise I found out recently is that Bash natively supports <a href=""http://tldp.org/LDP/abs/html/devref1.html"" rel=""noreferrer"">tcp connections as file descriptors</a>. To use:</p>

<pre><code>exec 6&lt;&gt;/dev/tcp/ip.addr.of.server/445
echo -e ""GET / HTTP/1.0\n"" &gt;&amp;6
cat &lt;&amp;6
</code></pre>

<p>I'm using 6 as the file descriptor because 0,1,2 are stdin, stdout, and stderr. 5 is sometimes used by <a href=""http://tldp.org/LDP/abs/html/io-redirection.html"" rel=""noreferrer"">Bash for child processes</a>, so 3,4,6,7,8, and 9 should be safe.</p>

<p>As per the comment below, to test for listening on a <em>local server</em> in a script:</p>

<pre><code>exec 6&lt;&gt;/dev/tcp/127.0.0.1/445 || echo ""No one is listening!""
exec 6&gt;&amp;- # close output connection
exec 6&lt;&amp;- # close input connection
</code></pre>

<p>To determine if someone is listening, attempt to connect by loopback. If it fails, then the port is closed or we aren't allowed access. Afterwards, close the connection. </p>

<p>Modify this for your use case, such as sending an email, exiting the script on failure, or starting the required service.</p>
","9609247"
"How to extract tar.xz files in Linux?","367423","","<p>How to extract <strong>tar.xz</strong> files in Linux?       </p>
","<p>Try:</p>

<pre><code> $ tar xvfJ filename.tar.xz
</code></pre>

<p>Note that <code>xz</code> support from <a href=""http://www.gnu.org/software/tar/"" rel=""noreferrer""><code>tar 1.22</code> (march 2009)</a>.<br>
Check your <code>tar</code> version (and upgrade if needed).</p>

<p>I had a <code>tar 1.15.1</code>, which resulted in:</p>

<pre><code>tar: This does not look like a tar archive
tar: Skipping to next header
tar: Archive contains obsolescent base-64 headers
tar: Read 2144 bytes from /path/to/my_archive.tar.xz
tar: Error exit delayed from previous errors
</code></pre>

<p>With a recent <code>tar</code>, a simple <code>tar xpvf</code> will work (for <code>.tar.xz</code>, or <code>.tar.gz</code>):</p>

<pre><code>tar xpvf /path/to/my_archive.tar.xz -C /path/to/extract
</code></pre>

<p>('<code>extract</code>' being the parent directory in which the archive is extracted)</p>
","12298435"
"Ubuntu says ""bash: ./program Permission denied""","367261","","<p>I am running Ubuntu on computer 1 and computer 2. I compiled a C++ program on computer 1, and I can execute it from the terminal using <code>./program_name</code>. It runs fine.</p>

<p>However, when I try to do this on computer 2, it says: <code>bash: ./program_name: permission denied</code></p>

<p>What's wrong and what can I do about it?</p>
","<p><code>chmod u+x program_name</code>. Then execute it.</p>

<p>If that does not work, copy the program from the USB device to a native volume on the system. Then <code>chmod u+x program_name</code> on the local copy and execute that.</p>

<p>Unix and Unix-like systems generally will not execute a program unless it is marked with permission to execute. The way you copied the file from one system to another (or mounted an external volume) may have turned off execute permission (as a safety feature). The command <code>chmod u+x name</code> adds permission for the user that owns the file to execute it.</p>

<p>That command only changes the permissions associated with the file; it does not change the security controls associated with the entire volume. If it is security controls on the volume that are interfering with execution, then you can remount the volume with options to allow execution. However, copying the file to a local volume may be a quicker and easier solution.</p>
","18960752"
"How to wait in bash for several subprocesses to finish and return exit code !=0 when any subprocess ends with code !=0?","364266","","<p>How to wait in a bash script for several subprocesses spawned from that script to finish and return exit code !=0 when any of the subprocesses ends with code !=0 ?</p>

<p>Simple script:</p>

<pre><code>#!/bin/bash
for i in `seq 0 9`; do
  doCalculations $i &amp;
done
wait
</code></pre>

<p>The above script will wait for all 10 spawned subprocesses, but it will always give exit status 0 (see <code>help wait</code>). How can I modify this script so it will discover exit statuses of spawned subprocesses and return exit code 1 when any of subprocesses ends with code !=0?</p>

<p>Is there any better solution for that than collecting PIDs of the subprocesses, wait for them in order and sum exit statuses?</p>
","<p><code>wait</code> also (optionally) takes the PID of the process to wait for, and with $! you get the PID of the last command launched in background.
Modify the loop to store the PID of each spawned sub-process into an array, and then loop again waiting on each PID.</p>
","356154"
"In bash, how can I check if a string begins with some value?","364170","","<p>I would like to check if a string begins with ""node"" e.g. ""node001"". Something like</p>

<pre><code>if [ $HOST == user* ]  
  then  
  echo yes  
fi
</code></pre>

<p>How can I do it correctly？</p>

<hr>

<p>I further need to combine expressions to check if HOST is either ""user1"" or begins with ""node""</p>

<pre><code>if [ [[ $HOST == user1 ]] -o [[ $HOST == node* ]] ];  
then  
echo yes 
fi

&gt; &gt; &gt; -bash: [: too many arguments
</code></pre>

<p>How to do it correctly?</p>
","<p>This snippet on the <a href=""http://tldp.org/LDP/abs/html/comparison-ops.html"" rel=""noreferrer"">Advanced Bash Scripting Guide</a> says:</p>

<pre><code># The == comparison operator behaves differently within a double-brackets
# test than within single brackets.

[[ $a == z* ]]   # True if $a starts with a ""z"" (wildcard matching).
[[ $a == ""z*"" ]] # True if $a is equal to z* (literal matching).
</code></pre>

<p>So you had it <em>nearly</em> correct; you needed <em>double</em> brackets, not single brackets.</p>

<hr>

<p>With regards to your second question, you can write it this way:</p>

<pre><code>HOST=user1
if  [[ $HOST == user1 ]] || [[ $HOST == node* ]] ;
then
    echo yes1
fi

HOST=node001
if [[ $HOST == user1 ]] || [[ $HOST == node* ]] ;
then
    echo yes2
fi
</code></pre>

<p>Which will echo</p>

<pre><code>yes1
yes2
</code></pre>

<p>Bash's <code>if</code> syntax is hard to get used to (IMO).</p>
","2172367"
"./configure : /bin/sh^M : bad interpreter","357011","","<p>I've been trying to install lpng142 on my fed 12 system. Seems like a problem to me. I get this error</p>

<pre><code>[root@localhost lpng142]# ./configure
bash: ./configure: /bin/sh^M: bad interpreter: No such file or directory
[root@localhost lpng142]# 
</code></pre>

<p>How do I fix this? The <code>/etc/fstab</code> file:</p>

<pre><code>#
# /etc/fstab
# Created by anaconda on Wed May 26 18:12:05 2010
#
# Accessible filesystems, by reference, are maintained under '/dev/disk'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
/dev/mapper/VolGroup-lv_root /                       ext4    defaults        1 1
UUID=ce67cf79-22c3-45d4-8374-bd0075617cc8 /boot                   ext4    
defaults        1 2
/dev/mapper/VolGroup-lv_swap swap                    swap    defaults        0 0
tmpfs                   /dev/shm                tmpfs   defaults        0 0
devpts                  /dev/pts                devpts  gid=5,mode=620  0 0
sysfs                   /sys                    sysfs   defaults        0 0
proc                    /proc                   proc    defaults        0 0
</code></pre>
","<p>To fix, open your script with vi or vim and enter in vi command mode (key ESC), then type this:</p>

<pre><code>:set fileformat=unix
</code></pre>

<p>Finally save it</p>

<p><code>:x!</code> or <code>:wq!</code></p>
","5514351"
"Bash if statement with multiple conditions throws an error","355576","","<p>I'm trying to write a script that will check two error flags, and in case one flag (or both) are changed it'll echo-- error happened. My script:</p>

<pre><code>my_error_flag=0
my_error_flag_o=0
do something.....
if [[ ""$my_error_flag""==""1"" || ""$my_error_flag_o""==""2"" ] || [ ""$my_error_flag""=""1"" &amp;&amp;     ""$my_error_flag_o""=""2"" ]]; then
    echo ""$my_error_flag""
else
    echo ""no flag""
fi
</code></pre>

<p>Basically, it should be, something along:</p>

<pre><code>if ((a=1 or b=2) or (a=1 and b=2))
  then
     display error
else
     no error
fi
</code></pre>

<p>The error I get is:</p>

<pre><code> line 26: conditional binary operator expected
 line 26: syntax error near `]'
 line 26: `if [[ ""$my_error_flag""==""1"" || ""$my_error_flag_o""==""2"" ] || [ ""$my_error_flag""=""1"" &amp;&amp; ""$my_error_flag_o""=""2"" ]]; then'
</code></pre>

<p>Are my brackets messed up?</p>
","<p>Use <code>-a</code> (for and) and <code>-o</code> (for or) operations.</p>

<p><a href=""http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html"">tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html</a></p>

<p>Update</p>

<p>Actually you could still use <code>&amp;&amp;</code> and <code>||</code> with the <code>-eq</code> operation. So your script would be like this:</p>

<pre><code>my_error_flag=1
my_error_flag_o=1
if [ $my_error_flag -eq 1 ] ||  [ $my_error_flag_o -eq 2 ] || ([ $my_error_flag -eq 1 ] &amp;&amp; [ $my_error_flag_o -eq 2 ]); then
      echo ""$my_error_flag""
else
    echo ""no flag""
fi
</code></pre>

<p>Although in your case you can discard the last two expressions and just stick with one or operation like this:</p>

<pre><code>my_error_flag=1
my_error_flag_o=1
if [ $my_error_flag -eq 1 ] ||  [ $my_error_flag_o -eq 2 ]; then
      echo ""$my_error_flag""
else
    echo ""no flag""
fi
</code></pre>
","16203126"
"How to test if string exists in file with Bash shell?","353669","","<p>I have a file that contains directory names:</p>

<p><code>my_list.txt</code> :</p>

<pre><code>/tmp
/var/tmp
</code></pre>

<p>I'd like to check in Bash before I'll add a directory name if that name already exists in the file.</p>
","<pre><code>grep -Fxq ""$FILENAME"" my_list.txt
</code></pre>

<p>The exit status is 0 (true) if the name was found, 1 (false) if not, so:</p>

<pre><code>if grep -Fxq ""$FILENAME"" my_list.txt
then
    # code if found
else
    # code if not found
fi
</code></pre>

<p>Here are the relevant sections of <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?grep"" rel=""noreferrer"">the man page for <code>grep</code></a>:</p>

<pre><code>grep [options] PATTERN [FILE...]

-F, --fixed-strings
       Interpret PATTERN as a list of fixed strings, separated by  new-
       lines, any of which is to be matched.

-x, --line-regexp
       Select only those matches that exactly match the whole line.

-q, --quiet, --silent
       Quiet; do not write anything to standard output.  Exit  immedi-
       ately  with  zero status if any match is found, even if an error
       was detected.  Also see the -s or --no-messages option.
</code></pre>
","4749368"
"How can I exclude all ""permission denied"" messages from ""find""?","351811","","<p>I need to hide all <em>permission denied</em> messages from:</p>

<pre><code>find . &gt; files_and_folders
</code></pre>

<p>I am experimenting when such message arises. I need to gather all folders and files, to which it does not arise. </p>

<p>Is it possible to direct the permission levels to the <code>files_and_folders</code> file? </p>

<p>How can I hide the errors at the same time?</p>
","<p><sup>Note:<br>
* This answer probably goes deeper than the use case warrants, and <code>find 2&gt;/dev/null</code> may be good enough in many situations. It may still be of interest for a cross-platform perspective and for its discussion of some advanced shell techniques in the interest of finding a solution that is as robust as possible, even though the cases guarded against may be largely hypothetical.<br>
* <strong>If your system is configured to show <em>localized</em> error messages</strong>, prefix the <code>find</code> calls below with <code>LC_ALL=C</code> (<code>LC_ALL=C find ...</code>) to ensure that <em>English</em> messages are reported, so that <code>grep -v 'Permission denied'</code> works as intended. Invariably, however, any error messages that <em>do</em> get displayed will then be in English as well.  </p>

<p>If your <strong>shell is <code>bash</code> or <code>zsh</code></strong>, there's <strong>a solution that is robust while being reasonably simple</strong>, using <strong>only POSIX-compliant <code>find</code> features</strong>; while <code>bash</code> itself is not part of POSIX, most modern Unix platforms come with it, making this solution widely portable:</p>

<pre><code>find . &gt; files_and_folders 2&gt; &gt;(grep -v 'Permission denied' &gt;&amp;2)
</code></pre>

<p>Note: There's a small chance that some of <code>grep</code>'s output may arrive <em>after</em> <code>find</code> completes, because the overall command doesn't wait for the command inside <code>&gt;(...)</code> to finish. In <code>bash</code>, you can prevent this by appending <code>| cat</code> to the command.</sup></p>

<ul>
<li><p><code>&gt;(...)</code> is a (rarely used) <em>output</em> <a href=""http://mywiki.wooledge.org/ProcessSubstitution"" rel=""noreferrer"">process substitution</a> that allows redirecting output (in this case, <em>stderr</em> output (<code>2&gt;</code>) to the stdin of the command inside <code>&gt;(...)</code>.<br>
In addition to <code>bash</code>, and <code>zsh</code>, <code>ksh</code> supports them as well in principle, but trying to combine them with redirection from <em>stderr</em>, as is done here (<code>2&gt; &gt;(...)</code>), appears to be silently ignored (in <code>ksh 93u+</code>).</p>

<ul>
<li><code>grep -v 'Permission denied'</code> filters <em>out</em> (<code>-v</code>) all lines (from the <code>find</code> command's stderr stream) that contain the phrase <code>Permission denied</code> and outputs the remaining lines to stderr (<code>&gt;&amp;2</code>).</li>
</ul></li>
</ul>

<p>This approach is:</p>

<ul>
<li><p><strong>robust</strong>: <code>grep</code> is only applied to <em>error messages</em> (and not to a combination of file paths and error messages, potentially leading to false positives), and error messages other than permission-denied ones are passed through, to stderr.</p></li>
<li><p><strong>side-effect free</strong>: <code>find</code>'s exit code is preserved: the inability to access at least one of the filesystem items encountered results in exit code <code>1</code> (although that won't tell you whether errors <em>other</em> than permission-denied ones occurred (too)).</p></li>
</ul>

<hr>

<h3>POSIX-compliant solutions:</h3>

<p>Fully POSIX-compliant solutions either have limitations or require additional work.</p>

<p><strong>If <code>find</code>'s output is to be captured in a <em>file</em> anyway</strong> (or suppressed altogether), then the pipeline-based solution from <a href=""https://stackoverflow.com/a/762360/45375"">Jonathan Leffler's answer</a> is simple, robust, and POSIX-compliant:</p>

<pre><code>find . 2&gt;&amp;1 &gt;files_and_folders | grep -v 'Permission denied' &gt;&amp;2
</code></pre>

<p>Note that the order of the redirections matters: <code>2&gt;&amp;1</code> must come <em>first</em>.</p>

<p>Capturing stdout output in a file up front allows <code>2&gt;&amp;1</code> to send <em>only</em> error messages through the pipeline, which <code>grep</code> can then unambiguously operate on.</p>

<p>The <strong>only downside is that the <em>overall exit code</em> will be the <code>grep</code> command's</strong>, not <code>find</code>'s, which in this case means: if there are <em>no</em> errors at all or <em>only</em> permission-denied errors, the exit code will be <code>1</code> (signaling <em>failure</em>), otherwise (errors other than permission-denied ones) <code>0</code> - which is the opposite of the intent.<br>
<strong>That said, <code>find</code>'s exit code is rarely used anyway</strong>, as it often conveys little information beyond <em>fundamental</em> failure such as passing a non-existent path.<br>
However, the specific case of even only <em>some</em> of the input paths being inaccessible due to lack of permissions <em>is</em> reflected in <code>find</code>'s exit code (in both GNU and BSD <code>find</code>): if a permissions-denied error occurs for <em>any</em> of the files processed, the exit code is set to <code>1</code>.</p>

<p>The following variation addresses that:</p>

<pre><code>find . 2&gt;&amp;1 &gt;files_and_folders | { grep -v 'Permission denied' &gt;&amp;2; [ $? -eq 1 ]; }
</code></pre>

<p>Now, the exit code indicates whether any errors <em>other than</em> <code>Permission denied</code> occurred: <code>1</code> if so, <code>0</code> otherwise.<br>
In other words: the exit code now reflects the true intent of the command: success (<code>0</code>) is reported, if no errors at all or <em>only</em> permission-denied errors occurred.<br>
This is arguably even better than just passing <code>find</code>'s exit code through, as in the solution at the top.</p>

<hr>

<p><a href=""https://stackoverflow.com/users/1815797/gniourf-gniourf"">gniourf_gniourf</a> in the comments proposes a (still POSIX-compliant) <strong>generalization of this solution using sophisticated redirections</strong>, which <strong>works even with the default behavior of printing the file paths to <em>stdout</em></strong>:</p>

<pre><code>{ find . 3&gt;&amp;2 2&gt;&amp;1 1&gt;&amp;3 | grep -v 'Permission denied' &gt;&amp;3; } 3&gt;&amp;2 2&gt;&amp;1
</code></pre>

<p>In short: Custom file descriptor <code>3</code> is used to temporarily swap stdout (<code>1</code>) and stderr (<code>2</code>), so that error messages <em>alone</em> can be piped to <code>grep</code> via stdout.</p>

<p>Without these redirections, both data (file paths) <em>and</em> error messages would be piped to <code>grep</code> via stdout, and <code>grep</code> would then not be able to distinguish between <em>error message</em> <code>Permission denied</code> and a (hypothetical) <em>file whose name happens to contain</em> the phrase <code>Permission denied</code>.</p>

<p>As in the first solution, however, the the exit code reported will be <code>grep</code>'s, not <code>find</code>'s, but the same fix as above can be applied.</p>

<hr>

<h3>Notes on the existing answers:</h3>

<ul>
<li><p>There are several points to note about <a href=""https://stackoverflow.com/a/25234419/45375"">Michael Brux's answer</a>, <code>find . ! -readable -prune -o -print</code>:</p>

<ul>
<li><p>It requires <em>GNU</em> <code>find</code>; notably, it won't work on macOS. Of course, if you only ever need the command to work with GNU <code>find</code>, this won't be a problem for you.</p></li>
<li><p>Some <code>Permission denied</code> errors may <em>still</em> surface: <code>find ! -readable -prune</code> reports such errors for the <em>child</em> items of directories for which the current user does have <code>r</code> permission, but lacks <code>x</code> (executable) permission. The reason is that because the directory itself <em>is</em> readable, <code>-prune</code> is not executed, and the attempt to descend <em>into</em> that directory then triggers the error messages. That said, the <em>typical</em> case is for the <code>r</code> permission to be missing.</p></li>
<li><p>Note: The following point is a matter of philosophy and/or specific use case, and you may decide it is not relevant to you and that the command fits your needs well, especially if simply <em>printing</em> the paths is all you do:</p>

<ul>
<li><em>If</em> you conceptualize the filtering of the permission-denied error messages a <em>separate</em> task that you want to be able to apply to <em>any</em> <code>find</code> command, then the opposite approach of proactively <em>preventing</em> permission-denied errors requires introducing ""noise"" into the <code>find</code> command, which also introduces complexity and logical <em>pitfalls</em>.</li>
<li>For instance, the most up-voted comment on Michael's answer (as of this writing) attempts to show how to <em>extend</em> the command by including a <code>-name</code> filter, as follows:<br>
<code>find . ! -readable -prune -o -name '*.txt'</code><br>
This, however, does <em>not</em> work as intended, because the trailing <code>-print</code> action is <em>required</em> (an explanation can be found in <a href=""https://stackoverflow.com/questions/1489277/how-to-use-prune-option-of-find-in-sh"">this answer</a>). Such subtleties can introduce bugs.</li>
</ul></li>
</ul></li>
<li><p>The first solution in <a href=""https://stackoverflow.com/a/762360/45375"">Jonathan Leffler's answer</a>, <code>find . 2&gt;/dev/null &gt; files_and_folders</code>, as he himself states,  <strong>blindly silences <em>all</em> error messages</strong> (and the workaround is cumbersome and not fully robust, as he also explains). <strong>Pragmatically speaking</strong>, however, it is the <strong>simplest solution</strong>, as you may be content to assume that any and all errors would be permission-related.</p></li>
<li><p><a href=""https://stackoverflow.com/a/27503763/45375"">mist's answer</a>, <code>sudo find . &gt; files_and_folders</code>, <strong>is concise and pragmatic, but ill-advised for anything other than merely <em>printing</em> filenames</strong>, for security reasons: because you're running as the <em>root</em> user, ""you risk having your whole system being messed up by a bug in find or a malicious version, or an incorrect invocation which writes something unexpectedly, which could not happen if you ran this with normal privileges"" (from a comment on mist's answer by <a href=""https://stackoverflow.com/users/874188/tripleee"">tripleee</a>).  </p></li>
<li><p>The 2nd solution in <a href=""https://stackoverflow.com/a/762377/45375"">viraptor's answer</a>, <code>find . 2&gt;&amp;1 | grep -v 'Permission denied' &gt; some_file</code> runs the risk of false positives (due to sending a mix of stdout and stderr through the pipeline), and, potentially, instead of reporting <em>non</em>-permission-denied errors via stderr, captures them alongside the output paths in the output file.</p></li>
</ul>
","40336333"
"How to redirect output to a file and stdout","345683","","<p>In bash, calling <code>foo</code> would display any output from that command on the stdout.</p>

<p>Calling <code>foo &gt; output</code> would redirect any output from that command to the file specified (in this case 'output').</p>

<p>Is there a way to redirect output to a file <em>and</em> have it display on stdout?</p>
","<p>The command you want is named <strong><a href=""http://www.gnu.org/software/coreutils/manual/html_node/tee-invocation.html"" rel=""noreferrer""><code>tee</code></a></strong>:</p>

<pre><code>foo | tee output.file
</code></pre>

<p>For example, if you only care about stdout:</p>

<pre><code>ls -a | tee output.file
</code></pre>

<p>If you want to include stderr, do:</p>

<pre><code>program [arguments...] 2&gt;&amp;1 | tee outfile
</code></pre>

<p><code>2&gt;&amp;1</code> redirects channel 2 (stderr/standard error) into channel 1 (stdout/standard output), such that both is written as stdout. It is also directed to the given output file as of the <code>tee</code> command.</p>

<p>Furthermore, if you want to <em>append</em> to the log file, use <code>tee -a</code> as:</p>

<pre><code>program [arguments...] 2&gt;&amp;1 | tee -a outfile
</code></pre>
","418899"
"How can I remove the first line of a text file using bash/sed script?","343756","","<p>I need to repeatedly remove the first line from a huge text file using a bash script.</p>

<p>Right now I am using <code>sed -i -e ""1d"" $FILE</code> - but it takes around a minute to do the deletion.</p>

<p>Is there a more efficient way to accomplish this?</p>
","<p>Try <a href=""http://man7.org/linux/man-pages/man1/tail.1.html"" rel=""noreferrer"">GNU tail</a>:</p>

<pre><code>tail -n +2 ""$FILE""
</code></pre>

<p><code>-n x</code>: Just print the last <code>x</code> lines. <code>tail -n 5</code> would give you the last 5 lines of the input. The <code>+</code> sign kind of inverts the argument and make <code>tail</code> print anything but the first <code>x-1</code> lines. <code>tail -n +1</code> would print the whole file, <code>tail -n +2</code> everything but the first line, etc.</p>

<p>GNU <code>tail</code> is much faster than <code>sed</code>. <code>tail</code> is also available on BSD and the <code>-n +2</code> flag is consistent across both tools. Check the <a href=""https://www.freebsd.org/cgi/man.cgi?query=tail"" rel=""noreferrer"">FreeBSD</a> or <a href=""https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/tail.1.html"" rel=""noreferrer"">OS X</a> man pages for more. </p>

<p>The BSD version can be much slower than <code>sed</code>, though. I wonder how they managed that; <code>tail</code> should just read a file line by line while <code>sed</code> does pretty complex operations involving interpreting a script, applying regular expressions and the like.</p>

<p>Note: You may be tempted to use</p>

<pre><code># THIS WILL GIVE YOU AN EMPTY FILE!
tail -n +2 ""$FILE"" &gt; ""$FILE""
</code></pre>

<p>but this will give you an <strong>empty file</strong>. The reason is that the redirection (<code>&gt;</code>) happens before <code>tail</code> is invoked by the shell:</p>

<ol>
<li>Shell truncates file <code>$FILE</code></li>
<li>Shell creates a new process for <code>tail</code></li>
<li>Shell redirects stdout of the <code>tail</code> process to <code>$FILE</code></li>
<li><code>tail</code> reads from the now empty <code>$FILE</code></li>
</ol>

<p>If you want to remove the first line inside the file, you should use:</p>

<pre><code>tail -n +2 ""$FILE"" &gt; ""$FILE.tmp"" &amp;&amp; mv ""$FILE.tmp"" ""$FILE""
</code></pre>

<p>The <code>&amp;&amp;</code> will make sure that the file doesn't get overwritten when there is a problem.</p>
","339941"
"How to determine the current shell I'm working on?","340699","","<p>How can I determine the current shell I am working on? </p>

<p>Would the output of the <code>ps</code> command alone be sufficient?</p>

<p>How can this be done in different flavors of UNIX?</p>
","<ul>
<li><p>There are 3 approaches to finding the <strong>name</strong> of the current shell's executable:</p>

<p>Please note that all 3 approaches can be fooled if the executable of the shell is <code>/bin/sh</code> but it's really a renamed <code>bash</code>, for example (which frequently happens). </p>

<p><em>Thus your second question of whether <code>ps</code> output will do is answered with ""<strong>not always</strong>"".</em></p>

<ol>
<li><p><code>echo $0</code> - will print the program name... which in the case of shell is the actual shell</p></li>
<li><p><code>ps  -ef | grep $$ | grep -v grep</code>  - This will look for the current process ID in the list of running processes. Since the current process is shell, it will be included. </p>

<p>This is not 100% reliable, as you might have OTHER processes whose <code>ps</code> listing includes the same number as shell's process ID, especially if that ID is a small # (e.g. if shell's PID is ""5"", you may find processes called ""java5"" or ""perl5"" in the same <code>grep</code> output!). <em>This is the second problem with the ""ps"" approach, on top of not being able to rely on the shell name.</em></p></li>
<li><p><code>echo $SHELL</code> - The path to the current shell is stored as the <code>SHELL</code> variable for any shell. The caveat for this one is that if you launch a shell explicitly as a subprocess (e.g. it's not your login shell), you will get your login shell's value instead. If that's a possibility, use the <code>ps</code> or <code>$0</code> approach.</p></li>
</ol>

<hr></li>
<li><p>If, however, the executable doesn't match your actual shell (e.g. <code>/bin/sh</code> is actually bash or ksh), you need heuristics. Here are some environmental variables specific to various shells:</p>

<ul>
<li><p><code>$version</code> is set on tcsh</p></li>
<li><p><code>$BASH</code> is set on bash</p></li>
<li><p><code>$shell</code> (lowercase) is set to actual shell name in csh or tcsh </p></li>
<li><p><code>$ZSH_NAME</code> is set on zsh</p></li>
<li><p>ksh has <code>$PS3</code> and <code>$PS4</code> set, whereas normal Bourne shell (<code>sh</code>) only has <code>$PS1</code> and <code>$PS2</code> set. This generally seems like the hardest to distinguish - the ONLY difference in entire set of envionmental variables between <code>sh</code> and <code>ksh</code> we have installed on Solaris boxen is <code>$ERRNO</code>, <code>$FCEDIT</code>, <code>$LINENO</code>, <code>$PPID</code>, <code>$PS3</code>, <code>$PS4</code>, <code>$RANDOM</code>, <code>$SECONDS</code>, <code>$TMOUT</code>.</p></li>
</ul></li>
</ul>
","3327022"
"Extract file basename without path and extension in bash","333714","","<p>Given file names like these:</p>

<pre><code>/the/path/foo.txt
bar.txt
</code></pre>

<p>I hope to get:</p>

<pre><code>foo
bar
</code></pre>

<p>Why this doesn't work?</p>

<pre><code>#!/bin/bash

fullfile=$1
fname=$(basename $fullfile)
fbname=${fname%.*}
echo $fbname
</code></pre>

<p>What's the right way to do it?</p>
","<p>You don't have to call the external <code>basename</code> command. Instead, you could use the following commands:</p>

<pre><code>$ s=/the/path/foo.txt
$ echo ${s##*/}
foo.txt
$ s=${s##*/}
$ echo ${s%.txt}
foo
$ echo ${s%.*}
foo
</code></pre>

<p>Note that this solution should work in all recent (<em>post 2004</em>) <em>POSIX</em> compliant shells, (e.g. <code>bash</code>, <code>dash</code>, <code>ksh</code>, etc.).</p>

<p>Source: <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02"" rel=""noreferrer"">Shell Command Language 2.6.2 Parameter Expansion</a></p>

<p>More on bash String Manipulations:  <a href=""http://tldp.org/LDP/LG/issue18/bash.html"" rel=""noreferrer"">http://tldp.org/LDP/LG/issue18/bash.html</a></p>
","2664746"
"Create timestamp variable in bash script","328803","","<p>I am trying to create a timestamp variable in a shell script to make the logging a little easier. I want to create the variable at the beginning of the script and have it print out the current time whenever I issue <code>echo $timestamp</code>. It proving to be more difficult then I thought. Here are some things I've tried:</p>

<p><code>timestamp=""(date +""%T"")""</code> echo prints out <code>(date +""%T"")</code></p>

<p><code>timestamp=""$(date +""%T"")""</code> echo prints the time when the variable was initialized.</p>

<p>Other things I've tried are just slight variations that didn't work any better. Does anyone know how to accomplish what I'm trying to do?</p>
","<p>In order to get the current timestamp and not the time of when a fixed variable is defined, the trick is to use a function and <strong>not</strong> a variable:</p>

<pre><code>#!/bin/bash

# Define a timestamp function
timestamp() {
  date +""%T""
}

# do something...
timestamp # print timestamp
# do something else...
timestamp # print another timestamp
# continue...
</code></pre>

<p>If you don't like the format given by the <code>%T</code> specifier you can combine the other time conversion specifiers accepted by <code>date</code>.  For GNU <code>date</code>, you can find the complete list of these specifiers in the official documentation here: <a href=""https://www.gnu.org/software/coreutils/manual/html_node/Time-conversion-specifiers.html#Time-conversion-specifiers"">https://www.gnu.org/software/coreutils/manual/html_node/Time-conversion-specifiers.html#Time-conversion-specifiers</a></p>
","17066329"
"How to find whether or not a variable is empty in Bash script","326109","","<p>How can I check if a variable is empty in bash?</p>
","<p>In bash at least the following command tests <strong>if $var is empty</strong>:</p>

<pre><code>if [[ -z ""$var"" ]]
</code></pre>

<p>The command <code>man test</code> is your friend.</p>
","3063887"
"In a Bash script, how can I exit the entire script if a certain condition occurs?","323321","","<p>I'm writing a script in Bash to test some code. However, it seems silly to run the tests if compiling the code fails in the first place, in which case I'll just abort the tests.</p>

<p>Is there a way I can do this without wrapping the entire script inside of a while loop and using breaks? Something like a <strong>dun dun dun</strong> goto?</p>
","<p>Try this statement:</p>

<pre><code>exit 1
</code></pre>

<p>Replace <code>1</code> with appropriate error codes. See also <a href=""http://www.tldp.org/LDP/abs/html/exitcodes.html"" rel=""noreferrer"">Exit Codes With Special Meanings</a>.</p>
","1378284"
"Exit Shell Script Based on Process Exit Code","323029","","<p>I have a shell script that executes a number of commands. How do I make the shell script exit if any of the commands exit with a non-zero exit code?</p>
","<p>After each command, the exit code can be found in the <code>$?</code> variable so you would have something like:</p>

<pre><code>ls -al file.ext
rc=$?; if [[ $rc != 0 ]]; then exit $rc; fi
</code></pre>

<p>You need to be careful of piped commands since the <code>$?</code> only gives you the return code of the last element in the pipe so, in the code:</p>

<pre><code>ls -al file.ext | sed 's/^/xx: /""
</code></pre>

<p>will not return an error code if the file doesn't exist (since the <code>sed</code> part of the pipeline actually works, returning 0).</p>

<p>The <code>bash</code> shell actually provides an array which can assist in that case, that being <code>PIPESTATUS</code>. This array has one element for each of the pipeline components, that you can access individually like <code>${PIPESTATUS[0]}</code>:</p>

<pre><code>pax&gt; false | true ; echo ${PIPESTATUS[0]}
1
</code></pre>

<p>Note that this is getting you the result of the <code>false</code> command, not the entire pipeline. You can also get the entire list to process as you see fit:</p>

<pre><code>pax&gt; false | true | false; echo ${PIPESTATUS[*]}
1 0 1
</code></pre>

<p>If you wanted to get the largest error code from a pipeline, you could use something like:</p>

<pre><code>true | true | false | true | false
rcs=${PIPESTATUS[*]}; rc=0; for i in ${rcs}; do rc=$(($i &gt; $rc ? $i : $rc)); done
echo $rc
</code></pre>

<p>This goes through each of the <code>PIPESTATUS</code> elements in turn, storing it in <code>rc</code> if it was greater than the previous <code>rc</code> value.</p>
","90435"
"Add a new element to an array without specifying the index in Bash","322208","","<p>Is there a way to do something like PHPs <code>$array[] = 'foo';</code> in bash vs doing:</p>

<pre><code>array[0] = 'foo'
array[1] = 'bar'
</code></pre>
","<p>Yes there is:</p>

<pre><code>ARRAY=()
ARRAY+=('foo')
ARRAY+=('bar')
</code></pre>

<p><a href=""http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameters"" rel=""noreferrer"">Bash Reference Manual</a>:</p>

<blockquote>
  <p>In the context where an assignment statement is assigning a value to a shell variable or array index (see Arrays), the ‘+=’ operator can be used to append to or add to the variable's previous value.</p>
</blockquote>
","1951523"
"echo that outputs to stderr","321710","","<p>Is there a standard Bash tool that acts like echo but outputs to stderr rather than stdout?</p>

<p>I know I can do <code>echo foo 1&gt;&amp;2</code> but it's kinda ugly and, I suspect, error prone (e.g. more likely to get edited wrong when things change). </p>
","<p>This question is old, but you could do this, which facilitates reading:</p>

<pre><code>&gt;&amp;2 echo ""error""
</code></pre>

<p>The operator <code>&gt;&amp;2</code> literally means redirect the address of file descriptor 1 (<code>stdout</code>) to the address of file descriptor 2 (<code>stderr</code>) for that command<sup>1</sup>. Depending on how deeply you want to understand it, read this: <a href=""http://wiki.bash-hackers.org/howto/redirection_tutorial"" rel=""noreferrer"">http://wiki.bash-hackers.org/howto/redirection_tutorial</a></p>

<p>To avoid interaction with other redirections use subshell</p>

<pre><code>(&gt;&amp;2 echo ""error"")
</code></pre>

<hr>

<p><sup>1</sup><sub><code>&gt;&amp;2</code> copies file descriptor #2 to file descriptor #1. Therefore, after this redirection is performed, both file descriptors will refer to the same file: the one file descriptor #2 was <strong>originally</strong> referring to.</sub></p>
","23550347"
"Checking Bash exit status of several commands efficiently","318693","","<p>Is there something similar to pipefail for multiple commands, like a 'try' statement but within bash. I would like to do something like this:</p>

<pre><code>echo ""trying stuff""
try {
    command1
    command2
    command3
}
</code></pre>

<p>And at any point, if any command fails, drop out and echo out the error of that command. I don't want to have to do something like:</p>

<pre><code>command1
if [ $? -ne 0 ]; then
    echo ""command1 borked it""
fi

command2
if [ $? -ne 0 ]; then
    echo ""command2 borked it""
fi
</code></pre>

<p>And so on... or anything like:</p>

<pre><code>pipefail -o
command1 ""arg1"" ""arg2"" | command2 ""arg1"" ""arg2"" | command3
</code></pre>

<p>Because the arguments of each command I believe (correct me if I'm wrong) will interfere with each other. These two methods seem horribly long-winded and nasty to me so I'm here appealing for a more efficient method.</p>
","<p>You can write a function that launches and tests the command for you. Assume <code>command1</code> and <code>command2</code> are environment variables that have been set to a command.</p>

<pre><code>function mytest {
    ""$@""
    local status=$?
    if [ $status -ne 0 ]; then
        echo ""error with $1"" &gt;&amp;2
    fi
    return $status
}

mytest $command1
mytest $command2
</code></pre>
","5195741"
"Can a shell script set environment variables of the calling shell?","316850","","<p>I'm trying to write a shell script that, when run, will set some environment variables that will stay set in the caller's shell.</p>

<pre><code>setenv FOO foo
</code></pre>

<p>in csh/tcsh, or</p>

<pre><code>export FOO=foo
</code></pre>

<p>in sh/bash only set it during the script's execution.</p>

<p>I already know that </p>

<pre><code>source myscript
</code></pre>

<p>will run the commands of the script rather than launching a new shell, and that can result in setting the ""caller's"" environment.</p>

<p>But here's the rub:</p>

<p>I want this script to be callable from either bash or csh.  In other words, I want users of either shell to be able to run my script and have their shell's environment changed.  So 'source' won't work for me, since a user running csh can't source a bash script, and a user running bash can't source a csh script.</p>

<p>Is there any reasonable solution that doesn't involve having to write and maintain TWO versions on the script?</p>
","<p>Your shell process has a copy of the parent's environment and no access to the parent process's environment whatsoever. When your shell process terminates any changes you've made to its environment are lost. Sourcing a script file is the most commonly used method for configuring a shell environment, you may just want to bite the bullet and maintain one for each of the two flavors of shell.</p>
","496777"
"How to use "":"" as awk field separator?","316614","","<p>Given following command:</p>

<pre><code>echo ""1: "" | awk '/1/ -F "":"" {print $1}'
</code></pre>

<p>why does awk output:</p>

<pre><code>1: 
</code></pre>
","<p>""-F"" is a command line argument not awk syntax, try:   </p>

<pre><code> echo ""1: "" | awk -F  "":"" '/1/ {print $1}'
</code></pre>
","2609565"
"Find and kill a process in one line using bash and regex","315843","","<p>I often need to kill a process during programming.</p>

<p>The way I do it now is:</p>

<pre><code>[~]$ ps aux | grep 'python csp_build.py'
user    5124  1.0  0.3 214588 13852 pts/4    Sl+  11:19   0:00 python csp_build.py
user    5373  0.0  0.0   8096   960 pts/6    S+   11:20   0:00 grep python csp_build.py
[~]$ kill 5124
</code></pre>

<p>How can I extract the process id automatically and kill it in the same line?</p>

<p>Like this:</p>

<pre><code>[~]$ ps aux | grep 'python csp_build.py' | kill &lt;regex that returns the pid&gt;
</code></pre>
","<p>In <code>bash</code>, you should be able to do:</p>

<pre><code>kill $(ps aux | grep '[p]ython csp_build.py' | awk '{print $2}')
</code></pre>

<p>Details on its workings are as follows:</p>

<ul>
<li>The <code>ps</code> gives you the list of all the processes.</li>
<li>The <code>grep</code> filters that based on your search string, <code>[p]</code> is a trick to stop you picking up the actual <code>grep</code> process itself.</li>
<li>The <code>awk</code> just gives you the second field of each line, which is the PID.</li>
<li>The <code>$(x)</code> construct means to execute <code>x</code> then take its output and put it on the command line. The output of that <code>ps</code> pipeline inside that construct above is the list of process IDs so you end up with a command like <code>kill 1234 1122 7654</code>.</li>
</ul>

<p>Here's a transcript showing it in action:</p>

<pre><code>pax&gt; sleep 3600 &amp;
[1] 2225
pax&gt; sleep 3600 &amp;
[2] 2226
pax&gt; sleep 3600 &amp;
[3] 2227
pax&gt; sleep 3600 &amp;
[4] 2228
pax&gt; sleep 3600 &amp;
[5] 2229
pax&gt; kill $(ps aux | grep '[s]leep' | awk '{print $2}')
[5]+  Terminated              sleep 3600
[1]   Terminated              sleep 3600
[2]   Terminated              sleep 3600
[3]-  Terminated              sleep 3600
[4]+  Terminated              sleep 3600
</code></pre>

<p>and you can see it terminating all the sleepers.</p>

<hr>

<p>Explaining the <code>grep '[p]ython csp_build.py'</code> bit in a bit more detail:</p>

<p>When you do <code>sleep 3600 &amp;</code> followed by <code>ps -ef | grep sleep</code>, you tend to get <em>two</em> processes with <code>sleep</code> in it, the <code>sleep 3600</code> and the <code>grep sleep</code> (because they both have <code>sleep</code> in them, that's not rocket science).</p>

<p>However, <code>ps -ef | grep '[s]leep'</code> won't create a process with <code>sleep</code> in it, it instead creates <code>grep '[s]leep'</code> and here's the tricky bit: the <code>grep</code> doesn't find it because it's looking for the regular expression ""any character from the character class <code>[s]</code> (which is <code>s</code>) followed by <code>leep</code>.</p>

<p>In other words, it's looking for <code>sleep</code> but the grep process is <code>grep '[s]leep'</code> which doesn't have <code>sleep</code> in it.</p>

<p>When I was shown this (by someone here on SO), I immediately started using it because</p>

<ul>
<li>it's one less process than adding <code>| grep -v grep</code>; and</li>
<li>it's elegant <em>and</em> sneaky, a rare combination :-)</li>
</ul>
","3510850"
"What's the best way to send a signal to all members of a process group?","310926","","<p>I want to kill a whole process tree.  What is the best way to do this using any common scripting languages? I am looking for a simple solution.</p>
","<p>You don't say if the tree you want to kill is a single process group.  (This is often the case if the tree is the result of forking from a server start or a shell command line.)  You can discover process groups using GNU ps as follows:</p>

<pre><code> ps x -o  ""%p %r %y %x %c ""
</code></pre>

<p>If it is a process group you want to kill, just use the <code>kill(1)</code> command but instead of giving it a process number, give it the <em>negation</em> of the group number.  For example to kill every process in group 5112, use <code>kill -TERM -- -5112</code>.</p>
","392155"
"get current time in seconds since the Epoch on Linux, Bash","307534","","<p>I need something simple like <code>date</code>, but in seconds since 1970 instead of the current date, hours, minutes, and seconds.</p>

<p><code>date</code> doesn't seem to offer that option. Is there an easy way?</p>
","<p>This should work:</p>

<pre><code>date +%s
</code></pre>
","1092643"
"Given two directory trees, how can I find out which files differ?","307412","","<p>If I want find the differences between two directory trees, I usually just execute:</p>

<pre><code>diff -r dir1/ dir2/
</code></pre>

<p>This outputs exactly what the differences are between corresponding files.  I'm interested in just getting a list of corresponding files whose content differs.  I assumed that this would simply be a matter of passing a command line option to <code>diff</code>, but I couldn't find anything on the man page.</p>

<p>Any suggestions?</p>
","<p>You said Linux, so you luck out (at least it should be available, not sure when it was added):</p>

<pre><code>diff --brief -r dir1/ dir2/
</code></pre>

<p>Should do what you need.</p>

<p>If you also want to see differences for files that may not exist in either directory:</p>

<pre><code>diff --brief -Nr dir1/ dir2/
</code></pre>
","4997724"
"How to gzip all files in all sub-directories into one compressed file in bash","307374","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/3341131/gzipping-up-a-set-of-directories-and-creating-a-tar-compressed-file"">gzipping up a set of directories and creating a tar compressed file</a>  </p>
</blockquote>



<p><a href=""https://stackoverflow.com/questions/10363921/how-to-gzip-all-files-in-all-sub-directories-in-bash"">This post</a> describes how to gzip each file individually within a directory structure. However, I need to do something slightly different. I need to produce one big gzip file for all files under a certain directory. I also need to be able to specify the output filename for the compressed file (e.g., files.gz) and overwrite the old compressed file file if one already exists.</p>
","<pre><code>tar -zcvf compressFileName.tar.gz folderToCompress
</code></pre>

<p>everything in folderToCompress will go to compressFileName</p>

<p>Edit: After review and comments I realized that people may get confused with compressFileName without an extension. If you want you can use .tar.gz extension(as suggested) with the compressFileName</p>
","12331698"
"Check if a Bash array contains a value","302007","","<p>In Bash, what is the simplest way to test if an array contains a certain value?    </p>

<p><strong>Edit</strong>: With help from the answers and the comments, after some testing, I came up with this:</p>

<pre><code>function contains() {
    local n=$#
    local value=${!n}
    for ((i=1;i &lt; $#;i++)) {
        if [ ""${!i}"" == ""${value}"" ]; then
            echo ""y""
            return 0
        fi
    }
    echo ""n""
    return 1
}

A=(""one"" ""two"" ""three four"")
if [ $(contains ""${A[@]}"" ""one"") == ""y"" ]; then
    echo ""contains one""
fi
if [ $(contains ""${A[@]}"" ""three"") == ""y"" ]; then
    echo ""contains three""
fi
</code></pre>

<p>I'm not sure if it's the best solution, but it seems to work.</p>
","<p>There is <a href=""http://tldp.org/LDP/abs/html/arrays.html#ARRAYSTROPS"" rel=""noreferrer"">sample code that shows how to replace a substring from an array</a>.  You can make a copy of the array and try to remove the target value from the copy.  If the copy and original are then different, then the target value exists in the original string.</p>

<p>The straightforward (but potentially more time-consuming) solution is to simply iterate through the entire array and check each item individually.  This is what I typically do because it is easy to implement and you can wrap it in a function (see <a href=""http://www.faqs.org/docs/abs/HTML/assortedtips.html#ARRFUNC"" rel=""noreferrer"">this info on passing an array to a function</a>).</p>
","3686027"
"What's a concise way to check that environment variables are set in a Unix shell script?","300435","","<p>I've got a few Unix shell scripts where I need to check that certain environment variables are set before I start doing stuff, so I do this sort of thing:</p>

<pre><code>if [ -z ""$STATE"" ]; then
    echo ""Need to set STATE""
    exit 1
fi  

if [ -z ""$DEST"" ]; then
    echo ""Need to set DEST""
    exit 1
fi
</code></pre>

<p>which is a lot of typing. Is there a more elegant idiom for checking that a set of environment variables is set?</p>

<p>EDIT: I should mention that these variables have no meaningful default value - the script should error out if any are unset.</p>
","<h3>Parameter Expansion</h3>

<p>The obvious answer is to use one of the special forms of parameter expansion:</p>

<pre><code>: ${STATE?""Need to set STATE""}
: ${DEST:?""Need to set DEST non-empty""}
</code></pre>

<p>Or, better (see section on 'Position of double quotes' below):</p>

<pre><code>: ""${STATE?Need to set STATE}""
: ""${DEST:?Need to set DEST non-empty}""
</code></pre>

<p>The first variant (using just <code>?</code>) requires STATE to be set, but STATE="""" (an empty string) is OK &mdash; not exactly what you want, but the alternative and older notation.</p>

<p>The second variant (using <code>:?</code>) requires DEST to be set and non-empty.</p>

<p>If you supply no message, the shell provides a default message.</p>

<p>The <code>${var?}</code> construct is portable back to Version 7 UNIX and the Bourne Shell (1978 or thereabouts).  The <code>${var:?}</code> construct is slightly more recent: I think it was in System III UNIX circa 1981, but it may have been in PWB UNIX before that.  It is therefore in the Korn Shell, and in the POSIX shells, including specifically Bash.</p>

<p>It is usually documented in the shell's man page in a section called <a href=""http://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion"" rel=""noreferrer"">Parameter Expansion</a>.  For example, the <code>bash</code> manual says:</p>

<blockquote>
<pre><code>${parameter:?word}
</code></pre>
  
  <p>Display Error if Null or Unset.  If parameter is null or unset, the expansion of word (or a message to that effect if word is not present) is written to the standard error and the shell, if it is not interactive, exits.  Otherwise, the value of parameter is substituted.</p>
</blockquote>

<h3>The Colon Command</h3>

<p>I should probably add that the colon command simply has its arguments evaluated and then succeeds.  It is the original shell comment notation (before '<code>#</code>' to end of line).  For a long time, Bourne shell scripts had a colon as the first character.  The C Shell would read a script and use the first character to determine whether it was for the C Shell (a '<code>#</code>' hash) or the Bourne shell (a '<code>:</code>' colon).  Then the kernel got in on the act and added support for '<code>#!/path/to/program</code>' and the Bourne shell got '<code>#</code>' comments, and the colon convention went by the wayside.  But if you come across a script that starts with a colon, now you will know why.</p>

<hr>

<h3>Position of double quotes</h3>

<p><a href=""https://stackoverflow.com/users/320399/blong"">blong</a> asked in a <a href=""https://stackoverflow.com/questions/307503/whats-the-best-way-to-check-that-environment-variables-are-set-in-unix-shellscr/307735?noredirect=1#comment53771660_307735"">comment</a>:</p>

<blockquote>
  <p>Any thoughts on this discussion? <a href=""https://github.com/koalaman/shellcheck/issues/380#issuecomment-145872749"" rel=""noreferrer"">https://github.com/koalaman/shellcheck/issues/380#issuecomment-145872749</a></p>
</blockquote>

<p>The gist of the discussion is:</p>

<blockquote>
  <p>… However, when I <code>shellcheck</code> it (with version 0.4.1), I get this message:</p>

<pre><code>In script.sh line 13:
: ${FOO:?""The environment variable 'FOO' must be set and non-empty""}
  ^-- SC2086: Double quote to prevent globbing and word splitting.
</code></pre>
  
  <p>Any advice on what I should do in this case? </p>
</blockquote>

<p>The short answer is ""do as <code>shellcheck</code> suggests"":</p>

<pre><code>: ""${STATE?Need to set STATE}""
: ""${DEST:?Need to set DEST non-empty}""
</code></pre>

<p>To illustrate why, study the following.  Note that the <code>:</code> command doesn't echo its arguments (but the shell does evaluate the arguments).  We want to see the arguments, so the code below uses <code>printf ""%s\n""</code> in place of <code>:</code>.</p>

<pre><code>$ mkdir junk
$ cd junk
$ &gt; abc
$ &gt; def
$ &gt; ghi
$ 
$ x=""*""
$ printf ""%s\n"" ${x:?You must set x}    # Careless; not recommended
abc
def
ghi
$ unset x
$ printf ""%s\n"" ${x:?You must set x}    # Careless; not recommended
bash: x: You must set x
$ printf ""%s\n"" ""${x:?You must set x}""  # Careful: should be used
bash: x: You must set x
$ x=""*""
$ printf ""%s\n"" ""${x:?You must set x}""  # Careful: should be used
*
$ printf ""%s\n"" ${x:?""You must set x""}  # Not quite careful enough
abc
def
ghi
$ x=
$ printf ""%s\n"" ${x:?""You must set x""}  # Not quite careful enough
bash: x: You must set x
$ unset x
$ printf ""%s\n"" ${x:?""You must set x""}  # Not quite careful enough
bash: x: You must set x
$ 
</code></pre>

<p>Note how the value in <code>$x</code> is expanded to first <code>*</code> and then a list of file names when the overall expression is not in double quotes.  This is what <code>shellcheck</code> is recommending should be fixed.  I have not verified that it doesn't object to the form where the expression is enclosed in double quotes, but it is a reasonable assumption that it would be OK.</p>
","307735"
"Reliable way for a bash script to get the full path to itself?","296678","","<p>I have a bash script that needs to know its full path. I'm trying to find a broadly-compatible way of doing that without ending up with relative or funky-looking paths. I only need to support bash, not sh, csh, etc.</p>

<p>What I've found so far:</p>

<ol>
<li><p>The accepted answer to ""<a href=""https://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in"">Getting the source directory of a Bash script from within</a>"" addresses getting the path of the script via <code>dirname $0</code>, which is fine, but that may return a <em>relative</em> path (like <code>.</code>), which is a problem if you want to change directories in the script and have the path still point to the script's directory. Still, <code>dirname</code> will be part of the puzzle.</p></li>
<li><p>The accepted answer to ""<a href=""https://stackoverflow.com/questions/3572030/bash-script-absolute-path-with-osx"">Bash script absolute path with OSX</a>"" <em>(OS X specific, but the answer works regardless)</em> gives a function that will test to see if <code>$0</code> looks relative and if so will pre-pend <code>$PWD</code> to it. But the result can still have relative bits in it (although overall it's absolute)&nbsp;&mdash; for instance, if the script is <code>t</code> in the directory <code>/usr/bin</code> and you're in <code>/usr</code> and you type <code>bin/../bin/t</code> to run it (yes, that's convoluted), you end up with <code>/usr/bin/../bin</code> as the script's directory path. Which <strong>works</strong>, but...</p></li>
<li><p>The <code>readlink</code> solution <a href=""http://fritzthomas.com/open-source/linux/384-how-to-get-the-absolute-path-within-the-running-bash-script/"" rel=""noreferrer"">on this page</a>, which looks like this:</p>

<pre><code># Absolute path to this script. /home/user/bin/foo.sh
SCRIPT=$(readlink -f $0)
# Absolute path this script is in. /home/user/bin
SCRIPTPATH=`dirname $SCRIPT`
</code></pre>

<p>But <code>readlink</code> isn't POSIX and apparently the solution relies on GNU's <code>readlink</code> where BSD's won't work for some reason (I don't have access to a BSD-like system to check).</p></li>
</ol>

<p>So, various ways of doing it, but they all have their caveats.</p>

<p>What would be a better way? Where ""better"" means:</p>

<ul>
<li>Gives me the absolute path.</li>
<li>Takes out funky bits even when invoked in a convoluted way (see comment on #2 above). (E.g., at least moderately canonicalizes the path.)</li>
<li>Relies only on bash-isms or things that are almost certain to be on most popular flavors of *nix systems (GNU/Linux, BSD and BSD-like systems like OS X, etc.).</li>
<li>Avoids calling external programs if possible (e.g., prefers bash built-ins).</li>
<li>(<strong>Updated</strong>, thanks for the heads up, <a href=""https://stackoverflow.com/users/251414/wich"">wich</a>) Doesn't have to resolve symlinks (in fact, I'd kind of prefer it left them alone, but that's not a requirement).</li>
</ul>
","<p>Here's what I've come up with (edit: plus some tweaks provided by <a href=""https://stackoverflow.com/users/1430833/sfstewman"">sfstewman</a>, <a href=""https://stackoverflow.com/users/397210/levigroker"">levigroker</a>, <a href=""https://stackoverflow.com/users/1858225/kyle-strand"">Kyle Strand</a>, and <a href=""https://stackoverflow.com/users/33732/rob-kennedy"">Rob Kennedy</a>), that seems to mostly fit my ""better"" criteria:</p>

<pre><code>SCRIPTPATH=""$( cd ""$(dirname ""$0"")"" ; pwd -P )""
</code></pre>

<p>That <code>SCRIPTPATH</code> line seems particularly roundabout, but we need it rather than <code>SCRIPTPATH=`pwd`</code> in order to properly handle spaces and symlinks.</p>

<p>Note also that esoteric situations, such as executing a script that isn't coming from a file in an accessible file system at all (which is perfectly possible), is not catered to there (or in any of the other answers I've seen).</p>
","4774063"
"Pipe to/from the clipboard","295770","","<p>Is it possible to pipe to/from the clipboard in Bash?</p>

<p>Whether it is piping to/from a device handle or using an auxiliary application, I can't find anything.</p>

<p>For example, if <code>/dev/clip</code> was a device linking to the clipboard we could do:</p>

<pre><code>cat /dev/clip        # Dump the contents of the clipboard
cat foo &gt; /dev/clip  # Dump the contents of ""foo"" into the clipboard
</code></pre>
","<p>You're a little ambiguous.  I expect you're probably a Linux user inside X who wants to put stuff in the X <code>PRIMARY</code> clipboard.</p>

<p>It's important to understand that <code>bash</code> doesn't have a clipboard.  There is no such thing as ""the"" clipboard, because <code>bash</code> can run on Windows, Mac OS X, lots of other OSes, inside X, outside X, ...  Not to mention that X itself has three different clipboards.  There's a wealth of clipboards you could be dealing with.  Usually the clipboard you want to talk to has a utility that lets you talk to it.</p>

<p>In case of X, yes, there's <code>xclip</code> (and others). <code>xclip -selection c</code> will send data to the clipboard that works with Ctrl-C, Ctrl-V in most applications.</p>

<p>If you're trying to talk to the Mac OS X clipboard, there's <code>pbcopy</code>.</p>

<p>If you're in Linux terminal mode (no X) then maybe you need to look into <code>gpm</code>.</p>

<p>There's also <a href=""http://www.gnu.org/software/screen/"" rel=""noreferrer"">GNU <code>screen</code></a> which has a clipboard.  To put stuff in there, look at the <code>screen</code> command ""<code>readreg</code>"".</p>

<p>Under Windows/cygwin, use <code>/dev/clipboard</code> or <code>clip</code> for newer versions of Windows (at least Windows 10).</p>
","750466"
"Get program execution time in the shell","293747","","<p>I want to execute something in a linux shell under a few different conditions, and be able to output the execution time of each execution.</p>

<p>I know I could write a perl or python script that would do this, but is there a way I can do it in the shell? (which happens to be bash)</p>
","<p>Use the built-in <code>time</code> keyword:</p>

<pre>
$ help time

time: time [-p] PIPELINE
    Execute PIPELINE and print a summary of the real time, user CPU time,
    and system CPU time spent executing PIPELINE when it terminates.
    The return status is the return status of PIPELINE.  The `-p' option
    prints the timing summary in a slightly different format.  This uses
    the value of the TIMEFORMAT variable as the output format.
</pre>

<p>Example:</p>

<pre><code>$ time sleep 2
</code></pre>

<pre>
real    0m2.009s
user    0m0.000s
sys     0m0.004s
</pre>
","385418"
"How do I know the script file name in a Bash script?","293448","","<p>How can I determine the name of the Bash script file inside the script itself?</p>

<p>Like if my script is in file <code>runme.sh</code>, then how would I make it to display ""You are running runme.sh"" message without hardcoding that?</p>
","<pre><code>me=`basename ""$0""`
</code></pre>

<p>For reading through a symlink, which is usually not what you want (you usually don't want to confuse the user this way), try:</p>

<pre><code>me=""$(basename ""$(test -L ""$0"" &amp;&amp; readlink ""$0"" || echo ""$0"")"")""
</code></pre>

<p>IMO, that'll produce confusing output.  ""I ran foo.sh, but it's saying I'm running bar.sh!?  Must be a bug!""   Besides, one of the purposes of having differently-named symlinks is to provide different functionality based on the name it's called as (think gzip and gunzip on some platforms).</p>
","192337"
"How to list running screen sessions?","292437","","<p>I have a bunch of servers, on which I run experiments using <code>screen</code>. The procedure is the following :</p>

<ol>
<li><code>ssh</code> to server XXX</li>
<li>launch <code>screen</code></li>
<li>start experiments in a few tabs</li>
<li>detach <code>screen</code></li>
<li>disconnect from the server</li>
</ol>

<p>While the experiments are running, I can easily find on which servers they are by <code>ssh</code>ing to all servers and listing my running processes (using <code>top</code> or <code>ps</code>).</p>

<p>However, once the experiments are finished, how could I find on which servers I have a screen session opened (so that I can have a look at the output, relaunch them, etc.) ?</p>

<p>PS: my experiments do print their output to files, too... but this is not the point of my question.</p>
","<p>To list all of the screen sessions for a user, run the following command as that user:</p>

<pre><code>screen -ls
</code></pre>

<p>To see all screen sessions on a specific machine you can do:</p>

<pre><code>ls -laR /var/run/screen/
</code></pre>

<p>I get this on my machine:</p>

<pre><code>gentle ~ # ls -laR /var/run/screen/

/var/run/screen/:
total 1
drwxrwxr-x  4 root utmp   96 Mar  1  2005 .
drwxr-xr-x 10 root root  840 Feb  1 03:10 ..
drwx------  2 josh users  88 Jan 13 11:33 S-josh
drwx------  2 root root   48 Feb 11 10:50 S-root

/var/run/screen/S-josh:
total 0
drwx------ 2 josh users 88 Jan 13 11:33 .
drwxrwxr-x 4 root utmp  96 Mar  1  2005 ..
prwx------ 1 josh users  0 Feb 11 10:41 12931.pts-0.gentle

/var/run/screen/S-root:
total 0
drwx------ 2 root root 48 Feb 11 10:50 .
drwxrwxr-x 4 root utmp 96 Mar  1  2005 ..
</code></pre>

<p>This is a rather brilliantly Unixy use of Unix Sockets wrapped in filesystem permissions to handle security, state, and streams.</p>
","537980"
"How to make ""if not true condition""?","290760","","<p>I would like to have the <code>echo</code> command executed when <code>cat /etc/passwd | grep ""sysa""</code> is not true.</p>

<p>What am I doing wrong?</p>

<pre><code>if ! [ $(cat /etc/passwd | grep ""sysa"") ]; then
        echo ""ERROR - The user sysa could not be looked up""
        exit 2
fi
</code></pre>
","<p>try</p>

<pre><code>if ! grep -q sysa /etc/passwd ; then
</code></pre>

<p><code>grep</code> returns <code>true</code> if it finds the search target, and <code>false</code> if it doesn't.</p>

<p>So NOT <code>false</code> == <code>true</code>.</p>

<p><code>if</code> evaluation in shells are designed to be very flexible, and many times doesn't require chains of commands (as you have written). </p>

<p>Also, looking at your code as is, your use of the <code>$( ... )</code> form of cmd-substitution is to be commended, but think about what is coming out of the process. Try <code>echo $(cat /etc/passwd | grep ""sysa"")</code> to see what I mean. You can take that further by using the <code>-c</code> (count) option to grep and then do <code>if ! [ $(grep -c ""sysa"" /etc/passwd) -eq 0 ] ; then</code> which works but is rather old school.</p>

<p>BUT, you could use the newest shell features (arithmetic evaluation) like</p>

<pre><code>if ! (( $(grep -c ""sysa"" /etc/passwd) == 0 )) ; then ...`
</code></pre>

<p>which also gives you the benefit of using the c-lang based comparison operators, <code>==,&lt;,&gt;,&gt;=,&lt;=,%</code> and maybe a few others.</p>

<p>In this case, per a comment by  Orwellophile, the arithmetic evaluation can be pared down even further, like</p>

<pre><code>if ! (( $(grep -c ""sysa"" /etc/passwd) )) ; then ....
</code></pre>

<p>OR</p>

<pre><code>if (( ! $(grep -c ""sysa"" /etc/passwd) )) ; then ....
</code></pre>

<p>Finally, there is an <em>award</em> called the <code>Useless Use of Cat (UUOC)</code>. :-) Some people will jump up and down and cry gothca! I'll just say that <code>grep</code> can take a file name on its cmd-line, so why invoke extra processes and pipe constructions when you don't have to? ;-) </p>

<p>I hope this helps.</p>
","10552775"
"How to get the primary IP address of the local machine on Linux and OS X?","288670","","<p>I am looking for a command line solution that would return me the primary (first) IP address of the localhost, other than 127.0.0.1</p>

<p>The solution should work at least for Linux (Debian and RedHat) and OS X 10.7+</p>

<p>I am aware that <code>ifconfig</code> is available on both but its output is not so consistent between these platforms.</p>
","<p>Use <code>grep</code> to filter IP address from <code>ifconfig</code>: </p>

<p><code>ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'</code></p>

<p>Or with <code>sed</code>:</p>

<p><code>ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'</code></p>

<p>If you are only interested in certain interfaces, wlan0, eth0, etc. then:</p>

<p><code>ifconfig wlan0 | ...</code></p>

<p>You can alias the command in your <code>.bashrc</code> to <em>create</em> your own command called <code>myip</code> for instance.</p>

<p><code>alias myip=""ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'""</code></p>

<p>A much simpler way is <code>hostname -I</code> (<code>hostname -i</code> for older versions of <code>hostname</code> but see comments). However, this is on Linux only. </p>
","13322549"
"How to iterate over files in a directory with Bash?","288642","","<p>I need to write a script that starts my program with different arguments, but I'm new to Bash. I start my program like this:</p>

<p><code>./MyProgram.exe Data/data1.txt [Logs/data1_Log.txt]</code>.</p>

<p>Here is the pseudocode for what i want to do:</p>

<pre><code>for each filename in /Data do
  for int i = 0, i = 3, i++
    ./MyProgram.exe Data/filename.txt Logs/filename_Log{i}.txt
  end if
end for
</code></pre>

<p>So I'm really puzzled how to create second argument from the first one, so it looks like dataABCD_Log1.txt and start my program. Help is very much appreciated.</p>

<p>P.S. I know there are simililar questions out there, but I found nothing on creating my logfile name.</p>
","<p>A couple of notes first: when you use <code>Data/data1.txt</code> as an argument, should it really be <code>/Data/data1.txt</code> (with a leading slash)? Also, should the outer loop scan only for .txt files, or all files in /Data? Here's an answer, assuming <code>/Data/data1.txt</code> and .txt files only:</p>

<pre><code>#!/bin/bash
for filename in /Data/*.txt; do
    for ((i=0; i&lt;=3; i++)); do
        ./MyProgram.exe ""$filename"" ""Logs/$(basename ""$filename"" .txt)_Log$i.txt""
    done
done
</code></pre>

<p>Notes:</p>

<ul>
<li><code>/Data/*.txt</code> expands to the paths of the text files in /Data (<em>including</em> the /Data/ part)</li>
<li><code>$( ... )</code> runs a shell command and inserts its output at that point in the command line</li>
<li><code>basename somepath .txt</code> outputs the base part of somepath, with .txt removed from the end (e.g. <code>/Data/file.txt</code> -> <code>file</code>)</li>
</ul>

<p>If you needed to run MyProgram with <code>Data/file.txt</code> instead of <code>/Data/file.txt</code>, use <code>""${filename#/}""</code> to remove the leading slash. On the other hand, if it's really <code>Data</code> not <code>/Data</code> you want to scan, just use <code>for filename in Data/*.txt</code>.</p>
","20796617"
"How to split a large text file into smaller files with equal number of lines?","287273","","<p>I've got a large (by number of lines) plain text file that I'd like to split into smaller files, also by number of lines.  So if my file has around 2M lines, I'd like to split it up into 10 files that contain 200k lines, or 100 files that contain 20k lines (plus one file with the remainder; being evenly divisible doesn't matter).</p>

<p>I could do this fairly easily in Python but I'm wondering if there's any kind of ninja way to do this using bash and unix utils (as opposed to manually looping and counting / partitioning lines).</p>
","<p>Have you looked at the split command?</p>

<pre><code>$ split --help
Usage: split [OPTION] [INPUT [PREFIX]]
Output fixed-size pieces of INPUT to PREFIXaa, PREFIXab, ...; default
size is 1000 lines, and default PREFIX is `x'.  With no INPUT, or when INPUT
is -, read standard input.

Mandatory arguments to long options are mandatory for short options too.
  -a, --suffix-length=N   use suffixes of length N (default 2)
  -b, --bytes=SIZE        put SIZE bytes per output file
  -C, --line-bytes=SIZE   put at most SIZE bytes of lines per output file
  -d, --numeric-suffixes  use numeric suffixes instead of alphabetic
  -l, --lines=NUMBER      put NUMBER lines per output file
      --verbose           print a diagnostic to standard error just
                            before each output file is opened
      --help     display this help and exit
      --version  output version information and exit
</code></pre>

<p>You could do something like this:</p>

<pre><code>split -l 200000 filename
</code></pre>

<p>which will create files each with 200000 lines named <code>xaa xab xac</code> ...</p>

<p>Another option, split by size of output file (still splits on line breaks):</p>

<pre><code> split -C 20m --numeric-suffixes input_filename output_prefix
</code></pre>

<p>creates files like <code>output_prefix01 output_prefix02 output_prefix03 ...</code> each of max size 20 megabytes.</p>
","2016918"
"How to enter ssh password using bash?","285938","","<p>Everyday I am connecting to a server through ssh. I go through this routine:</p>

<pre><code>IC001:Desktop user$ ssh user@my.server.com
user@my.server.com's password: 

Last login: Tue Jun  4 10:09:01 2013 from 0.0.0.0
$
</code></pre>

<p>I would like to automate this process and create a bash script to do it for me. I don't care about security and okay to store my password openly in the script. I am also okay for it to get typed openly on the screen while the script gets executed. So I've created this:</p>

<pre><code>#!/bin/bash          
ssh user@my.server.com
echo mypassword
</code></pre>

<p>But it doesn't work. I've also tried <code>send</code> instead of <code>echo</code>, but it also didn't work. Please advise if it is possible to do.</p>
","<p>Double check if you are not able to use keys.</p>

<p>Otherwise use expect:</p>

<pre><code>#!/usr/bin/expect -f
spawn ssh user@my.server.com
expect ""assword:""
send ""mypassword\r""
interact
</code></pre>
","16928662"
"How do I use shell variables in an awk script?","285205","","<p>I found some ways to pass external shell variables to an <code>awk</code> script, but I'm confused about <code>'</code> and <code>""</code>.</p>

<p>First, I tried with a shell script:</p>

<pre><code>$ v=123test
$ echo $v
123test
$ echo ""$v""
123test
</code></pre>

<p>Then tried awk:</p>

<pre><code>$ awk 'BEGIN{print ""'$v'""}'
$ 123test
$ awk 'BEGIN{print '""$v""'}'
$ 123
</code></pre>

<p>Why is the difference?</p>

<p>Lastly I tried this:</p>

<pre><code>$ awk 'BEGIN{print "" '$v' ""}'
$  123test
$ awk 'BEGIN{print ' ""$v"" '}'
awk: cmd. line:1: BEGIN{print
awk: cmd. line:1:             ^ unexpected newline or end of string 
</code></pre>

<p>I'm confused about this.</p>
","<p>Getting shell variables into <code>awk</code> may be done in several ways. Some are better than others.</p>

<hr>

<p>This is the best way to do it. It uses the <code>-v</code> option: (P.S. use a space after <code>-v</code> or it will be less portable. E.g., <code>awk -v var=</code> not <code>awk -vvar</code>)</p>

<pre><code>variable=""line one\nline two""
awk -v var=""$variable"" 'BEGIN {print var}'
line one
line two
</code></pre>

<p>This should be compatible with most <code>awk</code> and variable is available in the <code>BEGIN</code> block as well:</p>

<p>Multiple variables</p>

<pre><code>awk -v a=""$var1"" -v b=""$var2"" 'BEGIN {print a,b}'
</code></pre>

<hr>

<p>Here we get the variable after the <code>awk</code> code. This will work fine as long as you do not need the variable in the <code>BEGIN</code> block:</p>

<pre><code>variable=""line one\nline two""
echo ""input data"" | awk '{print var}' var=""$variable""
or
awk '{print var}' var=""$variable"" file
</code></pre>

<p>This also works with multiple variables
<code>awk '{print a,b,$0}' a=""$var1"" b=""$var2"" file</code></p>

<hr>

<p>As TrueY write, you can use the <code>ENVIRON</code> to print <code>Environmental Variables</code>
Setting a variable before running AWK, you can print it out like this:</p>

<pre><code>X=MyVar awk 'BEGIN{print ENVIRON[""X""],ENVIRON[""SHELL""]}'
MyVar /bin/bash
</code></pre>

<hr>

<p>Variable can also be added to <code>awk</code> using <a href=""http://en.wikipedia.org/wiki/Here_document"" rel=""nofollow noreferrer"">here string</a></p>

<pre><code>awk '{print $0}' &lt;&lt;&lt; ""$variable""
test
</code></pre>

<p>This is the same as:</p>

<pre><code>echo ""$variable"" | awk '{print $0}'
</code></pre>

<p>PS, this threats the variable as a file input</p>

<hr>

<p>You can use a variable within the <code>awk</code> code, but it's messy and hard to read, and as <code>Charles Duffy</code> points out, this version may also be a victim of code injection.  If someone adds bad stuff to the variable, it will be executed as part of the <code>awk</code> code, so DO NOT USE.</p>

<pre><code>variable=""line one\nline two""
awk 'BEGIN {print ""'""$variable""'""}'
line one
line two
</code></pre>

<p>Here is an example of code injection:</p>

<pre><code>variable='line one\nline two"" ; for (i=1;i&lt;=1000;++i) print i""'
awk 'BEGIN {print ""'""$variable""'""}'
line one
line two
1
2
3
.
.
1000
</code></pre>

<p>You can add lots of commands to <code>awk</code> this way.  Even make it crash with non valid commands.</p>

<hr>

<p>It's always good to double quote variable <code>""$variable""</code><br>
If not, multiple lines will be added as a long single line.</p>

<p>Example:</p>

<pre><code>var=""Line one
This is line two""

echo $var
Line one This is line two

echo ""$var""
Line one
This is line two
</code></pre>

<p>Other errors you can get without double quote:</p>

<pre><code>variable=""line one\nline two""
awk -v var=$variable 'BEGIN {print var}'
awk: cmd. line:1: one\nline
awk: cmd. line:1:    ^ backslash not last character on line
awk: cmd. line:1: one\nline
awk: cmd. line:1:    ^ syntax error
</code></pre>

<p>And with single quote, it does not expand the value of the variable:</p>

<pre><code>awk -v var='$variable' 'BEGIN {print var}'
$variable
</code></pre>
","19075707"
"wget with authentication","284886","","<p>How can I download a webpage that require a username and password?</p>

<p>For example I want to download this page after I have entered username and password:</p>

<p><a href=""http://forum.ubuntu-it.org/index.php"" rel=""noreferrer"">http://forum.ubuntu-it.org/index.php</a></p>
","<p>Try the solution presented here:</p>

<ul>
<li><p><a href=""http://www.unix.com/shell-programming-scripting/131020-using-wget-curl-http-post-authentication.html"">http://www.unix.com/shell-programming-scripting/131020-using-wget-curl-http-post-authentication.html</a></p>

<pre><code>   # Log in to the server.  This can be done only once.
   wget --save-cookies cookies.txt \
    --post-data 'user=foo&amp;password=bar' \
    http://server.com/auth.php


   # Now grab the page or pages we care about.
   wget --load-cookies cookies.txt \
    -p http://server.com/interesting/article.php
</code></pre></li>
</ul>

<p>Note for others who might stumble on this:</p>

<ul>
<li>The above simulates the user doing a manual login to a site which has a form with two input fields: one named <code>user</code> and one named <code>password</code></li>
<li>The form has it's <code>action</code> attribute set to <code>http://server.com/auth.php</code></li>
<li>The form doesn't use JavaScript
<ul>
<li>A good hint that it uses JavaScript is <code>onsubmit</code> attribute on the form element</li>
<li>Note that this is far from the only way to set the attributes - using JavaScript anywhere on the page or any of the statically or dynamically loaded script files can change the form elements</li>
</ul></li>
<li>The best way to see this is to load the page and do a live inspection with e.g. Firebug for Firefox</li>
</ul>

<p>So, if the attribute names and the form action url are different, you need to change the parameters to the first <code>wget</code> command appropriately. </p>

<p>If it uses JavaScript, there is a chance it will not work at all - e.g. in the case of OPs website example, it uses client JavaScript hashing, so the outside call using <code>wget</code> doesn't set the necessary fields on the form (in the case of the Ubuntu site, <code>hash_passwrd</code> field).</p>
","4272783"
"Replacing some characters in a string with another character","284700","","<p>I have a string like</p>

<pre class=""lang-none prettyprint-override""><code>AxxBCyyyDEFzzLMN
</code></pre>

<p>I want to replace all <code>x</code> and <code>y</code> and <code>z</code> with <code>_</code> so that the output is </p>

<pre><code>A_BC_DEF_LMN
</code></pre>

<p>How to do that?</p>

<p>I know a series of </p>

<pre><code>echo ""$string"" | tr 'x' '_' | tr 'y' '_' 
</code></pre>

<p>will work, but I want to do that in one go, without using pipes.</p>

<p>EDIT: The following worked </p>

<pre><code>echo ""$string"" | tr '[xyz]' '_'
</code></pre>
","<pre><code>echo ""$string"" | tr xyz _
</code></pre>

<p>would replace each occurrence of <code>x</code>, <code>y</code>, or <code>z</code> with <code>_</code>, giving <code>A__BC___DEF__LMN</code> in your example.</p>

<pre><code>echo ""$string"" | sed -r 's/[xyz]+/_/g'
</code></pre>

<p>would replace repeating occurrences of <code>x</code>, <code>y</code>, or <code>z</code> with a single <code>_</code>, giving <code>A_BC_DEF_LMN</code> in your example.</p>
","2871217"
"Difference between wait and sleep","282575","","<p>What is difference between <code>wait</code> and <code>sleep</code>?</p>
","<p><code>wait</code> waits for a process to finish; <code>sleep</code> sleeps for a certain amount of seconds.</p>
","13296927"
"Length of string in bash","282354","","<p>How do you get the length of a string stored in a variable and assign that to another variable?</p>

<pre><code>myvar=""some string""
echo ${#myvar}  
# 11
</code></pre>

<p>How do you set another variable to the output <code>11</code>?</p>
","<h3>UTF-8 string length</h3>

<p>In addition to <a href=""https://stackoverflow.com/a/17368090/1983854"">fedorqui's correct answer</a>, I would like to show the difference between string length and byte length:</p>

<pre><code>myvar='Généralités'
chrlen=${#myvar}
oLang=$LANG oLcAll=$LC_ALL
LANG=C LC_ALL=C
bytlen=${#myvar}
LANG=$oLang LC_ALL=$oLcAll
printf ""%s is %d char len, but %d bytes len.\n"" ""${myvar}"" $chrlen $bytlen
</code></pre>

<p>will render:</p>

<pre><code>Généralités is 11 char len, but 14 bytes len.
</code></pre>

<p>you could even have a look at stored chars:</p>

<pre><code>myvar='Généralités'
chrlen=${#myvar}
oLang=$LANG oLcAll=$LC_ALL
LANG=C LC_ALL=C
bytlen=${#myvar}
printf -v myreal ""%q"" ""$myvar""
LANG=$oLang LC_ALL=$oLcAll
printf ""%s has %d chars, %d bytes: (%s).\n"" ""${myvar}"" $chrlen $bytlen ""$myreal""
</code></pre>

<p>will answer:</p>

<pre><code>Généralités has 11 chars, 14 bytes: ($'G\303\251n\303\251ralit\303\251s').
</code></pre>

<p><strong>Nota:</strong> According to <a href=""https://stackoverflow.com/questions/17368067/length-of-string-in-bash/31009961#comment69945980_31009961"">Isabell Cowan's comment</a>, I've added setting to <code>$LC_ALL</code> along with <code>$LANG</code>.</p>

<h3>Length of an argument</h3>

<p>Argument work same as regular variables</p>

<pre><code>strLen() {
    local bytlen sreal oLang=$LANG oLcAll=$LC_ALL
    LANG=C LC_ALL=C
    bytlen=${#1}
    printf -v sreal %q ""$1""
    LANG=$oLang LC_ALL=$oLcAll
    printf ""String '%s' is %d bytes, but %d chars len: %s.\n"" ""$1"" $bytlen ${#1} ""$sreal""
}
</code></pre>

<p>will work as</p>

<pre><code>strLen théorème
String 'théorème' is 10 bytes, but 8 chars len: $'th\303\251or\303\250me'
</code></pre>

<h3>Useful <code>printf</code> correction tool:</h3>

<p>If you:</p>

<pre><code>for string in Généralités Language Théorème Février  ""Left: ←"" ""Yin Yang ☯"";do
    printf "" - %-14s is %2d char length\n"" ""'$string'""  ${#string}
done

 - 'Généralités' is 11 char length
 - 'Language'     is  8 char length
 - 'Théorème'   is  8 char length
 - 'Février'     is  7 char length
 - 'Left: ←'    is  7 char length
 - 'Yin Yang ☯' is 10 char length
</code></pre>

<p>Not really <em>pretty</em>... For this, there is a little function:</p>

<pre><code>strU8DiffLen () { 
    local bytlen oLang=$LANG oLcAll=$LC_ALL
    LANG=C LC_ALL=C
    bytlen=${#1}
    LANG=$oLang LC_ALL=$oLcAll
    return $(( bytlen - ${#1} ))
}
</code></pre>

<p>Then now:</p>

<pre><code>for string in Généralités Language Théorème Février  ""Left: ←"" ""Yin Yang ☯"";do
    strU8DiffLen ""$string""
    printf "" - %-$((14+$?))s is %2d chars length, but use %2d bytes\n"" \
        ""'$string'"" ${#string} $((${#string}+$?))
  done 

 - 'Généralités'  is 11 chars length, but use 14 bytes
 - 'Language'     is  8 chars length, but use  8 bytes
 - 'Théorème'     is  8 chars length, but use 10 bytes
 - 'Février'      is  7 chars length, but use  8 bytes
 - 'Left: ←'      is  7 chars length, but use  9 bytes
 - 'Yin Yang ☯'   is 10 chars length, but use 12 bytes
</code></pre>
","31009961"
"How to use 'find' to search for files created on a specific date?","281994","","<p>How do I use the UNIX command <code>find</code> to search for files created on a specific date?</p>
","<p>As pointed out by Max, you can't, but checking files modified or accessed is not all that hard.  I wrote a <a href=""http://virtuelvis.com/2008/10/how-to-use-find-to-search-for-files-created-on-a-specific-date/"" rel=""noreferrer"">tutorial</a> about this, as late as today. The essence of which is to use <code>-newerXY</code> and <code>! -newerXY</code>:</p>

<p>Example: To find all files modified on the 7th of June, 2007:</p>

<pre><code>$ find . -type f -newermt 2007-06-07 ! -newermt 2007-06-08
</code></pre>

<p>To find all files accessed on the 29th of september, 2008:</p>

<pre><code>$ find . -type f -newerat 2008-09-29 ! -newerat 2008-09-30
</code></pre>

<p>Or, files which had their permission changed on the same day:</p>

<pre><code>$ find . -type f -newerct 2008-09-29 ! -newerct 2008-09-30
</code></pre>

<p>If you don't change permissions on the file, 'c' would normally correspond to the creation date, though.</p>
","158235"
"How to insert a new line in Linux shell script?","281263","","<p>I want to insert a new line between multiple echo statements. I have tried <code>echo ""hello\n""</code>, but it is not working. It is printing <code>\n</code>. I want the desired output like this:</p>

<pre class=""lang-none prettyprint-override""><code>Create the snapshots

Snapshot created
</code></pre>
","<p>The simplest way to insert a new line between <code>echo</code> statements is to insert an <code>echo</code> without arguments, for example:</p>

<pre><code>echo Create the snapshots
echo
echo Snapshot created
</code></pre>

<p>That is, <code>echo</code> without any arguments will print a blank line.</p>

<p>Another alternative to use a single <code>echo</code> statement with the <code>-e</code> flag and embedded newline characters <code>\n</code>:</p>

<pre><code>echo -e ""Create the snapshots\n\nSnapshot created""
</code></pre>

<p>However, this is not portable, as the <code>-e</code> flag doesn't work consistently in all systems. A better way if you really want to do this is using <code>printf</code>:</p>

<pre><code>printf ""Create the snapshots\n\nSnapshot created\n""
</code></pre>

<p>This works more reliably in many systems, though it's not POSIX compliant. Notice that you must manually add a <code>\n</code> at the end, as <code>printf</code> doesn't append a newline automatically as <code>echo</code> does.</p>
","20538015"
"Make a Bash alias that takes a parameter?","280634","","<p>I used to use CShell (<a href=""/questions/tagged/csh"" class=""post-tag"" title=""show questions tagged &#39;csh&#39;"" rel=""tag"">csh</a>), which lets you make an alias that takes a parameter. The notation was something like</p>

<pre><code>alias junk=""mv \\!* ~/.Trash""
</code></pre>

<p>In Bash, this does not seem to work. Given that Bash has a multitude of useful features, I would assume that this one has been implemented but I am wondering how.</p>
","<p>Bash alias does not directly accept parameters. You will have to create a function and alias that.</p>

<p><code>alias</code> does not accept parameters but a function can be called just like an alias. For example:</p>

<pre><code>myfunction() {
    #do things with parameters like $1 such as
    mv ""$1"" ""$1.bak""
    cp ""$2"" ""$1""
}


myFunction xyz #calls `myfunction`
</code></pre>

<p>By the way, Bash functions defined in your <code>.bashrc</code> and other files are available as commands within your shell. So for instance you can call the earlier function like this </p>

<pre><code>$ myfunction original.conf my.conf
</code></pre>
","7131683"
"How to pipe stderr, and not stdout?","277274","","<p>I have a program that writes information to <code>stdout</code> and <code>stderr</code>, and I need to <code>grep</code> through what's coming to <em>stderr</em>, while disregarding <em>stdout</em>.</p>

<p>I can of course do it in 2 steps:</p>

<pre><code>command &gt; /dev/null 2&gt; temp.file
grep 'something' temp.file
</code></pre>

<p>but I would prefer to be able to do this without temp files. Are there any smart piping tricks?</p>
","<p>First redirect stderr to stdout — the pipe; then redirect stdout to <code>/dev/null</code> (without changing where stderr is going):</p>

<pre><code>command 2&gt;&amp;1 &gt;/dev/null | grep 'something'
</code></pre>

<p>For the details of I/O redirection in all its variety, see the chapter on <a href=""http://www.gnu.org/software/bash/manual/bash.html#Redirections"" rel=""noreferrer"">Redirections</a> in the Bash reference manual.</p>

<p>Note that the sequence of I/O redirections is interpreted left-to-right, but pipes are set up before the I/O redirections are interpreted.  File descriptors such as 1 and 2 are references to open file descriptions.  The operation <code>2&gt;&amp;1</code> makes file descriptor 2 aka stderr refer to the same open file description as file descriptor 1 aka stdout is currently referring to (see <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/toc.htm"" rel=""noreferrer""><code>dup2()</code></a> and <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/functions/open.html#"" rel=""noreferrer""><code>open()</code></a>).  The operation <code>&gt;/dev/null</code> then changes file descriptor 1 so that it refers to an open file description for <code>/dev/null</code>, but that doesn't change the fact that file descriptor 2 refers to the open file description which file descriptor 1 was originally pointing to — namely, the pipe.</p>
","2342841"
"Echo tab characters in bash script","276018","","<p>How do I echo one or more tab characters using a bash script?
When I run this code</p>

<pre><code>res='       'x # res = ""\t\tx""
echo '['$res']' # expect [\t\tx]
</code></pre>

<p>I get this</p>

<pre><code>res=[ x] # that is [&lt;space&gt;x]
</code></pre>
","<pre><code>echo -e ' \t '
</code></pre>

<p>will echo 'space tab space newline' (<code>-e</code> means 'enable interpretation of backslash escapes'):</p>

<pre><code>$ echo -e ' \t ' | hexdump -C
00000000  20 09 20 0a                                       | . .|
</code></pre>
","525873"
"How to escape single quotes within single quoted strings?","275280","","<p>Let's say, you have a bash <code>alias</code> like:</p>

<pre><code>alias rxvt='urxvt'
</code></pre>

<p>which works fine.</p>

<p>However:</p>

<pre><code>alias rxvt='urxvt -fg '#111111' -bg '#111111''
</code></pre>

<p>won't work, and neither will:</p>

<pre><code>alias rxvt='urxvt -fg \'#111111\' -bg \'#111111\''
</code></pre>

<p>So how do you end up matching up opening and closing quotes inside a string once you have escaped quotes?</p>

<pre><code>alias rxvt='urxvt -fg'\''#111111'\'' -bg '\''#111111'\''
</code></pre>

<p>seems ungainly although it would represent the same string if you're allowed to concatenate them like that.</p>
","<p>If you really want to use single quotes in the outermost layer, remember that you can glue both kinds of quotation. Example:</p>

<pre><code> alias rxvt='urxvt -fg '""'""'#111111'""'""' -bg '""'""'#111111'""'""
 #                     ^^^^^       ^^^^^     ^^^^^       ^^^^
 #                     12345       12345     12345       1234
</code></pre>

<p>Explanation of how <code>'""'""'</code> is interpreted as just <code>'</code>:</p>

<ol>
<li><code>'</code> End first quotation which uses single quotes.</li>
<li><code>""</code> Start second quotation, using double-quotes.</li>
<li><code>'</code> Quoted character.</li>
<li><code>""</code> End second quotation, using double-quotes.</li>
<li><code>'</code> Start third quotation, using single quotes.</li>
</ol>

<p>If you do not place any whitespaces between (1) and (2), or between (4) and (5), the shell will interpret that string as a one long word.</p>
","1250279"
"How to split a string in shell and get the last field","273948","","<p>Suppose I have the string <code>1:2:3:4:5</code> and I want to get its last field (<code>5</code> in this case). How do I do that using Bash? I tried <code>cut</code>, but I don't know how to specify the last field with <code>-f</code>.</p>
","<p>You can use <a href=""http://www.linuxjournal.com/article/8919"" rel=""noreferrer"">string operators</a>:</p>

<pre><code>$ foo=1:2:3:4:5
$ echo ${foo##*:}
5
</code></pre>

<p>This trims everything from the front until a ':', greedily.</p>

<pre><code>${foo  &lt;-- from variable foo
  ##   &lt;-- greedy front trim
  *    &lt;-- matches anything
  :    &lt;-- until the last ':'
 }
</code></pre>
","3162500"
"Bash tool to get nth line from a file","270480","","<p>Is there a ""canonical"" way of doing that? I've been using <code>head -n | tail -1</code> which does the trick, but I've been wondering if there's a Bash tool that specifically extracts a line (or a range of lines) from a file.</p>

<p>By ""canonical"" I mean a program whose main function is doing that.</p>
","<p><code>head</code> and pipe with <code>tail</code> will be slow for a huge file. I would suggest <code>sed</code> like this:</p>

<pre><code>sed 'NUMq;d' file
</code></pre>

<p>Where <code>NUM</code> is the number of the line you want to print; so, for example, <code>sed '10q;d' file</code> to print the 10th line of <code>file</code>.</p>

<p>Explanation:</p>

<p><code>NUMq</code> will quit immediately when the line number is <code>NUM</code>.</p>

<p><code>d</code> will delete the line instead of printing it; this is inhibited on the last line because the <code>q</code> causes the rest of the script to be skipped when quitting.</p>

<p>If you have <code>NUM</code> in a variable, you will want to use double quotes instead of single:</p>

<pre><code>sed ""${NUM}q;d"" file
</code></pre>
","6022431"
"How to use double or single brackets, parentheses, curly braces","270413","","<p>I am confused by the usage of brackets, parentheses, curly braces in Bash, as well as the difference between their double or single forms. Is there a clear explanation?</p>
","<p>In Bash, <code>test</code> and <code>[</code> are builtins.</p>

<p>The <a href=""http://mywiki.wooledge.org/BashFAQ/031"" rel=""noreferrer"">double bracket</a> enables additional functionality. For example, you can use <code>&amp;&amp;</code> and <code>||</code> instead of <code>-a</code> and <code>-o</code> and there's a regular expression matching operator <code>=~</code>.</p>

<p>The braces, in addition to delimiting a variable name are used for <a href=""http://tiswww.case.edu/php/chet/bash/bashref.html#SEC31"" rel=""noreferrer"">parameter expansion</a> so you can do things like:</p>

<ul>
<li><p>Truncate the contents of a variable</p>

<p><code>$ var=""abcde""; echo ${var%d*}</code><br>
<code>abc</code></p></li>
<li><p>Make substitutions similar to <code>sed</code></p>

<p><code>$ var=""abcde""; echo ${var/de/12}</code><br>
<code>abc12</code></p></li>
<li><p>Use a default value</p>

<p><code>$ default=""hello""; unset var; echo ${var:-$default}</code><br>
<code>hello</code></p></li>
<li><p>and several more</p></li>
</ul>

<p>Also, brace expansions create lists of strings which are typically iterated over in loops:</p>

<pre><code>$ echo f{oo,ee,a}d
food feed fad

$ mv error.log{,.OLD}
(error.log is renamed to error.log.OLD because the brace expression
expands to ""mv error.log error.log.OLD"")

$ for num in {000..2}; do echo ""$num""; done
000
001
002

$ echo {00..8..2}
00 02 04 06 08

$ echo {D..T..4}
D H L P T
</code></pre>

<p>Note that the leading zero and increment features weren't available before Bash 4.</p>

<p>Thanks to gboffi for reminding me about brace expansions.</p>

<p>Double parentheses are used for <a href=""http://tiswww.case.edu/php/chet/bash/bashref.html#SEC33"" rel=""noreferrer"">arithmetic operations</a>:</p>

<pre><code>((a++))

((meaning = 42))

for ((i=0; i&lt;10; i++))

echo $((a + b + (14 * c)))
</code></pre>

<p>and they enable you to omit the dollar signs on integer and array variables and include spaces around operators for readability.</p>

<p>Single brackets are also used for <a href=""http://tiswww.case.edu/php/chet/bash/bashref.html#SEC85"" rel=""noreferrer"">array</a> indices:</p>

<pre><code>array[4]=""hello""

element=${array[index]}
</code></pre>

<p>Curly brace are required for (most/all?) array references on the right hand side.</p>

<p><strong>ephemient's</strong> comment reminded me that parentheses are also used for subshells. And that they are used to create arrays.</p>

<pre><code>array=(1 2 3)
echo ${array[1]}
2
</code></pre>
","2188369"
"Use expect in bash script to provide password to SSH command","269986","","<p><strong>To those who want to reply that I should use SSH keys please abstain</strong></p>

<p>I'm trying to use expect in an bash script to provide the SSH password. Providing the password works but I don't end up in the SSH session as I should, it goes back strait to bash. </p>

<p>My script:</p>

<pre><code>#!/bin/bash

read -s PWD

/usr/bin/expect &lt;&lt;EOD
spawn ssh -oStrictHostKeyChecking=no -oCheckHostIP=no usr@$myhost.example.com'
expect ""password""
send ""$PWD\n"" 
EOD
echo ""you're out""
</code></pre>

<p>The output of my script:</p>

<pre><code>spawn ssh -oStrictHostKeyChecking=no -oCheckHostIP=no usr@$myhost.example.com
usr@$myhost.example.com's password: you're out
</code></pre>

<p>I would like to have my SSH session and only when I exit it to go back to my bash script.
The reason why I am using bash before expect is because I have use a menu I can choose which unit to connect to.</p>

<p>Thanks</p>
","<p>Mixing bash and expect is not a good way to achieve the desired effect. I'd try to use only Expect:</p>

<pre><code>#!/usr/bin/expect
eval spawn ssh -oStrictHostKeyChecking=no -oCheckHostIP=no usr@$myhost.example.com
#use correct prompt
set prompt "":|#|\\\$""
interact -o -nobuffer -re $prompt return
send ""my_password\r""
interact -o -nobuffer -re $prompt return
send ""my_command1\r""
interact -o -nobuffer -re $prompt return
send ""my_command2\r""
interact
</code></pre>

<p>Sample solution for bash could be:</p>

<pre><code>#!/bin/bash
/usr/bin/expect -c 'expect ""\n"" { eval spawn ssh -oStrictHostKeyChecking=no -oCheckHostIP=no usr@$myhost.example.com; interact }'
</code></pre>

<p>This will wait for enter and than return (for a moment) interactive session.</p>
","4783182"
"example of how to use getopts in bash","268471","","<p>I want to call <code>myscript</code> file in this way:</p>

<pre><code>$ ./myscript -s 45 -p any_string
</code></pre>

<p>or</p>

<pre><code>$ ./myscript -h &gt;&gt;&gt; should display help
$ ./myscript    &gt;&gt;&gt; should display help
</code></pre>

<p>My requirements are:</p>

<ul>
<li><code>getopt</code> here to get the input arguments</li>
<li>check that <code>-s</code> exists, if not return error</li>
<li>check that the value after the <code>-s</code> is 45 or 90</li>
<li>check that the <code>-p</code> exists and there is an input string after</li>
<li>if the user enters <code>./myscript -h</code> or just <code>./myscript</code> then display help</li>
</ul>

<p>I tried so far this code:</p>

<pre><code>#!/bin/bash
while getopts ""h:s:"" arg; do
  case $arg in
    h)
      echo ""usage"" 
      ;;
    s)
      strength=$OPTARG
      echo $strength
      ;;
  esac
done
</code></pre>

<p>But with that code I get errors.  How to do it with Bash and <code>getopt</code>?</p>
","<pre><code>#!/bin/bash

usage() { echo ""Usage: $0 [-s &lt;45|90&gt;] [-p &lt;string&gt;]"" 1&gt;&amp;2; exit 1; }

while getopts "":s:p:"" o; do
    case ""${o}"" in
        s)
            s=${OPTARG}
            ((s == 45 || s == 90)) || usage
            ;;
        p)
            p=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z ""${s}"" ] || [ -z ""${p}"" ]; then
    usage
fi

echo ""s = ${s}""
echo ""p = ${p}""
</code></pre>

<p>Example runs:</p>

<pre><code>$ ./myscript.sh
Usage: ./myscript.sh [-s &lt;45|90&gt;] [-p &lt;string&gt;]

$ ./myscript.sh -h
Usage: ./myscript.sh [-s &lt;45|90&gt;] [-p &lt;string&gt;]

$ ./myscript.sh -s """" -p """"
Usage: ./myscript.sh [-s &lt;45|90&gt;] [-p &lt;string&gt;]

$ ./myscript.sh -s 10 -p foo
Usage: ./myscript.sh [-s &lt;45|90&gt;] [-p &lt;string&gt;]

$ ./myscript.sh -s 45 -p foo
s = 45
p = foo

$ ./myscript.sh -s 90 -p bar
s = 90
p = bar
</code></pre>
","16496491"
"How to generate a core dump in Linux when a process gets a segmentation fault?","264680","","<p>I have a process in Linux that's getting a segmentation fault.  How can I tell it to generate a core dump when it fails?</p>
","<p>This depends on what shell you are using.  If you are using bash, then the ulimit command controls several settings relating to program execution, such as whether you should dump core.  If you type</p>

<pre><code>ulimit -c unlimited
</code></pre>

<p>then that will tell bash that its programs can dump cores of any size.  You can specify a size such as 52M instead of unlimited if you want, but in practice this shouldn't be necessary since the size of core files will probably never be an issue for you.</p>

<p>In tcsh, you'd type</p>

<pre><code>limit coredumpsize unlimited
</code></pre>
","17994"
"-bash: ./my_script: /bin/bash^M: bad interpreter: No such file or directory","261891","","<p>I'm learning through this tutorial to learn <a href=""http://linuxcommand.org/wss0010.php"" rel=""noreferrer"">bash scripts</a> to automate a few tasks for me. I'm connecting to a server using putty.</p>

<p>The script, located in <code>.../Documents/LOG</code>, is:</p>

<pre><code>#!/bin/bash
# My first script
echo ""Hello World!""
</code></pre>

<p>And I executed the following for read/write/execute permissions</p>

<pre><code>chmod 755 my_script
</code></pre>

<p>Then, when I enter <code>./my_script</code>, I'm getting the error given in the title.</p>

<p>Some similar questions wanted to see these, so I think they might help:</p>

<pre><code>which bash
</code></pre>

<blockquote>
  <p>/bin/bash</p>
</blockquote>

<p>and</p>

<pre><code>echo $PATH
</code></pre>

<blockquote>
  <p>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/bin/mh</p>
</blockquote>

<p>I tried adding current directory to <code>PATH</code>, but that doesn't work..</p>
","<p>I have seen this issue when creating scripts in Windows env and then porting over to run on a Unix environment.</p>

<p>Try running this on the script:</p>

<p><a href=""http://linuxcommand.org/man_pages/dos2unix1.html"" rel=""noreferrer"">http://linuxcommand.org/man_pages/dos2unix1.html</a></p>

<p>Updated link:</p>

<p><a href=""http://dos2unix.sourceforge.net/"" rel=""noreferrer"">http://dos2unix.sourceforge.net/</a></p>

<p>Or just rewrite the script in your Unix env using <code>vi</code> and test.</p>

<p>Unix uses different line feeds and carriage returns so can't read the file you created on Windows. Hence it is seeing ^M as an illegal character.</p>

<p>If you want to write a file on Windows and then port over, make sure your editor is set to create files in UNIX format.</p>

<p>In notepad++ in the bottom right of the screen, it tells you the document format. By default, it will say <code>Dos\Windows</code>. To change it go to </p>

<ul>
<li>settings->preferences </li>
<li>new document / default directory tab</li>
<li>select the format as unix and close</li>
<li>create a new document</li>
</ul>
","14219160"
"How to kill all processes with a given partial name?","257821","","<p>I want to kill all processes that I get by:</p>

<pre><code>ps aux | grep my_pattern
</code></pre>

<p>How to do it?</p>

<p>This does not work:</p>

<pre><code>pkill my_pattern
</code></pre>
","<p>Use <code>pkill -f</code>, which matches the pattern for any part of the command line</p>

<pre><code>pkill -f my_pattern
</code></pre>
","8987063"
"Command not found error in Bash variable assignment","257451","","<p>I have this script called test.sh:</p>

<pre><code>#!/bin/bash
STR = ""Hello World""
echo $STR
</code></pre>

<p>when I run <code>sh test.sh</code> I get this:</p>

<pre><code>test.sh: line 2: STR: command not found
</code></pre>

<p>What am I doing wrong?  I look at extremely basic/beginners bash scripting tutorials online and this is how they say to declare variables... So I'm not sure what I'm doing wrong.</p>

<p>I'm on Ubuntu Server 9.10. And yes, bash is located at <code>/bin/bash</code>.</p>
","<p>You cannot have spaces around your '=' sign.  </p>

<p>When you write:</p>

<pre><code>STR = ""foo""
</code></pre>

<p>bash tries to run a command named STR with 2 arguments (the strings '=' and 'foo')</p>

<p>When you write:</p>

<pre><code>STR =foo
</code></pre>

<p>bash tries to run a command named STR with 1 argument (the string '=foo')</p>

<p>When you write:</p>

<pre><code>STR= foo
</code></pre>

<p>bash tries to run the command foo with STR set to the empty string in its environment.</p>

<p>I'm not sure if this helps to clarify or if it is mere obfuscation, but note that:</p>

<ol>
<li>the first command is exactly equivalent to: <code>STR ""="" ""foo""</code>,</li>
<li>the second is the same as <code>STR ""=foo""</code>,</li>
<li>and the last is equivalent to <code>STR="""" foo</code>.</li>
</ol>

<p>The relevant section of the <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_01"" rel=""noreferrer"">sh language spec, section 2.9.1</a> states:</p>

<blockquote>
  <p>A ""simple command"" is a sequence of optional variable assignments and redirections, in any sequence, optionally followed by words and redirections, terminated by a control operator.</p>
</blockquote>

<p>In that context, a <code>word</code> is the command that bash is going to run.  Any string  containing <code>=</code> (in any position other than at the beginning of the string) which is not a redirection is a variable assignment, while any string that is not a redirection and does not contain <code>=</code> is a command.  In <code>STR = ""foo""</code>, <code>STR</code> is not a variable assignment.</p>
","2268117"
"How to define hash tables in Bash?","254534","","<p>What is the equivalent of <a href=""https://docs.python.org/2/tutorial/datastructures.html#dictionaries"" rel=""noreferrer"">Python dictionaries</a> but in Bash (should work across OS X and Linux).</p>
","<h1>Bash 4</h1>

<p>Bash 4 natively supports this feature.  Make sure your script's hashbang is <code>#!/usr/bin/env bash</code> or <code>#!/bin/bash</code> or anything else that references <code>bash</code> and not <code>sh</code>.  Make sure you're executing your script, and not doing something silly like <code>sh script</code> which would cause your <code>bash</code> hashbang to be ignored.  This is basic stuff, but so many keep failing at it, hence the re-iteration.</p>

<p>You declare an associative array by doing:</p>

<pre><code>declare -A animals
</code></pre>

<p>You can fill it up with elements using the normal array assignment operator:</p>

<pre><code>animals=( [""moo""]=""cow"" [""woof""]=""dog"")
</code></pre>

<p>Or merge them:</p>

<pre><code>declare -A animals=( [""moo""]=""cow"" [""woof""]=""dog"")
</code></pre>

<p>Then use them just like normal arrays.  <code>""${animals[@]}""</code> expands the values, <code>""${!animals[@]}""</code> (notice the <code>!</code>) expands the keys.  Don't forget to quote them:</p>

<pre><code>echo ""${animals[moo]}""
for sound in ""${!animals[@]}""; do echo ""$sound - ${animals[$sound]}""; done
</code></pre>

<h1>Bash 3</h1>

<p>Before bash 4, you don't have associative arrays.  <strong>Do not use <code>eval</code> to emulate them</strong>.  You must avoid eval like the plague, because it <em>is</em> the plague of shell scripting.  The most important reason is that you don't want to treat your data as executable code (there are many other reasons too).</p>

<p><em>First and foremost</em>: Just consider upgrading to bash 4.  Seriously.  <em>The future is now</em>, stop living in the past and <strong>suffering from it</strong> by forcing stupid broken and ugly hacks on your code and every poor soul stuck maintaining it.</p>

<p>If you have some silly excuse why you ""<em>can't upgrade</em>"", <code>declare</code> is a far safer option.  It does not evaluate data as bash code like <code>eval</code> does, and as such it does not allow arbitrary code injection quite so easily.</p>

<p>Let's prepare the answer by introducing the concepts:</p>

<p>First, indirection (seriously; never use this unless you're mentally ill or have some other bad excuse for writing hacks).</p>

<pre><code>$ animals_moo=cow; sound=moo; i=""animals_$sound""; echo ""${!i}""
cow
</code></pre>

<p>Secondly, <code>declare</code>:</p>

<pre><code>$ sound=moo; animal=cow; declare ""animals_$sound=$animal""; echo ""$animals_moo""
cow
</code></pre>

<p>Bring them together:</p>

<pre><code># Set a value:
declare ""array_$index=$value""

# Get a value:
arrayGet() { 
    local array=$1 index=$2
    local i=""${array}_$index""
    printf '%s' ""${!i}""
}
</code></pre>

<p>Let's use it:</p>

<pre><code>$ sound=moo
$ animal=cow
$ declare ""animals_$sound=$animal""
$ arrayGet animals ""$sound""
cow
</code></pre>

<p>Note: <code>declare</code> cannot be put in a function.  Any use of <code>declare</code> inside a bash function turns the variable it creates <em>local</em> to the scope of that function, meaning we can't access or modify global arrays with it. (In bash 4 you can use declare -g to declare global variables - but in bash 4, you should be using associative arrays in the first place, not this hack.)</p>

<h1>Summary</h1>

<p>Upgrade to bash 4 and use <code>declare -A</code>.  If you can't, consider switching entirely to <code>awk</code> before doing ugly hacks as described above.  And definitely stay the heck away from <code>eval</code> hackery.</p>
","3467959"
"Scripts: find the files have been changed in last 24 hours","254523","","<p>E.g. A Mysql server is running on my Ubuntu machine. Some data had been changed during the last 24 hours.</p>

<p>What (Linux) scripts can find the files that have been changed during the last 24 hours?</p>

<p>Please list the file names, file sizes, and modified time.</p>
","<p>To find all files modified in the last 24 hours (last full day) in a particular specific directory and its sub-directories:</p>

<pre><code>find /directory_path -mtime -1 -ls
</code></pre>

<p>Should be to your liking</p>

<p>The <code>-</code> before <code>1</code> is important - it means anything changed one day or less ago.
A <code>+</code> before <code>1</code> would instead mean anything changed at least one day ago, while having nothing before the <code>1</code> would have meant it was changed exacted one day ago, no more, no less.</p>
","16086041"
"Running multiple commands in one line in shell","254518","","<p>Say I have a file <code>/templates/apple</code> and I want to</p>

<ol>
<li>put it in two different places and then</li>
<li>remove the original.</li>
</ol>

<p>So, <code>/templates/apple</code> will be copied to <code>/templates/used</code> AND <code>/templates/inuse</code>
and then after that I’d like to remove the original.</p>

<p>Is <code>cp</code> the best way to do this, followed by <code>rm</code>? Or is there a better way?</p>

<p>I want to do it all in one line so I’m thinking it would look something like:</p>

<pre><code>cp /templates/apple /templates/used | cp /templates/apple /templates/inuse | rm /templates/apple
</code></pre>

<p>Is this the correct syntax?</p>
","<p>You are using <code>|</code> (pipe) to direct the output of a command into another command. What you are looking for is <code>&amp;&amp;</code> operator to execute the next command only if the previous one succeeded:</p>

<pre><code>cp /templates/apple /templates/used &amp;&amp; cp /templates/apple /templates/inuse &amp;&amp; rm /templates/apple
</code></pre>

<p>Or </p>

<pre><code>cp /templates/apple /templates/used &amp;&amp; mv /templates/apple /templates/inuse
</code></pre>

<hr>

<p>To summarize (non-exhaustively) bash's command operators/separators:</p>

<ul>
<li><code>|</code> pipes (pipelines) the standard output (<code>stdout</code>) of one command into the standard input of another one. Note that <code>stderr</code> still goes into its default destination, whatever that happen to be.</li>
<li><code>|&amp;</code>pipes both <code>stdout</code> and <code>stderr</code> of one command into the standard input of another one. Very useful, available in bash version 4 and above.</li>
<li><code>&amp;&amp;</code> executes the right-hand command of <code>&amp;&amp;</code> only if the previous one succeeded.</li>
<li><code>||</code> executes the right-hand command of <code>||</code> only it the previous one failed.</li>
<li><code>;</code> executes the right-hand command of <code>;</code> always regardless whether the previous command succeeded or failed. Unless <code>set -e</code> was previously invoked, which causes <code>bash</code> to fail on an error.</li>
</ul>
","5130889"
"Capturing Groups From a Grep RegEx","252766","","<p>I've got this little script in <code>sh</code> (Mac OSX 10.6) to look through an array of files. Google has stopped being helpful at this point:</p>

<pre><code>files=""*.jpg""
for f in $files
    do
        echo $f | grep -oEi '[0-9]+_([a-z]+)_[0-9a-z]*'
        name=$?
        echo $name
    done
</code></pre>

<p>So far (obviously, to you shell gurus) <code>$name</code> merely holds 0, 1 or 2, depending on if <code>grep</code> found that the filename matched the matter provided. <strong>What I'd like is to capture what's inside the parens <code>([a-z]+)</code> and store that to a variable</strong>.</p>

<p>I'd like <strong>to use <code>grep</code> only, if possible</strong>. If not, please no Python or Perl, etc. <code>sed</code> or something like it – I'm new to shell and would like to attack this from the *nix purist angle.</p>

<p>Also, as a <strong>super-cool bonu</strong>s, I'm curious as to how I can concatenate string in shell? Is the group I captured was the string ""somename"" stored in $name, and I wanted to add the string "".jpg"" to the end of it, could I <code>cat $name '.jpg'</code>?</p>

<p>Please explain what's going on, if you've got the time.</p>
","<p>If you're using Bash, you don't even have to use <code>grep</code>:</p>

<pre><code>files=""*.jpg""
regex=""[0-9]+_([a-z]+)_[0-9a-z]*""
for f in $files
do
    if [[ $f =~ $regex ]]
    then
        name=""${BASH_REMATCH[1]}""
        echo ""${name}.jpg""    # concatenate strings
        name=""${name}.jpg""    # same thing stored in a variable
    else
        echo ""$f doesn't match"" &gt;&amp;2 # this could get noisy if there are a lot of non-matching files
    fi
done
</code></pre>

<p>It's better to put the regex in a variable. Some patterns won't work if included literally.</p>

<p>This uses  <code>=~</code> which is Bash's regex match operator. The results of the match are saved to an array called <code>$BASH_REMATCH</code>. The first capture group is stored in index 1, the second (if any) in index 2, etc. Index zero is the full match.</p>

<p>You should be aware that without anchors, this regex (and the one using <code>grep</code>) will match any of the following examples and more, which may not be what you're looking for:</p>

<pre><code>123_abc_d4e5
xyz123_abc_d4e5
123_abc_d4e5.xyz
xyz123_abc_d4e5.xyz
</code></pre>

<p>To eliminate the second and fourth examples, make your regex like this:</p>

<pre><code>^[0-9]+_([a-z]+)_[0-9a-z]*
</code></pre>

<p>which says the string must <em>start</em> with one or more digits. The carat represents the beginning of the string. If you add a dollar sign at the end of the regex, like this:</p>

<pre><code>^[0-9]+_([a-z]+)_[0-9a-z]*$
</code></pre>

<p>then the third example will also be eliminated since the dot is not among the characters in the regex and the dollar sign represents the end of the string. Note that the fourth example fails this match as well.</p>

<p>If you have GNU <code>grep</code> (around 2.5 or later, I think, when the <code>\K</code> operator was added):</p>

<pre><code>name=$(echo ""$f"" | grep -Po '(?i)[0-9]+_\K[a-z]+(?=_[0-9a-z]*)').jpg
</code></pre>

<p>The <code>\K</code> operator (variable-length look-behind) causes the preceding pattern to match, but doesn't include the match in the result. The fixed-length equivalent is <code>(?&lt;=)</code> - the pattern would be included before the closing parenthesis. You must use <code>\K</code> if quantifiers may match strings of different lengths (e.g. <code>+</code>, <code>*</code>, <code>{2,4}</code>).</p>

<p>The <code>(?=)</code> operator matches fixed or variable-length patterns and is called ""look-ahead"". It also does not include the matched string in the result.</p>

<p>In order to make the match case-insensitive, the <code>(?i)</code> operator is used. It affects the patterns that follow it so its position is significant.</p>

<p>The regex might need to be adjusted depending on whether there are other characters in the filename. You'll note that in this case, I show an example of concatenating a string at the same time that the substring is captured.</p>
","1892107"
"Difference between return and exit in BASH functions","252529","","<p>What is the difference between the <code>return</code> and <code>exit</code> statement in BASH functions with respect to exit codes?</p>
","<p><code>return</code> returns a value from a function. <code>exit</code> abandons the current shell.</p>

<p><strong>EDIT:</strong></p>

<p>As per your edit of the question, regarding exit codes, <code>return</code> has nothing to do with exit codes. Exit codes are intended for <strong>applications/scripts</strong>, not functions. So in this regard, the only keyword that sets the exit code of the script (the one that can be caught by the calling program using the <code>$?</code> shell variable) is <code>exit</code>.</p>

<p><strong>EDIT 2:</strong></p>

<p>My last statement referring <code>exit</code> is causing some comments. It was made to differentiate <code>return</code> and <code>exit</code> for the understanding of the OP, and in fact, at <em>any</em> given point of a program/shell script, <code>exit</code> is the only way of ending the script with an exit code to the calling process.</p>

<p>Every command executed in the shell produces a local ""exit code"": it sets the <code>$?</code> variable to that code, and can be used with <code>if</code>,  <code>&amp;&amp;</code> and other operators to conditionally execute other commands.</p>

<p>These exit codes (and the value of the <code>$?</code> variable) are reset by each command execution.</p>

<p>Incidentally, the exit code of the last command executed by the script is used as the exit code of the script itself as seen by the calling process. </p>

<p>Finally, functions, when called, act as shell commands with respect to exit codes. The exit code of the function (<em>within</em> the function) is set by using <code>return</code>. So when in a function <code>return 0</code> is run, the function execution terminates, giving an exit code of 0.</p>
","4419956"
"How to automatically add user account AND password with a Bash script?","251073","","<p>I need to have the ability to create user accounts on my Linux (Fedora 10) and automatically assign a password via a bash script(or otherwise, if need be).</p>

<p>It's easy to create the user via Bash e.g.:</p>

<pre><code>[whoever@server ]#  /usr/sbin/useradd newuser
</code></pre>

<p>Is it possible to assign a password in Bash, something functionally similar to this, but automatically:</p>

<pre><code>[whoever@server ]# passwd newuser
Changing password for user testpass.
New UNIX password:
Retype new UNIX password: 
passwd: all authentication tokens updated successfully.
[whoever@server ]#
</code></pre>
","<p>You can run the passwd command and send it piped input.  So, do something like:</p>

<pre><code>echo thePassword | passwd theUsername --stdin
</code></pre>
","2151149"
"How to get the list of files in a directory in a shell script?","250991","","<p>I'm trying to get the contents of a directory using shell script.</p>

<p>My script is:</p>

<pre><code>for entry in `ls $search_dir`; do
    echo $entry
done
</code></pre>

<p>where <code>$search_dir</code> is a relative path. However, <code>$search_dir</code> contains many files with whitespaces in their names. In that case, this script does not run as expected.</p>

<p>I know I could use <code>for entry in *</code>, but that would only work for my current directory.</p>

<p>I know I can change to that directory, use <code>for entry in *</code> then change back, but my particular situation prevents me from doing that.</p>

<p>I have two relative paths <code>$search_dir</code> and <code>$work_dir</code>, and I have to work on both simultaneously, reading them creating/deleting files in them etc.</p>

<p>So what do I do now?</p>

<p>PS: I use bash.</p>
","<pre class=""lang-sh prettyprint-override""><code>for entry in ""$search_dir""/*
do
  echo ""$entry""
done
</code></pre>
","2437466"
"How to split one string into multiple strings separated by at least one space in bash shell?","248870","","<p>I have a string containing many words with at least one space between each two. How can I split the string into individual words so I can loop through them?</p>

<p>The string is passed as an argument. E.g. <code>${2} == ""cat cat  file""</code>. How can I loop through it?</p>

<p>Also, how can I check if a string contains spaces?</p>
","<p>Did you try just passing the string variable to a <code>for</code> loop? Bash, for one, will split on whitespace automatically.</p>

<pre><code>sentence=""This is   a sentence.""
for word in $sentence
do
    echo $word
done
</code></pre>

<p>&nbsp;</p>

<pre><code>This
is
a
sentence.
</code></pre>
","1469863"
"How to check if a file contains a specific string using bash","248442","","<p>I want to check if a file contains a specific string or not in bash. I used this script, but it doesn't work:</p>

<pre><code> if [[ 'grep 'SomeString' $File' ]];then
   Some Actions
 fi
</code></pre>

<p>what's wrong in my code?</p>
","<pre><code>if grep -q SomeString ""$File""; then
  Some Actions # SomeString was found
fi
</code></pre>

<p>You don't need <code>[[ ]]</code> here. Just run the command directly. Add <code>-q</code> option when you don't need the string displayed when it was found.</p>

<p>The <code>grep</code> command returns 0 or 1 in the exit code depending on
the result of search. 0 if something was found; 1 otherwise.</p>

<pre><code>$ echo hello | grep hi ; echo $?
1
$ echo hello | grep he ; echo $?
hello
0
$ echo hello | grep -q he ; echo $?
0
</code></pre>

<p>You can specify commands as an condition of <code>if</code>. If the command returns 0 in its exitcode that means that the condition is true; otherwise false.</p>

<pre><code>$ if /bin/true; then echo that is true; fi
that is true
$ if /bin/false; then echo that is true; fi
$
</code></pre>

<p>As you can see you run here the programs directly. No additional <code>[]</code> or <code>[[]]</code>.</p>
","11287896"
"Difference between two directories in Linux","248349","","<p>I'm trying to find the files existing in one directory but not in the other, I tried to use this command:</p>

<pre><code>diff -q dir1 dir2
</code></pre>

<p>The problem with the above command that it finds both the files in <code>dir1</code> but not in <code>dir2</code> as well as the files in <code>dir2</code> but not in <code>dir1</code>, </p>

<p>I am trying to find the files in <code>dir1</code> but not in <code>dir2</code> only.</p>

<p>Here's a small sample of what my data looks like</p>

<pre><code>dir1    dir2    dir3
1.txt   1.txt   1.txt
2.txt   3.txt   3.txt
5.txt   4.txt   5.txt
6.txt   7.txt   8.txt
</code></pre>

<p>Another question on my mind is how can I find the files in <code>dir1</code> but not in <code>dir2</code> or <code>dir3</code> in a single command?</p>
","<pre><code>diff -r dir1 dir2 | grep dir1 | awk '{print $4}' &gt; difference1.txt
</code></pre>

<p><strong>Explanation:</strong></p>

<ul>
<li><p><code>diff -r dir1 dir2</code> shows which files are only in dir1 and those only in dir2 and also the changes of the files present in both directories if any.</p></li>
<li><p><code>diff -r dir1 dir2 | grep dir1</code>  shows which files are only in dir1</p></li>
<li><p><code>awk</code> to print only filename.</p></li>
</ul>
","16788549"
"Bash: How _best_ to include other scripts?","243978","","<p>The way you would normally include a script is with ""source""</p>

<p>eg:</p>

<p>main.sh:</p>

<pre><code>#!/bin/bash

source incl.sh

echo ""The main script""
</code></pre>

<p>incl.sh:</p>

<pre><code>echo ""The included script""
</code></pre>

<p>The output of executing ""./main.sh"" is:</p>

<pre><code>The included script
The main script
</code></pre>

<p>... Now, if you attempt to execute that shell script from another location, it can't find the include unless it's in your path.</p>

<p>What's a good way to ensure that your script can find the include script, especially if for instance, the script needs to be portable?</p>
","<p>I tend to make my scripts all be relative to one another. 
That way I can use dirname:</p>

<pre><code>#!/bin/sh

my_dir=""$(dirname ""$0"")""

""$my_dir/other_script.sh""
</code></pre>
","192305"
"Quick unix command to display specific lines in the middle of a file?","243783","","<p>Trying to debug an issue with a server and my only log file is a 20GB log file (with no timestamps even! Why do people use <code>System.out.println()</code> as logging? In production?!)</p>

<p>Using grep, I've found an area of the file that I'd like to take a look at, line 347340107.</p>

<p>Other than doing something like</p>

<pre><code>head -&lt;$LINENUM + 10&gt; filename | tail -20 
</code></pre>

<p>... which would require <code>head</code> to read through the first 347 million lines of the log file, is there a quick and easy command that would dump lines 347340100 - 347340200 (for example) to the console?</p>

<p><strong>update</strong> I totally forgot that grep can print the context around a match ... this works well. Thanks!</p>
","<p>with GNU-grep you could just say </p>

<pre>grep --context=10 ...</pre>
","191385"
"eval command in Bash and its typical uses","243489","","<p>After reading the bash man pages and with respect to this <a href=""http://www.unix.com/shell-programming-scripting/66063-eval-shell-scripting.html"">post</a>.</p>

<p>I am still having trouble understanding what exactly the <code>eval</code> command does and which would be its typical uses. For example if we do:</p>

<pre><code>bash$ set -- one two three  # sets $1 $2 $3
bash$ echo $1
one
bash$ n=1
bash$ echo ${$n}       ## First attempt to echo $1 using brackets fails
bash: ${$n}: bad substitution
bash$ echo $($n)       ## Second attempt to echo $1 using parentheses fails
bash: 1: command not found
bash$ eval echo \${$n} ## Third attempt to echo $1 using 'eval' succeeds
one
</code></pre>

<p>What exactly is happening here and how do the dollar sign and the backslash tie into the problem?</p>
","<p><code>eval</code> takes a string as its argument, and evaluates it as if you'd typed that string on a command line. (If you pass several arguments, they are first joined with spaces between them.)</p>

<p><code>${$n}</code> is a syntax error in bash. Inside the braces, you can only have a variable name, with some possible prefix and suffixes, but you can't have arbitrary bash syntax and in particular you can't use variable expansion. There is a way of saying “the value of the variable whose name is in this variable”, though:</p>

<pre><code>echo ${!n}
one
</code></pre>

<p><code>$(…)</code> runs the command specified inside the parentheses in a subshell (i.e. in a separate process that inherits all settings such as variable values from the current shell), and gathers its output. So <code>echo $($n)</code> runs <code>$n</code> as a shell command, and displays its output. Since <code>$n</code> evaluates to <code>1</code>, <code>$($n)</code> attempts to run the command <code>1</code>, which does not exist.</p>

<p><code>eval echo \${$n}</code> runs the parameters passed to <code>eval</code>. After expansion, the parameters are <code>echo</code> and <code>${1}</code>. So <code>eval echo \${$n}</code> runs the command <code>echo ${1}</code>.</p>

<p>Note that most of the time, you must use double quotes around variable substitutions and command susbtitutions (i.e. anytime there's a <code>$</code>): <code>""$foo"", ""$(foo)""</code>. <strong>Always put double quotes around variable and command substitutions</strong>, unless you know you need to leave them off. Without the double quotes, the shell performs field splitting (i.e. it splits value of the variable or the output from the command into separate words) and then treats each word as a wildcard pattern. For example:</p>

<pre><code>$ ls
file1 file2 otherfile
$ set -- 'f* *'
$ echo ""$1""
f* *
$ echo $1
file1 file2 file1 file2 otherfile
$ n=1
$ eval echo \${$n}
file1 file2 file1 file2 otherfile
$eval echo \""\${$n}\""
f* *
$ echo ""${!n}""
f* *
</code></pre>

<p><code>eval</code> is not used very often. In some shells, the most common use is to obtain the value of a variable whose name is not known until runtime. In bash, this is not necessary thanks to the <code>${!VAR}</code> syntax. <code>eval</code> is still useful when you need to construct a longer command containing operators, reserved words, etc.</p>
","11065196"
"Bash script, read values from stdin pipe","242868","","<p>I am trying to get bash to process data from stdin that gets piped it, but no luck, what I mean is none of the following work:</p>

<pre><code>echo ""hello world"" | test=($(&lt; /dev/stdin)); echo test=$test
test=


echo ""hello world"" | read test; echo test=$test
test=


echo ""hello world"" | test=`cat`; echo test=$test
test=
</code></pre>

<p>where I want the output to be <code>test=hello world</code>. Note I've tried putting """" quotes around <code>""$test""</code> that doesn't work either.</p>
","<p>Use</p>

<pre><code>IFS= read var &lt;&lt; EOF
$(foo)
EOF
</code></pre>

<p>You <em>can</em> trick <code>read</code> into accepting from a pipe like this:</p>

<pre><code>echo ""hello world"" | { read test; echo test=$test; }
</code></pre>

<p>or even write a function like this:</p>

<pre><code>read_from_pipe() { read ""$@"" &lt;&amp;0; }
</code></pre>

<p>But there's no point - your variable assignments may not last! A pipeline may spawn a subshell, where the environment is inherited by value, not by reference. This is why <code>read</code> doesn't bother with input from a pipe - it's undefined.</p>

<p>FYI, <a href=""http://www.etalabs.net/sh_tricks.html"" rel=""noreferrer"">http://www.etalabs.net/sh_tricks.html</a> is a nifty collection of the cruft necessary to fight the oddities and incompatibilities of bourne shells, sh.</p>
","6779351"
"How do I run a shell script without using ""sh"" or ""bash"" commands?","242051","","<p>I have a shell script which I want to run without using the ""sh"" or ""bash"" commands. For example:</p>

<p>Instead of: <code>sh script.sh</code></p>

<p>I want to use: <code>script.sh</code></p>

<p>How can I do this?</p>

<p>P.S. (i) I don't use shell script much and I tried reading about aliases, but I did not understand how to use them. </p>

<p>(ii) I also read about linking the script with another file in the PATH variables. I am using my  university server and I don't have permissions to create a file in those locations. </p>
","<p>Add a ""shebang"" at the top of your file:</p>

<pre><code>#!/bin/bash
</code></pre>

<p>And make your file executable (<code>chmod +x script.sh</code>).</p>

<p>Finally, modify your path to add the directory where your script is located:</p>

<pre><code>export PATH=$PATH:/appropriate/directory
</code></pre>

<p>(typically, you want <code>$HOME/bin</code> for storing your own scripts)</p>
","8779980"
"Pseudo-terminal will not be allocated because stdin is not a terminal","239871","","<p>I am trying to write a shell script that creates some directories on a remote server and then uses scp to copy files from my local machine onto the remote. Here's what I have so far:</p>

<pre><code>ssh -t user@server&lt;&lt;EOT
DEP_ROOT='/home/matthewr/releases'
datestamp=$(date +%Y%m%d%H%M%S)
REL_DIR=$DEP_ROOT""/""$datestamp
if [ ! -d ""$DEP_ROOT"" ]; then
    echo ""creating the root directory""
    mkdir $DEP_ROOT
fi
mkdir $REL_DIR
exit
EOT

scp ./dir1 user@server:$REL_DIR
scp ./dir2 user@server:$REL_DIR
</code></pre>

<p>Whenever I run it I get this message:</p>

<pre><code>Pseudo-terminal will not be allocated because stdin is not a terminal.
</code></pre>

<p>And the script just hangs forever.</p>

<p>My public key is trusted on the server and I can run all the commands outside of the script just fine. Any ideas?</p>
","<p>Try <code>ssh -t -t</code>(or <code>ssh -tt</code> for short) to force pseudo-tty allocation even if stdin isn't a terminal.</p>

<p>See also: <a href=""https://stackoverflow.com/questions/7085429/terminating-ssh-session-executed-by-bash-script"">Terminating SSH session executed by bash script</a></p>

<p>From ssh manpage:</p>

<pre><code>-T      Disable pseudo-tty allocation.

-t      Force pseudo-tty allocation.  This can be used to execute arbitrary 
        screen-based programs on a remote machine, which can be very useful,
        e.g. when implementing menu services.  Multiple -t options force tty
        allocation, even if ssh has no local tty.
</code></pre>
","7122115"
"Defining a variable with or without export","238956","","<p>What is <code>export</code> for?</p>

<p>What is the difference between:</p>

<pre><code>export name=value
</code></pre>

<p>and</p>

<pre><code>name=value
</code></pre>
","<p><code>export</code> makes the variable available to sub-processes.</p>

<p>That is,</p>

<pre><code>export name=value
</code></pre>

<p>means that the variable name is available to <em>any process</em> you run from that shell process. If you want a process to make use of this variable, use <code>export</code>, and run the process from that shell.</p>

<pre><code>name=value
</code></pre>

<p>means the variable scope is restricted to the shell, and is not available to any other process. You would use this for (say) loop variables, temporary variables etc.</p>

<p>It's important to note that exporting a variable doesn't make it available to parent processes. That is, specifying and exporting a variable in a spawned process doesn't make it available in the process that launched it.</p>
","1158231"
"Propagate all arguments in a bash shell script","238923","","<p>I am writing a very simple script that calls another script, and I need to propagate the parameters from my current script to the script I am executing.</p>

<p>For instance, my script name is <code>foo.sh</code> and calls <code>bar.sh</code></p>

<p>foo.sh:</p>

<pre><code>bar $1 $2 $3 $4
</code></pre>

<p>How can I do this without explicitly specifying each parameter?</p>
","<p>Use <code>""$@""</code> instead of plain <code>$@</code> if you actually wish your parameters to be passed the same.</p>

<p>Observe:</p>

<pre><code>$ cat foo.sh
#!/bin/bash
baz.sh $@

$ cat bar.sh
#!/bin/bash
baz.sh ""$@""

$ cat baz.sh
#!/bin/bash
echo Received: $1
echo Received: $2
echo Received: $3
echo Received: $4

$ ./foo.sh first second
Received: first
Received: second
Received:
Received:

$ ./foo.sh ""one quoted arg""
Received: one
Received: quoted
Received: arg
Received:

$ ./bar.sh first second
Received: first
Received: second
Received:
Received:

$ ./bar.sh ""one quoted arg""
Received: one quoted arg
Received:
Received:
Received:
</code></pre>
","4824637"
"Bash: read lines in file into an array","238073","","<p>I am trying to read a file containing lines into a Bash array.</p>

<p>I have tried the following so far:</p>

<h1>Attempt1</h1>

<pre><code>a=( $( cat /path/to/filename ) )
</code></pre>

<h1>Attempt2</h1>

<pre><code>index=0
while read line ; do
    MYARRAY[$index]=""$line""
    index=$(($index+1))
done &lt; /path/to/filename
</code></pre>

<p>Both attempt fail, in that they only return a one element array containing the first line of the file. What am I doing wrong?</p>

<p><strong>I am running bash 4.1.5</strong></p>
","<p>Latest revision based on comment from <a href=""https://stackoverflow.com/questions/11393817/bash-read-lines-in-file-into-an-array/11393884?noredirect=1#comment56571512_11393884"">BinaryZebra's comment</a>
and <a href=""https://gist.github.com/nhed/d36ea500986d8fb6211c"" rel=""noreferrer"">tested here</a>.  The addition of <code>command eval</code> allows for the expression to be kept in the present execution environment while the expressions before are only held for the duration of the eval.</p>

<p>Use $IFS that has no spaces\tabs, just newlines/CR</p>

<pre><code>$ IFS=$'\r\n' GLOBIGNORE='*' command eval  'XYZ=($(cat /etc/passwd))'
$ echo ""${XYZ[5]}""
sync:x:5:0:sync:/sbin:/bin/sync
</code></pre>

<p>Also note that you may be setting the array just fine but reading it wrong - be sure to use both double-quotes <code>""""</code> and braces <code>{}</code> as in the example above</p>

<hr>

<p><strong>Edit:</strong></p>

<p>Please note the many warnings about my answer in comments about possible glob expansion, specifically <a href=""https://stackoverflow.com/questions/11393817/bash-read-lines-in-file-into-an-array/11393884?noredirect=1#comment35615660_11393884"">gniourf-gniourf's comments</a> about my prior attempts to work around</p>

<p>With all those warnings in mind I'm still leaving this answer here  (yes, bash 4 has been out for many years but I recall that some macs only 2/3 years old have pre-4 as default shell)</p>

<p><strong>Other notes:</strong></p>

<p>Can also follow drizzt's suggestion below and replace a forked subshell+cat with </p>

<pre><code>$(&lt;/etc/passwd)
</code></pre>

<p>The other option I sometimes use is just set IFS into XIFS, then restore after.  See also <a href=""https://stackoverflow.com/a/11394045/652904"">Sorpigal's answer</a> which does not need to bother with this</p>
","11393884"
"Counter increment in Bash loop not working","236251","","<p>I have the following simple script where I am running a loop and want to maintain a <code>COUNTER</code>. I am unable to figure out why the counter is not updating. Is it due to subshell thats getting created? How can I potentially fix this?</p>

<pre><code>#!/bin/bash

WFY_PATH=/var/log/nginx
WFY_FILE=error.log
COUNTER=0
grep 'GET /log_' $WFY_PATH/$WFY_FILE | grep 'upstream timed out' | awk -F ', ' '{print $2,$4,$0}' | awk '{print ""http://domain.com""$5""&amp;ip=""$2""&amp;date=""$7""&amp;time=""$8""&amp;end=1""}' | awk -F '&amp;end=1' '{print $1""&amp;end=1""}' |
(
while read WFY_URL
do
    echo $WFY_URL #Some more action
    COUNTER=$((COUNTER+1))
done
)

echo $COUNTER # output = 0
</code></pre>
","<p>First, you are not increasing the counter. Changing <code>COUNTER=$((COUNTER))</code> into <code>COUNTER=$((COUNTER + 1))</code> or <code>COUNTER=$[COUNTER + 1]</code> will increase it.</p>

<p>Second, it's trickier to back-propagate subshell variables to the callee as you surmise. Variables in a subshell are not available outside the subshell. These are variables local to the child process.</p>

<p>One way to solve it is using a temp file for storing the intermediate value:</p>

<pre><code>TEMPFILE=/tmp/$$.tmp
echo 0 &gt; $TEMPFILE

# Loop goes here
  # Fetch the value and increase it
  COUNTER=$[$(cat $TEMPFILE) + 1]

  # Store the new value
  echo $COUNTER &gt; $TEMPFILE

# Loop done, script done, delete the file
unlink $TEMPFILE
</code></pre>
","10516135"
"Is there a ""goto"" statement in bash?","235436","","<p>Is there a ""goto"" statement in bash ? I know It is considered bad practice, but I need specifically ""goto"".</p>
","<p>No, there is not; see <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Compound-Commands"" rel=""noreferrer"">&sect;3.2.4 ""Compound Commands"" in the <em>Bash Reference Manual</em></a> for information about the control structures that <em>do</em> exist. In particular, note the mention of <code>break</code> and <code>continue</code>, which aren't as flexible as <code>goto</code>, but are more flexible in Bash than in some languages, and may help you achieve what you want. (Whatever it is that you want . . .)</p>
","9639180"
"bash scripting: if arguments is equal to this string, define a variable like this string","234837","","<p>I am doing some bash script and now I got one variable call <code>source</code> and one array called <code>samples</code>, like this:</p>

<pre><code>source='country'
samples=(US Canada Mexico...)
</code></pre>

<p>as I want to expand the number of sources (and each source has its own samples) I tried to add some arguments to do this. I tried this:</p>

<pre><code>source=""""
samples=("""")
if [ $1=""country"" ]; then
   source=""country""
   samples=""US Canada Mexico...""
else
   echo ""try again""
fi
</code></pre>

<p>but when I ran my script <code>source countries.sh country</code> it didn't work.
What am I doing wrong?</p>
","<p>Don't forget about spaces:</p>

<pre><code>source=""""
samples=("""")
if [ $1 = ""country"" ]; then
   source=""country""
   samples=""US Canada Mexico...""
else
  echo ""try again""
fi
</code></pre>
","9727942"
"How to send email from Terminal?","234538","","<p>I know there are ways to send email from terminal in Linux/MacOS, but I can't seem to find proper documentation on how to do that.</p>

<p>Basically I need it for my bash script that notifies me every time there is a change in a file.</p>
","<p>Go into Terminal and type <code>man mail</code> for help.</p>

<p>You will need to set <code>SMTP</code> up:</p>

<p><a href=""http://hints.macworld.com/article.php?story=20081217161612647"" rel=""noreferrer"">http://hints.macworld.com/article.php?story=20081217161612647</a></p>

<p>See also: </p>

<p><a href=""http://www.mactricksandtips.com/2008/09/send-mail-over-your-network.html"" rel=""noreferrer"">http://www.mactricksandtips.com/2008/09/send-mail-over-your-network.html</a></p>

<p>Eg:</p>

<pre><code>mail -s ""hello"" ""example@example.com"" &lt;&lt;EOF
hello
world
EOF
</code></pre>

<p>This will send an email to <code>example@example.com</code> with the subject <code>hello</code> and the message</p>

<blockquote>
  <p>Hello</p>
  
  <p>World</p>
</blockquote>
","8260923"
"How to use sed/grep to extract text between two words?","234384","","<p>I am trying to output a string that contains everything between two words of a string:</p>

<p>input:</p>

<pre><code>""Here is a String""
</code></pre>

<p>output:</p>

<pre><code>""is a""
</code></pre>

<p>Using: </p>

<pre><code>sed -n '/Here/,/String/p'
</code></pre>

<p>includes the endpoints, but I don't want to include them.</p>
","<pre><code>sed -e 's/Here\(.*\)String/\1/'
</code></pre>
","13242517"
"How can I format my grep output to show line numbers at the end of the line, and also the hit count?","234269","","<p>I'm using grep to match string in a file. Here is an example file:</p>

<pre><code>example one,
example two null,
example three,
example four null,
</code></pre>

<p><code>grep -i null myfile.txt</code> returns </p>

<pre><code>example two null,
example four null,
</code></pre>

<p>How can I return matched lines together with their line numbers like this:</p>

<pre><code>  example two null, - Line number : 2
  example four null, - Line number : 4
  Total null count : 2
</code></pre>

<p>I know -c returns total matched lines, but I don't how to format it properly to add <code>total null count</code> in front, and I don't know how to add the line numbers.</p>

<p>What can I do?</p>
","<p><code>-n</code> returns line number.</p>

<p><code>-i</code> is for ignore-case. Only to be used if case matching is not necessary</p>

<pre><code>$ grep -in null myfile.txt

2:example two null,
4:example four null,
</code></pre>

<p>Combine with <code>awk</code> to print out the line number after the match:</p>

<pre><code>$ grep -in null myfile.txt | awk -F: '{print $2"" - Line number : ""$1}'

example two null, - Line number : 2
example four null, - Line number : 4
</code></pre>

<p>Use command substitution to print out the total null count:</p>

<pre><code>$ echo ""Total null count :"" $(grep -ic null myfile.txt)

Total null count : 2
</code></pre>
","3968142"
"How to split one string into multiple variables in bash shell?","233238","","<p>I've been looking for a solution and found similar questions, only they were attempting to split sentences with spaces between them, and the answers do not work for my situation.
</p>

<p>Currently a variable is being set to something a string like this:<br/>
<code>ABCDE-123456</code><br/>
and I would like to split that into 2 variables, while eliminating the ""<b>-</b>"". i.e.:<br/>
<code>var1=ABCDE</code><br/>
<code>var2=123456</code><br/></p>

<p>
How is it possible to accomplish this?
</p>

<hr>

<p>This is the solution that worked for me:<br/>
<code>var1=$(echo $STR | cut -f1 -d-)</code><br/>
<code>var2=$(echo $STR | cut -f2 -d-)</code><br/></p>

<p>Is it possible to use the <b>cut</b> command that will work without a delimiter (each character gets set as a variable)?</p>

<p><code>var1=$(echo $STR | cut -f1 -d?)</code><br/>
<code>var2=$(echo $STR | cut -f1 -d?)</code><br/>
<code>var3=$(echo $STR | cut -f1 -d?)</code><br/>
<code>etc.</code></p>
","<p><em>If</em> your solution doesn't have to be general, i.e. only needs to work for strings like your example, you could do:</p>

<pre><code>var1=$(echo $STR | cut -f1 -d-)
var2=$(echo $STR | cut -f2 -d-)
</code></pre>

<p>I chose <code>cut</code> here because you could simply extend the code for a few more variables...</p>
","10520697"
"How to return a string value from a Bash function","229196","","<p>I'd like to return a string from a Bash function.</p>

<p>I'll write the example in java to show what I'd like to do:</p>

<pre><code>public String getSomeString() {
  return ""tadaa"";
}

String variable = getSomeString();
</code></pre>

<p>The example below works in bash, but is there a better way to do this?</p>

<pre><code>function getSomeString {
   echo ""tadaa""
}

VARIABLE=$(getSomeString)
</code></pre>
","<p>There is no better way I know of. Bash knows only status codes (integers) and strings written to the stdout.</p>
","3236940"
"How to run .sh on Windows Command Prompt?","229196","","<p>How can I run .sh on Windows 7 Command Prompt? I always get this error when I try to run this line in it,</p>

<pre><code>app/build/build.sh
</code></pre>

<p>error,</p>

<pre><code>'app' is not recognized...
</code></pre>

<p>or,</p>

<pre><code>bash app/build/build.sh
</code></pre>

<p>error,</p>

<pre><code>'bash' is not recognized...
</code></pre>

<p>Any ideas what have I missed? </p>

<p>Here the screen grab,
<img src=""https://i.stack.imgur.com/0mcPj.jpg"" alt=""enter image description here""></p>
","<p>The error message indicates that you have not installed <code>bash</code>, or it is not in your <code>PATH</code>.</p>

<p>The top Google hit is <a href=""http://win-bash.sourceforge.net/"">http://win-bash.sourceforge.net/</a> but you also need to understand that most Bash scripts expect a Unix-like environment; so just installing Bash is probably unlikely to allow you to run a script you found on the net, unless it was specifically designed for this particular usage scenario.  The usual solution to that is <a href=""https://www.cygwin.com/"">https://www.cygwin.com/</a> but there are many possible alternatives, depending on what exactly it is that you want to accomplish.</p>

<p>If Windows is not central to your usage scenario, installing a free OS (perhaps virtualized) might be the simplest way forward.</p>

<p>The second error message is due to the fact that Windows nominally accepts forward slash as a directory separator, but in this context, it is being interpreted as a switch separator.  In other words, Windows parses your command line as <code>app /build /build.sh</code> (or, to paraphrase with Unix option conventions, <code>app --build --build.sh</code>).  You could try <code>app\build\build.sh</code> but it is unlikely to work, because of the circumstances outlined above.</p>
","26523241"
"How do I remove the file suffix and path portion from a path string in Bash?","228607","","<p>Given a string file path such as ""/foo/fizzbuzz.bar"", how would I use bash to extract just the ""fizzbuzz"" portion of said string?</p>
","<p>Here's how to do it with the # and % operators in Bash.</p>

<pre><code>$ x=""/foo/fizzbuzz.bar""
$ y=${x%.bar}
$ echo ${y##*/}
fizzbuzz
</code></pre>

<p><code>${x%.bar}</code> could also be <code>${x%.*}</code> to remove everything after a dot or <code>${x%%.*}</code> to remove everything after the first dot.</p>

<p>Example:</p>

<pre><code>$ x=""/foo/fizzbuzz.bar.quux""
$ y=${x%.*}
$ echo $y
/foo/fizzbuzz.bar
$ y=${x%%.*}
$ echo $y
/foo/fizzbuzz
</code></pre>

<p>Documentation can be found in the <a href=""https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html#Shell-Parameter-Expansion"" rel=""noreferrer"">Bash manual</a>. Look for <code>${parameter%word}</code> and <code>${parameter%%word}</code> trailing portion matching section.</p>
","125340"
"Getting ssh to execute a command in the background on target machine","228291","","<p>This is a follow-on question to the <a href=""https://stackoverflow.com/questions/29061/how-do-you-use-ssh-in-a-shell-script"">How do you use ssh in a shell script?</a> question.  If I want to execute a command on the remote machine that runs in the background on that machine, how do I get the ssh command to return?  When I try to just include the ampersand (&amp;) at the end of the command it just hangs.  The exact form of the command looks like this:</p>

<pre><code>ssh user@target ""cd /some/directory; program-to-execute &amp;""
</code></pre>

<p>Any ideas?  One thing to note is that logins to the the target machine always produce a text banner and I have <strong>SSH</strong> keys set up so no password is required.</p>
","<p>I had this problem in a program I wrote a year ago -- turns out the answer is rather complicated. You'll need to use nohup as well as output redirection, as explained in the wikipedia artcle on <a href=""http://en.wikipedia.org/wiki/Nohup"" rel=""noreferrer"">nohup</a>, copied here for your convenience. </p>

<blockquote>
  <p>Nohuping backgrounded jobs is for
  example useful when logged in via SSH,
  since backgrounded jobs can cause the
  shell to hang on logout due to a race
  condition [2]. This problem can also
  be overcome by redirecting all three
  I/O streams:</p>

<pre><code>nohup myprogram &gt; foo.out 2&gt; foo.err &lt; /dev/null &amp;
</code></pre>
</blockquote>
","29172"
"Check if pull needed in Git","228263","","<p>How do I check whether the remote repository has changed and I need to pull?</p>

<p>Now I use this simple script:</p>

<pre><code>git pull --dry-run | grep -q -v 'Already up-to-date.' &amp;&amp; changed=1
</code></pre>

<p>But it is rather heavy.</p>

<p>Is there a better way? The ideal solution would check all the remote branches, and return names of the changed branches and the number of new commits in each one.</p>
","<p>First use <a href=""https://git-scm.com/docs/git-remote"" rel=""noreferrer""><code>git remote update</code></a>, to bring your remote refs up to date. Then you can do one of several things, such as:</p>

<ol>
<li><p><code>git status -uno</code> will tell you whether the branch you are tracking is ahead, behind or has diverged. If it says nothing, the local and remote are the same.</p></li>
<li><p><code>git show-branch *master</code> will show you the commits in all of the branches whose names end in 'master' (eg <em>master</em> and <em>origin/master</em>).</p></li>
</ol>

<p>If you use <code>-v</code> with <code>git remote update</code> (<code>git remote -v update</code>) you can see which branches got updated, so you don't really need any further commands.</p>

<p>However, it looks like you want to do this in a script or program and end up with a true/false value. If so, there are ways to check the relationship between your current <em>HEAD</em> commit and the head of the branch you're tracking, although since there are four possible outcomes you can't reduce it to a yes/no answer. However, if you're prepared to do a <code>pull --rebase</code> then you can treat ""local is behind"" and ""local has diverged"" as ""need to pull"", and the other two as ""don't need to pull"".</p>

<p>You can get the commit id of any ref using <code>git rev-parse &lt;ref&gt;</code>, so you can do this for <em>master</em> and <em>origin/master</em> and compare them. If they're equal, the branches are the same. If they're unequal, you want to know which is ahead of the other. Using <code>git merge-base master origin/master</code> will tell you the common ancestor of both branches, and if they haven't diverged this will be the same as one or the other. If you get three different ids, the branches have diverged.</p>

<p>To do this properly, eg in a script, you need to be able to refer to the current branch, and the remote branch it's tracking. The bash prompt-setting function in <code>/etc/bash_completion.d</code> has some useful code for getting branch names. However, you probably don't actually need to get the names. Git has some neat shorthands for referring to branches and commits (as documented in <code>git rev-parse --help</code>). In particular, you can use <code>@</code> for the current branch (assuming you're not in a detached-head state) and <code>@{u}</code> for its upstream branch (eg <code>origin/master</code>). So <code>git merge-base @ @{u}</code> will return the (hash of) the commit at which the current branch and its upstream diverge and <code>git rev-parse @</code> and <code>git rev-parse @{u}</code> will give you the hashes of the two tips. This can be summarized in the following script:</p>

<pre><code>#!/bin/sh

UPSTREAM=${1:-'@{u}'}
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse ""$UPSTREAM"")
BASE=$(git merge-base @ ""$UPSTREAM"")

if [ $LOCAL = $REMOTE ]; then
    echo ""Up-to-date""
elif [ $LOCAL = $BASE ]; then
    echo ""Need to pull""
elif [ $REMOTE = $BASE ]; then
    echo ""Need to push""
else
    echo ""Diverged""
fi
</code></pre>

<p><em>Note:</em> older versions of git didn't allow <code>@</code> on its own, so you may have to use <code>@{0}</code> instead.</p>

<p>The line <code>UPSTREAM=${1:-'@{u}'}</code> allows you optionally to pass an upstream branch explicitly, in case you want to check against a different remote branch than the one configured for the current branch. This would typically be of the form <em>remotename/branchname</em>. If no parameter is given, the value defaults to <code>@{u}</code>.</p>

<p>The script assumes that you've done a <code>git fetch</code> or <code>git remote update</code> first, to bring the tracking branches up to date. I didn't build this into the script because it's more flexible to be able to do the fetching and the comparing as separate operations, for example if you want to compare without fetching because you already fetched recently.</p>
","3278427"
"How to obtain the number of CPUs/cores in Linux from the command line?","227459","","<p>I have this script, but I do not know how to get the last element in the printout:</p>

<pre><code>cat /proc/cpuinfo | awk '/^processor/{print $3}'
</code></pre>

<p>The last element should be the number of CPUs, minus 1.</p>
","<pre><code>cat /proc/cpuinfo | awk '/^processor/{print $3}' | tail -1
</code></pre>

<p>or simply</p>

<pre><code>grep -c ^processor /proc/cpuinfo     
</code></pre>

<p>which will count number of lines starting with ""processor"" in <code>/proc/cpuinfo</code></p>
","6481016"
"How to set current working directory to the directory of the script?","226863","","<p>I'm writing a bash script. I need the current working directory to always be the directory that the script is located in.</p>

<p>The default behavior is that the current working directory in the script is that of the shell from which I run it, but I do not want this behavior.</p>
","<pre><code>#!/bin/bash
cd ""$(dirname ""$0"")""
</code></pre>
","3355423"
"Get file directory path from file path","222141","","<p>In Bash, if <code>VAR=""/home/me/mydir/file.c""</code>, how do I get <code>""/home/me/mydir""</code>?</p>
","<p><code>dirname</code> and <code>basename</code> are the tools you're looking for for extracting path components:</p>

<pre><code>$ VAR=/home/me/mydir/file.c

$ DIR=$(dirname ""${VAR}"")

$ echo ""${DIR}""
/home/me/mydir

$ basename ""${VAR}""
file.c
</code></pre>

<p>They're not <em>internal</em> Bash commands but they're part of the POSIX standard (see <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/dirname.html""><code>dirname</code></a>, <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/basename.html""><code>basename</code></a>) and so should be available on the vast majority of systems that will be running Bash.</p>
","6121114"
"With Bash Scripting, how can I suppress all output from a command?","221903","","<p>I have a bash script that runs a program with parameters.  That program outputs some status (doing this, doing that...).  There is no option for this program to be quiet.  How can I prevent the script from displaying anything?</p>

<p>I am looking for something like windows ""echo off"".</p>
","<p>The following sends standard output to the null device (bit bucket).</p>

<pre><code>scriptname &gt;/dev/null
</code></pre>

<p>and if you also want error messages to be sent there, use one of (the first may not work in all shells):</p>

<pre><code>scriptname &amp;&gt;/dev/null
scriptname &gt;/dev/null 2&gt;&amp;1
scriptname &gt;/dev/null 2&gt;/dev/null
</code></pre>

<p>and, if you want to record the messages but not see them, replace <code>/dev/null</code> with an actual file, such as:</p>

<pre><code>scriptname &amp;&gt;scriptname.out
</code></pre>

<p>For completeness, under Windows cmd.exe (where ""nul"" is the equivalent of ""/dev/null""), it is :</p>

<pre><code>scriptname &gt;nul 2&gt;nul
</code></pre>
","617184"
"Print a file skipping first X lines in Bash","220800","","<p>I have a very long file which I want to print but skipping the first 1e6 lines for example. I look into the cat man page but I did not see any option to do this. I am looking for a command to do this or a simple bash program.</p>
","<p>You'll need tail.  </p>

<pre><code>$ tail great-big-file.log
&lt; Last 10 lines of great-big-file.log &gt;
</code></pre>

<p>If you really need to SKIP a particular number of lines, use</p>

<pre><code>$ tail -n +&lt;N+1&gt; &lt;filename&gt;
&lt; filename, excluding first N lines. &gt;
</code></pre>

<p>That is, if you want to skip N lines, you start printing line N+1. Example:</p>

<pre><code>$ tail -n +11 /tmp/myfile
&lt; /tmp/myfile, starting at line 11, or skipping the first 10 lines. &gt;
</code></pre>

<p>If you want to just see the last so many lines, omit the ""+"":</p>

<pre><code>$ tail -n &lt;N&gt; &lt;filename&gt;
&lt; last N lines of file. &gt;
</code></pre>
","604871"
"How do I rename the extension for a batch of files?","220359","","<p>In a directory, I have a bunch of <code>*.html</code> files.</p>

<p>I'd like to rename them all to <code>*.txt</code></p>

<p>I use the bash shell.</p>
","<p>For an better solution (with only bash functionality, as opposed to external calls), see <a href=""https://stackoverflow.com/questions/1224766/bash-rename-files/1225236#1225236"">one of the other answers</a>.</p>

<hr>

<p>The following would do and does not require the system to have the <code>rename</code> program (although you would most often have this on a system):</p>

<pre><code>for file in *.html; do
    mv ""$file"" ""$(basename ""$file"" .html).txt""
done
</code></pre>

<p><em>EDIT:</em> As pointed out in the comments, this does not work for filenames with spaces in them without proper quoting (now added above). When working purely on your own files that you know do not have spaces in the filenames this will work but whenever you write something that may be reused at a later time, do not skip proper quoting. </p>
","1224786"
"How do I prompt a user for confirmation in bash script?","219205","","<p>I want to put a quick ""are you sure?"" prompt for confirmation at the top of a potentially dangerous bash script, what's the easiest/best way to do this?</p>
","<pre><code>read -p ""Are you sure? "" -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
    # do dangerous stuff
fi
</code></pre>

<p><strong>Edit</strong>:</p>

<p>I incorporated <strong>levislevis85</strong>'s suggestion (thanks!) and added the <code>-n</code> option to <code>read</code> to accept one character without the need to press <kbd>Enter</kbd>. You can use one or both of these.</p>

<p>Also, the negated form might look like this:</p>

<pre><code>read -p ""Are you sure? "" -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    [[ ""$0"" = ""$BASH_SOURCE"" ]] &amp;&amp; exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
fi
</code></pre>

<p>However, as pointed out by Erich, under some circumstances such as a syntax error caused by the script being run in the wrong shell, the negated form could allow the script to continue to the ""dangerous stuff"". The failure mode should favor the safest outcome so only the first, non-negated <code>if</code> should be used.</p>
","1885534"
"What are the special dollar sign shell variables?","218808","","<p>In Bash, there appear to be several variables which hold special, consistently-meaning values. For instance,</p>

<pre><code>./myprogram &amp;; echo $!
</code></pre>

<p>will return the PID of the process which backgrounded <code>myprogram</code>. I know of others, such as <code>$?</code> which I think is the current TTY. Are there others?</p>
","<ul>
<li><code>$1</code>, <code>$2</code>, <code>$3</code>, ... are the <a href=""https://www.gnu.org/software/bash/manual/html_node/Positional-Parameters.html"" rel=""noreferrer"">positional parameters</a>.</li>
<li><code>""$@""</code> is an array-like construct of all positional parameters, <code>{$1, $2, $3 ...}</code>.</li>
<li><code>""$*""</code> is the IFS expansion of all positional parameters, <code>$1 $2 $3 ...</code>.</li>
<li><code>$#</code> is the number of positional parameters.</li>
<li><code>$-</code> current options set for the shell.</li>
<li><code>$$</code> pid of the current shell (not subshell).</li>
<li><code>$_</code> most recent parameter (or the abs path of the command to start the current shell immediately after startup).</li>
<li><code>$IFS</code> is the (input) field separator.</li>
<li><code>$?</code> is the most recent foreground pipeline exit status.</li>
<li><code>$!</code> is the PID of the most recent background command.</li>
<li><code>$0</code> is the name of the shell or shell script.</li>
</ul>

<p>Most of the above can be found under <a href=""https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html"" rel=""noreferrer"">Special Parameters</a> in the Bash Reference Manual. There are all the <a href=""https://www.gnu.org/software/bash/manual/html_node/Shell-Variables.html"" rel=""noreferrer"">environment variables set by the shell</a>.</p>

<p>For a comprehensive index, please see the <a href=""https://www.gnu.org/software/bash/manual/html_node/Variable-Index.html"" rel=""noreferrer"">Reference Manual Variable Index</a>.</p>
","5163260"
"How can I write a heredoc to a file in Bash script?","218250","","<p>How can I write a here document to a file in Bash script?</p>
","<p>Read the Advanced Bash-Scripting Guide <a href=""http://tldp.org/LDP/abs/html/here-docs.html"" rel=""noreferrer"">Chapter 19. Here Documents</a>.</p>

<p>Here's an example which will write the contents to a file at <code>/tmp/yourfilehere</code></p>

<pre><code>cat &lt;&lt; EOF &gt; /tmp/yourfilehere
These contents will be written to the file.
        This line is indented.
EOF
</code></pre>

<p>Note that the final 'EOF' (The <code>LimitString</code>) should not have any whitespace in front of the word, because it means that the <code>LimitString</code> will not be recognized.</p>

<p>In a shell script, you may want to use indentation to make the code readable, however this can have the undesirable effect of indenting the text within your here document. In this case, use <code>&lt;&lt;-</code> (followed by a dash) to disable leading tabs (<strong>Note</strong> that to test this you will need to <strong>replace the leading whitespace with a tab character</strong>, since I cannot print actual tab characters here.)</p>

<pre><code>#!/usr/bin/env bash

if true ; then
    cat &lt;&lt;- EOF &gt; /tmp/yourfilehere
    The leading tab is ignored.
    EOF
fi
</code></pre>

<p>If you don't want to interpret variables in the text, then use single quotes:</p>

<pre><code>cat &lt;&lt; 'EOF' &gt; /tmp/yourfilehere
The variable $FOO will not be interpreted.
EOF
</code></pre>

<p>To pipe the heredoc through a command pipeline:</p>

<pre><code>cat &lt;&lt;'EOF' |  sed 's/a/b/'
foo
bar
baz
EOF
</code></pre>

<p>Output:</p>

<pre><code>foo
bbr
bbz
</code></pre>

<p>... or to write the the heredoc to a file using <code>sudo</code>:</p>

<pre><code>cat &lt;&lt;'EOF' |  sed 's/a/b/' | sudo tee /etc/config_file.conf
foo
bar
baz
EOF
</code></pre>
","2954835"
"How to append contents of multiple files into one file","215728","","<p>I want to copy the contents of five files to one file as is. I tried doing it using cp for each file. But that overwrites the contents copied from the previous file. I also tried </p>

<pre><code>paste -d ""\n"" 1.txt 0.txt
</code></pre>

<p>and it did not work.</p>

<p>I want my script to add the newline at the end of each text file.</p>

<p>eg. Files 1.txt, 2.txt, 3.txt. Put contents of 1,2,3 in 0.txt</p>

<p>How do I do it ?</p>
","<p>You need the <code>cat</code> (short for concatenate) command, with shell redirection (<code>&gt;</code>) into your output file </p>

<pre><code>cat 1.txt 2.txt 3.txt &gt; 0.txt
</code></pre>
","18006605"
"how to run script as another user without password","213963","","<p>I have script.sh that must be run as user2.  However, this script can only be run under user1 in my application.</p>

<p>I would like the following command to run:</p>

<pre><code>su user2 -C script.sh
</code></pre>

<p>but be able to run without password.</p>

<p>I also want this to be very restrictive, as in user1 can only run script.sh under user2 and nothing else.</p>

<p>I've tried doing this with sudoers file and just got endlessly confused after hours of trying.</p>

<p>If somebody can provide an explicit example of how this can be accomplished (instead of something generic like use sudoers), it would be greatly appreciated.</p>
","<p>Call <code>visudo</code> and add this:</p>

<pre><code>user1 ALL=(user2) NOPASSWD: /home/user2/bin/test.sh
</code></pre>

<p>The <strong>command paths must be absolute</strong>! Then call <code>sudo -u user2 /home/user2/bin/test.sh</code> from a <code>user1</code> shell. Done.</p>
","6905797"
"Timeout a command in bash without unnecessary delay","213432","","<p><a href=""https://stackoverflow.com/questions/601543#637753"">This answer</a> to <a href=""https://stackoverflow.com/questions/601543"">Command line command to auto-kill a command after a certain amount of time</a> </p>

<p>proposes a 1-line method to timeout a long-running command from the bash command line:</p>

<pre><code>( /path/to/slow command with options ) &amp; sleep 5 ; kill $!
</code></pre>

<p>But it's possible that a given ""long-running"" command may finish earlier than the timeout. (Let's call it a ""typically-long-running-but-sometimes-fast"" command, or <em>tlrbsf</em> for fun.)</p>

<p>So this nifty 1-liner approach has a couple of problems. First, the <code>sleep</code> isn't conditional, so that sets an undesirable lower bound on the time taken for the sequence to finish. Consider 30s or 2m or even 5m for the sleep, when the <em>tlrbsf</em> command finishes in 2 seconds &mdash; highly undesirable. Second, the <code>kill</code> is unconditional, so this sequence will attempt to kill a non-running process and whine about it.</p>

<p>So...</p>

<p><strong>Is there a way</strong> to timeout a typically-long-running-but-sometimes-fast (<em>""tlrbsf""</em>) command that</p>

<ul>
<li>has a bash implementation (the other question already has Perl and C answers)</li>
<li>will terminate at the earlier of the two: <em>tlrbsf</em> program termination, or timeout elapsed</li>
<li>will not kill non-existing/non-running processes (or, optionally: will not <em>complain</em> about a bad kill)</li>
<li>doesn't have to be a 1-liner</li>
<li>can run under Cygwin or Linux</li>
</ul>

<p>... and, for bonus points, runs the <em>tlrbsf</em> command in the foreground and any 'sleep' or extra process in the background, such that the stdin/stdout/stderr of the <em>tlrbsf</em> command can be redirected, same as if it had been run directly?</p>

<p>If so, please share your code. If not, please explain why.</p>

<p>I have spent awhile trying to hack the aforementioned example but I'm hitting the limit of my bash skills.</p>
","<p>I think this is precisely what you are asking for:</p>

<p><a href=""http://www.bashcookbook.com/bashinfo/source/bash-4.0/examples/scripts/timeout3"" rel=""noreferrer"">http://www.bashcookbook.com/bashinfo/source/bash-4.0/examples/scripts/timeout3</a></p>

<pre><code>#!/bin/bash
#
# The Bash shell script executes a command with a time-out.
# Upon time-out expiration SIGTERM (15) is sent to the process. If the signal
# is blocked, then the subsequent SIGKILL (9) terminates it.
#
# Based on the Bash documentation example.

# Hello Chet,
# please find attached a ""little easier""  :-)  to comprehend
# time-out example.  If you find it suitable, feel free to include
# anywhere: the very same logic as in the original examples/scripts, a
# little more transparent implementation to my taste.
#
# Dmitry V Golovashkin &lt;Dmitry.Golovashkin@sas.com&gt;

scriptName=""${0##*/}""

declare -i DEFAULT_TIMEOUT=9
declare -i DEFAULT_INTERVAL=1
declare -i DEFAULT_DELAY=1

# Timeout.
declare -i timeout=DEFAULT_TIMEOUT
# Interval between checks if the process is still alive.
declare -i interval=DEFAULT_INTERVAL
# Delay between posting the SIGTERM signal and destroying the process by SIGKILL.
declare -i delay=DEFAULT_DELAY

function printUsage() {
    cat &lt;&lt;EOF

Synopsis
    $scriptName [-t timeout] [-i interval] [-d delay] command
    Execute a command with a time-out.
    Upon time-out expiration SIGTERM (15) is sent to the process. If SIGTERM
    signal is blocked, then the subsequent SIGKILL (9) terminates it.

    -t timeout
        Number of seconds to wait for command completion.
        Default value: $DEFAULT_TIMEOUT seconds.

    -i interval
        Interval between checks if the process is still alive.
        Positive integer, default value: $DEFAULT_INTERVAL seconds.

    -d delay
        Delay between posting the SIGTERM signal and destroying the
        process by SIGKILL. Default value: $DEFAULT_DELAY seconds.

As of today, Bash does not support floating point arithmetic (sleep does),
therefore all delay/time values must be integers.
EOF
}

# Options.
while getopts "":t:i:d:"" option; do
    case ""$option"" in
        t) timeout=$OPTARG ;;
        i) interval=$OPTARG ;;
        d) delay=$OPTARG ;;
        *) printUsage; exit 1 ;;
    esac
done
shift $((OPTIND - 1))

# $# should be at least 1 (the command to execute), however it may be strictly
# greater than 1 if the command itself has options.
if (($# == 0 || interval &lt;= 0)); then
    printUsage
    exit 1
fi

# kill -0 pid   Exit code indicates if a signal may be sent to $pid process.
(
    ((t = timeout))

    while ((t &gt; 0)); do
        sleep $interval
        kill -0 $$ || exit 0
        ((t -= interval))
    done

    # Be nice, post SIGTERM first.
    # The 'exit 0' below will be executed if any preceeding command fails.
    kill -s SIGTERM $$ &amp;&amp; kill -0 $$ || exit 0
    sleep $delay
    kill -s SIGKILL $$
) 2&gt; /dev/null &amp;

exec ""$@""
</code></pre>
","687994"
"Linux/Unix command to determine if process is running?","211572","","<p>I need a platform independent (Linux/Unix|OSX) shell/bash command that will determine if a specific process is running. e.g. <code>mysqld</code>, <code>httpd</code>...
What is the simplest way/command to do this?</p>
","<p>While <code>pidof</code> and <code>pgrep</code> are great tools for determining what's running, they are both, unfortunately, unavailable on some operating systems. A definite fail safe would be to use the following: <code>ps cax | grep command</code></p>

<p><strong>The output on Gentoo Linux:</strong></p>

<pre>
14484 ?        S      0:00 apache2
14667 ?        S      0:00 apache2
19620 ?        Sl     0:00 apache2
21132 ?        Ss     0:04 apache2
</pre>

<p><strong>The output on OS X:</strong></p>

<pre>
42582   ??  Z      0:00.00 (smbclient)
46529   ??  Z      0:00.00 (smbclient)
46539   ??  Z      0:00.00 (smbclient)
46547   ??  Z      0:00.00 (smbclient)
46586   ??  Z      0:00.00 (smbclient)
46594   ??  Z      0:00.00 (smbclient)
</pre>

<p><strong>On both Linux and OS X, grep returns an exit code so it's easy to check if the process was found or not:</strong></p>

<pre><code>#!/bin/bash
ps cax | grep httpd &gt; /dev/null
if [ $? -eq 0 ]; then
  echo ""Process is running.""
else
  echo ""Process is not running.""
fi
</code></pre>

<hr>

<p><strong>Furthermore, if you would like the list of PIDs, you could easily grep for those as well:</strong></p>

<pre>ps cax | grep httpd | grep -o '^[ ]*[0-9]*'</pre>

<p><strong>Whose output is the same on Linux and OS X:</strong></p>

<pre>3519 3521 3523 3524</pre>

<p><strong>The output of the following is an empty string, making this approach safe for processes that are not running:</strong> <pre>echo <code>ps cax | grep aasdfasdf | grep -o '^[ ]*[0-9]*'</code></pre></p>

<p>This approach is suitable for writing a simple empty string test, then even iterating through the discovered PIDs.</p>

<pre><code>#!/bin/bash
PROCESS=$1
PIDS=`ps cax | grep $PROCESS | grep -o '^[ ]*[0-9]*'`
if [ -z ""$PIDS"" ]; then
  echo ""Process not running."" 1&gt;&amp;2
  exit 1
else
  for PID in $PIDS; do
    echo $PID
  done
fi
</code></pre>

<p>You can test it by saving it to a file (named ""running"") with execute permissions (chmod +x running) and executing it with a parameter: <code>./running ""httpd""</code></p>

<pre><code>#!/bin/bash
ps cax | grep httpd
if [ $? -eq 0 ]; then
  echo ""Process is running.""
else
  echo ""Process is not running.""
fi
</code></pre>

<hr>

<p><strong>WARNING!!!</strong></p>

<p>Please keep in mind that you're simply parsing the output of <code>ps ax</code> which means that, as seen in the Linux output, it is not simply matching on processes, but also the arguments passed to that program. I highly recommend being as specific as possible when using this method (e.g. <code>./running ""mysql""</code> will also match 'mysqld' processes). I highly recommend using <code>which</code> to check against a full path where possible.</p>

<hr>

<p><strong>References:</strong></p>

<p><a href=""http://linux.about.com/od/commands/l/blcmdl1_ps.htm"">http://linux.about.com/od/commands/l/blcmdl1_ps.htm</a></p>

<p><a href=""http://linux.about.com/od/commands/l/blcmdl1_grep.htm"">http://linux.about.com/od/commands/l/blcmdl1_grep.htm</a></p>
","9118509"
"Select unique or distinct values from a list in UNIX shell script","211222","","<p>I have a ksh script that returns a long list of values, newline separated, and I want to see only the unique/distinct values. It is possible to do this?</p>

<p>For example, say my output is file suffixes in a directory:</p>

<blockquote>
<pre><code>tar
gz
java
gz
java
tar
class
class
</code></pre>
</blockquote>

<p>I want to see a list like:</p>

<blockquote>
<pre><code>tar
gz
java
class
</code></pre>
</blockquote>
","<p>You might want to look at the <code>uniq</code> and <code>sort</code> applications.</p>

<pre>
./yourscript.ksh | sort | uniq
</pre>

<p>(FYI, yes, the sort is necessary in this command line, <code>uniq</code> only strips duplicate lines that are immediately after each other)</p>

<p><strong>EDIT:</strong></p>

<p>Contrary to what has been posted by <a href=""https://stackoverflow.com/questions/618378/select-unique-or-distinct-values-from-a-list-in-unix-shell-script/618382#618382"">Aaron Digulla</a> in relation to <code>uniq</code>'s commandline options:</p>

<p>Given the following input:</p>

<pre>
class
jar
jar
jar
bin
bin
java
</pre>

<p><code>uniq</code> will output all lines exactly once:</p>

<pre>
class
jar
bin
java
</pre>

<p><code>uniq -d</code> will output all lines that appear more than once, and it will print them once:</p>

<pre>
jar
bin
</pre>

<p><code>uniq -u</code> will output all lines that appear exactly once, and it will print them once:</p>

<pre>
class
java
</pre>
","618381"
"What is the preferred Bash shebang?","210449","","<p>Is there any <code>Bash</code> shebang objectively better than the others for most uses?</p>

<ul>
<li><code>#!/usr/bin/env bash</code></li>
<li><code>#!/bin/bash</code></li>
<li><code>#!/bin/sh</code></li>
<li><code>#!/bin/sh -</code></li>
<li>etc</li>
</ul>

<p>I vaguely recall a long time ago hearing that adding a dash to the end prevents someone passing a command to your script, but can’t find any details on that.</p>
","<p>You should use <strong><code>#!/usr/bin/env bash</code></strong> for <a href=""https://en.wikipedia.org/wiki/Shebang_%28Unix%29#Portability"">portability</a>: different *nixes put <code>bash</code> in different places, and using <code>/usr/bin/env</code> is a workaround to run the first <code>bash</code> found on the <code>PATH</code>. And <strong><a href=""http://mywiki.wooledge.org/BashGuide/CommandsAndArguments#Scripts""><code>sh</code> is not <code>bash</code></a></strong>.</p>
","10383546"
"What is the cleanest way to ssh and run multiple commands in Bash?","209305","","<p>I already have an ssh agent set up, and I can run commands on an external server in Bash script doing stuff like:</p>

<pre><code>ssh blah_server ""ls; pwd;""
</code></pre>

<p>Now, what I'd really like to do is run a lot of long commands on an external server. Enclosing all of these in between quotation marks would be quite ugly, and I'd really rather avoid ssh'ing multiple times just to avoid this. </p>

<p>So, is there a way I can do this in one go enclosed in parentheses or something? I'm looking for something along the lines of:</p>

<pre><code>ssh blah_server (
   ls some_folder;
   ./someaction.sh;
   pwd;
)
</code></pre>

<p>Basically, I'll be happy with any solution as long as it's clean.</p>

<h3>Edit</h3>

<p>To clarify, I'm talking about this being part of a larger bash script. Other people might need to deal with the script down the line, so I'd like to keep it clean. I don't want to have a bash script with one line that looks like:</p>

<pre><code>ssh blah_server ""ls some_folder; ./someaction.sh 'some params'; pwd; ./some_other_action 'other params';""
</code></pre>

<p>because it is extremely ugly and difficult to read.</p>
","<p>How about a Bash <a href=""http://www.tldp.org/LDP/abs/html/here-docs.html"" rel=""noreferrer"">Here Document</a>:</p>

<pre><code>ssh otherhost &lt;&lt; EOF
  ls some_folder; 
  ./someaction.sh 'some params'
  pwd
  ./some_other_action 'other params'
EOF
</code></pre>

<p>To avoid the problems mentioned by @Globalz in the comments, you may be able to (depending what you're doing on the remote site) get away with replacing the first line with</p>

<pre><code>ssh otherhost /bin/bash &lt;&lt; EOF
</code></pre>

<p>Note that you can do variable substitution in the Here document, but you may have to deal with quoting issues. For instance, if you quote the ""limit string"" (ie. <code>EOF</code> in the above), then you can't do variable substitutions. But without quoting the limit string, variables are substituted. For example, if you have defined <code>$NAME</code> above in your shell script, you could do</p>

<pre><code>ssh otherhost /bin/bash &lt;&lt; EOF
touch ""/tmp/${NAME}""
EOF
</code></pre>

<p>and it would create a file on the destination <code>otherhost</code> with the name of whatever you'd assigned to <code>$NAME</code>. Other rules about shell script quoting also apply, but are too complicated to go into here.</p>
","4412338"
"Repeat command automatically in Linux","208883","","<p>Is it possible in linux command line to have a command repeat every n seconds.</p>

<p>For example, say I have an import running and i am doing</p>

<pre><code>ls -l
</code></pre>

<p>to check the file size is increasing.  I would like to have a command to have this automatically repeat.</p>
","<p>Watch every 5 seconds ...</p>

<p><code>watch -n 5 ls -l</code></p>

<p>If you wish to have visual confirmation of changes, append <code>--differences</code> prior to the <code>ls</code> command.</p>

<p>According to the OSX man page, there's also</p>

<blockquote>
  <p>The --cumulative option makes highlighting ""sticky"", presenting a
  running display of  all  positions  that  have  ever changed.  The -t
  or --no-title option turns off the header showing the interval,
  command, and current time at the top of the display, as well as the
  following blank line.</p>
</blockquote>

<p>Linux/Unix man page can be found <a href=""http://linux.die.net/man/1/watch"" rel=""noreferrer"">here</a> </p>
","13593790"
"How to add a progress bar to a shell script?","207962","","<p>When scripting in bash or any other shell in *NIX, while running a command that will take more than a few seconds, a progress bar is needed.</p>

<p>For example, copying a big file, opening a big tar file.</p>

<p>What ways do you recommend to add progress bars to shell scripts?</p>
","<p>You can implement this by overwriting a line.  Use <code>\r</code> to go back to the beginning of the line without writing <code>\n</code> to the terminal.</p>

<p>Write <code>\n</code> when you're done to advance the line.</p>

<p>Use <code>echo -ne</code> to:</p>

<ol>
<li>not print <code>\n</code> and</li>
<li>to recognize escape sequences like <code>\r</code>.</li>
</ol>

<p>Here's a demo:</p>

<pre><code>echo -ne '#####                     (33%)\r'
sleep 1
echo -ne '#############             (66%)\r'
sleep 1
echo -ne '#######################   (100%)\r'
echo -ne '\n'
</code></pre>
","238094"
"Count number of lines in a git repository","206637","","<p>How would I count the total number of lines present in all the files in a git repository?</p>

<p><code>git ls-files</code> gives me a list of files tracked by git.</p>

<p>I'm looking for a command to <code>cat</code> all those files. Something like</p>

<pre><code>git ls-files | [cat all these files] | wc -l
</code></pre>
","<p><code>xargs</code> will do what you want:</p>

<pre><code>git ls-files | xargs cat | wc -l
</code></pre>

<p>But with more information and probably better, you can do:</p>

<pre><code>git ls-files | xargs wc -l
</code></pre>
","4822516"
"How do I remove all .pyc files from a project?","205454","","<p>I've renamed some files in a fairly large project and want to remove the .pyc files they've left behind. I tried the bash script:</p>

<pre><code> rm -r *.pyc
</code></pre>

<p>But that doesn't recurse through the folders as I thought it would. What am I doing wrong?</p>
","<pre><code>find . -name ""*.pyc"" -exec rm -f {} \;
</code></pre>

<p>as mentioned in the comments, you can also use the <code>-delete</code> action</p>

<pre><code>find . -name \*.pyc -delete
</code></pre>
","785534"
"How to limit depth for recursive file list?","204999","","<p>Is there a way to limit the depth of a recursive file listing in linux?</p>

<p>The command I'm using at the moment is:</p>

<pre><code>ls -laR &gt; dirlist.txt
</code></pre>

<p>But I've got about 200 directories and each of them have 10's of directories. So it's just going to take far too long and hog too many system resources.</p>

<p>All I'm really interested in is the ownership and permissions information for the first level subdirectories:</p>

<pre><code>drwxr-xr-x 14 root   root  1234 Dec 22 13:19 /var/www/vhosts/domain1.co.uk  
drwxr--r-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain1.co.uk/htdocs  
drwxr--r-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain1.co.uk/cgi-bin  
drwxr-xr-x 14 root   root  1234 Dec 22 13:19 /var/www/vhosts/domain2.co.uk  
drwxr-xrwx 14 proftp root  1234 Dec 22 13:19 /var/www/vhosts/domain2.co.uk/htdocs  
drwxr-xrwx 14 proftp root  1234 Dec 22 13:19 /var/www/vhosts/domain2.co.uk/cgi-bin  
drwxr-xr-x 14 root   root  1234 Dec 22 13:19 /var/www/vhosts/domain3.co.uk  
drwxr-xr-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain3.co.uk/htdocs  
drwxr-xr-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain3.co.uk/cgi-bin  
drwxr-xr-x 14 root   root  1234 Dec 22 13:19 /var/www/vhosts/domain4.co.uk  
drwxr-xr-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain4.co.uk/htdocs
drwxr-xr-- 14 jon    root  1234 Dec 22 13:19 /var/www/vhosts/domain4.co.uk/cgi-bin
</code></pre>

<p><b>EDIT:</b></p>

<p>Final choice of command:</p>

<pre><code>find -maxdepth 2 -type d -ls &gt;dirlist
</code></pre>
","<p>Checkout the <code>-maxdepth</code> flag of <code>find</code></p>

<pre><code>find . -maxdepth 1 -type d -exec ls -ld ""{}"" \;
</code></pre>

<p>Here I used 1 as max level depth, <code>-type d</code> means find only directories, which then <code>ls -ld</code> lists contents of, in long format.</p>
","4509648"
"Generating random number between 1 and 10 in Bash Shell Script","204900","","<p>How would I generate an inclusive random number between  1 to 10 in Bash Shell Script?</p>

<p>Would it be <code>$(RANDOM 1+10)</code>?</p>
","<pre><code>$(( ( RANDOM % 10 )  + 1 ))
</code></pre>

<p><strong>EDIT.</strong> Changed brackets into parenthesis according to the comment.
<a href=""http://web.archive.org/web/20150206070451/http://islandlinux.org/howto/generate-random-numbers-bash-scripting"">http://web.archive.org/web/20150206070451/http://islandlinux.org/howto/generate-random-numbers-bash-scripting</a></p>
","8988890"
"Bash foreach loop","204686","","<p>I have an input (let's say a file).
On each line there is a file name.
How can I read this file and display the content for each one.</p>
","<p>Something like this would do:</p>

<pre><code>xargs cat &lt;filenames.txt
</code></pre>

<p>The <code>xargs</code> program reads its standard input, and for each line of input runs the <code>cat</code> program with the input lines as argument(s).</p>

<p>If you really want to do this in a loop, you can:</p>

<pre><code>for fn in `cat filenames.txt`; do
    echo ""the next file is $fn""
    cat $fn
done
</code></pre>
","4162829"
"Remove the last line from a file in Bash","204655","","<p>I have a file, <code>foo.txt</code>, containing the following lines:</p>

<pre><code>a
b
c
</code></pre>

<p>I want a simple command that results in the contents of <code>foo.txt</code> being:</p>

<pre><code>a
b
</code></pre>
","<p>Using <a href=""http://www.gnu.org/software/sed/"" rel=""noreferrer""><code>GNU sed</code></a>:</p>

<pre><code>sed -i '$ d' foo.txt
</code></pre>

<p>The <code>-i</code> option does not exist in <code>GNU sed</code> versions older than 3.95, so you have to use it as a filter with a temporary file:</p>

<pre><code>cp foo.txt foo.txt.tmp
sed '$ d' foo.txt.tmp &gt; foo.txt
rm -f foo.txt.tmp
</code></pre>

<p>Of course, in that case you could also use <code>head -n -1</code> instead of <code>sed</code>.</p>
","4881990"
"use space as a delimiter with cut command","203426","","<p>I want to use space as a delimiter with the <code>cut</code> command.</p>

<p>What syntax can I use for this?</p>
","<pre><code>cut -d ' ' -f 2
</code></pre>

<p>Where 2 is the field number of the space-delimited field you want.</p>
","816824"
"How to urlencode data for curl command?","202947","","<p>I am trying to write a bash script for testing that takes a parameter and sends it through curl to web site.  I need to url encode the value to make sure that special characters are processed properly.  What is the best way to do this?  </p>

<p>Here is my basic script so far:</p>

<pre><code>#!/bin/bash
host=${1:?'bad host'}
value=$2
shift
shift
curl -v -d ""param=${value}"" http://${host}/somepath $@
</code></pre>
","<p>Use <code>curl --data-urlencode</code>; from <code>man curl</code>:</p>

<blockquote>
  <p>This posts data, similar to the other <code>--data</code> options with the exception that this performs URL-encoding. To be CGI-compliant, the <code>&lt;data&gt;</code> part should begin with a name followed by a separator and a content specification.</p>
</blockquote>

<p>Example usage:</p>

<pre><code>curl \
    --data-urlencode ""paramName=value"" \
    --data-urlencode ""secondParam=value"" \
    http://example.com
</code></pre>

<p>See <a href=""https://curl.haxx.se/docs/manpage.html#--data-urlencode"" rel=""noreferrer"">the man page</a> for more info.</p>

<p>This requires <a href=""https://curl.haxx.se/changes.html#7_18_0"" rel=""noreferrer"">curl 7.18.0 or newer (released January 2008)</a>. Use  <code>curl -V</code> to check which version you have.</p>
","2027690"
"Bash script always prints ""Command Not Found""","200802","","<p>Every time I run a script using <code>bash scriptname.sh</code> from the command line in Debian, I get <code>Command Not found</code> and then the result of the script. So the script works but there is always a <code>Command Not Found</code> statement printed on screen.</p>

<p>I am running the script from the <code>/var</code> folder.</p>

<p>Here is the script:</p>

<pre><code>#!/bin/bash

echo Hello World
</code></pre>

<p>I run it by typing the following:</p>

<pre><code>bash testscript.sh
</code></pre>

<p>UPDATE - the problem appears to the blank lines.  Each blank line is resulting in a command not found.  Why would this occur?</p>
","<p>Make sure your first line is:</p>

<pre><code>#!/bin/bash
</code></pre>

<p>Enter your path to bash if it is not <code>/bin/bash</code></p>

<hr>

<p>Try running:</p>

<pre><code>dos2unix script.sh
</code></pre>

<p>That wil convert line endings, etc from Windows to unix format.  i.e. it strips \r (CR) from line endings to change them from <code>\r\n (CR+LF)</code> to <code>\n (LF)</code>.</p>

<p><a href=""http://linux.die.net/man/1/dos2unix"">More details about the <code>dos2unix</code> command (man page)</a></p>

<hr>

<p>Another way to tell if your file is in dos/Win format:</p>

<pre><code>cat scriptname.sh | sed 's/\r/&lt;CR&gt;/'
</code></pre>

<p>The output will look something like this:</p>

<pre><code>#!/bin/sh&lt;CR&gt;
&lt;CR&gt;
echo Hello World&lt;CR&gt;
&lt;CR&gt;
</code></pre>

<p>This will output the entire file text with <code>&lt;CR&gt;</code> displayed for each <code>\r</code> character in the file.</p>

<hr>

<p><em>P.S. Sorry for the poor formatting, this was written from my iPhone while driving to work :p.</em></p>
","7362598"
"Subtract two variables in Bash","200771","","<p>I have the script below to subtract the counts of files between two directories but the <code>COUNT=</code> expression does not work. What is the correct syntax?</p>

<pre><code>#!/usr/bin/env bash

FIRSTV=`ls -1 | wc -l`
cd ..
SECONDV=`ls -1 | wc -l`
COUNT=expr $FIRSTV-$SECONDV  ## -&gt; gives 'command not found' error
echo $COUNT
</code></pre>
","<p>You just need a little extra whitespace around the minus sign, and backticks:</p>

<pre><code>COUNT=`expr $FIRSTV - $SECONDV`
</code></pre>
","8386731"
"How to create a CPU spike with a bash command","200206","","<p>I want to create a near 100% load on a Linux machine.  It's quad core system and I want all cores going full speed.  Ideally, the CPU load would last a designated amount of time and then stop.  I'm hoping there's some trick in bash.  I'm thinking some sort of infinite loop. </p>
","<p>You can also do</p>

<pre><code>dd if=/dev/zero of=/dev/null
</code></pre>

<p>To run more of those to put load on more cores, try to fork it: </p>

<pre><code>fulload() { dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null &amp; }; fulload; read; killall dd
</code></pre>

<p>Repeat the command in the curly brackets as many times as the number of threads you want to produce (here 4 threads). 
Simple enter hit will stop it (just make sure no other dd is running on this user or you kill it too). </p>
","2927364"
"How to 'grep' a continuous stream?","199513","","<p>Is that possible to use <code>grep</code> on a continuous stream?</p>

<p>What I mean is sort of a <code>tail -f &lt;file&gt;</code> command, but with <code>grep</code> on the output in order to keep only the lines that interest me.</p>

<p>I've tried <code>tail -f &lt;file&gt; | grep pattern</code> but it seems that <code>grep</code> can only be executed once <code>tail</code> finishes, that is to say never.</p>
","<p>Turn on <code>grep</code>'s line buffering mode.</p>

<pre><code>tail -f file | grep --line-buffered my_pattern
</code></pre>
","7162898"
"How to assign the output of a Bash command to a variable?","198988","","<p>I have a problem putting the content of <code>pwd</code> command into a shell variable that I'll use later. </p>

<p>Here is my shell code (the loop doesn't stop):</p>

<pre><code>#!/bin/bash
pwd= `pwd`
until [ $pwd = ""/"" ]
    do
        echo $pwd
        ls &amp;&amp; cd .. &amp;&amp; ls 
        $pwd= `pwd` 
    done
</code></pre>

<p>Could you spot my mistake, please?</p>
","<p>Try:</p>

<pre><code>pwd=`pwd`
</code></pre>

<p>or</p>

<pre><code>pwd=$(pwd)
</code></pre>

<p>Notice no spaces after the equals sign.</p>

<p>Also as Mr. Weiss points out; you don't assign to <code>$pwd</code>, you assign to <code>pwd</code>.</p>
","2314765"
"Delete terminal history in Linux","198788","","<p>When you use the up key in a Linux terminal, you can use previous commands again. Great feature. However, I started logging mysql into mysql with the sensitive details in the command.</p>

<p>How can I delete that history?</p>
","<p>You can clear your bash history like this:</p>

<p><code>history -cw</code></p>
","6709403"
"How to delete multiple files at once in Bash on Linux?","197618","","<p>I have this list of files inside Linux server:</p>

<pre><code>abc.log.2012-03-14
abc.log.2012-03-27
abc.log.2012-03-28
abc.log.2012-03-29
abc.log.2012-03-30
abc.log.2012-04-02
abc.log.2012-04-04
abc.log.2012-04-05
abc.log.2012-04-09
abc.log.2012-04-10
</code></pre>

<p>I've been deleting selected log files one by one, using the command <code>rm -rf</code> see below:</p>

<pre><code>rm -rf abc.log.2012-03-14 
rm -rf abc.log.2012-03-27
rm -rf abc.log.2012-03-28
</code></pre>

<p>Is there another way, so that I can delete the selected files at once??</p>
","<p>Bash supports all sorts of wildcards and expansions.</p>

<p>Your exact case would be handled by <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion"" rel=""noreferrer"">brace expansion</a>, like so:</p>

<pre><code>$ rm -rf abc.log.2012-03-{14,27,28}
</code></pre>

<p>The above would <em>expand to</em> a single command with all three arguments, and be equivalent to typing:</p>

<pre><code>$ rm -rf abc.log.2012-03-14 abc.log.2012-03-27 abc.log.2012-03-28
</code></pre>

<p>It's important to note that this expansion is done by the shell, before <code>rm</code> is even loaded.</p>
","10516446"
"Escape a string for a sed replace pattern","196609","","<p>In my bash script I have an external (received from user) string, which I should use in sed pattern.</p>

<pre><code>REPLACE=""&lt;funny characters here&gt;""
sed ""s/KEYWORD/$REPLACE/g""
</code></pre>

<p>How can I escape the <code>$REPLACE</code> string so it would be safely accepted by <code>sed</code> as a literal replacement?</p>

<p><strong>NOTE:</strong> The <code>KEYWORD</code> is a dumb substring with no matches etc. It is not supplied by user.</p>
","<p><strong>Warning</strong>: This does <em>not</em> consider newlines. For a more in-depth answer, see <a href=""https://stackoverflow.com/questions/29613304/is-it-possible-to-escape-regex-metacharacters-reliably-with-sed"" title=""Is it possible to escape regex metacharacters reliably with sed"">this SO-question</a> instead. (Thanks, Ed Morton &amp; Niklas Peter)</p>

<p>Note that escaping everything is a bad idea. Sed needs many characters to be escaped to <em>get</em> their special meaning. For example, if you escape a digit in the replacement string, it will turn in to a backreference.</p>

<p>As Ben Blank said, there are only three characters that need to be escaped in the replacement string (escapes themselves, forward slash for end of statement and &amp; for replace all):</p>

<pre><code>sed -e 's/[\/&]/\\&/g'</code></pre>

<p>If you ever need to escape the <code>KEYWORD</code> string, the following is the one you need:</p>

<pre><code>sed -e 's/[]\/$*.^[]/\\&/g'</code></pre>

<p>Remember, if you use a character other than <code>/</code> as delimiter, you need replace the slash in the expressions above wih the character you are using. See PeterJCLaw's comment for explanation.</p>

<p><em>Edited:</em> Due to some corner cases previously not accounted for, the commands above have changed several times. Check the edit history for details.</p>
","2705678"
"Multi-line string with extra space (preserved indentation)","196420","","<p>I want to write some pre-defined texts to a file with the following:</p>

<pre><code>text=""this is line one\n
this is line two\n
this is line three""

echo -e $text &gt; filename
</code></pre>

<p>I'm expecting something like this:</p>

<pre><code>this is line one
this is line two
this is line three
</code></pre>

<p>But got this:</p>

<pre><code>this is line one
 this is line two
 this is line three
</code></pre>

<p>I'm positive that there is no space after each <code>\n</code>, but how does the extra space come out?</p>
","<p>Heredoc sounds more convenient for this purpose. It is used to send multiple commands to a command interpreter program like <em>ex</em> or <em>cat</em></p>

<pre><code>cat &lt;&lt; EndOfMessage
This is line 1.
This is line 2.
Line 3.
EndOfMessage
</code></pre>

<p>The string after '&lt;&lt;' indicates where to stop.</p>

<p>To send these lines to a file, use:</p>

<pre><code>cat &gt; $FILE &lt;&lt;- EOM
Line 1.
Line 2.
EOM
</code></pre>

<p>You could also store these lines to a variable:</p>

<pre><code>read -r -d '' VAR &lt;&lt; EOM
This is line 1.
This is line 2.
Line 3.
EOM
</code></pre>

<p>This stores the lines to the variable named <code>VAR</code>.</p>

<p>When printing, remember the quotes around the variable otherwise you won't see the newline characters.</p>

<pre><code>echo ""$VAR""
</code></pre>

<p>Even better, you can use indentation to make it stand out more in your code. This time just add a '-' after '&lt;&lt;' to stop the tabs from appearing.</p>

<pre><code>read -r -d '' VAR &lt;&lt;- EOM
    This is line 1.
    This is line 2.
    Line 3.
EOM
</code></pre>

<p>But then you must use tabs, not spaces, for indentation in your code.</p>
","23930212"
"How to get a password from a shell script without echoing","195714","","<p>I have a script that automates a process that needs access to a password protected system. The system is accessed via a command-line program that accepts the user password as an argument.</p>

<p>I would like to prompt the user to type in their password, assign it to a shell variable, and then use that variable to construct the command line of the accessing program (which will of course produce stream output that I will process).  </p>

<p>I am a reasonably competent shell programmer in Bourne/Bash, but I don't know how to accept the user input without having it echo to the terminal (or maybe having it echoed using '*' characters).  </p>

<p>Can anyone help with this?</p>
","<p>Here is another way to do it:</p>

<pre><code>#!/bin/bash
# Read Password
echo -n Password: 
read -s password
echo
# Run Command
echo $password
</code></pre>

<p>The <code>read -s</code> will turn off echo for you. Just replace the <code>echo</code> on the last line with the command you want to run.</p>
","3980904"
"Linux command to get time in milliseconds","195553","","<p>Is there shell command in Linux to get the time in milliseconds?</p>
","<p><code>date +%s</code> returns the number of seconds since the epoch.</p>

<p><code>date +%s%N</code> returns the number of seconds + current nanoseconds.</p>

<p>Therefore, <code>echo $(($(date +%s%N)/1000000))</code> is what you need</p>
","16548827"
"Bash script - if, elif, else statement issues","195152","","<p>I can't seem to work out what the issue with the following <code>if</code> statement is in regards to the <code>elif</code> and <code>then</code>. Keep in mind the <code>printf</code> is still under development I just haven't been able to test it yet in the statement so is more than likely wrong.</p>

<p>The error I'm getting is:</p>

<pre><code>./timezone_string.sh: line 14: syntax error near unexpected token `then'
./timezone_string.sh: line 14: `then'
</code></pre>

<p>And the statement is like so.</p>

<pre><code>if [ ""$seconds"" -eq 0 ];then
   $timezone_string=""Z""
elif[ ""$seconds"" -gt 0 ]
then
   $timezone_string=`printf ""%02d:%02d"" $seconds/3600 ($seconds/60)%60`
else
   echo ""Unknown parameter""
fi
</code></pre>
","<p>There is an space missing between <code>elif</code> and <code>[</code>:</p>

<pre><code>elif[ ""$seconds"" -gt 0 ]
</code></pre>

<p>should be</p>

<pre><code>elif [ ""$seconds"" -gt 0 ]
</code></pre>

<hr>

<p>As I see this question is getting a lot of views, it is important to indicate that the syntax to follow is:</p>

<pre class=""lang-bash prettyprint-override""><code>if [ conditions ]
# ^ ^          ^
</code></pre>

<p>meaning that <strong>spaces are needed around the brackets</strong>.Otherwise, it won't work. This is because <code>[</code> itself <em>is</em> a command.</p>
","16034814"
"Run a string as a command within a Bash script","194929","","<p>I have a Bash script that builds a string to run as a command</p>

<p><strong>Script:</strong></p>

<pre><code>#! /bin/bash

matchdir=""/home/joao/robocup/runner_workdir/matches/testmatch/""

teamAComm=""`pwd`/a.sh""
teamBComm=""`pwd`/b.sh""
include=""`pwd`/server_official.conf""
serverbin='/usr/local/bin/rcssserver'

cd $matchdir
illcommando=""$serverbin include='$include' server::team_l_start = '${teamAComm}' server::team_r_start = '${teamBComm}' CSVSaver::save='true' CSVSaver::filename = 'out.csv'""

echo ""running: $illcommando""
# $illcommando &gt; server-output.log 2&gt; server-error.log
$illcommando
</code></pre>

<p>which does not seem to supply the arguments correctly to the <code>$serverbin</code>.</p>

<p><strong>Script output:</strong></p>

<pre><code>running: /usr/local/bin/rcssserver include='/home/joao/robocup/runner_workdir/server_official.conf' server::team_l_start = '/home/joao/robocup/runner_workdir/a.sh' server::team_r_start = '/home/joao/robocup/runner_workdir/b.sh' CSVSaver::save='true' CSVSaver::filename = 'out.csv'
rcssserver-14.0.1

Copyright (C) 1995, 1996, 1997, 1998, 1999 Electrotechnical Laboratory.
2000 - 2009 RoboCup Soccer Simulator Maintenance Group.


Usage: /usr/local/bin/rcssserver [[-[-]]namespace::option=value]
                                 [[-[-]][namespace::]help]
                                 [[-[-]]include=file]
Options:
    help
        display generic help

    include=file
        parse the specified configuration file.  Configuration files
        have the same format as the command line options. The
        configuration file specified will be parsed before all
        subsequent options.

    server::help
        display detailed help for the ""server"" module

    player::help
        display detailed help for the ""player"" module

    CSVSaver::help
        display detailed help for the ""CSVSaver"" module

CSVSaver Options:
    CSVSaver::save=&lt;on|off|true|false|1|0|&gt;
        If save is on/true, then the saver will attempt to save the
        results to the database.  Otherwise it will do nothing.

        current value: false

    CSVSaver::filename='&lt;STRING&gt;'
        The file to save the results to.  If this file does not
        exist it will be created.  If the file does exist, the results
        will be appended to the end.

        current value: 'out.csv'
</code></pre>

<p>if I just paste the command <code>/usr/local/bin/rcssserver include='/home/joao/robocup/runner_workdir/server_official.conf' server::team_l_start = '/home/joao/robocup/runner_workdir/a.sh' server::team_r_start = '/home/joao/robocup/runner_workdir/b.sh' CSVSaver::save='true' CSVSaver::filename = 'out.csv'</code> (in the output after ""runnning: "") it works fine.</p>
","<p>You can use <code>eval</code> to execute a string:</p>

<pre><code>eval $illcommando
</code></pre>
","2355242"
"Commenting in a Bash script","191896","","<p>How can I comment on each line of the following lines from a script?</p>

<pre><code>   cat ${MYSQLDUMP} | \
   sed '1d' | \
   tr "",;"" ""\n"" | \
   sed -e 's/[asbi]:[0-9]*[:]*//g' -e '/^[{}]/d' -e 's/""""//g' -e '/^""{/d' | \
   sed -n -e '/^""/p' -e '/^print_value$/,/^option_id$/p' | \
   sed -e '/^option_id/d' -e '/^print_value/d' -e 's/^""\(.*\)""$/\1/' | \
   tr ""\n"" "","" | \
   sed -e 's/,\([0-9]*-[0-9]*-[0-9]*\)/\n\1/g' -e 's/,$//' | \
   sed -e 's/^/""/g' -e 's/$/""/g' -e 's/,/"",""/g' &gt;&gt; ${CSV}
</code></pre>

<p>If I try and add a comment say ""<em>cat ${MYSQLDUMP} | \ #Output MYSQLDUMP File</em>"", I get:</p>

<blockquote>
  <h1>Delete: not found</h1>
</blockquote>

<p>Is it possible to comment here or not because of ""<code>| \</code>""?</p>
","<p>This will have some overhead, but technically it does answer your question:</p>

<pre><code>echo abc `#Put your comment here` \
     def `#Another chance for a comment` \
     xyz, etc.
</code></pre>

<p>And for pipelines specifically, there is a clean solution with no overhead:</p>

<pre><code>echo abc |        # Normal comment OK here
     tr a-z A-Z | # Another normal comment OK here
     sort |       # The pipelines are automatically continued
     uniq         # Final comment
</code></pre>

<p>See Stack Overflow question <em><a href=""https://stackoverflow.com/q/9522631/#12797512"">How to Put Line Comment for a Multi-line Command</a></em>.</p>
","1456019"
"Linux: Remove redundant paths from $PATH variable","191601","","<p>I have defined the same path in the $PATH variable 6 times. </p>

<p>I wasn't logging out to check whether it worked.</p>

<p>How can I remove the duplicates?</p>

<p>The $PATH variable looks like this:</p>

<pre><code>echo $PATH

/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/home/flacs/Programmes/USFOS/bin:/home/flacs/Programmes/USFOS/bin:/home/flacs/Programmes/USFOS/bin:/home/flacs/Programmes/USFOS/bin:/home/flacs/Programmes/USFOS/bin:/home/flacs/Programmes/USFOS/bin
</code></pre>

<p>How would I reset it to just</p>

<pre><code>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
</code></pre>
","<p>You just execute:</p>

<pre><code>export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
</code></pre>

<p>that would be for the current session, if you want to change permanently add it to any .bashrc, bash.bashrc, /etc/profile - whatever fits your system and user needs.</p>
","11651019"
"Return value in bash script","191298","","<p>I am working with a bash script and I want to execute a function to print a return value:</p>

<pre><code>function fun1(){
  return 34
}
function fun2(){
  local res=$(fun1)
  echo $res
}
</code></pre>

<p>When I execute <code>fun2</code>, it does not print ""34"". Why is this the case?</p>
","<p>Although bash has a <code>return</code> statement, the only thing you can specify with it is the function's own <code>exit</code> status (a value between 0 and 255, 0 meaning ""success""). So <code>return</code> is not what you want.</p>

<p>You might want to convert your <code>return</code> statement to an <code>echo</code> statement - that way your function output could be captured using <code>$()</code> braces, which seems to be exactly what you want.</p>

<p>Here is an example:</p>

<pre><code>function fun1(){
  echo 34
}

function fun2(){
  local res=$(fun1)
  echo $res
}
</code></pre>

<p>Another way to get the return value (if you just want to return an integer 0-255) is $?</p>

<pre><code>function fun1(){
  return 34
}

function fun2(){
  fun1
  local res=$?
  echo $res
}
</code></pre>

<p>Also note that you can use the return value to use boolean logic like <code>fun1 || fun2</code> will only run fun2 if fun1 returns a 0 value.  The default return value is the last statement executed within the function.</p>
","17336953"
"How to calculate time difference in bash script?","190640","","<p>I print the start and end time using <code>date +""%T""</code>, which results in something like:</p>

<pre><code>10:33:56
10:36:10
</code></pre>

<p>How could I calculate and print the difference between these two?</p>

<p>I would like to get something like:</p>

<pre><code>2m 14s
</code></pre>
","<p>Bash has a handy <code>SECONDS</code> builtin variable that tracks the number of seconds that have passed since the shell was started. This variable retains its properties when assigned to, and the value returned after the assignment is the number of seconds since the assignment plus the assigned value.</p>

<p>Thus, you can just set <code>SECONDS</code> to 0 before starting the timed event, simply read <code>SECONDS</code> after the event, and do the time arithmetic before displaying.</p>

<pre><code>SECONDS=0
# do some work
duration=$SECONDS
echo ""$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed.""
</code></pre>

<p>As this solution doesn't depend on <code>date +%s</code> (which is a GNU extension), it's portable to all systems supported by Bash.</p>
","8903280"
"Change the current directory from a Bash script","189611","","<p>Is it possible to change current directory from a script?</p>

<p>I want to create a utility for directory navigation in Bash. I have created a test script that looks like the following:</p>

<pre><code>#!/bin/bash
cd /home/artemb
</code></pre>

<p>When I execute the script from the Bash shell the current directory doesn't change. Is it possible at all to change the current shell directory from a script?</p>
","<p>You need to convert your script to a shell function:</p>

<pre><code>#!/bin/bash
#
# this script should not be run directly,
# instead you need to source it from your .bashrc,
# by adding this line:
#   . ~/bin/myprog.sh
#

function myprog() {
  A=$1
  B=$2
  echo ""aaa ${A} bbb ${B} ccc""
  cd /proc
}
</code></pre>

<p>The reason is that each process has its own current directory, and when you execute a program from the shell it is run in a new process. The standard ""cd"", ""pushd"" and ""popd"" are builtin to the shell interpreter so that they affect the shell process.</p>

<p>By making your program a shell function, you are adding your own in-process command and then any directory change gets reflected in the shell process.</p>
","874542"
"Delete files older than 10 days using shell script in Unix","189597","","<p>I'm new to shell scripts, can anyone help? I want to delete scripts in a folder from the current date back to 10 days.
The scripts looks like:</p>

<pre><code>2012.11.21.09_33_52.script
2012.11.21.09_33_56.script
2012.11.21.09_33_59.script
</code></pre>

<p>The script will run in every 10 day with Crontab, that's why I need the current date.</p>
","<p><code>find</code> is the common tool for this kind of task :</p>

<pre><code>find ./my_dir -mtime +10 -type f -delete
</code></pre>

<p><strong>EXPLANATIONS</strong></p>

<ul>
<li><code>./my_dir</code> your directory (replace with your own)</li>
<li><code>-mtime +10</code> older than 10 days</li>
<li><code>-type f</code> only files</li>
<li><code>-delete</code> no surprise. <strong>Remove it to test your <code>find</code> filter before executing the whole command</strong></li>
</ul>

<p>And take care that <code>./my_dir</code> exists to avoid bad surprises !</p>
","13489511"
"automating telnet session using bash scripts","189279","","<p>I am working on automating some telnet related tasks, using Bash scripts.
Once automated there will be no interaction of the user with telnet. (that is it will be totally automated)</p>

<p>the scripts looks something like this:</p>

<pre><code># execute some commands on the local system
# access a remote system with an IP address: 10.1.1.1 (for example)

telnet 10.1.1.1

# execute some commands on the remote system
# log all the activity (in a file) on the Local system
# exit telnet
# continue on with executing the rest of the script.
</code></pre>

<p>There are 2 problems I am facing here:</p>

<ol>
<li><p>How to execute the commands on the remote system from the script (without human interaction)? </p>

<p>From my experience with some test codes, I was able to deduce that when the <em>telnet 10.1.1.1</em> is executed, telnet goes into an interactive session and the subsequent lines of code in the script are executed on the local system. How can I run the lines of code on the remote system rather than the local one?</p></li>
<li><p>I am unable to get a log file for the activity in the telnet session on the local system. The stdout redirect I used makes a copy on the remote system (I do not want to perform a copy operation to copy the log to the local system). How can I achieve this functionality?</p></li>
</ol>
","<p>Write an <a href=""http://linux.die.net/man/1/expect"" rel=""noreferrer""><code>expect</code></a> script.</p>

<p>Here is an <a href=""http://osix.net/modules/article/?id=30"" rel=""noreferrer"">example</a>.</p>

<pre><code>#!/usr/bin/expect #Where the script should be run from.

#If it all goes pear shaped the script will timeout after 20 seconds.
set timeout 20
#First argument is assigned to the variable name
set name [lindex $argv 0]
#Second argument is assigned to the variable user
set user [lindex $argv 1]
#Third argument is assigned to the variable password
set password [lindex $argv 2]
#This spawns the telnet program and connects it to the variable name
spawn telnet $name 
#The script expects login
expect ""login:"" 
#The script sends the user variable
send ""$user ""
#The script expects Password
expect ""Password:""
#The script sends the password variable
send ""$password ""
#This hands control of the keyboard over two you (Nice expect feature!)
interact
</code></pre>
","7013379"
"How to get the contents of a webpage in a shell variable?","188638","","<p>In Linux how can I fetch an URL and get its contents in a variable in shell script? </p>
","<p>You can use <code>wget</code> command to download the page and read it into a variable as:</p>

<pre><code>content=$(wget google.com -q -O -)
echo $content
</code></pre>

<p>We use the <code>-O</code> option of <code>wget</code> which allows us to specify the name of the file into which <code>wget</code> dumps the page contents. We specify <code>-</code> to get the dump onto standard output and collect that into the variable <code>content</code>. You can add the <code>-q</code> quiet option to turn off's wget output. </p>

<p>You can use the <a href=""http://en.wikipedia.org/wiki/CURL"" rel=""noreferrer"">curl</a> command for this aswell as:</p>

<pre><code>content=$(curl -L google.com)
echo $content
</code></pre>

<p>We need to use the <code>-L</code> option as the page we are requesting might have moved. In which case we need to get the page from the new location. The <code>-L</code> or <code>--location</code> option helps us with this.</p>
","3742990"
"Linux how to copy but not overwrite?","187625","","<p>I want to <code>cp</code> a directory but I do not want to overwrite any existing files even it they are older than the copied files. And I want to do it completely noniteractive as this will be a part of a Crontab Bash script. Any ideas?</p>
","<p>Taken from the <a href=""http://manpages.ubuntu.com/manpages/precise/en/man1/cp.1.html"" rel=""noreferrer"">man page</a>:</p>

<pre><code>-n, --no-clobber
              do not overwrite an existing file (overrides a previous -i option)
</code></pre>

<p>Example:</p>

<pre><code>cp -n myoldfile.txt mycopiedfile.txt
</code></pre>
","9392784"
"How to get the first line of a file in a bash script?","187462","","<p>I have to put in a bash variable the first line of a file. I guess it is with the grep command, but it is any way to restrict the number of lines?</p>
","<p><code>head</code> takes the first lines from a file, and the <code>-n</code> parameter can be used to specify how many lines should be extracted:</p>

<pre><code>line=$(head -n 1 filename)
</code></pre>
","2439587"
"Get the date (a day before current time) in Bash","186926","","<p>How can I print the date which is a day before current time in Bash?</p>
","<p>if you have GNU date and i understood you correctly</p>

<pre><code>$ date +%Y:%m:%d -d ""yesterday""
2009:11:09
</code></pre>

<p>or  </p>

<pre><code>$ date +%Y:%m:%d -d ""1 day ago""
2009:11:09
</code></pre>
","1706909"
"How to run cron once, daily at 10pm","186689","","<p>I had entered:</p>

<pre><code>* 22 * * * test &gt; /dev/null
</code></pre>

<p>However, I am being notified via email that this is running every minute.
I am confused I guess because I thought this was correct for what I am wanting.</p>
","<p>It's running every minute of the hour 22 I guess. Try the following to run it every first minute of the hour 22:</p>

<pre><code> 0 22 * * * ....
</code></pre>
","8938143"
"Bash script to execute command on all files in a directory","186479","","<p>Could somebody please provide the code to do the following:
Assume there is a directory of files, all of which need to be run through a program. The program outputs the results to standard out. I need a script that will go into a directory, execute the command on each file, and concat the output into one big output file.</p>

<p>For instance, to run the command on 1 file:</p>

<pre><code>$ cmd [option] [filename] &gt; results.out
</code></pre>
","<p>The following bash code will pass $file to command where $file will represent every file in /dir</p>

<pre><code>for file in /dir/*
do
  cmd [option] ""$file"" &gt;&gt; results.out
done
</code></pre>

<p>Example</p>

<pre><code>el@defiant ~/foo $ touch foo.txt bar.txt baz.txt
el@defiant ~/foo $ for i in *.txt; do echo ""hello $i""; done
hello bar.txt
hello baz.txt
hello foo.txt
</code></pre>
","10523501"
"Simple logical operators in Bash","186454","","<p>I have a couple of variables and I want to check the following condition (written out in words, then my failed attempt at bash scripting):</p>

<pre><code>if varA EQUALS 1 AND ( varB EQUALS ""t1"" OR varB EQUALS ""t2"" ) then 

do something

done.
</code></pre>

<p>And in my failed attempt, I came up with:</p>

<pre><code>if (($varA == 1)) &amp;&amp; ( (($varB == ""t1"")) || (($varC == ""t2"")) ); 
  then
    scale=0.05
  fi
</code></pre>
","<p>What you've written actually almost works (it would work if all the variables were numbers), but it's not an idiomatic way at all.</p>

<ul>
<li><code>(…)</code> parentheses indicate a <a href=""http://www.gnu.org/software/bash/manual/bash.html#Command-Grouping"" rel=""noreferrer"">subshell</a>. What's inside them isn't an expression like in many other languages. It's a list of commands (just like outside parentheses). These commands are executed in a separate subprocess, so any redirection, assignment, etc. performed inside the parentheses has no effect outside the parentheses.

<ul>
<li>With a leading dollar sign, <code>$(…)</code> is a <a href=""http://www.gnu.org/software/bash/manual/bash.html#Command-Substitution"" rel=""noreferrer"">command substitution</a>: there is a command inside the parentheses, and the output from the command is used as part of the command line (after extra expansions unless the substitution is between double quotes, but that's <a href=""https://unix.stackexchange.com/questions/131766/why-does-my-shell-script-choke-on-whitespace-or-other-special-characters"">another story</a>).</li>
</ul></li>
<li><code>{ … }</code> braces are like parentheses in that they group commands, but they only influence parsing, not grouping. The program <code>x=2; { x=4; }; echo $x</code> prints 4, whereas <code>x=2; (x=4); echo $x</code> prints 2. (Also braces require spaces around them and a semicolon before closing, whereas parentheses don't. That's just a syntax quirk.)

<ul>
<li>With a leading dollar sign, <code>${VAR}</code> is a <a href=""http://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion"" rel=""noreferrer"">parameter expansion</a>, expanding to the value of a variable, with possible extra transformations.</li>
</ul></li>
<li><code>((…))</code> double parentheses surround an <a href=""http://www.gnu.org/software/bash/manual/bash.html#Shell-Arithmetic"" rel=""noreferrer"">arithmetic instruction</a>, that is, a computation on integers, with a syntax resembling other programming languages. This syntax is mostly used for assignments and in conditionals.

<ul>
<li>The same syntax is used in arithmetic expressions <code>$((…))</code>, which expand to the integer value of the expression.</li>
</ul></li>
<li><code>[[ … ]]</code> double brackets surround <a href=""http://www.gnu.org/software/bash/manual/bash.html#index-_005b_005b"" rel=""noreferrer"">conditional expressions</a>. Conditional expressions are mostly built on <a href=""http://www.gnu.org/software/bash/manual/bash.html#Bash-Conditional-Expressions"" rel=""noreferrer"">operators</a> such as <code>-n $variable</code> to test if a variable is empty and <code>-e $file</code> to test if a file exists. There are also string equality operators: <code>""$string1"" = ""$string2""</code> (beware that the right-hand side is a pattern, e.g. <code>[[ $foo = a* ]]</code> tests if <code>$foo</code> starts with <code>a</code> while <code>[[ $foo = ""a*"" ]]</code> tests if <code>$foo</code> is exactly <code>a*</code>), and the familiar <code>!</code>, <code>&amp;&amp;</code> and <code>||</code> operators for negation, conjunction and disjunction as well as parentheses for grouping. Note that you need a space around each operator (e.g. <code>[[ ""$x"" = ""$y"" ]]</code>, not <s><code>[[ ""$x""=""$y"" ]]</code></s>), and a space or a character like <code>;</code> both inside and outside the brackets (e.g. <code>[[ -n $foo ]]</code>, not <s><code>[[-n $foo]]</code></s>).</li>
<li><code>[ … ]</code> single brackets are an alternate form of conditional expressions with more quirks (but older and more portable). Don't write any for now; start worrying about them when you find scripts that contain them.</li>
</ul>

<p>This is the idiomatic way to write your test in bash:</p>

<pre><code>if [[ $varA = 1 &amp;&amp; ($varB = ""t1"" || $varC = ""t2"") ]]; then
</code></pre>

<p>If you need portability to other shells, this would be the way (note the additional quoting and the separate sets of brackets around each individual test):</p>

<pre><code>if [ ""$varA"" = 1 ] &amp;&amp; { [ ""$varB"" = ""t1"" ] || [ ""$varC"" = ""t2"" ]; }; then
</code></pre>
","6270803"
"Bash - an ""and"" operator for ""if"" statement","185688","","<p>I'm trying to create a simple bash script to check if the website is down and for some reason the ""and"" operator doesn't work:</p>

<pre><code>#!/usr/bin/env bash

WEBSITE=domain.com
SUBJECT=""$WEBSITE DOWN!""
EMAILID=""an@email.com""
STATUS=$(curl -sI $WEBSITE | awk '/HTTP\/1.1/ { print $2 }')
STRING=$(curl -s $WEBSITE | grep -o ""string_to_search"")
VALUE=""string_to_search""

if [ $STATUS -ne 200 ] &amp;&amp; [[ ""$STRING"" != ""$VALUE"" ]]; then
        echo ""Website: $WEBSITE is down, status code: '$STATUS' - $(date)"" | mail -s ""$SUBJECT"" $EMAILID
fi
</code></pre>

<p>The ""-a"" operator also doesn't work:</p>

<pre><code>if [ $STATUS -ne 200 ] -a [[ ""$STRING"" != ""$VALUE"" ]]
</code></pre>

<p>Could you also please advise when to use:</p>

<ul>
<li>single and double square brackets</li>
<li>parenthesis</li>
</ul>
","<p>What you have should work, unless <code>$STATUS</code> is empty.  It would probably be better to do:</p>

<pre><code>if ! [ ""$STATUS"" -eq 200 ] 2&gt; /dev/null &amp;&amp; [ ""$STRING"" != ""$VALUE"" ]; then
</code></pre>

<p>or</p>

<pre><code>if [ ""$STATUS"" != 200 ] &amp;&amp; [ ""$STRING"" != ""$VALUE"" ]; then
</code></pre>

<p>It's hard to say, since you haven't shown us exactly what is going wrong with your script.</p>

<p>Personal opinion: never use <code>[[</code>.  It is not portable to different shells.  </p>
","13408590"
"How to get file creation date/time in Bash/Debian?","184521","","<p>I'm using Bash on Debian GNU/Linux 6.0. Is it possible to get the file creation date/time? Not the modification date/time.
<code>ls -lh a.txt</code> and <code>stat -c %y a.txt</code> both only give the modification time.</p>
","<p>Unfortunately your quest won't be possible in general, as there are only 3 distinct time values stored for each of your files as defined by the POSIX standard (see <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_08"">Base Definitions section 4.8 File Times Update</a>)</p>

<blockquote>
  <p>Each file has three distinct associated timestamps: the time of last
  data access, the time of last data modification, and the time the file
  status last changed. These values are returned in the file
  characteristics structure <strong>struct stat</strong>, as described in <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_stat.h.html"">&lt;sys/stat.h&gt;</a>.</p>
</blockquote>

<p>EDIT: As mentioned in the comments below, depending on the filesystem used metadata may contain file creation date. Note however storage of information like that is non standard. Depending on it may lead to portability problems moving to another filesystem, in case the one actually used somehow stores it anyways. </p>
","14842384"
"Capturing multiple line output into a Bash variable","184258","","<p>I've got a script 'myscript' that outputs the following:</p>

<pre><code>abc
def
ghi
</code></pre>

<p>in another script, I call:</p>

<pre><code>declare RESULT=$(./myscript)
</code></pre>

<p>and <code>$RESULT</code> gets the value</p>

<pre><code>abc def ghi
</code></pre>

<p>Is there a way to store the result either with the newlines, or with '\n' character so I can output it with '<code>echo -e</code>'?</p>
","<p>Actually, RESULT contains what you want — to demonstrate:</p>

<pre><code>echo ""$RESULT""
</code></pre>

<p>What you show is what you get from:</p>

<pre><code>echo $RESULT
</code></pre>

<hr>

<p>As noted in the comments, the difference is that (1) the double-quoted version of the variable (<code>echo ""$RESULT""</code>) preserves internal spacing of the value exactly as it is represented in the variable — newlines, tabs, multiple blanks and all — whereas (2) the unquoted version (<code>echo $RESULT</code>) replaces each sequence of one or more blanks, tabs and newlines with a single space. Thus (1) preserves the shape of the input variable, whereas (2) creates a potentially very long single line of output with 'words' separated by single spaces (where a 'word' is a sequence of non-whitespace characters; there needn't be any alphanumerics in any of the words).</p>
","613580"
"How do I use floating-point division in bash?","183425","","<p>I am trying to divide two image widths in a Bash script, but bash gives me <code>0</code> as the result:</p>

<pre><code>RESULT=$(($IMG_WIDTH/$IMG2_WIDTH))
</code></pre>

<p>I did study the Bash guide and I know I should use <code>bc</code>, in all examples in internet they use <code>bc</code>. In <code>echo</code> I tried to put the same thing in my <code>SCALE</code> but it didn't work.</p>

<p>Here is the example I found in the tutorials:</p>

<pre><code>echo ""scale=2; ${userinput}"" | bc 
</code></pre>

<p>How can I get Bash to give me a float like <code>0.5</code>?</p>
","<p>You can't. bash <em>only</em> does integers; you <em>must</em> delegate to a tool such as <code>bc</code>.</p>
","12722107"
"Remove a fixed prefix/suffix from a string in Bash","182819","","<p>In my <code>bash</code> script I have a string and its prefix/suffix. I need to remove the prefix/suffix from the original string.</p>

<p>For example, let's say I have the following values:</p>

<pre><code>string=""hello-world""
prefix=""hell""
suffix=""ld""
</code></pre>

<p>How do I get to the following result?</p>

<pre><code>result=""o-wor""
</code></pre>
","<pre><code>$ foo=${string#$prefix}
$ foo=${foo%$suffix}
$ echo ""${foo}""
o-wor
</code></pre>
","16623897"
"Can I export a variable to the environment from a bash script without sourcing it?","182124","","<p>suppose that I have this script</p>

<p><strong>export.bash</strong> :</p>

<pre><code>#! /usr/bin/env bash
export VAR=""HELLO, VARABLE""
</code></pre>

<p>when I execute the script, and try to access to the <code>$VAR</code> I get no value !</p>

<pre><code>echo $VAR
</code></pre>

<p>Is there any way to access to the <code>$VAR</code> by just executing <strong>export.bash</strong> without sourcing it ?</p>
","<blockquote>
  <p>Is there any way to access to the <code>$VAR</code> by just executing <code>export.bash</code> without sourcing it ?</p>
</blockquote>

<p>Quick answer: No.</p>

<p>But there are several possible workarounds.</p>

<p>The most obvious one, which you've already mentioned, is to use <code>source</code> or <code>.</code> to execute the script in the context of the calling shell:</p>

<pre><code>$ cat set-vars1.sh 
export FOO=BAR
$ . set-vars1.sh 
$ echo $FOO
BAR
</code></pre>

<p>Another way is to have the script, rather than setting an environment variable, print commands that will set the environment variable:</p>

<pre><code>$ cat set-vars2.sh
#!/bin/bash

echo export FOO=BAR
$ eval $(./set-vars2.sh)
$ echo $FOO
BAR
</code></pre>

<p>Note that the <code>$(...)</code> will join the output into a single line. If you have more than one thing to set, you should add semicolons to the printed commands so they're still valid after being joined together.</p>

<p>A third approach is to have a script that sets your environment variable(s) internally and then invokes a specified command with that environment:</p>

<pre><code>$ cat set-vars3.sh
#!/bin/bash

export FOO=BAR
exec ""$@""
$ ./set-vars3.sh printenv | grep FOO
FOO=BAR
</code></pre>

<p>This last approach can be quite useful, though it's inconvenient for interactive use since it doesn't give you the settings in your current shell (with all the other settings and history you've built up).</p>
","16619261"
"How do I get cURL to not show the progress bar?","181586","","<p>I'm trying to use cURL in a script and get it to <strong><em>not</em></strong> show the progress bar. </p>

<p>I've tried the <code>-s</code>, <code>-silent</code>, <code>-S</code>, and <code>-quiet</code> options, but none of them work.</p>

<p>Here's a typical command I've tried:</p>

<pre><code>curl -s http://google.com &gt; temp.html
</code></pre>

<p>I only get the progress bar when pushing it to a file, so <code>curl -s http://google.com</code> doesn't have a progress bar, but <code>curl -s http://google.com &gt; temp.html</code> does.</p>
","<pre><code>curl -s http://google.com &gt; temp.html
</code></pre>

<p>works for curl version 7.19.5 on Ubuntu 9.10 (no progress bar). But if for some reason that does not work on your platform, you could always redirect stderr to /dev/null:</p>

<pre><code>curl  http://google.com 2&gt;/dev/null &gt; temp.html
</code></pre>
","7373922"
"unary operator expected","180750","","<p>I've been trying to figure out whats wrong with this but just can't figure it out..</p>

<p>This is the part seems to be getting an error..</p>

<pre><code>elif [ $operation = ""man"" ]; then
    if [ $aug1 = ""add"" ]; then         # &lt;- Line 75
    echo ""Man Page for: add""
    echo """"
    echo ""Syntax: add [number 1] [number 2]""
    echo """"
    echo ""Description:""
    echo ""Add two different numbers together.""
    echo """"
    echo ""Info:""
    echo ""Added in v1.0""
    echo """"
elif [ -z $aug1 ]; then
    echo ""Please specify a command to read the man page.""
else
    echo ""There is no manual page for that command.""
fi
</code></pre>

<p>I get this error:</p>

<pre><code>calc_1.2: line 75: [: =: unary operator expected
</code></pre>
","<p>If you know you're always going to use bash, it's much easier to always use the double bracket conditional compound command <code>[[ ... ]]</code>, instead of the Posix-compatible  single bracket version <code>[ ... ]</code>. Inside a <code>[[ ... ]]</code> compound, word-splitting and pathname expansion are not applied to words, so you can rely on</p>

<pre><code>if [[ $aug1 == ""and"" ]];
</code></pre>

<p>to compare the value of <code>$aug1</code> with the string <code>and</code>.</p>

<p>If you use <code>[ ... ]</code>, you always need to remember to double quote variables like this:</p>

<pre><code>if [ ""$aug1"" = ""and"" ];
</code></pre>

<p>If you don't quote the variable expansion and the variable is undefined or empty, it vanishes from the scene of the crime, leaving only</p>

<pre><code>if [ = ""and"" ]; 
</code></pre>

<p>which is not a valid syntax. (It would also fail with a different error message if <code>$aug1</code> included white space or shell metacharacters.)</p>

<p>The modern <code>[[</code> operator has lots of other nice features, including regular expression matching.</p>
","13618376"
"Check if string is neither empty nor space in shell script","180582","","<p>I am trying to run the following shell script which is supposed to check if a string is neither space nor empty. However, I am getting the same output for all the 3 mentioned strings. I have tried using the ""[["" syntax as well but to no avail.</p>

<p>Here is my code:</p>

<pre><code>str=""Hello World""
str2="" ""
str3=""""

if [ ! -z ""$str"" -a ""$str""!="" "" ]; then
        echo ""Str is not null or space""
fi

if [ ! -z ""$str2"" -a ""$str2""!="" "" ]; then
        echo ""Str2 is not null or space""
fi

if [ ! -z ""$str3"" -a ""$str3""!="" "" ]; then
        echo ""Str3 is not null or space""
fi
</code></pre>

<p>I am getting the following output:</p>

<pre><code># ./checkCond.sh 
Str is not null or space
Str2 is not null or space
</code></pre>
","<p>You need a space on either side of the <code>!=</code>. Change your code to:</p>

<pre><code>str=""Hello World""
str2="" ""
str3=""""

if [ ! -z ""$str"" -a ""$str"" != "" "" ]; then
        echo ""Str is not null or space""
fi

if [ ! -z ""$str2"" -a ""$str2"" != "" "" ]; then
        echo ""Str2 is not null or space""
fi

if [ ! -z ""$str3"" -a ""$str3"" != "" "" ]; then
        echo ""Str3 is not null or space""
fi
</code></pre>
","13509715"
"Detect the OS from a Bash script","178646","","<p>I would like to keep my <code>.bashrc</code> and <code>.bash_login</code> files in version control so that I can use them between all the computers I use. The problem is I have some OS specific aliases so I was looking for a way to determine if the script is running on Mac&nbsp;OS&nbsp;X, Linux or <a href=""http://en.wikipedia.org/wiki/Cygwin"" rel=""noreferrer"">Cygwin</a>.</p>

<p>What is the proper way to detect the operating system in a <a href=""http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"" rel=""noreferrer"">Bash</a> script?</p>
","<p>For my .bashrc, I use the following code:</p>

<pre><code>platform='unknown'
unamestr=`uname`
if [[ ""$unamestr"" == 'Linux' ]]; then
   platform='linux'
elif [[ ""$unamestr"" == 'FreeBSD' ]]; then
   platform='freebsd'
fi
</code></pre>

<p>Then I do somethings like:</p>

<pre><code>if [[ $platform == 'linux' ]]; then
   alias ls='ls --color=auto'
elif [[ $platform == 'freebsd' ]]; then
   alias ls='ls -G'
fi
</code></pre>

<p>It's ugly, but it works. You may use <code>case</code> instead of <code>if</code> if you prefer.</p>
","394247"
"How to check if a process id (PID) exists","178533","","<p>In a bash script, I want to do the following (in pseudo-code):</p>

<pre><code>if [ a process exists with $PID ]; then

    kill $PID 

fi
</code></pre>

<p>What's the appropriate expression for the conditional statement?</p>
","<p>To check for the existence of a process, use</p>

<pre><code>kill -0 $pid
</code></pre>

<p>But just as @unwind said, if you're going to kill it anyway, just</p>

<pre><code>kill $pid
</code></pre>

<p>or you will have a race condition.</p>

<p>If you want to ignore the text output of <code>kill</code> and do something based on the exit code, you can</p>

<pre><code>if ! kill $pid &gt; /dev/null 2&gt;&amp;1; then
    echo ""Could not send SIGTERM to process $pid"" &gt;&amp;2
fi
</code></pre>
","3044045"
"bash/fish command to print absolute path to a file","178092","","<p>Question: is there a simple sh/bash/zsh/fish/... command to print the absolute path of whichever file I feed it?</p>

<p>Usage case: I'm in directory <code>/a/b</code> and I'd like to print the full path to file <code>c</code> on the command-line so that I can easily paste it into another program: <code>/a/b/c</code>. Simple, yet a little program to do this could probably save me 5 or so seconds when it comes to handling long paths, which in the end adds up. So it surprises me that I can't find a standard utility to do this — is there really none?</p>

<p>Here's a sample implementation, abspath.py:</p>

<pre><code>#!/usr/bin/python
# Author: Diggory Hardy &lt;diggory.hardy@gmail.com&gt;
# Licence: public domain
# Purpose: print the absolute path of all input paths

import sys
import os.path
if len(sys.argv)&gt;1:
    for i in range(1,len(sys.argv)):
        print os.path.abspath( sys.argv[i] )
    sys.exit(0)
else:
    print &gt;&gt; sys.stderr, ""Usage: "",sys.argv[0],"" PATH.""
    sys.exit(1)
</code></pre>
","<p>Try <code>realpath</code>.</p>

<pre><code>~ $ realpath example.txt
/home/username/example.txt
</code></pre>
","3915075"
"Writing outputs to log file and console","177807","","<p>In Unix shell, I have a env file (<em>env file defines the parameters required for running the user script like log file name and path, redirect outputs and errors to log file, database connection details, etc</em>) which redirects all the outputs (<em>echo messages</em>) and errors to the log file from the executed script using the following code:</p>

<pre><code>exec 1&gt;&gt;${LOG_FILE}
exec 2&gt;&gt;${LOG_FILE}
</code></pre>

<p>The env file is executed at the beginning of each script. Due to the above code in env file all the console outputs that might be user outputs or errors are directly output to the log file which is what I actually needed.</p>

<p>But there are some selective user outputs which I want to be displayed in both the console and the log file. But because of the above code I am not able to do so.</p>

<p>I know that if I remove the above code I can get the desired result for this case, but I will have to manually write all other outputs to the log file which is not an easy task.</p>

<p>Is there a way to get the output in both the console and the log file without removing the above codes?</p>
","<pre><code>exec 3&gt;&amp;1 1&gt;&gt;${LOG_FILE} 2&gt;&amp;1
</code></pre>

<p>would send stdout and stderr output into the log file, but would also leave you with fd 3 connected to the console, so you can do</p>

<pre><code>echo ""Some console message"" 1&gt;&amp;3
</code></pre>

<p>to write a message just to the console, or</p>

<pre><code>echo ""Some console and log file message"" | tee /dev/fd/3
</code></pre>

<p>to write a message to <em>both</em> the console <em>and</em> the log file - <code>tee</code> sends its output to both its own fd 1 (which here is the <code>LOG_FILE</code>) and the file you told it to write to (which here is fd 3, i.e. the console).</p>

<p>Example:</p>

<pre><code>exec 3&gt;&amp;1 1&gt;&gt;${LOG_FILE} 2&gt;&amp;1

echo ""This is stdout""
echo ""This is stderr"" 1&gt;&amp;2
echo ""This is the console (fd 3)"" 1&gt;&amp;3
echo ""This is both the log and the console"" | tee /dev/fd/3
</code></pre>

<p>would print</p>

<pre><code>This is the console (fd 3)
This is both the log and the console
</code></pre>

<p>on the console and put</p>

<pre><code>This is stdout
This is stderr
This is both the log and the console
</code></pre>

<p>into the log file.</p>
","18462920"
"How to get the process ID to kill a nohup process?","175561","","<p>I'm running a nohup process on the server. When I try to kill it my putty console closes instead.</p>

<p>this is how I try to find the process ID:</p>

<pre><code>ps -ef |grep nohup 
</code></pre>

<p>this is the command to kill</p>

<pre><code> kill -9 1787 787
</code></pre>
","<p>When using <code>nohup</code> and you put the task in the background, the background operator (<code>&amp;</code>) will give you the PID at the command prompt. If your plan is to manually manage the process, you can save that PID and use it later to kill the process if needed, via <code>kill PID</code> or <code>kill -9 PID</code> (if you need to force kill). Alternatively, you can find the PID later on by <code>ps -ef | grep ""command name""</code> and locate the PID from there. Note that <code>nohup</code> keyword/command itself does not appear in the <code>ps</code> output for the command in question.</p>

<p>If you used a script, you could do something like:</p>

<pre><code>nohup my_command &gt; my.log 2&gt;&amp;1 &amp;
echo $! &gt; save_pid.txt
</code></pre>

<p>This will run <code>my_command</code> saving all output into <code>my.log</code> (in a script, <code>$!</code> represents the PID of the last process executed). The <code>2</code> is the file descriptor for standard error (<code>stderr</code>) and <code>2&gt;&amp;1</code> tells the shell to route standard error output to the standard output (file descriptor <code>1</code>). It requires <code>&amp;1</code> so that the shell knows it's a file descriptor in that context instead of just a file named <code>1</code>. The <code>2&gt;&amp;1</code> is needed to capture any error messages that normally are written to standard error into our <code>my.log</code> file (which is coming from standard output). See <a href=""http://www.tldp.org/LDP/abs/html/io-redirection.html"" rel=""noreferrer"">I/O Redirection</a> for more details on handling I/O redirection with the shell.</p>

<p>If the command sends output on a regular basis, you can check the output occasionally with <code>tail my.log</code>, or if you want to follow it ""live"" you can use <code>tail -f my.log</code>. Finally, if you need to kill the process, you can do it via:</p>

<pre><code>kill -9 `cat save_pid.txt`
rm save_pid.txt
</code></pre>
","17389526"
"How to replace spaces in file names using a bash script","175129","","<p>Can anyone recommend a safe solution to recursively replace spaces with underscores in file and directory names starting from a given root directory? For example:</p>

<pre><code>$ tree
.
|-- a dir
|   `-- file with spaces.txt
`-- b dir
    |-- another file with spaces.txt
    `-- yet another file with spaces.pdf
</code></pre>

<p>becomes:</p>

<pre><code>$ tree
.
|-- a_dir
|   `-- file_with_spaces.txt
`-- b_dir
    |-- another_file_with_spaces.txt
    `-- yet_another_file_with_spaces.pdf
</code></pre>
","<p>Use <code>rename</code> (aka <code>prename</code>) which is a Perl script which may be on your system already. Do it in two steps:</p>

<pre><code>find -name ""* *"" -type d | rename 's/ /_/g'    # do the directories first
find -name ""* *"" -type f | rename 's/ /_/g'
</code></pre>

<p>Based on <strong>Jürgen's</strong> answer and able to handle multiple layers of files and directories in a single bound using the ""Revision 1.5  1998/12/18 16:16:31  rmb1"" version of <code>/usr/bin/rename</code> (a Perl script):</p>

<pre><code>find /tmp/ -depth -name ""* *"" -execdir rename 's/ /_/g' ""{}"" \;
</code></pre>
","2709619"
"How to pass all arguments passed to my bash script to a function of mine?","174084","","<p>Let's say I have defined a function abc() that will handle all the logic related to analising the arguments passed to my script.</p>

<p>How can I pass all arguments my bash script has received to it? The number of params is variable, so I can't just hardcode the arguments passed like this:</p>

<pre><code>abc $1 $2 $3 $4
</code></pre>

<p>edit: Better yet, is there any way for my function to have access to the script arguments' variables?</p>
","<p>Pet peeve: when using <code>$@</code>, you should (almost) always put it in double-quotes to avoid misparsing of argument with spaces in them:</p>

<pre><code>abc ""$@""
</code></pre>
","3816747"
"Bash - get last dirname/filename in a file path argument","173837","","<p>I'm trying to write a post-commit hook for SVN, which is hosted on our development server.  My goal is to try to automatically checkout a copy of the committed project to the directory where it is hosted on the server.  However I need to be able to read only the last directory in the directory string passed to the script in order to checkout to the same sub-directory where our projects are hosted.</p>

<p>For example if I make an SVN commit to the project ""example"", my script gets ""/usr/local/svn/repos/example"" as its first argument.  I need to get just ""example"" off the end of the string and then concat it with another string so I can checkout to ""/server/root/example"" and see the changes live immediately. </p>
","<p><a href=""http://swoolley.org/man.cgi/basename"" rel=""noreferrer""><code>basename</code></a> does remove the directory prefix of a path:</p>

<pre><code>$ basename /usr/local/svn/repos/example
example
$ echo ""/server/root/$(basename /usr/local/svn/repos/example)""
/server/root/example
</code></pre>
","3294102"
"How to check size of a file?","172743","","<p>I've got a script that checks for 0-size, but I thought there must be an easier way to check for file sizes instead.  I.e. <code>file.txt</code> is normally 100k; how to make a script check if it is less than 90k (including 0), and make it do wget a new copy because the file is corrupt in this case.</p>

<p>What I'm currently using.. </p>

<pre><code>if [ -n file.txt ]
then
 echo ""everything is good""
else
 mail -s ""file.txt size is zero, please fix. "" myemail@gmail.com &lt; /dev/null
 # Grab wget as a fallback 
 wget -c https://www.server.org/file.txt -P /root/tmp --output-document=/root/tmp/file.txt
 mv -f /root/tmp/file.txt /var/www/file.txt
fi
</code></pre>
","<p><code>[ -n file.txt ]</code> doesn't check its size, it checks that the string <code>file.txt</code> is non-zero length, so it will always succeed.</p>

<p>If you want to say ""size is non-zero"", you need <code>[ -s file.txt ]</code>.</p>

<p>To get a file's size, you can use <code>wc -c</code> to get the size (file length) in bytes:</p>

<pre><code>file=file.txt
minimumsize=90000
actualsize=$(wc -c &lt;""$file"")
if [ $actualsize -ge $minimumsize ]; then
    echo size is over $minimumsize bytes
else
    echo size is under $minimumsize bytes
fi
</code></pre>

<p>In this case, it sounds like that's what you want.</p>

<p>But FYI, if you want to know how much disk space the file is using, you could use <code>du -k</code> to get the size (disk space used) in kilobytes:</p>

<pre><code>file=file.txt
minimumsize=90
actualsize=$(du -k ""$file"" | cut -f 1)
if [ $actualsize -ge $minimumsize ]; then
    echo size is over $minimumsize kilobytes
else
    echo size is under $minimumsize kilobytes
fi
</code></pre>

<p>If you need more control over the output format, you can also look at <code>stat</code>.  On Linux, you'd start with something like <code>stat -c '%s' file.txt</code>, and on BSD/Mac OS X, something like <code>stat -f '%z' file.txt</code>.</p>
","5920355"
"bash conditionals: how to ""and"" expressions? (if [ ! -z $VAR && -e $VAR ])","172742","","<p>I guess I'm not clear on how to do ""and"" tests.  I wanted to make sure an argument existed which was working well with <code>[ -e $VAR ]</code> but turns out that was also evaluating as true on empty string; which I do not want.</p>

<p>How do I 'and' them together?  Or is there another unary test that accomplishes what I want?</p>
","<pre><code>if [ ! -z ""$var"" ] &amp;&amp; [ -e ""$var"" ]; then
      # something ...
fi
</code></pre>
","8920266"
"How do I write stderr to a file while using ""tee"" with a pipe?","171979","","<p>I have below a command which will print the output of <code>aaa.sh</code> to the screen while also writing <em>stdout</em> to <code>bbb.out</code>; however I would also like to write <em>stderr</em> to a file named <code>ccc.out</code>.  Any suggestions on how to modify the piece below?</p>

<pre><code>./aaa.sh | tee ./bbb.out
</code></pre>

<p><strong>Update:</strong> <em>stdout</em> and <em>stderr</em> should still both be printed to the screen, regardless.</p>
","<p>I'm assuming you want to still see STDERR and STDOUT on the terminal.  You could go for Josh Kelley's answer, but I find keeping a <code>tail</code> around in the background which outputs your log file very hackish and cludgy.  Notice how you need to keep an exra FD and do cleanup afterward by killing it and technically should be doing that in a <code>trap '...' EXIT</code>.</p>

<p>There is a better way to do this, and you've already discovered it: <code>tee</code>.</p>

<p>Only, instead of just using it for your stdout, have a tee for stdout and one for stderr.  How will you accomplish this?  Process substitution and file redirection:</p>

<pre><code>command &gt; &gt;(tee -a stdout.log) 2&gt; &gt;(tee -a stderr.log &gt;&amp;2)
</code></pre>

<p>Let's split it up and explain:</p>

<pre><code>&gt; &gt;(..)
</code></pre>

<p><code>&gt;(...)</code> (process substitution) creates a FIFO and lets <code>tee</code> listen on it.  Then, it uses <code>&gt;</code> (file redirection) to redirect the STDOUT of <code>command</code> to the FIFO that your first <code>tee</code> is listening on.</p>

<p>Same thing for the second:</p>

<pre><code>2&gt; &gt;(tee -a stderr.log &gt;&amp;2)
</code></pre>

<p>We use process substitution again to make a <code>tee</code> process that reads from STDIN and dumps it into <code>stderr.log</code>.  <code>tee</code> outputs its input back on STDOUT, but since its input is our STDERR, we want to redirect <code>tee</code>'s STDOUT to our STDERR again.  Then we use file redirection to redirect <code>command</code>'s STDERR to the FIFO's input (<code>tee</code>'s STDIN).</p>

<p>See <a href=""http://mywiki.wooledge.org/BashGuide/InputAndOutput"" rel=""noreferrer"">http://mywiki.wooledge.org/BashGuide/InputAndOutput</a></p>

<p>Process substitution is one of those really lovely things you get as a bonus of choosing <code>bash</code> as your shell as opposed to <code>sh</code> (POSIX or Bourne).</p>

<hr>

<p>In <code>sh</code>, you'd have to do things manually:</p>

<pre><code>out=""${TMPDIR:-/tmp}/out.$$"" err=""${TMPDIR:-/tmp}/err.$$""
mkfifo ""$out"" ""$err""
trap 'rm ""$out"" ""$err""' EXIT
tee -a stdout.log &lt; ""$out"" &amp;
tee -a stderr.log &lt; ""$err"" &gt;&amp;2 &amp;
command &gt;""$out"" 2&gt;""$err""
</code></pre>
","692407"
"Concatenating multiple text files into a single file in Bash","171943","","<p>What is the quickest and most pragmatic way to combine all *.txt file in a directory into one large text file?</p>

<p>Currently I'm using windows with cygwin so I have access to BASH.</p>

<p>Windows shell command would be nice too but I doubt there is one.</p>
","<p>This appends the output to all.txt</p>

<pre><code>cat *.txt &gt;&gt; all.txt
</code></pre>

<p>This overwrites all.txt</p>

<pre><code>cat *.txt &gt; all.txt
</code></pre>
","2150625"
"How to read from a file or stdin in Bash?","171609","","<p>In Perl the following code will read from file specified on command line args or from stdin:</p>

<pre><code>while (&lt;&gt;) {
   print($_);
}
</code></pre>

<p>This is very convenient. I just want to know what's the simplest way to read from file or stdin in bash.</p>
","<p>The following solution reads from a file if the script is called
with a file name as the first parameter <code>$1</code> otherwise from standard input.    </p>

<pre><code>while read line
do
  echo ""$line""
done &lt; ""${1:-/dev/stdin}""
</code></pre>

<p>The substitution <code>${1:-...}</code> takes <code>$1</code> if defined otherwise
the file name of the standard input of the own process is used.</p>
","7045517"
"Using if elif fi in shell scripts","171357","","<p>I'm not sure how to do an <code>if</code> with multiple tests in shell. I'm having trouble writing this script:</p>

<pre><code>echo ""You have provided the following arguments $arg1 $arg2 $arg3""
if [ ""$arg1"" = ""$arg2"" &amp;&amp; ""$arg1"" != ""$arg3"" ]
then
    echo ""Two of the provided args are equal.""
    exit 3
elif [ $arg1 = $arg2 &amp;&amp; $arg1 = $arg3 ]
then
    echo ""All of the specified args are equal""
    exit 0
else
    echo ""All of the specified args are different""
    exit 4
fi
</code></pre>

<p>The problem is I get this error every time:</p>

<blockquote>
  <p>./compare.sh: [: missing `]' command not found</p>
</blockquote>
","<p><code>sh</code> is interpreting the <code>&amp;&amp;</code> as a shell operator. Change it to <code>-a</code>, that’s <code>[</code>’s conjunction operator:</p>

<pre><code>[ ""$arg1"" = ""$arg2"" -a ""$arg1"" != ""$arg3"" ]
</code></pre>

<p>Also, you should always quote the variables, because <code>[</code> gets confused when you leave off arguments.</p>
","2359293"
"Running script upon login mac","171348","","<p>I am wondering if anyone is able to help me out with getting a .sh file to run when I log in to my account on my computer. I am running Mac OS X 10.6.7.</p>

<p>I have a file ""Example.sh"" that I want to run when I log onto my computer. I do not have a problem running it when I am already logged in, but I want this to run automatically.</p>

<p>People are saying to add it to the login shell file, but I do not know where that is. Some help please.</p>
","<p>You can:</p>

<ul>
<li>start Automator.app</li>
<li>Select ""Application""</li>
<li>click ""Show library"" in the toolbar (if hidden)</li>
<li>Add ""Run shell script"" (from the Actions/Utilities)</li>
<li>Copy&amp;paste your script into the window</li>
<li>Test it</li>
<li><p>Save somewhere, for example you can make an ""Applications"" folder in your HOME (you will get an your_name.app)</p>

<blockquote>
  <p><strong>Update</strong>: For latest macOS, name your file <code>your_name.command</code> instead of <code>your_name.app</code></p>
</blockquote></li>
<li><p>Go to System Preferences -> Accounts -> Login items</p></li>
<li>Add this app</li>
<li>test &amp; done ;)</li>
</ul>

<p>EDIT:</p>

<p><em>I've recently earned a ""Good answer"" badge for this answer. While my solution is simple and working, the cleanest way to run any program or shell script at login time is described in <a href=""https://stackoverflow.com/a/13372744/805031"">@trisweb's answer</a></em>, <strong>unless, you want interactivity</strong>.</p>

<p>With automator solution you can do things like next:
<img src=""https://i.stack.imgur.com/sCy4t.png"" alt=""automator screenshot login application""></p>

<p>so, asking to run a script or quit the app, asking passwords, running other automator workflows at login time, conditionally run applications at login time and so on...</p>
","6445525"
"How to create a cron job using Bash automatically without the interactive editor?","170912","","<p>Does crontab have an argument for creating cron jobs without using the editor (crontab -e). If so, What would be the code create a cronjob from a Bash script?</p>
","<p>You can add to the crontab as follows:</p>

<pre><code>#write out current crontab
crontab -l &gt; mycron
#echo new cron into cron file
echo ""00 09 * * 1-5 echo hello"" &gt;&gt; mycron
#install new cron file
crontab mycron
rm mycron
</code></pre>

<hr>

<h2>Cron line explaination</h2>

<pre><code>* * * * * ""command to be executed""
- - - - -
| | | | |
| | | | ----- Day of week (0 - 7) (Sunday=0 or 7)
| | | ------- Month (1 - 12)
| | --------- Day of month (1 - 31)
| ----------- Hour (0 - 23)
------------- Minute (0 - 59)
</code></pre>

<p>Source <a href=""http://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/"" rel=""noreferrer"">nixCraft</a>.</p>
","878647"
"How to convert timestamps to dates in Bash?","170454","","<p>I need a shell command or script that converts a Unix timestamp to a date. The input can come either from the first parameter or from stdin, allowing for the following usage patterns:</p>

<pre><code>ts2date 1267619929
</code></pre>

<p>and</p>

<pre><code>echo 1267619929 | ts2date
</code></pre>

<p>Both commands should output ""Wed Mar  3 13:38:49 2010"".</p>
","<p>On later versions of common Linux distributions you can use:</p>

<pre><code>date -d @1267619929
</code></pre>
","2371288"
"Expansion of variable inside single quotes in a command in Bash","170090","","<p>I want to run a command from a <em>bash shell script</em> which has single quotes and some other commands inside the single quotes and a variable.</p>

<p>e.g. <code>repo forall -c '....$variable'</code></p>

<p>In this format, $ is escaped and variable is not expanded.</p>

<p>I tried the following variations but they were rejected:</p>

<pre><code>repo forall -c '....""$variable"" '

repo forall -c "" '....$variable' ""

"" repo forall -c '....$variable' ""

repo forall -c ""'"" ....$variable ""'""
</code></pre>

<p>If I substitute the value in place of the variable the command is executed just fine.</p>

<p>Please tell me where am I going wrong</p>
","<p>Inside single quotes everything is preserved literally, without exception.</p>

<p>That means you have to close the quotes, insert something, and then re-enter again.</p>

<pre><code>'before'""$variable""'after'

'before'\''after'

'before'""'""'after'
</code></pre>

<p>As you can verify, each of the above lines is a single word to the shell. String concatenation is simply done by juxtaposition. Quotes (single or double quotes, depending on the situation) are used to disable interpretation of various special characters, like whitespace, <code>$</code>, <code>;</code>... For a good tutorial on quoting see Mark Reed's answer. Also relevant: <a href=""https://stackoverflow.com/questions/15783701/which-characters-need-to-be-escaped-in-bash-how-do-we-know-it/20053121"">Which characters need to be escaped in bash?</a></p>

<hr>

<p>Note that you should avoid building shell commands by procedurally concatenating strings and variables. This is a bad idea similar to using <code>eval</code> in most programming languages, or building SQL requests (SQL injection!).</p>

<p>Usually it is possible to have placeholders in the command, and to supply the command together with variables so that the callee can replace the placeholders in a safe way, instead of the caller concatenating strings, thereby mixing code and data.</p>

<p>For example, to run a shell command with arguments in an external shell:</p>

<pre><code>myvar=foo
/bin/sh -c 'echo ""argument 1 is: $1""' -- ""$myvar""
</code></pre>

<p>On the other hand, the following is very unsafe. DON'T DO THIS</p>

<pre><code>myvar='foo""; rm -rf /mypreciousdata; echo ""you were hacked'  # exploit
/bin/sh -c ""echo \""Argument 1 is: $myvar\""""
</code></pre>
","13802438"
"How can I do division with variables in a Linux shell?","170016","","<p>When I run commands in my shell as below, it returns an <code>expr: non-integer argument</code> error. Can someone please explain this to me?</p>

<pre><code>$ x=20
$ y=5
$ expr x / y 
expr: non-integer argument
</code></pre>
","<p>Those variables are shell variables.  To expand them as parameters to another program (<em>ie</em> <code>expr</code>), you need to use the <code>$</code> prefix:</p>

<pre><code>expr $x / $y
</code></pre>

<p>The reason it complained is because it thought you were trying to operate on alphabetic characters (<em>ie</em> non-integer)</p>

<p>If you are using the Bash shell, you can achieve the same result using expression syntax:</p>

<pre><code>echo $((x / y))
</code></pre>

<p>Or:</p>

<pre><code>z=$((x / y))
echo $z
</code></pre>
","18093887"
"In Unix, how do you remove everything in the current directory and below it?","168762","","<p>I know this will delete everything in a subdirectory and below it:</p>

<pre><code>rm -rf &lt;subdir-name&gt;
</code></pre>

<p>But how do you delete everything in the current directory as well as every subdirectory below it and the contents of all of those subdirectories?</p>
","<p>Practice safe computing.  Simply go up one level in the hierarchy and don't use a wildcard expression:</p>

<pre><code>cd ..; rm -rf -- &lt;dir-to-remove&gt;
</code></pre>

<p>The two dashes <code>--</code> tell <code>rm</code> that <code>&lt;dir-to-remove&gt;</code> is not a command-line option, even when it begins with a dash.</p>
","820784"
"How to check if a symlink exists","168135","","<p>I'm trying to check if a symlink exists in bash. Here's what I've tried.</p>

<pre><code>mda=/usr/mda
if [ ! -L $mda ]; then
  echo ""=&gt; File doesn't exist""
fi


mda='/usr/mda'
if [ ! -L $mda ]; then
  echo ""=&gt; File doesn't exist""
fi
</code></pre>

<p>However, that doesn't work. 
If '!' is left out, it never triggers. And if '!' is there, it triggers every time.</p>
","<p><code>-L</code> returns true if the ""file"" exists and is a symbolic link (the linked file may or may not exist). You want <code>-f</code> (returns true if file exists and is a regular file) or maybe just <code>-e</code> (returns true if file exists regardless of type).</p>

<p>According to the <a href=""http://linux.die.net/man/1/test"" rel=""noreferrer"">GNU manpage</a>, <code>-h</code> is identical to <code>-L</code>, but according to the <a href=""https://www.freebsd.org/cgi/man.cgi?test"" rel=""noreferrer"">BSD manpage</a>, it should not be used:</p>

<blockquote>
  <p><code>-h file</code>       True if file exists and is a symbolic link.  This operator is retained for compatibility with previous versions of this program. Do not rely on its existence; use -L instead.</p>
</blockquote>
","5767077"
"Getting an ""ambiguous redirect"" error","168009","","<p>The following line in my Bash script</p>

<pre><code> echo $AAAA""     ""$DDDD""         ""$MOL_TAG  &gt;&gt;  ${OUPUT_RESULTS}
</code></pre>

<p>gives me this error:</p>

<pre><code> line 46: ${OUPUT_RESULTS}: ambiguous redirect
</code></pre>

<p>Why?</p>
","<p>Bash can be pretty obtuse sometimes.</p>

<p>The following commands all return different error messages for basically the same error:</p>

<pre><code>$ echo hello &gt;
bash: syntax error near unexpected token `newline`

$ echo hello &gt; ${NONEXISTENT}
bash: ${NONEXISTENT}: ambiguous redirect

$ echo hello &gt; ""${NONEXISTENT}""
bash: : No such file or directory
</code></pre>

<p>Adding quotes around the variable seems to be a good way to deal with the ""ambiguous redirect"" message: You tend to get a better message when you've made a typing mistake -- and <strong>when the error is due to spaces in the filename, using quotes is the fix.</strong></p>
","7775870"
"How do I redirect output to a variable in shell?","167774","","<p>I have a script like that</p>

<pre><code>genhash --use-ssl -s $IP -p 443 --url $URL | grep MD5 | grep -c $MD5
</code></pre>

<p>I want to get stream generated by genhash in a variable. How do I redirect it into a variable <code>$hash</code> to compare inside a conditional?</p>

<pre><code>if [ $hash -ne 0 ]
  then echo KO
  exit 0
else echo -n OK
  exit 0
fi
</code></pre>
","<p>Use the <code>$( ... )</code> construct:</p>

<pre><code>hash=$(genhash --use-ssl -s $IP -p 443 --url $URL | grep MD5 | grep -c $MD5)
</code></pre>
","2559087"
"bash print array elements on separate lines","167654","","<p>How do I print the array element of a Bash array on separate lines? This one works, but surely there is a better way:</p>

<pre><code>$ my_array=(one two three)
$ for i in ${my_array[@]}; do echo $i; done
one
two
three
</code></pre>

<p>Tried this one but it did not work:</p>

<pre><code>$ IFS=$'\n' echo ${my_array[*]}
one two three
</code></pre>
","<p>Try doing this :</p>

<pre><code>$ printf '%s\n' ""${my_array[@]}""
</code></pre>

<p>The difference between <code>$@</code> and <code>$*</code>:</p>

<ul>
<li><p>Unquoted, the results are unspecified. In Bash, both expand to separate args
and then wordsplit and globbed.</p></li>
<li><p>Quoted, <code>""$@""</code> expands each element as a separate argument, while <code>""$*""</code>
expands to the args merged into one argument: <code>""$1c$2c...""</code> (where <code>c</code> is
the first char of <code>IFS</code>).</p></li>
</ul>

<p>You almost always want <code>""$@""</code>. Same goes for <code>""${arr[@]}""</code>.</p>

<p><strong>Always quote them!</strong></p>
","15692004"
"How to install Homebrew on OS X?","167450","","<p>I'm trying to install Homebrew on OS X.</p>

<p>According to the Homebrew site I should type</p>

<pre><code>brew install wget
</code></pre>

<p>and all I get is</p>

<pre><code>-bash: brew: command not found
</code></pre>

<p>So I've searched StackOverflow and found <a href=""https://stackoverflow.com/questions/14288682/error-installing-homebrew-brew-command-not-found"">this answer</a>.  The problem, however, is I don't see <code>brew</code> in <code>/usr/local/bin</code>.</p>

<p>So, I also added the following line to my <code>.bashrc</code> file</p>

<pre><code>export PATH=/usr/local/bin:$PATH
</code></pre>

<p>But I'm still getting the <code>command not found</code> error.</p>

<p>How do I get Homebrew installed on OS X?</p>
","<p>It's on the top of the <a href=""http://brew.sh/"" rel=""noreferrer"">Homebrew homepage</a>.</p>

<p>From a Terminal prompt:</p>

<pre><code>ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""
</code></pre>

<p>The command <code>brew install wget</code> is an example of how to use Homebrew to install another application (in this case, <code>wget</code>) after brew is already installed.</p>
","20381183"
"What does set -e mean in a bash script?","167356","","<p>I'm studying the content of this <strong>preinst</strong> file that the script executes before that package is unpacked from its Debian archive (.deb) file.</p>

<p>The script has the following code:</p>

<pre><code>#!/bin/bash
set -e
# Automatically added by dh_installinit
if [ ""$1"" = install ]; then
   if [ -d /usr/share/MyApplicationName ]; then
     echo ""MyApplicationName is just installed""
     return 1
   fi
   rm -Rf $HOME/.config/nautilus-actions/nautilus-actions.conf
   rm -Rf $HOME/.local/share/file-manager/actions/*
fi
# End automatically added section
</code></pre>

<p>My first query is about the line:</p>

<pre><code>set -e
</code></pre>

<p>I think that the rest of the script is pretty simple: It checks whether the Debian/Ubuntu package manager is executing an install operation. If it is, it checks whether my application has just been installed on the system. If it has, the script prints the message <strong>""MyApplicationName is just installed""</strong> and ends (<code>return 1</code> mean that ends with an “error”, doesn’t it?).</p>

<p>If the user is asking the Debian/Ubuntu package system to install my package, the script also deletes two directories.</p>

<p>Is this right or am I missing something?</p>
","<p>From <code>help set</code> :</p>

<pre><code>  -e  Exit immediately if a command exits with a non-zero status.
</code></pre>

<p>But it's not very reliable and considered as a bad practice, better use :</p>

<pre><code>trap 'do_something' ERR
</code></pre>

<p>to run <code>do_something</code> function when errors will occurs.</p>

<p>See <a href=""http://mywiki.wooledge.org/BashFAQ/105"" rel=""noreferrer"">http://mywiki.wooledge.org/BashFAQ/105</a></p>
","19622569"
"Check if a string matches a regex in Bash script","166967","","<p>One of the arguments that my script receives is a date in the following format: <code>yyyymmdd</code>.</p>

<p>I want to check if I get a valid date as an input.</p>

<p>How can I do this? I am trying to use a regex like: <code>[0-9]\{\8}</code></p>
","<p>You can say:</p>

<pre><code>[[ $date =~ ^[0-9]{8}$ ]] &amp;&amp; echo ""yes""
</code></pre>

<p>Or more accurate:</p>

<pre><code>[[ $date =~ ^[0-9]{4}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$ ]] &amp;&amp; echo ""yes""
#           |^^^^^^^^ ^^^^^^ ^^^^^^  ^^^^^^ ^^^^^^^^^^ ^^^^^^ |
#           |   |     ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^ |
#           |   |          |                   |              |
#           |   |           \                  |              |
#           | --year--   --month--           --day--          |
#           |          either 01...09      either 01..09     end of line
# start of line            or 10,11,12         or 10..29
#                                              or 30, 31
</code></pre>

<p>That is, you can define a regex in <em>bash</em> matching the format you want. This way you can do:</p>

<pre><code>[[ $date =~ ^regex$ ]] &amp;&amp; echo ""matched"" || echo ""did not match""
</code></pre>

<p>Note this is based on the solution by Aleks-Daniel Jakimenko in <a href=""https://stackoverflow.com/a/18748968/1983854"">User input date format verification in bash</a>.</p>

<hr>

<p>In shells such as <code>sh</code> or <a href=""http://fishshell.com/"" rel=""noreferrer""><code>fish</code></a> – less equipped then <code>bash</code> – you can use <code>grep</code>:</p>

<pre><code>(echo ""$date"" | grep -Eq  ^regex$) &amp;&amp; echo ""matched"" || echo ""did not match""
</code></pre>
","21112809"
"Bash: If/Else statement in one line","166950","","<p>I am trying to check if a process (assume it is called <code>some_process</code>) is running on a server. If it is, then echo 1, otherwise echo 0.</p>

<p>This is the command that I am using but it only works partially (more info below). Note that I need to write the script in one line.</p>

<pre><code>ps aux | grep some_proces[s] &gt; /tmp/test.txt &amp;&amp; if [ $? -eq 0 ]; then echo 1; else echo 0; fi
</code></pre>

<p><strong>Note:</strong> The <code>[s]</code> in <code>some_proces[s]</code> is to prevent <code>grep</code> from returning itself.</p>

<p>If <code>some_process</code> is running, then <code>""1""</code> gets echoed, which is fine. However, if <code>some_process</code> is not running, nothing gets echoed.</p>
","<p>There is no need to explicitly check <code>$?</code>.  Just do:</p>

<pre><code>ps aux | grep some_proces[s] &gt; /tmp/test.txt &amp;&amp; echo 1 || echo 0 
</code></pre>

<p>Note that this relies on echo not failing, which is certainly not guaranteed.  A more reliable way to write this is:</p>

<pre><code>if ps aux | grep some_proces[s] &gt; /tmp/test.txt; then echo 1; else echo 0; fi
</code></pre>
","17203203"
"How do I find all of the symlinks in a directory tree?","166920","","<p>I'm trying to find all of the symlinks within a directory tree for my website. I know that I can use <code>find</code> to do this but I can't figure out how to recursively check the directories.</p>

<p>I've tried this command:</p>

<pre><code>find /var/www/ -type l
</code></pre>

<p>&hellip; and later I discovered that the contents in <code>/var/www</code> are symlinks, so I've changed the command to: </p>

<pre><code>find -L /var/www/ -type l
</code></pre>

<p>it take a while to run, however I'm getting no matches.</p>

<p><strong>How do I get this to check subdirectories?</strong></p>
","<p>This will recursively traverse the <code>/path/to/folder</code> directory and list only the symbolic links:</p>

<pre><code>ls -lR /path/to/folder | grep ^l
</code></pre>

<p>If your intention is to follow the symbolic links too, you should use your <code>find</code> command but you should include the <code>-L</code> option; in fact the <code>find</code> man page says:</p>

<pre class=""lang-none prettyprint-override""><code>   -L     Follow symbolic links.  When find examines or prints information
          about files, the information used shall be taken from the  prop‐
          erties  of  the file to which the link points, not from the link
          itself (unless it is a broken symbolic link or find is unable to
          examine  the file to which the link points).  Use of this option
          implies -noleaf.  If you later use the -P option,  -noleaf  will
          still  be  in  effect.   If -L is in effect and find discovers a
          symbolic link to a subdirectory during its search, the subdirec‐
          tory pointed to by the symbolic link will be searched.

          When the -L option is in effect, the -type predicate will always
          match against the type of the file that a symbolic  link  points
          to rather than the link itself (unless the symbolic link is bro‐
          ken).  Using -L causes the -lname and -ilname predicates  always
          to return false.
</code></pre>

<p>Then try this:</p>

<pre><code>find -L /var/www/ -type l
</code></pre>

<p>This will probably work: I found in the <code>find</code> man page this diamond: if you are using the <code>-type</code> option you have to change it to the <code>-xtype</code> option:</p>

<pre class=""lang-none prettyprint-override""><code>          l      symbolic link; this is never true if the -L option or the
                 -follow option is in effect, unless the symbolic link  is
                 broken.  If you want to search for symbolic links when -L
                 is in effect, use -xtype.
</code></pre>

<p>Then:</p>

<pre><code>find -L /var/www/ -xtype l
</code></pre>
","8513194"
"use regular expression in if-condition in bash","166889","","<p>I wonder the general rule to use regular expression in if clause in bash? </p>

<p>Here is an example</p>

<pre><code>$ gg=svm-grid-ch  
$ if [[ $gg == *grid* ]] ; then echo $gg; fi  
svm-grid-ch  
$ if [[ $gg == ^....grid* ]] ; then echo $gg; fi  
$ if [[ $gg == ....grid* ]] ; then echo $gg; fi  
$ if [[ $gg == s...grid* ]] ; then echo $gg; fi  
$   
</code></pre>

<p>Why the last three fails to match?     </p>

<p>Hope you could give as many general rules as possible, not just for this example.</p>
","<p>When using a glob pattern, a question mark represents a single character and an asterisk represents a sequence of zero or more characters:</p>

<pre><code>if [[ $gg == ????grid* ]] ; then echo $gg; fi
</code></pre>

<p>When using a regular expression, a dot represents a single character and an asterisk represents zero or more of the preceding character. So ""<code>.*</code>"" represents zero or more of any character, ""<code>a*</code>"" represents zero or more ""a"", ""<code>[0-9]*</code>"" represents zero or more digits. Another useful one (among many) is the plus sign which represents one or more of the preceding character. So ""<code>[a-z]+</code>"" represents one or more lowercase alpha character (in the C locale - and some others).</p>

<pre><code>if [[ $gg =~ ^....grid.*$ ]] ; then echo $gg; fi
</code></pre>
","2348495"
"Linux: copy and create destination dir if it does not exist","166676","","<p>I want a command (or probably an option to cp) that creates the destination directory if it does not exist.</p>

<p>Example:</p>

<pre><code>cp -? file /path/to/copy/file/to/is/very/deep/there
</code></pre>
","<pre><code>test -d ""$d"" || mkdir -p ""$d"" &amp;&amp; cp file ""$d""
</code></pre>

<p>(there's no such option for <code>cp</code>).</p>
","1529965"
"How to find out line-endings in a text file?","165483","","<p>I'm trying to use something in bash to show me the line endings in a file printed rather than interpreted. The file is a dump from SSIS/SQL Server being read in by a Linux machine for processing.</p>

<ul>
<li><p>Are there any switches within <code>vi</code>, <code>less</code>, <code>more</code>, etc?</p></li>
<li><p>In addition to seeing the line-endings, I need to know what type of line end it is (<code>CRLF</code> or <code>LF</code>). How do I find that out?</p></li>
</ul>
","<p>You can use the <code>file</code> utility to give you an indication of the type of line endings.</p>

<p>Unix:</p>

<pre><code>$ file testfile1.txt
testfile.txt: ASCII text
</code></pre>

<p>""DOS"":</p>

<pre><code>$ file testfile2.txt
testfile2.txt: ASCII text, with CRLF line terminators
</code></pre>

<p>To convert from ""DOS"" to Unix:</p>

<pre><code>$ dos2unix testfile2.txt
</code></pre>

<p>To convert from Unix to ""DOS"":</p>

<pre><code>$ unix2dos testfile1.txt
</code></pre>

<p>Converting an already converted file has no effect so it's safe to run blindly (i.e. without testing the format first) although the usual disclaimers apply, as always.</p>
","3570574"
"How do I write a bash script to restart a process if it dies?","165101","","<p>I have a python script that'll be checking a queue and performing an action on each item:</p>

<pre><code># checkqueue.py
while True:
  check_queue()
  do_something()
</code></pre>

<p>How do I write a bash script that will check if it's running, and if not, start it.  Roughly the following pseudo code (or maybe it should do something like <code>ps | grep</code>?):</p>

<pre><code># keepalivescript.sh
if processidfile exists:
  if processid is running:
     exit, all ok

run checkqueue.py
write processid to processidfile
</code></pre>

<p>I'll call that from a crontab:</p>

<pre><code># crontab
*/5 * * * * /path/to/keepalivescript.sh
</code></pre>
","<p>Avoid PID-files, crons, or anything else that tries to evaluate processes that aren't their children.</p>

<p>There is a very good reason why in UNIX, you can ONLY wait on your children.  Any method (ps parsing, pgrep, storing a PID, ...) that tries to work around that is flawed and has gaping holes in it.  Just say <strong>no</strong>.</p>

<p>Instead you need the process that monitors your process to be the process' parent.  What does this mean?  It means only the process that <em>starts</em> your process can reliably wait for it to end.  In bash, this is absolutely trivial.</p>

<pre><code>until myserver; do
    echo ""Server 'myserver' crashed with exit code $?.  Respawning.."" &gt;&amp;2
    sleep 1
done
</code></pre>

<p>The above piece of bash code runs <code>myserver</code> in an <code>until</code> loop.  The first line starts <code>myserver</code> and waits for it to end.  When it ends, <code>until</code> checks its exit status.  If the exit status is <code>0</code>, it means it ended gracefully (which means you asked it to shut down somehow, and it did so successfully).  In that case we don't want to restart it (we just asked it to shut down!).  If the exit status is <em>not</em> <code>0</code>, <code>until</code> will run the loop body, which emits an error message on STDERR and restarts the loop (back to line 1) <em>after 1 second</em>.</p>

<p>Why do we wait a second?  Because if something's wrong with the startup sequence of <code>myserver</code> and it crashes immediately, you'll have a very intensive loop of constant restarting and crashing on your hands.  The <code>sleep 1</code> takes away the strain from that.</p>

<p>Now all you need to do is start this bash script (asynchronously, probably), and it will monitor <code>myserver</code> and restart it as necessary.  If you want to start the monitor on boot (making the server ""survive"" reboots), you can schedule it in your user's cron(1) with an <code>@reboot</code> rule.  Open your cron rules with <code>crontab</code>:</p>

<pre><code>crontab -e
</code></pre>

<p>Then add a rule to start your monitor script:</p>

<pre><code>@reboot /usr/local/bin/myservermonitor
</code></pre>

<hr>

<p>Alternatively; look at inittab(5) and /etc/inittab.  You can add a line in there to have <code>myserver</code> start at a certain init level and be respawned automatically.</p>

<hr>

<p>Edit.</p>

<p>Let me add some information on why <strong>not</strong> to use PID files.  While they are very popular; they are also very flawed and there's no reason why you wouldn't just do it the correct way.</p>

<p>Consider this:</p>

<ol>
<li><p>PID recycling (killing the wrong process):</p>

<ul>
<li><code>/etc/init.d/foo start</code>: start <code>foo</code>, write <code>foo</code>'s PID to <code>/var/run/foo.pid</code></li>
<li>A while later: <code>foo</code> dies somehow.</li>
<li>A while later: any random process that starts (call it <code>bar</code>) takes a random PID, imagine it taking <code>foo</code>'s old PID.</li>
<li>You notice <code>foo</code>'s gone: <code>/etc/init.d/foo/restart</code> reads <code>/var/run/foo.pid</code>, checks to see if it's still alive, finds <code>bar</code>, thinks it's <code>foo</code>, kills it, starts a new <code>foo</code>.</li>
</ul></li>
<li><p>PID files go stale.  You need over-complicated (or should I say, non-trivial) logic to check whether the PID file is stale, and any such logic is again vulnerable to <code>1.</code>.</p></li>
<li><p>What if you don't even have write access or are in a read-only environment?</p></li>
<li><p>It's pointless overcomplication; see how simple my example above is.  No need to complicate that, at all.</p></li>
</ol>

<p>See also: <a href=""https://stackoverflow.com/questions/25906020/are-pid-files-still-flawed-when-doing-it-right/25933330#25933330"">Are PID-files still flawed when doing it &#39;right&#39;?</a></p>

<p>By the way; <strong>even worse than PID files is parsing <code>ps</code>!</strong>  Don't ever do this.</p>

<ol>
<li><code>ps</code> is very unportable.  While you find it on almost every UNIX system; its arguments vary greatly if you want non-standard output.  And standard output is ONLY for human consumption, not for scripted parsing!</li>
<li>Parsing <code>ps</code> leads to a LOT of false positives.  Take the <code>ps aux | grep PID</code> example, and now imagine someone starting a process with a number somewhere as argument that happens to be the same as the PID you stared your daemon with!  Imagine two people starting an X session and you grepping for X to kill yours.  It's just all kinds of bad.</li>
</ol>

<p>If you don't want to manage the process yourself; there are some perfectly good systems out there that will act as monitor for your processes.  Look into <a href=""http://smarden.org/runit/"" rel=""noreferrer"">runit</a>, for example.</p>
","697064"
"Bash Script : what does #!/bin/bash mean?","165080","","<p>In bash script, what does <code>#!/bin/bash</code> at the 1st line mean ?</p>

<p><strong>UPDATE</strong>: Is there a difference between <code>#!/bin/bash</code> and <code>#!/bin/sh</code> ?</p>
","<p>That is called a <a href=""http://en.wikipedia.org/wiki/Shebang_%28Unix%29"">shebang</a>, it tells the shell what program to interpret the script with, when executed.</p>

<p>In your example, the script is to be interpreted and run by the <a href=""http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"">bash</a> shell.</p>

<p>Some other example shebangs are:</p>

<p>(From Wikipedia)</p>

<pre><code>#!/bin/sh — Execute the file using sh, the Bourne shell, or a compatible shell
#!/bin/csh — Execute the file using csh, the C shell, or a compatible shell
#!/usr/bin/perl -T — Execute using Perl with the option for taint checks
#!/usr/bin/php — Execute the file using the PHP command line interpreter
#!/usr/bin/python -O — Execute using Python with optimizations to code
#!/usr/bin/ruby — Execute using Ruby
</code></pre>

<p>and a few additional ones I can think off the top of my head, such as:</p>

<pre><code>#!/bin/ksh
#!/bin/awk
#!/bin/expect
</code></pre>

<p>In a script with the bash shebang, for example, you would write your code with bash syntax; whereas in a script with expect shebang, you would code it in expect syntax, and so on.</p>

<p><strong>Response to updated portion:</strong></p>

<p>It depends on what <code>/bin/sh</code> actually points to on your system. Often it is just a symlink to <code>/bin/bash</code>. Sometimes portable scripts are written with <code>#!/bin/sh</code> just to signify that it's a shell script, but it uses whichever shell is referred to by <code>/bin/sh</code> on that particular system (maybe it points to <code>/bin/bash</code>, <code>/bin/ksh</code> or <code>/bin/zsh</code>)</p>
","13872064"
"What is a unix command for deleting the first N characters of a line?","164675","","<p>For example, I might want to:</p>

<pre><code>tail -f logfile | grep org.springframework | &lt;command to remove first N characters&gt;
</code></pre>

<p>I was thinking that <code>tr</code> might have the ability to do this but I'm not sure.</p>
","<p>Use <code>cut</code>.  Eg. to strip the first 4 characters of each line (i.e. start on the 5th char):</p>

<pre><code>tail -f logfile | grep org.springframework | cut -c 5-
</code></pre>
","971906"
"How to loop through a directory recursively to delete files with certain extensions","164290","","<p>I need to loop through a directory recursively and remove all files with extension .pdf and.doc , I'm managing to loop through a directory recursively but not managing to filter the files with the above mentioned file extensions.</p>

<p>My code so far</p>

<pre><code>#/bin/sh

SEARCH_FOLDER=""/tmp/*""

for f in $SEARCH_FOLDER
do
    if [ -d ""$f"" ]
    then
        for ff in $f/*
        do      
            echo ""Processing $ff""
        done
    else
        echo ""Processing file $f""
    fi
done
</code></pre>

<p>I need help to complete the code, since I'm not getting anywhere.</p>
","<p><code>find</code> is just made for that.</p>

<pre><code>find /tmp -name '*.pdf' -or -name '*.doc' | xargs rm
</code></pre>
","4638900"
"Bash command to sum a column of numbers","163610","","<p>I want a bash command that I can pipe into that will sum a column of numbers. I just want a quick one liner that will do something essentially like this:</p>

<pre><code>cat FileWithColumnOfNumbers.txt | sum
</code></pre>
","<h1>Using existing file:</h1>

<pre><code>paste -sd+ infile | bc
</code></pre>

<h1>Using stdin:</h1>

<pre><code>&lt;cmd&gt; | paste -sd+ | bc
</code></pre>

<p>Edit:
With some <em>paste</em> implementations you need to be more explicit when reading from <em>stdin</em>:</p>

<p><code>&lt;cmd&gt; | paste -sd+ - | bc</code></p>
","3096575"
"How do I clear/delete the current line in terminal?","163487","","<p>If I'm using terminal and typing in a line of text for a command, is there a hotkey or any way to clear/delete that line?</p>

<p>For example, if my current line/command is something really long like:</p>

<pre><code>&gt; git log --graph --all --blah..uh oh i want to cancel and clear this line &lt;cursor is here now&gt;
</code></pre>

<p>Is there a hotkey or command to go from the above to:</p>

<pre><code>&gt;
</code></pre>

<p>?</p>

<p>Usually I will press the <kbd>&#8595;</kbd> key, and if my current line is a brand new one on the history, that will clear it.  But if I'm going through my command history via the <kbd>&#8593;</kbd> key and start editing or using those commands, <kbd>&#8595;</kbd> will only change the prompt to the next newest command in history, so it doesn't work here unless I press <kbd>&#8595;</kbd> multiple times.</p>
","<p>You can use <kbd>Ctrl</kbd>+<kbd>U</kbd> to clear up to the beginning.</p>

<p>You can also use <kbd>Ctrl</kbd>+<kbd>C</kbd> to cancel.</p>

<p>If you want to keep the history, you can use <kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>#</kbd> to make it a comment.</p>

<hr>

<p><sub><a href=""http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/"" rel=""noreferrer"">Bash Emacs Editing Mode Cheat Sheet</a></sub></p>
","9679852"
"get pid in shell (bash)","161138","","<p>I have problem with Bash, and I don't know why.<br>
Under shell, I enter:</p>

<pre><code>echo $$    ## print 2433
(echo $$)  ## also print 2433
(./getpid) ## print 2602
</code></pre>

<p>""getpid"" is a C program to get current pid, like:  </p>

<blockquote>
<pre><code>   int main() {
    printf(""%d"", (int)getpid());
    return 0;
   }
</code></pre>
</blockquote>

<p>What confuses me is that:  </p>

<ol>
<li>I think ""(command)"" is a sub-process (am i right?), and i think its pid should be different with its parent pid, but they are the same, why...  </li>
<li>when i use my program to show pid between parenthesis, the pid it shows is different, is it right?  </li>
<li>is '$$' something like macro?  </li>
</ol>

<p>Can you help me?  </p>
","<p><code>$$</code> is defined to return the process ID of the parent in a subshell; from the man page under ""Special Parameters"":</p>

<blockquote>
  <p>$      Expands to the process ID of the shell.  In a () subshell, it expands to the process ID of the current shell, not the subshell. </p>
</blockquote>

<p>In <code>bash</code> 4, you can get the process ID of the child with <code>BASHPID</code>.</p>

<pre><code>~ $ echo $$
17601
~ $ ( echo $$; echo $BASHPID )
17601
17634
</code></pre>
","21063837"
"Connect to sqlplus in a shell script and run SQL scripts","161052","","<p>I have a .sql file, which is a bunch of oracle pl/sql commands and I want to create a shell script to run these commands. </p>

<p>Suppose that <code>user/pass@server</code> is my credentials. What will be the shell script to do such a task?</p>
","<p>For example:</p>

<pre><code>sqlplus -s admin/password &lt;&lt; EOF
whenever sqlerror exit sql.sqlcode;
set echo off 
set heading off

@pl_script_1.sql
@pl_script_2.sql

exit;
EOF
</code></pre>
","10278103"
"How to join multiple lines of file names into one with custom delimiter?","160402","","<p>I would like to join the result of <code>ls -1</code> into one line and delimit it with whatever i want.</p>

<p>Are there any standard Linux commands I can use to achieve this?</p>
","<p>Similar to the very first option but omits the trailing delimiter </p>

<pre><code>ls -1 | paste -sd "","" -
</code></pre>
","6539865"
"bash regex match string","160092","","<p>I am trying to write a bash script that contains a function so when given a <code>.tar</code>, <code>.tar.bz2</code>, <code>.tar.gz</code> etc. file it uses tar with the relevant switches to decompress the file.</p>

<p>I am using if elif then statements which test the filename to see what it ends with and I cannot get it to match using regex metacharacters.</p>

<p>To save constantly rewriting the script I am using 'test' at the command line, I thought the statement below should work, I have tried every combination of brackets, quotes and metacharaters possible and still it fails.</p>

<pre><code>test sed-4.2.2.tar.bz2 = tar\.bz2$; echo $?
(this returns 1, false)
</code></pre>

<p>I'm sure the problem is a simple one and I've looked everywhere, yet I cannot fathom how to do it.  Does someone know how I can do this?</p>
","<p>To match regexes you need to use the <code>=~</code> operator.</p>

<p>Try this:</p>

<pre><code>[[ sed-4.2.2.tar.bz2 =~ tar.bz2$ ]] &amp;&amp; echo matched
</code></pre>

<p>Alternatively, you can use wildcards (instead of regexes) with the <code>==</code> operator:</p>

<pre><code>[[ sed-4.2.2.tar.bz2 == *tar.bz2 ]] &amp;&amp; echo matched
</code></pre>

<p>If portability is not a concern, I recommend using <code>[[</code> instead of <code>[</code> or <code>test</code> as it is safer and more powerful. See <a href=""http://mywiki.wooledge.org/BashFAQ/031"">What is the difference between test, [ and [[ ?</a> for details.</p>
","17421041"
"Check if a package is installed and then install it if it's not","160087","","<p>I'm working on a Ubuntu system and currently this is what I'm doing:</p>

<pre><code>if ! which command &gt; /dev/null; then
   echo -e ""Command not found! Install? (y/n) \c""
   read
   if ""$REPLY"" = ""y""; then
      sudo apt-get install command
   fi
fi
</code></pre>

<p>Is this what most people would do? Or is there a more elegant solution?</p>
","<p>To check if <code>packagename</code> was installed, type:</p>

<pre><code>dpkg -s &lt;packagename&gt;
</code></pre>

<p>You can also use <code>dpkg-query</code> that has a neater output for your purpose, and accepts wild cards, too.</p>

<pre><code>dpkg-query -l &lt;packagename&gt;
</code></pre>

<p>To find what package owns the <code>command</code>, try:</p>

<pre><code>dpkg -S `which &lt;command&gt;`
</code></pre>

<p>For further details, see article <em><a href=""http://www.cyberciti.biz/faq/find-out-if-package-is-installed-in-linux/"" rel=""noreferrer"">Find out if package is installed in Linux</a></em> and <a href=""http://www.cyberciti.biz/howto/question/linux/dpkg-cheat-sheet.php"" rel=""noreferrer"">dpkg cheat sheet</a>.</p>
","1298103"
"What linux shell command returns a part of a string?","159782","","<p>I want to find a linux command that can return a part of the string. In most programming languages, it's the <code>substr()</code> function. Does bash have any command that can be used for this purpose. I want to be able to do something like this...
<code>substr ""abcdefg"" 2 3</code> - prints <code>cde</code>.</p>

<hr>

<p>Subsequent similar question:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/428109/extract-substring-in-bash"">Extract substring in Bash</a></li>
</ul>
","<p>If you are looking for a shell utility to do something like that, you can use the <code>cut</code> command.</p>

<p>To take your example, try:</p>

<pre><code>echo ""abcdefg"" | cut -c3-5
</code></pre>

<p>which yields</p>

<pre><code>cde
</code></pre>

<p>Where <code>-cN-M</code> tells the cut command to return columns <code>N</code> to <code>M</code>, inclusive.</p>
","219427"
"How do I use grep to search the current directory for all files having the a string ""hello"" yet display only .h and .cc files?","159741","","<p>How do I use grep to search the current directory for any and all files containing the string ""hello"" and display only .h and .cc files?</p>
","<pre><code>grep -r --include=*.{cc,h} ""hello"" .
</code></pre>

<p>This reads: search recursively (in all sub directories also) for all .cc OR .h files that contain ""hello"" at this <code>.</code> (current) directory </p>

<p><a href=""https://stackoverflow.com/questions/221921/grep-exclude-include-syntax-do-not-grep-through-certain-files"">From another stackoverflow question</a></p>
","9217351"
"bash: replace an entire line in a text file","157990","","<p>I have a situation where I want a bash script to replace an entire line in a file.
The line number is always the same, so that can be a hard-coded variable.</p>

<p>I'm not trying to replace some sub-string in that line, I just want to replace that line entirely with a new line.</p>

<p>Are there any bash methods for doing this (or something simple that can be thrown into a .sh script).</p>
","<p>Not the greatest, but this should work:</p>

<pre><code>sed -i 'Ns/.*/replacement-line/' file.txt
</code></pre>

<p>where <code>N</code> should be replaced by your target line number. This replaces the line in the original file. To save the changed text in a different file, drop the <code>-i</code> option:</p>

<pre><code>sed 'Ns/.*/replacement-line/' file.txt &gt; new_file.txt
</code></pre>
","11145362"
"How to recursively find the latest modified file in a directory?","157858","","<p>It seems that <code>ls</code> doesn't sort the files correctly when doing a recursive call:</p>

<pre><code>ls -altR . | head -n 3
</code></pre>

<p>How can I find the most recently modified file in a directory (including subdirectories)?</p>
","<pre><code>find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d"" ""
</code></pre>

<p>For a huge tree, it might be hard for <code>sort</code> to keep everything in memory.</p>

<p><code>%T@</code> gives you the modification time like a unix timestamp, <code>sort -n</code> sorts numerically, <code>tail -1</code> takes the last line (highest timestamp), <code>cut -f2 -d"" ""</code> cuts away the first field (the timestamp) from the output.</p>

<p><strong>Edit:</strong> Just as <code>-printf</code> is probably GNU-only, ajreals usage of <code>stat -c</code> is too. Although it is possible to do the same on BSD, the options for formatting is different (<code>-f ""%m %N""</code> it would seem)</p>

<p>And I missed the part of plural; if you want more then <em>the</em> latest file, just bump up the tail argument.</p>
","4561987"
"How do I execute a bash script in Terminal?","157550","","<p>I have a script like:</p>

<pre><code>#!/bin/bash

echo Hellow world!
</code></pre>

<p>How do I execute this in Terminal?</p>
","<p><code>$prompt: /path/to/script</code> and hit enter. Note you need to make sure the script has execute permissions.</p>
","2177961"
"Suppress warning messages using mysql from within Terminal, but password written in bash script","157531","","<p>When I tried running the following command on MySQL from within Terminal:</p>

<pre><code>mysql -u $user -p$password -e ""statement""
</code></pre>

<p>The execution works as expected, but it always issues a warning:</p>

<blockquote>
  <p><em>Warning: Using a password on the command line interface can be insecure.</em> </p>
</blockquote>

<p>However, I have to conduct the statement above using an environment variable (<code>$password</code>) that stores my password, because I want to run the command iteratively in bash script from within Terminal, and I definitely don't like the idea of waiting a prompt showing up and forcing me to input my password 50 or 100 times in a single script. So here's my question:</p>

<ul>
<li><p>Is it feasible to suppress the warning? The command works properly as I stated, but the window becomes pretty messy when I loop over and run the command 50 or 100 times.</p></li>
<li><p>Should I obey the warning message and do NOT write my password in my script? If that's the case, then do I have to type in my password every time the prompt forces me to do so?</p></li>
</ul>

<p>Running <code>man mysql</code> doesn't help, saying only </p>

<blockquote>
  <p><code>--show-warnings</code><br>
  Cause warnings to be shown after each statement if there are any. This option applies to interactive and batch mode.</p>
</blockquote>

<p>and mentions nothing about how to turn off the functionality, if I'm not missing something.</p>

<p>I'm on OS X 10.9.1 Mavericks and use MySQL 5.6 from homebrew.</p>
","<p>If your MySQL client/server version is a 5.6.x a way to avoid the WARNING message are using the <strong><a href=""http://dev.mysql.com/doc/refman/5.6/en/mysql-config-editor.html"" rel=""noreferrer"">mysql_config_editor</a></strong> tools:</p>

<pre><code>mysql_config_editor set --login-path=local --host=localhost --user=username --password
</code></pre>

<p>Then you can use in your shell script:</p>

<pre><code>mysql --login-path=local  -e ""statement""
</code></pre>

<p>Instead of:</p>

<pre><code>mysql -u username -p pass -e ""statement""
</code></pre>
","20854048"
"Using the passwd command from within a shell script","157096","","<p>I'm writing a shell script to automatically add a new user and update their password. I don't know how to get passwd to read from the shell script instead of interactively prompting me for the new password. My code is below.</p>

<pre>adduser $1
passwd $1
$2
$2</pre>
","<p>from ""<code>man 1 passwd</code>"":</p>

<pre><code>   --stdin
          This option is used to indicate that passwd should read the new
          password from standard input, which can be a pipe.
</code></pre>

<p>So in your case</p>

<pre><code>adduser ""$1""
echo ""$2"" | passwd ""$1"" --stdin
</code></pre>

<p>[<strong>Update</strong>] a few issues were brought up in the comments:</p>

<p>Your <code>passwd</code> command may not have a <code>--stdin</code> option: use the <code>chpasswd</code>
utility instead, as suggested by <a href=""https://stackoverflow.com/questions/714915/using-the-passwd-command-from-within-a-shell-script/715802#715802"">ashawley</a>.</p>

<p>If you use a shell other than bash, ""echo"" might not be a builtin command,
and the shell will call <code>/bin/echo</code>. This is insecure because the password
will show up in the process table and can be seen with tools like <code>ps</code>.</p>

<p>In this case, you should use another scripting language. Here is an example in Perl:</p>

<pre><code>#!/usr/bin/perl -w
open my $pipe, '|chpasswd' or die ""can't open pipe: $!"";
print {$pipe} ""$username:$password"";
close $pipe
</code></pre>
","714934"
"How to use mod operator in bash?","155001","","<p>I'm trying a line like this:</p>

<pre><code>for i in {1..600}; do wget http://mydomain.com/search/link $i % 5; done;
</code></pre>

<p>What I'm trying to get as output is:</p>

<pre><code>wget http://mydomain.com/search/link0
wget http://mydomain.com/search/link1
wget http://mydomain.com/search/link2
wget http://mydomain.com/search/link3
wget http://mydomain.com/search/link4
wget http://mydomain.com/search/link0
</code></pre>

<p>But what I'm actually getting is just:</p>

<pre><code>    wget http://mydomain.com/search/link
</code></pre>
","<p>Try the following:</p>

<pre><code> for i in {1..600}; do echo wget http://mydomain.com/search/link$(($i % 5)); done
</code></pre>

<p>The <code>$((    ))</code> syntax does an <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Arithmetic-Expansion"" rel=""noreferrer"">arithmetic evaluation</a> of the contents.</p>
","5688592"
"How to redirect both stdout and stderr to a file","154383","","<p>I am running a bash script that creates a log file for the execution of the command</p>

<p>I use the following</p>

<pre><code>Command1 &gt;&gt; log_file
Command2 &gt;&gt; log_file
</code></pre>

<p>This only sends the standard output and not the standard error which appears on the terminal.</p>

<p>Can I log both the stderr and stdout logged to a file?</p>
","<p>If you want to log to the same file:</p>

<pre><code>command1 &gt;&gt; log_file 2&gt;&amp;1
</code></pre>

<p>If you want different files:</p>

<pre><code>command1 &gt;&gt; log_file 2&gt;&gt; err_file
</code></pre>
","7526988"
"Automatic exit from bash shell script on error","153885","","<p>I've been writing some shell script and I would find it useful if there was the ability to halt the execution of said shell script if any of the commands failed. See below for an example:</p>

<pre><code>#!/bin/bash  

cd some_dir  

./configure --some-flags  

make  

make install
</code></pre>

<p>So in this case if the script can't change to the indicated directory then it would certainly not want to do a ./configure afterwards if it fails.</p>

<p>Now I'm well aware that I could have an if check for each command (which I think is a hopeless solution), but is there a global setting to make the script exit if one of the commands fails?</p>
","<p>Use the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin"" rel=""noreferrer""><code>set -e</code></a> builtin:</p>

<pre><code>#!/bin/bash
set -e
# Any subsequent(*) commands which fail will cause the shell script to exit immediately
</code></pre>

<p>Alternatively, you can pass <code>-e</code> on the command line:</p>

<pre><code>bash -e my_script.sh
</code></pre>

<p>You can also disable this behavior with <code>set +e</code>.</p>

<p>(*) Note:</p>

<blockquote>
  <p>The shell does <em>not</em> exit if the command that fails is part of the
  command list immediately following a <strong>while</strong> or <strong>until</strong> keyword,
  part of the test following the <strong>if</strong> or <strong>elif</strong> reserved words, part
  of any command executed in a <strong>&amp;&amp;</strong> or <strong>||</strong> list except the command
  following the final <strong>&amp;&amp;</strong> or <strong>||</strong>, any command in a pipeline but
  the last, or if the command's return value is being inverted with
  <strong>!</strong></p>
</blockquote>

<p>(from <code>man bash</code>)</p>
","2871034"
"How to parse XML using shellscript?","153795","","<p>I would like to know what would be the best way to parse an XML file using shellscript ?</p>

<ul>
<li>Should one do it by hand ?</li>
<li>Does third tiers library exist ?</li>
</ul>

<p>If you already made it if you could let me know how did you manage to do it</p>
","<p>You could try <a href=""http://xmlsoft.org/xmllint.html"" rel=""noreferrer"">xmllint</a></p>

<blockquote>
  <p>The xmllint program parses one or more
  XML files, specified on the command
  line as xmlfile. It prints various
  types of output, depending upon the
  options selected. It is useful for
  detecting errors both in XML code and
  in the XML parser itse</p>
</blockquote>

<p>It allows you select elements in the XML doc by xpath, using the --pattern option.</p>

<p>On Mac OS X (Yosemite), it is installed by default.<br>
On Ubuntu, if it is not already installed, you can run <code>apt-get install libxml2-utils</code></p>
","4683119"
"How do you append to an already existing string?","153147","","<p>I want append to a string so that every time I loop over it will add say ""test"" to the string.</p>

<p>Like in PHP you would do:</p>

<pre><code>$teststr = ""test1\n""
$teststr .= ""test2\n""
echo = ""$teststr""
</code></pre>

<p>echos:</p>

<pre><code>test1
test2
</code></pre>

<p>But I need to do this in a shell script</p>
","<p>In classic sh, you have to do something like:</p>

<pre><code>s=test1
s=""${s}test2""
</code></pre>

<p>(there are lots of variations on that theme, like <code>s=""$s""""test2""</code>)</p>

<p>In bash, you can use +=:</p>

<pre><code>s=test1
s+=test2
</code></pre>
","2250199"
"How to remove all white spaces from a given text file","153094","","<p>I want to remove all the white spaces from a given text file.  Is there any shell command available for this ? Or, how to use <code>sed</code> for this purpose.</p>

<p>I want something like below:</p>

<blockquote>
  <p>$ cat hello.txt | sed ....</p>
</blockquote>

<p>I tried this : <code>cat hello.txt | sed 's/ //g'</code> .But it removes only spaces, not tabs.</p>
","<pre><code>$ man tr
NAME
    tr - translate or delete characters

SYNOPSIS
    tr [OPTION]... SET1 [SET2]

DESCRIPTION
   Translate, squeeze, and/or delete characters from standard 
   input, writing to standard output.
</code></pre>

<p>In order to wipe all whitespace including newlines you can try:</p>

<pre><code>cat file.txt | tr -d "" \t\n\r"" 
</code></pre>

<p>You can also use the character classes defined by tr (credits to <a href=""https://stackoverflow.com/users/315868/htompkins"">htompkins</a> comment):</p>

<pre><code>cat file.txt | tr -d ""[:space:]""
</code></pre>

<p>For example, in order to wipe just horizontal white space:</p>

<pre><code>cat file.txt | tr -d ""[:blank:]""
</code></pre>
","9953487"
"How to tell if a string is not defined in a bash shell script?","151890","","<p>If I want to check for the null string I would do</p>

<pre><code>[ -z $mystr ]
</code></pre>

<p>but what if I want to check whether the variable has been defined at all?  Or is there no distinction in bash scripting?</p>
","<p>I think the answer you are after is implied (if not stated) by <a href=""https://stackoverflow.com/users/5190/vinko-vrsalovic"">Vinko</a>'s <a href=""https://stackoverflow.com/a/228552/15168"">answer</a>, though it is not spelled out simply.  To distinguish whether VAR is set but empty or not set, you can use:</p>

<pre><code>if [ -z ""${VAR+xxx}"" ]; then echo VAR is not set at all; fi
if [ -z ""$VAR"" ] &amp;&amp; [ ""${VAR+xxx}"" = ""xxx"" ]; then echo VAR is set but empty; fi
</code></pre>

<p>You probably can combine the two tests on the second line into one with:</p>

<pre><code>if [ -z ""$VAR"" -a ""${VAR+xxx}"" = ""xxx"" ]; then echo VAR is set but empty; fi
</code></pre>

<p>However, if you read the documentation for Autoconf, you'll find that they do not recommend combining terms with '<code>-a</code>' and do recommend using separate simple tests combined with <code>&amp;&amp;</code>.  I've not encountered a system where there is a problem; that doesn't mean they didn't used to exist (but they are probably extremely rare these days, even if they weren't as rare in the distant past).</p>

<p>You can find the details of these, and other related <a href=""https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion"" rel=""nofollow noreferrer"">shell parameter expansions</a>, the <a href=""https://www.gnu.org/software/bash/manual/bash.html#index-_005b"" rel=""nofollow noreferrer""><code>test</code> or <code>[</code></a> command and <a href=""https://www.gnu.org/software/bash/manual/bash.html#Bash-Conditional-Expressions"" rel=""nofollow noreferrer"">conditional expressions</a> in the Bash manual.</p>

<hr>

<p>I was recently asked by email about this answer with the question:</p>

<blockquote>
  <p>You use two tests, and I understand the second one well, but not the first one. More precisely I don't understand the need for variable expansion</p>

<pre><code>if [ -z ""${VAR+xxx}"" ]; then echo VAR is not set at all; fi
</code></pre>
  
  <p>Wouldn't this accomplish the same?</p>

<pre><code>if [ -z ""${VAR}"" ]; then echo VAR is not set at all; fi
</code></pre>
</blockquote>

<p>Fair question - the answer is 'No, your simpler alternative does not do the same thing'.</p>

<p>Suppose I write this before your test:</p>

<pre><code>VAR=
</code></pre>

<p>Your test will say ""VAR is not set at all"", but mine will say (by implication because it echoes nothing) ""VAR is set but its value might be empty"".  Try this script:</p>

<pre><code>(
unset VAR
if [ -z ""${VAR+xxx}"" ]; then echo JL:1 VAR is not set at all; fi
if [ -z ""${VAR}"" ];     then echo MP:1 VAR is not set at all; fi
VAR=
if [ -z ""${VAR+xxx}"" ]; then echo JL:2 VAR is not set at all; fi
if [ -z ""${VAR}"" ];     then echo MP:2 VAR is not set at all; fi
)
</code></pre>

<p>The output is:</p>

<pre><code>JL:1 VAR is not set at all
MP:1 VAR is not set at all
MP:2 VAR is not set at all
</code></pre>

<p>In the second pair of tests, the variable is set, but it is set to the empty value.  This is the distinction that the <code>${VAR=value}</code> and <code>${VAR:=value}</code> notations make.  Ditto for <code>${VAR-value}</code> and <code>${VAR:-value}</code>, and <code>${VAR+value}</code> and <code>${VAR:+value}</code>, and so on.</p>

<hr>

<p>As <a href=""https://stackoverflow.com/users/14731/gili"">Gili</a> points out in his <a href=""https://stackoverflow.com/a/20003892"">answer</a>, if you  run <code>bash</code> with the <code>set -o nounset</code> option, then the basic answer above fails with <code>unbound variable</code>.  It is easily remedied:</p>

<pre><code>if [ -z ""${VAR+xxx}"" ]; then echo VAR is not set at all; fi
if [ -z ""${VAR-}"" ] &amp;&amp; [ ""${VAR+xxx}"" = ""xxx"" ]; then echo VAR is set but empty; fi
</code></pre>

<p>Or you could cancel the <code>set -o nounset</code> option with <code>set +u</code> (<code>set -u</code> being equivalent to <code>set -o nounset</code>).</p>
","230593"
"'\r': command not found - .bashrc / .bash_profile","151408","","<p>I have windows, using Cygwin, trying to set <code>JAVA_HOME</code> permanently through my <code>.bashrc</code> file. </p>

<p><strong>.bashrc:</strong></p>

<pre><code>export PATH=""$JAVA_HOME/bin:$PATH""  
export JAVA_HOME=$JAVA_HOME:""/cygdrive/c/Program Files (x86)/Java/jdk1.7.0_05""
</code></pre>

<p><strong>.bash_profile:</strong></p>

<pre><code>if [ -f ~/.bashrc ]; then
   source ~/.bashrc
fi
</code></pre>

<p><strong>running cygwin:</strong></p>

<pre><code>-bash: $'\377\376if': command not found
-bash: $'then\r': command not found
: No such file or directorysu//.bashrc
-bash: /cygdrive/c/Users/jhsu//.bash_profile: line 3: syntax error near unexpected token `fi'
-bash: /cygdrive/c/Users/jhsu//.bash_profile: line 3: `fi'
</code></pre>

<p>I am not sure if I took the commands from a tutorial that was meant for another system or if I am missing a step.  Or whitespace is causing my commands not to run properly. </p>

<p>I've looked at multiple similar questions but I haven't found one where the question has my error exactly. </p>

<hr>

<p>My home path:</p>

<pre><code>$ echo $HOME
/cygdrive/c/Users/jhsu
$ echo ~
/cygdrive/c/Users/jhsu/
</code></pre>

<p>So I believe the files should be placed in the correct spot.</p>
","<p><strong>When all else fails in Cygwin...</strong></p>

<p>Try running the <code>dos2unix</code> command on the file in question.</p>

<p>It might help when you see error messages like this: </p>

<p><code>-bash: '\r': command not found</code></p>

<p>Windows style newline characters can cause issues in Cygwin.</p>

<p>The <code>dos2unix</code> command modifies newline characters so they are Unix / Cygwin compatible.</p>

<p><strong>CAUTION:</strong> the dos2unix command modifies files <em>in place</em>, so take precaution if necessary.</p>

<p>If you need to keep the original file, you should back it up first.</p>

<p><strong>Note for Mac users:</strong> The <code>dos2unix</code> command does not exist on Mac OS X.</p>

<p>Check out <a href=""https://stackoverflow.com/q/1251999/778118"">this answer</a> for a variety of solutions using different tools.</p>

<hr>

<p>There is also a <code>unix2dos</code> command that does the reverse:</p>

<p>It modifies Unix newline characters so they're compatible with Windows tools.</p>

<p>If you open a file with Notepad and all the lines run together, try <code>unix2dos filename</code>.</p>
","11617204"
"UNIX export command","150882","","<p>I am trying to understand the use of <code>export</code> command. </p>

<p>I tried using <code>man export</code>, but there is no manual for this command. </p>

<p>Can anyone please help me out understanding the use of <code>export</code> in UNIX?</p>
","<p>When you execute a program the child program inherits its environment variables from the parent. For instance if <code>$HOME</code> is set to <code>/root</code> in the parent then the child's <code>$HOME</code> variable is also set to <code>/root</code>.</p>

<p>This only applies to environment variable that are marked for export. If you set a variable at the command-line like</p>

<pre><code>$ FOO=""bar""
</code></pre>

<p>That variable will not be visible in child processes. Not unless you export it:</p>

<pre><code>$ export FOO
</code></pre>

<p>You can combine these two statements into a single one in bash (but not in old-school sh):</p>

<pre><code>$ export FOO=""bar""
</code></pre>

<p>Here's a quick example showing the difference between exported and non-exported variables. To understand what's happening know that <code>sh -c</code> creates a child shell process which inherits the parent shell's environment.</p>

<pre><code>$ FOO=bar
$ sh -c 'echo $FOO'

$ export FOO
$ sh -c 'echo $FOO'
bar
</code></pre>

<p><strong>Note:</strong> To get help on shell built-in commands use <code>help export</code>. Shell built-ins are commands that are part of your shell rather than independent executables like <code>/bin/ls</code>.</p>
","7328289"
"How to set environment variable for everyone under my linux system?","150774","","<p>Can I have certain settings that are universal for all my users?</p>
","<p>As well as <code>/etc/profile</code> which others have mentioned, some Linux systems now use a directory <code>/etc/profile.d/</code>; any <code>.sh</code> files in there will be sourced by <code>/etc/profile</code>. It's slightly neater to keep your custom environment stuff in these files than to just edit <code>/etc/profile</code>.</p>
","1641531"
"How to zero pad a sequence of integers in bash so that all have the same width?","150714","","<p>I need to loop some values,</p>

<pre><code>for i in $(seq $first $last)
do
    does something here
done
</code></pre>

<p>For <code>$first</code> and <code>$last</code>, i need it to be of fixed length 5. So if the input is <code>1</code>, i need to add zeros in front such that it becomes <code>00001</code>. It loops till <code>99999</code> for example, but the length has to be 5.</p>

<p>E.g.: <code>00002</code>, <code>00042</code>, <code>00212</code>, <code>012312</code> and so forth.</p>

<p>Any idea on how i can do that? </p>
","<p>In your specific case though it's probably easiest to use the <code>-f</code> flag to <code>seq</code> to get it to format the numbers as it outputs the list.  For example:</p>

<pre><code>for i in $(seq -f ""%05g"" 10 15)
do
  echo $i
done
</code></pre>

<p>will produce the following output:</p>

<pre><code>00010
00011
00012
00013
00014
00015
</code></pre>

<p>More generally, <code>bash</code> has <code>printf</code> as a built-in so you can pad output with zeroes as follows:</p>

<pre><code>$ i=99
$ printf ""%05d\n"" $i
00099
</code></pre>

<p>You can use the <code>-v</code> flag to store the output in another variable:</p>

<pre><code>$ i=99
$ printf -v j ""%05d"" $i
$ echo $j
00099
</code></pre>

<p>Notice that <code>printf</code> supports a slightly different format to <code>seq</code> so you need to use <code>%05d</code> instead of <code>%05g</code>.</p>
","8789815"
"How to pass in password to pg_dump?","150599","","<p>I'm trying to create a cronjob to back up my database every night before something catastrophic happens. It looks like this command should meet my needs:</p>

<pre><code>0 3 * * * pg_dump dbname | gzip &gt; ~/backup/db/$(date +%Y-%m-%d).psql.gz
</code></pre>

<p>Except after running that, it expects me to type in a password. I can't do that if I run it from cron. How can I pass one in automatically?</p>
","<p>Create a .pgpass file in the home directory of the account that pg_dump will run as: see <a href=""http://www.postgresql.org/docs/current/static/libpq-pgpass.html"" rel=""noreferrer"">http://www.postgresql.org/docs/current/static/libpq-pgpass.html</a> for details of the format (including the last para where it explains it will be ignored if you don't set the mode to 0600).</p>
","2893979"
"How to get arguments with flags in bash script","149377","","<p>I know that I can easily get positioned parameters like this in bash:</p>

<p><code>$0</code> or <code>$1</code></p>

<p>I want to be able to use flag options like this to specify for what each parameter is used:</p>

<pre><code>mysql -u user -h host
</code></pre>

<p>What is the best way to get <code>-u param</code> value and <code>-h param</code> value by flag instead of by position?</p>
","<p>This is the idiom I usually use:</p>

<pre><code>while test $# -gt 0; do
        case ""$1"" in
                -h|--help)
                        echo ""$package - attempt to capture frames""
                        echo "" ""
                        echo ""$package [options] application [arguments]""
                        echo "" ""
                        echo ""options:""
                        echo ""-h, --help                show brief help""
                        echo ""-a, --action=ACTION       specify an action to use""
                        echo ""-o, --output-dir=DIR      specify a directory to store output in""
                        exit 0
                        ;;
                -a)
                        shift
                        if test $# -gt 0; then
                                export PROCESS=$1
                        else
                                echo ""no process specified""
                                exit 1
                        fi
                        shift
                        ;;
                --action*)
                        export PROCESS=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -o)
                        shift
                        if test $# -gt 0; then
                                export OUTPUT=$1
                        else
                                echo ""no output dir specified""
                                exit 1
                        fi
                        shift
                        ;;
                --output-dir*)
                        export OUTPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                *)
                        break
                        ;;
        esac
done
</code></pre>

<p>Key points are:</p>

<ul>
<li><code>$#</code> is the number of arguments</li>
<li>while loop looks at all of the arguments supplied, matching on their values inside a case statement</li>
<li>shift takes the first one away. You can shift multiple times inside of a case statement to take multiple values.</li>
</ul>
","7069755"
"Shell script to delete directories older than n days","148908","","<p>I have directories named as:</p>

<pre><code>2012-12-12
2012-10-12
2012-08-08
</code></pre>

<p>How would I delete the directories that are older than 10 days with a bash shell script?</p>
","<p>This will do it recursively for you:</p>

<pre><code>find /path/to/base/dir/* -type d -ctime +10 -exec rm -rf {} \;
</code></pre>

<p><strong>Explanation:</strong></p>

<ul>
<li><code>find</code>: the unix command for finding files / directories / links etc.</li>
<li><code>/path/to/base/dir</code>: the directory to start your search in.</li>
<li><code>-type d</code>: only find directories</li>
<li><code>-ctime +10</code>: only consider the ones with modification time older than 10 days</li>
<li><code>-exec ... \;</code>: for each such result found, do the following command in <code>...</code></li>
<li><code>rm -rf {}</code>: recursively force remove the directory; the <code>{}</code> part is where the find result gets substituted into from the previous part.</li>
</ul>

<hr>

<p><strong>Alternatively, use:</strong></p>

<pre><code>find /path/to/base/dir/* -type d -ctime +10 | xargs rm -rf
</code></pre>

<p>Which is a bit more efficient, because it amounts to:</p>

<pre><code>rm -rf dir1 dir2 dir3 ...
</code></pre>

<p>as opposed to:</p>

<pre><code>rm -rf dir1; rm -rf dir2; rm -rf dir3; ...
</code></pre>

<p>as in the <code>-exec</code> method.</p>

<p><strong>Note:</strong> Also see @MarkReed's comment below regarding preferred usage with modern version of <code>find</code>.</p>
","13869000"
"How to merge every two lines into one from the command line?","148378","","<p>I have a text file with the following format. The first line is the ""KEY"" and the second line is the ""VALUE"". </p>

<pre><code>KEY 4048:1736 string
3
KEY 0:1772 string
1
KEY 4192:1349 string
1
KEY 7329:2407 string
2
KEY 0:1774 string
1
</code></pre>

<p>I need the value in the same line as of the key. So the output should look like this...</p>

<pre><code>KEY 4048:1736 string 3
KEY 0:1772 string 1
KEY 4192:1349 string 1
KEY 7329:2407 string 2
KEY 0:1774 string 1
</code></pre>

<p>It will be better if I could use some delimiter like <code>$</code> or <code>,</code>:</p>

<pre><code>KEY 4048:1736 string , 3
</code></pre>

<p>How do I merge two lines into one?</p>
","<p>awk:</p>

<pre><code>awk 'NR%2{printf ""%s "",$0;next;}1' yourFile
</code></pre>

<p>note, there is an empty line at the end of output.</p>

<p>sed:</p>

<pre><code>sed 'N;s/\n/ /' yourFile
</code></pre>
","9605559"
"How do I check syntax in bash without running the script?","148312","","<p>Is it possible to check a bash script syntax without executing it?</p>

<p>Using Perl, I can run <code>perl -c 'script name'</code>. Is there any equivalent command for bash scripts?</p>
","<pre><code>bash -n scriptname
</code></pre>

<p>Perhaps an obvious caveat: this validates syntax but won't check if your bash script tries to execute a command that isn't in your path, like <code>ech hello</code> instead of <code>echo hello</code>.</p>
","171932"
"How to print last two columns using awk","147570","","<p>All I want is the last two columns printed.</p>
","<p>You can make use of variable <code>NF</code> which  is set to the total number of fields in the input record:</p>

<pre><code>awk '{print $(NF-1),""\t"",$NF}' file
</code></pre>

<p>this assumes that you have at least 2 fields.</p>
","4304949"
"How to determine SSL cert expiration date from a PEM encoded certificate?","146838","","<p>If I have the actual file and a Bash shell in Mac or Linux, how can I query the cert file for when it will expire?  Not a web site, but actually the certificate file itself, assuming I have the csr, key, pem and chain files.</p>
","<p>With <code>openssl</code>:</p>

<pre><code>openssl x509 -enddate -noout -in file.pem
</code></pre>

<p>The output is on the form:</p>

<pre><code>notAfter=Nov  3 22:23:50 2014 GMT
</code></pre>

<p>Also see <a href=""https://stackoverflow.com/a/31718838/1899640"">MikeW's answer</a> for how to easily check whether the certificate has expired or not, or whether it will within a certain time period, without having to parse the date above.</p>
","21297927"
"Viewing full output of PS command","146317","","<p>when I run <code>ps -aux</code> command on my linux server, to which I connected using putty, few processes are too long to fit in my current window width. Is there an alternative?</p>

<p>-- Update --</p>

<p>I am sorry for downgrading,I thought others won't find the answer useful too, so I downgraded.</p>

<p>Here is the info you asked for.</p>

<pre><code>hadoop-user@hadoop-desk:~$ echo $TERM
xterm

hadoop-user@hadoop-desk:~$ stty -a
speed 38400 baud; rows 47; columns 158; line = 0;
intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;; swtch = &lt;undef&gt;; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R;
werase = ^W; lnext = ^V; flush = ^O; min = 1; time = 0;
-parenb -parodd cs8 -hupcl -cstopb cread -clocal -crtscts
-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc -ixany -imaxbel -iutf8
opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0
isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke

hadoop-user@hadoop-desk:~$ echo $COLUMNS
158
</code></pre>
","<p>It is likely that you're using a pager such as <code>less</code> or <code>most</code> since the output of <code>ps aux</code> is longer than a screenful. If so, the following options will cause (or force) long lines to wrap instead of being truncated.</p>

<pre><code>ps aux | less -+S

ps aux | most -w
</code></pre>

<p>If you use either of the following commands, lines won't be wrapped but you can use your arrow keys or other movement keys to scroll left and right.</p>

<pre><code>ps aux | less -S    # use arrow keys, or Esc-( and Esc-), or Alt-( and Alt-) 

ps aux | most       # use arrow keys, or &lt; and &gt; (Tab can also be used to scroll right)
</code></pre>

<p>Lines are always wrapped for <code>more</code> and <code>pg</code>.</p>

<p>When <code>ps aux</code> is used in a pipe, the <code>w</code> option is unnecessary since <code>ps</code> only uses screen width when output is to the terminal.</p>
","2160263"
"How do you echo a 4-digit Unicode character in Bash?","146269","","<p>I'd like to add the Unicode skull and crossbones to my shell prompt (specifically the 'SKULL AND CROSSBONES' (U+2620)), but I can't figure out the magic incantation to make echo spit it, or any other, 4-digit Unicode character. Two-digit one's are easy. For example, echo -e ""\x55"", .</p>

<p>In addition to the answers below it should be noted that, obviously, your terminal needs to support Unicode for the output to be what you expect. gnome-terminal does a good job of this, but it isn't necessarily turned on by default. Go to Terminal-> Set Character Encoding and choose Unicode (UTF-8).</p>
","<p>In UTF-8 it's actually 6 digits (or 3 bytes).</p>

<pre><code>$ printf '\xE2\x98\xA0'
☠
</code></pre>

<p>To check how it's encoded by the console, use hexdump:</p>

<pre><code>$ printf ☠ | hexdump
0000000 98e2 00a0                              
0000003
</code></pre>
","602924"
"How to insert a text at the beginning of a file?","146121","","<p>So far I've been able to find how to add a line at the beginning of a file but that's not exactly what I want. I'll show it on a example</p>

<p><strong>File content</strong></p>

<pre><code>some text at the beginning
</code></pre>

<p><strong>Result</strong></p>

<pre><code>&lt;added text&gt; some text at the beginning
</code></pre>

<p>It's similar but I don't want to create any new line with it...</p>

<p>I would like to do this with <code>sed</code> if possible.</p>
","<p><code>sed</code> can operate on an address:</p>

<pre><code>$ sed -i '1s/^/&lt;added text&gt; /' file
</code></pre>

<p>What is this magical <code>1s</code> you see on every answer here? <a href=""https://www.gnu.org/software/sed/manual/html_node/Addresses.html"" rel=""noreferrer"">Line addressing!</a>.</p>

<p>Want to add <code>&lt;added text&gt;</code> on the first 10 lines?</p>

<pre><code>$ sed -i '1,10s/^/&lt;added text&gt; /' file
</code></pre>

<p>Or you can use <a href=""http://www.gnu.org/software/bash/manual/bash.html#Command-Grouping"" rel=""noreferrer""><code>Command Grouping</code></a>:</p>

<pre><code>$ { echo -n '&lt;added text&gt; '; cat file; } &gt;file.new
$ mv file{.new,}
</code></pre>
","9533736"
"How do I run .sh or .bat files from Terminal?","145916","","<p>I have a pretty basic problem here, that has happened so haphazardly to me that up until now, I've just ignored it. I downloaded tomcat web server and ""Murach's Java Servlets and JSP"" book is telling me to navigate to the tomcat/bin directory and start the server my typing in Terminal</p>

<p>$ startup</p>

<p>However, I get the error</p>

<pre><code>-bash: startup: command not found
</code></pre>

<p>The relevant files in this directory are startup.sh and startup.bat. Typing both of these returns the same error message</p>

<p>So my questions are, what are .bat and sh files, and how do I run these files? I've read several tutorials for different languages and software programs, and some times when the tutorial says execute a bunch of files in the command line, I get a ""command not found"" error. Sometimes it works, sometimes it doesn't. This is perplexing to me, so what are some common solutions to solving these sort of ""command not found"" Terminal problems?</p>
","<p>The <code>.sh</code> is for *nix systems and <code>.bat</code> should be for Windows. Since your example shows a bash error and you mention Terminal, I'm assuming it's OS X you're using.</p>

<p>In this case you should go to the folder and type:</p>

<pre><code>./startup.sh
</code></pre>

<p><code>./</code> just means that you should call the script located in the current directory. (Alternatively, just type the full path of the <code>startup.sh</code>). If it doesn't work then, check if <code>startup.sh</code> has execute permissions.</p>
","17015495"
"Renaming files in a folder to sequential numbers","145275","","<p>I want to rename the files in a directory to sequential numbers. Based on creation date of the files.</p>

<p>For Example <code>sadf.jpg</code> to <code>0001.jpg</code>, <code>wrjr3.jpg</code> to <code>0002.jpg</code> and so on, the number of leading zeroes depending on the total amount of files (no need for extra zeroes if not needed).</p>
","<p>Try to use a loop, <code>let</code>, and <code>printf</code> for the padding:</p>

<pre><code>a=1
for i in *.jpg; do
  new=$(printf ""%04d.jpg"" ""$a"") #04 pad to length of 4
  mv -i -- ""$i"" ""$new""
  let a=a+1
done
</code></pre>

<p>using the <code>-i</code> flag prevents automatically overwriting existing files.</p>
","3211670"
"Check folder size in Bash","145162","","<p>I'm trying to write a script that will calculate a directory size and if the size is less than 10GB,  and greater then 2GB do some action. Where do I need to mention my folder name?</p>

<pre><code># 10GB
SIZE=""1074747474""

# check the current size
CHECK=""`du /data/sflow_log/`""
if [ ""$CHECK"" -gt ""$SIZE"" ]; then
  echo ""DONE""
fi
</code></pre>
","<p>You can do:</p>

<pre><code>du -h your_directory
</code></pre>

<p>which will give you the size of your target directory.</p>

<p>If you want a brief output, <code>du -hcs your_directory</code> is nice.</p>
","16662027"
"How to execute a bash command stored as a string with quotes and asterisk","144478","","<p>I try to execute the following command :</p>

<pre><code>mysql AMORE -u username -ppassword -h localhost -e ""SELECT  host  FROM amoreconfig""
</code></pre>

<p>I store it in a string :</p>

<pre><code>cmd=""mysql AMORE -u username -ppassword -h localhost -e\""SELECT  host  FROM amoreconfig\""""
</code></pre>

<p>Test it : </p>

<pre><code>echo $cmd
mysql AMORE -u username -ppassword -h localhost -e""SELECT host FROM amoreconfig""
</code></pre>

<p>Try to execute by doing : </p>

<pre><code>$cmd
</code></pre>

<p>And I get the help page of mysql :</p>

<pre><code>mysql  Ver 14.14 Distrib 5.1.31, for pc-linux-gnu (i686) using readline 5.1
Copyright 2000-2008 MySQL AB, 2008 Sun Microsystems, Inc.
This software comes with ABSOLUTELY NO WARRANTY. This is free software,
and you are welcome to modify and redistribute it under the GPL license
Usage: mysql [OPTIONS] [database]
(...)
</code></pre>

<p>I guess I am doing something plain wrong with the quotes but can't find out what is the problem. </p>
","<p>Have you tried:</p>

<pre><code>eval $cmd
</code></pre>

<p>For the follow-on question of how to escape <code>*</code> since it has special meaning when it's naked or in double quoted strings: use single quotes.</p>

<pre><code>MYSQL='mysql AMORE -u username -ppassword -h localhost -e'
QUERY=""SELECT ""'*'"" FROM amoreconfig"" ;# &lt;-- ""double""'single'""double""
eval $MYSQL ""'$QUERY'""
</code></pre>

<p>Bonus: It also reads nice: eval mysql query ;-)</p>
","2005201"
"download an entire directory using wget","144290","","<p>I am trying to download the files for a project using wget as the SVN server for that project isn't running anymore and I am only able to access the files thorugh browser.
The base URLs for all the files is the same like - </p>

<p><a href=""http://abc.tamu.edu/projects/tzivi/repository/revisions/2/raw/tzivi/"">http://abc.tamu.edu/projects/tzivi/repository/revisions/2/raw/tzivi/</a>*</p>

<p>How can I use wget or any other tool to download all the files in this repository where the ""tzivi"" folder is the root-folder and there are several files and sub-folders(upto 2 or 3 levels) under it.</p>
","<p>You may use this in shell:</p>

<pre><code>wget -r --no-parent http://abc.tamu.edu/projects/tzivi/repository/revisions/2/raw/tzivi/
</code></pre>

<p>The Parameters are:</p>

<pre><code>-r     //recursive Download
</code></pre>

<p>and  </p>

<pre><code>--no-parent // Don´t download something from the parent directory
</code></pre>

<p>If you don't want to download the entire content, you may use:  </p>

<pre><code>-l1 just download the directory (tzivi in your case)

-l2 download the directory and all level 1 subfolders ('tzivi/something' but not 'tivizi/somthing/foo')  
</code></pre>

<p>And so on. If you insert no <code>-l</code> option, <code>wget</code> will use <code>-l 5</code> automatically.</p>

<p>If you insert a <code>-l 0</code> you´ll download the whole Internet, because <code>wget</code> will follow every link it finds.</p>
","19695143"
"Associative arrays in Shell scripts","143937","","<p>We required a script that simulates Associative arrays or Map like data structure for Shell Scripting, any body?</p>
","<p>To add to <a href=""https://stackoverflow.com/a/689890"">Irfan's answer</a>, here is a shorter and faster version of <code>get()</code> since it requires no iteration over the map contents:</p>

<pre><code>get() {
    mapName=$1; key=$2

    map=${!mapName}
    value=""$(echo $map |sed -e ""s/.*--${key}=\([^ ]*\).*/\1/"" -e 's/:SP:/ /g' )""
}
</code></pre>
","690543"
"find: missing argument to -exec","143586","","<p>I was helped out today with a command, but it doesn't seem to be working. This is the command:</p>

<pre><code>find /home/me/download/ -type f -name ""*.rm"" -exec ffmpeg -i {} -sameq {}.mp3 &amp;&amp; rm {}\;
</code></pre>

<p>The shell returns</p>

<pre><code>find: missing argument to `-exec'
</code></pre>

<p>What I am basically trying to do is go through a directory recursively (if it has other directories) and run the ffmpeg command on the <code>.rm</code> file types and convert them to <code>.mp3</code> file types. Once this is done, remove the <code>.rm</code> file that has just been converted.</p>

<p>I appreciate any help on this.</p>
","<p>I figured it out now. When you need to run two commands in exec in a find you need to actually have two separate execs. This finally worked for me.</p>

<pre><code>find . -type f -name ""*.rm"" -exec ffmpeg -i {} -sameq {}.mp3 \; -exec rm {} \;
</code></pre>
","2961843"
"How to check if a file is empty in Bash?","143181","","<p>I have a file called diff.txt.  Want to check if it is empty. Did something like this but couldn't get it working.</p>

<pre><code>if [ -s diff.txt ]
then
        touch empty.txt
        rm full.txt
else
        touch full.txt
        rm emtpy.txt
fi
</code></pre>
","<p>Misspellings are irritating, aren't they?  Check your spelling of <code>empty</code>, but then also try this:</p>

<pre><code>#!/bin/bash -e

if [ -s diff.txt ]
then
        rm -f empty.txt
        touch full.txt
else
        rm -f full.txt
        touch empty.txt
fi
</code></pre>

<p>I like shell scripting a lot, but one disadvantage of it is that the shell cannot help you when you misspell, whereas a compiler like your C++ compiler can help you.</p>

<p>Notice incidentally that I have swapped the roles of <code>empty.txt</code> and <code>full.txt</code>, as @Matthias suggests.</p>
","9964890"
"Add line break to 'git commit -m' from the command line","142473","","<p>I am using Git from the command line and am trying to add a line break to the commit message (using <code>git commit -m """"</code>) without going into Vim.</p>

<p>Is this possible?</p>
","<p>Certainly, how it's done depends on your shell. In Bash, you can use single quotes around the message and can just leave the quote open, which will make Bash prompt for another line, until you close the quote. Like this:</p>

<pre><code>git commit -m 'Message
goes
here'
</code></pre>

<p>Alternatively, you can use a ""here document"":</p>

<pre><code>git commit -F- &lt;&lt;EOF
Message
goes
here
EOF
</code></pre>
","5064653"
"Assigning default values to shell variables with a single command in bash","142330","","<p>I have a whole bunch of tests on variables in a bash (3.00) shell script where if the variable is not set, then it assigns a default, e.g.:</p>

<pre><code>if [ -z ""${VARIABLE}"" ]; then 
    FOO='default'
else 
    FOO=${VARIABLE}
fi
</code></pre>

<p>I seem to recall there's some syntax to doing this in one line, something resembling a ternary operator, e.g.:</p>

<pre><code>FOO=${ ${VARIABLE} : 'default' }
</code></pre>

<p>(though I know that won't work...)</p>

<p>Am I crazy, or does something like that exist?</p>
","<p>Very close to what you posted, actually:</p>

<pre><code>FOO=${VARIABLE:-default}  # If variable not set, use default.
</code></pre>

<p>Or, which will assign <code>default</code> to <code>VARIABLE</code> as well:</p>

<pre><code>FOO=${VARIABLE:=default}  # If variable not set, set it to default.
</code></pre>
","2013589"
"How do I use su to execute the rest of the bash script as that user?","142088","","<p>I've written a script that takes, as an argument, a string that is a concatenation of a username and a project. The script is supposed to switch (su) to the username, cd to a specific directory based upon the project string.</p>

<p>I basically want to do:</p>

<pre><code>su $USERNAME;  
cd /home/$USERNAME/$PROJECT;  
svn update;  
</code></pre>

<p>The problem is that once I do an su... it just waits there. Which makes sense since the flow of execution has passed to switching to the user. Once I exit, then the rest of the things execute but it doesn't work as desired.</p>

<p>I prepended su to the svn command but the command failed (i.e. it didn't update svn in the directory desired).</p>

<p>How do I write a script that allows the user to switch user and invoke svn (among other things)?</p>
","<p>The trick is to use ""sudo"" command instead of ""su""</p>

<p>You may need to add this </p>

<pre><code>username1 ALL=(username2) NOPASSWD: /path/to/svn
</code></pre>

<p>to your /etc/sudoers file</p>

<p>and change your script to:</p>

<pre><code>sudo -u username2 -H sh -c ""cd /home/$USERNAME/$PROJECT; svn update"" 
</code></pre>

<p>Where username2 is the user you want to run the SVN command as and username1 is the user running the script.</p>

<p>If you need multiple users to run this script, use a <code>%groupname</code> instead of the username1</p>
","1988255"
"Pass all variables from one shellscript to another?","141983","","<p>So lets say i have a shellscript / bash script named test.sh</p>

<p>with:</p>

<pre><code>#!/bin/bash
#

TESTVARIABLE=hellohelloheloo
./test2.sh
</code></pre>

<p>my test2.sh looks like this</p>

<pre><code>#!/bin/bash
#

echo ${TESTVARIABLE}
</code></pre>

<p>this does not work. I do not want to pass all variables as parameters since imho this is overkill. Is there a different way?</p>
","<p>You have basically two options:</p>

<ol>
<li>Make the variable an environment variable (<code>export TESTVARIABLE</code>) before executing the 2nd script.</li>
<li>Source the 2nd script, i.e. <code>. test2.sh</code> and it will run in the same shell. This would let you share more complex variables like arrays easily, but also means that the other script could modify variables in the source shell.</li>
</ol>

<p><strong>UPDATE:</strong></p>

<p>To use <code>export</code> to set an environment variable, you can either use an existing variable:</p>

<pre><code>A=10
# ...
export A
</code></pre>

<p>This ought to work in both <code>bash</code> and <code>sh</code>.  <code>bash</code> also allows it to be combined like so:</p>

<pre><code>export A=10
</code></pre>

<p>This also works in <em>my</em> <code>sh</code> (which happens to be <code>bash</code>, you can use <code>echo $SHELL</code> to check).  But I don't believe that that's guaranteed to work in all <code>sh</code>, so best to play it safe and separate them.</p>

<p>Any variable you export in this way will be visible in scripts you execute, for example:</p>

<p><strong>a.sh:</strong></p>

<pre><code>#!/bin/sh

MESSAGE=""hello""
export MESSAGE
./b.sh
</code></pre>

<p><strong>b.sh:</strong></p>

<pre><code>#!/bin/sh

echo ""The message is: $MESSAGE""
</code></pre>

<p>Then:</p>

<pre><code>$ ./a.sh
The message is: hello
</code></pre>

<p>The fact that these are both shell scripts is also just incidental.  Environment variables can be passed to any process you execute, for example if we used python instead it might look like:</p>

<p><strong>a.sh:</strong></p>

<pre><code>#!/bin/sh

MESSAGE=""hello""
export MESSAGE
./b.py
</code></pre>

<p><strong>b.py:</strong></p>

<pre><code>#!/usr/bin/python

import os

print 'The message is:', os.environ['MESSAGE']
</code></pre>

<p><strong>Sourcing:</strong></p>

<p>Instead we could source like this:</p>

<p><strong>a.sh:</strong></p>

<pre><code>#!/bin/sh

MESSAGE=""hello""

. ./b.sh
</code></pre>

<p><strong>b.sh:</strong></p>

<pre><code>#!/bin/sh

echo ""The message is: $MESSAGE""
</code></pre>

<p>Then:</p>

<pre><code>$ ./a.sh
The message is: hello
</code></pre>

<p>This more or less ""imports"" the contents of <code>b.sh</code> directly and executes it in the <em>same shell</em>. Notice that we didn't have to export the variable to access it. This implicitly shares all the variables you have, as well as allows the other script to add/delete/modify variables in the shell.  Of course, in this model both your scripts should be the same language (<code>sh</code> or <code>bash</code>). To give an example how we could pass messages back and forth:</p>

<p><strong>a.sh:</strong></p>

<pre><code>#!/bin/sh

MESSAGE=""hello""

. ./b.sh

echo ""[A] The message is: $MESSAGE""
</code></pre>

<p><strong>b.sh:</strong></p>

<pre><code>#!/bin/sh

echo ""[B] The message is: $MESSAGE""

MESSAGE=""goodbye""
</code></pre>

<p>Then:</p>

<pre><code>$ ./a.sh
[B] The message is: hello
[A] The message is: goodbye
</code></pre>

<p>This works equally well in <code>bash</code>.  It also makes it easy to share more complex data which you could not express as an environment variable (at least without some heavy lifting on your part), like arrays or associative arrays.</p>
","9772093"
"Best way to make a shell script daemon?","141363","","<p>I'm wondering if there is a better way to make a daemon that waits for something using only sh than:</p>

<pre><code>#! /bin/sh
trap processUserSig SIGUSR1
processUserSig() {
  echo ""doing stuff""
}

while true; do
  sleep 1000
done
</code></pre>

<p>In particular, I'm wondering if there's any way to get rid of the loop and still have the thing listen for the signals.</p>
","<p>Use your system's daemon facility, such as <a href=""http://manpages.ubuntu.com/manpages/karmic/man8/start-stop-daemon.8.html"" rel=""noreferrer"">start-stop-daemon</a>.</p>

<p>Otherwise, yes, there has to be a loop somewhere.</p>
","3430713"
"List files with certain extensions with ls and grep","141271","","<p>I just want to get the files from the current dir and only output .mp4 .mp3 .exe files nothing else.
So I thought I could just do this:</p>

<pre><code>ls | grep \.mp4$ | grep \.mp3$ | grep \.exe$
</code></pre>

<p>But no, as the first grep will output just mp4's therefor the other 2 grep's won't be used.</p>

<p>Any ideas? PS, Running this script on Slow Leopard.</p>
","<p>Why not:</p>

<pre><code>ls *.{mp3,exe,mp4}
</code></pre>

<p>I'm not sure where I learned it - but I've been using this.</p>
","1447974"
"Check free disk space for current partition in bash","140944","","<p>I am writing an installer in bash. The user will go to the target directory and runs the install script, so the first action should be to check that there is enough space. I know that df will report all file systems, but I was wondering if there was a way to get the free space just for the partition that the target directory is on.</p>

<p>Edit - the answer I came up with</p>

<pre><code>df $PWD | awk '/[0-9]%/{print $(NF-2)}'
</code></pre>

<p>Slightly odd because df seems to format its output to fit the terminal, so with a long mount point name the output is shifted down a line</p>
","<p>Yes:</p>

<pre><code>df -k .
</code></pre>

<p>for the current directory.</p>

<pre><code>df -k /some/dir
</code></pre>

<p>if you want to check a specific directory.</p>

<p>You might also want to check out the  <code>stat(1)</code> command if your system has it. You can specify output formats to make it easier for your script to parse. Here's a little example:</p>

<pre><code>$ echo $(($(stat -f --format=""%a*%S"" .)))
</code></pre>
","8110535"
"Setting environment variables in Linux using Bash","140855","","<p>In <code>tcsh</code>, I have the following script working:</p>

<pre><code>#!/bin/tcsh
setenv X_ROOT /some/specified/path

setenv XDB    ${X_ROOT}/db
setenv PATH   ${X_ROOT}/bin:${PATH}

xrun -d xdb1 -i $1 &gt; $2
</code></pre>

<p>What is the equivalent to the <code>tcsh setenv</code> function in Bash? </p>

<p>Is there a direct analog? The environment variables are for locating the executable.</p>
","<p><code>export VAR=value</code> will set VAR to value. Enclose it in single quotes if you want spaces, like <code>export VAR='my val'</code>. If you want the variable to be interpolated, use double quotes, like <code>export VAR=""$MY_OTHER_VAR""</code>.</p>
","234756"
"Shell script to copy files from one location to another location and rename add the current date to every file","140642","","<p>I have a folder in my server which contains some files. These are automated that means everyday we get new files automatically which will overwrite the old ones.
So want to take a back up for this data. 
How can i copy all these files in to a another folder by renaming the files with current date while copying.</p>

<p>ex : i have a folder named folder1 which contains 4 files. path for this folder is home/webapps/project1/folder1</p>

<ol>
<li>aaa.csv</li>
<li>bbb.csv</li>
<li>ccc.csv</li>
<li>ddd.csv</li>
</ol>

<p>now i want to copy all these four files in to a different folder named folder2.
path for this folder is home/webapps/project1/folder2.
while copying these files i want to rename each file and add the current date to the file.
so my file names in folder2 should be..</p>

<ol>
<li>aaa091012.csv</li>
<li>bbb091012.csv</li>
<li>ccc091012.csv</li>
<li>ddd091012.csv</li>
</ol>

<p>I want to write a shell script for this. Please give me some idea or some sample scripts related to this.</p>
","<p>In <code>bash</code>, provided you files names have no spaces:</p>

<pre><code>cd /home/webapps/project1/folder1
for f in *.csv
do 
   cp -v ""$f"" /home/webapps/project1/folder2/""${f%.csv}""$(date +%m%d%y).csv
done
</code></pre>
","12355684"
"How to check the extension of a filename in a bash script?","140356","","<p>I am writing a nightly build script in bash.<br>
Everything is fine and dandy except for one little snag:</p>

<pre><code>
#!/bin/bash

for file in ""$PATH_TO_SOMEWHERE""; do
      if [ -d $file ]
      then
              # do something directory-ish
      else
              if [ ""$file"" == ""*.txt"" ]       #  this is the snag
              then
                     # do something txt-ish
              fi
      fi
done;
</code></pre>

<p>My problem is determining the file extension and then acting accordingly.  I know the issue is in the if-statement, testing for a txt file.  </p>

<p>How can I determine if a file has a .txt suffix?</p>
","<p>I think you want to say ""Are the last four characters of $file equal to <code>.txt</code>?""  If so, you can use the following:</p>

<pre><code>if [ ${file: -4} == "".txt"" ]
</code></pre>

<p>Note that the space between <code>file:</code> and <code>-4</code> is required, as the ':-' modifier means something different.</p>
","407229"
"Reading a delimited string into an array in Bash","139851","","<p>I have a variable which contains a space-delimited string:</p>

<pre><code>line=""1 1.50 string""
</code></pre>

<p>I want to split that string with space as a delimiter and store the result in an array, so that the following:</p>

<pre><code>echo ${arr[0]}
echo ${arr[1]}
echo ${arr[2]}
</code></pre>

<p>outputs</p>

<pre><code>1
1.50
string
</code></pre>

<p>Somewhere I found a solution which doesn't work:</p>

<pre><code>arr=$(echo ${line})
</code></pre>

<p>If I run the echo statements above after this, I get:</p>

<pre><code>1 1.50 string
[empty line]
[empty line]
</code></pre>

<p>I also tried</p>

<pre><code>IFS="" ""
arr=$(echo ${line})
</code></pre>

<p>with the same result. Can someone help, please?</p>
","<pre><code>arr=($line)
</code></pre>

<p>or</p>

<pre><code>read -a arr &lt;&lt;&lt;$line
</code></pre>
","9294015"
"Which characters need to be escaped in Bash? How do we know it?","139302","","<p>Is there any comprehensive list of characters that need to be escaped in Bash? Can it be checked just with <code>sed</code>?</p>

<p>In particular, I was checking whether <code>%</code> needs to be escaped or not. I tried</p>

<pre><code>echo ""h%h"" | sed 's/%/i/g'
</code></pre>

<p>and worked fine, without escaping <code>%</code>. Does it mean <code>%</code> does not need to be escaped? Was this a good way to check the necessity?</p>

<p>And more general: are they the same characters to escape in <code>shell</code> and <code>bash</code>?</p>
","<p>There are two easy and safe rules which work not only in <code>sh</code> but also <code>bash</code>.</p>

<h2>1. Put the whole string in single quotes</h2>

<p>This works for all chars except single quote itself. To escape the single quote, close the quoting before it, insert the single quote, and re-open the quoting.</p>

<pre><code>'I'\''m a s@fe $tring which ends in newline
'
</code></pre>

<p>sed command: <code>sed -e ""s/'/'\\\\''/g; 1s/^/'/; \$s/\$/'/""</code></p>

<h2>2. Escape every char with a backslash</h2>

<p>This works for all characters except newline. For newline characters use single or double quotes. <em>Empty strings must still be handled - replace with <code>""""</code></em></p>

<pre><code>\I\'\m\ \a\ \s\@\f\e\ \$\t\r\i\n\g\ \w\h\i\c\h\ \e\n\d\s\ \i\n\ \n\e\w\l\i\n\e""
""
</code></pre>

<p>sed command: <code>sed -e 's/./\\&amp;/g; 1{$s/^$/""""/}; 1!s/^/""/; $!s/$/""/'</code>.</p>

<h3>2b. More readable version of 2</h3>

<p>There's an easy safe set of characters, like <code>[a-zA-Z0-9,._+:@%/-]</code>, which can be left unescaped to keep it more readable</p>

<pre><code>I\'m\ a\ s@fe\ \$tring\ which\ ends\ in\ newline""
""
</code></pre>

<p>sed command: <code>LC_ALL=C sed -e 's/[^a-zA-Z0-9,._+@%/-]/\\&amp;/g; 1{$s/^$/""""/}; 1!s/^/""/; $!s/$/""/'</code>.</p>

<hr>

<p>Note that in a sed program, one can't know whether the last line of input ends with a newline byte (except when it's empty). That's why both above sed commands assume it does not. You can add a quoted newline manually.</p>

<p>Note that shell variables are only defined for text in the POSIX sense. Processing binary data is not defined. For the implementations that matter, binary works with the exception of NUL bytes (because variables are implemented with C strings, and meant to be used as C strings, namely program arguments), but you should switch to a ""binary"" locale such as latin1.</p>

<hr>

<p>(You can easily validate the rules by reading the POSIX spec for <code>sh</code>. For bash, check the reference manual linked by @AustinPhillips)</p>
","20053121"
"How do I use a file grep comparison inside a bash if/else statement?","139261","","<p>When our server comes up we need to check a file to see how the server is configured.  </p>

<p>We want to search for the following string inside our /etc/aws/hosts.conf file: </p>

<pre><code>MYSQL_ROLE=master
</code></pre>

<p>Then, we want to test whether that string exists and use an if/else statement to run one of two options depending on whether the string exists or not.  </p>

<p>What is the BASH syntax for the if statement? </p>

<pre><code>if [ ????? ]; then
  #do one thing
else
  #do another thing
fi
</code></pre>
","<p>From <code>grep --help</code>, but also see <a href=""http://google.com/search?q=man+grep"" rel=""noreferrer"">man grep</a>:</p>

<blockquote>
  <p>Exit status is 0 if any line was selected, 1 otherwise;
  if any error occurs and -q was not given, the exit status is 2.</p>
</blockquote>

<pre><code>if grep --quiet MYSQL_ROLE=master /etc/aws/hosts.conf; then
  echo exists
else
  echo not found
fi
</code></pre>

<p>You may want to use a more specific regex, such as <code>^MYSQL_ROLE=master$</code>, to avoid that string in comments, names that merely start with ""master"", etc.</p>

<p>This works because the <em>if</em> takes a command and runs it, and uses the return value of that command to decide how to proceed, with zero meaning true and non-zero meaning false&mdash;the same as how other return codes are interpreted by the shell, and the opposite of a language like C.</p>
","2480611"
"How to use sed to remove the last n lines of a file","139231","","<p>I want to remove some <em>n</em> lines from the end of a file. Can this be done using sed?</p>

<p>For example, to remove lines from 2 to 4, I can use</p>

<pre><code>$ sed '2,4d' file
</code></pre>

<p>But I don't know the line numbers.  I can delete the last line using </p>

<pre><code>$sed $d file
</code></pre>

<p>but I want to know the way to remove <em>n</em> lines from the end. Please let me know how to do that using sed or some other method.</p>
","<p>I don't know about <code>sed</code>, but it can be done with <code>head</code>:</p>

<pre><code>head -n -2 myfile.txt
</code></pre>
","13380679"
"How to make a programme continue to run after log out from ssh?","138676","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/285015/linux-prevent-a-background-process-from-being-stopped-after-closing-ssh-client"">Linux: Prevent a background process from being stopped after closing SSH client</a>  </p>
</blockquote>



<p>I have a program that takes a lot of time to finish.
It is running as root over ssh.<br>
I want it to continue to run after I logout,is this possible and how would I achieve this?</p>
","<p>Assuming that you have a program running in the foreground, <strong>press ctrl-Z</strong>, then:</p>

<pre><code>[1]+  Stopped                 myprogram
$ disown -h %1
$ bg 1
[1]+ myprogram &amp;
$ logout
</code></pre>

<p>If there is only one job, then you don't need to specify the job number. Just use <code>disown -h</code> and <code>bg</code>.</p>

<h2>Explanation of the above steps:</h2>

<p>You press ctrl-Z. The system suspends the running program, displays a job number and a ""Stopped"" message and returns you to a bash prompt. </p>

<p>You type the <code>disown -h %1</code> command (here, I've used a <code>1</code>, but you'd use the job number that was displayed in the <code>Stopped</code> message) which marks the job so it ignores the <code>SIGHUP</code> signal (it will not be stopped by logging out). </p>

<p>Next, type the <code>bg</code> command using the same job number; this resumes the running of the program in the background and a message is displayed confirming that. </p>

<p>You can now log out and it will continue running..</p>
","954415"
"Bash script processing commands in parallel","138382","","<p>I have a bash script that looks like this:</p>

<pre><code>#!/bin/bash
wget LINK1 &gt;/dev/null 2&gt;&amp;1
wget LINK2 &gt;/dev/null 2&gt;&amp;1
wget LINK3 &gt;/dev/null 2&gt;&amp;1
wget LINK4 &gt;/dev/null 2&gt;&amp;1
# ..
# ..
wget LINK4000 &gt;/dev/null 2&gt;&amp;1
</code></pre>

<p>But processing each line until the command is finished then moving to the next one is very time consuming, I want to process for instance 20 lines at once then when they're finished another 20 lines are processed.</p>

<p>I thought of <code>wget LINK1 &gt;/dev/null 2&gt;&amp;1 &amp;</code> to send the command to the background and carry on, but there are 4000 lines here this means I will have performance issues, not to mention being limited in how many processes I should start at the same time so this is not a good idea.</p>

<p>One solution that I'm thinking of right now is checking whether one of the commands is still running or not, for instance after 20 lines I can add this loop:</p>

<pre><code>while [  $(ps -ef | grep KEYWORD | grep -v grep | wc -l) -gt 0 ]; do
sleep 1
done
</code></pre>

<p>Of course in this case I will need to append &amp; to the end of the line! But I'm feeling this is not the right way to do it.</p>

<p>So how do I actually group each 20 lines together and wait for them to finish before going to the next 20 lines, this script is dynamically generated so I can do whatever math I want on it while it's being generated, but it DOES NOT have to use wget, it was just an example so any solution that is wget specific is not gonna do me any good.</p>
","<p>Use the <code>wait</code> built-in:</p>

<pre><code>process1 &amp;
process2 &amp;
process3 &amp;
process4 &amp;
wait
process5 &amp;
process6 &amp;
process7 &amp;
process8 &amp;
wait
</code></pre>

<p>For the above example, 4 processes <code>process1</code> .. <code>process4</code> would be started in the background, and the shell would wait until those are completed before starting the next set ..</p>

<p>From the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Job-Control-Builtins"">manual</a>:</p>

<blockquote>
<pre><code>wait [jobspec or pid ...]
</code></pre>
  
  <p>Wait until the child process specified by each process ID pid or job specification jobspec exits and return the exit status of the last
  command waited for. If a job spec is given, all processes in the job
  are waited for. If no arguments are given, all currently active child
  processes are waited for, and the return status is zero. If neither
  jobspec nor pid specifies an active child process of the shell, the
  return status is 127.</p>
</blockquote>
","19543185"
"How can I strip first X characters from string using sed?","138346","","<p>I am writing shell script for embedded Linux in a small industrial box. I have a variable containing the text <code>pid: 1234</code> and I want to strip first X characters from the line, so only 1234 stays. I have more variables I need to ""clean"", so I need to cut away X first characters and <code>${string:5}</code> doesn't work for some reason in my system.</p>

<p>The only thing the box seems to have is <code>sed</code>.</p>

<p>I am trying to make the following to work:</p>

<pre><code>result=`echo ""$pid"" | sed 's/^.\{4\}//g'`
</code></pre>

<p>Any ideas?</p>
","<p>This will do the job too:</p>

<pre><code>echo ""$pid""|awk '{print $2}'
</code></pre>
","11470076"
"Bash Script - Variable content as a command to run","138087","","<p>I have a Perl script that gives me a defined list random numbers that correspond to the lines of a file. What I want to do next is to extract those lines from the file using <code>sed</code>.</p>

<pre><code>#!/bin/bash
count=$(cat last_queries.txt | wc -l)
var=$(perl test.pl test2 $count)
</code></pre>

<p>The variable <code>var</code> returns an output like: <code>cat last_queries.txt | sed -n '12p;500p;700p'</code>. The problem is that I can't run this last command. I tried with <code>$var</code> but the output is not correct (if I run manually the command it works fine, so no problem there). What is the correct way to do this?</p>

<p>P.S: Sure I am could do all the work in Perl, but I'm trying to learn this way because it could help me in other situations.</p>
","<p>If I understand you correctly, you just need to do (sorry if I missed your point):</p>

<pre><code>#!/bin/bash
count=$(cat last_queries.txt | wc -l)
$(perl test.pl test2 $count)
</code></pre>

<p>However if you want to call your perl command later, and that's why you want to assign it to a variable, then:</p>

<pre><code>#!/bin/bash
count=$(cat last_queries.txt | wc -l)
var=""perl test.pl test2 $count"" # you need double quotes to get your $count value substituted.

...stuff...

eval $var
</code></pre>

<p>As per bash's help:</p>

<pre><code>~$ help eval
eval: eval [arg ...]
    Execute arguments as a shell command.

    Combine ARGs into a single string, use the result as input to the shell,
    and execute the resulting commands.

    Exit Status:
    Returns exit status of command or success if command is null.
</code></pre>
","6002329"
"Replace a Space with a Period in Bash","138070","","<p>All I need to be able to do is replace a space (<code></code>) with a dot (<code>.</code>) in a string in bash.
I think this would be pretty simple, but I'm new so I can't figure out how to modify a similar example for this use.</p>
","<p>Use inline shell string replacement. Example:</p>

<pre><code>foo=""  ""

# replace first blank only
bar=${foo/ /.}

# replace all blanks
bar=${foo// /.}
</code></pre>

<p>See <a href=""http://tldp.org/LDP/abs/html/string-manipulation.html"">http://tldp.org/LDP/abs/html/string-manipulation.html</a> for more details.</p>
","5928254"
"Validating parameters to a Bash script","137886","","<p>I came up with a basic one to help automate the process of removing a number of folders as they become unneeded.</p>

<pre><code>#!/bin/bash
rm -rf ~/myfolder1/$1/anotherfolder
rm -rf ~/myfolder2/$1/yetanotherfolder
rm -rf ~/myfolder3/$1/thisisafolder
</code></pre>

<p>This is evoked like so:</p>

<pre><code>./myscript.sh &lt;{id-number}&gt;
</code></pre>

<p>The problem is that if you forget to type in the <code>id-number</code> <em>(as I did just then)</em>, then it could potentially delete a lot of things that you really don't want deleted.</p>

<p><strong>Is there a way you can add any form of validation to the command line parameters?</strong> In my case, it'd be good to check that a) there is one parameter, b) it's numerical, and c) that folder exists; before continuing with the script.</p>
","<pre><code>#!/bin/sh
die () {
    echo &gt;&amp;2 ""$@""
    exit 1
}

[ ""$#"" -eq 1 ] || die ""1 argument required, $# provided""
echo $1 | grep -E -q '^[0-9]+$' || die ""Numeric argument required, $1 provided""

while read dir 
do
    [ -d ""$dir"" ] || die ""Directory $dir does not exist""
    rm -rf ""$dir""
done &lt;&lt;EOF
~/myfolder1/$1/anotherfolder 
~/myfolder2/$1/yetanotherfolder 
~/myfolder3/$1/thisisafolder
EOF
</code></pre>

<p><strong>edit</strong>: I missed the part about checking if the directories exist at first, so I added that in, completing the script. Also, have addressed issues raised in comments; fixed the regular expression, switched from <code>==</code> to <code>eq</code>.</p>

<p>This should be a portable, POSIX compliant script as far as I can tell; it doesn't use any bashisms, which is actually important because <code>/bin/sh</code> on Ubuntu is actually <code>dash</code> these days, not <code>bash</code>.</p>
","699613"
"count number of lines in terminal output","136973","","<p>couldn't find this on SO. I ran the following command in the terminal: </p>

<pre><code>&gt;&gt; grep -Rl ""curl"" ./
</code></pre>

<p>and this displays the list of files where the keyword curl occurs. I want to count the number of files. First way I can think of, is to count the number of lines in the output that came in the terminal. How can I do that?</p>
","<p>Pipe the result to <a href=""http://en.wikipedia.org/wiki/Wc_%28Unix%29"" rel=""noreferrer""><code>wc</code></a> using the <code>-l</code> (<em>line count</em>) switch:</p>

<pre><code>grep -Rl ""curl"" ./ | wc -l
</code></pre>
","12457470"
"Setting an environment variable before a command in bash not working for second command in a pipe","136812","","<p>In a given shell, normally I'd set a variable or variables and then run a command. Recently I learned about the concept of prepending a variable definition to a command:</p>

<pre><code>FOO=bar somecommand someargs
</code></pre>

<p>This works... kind of. It doesn't work when you're changing a LC_* variable (which seems to affect the command but NOT its arguments, e.g., '[a-z]' char ranges) or when piping output to another command thusly:</p>

<pre><code>FOO=bar somecommand someargs | somecommand2  # somecommand2 is unaware of FOO
</code></pre>

<p>I can prepend somecommand2 with ""FOO=bar"" as well, which works but which adds unwanted duplication, and it doesn't help with arguments that are interpreted depending on the variable (e.g. '[a-z]')</p>

<p>So, what's a good way to do this on a single line? I'm thinking something on the order of:</p>

<pre><code>FOO=bar (somecommand someargs | somecommand2)  # Doesn't actually work
</code></pre>

<p>Edit: I got lots of good answers! The goal is to keep this a one-liner, preferably without using ""export"". The method using a call to bash was best overall, though the parenthetical version with ""export"" in it was a little more compact. The method of using redirection rather than a pipe is interesting as well.</p>
","<pre><code>FOO=bar bash -c 'somecommand someargs | somecommand2'
</code></pre>
","10856348"
"How to get the part of file after the line that matches grep expression ? (first match)","136776","","<p>I have a file with about 1000 lines. I want the part of my file after the line which matches my grep statement.</p>

<p>i.e.</p>

<pre><code>$ cat file | grep 'TERMINATE'     // Its found on line 534
</code></pre>

<p>So, I want the file from line <code>535 to line 1000</code> for further processing.</p>

<p>How do I do it ?</p>
","<p>The following will print the line matching <code>TERMINATE</code> till the end of the file:</p>

<pre><code>sed -n -e '/TERMINATE/,$p'
</code></pre>

<p><strong>Explained:</strong> <code>-n</code> disables default behavior of <code>sed</code> of printing each line after executing its script on it, <code>-e</code> indicated a script to <code>sed</code>, <code>/TERMINATE/,$</code> is an address (line) range selection meaning the first line matching the <code>TERMINATE</code> regular expression (like grep) to the end of the file (<code>$</code>), and <code>p</code> is the print command which prints the current line.</p>

<p>This will print from the line that follows the line matching <code>TERMINATE</code> till the end of the file:<br>
(from AFTER the matching line to EOF, NOT including the matching line)</p>

<pre><code>sed -e '1,/TERMINATE/d'
</code></pre>

<p><strong>Explained:</strong> <code>1,/TERMINATE/</code> is an address (line) range selection meaning the first line for the input to the 1st line matching the <code>TERMINATE</code> regular expression, and <code>d</code> is the delete command which delete the current line and skip to the next line.  As <code>sed</code> default behavior is to print the lines, it will print the lines after <code>TERMINATE</code>  to the end of input.</p>

<p><strong>Edit:</strong></p>

<p>If you want the lines before <code>TERMINATE</code>:</p>

<pre><code>sed -e '/TERMINATE/,$d'
</code></pre>

<p>And if you want both lines before and after <code>TERMINATE</code> in 2 different files in a single pass:</p>

<pre><code>sed -e '1,/TERMINATE/w before
/TERMINATE/,$w after' file
</code></pre>

<p>The before and after files will contain the line with terminate, so to process each you need to use:</p>

<pre><code>head -n -1 before
tail -n +2 after
</code></pre>

<p><strong>Edit2:</strong></p>

<p>IF you do not want to hard-code the filenames in the sed script, you can:</p>

<pre><code>before=before.txt
after=after.txt
sed -e ""1,/TERMINATE/w $before
/TERMINATE/,\$w $after"" file
</code></pre>

<p>But then you have to escape the <code>$</code> meaning the last line so the shell will not try to expand the <code>$w</code> variable (note that we now use double quotes around the script instead of single quotes).</p>

<p>I forgot to tell that the new line is important after the filenames in the script so that sed knows that the filenames end.</p>

<p><br>
<strong>Edit:</strong> 2016-0530</p>

<p>Sébastien Clément asked: ""How would you replace the hardcoded <code>TERMINATE</code> by a variable?""</p>

<p>You would make a variable for the matching text and then do it the same way as the previous example:  </p>

<pre><code>matchtext=TERMINATE
before=before.txt
after=after.txt
sed -e ""1,/$matchtext/w $before
/$matchtext/,\$w $after"" file
</code></pre>

<p>to use a variable for the matching text with the previous examples:</p>

<pre><code>## Print the line containing the matching text, till the end of the file:
## (from the matching line to EOF, including the matching line)
matchtext=TERMINATE
sed -n -e ""/$matchtext/,\$p""
</code></pre>



<pre><code>## Print from the line that follows the line containing the 
## matching text, till the end of the file:
## (from AFTER the matching line to EOF, NOT including the matching line)
matchtext=TERMINATE
sed -e ""1,/$matchtext/d""
</code></pre>



<pre><code>## Print all the lines before the line containing the matching text:
## (from line-1 to BEFORE the matching line, NOT including the matching line)
matchtext=TERMINATE
sed -e ""/$matchtext/,\$d""
</code></pre>

<p>The important points about replacing text with variables in these cases are:  </p>

<ol>
<li>Variables (<code>$variablename</code>) enclosed in <code>single quotes</code> [<code>'</code>] won't ""expand"" but variables inside <code>double quotes</code> [<code>""</code>] will. So, you have to change all the <code>single quotes</code> to <code>double quotes</code> if they contain text you want to replace with a variable.  </li>
<li>The <code>sed</code> ranges also contain a <code>$</code> and are immediately followed by a letter like: <code>$p</code>, <code>$d</code>, <code>$w</code>. They will also look like variables to be expanded, so you have to escape those <code>$</code> characters with a backslash [<code>\</code>] like: <code>\$p</code>, <code>\$d</code>, <code>\$w</code>.</li>
</ol>
","7104422"
"Can I change the name of `nohup.out`?","136579","","<p>When I run <code>nohup some_command &amp;</code>, the output goes to <code>nohup.out</code>; <code>man nohup</code> says to look at <code>info nohup</code> which in turn says:</p>

<blockquote>
  <p>If standard output is a terminal, the
  command's standard output is appended
  to the file 'nohup.out'; if that
  cannot be written to, it is appended
  to the file '$HOME/nohup.out'; and if
  that cannot be written to, the command
  is not run.</p>
</blockquote>

<p>But if I already have one command using <code>nohup</code> with output going to <code>/nohup.out</code> and I want to run another, <code>nohup</code> command, can I redirect the output to <code>nohup2.out</code>? </p>
","<pre><code>nohup some_command &amp;&gt; nohup2.out&amp;
</code></pre>

<p>and voila.</p>

<hr>

<p>Older syntax for Bash version &lt; 4:</p>

<pre><code>nohup some_command &gt; nohup2.out 2&gt;&amp;1&amp;
</code></pre>
","4549515"
"Any way to exit bash script, but not quitting the terminal","136284","","<p>When I use <code>exit</code> command in a shell script, the script will terminate the terminal (the prompt). Is there any way to terminate a script and then staying in the terminal?</p>

<p>My script <code>run.sh</code> is expected to execute by directly being sourced, or sourced from another script.</p>

<p>EDIT:
To be more specific, there are two scripts <code>run2.sh</code> as</p>

<pre><code>...
. run.sh
echo ""place A""
...
</code></pre>

<p>and <code>run.sh</code> as</p>

<pre><code>...
exit
...
</code></pre>

<p>when I run it by <code>. run2.sh</code>, and if it hit <code>exit</code> codeline in <code>run.sh</code>, I want it to stop to the terminal and stay there. But using <code>exit</code>, the whole terminal gets closed. </p>

<p>PS: I have tried to use <code>return</code>, but <code>echo</code> codeline will still gets executed....</p>
","<p>The ""problem"" really is that you're sourcing and not executing the script. When you source a file, its contents will be executed in the current shell, instead of spawning a subshell. So everything, including exit, will affect the current shell.</p>

<p>Instead of using <code>exit</code>, you will want to use <code>return</code>.</p>
","9640736"
"How do I remove newlines from a text file?","136278","","<p>I have the following data, and I need to put it all into one line.</p>

<p>I have this:</p>

<pre><code>22791

;

14336

;

22821

;

34653

;

21491

;

25522

;

33238

;
</code></pre>

<p>I need this:</p>

<pre><code>22791;14336;22821;34653;21491;25522;33238;
</code></pre>

<hr>

<h1>EDIT</h1>

<p>No of these commands is working perfectly.</p>

<p>Most of them let the data like this:</p>

<pre><code>22791

;14336

;22821

;34653

;21491

;25522
</code></pre>
","<pre><code>tr -d '\n' &lt; yourfile.txt
</code></pre>

<p><strong>Edit:</strong></p>

<p>If none of the commands posted here are working, then you have something other than a newline separating your fields. Possibly you have DOS/Windows line endings in the file (although I would expect the Perl solutions to work even in that case)? </p>

<p>Try:</p>

<pre><code>tr -d ""\n\r"" &lt; yourfile.txt
</code></pre>

<p>If that doesn't work then you're going to have to inspect your file more closely (e.g. in a hex editor) to find out what characters are actually in there that you want to remove.</p>
","3134827"
"Clear a terminal screen for real","135956","","<p>Using the <code>clear</code> command on the terminal only fools the user into thinking the screen has been cleared...you can still see output from the previous commands when you scroll using the mouse. This makes life difficult when you are drowning in a tsunami of text. </p>

<p>Various solutions (escape code etc.) which can be found on the internet are only variations of what the clear command already does.</p>

<p>So how do you clear the contents of the bash terminal in Ubuntu for real?</p>
","<p>Use the following command to do a clear screen instead of merely adding new lines ...</p>

<pre><code>printf ""\033c""
</code></pre>

<p>yes that's a 'printf' on the bash prompt.</p>

<p>You will probably want to define an alias though...</p>

<pre><code>alias cls='printf ""\033c""'
</code></pre>

<h3>Explanation</h3>

<pre class=""lang-none prettyprint-override""><code>\033 == \x1B == 27 == ESC
</code></pre>

<p>So this becomes <code>&lt;ESC&gt;c</code> which is the VT100 escape code for resetting the terminal. <a href=""http://www.termsys.demon.co.uk/vtansi.htm"" rel=""noreferrer"">Here</a> is some more information on terminal escape codes.</p>

<h3>Edit</h3>

<p>Here are a few other ways of doing it...</p>

<pre><code>printf ""\ec"" #\e is ESC in bash
echo -en ""\ec"" #thanks @Jonathon Reinhart.
# -e    Enable interpretation of of backslash escapes
# -n    Do not output a new line
</code></pre>

<h1>KDE</h1>

<p>The above does not work on the KDE console (called Konsole) but there is hope! Use the following sequence of commands to clear the screen and the scroll-back buffer...</p>

<pre><code>clear &amp;&amp; echo -en ""\e[3J""
</code></pre>

<p>Or perhaps use the following alias on KDE...</p>

<pre><code>alias cls='clear &amp;&amp; echo -en ""\e[3J""'
</code></pre>

<p>I got the scroll-back clearing command from <a href=""https://superuser.com/a/59718/6765"">here</a>.</p>
","5367075"
"How to add include and lib paths to configure/make cycle?","135827","","<p>I need a place to install libraries in a linux box I have no su access to. I'm using ~/local[/bin,/lib,/include], but I don't know how can I tell ./configure to look for libraries there (particularly, I'm trying to compile emacs, which needs libgif, which doesn't come in my distro).</p>

<p>I tried adding</p>

<pre><code>export PATH=$PATH:~/local/bin
export LD_LIBRARY_PATH=~/local/lib
export C_INCLUDE_PATH=~/local/include
export CPLUS_INCLUDE_PATH=~/local/include
</code></pre>

<p>to .bashrc but it doesn't seem to work.</p>
","<p>You want a config.site file.  Try:</p>

<pre>
$ mkdir -p ~/local/share
$ cat &lt;&lt; EOF &gt; ~/local/share/config.site
CPPFLAGS=-I$HOME/local/include
LDFLAGS=-L$HOME/local/lib
...
EOF
</pre>

<p>Whenever you invoke an autoconf generated configure script with --prefix=$HOME/local, the config.site will be read and all the assignments will be made for you.  CPPFLAGS and LDFLAGS should be all you need, but you can make any other desired assignments as well (hence the ... in the sample above).  Note that -I flags belong in CPPFLAGS and not in CFLAGS, as -I is intended for the pre-processor and not the compiler.</p>
","7619133"
"How do you run multiple programs in parallel from a bash script?","134859","","<p>I am trying to write a <strong>.sh file</strong> that runs many programs <strong>simultaneously</strong></p>

<p>I tried this</p>

<pre><code>prog1 
prog2
</code></pre>

<p>But that runs prog1 then waits until prog1 ends and then starts prog2...</p>

<p>So how can I run them in parallel?</p>
","<pre><code>prog1 &amp;
prog2 &amp;
</code></pre>
","3004814"
"bash echo number of lines of file given in a bash variable without the file name","134393","","<p>I have the following three constructs in a bash script:</p>

<pre><code>NUMOFLINES=$(wc -l $JAVA_TAGS_FILE)
echo $NUMOFLINES"" lines""

echo $(wc -l $JAVA_TAGS_FILE)"" lines""

echo ""$(wc -l $JAVA_TAGS_FILE) lines""
</code></pre>

<p>And they both produce identical output when the script is run:</p>

<pre><code>121711 /home/slash/.java_base.tag lines
121711 /home/slash/.java_base.tag lines
121711 /home/slash/.java_base.tag lines
</code></pre>

<p>I.e. the name of the file is also echoed (which I don't want to). Why do these scriplets fail and how should I output a clean:</p>

<pre><code>121711 lines
</code></pre>

<p>?</p>
","<h3>An Example Using Your Own Data</h3>

<p>You can avoid having your filename embedded in the <strong>NUMOFLINES</strong> variable by using redirection from <strong>JAVA_TAGS_FILE</strong>, rather than passing the filename as an argument to <em>wc</em>. For example:</p>

<pre><code>NUMOFLINES=$(wc -l &lt; ""$JAVA_TAGS_FILE"")
</code></pre>

<h3>Explanation: Use Pipes or Redirection to Avoid Filenames in Output</h3>

<p>The <em>wc</em> utility will not print the name of the file in its output if input is taken from a pipe or redirection operator. Consider these various examples:</p>

<pre><code># wc shows filename when the file is an argument
$ wc -l /etc/passwd
41 /etc/passwd

# filename is ignored when piped in on standard input
$ cat /etc/passwd | wc -l
41

# unusual redirection, but wc still ignores the filename
$ &lt; /etc/passwd wc -l
41

# typical redirection, taking standard input from a file
$ wc -l &lt; /etc/passwd
41
</code></pre>

<p>As you can see, the only time <em>wc</em> will print the filename is when its passed as an argument, rather than as data on standard input. In some cases, you may want the filename to be printed, so it's useful to understand when it will be displayed.</p>
","12022403"
"Checking from shell script if a directory contains files","134341","","<p>From a shell script, how do I check if a directory contains files?</p>

<p>Something similar to this</p>

<pre class=""lang-sh prettyprint-override""><code>if [ -e /some/dir/* ]; then echo ""huzzah""; fi;
</code></pre>

<p>but which works if the directory contains one or several files (the above one only works with exactly 0 or 1 files).</p>
","<p>The solutions so far use <code>ls</code>. Here's an all bash solution:</p>

<pre><code>#!/bin/bash
shopt -s nullglob dotglob     # To include hidden files
files=(/some/dir/*)
if [ ${#files[@]} -gt 0 ]; then echo ""huzzah""; fi
</code></pre>
","91558"
"When do we need curly braces around shell variables?","134253","","<p>In shell scripts, when do we use <code>{}</code> when expanding variables?</p>

<p>For example, I have seen the following:</p>

<pre><code>var=10        # Declare variable

echo ""${var}"" # One use of the variable
echo ""$var""   # Another use of the variable
</code></pre>

<p>Is there a significant difference, or is it just style? Is one preferred over the other?</p>
","<p>In this particular example, it makes no difference. However, the <code>{}</code> in <code>${}</code> are useful if you want to expand the variable <code>foo</code> in the string</p>

<pre><code>""${foo}bar""
</code></pre>

<p>since <code>""$foobar""</code> would instead expand <code>foobar</code>.</p>

<p>Curly braces are also unconditionally required when:</p>

<ul>
<li>expanding array elements, as in <code>${array[42]}</code></li>
<li>using parameter expansion operations, as in <code>${filename%.*}</code> (remove extension)</li>
<li>expanding positional parameters beyond 9: <code>""$8 $9 ${10} ${11}""</code></li>
</ul>

<p>Doing this everywhere, instead of just in potentially ambiguous cases, can be considered good programming practice. This is both for consistency and to avoid surprises like <code>$foo_$bar.jpg</code>, where it's not visually obvious that the underscore becomes part of the variable name.</p>
","8748880"
"Shell script to capture Process ID and kill it if exist","134079","","<p>I tried this code and it is not working</p>

<pre><code>#!/bin/sh

#Find the Process ID for syncapp running instance

PID=`ps -ef | grep syncapp 'awk {print $2}'`

if [[ -z ""$PID"" ]] then
Kill -9 PID
fi
</code></pre>

<p>It is showing a error near awk.</p>

<p>Any suggestions please.</p>
","<p>Actually the easiest way to do that would be to pass kill arguments like below:</p>

<pre><code>ps -ef | grep your_process_name | grep -v grep | awk '{print $2}' | xargs kill
</code></pre>

<p>Hope it helps.</p>
","15896729"
"Laravel installation: How to place the ~/.composer/vendor/bin directory in your PATH?","133715","","<p>I'm on Ubuntu 14.04 and I've been trying all possible methods to install Laravel to no avail. Error messages everything I try. I'm now trying the first method in the quickstart documentation, that is, via Laravel Installer, but it says to ""Make sure to place the ~/.composer/vendor/bin directory in your PATH so the laravel executable is found when you run the laravel command in your terminal."" so my question is, how do I do that? This may be a simple question but I'm really frustrated and would appreciate any help.</p>
","<p>To put this folder on the PATH environment variable type</p>

<pre><code>export PATH=""$PATH:$HOME/.composer/vendor/bin""
</code></pre>

<p>This appends the folder to your existing PATH, however, it is only active for your current terminal session.</p>

<p>If you want it to be automatically set, it depends on the shell you are using. For bash you can append this line to <code>$HOME/.bashrc</code> using your favourite editor or type the following on the shell</p>

<pre><code>echo 'export PATH=""$PATH:$HOME/.composer/vendor/bin""' &gt;&gt; ~/.bashrc
</code></pre>

<p>In order to check if it worked, logout and login again or execute</p>

<pre><code>source ~/.bashrc
</code></pre>

<p>on the shell.</p>

<p>PS: For other systems where there is no <code>~/.bashrc</code>, you can also put this into <code>~/.bash_profile</code></p>
","25373254"
"How to debug a bash script?","133652","","<p>Is there any way to debug a bash script? E.g something that prints a sort of execution log like ""calling line 1"", ""calling line 2"" etc.</p>
","<pre><code>sh -x script [arg1 ...]
bash -x script [arg1 ...]
</code></pre>

<p>These give you a trace of what is being executed.  (See also 'Clarification' near the bottom of the answer.)</p>

<p>Sometimes, you need to control the debugging within the script.  In that case, as <a href=""https://stackoverflow.com/users/110662/cheeto"">Cheeto</a> <a href=""https://stackoverflow.com/a/951371/15168"">reminded</a> me, you can use:</p>

<pre><code>set -x
</code></pre>

<p>This turns debugging on.  You can then turn it off again with:</p>

<pre><code>set +x
</code></pre>

<p>(You can find out the current tracing state by analyzing <code>$-</code>, the current flags, for <code>x</code>.)</p>

<p>Also, shells generally provide options '<code>-n</code>' for 'no execution' and '<code>-v</code>' for 'verbose' mode; you can use these in combination to see whether the shell thinks it could execute your script — occasionally useful if you have an unbalanced quote somewhere.</p>

<hr>

<p>There is contention that the '<code>-x</code>' option in Bash is different from other shells (see the comments).  The <a href=""http://www.gnu.org/software/bash/manual/bash.html#The-Set-Builtin"" rel=""noreferrer"">Bash Manual</a> says:</p>

<ul>
<li><p>-x</p>

<p>Print a trace of simple commands, <code>for</code> commands, <code>case</code> commands, <code>select</code> commands, and arithmetic <code>for</code> commands and their arguments or associated word lists after they are expanded and before they are executed. The value of the <code>PS4</code> variable is expanded and the resultant value is printed before the command and its expanded arguments. </p></li>
</ul>

<p>That much does not seem to indicate different behaviour at all.  I don't see any other relevant references to '<code>-x</code>' in the manual.  It does not describe differences in the startup sequence.</p>

<p><em>Clarification</em>: On systems such as a typical Linux box, where '<code>/bin/sh</code>' is a symlink to '<code>/bin/bash</code>' (or wherever the Bash executable is found), the two command lines achieve the equivalent effect of running the script with execution trace on.  On other systems (for example, Solaris, and some more modern variants of Linux), <code>/bin/sh</code> is not Bash, and the two command lines would give (slightly) different results.  Most notably, '<code>/bin/sh</code>' would be confused by constructs in Bash that it does not recognize at all.  (On Solaris, <code>/bin/sh</code> is a Bourne shell; on modern Linux, it is sometimes Dash — a smaller, more strictly POSIX-only shell.)  When invoked by name like this, the 'shebang' line ('<code>#!/bin/bash</code>' vs <code>'#!/bin/sh</code>') at the start of the file has no effect on how the contents are interpreted.</p>

<p>The Bash manual has a section on <a href=""http://www.gnu.org/software/bash/manual/bash.html#Bash-POSIX-Mode"" rel=""noreferrer"">Bash POSIX mode</a> which, contrary to a long-standing but erroneous version of this answer (see also the comments below), does describe in extensive detail the difference between 'Bash invoked as <code>sh</code>' and 'Bash invoked as <code>bash</code>'.</p>

<p>When debugging a (Bash) shell script, it will be sensible and sane — necessary even — to use the shell named in the shebang line with the <code>-x</code> option.  Otherwise, you may (will?) get different behaviour when debugging from when running the script.</p>
","951352"
"GIT Bash - how to default to other directory instead of home directory","133635","","<p>I am developing on a windows machine. The only place I need for linux command line is Git Bash. The problem is: When I open it, I am in the home directory. I have to change the directory to my workspace, like:</p>

<pre><code>cd ../../../d/work_space_for_my_company/project/code_source
</code></pre>

<p>Can I wrap this in a .sh file so I don't have to hand-type it anymore? This should be simple but I have zero knowledge about Linux command line. I am really appreciated If you can walk me
through how to create that .sh file.</p>
","<p>Just write that line to a file ""cd.sh"", then do this from your shell prompt:</p>

<pre><code>. ./cd.sh
</code></pre>

<p>Or you can create an alias or function in your <code>$HOME/.bashrc</code> file:</p>

<pre><code>foo() { cd /d/work_space_for_my_company/project/code_source ; }
</code></pre>

<p>If the directory name includes spaces or other shell metacharacters, you'll need quotation marks; it won't hurt to add them even if they're not necessary:</p>

<pre><code>foo() { cd ""/d/Work Space/project/code_source"" ; }
</code></pre>

<p>(Note that I've omitted the <code>../../..</code>; you don't need it.)</p>

<p>EDIT: If you add a line</p>

<pre><code>foo
</code></pre>

<p>to your <code>.bashrc</code> after the function definition, your shell will start in that directory. Or you can just use the <code>cd</code> command directly in your <code>.bashrc</code> if you aren't going to need to use the function later.</p>

<p>(The name <code>foo</code> is just an example; you should pick a more meaningful name.)</p>
","7017188"
"Run script with rc.local: script works, but not at boot","133321","","<p>I have a node.js script which need to start at boot <em>and</em> run under the www-data user. During development I always started the script with:</p>

<pre><code>su www-data -c 'node /var/www/php-jobs/manager.js
</code></pre>

<p>I saw exactly what happened, the manager.js works now great. Searching SO I found I had to place this in my <code>/etc/rc.local</code>. Also, I learned to point the output to a log file and to append the <code>2&gt;&amp;1</code> to ""redirect stderr to stdout"" and it should be a daemon so the last character is a <code>&amp;</code>.</p>

<p>Finally, my <code>/etc/rc.local</code> looks like this:</p>

<pre><code>#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will ""exit 0"" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

su www-data -c 'node /var/www/php-jobs/manager.js &gt;&gt; /var/log/php-jobs.log 2&gt;&amp;1 &amp;'

exit 0
</code></pre>

<p>If I run this myself (<code>sudo /etc/rc.local</code>): yes, it works! However, if I perform a reboot no <code>node</code> process is running, the <code>/var/log/php-jobs.log</code> does not exist and thus, the manager.js does not work. What is happening?</p>
","<p>I ended up with <a href=""http://kevin.vanzonneveld.net/techblog/article/run_nodejs_as_a_service_on_ubuntu_karmic/"" rel=""noreferrer"">upstart</a>, which works fine.</p>
","8331447"
"Send password when using scp to copy files from one server to another","132821","","<p>using scp to copy files from 1 unix server to another regularly and performing certain actions. to do this quickly I wish to use a unix script which does the scp and inputs the password required to complete the scp.</p>

<p>I have tried the expect command to send the password throught the unix command line however unable to achieve this so far.</p>

<p>sample commands</p>

<pre><code>scp ./abc.txt hostname/abc.txt
expect ""*password:*""
send ""mypassword\r""
</code></pre>

<p>I get these errors:</p>

<pre><code>couldn't read file ""password: "": no such file or directory
myscript.sh[5]: send: not found [No such file or directory]
</code></pre>

<p>am I missing something?</p>
","<p>Here is how I resolved it.</p>

<p>It is not the most secure way however it solved my problem as security was not an issue on internal servers.</p>

<p>Create a new file say <code>password.txt</code> and store the password for the server where the file will be pasted. Save this to a location on the host server.</p>

<pre><code>scp -W location/password.txt copy_file_location paste_file_location
</code></pre>

<p>Cheers!</p>
","21940886"
"Write to file, but overwrite it if it exists","132624","","<pre><code>echo ""text"" &gt;&gt; 'Users/Name/Desktop/TheAccount.txt'
</code></pre>

<p>How do I make it so it creates the file if it doesn't exist, but overwrites it if it already exists. Right now this script just appends.</p>
","<p>A little understanding of how *nix pipes work would help.</p>

<p>In short the <code>&gt;&gt;</code> redirection operator will append lines to the end of the specified file, where-as the single greater than <code>&gt;</code> will empty and overwrite the file.</p>

<pre><code>echo ""text"" &gt; 'Users/Name/Desktop/TheAccount.txt'
</code></pre>
","4676473"
"Multiplication on command line terminal","132375","","<p>I'm using a serial terminal to provide input into our lab experiment. I found that using </p>

<pre><code>$ echo ""5X5""
</code></pre>

<p>just returns a string of <code>""5X5""</code>. Is there a command to execute a multiplication operation?</p>
","<p>Yes, you can use <a href=""https://www.gnu.org/software/bash/manual/html_node/Arithmetic-Expansion.html"" rel=""noreferrer"">bash's built-in Arithmetic Expansion <code>$(( ))</code></a> to do some simple maths</p>

<pre><code>$ echo ""$((5 * 5))""
25
</code></pre>

<p>Check the <a href=""https://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html#Shell-Arithmetic"" rel=""noreferrer"">Shell Arithmetic section in the Bash Reference Manual</a> for a complete list of operators.</p>

<p>For sake of completeness, as other pointed out, if you need arbitrary precision, <a href=""http://www.manpagez.com/man/1/bc/"" rel=""noreferrer""><code>bc</code></a> or <a href=""http://www.manpagez.com/man/1/dc/"" rel=""noreferrer""><code>dc</code></a> would be better.</p>
","11039905"
"How to store standard error in a variable in a Bash script","132352","","<p>Let's say I have a script like the following:</p>

<p>useless.sh</p>

<pre><code>echo ""This Is Error"" 1&gt;&amp;2
echo ""This Is Output"" 
</code></pre>

<p>And I have another shell script:</p>

<p>alsoUseless.sh</p>

<pre><code>./useless.sh | sed 's/Output/Useless/'
</code></pre>

<p>I want to capture ""This Is Error"", or any other stderr from useless.sh, into a variable. 
Let's call it ERROR.</p>

<p>Notice that I am using stdout for something. I want to continue using stdout, so redirecting stderr into stdout is not helpful, in this case.</p>

<p>So, basically, I want to do</p>

<pre><code>./useless.sh 2&gt; $ERROR | ...
</code></pre>

<p>but that obviously doesn't work.</p>

<p>I also know that I could do</p>

<pre><code>./useless.sh 2&gt; /tmp/Error
ERROR=`cat /tmp/Error`
</code></pre>

<p>but that's ugly and unnecessary.</p>

<p>Unfortunately, if no answers turn up here that's what I'm going to have to do.</p>

<p>I'm hoping there's another way.</p>

<p>Anyone have any better ideas?</p>
","<p>It would be neater to capture the error file thus:</p>

<pre><code>ERROR=$(&lt;/tmp/Error)
</code></pre>

<p>The shell recognizes this and doesn't have to run '<code>cat</code>' to get the data.</p>

<p>The bigger question is hard.  I don't think there's an easy way to do it.  You'd have to build the entire pipeline into the sub-shell, eventually sending its final standard output to a file, so that you can redirect the errors to standard output.</p>

<pre><code>ERROR=$( { ./useless.sh | sed s/Output/Useless/ &gt; outfile; } 2&gt;&amp;1 )
</code></pre>

<p>Note that the semi-colon is needed (in classic shells - Bourne, Korn - for sure; probably in Bash too).  The '<code>{}</code>' does I/O redirection over the enclosed commands.  As written, it would capture errors from <code>sed</code> too.</p>

<p>(Formally untested code - use at own risk.)</p>
","962306"
"Meaning of ""[: too many arguments"" error from if [] (square brackets)","131828","","<p>I couldn't find any one simple straightforward resource spelling out the meaning of and fix for the following BASH shell error, so I'm posting what I found after researching it.</p>

<p><strong>The error:</strong></p>

<pre><code>-bash: [: too many arguments
</code></pre>

<p><strong>Google-friendly version:</strong> <code>bash open square bracket colon too many arguments</code>.</p>

<p><strong>Context:</strong> an if condition in single square brackets with a simple comparison operator like equals, greater than etc, for example:</p>

<pre><code>VARIABLE=$(/some/command);
if [ $VARIABLE == 0 ]; then
  # some action
fi 
</code></pre>
","<p>If your <code>$VARIABLE</code> is a string containing spaces or other special characters, <a href=""https://serverfault.com/questions/52034/what-is-the-difference-between-double-and-single-square-brackets-in-bash"">and single square brackets are used</a> (which is a shortcut for the <code>test</code> command), then the string may be split out into multiple words. Each of these is treated as a separate argument. </p>

<p>So that <strong>one variable is split out into many arguments</strong>:</p>

<pre><code>VARIABLE=$(/some/command);  
# returns ""hello world""

if [ $VARIABLE == 0 ]; then
  # fails as if you wrote:
  # if [ hello world == 0 ]
fi 
</code></pre>

<p>The same will be true for any function call that puts down a string containing spaces or other special characters.</p>

<hr>

<h2>Easy fix</h2>

<p>Wrap the variable output in double quotes, forcing it to stay as one string (therefore one argument). For example,</p>

<pre><code>VARIABLE=$(/some/command);
if [ ""$VARIABLE"" == 0 ]; then
  # some action
fi 
</code></pre>

<p><strong>Simple as that.</strong> But skip to ""Also beware..."" below if you also can't guarantee your variable won't be an empty string, or a string that contains nothing but whitespace.</p>

<hr>

<p>Or, an <strong>alternate fix</strong> is to use double square brackets (which is a shortcut for the <code>new test</code> command). </p>

<p>This exists only in bash (and apparently korn and zsh) however, and so may not be compatible with default shells called by <code>/bin/sh</code> etc. This means on some systems, for example, it might work from the console but not from <code>cron</code>, depending on how everything is configured. </p>

<p>It would look like this:</p>

<pre><code>VARIABLE=$(/some/command);
if [[ $VARIABLE == 0 ]]; then
  # some action
fi 
</code></pre>

<hr>

<h2>Also beware of the <code>[: unary operator expected</code> error</h2>

<p>If you're seeing the ""too many arguments"" error, chances are you're getting a string from a function with unpredictable output. <strong>If it's also possible to get an empty string</strong> (or all whitespace string), this would be treated as zero arguments even with the above ""quick fix"", and would fail with <code>[: unary operator expected</code> </p>

<p>It's the same 'gotcha' if you're used to other languages - you don't expect the contents of a variable to be effectively printed into the code like this before it is evaluated.</p>

<p>Here's an example that prevents both the <code>[: too many arguments</code> and the <code>[: unary operator expected</code> errors: replacing the output with a default value if it is empty (in this example, <code>0</code>), with double quotes wrapped around the whole thing:</p>

<pre><code>VARIABLE=$(/some/command);
if [ ""${VARIABLE:-0}"" == 0 ]; then
  # some action
fi 
</code></pre>

<p>(here, the action will happen if $VARIABLE is 0, or empty. Naturally, you should change the 0 (the default value) to a different default value if different behaviour is wanted)</p>

<hr>

<p><strong>Final note:</strong> Since <code>[</code> is a shortcut for <code>test</code>, all the above is also true for the error <code>test: too many arguments</code> (and also <code>test: unary operator expected</code>)</p>
","13781217"
"How to find the last field using 'cut'","129910","","<p><em>Without</em> using <code>sed</code> or <code>awk</code>, <em>only</em> <code>cut</code>, how do I get the last field when the number of fields are unknown or change with every line?</p>
","<p>You could try something like this:</p>

<pre><code>echo 'maps.google.com' | rev | cut -d'.' -f 1 | rev
</code></pre>

<p><strong>Explanation</strong></p>

<ul>
<li>maps.google.com's reverse will be <code>moc.elgoog.spam</code></li>
<li><code>cut</code> uses dot as the delimiter and chooses the first field, which is <code>moc</code></li>
<li>lastly, we reverse it again (thanks for the reminder, @tom) to get <code>com</code></li>
</ul>
","22727211"
"How to loop over directories in Linux?","129806","","<p>I am writing a script in bash on Linux and need to go through all subdirectory names in a given directory. How can I loop through these directories (and skip regular files)?</p>

<p><strong>For example:</strong><br>
the given directory is <code>/tmp/</code><br>
it has the following subdirectories: <code>/tmp/A, /tmp/B, /tmp/C</code></p>

<p>I want to retrieve A, B, C.</p>
","<pre><code>cd /tmp
find . -maxdepth 1 -mindepth 1 -type d -printf '%f\n'
</code></pre>

<p>A short explanation: <code>find</code> finds files (quite obviously)</p>

<ul>
<li><p>. is the current directory, after the cd it's <code>/tmp</code> (IMHO this is more flexible than having <code>/tmp</code> directly in the find command. You have only one place, the <code>cd</code>, to change, if you want more actions to take place in this folder)</p></li>
<li><p><code>-maxdepth 1</code> and <code>-mindepth 1</code> make sure, that <code>find</code> really, only looks in the current dir and doesn't include '<code>.</code>' in the result</p></li>
<li><p><code>-type d</code> looks only for directories</p></li>
<li><p><code>-printf '%f\n</code> prints only the found folder's name (plus a newline) for each hit.</p></li>
</ul>

<p>E voila!</p>
","2107982"
"How do you run a script on login in *nix?","129525","","<p>I know I once know how to do this but... how do you run a script (bash is OK) on login in unix?</p>
","<p>From <a href=""http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"" rel=""noreferrer"">wikipedia Bash</a></p>

<blockquote>
  <p>When Bash starts, it executes the commands in a variety of different
  scripts.</p>
  
  <p>When Bash is invoked as an interactive
  login shell, it first reads and
  executes commands from the file
  /etc/profile, if that file exists.
  After reading that file, it looks for
  ~/.bash_profile, ~/.bash_login, and
  ~/.profile, in that order, and reads
  and executes commands from the first
  one that exists and is readable.</p>
  
  <p>When a login shell exits, Bash reads
  and executes commands from the file
  ~/.bash_logout, if it exists.</p>
  
  <p>When an interactive shell that is not
  a login shell is started, Bash reads
  and executes commands from ~/.bashrc,
  if that file exists. This may be
  inhibited by using the --norc option.
  The --rcfile file option will force
  Bash to read and execute commands from
  file instead of ~/.bashrc.</p>
</blockquote>
","97187"
"How to upload (FTP) files to server in a bash script?","129210","","<p>I'm trying to write a bash script that uploads a file to a server. How can I achieve this? Is a bash script the right thing to use for this?</p>
","<p>You really should use SSH/SCP/SFTP for this rather than FTP. SSH/SCP have the benefits of being more secure and working with public/private keys which allows it to run without a username or password.</p>

<p>You can send a single file:</p>

<pre><code>scp &lt;file to upload&gt; &lt;username&gt;@&lt;hostname&gt;:&lt;destination path&gt;
</code></pre>

<p>Or a whole directory:</p>

<pre><code>scp -r &lt;directory to upload&gt; &lt;username&gt;@&lt;hostname&gt;:&lt;destination path&gt;
</code></pre>

<p>For more details on setting up keys and moving files to the server with RSYNC, which is useful if you have a lot of files to move, or if you sometimes get just one new file among a set of random files, take a look at:</p>

<p><a href=""http://troy.jdmz.net/rsync/index.html"" rel=""noreferrer"">http://troy.jdmz.net/rsync/index.html</a></p>

<p>You can also execute a single command after sshing into a server:</p>

<p>From <code>man ssh</code></p>

<blockquote>
  <p>ssh [...snipped...] hostname [command] If command is specified, it is
  executed on the remote host instead of a login shell.</p>
</blockquote>

<p>So, an example command is:</p>

<pre><code>ssh username@hostname.example bunzip file_just_sent.bz2
</code></pre>

<p>If you can use SFTP with keys to gain the benefit of a secured connection, there are two tricks I've used to execute commands.</p>

<p>First, you can pass commands using echo and pipe</p>

<pre><code>echo ""put files*.xml"" | sftp -p -i ~/.ssh/key_name username@hostname.example
</code></pre>

<p>You can also use a batchfile with the <code>-b</code> parameter:</p>

<pre><code>sftp -b batchfile.txt ~/.ssh/key_name username@hostname.example
</code></pre>

<hr>

<p>If you understand that FTP is insecure and more limited and you really really want to script it...</p>

<p>There's a great article on this at <a href=""http://www.stratigery.com/scripting.ftp.html"" rel=""noreferrer"">http://www.stratigery.com/scripting.ftp.html</a></p>

<pre><code>#!/bin/sh
HOST='ftp.example.com'
USER='yourid'
PASSWD='yourpw'
FILE='file.txt'

ftp -n $HOST &lt;&lt;END_SCRIPT
quote USER $USER
quote PASS $PASSWD
binary
put $FILE
quit
END_SCRIPT
exit 0
</code></pre>

<p>The ""-n"" to ftp ensures that the command won't try to get the password from the current terminal. The other fancy part is the use of a heredoc: the <code>&lt;&lt;END_SCRIPT</code> starts the heredoc and then that exact same <code>END_SCRIPT</code> on the beginning of the line by itself ends the heredoc. The <code>binary</code> command will set it to binary mode which helps if you are transferring something other than a text file.</p>
","1894479"
"Aborting a shell script if any command returns a non-zero value?","129089","","<p>I have a Bash shell script that invokes a number of commands.
I would like to have the shell script automatically exit with a return value of 1 if any of the commands return a non-zero value.</p>

<p>Is this possible without explicitly checking the result of each command?</p>

<p>e.g. </p>

<pre><code>dosomething1
if [[ $? -ne 0 ]]; then
    exit 1
fi

dosomething2
if [[ $? -ne 0 ]]; then
    exit 1
fi
</code></pre>
","<p>Add this to the beginning of the script:</p>

<pre><code>set -e
</code></pre>

<p>This will cause the shell to exit immediately if a simple command exits with a nonzero exit value.  A simple command is any command not part of an if, while, or until test, or part of an &amp;&amp; or || list.</p>

<p>See the <a href=""http://man7.org/linux/man-pages/man1/bash.1.html#SHELL_BUILTIN%20COMMANDS"" rel=""noreferrer"">bash(1) man page</a> on the ""set"" internal command for more details.</p>

<p>I personally start almost all shell scripts with ""set -e"".  It's really annoying to have a script stubbornly continue when something fails in the middle and breaks assumptions for the rest of the script.</p>
","821419"
"How to extract text from a string using sed?","129067","","<p>My example string is as follows:</p>

<pre><code>This is 02G05 a test string 20-Jul-2012
</code></pre>

<p>Now from the above string I want to extract <code>02G05</code>. For that I tried the following regex with sed</p>

<pre><code>$ echo ""This is 02G05 a test string 20-Jul-2012"" | sed -n '/\d+G\d+/p'
</code></pre>

<p>But the above command prints nothing and the reason I believe is it is not able to match anything against the pattern I supplied to sed.</p>

<p>So, my question is what am I doing wrong here and how to correct it.</p>

<p>When I try the above string and pattern with python I get my result</p>

<pre><code>&gt;&gt;&gt; re.findall(r'\d+G\d+',st)
['02G05']
&gt;&gt;&gt;
</code></pre>
","<p>The pattern <code>\d</code> might not be supported by your <code>sed</code>. Try <code>[0-9]</code> or <code>[[:digit:]]</code> instead.</p>

<p>To only print the actual match (not the entire matching line), use a substitution.</p>

<pre><code>sed -n 's/.*\([0-9][0-9]*G[0-9][0-9]*\).*/\1/p'
</code></pre>
","11568930"
"What is your single most favorite command-line trick using Bash?","128713","","<p>We all know how to use <code>&lt;ctrl&gt;-R</code> to reverse search through history, but did you know you can use <code>&lt;ctrl&gt;-S</code> to forward search if you set <code>stty stop """"</code>?  Also, have you ever tried running bind -p to see all of your keyboard shortcuts listed?  There are over 455 on Mac OS X by default.  </p>

<p>What is your single most favorite obscure trick, keyboard shortcut or shopt configuration using bash?</p>
","<p>When running commands, sometimes I'll want to run a command with the previous ones arguments.  To do that, you can use this shortcut:</p>

<pre><code>$ mkdir /tmp/new
$ cd !!:*
</code></pre>

<p>Occasionally, in lieu of using find, I'll break-out a one-line loop if I need to run a bunch of commands on a list of files.  </p>

<pre><code>for file in *.wav; do lame ""$file"" ""$(basename ""$file"" .wav).mp3"" ; done;
</code></pre>

<p>Configuring the command-line history options in my .bash_login (or .bashrc) is really useful.  The following is a cadre of settings that I use on my Macbook Pro. </p>

<p>Setting the following makes bash erase duplicate commands in your history:</p>

<pre><code>export HISTCONTROL=""erasedups:ignoreboth""
</code></pre>

<p>I also jack my history size up pretty high too.  Why not?  It doesn't seem to slow anything down on today's microprocessors.</p>

<pre><code>export HISTFILESIZE=500000
export HISTSIZE=100000
</code></pre>

<p>Another thing that I do is ignore some commands from my history.  No need to remember the exit command. </p>

<pre><code>export HISTIGNORE=""&amp;:[ ]*:exit""
</code></pre>

<p>You definitely want to set histappend.  Otherwise, bash overwrites your history when you exit.</p>

<pre><code>shopt -s histappend
</code></pre>

<p>Another option that I use is cmdhist.  This lets you save multi-line commands to the history as one command.</p>

<pre><code>shopt -s cmdhist
</code></pre>

<p>Finally, on Mac OS X (if you're not using vi mode), you'll want to reset &lt;CTRL&gt;-S from being scroll stop.  This prevents bash from being able to interpret it as forward search. </p>

<pre><code>stty stop """"
</code></pre>
","68421"
"Colorized grep -- viewing the entire file with highlighted matches","128414","","<p>I find <code>grep</code>'s <code>--color=always</code> flag to be tremendously useful. However, grep only prints lines with matches (unless you ask for context lines). Given that each line it prints has a match, the highlighting doesn't add as much capability as it could.</p>

<p>I'd really like to <code>cat</code> a file and see the entire file with the pattern matches highlighted.</p>

<p>Is there some way I can tell grep to print every line being read regardless of whether there's a match? I know I could write a script to run grep on every line of a file, but I was curious whether this was possible with standard <code>grep</code>.</p>
","<p>Here are some ways to do it:</p>

<pre><code>grep --color -E 'pattern|$' file
grep --color 'pattern\|$' file
egrep --color 'pattern|$' file
</code></pre>
","981831"
"Join elements of an array?","128048","","<p>If I have an array like this in Bash:</p>

<pre><code>FOO=( a b c )
</code></pre>

<p>How do I join the elements with commas?  For example, producing <code>a,b,c</code>.</p>
","<p>Rewriting solution by Pascal Pilz as a function in 100% pure Bash (no external commands):</p>

<pre><code>function join_by { local IFS=""$1""; shift; echo ""$*""; }
</code></pre>

<p>For example,</p>

<pre><code>join_by , a ""b c"" d #a,b c,d
join_by / var local tmp #var/local/tmp
join_by , ""${FOO[@]}"" #a,b,c
</code></pre>

<p>Alternatively, we can use printf to support multi-character delimiters, using the idea by @gniourf_gniourf</p>

<pre><code>function join_by { local d=$1; shift; echo -n ""$1""; shift; printf ""%s"" ""${@/#/$d}""; }
</code></pre>

<p>For example,</p>

<pre><code>join_by , a b c #a,b,c
join_by ' , ' a b c #a , b , c
join_by ')|(' a b c #a)|(b)|(c
join_by ' %s ' a b c #a %s b %s c
join_by $'\n' a b c #a&lt;newline&gt;b&lt;newline&gt;c
join_by - a b c #a-b-c
join_by '\' a b c #a\b\c
</code></pre>
","17841619"
"How can I use inverse or negative wildcards when pattern matching in a unix/linux shell?","127989","","<p>Say I want to copy the contents of a directory excluding files and folders whose names contain the word 'Music'.</p>

<pre><code>cp [exclude-matches] *Music* /target_directory
</code></pre>

<p>What should go in place of [exclude-matches] to accomplish this?</p>
","<p>In Bash you can do it by enabling the extglob option, like this (replace ls for cp and add the target directory, of course)</p>

<pre><code>~/foobar&gt; shopt extglob
extglob         off
~/foobar&gt; ls
abar  afoo  bbar  bfoo
~/foobar&gt; ls !(b*)
-bash: !: event not found
~/foobar&gt; shopt -s extglob  #Enables extglob
~/foobar&gt; ls !(b*)
abar  afoo
~/foobar&gt; ls !(a*)
bbar  bfoo
~/foobar&gt; ls !(*foo)
abar  bbar
</code></pre>

<p>You can later disable extglob with</p>

<pre><code>shopt -u extglob
</code></pre>
","217017"
"How can I list out the size of each file and directory (recursively) and sort by size decendingly in Bash?","127899","","<p>I found that there is no easy to get way the size of a directory in Bash?</p>

<p>I want that when I type <code>ls -&lt;some options&gt;</code>, it can list of all the sum of the file size of directory recursively and files at the same time and sort by size order.</p>

<p>Is that possible?</p>
","<p>Simply navigate to directory and run following command: </p>

<pre><code>du -a --max-depth=1 | sort -n
</code></pre>

<p>OR add -h for human readable sizes and -r to print bigger directories/files first.</p>

<pre><code>du -a -h --max-depth=1 | sort -hr
</code></pre>
","14749369"
"Root user/sudo equivalent in Cygwin?","127216","","<p>I'm trying to run a bash script in Cygwin.  </p>

<p>I get <code>Must run as root, i.e. sudo ./scriptname</code> errors.  </p>

<p><code>chmod 777 scriptname</code> does nothing to help.  </p>

<p>I've looked for ways to imitate sudo on Cygwin, to add a root user, since calling ""su"" renders the error <code>su: user root does not exist</code>, anything useful, and have found nothing.  </p>

<p>Anyone have any suggestions?</p>
","<p>I answered this question on <a href=""https://superuser.com/a/699281/93684"">SuperUser</a> but only after the OP disregarded the unhelpful answer that was at the time the only answer to the question.</p>

<p><strong>Here is the proper way to elevate permissions in Cygwin, copied from my own answer on SuperUser:</strong></p>

<p>I found the answer on <a href=""http://cygwin.com/ml/cygwin/2010-04/msg00651.html"" rel=""noreferrer"">the cygwin mailing list</a>. To run <code>command</code> with elevated privileges in Cygwin, precede the command with <code>cygstart --action=runas</code> like this:</p>

<pre><code>$ cygstart --action=runas command
</code></pre>

<p><strong>This will open a Windows dialogue box asking for the Admin password and run the command if the proper password is entered.</strong></p>

<p>This is easily scripted, so long as <code>~/bin</code> is in your path. Create a file <code>~/bin/sudo</code> with the following content:</p>

<pre><code>#!/usr/bin/bash
cygstart --action=runas ""$@""
</code></pre>

<p>Now make the file executable:</p>

<pre><code>$ chmod +x ~/bin/sudo
</code></pre>

<p>Now you can run commands with <strong>real elevated privileges</strong>:</p>

<pre><code>$ sudo elevatedCommand
</code></pre>

<p>You may need to add <code>~/bin</code> to your path. You can run the following command on the Cygwin CLI, or add it to <code>~/.bashrc</code>:</p>

<pre><code>$ PATH=$HOME/bin:$PATH
</code></pre>

<p>Tested on 64-bit Windows 8.</p>
","21024592"
"How to resolve symbolic links in a shell script","126715","","<p>Given an absolute or relative path (in a Unix-like system), I would like to determine the full path of the target after resolving any intermediate symlinks. Bonus points for also resolving ~username notation at the same time.</p>

<p>If the target is a directory, it might be possible to chdir() into the directory and then call getcwd(), but I really want to do this from a shell script rather than writing a C helper. Unfortunately, shells have a tendency to try to hide the existence of symlinks from the user (this is bash on OS X):</p>

<pre><code>$ ls -ld foo bar
drwxr-xr-x   2 greg  greg  68 Aug 11 22:36 bar
lrwxr-xr-x   1 greg  greg   3 Aug 11 22:36 foo -&gt; bar
$ cd foo
$ pwd
/Users/greg/tmp/foo
$
</code></pre>

<p>What I want is a function resolve() such that when executed from the tmp directory in the above example, resolve(""foo"") == ""/Users/greg/tmp/bar"".</p>
","<p>According to the standards, <code>pwd -P</code> should return the path with symlinks resolved.</p>

<p>C function <code>char *getcwd(char *buf, size_t size)</code> from <code>unistd.h</code> should have the same behaviour.</p>

<p><a href=""http://www.opengroup.org/onlinepubs/009695399/functions/getcwd.html"" rel=""noreferrer"">getcwd</a>
<a href=""http://www.opengroup.org/onlinepubs/009695399/utilities/pwd.html"" rel=""noreferrer"">pwd</a></p>
","7666"
"Is [[ ]] preferable over [ ] in Bash?","126618","","<p>A co-worker claimed recently in a code review that the <code>[[ ]]</code> construct is to be preferred over <code>[ ]</code> in constructs like </p>

<pre><code>if [ ""`id -nu`"" = ""$someuser"" ] ; then 
     echo ""I love you madly, $someuser""
fi
</code></pre>

<p>He couldn't provide a rationale. Is there one?</p>
","<p><code>[[</code> has fewer surprises and is generally safer to use. But it is not portable - POSIX doesn't specify what it does and only some shells support it (beside bash, I heard ksh supports it too). For example, you can do </p>

<pre><code>[[ -e $b ]]
</code></pre>

<p>to test whether a file exists. But with <code>[</code>, you have to quote <code>$b</code>, because it splits the argument and expands things like <code>""a*""</code> (where <code>[[</code> takes it literally). That has also to do with how <code>[</code> can be an external program and receives its argument just normally like every other program (although it can also be a builtin, but then it still has not this special handling).</p>

<p><code>[[</code> also has some other nice features, like regular expression matching with <code>=~</code> along with operators like they are known in C-like languages. Here is a good page about it: <a href=""http://mywiki.wooledge.org/BashFAQ/031"" rel=""noreferrer"">What is the difference between test, <code>[</code> and <code>[[</code> ?</a> and <a href=""http://mywiki.wooledge.org/BashGuide/Practices#Bash_Tests"" rel=""noreferrer"">Bash Tests</a></p>
","669486"
"kill a process in bash","126117","","<p>How do I kill a process which is running in bash - for example, suppose I open a file:</p>

<blockquote>
  <p>$ gedit file.txt</p>
</blockquote>

<p>is there any way within the command prompt to close it? This example is fairly trivial, since I could just close the window, but it seems to come up a bit, particularly when I mistype commands.</p>

<p>Also is there any way to escape an executable which is running? This probably has the same solution, but I thought I'd ask anyway.</p>

<p>Thanks</p>
","<p>To interrupt it, you can try pressing <kbd>ctrl</kbd> <kbd>c</kbd> to send a SIGINT. If it doesn't stop it, you may try to kill it using <code>kill -9 &lt;pid&gt;</code>, which sends a SIGKILL. The latter can't be ignored/intercepted by the process itself (the one being killed).</p>

<p>To move the active process to background, you can press <kbd>ctrl</kbd> <kbd>z</kbd>. The process is sent to background and you get back to the shell prompt. Use the <code>fg</code> command to do the opposite.</p>
","2775093"
"Passing arrays as parameters in bash","126068","","<p>How can I pass an array as parameter to a bash function?</p>

<p><strong>Note:</strong> After not finding an answer here on Stack Overflow, I posted my somewhat crude solution myself. It allows for only one array being passed, and it being the last element of the parameter list. Actually, it is not passing the array at all, but a list of its elements, which are re-assembled into an array by called_function(), but it worked for me. If someone knows a better way, feel free to add it here.</p>
","<p>You can pass <strong>multiple arrays as arguments</strong> using something like this:</p>

<pre><code>takes_ary_as_arg()
{
    declare -a argAry1=(""${!1}"")
    echo ""${argAry1[@]}""

    declare -a argAry2=(""${!2}"")
    echo ""${argAry2[@]}""
}
try_with_local_arys()
{
    # array variables could have local scope
    local descTable=(
        ""sli4-iread""
        ""sli4-iwrite""
        ""sli3-iread""
        ""sli3-iwrite""
    )
    local optsTable=(
        ""--msix  --iread""
        ""--msix  --iwrite""
        ""--msi   --iread""
        ""--msi   --iwrite""
    )
    takes_ary_as_arg descTable[@] optsTable[@]
}
try_with_local_arys
</code></pre>

<h3>will echo:</h3>

<pre><code>sli4-iread sli4-iwrite sli3-iread sli3-iwrite  
--msix  --iread --msix  --iwrite --msi   --iread --msi   --iwrite
</code></pre>
","4017175"
"How to delete files older than X hours","124319","","<p>I'm writing a bash script that needs to delete old files.</p>

<p>It's currently implemented using :</p>

<pre><code>find $LOCATION -name $REQUIRED_FILES -type f -mtime +1 -delete
</code></pre>

<p>This will delete of the files older than 1 day.</p>

<p>However, what if I need a finer resolution that 1 day, say like 6 hours old? Is there a nice clean way to do it, like there is using find and -mtime?</p>
","<p>Does your <a href=""http://linuxcommand.org/man_pages/find1.html"" rel=""noreferrer""><code>find</code></a> have the <code>-mmin</code> option? That can let you test the number of mins since last modification:</p>

<pre><code>find $LOCATION -name $REQUIRED_FILES -type f -mmin +360 -delete
</code></pre>

<p>Or maybe look at using <a href=""http://linux.about.com/library/cmd/blcmdl8_tmpwatch.htm"" rel=""noreferrer""><code>tmpwatch</code></a> to do the same job. phjr also recommended <a href=""http://linux.about.com/cs/linux101/g/tmpreaper.htm"" rel=""noreferrer""><code>tmpreaper</code></a> in the comments.</p>
","249591"
"""find: paths must precede expression:"" How do I specify a recursive search that also finds files in the current directory?","124249","","<p>I am having a hard time getting <strong>find</strong> to look for matches in the current directory as well as its subdirectories. </p>

<p>When I run <code>find *test.c</code> it only gives me the matches in the current directory. (does not look in subdirectories)</p>

<p>If I try <code>find . -name *test.c</code> I would expect the same results, but instead it gives me only matches that are in a subdirectory. When there are files that should match in the working directory, it gives me: <code>find: paths must precede expression: mytest.c</code> </p>

<p>What does this error mean, and how can I get the matches from both the current directory and its subdirectories?</p>
","<p>Try putting it in quotes -- you're running into the shell's wildcard expansion, so what you're acually passing to find will look like:</p>

<pre><code>find . -name bobtest.c cattest.c snowtest.c
</code></pre>

<p>...causing the syntax error. So try this instead:</p>

<pre><code>find . -name '*test.c'
</code></pre>

<p>Note the single quotes around your file expression -- these will stop the shell (bash) expanding your wildcards.</p>
","6495536"
"Accessing bash command line args $@ vs $*","123688","","<p>In many SO questions and bash tutorials I see that I can access command line args in bash scripts in two ways:</p>

<pre><code>$ ~ &gt;cat testargs.sh 
#!/bin/bash

echo ""you passed me"" $*
echo ""you passed me"" $@
</code></pre>

<p>Which results in:</p>

<pre><code>$ ~&gt; bash testargs.sh arg1 arg2
you passed me arg1 arg2
you passed me arg1 arg2
</code></pre>

<p>What is the difference between <code>$*</code> and <code>$@</code>?<br>
When should one use the former and when shall one use the latter?</p>
","<p>The difference appears when the special parameters are quoted. Let me illustrate the differences:</p>

<pre><code>$ set -- ""arg  1"" ""arg  2"" ""arg  3""

$ for word in $*; do echo ""$word""; done
arg
1
arg
2
arg
3

$ for word in $@; do echo ""$word""; done
arg
1
arg
2
arg
3

$ for word in ""$*""; do echo ""$word""; done
arg  1 arg  2 arg  3

$ for word in ""$@""; do echo ""$word""; done
arg  1
arg  2
arg  3
</code></pre>

<hr>

<p>one further example on the importance of quoting: note there are 2 spaces between ""arg"" and the number, but if I fail to quote $word:</p>

<pre><code>$ for word in ""$@""; do echo $word; done
arg 1
arg 2
arg 3
</code></pre>

<p>and in bash, <code>""$@""</code> is the ""default"" list to iterate over:</p>

<pre><code>$ for word; do echo ""$word""; done
arg  1
arg  2
arg  3
</code></pre>
","12316565"
"Check if passed argument is file or directory in BASH","123280","","<p>I'm trying to write an extremely simple script in Ubuntu which would allow me to pass it either a filename or a directory, and be able to do something specific when it's a file, and something else when it's a directory.  The problem I'm having is when the directory name, or probably files too, has spaces or other escapable characters are in the name.</p>

<p>Here's my basic code down below, and a couple tests.</p>

<pre><code>#!/bin/bash

PASSED=$1

if [ -d ""${PASSED}"" ] ; then
    echo ""$PASSED is a directory"";
else
    if [ -f ""${PASSED}"" ]; then
        echo ""${PASSED} is a file"";
    else
        echo ""${PASSED} is not valid"";
        exit 1
    fi
fi
</code></pre>

<p>And here's the output:</p>

<pre><code>andy@server~ $ ./scripts/testmove.sh /home/andy/
/home/andy/ is a directory

andy@server~ $ ./scripts/testmove.sh /home/andy/blah.txt
/home/andy/blah.txt is a file

andy@server~ $ ./scripts/testmove.sh /home/andy/blah\ with\ a\ space.txt
/home/andy/blah with a space.txt is not valid

andy@server~ $ ./scripts/testmove.sh /home/andy\ with\ a\ space/
/home/andy with a space/ is not valid
</code></pre>

<p>All of those paths are valid, and exist.</p>
","<p>That should work. I am not sure why it's failing. You're quoting your variables properly. What happens if you use this script with double <code>[[</code> <code>]]</code>?</p>

<pre><code>if [[ -d $PASSED ]]; then
    echo ""$PASSED is a directory""
elif [[ -f $PASSED ]]; then
    echo ""$PASSED is a file""
else
    echo ""$PASSED is not valid""
    exit 1
fi
</code></pre>

<p>Double square brackets is a bash extension to <code>[ ]</code>. It doesn't require variables to be quoted, not even if they contain spaces.</p>

<p>Also worth trying: <code>-e</code> to test if a path exists without testing what type of file it is.</p>
","4665080"
"How to copy a file to multiple directories using the gnu cp command","123255","","<p>Is it possible to copy a single file to multiple directories using the cp command ?</p>

<p>I tried the following , which did not work:  </p>

<pre><code>cp file1 /foo/ /bar/
cp file1 {/foo/,/bar}
</code></pre>

<p>I know it's possible using a for loop, or find. But is it possible using the gnu cp command?</p>
","<p>No, <code>cp</code> can copy multiple sources but will only copy to a single destination. You need to arrange to invoke <code>cp</code> multiple times - once per destination - for what you want to do; using, as you say, a loop or some other tool.</p>
","195663"
"linux: kill background task","122728","","<p>How do I kill the last spawned background task in linux?</p>

<p>Example:</p>

<pre><code>doSomething
doAnotherThing
doB &amp;
doC
doD
#kill doB
????
</code></pre>
","<p>There's a special variable for this in bash:</p>

<pre><code>kill $!
</code></pre>

<p>$! expands to the PID of the last process executed in the background.</p>
","1624713"
"Passing a string with spaces as a function argument in bash","122563","","<p>I'm writing a bash script where I need to pass a string containing spaces to a function in my bash script.</p>

<p>For example:</p>

<pre><code>#!/bin/bash

myFunction
{
    echo $1
    echo $2
    echo $3
}

myFunction ""firstString"" ""second string with spaces"" ""thirdString""
</code></pre>

<p>When run, the output I'd expect is:</p>

<pre><code>firstString
second string with spaces
thirdString
</code></pre>

<p>However, what's actually output is:</p>

<pre><code>firstString
second
string
</code></pre>

<p>Is there a way to pass a string with spaces as a single argument to a function in bash?</p>
","<p>you should put quotes and also, your function declaration is wrong.</p>

<pre><code>myFunction()
{
    echo ""$1""
    echo ""$2""
    echo ""$3""
}
</code></pre>

<p>And like the others, it works for me as well. Tell us what version of shell you are using.</p>
","1983070"
"Shell - Write variable contents to a file","122289","","<p>I would like to copy the contents of a variable (here called <code>var</code>) into a file.</p>

<p>The name of the file is stored in another variable <code>destfile</code>. </p>

<p>I'm having problems doing this. Here's what I've tried:</p>

<pre><code>cp $var $destfile
</code></pre>

<p>I've also tried the same thing with the dd command... Obviously the shell thought that <code>$var</code> was referring to a directory and so told me that the directory could not be found. </p>

<p>How do I get around this?</p>
","<p>Use the <code>echo</code> command:</p>

<pre><code>var=""text to append"";
destdir=/some/directory/path/filename

if [ -f ""$destdir"" ]
then 
    echo ""$var"" &gt; ""$destdir""
fi
</code></pre>

<p>The <code>if</code> tests that <code>$destdir</code> represents a file.</p>

<p>The <code>&gt;</code> appends the text after truncating the file. If you only want to append the text in <code>$var</code> to the file existing contents, then use <code>&gt;&gt;</code> instead:</p>

<pre><code>echo ""$var"" &gt;&gt; ""$destdir""
</code></pre>

<p>The <code>cp</code> command is used for copying files (to files), not for writing text to a file.</p>
","11618931"
"How to hide command output in bash","122243","","<p>I want to make my bash scripts more elegant for the end user.How do i hide the output when bash is executing commmands
For e.g 
when bash execute </p>

<pre><code>yum install nano
</code></pre>

<p>The following will show up to the user who executed the bash</p>

<pre><code>Loaded plugins: fastestmirror
base                                                     | 3.7 kB     00:00
base/primary_db                                          | 4.4 MB     00:03
extras                                                   | 3.4 kB     00:00
extras/primary_db                                        |  18 kB     00:00
updates                                                  | 3.4 kB     00:00
updates/primary_db                                       | 3.8 MB     00:02
Setting up Install Process
Resolving Dependencies
--&gt; Running transaction check
---&gt; Package nano.x86_64 0:2.0.9-7.el6 will be installed
--&gt; Finished Dependency Resolution

Dependencies Resolved

================================================================================
 Package         Arch              Version                Repository       Size
================================================================================
Installing:
 nano            x86_64            2.0.9-7.el6            base            436 k

Transaction Summary
================================================================================
Install       1 Package(s)

Total download size: 436 k
Installed size: 1.5 M
Downloading Packages:
nano-2.0.9-7.el6.x86_64.rpm                              | 436 kB     00:00
warning: rpmts_HdrFromFdno: Header V3 RSA/SHA256 Signature, key ID c105b9de: NOKEY
Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
Importing GPG key 0xC105B9DE:
 Userid : CentOS-6 Key (CentOS 6 Official Signing Key) &lt;centos-6-key@centos.org&gt;
 Package: centos-release-6-4.el6.centos.10.x86_64 (@anaconda-CentOS-201303020151.x86_64/6.4)
 From   : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
  Installing : nano-2.0.9-7.el6.x86_64                                      1/1
  Verifying  : nano-2.0.9-7.el6.x86_64                                      1/1

Installed:
  nano.x86_64 0:2.0.9-7.el6

Complete!
</code></pre>

<p>Now i want to hide this from the user and instead show </p>

<pre><code>Installing nano ......
</code></pre>

<p>How can i accomplish this task.I will definitely help to make script more user friendly.In case an error occurs then it should be shown to the user. </p>

<p>Edit i would like to know how to show same message while a set of commands are being executed</p>
","<h3>Use this.</h3>

<pre><code>{
  /your/first/command
  /your/second/command
} &amp;&gt; /dev/null
</code></pre>

<h3>Explanation</h3>

<p>To eliminate output from commands, you have two options:</p>

<ul>
<li><p>Close the output descriptor file, which keeps it from accepting any more input. That looks like this:</p>

<pre><code>your_command ""Is anybody listening?"" &gt;&amp;-
</code></pre>

<p>Usually, output goes either to file descriptor 1 (stdout) or 2 (stderr). If you close a file descriptor, you'll have to do so for every numbered descriptor, as <code>&amp;&gt;</code> (below) is a special BASH syntax incompatible with <code>&gt;&amp;-</code>:</p>

<pre><code>/your/first/command &gt;&amp;- 2&gt;&amp;-
</code></pre>

<p>Be careful to note the order: <code>&gt;&amp;-</code> <a href=""https://blog.apokalyptik.com/2007/10/24/bash-tip-closing-file-descriptors/"">closes stdout</a>, which is what you want to do; <code>&amp;&gt;-</code> redirects stdout and stderr to a file named <code>-</code> (hyphen), which is not what what you want to do. It'll look the same at first, but the latter creates a stray file in your working directory. It's easy to remember: <code>&gt;&amp;2</code> redirects stdout to descriptor 2 (stderr), <code>&gt;&amp;3</code> redirects stdout to descriptor 3, and <code>&gt;&amp;-</code> redirects stdout to a dead end (i.e. it closes stdout).</p>

<p>Also beware that some commands may not handle a closed file descriptor particularly well (""write error: Bad file descriptor""), which is why the better solution may be to...</p></li>
<li><p><strong><a href=""http://en.wikipedia.org/wiki//dev/null"">Redirect output to <code>/dev/null</code></a></strong>, which accepts all output and does nothing with it. It looks like this:</p>

<pre><code>your_command ""Hello?"" &gt; /dev/null
</code></pre>

<p>For output redirection to a file, you can direct both stdout and stderr to the same place very concisely, but only in bash:</p>

<pre><code>/your/first/command &amp;&gt; /dev/null
</code></pre></li>
</ul>

<p>Finally, to do the same for a number of commands at once, surround the whole thing in curly braces. Bash treats this as <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Command-Grouping"">a group of commands</a>, aggregating the output file descriptors so you can redirect all at once. If you're familiar instead with subshells using <code>( command1; command2; )</code> syntax, you'll find the braces behave almost exactly the same way, except that unless you involve them in a pipe the braces will not create a subshell and thus will allow you to set variables inside.</p>

<pre><code>{
  /your/first/command
  /your/second/command
} &amp;&gt; /dev/null
</code></pre>

<p>See the <a href=""http://www.gnu.org/software/bash/manual/bash.html#Redirections"">bash manual on redirections</a> for more details, options, and syntax.</p>
","18063720"
"Checking host availability by using ping in bash scripts","122058","","<p>I want to write a script, that would keep checking if any of the devices in network, that should be online all day long, are really online. I tried to use ping, but</p>

<pre><code>if [ ""`ping -c 1 some_ip_here`"" ]
then
  echo 1
else
  echo 0
fi
</code></pre>

<p>gives <code>1</code> no matter if I enter valid or invalid ip address. How can I check if a specific address (or better any of devices from list of ip addresses) went offline?</p>
","<p>Ping returns different exit codes depending on the type of error.</p>

<pre><code>ping 256.256.256.256 ; echo $?
# 68

ping -c 1 127.0.0.1 ; echo $?
# 0

ping -c 1 192.168.1.5 ; echo $?
# 2
</code></pre>

<p>0 means host reachable</p>

<p>2 means unreachable</p>
","18123263"
"What is the Linux equivalent to DOS pause?","121573","","<p>I have a Bash shell script in which I would like to pause execution until the user presses a key. In DOS, this is easily accomplished with the ""pause"" command. Is there a Linux equivalent I can use in my script?</p>
","<p><code>read</code> does this:</p>

<pre><code>user@host:~$ read -n1 -r -p ""Press any key to continue..."" key
[...]
user@host:~$ 
</code></pre>

<p>The <code>-n1</code> specifies that it only waits for a single character. The <code>-r</code> puts it into raw mode, which is necessary because otherwise, if you press something like backslash, it doesn't register until you hit the next key.  The <code>-p</code> specifies the prompt, which must be quoted if it contains spaces.  The <code>key</code> argument is only necessary if you want to know which key they pressed, in which case you can access it through <code>$key</code>.</p>

<p>If you are using Bash, you can also specify a timeout with <code>-t</code>, which causes read to return a failure when a key isn't pressed. So for example:</p>

<pre><code>read -t5 -n1 -r -p 'Press any key in the next five seconds...' key
if [ ""$?"" -eq ""0"" ]; then
    echo 'A key was pressed.'
else
    echo 'No key was pressed.'
fi
</code></pre>
","92813"
"bash script - select from database into variable","121455","","<p>I need a variable to hold results retrieved from the database. So far this is basically what I'm trying with no success.</p>

<pre><code>myvariable=$(mysql database -u $user -p $password | SELECT A, B, C FROM table_a)
</code></pre>

<p>My understanding of bash commands is not very good as you can see.</p>
","<p>I don't know much about the MySQL command line interface, but assuming you only need help with the bashing, you should try to either swap the commands around like so:</p>

<pre><code>myvariable=$(echo ""SELECT A, B, C FROM table_a"" | mysql database -u $user -p$password)
</code></pre>

<p>which echos the string into MySQL. Or, you can be more fancy and use some new bash-features (the here string)</p>

<pre><code>myvariable=$(mysql database -u $user -p$password&lt;&lt;&lt;""SELECT A, B, C FROM table_a"")
</code></pre>

<p>resulting in the same thing (assuming you're using a recent enough bash version), without involving echo.</p>

<p>Please note that the -p$password is not a typo, but is the way MySQL expects passwords to be entered through the command line (with no space between the option and value).</p>

<p>Note that myvariable will contain everything that MySQL outputs on standard out (usually everything but error messages), including any and all column headers, ASCII-art frames and so on, which may or may not be what you want.</p>

<p><B>EDIT:</B><br>
As has been noted, there appears to be a <code>-e</code> parameter to MySQL, I'd go for that one, definitely.</p>
","1637016"
"Set environment variables from file","121423","","<p>I'm writing a script in bash which parses files with 3 variables in a certain folder, this is one of them:</p>

<pre><code>MINIENTREGA_FECHALIMITE=""2011-03-31""
MINIENTREGA_FICHEROS=""informe.txt programa.c""
MINIENTREGA_DESTINO=""./destino/entrega-prac1""
</code></pre>

<p>This file is stored in ./conf/prac1</p>

<p>My script minientrega.sh then parses the file using this code:</p>

<pre><code>cat ./conf/$1 | while read line; do
    export $line
done
</code></pre>

<p>But when I execute <code>minientrega.sh prac1</code> in the command line it doesn't set the environment variables</p>

<p>I also tried using <code>source ./conf/$1</code> but the same problem still applies</p>

<p>Maybe there is some other way to do this, I just need to use the environment variables of the file I pass as the argument of my script.</p>
","<p>Problem with your approach is the <code>export</code> in the <code>while</code> loop is happening in a sub shell, and those variable will not be available in current shell (parent shell of while loop).</p>

<p>Add <code>export</code> command in the file itself:</p>

<pre><code>export MINIENTREGA_FECHALIMITE=""2011-03-31""
export MINIENTREGA_FICHEROS=""informe.txt programa.c""
export MINIENTREGA_DESTINO=""./destino/entrega-prac1""
</code></pre>

<p>Then you need to source in the file in current shell using:</p>

<pre><code>. ./conf/prac1
</code></pre>

<p>OR</p>

<pre><code>source ./conf/prac1
</code></pre>
","19331521"
"Bash ignoring error for a particular command","121417","","<p>I am using following options</p>

<pre><code>set -o pipefail
set -e
</code></pre>

<p>In bash script to stop execution on error. I have 100 of script executing and I don't want to check return code of the script. 
But for a particular script I want to ignore the error. How can I do that ?</p>
","<p>The solution:</p>

<pre><code>particular_script || true
</code></pre>

<p>Example:</p>

<pre><code>$ cat /tmp/1.sh
particular_script()
{
    false
}

set -e

echo ein
particular_script || true
echo zwei
particular_script
echo drei

$ bash /tmp/1.sh
ein
zwei
</code></pre>

<p><code>drei</code> will be never printed.</p>

<p>Also, I want to add that when <code>pipefail</code> is on,
it is enough for shell to think that the entire pipe has non-zero exit code
when one of commands in the pipe has non-zero exit code (with <code>pipefail</code> off it must the last one).</p>

<pre><code>$ set -o pipefail
$ false | true ; echo $?
1
$ set +o pipefail
$ false | true ; echo $?
0
</code></pre>
","11231970"
"Read line by line in bash script","121155","","<p>I want to do the following, read line by line of a file and use the value per line as params</p>

<pre><code>FILE=""cat test""
echo ""$FILE"" | \
while read CMD; do
echo $CMD
done
</code></pre>

<p>but when I do the echo $CMD, it just returns cat :S</p>
","<p>What you have is piping the text <code>""cat test""</code> into the loop.</p>

<p>You just want:</p>

<pre><code>cat test | \
while read CMD; do
    echo $CMD
done
</code></pre>
","4642204"
"How to declare 2D array in bash","120938","","<p>I'm wondering how to declare a 2D array in bash and then initialize to 0.</p>

<p>In C it looks like this:</p>

<pre><code>int a[4][5] = {0};
</code></pre>

<p>And how do I assign a value to an element? As in C:</p>

<pre><code>a[2][3] = 3;
</code></pre>
","<p>You can simulate them for example with hashes, but need care about the leading zeroes and many other things. The next demonstration works, but it is far from optimal solution.</p>

<pre><code>#!/bin/bash
declare -A matrix
num_rows=4
num_columns=5

for ((i=1;i&lt;=num_rows;i++)) do
    for ((j=1;j&lt;=num_columns;j++)) do
        matrix[$i,$j]=$RANDOM
    done
done

f1=""%$((${#num_rows}+1))s""
f2="" %9s""

printf ""$f1"" ''
for ((i=1;i&lt;=num_rows;i++)) do
    printf ""$f2"" $i
done
echo

for ((j=1;j&lt;=num_columns;j++)) do
    printf ""$f1"" $j
    for ((i=1;i&lt;=num_rows;i++)) do
        printf ""$f2"" ${matrix[$i,$j]}
    done
    echo
done
</code></pre>

<p>the above example creates a 4x5 matrix with random numbers and print it transposed, with the example result</p>

<pre><code>           1         2         3         4
 1     18006     31193     16110     23297
 2     26229     19869      1140     19837
 3      8192      2181     25512      2318
 4      3269     25516     18701      7977
 5     31775     17358      4468     30345
</code></pre>

<p>The principle is: Creating one associative array where the index is an string like <code>3,4</code>. The benefits:</p>

<ul>
<li>it's possible to use for any-dimension arrays ;) like: <code>30,40,2</code> for 3 dimensional.</li>
<li>the syntax is close to ""C"" like arrays  <code>${matrix[2,3]}</code></li>
</ul>
","16487733"
"How to remove space from string?","120892","","<p>In ubuntu bash script how to remove space from one variable</p>

<p>string will be </p>

<pre><code>   3918912k 
</code></pre>

<p>Want to remove all blank space.</p>
","<p>Try doing this in a shell:</p>

<pre><code>s=""  3918912k""
echo ${s//[[:blank:]]/}
</code></pre>

<p>That uses <a href=""http://wiki.bash-hackers.org/syntax/pe"" rel=""noreferrer"">parameter expansion</a></p>

<p><code>[[:blank:]]</code> is a POSIX regex class (remove spaces, tabs...), see <a href=""http://www.regular-expressions.info/posixbrackets.html"" rel=""noreferrer"">http://www.regular-expressions.info/posixbrackets.html</a></p>
","13659345"
"Sorting data based on the value in second column of a file","120488","","<p>I have a file of two columns and <code>n</code> number of rows.</p>

<p>column 1 contains <code>names</code> and column2 <code>age</code>.</p>

<p>I want to sort the content of this file in ascending order based on the <code>age</code> (in second column).</p>

<p>The result should display the <code>name</code> of the youngest person along with <code>name</code> and then second youngest person and so on...</p>

<p>Any suggestions for a one liner shell or bash script.</p>
","<p>You can use the <code>sort</code> command:</p>

<pre><code>sort -k2 -n yourfile
</code></pre>

<p>For example:</p>

<pre><code>$ cat ages.txt 
Bob 12
Jane 48
Mark 3
Tashi 54
$ sort -k2 -n ages.txt 
Mark 3
Bob 12
Jane 48
Tashi 54
</code></pre>
","6438940"
"Bash script plugin for Eclipse?","120337","","<p>Are there any decent <code>bash</code> plug-ins for Eclipse?  My only requirement is syntax highlighting.  I've googled about but did not see anything that looked like <em>""the""</em> <code>bash</code> plug-in.  </p>
","<p><a href=""http://sourceforge.net/projects/shelled/"" rel=""noreferrer"">ShellEd</a> looks promising, does syntax highlighting, and has positive reviews, although I've not tried it myself. It was <a href=""https://bugzilla.redhat.com/show_bug.cgi?id=470792"" rel=""noreferrer"">approved</a> for distro inclusion by Redhat. There's a little more info on the <a href=""http://marketplace.eclipse.org/content/shelled"" rel=""noreferrer"">ShellEd plugin page</a> on the Eclipse site, and <a href=""http://sourceforge.net/apps/trac/shelled/wiki/Documentation/InstallGuide"" rel=""noreferrer"">installation instructions</a> on their wiki.</p>

<p>Note that if you're not running an up-to-date version of Eclipse (as of this writing, Juno) you'll need to use an older version, for instance 2.0.1 is compatible with Indigo.</p>
","1356854"
"redirect COPY of stdout to log file from within bash script itself","120146","","<p>I know how to <strong>redirect stdout</strong> to a file:</p>

<pre><code>exec &gt; foo.log
echo test
</code></pre>

<p>this will put the 'test' into the foo.log file.</p>

<p>Now I want to <strong>redirect the output into the log file AND keep it on stdout</strong></p>

<p>i.e. it can be done trivially from outside the script:</p>

<pre><code>script | tee foo.log
</code></pre>

<p>but I want to do declare it within the script itself</p>

<p>I tried</p>

<pre><code>exec | tee foo.log
</code></pre>

<p>but it didn't work.</p>
","<pre><code>#!/usr/bin/env bash

# Redirect stdout ( &gt; ) into a named pipe ( &gt;() ) running ""tee""
exec &gt; &gt;(tee -i logfile.txt)

# Without this, only stdout would be captured - i.e. your
# log file would not contain any error messages.
# SEE (and upvote) the answer by Adam Spiers, which keeps STDERR
# as a separate stream - I did not want to steal from him by simply
# adding his answer to mine.
exec 2&gt;&amp;1

echo ""foo""
echo ""bar"" &gt;&amp;2
</code></pre>

<p>Note that this is <code>bash</code>, not <code>sh</code>. If you invoke the script with <code>sh myscript.sh</code>, you will get an error along the lines of <code>syntax error near unexpected token '&gt;'</code>.</p>

<p>If you are working with signal traps, you might want to use the <code>tee -i</code> option to avoid disruption of the output if a signal occurs. (Thanks to  JamesThomasMoon1979 for the comment.)</p>

<hr>

<p>Tools that change their output depending on whether they write to a pipe or a terminal (<code>ls</code> using colors and columnized output, for example) will detect the above construct as meaning that they output to a pipe.</p>

<p>There are options to enforce the colorizing / columnizing (e.g. <code>ls -C --color=always</code>). Note that this will result in the color codes being written to the logfile as well, making it <em>less</em> readable.</p>
","3403786"
"How to test an Internet connection with bash?","120142","","<p>How can an internet connection be tested without pinging some website?
I mean, what if there is a connection but the site is down? Is there a check for a connection with the world?</p>
","<pre><code>ping www.google.com
ping www.yahoo.com
ping www.facebook.com
ping www.stackoverflow.com
</code></pre>

<p>Do that and you can be pretty sure:)</p>
","929379"
"running php script (php function) in linux bash","120130","","<p>How we run php script using linux bash ? </p>

<p>php file test.php</p>

<p>test.php contain.</p>

<pre><code>&lt;?php echo ""hello\n"" ?&gt;
</code></pre>
","<p>From the command line enter this:
<code>php -f filename.php</code></p>

<p>Make sure that filename.php both includes and executes the function you want to test. Anything you echo out will appear in the console including errors.</p>

<p>Be wary that often the php.ini for Apache PHP is different from CLI PHP (command line interface).</p>
","5549588"
"How to write a bash script that takes optional input arguments?","119184","","<p>I want my script to be able to take an optional input, </p>

<p>e.g. currently my script is </p>

<pre><code>#!/bin/bash
somecommand foo
</code></pre>

<p>but I would like it to say:</p>

<pre><code>#!/bin/bash
somecommand  [ if $1 exists, $1, else, foo ]
</code></pre>
","<p>You could use the default-value syntax:</p>

<pre><code>somecommand ${1:-foo}
</code></pre>

<p>The above will, as described in <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion"" rel=""noreferrer"">Bash Reference Manual - 3.5.3 Shell Parameter Expansion</a> [emphasis mine]:</p>

<blockquote>
  <p>If parameter is unset <em>or null</em>, the expansion of word is substituted. Otherwise, the value of parameter is substituted.</p>
</blockquote>

<p>If you only want to substitute a default value if the parameter is unset (but not if it's null, e.g. not if it's an empty string), use this syntax instead:</p>

<pre><code>somecommand ${1-foo}
</code></pre>

<p>Again from <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion"" rel=""noreferrer"">Bash Reference Manual - 3.5.3 Shell Parameter Expansion</a>:</p>

<blockquote>
  <p>Omitting the colon results in a test only for a parameter that is unset. Put another way, if the colon is included, the operator tests for both parameter’s existence and that its value is not null; if the colon is omitted, the operator tests only for existence.</p>
</blockquote>
","9333006"
"How to output a multiline string in Bash?","119140","","<p>How can I output a multipline string in Bash without using multiple echo calls like so:</p>

<pre><code>echo ""usage: up [--level &lt;n&gt;| -n &lt;levels&gt;][--help][--version]""
echo 
echo ""Report bugs to: ""
echo ""up home page: ""
</code></pre>

<p>I'm looking for a portable way to do this, using only Bash builtins.</p>

<p><strong>EDIT</strong></p>

<p>This is the solution I came up with, which is a variation of Dennis's answer.</p>

<pre><code>read -d '' help &lt;&lt;- EOF
  usage: up [--level &lt;n&gt;| -n &lt;levels&gt;][--help][--version]

  Report bugs to:
  up home page:
EOF 

echo ""$help""
</code></pre>
","<p>Here documents are often used for this purpose.</p>

<pre><code>cat &lt;&lt; EOF
usage: up [--level &lt;n&gt;| -n &lt;levels&gt;][--help][--version]

Report bugs to: 
up home page:
EOF
</code></pre>

<p>They are supported in all Bourne-derived shells including all versions of Bash.</p>
","10970616"
"bash append file contents to the bottom of existing file","118911","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/5586293/shell-script-to-append-text-to-each-file"">Shell script to append text to each file?</a><br>
  <a href=""https://stackoverflow.com/questions/6207573/how-to-append-output-to-the-end-of-text-file-in-shell-script"">How to append output to the end of text file in SHELL Script?</a>  </p>
</blockquote>



<p>I'm trying to work out the best way to insert api details into a pre-existing config. I thought about using <code>sed</code> to insert the contents of the api text file to the bottom of the config.inc file. I've started the script but it doesn't work and it wipes the file. </p>

<pre><code>#!/bin/bash

CONFIG=/home/user/config.inc
API=/home/user/api.txt

sed -e ""\$a $API"" &gt; $CONFIG
</code></pre>

<p>What am I doing wrong?</p>
","<p>This should work:</p>

<pre><code> cat ""$API"" &gt;&gt; ""$CONFIG""
</code></pre>

<p>You need to use the <code>&gt;&gt;</code> operator to append to a file.  Redirecting with <code>&gt;</code> causes the file to be overwritten. (truncated).</p>
","13181820"
"sudo echo ""something"" >> /etc/privilegedFile doesn't work... is there an alternative?","118669","","<p>This is a pretty simple question, at least it seems like it should be, about sudo permissions in Linux.</p>

<p>There are a lot of times when I just want to append something to <code>/etc/hosts</code> or a similar file but end up not being able to because both <code>&gt;</code> and <code>&gt;&gt;</code> are not allowed, even with root.</p>

<p>Is there someway to make this work without having to <code>su</code> or <code>sudo su</code> into root?</p>
","<p>Using tee:</p>

<pre><code>echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list
</code></pre>

<p>Make sure to avoid quotes inside quotes.</p>

<p>To avoid printing data back to the console:</p>

<pre><code>echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list &gt; /dev/null
</code></pre>
","550808"
"Search and replace in bash using regular expressions","117884","","<p>I've seen this example:</p>

<pre><code>hello=ho02123ware38384you443d34o3434ingtod38384day
echo ${hello//[0-9]/}
</code></pre>

<p>Which follows this syntax: <code>${variable//pattern/replacement}</code></p>

<p>Unfortunately the <code>pattern</code> field doesn't seem to support full regex syntax (if I use <code>.</code> or <code>\s</code>, for example, it tries to match the literal characters).</p>

<p>How can I search/replace a string using full regex syntax?</p>
","<p>Use <a href=""http://www.gnu.org/software/sed/manual/"">sed</a>:</p>

<pre><code>MYVAR=ho02123ware38384you443d34o3434ingtod38384day
echo $MYVAR | sed -e 's/[a-zA-Z]/X/g' -e 's/[0-9]/N/g'
# prints XXNNNNNXXXXNNNNNXXXNNNXNNXNNNNXXXXXXNNNNNXXX
</code></pre>

<p>Note that the subsequent <code>-e</code>'s are processed in order.  Also, the <code>g</code> flag for the expression will match all occurrences in the input.</p>

<p>You can also pick your favorite tool using this method, i.e. perl, awk, e.g.:</p>

<pre><code>echo $MYVAR | perl -pe 's/[a-zA-Z]/X/g and s/[0-9]/N/g'
</code></pre>

<p>This may allow you to do more creative matches...  For example, in the snip above, the numeric replacement would not be used unless there was a match on the first expression (due to lazy <code>and</code> evaluation).  And of course, you have the full language support of Perl to do your bidding...</p>
","13043397"
"How do I specify a password to psql non-interactively?","117790","","<p>I am trying to automate database creation process with a shell script and one thing I've hit a road block with passing a password to psql.
Here is a bit of code from the shell script:</p>

<pre><code>psql -U $DB_USER -h localhost -c""$DB_RECREATE_SQL""
</code></pre>

<p>How do I pass a password to psql in a non-interactive way?</p>

<p>Thanks!</p>
","<p>From the <a href=""http://www.postgresql.org/docs/8.3/static/app-psql.html"" rel=""nofollow noreferrer"">official documentation</a>:</p>

<blockquote>
  <p>It is also convenient to have a ~/.pgpass file to avoid regularly having to type in passwords. See <a href=""http://www.postgresql.org/docs/8.3/static/libpq-pgpass.html"" rel=""nofollow noreferrer"">Section 30.13</a> for more information.</p>
</blockquote>

<p>...</p>

<blockquote>
  <p>This file should contain lines of the following format:</p>
</blockquote>

<pre><code>hostname:port:database:username:password
</code></pre>

<blockquote>
  <p>The password field from the first line that matches the current connection parameters will be used. </p>
</blockquote>
","6405162"
"How to iterate over associative arrays in Bash","117582","","<p>Based on an associative array in a Bash script, I need to iterate over it to get the key and value.</p>

<pre><code>#!/bin/bash

declare -A array
array[foo]=bar
array[bar]=foo
</code></pre>

<p>I actually don't understand how to get the key while using a for-in loop.</p>
","<p>The keys are accessed using an exclamation point: <code>${!array[@]}</code>, the <strong><em>values</em></strong> are accessed using <code>${array[@]}</code>.</p>

<p>You can iterate over the key/value pairs like this:</p>

<pre><code>for i in ""${!array[@]}""
do
  echo ""key  : $i""
  echo ""value: ${array[$i]}""
done
</code></pre>

<p>Note the use of quotes around the variable in the <code>for</code> statement (plus the use of <code>@</code> instead of <code>*</code>). This is necessary in case any keys include spaces.</p>

<p>The confusion in the other answer comes from the fact that your question includes ""foo"" and ""bar"" for both the keys <em>and</em> the values.</p>
","3113285"
"using and (&&) operator in if statement bash script","117282","","<p>I have three variables:</p>

<pre><code>VAR1=""file1""
VAR2=""file2""
VAR3=""file3""
</code></pre>

<p>How to use and (<code>&amp;&amp;</code>) operator in if statement like this:</p>

<pre><code>if [ -f $VAR1 &amp;&amp; -f $VAR2 &amp;&amp; -f $VAR3 ]
   then ...
fi
</code></pre>

<p>When I write this code it gives error. What is the right way?</p>
","<p>So to make your expression work, changing <code>&amp;&amp;</code> for <code>-a</code> will do the trick.</p>

<p>It is correct like this:</p>

<pre><code> if [ -f $VAR1 ] &amp;&amp; [ -f $VAR2 ] &amp;&amp; [ -f $VAR3 ]
 then  ....
</code></pre>

<p>or like</p>

<pre><code> if [[ -f $VAR1 &amp;&amp; -f $VAR2 &amp;&amp; -f $VAR3 ]]
 then  ....
</code></pre>

<p>or even</p>

<pre><code> if [ -f $VAR1 -a -f $VAR2 -a -f $VAR3 ]
 then  ....
</code></pre>

<p>You can find further details in this question <a href=""https://stackoverflow.com/q/2309849/1983854"">bash : Multiple Unary operators in if statement</a> and some references given there like <a href=""http://mywiki.wooledge.org/BashFAQ/031"" rel=""noreferrer"">What is the difference between test, [ and [[ ?</a>.</p>
","16396181"
"Fastest way(s) to move the cursor on a terminal command line?","116893","","<p>What is the best way to move around on a given very long command line in the terminal?</p>

<p>Say I used the arrow key or <kbd>Ctrl</kbd>-<kbd>R</kbd> to get this long command line:</p>

<pre><code>./cmd --option1 --option2 --option3 --option4 --option5 --option6 --option7 --option8 --option9 --option10 --option11 --option12 --option13 --option14 --option15 --option16 --option17 --option18 --option19 --option20 --option21 --option22 --option23 --option24 --option25 --option26 --option27 --option28 --option29 --option30 --option31 --option32 --option33 --option34 --option35 --option36 --option37 --option38 --option39 --option40 --option41 --option42 --option43 --option44 --option45 --option46 --option47 --option48 --option49 --option50 
</code></pre>

<p>Now I need to move (starting from the beginning or the end of the line) the cursor to <code>--option25</code> to modify something there. </p>

<p>What is the fastest way to get there? What I usually do is <kbd>Ctrl</kbd>-<kbd>A</kbd> to get to the beginning and then repeatedly <kbd>Alt</kbd>-<kbd>F</kbd> to move forward, word by word (or <kbd>Ctrl</kbd>-<kbd>E</kbd> to go the end and <kbd>Alt</kbd>-<kbd>B</kbd> to then go backward). But on a long line that takes too much time. There must be a way to search and jump directly to the part I need to modify, e.g. <code>option25</code>?</p>
","<p>Since this hasn't been closed yet, here are a few more options.</p>

<ul>
<li>Use <kbd>Ctrl</kbd>+<kbd>x</kbd> followed by <kbd>Ctrl</kbd>+<kbd>e</kbd> to open the current line in the editor specified by <code>$FCEDIT</code> or <code>$EDITOR</code> or <code>emacs</code> (tried in that order).</li>
<li>If you ran the command earlier, hit <kbd>Ctrl</kbd>+<kbd>r</kbd> for a reverse history search and type <code>option25</code> (in this case). The line will be displayed. Hit <kbd>Tab</kbd> to start editing at this point.</li>
<li>Use history expansion with the <code>s///</code> modifier. E.g. <code>!-2:s/--option25/--newoption/</code> would rerun the second-to-last command, but replace option25. To modify the last <code>./cmd</code> command, use the <code>!string</code> syntax: <code>!./cmd:s/--option25/--newoption/</code><br>
Any delimiter may be used in place of / in the substitution.</li>
<li>If editing the previous line, you can use quick substitution: <code>^--option25^--newoption</code></li>
<li>Character search. This was mentioned by Pax, and can be done in regular emacs-mode with <kbd>Ctrl</kbd>+<kbd>]</kbd> for forward search, and <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>]</kbd> for backward search.</li>
</ul>

<p>I recommend the second option. <kbd>Ctrl</kbd>+<kbd>r</kbd> is really handy and fast, no mucking about with editors, and you see the results before the command is run (unlike the history expansions).</p>
","857312"
"Test if a command outputs an empty string","116891","","<p>How can I test if a command outputs an empty string?</p>
","<p><sub>Previously, the question asked how to check whether there are files in a directory.  The following code achieves that, but see <a href=""https://stackoverflow.com/a/35165216/58635"">rsp's answer</a> for a better solution.</sub></p>

<hr>

<h2>Empty output</h2>

<p>Commands don’t <em>return</em> values – they output them. You can capture this output by using <em><a href=""http://mywiki.wooledge.org/CommandSubstitution"" rel=""noreferrer"">command substitution</a></em>; e.g. <code>$(ls -A)</code>. You can test for a non-empty string in Bash like this:</p>

<pre><code>if [[ $(ls -A) ]]; then
    echo ""there are files""
else
    echo ""no files found""
fi
</code></pre>

<p>Note that I've used <code>-A</code> rather than <code>-a</code>, since it omits the symbolic current (<code>.</code>) and parent (<code>..</code>) directory entries.</p>

<p><strong>Note:</strong> As pointed out in the comments, command substitution <strong>doesn't capture trailing newlines</strong>.  Therefore, if the command outputs <em>only</em> newlines, the substitution will capture nothing and the test will return false.  While very unlikely, this is possible in the above example, since a single newline is a valid filename!  More information in <a href=""https://stackoverflow.com/a/15184414/58635"">this answer</a>.</p>

<hr>

<h2>Exit code</h2>

<p>If you want to check that the command completed successfully, you can inspect <code>$?</code>, which contains the exit code of the last command (zero for success, non-zero for failure). For example:</p>

<pre><code>files=$(ls -A)
if [[ $? != 0 ]]; then
    echo ""Command failed.""
elif [[ $files ]]; then
    echo ""Files found.""
else
    echo ""No files found.""
fi
</code></pre>

<p>More info <a href=""http://www.tldp.org/LDP/abs/html/exit-status.html"" rel=""noreferrer"">here</a>.</p>
","12137501"
"How to show a GUI message box from a bash script in linux?","116826","","<p>I'm writing a few little bash scripts under Ubuntu linux. I want to be able to run them from the GUI without needing a terminal window to enter any input or view any output.</p>

<p>So far the only input required is a password for sudo - and gksudo handles that fine.
But I haven't found an easy way to show a message box yet. Is there some kind of 'gkmessage' command available? I'd prefer something present in a default Ubuntu install, but I don't mind installing a new package if necessary.</p>
","<p>I believe <a href=""http://live.gnome.org/Zenity"" rel=""noreferrer"">Zenity</a> will do what you want.  It's specifically designed for displaying GTK dialogs from the command line, and it's available as an <a href=""http://packages.ubuntu.com/hardy/zenity"" rel=""noreferrer"">Ubuntu package</a>.</p>
","7068"
"Custom format for time command","116583","","<p>I'd like to use the <strong>time</strong> command in a <strong>bash script</strong> to calculate the elapsed time of the script and write that to a log file.  I only need the <strong>real time</strong>, not the user and sys.  Also need it in a decent format. e.g 00:00:00:00 (not like the standard output).  I appreciate any advice.</p>

<p>The expected format supposed to be <code>00:00:00.0000</code> (milliseconds) [hours]:[minutes]:[seconds].[milliseconds]</p>

<p>I've already 3 scripts. I saw an example like this:</p>

<pre><code>{ time { # section code goes here } } 2&gt; timing.log
</code></pre>

<p>But I only need the real time, not the user and sys. Also need it in a decent format. e.g <code>00:00:00:00</code> (not like the standard output).</p>

<p>In other words, I'd like to know how to turn the time output into something easier to process.</p>
","<p>You could use the <code>date</code> command to get the current time before and after performing the work to be timed and calculate the difference like this:</p>

<pre><code>#!/bin/bash

# Get time as a UNIX timestamp (seconds elapsed since Jan 1, 1970 0:00 UTC)
T=""$(date +%s)""

# Do some work here
sleep 2

T=""$(($(date +%s)-T))""
echo ""Time in seconds: ${T}""

printf ""Pretty format: %02d:%02d:%02d:%02d\n"" ""$((T/86400))"" ""$((T/3600%24))"" ""$((T/60%60))"" ""$((T%60))""""
</code></pre>

<p>Notes:
<strong>$((...))</strong> can be used for basic arithmetic in <em>bash</em> &ndash; caution: do not put spaces before a minus <strong>-</strong> as this might be interpreted as a command-line option.</p>

<p>See also: <a href=""http://tldp.org/LDP/abs/html/arithexp.html"" rel=""noreferrer"">http://tldp.org/LDP/abs/html/arithexp.html</a></p>

<p><em>EDIT:</em><br>
Additionally, you may want to take a look at <a href=""http://www.google.com/search?hl=en&amp;q=sed"" rel=""noreferrer""><strong>sed</strong></a> to search and extract substrings from the output generated by <strong>time</strong>.</p>

<p><em>EDIT:</em>  </p>

<p>Example for timing with milliseconds (actually nanoseconds but truncated to milliseconds here). Your version of <code>date</code> has to support the <code>%N</code> format and <code>bash</code> should support large numbers.</p>

<pre><code># UNIX timestamp concatenated with nanoseconds
T=""$(date +%s%N)""

# Do some work here
sleep 2

# Time interval in nanoseconds
T=""$(($(date +%s%N)-T))""
# Seconds
S=""$((T/1000000000))""
# Milliseconds
M=""$((T/1000000))""

echo ""Time in nanoseconds: ${T}""
printf ""Pretty format: %02d:%02d:%02d:%02d.%03d\n"" ""$((S/86400))"" ""$((S/3600%24))"" ""$((S/60%60))"" ""$((S%60))"" ""${M}""
</code></pre>

<p><strong>DISCLAIMER:</strong><br>
My original version said</p>

<pre><code>M=""$((T%1000000000/1000000))""
</code></pre>

<p>but this was edited out because it apparently did not work for some people whereas the new version reportedly did. I did not approve of this because I think that you have to use the remainder only but was outvoted.<br>
Choose whatever fits you.</p>
","3684051"
"How do you extract IP addresses from files using a regex in a linux shell?","116490","","<p>How to extract a text part by regexp in linux shell? Lets say, I have file where in every line is an IP address, but in different position. What is  the most simple way to extract those IP addresses using common unix command-line tools?</p>
","<p>You could use <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?grep"" rel=""noreferrer"">grep</a> to pull them out.</p>

<pre><code>grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' file.txt
</code></pre>
","427989"
"Is there a way to run Bash scripts on Windows?","116457","","<p>I have bought and I use Windows 7 Ultimate, and I like to use it to develop applications. One of the down sides (as with every OS) is that I can not run Bash scripts. Is there a way to run Bash scripts on Windows by installing some software? It is ok if it does not work 100%, but as long as the most common functionality is available it should be great.</p>
","<p>Install <a href=""https://www.cygwin.com/"" rel=""noreferrer"">Cygwin</a>, which includes Bash among many other GNU and Unix utilities (without whom its unlikely that bash will be very useful anyway).</p>

<p>Another option is <a href=""http://www.mingw.org/wiki/msys"" rel=""noreferrer"">MinGW's MSYS</a> which includes bash and a smaller set of the more important utilities such as awk. Personally I would have preferred Cygwin because it includes such heavy lifting tools as Perl and Python which I find I cannot live without, while MSYS skimps on these and assumes you are going to install them yourself.</p>

<p><strong>Updated</strong>:
If anyone is interested in this answer and is running MS-Windows 10, please note that MS-Windows 10 has a ""<a href=""https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/"" rel=""noreferrer"">Windows Subsystem For Linux</a>"" feature which - once enabled - allows you to install a user-mode image of Ubuntu and then run Bash on that. This provides 100% compatibility with Ubuntu for debugging and running Bash scripts, but this setup is completely standalone from Windows and you cannot use Bash scripts to interact with Windows features (such as processes and APIs) except for limited access to files through the <a href=""https://blogs.msdn.microsoft.com/wsl/2016/06/15/wsl-file-system-support/"" rel=""noreferrer"">DrvFS</a> feature.</p>
","6413405"
"Simulating ENTER keypress in bash script","116038","","<p>I've created a really simple bash script that runs a few commands.
one of these commands needs user input during runtime. i.e it asks the user ""do you want to blah blah blah?"", I want to simply send an enter keypress to this so that the script will be completely automated.</p>

<p>I won't have to wait for the input or anything during runtime, its enough to just send the keypress and the input buffer will handle the rest.</p>
","<pre><code>echo -ne '\n' | &lt;yourfinecommandhere&gt;
</code></pre>

<p>or taking advantage of the implicit newline that echo generates (thanks Marcin)</p>

<pre><code>echo | &lt;yourfinecommandhere&gt;
</code></pre>
","6264618"
"Random number from a range in a Bash Script","116018","","<p>I need to generate a random port number between <code>2000-65000</code> from a shell script. The problem is <code>$RANDOM</code> is a 15-bit number, so I'm stuck!</p>

<p><code>PORT=$(($RANDOM%63000+2001))</code> would work nicely if it wasn't for the size limitation.</p>

<p>Does anyone have an example of how I can do this, maybe by extracting something from <code>/dev/urandom</code> and getting it within a range?</p>
","<pre><code>shuf -i 2000-65000 -n 1
</code></pre>

<p>Enjoy!</p>

<p><em>Edit</em>: The range is inclusive.</p>
","2556282"
"Using sed to split a string with a delimiter","116016","","<p>I have a string in the following format:</p>

<p><code>string1:string2:string3:string4:string5</code></p>

<p>I'm trying to use <code>sed</code> to split the string on <code>:</code> and print each sub-string on a new line.  Here is what I'm doing:</p>

<p><code>cat ~/Desktop/myfile.txt | sed s/:/\\n/</code> </p>

<p>This prints:</p>

<pre><code>string1
string2:string3:string4:string5
</code></pre>

<p>How can I get it to split on each delimiter?</p>
","<p>To split a string with a delimiter with sed you say:</p>

<pre><code>sed 's/delimiter/\n/g'
</code></pre>

<p>For example, to split using <code>:</code> as a delimiter:</p>

<pre><code>$ sed 's/:/\n/g' &lt;&lt;&lt; ""he:llo:you""
he
llo
you
</code></pre>

<hr>

<p>In this particular case, you missed the <code>g</code> after the substitution. Hence, it is just done once. See:</p>

<pre><code>$ echo ""string1:string2:string3:string4:string5"" | sed s/:/\\n/g
string1
string2
string3
string4
string5
</code></pre>

<p><code>g</code> stands for <code>g</code>lobal and means that the substitution has to be done globally, that is, for any occurrence. See that the default is 1 and if you put for example 2, it is done 2 times, etc.</p>

<p>All together, in your case you would need to use:</p>

<pre><code>sed 's/:/\\n/g' ~/Desktop/myfile.txt
</code></pre>

<p>Note that you can directly use the <code>sed ... file</code> syntax, instead of unnecessary piping: <code>cat file | sed</code>.</p>
","18234407"
"In Bash, how to add ""Are you sure [Y/n]"" to any command or alias?","115855","","<p>In this particular case, I'd like to add a confirm in Bash for</p>

<pre>
Are you sure? [Y/n]
</pre>

<p>for Mercurial's <code>hg push ssh://username@www.example.com//somepath/morepath</code>, which is actually an alias.  Is there a standard command that can be added to the alias to achieve it?</p>

<p>The reason is that <code>hg push</code> and <code>hg out</code> can sound similar and sometimes when I want <code>hgoutrepo</code>, I may accidentlly type <code>hgpushrepo</code> (both are aliases).</p>

<p><strong>Update:</strong> if it can be something like a built-in command with another command, such as: <code>confirm &amp;&amp; hg push ssh://...</code> that'd be great... just a command that can ask for a <code>yes</code> or <code>no</code> and continue with the rest if <code>yes</code>.</p>
","<p>These are more compact and versatile forms of <a href=""https://stackoverflow.com/questions/3231804/in-bash-how-to-add-are-you-sure-y-n-to-any-command-or-alias/3231821#3231821""><strong>Hamish's</strong> answer</a>. They handle any mixture of upper and lower case letters:</p>

<pre><code>read -r -p ""Are you sure? [y/N] "" response
case ""$response"" in
    [yY][eE][sS]|[yY]) 
        do_something
        ;;
    *)
        do_something_else
        ;;
esac
</code></pre>

<p>Or, for Bash >= version 3.2:</p>

<pre><code>read -r -p ""Are you sure? [y/N] "" response
if [[ ""$response"" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    do_something
else
    do_something_else
fi
</code></pre>

<p>Note: If <code>$response</code> is an empty string, it will give an error. To fix, simply add quotation marks: <code>""$response""</code>. – Always use double quotes in variables containing strings (e.g.: prefer to use <code>""$@""</code> instead <code>$@</code>).</p>

<p>Or, Bash 4.x:</p>

<pre><code>read -r -p ""Are you sure? [y/N] "" response
response=${response,,}    # tolower
if [[ ""$response"" =~ ^(yes|y)$ ]]
...
</code></pre>

<p><strong>Edit:</strong></p>

<p>In response to your edit, here's how you'd create and use a <code>confirm</code> command based on the first version in my answer (it would work similarly with the other two):</p>

<pre><code>confirm() {
    # call with a prompt string or use a default
    read -r -p ""${1:-Are you sure? [y/N]} "" response
    case ""$response"" in
        [yY][eE][sS]|[yY]) 
            true
            ;;
        *)
            false
            ;;
    esac
}
</code></pre>

<p>To use this function:</p>

<pre><code>confirm &amp;&amp; hg push ssh://..
</code></pre>

<p>or</p>

<pre><code>confirm ""Would you really like to do a push?"" &amp;&amp; hg push ssh://..
</code></pre>
","3232082"
"Read the json data in shell script","115701","","<p>In shell I have a requirement wherein I have to read the JSON response which is in the following format:</p>

<pre><code> { ""Messages"": [ { ""Body"": ""172.16.1.42|/home/480/1234/5-12-2013/1234.toSort"", ""ReceiptHandle"": ""uUk89DYFzt1VAHtMW2iz0VSiDcGHY+H6WtTgcTSgBiFbpFUg5lythf+wQdWluzCoBziie8BiS2GFQVoRjQQfOx3R5jUASxDz7SmoCI5bNPJkWqU8ola+OYBIYNuCP1fYweKl1BOFUF+o2g7xLSIEkrdvLDAhYvHzfPb4QNgOSuN1JGG1GcZehvW3Q/9jq3vjYVIFz3Ho7blCUuWYhGFrpsBn5HWoRYE5VF5Bxc/zO6dPT0n4wRAd3hUEqF3WWeTMlWyTJp1KoMyX7Z8IXH4hKURGjdBQ0PwlSDF2cBYkBUA="", ""MD5OfBody"": ""53e90dc3fa8afa3452c671080569642e"", ""MessageId"": ""e93e9238-f9f8-4bf4-bf5b-9a0cae8a0ebc"" } ] }
</code></pre>

<p>Here I am only concerned with the ""Body"" property value. I made some unsuccessful attempts like:</p>

<pre><code> jsawk -a 'return this.Body' 
</code></pre>

<p>or </p>

<pre><code> awk -v k=""Body"" '{n=split($0,a,"",""); for (i=1; i&lt;=n; i++) print a[i]} 
</code></pre>

<p>But that did not suffice. Can anyone help me with this?</p>
","<p>There is <code>jq</code> for parsing json on the command line:</p>

<pre><code> jq '.Body'
</code></pre>

<p>Visit this for jq: <a href=""https://stedolan.github.io/jq/"" rel=""noreferrer"">https://stedolan.github.io/jq/</a></p>
","20488535"
"Pipe output and capture exit status in Bash","114947","","<p>I want to execute a long running command in Bash, and both capture its exit status, and <a href=""http://en.wikipedia.org/wiki/Tee_(command)"" rel=""noreferrer"">tee</a> its output.</p>

<p>So I do this:</p>

<pre><code>command | tee out.txt
ST=$?
</code></pre>

<p>The problem is that the variable ST captures the exit status of <code>tee</code> and not of command. How can I solve this?</p>

<p>Note that command is long running and redirecting the output to a file to view it later is not a good solution for me.</p>
","<p>There is an internal Bash variable called <code>$PIPESTATUS</code>; it’s an array that holds the exit status of each command in your last foreground pipeline of commands.</p>

<pre><code>&lt;command&gt; | tee out.txt ; test ${PIPESTATUS[0]} -eq 0
</code></pre>

<p>Or another alternative which also works with other shells (like zsh) would be to enable pipefail:</p>

<pre><code>set -o pipefail
...
</code></pre>

<p>The first option does <em>not</em> work with <code>zsh</code> due to a little bit different syntax.</p>
","1221870"
"Convert date formats in bash","114866","","<p>I have a date in this format:  ""27 JUN 2011"" and I want to convert it to 20110627</p>

<p>Is it possible to do in bash?</p>
","<pre><code>#since this was yesterday
date -dyesterday +%Y%m%d

#more precise, and more recommended
date -d'27 JUN 2011' +%Y%m%d

#assuming this is similar to yesterdays `date` question from you 
#http://stackoverflow.com/q/6497525/638649
date -d'last-monday' +%Y%m%d

#going on @seth's comment you could do this
DATE = ""27 jun 2011""; date -d""$DATE"" +%Y%m%d

#or a method to read it from stdin
read -p ""  Get date &gt;&gt; "" DATE; printf ""  AS YYYYMMDD format &gt;&gt; %s""  `date
-d""$DATE"" +%Y%m%d`    

#which then outputs the following:
#Get date &gt;&gt; 27 june 2011   
#AS YYYYMMDD format &gt;&gt; 20110627

#if you really want to use awk
echo ""27 june 2011"" | awk '{print ""date -d\""""$1FS$2FS$3""\"" +%Y%m%d""}' | bash

#note | bash just redirects awk's output to the shell to be executed
#FS is field separator, in this case you can use $0 to print the line
#But this is useful if you have more than one date on a line
</code></pre>

<p><a href=""http://www.gnu.org/software/coreutils/manual/html_node/Date-input-formats.html#Date-input-formats"" rel=""noreferrer"">More on Dates</a></p>

<p>note this only works on GNU date</p>

<p>I have read that:</p>

<blockquote>
  <p>Solaris version of date, which is unable
  to support <code>-d</code> can be resolve with
  replacing sunfreeware.com version of
  date</p>
</blockquote>
","6508849"
"bash: split output of command by columns","114840","","<p>I want to do this: </p>

<ol>
<li>run a command</li>
<li>capture the output</li>
<li>select a line</li>
<li>select a column of that line</li>
</ol>

<p>Just as an example, let's say I want to get the command name from a <code>$PID</code> (please note this is just an example, I'm not suggesting this is the easiest way to get a command name from a process id - my real problem is with another command whose output format I can't control).</p>

<p>If I run <code>ps</code> I get:</p>

<pre>
<code>
  PID TTY          TIME CMD
11383 pts/1    00:00:00 bash
11771 pts/1    00:00:00 ps
</code>
</pre>

<p>Now I do <code>ps | egrep 11383</code> and get </p>

<pre><code>11383 pts/1    00:00:00 bash</code></pre>

<p>Next step: <code>ps | egrep 11383 | cut -d"" "" -f 4</code>. Output is:</p>

<pre><code>&lt;absolutely nothing/&gt;
</code></pre>

<p>The problem is that <code>cut</code> cuts the output by single spaces, and as <code>ps</code> adds some spaces between the 2nd and 3rd columns to keep some resemblance of a table, <code>cut</code> picks an empty string. Of course, I could use <code>cut</code> to select the 7th and not the 4th field, but how can I know, specially when the output is variable and unknown on beforehand.</p>
","<p>One easy way is to add a pass of <code><a href=""http://linux.die.net/man/1/tr"" rel=""noreferrer"">tr</a></code> to squeeze any repeated field separators out:</p>

<pre><code>$ ps | egrep 11383 | tr -s ' ' | cut -d ' ' -f 4
</code></pre>
","1629950"
"How can I escape white space in a bash loop list?","114676","","<p>I have a bash shell script that loops through all child directories (but not files) of a certain directory.  The problem is that some of the directory names contain spaces.  </p>

<p>Here are the contents of my test directory:</p>

<pre><code>$ls -F test
Baltimore/  Cherry Hill/  Edison/  New York City/  Philadelphia/  cities.txt
</code></pre>

<p>And the code that loops through the directories:</p>

<pre><code>for f in `find test/* -type d`; do
  echo $f
done
</code></pre>

<p>Here's the output:</p>

<pre>
test/Baltimore
test/Cherry
Hill
test/Edison 
test/New
York
City
test/Philadelphia
</pre>

<p>Cherry Hill and New York City are treated as 2 or 3 separate entries.</p>

<p>I tried quoting the filenames, like so:</p>

<pre><code>for f in `find test/* -type d | sed -e 's/^/\""/' | sed -e 's/$/\""/'`; do
  echo $f
done
</code></pre>

<p>but to no avail.</p>

<p>There's got to be a simple way to do this.</p>

<hr>

<p>The answers below are great.  But to make this more complicated - I don't always want to use the directories listed in my test directory.  Sometimes I want to pass in the directory names as command-line parameters instead.</p>

<p>I took Charles' suggestion of setting the IFS and came up with the following:</p>

<pre><code>dirlist=""${@}""
(
  [[ -z ""$dirlist"" ]] &amp;&amp; dirlist=`find test -mindepth 1 -type d` &amp;&amp; IFS=$'\n'
  for d in $dirlist; do
    echo $d
  done
)
</code></pre>

<p>and this works just fine unless there are spaces in the command line arguments (even if those arguments are quoted).  For example, calling the script like this: <code>test.sh ""Cherry Hill"" ""New York City""</code> produces the following output:</p>

<pre>
Cherry
Hill
New
York
City
</pre>
","<p>First, don't do it that way. The best approach is to use <code>find -exec</code> properly:</p>

<pre><code># this is safe
find test -type d -exec echo '{}' +
</code></pre>

<p>The other safe approach is to use NUL-terminated list, though this requires that your find support <code>-print0</code>:</p>

<pre><code># this is safe
while IFS= read -r -d '' n; do
  printf '%q\n' ""$n""
done &lt; &lt;(find test -mindepth 1 -type d -print0)
</code></pre>

<p>You can also populate an array from find, and pass that array later:</p>

<pre><code># this is safe
declare -a myarray
while IFS= read -r -d '' n; do
  myarray+=( ""$n"" )
done &lt; &lt;(find test -mindepth 1 -type d -print0)
printf '%q\n' ""${myarray[@]}"" # printf is an example; use it however you want
</code></pre>

<p>If your find doesn't support <code>-print0</code>, your result is then unsafe -- the below will not behave as desired if files exist containing newlines in their names (which, yes, is legal):</p>

<pre><code># this is unsafe
while IFS= read -r n; do
  printf '%q\n' ""$n""
done &lt; &lt;(find test -mindepth 1 -type d)
</code></pre>

<p>If one isn't going to use one of the above, a third approach (less efficient in terms of both time and memory usage, as it reads the entire output of the subprocess before doing word-splitting) is to use an <code>IFS</code> variable which doesn't contain the space character. Turn off globbing (<code>set -f</code>) to prevent strings containing glob characters such as <code>[]</code>, <code>*</code> or <code>?</code> from being expanded:</p>

<pre><code># this is unsafe (but less unsafe than it would be without the following precautions)
(
 IFS=$'\n' # split only on newlines
 set -f    # disable globbing
 for n in $(find test -mindepth 1 -type d); do
   printf '%q\n' ""$n""
 done
)
</code></pre>

<p>Finally, for the command-line parameter case, you should be using arrays if your shell supports them (i.e. it's ksh, bash or zsh):</p>

<pre><code># this is safe
for d in ""$@""; do
  printf '%s\n' ""$d""
done
</code></pre>

<p>will maintain separation. Note that the quoting (and the use of <code>$@</code> rather than <code>$*</code>) is important. Arrays can be populated in other ways as well, such as glob expressions:</p>

<pre><code># this is safe
entries=( test/* )
for d in ""${entries[@]}""; do
  printf '%s\n' ""$d""
done
</code></pre>
","301059"
"Reload .profile in bash shell script (in unix)?","114672","","<p>I'm new to bash shell scripting, and have come across a challenge. I know I can reload my "".profile"" file by just doing:</p>

<pre><code>. .profile
</code></pre>

<p>but I'm trying to execute the same in a bash script I'm writing and it is just not working. 
Any ideas? Anything else I can provide to clarify?</p>

<p>Thanks</p>
","<p>Try this to reload your current shell:</p>

<pre><code>source ~/.profile
</code></pre>
","9354275"
"Shell script to get the process ID on Linux","113657","","<p>I want to write a shell script (<code>.sh</code> file) to get a given process id. What I'm trying to do here is once I get the process ID, I want to kill that process. I'm running on Ubuntu (Linux).</p>

<p>I was able to do it with a command like</p>

<pre><code>ps -aux|grep ruby
kill -9 &lt;pid&gt;
</code></pre>

<p>but I'm not sure how to do it through a shell script.</p>
","<p>Using <code>grep</code> on the results of <code>ps</code> is a bad idea in a script, since some proportion of the time it will also match the grep process you've just invoked.  The command <a href=""http://linux.die.net/man/1/pgrep"" rel=""nofollow""><code>pgrep</code></a> avoids this problem, so if you need to know the process ID, that's a better option.  (Note that, of course, there may be many processes matched.)</p>

<p>However, in your example, you could just use the similar command <code>pkill</code> to kill all matching processes:</p>

<pre><code>pkill ruby
</code></pre>

<p>Incidentally, you should be aware that using <code>-9</code> is overkill (ho ho) in almost every case - there's some useful advice about that in the text of the ""Useless Use of <code>kill -9</code> form letter "":</p>

<blockquote>
  <p>No no no.  Don't use <code>kill -9</code>.</p>
  
  <p>It doesn't give the process a chance to cleanly:</p>
  
  <ol>
  <li>shut down socket connections</li>
  <li>clean up temp files</li>
  <li>inform its children that it is going away</li>
  <li>reset its terminal characteristics</li>
  </ol>
  
  <p>and so on and so on and so on.</p>
  
  <p>Generally, send 15, and wait a second or two, and if that doesn't
  work, send 2, and if that doesn't work, send 1.  If that doesn't,
  REMOVE THE BINARY because the program is badly behaved!</p>
  
  <p>Don't use <code>kill -9</code>.  Don't bring out the combine harvester just to tidy
  up the flower pot.</p>
</blockquote>
","6437686"
"Shell Script - remove first and last quote ("") from a variable","113362","","<p>Below is the snippet of shell script from a larger script. It removes the quotes from the string that is held by a variable. I am doing it using sed, is it efficient? If not then what is the efficient way?</p>

<pre><code>#!/bin/sh

opt=""\""html\\test\\\""""
temp=`echo $opt | sed 's/.\(.*\)/\1/' | sed 's/\(.*\)./\1/'`
echo $temp
</code></pre>
","<p>There's more simple and efficient, using the native shell prefix/suffix removal feature:</p>

<pre><code>temp=""${opt%\""}""
temp=""${temp#\""}""
echo ""$temp""
</code></pre>

<p>${opt%\""} will remove the suffix "" (escaped with a backslash to prevent shell interpretation)</p>

<p>${temp#\""} will remove the prefix "" (escaped with a backslash to prevent shell interpretation)</p>

<p>Another advantage is that it will remove surrounding quotes only if there are surrounding quotes. </p>

<p>BTW, your solution removes always the first and last character, whatever they may be (of course, I'm sure you know your data, but it's always better to be sure of what you're removing). </p>

<p>Using sed:</p>

<pre><code>echo ""$opt"" | sed -e 's/^""//' -e 's/""$//'
</code></pre>

<p><strong>(improved version, as indicated by jfgagne, getting rid of echo)</strong></p>

<pre><code>sed -e 's/^""//' -e 's/""$//' &lt;&lt;&lt;""$opt""
</code></pre>

<p>So it replaces leading "" with nothing, and trailing "" with nothing too. In the same invocation (no need to pipe and start another sed, using -e you can have multiple text processing).</p>
","9733456"
"Null & empty string comparision in Unix Bash Shell Script","113289","","<p>I dont set any values for $pass_tc11; so it is returning null while echoing. how to compare it in if clause ?</p>

<p>Here is my code. <strong>I dont want ""Hi"" to be printed...</strong></p>

<pre><code>-bash-3.00$ echo $pass_tc11

-bash-3.00$ if [ ""pass_tc11"" != """" ]; then
&gt; echo ""hi""
&gt; fi
hi
-bash-3.00$
</code></pre>
","<p>First of all, note you are not using the variable correctly:</p>

<pre><code>if [ ""pass_tc11"" != """" ]; then
#     ^
#     missing $
</code></pre>

<p>Anyway, to check if a variable is empty or not you can use <code>-z</code> --> the string is empty:</p>

<pre><code>if [ ! -z ""$pass_tc11"" ]; then
   echo ""hi, I am not empty""
fi
</code></pre>

<p>or <code>-n</code> --> the length is non-zero:</p>

<pre><code>if [ -n ""$pass_tc11"" ]; then
   echo ""hi, I am not empty""
fi
</code></pre>

<p>From <code>man test</code>:</p>

<blockquote>
  <p><strong>-z STRING</strong></p>
  
  <p>the length of STRING is zero</p>
  
  <p><strong>-n STRING</strong></p>
  
  <p>the length of STRING is nonzero</p>
</blockquote>

<h3>Samples:</h3>

<pre><code>$ [ ! -z ""$var"" ] &amp;&amp; echo ""yes""
$

$ var=""""
$ [ ! -z ""$var"" ] &amp;&amp; echo ""yes""
$

$ var=""a""
$ [ ! -z ""$var"" ] &amp;&amp; echo ""yes""
yes

$ var=""a""
$ [ -n ""$var"" ] &amp;&amp; echo ""yes""
yes
</code></pre>
","21407325"
"Stop on first error","113135","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2870992/automatic-exit-from-bash-shell-script-on-error"">Automatic exit from bash shell script on error</a>  </p>
</blockquote>



<p>How can I have bash stop on the first command failure, without putting stuff like this all through my code?</p>

<pre><code>some_prog || exit 1
some_other_prog || exit 1
</code></pre>
","<p>Maybe you want <code>set -e</code>:</p>

<p><a href=""http://www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2382181"" rel=""noreferrer"">http://www.davidpashley.com/articles/writing-robust-shell-scripts.html#id2382181</a></p>

<blockquote>
  <p>This tells bash that it should exit the script if any statement returns a non-true return value. The benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier. Again, for readability you may want to use set -o errexit.</p>
</blockquote>
","3474556"
"find difference between two text files with one item per line","112770","","<p>I have two files:</p>

<p>file 1</p>

<pre><code>dsf
sdfsd
dsfsdf
</code></pre>

<p>file 2</p>

<pre><code>ljljlj 
lkklk 
dsf
sdfsd
dsfsdf
</code></pre>

<p>I want to display what is in file 2 but not in file 1, so file 3 should look like</p>

<pre><code>ljljlj 
lkklk 
</code></pre>
","<p>You can try</p>

<pre><code>grep -f file1 file2
</code></pre>

<p>or</p>

<pre><code>grep -v -F -x -f file1 file2
</code></pre>
","4078975"
"Returning a boolean from a Bash function","112704","","<p>I want to write a bash function that check if a file has certain properties and returns true or false. Then I can use it in my scripts in the ""if"". But what should I return?</p>

<pre><code>function myfun(){ ... return 0; else return 1; fi;}
</code></pre>

<p>then I use it like this:</p>

<pre><code>if myfun filename.txt; then ...
</code></pre>

<p>of course this doesn't work. How can this be accomplished?</p>
","<p>Use 0 for true and 1 for false.</p>

<p>Sample:</p>

<pre><code>#!/bin/bash

isdirectory() {
  if [ -d ""$1"" ]
  then
    # 0 = true
    return 0 
  else
    # 1 = false
    return 1
  fi
}


if isdirectory $1; then echo ""is directory""; else echo ""nopes""; fi
</code></pre>

<p><strong>Edit</strong></p>

<p>From @amichair's comment, these are also possible</p>

<pre><code>isdirectory() {
  if [ -d ""$1"" ]
  then
    true
  else
    false
  fi
}


isdirectory() {
  [ -d ""$1"" ]
}
</code></pre>
","5431932"
"How do you write multiple line configuration file using BASH, and use variables on multiline?","112317","","<p>How can I write multi-lines in a file called <code>myconfig.conf</code> using BASH?</p>

<pre><code>#!/bin/bash
kernel=""2.6.39"";
distro=""xyz"";

echo &lt;&lt;&lt; EOL
line 1, ${kernel}
line 2,
line 3, ${distro}
line 4
line ...
EOL &gt;&gt; /etc/myconfig.conf;
cat /etc/myconfig.conf;
</code></pre>
","<p>The syntax (<code>&lt;&lt;&lt;</code>) and the command used (<code>echo</code>) is wrong.</p>

<p>Correct would be:</p>

<pre><code>#!/bin/bash

kernel=""2.6.39""
distro=""xyz""
cat &gt;/etc/myconfig.conf &lt;&lt;EOL
line 1, ${kernel}
line 2, 
line 3, ${distro}
line 4 line
... 
EOL

cat /etc/myconfig.conf
</code></pre>
","7875614"
"Bash syntax error: unexpected end of file","112224","","<p>Forgive me for this is a very simple script in Bash. Here's the code:</p>

<pre><code>#!/bin/bash
# june 2011

if [ $# -lt 3 -o $# -gt 3 ]; then
   echo ""Error... Usage: $0 host database username""
   exit 0
fi
</code></pre>

<p>after running sh file.sh:</p>

<blockquote>
  <p>syntax error: unexpected end of file</p>
</blockquote>
","<p>I think file.sh is with CRLF line terminators.</p>

<p>run</p>

<pre><code>dos2unix file.sh
</code></pre>

<p>then the problem will be fixed.</p>

<p>You can install dos2unix in ubuntu with this:</p>

<pre><code>sudo apt-get install dos2unix
</code></pre>
","6366607"
"Copy folder recursively, excluding some folders","112023","","<p>I am trying to write a simple bash script that will copy the entire contents of a folder including hidden files and folders into another folder, but I want to exclude certain specific folders.  How could I achieve this?</p>
","<p>Use rsync:</p>

<pre><code>rsync -av --exclude='path1/to/exclude' --exclude='path2/to/exclude' source destination
</code></pre>

<p>Note that using <code>source</code> and <code>source/</code> are different.  A trailing slash means to copy the contents of the folder <code>source</code> into <code>destination</code>.  Without the trailing slash, it means copy the folder <code>source</code> into <code>destination</code>.</p>

<p>Alternatively, if you have lots of directories (or files) to exclude, you can use <code>--exclude-from=FILE</code>, where <code>FILE</code> is the name of a file containing files or directories to exclude.</p>

<p><code>--exclude</code> may also contain wildcards, such as <code>--exclude=*/.svn*</code></p>
","2194500"
"Assign cURL output to variable in Bash","111672","","<p>I'm trying to assign the output of cURL into a variable like so:</p>

<pre><code>#!/bin/sh
$IP=`curl automation.whatismyip.com/n09230945.asp`
echo $IP
sed s/IP/$IP/ nsupdate.txt | nsupdate
</code></pre>

<p>However, when I run the script the following happens:</p>

<blockquote>
<pre><code>./update.sh: 3: =[my ip address]: not found
</code></pre>
</blockquote>

<p>How can I get the output into <code>$IP</code> correctly?</p>
","<p>In shell, you don't put a $ in front of a variable you're assigning.  You only use $IP when you're referring to the variable.</p>

<pre><code>#!/bin/bash

IP=$(curl automation.whatismyip.com/n09230945.asp)

echo ""$IP""

sed ""s/IP/$IP/"" nsupdate.txt | nsupdate
</code></pre>
","8737671"
"Script parameters in Bash","111566","","<p>I'm trying to make a shell script which should be used like this:</p>

<pre><code>ocrscript.sh -from /home/kristoffer/test.png -to /home/kristoffer/test.txt
</code></pre>

<p>The script will then ocr convert the image file to a text file. Here is what I have come up with so far:</p>

<pre><code>#!/bin/bash
export HOME=/home/kristoffer
/usr/local/bin/abbyyocr9 -rl Swedish -if ???fromvalue??? -of ???tovalue??? 2&gt;&amp;1
</code></pre>

<p>But I don't know how to get the <code>-from</code> and <code>-to</code> values. Any ideas on how to do it?</p>
","<p>The arguments that you provide to a bashscript will appear in the variables <code>$1</code> and <code>$2</code> and <code>$3</code> where the number refers to the argument. <code>$0</code> is the command itself.</p>

<p>The arguments are seperated by spaces, so if you would provide the <code>-from</code> and <code>-to</code> in the command, they will end up in these variables too, so for this:</p>

<pre><code>./ocrscript.sh -from /home/kristoffer/test.png -to /home/kristoffer/test.txt
</code></pre>

<p>You'll get:</p>

<pre><code>$0    # ocrscript.sh
$1    # -from
$2    # /home/kristoffer/test.png
$3    # -to
$4    # /home/kristoffer/test.txt
</code></pre>

<p>It might be easier to omit the <code>-from</code> and the <code>-to</code>, like:</p>

<pre><code>ocrscript.sh /home/kristoffer/test.png /home/kristoffer/test.txt
</code></pre>

<p>Then you'll have:</p>

<pre><code>$1    # /home/kristoffer/test.png
$2    # /home/kristoffer/test.txt
</code></pre>

<p>The downside is that you'll have to supply it in the right order. There are libraries that can make it easier to parse named arguments on the command line, but usually for simple shell scripts you should just use the easy way, if it's no problem.</p>

<p>Then you can do:</p>

<pre><code>/usr/local/bin/abbyyocr9 -rl Swedish -if ""$1"" -of ""$2"" 2&gt;&amp;1
</code></pre>

<p>The double quotes around the <code>$1</code> and the <code>$2</code> are not always necessary but are adviced, because some strings won't work if you don't put them between double quotes.</p>
","18003578"
"While loop to test if a file exists in bash","111541","","<p>I'm working on a shell script that does certain changes on a txt file only if it does  exist, however this test loop doesn't work, I wonder why?
Thank you!</p>

<pre><code>while [ ! -f /tmp/list.txt ] ;
do
      sleep 2
done
</code></pre>
","<p>When you say ""doesn't work"", how do you know it doesn't work?</p>

<p>You might try to figure out if the file actually exists by adding:</p>

<pre><code>while [ ! -f /tmp/list.txt ]
do
  sleep 2
done
ls -l /tmp/list.txt
</code></pre>

<p>You might also make sure that you're using a Bash (or related) shell by typing 'echo $SHELL'. I think that CSH and TCSH use a slightly different semantic for this loop.</p>
","2379904"
"Adding timestamp to a filename with mv in BASH","111411","","<p>Well, I'm a linux newbie, and I'm having an issue with a simple bash script.</p>

<p>I've got a program that adds to a log file while it's running. Over time that log file gets huge. I'd like to create a startup script which will rename and move the log file before each run, effectively creating separate log files for each run of the program. Here's what I've got so far:</p>

<p><a href=""http://pastebin.com/mDVuSZ5k"" rel=""noreferrer"">pastebin</a></p>

<pre><code>DATE=$(date +""%Y%m%d%H%M"")
mv server.log logs/$DATE.log
echo program
</code></pre>

<p>When run, I see this:</p>

<pre><code>: command not found
program
</code></pre>

<p>When I cd to the logs directory and run dir, I see this:</p>

<pre><code>201111211437\r.log\r
</code></pre>

<p>What's going on? I'm assuming there's some syntax issue I'm missing, but I can't seem to figure it out.</p>

<hr>

<p>UPDATE: Thanks to shellter's comment below, I've found the problem to be due to the fact that I'm editing the .sh file in Notepad++ in windows, and then sending via ftp to the server, where I run the file via ssh. After running dos2unix on the file, it works.</p>

<p>New question: How can I save the file correctly in the first place, to avoid having to perform this fix every time I resend the file?</p>
","<p>The few lines you posted from your script look okay to me. It's probably something a bit deeper.</p>

<p>You need to find which line is giving you this error. Add <code>set -xv</code> to the top of your script. This will print out the line number and the command that's being executed to <em>STDERR</em>. This will help you identify where in your script you're getting this particular error.</p>

<p>BTW, do you have a <a href=""http://en.wikipedia.org/wiki/Shebang_%28Unix%29"">shebang</a> at the top of your script? When I see something like this, I normally expect its an issue with the Shebang. For example, if you had <code>#! /bin/bash</code> on top, but your bash interpreter is located in <code>/usr/bin/bash</code>, you'll see this error.</p>

<h1>EDIT</h1>

<blockquote>
  <p>New question: How can I save the file correctly in the first place, to avoid having to perform this fix every time I resend the file?</p>
</blockquote>

<p>Two ways:</p>

<ol>
<li>Select the <em>Edit->EOL Conversion->Unix Format</em> menu item when you edit a file. Once it has the correct line endings, Notepad++ will keep them.</li>
<li>To make sure all new files have the correct line endings, go to the <em>Settings->Preferences</em> menu item, and pull up the <em>Preferences</em> dialog box. Select the <em>New Document/Default Directory</em> tab. Under <em>New Document</em> and <em>Format</em>, select the <em>Unix</em> radio button. Click the <em>Close</em> button.</li>
</ol>
","8229813"
"-bash: syntax error near unexpected token `newline'","111307","","<p>To reset the admin password of SolusVM I am executing <a href=""https://documentation.solusvm.com/display/DOCS/Generate+New+Admin+Password"" rel=""noreferrer"">the following command</a>:</p>

<pre><code>php /usr/local/solusvm/scripts/pass.php --type=admin --comm=change --username=&lt;ADMINUSERNAME&gt;
</code></pre>

<p>When doing so, the following error message is printed:</p>

<pre><code>-bash: syntax error near unexpected token `newline'
</code></pre>

<p>What is the reason for this problem? I am running the command as root.</p>
","<p>The characters '&lt;', and '>', are to indicate a place-holder, you should remove them to read:</p>

<pre><code>php /usr/local/solusvm/scripts/pass.php --type=admin --comm=change --username=ADMINUSERNAME
</code></pre>
","5134413"
"How to evaluate http response codes from bash/shell script?","111307","","<p>I have the feeling that I'm missing the obvious, but have not succeeded with <code>man [curl|wget]</code> or google (""http"" makes such a bad search term). I'm looking for a quick&amp;dirty fix to one of our webservers that frequently fails, returning status code 500 with an error message. Once this happens, it needs to be restarted.</p>

<p>As the root cause seems to be hard to find, we're aiming for a quick fix, hoping that it will be enough to bridge the time until we can really fix it (the service doesn't need high availability)</p>

<p>The proposed solution is to create a cron job that runs every 5 minutes, checking <a href=""http://localhost:8080/"" rel=""noreferrer"">http://localhost:8080/</a>. If this returns with status code 500, the webserver will be restarted. The server will restart in under a minute, so there's no need to check for restarts already running.</p>

<p>The server in question is a ubuntu 8.04 minimal installation with just enough packages installed to run what it currently needs. There is no hard requirement to do the task in bash, but I'd like it to run in such a minimal environment without installing any more interpreters. </p>

<p>(I'm sufficiently familiar with scripting that the command/options to assign the http status code to an environment variable would be enough - this is what I've looked for and could not find.)</p>
","<p>I haven't tested this on a 500 code, but it works on others like 200, 302 and 404.</p>

<pre><code>response=$(curl --write-out %{http_code} --silent --output /dev/null servername)
</code></pre>
","2220646"
"How do I create a Bash alias?","111209","","<p>I'm on OSX and I need to put something like this, <code>alias blah=""/usr/bin/blah""</code> in a config file but I don't know where the config file is. </p>
","<p>You can add an <code>alias</code> or a <code>function</code> in your startup script file. Usually this is <code>.bashrc</code>, <code>.bash_login</code> or <code>.profile</code> file in your home directory. </p>

<p>Since these files are hidden you will have to do an <code>ls -a</code> to list them. If you don't have one you can create one.</p>

<hr>

<p>If I remember correctly, when I had bought my Mac, the <code>.bash_login</code> file wasn't there. I had to create it for myself so that I could put <code>prompt info</code>, <code>alias</code>, <code>functions</code>, etc. in it. </p>

<p>Here are the steps if you would like to create one:</p>

<ol>
<li>Start up Terminal</li>
<li>Type <code>cd ~/</code> to go to your home folder</li>
<li>Type <code>touch .bash_profile</code> to create your new file.</li>
<li>Edit <code>.bash_profile</code> with your favorite editor (or you can just type <code>open -e .bash_profile</code> to open it in TextEdit.</li>
<li>Type <code>. .bash_profile</code> to reload <code>.bash_profile</code> and update any alias you add.</li>
</ol>
","8967864"
"Is there a TRY CATCH command in Bash","110515","","<p>I'm writing a Shell script and need to check that a terminal app has been installed. I want to use a TRY/CATCH command to do this unless there is a neater way.</p>
","<blockquote>
  <p>Is there a TRY CATCH command in Bash?</p>
</blockquote>

<p>No.  </p>

<p>Bash doesn't have as many luxuries as one can find in many programming languages.</p>

<p>There is no <code>try/catch</code> in bash; however, one can achieve similar behavior using <code>&amp;&amp;</code> or <code>||</code>.</p>

<p>Using <code>||</code>:</p>

<p>if <code>command1</code> fails then <code>command2</code> runs as follows</p>

<pre><code>command1 || command2
</code></pre>

<p>Similarly, using <code>&amp;&amp;</code>, <code>command2</code> will run if <code>command1</code> is successful</p>

<p>The closest approximation of <code>try/catch</code> is as follows</p>

<pre><code>{ # try

    command1 &amp;&amp;
    #save your output

} || { # catch
    # save log for exception 
}
</code></pre>

<p>Also bash contains some error handling mechanisms, as well </p>

<pre><code>set -e
</code></pre>

<p>It will immediately stop your script if a simple command fails. I think this should have been the default behavior. Since such errors almost always signify something unexpected, it is not really 'sane' to keep executing the following commands.</p>

<p>And also why not <code>if...else</code>. It is your best friend.</p>
","22010339"
"How do I check if a variable exists in a list in BASH","110320","","<p>I am trying to write a script in bash that check the validity of a user input.<br>
I want to match the input (say variable <code>x</code>) to a list of valid values.</p>

<p>what I have come up with at the moment is:</p>

<pre><code>for item in $list
do
    if [ ""$x"" == ""$item"" ]; then
        echo ""In the list""
        exit
    fi
done
</code></pre>

<p>My question is if there is a simpler way to do this,<br>
something like a <code>list.contains(x)</code> for most programming languages.</p>

<p><strong>Addition:</strong><br>
Say list is:</p>

<pre><code>list=""11 22 33""
</code></pre>

<p>my code will echo the message only for those values since <code>list</code> is treated as an array and not a string,
all the string manipulations will validate <code>1</code> while I would want it to fail.</p>
","<pre><code>[[ $list =~ (^|[[:space:]])$x($|[[:space:]]) ]] &amp;&amp; echo 'yes' || echo 'no'
</code></pre>

<p>or create a function:</p>

<pre><code>contains() {
    [[ $1 =~ (^|[[:space:]])$2($|[[:space:]]) ]] &amp;&amp; exit(0) || exit(1)
}
</code></pre>

<p>to use it:</p>

<pre><code>contains aList anItem
echo $? # 0： match, 1: failed
</code></pre>
","8063398"
"Shell/Bash Command to get nth line of STDOUT","110019","","<p>Is there any bash command that will let you get the nth line of STDOUT?</p>

<p>That is to say, something that would take this</p>

<pre><code>$ ls -l
-rw-r--r--@ 1 root  wheel my.txt
-rw-r--r--@ 1 root  wheel files.txt
-rw-r--r--@ 1 root  wheel here.txt
</code></pre>

<p>and do something like</p>

<pre><code>$ ls -l | magic-command 2
-rw-r--r--@ 1 root  wheel files.txt
</code></pre>

<p>I realize this would be bad practice when writing scripts meant to be reused, BUT when working with the shell day to day it'd be useful to me to be able to filter my STDOUT in such a way.  </p>

<p>I also realize this would be semi-trivial command to write (buffer STDOUT, return a specific line), but I want to know if there's some <strong>standard</strong> shell command to do this that would be available without me dropping a script into place. </p>
","<p>Using <code>sed</code>, just for variety:</p>

<pre><code>ls -l | sed -n 2p
</code></pre>

<p>Using this alternative, which looks more efficient since it stops reading the input when the required line is printed, may generate a SIGPIPE in the feeding process, which may in turn generate an unwanted error message:</p>

<pre><code>ls -l | sed -n -e '2{p;q}'
</code></pre>

<p>I've seen that often enough that I usually use the first (which is easier to type, anyway), though <code>ls</code> is not a command that complains when it gets SIGPIPE.</p>

<p>For a range of lines:</p>

<pre><code>ls -l | sed -n 2,4p
</code></pre>

<p>For several ranges of lines:</p>

<pre><code>ls -l | sed -n -e 2,4p -e 20,30p
ls -l | sed -n -e '2,4p;20,30p'
</code></pre>
","1429628"
"""while :"" vs. ""while true""","109985","","<p>When you look at how infinite loops should be implemented, you mostly see this approach:</p>

<pre><code>while :
do
  # loop infinitely
done
</code></pre>

<p>But I just don't understand the use of <code>:</code> here. Wouldn't it be better to use:</p>

<pre><code>while true
do
  # loop infinitely
done
</code></pre>

<p>?</p>
","<p>from manual:</p>

<blockquote>
  <p>: [arguments]
            No effect; the command does nothing beyond expanding arguments and performing  any  specified
            redirections.  A zero exit code is returned.</p>
</blockquote>

<p>As this returns always zero therefore is is similar to be used as <code>true</code></p>

<p>Check out this answer: <a href=""https://stackoverflow.com/a/3224910/702361"">What Is the Purpose of the `:' (colon) GNU Bash Builtin?</a></p>
","10797874"
"What's the difference between nohup and ampersand","109979","","<p>Both <code>nohup myprocess.out &amp;</code> or <code>myprocess.out &amp;</code> set myprocess.out to run in the background. After I shutdown the terminal, the process is still running.
What's the difference between them?</p>
","<p><code>nohup</code> catches the hangup signal (see <code>man 7 signal</code>) while the ampersand doesn't (except the shell is confgured that way or doesn't send <code>SIGHUP</code> at all).</p>

<p>Normally, when running a command using <code>&amp;</code> and exiting the shell afterwards, the shell will terminate the sub-command with the hangup signal (<code>kill -SIGHUP &lt;pid&gt;</code>). This can be prevented using <code>nohup</code>, as it catches the signal and ignores it so that it never reaches the actual application. </p>

<p>In case you're using bash, you can use the command <code>shopt | grep hupon</code> to find out whether
your shell sends SIGHUP to its child processes or not. If it is off, processes won't be 
terminated, as it seems to be the case for you. More information on how bash terminates
applications can be found <a href=""https://stackoverflow.com/questions/4298741/how-bash-handles-the-jobs-when-logout"">here</a>.</p>

<p>There are cases where <code>nohup</code> does not work, for example when the process you start reconnects
the <code>SIGHUP</code> signal, as it is the case <a href=""https://stackoverflow.com/questions/12486691/how-do-i-get-my-golang-web-server-to-run-in-the-background/12486810#12486810"">here</a>.</p>
","15595391"
"How do I iterate through lines in an external file with shell?","109800","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/1521462/looping-through-the-content-of-a-file-in-bash"">Looping through the content of a file in Bash?</a>  </p>
</blockquote>



<p>I have one file with a list of names.  I need to loop through all names in this file from an external file with a shell script.  How can I do that?</p>

<p>Example files:</p>

<p>scripts/names.txt</p>

<pre><code>alison
barb
charlie
david
</code></pre>

<p>scripts/script.sh</p>

<pre><code>NAMES="""" #names from names.txt file
for NAME in $NAMES; do
    echo ""$NAME""
done
</code></pre>

<p>How can I explode the names.txt file into an array in a separate shell script?</p>
","<p>One way would be:</p>

<pre><code>while read NAME
do
    echo ""$NAME""
done &lt; names.txt
</code></pre>

<p><strong>EDIT:</strong>
<strike>Note that the loop gets executed in a sub-shell, so any modified variables will be local, except if you declare them with <code>declare</code> outside the loop.</strike></p>

<p>Dennis Williamson is right. Sorry, must have used piped constructs too often and got confused.</p>
","11349910"
"Portable way to get file size (in bytes) in shell?","109778","","<p>On Linux, I use <code>stat --format=""%s"" FILE</code>, but Solaris I have access to doesn't have stat command. What should I use then?</p>

<p>I'm writing Bash scripts, and can't really install any new software on the system.</p>

<p>I've considered already using:</p>

<pre><code>perl -e '@x=stat(shift);print $x[7]' FILE
</code></pre>

<p>or even:</p>

<pre><code>ls -nl FILE | awk '{print $5}'
</code></pre>

<p>But neither of these looks sensible - running Perl just to get file size? Or running 2 commands to do the same?</p>
","<p><code>wc -c &lt; filename</code> (short for word count, <code>-c</code> prints the byte count) is a portable, <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/wc.html"" rel=""noreferrer"">POSIX</a> solution. Only the output format might not be uniform across platforms as some spaces may be prepended (which is the case for Solaris).</p>

<p>Do not omit the input redirection. When the file is passed as an argument, the file name is printed after the byte count.</p>

<p>I was worried it wouldn't work for binary files, but it works OK on both Linux and Solaris. You can try it with <code>wc -c &lt; /usr/bin/wc</code>. Moreover, POSIX utilities are <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_403"" rel=""noreferrer"" title=""POSIX definition of text file"">guaranteed to handle binary files</a>, unless specified otherwise explicitly.</p>
","1815582"
"Delete all lines beginning with a # from a file","109659","","<p>All of the lines with comments in a file begin with <code>#</code>. How can I delete all of the lines (and only those lines) which begin with <code>#</code>? Other lines containing <code>#</code>, but not at the beginning of the line should be ignored.</p>
","<p>This can be done with a <a href=""http://www.grymoire.com/Unix/Sed.html#uh-30"" rel=""noreferrer"">sed one-liner</a>:</p>

<pre><code>sed '/^#/ d'
</code></pre>

<p>This says, ""find all lines that start with # and delete them, leaving everything else.""</p>
","8206295"
"BASH: Test whether string is valid as an integer?","109528","","<p>I'm trying to do something common enough: Parse user input in a shell script. If the user provided a valid integer, the script does one thing, and if not valid, it does something else. Trouble is, I haven't found an easy (and reasonably elegant) way of doing this - I don't want to have to pick it apart char by char.</p>

<p>I know this must be easy but I don't know how. I could do it in a dozen languages, but not BASH!</p>

<p>In my research I found this:</p>

<p><a href=""https://stackoverflow.com/questions/136146/regular-expression-to-test-whether-a-string-consists-of-a-valid-real-number-in-ba"">Regular expression to test whether a string consists of a valid real number in base 10</a></p>

<p>And there's an answer therein that talks about regex, but so far as I know, that's a function available in C (among others). Still, it had what looked like a great answer so I tried it with grep, but grep didn't know what to do with it. I tried -P which on my box means to treat it as a PERL regexp - nada. Dash E (-E) didn't work either. And neither did -F.</p>

<p>Just to be clear, I'm trying something like this, looking for any output - from there, I'll hack up the script to take advantage of whatever I get. (IOW, I was expecting that a non-conforming input returns nothing while a valid line gets repeated.)</p>

<pre><code>snafu=$(echo ""$2"" | grep -E ""/^[-+]?(?:\.[0-9]+|(?:0|[1-9][0-9]*)(?:\.[0-9]*)?)$/"")
if [ -z ""$snafu"" ] ;
then
   echo ""Not an integer - nothing back from the grep""
else
   echo ""Integer.""
fi
</code></pre>

<p>Would someone please illustrate how this is most easily done?</p>

<p>Frankly, this is a short-coming of TEST, in my opinion. It should have a flag like this</p>

<pre><code>if [ -I ""string"" ] ;
then
   echo ""String is a valid integer.""
else
   echo ""String is not a valid integer.""
fi
</code></pre>

<p>Thanks.</p>
","<pre><code>[[ $var =~ ^-?[0-9]+$ ]]
</code></pre>

<ul>
<li>The <code>^</code> indicates the beginning of the input pattern</li>
<li>The <code>-</code> is a literal ""-""</li>
<li>The <code>?</code> means ""0 or 1 of the preceding (<code>-</code>)""</li>
<li>The <code>+</code> means ""1 or more of the preceding (<code>[0-9]</code>)""</li>
<li>The <code>$</code> indicates the end of the input pattern</li>
</ul>

<p>So the regex matches an optional <code>-</code> (for the case of negative numbers), followed by one or more decimal digits.</p>

<p><strong>References</strong>:</p>

<ul>
<li><a href=""http://www.tldp.org/LDP/abs/html/bashver3.html#REGEXMATCHREF"" rel=""noreferrer"">http://www.tldp.org/LDP/abs/html/bashver3.html#REGEXMATCHREF</a></li>
</ul>
","2210386"
"Is there a better way to run a command N times in bash?","109295","","<p>I occasionally run a bash command line like this:</p>

<pre><code>n=0; while [[ $n -lt 10 ]]; do some_command; n=$((n+1)); done
</code></pre>

<p>To run <code>some_command</code> a number of times in a row -- 10 times in this case.</p>

<p>Often <code>some_command</code> is really a chain of commands or a pipeline.</p>

<p>Is there a more concise way to do this?</p>
","<pre><code>for run in {1..10}
do
  command
done
</code></pre>
","3737773"
"Sending HTML mail using a shell script","108494","","<p>How can I send an HTML email using a shell script?</p>
","<p>First you need to compose the message. The bare minimum is composed of these two headers:</p>

<pre><code>MIME-Version: 1.0
Content-Type: text/html
</code></pre>

<p>... and the appropriate message body:</p>

<pre><code>&lt;!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/html4/loose.dtd""&gt;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;Hello, world!&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Once you have it, you can pass the appropriate information to the <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?mail"" rel=""noreferrer"">mail</a> command:</p>

<pre><code>body = '...'

echo $body | mail \
-a ""From: me@example.com"" \
-a ""MIME-Version: 1.0"" \
-a ""Content-Type: text/html"" \
-s ""This is the subject"" \
you@example.com
</code></pre>

<p>This is an oversimplified example, since you also need to take care of charsets, encodings, maximum line length... But this is basically the idea.</p>

<p>Alternatively, you can write your script in Perl or PHP rather than plain shell.</p>

<h1>Update</h1>

<p>A shell script is basically a text file with Unix line endings that starts with a line called <a href=""http://en.wikipedia.org/wiki/Shebang_%28Unix%29"" rel=""noreferrer"">shebang</a> that tells the shell what interpreter it must pass the file to, follow some commands in the language the interpreter understands and has execution permission (in Unix that's a file attribute). E.g., let's say you save the following as <code>hello-world</code>:</p>

<pre><code>#!/bin/sh

echo Hello, world!
</code></pre>

<p>Then you assign execution permission:</p>

<pre><code>chmod +x hello-world
</code></pre>

<p>And you can finally run it:</p>

<pre><code>./hello-world
</code></pre>

<p>Whatever, this is kind of unrelated to the original question. You should get familiar with basic shell scripting before doing advanced tasks with it. Here you are a couple of links about <strong>bash</strong>, a popular shell:</p>

<p><a href=""http://www.gnu.org/software/bash/manual/html_node/index.html"" rel=""noreferrer"">http://www.gnu.org/software/bash/manual/html_node/index.html</a></p>

<p><a href=""http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html"" rel=""noreferrer"">http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html</a></p>
","3317304"
"How to enter command with password for git pull?","108322","","<p>I want to do this command in one line: git pull &amp;&amp; [my passphrase]</p>

<p>How to do it?</p>
","<p>This is not exactly what you asked for, but for http(s):</p>

<ul>
<li>you can put the password in .netrc file (_netrc on windows). From there it would be picked up automatically. It would go to your home folder with 600 permissions.</li>
<li>you could also just clone the repo with <code>https://user:pass@domain/repo</code> but that's not really recommended as it would show your user/pass in a lot of places...</li>
<li>a new option is to use the <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-credential-cache.html"">credential helper</a>. Note that credentials would be stored in clear text in your local config using standard credential helper. credential-helper with wincred can be also used on windows.</li>
</ul>

<p>Usage examples for credential helper</p>

<ul>
<li><code>git config credential.helper store</code> - stores the credentials indefinitely.</li>
<li><code>git config credential.helper 'cache --timeout=3600'</code>- stores for 60 minutes</li>
</ul>

<p>For ssh-based access, you'd use ssh agent that will provide the ssh key when needed. This would require generating keys on your computer, storing the public key on the remote server and adding the private key to relevant keystore.</p>
","11506234"
"Can I grep only the first n lines of a file?","108276","","<p>I have very long log files, is it possible to ask grep to only search the first 10 lines?</p>
","<p>The magic of pipes;</p>

<pre><code>head -10 log.txt | grep &lt;whatever&gt;
</code></pre>
","8762319"
"How to assign a heredoc value to a variable in Bash?","108243","","<p>I have this multi-line string (quotes included):</p>

<pre><code>abc'asdf""
$(dont-execute-this)
foo""bar""''
</code></pre>

<p>How would I assign it to a variable using a heredoc in Bash?</p>

<p><strong>I need to preserve newlines.</strong></p>

<p>I don't want to escape the characters in the string, that would be annoying...</p>
","<p>You can avoid a useless use of <code>cat</code> and handle mismatched quotes better with this:</p>

<pre><code>$ read -r -d '' VAR &lt;&lt;'EOF'
abc'asdf""
$(dont-execute-this)
foo""bar""''
EOF
</code></pre>

<p>If you don't quote the variable when you echo it, newlines are lost. Quoting it preserves them:</p>

<pre><code>$ echo ""$VAR""
abc'asdf""
$(dont-execute-this)
foo""bar""''
</code></pre>

<p>If you want to use indentation for readability in the source code, use a dash after the less-thans. The indentation must be done using only tabs (no spaces).</p>

<pre><code>$ read -r -d '' VAR &lt;&lt;-'EOF'
    abc'asdf""
    $(dont-execute-this)
    foo""bar""''
    EOF
$ echo ""$VAR""
abc'asdf""
$(dont-execute-this)
foo""bar""''
</code></pre>

<p>If, instead, you want to preserve the tabs in the contents of the resulting variable, you need to remove tab from <code>IFS</code>. The terminal marker for the here doc (<code>EOF</code>) must not be indented.</p>

<pre><code>$ IFS='' read -r -d '' VAR &lt;&lt;'EOF'
    abc'asdf""
    $(dont-execute-this)
    foo""bar""''
EOF
$ echo ""$VAR""
    abc'asdf""
    $(dont-execute-this)
    foo""bar""''
</code></pre>

<p>Tabs can be inserted at the command line by pressing <kbd>Ctrl</kbd>-<kbd>V</kbd> <kbd>Tab</kbd>. If you are using an editor, depending on which one, that may also work or you may have to turn off the feature that automatically converts tabs to spaces.</p>
","1655389"
"concat string in a shell script","107925","","<p>How can I concat a string in shell?  Is it just...</p>

<pre><code>var = 'my';
var .= 'string';
</code></pre>

<p>?</p>
","<p>How about this:</p>

<pre><code>var=""${var}string""
</code></pre>
","9445270"
"Using unset vs. setting a variable to empty","107825","","<p>I'm currently writing a bash testing framework, where in a test function, both standard bash tests (<code>[[</code>) as well as predefined matchers can be used. Matchers are wrappers to '[[' and besides returning a return code, set some meaningful message saying what was expected.</p>

<p>Example:</p>

<pre><code>string_equals() {
    if [[ ! $1 = $2 ]]; then
            error_message=""Expected '$1' to be '$2'.""

            return 1
    fi
}
</code></pre>

<p>So, when a matcher is used, and it fails, only then an error_message is set.</p>

<p>Now, at some point later, I test whether the tests succeeded. If it succeeded, I print the expectation in green, if it failed in red.</p>

<p>Furthermore, there may be an error_message set, so I test if a message exists, print it, and then unset it (because the following test may not set an <code>error_message</code>):</p>

<pre><code>if [[ $error_message ]]; then
    printf '%s\n' ""$error_message""

    unset -v error_message
fi
</code></pre>

<p>Now my question is, if it is better to unset the variable, or to just set it to '', like</p>

<pre><code>error_message=''
</code></pre>

<p>Which one is better? Does it actually make a difference? Or maybe should I have an additional flag indicating that the message was set?</p>
","<p>Mostly you don't see a difference, unless you are using <code>set -u</code>:</p>

<pre><code>/home/user1&gt; var=""""
/home/user1&gt; echo $var

/home/user1&gt; set -u
/home/user1&gt; echo $var

/home/user1&gt; unset var
/home/user1&gt; echo $var
-bash: var: unbound variable
</code></pre>

<p>So really, it depends on how you are going to test the variable.</p>

<p>I will add that my preferred way of testing if it is set is:</p>

<pre><code>[[ -n $var ]]  # True if not zero length
</code></pre>

<p>or</p>

<pre><code>[[ -z $var ]]  # True if zero length
</code></pre>
","12263914"
"How to make the 'cut' command treat several sequential delimiters as one?","107658","","<p>I'm trying to extract a certain (the fourth) field from the column-based, 'space'-adjusted text stream. I'm trying to use the <code>cut</code> command in the following manner: </p>

<p><code>cat text.txt | cut -d "" "" -f 4</code></p>

<p>Unfortunately, <code>cut</code> doesn't treat several spaces as one delimiter. I could have piped through awk</p>

<p><code>awk '{ printf $4; }'</code> </p>

<p>or sed</p>

<p><code>sed  -E ""s/[[:space:]]+/ /g""</code></p>

<p>to collapse the spaces, but I'd like to know if there any way to deal with <code>cut</code> and several delimiters natively?</p>
","<p>Try:</p>

<pre><code>cat text.txt | tr -s ' ' | cut -d ' ' -f4
</code></pre>

<p>From the <code>tr</code> man page:</p>

<pre>
-s, --squeeze-repeats   replace each input sequence of a repeated character
                        that is listed in SET1 with a single occurrence
                        of that character
</pre>
","4483833"
"Git/Bash is extremely slow in Windows 7 x64","107501","","<p>I've been using Git on both Windows and Ubuntu during the development of a small project, frequently flipping back and forth between the two.  The issue I'm having is that Git/Bash consistently become slow.  When I say slow, I mean that running <code>cd</code> takes anywhere from 8-25 seconds, running <code>git</code> commands take from 5-20 seconds, and <code>ls</code> can take up to 30 seconds sometimes.  Needless to say, this is not fun, not to mention unproductive.  I know Git is slower on Windows, but this is ridiculous.</p>

<p>The one solution which has worked--temporarily--for me has been to disable my network connection (as suggested in <a href=""https://stackoverflow.com/questions/2835775/msysgit-bash-is-horrendously-slow-in-windows-7"">this answer</a>), start git, and then reconnect.  Sometimes it continues to run quickly for days after doing that, but the performance always degrades eventually.  I've trawled through the msysgit discussion group, SO, msysgit issue list, etc. on and off for weeks, but I haven't been able to turn up solutions which work.</p>

<p>So far, I've tried:</p>

<ul>
<li>Adding git &amp; project folders to virus scanner's exclusion list</li>
<li>Disabling my virus scanner completely (Kaspersky IS 2011)</li>
<li>Ensuring that Outlook is not running (Outlook 2007)</li>
<li>Shutting down all other applications</li>
<li>Running git as administrator</li>
<li>Disabling network connection, starting git, and keeping connection disabled</li>
<li>Disabling network connection, starting git, re-enabling connection (works only occasionally)</li>
<li>Running git gc</li>
<li>And combinations of the above</li>
</ul>

<p>I did read that a couple people had success disabling bash completion, but ideally I'd like to keep that active.  The version of msysgit is 1.7.3.1-preview20101002 &amp; the OS is Windows 7 x64.  Running the same things on Linux is, predictably, lightning fast.  I would use Linux exclusively, but I need to run stuff in Windows, too (certain apps, testing, etc.).</p>

<p>Has anyone encountered a similar issue?  If so, what was the underlying problem and what was the solution (if any)?</p>

<p>Edit: This extends beyond just the git repositories, but just for reference, the repos I've been using git with have been pretty small: ~4-50 files max.</p>
","<p>It appears that completely uninstalling Git, restarting (the classic Windows cure), and reinstalling Git was the cure.  I also wiped out all bash config files which were left over (they were manually created).  Everything is fast again.</p>

<p>If for some reason reinstalling isn't possible (or desirable), then I would definitely try changing the PS1 variable referenced in <a href=""https://stackoverflow.com/a/4485396/542251"">Chris Dolan's answer</a>; it resulted in significant speedups in certain operations.</p>
","4506192"
"[ :Unexpected operator in shell programming","107391","","<p>My code:</p>

<pre><code>    #!/bin/sh
    #filename:choose.sh
    read choose
    [ ""$choose"" == ""y"" -o ""$choose"" == ""Y"" ] &amp;&amp; echo ""Yes"" &amp;&amp; exit 0
    [ ""$choose"" == ""n"" -o ""$choose"" == ""N"" ] &amp;&amp; echo ""No""  &amp;&amp; exit 0
    echo ""Wrong Input"" &amp;&amp; exit 0
</code></pre>

<p>But when I execute </p>

<pre><code>    sh ./choose.sh
</code></pre>

<p>terminal prompt me that</p>

<pre><code>   [: 4: n: :Unexpected operator
   [: 5: n: :Unexpected operator
</code></pre>

<p>Is there any mistake in my bash script?
Thanks!</p>
","<p>There is no mistake in your <strong>bash</strong> script. But you are executing it with <strong>sh</strong> which has a less extensive syntax ;)</p>

<p>So, run <code>bash ./choose.sh</code> instead :)</p>
","3411061"
"How to concatenate multiple lines of output to one line?","107390","","<p>If I run the command <code>cat file | grep pattern</code>, I get many lines of output. How do you concatenate all lines into one line, effectively replacing each <code>""\n""</code> with <code>""\"" ""</code> (end with <code>""</code> followed by space)?</p>

<p><code>cat file | grep pattern | xargs sed s/\n/ /g</code> 
isn't working for me.</p>
","<p>Use <code>tr '\n' ' '</code> to translate all newline characters to spaces:</p>

<pre><code>$ grep pattern file | tr '\n' ' '
</code></pre>

<p>Note: <code>grep</code> reads files, <code>cat</code> concatenates files. Don't <code>cat file | grep</code>!</p>

<p><strong>Edit:</strong></p>

<p><code>tr</code> can only handle single character translations. You could use <code>awk</code> to change the output record separator like:</p>

<pre><code>$ grep pattern file | awk '{print}' ORS='"" '
</code></pre>

<p>This would transform:</p>

<pre><code>one
two 
three
</code></pre>

<p>to:</p>

<pre><code>one"" two"" three"" 
</code></pre>
","15580184"
"How do I read first line using cat","107371","","<p>How do i read the first line of a file using <code>cat</code>?</p>
","<p>You don't need <code>cat</code>.  <code>head -1 file</code> will work fine.</p>
","6114132"
"unix - count of columns in file","107111","","<p>Given a file with data like this (i.e. stores.dat file)</p>

<pre><code>sid|storeNo|latitude|longitude
2|1|-28.03720000|153.42921670
9|2|-33.85090000|151.03274200
</code></pre>

<p>What would be a command to output the number of column names?</p>

<p>i.e. In the example above it would be 4. (number of pipe characters + 1 in the first line)</p>

<p>I was thinking something like:</p>

<pre><code>awk '{ FS = ""|"" } ; { print NF}' stores.dat
</code></pre>

<p>but it returns all lines instead of just the first and for the first line it returns 1 instead of 4</p>
","<pre><code>awk -F'|' '{print NF; exit}' stores.dat 
</code></pre>

<p>Just quit right after the first line.</p>
","8629351"
"Ternary operator (?:) in Bash","106899","","<p>Is there a way to do something like this</p>

<pre><code>int a = (b == 5) ? c : d;</code></pre>

<p>using Bash?</p>
","<p>ternary operator <code>? :</code> is just short form of <code>if/else</code></p>

<pre><code>case ""$b"" in
 5) a=$c ;;
 *) a=$d ;;
esac
</code></pre>

<p>Or</p>

<pre><code> [[ $b = 5 ]] &amp;&amp; a=""$c"" || a=""$d""
</code></pre>
","3953666"
"Bash: for each directory","106620","","<p>I am working on a script that needs to perform an action in every sub-directory of a specific folder.</p>

<p>What is the most efficient way to write that?</p>
","<pre><code>for D in `find . -type d`
do
    //Do whatever you need with D
done
</code></pre>
","4000707"
"Bash regex if statement","106429","","<p>What did I do wrong here?</p>

<p>Trying to match any string that contains spaces, lowercase, uppercase, or numbers. Special characters would be nice too, but I think that requires escaping certain characters.</p>

<pre><code>TEST=""THIS is a TEST title with some numbers 12345 and special char *&amp;^%$#""

if [[ ""$TEST"" =~ [^a-zA-Z0-9\ ] ]]; then BLAH; fi
</code></pre>

<p>This obviously only tests for upper, lower, numbers, and spaces. Doesn't work though.</p>

<p><strong>* UPDATE *</strong></p>

<p>I guess I should have been more specific. Here is the actual real line of code.</p>

<pre><code>if [[ ""$TITLE"" =~ [^a-zA-Z0-9\ ] ]]; then RETURN=""FAIL"" &amp;&amp; ERROR=""ERROR: Title can only contain upper and lowercase letters, numbers, and spaces!""; fi
</code></pre>

<p><strong>* UPDATE *</strong></p>

<pre><code>./anm.sh: line 265: syntax error in conditional expression
./anm.sh: line 265: syntax error near `&amp;*#]'
./anm.sh: line 265: `  if [[ ! ""$TITLE"" =~ [a-zA-Z0-9 $%^\&amp;*#] ]]; then RETURN=""FAIL"" &amp;&amp; ERROR=""ERROR: Title can only contain upper and lowercase letters, numbers, and spaces!""; return; fi'
</code></pre>
","<p>There are a couple of important things to know about bash's <code>[[ ]]</code> construction. The first:</p>

<blockquote>
  <p>Word splitting and pathname expansion are not performed on the words between the <code>[[</code> and <code>]]</code>; tilde expansion, parameter and variable expansion, arithmetic expansion, command substitution, process substitution, and quote removal are performed.</p>
</blockquote>

<p>The second thing:</p>

<blockquote>
  <p>An additional binary operator, ‘=~’, is available,... the string to the right of the operator is considered an extended regular expression and matched accordingly... <strong>Any part of the pattern may be quoted to force it to be matched as a string</strong>.</p>
</blockquote>

<p>Consequently, <code>$v</code> on either side of the <code>=~</code> will be expanded to the value of that variable, but the result will not be word-split or pathname-expanded. In other words, it's perfectly safe to leave variable expansions unquoted on the left-hand side, but you need to know that variable expansions will happen on the right-hand side.</p>

<p>So if you write: <code>[[ $x =~ [$0-9a-zA-Z] ]]</code>, the <code>$0</code> inside the regex on the right will be expanded before the regex is interpreted, which will probably cause the regex to fail to compile (unless the expansion of <code>$0</code> ends with a digit or punctuation symbol whose ascii value is less than a digit). <strong>If you quote the right-hand side like-so <code>[[ $x =~ ""[$0-9a-zA-Z]"" ]]</code>, then the right-hand side will be treated as an ordinary string, not a regex</strong> (and <code>$0</code> will still be expanded). What you really want in this case is <code>[[ $x =~ [\$0-9a-zA-Z] ]]</code></p>

<p>Similarly, the expression between the <code>[[</code> and <code>]]</code> is split into words before the regex is interpreted. So spaces in the regex need to be escaped or quoted. If you wanted to match letters, digits or spaces you could use: <code>[[ $x =~ [0-9a-zA-Z\ ] ]]</code>. Other characters similarly need to be escaped, like <code>#</code>, which would start a comment if not quoted. Of course, you can put the pattern into a variable:</p>

<pre><code>pat=""[0-9a-zA-Z ]""
if [[ $x =~ $pat ]]; then ...
</code></pre>

<p>For regexes which contain lots of characters which would need to be escaped or quoted to pass through bash's lexer, many people prefer this style. But beware: In this case, you <em>cannot</em> quote the variable expansion:</p>

<pre><code># This doesn't work:
if [[ $x =~ ""$pat"" ]]; then ...
</code></pre>

<p>Finally, I think what you are trying to do is verify that the variable only contains valid characters. The easiest way to do this check is to make sure that it does not contain an invalid character. In other words, an expression like this:</p>

<pre><code>valid='0-9a-zA-Z $%&amp;#' # add almost whatever else you want to allow to the list
if [[ ! $x =~ [^$valid] ]]; then ...
</code></pre>

<p><code>!</code> negates the test, turning it into a ""does not match"" operator, and a <code>[^...]</code> regex character class means ""any character other than <code>...</code>"".  </p>

<p>The combination of parameter expansion and regex operators can make bash regular expression syntax ""almost readable"", but there are still some gotchas. (Aren't there always?) One is that you could not put <code>]</code> into <code>$valid</code>, even if <code>$valid</code> were quoted, except at the very beginning. (That's a Posix regex rule: if you want to include <code>]</code> in a character class, it needs to go at the beginning. <code>-</code> can go at the beginning or the end, so if you need both <code>]</code> and <code>-</code>, you need to start with <code>]</code> and end with <code>-</code>, leading to the regex ""I know what I'm doing"" emoticon: <code>[][-]</code>)</p>
","18710850"
"Grep characters before and after match?","106403","","<p>Using this:</p>

<pre><code>grep -A1 -B1 ""test_pattern"" file
</code></pre>

<p>will produce one line before and after the matched pattern in the file. Is there a way to display not lines but a specified number of characters? </p>

<p>The lines in my file are pretty big so I am not interested in printing the entire line but rather only observe the match in context. Any suggestions on how to do this?</p>
","<p>3 characters before and 4 characters after</p>

<pre><code>$&gt; echo ""some123_string_and_another"" | grep -o -P '.{0,3}string.{0,4}'
23_string_and
</code></pre>
","8101776"
"Bash: current directory variable","106387","","<p>What I'm trying to do is find the current working directory and save it into a variable, so that I can run <code>export PATH=$PATH:currentdir+somethingelse</code>. :s not entirely sure if they have a variable that contains cwd by default.</p>
","<p>This saves the absolute path of the current working directory to the variable <code>cwd</code>:</p>

<pre><code>cwd=$(pwd)
</code></pre>

<p>In your case you can just do:</p>

<pre><code>export PATH=$PATH:$(pwd)+somethingelse
</code></pre>
","13275062"
"Send string to stdin","106276","","<p>Is there a way to effectively do this in bash:</p>

<pre><code>/my/bash/script &lt; echo 'This string will be sent to stdin.'
</code></pre>

<p>I'm aware that I could pipe the output from the echo such as this:</p>

<pre><code>echo 'This string will be piped to stdin.' | /my/bash/script
</code></pre>
","<p>You can use one-line <code>heredoc</code></p>

<pre><code>cat &lt;&lt;&lt; ""This is coming from the stdin""
</code></pre>

<p>the above is the same as</p>

<pre><code>cat &lt;&lt;EOF
This is coming from the stdin
EOF
</code></pre>

<p>or you can redirect output from a command, like</p>

<pre><code>diff &lt;(ls /bin) &lt;(ls /usr/bin)
</code></pre>

<p>or you can read as</p>

<pre><code>while read line
do
   echo =$line=
done &lt; some_file
</code></pre>

<p>or simply</p>

<pre><code>echo something | read param
</code></pre>
","6541324"
"How to run a command as a specific user in an init script?","106231","","<p>I'm writing an init script which is supposed to execute a single command as a user different than root. This is how I'm doing it currently:<br>
<code>sudo -u username command</code> </p>

<p>This generally works as expected on Ubuntu/Debian, but on RHEL the script which is executed as the <code>command</code> hangs.<br>
Is there another way to run the command as another user?<br>
(Note that I can't use lsb init functions as they're not available on RHEL/Centos 5.x.)</p>
","<p>On RHEL systems, the <code>/etc/rc.d/init.d/functions</code> script is intended to provide similar to what you want. If you source that at the top of your init script, all of it's functions become available.</p>

<p>The specific function provided to help with this is <code>daemon</code>. If you are intending to use it to start a daemon-like program, a simple usage would be:</p>

<pre><code>daemon --user=username command
</code></pre>

<p>If that is too heavy-handed for what you need, there is <code>runuser</code> (see <code>man runuser</code> for full info; some versions may need <code>-u</code> prior to the username):</p>

<pre><code>/sbin/runuser username -s /bin/bash -c ""command(s) to run as user username""
</code></pre>
","31616592"
"grep --ignore-case --only","105857","","<p>grep fails when using both --ignore-case and --only-match options.
Example:</p>

<pre><code>$ echo ""abc"" | grep -io abc
abc
$ echo ""ABC"" | grep -io abc
$ 
</code></pre>

<p>But</p>

<pre><code>$ echo ""abc"" | grep -i abc
abc
$ echo ""ABC"" | grep -i abc
ABC
</code></pre>

<p>According to man page:</p>

<blockquote>
<pre><code>   -o, --only-matching
          Show only the part of a matching line that matches PATTERN.
   -i, --ignore-case
          Ignore case distinctions in both the PATTERN and the input files.
</code></pre>
</blockquote>

<p>Is it a bug of grep or I didn't get the map page?</p>

<p>I am using Mac OS X 10.6.8 and </p>

<pre><code>$ grep --version
grep (GNU grep) 2.5.1
</code></pre>

<p>Found this link: <a href=""http://lists.gnu.org/archive/html/bug-gnu-utils/2003-11/msg00040.html"" rel=""noreferrer"">http://lists.gnu.org/archive/html/bug-gnu-utils/2003-11/msg00040.html</a></p>

<p>Of course it is possible to use workaround like <code>grep -o [aA][bB][cC]</code>, but this doesn't seem to be a good option.</p>
","<p>This is a <a href=""https://bugzilla.redhat.com/show_bug.cgi?id=72641"" rel=""noreferrer"">known</a> <a href=""http://savannah.gnu.org/bugs/?12995#comment2"" rel=""noreferrer"">bug</a> on the initial 2.5.1, and has been fixed in early 2007 (Redhat 2.5.1-5) according to the bug reports. Unfortunately Apple is still using 2.5.1 even on <a href=""http://opensource.apple.com/source/grep/grep-28/"" rel=""noreferrer"">Mac OS X 10.7.2</a>.</p>

<p>You could get a newer version via <a href=""https://github.com/Homebrew/homebrew-dupes/blob/master/grep.rb"" rel=""noreferrer"">Homebrew (3.0)</a> or <a href=""https://trac.macports.org/browser/trunk/dports/sysutils/grep/Portfile"" rel=""noreferrer"">MacPorts (2.26)</a> or <a href=""http://pdb.finkproject.org/pdb/package.php/grep"" rel=""noreferrer"">fink (3.0-1)</a>.</p>

<hr>

<p>Edit: Apparently it has been fixed on OS X 10.11 (or maybe earlier), even though the grep version reported is still 2.5.1.</p>
","8498476"
"Add to the end of a line containing a pattern - with sed or awk","105792","","<p>Here is example file</p>

<pre><code>somestuff...
all: thing otherthing
some other stuff
</code></pre>

<p>What I want to do is to add to the line that starts with <code>all:</code> like this:</p>

<pre><code>somestuff...
all: thing otherthing anotherthing
some other stuff
</code></pre>

<p>I probably can do this using sed, but I am not really good in sed, so could anyone help with it?</p>
","<p>This works for me</p>

<pre><code>sed '/^all:/ s/$/ anotherthing/' file
</code></pre>

<p>The first part is a pattern to find and the second part is an ordinary sed's substitution using <code>$</code> for the end of a line.</p>

<p>If you want to change the file during the process, use <code>-i</code> option</p>

<pre><code>sed -i '/^all:/ s/$/ anotherthing/' file
</code></pre>

<p>Or you can redirect it to another file</p>

<pre><code>sed '/^all:/ s/$/ anotherthing/' file &gt; output
</code></pre>
","9591835"
"Using sendmail from bash script for multiple recipients","105638","","<p>I'm running a bash script in cron to send mail to multiple recipients when a certain condition is met.</p>

<p>I've coded the variables like this: </p>

<pre><code>subject=""Subject""
from=""user@domain.com""
recipients=""user1@gmail.com user2@gmail.com""
mail=""subject:$subject\nfrom:$from\nExample Message""
</code></pre>

<p>And the actual sending:</p>

<pre><code>echo -e $mail | /usr/sbin/sendmail ""$recipients""
</code></pre>

<p>The problem is that only user2@gmail.com is receiving the email. How can I change this so all the recipients receive the email?</p>

<p>NOTE: The solution has to be with sendmail, I'm using jailshell and it seems to be the only available method</p>
","<p>Try doing this :</p>

<pre><code>recipients=""user1@gmail.com,user2@gmail.com,user3@gmail.com""
</code></pre>

<p>And another approach, using shell <em>here-doc</em> :</p>

<pre><code>/usr/sbin/sendmail ""$recipients"" &lt;&lt;EOF
subject:$subject
from:$from

Example Message
EOF
</code></pre>

<p>Be sure to separate the headers from the body with a blank line as per <a href=""https://www.ietf.org/rfc/rfc0822.txt"" rel=""noreferrer"">RFC 822</a>.</p>
","13390926"
"Remove duplicate entries using a Bash script","105520","","<p>I want to remove duplicate entries from a text file, e.g:</p>

<pre><code>kavitha= Tue Feb    20 14:00 19 IST 2012  (duplicate entry) 
sree=Tue Jan  20 14:05 19 IST 2012  
divya = Tue Jan  20 14:20 19 IST 2012  
anusha=Tue Jan 20 14:45 19 IST 2012 
kavitha= Tue Feb    20 14:00 19 IST 2012 (duplicate entry) 
</code></pre>

<p>Is there any possible way to remove the duplicate entries using a Bash script?</p>

<p><strong>Desired output</strong></p>

<pre><code>kavitha= Tue Feb    20 14:00 19 IST 2012 
sree=Tue Jan  20 14:05 19 IST 2012  
divya = Tue Jan  20 14:20 19 IST 2012  
anusha=Tue Jan 20 14:45 19 IST 2012
</code></pre>
","<p>You can <code>sort</code> then <code>uniq</code>:</p>

<pre><code>$ sort -u input.txt
</code></pre>

<p>Or use <code>awk</code>:</p>

<pre><code>$ awk '!a[$0]++' input.txt
</code></pre>
","9377125"
"How do I use regular expressions in bash scripts?","105460","","<p>I want to check if a variable has a valid year using a regular expression. Reading the <a href=""http://www.gnu.org/software/bash/manual/html_node/Conditional-Constructs.html"" rel=""noreferrer"">bash manual</a> I understand I could use the operator =~</p>

<p>Looking at the example below, I would expect to see ""not OK"" but I see ""OK"". What am I doing wrong?</p>

<pre><code>i=""test""
if [ $i=~""200[78]"" ]
then
  echo ""OK""
else
  echo ""not OK""
fi
</code></pre>
","<p>It was changed between 3.1 and 3.2:</p>

<blockquote>
  <p>This is a terse description of the new features added to bash-3.2 since the release of bash-3.1.</p>
  
  <p>Quoting the string argument to the [[ command's  =~ operator now forces string matching, as with the other pattern-matching operators.</p>
</blockquote>

<p>So use it without the quotes thus:</p>

<pre><code>i=""test""
if [[ $i =~ 200[78] ]] ; then
    echo ""OK""
else
    echo ""not OK""
fi
</code></pre>
","304922"
"Setting PATH environment variable in OSX permanently","105416","","<p>I have read several answers on how to set environmental variables on OSX as permanently. </p>

<p>First, I tried this, <a href=""https://stackoverflow.com/questions/14637979/how-to-permanently-set-path-on-linux"">How to permanently set $PATH on Linux/Unix?</a> but I had an error message saying <code>no such file and directory</code>, so I thought I could try   <code>~/.bash_profile</code> instead of <code>~/.profile</code> but it did not work.</p>

<p>Second, I found this solution <a href=""https://stackoverflow.com/questions/460835/how-to-set-the-path-as-used-by-applications-in-os-x"">How to set the $PATH as used by applications in os x</a> , which advices to make changes in </p>

<blockquote>
  <p>~/.MacOSX/environment.plist</p>
</blockquote>

<p>but again I had <code>no such file and directory</code> error. </p>

<p>I need a way to set these variables such that it won't require to set them again and again each time I open a new terminal session.</p>
","<p>You have to add it to <code>/etc/paths</code>.</p>

<p>Reference (which works for me) : <a href=""http://architectryan.com/2012/10/02/add-to-the-path-on-mac-os-x-mountain-lion/#.Uydjga1dXDg"">Here</a></p>
","22465399"
"How can I quickly sum all numbers in a file?","105408","","<p>I have a file which contains several thousand numbers, each on it's own line:</p>

<pre><code>34
42
11
6
2
99
...
</code></pre>

<p>I'm looking to write a script which will print the sum of all numbers in the file. I've got a solution, but it's not very efficient. (It takes several minutes to run.) I'm looking for a more efficient solution. Any suggestions?</p>
","<p>For a Perl one-liner, it's basically the same thing as the <code>awk</code> solution in <a href=""https://stackoverflow.com/questions/2702564/script-to-sum-all-numbers-in-a-file-linux/2702577#2702577"">Ayman Hourieh's answer</a>:</p>

<pre><code> % perl -nle '$sum += $_ } END { print $sum'
</code></pre>

<p>If you're curious what Perl one-liners do, you can deparse them:</p>

<pre><code> %  perl -MO=Deparse -nle '$sum += $_ } END { print $sum'
</code></pre>

<p>The result is a more verbose version of the program, in a form that no one would ever write on their own:</p>

<pre><code>BEGIN { $/ = ""\n""; $\ = ""\n""; }
LINE: while (defined($_ = &lt;ARGV&gt;)) {
    chomp $_;
    $sum += $_;
}
sub END {
    print $sum;
}
-e syntax OK
</code></pre>

<p>Just for giggles, I tried this with a file containing 1,000,000 numbers (in the range 0 - 9,999). On my Mac Pro, it returns virtually instantaneously. That's too bad, because I was hoping using <code>mmap</code> would be really fast, but it's just the same time:</p>

<pre><code>use 5.010;
use File::Map qw(map_file);

map_file my $map, $ARGV[0];

$sum += $1 while $map =~ m/(\d+)/g;

say $sum;
</code></pre>
","2702614"
"How to find substring inside a string (or how to grep a variable)?","105390","","<p>I'm using BASH, and I don't know how to find a substring. It keeps failing, I've got a string (should this be an array?)</p>

<p>Below, <code>LIST</code> is a string list of database names, <code>SOURCE</code> is the reply, one of those databases. The following still doesn't work:</p>

<pre><code>echo ""******************************************************************""
echo ""*                  DB2 Offline Backup Script                     *""
echo ""******************************************************************""
echo ""What's the name of of the  database you would like to backup?""
echo ""It will be named one in this list:""
echo """"
LIST=`db2 list database directory | grep ""Database alias"" | awk '{print $4}'`
echo $LIST
echo """"
echo ""******************************************************************""
echo -n ""&gt;&gt;&gt; ""
read -e SOURCE

if expr match ""$LIST"" ""$SOURCE""; then
    echo ""match""
    exit -1
else
    echo ""no match""
fi
exit -1
</code></pre>

<p>I've also tried this but doesn't work:</p>

<pre><code>if [ `expr match ""$LIST"" '$SOURCE'` ]; then
</code></pre>
","<pre><code>LIST=""some string with a substring you want to match""
SOURCE=""substring""
if echo ""$LIST"" | grep -q ""$SOURCE""; then
  echo ""matched"";
else
  echo ""no match"";
fi
</code></pre>
","4468005"
"linux find regex","105271","","<p>I'm having trouble using the regex of the <code>find</code> command. Probably something I don't understand about escaping on the command line.</p>

<p>Why are these not the same?</p>

<pre><code>find -regex '.*[1234567890]'
find -regex '.*[[:digit:]]'
</code></pre>

<p>Bash, Ubuntu</p>
","<p>Regular expressions with character classes (e.g. <code>[[:digit:]]</code>) are not supported in the default regular expression syntax used by <code>find</code>. You need to specify a different regex type such as <code>posix-extended</code> in order to use them.</p>

<p>Take a look at GNU Find's Regular Expression <a href=""http://www.gnu.org/software/findutils/manual/html_mono/find.html#Regular-Expressions"" rel=""noreferrer"">documentation</a> which shows you all the regex types and what they support.</p>
","5635855"
"Install MySQL on Ubuntu without a password prompt","105169","","<p>How do I write a script to install MySQL server on Ubuntu?</p>

<p><code>sudo apt-get install mysql</code> will install, but it will also ask for a password to be entered in the console.</p>

<p>How do I do this in a non-interactive way? That is, write a script that can provide the password? </p>

<pre><code>#!/bin/bash
sudo apt-get install mysql  # To install MySQL server

# How to write script for assigning password to MySQL root user
# End
</code></pre>
","<pre><code>sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password password your_password'
sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password_again password your_password'
sudo apt-get -y install mysql-server
</code></pre>

<p>For specific versions, such as <code>mysql-server-5.6</code>, you'll need to specify the version in like this:</p>

<pre><code>sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server-5.6 mysql-server/root_password password your_password'
sudo debconf-set-selections &lt;&lt;&lt; 'mysql-server-5.6 mysql-server/root_password_again password your_password'
sudo apt-get -y install mysql-server-5.6
</code></pre>

<p>Replace your_password with the desired root password. (it seems your_password can also be left blank for a blank root password.)</p>

<p>If your shell doesn't support <em>here-strings</em> (<em>zsh</em>, <em>ksh93</em> and <em>bash</em> support them), use:</p>

<pre><code>echo ... | sudo debconf-set-selections 
</code></pre>
","7740571"
"Linux / Bash, using ps -o to get process by specific name?","104732","","<p>I am trying to use the ps -o command to get just specific info about processes matching a certain name. However, I am having some issues on this, when I try to use this even to just get all processes, like so, it just returns a subset of what a normal <code>ps -ef</code> would return (it doesn't return nearly the same number of results so its not returning all running processes)</p>

<pre><code>ps -ef -o pid,time,comm
</code></pre>

<p>I want to try something like this (below) but incorporate the ps -o to just get specific info from it (just the PID)</p>

<pre><code>ps -ef |grep `whoami`| grep firefox-bin
</code></pre>

<p>Any advice is appreciated as to how to do this properly, thanks </p>
","<p>This will get you the PID of a process by name:</p>

<pre><code>pidof name
</code></pre>

<p>Which you can then plug back in to ps for more detail:</p>

<pre><code>ps -p $(pidof name)
</code></pre>
","3790920"
"Adding Counter in shell script","104594","","<p>I have below code in my shell script which will keep on sleeping if it doesn't finds any file. And it sleeps for half an hour but currently I don't have any counter like only execute the below code 20 times and then exit the program if the files are still are not there (means don't do anything after 20 checks and exit the full script).</p>

<p>What's the best way to do this problem? So that I am also aware by looking at the emails that it has tried 20 times.</p>

<p>Hope I am clear enough.</p>

<pre><code>while true; do
  if /home/hadoop/latest/bin/hadoop fs -ls /apps/hdtech/bds/quality-rt/dt=$DATE_YEST_FORMAT2 then
       echo ""Files Present"" | mailx -s ""File Present""  -r admin@host.com admin@host.com
       break
  else
       echo ""Sleeping for half an hour"" | mailx -s ""Time to Sleep Now""  -r admin@host.com admin@host.com
       sleep 1800
  fi
done
</code></pre>
","<p>Here's how you might implement a counter:</p>

<pre><code>counter=0
while true; do
  if /home/hadoop/latest/bin/hadoop fs -ls /apps/hdtech/bds/quality-rt/dt=$DATE_YEST_FORMAT2 then
       echo ""Files Present"" | mailx -s ""File Present""  -r admin@host.com admin@host.com
       exit 0
  elif [[ ""$counter"" -gt 20 ]]; then
       echo ""Counter: $counter times reached; Exiting loop!""
       exit 1
  else
       counter=$((counter+1))
       echo ""Counter: $counter time(s); Sleeping for another half an hour"" | mailx -s ""Time to Sleep Now""  -r admin@host.com admin@host.com
       sleep 1800
  fi
done
</code></pre>

<p><strong>Some Explanations:</strong></p>

<ul>
<li><code>counter=$((counter+1))</code> - this is how you can increment a counter. The <code>$</code> for <code>counter</code> is optional inside the double parentheses in this case.</li>
<li><code>elif [[ ""$counter"" -gt 20 ]]; then</code> - this checks whether <code>$counter</code> is not greater than <code>20</code>. If so, it outputs the appropriate message and breaks out of your while loop.</li>
</ul>
","13638696"
"Run Bash Command from PHP","104482","","<p>I have a bash script, that I run like this via the command line:</p>

<pre><code>./script.sh var1 var2
</code></pre>

<p>I am trying to execute the above command, after I call a certain php file.</p>

<p>What I have right now is:</p>

<pre><code>$output = shell_exec(""./script.sh var1 var2"");
echo ""&lt;pre&gt;$output&lt;/pre&gt;"";
</code></pre>

<p>But it doesn´t work. I tried it using <code>exec</code> and <code>system</code> too, but the script never got executed.</p>

<p>However when I try to run <code>shell_exec(""ls"");</code> it does work and <code>$output</code> is a list of all files.</p>

<p>I am not sure whether this is because of a limitation of the VPS I am using or if the problem is somewhere else?</p>
","<p>You probably need to <a href=""http://us3.php.net/manual/en/function.chdir.php"" rel=""noreferrer"">chdir</a> to the correct directory before calling the script. This way you can ensure what directory your script is ""in"" before calling the shell command.</p>

<pre><code>$old_path = getcwd();
chdir('/my/path/');
$output = shell_exec('./script.sh var1 var2');
chdir($old_path);
</code></pre>
","11052453"
"How to use an environment variable inside a quoted string in Bash","104450","","<p>I've tried various forms of the following in a bash script:</p>

<pre><code>#!/bin/bash
svn diff $@ --diff-cmd /usr/bin/diff -x ""-y -w -p -W $COLUMNS""
</code></pre>

<p>But I can't get the syntax to correctly expand the <code>COLUMNS</code> environment variable.</p>

<p>I've tried various forms of the following:</p>

<pre><code>svn diff $@ --diff-cmd /usr/bin/diff -x '-y -w -p -W $COLUMNS'
</code></pre>

<p>and</p>

<pre><code>svn diff $@ --diff-cmd /usr/bin/diff -x '-y -w -p -W ${COLUMNS}'
</code></pre>

<p>and</p>

<pre><code>eval svn diff $@ --diff-cmd /usr/bin/diff -x ""-y -w -p -W $COLUMNS""
</code></pre>

<p>Suggestions?</p>
","<p>If unsure, you might use the 'cols' request on the terminal, and forget COLUMNS:</p>

<pre><code>COLS=$(tput cols)
</code></pre>
","843897"
"find -mtime files older than 1 hour","104045","","<p>I have this command that I run every 24 hours currently.</p>

<pre><code>find /var/www/html/audio -daystart -maxdepth 1 -mtime +1 -type f -name ""*.mp3"" -exec rm -f {} \;
</code></pre>

<p>I would like to run it every 1 hour and delete files that are older than 1 hour. Is this correct:</p>

<pre><code>find /var/www/html/audio -daystart -maxdepth 1 -mtime **+0.04** -type f -name ""*.mp3"" -exec rm -f {} \;
</code></pre>

<p>I am not sure of my use of the decimal number??</p>

<p>Thanks for any corrections.</p>

<h2>EDIT</h2>

<p>OR could I just use <strong>-mmin 60</strong>? Is this correct?</p>

<h2>EDIT2</h2>

<p>I tried your test, good thing you suggested it. I got an empty result. I want all files <strong>OLDER</strong> than 60mins to be deleted! How can I do this?? Does my command actually do this?</p>
","<p>What about <code>-mmin</code>?</p>

<pre><code>find /var/www/html/audio -daystart -maxdepth 1 -mmin +59 -type f -name ""*.mp3"" \
    -exec rm -f {} \;
</code></pre>

<p>From man find:</p>

<pre>
-mmin n
        File's data was last modified n minutes ago.
</pre>

<p>Also, <strong>make sure to test this first!</strong></p>

<pre>
... -exec echo rm -f '{}' \;
          ^^^^ Add the 'echo' so you just see the commands that are going to get
               run instead of actual trying them first.
</pre>
","543951"
"Using curl POST with variables defined in bash script functions","103852","","<p>When I echo I get this, which runs when I enter it into the terminal</p>

<pre><code>curl -i \
-H ""Accept: application/json"" \
-H ""Content-Type:application/json"" \
-X POST --data '{""account"":{""email"":""akdgdtk@test.com"",""screenName"":""akdgdtk"",""type"":""NIKE"",""passwordSettings"":{""password"":""Starwars1"",""passwordConfirm"":""Starwars1""}},""firstName"":""Test"",""lastName"":""User"",""middleName"":""ObiWan"",""locale"":""en_US"",""registrationSiteId"":""520"",""receiveEmail"":""false"",""dateOfBirth"":""1984-12-25"",""mobileNumber"":""9175555555"",""gender"":""male"",""fuelActivationDate"":""2010-10-22"",""postalCode"":""10022"",""country"":""US"",""city"":""Beverton"",""state"":""OR"",""bio"":""This is a test user"",""jpFirstNameKana"":""unsure"",""jpLastNameKana"":""ofthis"",""height"":""80"",""weight"":""175"",""distanceUnit"":""MILES"",""weightUnit"":""POUNDS"",""heightUnit"":""FT/INCHES""}' https://xxx:xxxxx@xxxx-www.xxxxx.com/xxxxx/xxxx/xxxx
</code></pre>

<p>But when run in the bash script file, I get this error</p>

<pre><code>curl: (6) Could not resolve host: application; nodename nor servname provided, or not known
curl: (6) Could not resolve host: is; nodename nor servname provided, or not known
curl: (6) Could not resolve host: a; nodename nor servname provided, or not known
curl: (6) Could not resolve host: test; nodename nor servname provided, or not known
curl: (3) [globbing] unmatched close brace/bracket at pos 158
</code></pre>

<p>this is the code in the file</p>

<pre><code>curl -i \
-H '""'Accept: application/json'""' \
-H '""'Content-Type:application/json'""' \
-X POST --data ""'""'{""account"":{""email"":""'$email'"",""screenName"":""'$screenName'"",""type"":""'$theType'"",""passwordSettings"":{""password"":""'$password'"",""passwordConfirm"":""'$password'""}},""firstName"":""'$firstName'"",""lastName"":""'$lastName'"",""middleName"":""'$middleName'"",""locale"":""'$locale'"",""registrationSiteId"":""'$registrationSiteId'"",""receiveEmail"":""'$receiveEmail'"",""dateOfBirth"":""'$dob'"",""mobileNumber"":""'$mobileNumber'"",""gender"":""'$gender'"",""fuelActivationDate"":""'$fuelActivationDate'"",""postalCode"":""'$postalCode'"",""country"":""'$country'"",""city"":""'$city'"",""state"":""'$state'"",""bio"":""'$bio'"",""jpFirstNameKana"":""'$jpFirstNameKana'"",""jpLastNameKana"":""'$jpLastNameKana'"",""height"":""'$height'"",""weight"":""'$weight'"",""distanceUnit"":""MILES"",""weightUnit"":""POUNDS"",""heightUnit"":""FT/INCHES""}'""'"" ""https://xxx:xxxxx@xxxx-www.xxxxx.com/xxxxx/xxxx/xxxx""
</code></pre>

<p>I assume there's an issue with my quotation marks, but I've played with them a lot and I've gotten similar errors.  All the variables are defined with different functions in the actual script</p>
","<p>You don't need to pass the quotes enclosing the custom headers to curl. Also, your variables in the middle of the <code>data</code> argument should be quoted.</p>

<p>First, write a function that generates the post data of your script. This saves you from all sort of headaches concerning shell quoting and makes it easier to read an maintain the script than feeding the post data on curl's invocation line as in your attempt:</p>

<pre><code>generate_post_data()
{
  cat &lt;&lt;EOF
{
  ""account"": {
    ""email"": ""$email"",
    ""screenName"": ""$screenName"",
    ""type"": ""$theType"",
    ""passwordSettings"": {
      ""password"": ""$password"",
      ""passwordConfirm"": ""$password""
    }
  },
  ""firstName"": ""$firstName"",
  ""lastName"": ""$lastName"",
  ""middleName"": ""$middleName"",
  ""locale"": ""$locale"",
  ""registrationSiteId"": ""$registrationSiteId"",
  ""receiveEmail"": ""$receiveEmail"",
  ""dateOfBirth"": ""$dob"",
  ""mobileNumber"": ""$mobileNumber"",
  ""gender"": ""$gender"",
  ""fuelActivationDate"": ""$fuelActivationDate"",
  ""postalCode"": ""$postalCode"",
  ""country"": ""$country"",
  ""city"": ""$city"",
  ""state"": ""$state"",
  ""bio"": ""$bio"",
  ""jpFirstNameKana"": ""$jpFirstNameKana"",
  ""jpLastNameKana"": ""$jpLastNameKana"",
  ""height"": ""$height"",
  ""weight"": ""$weight"",
  ""distanceUnit"": ""MILES"",
  ""weightUnit"": ""POUNDS"",
  ""heightUnit"": ""FT/INCHES""
}
EOF 
}
</code></pre>

<p>It is then easy to use that function in the invocation of curl:</p>

<pre><code>curl -i \
-H ""Accept: application/json"" \
-H ""Content-Type:application/json"" \
-X POST --data ""$(generate_post_data)"" ""https://xxx:xxxxx@xxxx-www.xxxxx.com/xxxxx/xxxx/xxxx""
</code></pre>

<p>This said, here are a few clarifications about shell quoting rules:</p>

<p>The double quotes in the <code>-H</code> arguments (as in <code>-H ""foo bar""</code>) tell bash to keep what's inside as a single argument (even if it contains spaces).</p>

<p>The single quotes in the <code>--data</code> argument (as in <code>--data 'foo bar'</code>) do the same, except they pass all text verbatim (including double quote characters and the dollar sign).</p>

<p>To insert a variable in the middle of a single quoted text, you have to end the single quote, then concatenate with the double quoted variable, and re-open the single quote to continue the text: <code>'foo bar'""$variable""'more foo'</code>.</p>
","17032673"
"How to only find files in a given directory, and ignore subdirectories using bash","102955","","<p>I looked at other similar questions, but didn't find one that would enable me to grasp the concept and make it applicable to my situation based on my limited time. I'm simply running the find command to find certain files, but some files in sub-directories have the same name which I want to ignore. Thanks for any help. Below is the command that I'm using:</p>

<p>The files/pattern I'm interested in: 
    /dev/abc-scanner, /dev/abc-cash ....</p>

<p>The command:</p>

<pre><code>find /dev/ -name 'abc-*'
</code></pre>

<p>What's being returned:</p>

<pre><code>/dev/abc-scanner
/dev/abc-cash
...
...
...
/dev/.udev/names/abc-scanner
/dev/.udev/names/abc-cash
</code></pre>

<p>I want to ignore the latter files: /dev/.udev/...</p>
","<p>If you just want to limit the find to the first level you can do:</p>

<pre><code> find /dev -maxdepth 1 -name 'abc-*'
</code></pre>

<p>... or if you particularly want to exclude the <code>.udev</code> directory, you can do:</p>

<pre><code> find /dev -name '.udev' -prune -o -name 'abc-*' -print
</code></pre>
","7715567"
"sed command with -i option failing on Mac, but works on Linux","102762","","<p>I've successfully used the following <code>sed</code> command to search/replace text in Linux:</p>

<pre><code>sed -i 's/old_link/new_link/g' *
</code></pre>

<p>However, when I try it on my Mac OS X, I get:</p>

<blockquote>
  <p>""command c expects \ followed by text""</p>
</blockquote>

<p>I thought my Mac runs a normal BASH shell.  What's up?</p>

<p><strong>EDIT:</strong></p>

<p>According to @High Performance, this is due to Mac <code>sed</code> being of a different (BSD) flavor, so my question would therefore be how do I replicate this command in BSD <code>sed</code>?</p>

<p><strong>EDIT:</strong> </p>

<p>Here is an actual example that causes this:</p>

<pre><code>sed -i 's/hello/gbye/g' *
</code></pre>
","<p>If you use the -i option you need to provide an extension for your backups.</p>

<p>If you have:</p>

<pre><code>File1.txt
File2.cfg
</code></pre>

<p>The command:</p>

<pre><code>sed -i '.original' 's/old_link/new_link/g' *
</code></pre>

<p>create 2 backup files like:</p>

<pre><code>File1.txt.original
File2.cfg.original
</code></pre>

<p>There is no portable way to avoid making backup files because is impossible to find a mix of sed commands that works on all cases:</p>

<ul>
<li><code>sed -i -e ...</code> - does not work on OS X as it creates <code>-e</code> backups</li>
<li><code>sed -i'' -e ...</code> - does not work on OS X 10.6 but works on 10.9+</li>
<li><code>sed -i '' -e ...</code> - not working on GNU</li>
</ul>
","4247319"
"How can I convert tabs to spaces in every file of a directory?","102665","","<p>How can I convert tabs to spaces in every file of a directory (possibly recursively)?</p>

<p>Also, is there a way of setting the number of spaces per tab?</p>
","<blockquote>
  <h2>Warning: This will break your repo.</h2>
  
  <p>This <strong>will corrupt binary files</strong>, including those under <code>svn</code>, <code>.git</code>! Read the comments before using!</p>
</blockquote>

<p><code>find . -type f -exec sed -i.orig 's/\t/    /g' {} +</code></p>

<p>The original file is saved as <code>[filename].orig</code>.</p>

<p>Downsides:</p>

<ul>
<li>Will replace tabs everywhere in a file.</li>
<li>Will take a long time if you happen to have a 5GB SQL dump in this directory.</li>
</ul>
","11094422"
".bashrc at ssh login","102156","","<p>When I ssh into my ubuntu-box running Hardy 8.04, the environment variables in my .bashrc are not set.</p>

<p>If I do a source .bashrc, the variables are properly set, and all is well.</p>

<p>How come .bashrc isn't run at login?</p>
","<p><code>.bashrc</code> is not sourced when you log in using SSH. You need to source it in your <code>.bash_profile</code> like this:</p>

<pre><code>if [ -f ~/.bashrc ]; then
  . ~/.bashrc
fi
</code></pre>
","820533"
"Provide password to ssh command inside bash script, Without the usage of public keys and Expect","102148","","<p>I want to use <code>SSH</code> inside a script, but this script is not going to be executed on my machine.</p>

<p>In my implementation there are two limitations. </p>

<ul>
<li>I can not work outside shell's standards,therefore i can not use <code>expect</code> because i do not know if it will be available on this machine.</li>
<li>I can not expect that this machine will have <code>public keys</code> for the <code>SSH</code>.</li>
</ul>

<p>What are the possible options-solutions ?</p>

<p>How can i provide ssh with the requested password with an automated and secure way without adding extra dependencies?</p>

<p>Will it be possible to provide the password inside the script?</p>

<p>Thank you all in advance :)</p>
","<p>First of all: <strong>Don't put secrets in clear text</strong> <em>unless</em> you know why it is a safe thing to do (i.e. you have assessed what damage can be done by an attacker knowing the secret).</p>

<p>If you are ok with putting secrets in your script, you could ship an ssh key with it and execute in an <code>ssh-agent</code> shell:</p>

<pre><code>#!/usr/bin/env ssh-agent /usr/bin/env bash
KEYFILE=`mktemp`
cat &lt;&lt; EOF &gt; ${KEYFILE}
-----BEGIN RSA PRIVATE KEY-----
[.......]
EOF
ssh-add ${KEYFILE}

# do your ssh things here...

# Remove the key file.
rm -f ${KEYFILE}
</code></pre>

<p>A benefit of using ssh keys is that you can easily use <a href=""http://binblog.info/2008/10/20/openssh-going-flexible-with-forced-commands/"">forced commands</a> to limit what the keyholder can do on the server.</p>

<p>A more secure approach would be to let the script run <code>ssh-keygen -f ~/.ssh/my-script-key</code> to create a private key specific for this purpose, but then you would also need a routine for adding the public key to the server.</p>
","16937638"
"linux script to kill java process","101924","","<p>I want linux script to kill java program running on console.</p>

<p>Following is the process running as jar.</p>

<pre><code>[rapp@s1-dlap0 ~]$ ps -ef |grep java
rapp    9473    1  0 15:03 pts/1    00:00:15 java -jar wskInterface-0.0.1-SNAPSHOT-jar-with-dependencies.jar
rapp   10177  8995  0 16:00 pts/1    00:00:00 grep java
[rapp@s1-dlap0 ~]$
</code></pre>
","<p>You can simply use <code>pkill -f</code> like this:</p>

<pre><code>pkill -f 'java -jar'
</code></pre>

<p><strong>EDIT:</strong> To kill a particular java process running your specific jar use this regex based pkill command:</p>

<pre><code>pkill -f 'java.*lnwskInterface'
</code></pre>
","13711934"
"CURL to access a page that requires a login from a different page","101792","","<p>I have 2 pages: <code>xyz.com/a</code> and <code>xyz.com/b</code>. I can only access <code>xyz.com/b</code> if and only if I login to <code>xyz.com/a</code> first. If accessing <code>xyz.com/b</code> without going through the other, I simply get access denied (no redirect to login) via the browser. Once I login at <code>xyz.com/a</code>, I can access the other.</p>

<p>My problem is doing this using the curl command. I can login successfully to <code>xyz.com/a</code> using curl, but then try <code>xyx.com/b</code> and I get access denied.</p>

<p>I use the following:</p>

<pre><code>curl --user user:pass https://xyz.com/a  #works ok
curl https://xyz.com/b #doesn't work
</code></pre>

<p>I've tried using the second line with &amp; without the user/password part and still doesn't work. Both pages uses the same CA, so that's not a problem. Any suggestions? Thanks</p>
","<p>The web site likely uses <a href=""https://en.wikipedia.org/wiki/HTTP_cookie"">cookies</a> to store your session information. When you run</p>

<pre><code>curl --user user:pass https://xyz.com/a  #works ok
curl https://xyz.com/b #doesn't work
</code></pre>

<p><code>curl</code> is run twice, in two separate sessions. Thus when the second command runs, the cookies set by the 1st command are not available; it's just as if you logged in to page <code>a</code> in one browser session, and tried to access page <code>b</code> in a different one.</p>

<p>What you need to do is <em>save</em> the cookies created by the first command:</p>

<pre><code>curl --user user:pass --cookie-jar ./somefile https://xyz.com/a
</code></pre>

<p>and then read them back in when running the second:</p>

<pre><code>curl --cookie ./somefile https://xyz.com/b
</code></pre>

<p>Alternatively you can try downloading both files in the same command, which I think will use the same cookies.</p>
","12399176"
"Can I use Python as a Bash replacement?","101659","","<p>I currently do my textfile manipulation through a bunch of badly remembered AWK, sed, Bash and a tiny bit of Perl.</p>

<p>I've seen mentioned a few places that python is good for this kind of thing, I know a little and I would like to know more. Is Python a good choice for this, and is there a good book or guide to learning how to use Python to replace shell scripting, AWK, sed and friends?</p>
","<p>Any shell has several sets of features.</p>

<ul>
<li><p>The Essential Linux/Unix commands.  All of these are available through the <a href=""https://docs.python.org/3/library/subprocess.html"" rel=""noreferrer"">subprocess</a> library.  This isn't always the best first choice for doing <em>all</em> external commands.  Look also at <a href=""https://docs.python.org/3/library/shutil.html"" rel=""noreferrer"">shutil</a> for some commands that are separate Linux commands, but you could probably implement directly in your Python scripts.  Another huge batch of Linux commands are in the <a href=""https://docs.python.org/3/library/os.html"" rel=""noreferrer"">os</a> library; you can do these more simply in Python.</p>

<p>And -- bonus! -- more quickly.  Each separate Linux command in the shell (with a few exceptions) forks a subprocess.  By using Python <code>shutil</code> and <code>os</code> modules, you don't fork a subprocess.</p></li>
<li><p>The shell environment features.  This includes stuff that sets a command's environment (current directory and environment variables and what-not).  You can easily manage this from Python directly.</p></li>
<li><p>The shell programming features.  This is all the process status code checking, the various logic commands (if, while, for, etc.) the test command and all of it's relatives.  The function definition stuff.  This is all much, much easier in Python.  This is one of the huge victories in getting rid of bash and doing it in Python.</p></li>
<li><p>Interaction features.  This includes command history and what-not.  You don't need this for writing shell scripts.  This is only for human interaction, and not for script-writing.</p></li>
<li><p>The shell file management features.  This includes redirection and pipelines.  This is trickier.  Much of this can be done with subprocess.  But some things that are easy in the shell are unpleasant in Python.  Specifically stuff like <code>(a | b; c ) | something &gt;result</code>.  This runs two processes in parallel (with output of <code>a</code> as input to <code>b</code>), followed by a third process.  The output from that sequence is run in parallel with <code>something</code> and the output is collected into a file named <code>result</code>.  That's just complex to express in any other language.</p></li>
</ul>

<p>Specific programs (awk, sed, grep, etc.) can often be rewritten as Python modules.  Don't go overboard.  Replace what you need and evolve your ""grep"" module.  Don't start out writing a Python module that replaces ""grep"".</p>

<p>The best thing is that you can do this in steps.</p>

<ol>
<li>Replace AWK and PERL with Python.  Leave everything else alone.</li>
<li>Look at replacing GREP with Python.  This can be a bit more complex, but your version of GREP can be tailored to your processing needs.</li>
<li>Look at replacing FIND with Python loops that use <code>os.walk</code>.  This is a big win because you don't spawn as many processes.</li>
<li>Look at replacing common shell logic (loops, decisions, etc.) with Python scripts.</li>
</ol>
","209562"
"Bash: Strip trailing linebreak from output","101208","","<p>When I execute commands in Bash (or to be specific, <code>wc -l &lt; log.txt</code>), the output contains a linebreak after it. How do I get rid of it?</p>
","<p>One way:</p>

<pre><code>wc -l &lt; log.txt | xargs echo -n
</code></pre>
","12524320"
"How to show and update echo on same line","101115","","<p>I have the following in Bash (In Linux)</p>

<pre><code>for dir in Movies/*
do
  (cd ""$dir"" &amp;&amp; pwd|cut -d \/ -f5|tr -s '\n' ', ' &gt;&gt; ../../movielist &amp;&amp;
  exiftool * -t -s3 -ImageSize -FileType|tr -s '\t' ',' &gt;&gt; ../../movielist )
echo ""Movie $movies - $dir ADDED!""
let movies=movies+1
done
</code></pre>

<p>But I wish to make it so the ""echo"" shows the following echo on the next line (Not concatenate with the last echo output but replace it) so to make it look like it is updating. Similar to how a progress bar with percent would show on the same line.</p>
","<p>Well I did not read correctly the <code>man echo</code> page for this.</p>

<p>echo had 2 options that could do this if I added a 3rd escape character.</p>

<p>The 2 options are <code>-n</code> and <code>-e</code>.</p>

<p><code>-n</code> will not output the trailing newline. So that saves me from going to a new line each time I echo something.</p>

<p><code>-e</code> will allow me to interpret backslash escape symbols.</p>

<p>Guess what escape symbol I want to use for this: <code>\r</code>. Yes, carriage return would send me back to the start and it will visually look like I am updating on the same line.</p>

<p>So the echo line would look like this:</p>

<p><code>echo -ne ""Movie $movies - $dir ADDED!""\\r</code></p>

<p>I had to escape the escape symbol so Bash would not kill it. that is why you see 2 <code>\</code> symbols in there.</p>

<p>As mentioned by William, <code>printf</code> can also do similar (and even more extensive) tasks like this.</p>
","12628482"
"rm: cannot remove: Permission denied","100763","","<pre><code>    max@serv$ whoami
    max
    max@serv$ ls -la ./defines.php 
    -rwxrwxrwx 1 max max 1985 2011-11-16 02:01 ./defines.php
    max@serv$ chmod 0777 ./defines.php 
    max@serv$ rm ./defines.php 
    rm: cannot remove `./defines.php': Permission denied
    max@serv$
</code></pre>

<p>How can I delete this file?</p>
","<p>The code says everything:</p>

<pre><code>max@serv$ chmod 777 .
</code></pre>

<p>Okay, it doesn't say everything.</p>

<p>In UNIX and Linux, the ability to remove a file is <strong>not</strong> determined by the access bits of that file. It is determined by the access bits of the directory which contains the file.</p>

<p>Think of it this way -- deleting a file doesn't modify that file. You aren't writing to the file, so why should ""w"" on the file matter? Deleting a file requires editing the directory that points to the file, so you need ""w"" on the that directory.</p>
","8175730"
"Using sed to mass rename files","100371","","<p><strong>Objective</strong></p>

<p>Change these filenames:</p>

<ul>
<li>F00001-0708-RG-biasliuyda</li>
<li>F00001-0708-CS-akgdlaul</li>
<li>F00001-0708-VF-hioulgigl</li>
</ul>

<p>to these filenames:</p>

<ul>
<li>F0001-0708-RG-biasliuyda</li>
<li>F0001-0708-CS-akgdlaul</li>
<li>F0001-0708-VF-hioulgigl</li>
</ul>

<p><strong>Shell Code</strong></p>

<p>To test:</p>

<pre><code>ls F00001-0708-*|sed 's/\(.\).\(.*\)/mv &amp; \1\2/'
</code></pre>

<p>To perform:</p>

<pre><code>ls F00001-0708-*|sed 's/\(.\).\(.*\)/mv &amp; \1\2/' | sh
</code></pre>

<p><strong>My Question</strong></p>

<p>I don't understand the sed code.  I understand what the substitution
command</p>

<pre><code>$ sed 's/something/mv'
</code></pre>

<p>means.  And I understand regular expressions somewhat.  But I don't
understand what's happening here:</p>

<pre><code>\(.\).\(.*\)
</code></pre>

<p>or here:</p>

<pre><code>&amp; \1\2/
</code></pre>

<p>The former, to me, just looks like it means: ""a single character,
followed by a single character, followed by any length sequence of a
single character""--but surely there's more to it than that.  As far as
the latter part:</p>

<pre><code>&amp; \1\2/
</code></pre>

<p>I have no idea.  I really want to understand this code.  Please help me
out here, guys.</p>
","<p>First, I should say that the easiest way to do this is to use the
prename or rename commands.</p>

<p>On Ubuntu, OSX (Homebrew package <code>rename</code>, MacPorts package <code>p5-file-rename</code>), or other systems with perl rename (prename):</p>

<pre><code>rename s/0000/000/ F0000*
</code></pre>

<p>or on systems with rename from util-linux-ng, such as RHEL:</p>

<pre><code>rename 0000 000 F0000*
</code></pre>

<p>That's a lot more understandable than the equivalent sed command.</p>

<p>But as for understanding the sed command, the sed manpage is helpful. If
you run man sed and search for &amp; (using the / command to search),
you'll find it's a special character in s/foo/bar/ replacements.</p>

<pre><code>  s/regexp/replacement/
         Attempt  to match regexp against the pattern space.  If success‐
         ful,  replace  that  portion  matched  with  replacement.    The
         replacement may contain the special character &amp; to refer to that
         portion of the pattern space  which  matched,  and  the  special
         escapes  \1  through  \9  to refer to the corresponding matching
         sub-expressions in the regexp.
</code></pre>

<p>Therefore, <code>\(.\)</code> matches the first character, which can be referenced by <code>\1</code>.
Then <code>.</code> matches the next character, which is always 0.
Then <code>\(.*\)</code> matches the rest of the filename, which can be referenced by <code>\2</code>.</p>

<p>The replacement string puts it all together using <code>&amp;</code> (the original
filename) and <code>\1\2</code> which is every part of the filename except the 2nd
character, which was a 0.</p>

<p>This is a pretty cryptic way to do this, IMHO.  If for
some reason the rename command was not available and you wanted to use
sed to do the rename (or perhaps you were doing something too complex
for rename?), being more explicit in your regex would make it much
more readable.  Perhaps something like:</p>

<pre><code>ls F00001-0708-*|sed 's/F0000\(.*\)/mv &amp; F000\1/' | sh
</code></pre>

<p>Being able to see what's actually changing in the
s/search/replacement/ makes it much more readable. Also it won't keep
sucking characters out of your filename if you accidentally run it
twice or something.</p>
","2372739"
"How to process each line received as a result of grep command","100088","","<p>I have a number of lines retrieved from a file after running the <a href=""http://linux.die.net/man/1/grep"" rel=""noreferrer"">grep</a> command as follows:</p>

<pre><code>var=`grep xyz abc.txt`
</code></pre>

<p>Let’s say I got 10 lines which consists of xyz as a result.</p>

<p>Now I need to process each line I got as a result of the grep command. How do I proceed for this?</p>
","<p>One of the easy ways is not to store the output in a variable, but directly iterate over it with a while/read loop.</p>

<p>Something like:</p>

<pre><code>grep xyz abc.txt | while read -r line ; do
    echo ""Processing $line""
    # your code goes here
done
</code></pre>

<p>There are variations on this scheme depending on exactly what you're after.</p>

<p>If you need to change variables inside the loop (and have that change be visible outside of it), you can use process substitution as stated in <a href=""https://stackoverflow.com/a/16318041/1983854"">fedorqui's answer</a>:</p>

<pre><code>while read -r line ; do
    echo ""Processing $line""
    # your code goes here
done &lt; &lt;(grep xyz abc.txt)
</code></pre>
","16318005"
"Adding newline characters to unix shell variables","100030","","<p>I am new to shell scripting. I have a variable in a shell script in which I'd like to format the data. The variable stores new data during every iteration of a loop. Each time the new data is stored, I'd like to insert a new line character. Here is how I'm trying to store the data into the variable.</p>

<p><code>VARIABLE=""$VARIABLE '\n' SomeData""</code></p>

<p>Unfortunately, the output includes the literal <code>'\n'</code> Any help would be appreciative. Thanks in advance.</p>
","<p>Try <code>$'\n'</code>:</p>

<pre><code>VAR=a
VAR=""$VAR""$'\n'b
echo ""$VAR""
</code></pre>

<p>gives me</p>

<pre><code>a
b
</code></pre>
","9402996"
"How can remove the extension of a filename in a shell script?","99728","","<p>What's wrong with the following code?</p>

<pre><code>name='$filename | cut -f1 -d'.''
</code></pre>

<p>As is, I get the literal string '$filename | cut -f1 -d'.' but if I remove the quotes I don't get anything. Meanwhile typing</p>

<pre><code>""test.exe"" | cut -f1 -d'.'
</code></pre>

<p>in a shell gives me the output I want, ""test"". I already know $filename has been assigned the right value. What I want to do is assign to a variable the filename without the extension.</p>
","<p>You should be using $(command) when you want to execute a command in script/command.</p>

<p>So your line would be </p>

<pre><code>name=$(echo $filename | cut -f 1 -d '.')
</code></pre>

<p>Code explanation:</p>

<ol>
<li><code>echo</code> get the value of the variable <code>$filename</code> and send it to standard output</li>
<li>We then grab the output and pipe it to the <code>cut</code> command</li>
<li>The <code>cut</code> will use the . as delimiter (also known as separator) for cutting the string into segments and by <code>-f</code> we select which segment we want to have in output</li>
<li>Then the <code>$()</code> wrapper will get the output and return it's value</li>
<li>The returned value will be assigned to the variable named <code>name</code></li>
</ol>
","12152669"
"What does $@ mean in a shell script?","99558","","<p>What does a dollar sign followed by an at-sign (<code>@</code>) mean in a shell script?</p>

<p>For example:</p>

<pre><code>umbrella_corp_options $@
</code></pre>
","<p><code>$@</code> is <strong>all</strong> of the parameters passed to the script. </p>

<p>For instance, if you call <code>./someScript.sh foo bar</code> then <code>$@</code> will be equal to <code>foo bar</code>.</p>

<p>If you do:</p>

<pre><code>./someScript.sh foo bar
</code></pre>

<p>and then inside <code>someScript.sh</code> reference:</p>

<pre><code>umbrella_corp_options ""$@""
</code></pre>

<p>this will be passed to <code>umbrella_corp_options</code> with each individual parameter enclosed in double quotes, allowing to take parameters with blank space from the caller and pass them on.</p>
","9994328"
"Read a variable in bash with a default value","99509","","<p>I need to read a value from the terminal in a bash script.  I would like to be able to provide a default value that the user can change.</p>

<pre><code># Please enter your name: Ricardo^
</code></pre>

<p>In this script the prompt is ""Please enter your name: "" the default value is ""Ricardo"" and the cursor would be after the default value.  Is there a way to do this in a bash script?</p>
","<p>you can use <a href=""http://www.network-theory.co.uk/docs/bashref/ShellParameterExpansion.html"" rel=""noreferrer"">parameter expansion</a> eg</p>

<pre><code>read -p ""Enter: "" name
name=${name:-Richard}
echo $name
</code></pre>
","2642592"
"For files in directory, only echo filename (no path)","99307","","<p>How do I go about echoing only the filename of a file if I iterate a directory with a for loop?</p>

<pre><code>for filename in /home/user/*
do
  echo $filename
done;
</code></pre>

<p>will pull the full path with the file name. I just want the file name.</p>
","<p>If you want a native <code>bash</code> solution</p>

<pre><code>for file in /home/user/*; do
  echo ${file##*/}
done
</code></pre>

<p>The above uses <strong>Parameter Expansion</strong> which is native to the shell and does not require a call to an external binary such as <code>basename</code></p>

<p>However, might I suggest just using <code>find</code></p>

<pre><code>find /home/user -type f -printf ""%f\n""
</code></pre>
","9011264"
"How to include file in a bash shell script","99175","","<p>Is there a way to include another shell script in a shell script to be able to access its functions?</p>

<p>Like how in PHP you can use the <code>include</code> directive with other PHP files in order to run the functions that are contained within simply by calling the function name.</p>
","<p>Simply put inside your script :</p>

<pre><code>source FILE
</code></pre>

<p>Or</p>

<pre><code>. FILE
</code></pre>

<p>it's the same thing.</p>

<pre><code>$ LANG=C help source
source: source filename [arguments]
Execute commands from a file in the current shell.

Read and execute commands from FILENAME in the current shell.  The
entries in $PATH are used to find the directory containing FILENAME.
If any ARGUMENTS are supplied, they become the positional parameters
when FILENAME is executed.

Exit Status:
Returns the status of the last command executed in FILENAME; fails if
FILENAME cannot be read.
</code></pre>
","10823650"
"how to get curl to output only http response body (json) and no other headers etc","99160","","<p>I am using curl in a bash script to fetch the response of a service as below,</p>

<pre><code>response=$(curl -isb -H ""Accept: application/json"" ""http://host:8080/some/resource"")
</code></pre>

<p>Service response is of json type and on browser I could perfectly fine response.<br>
However curl response has other unwanted things (such as set-cookie, content-length header in this case) and sometimes the actual response is eaten up.  </p>

<p>Here is the output of <code>echo $response</code> ></p>

<pre><code> Set-Cookie: rack.session=BAh7CEkiD3Nlc3Npb25faWQGOgZFVEkiRWJlY2JiOTE2M2Q1ZWI4NThjMDdi%0AYjRiOWRjMGMxMGEwYTBkMjE3NmJhZDVjYzY4YjY4ZTlmMTE2ZGVkYWE3MTMG%0AOwBGS
SIJY3NyZgY7AEZJIiVhZmQ2MmUyZGMxMzFmOGEwMjg3NDlhNWM3YmVm%0AN2FjNwY7AEZJIg10cmFja2luZwY7AEZ7B0kiFEhUVFBfVVNFUl9BR0VOVAY7%0AAFRJIi00MTc0OGM2MWNkMzljZTYxNzY3ZjU0
Y2I5OTdiYWRkN2MyNTBkYmU4%0ABjsARkkiGUhUVFBfQUNDRVBUX0xBTkdVQUdFBjsAVEkiLWRhMzlhM2VlNWU2%0AYjRiMGQzMjU1YmZlZjk1NjAxODkwYWZkODA3MDkGOwBG%0A--ee97a62095e7d42129
 tontent-Length: 354c8; path=/; HttpOnly
</code></pre>

<p>This is breaking my response parsing logic.<br>
I have seen this happening intermittently which is weird.</p>

<p>Is there a way to get <strong>""only""</strong> json response from curl output?<br>
I went through the curl documentation but could not see any thing/ or I could have missed it.<br>
Appreciate any help! Thx</p>
","<p>You are specifying the <code>-i</code> option:</p>

<blockquote>
  <p><strong>-i</strong>, --include </p>
  
  <p>(HTTP) <strong>Include the HTTP-header in the output</strong>. The HTTP-header includes things like server-name, date of the document, HTTP-version and more... </p>
</blockquote>

<p>Simply remove that option from your command line:</p>

<pre><code>response=$(curl -sb -H ""Accept: application/json"" ""http://host:8080/some/resource"")
</code></pre>
","24254142"
"Highlight bash/shell code in markdown","98944","","<p>How to highlight the bash/shell commands in markdown files?</p>

<hr>

<p>For example to highlight <code>js</code> I write:</p>

<pre class=""lang-none prettyprint-override""><code>```js
function () { return ""This code is highlighted as Javascript!""}
```
</code></pre>

<p>To highlight HTML code I use <code>```html</code>.</p>

<p>How can we highlight bash/shell commands?</p>
","<p>Depends on the markdown rendering engine and the markdown flavour. There is no standard for this. If you mean github flavoured markdown for example, <code>shell</code> should work fine. Aliases are <code>sh</code>, <code>bash</code> or <code>zsh</code>. You can find the list of available syntax lexers <a href=""https://github.com/github/linguist/blob/master/lib/linguist/languages.yml"">here</a></p>
","20304739"
"How can I put the current running linux process in background?","98781","","<p>I have a command that uploads files using git to a remote server from the Linux shell and it will take many hours to finish.</p>

<p>How can I put that running program in background?  So that I can still work on shell and that process also gets completed?</p>
","<p>CTRL+Z then use the command <code>bg</code> to put the process in the background.</p>

<p><strong>EDIT</strong></p>

<p>To start a process where you can even kill the terminal and it still carries on running</p>

<pre><code>nohup [command] [-args] &gt; [filename] 2&gt;&amp;1 &amp;
</code></pre>

<p>e.g.</p>

<pre><code>nohup /home/edheal/myprog -arg1 -arg2 &gt; /home/edheal/output.txt 2&gt;&amp;1 &amp;
</code></pre>

<p>To just ignore the output (not very wise) change the filename to <code>/dev/null</code></p>

<p>To get the error message set to a different file change the <code>&amp;1</code> to a filename.</p>
","13676865"
"Ascii/Hex convert in bash","98715","","<p>I'm now doing it this way:</p>

<pre><code>[root@~]# echo Aa|hexdump -v
0000000 6141 000a                              
0000003
[root@~]# echo -e ""\x41\x41\x41\x41""
AAAA
</code></pre>

<p>But it's not exactly behaving as I wanted,</p>

<p>the hex form of <code>Aa</code> should be <code>4161</code>,but the output is <code>6141 000a</code>,which seems not making sense.</p>

<p>and when performing hex to ascii,is there another utility so that I don't need the prefix <code>\x</code> ?</p>
","<p>The reason is because <code>hexdump</code> by default prints out 16-bit integers, not bytes. If your system has them, <code>hd</code> (or <code>hexdump -C</code>) or <code>xxd</code> will provide less surprising outputs - if not, <code>od -t x1</code> is a POSIX-standard way to get byte-by-byte hex output. You can use <code>od -t x1c</code> to show both the byte hex values and the corresponding letters.</p>

<p>If you have <code>xxd</code> (which ships with vim), you can use <code>xxd -r</code> to convert back from hex (from the same format <code>xxd</code> produces). If you just have plain hex (just the '4161', which is produced by <code>xxd -p</code>) you can use <code>xxd -r -p</code> to convert back.</p>
","5725125"
"Reading input files by line using read command in shell scripting skips last line","98690","","<p>I usually use the read command to read an input file to the shell script line by line. An example code such as the one below yields a wrong result if a new line isn't inserted at the end of the last line in the input file, blah.txt.</p>

<pre><code>#!/bin/sh

while read line
do
echo $line
done &lt;blah.txt
</code></pre>

<p>So if the input file reads something like -</p>

<pre><code>One 
Two
Three
Four
</code></pre>

<p>and I do not hit return after Four, the script fails to read the last line, and prints </p>

<pre><code>One
Two
Three
</code></pre>

<p>Now if I leave an extra blank line after Four, like,</p>

<pre><code>One 
Two
Three
Four
//blank line
</code></pre>

<p>the output prints all the lines, including Four. However, this is not the  case when I read a line using the <code>cat</code> command; all lines including the last get printed without me having to add an extra blank line at the end.</p>

<p>Anyone has ideas on why this happens? The scripts I create will mostly be run by others, so it isn't necessary they're going to add an extra blank line at the end of every input file.</p>

<p>I've been trying to figure this out for ages; I'd appreciate it if you have any solutions(of course, the <code>cat</code> command is one, but I'd like to know the reason behind read not working as well).</p>
","<p><code>read</code> reads until it finds a newline character or the end of file, and returns a non-zero exit code if it encounters an end-of-file. So it's quite possible for it to both read a line and return a non-zero exit code.</p>

<p>Consequently, the following code is not safe if the input might not be terminated by a newline:</p>

<pre><code>while read LINE; do
  # do something with LINE
done
</code></pre>

<p>because the body of the <code>while</code> won't be executed on the last line.</p>

<p>Technically speaking, a file not terminated with a newline is not a text file, and text tools may fail in odd ways on such a file. However, I'm always reluctant to fall back on that explanation.</p>

<p>One way to solve the problem is to test if what was read is non-empty (<code>-n</code>):</p>

<pre><code>while read -r LINE || [[ -n $LINE ]]; do
  # do something with LINE
done
</code></pre>

<p>Other solutions include using <code>mapfile</code> to read the file into an array, piping the file through some utility which is guaranteed to terminate the last line properly (<code>grep .</code>, for example, if you don't want to deal with blank lines), or doing the iterative processing with a tool like <code>awk</code> (which is usually my preference).</p>

<p>Note that <code>-r</code> is almost certainly needed in the <code>read</code> builtin; it causes <code>read</code> to not reinterpret <code>\</code>-sequences in the input.</p>
","17268185"
"Hexadecimal To Decimal in Shell Script","98068","","<p>Can someone help me in telling how to convert a hexadecimal number to decimal number in a shell script? E.g. I want to convert the hexadecimal number <code>bfca3000</code> to decimal using a shell script. I basically want the difference of two hexadecimal numbers. My code is:</p>

<pre><code>var3=`echo ""ibase=16; $var1"" | bc`
var4=`echo ""ibase=16; $var2"" | bc`
var5=$(($var4-$var3))               # [Line 48]
</code></pre>

<p>Upon executing ,I am getting the error as:</p>

<pre><code>Line 48: -: syntax error: operand expected (error token is ""-"")
</code></pre>
","<p>To convert hex2dec, these are many ways to do it in a shell or a script :</p>

<p>With <a href=""/questions/tagged/bash"" class=""post-tag"" title=""show questions tagged 'bash'"" rel=""tag"">bash</a>:</p>

<pre><code>$ echo $((16#FF))
255
</code></pre>

<p>with <a href=""/questions/tagged/bc"" class=""post-tag"" title=""show questions tagged 'bc'"" rel=""tag"">bc</a>:</p>

<pre><code>$ echo ""ibase=16; FF"" | bc
255
</code></pre>

<p>with <a href=""/questions/tagged/perl"" class=""post-tag"" title=""show questions tagged 'perl'"" rel=""tag"">perl</a>:</p>

<pre><code>$ perl -le 'print hex(""FF"");'
255
</code></pre>

<p>with <a href=""/questions/tagged/printf"" class=""post-tag"" title=""show questions tagged 'printf'"" rel=""tag"">printf</a> :</p>

<pre><code>$ printf ""%d\n"" 0xFF
255
</code></pre>

<p>with <a href=""/questions/tagged/python"" class=""post-tag"" title=""show questions tagged 'python'"" rel=""tag"">python</a>:</p>

<pre><code>$ python -c 'print(int(""FF"", 16))'
255
</code></pre>

<p>with <a href=""/questions/tagged/ruby"" class=""post-tag"" title=""show questions tagged 'ruby'"" rel=""tag"">ruby</a>:</p>

<pre><code>$ ruby&lt;&lt;EOF
p ""FF"".to_i(16).to_s(10)
EOF
""255""
</code></pre>

<p>with <a href=""/questions/tagged/node.js"" class=""post-tag"" title=""show questions tagged 'node.js'"" rel=""tag"">node.js</a>:</p>

<pre><code>$ nodejs &lt;&lt;&lt; ""console.log(parseInt('FF', 16))""
255
</code></pre>

<p>with <a href=""/questions/tagged/rhino"" class=""post-tag"" title=""show questions tagged 'rhino'"" rel=""tag"">rhino</a>:</p>

<pre><code>$ rhino&lt;&lt;EOF
print(parseInt('FF', 16))
EOF
...
255
</code></pre>

<p>with <a href=""/questions/tagged/groovy"" class=""post-tag"" title=""show questions tagged 'groovy'"" rel=""tag"">groovy</a>:</p>

<pre><code>$ groovy -e 'println Integer.parseInt(""FF"",16)'
255
</code></pre>
","13280173"
"What's the best way to use R scripts on the command line (terminal)?","97670","","<p>It's very convenient to have R scripts for doing simple plots from the command line.  However, running R from bash scripts is not convenient at all.  The ideal might be something like</p>

<pre><code>#!/path/to/R
...
</code></pre>

<p>or</p>

<pre><code>#!/usr/bin/env R
...
</code></pre>

<p>but I haven't been able to make either of those work.</p>

<p>Another option is keeping the scripts purely in R, e.g. <code>script.R</code>, and invoking it with <code>R --file=script.R</code> or similar.  However, occasionally a script will rely on obscure command line switches at which point part of the code exists outside the script.  Example: sneaking things into R from bash via a local .Rprofile, the desired switches are then everything <code>--vanilla</code> implies except <code>--no-init-file</code>.</p>

<p>Another option is a bash script to store the R flags and be painlessly executable, which then calls the R script.  The problem is that this means a single program just got split into two files which now have to be keep in sync, transferred to new machines together, etc.</p>

<p>The option I currently despise least is embedding the R in a bash script:</p>

<pre><code>#!/bin/bash
... # usage message to catch bad input without invoking R
... # any bash pre-processing of input
... # etc
R --random-flags &lt;&lt;RSCRIPT
# R code goes here
RSCRIPT
</code></pre>

<p>Everything's in a single file.  It's executable and easily handles arguments.  The problem is that combining bash and R like this pretty much eliminates the possibility of any IDE not failing on one or the other, and makes my heart hurt real bad.</p>

<p>Is there some better way I'm missing?</p>
","<p>Content of <code>script.r</code>:</p>

<pre><code>#!/usr/bin/Rscript

cat(""Hello"")
</code></pre>

<p>Invocation from command line:</p>

<pre><code>./script.r
</code></pre>
","969680"
"Unix Boolean Operators ( &&, -a, ||, -o )","97336","","<p>Can someone please explain the difference between the &amp;&amp;, ||, -a, and -o Unix operators?</p>

<p>What are the restrictions on the usage of both types?</p>

<p>Is it simply that the &amp;&amp; and || operators should be used when using flags in the condition?</p>

<p>As in:
[ “$1” = “yes” ] &amp;&amp; [ -r $2.txt ]</p>

<p>versus:
[ “$1” = “yes” -a $2 -lt 3 ]</p>
","<p><strong>Rule of thumb:</strong> Use <code>-a</code> and <code>-o</code> inside square brackets, <code>&amp;&amp;</code> and <code>||</code> outside.</p>

<p>It's important to understand the difference between <em>shell</em> syntax and the syntax of the <code>[</code> <em>command</em>. </p>

<ul>
<li><p><code>&amp;&amp;</code> and <code>||</code> are shell operators. They are used to combine the results of two commands. Because they are shell syntax, they have special syntactical significance and cannot be used as arguments to commands.</p></li>
<li><p><code>[</code> is not special syntax. It's actually a command with the name <code>[</code>, also known as <code>test</code>. Since <code>[</code> is just a regular command, it uses <code>-a</code> and <code>-o</code> for its <em>and</em> and <em>or</em> operators. It can't use <code>&amp;&amp;</code> and <code>||</code> because those are shell syntax that commands don't get to see.</p></li>
</ul>

<p>But wait! Bash has a fancier test syntax in the form of <code>[[ ]]</code>. If you use double square brackets, you get access to things like regexes and wildcards. You can also use shell operators like <code>&amp;&amp;</code>, <code>||</code>, <code>&lt;</code>, and <code>&gt;</code> freely inside the brackets because, unlike <code>[</code>, the double bracketed form <em>is</em> special shell syntax. Bash parses <code>[[</code> itself so you can write things like <code>[[ $foo == 5 &amp;&amp; $bar == 6 ]]</code>.</p>
","20449742"
"count (non-blank) lines-of-code in bash","96837","","<p>In Bash, how do I count the number of non-blank lines of code in a project?</p>
","<pre><code>cat foo.c | sed '/^\s*$/d' | wc -l
</code></pre>

<p>And if you consider comments blank lines:</p>

<pre><code>cat foo.pl | sed '/^\s*#/d;/^\s*$/d' | wc -l
</code></pre>

<p>Although, that's language dependent. </p>
","114836"
"Command not found when using sudo","96794","","<p>I have a script called <code>foo.sh</code> in my home folder. </p>

<p>When I navigate to this folder, and enter <code>./foo.sh</code>, I get </p>

<p><code>-bash: ./foo.sh: Permission denied</code>. </p>

<p>When I use <code>sudo ./foo.sh</code>, I get </p>

<p><code>sudo: foo.sh: command not found</code>.</p>

<p>Why does this happen and how I can fix it? </p>
","<p><strong>Permission denied</strong></p>

<p>In order to run a script the file must have <strong>an executable permission bit set</strong>.</p>

<p>In order to fully understand Linux <a href=""http://www.gnu.org/software/coreutils/manual/html_node/File-permissions.html#File-permissions"">file permissions</a> you can study the documentation for the <code>chmod</code> command. <a href=""http://www.gnu.org/software/coreutils/manual/html_node/chmod-invocation.html"">chmod</a>, an abbreviation of <em>change mode</em>, is the command that is used to change the permission settings of a file.</p>

<p>To read the chmod documentation for your local system , run <code>man chmod</code> or <code>info chmod</code> from the command line. Once read and understood you should be able to understand the output of running ...</p>

<pre><code>ls -l foo.sh
</code></pre>

<p>... which will list the READ, WRITE and EXECUTE permissions for the file owner, the group owner and everyone else who is not the file owner or a member of the group to which the file belongs (that last permission group is sometimes referred to as ""world"" or ""other"")</p>

<p>Here's a summary of how to troubleshoot the <strong>Permission Denied error</strong> in your case.</p>

<pre><code>$ ls -l foo.sh                    # Check file permissions of foo
-rw-r--r-- 1 rkielty users 0 2012-10-21 14:47 foo.sh 
    ^^^ 
 ^^^ | ^^^   ^^^^^^^ ^^^^^
  |  |  |       |       | 
Owner| World    |       |
     |          |    Name of
   Group        |     Group
             Name of 
              Owner 
</code></pre>

<p>Owner has read and write access rw but the - indicates that the executable permission is missing</p>

<p>The <code>chmod</code> command fixes that. (Group and other only have read permission set on the file, they cannot write to it or execute it) </p>

<pre><code>$ chmod +x foo.sh               # The owner can set the executable permission on foo.sh
$ ls -l foo.sh                  # Now we see an x after the rw 
-rwxr-xr-x 1 rkielty users 0 2012-10-21 14:47 foo.sh
   ^  ^  ^
</code></pre>

<p>foo.sh is now executable as far as Linux is concerned.</p>

<p><strong>Using sudo results in Command not found</strong></p>

<p>When you run a command using <strong>sudo</strong> you are effectively running it as the superuser or root. </p>

<p>The reason that the root user is not finding your command is likely that the <code>PATH</code> environment variable for root does not include the <em>directory where <code>foo.sh</code> is located</em>. Hence the command is not found. </p>

<p>The PATH environment variable contains a list of directories which are searched for commands. Each user sets their own PATH variable according to their needs. 
To see what it is set to run </p>

<pre><code>env | grep ^PATH
</code></pre>

<p>Here's some sample output of running the above <code>env</code> command first as an ordinary user and then as the root user using sudo </p>

<pre><code>rkielty@rkielty-laptop:~$ env | grep ^PATH
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

rkielty@rkielty-laptop:~$ sudo env | grep ^PATH
[sudo] password for rkielty: 
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin
</code></pre>

<p>Note that, although similar, in this case the directories contained in the PATH the non-privileged user (rkielty) and the super user are <em>not the same</em>.</p>

<p>The directory where <code>foo.sh</code> resides is not present in the PATH variable of the root user, hence the <em>command not found</em> error.</p>
","12998638"
"fork and exec in bash","96712","","<p>How do I implement fork and exec in bash?</p>

<p>Let us suppose script as</p>

<pre><code>echo ""Script starts""

function_to_fork(){
sleep 5
echo ""Hello""
}

echo ""Script ends""
</code></pre>

<p>Basically I want that function to be called as new process like in C we use fork and exec calls..</p>

<p>From the script it is expected that the parent script will end and then after 5 seconds, ""Hello"" is printed.</p>
","<p>Use the ampersand just like you would from the shell.</p>

<pre><code>#!/usr/bin/bash
function_to_fork() {
   ...
}

function_to_fork &amp;
# ... execution continues in parent process ...
</code></pre>
","3096581"
"bash: Bad Substitution","96534","","<pre><code>#!/bin/bash

jobname=""job_201312161447_0003""
jobname_pre=${jobname:0:16}
jobname_post=${jobname:17}
</code></pre>

<p>This bash script gives me <em>Bad substitution</em> error on Ubuntu. Any help will be highly appreciated. </p>
","<p>The default shell (<code>/bin/sh</code>) under Ubuntu points to <code>dash</code>, not <code>bash</code>.</p>

<pre><code>me@pc:~$ readlink -f $(which sh)
/bin/dash
</code></pre>

<p>So if you <code>chmod +x your_script_file.sh</code> and then run it with <code>./your_script_file.sh</code>, or if you run it with <code>bash your_script_file.sh</code>, it should work fine.</p>

<p>Running it with <code>sh your_script_file.sh</code> will not work because the hashbang line will be ignored and the script will be interpreted by <code>dash</code>, which does not support that string substitution syntax.</p>
","20616103"
"Get yesterday's date in bash on Linux, DST-safe","96508","","<p>I have a shell script that runs on Linux and uses this call to get yesterday's date in <code>YYYY-MM-DD</code> format:</p>

<pre><code>date -d ""1 day ago"" '+%Y-%m-%d'
</code></pre>

<p>It works most of the time, but when the script ran yesterday morning at <code>2013-03-11 0:35 CDT</code> it returned <code>""2013-03-09""</code> instead of <code>""2013-03-10""</code>.</p>

<p>Presumably daylight saving time (which started yesterday) is to blame. I'm guessing the way <code>""1 day ago""</code> is implemented it subtracted 24 hours, and 24 hours before <code>2013-03-11 0:35 CDT</code> was <code>2013-03-09 23:35 CST</code>, which led to the result of <code>""2013-03-09""</code>.</p>

<p>So what's a good DST-safe way to get yesterday's date in bash on Linux?</p>
","<p>I think this should work, irrespective of how often and when you run it ... </p>

<pre><code>date -d ""yesterday 13:00"" '+%Y-%m-%d'
</code></pre>
","15374813"
"Number of processors/cores in command line","96466","","<p>I am running the following command to get the number of processors/cores in Linux:</p>

<pre><code>cat /proc/cpuinfo | grep processor | wc -l
</code></pre>

<p>It works but it does not look elegant. How would you suggest improve it ? </p>
","<p><code>nproc</code> is what you are looking for.</p>

<p>More here : <a href=""http://www.cyberciti.biz/faq/linux-get-number-of-cpus-core-command/"" rel=""noreferrer"">http://www.cyberciti.biz/faq/linux-get-number-of-cpus-core-command/</a></p>
","19619598"
"How to check if running as root in a bash script","96314","","<p>I'm writing a script that requires root level permissions, and I want to make it so that if the script is not run as root, it simply echoes ""Please run as root."" and exits.</p>

<p>Here's some pseudocode for what I'm looking for:</p>

<pre><code>if (whoami != root)
  then echo ""Please run as root""

  else (do stuff)
fi

exit
</code></pre>

<p>How could I best (cleanly and securely) accomplish this? Thanks!</p>

<p>Ah, just to clarify: the (do stuff) part would involve running commands that in-and-of themselves require root. So running it as a normal user would just come up with an error. This is just meant to cleanly run a script that requires root commands, without using sudo inside the script, I'm just looking for some syntactic sugar. </p>
","<p>A few answers have been given, but it appears that the best method is to use is:</p>

<ul>
<li><code>id -u</code> </li>
<li>If run as root, will return an id of 0.</li>
</ul>

<p>This appears to be more reliable than the other methods, and it seems that it return an id of 0 even if the script is run through <code>sudo</code>. </p>
","28776100"
"How to ssh from within a bash script?","95897","","<p>I am trying to create an ssh connection and do some things on the remote server from within the script.</p>

<p>However the terminal prompts me for a password, then opens the connection in the terminal window instead of the script. The commands don't get executed until I exit the connection.</p>

<p>How can I ssh from within a bash script?</p>
","<ol>
<li><p>If you want the password prompt to go away then use key based authentication (<a href=""http://www.cyberciti.biz/tips/ssh-public-key-based-authentication-how-to.html"" rel=""noreferrer"">described here</a>).</p></li>
<li><p>To run commands remotely over ssh you have to give them as an argument to ssh, like the following:</p></li>
</ol>

<blockquote>
  <p>root@host:~ # ssh root@www 'ps -ef | grep apache | grep -v grep | wc -l'</p>
</blockquote>
","1895195"
"Running a command in a new Mac OS X Terminal window","95819","","<p>I've been trying to figure out how to run a bash command in a new Max OS X Terminal.app window. As, an example, here's how I would run my command in a new bash process:</p>

<pre><code>bash -c ""my command here""
</code></pre>

<p>But this reuses the existing terminal window instead of creating a new one. I want something like:</p>

<pre><code>Terminal.app -c ""my command here""
</code></pre>

<p>But of course this doesn't work. I am aware of the ""open -a Terminal.app"" command, but I don't see how to forward arguments to the terminal, or even if I did what arguments to use.</p>

<p>Thanks!</p>
","<p>one way I can think to do it off the top of my head is to create a .command file and run it like so:</p>

<pre><code>echo echo hello &gt; sayhi.command; chmod +x sayhi.command; open sayhi.command
</code></pre>

<p>or use applescript:</p>

<pre><code>osascript -e 'tell application ""Terminal"" to do script ""echo hello""'
</code></pre>

<p>although you'll either have to escape a lot of double quotes or not be able to use single quotes</p>
","989357"
"How can I remove all text after a character in bash?","95583","","<p>How can I remove all text after a character, in this case a colon ("":""), in bash? Can I remove the colon, too? I have no idea how to. </p>
","<p>An example might have been useful, but if I understood you correctly, this would work:</p>

<pre><code>cut -f1 -d"":""
</code></pre>

<p>This will convert ""hello: world"" into ""hello"". </p>
","4168417"
"How to use shell commands in Makefile","95580","","<p>I'm trying to use the result of <code>ls</code> in other commands (e.g. echo, rsync):</p>

<pre><code>all:
    &lt;Building, creating some .tgz files - removed for clarity&gt;
    FILES = $(shell ls)
    echo $(FILES)
</code></pre>

<p>But I get:</p>

<pre><code>make
FILES = Makefile file1.tgz file2.tgz file3.tgz
make: FILES: No such file or directory
make: *** [all] Error 1
</code></pre>

<p>I've tried using <code>echo $$FILES</code>, <code>echo ${FILES}</code> and <code>echo $(FILES)</code>, with no luck.</p>
","<p>With:</p>

<pre><code>FILES = $(shell ls)
</code></pre>

<p>indented underneath <code>all</code> like that, it's a build command.  So this expands <code>$(shell ls)</code>, then tries to run the command <code>FILES ...</code>.</p>

<p>If <code>FILES</code> is supposed to be a <code>make</code> variable, these variables need to be assigned outside the recipe portion, e.g.:</p>

<pre><code>FILES = $(shell ls)
all:
        echo $(FILES)
</code></pre>

<p>Of course, that means that <code>FILES</code> will be set to ""output from <code>ls</code>"" <em>before</em> running any of the commands that create the .tgz files.  (Though as <a href=""https://stackoverflow.com/a/10081105/1256452"">Kaz notes</a> the variable is re-expanded each time, so eventually it will include the .tgz files; some make variants have <code>FILES := ...</code> to avoid this, for efficiency and/or correctness.<sup>1</sup>)</p>

<p>If <code>FILES</code> is supposed to be a shell variable, you can set it but you need to do it in shell-ese, with no spaces, and quoted:</p>

<pre><code>all:
        FILES=""$(shell ls)""
</code></pre>

<p>However, each line is run by a separate shell, so this variable will not survive to the next line, so you must then use it immediately:</p>

<pre><code>        FILES=""$(shell ls)""; echo $$FILES
</code></pre>

<p>This is all a bit silly since the shell will expand <code>*</code> (and other shell glob expressions) for you in the first place, so you can just:</p>

<pre><code>        echo *
</code></pre>

<p>as your shell command.</p>

<p>Finally, as a general rule (not really applicable to this example): as <a href=""https://stackoverflow.com/users/1691599/esperanto"">esperanto</a> notes in comments, using the output from <code>ls</code> is not completely reliable (some details depend on file names and sometimes even the version of <code>ls</code>; some versions of <code>ls</code> attempt to sanitize output in some cases).  Thus, as <a href=""https://stackoverflow.com/users/96588/l0b0"">l0b0</a> and <a href=""https://stackoverflow.com/users/109744/idelic"">idelic</a> note, if you're using GNU make you can use <code>$(wildcard)</code> and <code>$(subst ...)</code> to accomplish everything inside <code>make</code> itself (avoiding any ""weird characters in file name"" issues).  (In <code>sh</code> scripts, including the recipe portion of makefiles, another method is to use <code>find ... -print0 | xargs -0</code> to avoid tripping over blanks, newlines, control characters, and so on.)</p>

<hr>

<p><sup>1</sup><a href=""https://www.gnu.org/software/make/manual/html_node/Flavors.html#Flavors"" rel=""noreferrer"">The GNU Make documentation notes further that POSIX make added <code>::=</code> assignment in 2012</a>.  I have not found a quick reference link to a POSIX document for this, nor do I know off-hand which <code>make</code> variants support <code>::=</code> assignment, although GNU make does today, with the same meaning as <code>:=</code>, i.e., do the assignment right now with expansion.</p>

<p>Note that <code>VAR := $(shell command args...)</code> can also be spelled <code>VAR != command args...</code> in several <code>make</code> variants, including all modern GNU and BSD variants as far as I know.  These other variants do not have <code>$(shell)</code> so using <code>VAR != command args...</code> is superior in both being shorter <em>and</em> working in more variants.</p>
","10024479"
"How to find the difference in days between two dates?","95002","","<p>A=""2002-20-10""<br>
B=""2003-22-11"" </p>

<p>How to find the difference in days between two dates?</p>
","<p>If you have GNU <code>date</code>, it allows to print the representation of an arbitrary date (<code>-d</code> option).
In this case convert the dates to seconds since EPOCH, subtract and divide by 24*3600.</p>

<p>Or you need a portable way?</p>
","4946875"
"Running bash script from within python","94910","","<p>I have a problem with the following code:</p>

<p><strong>callBash.py:</strong></p>

<pre><code>import subprocess
print ""start""
subprocess.call(""sleep.sh"")
print ""end""
</code></pre>

<p><strong>sleep.sh:</strong></p>

<pre><code>sleep 10
</code></pre>

<p>I want the ""end"" to be printed after 10s. (I know that this is a dumb example, I could simply sleep within python, but this simple sleep.sh file was just as a test)</p>
","<p>Making sleep.sh executable and adding <code>shell=True</code> to the parameter list (as suggested in previous answers) works ok. Depending on the search path, you may also need to add <code>./</code> or some other appropriate path.  (Ie, change <code>""sleep.sh""</code> to <code>""./sleep.sh""</code>.)</p>

<p>The <code>shell=True</code> parameter is not needed (under a Posix system like Linux) if the first line of the bash script is a path to a shell; for example, <code>#!/bin/bash</code>.</p>
","13745968"
"Trying to embed newline in a variable in bash","94882","","<p>I have</p>

<pre><code>var=""a b c""
for i in $var
do
   p=`echo -e $p'\n'$i`
done
echo $p
</code></pre>

<p>I want last echo to print</p>

<pre><code>a
b
c
</code></pre>

<p>Notice that I want the variable p to contain newlines. How do I do that?</p>
","<h1>Summary</h1>

<ol>
<li><p>Inserting <code>\n</code></p>

<pre><code>p=""${var1}\n${var2}""
echo -e ""${p}""
</code></pre></li>
<li><p>Inserting a new line in the source code</p>

<pre><code>p=""${var1}
${var2}""
echo ""${p}""
</code></pre></li>
<li><p>Using <code>$'\n'</code> (only <a href=""/questions/tagged/bash"" class=""post-tag"" title=""show questions tagged &#39;bash&#39;"" rel=""tag"">bash</a> and <a href=""/questions/tagged/zsh"" class=""post-tag"" title=""show questions tagged &#39;zsh&#39;"" rel=""tag"">zsh</a>)</p>

<pre><code>p=""${var1}""$'\n'""${var2}""
echo ""${p}""
</code></pre></li>
</ol>

<h1>Details</h1>

<h2>1. Inserting <code>\n</code></h2>

<pre><code>p=""${var1}\n${var2}""
echo -e ""${p}""
</code></pre>

<p><code>echo -e</code> interprets the two characters <code>""\n""</code> as a new line.</p>

<pre><code>var=""a b c""
first_loop=true
for i in $var
do
   p=""$p\n$i""            # Append
   unset first_loop
done
echo -e ""$p""             # Use -e
</code></pre>

<p>Avoid extra leading newline</p>

<pre><code>var=""a b c""
first_loop=1
for i in $var
do
   (( $first_loop )) &amp;&amp;  # ""((...))"" is bash specific
   p=""$i""            ||  # First -&gt; Set
   p=""$p\n$i""            # After -&gt; Append
   unset first_loop
done
echo -e ""$p""             # Use -e
</code></pre>

<p>Using a function</p>

<pre><code>embed_newline()
{
   local p=""$1""
   shift
   for i in ""$@""
   do
      p=""$p\n$i""         # Append
   done
   echo -e ""$p""          # Use -e
}

var=""a b c""
p=$( embed_newline $var )  # Do not use double quotes ""$var""
echo ""$p""
</code></pre>

<h2>2. Inserting a new line in the source code</h2>

<pre><code>var=""a b c""
for i in $var
do
   p=""$p
$i""       # New line directly in the source code
done
echo ""$p"" # Double quotes required
          # But -e not required
</code></pre>

<p>Avoid extra leading newline</p>

<pre><code>var=""a b c""
first_loop=1
for i in $var
do
   (( $first_loop )) &amp;&amp;  # ""((...))"" is bash specific
   p=""$i""            ||  # First -&gt; Set
   p=""$p
$i""                      # After -&gt; Append
   unset first_loop
done
echo ""$p""                # No need -e
</code></pre>

<p>Using a function</p>

<pre><code>embed_newline()
{
   local p=""$1""
   shift
   for i in ""$@""
   do
      p=""$p
$i""                      # Append
   done
   echo ""$p""             # No need -e
}

var=""a b c""
p=$( embed_newline $var )  # Do not use double quotes ""$var""
echo ""$p""
</code></pre>

<h2>3. Using <code>$'\n'</code> (less portable)</h2>

<p><a href=""/questions/tagged/bash"" class=""post-tag"" title=""show questions tagged &#39;bash&#39;"" rel=""tag"">bash</a> and <a href=""/questions/tagged/zsh"" class=""post-tag"" title=""show questions tagged &#39;zsh&#39;"" rel=""tag"">zsh</a> interprets <code>$'\n'</code> as a new line.</p>

<pre><code>var=""a b c""
for i in $var
do
   p=""$p""$'\n'""$i""
done
echo ""$p"" # Double quotes required
          # But -e not required
</code></pre>

<p>Avoid extra leading newline</p>

<pre><code>var=""a b c""
first_loop=1
for i in $var
do
   (( $first_loop )) &amp;&amp;  # ""((...))"" is bash specific
   p=""$i""            ||  # First -&gt; Set
   p=""$p""$'\n'""$i""       # After -&gt; Append
   unset first_loop
done
echo ""$p""                # No need -e
</code></pre>

<p>Using a function</p>

<pre><code>embed_newline()
{
   local p=""$1""
   shift
   for i in ""$@""
   do
      p=""$p""$'\n'""$i""    # Append
   done
   echo ""$p""             # No need -e
}

var=""a b c""
p=$( embed_newline $var )  # Do not use double quotes ""$var""
echo ""$p""
</code></pre>

<h2>Output is the same for all</h2>

<pre><code>a
b
c
</code></pre>

<p>Special thanks to contributors of this answer: <a href=""https://stackoverflow.com/users/1170023"">kevinf</a>, <a href=""https://stackoverflow.com/users/89817"">Gordon Davisson</a>, <a href=""https://stackoverflow.com/users/96588"">l0b0</a>, <a href=""https://stackoverflow.com/a/9139569/938111"">Dolda2000</a> and <a href=""https://stackoverflow.com/a/9140181/938111"">tripleee</a>.</p>

<hr>

<p>EDIT</p>

<ul>
<li>See also <a href=""https://stackoverflow.com/a/32802422/938111"">BinaryZebra's answer</a> providing many details.</li>
<li><a href=""https://stackoverflow.com/a/9139537/938111"">Abhijeet Rastogi's answer</a> and <a href=""https://stackoverflow.com/a/30298374/938111"">Dimitry's answer</a> explain how to avoid the <code>for</code> loop in above <a href=""/questions/tagged/bash"" class=""post-tag"" title=""show questions tagged &#39;bash&#39;"" rel=""tag"">bash</a> snippets.</li>
</ul>
","9139891"
"bash - automatically capture output of last executed command into a variable","94660","","<p>I'd like to be able to use the result of the last executed command in a subsequent command. For example,</p>

<pre><code>$ find . -name foo.txt
./home/user/some/directory/foo.txt
</code></pre>

<p>Now let's say I want to be able to open the file in an editor, or delete it, or do something else with it, e.g.</p>

<pre><code>mv &lt;some-variable-that-contains-the-result&gt; /some/new/location
</code></pre>

<p>How can I do it? Maybe using some bash variable?</p>

<p><strong>Update:</strong></p>

<p>To clarify, I don't want to assign things manually. What I'm after is something like built-in bash variables, e.g.</p>

<pre><code>ls /tmp
cd $_
</code></pre>

<p><code>$_</code> holds the last argument of the previous command. I want something similar, but with the output of the last command.</p>

<p><strong>Final update:</strong></p>

<p>Seth's answer has worked quite well. Couple of things to bear in mind:</p>

<ul>
<li>don't forget to <code>touch /tmp/x</code> when trying the solution for the very first time</li>
<li>the result will only be stored if last command's exit code was successful</li>
</ul>
","<p>This is a really hacky solution, but it seems to mostly work some of the time.  During testing, I noted it sometimes didn't work very well when getting a <kbd>^C</kbd> on the command line, though I did tweak it a bit to behave a bit better.  </p>

<p>This hack is an interactive mode hack only, and I am pretty confident that I would not recommend it to anyone.  Background commands are likely to cause even less defined behavior than normal.  The other answers are a better way of programmatically getting at results.</p>

<hr>

<p>That being said, here is the ""solution"":</p>



<pre class=""lang-bash prettyprint-override""><code>PROMPT_COMMAND='LAST=""`cat /tmp/x`""; exec &gt;/dev/tty; exec &gt; &gt;(tee /tmp/x)'
</code></pre>

<p>Set this bash environmental variable and issues commands as desired.  <code>$LAST</code> will usually have the output you are looking for:</p>

<pre class=""lang-bash prettyprint-override""><code>startide seth&gt; fortune
Courtship to marriage, as a very witty prologue to a very dull play.
                -- William Congreve
startide seth&gt; echo ""$LAST""
Courtship to marriage, as a very witty prologue to a very dull play.
                -- William Congreve
</code></pre>
","6052267"
"bash string equality","94606","","<p>In <code>bash</code>, what's the difference, if any, between the equal and double equal test operators?</p>

<pre><code>[[ ""a"" = ""a"" ]] &amp;&amp; echo equal || echo not-equal
[[ ""a"" == ""a"" ]] &amp;&amp; echo equal || echo not-equal
[[ ""a"" = ""b"" ]] &amp;&amp; echo equal || echo not-equal
[[ ""a"" == ""b"" ]] &amp;&amp; echo equal || echo not-equal
</code></pre>

<p>results in:</p>

<pre><code>equal
equal
not-equal
not-equal
</code></pre>
","<p>There's no difference, <code>==</code> is a synonym for <code>=</code> (for the C/C++ people, I assume). See <a href=""http://tldp.org/LDP/abs/html/comparison-ops.html"" rel=""noreferrer"">here</a>, for example.</p>

<p>You could double-check just to be <em>really</em> sure or just for your interest by looking at the <a href=""http://ftp.gnu.org/gnu/bash/"" rel=""noreferrer"">bash source code</a>, should be somewhere in the parsing code there, but I couldn't find it straightaway.</p>
","3265826"
"How can I ssh directly to a particular directory?","94397","","<p>I often have to login to one of several servers and go to one of several directories on those machines.  Currently I do something of this sort:</p>

<pre>
localhost ~]$ ssh somehost

Welcome to somehost!

somehost ~]$ cd /some/directory/somewhere/named/Foo
somehost Foo]$ 
</pre>

<p>I have scripts that can determine which host and which directory I need to get into but I cannot figure out a way to do this:</p>

<pre>
localhost ~]$ go_to_dir Foo

Welcome to somehost!

somehost Foo]$
</pre>

<p>Is there an easy, clever or any way to do this?</p>
","<p>You can do the following:</p>

<pre><code>ssh -t xxx.xxx.xxx.xxx ""cd /directory_wanted ; bash""
</code></pre>

<p>This way, you will get a shell right on the directory_wanted.</p>

<hr>

<p>Explanation</p>

<pre><code>  -t      Force pseudo-terminal allocation.  This can be used to execute arbitrary screen-based programs on a remote machine, which can be very useful, e.g. when implementing menu services.
          Multiple -t options force tty allocation, even if ssh has no local tty.
</code></pre>

<ul>
<li>If you don't use <code>-t</code> then no prompt will appear. </li>
<li>If you don't add <code>; bash</code> then the connection will get closed and return control to your local machine</li>
</ul>
","626574"
"How to create a bash script to check the SSH connection?","93948","","<p>I am in the process of creating a bash script that would log into the remote machines and create private and public keys.</p>

<p>My problem is that the remote machines are not very reliable, and they are not always up. I need a bash script that would check if the SSH connection is up. Before actually creating the keys for future use.</p>
","<p>You can check this with the return-value ssh gives you:</p>

<pre><code>$ ssh -q user@downhost exit
$ echo $?
255

$ ssh -q user@uphost exit
$ echo $?
0
</code></pre>

<p>EDIT: Another approach would be to use nmap (you won't need to have keys or login-stuff):</p>

<pre><code>$ a=`nmap uphost -PN -p ssh | grep open`
$ b=`nmap downhost -PN -p ssh | grep open`

$ echo $a
22/tcp open ssh
$ echo $b
(empty string)
</code></pre>

<p>But you'll have to grep the message (nmap does not use the return-value to show if a port was filtered, closed or open).</p>

<p>EDIT2:</p>

<p>If you're interested in the actual state of the ssh-port, you can substitute <code>grep open</code> with <code>egrep 'open|closed|filtered'</code>:</p>

<pre><code>$ nmap host -PN -p ssh | egrep 'open|closed|filtered'
</code></pre>

<p>Just to be complete.</p>
","1405340"
"Multi-dimensional arrays in Bash","93927","","<p>I am planning a script to manage some pieces of my Linux systems and am at the point of deciding if I want to use <a href=""/questions/tagged/bash"" class=""post-tag"" title=""show questions tagged &#39;bash&#39;"" rel=""tag"">bash</a> or <a href=""/questions/tagged/python"" class=""post-tag"" title=""show questions tagged &#39;python&#39;"" rel=""tag"">python</a>.</p>

<p>I would prefer to do this as a Bash script simply because the commands are easier, but the real deciding factor is configuration.  I need to be able to store a multi-dimensional array in the configuration file to tell the script what to do with itself.  Storing simple key=value pairs in config files is easy enough with bash, but the only way I can think of to do a multi-dimensional array is a two layer parsing engine, something like</p>

<pre><code>array=&amp;d1|v1;v2;v3&amp;d2|v1;v2;v3
</code></pre>

<p>but the marshall/unmarshall code could get to be a bear and its far from user friendly for the next poor sap that has to administer this.  If i can't do this easily in bash i will simply write the configs to an xml file and write the script in python.  </p>

<p>Is there an easy way to do this in bash?</p>

<p>thanks everyone.</p>
","<p>Bash does not support multidimensional arrays, nor hashes, and it seems that you want a hash that values are arrays. This solution is not very beautiful, a solution with an xml file should be better :</p>

<pre><code>array=('d1=(v1 v2 v3)' 'd2=(v1 v2 v3)')
for elt in ""${array[@]}"";do eval $elt;done
echo ""d1 ${#d1[@]} ${d1[@]}""
echo ""d2 ${#d2[@]} ${d2[@]}""
</code></pre>
","11234169"
"How to get the last character of a string in a shell?","93857","","<p>I have written the following lines to get the last character of a string:</p>

<pre><code>str=$1
i=$((${#str}-1))
echo ${str:$i:1}
</code></pre>

<p>It works for <code>abcd/</code>:</p>

<pre><code>$ bash last_ch.sh abcd/
/
</code></pre>

<p>It <strong>does not work for <code>abcd*</code></strong>:</p>

<pre><code>$ bash last_ch.sh abcd*
array.sh assign.sh date.sh dict.sh full_path.sh last_ch.sh
</code></pre>

<p>It <strong>lists the files in the current folder.</strong>.</p>
","<p>That's one of the reasons why you need to quote your variables:</p>

<pre><code>echo ""${str:$i:1}""
</code></pre>

<p>Otherwise, bash expands the variable and in this case does globbing before printing out. It is also better to quote the parameter to the script (in case you have a matching filename):</p>

<pre><code>sh lash_ch.sh 'abcde*'
</code></pre>

<p>Also see the order of expansions in the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Shell-Expansions"">bash reference manual</a>. Variables are expanded before the filename expansion.</p>
","17542946"
"How does one output bold text in Bash?","93688","","<p>I'm writing a Bash script that prints some text to the screen:</p>

<pre><code>echo ""Some Text""
</code></pre>

<p>Can I format the text? I would like to make it bold.</p>
","<p>The most compatible way of doing this is using <code>tput</code> to discover the right sequences to send to the terminal:</p>

<pre><code>bold=$(tput bold)
normal=$(tput sgr0)
</code></pre>

<p>then you can use the variables <code>$bold</code> and <code>$normal</code> to format things:</p>

<pre><code>echo ""this is ${bold}bold${normal} but this isn't""
</code></pre>

<p>gives</p>

<blockquote>
  <p>this is <strong>bold</strong> but this isn't</p>
</blockquote>
","2924755"
"How to provide password to a command that prompts for one in bash?","93668","","<p>I'm writing a UNIX shell function that is going to execute a command that will prompt the user for a password. I want to hard-code the password into the script and provide it to the command. I've tried piping the password into the command like this:  </p>

<pre><code>function() {
    echo ""password"" | command
}
</code></pre>

<p>This may not work for some commands as the command may flush the input buffer before prompting for the password.</p>

<p>I've also tried redirecting standard input to a file containing the password like this, but that doesn't work either:</p>

<pre><code>function() {
    echo ""password"" &gt; pass.tmp
    command &lt; pass.tmp
    rm pass.tmp
}
</code></pre>

<p>I know that some commands allow for the password to be provided as an argument, but I'd rather go through standard input.</p>

<p>I'm looking for a quick and dirty way of piping a password into a command in bash.</p>
","<p>Take a look at <code>autoexpect</code> (decent tutorial <a href=""https://web.archive.org/web/20160404120518/http://www.linuxjournal.com:80/article/3065"" rel=""nofollow noreferrer""><strong>HERE</strong></a>). It's about as quick-and-dirty as you can get without resorting to trickery.</p>
","4858028"
"How to remove last n characters from a string in Bash?","93629","","<p>I have a variable <code>var</code> in a Bash script holding a string, like:</p>

<pre><code>echo $var
""some string.rtf""
</code></pre>

<p>I want to remove the last 4 characters of this string and assign the result to a new variable <code>var2</code>, so that</p>

<pre><code>echo $var2
""some string""
</code></pre>

<p>How can I do this?</p>
","<p>You can do like this:</p>

<pre><code>#!/bin/bash

v=""some string.rtf""

v2=${v::-4}

echo ""$v --&gt; $v2""
</code></pre>
","27658733"
"xargs with multiple commands as argument","93593","","<pre><code>cat a.txt | xargs -I % echo %
</code></pre>

<p>In the example above xargs takes <code>echo %</code> as the command argument. But in some cases, I need multiple commands to process instead of one, for example:</p>

<pre><code>cat a.txt | xargs -I % {command1; command2; ... }
</code></pre>

<p>But xargs doesn't accept this form. One solution I know is that I can define a function to wrap the commands, but it's not pipeline, I don't prefer it. Is there other solution?</p>
","<pre><code>cat a.txt | xargs -I % sh -c 'command1; command2; ...'
</code></pre>

<p>Note that this is a <a href=""http://www.catb.org/jargon/html/U/UUOC.html"" rel=""noreferrer"">Useless Use Of cat</a>.  I'd write it as:</p>

<pre><code>&lt; a.txt xargs -I % sh -c 'command1; command2; ...'
</code></pre>

<p>(Yes, the redirection can be at the beginning of the command.)</p>

<p>Presumably <code>command1</code> and/or <code>command2</code> will contain one or more <code>%</code> characters; otherwise there wouldn't be much point to the <code>-I %</code> option to <code>xargs</code>.</p>
","6958957"
"How to specify a multi-line shell variable?","93494","","<p>I have written a query:</p>

<pre><code>function print_ui_hosts
{
local sql = ""select .........""
print_sql ""$ sql""
}
</code></pre>

<p>local sql - a very long string. Query is not formatted.
How can I split a string into multiple lines?</p>
","<p>Use <code>read</code> with a heredoc as shown below:</p>

<pre><code>read -d '' sql &lt;&lt; EOF
select c1, c2 from foo
where c1='something'
EOF

echo ""$sql""
</code></pre>
","15429426"
"How to make a GUI for bash scripts?","93412","","<p>I want to make some graphical dialogs for my script but don't know how.
I hear something about GTK-Server or something like that.
If someone knows how to link Bash with tcl/tk I also be satisfied.</p>

<p>Please do not post something like ""change to C++"" because my project
must be a script in Bash; there are no other options.</p>

<p>Any ideas?</p>

<p><strong>EDIT:</strong> 
Thanks for answers but I don't want ""graphics"" as in colors in the console, but graphical windows which I can move, minimize etc.
I will test <code>xmessage</code>, but I don't think that will be what I am searching for.</p>

<p><strong>EDIT 2:</strong>
I don't want make a simple dialog like yes/no, but some interface like progress bars and buttons, something like a game.</p>
","<p>Before actually using GUI dialogues, consider using console prompts. Quite often you can get away with simple ""y/n?"" prompts, which in bash you achieve via the <a href=""http://www.manpagez.com/man/2/read/"" rel=""noreferrer""><code>read</code> command</a>..</p>

<pre><code>read -p ""Do something? "";
if [ $REPLY == ""y"" ]; then
    echo yay;
fi
</code></pre>

<p>If console prompt's just won't cut it, <a href=""http://freshmeat.net/projects/zenity"" rel=""noreferrer"">Zenity</a> is really <a href=""http://library.gnome.org/users/zenity/stable/"" rel=""noreferrer"">easy to use</a>, for example:</p>

<pre><code>      zenity --error --text=""Testing...""
      zenity --question --text=""Continue?""
</code></pre>

<p>This only works on Linux/Gnome (or rather, it'll only be installed by default on such systems). The <code>read</code> method will work on pretty much any platform (including headless machines, or via SSH)</p>

<p>If you need anything more complex than what read or Zenity provides, ""change to C++"" is really the best method (although I'd recommend Python/Ruby over C++ for such shell-script-replacement tasks)</p>

<blockquote>
  <p>I want to do simple interface for some strange game, the progress bar for health or something is the example for what I want. Variable ""HEALTH"" is 34, so make progress bar filled in 34/100</p>
</blockquote>

<p>As a command-line script, it'd use Python:</p>

<pre><code>$ export HEALTH=34
$ python -c ""import os; print '*' * int(os.environ.get('HEALTH', 0))""
**********************************
</code></pre>

<p>Or to normalise the values between 1 and 78 (so you don't get line-wrapping on a standard terminal size):</p>

<pre><code>$ python -c ""import os; print '*' * int((int(os.environ.get('HEALTH', 0)) / 100.0) * 78)""
</code></pre>

<p>Zenity also has a <a href=""https://help.gnome.org/users/zenity/stable/progress.html.en"" rel=""noreferrer"">Progress Dialog</a>,</p>

<pre><code>#!/bin/sh
(
echo ""10"" ; sleep 1
echo ""# Updating mail logs"" ; sleep 1
echo ""20"" ; sleep 1
echo ""# Resetting cron jobs"" ; sleep 1
echo ""50"" ; sleep 1
echo ""This line will just be ignored"" ; sleep 1
echo ""75"" ; sleep 1
echo ""# Rebooting system"" ; sleep 1
echo ""100"" ; sleep 1
) |
zenity --progress \
  --title=""Update System Logs"" \
  --text=""Scanning mail logs..."" \
  --percentage=0

if [ ""$?"" = -1 ] ; then
        zenity --error \
          --text=""Update canceled.""
fi
</code></pre>

<p>As I said before, if Zenity cannot do what you need, look into writing your game-thing as a ""proper"" script in Python/Ruby/Perl/C++/etc as it sounds like you're pushing the bounds of what a shell-script can do..</p>
","928110"
"Variables as commands in bash scripts","93394","","<p>I am writing a very simple bash script that tars a given directory, encrypts the output of that, and then splits the resultant file into multiple smaller files since the backup media don't support huge files.</p>

<p>I don't have a lot of experience with bash scripting. I believe I'm having issues with quoting my variables properly to allow spaces in the parameters. The script follows:</p>

<pre><code>#! /bin/bash

# This script tars the given directory, encrypts it, and transfers
# it to the given directory (likely a USB key).

if [ $# -ne 2 ]
then
    echo ""Usage: `basename $0` DIRECTORY BACKUP_DIRECTORY""
    exit 1
fi

DIRECTORY=$1
BACKUP_DIRECTORY=$2
BACKUP_FILE=""$BACKUP_DIRECTORY/`date +%Y-%m-%dT%H-%M-%S.backup`""

TAR_CMD=""tar cv $DIRECTORY""
SPLIT_CMD=""split -b 1024m - \""$BACKUP_FILE\""""

ENCRYPT_CMD='openssl des3 -salt'

echo ""$TAR_CMD | $ENCRYPT_CMD | $SPLIT_CMD""

$TAR_CMD | $ENCRYPT_CMD | $SPLIT_CMD 

say ""Done backing up""
</code></pre>

<p>Running this command fails with:</p>

<blockquote>
  <p>split: ""foo/2009-04-27T14-32-04.backup""aa: No such file or directory</p>
</blockquote>

<p>I can fix it by removing the quotes around <code>$BACKUP_FILE</code> where I set <code>$SPLIT_CMD</code>. But, if I have a space in the name of my backup directory it doesn't work. Also, if I copy and paste the output from the ""echo"" command directly into the terminal it works fine. Clearly there's something I don't understand about how Bash is escaping things.</p>
","<p>Simply don't put whole commands in variables. You'll get into a lot of trouble trying to recover quoted arguments.</p>

<p>Also:</p>

<ol>
<li>Avoid using all-capitals variable names in scripts. Easy way to shoot yourself on the foot.</li>
<li>Don't use backquotes, use $(...) instead, it nests better.</li>
</ol>

<hr>

<pre><code>#! /bin/bash

if [ $# -ne 2 ]
then
    echo ""Usage: $(basename $0) DIRECTORY BACKUP_DIRECTORY""
    exit 1
fi

directory=$1
backup_directory=$2
current_date=$(date +%Y-%m-%dT%H-%M-%S)
backup_file=""${backup_directory}/${current_date}.backup""

tar cv ""$directory"" | openssl des3 -salt | split -b 1024m - ""$backup_file""
</code></pre>
","794814"
"linux shell script: split string, put them in an array then loop through them","93301","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/918886/split-string-based-on-delimiter-in-bash"">Split string based on delimiter in Bash?</a>  </p>
</blockquote>



<p>In a bash script how do I split string with a separator like <code>;</code> and loop through the resulting array?</p>
","<p>You can probably skip the step of explicitly creating an array...</p>

<p>One trick that I like to use is to set the inter-field separator (IFS) to the delimiter character. This is especially handy for iterating through the space or return delimited results from the stdout of any of a number of unix commands.</p>

<p>Below is an example using semicolons (as you had mentioned in your question):</p>

<pre><code>export IFS="";""
sentence=""one;two;three""
for word in $sentence; do
  echo ""$word""
done
</code></pre>

<p>Note: in regular Bourne-shell scripting setting and exporting the IFS would occur on two separate lines (IFS='x'; export IFS;).</p>
","1407098"
"How can I convert a series of images to a PDF from the command line on linux?","93280","","<p>I have a scanning server I wrote in cgi/bash and want to be able to convert a bunch of images (all in one folder) to a pdf from the command line. How can that be done?</p>
","<p>Using <a href=""http://www.imagemagick.org/script/index.php"" rel=""noreferrer"">imagemagick</a>, you can try:</p>

<pre><code>convert page.png page.pdf
</code></pre>

<p>Or for multiple images:</p>

<pre><code>convert page*.png mydoc.pdf
</code></pre>
","8955465"
"Save file to specific folder with curl command","93277","","<p>In a shell script, I want to download a file from some URL and save it to a specific folder. What is the specific option I must use to download files to a specific folder with the <code>curl</code> command, or how else do I get that effect?</p>
","<p>You're a bit unspecific. I don't think you can give a path to curl, but you can CD to the location, download and CD back.</p>

<pre><code>cd target/path &amp;&amp; { curl -O URL ; cd -; }
</code></pre>

<p>This will only download if path exists. Download will keep remote file name. After download it will return to original location.</p>

<p>Will this help you?</p>

<p>If that was more complex than your problem, you can just use:</p>

<pre><code>curl -o target/path/filename URL
</code></pre>

<p>Note large O in first example and small o in second.</p>
","16363115"
"A variable modified inside a while loop is not remembered","93268","","<p>In the following program, if I set the variable <code>$foo</code> to the value 1 inside the first <code>if</code> statement, it works in the sense that its value is remembered after the if statement. However, when I set the same variable to the value 2 inside an <code>if</code> which is inside a <code>while</code> statement, it's forgotten after the <code>while</code> loop. It's behaving like I'm using some sort of copy of the variable <code>$foo</code> inside the <code>while</code> loop and I am modifying only that particular copy. Here's a complete test program:</p>

<pre><code>#!/bin/bash

set -e
set -u 
foo=0
bar=""hello""  
if [[ ""$bar"" == ""hello"" ]]
then
    foo=1
    echo ""Setting \$foo to 1: $foo""
fi

echo ""Variable \$foo after if statement: $foo""   
lines=""first line\nsecond line\nthird line"" 
echo -e $lines | while read line
do
    if [[ ""$line"" == ""second line"" ]]
    then
    foo=2
    echo ""Variable \$foo updated to $foo inside if inside while loop""
    fi
    echo ""Value of \$foo in while loop body: $foo""
done

echo ""Variable \$foo after while loop: $foo""

# Output:
# $ ./testbash.sh
# Setting $foo to 1: 1
# Variable $foo after if statement: 1
# Value of $foo in while loop body: 1
# Variable $foo updated to 2 inside if inside while loop
# Value of $foo in while loop body: 2
# Value of $foo in while loop body: 2
# Variable $foo after while loop: 1

# bash --version
# GNU bash, version 4.1.10(4)-release (i686-pc-cygwin)
</code></pre>
","<pre><code>echo -e $lines | while read line 
...
done
</code></pre>

<p>The <code>while</code> loop is executed in a subshell. So any changes you do to the variable will not be available once the subshell exits.</p>

<p>Instead you can use a <a href=""https://www.gnu.org/software/bash/manual/bashref.html#Here-Strings"" rel=""noreferrer""><em>here string</em></a> to re-write the while loop to be in the main shell process; only <code>echo -e $lines</code> will run in a subshell:</p>

<pre><code>while read line
do
    if [[ ""$line"" == ""second line"" ]]
    then
    foo=2
    echo ""Variable \$foo updated to $foo inside if inside while loop""
    fi
    echo ""Value of \$foo in while loop body: $foo""
done &lt;&lt;&lt; ""$(echo -e ""$lines"")""
</code></pre>
","16854326"
"How do you run a command for each line of a file?","93153","","<p>For example, right now I'm using the following to change a couple of files whose Unix paths I wrote to a file:</p>

<pre><code>cat file.txt | while read in; do chmod 755 ""$in""; done
</code></pre>

<p>Is there a more elegant, safer way?</p>
","<p>If your file is not too big and all files are <em>well named</em> (without spaces or other special chars like quotes), you could simply:</p>

<pre><code>chmod 755 $(&lt;file.txt)
</code></pre>

<p>If you have special chars and/or a lot of lines in <code>file.txt</code>.</p>

<pre><code>xargs -0 chmod 755 &lt; &lt;(tr \\n \\0 &lt;file.txt)
</code></pre>

<p>if your command need to be run exactly 1 time by entry:</p>

<pre><code>xargs -0 -n 1 chmod 755 &lt; &lt;(tr \\n \\0 &lt;file.txt)
</code></pre>

<p>This is not needed for this sample, as <code>chmod</code> accept multiple files as argument, but this match the title of question.</p>

<p>For some special case, you could even define location of file argument in commands generateds by <code>xargs</code>:</p>

<pre><code>xargs -0 -I '{}' -n 1 myWrapper -arg1 -file='{}' wrapCmd &lt; &lt;(tr \\n \\0 &lt;file.txt)
</code></pre>
","13941223"
"Get exit code for command in bash/ksh","93114","","<p><strong>I want to write code like this:</strong></p>

<pre><code>command=""some command""

safeRunCommand $command

safeRunCommand() {
   cmnd=$1

   $($cmnd)

   if [ $? != 0 ]; then
      printf ""Error when executing command: '$command'""
      exit $ERROR_CODE
   fi
}
</code></pre>

<p>But this code does not working the way I want.
Where I made mistake?</p>
","<p>Below is the fixed code:</p>

<pre><code>#!/bin/ksh
safeRunCommand() {
  typeset cmnd=""$*""
  typeset ret_code

  echo cmnd=$cmnd
  eval $cmnd
  ret_code=$?
  if [ $ret_code != 0 ]; then
    printf ""Error : [%d] when executing command: '$cmnd'"" $ret_code
    exit $ret_code
  fi
}

command=""ls -l | grep p""
safeRunCommand ""$command""
</code></pre>

<p>Now if you look into this code few things that I changed are:</p>

<ul>
<li>use of <code>typeset</code> is not necessary but a good practice. It make <code>cmnd</code> and <code>ret_code</code> local to <code>safeRunCommand</code></li>
<li>use of <code>ret_code</code> is not necessary but a good practice to store return code in some variable (and store it ASAP) so that you can use it later like I did in <code>printf ""Error : [%d] when executing command: '$command'"" $ret_code</code></li>
<li>pass the command with quotes surrounding the command like <code>safeRunCommand ""$command""</code>. If you dont then <code>cmnd</code> will get only the value <code>ls</code> and not <code>ls -l</code>. And it is even more important if your command contains pipes.</li>
<li>you can use <code>typeset cmnd=""$*""</code> instead of <code>typeset cmnd=""$1""</code> if you want to keep the spaces. You can try with both depending upon how complex is your command argument.</li>
<li>eval is used to evaluate so that command containing pipes can work fine</li>
</ul>

<p>NOTE: Do remember some commands give 1 as return code even though there is no error like <code>grep</code>. If <code>grep</code> found something it will return 0 else 1. </p>

<p>I had tested with KSH/BASH. And it worked fine. Let me know if u face issues running this.</p>
","8217870"
"How to remove the last character from a bash grep output","93107","","<pre><code>COMPANY_NAME=`cat file.txt | grep ""company_name"" | cut -d '=' -f 2` 
</code></pre>

<p>outputs something like this</p>

<pre><code>""Abc Inc"";
</code></pre>

<p>What I want to do is I want to remove the trailing "";"" as well. How can i do that? I am a beginner to bash. Any thoughts or suggestions would be helpful.</p>
","<p>I'd use <code>sed 's/;$//'</code>. eg:</p>

<pre><code>COMPANY_NAME=`cat file.txt | grep ""company_name"" | cut -d '=' -f 2 | sed 's/;$//'`
</code></pre>
","5074995"
"Getting the parent of a directory in Bash","93061","","<p>If I have a file path as such</p>

<pre><code>/home/smith/Desktop/Test
/home/smith/Desktop/Test/
</code></pre>

<p>how do I change the string so it will get the parent directory?</p>

<p>e.g.</p>

<pre><code>/home/smith/Desktop
/home/smith/Desktop/
</code></pre>
","<pre><code>dir=/home/smith/Desktop/Test
parentdir=""$(dirname ""$dir"")""
</code></pre>

<p>Works if there is a trailing slash, too.</p>
","8426110"
"How to exit if a command failed?","92798","","<p>I am a noob in shell-scripting. I want to print a message and exit my script if a command fails. I've tried:</p>

<pre><code>my_command &amp;&amp; (echo 'my_command failed; exit)
</code></pre>

<p>but it does not work. It keeps executing the instructions following this line in the script. I'm using Ubuntu and bash.</p>
","<p>Try:</p>

<pre><code>my_command || { echo 'my_command failed' ; exit 1; }
</code></pre>

<p>Four changes:</p>

<ul>
<li>Change <code>&amp;&amp;</code> to <code>||</code></li>
<li>Use <code>{ }</code> in place of <code>( )</code></li>
<li>Introduce <code>;</code> after <code>exit</code> and</li>
<li>spaces after <code>{</code> and before <code>}</code></li>
</ul>

<p>Since you want to print the message and exit only when the command fails ( exits with non-zero value) you need a <code>||</code> not an <code>&amp;&amp;</code>.</p>

<pre><code>cmd1 &amp;&amp; cmd2
</code></pre>

<p>will run <code>cmd2</code> when <code>cmd1</code> succeeds(exit value <code>0</code>). Where as</p>

<pre><code>cmd1 || cmd2
</code></pre>

<p>will run <code>cmd2</code> when <code>cmd1</code> fails(exit value non-zero).</p>

<p>Using <code>( )</code> makes the command inside them run in a <strong><em>sub-shell</em></strong> and calling a <code>exit</code> from there causes you to exit the sub-shell and not your original shell, hence execution continues in your original shell.</p>

<p>To overcome this use <code>{ }</code></p>

<p>The last two changes are required by bash.</p>
","3822649"
"What is your favorite Bash prompt?","92444","","<p>What are some elements in your favorite Bash prompt?</p>

<p>I like to have an indicator of the success of the most recent command, like so (in <code>.bashrc</code>):</p>

<pre><code>function exitstatus {

    EXITSTATUS=""$?""
    BOLD=""\[\033[1m\]""
    RED=""\[\033[1;31m\]""
    GREEN=""\[\e[32;1m\]""
    BLUE=""\[\e[34;1m\]""
    OFF=""\[\033[m\]""

    PROMPT=""[\u@\h ${BLUE}\W${OFF}""

    if [ ""${EXITSTATUS}"" -eq 0 ]
    then
       PS1=""${PROMPT} ${BOLD}${GREEN}:)${OFF} ]\$ ""
    else
       PS1=""${PROMPT} ${BOLD}${RED}:(${OFF} ]\$ ""
    fi

    PS2=""${BOLD}&gt;${OFF} ""
}

PROMPT_COMMAND=exitstatus
</code></pre>
","<p>Take a gander at ""<a href=""http://www.reddit.com/r/programming/comments/697cu/bash_users_what_do_you_have_for_your_ps1/"" rel=""noreferrer"">Bash users: What do you have for your $PS1?</a>"" for a large number of examples.</p>
","103958"
"Tar a directory, but don't store full absolute paths in the archive","92285","","<p>I have the following command in the part of a backup shell script:</p>

<pre><code>tar -cjf site1.bz2 /var/www/site1/
</code></pre>

<p>When I list the contents of the archive, I get:</p>

<pre><code>tar -tf site1.bz2
var/www/site1/style.css
var/www/site1/index.html
var/www/site1/page2.html
var/www/site1/page3.html
var/www/site1/images/img1.png
var/www/site1/images/img2.png
var/www/site1/subdir/index.html
</code></pre>

<p>But I would like to remove the part <code>/var/www/site1</code> from directory and file names within the archive, in order to simplify extraction and avoid useless constant directory structure. Never know, in case I would extract backuped websites in a place where web data weren't stored under <code>/var/www</code>.</p>

<p>For the example above, I would like to have :</p>

<pre><code>tar -tf site1.bz2
style.css
index.html
page2.html
page3.html
images/img1.png
images/img2.png
subdir/index.html
</code></pre>

<p>So, that when I extract, files are extracted in the current directory and I don't need to move extracted files afterwards, and so that sub-directory structures is preserved.</p>

<p>There are already many questions about tar and backuping in <code>stackoverflow</code> and at other places on the web, but most of them ask for dropping the entire sub-directory structure (flattening), or just add or remove the initial / in the names (I don't know what it changes exactly when extracting), but no more.</p>

<p>After having read some of the solutions found here and there as well as the manual, I tried :</p>

<pre><code>tar -cjf site1.bz2 -C . /var/www/site1/
tar -cjf site1.bz2 -C / /var/www/site1/
tar -cjf site1.bz2 -C /var/www/site1/ /var/www/site1/
tar -cjf site1.bz2 --strip-components=3 /var/www/site1/
</code></pre>

<p>But none of them worked the way I want. Some do nothing, some others don't archive sub-directories anymore.</p>

<p>It's inside a backup shell script launched by a Cron, so I don't know well, which user runs it, what is the path and the current directory, so always writing absolute path is required for everything, and would prefer not changing current directory to avoid breaking something further in the script (because it doesn't only backup websites, but also databases, then send all that to FTP etc.)</p>

<p>How to achieve this?</p>

<p>Have I just misunderstood how the option -C works?</p>
","<pre><code>tar -cjf site1.tar.bz2 -C /var/www/site1 .
</code></pre>

<p>In the above example, tar will change to directory <code>/var/www/site1</code> before doing its thing because the option <code>-C /var/www/site1</code> was given.</p>

<p>From <code>man tar</code>:</p>

<pre><code>OTHER OPTIONS

  -C, --directory DIR
       change to directory DIR
</code></pre>
","18681628"
"Java command not found on Linux","92159","","<p>In Oracle Enterprise Linux when I type <code>java</code> I am getting </p>

<pre><code>bash: java: command not found
</code></pre>

<p>I have installed Java 1.6 and I have the following</p>

<pre><code>sudo update-alternatives --config java

There are 2 programs which provide 'java'.

  Selection    Command
-----------------------------------------------
*  1           /usr/lib/jvm/jre-1.4.2-gcj/bin/java
 + 2           /usr/java/jre1.6.0_24/bin/java
</code></pre>

<p>How can I resolve this issue?</p>

<p>Thanks</p>
","<p>You can add one of the Java path to PATH variable using the following command.</p>

<pre><code>export PATH=$PATH:/usr/java/jre1.6.0_24/bin/
</code></pre>

<p>You can add this line to .bashrc file in your home directory. Adding this to .bashrc will ensure everytime you open bash it will be PATH variable is updated.</p>
","11237906"
"How does a Linux/Unix Bash script know its own PID?","92104","","<p>I have a script in Bash called <code>Script.sh</code>, and it needs to know its own PID (i.e. I need to get PID inside the Script.sh ) </p>

<p>Any idea how to do this ?</p>
","<p>The variable '$$' contains the PID.</p>
","2493661"
"Bash script - How to reference a file for variables","91589","","<p>Hi I want to call a settings file for a variable, how can I do this in bash?</p>

<p>So the settings file will define the variables (eg: CONFIG.FILE) :</p>

<pre><code>production=""liveschool_joe""
playschool=""playschool_joe""
</code></pre>

<p>And the script will use those variables in it </p>

<pre><code>#!/bin/bash
production=""/REFERENCE/TO/CONFIG.FILE""
playschool=""/REFERENCE/TO/CONFIG.FILE""
sudo -u wwwrun svn up /srv/www/htdocs/$production
sudo -u wwwrun svn up /srv/www/htdocs/$playschool
</code></pre>

<p>How can I get bash to do something like that? Will I have to use awk/sed etc...?</p>
","<h2>The short answer</h2>

<p>Use the <code>source</code> command.</p>

<hr>

<h2>An example using <code>source</code></h2>

<p>For example:</p>

<h3>config.sh</h3>

<pre><code>#!/usr/bin/env bash
production=""liveschool_joe""
playschool=""playschool_joe""
echo $playschool
</code></pre>

<h3>script.sh</h3>

<pre><code>#!/usr/bin/env bash
source config.sh
echo $production
</code></pre>

<p>Note that the output from <code>sh ./script.sh</code> in this example is: </p>

<pre><code>~$ sh ./script.sh 
playschool_joe
liveschool_joe
</code></pre>

<p>This is because the <code>source</code> command actually runs the program.  Everything in <code>config.sh</code> is executed.</p>

<hr>

<h2>Another way</h2>

<p>You could use the built-in <code>export</code> command and getting and setting ""environment variables"" can also accomplish this.</p>

<p>Running <code>export</code> and <code>echo $ENV</code> should be all you need to know about accessing variables.  Accessing environment variables is done the same way as a local variable.</p>

<p>To set them, say:</p>

<pre><code>export variable=value
</code></pre>

<p>at the command line.  All scripts will be able to access this value.</p>
","5228470"
"Process all arguments except the first one (in a bash script)","91551","","<p>I have a simple script where the first argument is reserved for the filename, and all other optional arguments should be passed to other parts of the script.</p>

<p>Using Google I found <a href=""http://wiki.bash-hackers.org/scripting/posparams#mass_usage"">this wiki</a>, but it provided a literal example:</p>

<pre><code>echo ""${@: -1}""
</code></pre>

<p>I can't get anything else to work, like:</p>

<pre><code>echo ""${@:2}""
</code></pre>

<p>or</p>

<pre><code>echo ""${@:2,1}""
</code></pre>

<p>I get ""Bad substitution"" from the terminal.</p>

<p>What is the problem, and how can I process all but the first argument passed to a bash script?</p>
","<p>Use this:</p>

<pre><code>echo ""${@:2}""
</code></pre>

<hr>

<p>The following syntax:</p>

<pre><code>echo ""${*:2}""
</code></pre>

<p>would work as well, but is not recommended, because as <a href=""https://stackoverflow.com/questions/9057387/process-all-arguments-except-the-first-one#comment11369452_9057392"">@Gordon</a> already explained, that using <code>*</code>, it runs all of the arguments together as a single argument with spaces, while <code>@</code> preserves the breaks between them (even if some of the arguments themselves contain spaces). It doesn't make the difference with <code>echo</code>, but it matters for many other commands.</p>
","9057392"
"Linux How to run script at certain time?","91541","","<p>I have a <strong>text file containing a specific date and time.</strong> 
I want to be able to <strong>run a script at the time specified in that file.</strong>
How would you achieve that?
Create another script that runs in background (sort of a deamon) and checks every second if the current time is matching the time in the file?
Is there another way?
The machine is a <strong>linux</strong> server , Debian wheezy.
Thanks in advance</p>
","<p>Look at the following:</p>

<pre><code>echo ""ls -l"" | at 07:00
</code></pre>

<p>This code line executes ""ls -l"" at a specific time. This is an example of executing something (a command in my example) at a specific time. ""at"" is the command you were really looking for. You can read the specifications here:</p>

<p><a href=""http://manpages.ubuntu.com/manpages/precise/en/man1/at.1posix.html"" rel=""noreferrer"">http://manpages.ubuntu.com/manpages/precise/en/man1/at.1posix.html</a>
<a href=""http://manpages.ubuntu.com/manpages/xenial/man1/at.1posix.html"" rel=""noreferrer"">http://manpages.ubuntu.com/manpages/xenial/man1/at.1posix.html</a></p>

<p>Hope it helps!</p>
","18945782"
"How to sort an array in Bash","91523","","<p>I have an array in Bash, for example:</p>

<pre class=""lang-none prettyprint-override""><code>array=(a c b f 3 5)
</code></pre>

<p>I need to sort the array. Not just displaying the content in a sorted way, but to get a new array with the sorted elements. The new sorted array can be a completely new one or the old one.</p>
","<p>You don't really need all that much code:</p>

<pre><code>IFS=$'\n' sorted=($(sort &lt;&lt;&lt;""${array[*]}""))
unset IFS
</code></pre>

<p>Supports whitespace in elements (as long as it's not a newline), <em>and</em> works in Bash 3.x.</p>

<p>e.g.:</p>

<pre><code>$ array=(""a c"" b f ""3 5"")
$ IFS=$'\n' sorted=($(sort &lt;&lt;&lt;""${array[*]}""))
$ printf ""[%s]\n"" ""${sorted[@]}""
[3 5]
[a c]
[b]
[f]
</code></pre>

<p><strong>Note:</strong> @sorontar has <a href=""https://stackoverflow.com/questions/7442417/how-to-sort-an-array-in-bash/11789688?noredirect=1#comment67720230_11789688"">pointed out</a> that care is required if elements contain wildcards such as <code>*</code> or <code>?</code>:</p>

<blockquote>
  <p>The sorted=($(...)) part is using the ""split and glob"" operator. You should turn glob off: <code>set -f</code> or <code>set -o noglob</code> or <code>shopt -op noglob</code> or an element of the array like <code>*</code> will be expanded to a list of files.</p>
</blockquote>

<h2>What's happening:</h2>

<p>The result is a culmination six things that happen in this order:</p>

<ol>
<li><code>IFS=$'\n'</code></li>
<li><code>""${array[*]}""</code></li>
<li><code>&lt;&lt;&lt;</code></li>
<li><code>sort</code></li>
<li><code>sorted=($(...))</code></li>
<li><code>unset IFS</code></li>
</ol>

<h3>First, the <code>IFS=$'\n'</code></h3>

<p>This is an important part of our operation that affects the outcome of 2 and 5 in the following way:</p>

<p>Given: </p>

<ul>
<li><code>""${array[*]}""</code> expands to every element delimited by the first character of <code>IFS</code></li>
<li><code>sorted=()</code> creates elements by splitting on every character of <code>IFS</code></li>
</ul>

<p><code>IFS=$'\n'</code> <a href=""https://unix.stackexchange.com/questions/184863/what-is-the-meaning-of-ifs-n-in-bash-scripting"">sets things up</a> so that elements are expanded using <em>a new line</em> as the delimiter, and then later created in a way that each line becomes an element.  (i.e. Splitting on a new line.)</p>

<p>Delimiting by a new line is important because that's how <code>sort</code> operates (sorting per line).  Splitting by <em>only</em> a new line is not-as-important, but is needed preserve elements that contain spaces or tabs.</p>

<p>The default value of <code>IFS</code> is <em>a space</em>, <em>a tab</em>, followed by <em>a new line</em>, and would be unfit for our operation.</p>

<h3>Next, the <code>sort &lt;&lt;&lt;""${array[*]}""</code> part</h3>

<p><code>&lt;&lt;&lt;</code>, called <a href=""https://unix.stackexchange.com/questions/80362/what-does-mean""><em>here strings</em></a>, takes the expansion of <code>""${array[*]}""</code>, as explained above, and feeds it into the standard input of <code>sort</code>.</p>

<p>With our example, <code>sort</code> is fed this following string:</p>

<pre><code>a c
b
f
3 5
</code></pre>

<p>Since <code>sort</code> <em>sorts</em>, it produces:</p>

<pre><code>3 5
a c
b
f
</code></pre>

<h3>Next, the <code>sorted=($(...))</code> part</h3>

<p>The <code>$(...)</code> part, called <a href=""http://www.tldp.org/LDP/abs/html/commandsub.html"" rel=""noreferrer""><em>command substitution</em></a>, causes its content (<code>sort &lt;&lt;&lt;""${array[*]}</code>) to run as a normal command, while taking the resulting  <em>standard output</em> as the literal that goes where ever <code>$(...)</code> was.</p>

<p>In our example, this produces something similar to simply writing:</p>

<pre><code>sorted=(3 5
a c
b
f
)
</code></pre>

<p><code>sorted</code> then becomes an array that's created by splitting this literal on every new line.</p>

<h3>Finally, the <code>unset IFS</code></h3>

<p>This resets the value of <code>IFS</code> to the default value, and is just good practice.</p>

<p>It's to ensure we don't cause trouble with anything that relies on <code>IFS</code> later in our script.  (Otherwise we'd need to remember that we've switched things around--something that might be impractical for complex scripts.)</p>
","11789688"
"How to get the start time of a long-running Linux process?","91450","","<p>Is it possible to get the start time of an old running process? It seems that <code>ps</code> will report the date (not the time) if it wasn't started today, and only the year if it wasn't started this year. Is the precision lost forever for old processes?</p>
","<p>You can specify a formatter and use <code>lstart</code>, like this command:</p>

<pre><code>ps -eo pid,lstart,cmd
</code></pre>

<p>The above command will output all processes, with formatters to get PID, command run, and time started.</p>

<p>Example (from Debian/Jessie command line)</p>

<pre><code>$ ps -eo pid,lstart,cmd
  PID CMD                                          STARTED
    1 Tue Jun  7 01:29:38 2016 /sbin/init                  
    2 Tue Jun  7 01:29:38 2016 [kthreadd]                  
    3 Tue Jun  7 01:29:38 2016 [ksoftirqd/0]               
    5 Tue Jun  7 01:29:38 2016 [kworker/0:0H]              
    7 Tue Jun  7 01:29:38 2016 [rcu_sched]                 
    8 Tue Jun  7 01:29:38 2016 [rcu_bh]                    
    9 Tue Jun  7 01:29:38 2016 [migration/0]               
   10 Tue Jun  7 01:29:38 2016 [kdevtmpfs]                 
   11 Tue Jun  7 01:29:38 2016 [netns]                     
  277 Tue Jun  7 01:29:38 2016 [writeback]                 
  279 Tue Jun  7 01:29:38 2016 [crypto]                    
      ...
</code></pre>

<p>You can read <code>ps</code>'s manpage or <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/"" rel=""noreferrer"">check Opengroup's page</a> for the other formatters.</p>
","5731337"
"Linux Script to check if process is running & act on the result","91342","","<p>I have a process that fails regularly &amp; sometimes starts duplicate instances..</p>

<p>When I run:
<code>ps x |grep -v grep |grep -c ""processname""</code>
I will get:
<code>2</code>
This is normal as the process runs with a recovery process..</p>

<p>If I get
<code>0</code>
I will want to start the process
if I get:
<code>4</code>
I will want to stop &amp; restart the process</p>

<p>What I need is a way of taking the result of <code>ps x |grep -v grep |grep -c ""processname""</code></p>

<p>Then setup a simple 3 option function</p>

<pre><code>ps x |grep -v grep |grep -c ""processname""
if answer = 0 (start process &amp; write NOK &amp; Time to log /var/processlog/check)
if answer = 2 (Do nothing &amp; write OK &amp; time to log /var/processlog/check)
if answer = 4 (stot &amp; restart the process &amp; write NOK &amp; Time to log /var/processlog/check)
</code></pre>

<p>The process is stopped with
<code>killall -9 process</code>
The process is started with
<code>process -b -c /usr/local/etc</code></p>

<p>My main problem is finding a way to act on the result of <code>ps x |grep -v grep |grep -c ""processname""</code>.</p>

<p>Ideally, I would like to make the result of that grep a variable within the script with something like this:</p>

<p><code>process=$(ps x |grep -v grep |grep -c ""processname"")</code></p>

<p>If possible.</p>
","<p>Here is a script I use to monitor if a process on a system is running. <br>
Script is stored in <code>crontab</code> and runs once every minute.</p>

<pre><code>#! /bin/bash

case ""$(pidof amadeus.x86 | wc -w)"" in

0)  echo ""Restarting Amadeus:     $(date)"" &gt;&gt; /var/log/amadeus.txt
    /etc/amadeus/amadeus.x86 &amp;
    ;;
1)  # all ok
    ;;
*)  echo ""Removed double Amadeus: $(date)"" &gt;&gt; /var/log/amadeus.txt
    kill $(pidof amadeus.x86 | awk '{print $1}')
    ;;
esac
</code></pre>

<p><code>0</code> If process is not found, restart it.<br>
<code>1</code> If process is found, all ok.<br>
<code>*</code> If process running 2 or more, kill the last.</p>

<hr>

<p>A simpler version.  This just test if process is running, and if not restart it.<br>
It just tests the exit flag <code>$?</code> from the <code>pidof</code> program.  It will be <code>0</code> of process is running and <code>1</code> if not.</p>

<pre><code>#!/bin/bash
pidof  amadeus.x86 &gt;/dev/null
if [[ $? -ne 0 ]] ; then
        echo ""Restarting Amadeus:     $(date)"" &gt;&gt; /var/log/amadeus.txt
        /etc/amadeus/amadeus.x86 &amp;
fi
</code></pre>
","20162921"
"Adding git branch on the Bash command prompt","91200","","<p>I tried adding the git branch I'm currently working on (checked-out) on the bash prompt without success..  (<strong>while keeping my current path which shows the active directory/file</strong> intact)
I have a .bashrc file on my home, but I also saw many people mentioning the .profile file.. </p>
","<p>Note this kind of prompt is now managed by <a href=""https://github.com/git/git/blob/8976500cbbb13270398d3b3e07a17b8cc7bff43f/contrib/completion/git-prompt.sh"" rel=""noreferrer"">contrib/completion/<code>git-prompt.sh</code></a> and its <code>__git_ps1_branch_name</code> variable.</p>

<blockquote>
  <ul>
  <li>Copy this file to somewhere (e.g. <code>~/.git-prompt.sh</code>).</li>
  <li>Add the following line to your <code>.bashrc/.zshrc</code>:</li>
  </ul>
</blockquote>

<pre><code>  source ~/.git-prompt.sh
</code></pre>

<blockquote>
  <ul>
  <li>Change your <code>PS1</code> to call <code>__git_ps1</code> as command-substitution:</li>
  </ul>
</blockquote>

<pre><code>  Bash: 
  PS1='[\u@\h \W$(__git_ps1 "" (%s)"")]\$ '
  ZSH:  
  setopt PROMPT_SUBST ; PS1='[%n@%m %c$(__git_ps1 "" (%s)"")]\$ '
</code></pre>

<hr>

<p>But note that only git 1.9.3 (May 2014) <a href=""https://unix.stackexchange.com/questions/33617/how-can-i-update-to-a-newer-version-of-git-using-apt-get/170831#170831"">or later</a> allows you to <em>safely</em> display that branch name(!)</p>

<p>See <a href=""https://github.com/git/git/commit/8976500cbbb13270398d3b3e07a17b8cc7bff43f"" rel=""noreferrer"">commit 8976500</a> by <a href=""https://github.com/richardhansen"" rel=""noreferrer"">Richard Hansen (<code>richardhansen</code>)</a>:</p>

<blockquote>
  <p>Both bash and zsh subject the value of PS1 to <strong>parameter expansion</strong>, <strong>command substitution</strong>, and arithmetic expansion.  </p>
  
  <p>Rather than include the raw, unescaped branch name in <code>PS1</code> when running in two- or
  three-argument mode, construct <code>PS1</code> to reference a variable that holds the branch name.  </p>
  
  <p>Because the shells do not recursively expand, this avoids arbitrary code execution by specially-crafted branch names such as </p>
</blockquote>

<pre><code>'$(IFS=_;cmd=sudo_rm_-rf_/;$cmd)'.
</code></pre>

<p>What devious mind would name a branch like that? ;) (<a href=""http://xkcd.com/327/"" rel=""noreferrer"">Beside a Mom as in xkcd</a>)</p>

<hr>

<p><a href=""https://stackoverflow.com/users/172274/still-dreaming-1"">still_dreaming_1</a> reports <a href=""https://stackoverflow.com/questions/15883416/adding-git-branch-on-the-bash-command-prompt/24716445?noredirect=1#comment54332815_24716445"">in the comments</a>:</p>

<blockquote>
  <p>This seems to work great if you want a color prompt with <code>xterm</code> (in my <code>.bashrc</code>): </p>
</blockquote>

<pre><code>PS1='\[\e]0;\u@\h: \w\a\]\n${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\03‌​3[01;34m\]\w\[\033[00m\]$(__git_ps1)\$ ' 
</code></pre>

<blockquote>
  <p>Everything is a different color, including the branch.</p>
</blockquote>

<p>In  in Linux Mint 17.3 Cinnamon 64-bit: </p>

<pre><code>PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[00m\]$(__git_ps1) \$ ' 
</code></pre>
","24716445"
"Bash - Take nth column in a text file","91094","","<p>I've got a text file:</p>

<pre><code>1 Q0 1657 1 19.6117 Exp
1 Q0 1410 2 18.8302 Exp
2 Q0 3078 1 18.6695 Exp
2 Q0 2434 2 14.0508 Exp
2 Q0 3129 3 13.5495 Exp
</code></pre>

<p>i want to take 2nd and 4th word of every line like this:</p>

<pre><code>1657 19.6117
1410 18.8302
3078 18.6695
2434 14.0508
3129 13.5495
</code></pre>

<p>İ'm using this code</p>

<pre><code> nol=$(cat ""/path/of/my/text"" | wc -l)
 x=1
 while  [ $x -le ""$nol"" ]
 do
 line=($(sed -n ""$x""p /path/of/my/text)
 echo """"${line[1]}"" ""${line[3]}""""  &gt;&gt; out.txt
 x=$(( $x + 1 ))
 done
</code></pre>

<p>It works but very complicated and takes long time to process long text files.
Is there a simple way to do this?
Thanks.</p>
","<p>iirc :</p>

<pre><code>cat filename.txt | awk '{ print $2 $4 }'
</code></pre>

<p>or, as mentioned in the comments :</p>

<pre><code>awk '{ print $2 $4 }' filename.txt
</code></pre>
","17137297"
"How to check syslog in bash?","91023","","<p>In c we log this way:</p>

<pre><code>syslog( LOG_INFO, ""proxying %s"", url );
</code></pre>

<p>In linux how can we check the log?</p>
","<p>How about <code>less /var/log/syslog</code>?</p>
","6074429"
"Shell script : How to cut part of a string","90774","","<p>I have following string</p>

<pre><code>â   â³ eGalax Inc. USB TouchController          id=9    [slave  pointer  (2)]
â   â³ eGalax Inc. USB TouchController          id=10   [slave  pointer  (2)]
</code></pre>

<p>and would like to get the list of id ? How this can be done using sed or something else ? </p>
","<p>I pasted the contents of your example into a file named <code>so.txt</code>.</p>

<pre><code>$ cat so.txt | awk '{ print $7 }' | cut -f2 -d""=""
9
10
</code></pre>

<p>Explanation:</p>

<ol>
<li><code>cat so.txt</code> will print the contents of the file to <code>stdout</code>. </li>
<li><code>awk '{ print $7 }'</code> will print the seventh column, i.e. the one containing <code>id=n</code> </li>
<li><code>cut -f2 -d""=""</code> will cut the output of step #2 using <code>=</code> as the delimiter and get the second column (<code>-f2</code>)</li>
</ol>

<p>If you'd rather get <code>id=</code> also, then:</p>

<pre><code>$ cat so.txt | awk '{ print $7 }' 
id=9
id=10
</code></pre>
","3742306"
"How to split a file into equal parts, without breaking individual lines?","90772","","<p>I was wondering if it was possible to split a file into equal parts (<em>edit:</em> = all equal except for the last), without breaking the line? Using the split command in Unix, lines may be broken in half. Is there a way to, say, split up a file in 5 equal parts, but have it still only consist of whole lines (it's no problem if one of the files is a little larger or smaller)? I know I could just calculate the number of lines, but I have to do this for a lot of files in a bash script. Many thanks!</p>
","<p>If you mean an equal number of <em>lines,</em> <code>split</code> has an option for this:</p>

<pre><code>split --lines=75
</code></pre>

<p>If you need to know what that <code>75</code> should really be for <code>N</code> equal parts, its:</p>

<pre><code>lines_per_part = int(total_lines + N - 1) / N
</code></pre>

<p>where total lines can be obtained with <code>wc -l</code>.</p>

<p>See the following script for an example:</p>

<pre><code>#!/usr/bin/bash

# Configuration stuff

fspec=qq.c
num_files=6

# Work out lines per file.

total_lines=$(wc -l &lt;${fspec})
((lines_per_file = (total_lines + num_files - 1) / num_files))

# Split the actual file, maintaining lines.

split --lines=${lines_per_file} ${fspec} xyzzy.

# Debug information

echo ""Total lines     = ${total_lines}""
echo ""Lines  per file = ${lines_per_file}""    
wc -l xyzzy.*
</code></pre>

<p>This outputs:</p>

<pre><code>Total lines     = 70
Lines  per file = 12
  12 xyzzy.aa
  12 xyzzy.ab
  12 xyzzy.ac
  12 xyzzy.ad
  12 xyzzy.ae
  10 xyzzy.af
  70 total
</code></pre>

<hr>

<p>More recent versions of <code>split</code> allow you to specify a number of <code>CHUNKS</code> with the <code>-n/--number</code> option. You can therefore use something like:</p>

<pre><code>split --number=l/6 ${fspec} xyzzy.
</code></pre>

<p>(that's <code>ell-slash-six</code>, meaning <code>lines</code>, not <code>one-slash-six</code>).</p>

<p>That will give you roughly equal files in terms of size, with no mid-line splits.</p>

<p>I mention that last point because it doesn't give you roughly the same number of <em>lines</em> in each file, more the same number of <em>characters.</em></p>

<p>So, if you have one 20-character line and 19 1-character lines (twenty lines in total) and split to five files, you most likely <em>won't</em> get four lines in every file.</p>
","7764796"
"how to run two commands in sudo?","90548","","<p>Is there any way how I can run two Db2 commands from a command line? (They will be called from a PHP <code>exec</code> command.)</p>

<ol>
<li><code>db2 connect to ttt</code> (note that we need to have the connection live for the second command</li>
<li><code>db2 UPDATE CONTACT SET EMAIL_ADDRESS = 'mytestaccount@gmail.com'</code></li>
</ol>

<p>I tried this:</p>

<pre><code>sudo -su db2inst1 db2 connect to ttt; db2 UPDATE CONTACT SET EMAIL_ADDRESS = 'mytestaccount@gmail.com'
</code></pre>

<p>The first command finishes correctly but the second one fails with the error message <code>SQL1024N  A database connection does not exist.  SQLSTATE=08003</code></p>

<p>Note that I need to run this as php user. The command <code>sudo -u db2inst1 id</code> as <strong>php</strong> user gives me correct output.</p>
","<p>sudo can run multiple commands via a shell, for example:</p>

<pre>
$ sudo -s -- 'whoami; whoami'
root
root
</pre>

<p>Your command would be something like:</p>

<pre>
sudo -u db2inst1 -s -- ""db2 connect to ttt; db2 UPDATE CONTACT SET EMAIL_ADDRESS = 'mytestaccount@gmail.com'""
</pre>

<p>If your sudo version doesn't work with semicolons with -s (apparently, it doesn't if compiled with certain options), you can use</p>

<pre>
sudo -- sh -c 'whoami; whoami'
</pre>

<p>instead, which basically does the same thing but makes you name the shell explicitly.</p>
","5560480"
"bash: mkvirtualenv: command not found","90099","","<p>After following the instructions on <a href=""https://doughellmann.com/blog/2008/05/01/virtualenvwrapper/"" rel=""noreferrer"">Doug Hellman's <code>virtualenvwrapper</code> post</a>, I still could not fire up a test environment.</p>

<pre><code>[mpenning@tsunami ~]$ mkvirtualenv test
-bash: mkvirtualenv: command not found
[mpenning@tsunami ~]$
</code></pre>

<p>It should be noted that I'm using <code>WORKON_HOME</code> that is not in my <code>$HOME</code>.  I tried looking for <code>/usr/local/bin/virtualenvwrapper.sh</code> as shown in the <a href=""http://virtualenvwrapper.readthedocs.org/en/latest/install.html"" rel=""noreferrer""><code>virtualenvwrapper</code> installation docs</a>, but it does not exist.</p>

<p>I'm running CentOS 6 and python 2.6.6, if this matters.</p>

<hr>

<pre><code># File: ~/.bash_profile
# ...

export WORKON_HOME=""/opt/virtual_env/""
source ""/opt/virtual_env/bin/virtualenvwrapper_bashrc""
</code></pre>
","<p><strong>Solution 1</strong>:</p>

<p>For some reason, <code>virtualenvwrapper.sh</code> installed in <code>/usr/bin/virtualenvwrapper.sh</code>, instead of under <code>/usr/local/bin</code>.</p>

<p>The following in my <code>.bash_profile</code> works...</p>

<pre><code>source ""/usr/bin/virtualenvwrapper.sh""
export WORKON_HOME=""/opt/virtual_env/""
</code></pre>

<p>My install seems to work fine without sourcing <code>virtualenvwrapper_bashrc</code></p>

<p><strong>Solution 2</strong>:</p>

<p>Alternatively as mentioned below, you could leverage the chance that <code>virtualenvwrapper.sh</code> is already in your shell's <code>PATH</code> and just issue a <code>source `which virtualenvwrapper.sh`
</code></p>
","13855464"
"How to apply shell command to each line of a command output?","90063","","<p>Suppose I have some output from a command (such as <code>ls -1</code>):</p>

<pre><code>a
b
c
d
e
...
</code></pre>

<p>I want to apply a command (say <code>echo</code>) to each one, in turn. E.g.</p>

<pre><code>echo a
echo b
echo c
echo d
echo e
...
</code></pre>

<p>What's the easiest way to do that in bash?</p>
","<p>It's probably easiest to use <code>xargs</code>. In your case:</p>

<pre><code>ls -1 | xargs -L1 echo
</code></pre>
","2711011"
"How to count number of unique values of a field in a tab-delimited text file?","90006","","<p>I have a text file with a large amount of data which is tab delimited. I want to have a look at the data such that I can see the unique values in a column. For example,</p>

<pre><code>Red     Ball 1 Sold
Blue    Bat  5 OnSale
............... 
</code></pre>

<p>So, its like the first column has colors, so I want to know how many different unique values are there in that column and I want to be able to do that for each column.</p>

<p>I need to do this in a Linux command line, so probably using some bash script, sed, awk or something.</p>

<p><strong>Addendum: Thanks everyone for the help, can I ask one more thing? What if I wanted a count of these unique values as well?</strong></p>

<p><strong>I guess I didn't put the second part clearly enough. What I wanted to do is to have a count of ""each"" of these unique values not know how many unique values are there. For instance, in the first column I want to know how many Red, Blue, Green etc coloured objects are there.</strong> </p>
","<p>You can make use of <code>cut</code>, <code>sort</code> and <code>uniq</code> commands as follows:</p>

<pre><code>cat input_file | cut -f 1 | sort | uniq
</code></pre>

<p>gets unique values in field 1, replacing 1 by 2 will give you unique values in field 2.</p>

<p>Avoiding <a href=""http://en.wikipedia.org/wiki/Cat_%28Unix%29#Useless_use_of_cat"" rel=""noreferrer""><strong>UUOC</strong></a> :)</p>

<pre><code>cut -f 1 input_file | sort | uniq
</code></pre>

<p><strong>EDIT:</strong></p>

<p>To count the number of unique occurences you can make use of <code>wc</code> command in the chain as:</p>

<pre><code>cut -f 1 input_file | sort | uniq | wc -l
</code></pre>
","3502199"
"How to give a pattern for new line in grep?","89894","","<p>How to give a pattern for new line in grep?
New line at beginning, new line at end. Not the regular expression way. Something like \n.</p>
","<p><code>grep</code> patterns are matched against individual lines so there is no way for a pattern to match a newline found in the input.</p>

<p>However you can find empty lines like this:</p>

<pre><code>grep '^$' file
grep '^[[:space:]]*$' file # include white spaces 
</code></pre>
","12652676"
"How to execute a remote command over ssh with arguments?","89701","","<p>In my <code>.bashrc</code> I define a function which I can use on the command line later:</p>

<pre><code>function mycommand() {
    ssh user@123.456.789.0 cd testdir;./test.sh ""$1""
}
</code></pre>

<p>When using this command, just the <code>cd</code> command is executed on the remote host; the <code>test.sh</code> command is executed on the local host. This is because the semicolon separates two different commands: the <code>ssh</code> command and the <code>test.sh</code> command. </p>

<p>I tried defining the function as follows (note the single quotes):</p>

<pre><code>function mycommand() {
    ssh user@123.456.789.0 'cd testdir;./test.sh ""$1""'
}
</code></pre>

<p>I tried to keep the <code>cd</code> command and the <code>test.sh</code> command together, but the argument <code>$1</code> is not resolved, independent of what I give to the function. It is always tried to execute a command</p>

<pre><code>./test.sh $1
</code></pre>

<p>on the remote host. </p>

<p>How do I properly define <code>mycommand</code>, so the script <code>test.sh</code> is executed on the remote host after changing into the directory <code>testdir</code>, with the ability to pass on the argument given to <code>mycommand</code> to <code>test.sh</code>?</p>
","<p>Do it this way instead:</p>

<pre><code>function mycommand {
    ssh user@123.456.789.0 ""cd testdir;./test.sh \""$1\""""
}
</code></pre>

<p>You still have to pass the whole command as a single string, yet in that single string you need to have <code>$1</code> expanded before it is sent to ssh so you need to use <code>""""</code> for it.</p>

<h3>Update</h3>

<p>Another proper way to do this actually is to use <code>printf %q</code> to properly quote the argument. This would make the argument safe to parse even if it has spaces, single quotes, double quotes, or any other character that may have a special meaning to the shell:</p>

<pre><code>function mycommand {
    printf -v __ %q ""$1""
    ssh user@123.456.789.0 ""cd testdir;./test.sh $__""
}
</code></pre>

<ul>
<li>When declaring a function with <code>function</code>, <code>()</code> is not necessary.</li>
<li>Don't comment back about it just because you're a POSIXist.</li>
</ul>
","18502979"
"In Bash, how do you access command line arguments inside a function?","89519","","<p>I'm attempting to write a function in bash that will access the scripts command line arguments, but they are replaced with the positional arguments to the function. Is there any way for the function to access the command line arguments if they aren't passed in explicitly?</p>

<pre><code># Demo function
function stuff {
  echo $0 $*
}

# Echo's the name of the script, but no command line arguments
stuff

# Echo's everything I want, but trying to avoid
stuff $*
</code></pre>
","<p>My reading of the bash ref manual says this stuff is captured in BASH_ARGV,
although it talks about ""the stack"" a lot.</p>

<pre><code>#!/bin/bash

function argv {
    for a in ${BASH_ARGV[*]} ; do
      echo -n ""$a ""
    done
    echo
}

function f {
    echo f $1 $2 $3
    echo -n f ; argv
}

function g {
    echo g $1 $2 $3
    echo -n g; argv
    f
}

f boo bar baz
g goo gar gaz
</code></pre>

<p>Save in f.sh</p>

<pre><code>$ ./f.sh arg0 arg1 arg2
f boo bar baz
farg2 arg1 arg0 
g goo gar gaz
garg2 arg1 arg0 
f
farg2 arg1 arg0 
</code></pre>
","2741116"
"Check if directory mounted with bash","89438","","<p>I am using</p>

<pre><code>mount -o bind /some/directory/here /foo/bar
</code></pre>

<p>I want to check <code>/foo/bar</code> though with a bash script, and see if its been mounted? If not, then call the above mount command, else do something else. How can I do this?</p>

<p>CentOS is the operating system.</p>
","<p>Running the <code>mount</code> command without arguments will tell you the current mounts.  From a shell script, you can check for the mount point with <code>grep</code> and an if-statement:</p>

<pre><code>if mount | grep /mnt/md0 &gt; /dev/null; then
    echo ""yay""
else
    echo ""nay""
fi
</code></pre>

<p>In my example, the if-statement is checking the exit code of <code>grep</code>, which indicates if there was a match.  Since I don't want the output to be displayed when there is a match, I'm redirecting it to <code>/dev/null</code>.</p>
","9422947"
"Bash: retrieve absolute path given relative","89404","","<p>Is there a command to retrieve the absolute path given the relative path?</p>

<p>For example I want $line to contain the absolute path of each file in dir <code>./etc/</code></p>

<pre><code>find ./ -type f | while read line; do
   echo $line
done
</code></pre>
","<p>use:</p>

<pre><code>find $(pwd)/ -type f
</code></pre>

<p>to get all files or</p>

<pre><code>echo $(pwd)/$line
</code></pre>

<p>to display full path (if relative path matters to)</p>
","4175309"
"How do I limit the number of results returned from grep?","89124","","<p>I would like to say 10 lines max from grep.</p>

<p>I don't want my computer to work hard. I want it to stop after 10 results found by grep. Is it possible?</p>
","<p>The -m option is probably what you're looking for:</p>

<pre><code>grep -m 10 PATTERN [FILE] 
</code></pre>

<p>From <code>man grep</code>,</p>

<pre><code> -m NUM, --max-count=NUM
          Stop reading a file after NUM matching lines.  If the  input  is
          standard  input  from a regular file, and NUM matching lines are
          output, grep ensures that the standard input  is  positioned  to
          just  after the last matching line before exiting, regardless of
          the presence of trailing context lines.  This enables a  calling
          process  to resume a search.
</code></pre>

<p>Note: grep stops reading the file once the specified number of matches have been found!</p>
","5013198"
"How to rename with prefix/suffix?","89044","","<p>How do I do <code>mv original.filename new.original.filename</code> without retyping the original filename?</p>

<p>I would imagine being able to do something like <code>mv -p=new. original.filename</code> or perhaps <code>mv original.filename new.~</code> or whatever - but I can't see anything like this after looking at <code>man mv</code> / <code>info mv</code> pages.</p>

<p>Of course, I could write a shell script to do this, but isn't there an existing command/flag for it?</p>
","<p>In Bash and zsh you can do this with <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Brace-Expansion"" rel=""noreferrer"">Brace Expansion</a>.  This simply expands a list of items in braces.  For example:</p>

<pre><code># echo {vanilla,chocolate,strawberry}-ice-cream
vanilla-ice-cream chocolate-ice-cream strawberry-ice-cream
</code></pre>

<p>So you can do your rename as follows:</p>

<pre><code>mv {,new.}original.filename
</code></pre>

<p>as this expands to:</p>

<pre><code>mv original.filename new.original.filename
</code></pre>
","208260"
"Rename all files in directory from $filename_h to $filename_half?","89021","","<p>Dead simple.</p>

<p>How do I rename </p>

<pre><code>05_h.png
06_h.png
</code></pre>

<p>to </p>

<pre><code>05_half.png
06_half.png
</code></pre>

<p>At least, I think it's simple, but it's hard to Google for this kind of thing unless you already know. </p>

<p>Thanks....</p>
","<p>Just use bash, no need to call external commands.</p>

<pre><code>for file in *_h.png
do
  mv ""$file"" ""${file/_h.png/_half.png}""
done
</code></pre>

<p><strong>Do not add <code>#!/bin/sh</code></strong></p>

<p>For those that need that one-liner:</p>

<pre><code>for file in *.png; do mv ""$file"" ""${file/_h.png/_half.png}""; done
</code></pre>
","7451880"
"Bash variables concatenation","88832","","<p>stupid question no doubt, I'm trying to add a variable to the middle of a variable, so for instance in PHP i would do this:</p>

<pre><code>$mystring = $arg1 . '12' . $arg2 . 'endoffile';
</code></pre>

<p>so the output might be <code>20121201endoffile</code>, how can I achieve the same in a linux bash script?</p>
","<p>Try doing this, there's no special character to concatenate in bash :</p>

<pre><code>mystring=""${arg1}12${arg2}endoffile""
</code></pre>

<h2>explanations</h2>

<p>If you don't put brackets, you will ask <a href=""/questions/tagged/bash"" class=""post-tag"" title=""show questions tagged 'bash'"" rel=""tag"">bash</a> to concatenate <code>$arg112 + $argendoffile</code> (I guess that's not what you asked) like in the following example :</p>

<pre><code>mystring=""$arg112$arg2endoffile""
</code></pre>

<p>The brackets are <em>delimiters</em> for the variables when needed. When not needed, you can use it or not.</p>

<p><h2>another solution</h2> (less portable : require <code>bash</code> > 3.1)</p>

<pre><code>$ arg1=foo
$ arg2=bar
$ mystring=""$arg1""
$ mystring+=""12""
$ mystring+=""$arg2""
$ mystring+=""endoffile""
$ echo ""$mystring""
foo12barendoffile
</code></pre>

<p>See <a href=""http://mywiki.wooledge.org/BashFAQ/013"">http://mywiki.wooledge.org/BashFAQ/013</a></p>
","14325749"
"Best way to simulate ""group by"" from bash?","88795","","<p>Suppose you have a file that contains IP addresses, one address in each line:</p>

<pre><code>10.0.10.1
10.0.10.1
10.0.10.3
10.0.10.2
10.0.10.1
</code></pre>

<p>You need a shell script that counts for each IP address how many times it appears in the file. For the previous input you need the following output:</p>

<pre><code>10.0.10.1 3
10.0.10.2 1
10.0.10.3 1
</code></pre>

<p>One way to do this is:</p>

<pre><code>cat ip_addresses |uniq |while read ip
do
    echo -n $ip"" ""
    grep -c $ip ip_addresses
done
</code></pre>

<p>However it is really far from being efficient.</p>

<p>How would you solve this problem more efficiently using bash?</p>

<p>(One thing to add: I know it can be solved from perl or awk, I'm interested in a better solution in bash, not in those languages.)</p>

<p>ADDITIONAL INFO:</p>

<p>Suppose that the source file is 5GB and the machine running the algorithm has 4GB. So sort is not an efficient solution, neither is reading the file more than once.</p>

<p>I liked the hashtable-like solution - anybody can provide improvements to that solution?</p>

<p>ADDITIONAL INFO #2:</p>

<p>Some people asked why would I bother doing it in bash when it is way easier in e.g. perl. The reason is that on the machine I had to do this perl wasn't available for me. It was a custom built linux machine without most of the tools I'm used to. And I think it was an interesting problem.</p>

<p>So please, don't blame the question, just ignore it if you don't like it. :-)</p>
","<pre><code>sort ip_addresses | uniq -c
</code></pre>

<p>This will print the count first, but other than that it should be exactly what you want.</p>
","380832"
"Exit a Script On Error","88476","","<p>I'm building a Shell Script that has a <code>if</code> function like this one:</p>

<pre><code>if jarsigner -verbose -keystore $keyst -keystore $pass $jar_file $kalias
then
    echo $jar_file signed sucessfully
else
    echo ERROR: Failed to sign $jar_file. Please recheck the variables
fi

...
</code></pre>

<p>I want the execution of the script to finish after displaying the error message. How I can do this?</p>
","<p>Are you looking for <a href=""http://tldp.org/LDP/abs/html/exit-status.html""><code>exit</code></a>?</p>

<p>This is the best bash guide around.
<a href=""http://tldp.org/LDP/abs/html/"">http://tldp.org/LDP/abs/html/</a></p>

<p>In context:</p>

<pre><code>if jarsigner -verbose -keystore $keyst -keystore $pass $jar_file $kalias
then
    echo $jar_file signed sucessfully
else
    echo ERROR: Failed to sign $jar_file. Please recheck the variables 1&gt;&amp;2
    exit 1 # terminate and indicate error
fi

...
</code></pre>
","4381649"
"How to cut first n and last n columns?","88238","","<p>How can I cut off the first <em>n</em> and the last <em>n</em> columns from a tab delimited file?</p>

<p>I tried this to cut first <em>n</em> column. But I have no idea to combine first and last n column</p>

<pre><code>cut -f 1-10 -d ""&lt;CTR&gt;v &lt;TAB&gt;"" filename
</code></pre>
","<p>Cut can take several ranges in -f:</p>

<p>Columns up to 4 and from 7 onwards:  </p>

<blockquote>
  <p>cut -f -4,7-</p>
</blockquote>

<p>or for fields 1,2,5,6 and from 10 onwards:</p>

<blockquote>
  <p>cut -f 1,2,5,6,10-</p>
</blockquote>

<p>etc</p>
","4957152"
"Multiple commands in an alias for bash","88001","","<p>I'd like to define an alias that runs the following two commands consecutively. </p>

<pre><code>gnome-screensaver
gnome-screensaver-command --lock
</code></pre>

<p>Right now I've added</p>

<pre><code>alias lock='gnome-screensaver-command --lock'
</code></pre>

<p>to my .bashrc but since I lock my workstation so often it would be easier to just type one command.</p>
","<p>Try:</p>

<pre><code>alias lock='gnome-screensaver; gnome-screensaver-command --lock'
</code></pre>

<p>or</p>

<pre><code>lock() {
    gnome-screensaver
    gnome-screensaver-command --lock
}
</code></pre>

<p>in your .bashrc</p>

<p>The second solution allows you to use arguments.</p>
","756772"
"Determine the path of the executing BASH script","87968","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in"">Can a Bash script tell what directory it&#39;s stored in?</a>  </p>
</blockquote>



<p>In a Windows command script, one can determine the <em>directory</em> path of the currently executing script using <code>%~dp0</code>. For example:</p>

<pre><code>@echo Running from %~dp0
</code></pre>

<p>What would be the equivalent in a <a href=""http://www.gnu.org/software/bash/"" rel=""noreferrer"">BASH</a> script?</p>
","<p>For the relative path (i.e. the direct equivalent of Windows' <code>%~dp0</code>):</p>

<pre><code>MY_PATH=""`dirname \""$0\""`""
echo ""$MY_PATH""
</code></pre>

<p>For the absolute, normalized path:</p>

<pre><code>MY_PATH=""`dirname \""$0\""`""              # relative
MY_PATH=""`( cd \""$MY_PATH\"" &amp;&amp; pwd )`""  # absolutized and normalized
if [ -z ""$MY_PATH"" ] ; then
  # error; for some reason, the path is not accessible
  # to the script (e.g. permissions re-evaled after suid)
  exit 1  # fail
fi
echo ""$MY_PATH""
</code></pre>
","630387"
"cut or awk command to print first field of first row","87933","","<p>I am trying print the first field of the first row of an output. Here is the case. I just need to print only <code>SUSE</code> from this output. </p>

<pre><code># cat /etc/*release

SUSE Linux Enterprise Server 11 (x86_64)
VERSION = 11
PATCHLEVEL = 2
</code></pre>

<p>Tried with <code>cat /etc/*release | awk {'print $1}'</code> but that print the first string of every row</p>

<pre><code>SUSE
VERSION
PATCHLEVEL
</code></pre>
","<p>Specify <a href=""https://www.gnu.org/software/gawk/manual/html_node/Auto_002dset.html""><code>NR</code></a> if you want to capture output from selected rows:</p>

<pre><code>awk 'NR==1{print $1}' /etc/*release
</code></pre>

<p>An alternative (<em>ugly</em>) way of achieving the same would be:</p>

<pre><code>awk '{print $1; exit}'
</code></pre>

<p>An efficient way of getting the <em>first string</em> from a specific line, say line 42, in the output would be:</p>

<pre><code>awk 'NR==42{print $1; exit}'
</code></pre>
","22190928"
"Execute bash script from URL","87685","","<p>Say I have a file at the URL ""http://mywebsite.com/myscript.txt"" that contains a script:</p>

<pre><code>#!/bin/bash
echo ""Hello, world!""
read -p ""What is your name? "" name
echo ""Hello, ${name}!""
</code></pre>

<p>And I'd like to run this script without first saving it to a file. How do I do this?</p>

<p>Now, I've seen the syntax:</p>

<pre><code>bash &lt; &lt;(curl -s http://mywebsite.com/myscript.txt)
</code></pre>

<p>But this doesn't seem to work like it would if I saved to a file and then executed. For example readline doesn't work, and the output is just:</p>

<pre><code>$ bash &lt; &lt;(curl -s http://mywebsite.com/myscript.txt)
Hello, world!
</code></pre>

<p>Similarly, I've tried:</p>

<pre><code>curl -s http://mywebsite.com/myscript.txt | bash -s --
</code></pre>

<p>With the same results.</p>

<p>Originally I had a solution like:</p>

<pre><code>timestamp=`date +%Y%m%d%H%M%S`
curl -s http://mywebsite.com/myscript.txt -o /tmp/.myscript.${timestamp}.tmp
bash /tmp/.myscript.${timestamp}.tmp
rm -f /tmp/.myscript.${timestamp}.tmp
</code></pre>

<p>But this seems sloppy, and I'd like a more elegant solution.</p>

<p>I'm aware of the security issues regarding running a shell script from a URL, but let's ignore all of that for right now.</p>
","<pre><code>source &lt;(curl -s http://mywebsite.com/myscript.txt)
</code></pre>

<p>ought to do it.  Alternately, leave off the initial redirection on yours, which is redirecting standard input; <code>bash</code> takes a filename to execute just fine without redirection, and <code>&lt;(command)</code> syntax provides a path.</p>

<pre><code>bash &lt;(curl -s http://mywebsite.com/myscript.txt)
</code></pre>

<p>It may be clearer if you look at the output of <code>echo &lt;(cat /dev/null)</code></p>
","5735767"
"Using the RUN instruction in a Dockerfile with 'source' does not work","87586","","<p>I have a Dockerfile that I am putting together to install a vanilla python environment (into which I will be installing an app, but at a later date).</p>

<pre><code>FROM ubuntu:12.04

# required to build certain python libraries
RUN apt-get install python-dev -y

# install pip - canonical installation instructions from pip-installer.org
# http://www.pip-installer.org/en/latest/installing.html
ADD https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py /tmp/ez_setup.py
ADD https://raw.github.com/pypa/pip/master/contrib/get-pip.py /tmp/get-pip.py
RUN python /tmp/ez_setup.py
RUN python /tmp/get-pip.py
RUN pip install --upgrade pip 

# install and configure virtualenv
RUN pip install virtualenv 
RUN pip install virtualenvwrapper
ENV WORKON_HOME ~/.virtualenvs
RUN mkdir -p $WORKON_HOME
RUN source /usr/local/bin/virtualenvwrapper.sh
</code></pre>

<p>The build runs ok until the last line, where I get the following exception:</p>

<pre><code>[previous steps 1-9 removed for clarity]
...
Successfully installed virtualenvwrapper virtualenv-clone stevedore
Cleaning up...
 ---&gt; 1fc253a8f860
Step 10 : ENV WORKON_HOME ~/.virtualenvs
 ---&gt; Running in 8b0145d2c80d
 ---&gt; 0f91a5d96013
Step 11 : RUN mkdir -p $WORKON_HOME
 ---&gt; Running in 9d2552712ddf
 ---&gt; 3a87364c7b45
Step 12 : RUN source /usr/local/bin/virtualenvwrapper.sh
 ---&gt; Running in c13a187261ec
/bin/sh: 1: source: not found
</code></pre>

<p>If I <code>ls</code> into that directory (just to test that the previous steps were committed) I can see that the files exist as expected:</p>

<pre><code>$ docker run 3a87 ls /usr/local/bin
easy_install
easy_install-2.7
pip
pip-2.7
virtualenv
virtualenv-2.7
virtualenv-clone
virtualenvwrapper.sh
virtualenvwrapper_lazy.sh
</code></pre>

<p>If I try just running the <code>source</code> command I get the same 'not found' error as above. If I RUN an interactive shell session however, source does work:</p>

<pre><code>$ docker run 3a87 bash
source
bash: line 1: source: filename argument required
source: usage: source filename [arguments]
</code></pre>

<p>I can run the script from here, and then happily access <code>workon</code>, <code>mkvirtualenv</code> etc.</p>

<p>I've done some digging, and initially it looked as if the problem might lie in the difference between <strong>bash</strong> as the Ubuntu <em>login shell</em>, and <strong>dash</strong> as the Ubuntu <em>system shell</em>, <strong>dash</strong> not supporting the <code>source</code> command.</p>

<p>However, the answer to this appears to be to use <strong>'.'</strong> instead of <code>source</code>, but this just causes the Docker runtime to blow up with a go panic exception.</p>

<p>What is the best way to run a shell script from a Dockerfile RUN instruction to get around this (am running off the default base image for Ubuntu 12.04 LTS).</p>
","<p><code>RUN /bin/bash -c ""source /usr/local/bin/virtualenvwrapper.sh""</code></p>
","25086628"
"Convert command line arguments into an array in Bash","87563","","<p>How do I convert command-line arguments into a bash script array?</p>

<p>I want to take this:</p>

<pre><code>./something.sh arg1 arg2 arg3
</code></pre>

<p>and convert it to </p>

<pre><code>myArray=( arg1 arg2 arg3 )
</code></pre>

<p>so that I can use myArray for further use in the script.</p>

<p>This previous SO post comes close, but doesn't go into how to create an array: <a href=""https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash"">How do I parse command line arguments in Bash?</a></p>

<p>I need to convert the arguments into a regular bash script array; I realize I could use other languages (Python, for instance) but need to do this in bash. I guess I'm looking for an ""append"" function or something similar?</p>

<p>UPDATE: I also wanted to ask how to check for zero arguments and assign a default array value, and thanks to the answer below, was able to get this working:</p>

<pre><code>if [ ""$#"" -eq 0 ]; then
  myArray=( defaultarg1 defaultarg2 )
else
  myArray=( ""$@"" )
fi
</code></pre>
","<p>Actually your command line arguments are <em>practically</em> like an array already. At least, you can treat the <code>$@</code> variable much like an array. That said, you can convert it into an actual array like this:</p>

<pre><code>myArray=( ""$@"" )
</code></pre>

<p>If you just want to type some arguments and feed them into the <code>$@</code> value, use <code>set</code>:</p>

<pre><code>$ set -- apple banana ""kiwi fruit""
$ echo ""$#""
3
$ echo ""$@""
apple banana kiwi fruit
</code></pre>

<p>Understanding how to use the argument structure is particularly useful in POSIX sh, which has nothing else like an array.</p>
","12711837"
"Print a file's last modified date in Bash","87522","","<p>I can't seem to find how to print out the date of a file. I'm so far able to print out all the files in a directory, but I need to print out the dates with it. </p>

<p>I know I need to attach a date format with the echo of the entry, but all I can't find the correct format.</p>

<pre><code>echo ""Please type in the directory you want all the files to be listed""

read directory 

for entry in ""$directory""/*
do
  echo ""$entry""
done
</code></pre>
","<p>You can use the
<a href=""http://linux.die.net/man/1/stat"" rel=""noreferrer""><code>stat</code></a>
command</p>

<pre class=""lang-sh prettyprint-override""><code>stat -c %y ""$entry""
</code></pre>

<p>More info</p>

<pre>
%y   time of last modification, human-readable
</pre>
","16391221"
"Using `date` command to get previous, current and next month","87488","","<p>I am using below to get previous, current and the next month under <code>Ubuntu</code> 11.04:</p>

<pre><code>LAST_MONTH=`date +'%m' -d 'last month'`
NEXT_MONTH=`date +'%m' -d 'next month'`
THIS_MONTH=`date +'%m' -d 'now'`
</code></pre>

<p>It works well until today, the last day of October, 2012 (2012-10-31)</p>

<p>I get below result as of now:</p>

<pre><code>$ date
Wed Oct 31 15:35:26 PDT 2012
$ date +'%m' -d 'last month'
10
$ date +'%m' -d 'now'
10
$ $ date +'%m' -d 'next month'
12
</code></pre>

<p>I suppose the outputs should be <code>9</code>,<code>10</code>,<code>11</code> respectively.</p>

<p>Don't understand why <code>date</code> outputs behave like this. What should be a good way to get consistant <code>previous</code>, <code>current</code> and <code>next</code> month instead?</p>
","<p>The problem is that <code>date</code> takes your request quite literally and tries to use a date of 31st September (being 31st October minus one month) and then because that doesn't exist it moves to the next day which does. The <code>date</code> documentation (from <code>info date</code>) has the following advice:</p>

<blockquote>
  <p>The fuzz in units can cause problems with relative items.  For
  example, `2003-07-31 -1 month' might evaluate to 2003-07-01, because
  2003-06-31 is an invalid date.  To determine the previous month more
  reliably, you can ask for the month before the 15th of the current
  month.  For example:</p>

<pre><code> $ date -R
 Thu, 31 Jul 2003 13:02:39 -0700
 $ date --date='-1 month' +'Last month was %B?'
 Last month was July?
 $ date --date=""$(date +%Y-%m-15) -1 month"" +'Last month was %B!'
 Last month was June!
</code></pre>
</blockquote>
","13168625"
"How to fix Terminal not loading ~/.bashrc on OS X Lion","87295","","<p>Whenever I open a new tab in Terminal using <kbd>Cmd</kbd> + <kbd>T</kbd>, it opens bash in the same directory, as the previous tab. This works fine when I'm in the <code>~</code> directory, but if I'm anywhere else, I get an error loading <code>.bashrc</code></p>

<pre><code>Last login: Sat Oct 15 21:10:00 on ttys002
-bash: .bashrc: No such file or directory
Jakub-Arnolds-MacBook-Pro:projects darth$ 
</code></pre>

<p>It looks like <code>.bashrc</code> is loaded via relative and not absolute path, because if I do <code>source ~/.bashrc</code>, everything works smoothly.</p>

<p><img src=""https://i.stack.imgur.com/bEowZ.jpg"" alt=""loaded bashrc""></p>

<p>I think this is a OS X Lion related problem, because before the upgrade from Snow Leopard, I didn't have the same issue. But that might be caused by Terminal always opening at <code>~</code>, I don't remember if it tried to open the same directory.</p>

<p><strong>However the question remains the same, how can I make Terminal load <code>~/.bashrc</code> via absolute path, and not relative?</strong></p>
","<p>Terminal opens a login shell. This means, <code>~/.bash_profile</code> will get executed, <code>~/.bashrc</code> not.</p>

<p>The solution on most systems is to ""require"" the <code>~/.bashrc</code> in the <code>~/.bash_profile</code>: just put this snippet in your <code>~/.bash_profile</code>:</p>

<pre><code>[[ -s ~/.bashrc ]] &amp;&amp; source ~/.bashrc
</code></pre>
","7780055"
"Use awk to find average of a column","87012","","<p>I'm attempting to find the average of the second column of data using <code>awk</code> for a class. This is my current code, with the framework my instructor provided:</p>

<pre><code>#!/bin/awk

### This script currently prints the total number of rows processed.
### You must edit this script to print the average of the 2nd column
### instead of the number of rows.

# This block of code is executed for each line in the file
{
x=sum
read name
        awk 'BEGIN{sum+=$2}'
        # The script should NOT print out a value for each line
}
# The END block is processed after the last line is read
END {
        # NR is a variable equal to the number of rows in the file
        print ""Average: "" sum/ NR
        # Change this to print the Average instead of just the number of rows
}
</code></pre>

<p>and I'm getting an error that says:</p>

<pre><code>awk: avg.awk:11:        awk 'BEGIN{sum+=$2}' $name
awk: avg.awk:11:            ^ invalid char ''' in expression
</code></pre>

<p>I think I'm close but I really have no idea where to go from here. The code shouldn't be incredibly complex as everything we've seen in class has been fairly basic. Please let me know.</p>
","<pre><code>awk '{ sum += $2; n++ } END { if (n &gt; 0) print sum / n; }'
</code></pre>

<p>Add the numbers in <code>$2</code> (second column) in <code>sum</code> (variables are auto-initialized to zero by <code>awk</code>) and increment the number of rows (which could also be handled via built-in variable NR).  At the end, if there was at least one value read, print the average.</p>

<pre><code>awk '{ sum += $2 } END { if (NR &gt; 0) print sum / NR }'
</code></pre>

<p>If you want to use the shebang notation, you could write:</p>

<pre><code>#!/bin/awk

{ sum += $2 }
END { if (NR &gt; 0) print sum / NR }
</code></pre>

<p>You can also control the format of the average with <code>printf()</code> and a suitable format (<code>""%13.6e\n""</code>, for example).</p>

<p>You can also generalize the code to average the Nth column (with <code>N=2</code> in this sample) using:</p>

<pre><code>awk -v N=2 '{ sum += $N } END { if (NR &gt; 0) print sum / NR }'
</code></pre>
","19149931"
"Check if an element is present in a Bash array","86839","","<p>I was wondering if there is an efficient way to check if an element is present within an array  in Bash? I am looking for something similar to what I can do in Python, like:</p>

<pre><code>arr = ['a','b','c','d']

if 'd' in arr:
    do your thing
else:
    do something
</code></pre>

<p>I've seen solutions using associative array for bash for Bash 4+, but I am wondering if there is another solution out there.</p>

<p>Please understand that I know the trivial solution is to iterate in the array, but I don't want that.</p>
","<p>You could do:</p>

<pre><code>if [[ "" ${arr[*]} "" == *"" d ""* ]]; then
    echo ""arr contains d""
fi
</code></pre>

<p>This will give false positives for example if you look for ""a b"" -- that substring is in the joined string but not as an array element. This dilemma will occur for whatever delimiter you choose.</p>

<p>The safest way is to loop over the array until you find the element:</p>

<pre><code>array_contains () {
    local seeking=$1; shift
    local in=1
    for element; do
        if [[ $element == $seeking ]]; then
            in=0
            break
        fi
    done
    return $in
}

arr=(a b c ""d e"" f g)
array_contains ""a b"" ""${arr[@]}"" &amp;&amp; echo yes || echo no    # no
array_contains ""d e"" ""${arr[@]}"" &amp;&amp; echo yes || echo no    # yes
</code></pre>

<p>Here's a ""cleaner"" version where you just pass the array name, not all its elements</p>

<pre><code>array_contains2 () { 
    local array=""$1[@]""
    local seeking=$2
    local in=1
    for element in ""${!array}""; do
        if [[ $element == $seeking ]]; then
            in=0
            break
        fi
    done
    return $in
}

array_contains2 arr ""a b""  &amp;&amp; echo yes || echo no    # no
array_contains2 arr ""d e""  &amp;&amp; echo yes || echo no    # yes
</code></pre>
","14367368"
"In Bash, how do I add a string after each line in a file?","86691","","<p>How do I add a string after each line in a file using bash? Can it be done using the sed command, if so how?</p>
","<p>If your <code>sed</code> allows in place editing via the <code>-i</code> parameter:</p>

<pre><code>sed -e 's/$/string after each line/' -i filename
</code></pre>

<p>If not, you have to make a temporary file:</p>

<pre><code>typeset TMP_FILE=$( mktemp )

touch ""${TMP_FILE}""
cp -p filename ""${TMP_FILE}""
sed -e 's/$/string after each line/' ""${TMP_FILE}"" &gt; filename
</code></pre>
","2869736"
"How can I write a linux bash script that tells me which computers are ON in my LAN?","86461","","<p>How can I write a linux bash script that tells me which computers are ON in my LAN ?</p>

<p>It would help if I could give it as input a range of IP's.</p>
","<p>I would suggest using nmap's ping-scan flag,</p>

<pre><code>$ nmap -sn 192.168.1.60-70

Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2009-04-09 20:13 BST
Host machine1.home (192.168.1.64) appears to be up.
Host machine2.home (192.168.1.65) appears to be up.
Nmap finished: 11 IP addresses (2 hosts up) scanned in 0.235 seconds
</code></pre>

<p>That said, if you want to write it yourself (which is fair enough), this is how I would do it:</p>

<pre><code>for ip in 192.168.1.{1..10}; do ping -t 1 $ip &gt; /dev/null &amp;&amp; echo ""${ip} is up""; done
</code></pre>

<p>..and an explanation of each bit of the above command:</p>

<h2>Generating list of IP addresses</h2>

<p>You can use the <code>{1..10}</code> syntax to generate a list of numbers, for example..</p>

<pre><code>$ echo {1..10}
1 2 3 4 5 6 7 8 9 10
</code></pre>

<p>(it's also useful for things like <code>mkdir {dir1,dir2}/{sub1,sub2}</code> - which makes <code>dir1</code> and <code>dir2</code>, each containing <code>sub1</code> and <code>sub2</code>)</p>

<p>So, to generate a list of IP's, we'd do something like</p>

<pre><code>$ echo 192.168.1.{1..10}
192.168.1.1 192.168.1.2 [...] 192.168.1.10
</code></pre>

<h2>Loops</h2>

<p>To loop over something in bash, you use <code>for</code>:</p>

<pre><code>$ for thingy in 1 2 3; do echo $thingy; done
1
2
3
</code></pre>

<h2>Pinging</h2>

<p>Next, to ping.. The ping command varies a bit with different operating-systems, different distributions/versions (I'm using OS X currently)</p>

<p>By default (again, on the OS X version of <code>ping</code>) it will ping until interrupted, which isn't going to work for this, so <code>ping -c 1</code> will only try sending one packet, which should be enough to determine if a machine is up.</p>

<p>Another problem is the timeout value, which seems to be 11 seconds on this version of ping.. It's changed using the <code>-t</code> flag. One second should be enough to see if a machine on the local network is alive or not.</p>

<p>So, the ping command we'll use is..</p>

<pre><code>$ ping -c 1 -t 1 192.168.1.1
PING 192.168.1.1 (192.168.1.1): 56 data bytes

--- 192.168.1.1 ping statistics ---
1 packets transmitted, 0 packets received, 100% packet loss
</code></pre>

<h2>Checking ping result</h2>

<p>Next, we need to know if the machine replied or not..</p>

<p>We can use the <code>&amp;&amp;</code> operator to run a command if the first succeeds, for example:</p>

<pre><code>$ echo &amp;&amp; echo ""It works""

It works
$ nonexistantcommand &amp;&amp; echo ""This should not echo""
-bash: nonexistantcommand: command not found
</code></pre>

<p>Good, so we can do..</p>

<p>ping -c 1 -t 1 192.168.1.1 &amp;&amp; echo ""192.168.1.1 is up!""</p>

<p>The other way would be to use the exit code from ping.. The ping command will exit with exit-code 0 (success) if it worked, and a non-zero code if it failed. In bash you get the last commands exit code with the variable <code>$?</code></p>

<p>So, to check if the command worked, we'd do..</p>

<pre><code>ping -c 1 -t 1 192.168.1.1;
if [ $? -eq 0 ]; then
    echo ""192.168.1.1 is up"";
else 
    echo ""ip is down"";
fi
</code></pre>

<h2>Hiding ping output</h2>

<p>Last thing, we don't need to see the ping output, so we can redirect <code>stdout</code> to <code>/dev/null</code> with the <code>&gt;</code> redirection, for example:</p>

<pre><code>$ ping -c 1 -t 1 192.168.1.1 &gt; /dev/null &amp;&amp; echo ""IP is up""
IP is up
</code></pre>

<p>And to redirect <code>stderr</code> (to discard the <code>ping: sendto: Host is down</code> messages), you use <code>2&gt;</code> - for example:</p>

<pre><code>$ errorcausingcommand
-bash: errorcausingcommand: command not found
$ errorcausingcommand 2&gt; /dev/null
$
</code></pre>

<h2>The script</h2>

<p>So, to combine all that..</p>

<pre><code>for ip in 192.168.1.{1..10}; do  # for loop and the {} operator
    ping -c 1 -t 1 192.168.1.1 &gt; /dev/null 2&gt; /dev/null  # ping and discard output
    if [ $? -eq 0 ]; then  # check the exit code
        echo ""${ip} is up"" # display the output
        # you could send this to a log file by using the &gt;&gt;pinglog.txt redirect
    else
        echo ""${ip} is down""
    fi
done
</code></pre>

<p>Or, using the <code>&amp;&amp;</code> method, in a one-liner:</p>

<pre><code>for ip in 192.168.1.{1..10}; do ping -c 1 -t 1 $ip &gt; /dev/null &amp;&amp; echo ""${ip} is up""; done
</code></pre>

<h2>Problem</h2>

<p>It's slow.. Each ping command takes about 1 second (since we set the -t timeout flag to 1 second). It can only run one ping command at a time.. The obvious way around this is to use threads, so you can run concurrent commands, but that's beyond what you should use bash for..</p>

<p><a href=""http://www.wellho.net/solutions/python-python-threads-a-first-example.html"" rel=""noreferrer"">""Python threads - a first example""</a> explains how to use the Python threading module to write a multi-threaded ping'er.. Although at that point, I would once again suggest using <code>nmap -sn</code>..</p>
","735691"
"Getting a 'source: not found' error when using source in a bash script","86400","","<p>I'm trying to write (what I thought would be) a simple bash script that will:</p>

<ol>
<li>run virtualenv to create a new environment at $1</li>
<li>activate the virtual environment</li>
<li>do some more stuff (install django, add django-admin.py to the virtualenv's path, etc.)</li>
</ol>

<p>Step 1 works quite well, but I can't seem to activate the virtualenv. For those not familiar with virtualenv, it creates an <code>activate</code> file that activates the virtual environment. From the CLI, you run it using <code>source</code></p>

<pre><code>source $env_name/bin/activate
</code></pre>

<p>Where $env_name, obviously, is the name of the dir that the virtual env is installed in.</p>

<p>In my script, after creating the virtual environment, I store the path to the activate script like this:</p>

<pre><code>activate=""`pwd`/$ENV_NAME/bin/activate""
</code></pre>

<p>But when I call <code>source ""$activate""</code>, I get this:</p>

<pre><code>/home/clawlor/bin/scripts/djangoenv: 20: source: not found
</code></pre>

<p>I know that <code>$activate</code> contains the correct path to the activate script, in fact I even test that a file is there before I call <code>source</code>. But <code>source</code> itself can't seem to find it. I've also tried running all of the steps manually in the CLI, where everything works fine.</p>

<p>In my research I found <a href=""http://www.doughellmann.com/articles/CompletelyDifferent-2008-05-virtualenvwrapper/Listing1.html"" rel=""noreferrer"">this script</a>, which is similar to what I want but is also doing a lot of other things that I don't need, like storing all of the virtual environments in a ~/.virtualenv directory (or whatever is in $WORKON_HOME). But it seems to me that he is creating the path to <code>activate</code>, and calling <code>source ""$activate""</code> in basically the same way I am.</p>

<p>Here is the script in it's entirety:</p>

<pre><code>#!/bin/sh

PYTHON_PATH=~/bin/python-2.6.1/bin/python

if [ $# = 1 ]
then
    ENV_NAME=""$1""
    virtualenv -p $PYTHON_PATH --no-site-packages $ENV_NAME
    activate=""`pwd`/$ENV_NAME/bin/activate""

    if [ ! -f ""$activate"" ]
    then
        echo ""ERROR: activate not found at $activate""
        return 1
    fi

    source ""$activate""
else
    echo 'Usage: djangoenv ENV_NAME'
fi
</code></pre>

<p>DISCLAIMER: My bash script-fu is pretty weak. I'm fairly comfortable at the CLI, but there may well be some extremely stupid reason this isn't working.</p>
","<p>If you're writing a bash script, call it by name:</p>

<pre><code>#!/bin/bash
</code></pre>

<p>/bin/sh is not guaranteed to be bash. This caused a ton of broken scripts in Ubuntu some years ago (IIRC).</p>

<p>The source builtin works just fine in bash; but you might as well just use dot like Norman suggested.</p>
","670216"
"Bash script to run php script","86329","","<p>I have a php script that I want to be run using a bash script, so I can use Cron to run the php script every minute or so.</p>

<p>As far as I'm aware I need to create the bash script to handle the php script which will then allow me to use the Cron tool/timer.</p>

<p>So far I was told I need to put:</p>

<pre><code>#!/pathtoscript/testphp.php
</code></pre>

<p>at the start of my php script. Im not sure what to do from here...</p>

<p>Any advice? Thanks.</p>
","<p>If you have PHP installed as a command line tool (try issuing <code>php</code> to the terminal and see if it works), your shebang (<code>#!</code>) line needs to look like this:</p>

<pre><code>#!/usr/bin/php
</code></pre>

<p>Put that at the top of your script, make it executable (<code>chmod +x myscript.php</code>), and make a Cron job to execute that script (same way you'd execute a bash script).</p>

<p>You can also use <code>php myscript.php</code>.</p>
","5506958"
"Find all files with a filename beginning with a specified string which may match thousands of files","86310","","<p>I have a directory with roughly 100000 files in it, and I want to perform some function on all files beginning with a specified string, which may match tens of thousands of files.</p>

<p>I have tried</p>

<pre><code>ls mystring*
</code></pre>

<p>but this returns with the bash error 'Too many arguments'.  My next plan was to use</p>

<pre><code>find ./mystring* -type f
</code></pre>

<p>but this has the same issue.  </p>

<p>The code needs to look something like</p>

<pre><code>for FILE in `find ./mystring* -type f`
do
    #Some function on the file
done
</code></pre>

<p>Thanks in advance,
Rik</p>
","<p>use </p>

<pre><code>find . -name 'mystring*'
</code></pre>
","4034907"
"Dynamic variable names in Bash","85953","","<p>I am confused about a bash script.</p>

<p>I have the following code:</p>

<pre><code>function grep_search() {
    magic_way_to_define_magic_variable_$1=`ls | tail -1`
    echo $magic_variable_$1
}
</code></pre>

<p>I want to be able to create a variable name containing the first argument of the command and bearing the value of e.g. the last line of <code>ls</code>.</p>

<p>So to illustrate what I want:</p>

<pre><code>$ ls | tail -1
stack-overflow.txt

$ grep_search() open_box
stack-overflow.txt
</code></pre>

<p>So, how should I define/declare <code>$magic_way_to_define_magic_variable_$1</code> and how should I call it within the script?</p>

<p>I have tried <code>eval</code>, <code>${...}</code>, <code>\$${...}</code>, but I am still confused.</p>
","<p>Use an associative array, with command names as keys.</p>

<pre><code># Requires bash 4, though
declare -A magic_variable=()

function grep_search() {
    magic_variable[$1]=$( ls | tail -1 )
    echo ${magic_variable[$1]}
}
</code></pre>

<p>If you can't use associative arrays (e.g., you must support <code>bash</code> 3), you can use <code>declare</code> to create dynamic variable names:</p>

<pre><code>declare ""magic_variable_$1=$(ls | tail -1)""
</code></pre>

<p>and use indirect parameter expansion to access the value.</p>

<pre><code>var=""magic_variable_$1""
echo ""${!var}""
</code></pre>
","16553351"
"assigning the output of a command to a variable in a shell script","85784","","<p>I am new with unix and I am writing a shell script. </p>

<p>When I run this line on the command prompt, it prints the total count of the number of processes which matches:</p>

<pre><code>ps -ef | awk '/siebsvc –s siebsrvr/ &amp;&amp; !/awk/ { a++ } END { print a }'
</code></pre>

<p>example, the output of the above line is 2 in the command prompt. </p>

<p>I want to write a shell script in which the output of the above line (2) is assigned to a variable, which will be later be used for comparison in an if statement. </p>

<p>I am looking for something like</p>

<pre><code>output= `ps -ef | awk '/siebsvc –s siebsrvr/ &amp;&amp; !/awk/ { a++ } END { print a }'`
echo $output
</code></pre>

<p>But when i run it, it says output could not be found whereas I am expecting 2. Please help.</p>
","<p>You can use a <code>$</code> sign like: </p>

<pre><code>OUTPUT=$(expression)
</code></pre>
","20688600"
"How do I kill a backgrounded/detached ssh session?","85697","","<p>I am using the program synergy together with an ssh tunnel</p>

<p>It works, i just have to open an console an type these two commands:</p>

<pre><code>ssh -f -N -L localhost:12345:otherHost:12345 otherUser@OtherHost
synergyc localhost
</code></pre>

<p>because im lazy i made an Bash-Script which is run with one mouseclick on an icon: </p>

<pre><code>#!/bin/bash
ssh -f -N -L localhost:12345:otherHost:12345 otherUser@OtherHost
synergyc localhost
</code></pre>

<p>the Bash-Script above works as well, but now i also want to kill synergy and the ssh tunnel via one mouseclick, so i have to save the PIDs of synergy and ssh into file to kill them later:</p>

<pre><code>#!/bin/bash

mkdir -p /tmp/synergyPIDs || exit 1
rm -f /tmp/synergyPIDs/ssh || exit 1
rm -f /tmp/synergyPIDs/synergy || exit 1

[ ! -e /tmp/synergyPIDs/ssh ] || exit 1
[ ! -e /tmp/synergyPIDs/synergy ] || exit 1

ssh -f -N -L localhost:12345:otherHost:12345 otherUser@OtherHost
echo $! &gt; /tmp/synergyPIDs/ssh
synergyc localhost
echo $! &gt; /tmp/synergyPIDs/synergy
</code></pre>

<p>But the files of this script are empty.</p>

<p>How do I get the PIDs of ssh and synergy?<br>
(I try to avoid <code>ps aux | grep ... | awk ... | sed ...</code> combinations, there has to be an easier way.)</p>
","<p>well i dont want to add an &amp; at the end of the commands as the connection will die if the console wintow is closed ... so i ended up with an ps-grep-awk-sed-combo</p>

<pre><code>ssh -f -N -L localhost:12345:otherHost:12345   otherUser@otherHost
echo `ps aux | grep -F 'ssh -f -N -L localhost' | grep -v -F 'grep' | awk '{ print $2 }'` &gt; /tmp/synergyPIDs/ssh
synergyc localhost
echo `ps aux | grep -F 'synergyc localhost' | grep -v -F 'grep' | awk '{ print $2 }'` &gt; /tmp/synergyPIDs/synergy
</code></pre>

<p>(you could integrate grep into awk, but im too lazy now)</p>
","1826338"
"Run ssh and immediately execute command","85460","","<p>I'm trying to find UNIX or bash command to run a command after connecting to an ssh server.  For example:</p>

<pre><code>ssh name@ip ""tmux list-sessions""
</code></pre>

<p>The above code works, it lists the sessions, but it then immediately disconnects.  Putting it in the sshrc on the server side works, but I need to be able to type it in client side.  I want to be able to run a command, it logs in, opens up the window, then runs the command I've set. Ive tried </p>

<pre><code>[command] | ssh name@ip

ssh name@ip [command]

ssh name@ip ""[command]""

ssh -t name@ip [command]
</code></pre>
","<pre><code>ssh -t 'command; bash -l'
</code></pre>

<p>will execute the command and then start up a login shell when it completes.</p>
","18522811"
"How to retrieve the first word of the output of a command in bash?","85417","","<p>I have a command, for example: <code>echo ""word1 word2""</code>. I want to put a pipe (<code>|</code>) and get word1 from the command.</p>

<p><code>echo ""word1 word2"" | ....</code></p>

<p>I don't know what to put after the pipe.</p>
","<p>Awk is a good option if you have to deal with trailing whitespace because it'll take care of it for you:</p>

<pre><code>echo ""   word1  word2 "" | awk '{print $1;}' # Prints ""word1""
</code></pre>

<p>Cut won't take care of this though:</p>

<pre><code>echo ""  word1  word2 "" | cut -f 1 -d "" "" # Prints nothing/whitespace
</code></pre>

<p>'cut' here prints nothing/whitespace, because the first thing before a space was another space.</p>
","2440521"
"script to get the HTTP status code of a list of urls?","85400","","<p>I have a list of URLS that I need to check, to see if they still work or not. I would like to write a bash script that does that for me.</p>

<p>I only need the returned HTTP status code, i.e. 200, 404, 500 and so forth.  Nothing more.</p>

<p><em>EDIT</em> Note that there is an issue if the page says ""404 not found"" but returns a 200 OK message. It's a misconfigured webserver, but you may have to consider this case.</p>

<p>For more on this, see <a href=""https://stackoverflow.com/questions/6439993/check-if-a-url-goes-to-a-page-containing-the-text-404"">Check if a URL goes to a page containing the text &quot;404&quot;</a></p>
","<p>Curl has a specific option, <code>--write-out</code>, for this:</p>

<pre><code>$ curl -o /dev/null --silent --head --write-out '%{http_code}\n' &lt;url&gt;
200
</code></pre>

<ul>
<li><code>-o /dev/null</code> throws away the usual output</li>
<li><code>--silent</code> throws away the progress meter</li>
<li><code>--head</code> makes a HEAD HTTP request, instead of GET</li>
<li><code>--write-out '%{http_code}\n'</code> prints the required status code</li>
</ul>

<p>To wrap this up in a complete script:</p>

<pre><code>#!/bin/bash
while read LINE; do
  curl -o /dev/null --silent --head --write-out '%{http_code}' ""$LINE""
  echo "" $LINE""
done &lt; url-list.txt
</code></pre>

<p>(Eagle-eyed readers will notice that this uses one curl process per URL, which imposes fork and TCP connection penalties. It would be faster if multiple URLs were combined in a single curl, but there isn't space to write out the monsterous repetition of options that curl requires to do this.)</p>
","6136861"
"Creating a new user and password with Ansible","85268","","<p>I have an ansible task which creates a new user on ubuntu 12.04;</p>

<pre><code>- name: Add deployment user
    action: user name=deployer password=mypassword
</code></pre>

<p>it completes as expected but when I login as that user and try to sudo with the password I set it always says it's incorrect. What am I doing wrong?</p>
","<p>If you read Ansible's manual for <a href=""http://docs.ansible.com/user_module.html"" rel=""noreferrer""><code>user</code> module</a>, it'll direct you to the Ansible-examples <a href=""https://github.com/ansible/ansible-examples"" rel=""noreferrer"">github repo</a> for details how to use <a href=""https://github.com/ansible/ansible-examples/blob/master/language_features/user_commands.yml"" rel=""noreferrer""><code>password</code> parameter</a>.</p>

<p>There you'll see that your password must be hashed.</p>

<pre><code>- hosts: all
  user: root
  vars:
    # created with:
    # python -c 'import crypt; print crypt.crypt(""This is my Password"", ""$1$SomeSalt$"")'
    password: $1$SomeSalt$UqddPX3r4kH3UL5jq5/ZI.

  tasks:
    - user: name=tset password={{password}}
</code></pre>

<p>If your playbook or ansible command line has your password as-is in plain text, this means your password hash recorded in your <em>shadow</em> file is wrong. That means when you try to authenticate with your password its hash will never match.</p>

<p>Additionally, see Ansible <a href=""http://docs.ansible.com/faq.html#how-do-i-generate-crypted-passwords-for-the-user-module"" rel=""noreferrer"">FAQ</a> regarding some nuances of password parameter and how to correctly use it.</p>
","19318368"
"syntax error near unexpected token `('","84789","","<p>I am trying to execute</p>

<pre><code>sudo -su db2inst1 /opt/ibm/db2/V9.7/bin/db2 force application (1995)
</code></pre>

<p>but I get this error  <code>bash: syntax error near unexpected token</code>('`</p>

<pre><code>sudo -su db2inst1 id
</code></pre>

<p>gives me correct output. So it must be something about the ()</p>

<h1>UPDATE I</h1>

<p>If I try</p>

<pre><code>sudo -su db2inst1 /opt/ibm/db2/V9.7/bin/db2 force application \(1995\)
</code></pre>

<p>I get</p>

<pre><code>/bin/bash: -c: line 0: syntax error near unexpected token `('
/bin/bash: -c: line 0: `/opt/ibm/db2/V9.7/bin/db2 force application (1995)'
</code></pre>

<h1>UPDATE II</h1>

<p>running <code>/opt/ibm/db2/V9.7/bin/db2 force application (1995)</code> as db2inst1 user gives me the same error but running</p>

<pre><code>/opt/ibm/db2/V9.7/bin/db2 ""force application (1995)""
</code></pre>

<p>works fine</p>

<h1>UPDATE III</h1>

<p>the right syntax is</p>

<pre><code>sudo -su db2inst1 '/opt/ibm/db2/V9.7/bin/db2 ""force application (1995)""'
</code></pre>
","<p>Since you've got both the shell that you're typing into and the shell that <code>sudo -s</code> runs, you need to quote or escape twice. (EDITED fixed quoting)</p>

<pre><code>sudo -su db2inst1 '/opt/ibm/db2/V9.7/bin/db2 force application \(1995\)'
</code></pre>

<p>or</p>

<pre><code>sudo -su db2inst1 /opt/ibm/db2/V9.7/bin/db2 force application \\\(1995\\\)
</code></pre>

<p>Out of curiosity, why do you need -s? Can't you just do this:</p>

<pre><code>sudo -u db2inst1 /opt/ibm/db2/V9.7/bin/db2 force application \(1995\)
</code></pre>
","5560203"
"Bash shell scripting - csv parsing","84778","","<p>I am trying to parse a CSV containing potentially 100k+ lines. Here is the criteria I have:</p>

<ol>
<li>The index of the identifier<br></li>
<li>The identifier value</li>
</ol>

<p>I would like to retrieve all lines in the CSV that have the given value in the given index (delimited by commas).</p>

<p>Any ideas, taking in special consideration for performance?</p>
","<p>First prototype using plain old <code>grep</code> and <code>cut</code>:</p>

<pre><code>grep ${VALUE} inputfile.csv | cut -d, -f${INDEX}
</code></pre>

<p>If that's fast enough and gives the proper output, you're done. :)</p>
","1560409"
"Bash or KornShell (ksh)?","84490","","<p>I am not new to *nix, however lately I have been spending a lot of time at the prompt. My question is what are the advantages of using KornShell (ksh) or Bash Shell? Where are the pitfalls of using one over the other? </p>

<p>Looking to understand from the perspective of a user, rather than purely scripting.</p>
","<p>Bash. </p>

<p>The various UNIX and Linux implementations have various different source level implementations of ksh, some of which are real ksh, some of which are pdksh implementations and some of which are just symlinks to some other shell that has a ""ksh"" personality. This can lead to weird differences in execution behavior.</p>

<p>At least with bash you can be sure that it's a single code base, and all you need worry about is what (usually minimum) version of bash is installed. Having done a lot of scripting on pretty much every modern (and not-so-modern) UNIX, programming to bash is more reliably consistent in my experience.</p>
","76829"
"How to make GREP select only numeric values?","84023","","<p>I use the <code>df</code> command in a bash script:</p>

<pre><code>df . -B MB | tail -1 | awk {'print $4'} | grep  .[0-9]*
</code></pre>

<p>This script returns:</p>

<pre><code>99%
</code></pre>

<p>But I need only numbers (to make the next comparison).
If I use the <code>grep</code> regex without the dot:</p>

<pre><code>df . -B MB | tail -1 | awk {'print $4'} | grep  .[0-9]*
</code></pre>

<p>I receive nothing.
How to fix?</p>
","<p>If you try:</p>

<pre><code> echo ""99%"" |grep -o '[0-9]*'
</code></pre>

<p>It returns:</p>

<pre><code>99
</code></pre>

<hr>

<p>Here's the details on the <code>-o</code> (or <code>--only-matching</code> flag) works from the <a href=""https://www.gnu.org/software/grep/manual/grep.html"" rel=""nofollow noreferrer"">grep manual page</a>.</p>

<blockquote>
  <p>Print only the matched (non-empty) parts of matching lines, with each such part on a separate output line. Output lines use the same delimiters as input, and delimiters are null bytes if -z (--null-data) is also used (see <a href=""https://www.gnu.org/software/grep/manual/grep.html#Other-Options"" rel=""nofollow noreferrer"">Other Options</a>).</p>
</blockquote>
","8402977"
"How do I timestamp every ping result?","84003","","<p><a href=""https://en.wikipedia.org/wiki/Ping_%28networking_utility%29"" rel=""noreferrer"">Ping</a> returns this by default:</p>

<pre><code>64 bytes from 203.173.50.132: icmp_seq=0 ttl=244 time=57.746 ms
</code></pre>

<p>Is there some way I can get it to add the timestamp?</p>

<p>For example,</p>

<pre><code>Mon 21 May 2012 15:15:37 EST | 64 bytes from 203.173.50.132: icmp_seq=0 ttl=244 time=57.746 ms
</code></pre>

<p>I'm on OS&nbsp;X&nbsp;v10.7 (Lion) which seems to have some <a href=""https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"" rel=""noreferrer"">BSD</a> version of ping.</p>
","<p>If your AWK doesn't have <code>strftime()</code>:</p>

<pre><code>ping host | perl -nle 'print scalar(localtime), "" "", $_'
</code></pre>

<p>To redirect it to a file, use standard shell redirection and turn off output buffering:</p>

<pre><code>ping host | perl -nle 'BEGIN {$|++} print scalar(localtime), "" "", $_' &gt; outputfile
</code></pre>

<p>If you want ISO8601 format for the timestamp:</p>

<pre><code>ping host | perl -nle 'use Time::Piece; BEGIN {$|++} print localtime-&gt;datetime, "" "", $_' &gt; outputfile
</code></pre>
","10680148"
"Move all files except one","83980","","<p>How can I move all files except one? I am looking for something like: </p>

<pre><code>'mv ~/Linux/Old/!Tux.png ~/Linux/New/'
</code></pre>

<p>where I move old stuff to new stuff -folder except <code>Tux.png</code>. !-sign represents a negation. Is there some tool for the job?</p>
","<p>Put the following to your .bashrc </p>

<pre><code>shopt -s extglob
</code></pre>

<p>It extends regexes.
You can then move all files except one by</p>

<pre><code>mv !(fileOne) ~/path/newFolder
</code></pre>

<h2>Exceptions in relation to other commands</h2>

<p>Note that, in copying directories, the forward-flash cannot be used in the name as noticed in the thread <a href=""https://stackoverflow.com/a/31597198/54964"">Why extglob except breaking except condition?</a>:</p>

<pre><code>cp -r !(Backups.backupdb) /home/masi/Documents/
</code></pre>

<p>so <code>Backups.backupdb/</code> is wrong here before the negation and I would not use it neither in moving directories because of the risk of using wrongly then globs with other commands and possible other exceptions.</p>
","789029"
"How can I repeat a character in bash?","83950","","<p>How could I do this with <code>echo</code>?</p>

<pre class=""lang-sh prettyprint-override""><code>perl -E 'say ""="" x 100'
</code></pre>
","<p>You can use:</p>

<pre><code>printf '=%.0s' {1..100}
</code></pre>

<p>How this works:</p>

<p>Bash expands {1..100} so the command becomes:</p>

<pre><code>printf '=%.0s' 1 2 3 4 ... 100
</code></pre>

<p>I've set printf's format to <code>=%.0s</code> which means that it will always print a single <code>=</code> no matter what argument it is given. Therefore it prints 100 <code>=</code>s.</p>
","5349842"
"How do you normalize a file path in Bash?","83721","","<p>I want to transform <code>/foo/bar/..</code> to <code>/foo</code></p>

<p>Is there a bash command which does this?</p>

<hr>

<p>Edit: in my practical case, the directory does exist.</p>
","<p>if you're wanting to chomp part of a filename from the path, ""dirname"" and ""basename"" are your friends, and ""realpath"" is handy too. </p>

<pre><code>dirname /foo/bar/baz 
# /foo/bar 
basename /foo/bar/baz
# baz
dirname $( dirname  /foo/bar/baz  )) 
# /foo 
realpath ../foo
# ../foo: No such file or directory
realpath /tmp/../tmp/../tmp
# /tmp
</code></pre>

<p><b>Edit</b></p>

<p>Realpath appears not to be standard issue. </p>

<p>The closest you can get with the stock standard is </p>

<pre><code>readlink -f  /path/here/.. 
</code></pre>

<p>Realpath appears to come from debian, and is not part of coreutils: 
 <a href=""http://packages.debian.org/unstable/utils/realpath"" rel=""noreferrer"">http://packages.debian.org/unstable/utils/realpath</a>
Which was originally part of the DWWW package. </p>

<p>( also available on gentoo as app-admin/realpath ) </p>

<pre><code>readlink -m /path/there/../../ 
</code></pre>

<p>Works the same as </p>

<pre><code> realpath -s /path/here/../../
</code></pre>

<p>in that it doesn't need the path to actually exist to normalise it. </p>
","284671"
"About .bash_profile, .bashrc, and where should alias be written in?","83534","","<blockquote>
  <p><strong>Possible Duplicate:</strong>
  <a href=""https://stackoverflow.com/questions/415403/whats-the-difference-between-bashrc-bash-profile-and-environment"">What&#39;s the difference between .bashrc, .bash_profile, and .environment?</a></p>
</blockquote>



<p>It seems that if I use</p>

<pre><code>alias ls='ls -F'
</code></pre>

<p>inside of .bashrc on Mac OS X, then the newly created shell will not have that alias. I need to type <code>bash</code> again and that alias will be in effect.</p>

<p>And if I log into Linux on the hosting company, the <code>.bashrc</code> file has a comment line that says:</p>

<blockquote>
  <p>For non-login shell</p>
</blockquote>

<p>and the <code>.bash_profile</code> file has a comment that says</p>

<blockquote>
  <p>for login shell</p>
</blockquote>

<p>So where should aliases be written in? How come we separate the login shell and non-login shell?</p>

<p>Some webpage say use <code>.bash_aliases</code>, but it doesn't work on Mac OS X, it seems.</p>
","<p>The reason you separate the <em>login</em> and <em>non-login</em> shell is because the <code>.bashrc</code> file is reloaded every time you start a new copy of Bash. The <code>.profile</code> file is loaded only when you either log in or use the appropriate flag to tell Bash to act as a login shell.</p>

<p>Personally,</p>

<ul>
<li>I put my <code>PATH</code> setup into a <code>.profile</code> file (because I sometimes use other shells);</li>
<li>I put my Bash aliases and functions into my <code>.bashrc</code> file;</li>
<li><p>I put this</p>

<pre><code>#!/bin/bash
#
# CRM .bash_profile Time-stamp: ""2008-12-07 19:42""
#
# echo ""Loading ${HOME}/.bash_profile""
source ~/.profile # get my PATH setup
source ~/.bashrc  # get my Bash aliases
</code></pre>

<p>in my <code>.bash_profile</code> file.</p></li>
</ul>

<p>Oh, and the reason you need to type <code>bash</code> again to get the new alias is that Bash loads your <code>.bashrc</code> file when it starts but it doesn't reload it unless you tell it to. You can reload the <code>.bashrc</code> file (and not need a second shell) by typing</p>

<pre><code>source ~/.bashrc
</code></pre>

<p>which loads the <code>.bashrc</code> file as if you had typed the commands directly to Bash.</p>
","902955"
"Delete all local git branches","83443","","<p>I follow a development process where I create a new local branch for every new feature or story card. When finished I merge the branch into master and then push. </p>

<p>What tends to happen over time due to a combination of laziness or forgetfulness, is that I end up with a large list of local branches, some of which (such as spikes) may not have been merged.</p>

<p>I know how to list all my local branches and I know how to remove a single branch but I was wondering if there was a git command that allows me to delete all my local branches?</p>

<p>Below is the output of the <code>git branch --merged</code> command.</p>

<pre><code>user@machine:~/projects/application[master]$ git branch --merged
  STORY-123-Short-Description
  STORY-456-Another-Description
  STORY-789-Blah-Blah
* master
</code></pre>

<p>All attempts to delete branches listed with <code>grep -v \*</code> (as per the answers below) result in errors:</p>

<pre><code>error: branch 'STORY-123-Short-Description' not found.
error: branch 'STORY-456-Another-Description' not found.
error: branch 'STORY-789-Blah-Blah' not found.
</code></pre>

<p>I'm using:<br>
git 1.7.4.1<br>
ubuntu 10.04<br>
GNU bash, version 4.1.5(1)-release<br>
GNU grep 2.5.4  </p>
","<p>Just a note, I would upgrade to git 1.7.10. You may be getting answers here that won't work on your version. My guess is that you would have to prefix the branch name with <code>refs/heads/</code>.</p>

<p><strong>CAUTION, proceed with the following only if you made a copy of your working folder and .git directory.</strong></p>

<p>I sometimes just go ahead and delete the branches I don't want straight from <code>.git/refs/heads</code>. All these branches are text files that contain the 40 character sha-1 of the commit they point to. You will have extraneous information in your <code>.git/config</code> if you had specific tracking set up for any of them. You can delete those entries manually as well.</p>
","10611079"
"Extract substring using regexp in plain bash","83443","","<p>I'm trying to extract the time from a string using bash, and I'm having a hard time figuring it out.</p>

<p>My string is like this:</p>

<pre><code>US/Central - 10:26 PM (CST)
</code></pre>

<p>And I want to extract the <code>10:26</code> part.</p>

<p>Anybody knows of a way of doing this only with bash - without using sed, awk, etc?</p>

<p>Like, in PHP I would use - not the best way, but it works - something like:</p>

<pre><code>preg_match( """"(\d{2}\:\d{2}) PM \(CST\)"""", ""US/Central - 10:26 PM (CST)"", $matches );
</code></pre>

<p>Thanks for any help, even if the answer uses sed or awk</p>
","<p>Using pure <a href=""/questions/tagged/bash"" class=""post-tag"" title=""show questions tagged &#39;bash&#39;"" rel=""tag"">bash</a> :</p>

<pre><code>$ cat file.txt
US/Central - 10:26 PM (CST)
$ while read a b time x; do [[ $b == - ]] &amp;&amp; echo $time; done &lt; file.txt
</code></pre>

<p>another solution with bash regex :</p>

<pre><code>$ [[ ""US/Central - 10:26 PM (CST)"" =~ -[[:space:]]*([0-9]{2}:[0-9]{2}) ]] &amp;&amp;
    echo ${BASH_REMATCH[1]}
</code></pre>

<p>another solution using <code>grep</code> and look-around advanced regex :</p>

<pre><code>$ echo ""US/Central - 10:26 PM (CST)"" | grep -oP ""\-\s+\K\d{2}:\d{2}""
</code></pre>

<p>another solution using sed :</p>

<pre><code>$ echo ""US/Central - 10:26 PM (CST)"" |
    sed 's/.*\- *\([0-9]\{2\}:[0-9]\{2\}\).*/\1/'
</code></pre>

<p>another solution using perl :</p>

<pre><code>$ echo ""US/Central - 10:26 PM (CST)"" |
    perl -lne 'print $&amp; if /\-\s+\K\d{2}:\d{2}/'
</code></pre>

<p>and last one using awk :</p>

<pre><code>$ echo ""US/Central - 10:26 PM (CST)"" |
    awk '{for (i=0; i&lt;=NF; i++){if ($i == ""-""){print $(i+1);exit}}}'
</code></pre>
","13373256"
"How to remove carriage return from a string in Bash","83309","","<p>I have the following variable.</p>

<pre><code>echo ""|$COMMAND|""
</code></pre>

<p>which returns </p>

<pre><code>|
REBOOT|
</code></pre>

<p>How can I remove that first carriage return?</p>
","<pre><code>echo ""|$COMMAND|""|tr '\n' ' '
</code></pre>

<p>will replace the newline (in POSIX/Unix it's not a carriage return) with a space.</p>

<p>To be honest I would think about switching away from bash to something more sane though. Or avoiding generating this malformed data in the first place.</p>

<p>Hmmm, this seems like it could be a horrible security hole as well, depending on where the data is coming from.</p>
","19345906"
"What are the differences between using the terminal on a mac vs linux?","83277","","<p>I've been using Ubuntu for the last four years.<br>
I have a basic knowledge of shell commands and I prefer working in a terminal rather than using a GUI. Recently I've started using a Mac.  </p>

<p>I've tried a few terminal commands (that I use on Ubuntu) in the Mac terminal and it seems to respond in mostly the same way.</p>

<p>Are there any significant differences in the commands I use, the task(s) they perform or the shell environment that I should be aware of?</p>
","<p>If you did a new or clean install of OS X version 10.3 or more recent, the default user terminal shell is bash.  </p>

<p>Bash is essentially an enhanced and GNU freeware version of the original Bourne shell, sh. If you have previous experience with bash (often the default on GNU/Linux installations), this makes the OS X command-line experience familiar, otherwise consider switching your shell either to tcsh or to zsh, as some find these more user-friendly.  </p>

<p>If you upgraded from or use OS X version 10.2.x, 10.1.x or 10.0.x, the default user shell is tcsh, an enhanced version of csh('c-shell'). Early implementations were a bit buggy and the programming syntax a bit weird so it developed a bad rap.</p>

<p>There are still some fundamental differences between mac and linux as Gordon Davisson so aptly lists, for example no <code>useradd</code> on Mac and <code>ifconfig</code> works differently.</p>

<p>The following table is useful for knowing the various unix shells.</p>

<pre><code>sh      The original Bourne shell   Present on every unix system 
ksh     Original Korn shell         Richer shell programming environment than sh 
csh     Original C-shell            C-like syntax; early versions buggy 
tcsh    Enhanced C-shell            User-friendly and less buggy csh implementation 
bash    GNU Bourne-again shell      Enhanced and free sh implementation 
zsh     Z shell                     Enhanced, user-friendly ksh-like shell
</code></pre>

<p>You may also find these guides helpful: </p>

<p><strong><a href=""http://homepage.mac.com/rgriff/files/TerminalBasics.pdf"" rel=""noreferrer"">http://homepage.mac.com/rgriff/files/TerminalBasics.pdf</a></strong></p>

<p><a href=""http://guides.macrumors.com/Terminal"" rel=""noreferrer"">http://guides.macrumors.com/Terminal</a><br>
<a href=""http://www.ofb.biz/safari/article/476.html"" rel=""noreferrer"">http://www.ofb.biz/safari/article/476.html</a></p>

<p>On a final note, I am on Linux (Ubuntu 11) and Mac osX so I use bash and the thing I like the most is customizing the .bashrc (source'd from <code>.bash_profile</code> on OSX) file with aliases, some examples below.
I now placed all my aliases in a separate .bash_aliases file and include it with:  </p>

<pre><code>if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi
</code></pre>

<p>in the .bashrc or .bash_profile file.  </p>

<p>Note that this is an example of a mac-linux difference because <strong>on a Mac you can't have the <code>--color=auto</code></strong>.  The first time I did this (without knowing) I redefined <code>ls</code> to be invalid which was a bit alarming until I removed <code>--auto-color</code> !</p>

<p>You may also find <a href=""https://unix.stackexchange.com/q/127799/10043"">https://unix.stackexchange.com/q/127799/10043</a> useful</p>

<pre><code># ~/.bash_aliases
# ls variants
#alias l='ls -CF' 
alias la='ls -A' 
alias l='ls -alFtr' 
alias lsd='ls -d .*' 
# Various
alias h='history | tail'
alias hg='history | grep'
alias mv='mv -i' 
alias zap='rm -i'
# One letter quickies:
alias p='pwd'
alias x='exit'
alias {ack,ak}='ack-grep'
# Directories
alias s='cd ..'
alias play='cd ~/play/'
# Rails
alias src='script/rails console'
alias srs='script/rails server'
alias raked='rake db:drop db:create db:migrate db:seed' 
alias rvm-restart='source '\''/home/durrantm/.rvm/scripts/rvm'\'''
alias rrg='rake routes | grep '
alias rspecd='rspec --drb '
#
# DropBox - syncd
WORKBASE=""~/Dropbox/97_2012/work""
alias work=""cd $WORKBASE""
alias code=""cd $WORKBASE/ror/code""
#
# DropNot - NOT syncd !
WORKBASE_GIT=""~/Dropnot""
alias {dropnot,not}=""cd $WORKBASE_GIT""
alias {webs,ww}=""cd $WORKBASE_GIT/webs""
alias {setups,docs}=""cd $WORKBASE_GIT/setups_and_docs""
alias {linker,lnk}=""cd $WORKBASE_GIT/webs/rails_v3/linker""
#
# git
alias {gsta,gst}='git status' 
# Warning: gst conflicts with gnu-smalltalk (when used).
alias {gbra,gb}='git branch'
alias {gco,go}='git checkout'
alias {gcob,gob}='git checkout -b '
alias {gadd,ga}='git add '
alias {gcom,gc}='git commit'
alias {gpul,gl}='git pull '
alias {gpus,gh}='git push '
alias glom='git pull origin master'
alias ghom='git push origin master'
alias gg='git grep '
#
# vim
alias v='vim'
#
# tmux
alias {ton,tn}='tmux set -g mode-mouse on'
alias {tof,tf}='tmux set -g mode-mouse off'
#
# dmc
alias {dmc,dm}='cd ~/Dropnot/webs/rails_v3/dmc/'
alias wf='cd ~/Dropnot/webs/rails_v3/dmc/dmWorkflow'
alias ws='cd ~/Dropnot/webs/rails_v3/dmc/dmStaffing'
</code></pre>
","8051196"
"How to get $HOME directory of different user in bash script?","82979","","<p>I need to execute part of a bash script as a different user, and inside that user's <code>$HOME</code> directory. However, I'm not sure how to determine this variable. Switching to that user and calling <code>$HOME</code> does not provide the correct location:</p>

<pre><code># running script as root, but switching to a different user...
su - $different_user
echo $HOME
# returns /root/ but should be /home/myuser
</code></pre>

<h3>Update:</h3>

<p>It appears that the issue is with the way that I am trying to switch users in my script:</p>

<pre><code>$different_user=deploy

# create user
useradd -m -s /bin/bash $different_user

echo ""Current user: `whoami`""
# Current user: root

echo ""Switching user to $different_user""
# Switching user to deploy

su - $different_user
echo ""Current user: `whoami`""
# Current user: root
echo ""Current user: `id`""
# Current user: uid=0(root) gid=0(root) groups=0(root)

sudo su $different_user
# Current user: root
# Current user: uid=0(root) gid=0(root) groups=0(root)
</code></pre>

<p>What is the correct way to switch users and execute commands as a different user in a bash script?</p>
","<p><strong>Update</strong>: Based on this question's title, people seem to come here <strong>just looking for a way to <em>find</em> a different user's home directory, without the need to <em>impersonate</em> that user</strong>.  </p>

<p>In that case, the simplest solution is to use <strong><a href=""https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html"" rel=""noreferrer"">tilde expansion</a> with the username of interest, combined with <code>eval</code></strong> (which is needed, because the username must be given as an <em>unquoted literal</em> in order for tilde expansion to work):</p>

<pre><code>eval echo ""~$different_user""    # prints $different_user's home dir.
</code></pre>

<p>Note: The <strong>usual <a href=""http://mywiki.wooledge.org/BashFAQ/048"" rel=""noreferrer"">caveats regarding the use of <code>eval</code></a> apply</strong>; in this case, the assumption is that you control the value of <code>$different_user</code> and know it to be a mere username.</p>

<p>By contrast, the remainder of this answer deals with <strong><em>impersonating</em> a user <em>and</em> performing operations <em>in that user's home directory</em></strong>.</p>

<hr>

<p>Note:</p>

<ul>
<li>Administrators by default and other users if authorized via the <code>sudoers</code> file can impersonate other users via <code>sudo</code>.</li>
<li>The following is based on the <em>default</em> configuration of <code>sudo</code> - changing its configuration can make it behave differently - see <code>man sudoers</code>.</li>
</ul>

<p>The <strong>basic form</strong> of executing a command as another user is:</p>

<pre><code>sudo -H -u someUser someExe [arg1 ...]
  # Example:
sudo -H -u root env  # print the root user's environment
</code></pre>

<p>Note:</p>

<ul>
<li><strong>If you neglect to specify <code>-H</code>, the impersonating process (the process invoked in the context of the specified user) will report the <em>original</em> user's home directory in <code>$HOME</code>.</strong> </li>
<li>The impersonating process will have the same working directory as the invoking process.</li>
<li>The impersonating process performs <strong>no shell expansions</strong> on string literals passed as arguments, since no shell is involved in the impersonating process (unless <code>someExe</code> happens to be a shell) - expansions by the <em>invoking</em> shell - prior to passing to the impersonating process - can obviously still occur.</li>
</ul>

<p>Optionally, you can have an impersonating process <strong>run as or via a(n impersonating) shell</strong>, by prefixing <code>someExe</code> either with <code>-i</code> <strong>or</strong> <code>-s</code> - not specifying <code>someExe ...</code> creates an <strong>interactive</strong> shell:</p>

<ul>
<li><p><code>-i</code> creates a <strong>login</strong> shell for <code>someUser</code>, which implies the following:</p>

<ul>
<li><code>someUser</code>'s <em>user-specific shell profile, if defined, is loaded</em>.</li>
<li><code>$HOME</code> points to <code>someUser</code>'s home directory, so there's <strong>no need for <code>-H</code></strong> (though you may still specify it)</li>
<li>The working directory for the impersonating shell is the <code>someUser</code>'s home directory.  </li>
</ul></li>
<li><p><code>-s</code> creates a non-login shell:</p>

<ul>
<li>no shell <em>profile</em> is loaded (though initialization files for interactive <em>nonlogin</em> shells are; e.g., <code>~/.bashrc</code>)</li>
<li><strong>Unless you also specify <code>-H</code>, the impersonating process will report the <em>original</em> user's home directory in <code>$HOME</code>.</strong>   </li>
<li>The impersonating shell will have the same working directory as the invoking process.</li>
</ul></li>
</ul>

<p>Using a shell means that string arguments passed on the command line MAY be <strong>subject to shell expansions</strong> - <em>see platform-specific differences below</em> - by the impersonating shell (possibly after initial expansion by the invoking shell); compare the the following two commands (which use <em>single</em> quotes to prevent premature expansion by the <em>invoking</em> shell):</p>

<pre><code>  # Run root's shell profile, change to root's home dir.
sudo -u root -i eval 'echo $SHELL - $USER - $HOME - $PWD'
  # Don't run root's shell profile, use current working dir.
  # Note the required -H to define $HOME as root`s home dir.
sudo -u root -H -s eval 'echo $SHELL - $USER - $HOME - $PWD'
</code></pre>

<p><strong>What shell</strong> is invoked is determined by ""the SHELL environment variable if it is set or the shell as specified in passwd(5)"" (according to <code>man sudo</code>). Note that with <code>-s</code> it is the <em>invoking</em> user's environment that matters, whereas with <code>-i</code> it is the <em>impersonated</em> user's.</p>

<p>Note that there are <strong>platform differences regarding shell-related behavior (with <code>-i</code> or <code>-s</code>)</strong>:</p>

<ul>
<li><p><strong><code>sudo</code> on Linux apparently only accepts an <em>executable or builtin</em> name as the <em>first</em> argument following <code>-s</code>/<code>-i</code></strong>, whereas OSX allows passing an entire shell command line; e.g., OSX accepts <code>sudo -u root -s 'echo $SHELL - $USER - $HOME - $PWD'</code> directly (no need for <code>eval</code>), whereas Linux doesn't (as of <code>sudo 1.8.95p</code>).</p></li>
<li><p><strong>Older versions of <code>sudo</code> on Linux do NOT apply shell expansions to arguments passed to a shell</strong>; for instance, with <code>sudo 1.8.3p1</code> (e.g., Ubuntu 12.04), <code>sudo -u root -H -s echo '$HOME'</code> simply echoes the string literal ""$HOME"" instead of expanding the variable reference in the context of the root user. As of at least <code>sudo 1.8.9p5</code> (e.g., Ubuntu 14.04) this has been fixed. Therefore, to ensure expansion on Linux even with older <code>sudo</code> versions, pass the the entire command as a single argument to <code>eval</code>; e.g.: <code>sudo -u root -H -s eval 'echo $HOME'</code>. (Although not necessary on OSX, this will work there, too.)</p></li>
<li><p>The <code>root</code> user's <code>$SHELL</code> variable contains <code>/bin/sh</code> on OSX 10.9, whereas it is <code>/bin/bash</code> on Ubuntu 12.04.</p></li>
</ul>

<p>Whether the impersonating process involves a shell or not, its environment will have the following variables set, reflecting the invoking user and command: <code>SUDO_COMMAND</code>, <code>SUDO_USER</code>, <code>SUDO_UID=</code>, <code>SUDO_GID</code>.</p>

<p>See <code>man sudo</code> and <code>man sudoers</code> for many more subtleties.</p>

<p>Tip of the hat to  @DavidW and @Andrew for inspiration.</p>
","20506895"
"Looping over arrays, printing both index and value","82713","","<p>I want to do something like this:</p>

<pre><code>foo=( )
foo[0]=""bar""
foo[35]=""baz""
for((i=0;i&lt;${#foo[@]};i++))
do
    echo ""$i: ${foo[$i]}""
done
# Output:
# 0: bar
# 1: 
</code></pre>

<p>Then i tried to loop through it using for in:</p>

<pre><code>foo=( )
foo[0]=""bar""
foo[35]=""baz""
for i in ${foo[@]}
do
    echo ""?: $i""
done
# Output:
# ?: bar
# ?: naz
</code></pre>

<p>but here I don't know the index value.</p>

<p>I know you could something like</p>

<pre><code>foo=( )
foo[0]=""bar""
foo[35]=""baz""
declare -p foo
# Output:
# declare -a foo='([0]=""bar"" [35]=""baz"")'
</code></pre>

<p>but, can't you do it in another way?</p>
","<p>You would find the array keys with <code>""${!foo[@]}""</code> (<a href=""http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion"" rel=""noreferrer"">reference</a>), so:</p>

<pre><code>for i in ""${!foo[@]}""; do 
  printf ""%s\t%s\n"" ""$i"" ""${foo[$i]}""
done
</code></pre>
","6723516"
"Calling one Bash script from another Script passing it arguments with quotes and spaces","82676","","<h3>I made two test bash scripts on Linux to make the problem clear.</h3>

<em>TestScript1 looks like:</em>

<pre><code>    echo ""TestScript1 Arguments:""
    echo ""$1""
    echo ""$2""
    echo ""$#""
    ./testscript2 $1 $2
</code></pre>

<em>TestScript2 looks like:</em>

<pre><code>    echo ""TestScript2 Arguments received from TestScript1:""
    echo ""$1""
    echo ""$2""
    echo ""$#""
</code></pre>

<em>When i execute testscript1 in the following way:</em>

<pre><code>    ./testscript1 ""Firstname Lastname"" testmail@domain.com  
</code></pre>

<em>The desired Output should be:</em>

<pre><code>    TestScript1 Arguments:  
    Firstname Lastname  
    testmail@domain.com  
    2
    TestScript2 Arguments received from TestScript1:  
    Firstname Lastname  
    testmail@domain.com  
    2  
</code></pre>

<em>But the actual output is:</em>

<pre><code>    TestScript1 Arguments:  
    Firstname Lastname  
    testmail@domain.com  
    2
    TestScript2 Arguments received from TestScript1:  
    Firstname
    Lastname      
    3  
</code></pre>

<p>How do i solve this problem? I want to get the desired output instead of the actual output. </p>
","<p>Quote your args in Testscript 1:</p>

<pre><code>echo ""TestScript1 Arguments:""
echo ""$1""
echo ""$2""
echo ""$#""
./testscript2 ""$1"" ""$2""
</code></pre>
","16988487"
"differences among grep, awk and sed","82491","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/366980/what-are-the-differences-between-perl-python-awk-and-sed"">What are the differences between Perl, Python, AWK and sed?</a><br>
  <a href=""https://stackoverflow.com/questions/1632113/what-is-the-difference-between-sed-and-awk"">What is the difference between sed and awk?</a>  </p>
</blockquote>



<p>Maybe not a very specific question, but I am confused about the differences between <code>grep</code>, <code>awk</code> and <code>sed</code> in terms of their role in Unix/Linux system administration and text processing. </p>
","<p>Short definition:</p>

<p><code>grep</code>: search for specific terms in a file</p>

<pre><code>#usage
$ grep This file.txt
Every line containing ""This""
Every line containing ""This""
Every line containing ""This""
Every line containing ""This""

$ cat file.txt
Every line containing ""This""
Every line containing ""This""
Every line containing ""That""
Every line containing ""This""
Every line containing ""This""
</code></pre>

<p>Now <code>awk</code> and <code>sed</code> are completly different than <code>grep</code>.
<code>awk</code> and <code>sed</code> are text processors. Not only do they have the ability to find what you are looking for in text, they have the ability to remove, add and modify the text as well (and much more). <br></p>

<p><code>awk</code> is mostly used for data extraction and reporting. <code>sed</code> is a stream editor<br>
Each one of them has its own functionality and specialties. </p>

<p>Example <br>
Sed<br></p>

<pre><code>$ sed -i 's/cat/dog/' file.txt
# this will replace any occurrence of the characters 'cat' by 'dog'
</code></pre>

<p>Awk<br></p>

<pre><code>$ awk '{print $2}' file.txt
# this will print the second column of file.txt
</code></pre>

<p>Basic <code>awk</code> usage:<br>
Compute sum/average/max/min/etc. what ever you may need.<br></p>

<pre><code>$ cat file.txt
A 10
B 20
C 60
$ awk 'BEGIN {sum=0; count=0; OFS=""\t""} {sum+=$2; count++} END {print ""Average:"", sum/count}' file.txt
Average:    30
</code></pre>

<p>I recommend that you read this book: <a href=""http://rads.stackoverflow.com/amzn/click/1565922255"">Sed &amp; Awk: 2nd Ed.</a></p>

<p>It will help you become a proficient sed/awk user on any unix-like environment.</p>
","7727894"
"Only mkdir if it does not exist","82474","","<p>In my bash script I do:</p>

<pre><code>mkdir product;
</code></pre>

<p>When I run the script more than once I get:</p>

<pre><code>mkdir: product: File exists
</code></pre>

<p>In the console.</p>

<p>So I am looking to only run mkdir if the dir doesn't exist.  Is this possible?</p>
","<p>Do a test</p>

<pre><code>[[ -d dir ]] || mkdir dir
</code></pre>

<p>Or use -p option:</p>

<pre><code>mkdir -p dir
</code></pre>
","18622925"
"How can I see the current value of my $PATH variable on OS X?","82177","","<blockquote>
  <p>$ $PATH</p>
</blockquote>

<p>returns:</p>

<blockquote>
  <p>-bash: /usr/local/share/npm/bin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/local/sbin:~/bin:/Library/Frameworks/Python.framework/Versions/Current/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/git/bin: No such file or directory</p>
</blockquote>

<p>This seems quite ugly and might be <a href=""https://stackoverflow.com/questions/14616981/homebrew-install-issues"">giving me issues</a> with getting Homebrew up and running as well.</p>
","<p>You need to use the command <code>echo $PATH</code> to display the PATH variable or you can just execute <code>set</code> or <code>env</code> to display all of your environment variables.</p>

<p>By typing <code>$PATH</code> you tried to run your PATH variable contents as a command name.</p>

<p>Bash displayed the contents of your path any way.  Based on your output the following directories will be searched in the following order:</p>

<pre><code>/usr/local/share/npm/bin
/Library/Frameworks/Python.framework/Versions/2.7/bin
/usr/local/bin
/usr/local/sbin
~/bin
/Library/Frameworks/Python.framework/Versions/Current/bin
/usr/bin
/bin
/usr/sbin
/sbin
/usr/local/bin
/opt/X11/bin
/usr/local/git/bin
</code></pre>

<p>To me this list appears to be complete.</p>
","14617143"
"How to parse a CSV file in Bash?","81946","","<p>I'm working on a long Bash script.  I want to read cells from a CSV file into Bash variables.  I can parse lines and the first column, but not any other column.  Here's my code so far:</p>

<pre><code>
  cat myfile.csv|while read line
  do
    read -d, col1 col2 &lt; &lt;(echo $line)
    echo ""I got:$col1|$col2""
  done
</code></pre>

<p>It's only printing the first column.  As an additional test, I tried the following:</p>

<p><code>read -d, x y &lt; &lt;(echo a,b,)</code></p>

<p>And $y is empty.  So I tried:</p>

<p><code>read x y &lt; &lt;(echo a b)</code></p>

<p>And $y is <code>b</code>.  Why?</p>
","<p>You need to use <code>IFS</code> instead of <code>-d</code>:</p>

<pre><code>while IFS=, read -r col1 col2
do
    echo ""I got:$col1|$col2""
done &lt; myfile.csv
</code></pre>

<p>Note that for general purpose CSV parsing you should use a specialized tool which can handle quoted fields with internal commas, among other issues that Bash can't handle by itself. Examples of such tools are <a href=""http://colin.maudry.com/csvtool-manual-page/"" rel=""noreferrer""><code>cvstool</code></a> and <a href=""https://csvkit.readthedocs.io/en/latest/"" rel=""noreferrer""><code>csvkit</code></a>.</p>
","4286841"
"Read input in bash inside a while loop","81901","","<p>I am having a bash script which is something like following,</p>

<pre><code>cat filename | while read line
do
    read input;
    echo $input;
done
</code></pre>

<p>but this is clearly not giving me the right output as when I do read in the while loop it tries to read from the file filename because of the possible I/O redirection.</p>

<p>Any other way of doing the same?</p>
","<p>Read from the controlling terminal device:</p>

<pre><code>read input &lt;/dev/tty
</code></pre>

<p>more info: <a href=""http://compgroups.net/comp.unix.shell/Fixing-stdin-inside-a-redirected-loop"">http://compgroups.net/comp.unix.shell/Fixing-stdin-inside-a-redirected-loop</a></p>
","6883484"
"How to merge two files line by line in Bash","81802","","<p>I have two text files, each of them contains an information by line such like that</p>

<pre><code>file1.txt            file2.txt
----------           ---------
linef11              linef21
linef12              linef22
linef13              linef23
 .                    .
 .                    .
 .                    .
</code></pre>

<p>I would like to merge theses files lines by lines using a bash script in order to obtain:</p>

<pre><code>fileresult.txt
--------------
linef11     linef21
linef12     linef22
linef13     linef23
 .           .
 .           .
 .           .
</code></pre>

<p>How can this be done in Bash?</p>
","<p>You can use <a href=""http://ss64.com/bash/paste.html"" rel=""noreferrer""><code>paste</code></a>:</p>

<pre><code>paste file1.txt file2.txt &gt; fileresults.txt
</code></pre>
","3806901"
"How do I fetch lines before/after the grep result in bash?","81781","","<p>Hi I'm very new to bash programming. I want a way to search in a given Text. For that I use <code>grep</code> function:</p>

<pre><code>grep -i ""my_regex""
</code></pre>

<p>That works. But given the <code>data</code> like this :</p>

<pre><code>This is the test data
This is the error data as follows
. . . 
. . . .
. . . . . . 
. . . . . . . . .
Error data ends
</code></pre>

<p>Once I found the word <code>error</code> ( using <code>grep -i error data</code>), I wish to find the 10 lines that following the word <code>error</code>. So my output should be:</p>

<pre><code>    . . . 
    . . . .
    . . . . . . 
    . . . . . . . . .
    Error data ends
</code></pre>

<p>Are there any ways to do it?</p>
","<p>You can use the <code>-B</code> and <code>-A</code> to print lines before and after the match.</p>

<pre><code>grep -i -B 10 'error' data
</code></pre>

<p>Will print the 10 lines before the match, including the matching line itself.</p>
","12444813"
"Using shell script to insert data into remote MYSQL database","81781","","<p>I've been trying to get a shell(bash) script to insert a row into a REMOTE database, but i've been having some trouble :(</p>

<p>The script is meant to upload a file to a server, get a URL,HASH, and a filesize, connect to a remote mysql database, and insert the data into an existing table. I've gotten it working until the remote MYSQL database bit.</p>

<p>It looks like this:</p>

<pre><code>#!/bin/bash

zxw=randomtext
description=randomtext2

for file in ""$@""
 do
 echo -n *****
 ident= *****
 data= ****
 size=` ****
 hash=`****
mysql --host=randomhost --user=randomuser --password=randompass randomdb
insert into table (field1,field2,field3) values('http://www.site.com/$hash','$file','$size');
echo ""done""
done
</code></pre>

<p>I'm a total noob at programming so yeh :P</p>

<p>Anyway, I added the \ to escape the brackets as I was getting errors. As it is right now, the script is works fine until connects to the mysql database. It just connects to the mysql database and doesn't do the insert command (and i dont even know if the insert command would work in bash).</p>

<p>PS: I've tried both the mysql commands from the command line one by one, and they worked, though I defined the hash/file/size and didn't have the escaping ""\"".</p>

<p>Anyway, what do you guys think? Is what im trying to do even possible? If so how?</p>

<p>Any help would be appreciated :)</p>
","<p>The insert statement has to be sent to mysql, not another line in the shell script, so you need to make it a ""here document"".</p>

<pre><code>mysql --host=randomhost --user=randomuser --password=randompass randomdb &lt;&lt; EOF
insert into table (field1,field2,field3) values('http://www.site.com/$hash','$file','$size');
EOF
</code></pre>

<p>The <code>&lt;&lt; EOF</code> means take everything before the next line that contains nothing but <code>EOF</code> (no whitespace at the beginning) as standard input to the program.</p>
","3900550"
"How to store a command in a variable in Linux?","81450","","<p>I would like to store a command to use at a later period in a variable (not the output of the command, but the command itself)</p>

<p>I have a simple script as follows:</p>

<pre><code>command=""ls"";
echo ""Command: $command""; #Output is: Command: ls

b=`$command`;
echo $b; #Output is: public_html REV test... (command worked successfully)
</code></pre>

<p>However, when I try something a bit more complicated, it fails. For example, if I make</p>

<pre><code>command=""ls | grep -c '^'"";
</code></pre>

<p>The output is:</p>

<pre><code>Command: ls | grep -c '^'
ls: cannot access |: No such file or directory
ls: cannot access grep: No such file or directory
ls: cannot access '^': No such file or directory
</code></pre>

<p>Any idea how I could store such a command (with pipes/multiple commands) in a variable for later use?</p>
","<p>Use eval.</p>

<pre><code>x=""ls | wc""
eval $x
y=`eval $x`
echo $y
</code></pre>
","5615748"
"Fastest way of finding differences between two files in unix?","81310","","<p>I want to find the difference between two files and then put only the differences in a third file. I saw different approaches using awk, diff and comm. Are there any more ?</p>

<p>eg.<a href=""https://stackoverflow.com/questions/4544709/compare-two-files-line-by-line-and-generate-the-difference-in-another-file"">Compare two files line by line and generate the difference in another file</a></p>

<p>eg.<a href=""https://stackoverflow.com/questions/18065827/copy-differences-between-two-files-in-unix"">Copy differences between two files in unix</a></p>

<p>I need to know which is the fastest way of finding all the differences and listing them in a file for each of the cases below -  </p>

<pre><code>Case 1 - file2 = file1 + extra text appended.
Case 2 - file2 and file1 are different.
</code></pre>
","<p>You could try..    </p>

<pre><code>comm -13 &lt;(sort file1) &lt;(sort file2) &gt; file3
</code></pre>

<p>or</p>

<pre><code>grep -Fxvf file1 file2 &gt; file3
</code></pre>

<p>or</p>

<pre><code>diff file1 file2 | grep ""&lt;"" | sed 's/^&lt;//g'  &gt; file3
</code></pre>

<p>or</p>

<pre><code>join -v 2 &lt;(sort file1) &lt;(sort file2) &gt; file3
</code></pre>
","18069688"
"How do I use a for-each loop to iterate over file paths in bash?","81042","","<p>The following command attempts to enumerate all <code>*.txt</code> files in the current directory and process them one by one:</p>

<pre><code>for line in ""find . -iname '*.txt'""; do 
     echo $line
     ls -l $line; 
done
</code></pre>

<p>Why do I get the following error?:</p>

<pre><code>ls: invalid option -- 'e'
Try `ls --help' for more information.
</code></pre>
","<p>Here is a better way to loop over files as it handles spaces and newlines in file names:</p>

<pre><code>find . -type f -iname ""*.txt"" -print0 | while IFS= read -r -d $'\0' line; do
    echo ""$line""
    ls -l ""$line""    
done
</code></pre>
","15066129"
"Round a divided number in Bash","80848","","<p>How would I round the result from two divided numbers, e.g.</p>

<pre><code>3/2
</code></pre>

<p>As when I do </p>

<pre><code>testOne=$((3/2))
</code></pre>

<p>$testOne contains ""1"" when it should have rounded up to ""2"" as the answer from 3/2=1.5</p>
","<p>To do rounding up in truncating arithmetic, simply add <code>(denom-1)</code> to the numerator.</p>

<p>Example, rounding down:</p>

<pre><code>N/2
M/5
K/16
</code></pre>

<p>Example, rounding up:</p>

<pre><code>(N+1)/2
(M+4)/5
(K+15)/16
</code></pre>

<p>To do round-to-nearest, add <code>(denom/2)</code> to the numerator (halves will round up):</p>

<pre><code>(N+1)/2
(M+2)/5
(K+8)/16
</code></pre>
","2395294"
"Recursively find all files newer than a given time","80829","","<p>Given a time_t:</p>

<pre><code>⚡ date -ur 1312603983
Sat  6 Aug 2011 04:13:03 UTC
</code></pre>

<p>I'm looking for a bash one-liner that lists all files newer. The comparison should take the timezone into account.</p>

<p>Something like</p>

<pre><code>find . --newer 1312603983
</code></pre>

<p>But with a time_t instead of a file.</p>
","<p>This is a bit circuitous because <code>touch</code> doesn't take a raw <code>time_t</code> value, but it should do the job pretty safely in a script.  (The <code>-r</code> option to <code>date</code> is present in MacOS X; I've not double-checked GNU.)  The 'time' variable could be avoided by writing the command substitution directly in the <code>touch</code> command line.</p>

<pre><code>time=$(date -r 1312603983 '+%Y%m%d%H%M.%S')
marker=/tmp/marker.$$
trap ""rm -f $marker; exit 1"" 0 1 2 3 13 15
touch -t $time $marker
find . -type f -newer $marker
rm -f $marker
trap 0
</code></pre>
","6965531"
"How can I format the output of a bash command in neat columns","80627","","<p>I have a function which outputs many rows of information which I want to format in columns.  The problem is that the width of any particular ""cell"" (if I may use that term) of data is variable, so piping it to something like awk does not give me what I want.  </p>

<p>The function is ""keys"" (not that it matters) and I'm trying something like this:</p>

<pre><code>$ keys | awk '{ print $1""\t\t"" $2 }'
</code></pre>

<p>but the output (a snippet of it, that is) looks like this:</p>

<pre><code>""option-y""      yank-pop
""option-z""      execute-last-named-cmd
""option-|""      vi-goto-column
""option-~""      _bash_complete-word
""option-control-?""      backward-kill-word
""control-_""     undo
""control-?""     backward-delete-char
</code></pre>

<p>How can I force things to stay in neat columns?  Is this possible with awk, or do I need to use something else?</p>
","<p><a href=""http://linux.die.net/man/1/column"" rel=""noreferrer""><code>column(1)</code></a> is your friend.</p>

<pre><code>$ column -t &lt;&lt;&lt; '""option-y""      yank-pop
&gt; ""option-z""      execute-last-named-cmd
&gt; ""option-|""      vi-goto-column
&gt; ""option-~""      _bash_complete-word
&gt; ""option-control-?""      backward-kill-word
&gt; ""control-_""     undo
&gt; ""control-?""     backward-delete-char
&gt; '
""option-y""          yank-pop
""option-z""          execute-last-named-cmd
""option-|""          vi-goto-column
""option-~""          _bash_complete-word
""option-control-?""  backward-kill-word
""control-_""         undo
""control-?""         backward-delete-char
</code></pre>
","6462916"
"bash: start multiple chained commands in background","80535","","<p>I'm trying to run some commands in paralel, in background, using bash. Here's what I'm trying to do:</p>

<pre><code>forloop {
  //this part is actually written in perl
  //call command sequence
  print `touch .file1.lock; cp bigfile1 /destination; rm .file1.lock;`;
}
</code></pre>

<p>The part between backticks (``) spawns a new shell and executes the commands in succession. The thing is, control to the original program returns only after the last command has been executed. I would like to execute the whole statement in background (I'm not expecting any output/return values) and I would like the loop to continue running.</p>

<p>The calling program (the one that has the loop) would not end until all the spawned shells finish.</p>

<p>I could use threads in perl to spawn different threads which call different shells, but it seems an overkill...</p>

<p>Can I start a shell, give it a set of commands and tell it to go to the background?</p>
","<p>I haven't tested this but how about</p>

<pre><code>print `(touch .file1.lock; cp bigfile1 /destination; rm .file1.lock;) &amp;`;
</code></pre>

<p>The parentheses mean execute in a subshell but that shouldn't hurt.</p>
","161333"
"Running a simple shell script as a cronjob","80252","","<p>I have a very simple shell script I need to run as a cronjob but I can't get even the test scripts to run. Here's and example script:</p>

<p>/home/myUser/scripts/test.sh</p>

<pre><code>#!/bin/bash
touch file.txt
</code></pre>

<p>crontab:</p>

<pre><code>* * * * * /home/myUser/scripts/test.sh
</code></pre>

<p>The script runs fine from the terminal but can't get it to run as a cronjob. So far I've tried these in crontab:</p>

<pre><code>SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

* * * * * /bin/bash /home/myUser/scripts/test.sh
</code></pre>

<p>And this in the the script file:</p>

<pre><code>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/myUser/scripts
</code></pre>

<p>From what I've gathered the solution might be in the PATH variable but I can't figure out what it is since my understanding is very limited at this point. So my question is, how do I get my scripts to run as cronjobs?</p>

<p><strong>EDIT:</strong> the file has rwx permissions for all users. This is just for testing purposes.</p>

<p><strong>EDIT:</strong> cronjobs such as <code>* * * * * touch /home/myUser/scripts/test.txt</code> work but it wont run scripts.</p>
","<p>What directory is file.txt in? cron runs jobs in your home directory, so unless your script <code>cd</code>s somewhere else, that's where it's going to look for/create file.txt.</p>

<p>EDIT: When you refer to a file without specifying its full path (e.g. <code>file.txt</code>, as opposed to the full path <code>/home/myUser/scripts/file.txt</code>) in shell, it's taken that you're referring to a file in your current working directory. When you run a script (whether interactively or via crontab), the script's working directory has nothing at all to do with the location of the script itself; instead, it's inherited from whatever ran the script.</p>

<p>Thus, if you <code>cd</code> (change working directory) to the directory the script's in and then run it, <code>file.txt</code> will refer to a file in the same directory as the script. But if you don't <code>cd</code> there first, <code>file.txt</code> will refer to a file in whatever directory you happen to be in when you ran the script. For instance, if your home directory is /home/myUser, and you open a new shell and immediately run the script (as <code>scripts/test.sh</code> or <code>/home/myUser/scripts/test.sh</code>; <code>./test.sh</code> won't work), it'll touch the file /home/myUser/file.txt because /home/myUser is your current working directory (and therefore the script's).</p>

<p>When you run a script from <code>cron</code>, it does essentially the same thing: it runs it with the working directory set to your home directory. Thus all file references in the script are taken relative to your home directory, unless the script <code>cd</code>s somewhere else or specifies an absolute path to the file.</p>
","19755335"
"PostgreSQL - query from bash script as database user 'postgres'","80017","","<p>I have a table in my PostgreSQL database which has 3 columns - <code>c_uid</code>, <code>c_defaults</code> and <code>c_settings</code>. <code>c_uid</code> simply stores the name of a user and <code>c_defaults</code> is a long piece of text which contains a lot of data w.r.t that user.</p>

<p>I have to execute a statement from a bash script which selects the value of the <code>c_defaults</code> column based on the <code>c_uid</code> value and this needs to be done by the database user 'postgres'.</p>

<p>On the CLI I can do the following:</p>

<pre><code>[mymachine]# su postgres
bash-4.1$psql
postgres=#\c database_name
You are now connected to database ""database_name"" as user ""postgres"".
database_name=#SELECT c_defaults  FROM user_info WHERE c_uid = 'testuser';
</code></pre>

<p>However, how do I achieve this through a bash script?</p>

<p>The aim is to get the information from that column, edit it and write it back into that column - all through a bash script.</p>
","<p>Try this one:</p>

<pre><code>#!/bin/bash
psql -U postgres -d database_name -c ""SELECT c_defaults  FROM user_info WHERE c_uid = 'testuser'""
</code></pre>

<p>Or using <code>su</code>:</p>

<pre><code>#!/bin/bash
su -c ""psql -d database_name -c \""SELECT c_defaults  FROM user_info WHERE c_uid = 'testuser'\"""" postgres
</code></pre>

<p>And also <code>sudo</code>:</p>

<pre><code>#!/bin/bash
sudo -u postgres -H -- psql -d database_name -c ""SELECT c_defaults  FROM user_info WHERE c_uid = 'testuser'""
</code></pre>
","18223882"
"Waiting for background processes to finish before exiting script","79946","","<p>How do I make sure that all my background processes have finished execution before I exit my script (TCL/Bash).</p>

<p>I was thinking of writing all my background process pids to a pidfile. And then at the end pgrep the pidfile to see if any processes are still running before I exit. </p>

<p>Is there some simpler way to do this? And is there a TCL specific way to do this?</p>
","<p>If you want to wait for jobs to finish, use <code>wait</code>.  This will make the shell wait until all background jobs complete.  However, if any of your jobs daemonize themselves, they are no longer children of the shell and wait will have no effect (as far as the shell is concerned, the child is already done.  Indeed, when a process daemonizes itself, it does so by terminating and spawning a new process that inherits its role).</p>

<pre><code>#!/bin/sh
{ sleep 5; echo waking up after 5 seconds; } &amp;
{ sleep 1; echo waking up after 1 second; } &amp;
wait
echo all jobs are done!
</code></pre>
","14257577"
"How do I get the absolute directory of a file in bash?","79767","","<p>I have written a bash script that takes an input file as an argument and reads it.<br>
This file contains some paths (relative to its location) to additional files used. </p>

<p>I would like the script to go to the folder containing the input file, to execute further commands.  </p>

<p>So, <strong>how do I get the folder (and just the folder) from an input file?</strong> (In linux.)</p>
","<p>To get the full path use:</p>

<pre><code>readlink -f relative/path/to/file
</code></pre>

<p>To get the directory of a file:</p>

<pre><code>dirname relative/path/to/file
</code></pre>

<p>You can also combine the two:</p>

<pre><code>dirname $(readlink -f relative/path/to/file)
</code></pre>

<p>If <code>readlink -f</code> is not available on your system you can use this:</p>

<pre><code>function myreadlink() {
  (
  cd $(dirname $1)         # or  cd ${1%/*}
  echo $PWD/$(basename $1) # or  echo $PWD/${1##*/}
  )
}
</code></pre>

<p>Note that if you only need to move to a directory of a file specified as a relative path, you don't need to know the absolute path, a relative path is perfectly legal, so just use:</p>

<pre><code>cd $(dirname relative/path/to/file)
</code></pre>

<p>if you wish to go back (while the script is running) to the original path, use <code>pushd</code> instead of <code>cd</code>, and <code>popd</code> when you are done.</p>
","17577143"
"Unix - create path of folders and file","79699","","<p>I know you can do <code>mkdir</code> to create a directory and <code>touch</code> to create a file, but is there no way to do both operations in one go?</p>

<p>i.e. if I want to do the below when the folder <code>other</code> does not exist:</p>

<pre><code>cp /my/long/path/here/thing.txt /my/other/path/here/cpedthing.txt
</code></pre>

<p>Error:</p>

<pre><code>cp: cannot create regular file `/my/other/path/here/cpedthing.txt': No such file or directory
</code></pre>

<p>Has anyone come up with a function as a workaround for this?</p>
","<p>Use <code>&amp;&amp;</code> to combine two commands in one shell line:</p>

<pre><code>COMMAND1 &amp;&amp; COMMAND2
mkdir -p /my/other/path/here/ &amp;&amp; touch /my/other/path/here/cpedthing.txt
</code></pre>

<p>Note: Previously I recommended usage of <code>;</code> to separate the two commands but as pointed out by @trysis it's probably better to use <code>&amp;&amp;</code> in most situations because in case <code>COMMAND1</code> fails <code>COMMAND2</code> won't be executed either. (Otherwise this might lead to issues you might not have been expecting.)</p>
","9452973"
"How to replace ${} placeholders in a text file?","79656","","<p>I want to pipe the output of a ""template"" file into MySQL, the file having variables like <code>${dbName}</code> interspersed. What is the command line utility to replace these instances and dump the output to standard output?</p>
","<p><a href=""https://en.wikipedia.org/wiki/Sed"" rel=""noreferrer"">Sed</a>!</p>

<p>Given template.txt:</p>

<pre>
The number is ${i}
The word is ${word}
</pre>

<p>we just have to say:</p>

<pre><code>sed -e ""s/\${i}/1/"" -e ""s/\${word}/dog/"" template.txt
</code></pre>

<p>Thanks to Jonathan Leffler for the tip to pass multiple <code>-e</code> arguments to the same <code>sed</code> invocation.</p>
","415775"
"Split string into multiple variables in Bash","79603","","<p>I have a string that gets generated below:</p>

<pre><code>192.168.1.1,UPDOWN,Line protocol on Interface GigabitEthernet1/0/13, changed state to up
</code></pre>

<p>How can I take that string and make 2 variables out of it (using bash)?</p>

<p>For example I want</p>

<pre><code>$ip=192.168.1.1 
$int=GigabitEthernet1/0/13
</code></pre>
","<p>Try this:</p>

<pre><code>mystring=""192.168.1.1,UPDOWN,Line protocol on Interface GigabitEthernet1/0/13, changed state to up""

IFS=',' read -a myarray &lt;&lt;&lt; ""$mystring""

echo ""IP: ${myarray[0]}""
echo ""STATUS: ${myarray[3]}""
</code></pre>

<p>In this script <code>${myarray[0]}</code> refers to the <strong>first</strong> field in the comma-separated string, <code>${myarray[1]}</code> refers to the <strong>second</strong> field in the comma-separated string, etc.</p>
","23672183"
"Gulp command not found after install","79404","","<p>I installed gulp(globally) and it looks like it worked because it ran this code:</p>

<pre><code>├── tildify@0.2.0
├── interpret@0.3.5
├── pretty-hrtime@0.2.1
├── deprecated@0.0.1
├── archy@0.0.2
├── minimist@0.2.0
├── semver@2.3.2
├── orchestrator@0.3.7 (stream-consume@0.1.0, sequencify@0.0.7, end-of-stream@0.1.5)
├── chalk@0.5.1 (escape-string-regexp@1.0.1, ansi-styles@1.1.0, supports-color@0.2.0, strip-ansi@0.3.0, has-ansi@0.1.0)
├── gulp-util@2.2.20 (lodash._reinterpolate@2.4.1, dateformat@1.0.8-1.2.3, vinyl@0.2.3, through2@0.5.1, multipipe@0.1.1, lodash.template@2.4.1)
├── liftoff@0.12.0 (extend@1.2.1, minimist@0.1.0, resolve@0.7.4, findup-sync@0.1.3)
└── vinyl-fs@0.3.5 (graceful-fs@3.0.2, lodash@2.4.1, mkdirp@0.5.0, strip-bom@0.3.1, vinyl@0.2.3, through2@0.5.1, glob-watcher@0.0.6, glob-stream@3.1.14)
</code></pre>

<p>But when I type <code>gulp</code> it says <code>-bash: gulp: command not found</code></p>

<p>Any idea what's going on?</p>
","<p>Turns out that npm was installed in the wrong directory so I had to change the “npm config prefix” by running this code:</p>

<pre><code>npm config set prefix /usr/local
</code></pre>

<p>Then I reinstalled gulp globally (with the -g param) and it worked properly.</p>

<p>This article is where I found the solution: <a href=""http://webbb.be/blog/command-not-found-node-npm"">http://webbb.be/blog/command-not-found-node-npm</a></p>
","25126461"
"How to copy multiple files from a different directory using cp?","79232","","<p>I want to copy multiple files from a specific directory once I am in  another directory. To clarify I want to do the following, at once (one command):</p>

<pre><code>cp ../dir5/dir4/dir3/dir2/file1 .
cp ../dir5/dir4/dir3/dir2/file2 .
cp ../dir5/dir4/dir3/dir2/file3 .
cp ../dir5/dir4/dir3/dir2/file4 .
</code></pre>

<p>I can't use  <code>cp ../dir5/dir4/dir3/dir2/* .</code>   because in <code>dir2</code> there are <code>n</code> files <code>(n&gt;4)</code></p>

<p>By the way, I'm using <code>bash</code>.</p>

<p>Thanks.</p>
","<pre><code>cp ../dir5/dir4/dir3/dir2/file[1234] .
</code></pre>

<p>or (in Bash)</p>

<pre><code>cp ../dir5/dir4/dir3/dir2/file{1..4} .
</code></pre>

<p>If the file names are non-contiguous, you can use</p>

<pre><code>cp ../dir5/dir4/dir3/dir2/{march,april,may} .
</code></pre>
","9915843"
"Git Bash doesn't see my PATH","79034","","<p>When I use Git Bash (on Windows), I cannot run any executable without specifying its full path, although it is located in a folder which is in my PATH variable. Looks like bash doesn't recognize it. Why? Can I fix it?</p>
","<p>Got it. As a Windows user, I'm used to type executable names without extensions. In my case, I wanted to execute a file called <code>cup.bat</code>. In a Windows shell, typing <code>cup</code> would be enough. Bash doesn't work this way, it wants the full name. Typing <code>cup.bat</code> solved the problem. (I wasn't able to run the file though, since apparently bash couldn't understand its contents)</p>

<p>One more reason to switch to posh-git..</p>

<p>Thanks @Tom for pointing me to the right direction.</p>
","10764080"
"How to make a bash function which can read from standard input?","78908","","<p>I have some scripts that work with parameters, they work just fine but i would like them to be able to read from stdin, from a pipe for example, an example, suppose this is called read:</p>

<pre><code>#!/bin/bash
function read()
{
 echo $*
}

read $*
</code></pre>

<p>Now this works with <code>read ""foo"" ""bar""</code>, but I would like to use it as:</p>

<pre><code>echo ""foo"" | read
</code></pre>

<p>How do I accomplish this?</p>
","<p>You can use <code>&lt;&lt;&lt;</code> to get this behaviour. <code>read &lt;&lt;&lt; echo ""text""</code> should make it.</p>

<p>Test with <code>readly</code> (I prefer not using reserved words):</p>

<pre><code>function readly()
{
 echo $*
 echo ""this was a test""
}

$ readly &lt;&lt;&lt; echo ""hello""
hello
this was a test
</code></pre>

<p>With pipes, based on <a href=""https://stackoverflow.com/a/6779351/1983854"">this answer to ""Bash script, read values from stdin pipe""</a>:</p>

<pre><code>$ echo ""hello bye"" | { read a; echo $a;  echo ""this was a test""; }
hello bye
this was a test
</code></pre>
","18761276"
"How to execute a group of commands as another user in Bash?","78298","","<p>There are already <a href=""https://stackoverflow.com/questions/10220019/how-to-write-a-shell-script-that-runs-some-commands-as-superuser-and-some-comman"">some existing questions</a> asked here about  running commands as another user. However, the question and answers focus on <em>a single command</em> instead of a long group of commands.</p>

<p>For example, consider the following script:</p>

<pre><code>#!/bin/bash
set -e

root_command -p param1  # run as root

# these commands must be run as another user
command1 -p 'parameter with ""quotes"" inline'
command2 -p 'parameter with ""quotes"" inline'
command3 -p 'parameter with ""quotes"" inline'
</code></pre>

<p>There are a couple of important points to note here:</p>

<ul>
<li><p>The final three commands must be run as another user using <code>su</code> or <code>sudo</code>. In the example there were three commands, but suppose that there were many more...</p></li>
<li><p>The commands themselves make use of single and double quotes.</p></li>
</ul>

<p>The second point above prevents the use of the following syntax:</p>

<pre><code>su somebody -c ""command""
</code></pre>

<p>...since the commands themselves contain quotes.</p>

<p>What is the proper way to ""group"" the commands and run them under another user account?</p>
","<p>Try this:</p>

<pre><code>su somebody &lt;&lt;'EOF'
command1 -p 'parameter with ""quotes"" inline'
command2 -p 'parameter with ""quotes"" inline'
command3 -p 'parameter with ""quotes"" inline'
EOF
</code></pre>

<p><code>&lt;&lt;</code> introduces a <em>here-doc</em>. The next token is the delimiter, and everything up to a line beginning with the delimiter is fed as standard input to the command. Putting the delimiter in single quotes prevents variable substitution within the here-doc.</p>
","17758312"
"Count occurrences of a char in a string using Bash","78203","","<p>I need to count the <em>number of occurrences of a char in a string</em> using Bash.</p>

<p>In the following example, when the char is (for example) <code>t</code>, it <em><code>echo</code>s</em> the correct number of occurrences of <code>t</code> in <code>var</code>, but when the character is comma or semicolon, it prints out zero:</p>

<pre><code>var = ""text,text,text,text"" 
num = `expr match $var [,]`
echo ""$num""
</code></pre>
","<p>I would use the following <code>awk</code> command:</p>

<pre><code>string=""text,text,text,text""
char="",""
awk -F""${char}"" '{print NF-1}' &lt;&lt;&lt; ""${string}""
</code></pre>

<p>I'm splitting the string by <code>$char</code> and print the number of resulting fields minus 1.</p>

<p>If your shell does not support the <code>&lt;&lt;&lt;</code> operator, use <code>echo</code>:</p>

<pre><code>echo ""${string}"" | awk -F""${char}"" '{print NF-1}'
</code></pre>
","16679459"
"mac os x terminal batch rename","78129","","<p>i have a folder with a series of files named:</p>

<pre><code>prefix_1234_567.png
prefix_abcd_efg.png
</code></pre>

<p>i'd like to batch remove one underscore and the middle content so the output would be</p>

<pre><code>prefix_567.png
prefix_efg.png
</code></pre>

<p>thanks
relevant but not completely explanatory:
<a href=""https://stackoverflow.com/questions/5394112/how-can-i-batch-rename-files-using-the-terminal"">how can I batch rename files using the Terminal?</a>
<a href=""https://stackoverflow.com/questions/10664542/regex-to-batch-rename-files-in-os-x-terminal"">Regex to batch rename files in OS X Terminal</a></p>
","<p>In your specific case you can use the following <code>bash</code> command (<code>bash</code> is the default shell on macOS):</p>

<pre><code>for f in *.png; do echo mv ""$f"" ""${f/_*_/_}""; done
</code></pre>

<p><strong>Note: <code>echo</code> is prepended to <code>mv</code> so as to perform a dry run. Remove it to perform actual renaming.</strong></p>

<p>You can run it from the command line or use it in a script.</p>

<ul>
<li><code>""${f/_*_/_}""</code> is an application of <code>bash</code> <a href=""http://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html"" rel=""noreferrer"">parameter expansion</a>: the (first) substring matching pattern <code>_*_</code> is replaced with literal <code>_</code>, effectively cutting the middle token from the name.</li>
<li>Note that <code>_*_</code> is a <em>pattern</em> (a wildcard expression, as also used for globbing), not a <em>regular expression</em> (to learn about patterns, run <code>man bash</code> and search for <code>Pattern Matching</code>).</li>
</ul>

<hr>

<p>If you find yourself batch-renaming files frequently, consider a specialized tool such as the Perl-based <a href=""http://plasmasturm.org/code/rename/"" rel=""noreferrer""><code>rename</code> utility</a>.
On OSX you can install it using popular package manager <a href=""http://brew.sh/"" rel=""noreferrer"">Homebrew</a> as follows: <code>brew install rename</code></p>

<p>Here's the equivalent command using <code>rename</code>:</p>

<pre><code>rename -n -e 's/_.*_/_/'  *.png
</code></pre>

<p>Again, this command performs a dry run; remove <code>-n</code> to perform actual renaming.</p>

<ul>
<li>Similar to the <code>bash</code> solution, <code>s/.../.../</code> performs text substitution, but - unlike in <code>bash</code> - true <em>regular expressions</em> are used.</li>
</ul>
","24103055"
"Bash: Read tab-separated file line into array","77892","","<p>I would like to read a file into a script, line by line. Each line in the file is multiple values seperated by a tab, I'd like to read each line into an array. </p>

<p>Typical bash ""read file by line"" example;</p>

<pre><code>while read line
do
echo $line;
done &lt; ""myfile""
</code></pre>

<p>For me though, myfile looks like this (tab separated values);</p>

<pre><code>value1 value2 value3
value4 value5 value6
</code></pre>

<p>On each iteration of the loop, I'd like each line to go into an array so I can</p>

<pre><code>while read line into myArray
do
 echo myArray[0]
 echo myArray[1]
 echo myArray[2]
done &lt; ""myfile""
</code></pre>

<p>This would print the following on the first loop iteration;</p>

<pre><code>value1
value2
value3
</code></pre>

<p>Then on the second iteration it would print</p>

<pre><code>value4
value5
value6
</code></pre>

<p>Is this possible? The only way I can see is to write a small function to break out the values manually, is there built in support in bash for this?</p>
","<p>You're very close:</p>

<pre><code>while IFS=$'\t' read -r -a myArray
do
 echo ""${myArray[0]}""
 echo ""${myArray[1]}""
 echo ""${myArray[2]}""
done &lt; myfile
</code></pre>

<p>(The <code>-r</code> tells <code>read</code> that <code>\</code> isn't special in the input data; the <code>-a myArray</code> tells it to split the input-line into words and store the results in <code>myArray</code>; and the <code>IFS=$'\t'</code> tells it to use only tabs to split words, instead of the regular Bash default of also allowing spaces to split words as well. Note that this approach will treat one <em>or more</em> tabs as the delimiter, so if any field is blank, later fields will be ""shifted"" into earlier positions in the array. Is that O.K.?)</p>
","9736732"
"Emulating a do-while loop in Bash","77753","","<p>What is the best way to emulate a do-while loop in Bash?</p>

<p>I could check for the condition before entering the <code>while</code> loop, and then continue re-checking the condition in the loop, but that's duplicated code. Is there a cleaner way?</p>

<p>Pseudo code of my script:</p>

<pre><code>while [ current_time &lt;= $cutoff ]; do
    check_if_file_present
    #do other stuff
done
</code></pre>

<p>This doesn't perform <code>check_if_file_present</code> if launched after the <code>$cutoff</code> time, and a do-while would.</p>
","<p>Two simple solutions:</p>

<ol>
<li><p>Execute your code once before the while loop</p>

<pre><code>actions() {
   check_if_file_present
   # Do other stuff
}

actions #1st execution
while [ current_time &lt;= $cutoff ]; do
   actions # Loop execution
done
</code></pre></li>
<li><p>Or:</p>

<pre><code>while : ; do
    actions
    [[ current_time &lt;= $cutoff ]] || break
done
</code></pre></li>
</ol>
","16489942"
"How do I escape double and single quotes in SED? (bash)","77515","","<p>From what I can find, when you use single quotes everything inside is considered literal. I want that for my substitution. But I also want to find a string that has single or double quotes.</p>

<p>For example, </p>

<pre><code>sed -i 's/""http://www.fubar.com""/URL_FUBAR/g'
</code></pre>

<p>I want to replace ""http://www.fubar.com"" with URL_FUBAR. How is sed supposed to recognize my // or my double quotes?</p>

<p>Thanks for any help!</p>

<p><strong>EDIT:</strong> Could I use <code>s/\""http\:\/\/www\.fubar\.\com\""/URL_FUBAR/g</code> ?</p>

<p>Does \ actually escape chars inside the single quotes?</p>
","<p>The <code>sed</code> command allows you to other characters instead of <code>/</code>:</p>

<pre><code>sed 's#""http://www.fubar.com""#URL_FUBAR#g'
</code></pre>

<p>The double quotes are not a problem.</p>
","7517900"
"An efficient way to transpose a file in Bash","77470","","<p>I have a huge tab-separated file formatted like this</p>

<pre><code>X column1 column2 column3
row1 0 1 2
row2 3 4 5
row3 6 7 8
row4 9 10 11
</code></pre>

<p>I would like to <em>transpose</em> it in an efficient way using only bash commands (I could write a ten or so lines Perl script to do that, but it should be slower to execute than the native bash functions). So the output should look like</p>

<pre><code>X row1 row2 row3 row4
column1 0 3 6 9
column2 1 4 7 10
column3 2 5 8 11
</code></pre>

<p>I thought of a solution like this</p>

<pre><code>cols=`head -n 1 input | wc -w`
for (( i=1; i &lt;= $cols; i++))
do cut -f $i input | tr $'\n' $'\t' | sed -e ""s/\t$/\n/g"" &gt;&gt; output
done
</code></pre>

<p>But it's slow and doesn't seem the most efficient solution. I've seen a solution for vi in <a href=""https://stackoverflow.com/questions/704130/can-i-transpose-a-file-in-vim"">this post</a>, but it's still over-slow. Any thoughts/suggestions/brilliant ideas? :-)</p>
","<pre><code>awk '
{ 
    for (i=1; i&lt;=NF; i++)  {
        a[NR,i] = $i
    }
}
NF&gt;p { p = NF }
END {    
    for(j=1; j&lt;=p; j++) {
        str=a[1,j]
        for(i=2; i&lt;=NR; i++){
            str=str"" ""a[i,j];
        }
        print str
    }
}' file
</code></pre>

<p>output</p>

<pre><code>$ more file
0 1 2
3 4 5
6 7 8
9 10 11

$ ./shell.sh
0 3 6 9
1 4 7 10
2 5 8 11
</code></pre>

<p>Performance against Perl solution by Jonathan on a 10000 lines file</p>

<pre><code>$ head -5 file
1 0 1 2
2 3 4 5
3 6 7 8
4 9 10 11
1 0 1 2

$  wc -l &lt; file
10000

$ time perl test.pl file &gt;/dev/null

real    0m0.480s
user    0m0.442s
sys     0m0.026s

$ time awk -f test.awk file &gt;/dev/null

real    0m0.382s
user    0m0.367s
sys     0m0.011s

$ time perl test.pl file &gt;/dev/null

real    0m0.481s
user    0m0.431s
sys     0m0.022s

$ time awk -f test.awk file &gt;/dev/null

real    0m0.390s
user    0m0.370s
sys     0m0.010s
</code></pre>

<p>EDIT by Ed Morton (@ghostdog74 feel free to delete if you disapprove).</p>

<p>Maybe this version with some more explicit variable names will help answer some of the questions below and generally clarify what the script is doing. It also uses tabs as the separator which the OP had originally asked for so it'd handle empty fields and it coincidentally pretties-up the output a bit for this particular case.</p>

<pre><code>$ cat tst.awk
BEGIN { FS=OFS=""\t"" }
{
    for (rowNr=1;rowNr&lt;=NF;rowNr++) {
        cell[rowNr,NR] = $rowNr
    }
    maxRows = (NF &gt; maxRows ? NF : maxRows)
    maxCols = NR
}
END {
    for (rowNr=1;rowNr&lt;=maxRows;rowNr++) {
        for (colNr=1;colNr&lt;=maxCols;colNr++) {
            printf ""%s%s"", cell[rowNr,colNr], (colNr &lt; maxCols ? OFS : ORS)
        }
    }
}

$ awk -f tst.awk file
X       row1    row2    row3    row4
column1 0       3       6       9
column2 1       4       7       10
column3 2       5       8       11
</code></pre>

<p>The above solutions will work in any awk (except old, broken awk of course - there YMMV).</p>

<p>The above solutions do read the whole file into memory though - if the input files are too large for that then you can do this:</p>

<pre><code>$ cat tst.awk
BEGIN { FS=OFS=""\t"" }
{ printf ""%s%s"", (FNR&gt;1 ? OFS : """"), $ARGIND }
ENDFILE {
    print """"
    if (ARGIND &lt; NF) {
        ARGV[ARGC] = FILENAME
        ARGC++
    }
}
$ awk -f tst.awk file
X       row1    row2    row3    row4
column1 0       3       6       9
column2 1       4       7       10
column3 2       5       8       11
</code></pre>

<p>which uses almost no memory but reads the input file once per number of fields on a line so it will be much slower than the version that reads the whole file into memory. It also assumes the number of fields is the same on each line and it uses GNU awk for <code>ENDFILE</code> and <code>ARGIND</code> but any awk can do the same with tests on <code>FNR==1</code> and <code>END</code>.</p>
","1729980"
"Quick-and-dirty way to ensure only one instance of a shell script is running at a time","77428","","<p>What's a quick-and-dirty way to make sure that only one instance of a shell script is running at a given time?</p>
","<p>Here's an implementation that uses a <em>lockfile</em> and echoes a PID into it. This serves as a protection if the process is killed before removing the <em>pidfile</em>:</p>

<pre><code>LOCKFILE=/tmp/lock.txt
if [ -e ${LOCKFILE} ] &amp;&amp; kill -0 `cat ${LOCKFILE}`; then
    echo ""already running""
    exit
fi

# make sure the lockfile is removed when we exit and then claim it
trap ""rm -f ${LOCKFILE}; exit"" INT TERM EXIT
echo $$ &gt; ${LOCKFILE}

# do stuff
sleep 1000

rm -f ${LOCKFILE}
</code></pre>

<p>The trick here is the <code>kill -0</code> which doesn't deliver any signal but just checks if a process with the given PID exists.  Also the call to <code>trap</code> will ensure that the <em>lockfile</em> is removed even when your process is killed (except <code>kill -9</code>).</p>
","185473"
"Why is whitespace sometimes needed around metacharacters?","77400","","<p>A few months ago I tattooed a <a href=""http://en.wikipedia.org/wiki/Fork_bomb"" rel=""noreferrer"">fork bomb</a> on my arm, and I skipped the whitespaces, because I think it looks nicer without them. But to my dismay, <strong>sometimes</strong> (not always) when I run it in a shell it doesn't start a fork bomb, but it just gives a syntax error. </p>

<pre><code>bash: syntax error near unexpected token `{:'
</code></pre>

<p>Yesterday it happened when I tried to run it in a friend's <a href=""http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"" rel=""noreferrer"">Bash</a> shell, and then I added the whitespace and it suddenly worked, <code>:(){ :|:&amp; };:</code> instead of <code>:(){:|:&amp;};:</code></p>

<p>Does the whitespace matter; have I tattooed a syntax error on my arm?!</p>

<p>It seems to always work in <a href=""http://en.wikipedia.org/wiki/Z_shell"" rel=""noreferrer"">zsh</a>, but not in Bash.</p>

<p><a href=""https://stackoverflow.com/questions/991142/how-does-this-bash-fork-bomb-work"">A related question</a> does not explain anything about the whitespaces, which really is my question; <strong>Why is the whitespace needed for Bash to be able to parse it correctly?</strong></p>
","<p>There is a list of characters that separate tokens in BASH. These characters are called <em>metacharacters</em> and they are <code>|</code>, <code>&amp;</code>, <code>;</code>, <code>(</code>, <code>)</code>, <code>&lt;</code>, <code>&gt;</code>, <strong>space</strong> and <strong>tab</strong>. On the other hand, curly braces (<code>{</code> and <code>}</code>) are just ordinary characters that make up words.</p>

<p>Omitting the second space before <code>}</code> will do, since <code>&amp;</code> is a metacharacter. Therefore, your tattoo should have at least one space character.</p>

<pre><code>:(){ :|:&amp;};:
</code></pre>
","21187095"
"How to set a variable to current date and date-1 in linux?","77399","","<p>I want to set the variable <code>date-today</code> to the current date, and <code>date_dir</code> to yesterday's date, both in the format <code>yyyy-mm-dd</code>.</p>

<p>I am doing this:</p>

<pre><code>#!/bin/bash
d=`date +%y%m%d%H%M%S`
echo $d
</code></pre>
","<p>You can try:</p>

<pre><code>#!/bin/bash
d=$(date +%Y-%m-%d)
echo ""$d""
</code></pre>

<p>EDIT: Changed y to Y for 4 digit date as per QuantumFool's comment.</p>
","20485977"
"How to use the read command in Bash?","77312","","<p>When I try to use the <code>read</code> command in Bash like this:</p>

<pre><code>echo hello | read str
echo $str
</code></pre>

<p>Nothing echoed, while I think <code>str</code> should contain the string <code>hello</code>. Can anybody please help me understand this behavior?</p>
","<p>The <code>read</code> in your script command is fine. However, you execute it in the pipeline, which means it is in a subshell, therefore, the variables it reads to are not visible in the parent shell. You can either</p>

<ul>
<li><p>move the rest of the script in the subshell, too:</p>

<pre><code>echo hello | { read str
  echo $str
}
</code></pre></li>
<li><p>or use command substitution to get the value of the variable out of the subshell</p>

<pre><code>str=$(echo hello)
echo $str
</code></pre>

<p>or a slightly more complicated example (Grabbing the 2nd element of ls)</p>

<pre><code>str=$(ls | { read a; read a; echo $a; })
echo $str
</code></pre></li>
</ul>
","7676232"
"How to Post Url in data of a curl request","77245","","<p>I am trying to post two parameters using curl.
<br>
path and fileName</p>

<pre><code>curl --request POST 'http://localhost/Service' --data ""path='/xyz/pqr/test/'&amp;fileName='1.doc'""
</code></pre>

<p>I know something is wrong in this. <br>
I have to use something like URLEncode. I tried many things still no luck.
<br> Please give an example how can I post the url in data of curl request.</p>
","<p>Perhaps you don't have to include the single quotes:</p>

<pre><code>curl --request POST 'http://localhost/Service' --data ""path=/xyz/pqr/test/&amp;fileName=1.doc""
</code></pre>

<p>Update: Reading curl's manual, you could actually separate both fields with two --data:</p>

<pre><code>curl --request POST 'http://localhost/Service' --data ""path=/xyz/pqr/test/"" --data ""fileName=1.doc""
</code></pre>

<p>You could also try --data-binary:</p>

<pre><code>curl --request POST 'http://localhost/Service' --data-binary ""path=/xyz/pqr/test/"" --data-binary ""fileName=1.doc""
</code></pre>

<p>And --data-urlencode:</p>

<pre><code>curl --request POST 'http://localhost/Service' --data-urlencode ""path=/xyz/pqr/test/"" --data-urlencode ""fileName=1.doc""
</code></pre>
","18204505"
"Appending a line break to an output file in a shell script","77118","","<p>I have a shell script that I am executing in Cygwin (maybe this is the problem). For this bit of code, I simply want to write the first line, and append a line break:</p>

<pre><code>echo ""`date` User `whoami` started the script."" &gt;&gt; output.log
echo &gt;&gt; output.log
</code></pre>

<p>But the output.log file never seems to take the break. If I run the script multiple times, it's as if the second echo doesn't write to the file.</p>

<p>I've also tried:</p>

<pre><code>echo -e ""`date` User `whoami` started the script.\n"" &gt;&gt; output.log
</code></pre>

<p>It yields the same results.</p>

<p>The odd thing is if I just enter the second echo statement above on the command line, without appending to the file, it gives me the expected output with the trailing line break.</p>
","<p>I'm betting the problem is that Cygwin is writing Unix line endings (LF) to the file, and you're opening it with a program that expects Windows line-endings (CRLF). To determine if this is the case &mdash; and for a bit of a hackish workaround &mdash; try:</p>

<pre><code>echo ""`date` User `whoami` started the script.""$'\r' &gt;&gt; output.log
</code></pre>

<p>(where the <code>$'\r'</code> at the end is an extra carriage-return; it, plus the Unix line ending, will result in a Windows line ending).</p>
","9741502"
"How to create a temporary directory?","76989","","<p>I use to create a <code>tempfile</code>, delete it and recreate it as a directory: </p>

<pre><code>tmpnam=`tempfile`
rm -f $tmpnam
mkdir ""$tmpnam""
</code></pre>

<p>The problem is, another process may get a same name <code>X</code>, if it accidently executes tempfile after one process <code>rm -f X</code> and just before <code>mkdir X</code>.</p>
","<p>Use <a href=""http://www.mktemp.org/"" rel=""noreferrer""><code>mktemp -d</code></a>. It creates a temporary directory with a random name and makes sure that file doesn't already exist. You need to remember to delete the directory after using it though.</p>
","4632032"
"How do you kill all Linux processes that are older than a certain age?","76916","","<p>I have a problem with some zombie-like processes on a certain server that need to be killed every now and then. How can I best identify the ones that have run for longer than an hour or so?</p>
","<p>If they just need to be killed:</p>

<pre><code>if [[ ""$(uname)"" = ""Linux"" ]];then killall --older-than 1h someprocessname;fi
</code></pre>

<p>If you want to see what it's matching</p>

<pre><code>if [[ ""$(uname)"" = ""Linux"" ]];then killall -i --older-than 1h someprocessname;fi
</code></pre>

<p>The <code>-i</code> flag will prompt you with yes/no for each process match. </p>
","10525736"
"Extract XML Value in bash script","76869","","<p>I'm trying to extract a value from an xml document that has been read into my script as a variable. The original variable, <em>$data</em>, is:</p>

<pre><code>&lt;item&gt; 
  &lt;title&gt;15:54:57 - George:&lt;/title&gt;
  &lt;description&gt;Diane DeConn? You saw Diane DeConn!&lt;/description&gt; 
&lt;/item&gt; 
&lt;item&gt; 
  &lt;title&gt;15:55:17 - Jerry:&lt;/title&gt; 
  &lt;description&gt;Something huh?&lt;/description&gt;
&lt;/item&gt; 
</code></pre>

<p>and I wish to extract the first title value, so </p>

<pre><code>15:54:57 - George:
</code></pre>

<p>I've been using the sed command:</p>

<pre><code>title=$(sed -n -e 's/.*&lt;title&gt;\(.*\)&lt;\/title&gt;.*/\1/p' &lt;&lt;&lt; $data)
</code></pre>

<p>but this only outputs the second title value:</p>

<pre><code>15:55:17 - Jerry:
</code></pre>

<p>Does anyone know what I have done wrong?
Thanks!</p>
","<p>As <a href=""https://stackoverflow.com/a/17333937/970195"">Charles Duffey</a> has stated, XML parsers are best parsed with a proper XML parsing tools. For one time job the following should work. </p>

<pre><code>grep -oPm1 ""(?&lt;=&lt;title&gt;)[^&lt;]+""
</code></pre>

<h3>Test:</h3>

<pre><code>$ echo ""$data""
&lt;item&gt; 
  &lt;title&gt;15:54:57 - George:&lt;/title&gt;
  &lt;description&gt;Diane DeConn? You saw Diane DeConn!&lt;/description&gt; 
&lt;/item&gt; 
&lt;item&gt; 
  &lt;title&gt;15:55:17 - Jerry:&lt;/title&gt; 
  &lt;description&gt;Something huh?&lt;/description&gt;
$ title=$(grep -oPm1 ""(?&lt;=&lt;title&gt;)[^&lt;]+"" &lt;&lt;&lt; ""$data"")
$ echo ""$title""
15:54:57 - George:
</code></pre>
","17333829"
"How to check if running in Cygwin, Mac or Linux?","76866","","<p>I have a shell script that is used both on Windows/Cygwin and Mac and Linux. It needs slightly  different variables for each versions.</p>

<p>How can a shell/bash script detect whether it is running in Cygwin, on a Mac or in Linux?</p>
","<p>Usually, <code>uname</code> with its various options will tell you what environment you're running in:</p>

<pre><code>pax&gt; uname -a
CYGWIN_NT-5.1 IBM-L3F3936 1.5.25(0.156/4/2) 2008-06-12 19:34 i686 Cygwin

pax&gt; uname -s
CYGWIN_NT-5.1
</code></pre>

<p>And, according to the very helpful <code>schot</code> (in the comments), <code>uname -s</code> gives <code>Darwin</code> for OSX and <code>Linux</code> for Linux, while my Cygwin gives <code>CYGWIN_NT-5.1</code>. But you may have to experiment with all sorts of different versions.</p>

<p>So the <code>bash</code> code to do such a check would be along the lines of:</p>

<pre><code>unameOut=""$(uname -s)""
case ""${unameOut}"" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine=""UNKNOWN:${unameOut}""
esac
echo ${machine}
</code></pre>

<hr>

<p>Note that I'm assuming here that you're actually running <em>within</em> CygWin (the <code>bash</code> shell of it) so paths should already be correctly set up. As one commenter notes, you can run the <code>bash</code> program, passing the script, from <code>cmd</code> itself and this may result in the paths not being set up as needed.</p>

<p>If you <em>are</em> doing that, it's your responsibility to ensure the correct executables (i.e., the CygWin ones) are being called, possibly by modifying the path beforehand or fully specifying the executable locations (e.g., <code>/c/cygwin/bin/uname</code>).</p>
","3466183"
"Run cron job only if it isn't already running","76766","","<p>So I'm trying to set up a cron job as a sort of watchdog for a daemon that I've created. If the daemon errors out and fails, I want the cron job to periodically restart it... I'm not sure how possible this is, but I read through a couple of cron tutorials and couldn't find anything that would do what I'm looking for...</p>

<p>My daemon gets started from a shell script, so I'm really just looking for a way to run a cron job ONLY if the previous run of that job isn't still running.</p>

<p><a href=""https://stackoverflow.com/q/851872/825757"">I found this post</a>, which did provide a solution for what I'm trying to do using lock files, not I'm not sure if there is a better way to do it...</p>

<p>Thanks for your help.</p>
","<p>I do this for a print spooler program that I wrote, it's just a shell script:</p>

<pre><code>#!/bin/sh
if ps -ef | grep -v grep | grep doctype.php ; then
        exit 0
else
        /home/user/bin/doctype.php &gt;&gt; /home/user/bin/spooler.log &amp;
        #mailing program
        /home/user/bin/simplemail.php ""Print spooler was not running...  Restarted."" 
        exit 0
fi
</code></pre>

<p>It runs every two minutes and is quite effective.  I have it email me with special information if for some reason the process is not running.</p>
","2366718"
"Convert string to date in bash","76719","","<p>I have a string in the format ""yyyymmdd"". It is a string in bash and I want to get it converted into a date so that all other date functions can be used on it.</p>

<p>""20121212"" string into ""20121212"" date with format ""%Y%m%d"".</p>
","<p>This worked for me :</p>

<pre><code>date -d '20121212 7 days'
date -d '12-DEC-2012 7 days'
date -d '2012-12-12 7 days'
date -d '2012-12-12 4:10:10PM 7 days'
date -d '2012-12-12 16:10:55 7 days'
</code></pre>

<p>then you can format output adding parameter '+%Y%m%d'</p>
","11144983"
"How do I escape the wildcard/asterisk character in bash?","76567","","<p>eg.</p>

<pre><code>me$ FOO=""BAR * BAR""
me$ echo $FOO
BAR file1 file2 file3 file4 BAR
</code></pre>

<p>and using the ""\"" escape character:</p>

<pre><code>me$ FOO=""BAR \* BAR""
me$ echo $FOO
BAR \* BAR
</code></pre>

<p>I'm obviously doing something stupid.</p>

<p>How do I get the output ""BAR * BAR"" ?</p>
","<p>Quoting when setting $FOO is not enough.  You need to quote the variable reference as well:</p>

<pre><code>me$ FOO=""BAR * BAR""
me$ echo ""$FOO""
BAR * BAR
</code></pre>
","102075"
"How to evaluate a boolean variable in an if block in bash?","76327","","<p>I have defined the following variable:</p>

<pre><code>myVar=true
</code></pre>

<p>now I'd like to run something along the lines of this:</p>

<pre><code>if [ myVar ]
then
    echo ""true""
else
    echo ""false""
fi
</code></pre>

<p>The above code does work, but if I try to set </p>

<pre><code>myVar=false
</code></pre>

<p>it will still output true.
What might be the problem?</p>

<p>edit: I know I can do something of the form</p>

<pre><code>if [ ""$myVar"" = ""true"" ]; then ...
</code></pre>

<p>but it is kinda awkward.</p>

<p>Thanks</p>
","<p>bash doesn't know boolean variables, nor does <code>test</code> (which is what gets called when you use <code>[</code>).</p>

<p>A solution would be:</p>

<pre><code>if $myVar ; then ... ; fi
</code></pre>

<p>because <code>true</code> and <code>false</code> are commands that return <code>0</code> or <code>1</code> respectively which is what <code>if</code> expects.</p>

<p>Note that the values are ""swapped"". The command after <code>if</code> must return <code>0</code> on success while <code>0</code> means ""false"" in most programming languages.</p>

<p><strong>SECURITY WARNING</strong>: This works because BASH expands the variable, then tries to execute the result as a command! Make sure the variable can't contain malicious code like <code>rm -rf /</code></p>
","3810777"
"What are my environment variables?","76216","","<p>I would like to find out my environment variables in bash. Are they stored somewhere?</p>
","<p>I am not sure if thats what you want, but try <code>printenv</code><br>
This will show you all your environment variables.  </p>

<p>About where they are stored<br>
<a href=""https://stackoverflow.com/questions/532155/linux-where-are-environment-variables-stored"">Linux: where are environment variables stored?</a></p>

<p>How to set Shell Environment Variables<br>
<a href=""http://www.codecoffee.com/tipsforlinux/articles/030.html"" rel=""noreferrer"">http://www.codecoffee.com/tipsforlinux/articles/030.html</a></p>

<p>Happy reading :-)</p>
","4431840"
"How to go to each directory and execute a command?","76207","","<p>How do I write a bash script that goes through each directory inside a parent_directory and <strong>executes</strong> a <strong>command</strong> in <strong>each directory</strong>.</p>

<p>The directory structure is as follows:</p>

<blockquote>
  <p>parent_directory (name could be anything - doesnt follow a pattern)</p>
  
  <ul>
  <li>001 (directory names follow this pattern)
  <ul>
  <li>0001.txt (filenames follow this pattern)</li>
  <li>0002.txt</li>
  <li>0003.txt</li>
  </ul></li>
  <li>002
  <ul>
  <li>0001.txt</li>
  <li>0002.txt</li>
  <li>0003.txt</li>
  <li>0004.txt</li>
  </ul></li>
  <li>003
  <ul>
  <li>0001.txt</li>
  </ul></li>
  </ul>
  
  <p>the number of directories is unknown.</p>
</blockquote>
","<p>You can do the following, when your current directory is <code>parent_directory</code>:</p>

<pre><code>for d in [0-9][0-9][0-9]
do
    ( cd $d &amp;&amp; your-command-here )
done
</code></pre>

<p>The <code>(</code> and <code>)</code> create a subshell, so the current directory isn't changed in the main script.</p>
","7470223"
"What tool to use to draw file tree diagram","75912","","<p>Given a file tree - a directory with directories in it etc, how would you write a script to create a diagram of the file-tree as a graphic file that I can embed in a word processor document.
I prefer vector (SVG, EPS, EMF...) files.
The tool must run on Windows,  but preferably cross-platform.
The tool may be commercial but preferably free.</p>

<p>Update 2012-02-20.
The question was related to a documentation sub project. I had to explan where files (in particular resources and configuration files) reside.
I ended up with using dos tree command. I both screen grabbed the result (for short folders) AND for longer folders I redirected to a text file, which I then edited. For example if a subfolder contained 20 similarly typed files that individually were not important to the point I was making, I left just two and replaced the rest with one ... line. I then printed out the file to console again and screen grabbed it.
Before screen grabbing I had to modify foreground color to black and background color to white, to look better and save ink in a document should that be printed.</p>

<p>It is very surprising that there is no better tool for it. If I had time, I'd write a Visio Extension or may be some command line that produces SVG. SVG being HTML5 substandard, would even allow painless inclusion into online documentation.</p>

<p>Update 2017-10-17.
I am sorry that this question was removed as not belonging to SO. So I have re-worded it. I need a script - not a WYSIWYG too. So any scripting language or library is ok. So it is a code - writing question, and I believe belongs to SO. </p>
","<p>Copying and pasting from the MS-DOS <code>tree</code> command might also work for you. Examples: </p>

<p><strong>tree</strong></p>

<pre><code>C:\Foobar&gt;tree
C:.
├───FooScripts
├───barconfig
├───Baz
│   ├───BadBaz
│   └───Drop
...
</code></pre>

<p><strong>tree /F</strong></p>

<pre><code>C:\Foobar&gt;tree
C:.
├───FooScripts
│    foo.sh
├───barconfig
│    bar.xml
├───Baz
│   ├───BadBaz
│   │    badbaz.xml
│   └───Drop
...
</code></pre>

<p><strong>tree /A</strong></p>

<pre><code>C:\Foobar&gt;tree /A
C:.
+---FooScripts
+---barconfig
+---Baz
¦   +---BadBaz
¦   \---Drop
...
</code></pre>

<p><strong>tree /F /A</strong></p>

<pre><code>C:\Foobar&gt;tree /A
C:.
+---FooScripts
¦    foo.sh
+---barconfig
¦    bar.xml
+---Baz
¦   +---BadBaz
¦   ¦    badbaz.xml
¦   \---Drop
...
</code></pre>

<h3>Syntax <sup>[<a href=""https://www.computerhope.com/treehlp.htm"" rel=""nofollow noreferrer"">source</a>]</sup></h3>

<p><code>tree</code> [<code>drive:</code>][<code>path</code>] [<code>/F</code>] [<code>/A</code>]</p>

<blockquote>
  <p><code>drive:\path</code> — Drive and directory containing disk for display of directory structure, without listing files.</p>
  
  <p><code>/F</code> — Include all files living in every directory.</p>
  
  <p><code>/A</code> — Replace graphic characters used for linking lines with ext characters , instead of graphic characters. <code>/a</code> is used with code pages that do not support graphic characters and to send output to printers that do not properly interpret graphic characters.</p>
</blockquote>
","347577"
"Bower: ""command not found"" after installation","75911","","<p>I seem to be getting the following when I execute <code>npm install bower -g</code></p>

<pre><code>/usr/local/share/npm/bin/bower -&gt; /usr/local/share/npm/lib/node_modules/bower/bin/bower
bower@0.8.6 /usr/local/share/npm/lib/node_modules/bower
</code></pre>

<p>Unfortunately executing any of the bower commands returns <code>-bash: bower: command not found</code></p>

<p><code>which npm</code> returns <code>/usr/local/bin/npm</code> and running <code>which node</code> returns <code>/usr/local/bin/node</code>.</p>
","<p>I assume you installed Node.js through Homebrew, which annoyingly puts installed npm binaries in a place that is usually not in a users path. All you have to do is to add <code>/usr/local/share/npm/bin</code> to your $PATH. You do that by adding <code>export PATH=/usr/local/share/npm/bin:$PATH</code> to your .bashrc/.bash_profile/.zshrc file.</p>

<p>Although I would rather uninstall the Homebrew installed Node.js and install it with the installer from <a href=""http://nodejs.org/"">nodejs.org</a> which doesn't have this problem.</p>

<p><em>This problem is not Bower specific and will be noticeable with any globally installed Node.js binary, eg. grunt, uglify, jshint, etc.</em></p>
","15850125"
"bash script - find file containing text","75799","","<p>In bash I want to return file name (and the path to the file) for every file of type <code>.php|.html|.js</code> containing the case-insensitive string <code>""document.cookie"" | ""setcookie""</code></p>

<p>How would I do that?</p>
","<pre><code>egrep -ir --include=*.{php,html,js} ""(document.cookie|setcookie)"" .
</code></pre>

<p>If you just want file names add the l flag (lowercase L):</p>

<pre><code>egrep -lir --include=*.{php,html,js} ""(document.cookie|setcookie)"" .
</code></pre>
","6153342"
"How can I use Bash syntax in Makefile targets?","75787","","<p>I often find <a href=""http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"" rel=""noreferrer"">Bash</a> syntax very helpful, e.g. process substitution like in <code>diff &lt;(sort file1) &lt;(sort file2)</code>.</p>

<p>Is it possible to use such Bash commands in a Makefile? I'm thinking of something like this:</p>

<pre><code>file-differences:
    diff &lt;(sort file1) &lt;(sort file2) &gt; $@
</code></pre>

<p>In my GNU Make 3.80 this will give an error since it uses the <code>shell</code> instead of <code>bash</code> to execute the commands.</p>
","<p>From the GNU Make documentation,</p>

<pre class=""lang-none prettyprint-override""><code>5.3.1 Choosing the Shell
------------------------

The program used as the shell is taken from the variable `SHELL'.  If
this variable is not set in your makefile, the program `/bin/sh' is
used as the shell.
</code></pre>

<p>So put <code>SHELL := /bin/bash</code> at the top of your makefile, and you should be good to go.</p>

<p>BTW: You can also do this for one target, at least for GNU Make. Each target can have its own variable assignments, like this:</p>

<pre class=""lang-make prettyprint-override""><code>all: a b

a:
    @echo ""a is $$0""

b: SHELL:=/bin/bash   # HERE: this is setting the shell for b only
b:
    @echo ""b is $$0""
</code></pre>

<p>That'll print:</p>

<pre class=""lang-none prettyprint-override""><code>a is /bin/sh
b is /bin/bash
</code></pre>

<p>See ""Target-specific Variable Values"" in the documentation for more details. That line can go anywhere in the Makefile, it doesn't have to be immediately before the target.</p>
","589300"
"How to redirect output of an already running process","75768","","<p>Normally I would start a command like </p>

<pre><code>longcommand &amp;;
</code></pre>

<p>I know you can redirect it by doing something like</p>

<pre><code>longcommand &gt; /dev/null;
</code></pre>

<p>for instance to get rid of the output or</p>

<pre><code>longcommand 2&gt;&amp;1 &gt; output.log
</code></pre>

<p>to capture output.</p>

<p>But I sometimes forget, and was wondering if there is a way to capture or redirect after the fact.</p>

<pre><code>longcommand
ctrl-z
bg 2&gt;&amp;1 &gt; /dev/null
</code></pre>

<p>or something like that so I can continue using the terminal without messages popping up on the terminal.</p>
","<p>See <strong><a href=""http://etbe.coker.com.au/2008/02/27/redirecting-output-from-a-running-process/"" rel=""noreferrer"">Redirecting Output from a Running Process</a></strong>.</p>

<blockquote>
  <p>Firstly I run the command <code>cat &gt; foo1</code> in one session and test that data from stdin is copied to the file. Then in another session I redirect the output.</p>
  
  <p>Firstly find the PID of the process:</p>

<pre><code>$ ps aux | grep cat
rjc 6760 0.0 0.0 1580 376 pts/5 S+ 15:31 0:00 cat
</code></pre>
  
  <p>Now check the file handles it has open:</p>

<pre><code>$ ls -l /proc/6760/fd
total 3
lrwx—— 1 rjc rjc 64 Feb 27 15:32 0 -&gt; /dev/pts/5
l-wx—— 1 rjc rjc 64 Feb 27 15:32 1 -&gt; /tmp/foo1
lrwx—— 1 rjc rjc 64 Feb 27 15:32 2 -&gt; /dev/pts/5
</code></pre>
  
  <p>Now run GDB:</p>

<pre><code>$ gdb -p 6760 /bin/cat
GNU gdb 6.4.90-debian

[license stuff snipped]

Attaching to program: /bin/cat, process 6760

[snip other stuff that's not interesting now]

(gdb) p close(1)
$1 = 0
(gdb) p creat(""/tmp/foo3"", 0600)
$2 = 1
(gdb) q
The program is running. Quit anyway (and detach it)? (y or n) y
Detaching from program: /bin/cat, process 6760
</code></pre>
  
  <p>The <code>p</code> command in GDB will print the value of an expression, an expression can be a function to call, it can be a system call… So I execute a <code>close()</code> system call and pass file handle 1, then I execute a <code>creat()</code> system call to open a new file. The result of the <code>creat()</code> was 1 which means that it replaced the previous file handle. If I wanted to use the same file for stdout and stderr or if I wanted to replace a file handle with some other number then I would need to call the <code>dup2()</code> system call to achieve that result.</p>
  
  <p>For this example I chose to use <code>creat()</code> instead of <code>open()</code> because there are fewer parameter. The C macros for the flags are not usable from GDB (it doesn’t use C headers) so I would have to read header files to discover this – it’s not that hard to do so but would take more time. Note that 0600 is the octal permission for the owner having read/write access and the group and others having no access. It would also work to use 0 for that parameter and run chmod on the file later on.</p>
  
  <p>After that I verify the result:</p>

<pre><code>ls -l /proc/6760/fd/
total 3
lrwx—— 1 rjc rjc 64 2008-02-27 15:32 0 -&gt; /dev/pts/5
l-wx—— 1 rjc rjc 64 2008-02-27 15:32 1 -&gt; /tmp/foo3 &lt;====
lrwx—— 1 rjc rjc 64 2008-02-27 15:32 2 -&gt; /dev/pts/5
</code></pre>
  
  <p>Typing more data in to <code>cat</code> results in the file <code>/tmp/foo3</code> being appended to.</p>
  
  <p>If you want to close the original session you need to close all file handles for it, open a new device that can be the controlling tty, and then call <code>setsid()</code>.</p>
</blockquote>
","1323999"
"How do I negate a test with regular expressions in a bash script?","75692","","<p>Using GNU bash (version 4.0.35(1)-release (x86_64-suse-linux-gnu), I would like to negate a test with Regular Expressions. For example, I would like to conditionally add a path to the PATH variable, if the path is not already there, as in:</p>

<pre><code>TEMP=/mnt/silo/bin
if [[ ${PATH} =~ ${TEMP} ]] ; then PATH=$PATH; else PATH=$PATH:$TEMP; fi
TEMP=/mnt/silo/Scripts:
if [[ ${PATH} =~ ${TEMP} ]] ; then PATH=$PATH; else PATH=$PATH:$TEMP; fi
TEMP=/mnt/silo/local/bin
if [[ ${PATH} =~ ${TEMP} ]] ; then PATH=$PATH; else PATH=$PATH:$TEMP; fi
export PATH
</code></pre>

<p>I'm sure there are a million ways to do this, but what I would like to know is if the conditional can be negated somehow, as in (the erroneous):</p>

<pre><code>TEMP=/mnt/silo/bin
if ![[ ${PATH} =~ ${TEMP} ]] ; then PATH=$PATH:$TEMP; fi
TEMP=/mnt/silo/Scripts:
if ![[ ${PATH} =~ ${TEMP} ]] ; then PATH=$PATH:$TEMP; fi
TEMP=/mnt/silo/local/bin
if ![[ ${PATH} =~ ${TEMP} ]] ; then PATH=$PATH:$TEMP; fi
export PATH
</code></pre>

<p>Thanks!</p>
","<p>You had it right, just put a space between the <code>!</code> and the <code>[[</code> like <code>if ! [[</code></p>
","4542761"
"How to find files recursively by file type and copy them to a directory while in ssh?","75588","","<p>I would like to find all the <code>pdf</code> files in a folder. It contains <code>pdf</code> files inside and more directories that contains more as well. The folder is located on a remote server I have ssh access to. I am using the mac terminal but I believe the server I am connecting to is Centos.</p>

<p>I need to find all the pdfs and copy them all to one directory on the remote server. I've tried about 10 variations with no luck. Both mine and the remote systems do not seem to recognise -exec as a command though exec is fine so thats a problem.</p>

<p>Im not sure what the problem is here but the command does not fail it just sits there and stalls forever so I do not have any useful errors to post.</p>

<pre><code>cp $(find -name ""*.pdf"" -type f; exec ./pdfsfolder {} \; | sed 1q)

find: ./tcs/u25: Permission denied
find: ./tcs/u68: Permission denied
-bash: /var/www/html/tcs_dev/sites/default/files/pdfsfolder: is a directory
-bash: exec: /var/www/html/tcs_dev/sites/default/files/pdfsfolder: cannot execute: Success
cp: target `./runaways_parents_guide_2013_final.pdf' is not a directory
</code></pre>

<p>This is the last one I tried, I think I can ignore the permission denied errors for now but im not sure about the rest. </p>
","<p>Try this:</p>

<pre><code>find . -name ""*.pdf"" -type f -exec cp {} ./pdfsfolder \;
</code></pre>
","18339127"
"Find and Replace string in all files recursive using grep and sed","75532","","<p>I'm getting a </p>

<pre class=""lang-none prettyprint-override""><code>sed: -e expression #1, char 22: unterminated `s' command 
</code></pre>

<p>is there a  problem on my script? Also the ""oldstring"" has special characters</p>

<pre><code>#!bin/bash
oldstring='&lt;script&gt;""[oldscript]""&lt;/script&gt;'
newstring='&lt;script&gt;""[newscript]""&lt;/script&gt;'
grep -rl $oldstring /path/to/folder | xargs sed -i s/$oldstring/$newstring/g
</code></pre>
","<p>As @Didier said, you can change your delimiter to something other than <code>/</code>:</p>

<pre><code>grep -rl $oldstring /path/to/folder | xargs sed -i s@$oldstring@$newstring@g
</code></pre>
","15925875"
"command output redirect to file and terminal","75514","","<p>I am trying to throw command output to file plus console also. This is because i want to keep record of output in file. I am doing following and it appending to file but not printing <code>ls</code> output on terminal. </p>

<pre><code>$ls 2&gt;&amp;1 &gt; /tmp/ls.txt
</code></pre>
","<p>Yes, if you redirect the output, it won't appear on the console. Use <code>tee</code>.</p>

<pre><code>ls 2&gt;&amp;1 | tee /tmp/ls.txt
</code></pre>
","13591423"
"How do I write a for loop in bash","75326","","<p>I'm looking for the basic loop like:</p>

<pre><code>for(int i = 0; i &lt; MAX; i++) {
  doSomething(i);
}
</code></pre>

<p>but for bash.  </p>
","<p>From <a href=""http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html"" rel=""nofollow noreferrer"">this site</a>:</p>

<pre><code>for i in $(seq 1 10);
do
    echo $i
done
</code></pre>
","49111"
"Why do you need ./ (dot-slash) before script name to run it in bash?","75294","","<p>When running scripts in bash, I have to write <code>./</code> in the beginning:</p>

<pre><code>$ ./manage.py syncdb
</code></pre>

<p>If I don't, I get an error message:</p>

<pre><code>$ manage.py syncdb
-bash: manage.py: command not found
</code></pre>

<p>What is the reason for this? I thought <code>.</code> is an alias for current folder, and therefore these two calls should be equivalent.</p>

<p>I also don't understand why I don't need <code>./</code> when running applications, such as:</p>

<pre><code>user:/home/user$ cd /usr/bin
user:/usr/bin$ git
</code></pre>

<p>(which runs without <code>./</code>)</p>
","<p>Because on Unix, usually, the current directory is not in <code>$PATH</code>.</p>

<p>When you type a command the shell looks up a list of directories, as specified by the <code>PATH</code> variable. The current directory is not in that list.</p>

<p>The reason for not having the current directory on that list is security.</p>

<p>Let's say you're root and go into another user's directory and type <code>sl</code> instead of <code>ls</code>. If the current directory is in <code>PATH</code>, the shell will try to execute the <code>sl</code> program in that directory (since there is no other <code>sl</code> program). That <code>sl</code> program might be malicious.</p>

<p>It works with <code>./</code> because <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_09_01"">POSIX specifies</a> that a command name that contain a <code>/</code> will be used as a filename directly, suppressing a search in <code>$PATH</code>. You could have used full path for the exact same effect, but <code>./</code> is shorter and easier to write.</p>

<p><strong>EDIT</strong></p>

<p>That <code>sl</code> part was just an example. The directories in <code>PATH</code> are searched sequentially and when a match is made that program is executed. So, depending on how <code>PATH</code> looks, typing a normal command may or may not be enough to run the program in the current directory.</p>
","6331085"
"How to programmatically determine the current checked out Git branch","75282","","<p><strong>In a Unix or GNU scripting environment (e.g. a Linux distro, Cygwin, OSX), what is the best way to determine which Git branch is currently checked out in a working directory?</strong></p>

<p>One use of this technique would be automatically labeling a release (like <code>svnversion</code> would do with Subversion).</p>

<p>Please also see my related question: <a href=""https://stackoverflow.com/questions/1593188/how-to-programmatically-determine-whether-the-git-checkout-is-a-tag-and-if-so-wh"">How to programmatically determine whether a Git checkout is a tag, and if so what is the tag name?</a></p>
","<p>The correct solution is to take a peek at <a href=""http://git.kernel.org/?p=git/git.git;a=blob;f=contrib/completion/git-completion.bash;hb=HEAD"" rel=""noreferrer"" title=""git.kernel.org - git/git.git/blob - contrib/completion/git-completion.bash"">contrib/completions/git-completion.bash</a> does that for bash prompt in <code>__git_ps1</code>.  Removing all extras like selecting how to describe detached HEAD situation, i.e. when we are on unnamed branch, it is:</p>

<pre><code>branch_name=""$(git symbolic-ref HEAD 2&gt;/dev/null)"" ||
branch_name=""(unnamed branch)""     # detached HEAD

branch_name=${branch_name##refs/heads/}
</code></pre>

<p><a href=""http://www.kernel.org/pub/software/scm/git/docs/git-symbolic-ref.html"" rel=""noreferrer"" title=""git-symbolic-ref - Read and modify symbolic refs"">git symbolic-ref</a> is used to extract fully qualified branch name from symbolic reference; we use it for HEAD, which is currently checked out branch.</p>

<p>Alternate solution could be:</p>

<pre><code>branch_name=$(git symbolic-ref -q HEAD)
branch_name=${branch_name##refs/heads/}
branch_name=${branch_name:-HEAD}
</code></pre>

<p>where in last line we deal with the detached HEAD situation, using simply ""HEAD"" to denote such situation.</p>

<hr>

<p><strong>Added 11-06-2013</strong></p>

<p>Junio C. Hamano (git maintainer) blog post, <a href=""http://git-blame.blogspot.com/2013/06/checking-current-branch-programatically.html"" rel=""noreferrer""><em>Checking the current branch programatically</em></a>, from June 10, 2013 explains <strong><em>whys</em></strong> (and hows) in more detail.</p>
","1593487"
"Copy all files with a certain extension from all subdirectories","75281","","<p>Under unix, I want to copy all files with a certain extension (all excel files) from all subdirectories to another directory. I have the following command:</p>

<pre><code>cp --parents `find -name \*.xls*` /target_directory/
</code></pre>

<p>The problems with this command are:</p>

<ul>
<li><p>It copies the directory structure as well, and I only want the files (so all files should end up in /target_directory/)</p></li>
<li><p>It does not copy files with spaces in the filenames (which are quite a few)</p></li>
</ul>

<p>Any solutions for these problems?</p>
","<p><code>--parents</code> is copying the directory structure, so you should get rid of that.</p>

<p>The way you've written this, the <code>find</code> executes, and the output is put onto the command line such that <code>cp</code> can't distinguish between the spaces separating the filenames, and the spaces <em>within</em> the filename. It's better to do something like</p>

<pre><code>$ find . -name \*.xls -exec cp {} newDir \;
</code></pre>

<p>in which <code>cp</code> is executed for each filename that <code>find</code> finds, and passed the filename correctly. <a href=""http://www.softpanorama.org/Tools/Find/using_exec_option_and_xargs_in_find.shtml"" rel=""noreferrer"">Here's more info</a> on this technique.</p>

<p>Instead of all the above, you could use <a href=""http://www.zsh.org"" rel=""noreferrer"">zsh</a> and simply type</p>

<pre><code>$ cp **/*.xls target_directory
</code></pre>

<p><code>zsh</code> can expand wildcards to include subdirectories and makes this sort of thing very easy.</p>
","15617049"
"Linux bash: Multiple variable assignment","75242","","<p>Does exist in linux bash something similar to the following code in PHP:</p>

<pre><code>list($var1, $var2, $var3) = function_that_returns_a_three_element_array() ;
</code></pre>

<p>i.e. you assign in one sentence a corresponding value to 3 different variables.</p>

<p>Let's say I have the bash function <code>myBashFuntion</code> that writes to stdout the string ""qwert asdfg zxcvb"".
Is it possible to do something like:</p>

<pre><code>(var1 var2 var3) = ( `myBashFuntion param1 param2` )
</code></pre>

<p>The part at the left of the equal sign is not valid syntax of course. I'm just trying to explain what I'm asking for.</p>

<p>What does work, though, is the following:</p>

<pre><code>array = ( `myBashFuntion param1 param2` )
echo ${array[0]} ${array[1]} ${array[2]}
</code></pre>

<p>But an indexed array is not as descriptive as plain variable names.<br>
However, I could just do:</p>

<pre><code>var1 = ${array[0]} ; var2 = ${array[1]} ; var3 = ${array[2]}
</code></pre>

<p>But those are 3 more statements that I'd prefer to avoid.</p>

<p>I'm just looking for a shortcut syntax. Is it possible?</p>
","<p>First thing that comes into my mind:</p>

<pre><code>read -r a b c &lt;&lt;&lt;$(echo 1 2 3) ; echo ""$a|$b|$c""
</code></pre>

<p>output is, unsurprisingly</p>

<pre><code>1|2|3
</code></pre>
","1952480"
"Bash - Curl (6) couldn't resolve host issue","74974","","<p>I am having a problem with my bash script. It is producing an error of </p>

<p><code>curl (6) couldn't resolve host</code></p>

<p>What have I done wrong?</p>

<p>The following is my bash script.</p>

<pre><code>#!/bin/bash

string=""$(mysql -u root -p Company 'select name from HR')""
url=""http://www.company.com/company/hr/$string""

curl -F $url
</code></pre>
","<p>Try printing out the whole string/url. I believe it should have some problems in it. </p>
","8951824"
"OSX bash, 'watch' command","74889","","<p>I'm looking for the best way to duplicate the Linux 'watch' command on Mac OSX. I'd like to run a command every few seconds to pattern match on the contents of an output file using 'tail' and 'sed'. </p>

<p>What's my best option on a Mac, and can it be done without downloading software?</p>
","<p>You can emulate the basic functionality with the shell loop:</p>

<pre><code>while :; do clear; your_command; sleep 2; done
</code></pre>

<p>That will loop forever, clear the screen, run your command, and wait two seconds - the basic <code>watch your_command</code> implementation.</p>

<p>You can take this a step further and create a <code>watch.sh</code> script that can accept <code>your_command</code> and <code>sleep_duration</code> as parameters:</p>

<pre><code>#!/bin/bash
# usage: watch.sh &lt;your_command&gt; &lt;sleep_duration&gt;

while :; 
  do 
  clear
  date
  $1
  sleep $2
done
</code></pre>
","9574123"
"Limit on file name length in bash","74836","","<p>The following questions are meant for bash and linux only: </p>

<ol>
<li>Is there a limit on the number of characters in the absolute path name of a file?  </li>
<li>Is there a limit on the number of characters for the filename (without extension) only?  </li>
</ol>

<p>If so, what might these limits be? How can I access them in case they are system specific? </p>
","<p>It depends very much on the filesystem. For the ext FS (currently the most used on Linux):</p>

<ul>
<li>max filename length: 255 bytes</li>
<li>max path length: none</li>
</ul>

<p>The extension is not something the FS is aware of, it 255 bytes, extension included (you can have file names without any extensions).</p>

<p><a href=""http://en.wikipedia.org/wiki/Comparison_of_file_systems"">Here</a> is a more exhaustive list of these limits, per FS.</p>

<p>There can also be extensions to your file system that can change your maximum length as well. For example, eCryptFS which uses part of the lower file name to keep metadata and limits the file name to a maximum length of 143 characters. See <a href=""https://bugs.launchpad.net/ecryptfs/+bug/344878"">Ubuntu eCryptFS launchpad</a> entry.</p>
","6571568"
"Bash turning multi-line string into single comma-separated","74813","","<p>Let's say I have the following string:</p>

<pre><code>something1:    +12.0   (some unnecessary trailing data (this must go))
something2:    +15.5   (some more unnecessary trailing data)
something4:    +9.0   (some other unnecessary data)
something1:    +13.5  (blah blah blah)
</code></pre>

<p>How do I turn that into simply</p>

<pre><code>+12.0,+15.5,+9.0,+13.5
</code></pre>

<p>in bash?</p>
","<p>You can use <code>awk</code> and <code>sed</code>:</p>

<pre><code>awk -vORS=, '{ print $2 }' file.txt | sed 's/,$/\n/'
</code></pre>

<p>Or if you want to use a pipe:</p>

<pre><code>echo ""data"" | awk -vORS=, '{ print $2 }' | sed 's/,$/\n/'
</code></pre>

<p>To break it down:</p>

<ul>
<li><code>awk</code> is great at handling data broken down into fields</li>
<li><code>-vORS=,</code> sets the ""output record separator"" to <code>,</code>, which is what you wanted</li>
<li><code>{ print $2 }</code> tells <code>awk</code> to print the second field for every record (line)</li>
<li><code>file.txt</code> is your filename</li>
<li><code>sed</code> just gets rid of the trailing <code>,</code> and turns it into a newline (if you want no newline, you can do <code>s/,$//</code>)</li>
</ul>
","8714446"
"What is the purpose of the : (colon) GNU Bash builtin?","74641","","<p>What is the purpose of a command that does nothing, being little more than a comment leader, but is actually a shell builtin in and of itself?</p>

<p>It's slower than inserting a comment into your scripts by about 40% per call, which probably varies greatly depending on the size of the comment. The only possible reasons I can see for it are these:</p>

<pre><code># poor man's delay function
for ((x=0;x&lt;100000;++x)) ; do : ; done

# inserting comments into string of commands
command ; command ; : we need a comment in here for some reason ; command

# an alias for `true' (lazy programming)
while : ; do command ; done
</code></pre>

<p>I guess what I'm really looking for is what historical application it might have had.</p>
","<p><strong>Historically</strong>, Bourne shells didn't have <code>true</code> and <code>false</code> as built-in commands. <code>true</code> was instead simply aliased to <code>:</code>, and <code>false</code> to something like <code>let 0</code>.</p>

<p><code>:</code> is slightly better than <code>true</code> for portability to ancient Bourne-derived shells. As a simple example, consider having neither the <code>!</code> pipeline operator nor the <code>||</code> list operator (as was the case for some ancient Bourne shells). This leaves the <code>else</code> clause of the <code>if</code> statement as the only means for branching based on exit status:</p>

<pre><code>if command; then :; else ...; fi
</code></pre>

<p>Since <code>if</code> requires a non-empty <code>then</code> clause and comments don't count as non-empty, <code>:</code> serves as a no-op.</p>

<p><strong>Nowadays</strong> (that is: in a modern context) you can usually use either <code>:</code> or <code>true</code>. Both are specified by POSIX, and some find <code>true</code> easier to read. However there is one interesting difference: <code>:</code> is a so-called POSIX <em>special built-in</em>, whereas <code>true</code> is a <em>regular built-in</em>.</p>

<ul>
<li><p>Special built-ins are required to be built into the shell; Regular built-ins are only ""typically"" built in, but it isn't strictly guaranteed. There usually shouldn't be a regular program named <code>:</code> with the function of <code>true</code> in PATH of most systems.</p></li>
<li><p>Probably the most crucial difference is that with special built-ins, any variable set by the built-in - even in the environment during simple command evaluation - persists after the command completes, as demonstrated here using ksh93:</p>

<pre><code>$ unset x; ( x=hi :; echo ""$x"" )
hi
$ ( x=hi true; echo ""$x"" )

$
</code></pre>

<p>Note that Zsh ignores this requirement, as does GNU Bash except when operating in POSIX compatibility mode, but all other major ""POSIX sh derived"" shells observe this including dash, ksh93, and mksh.</p></li>
<li><p>Another difference is that regular built-ins must be compatible with <code>exec</code> - demonstrated here using Bash:</p>

<pre><code>$ ( exec : )
-bash: exec: :: not found
$ ( exec true )
$
</code></pre></li>
<li><p>POSIX also explicitly notes that <code>:</code> may be faster than <code>true</code>, though  this is of course an implementation-specific detail.</p></li>
</ul>
","3224910"
"Store output of sed into a variable","74621","","<p>I want to store the second line of my file into a variable, so I am doing this:</p>

<pre><code>sed -n '2p' myfile
</code></pre>

<p>I wish to store the output of the <code>sed</code> command into a variable named <code>line</code>.</p>

<p>What is the correct syntax to do this?</p>
","<p>Use <a href=""http://tldp.org/LDP/abs/html/commandsub.html"" rel=""noreferrer"">command substitution</a> like this:</p>

<pre><code>line=$(sed -n '2p' myfile)
echo ""$line""
</code></pre>

<p>Also note that there is no space around the <code>=</code> sign.</p>
","6749193"
"How to use curl in a shell script?","74574","","<p>I'm trying to run this shell script in order to install RVM in an Ubuntu box</p>

<pre><code>#!/bin/bash
RVMHTTP=""https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer""
CURLARGS=""-f -s -S -k""

bash &lt; &lt;(curl $CURLARGS $RVMHTTP)
</code></pre>

<p>but I get the following error</p>

<blockquote>
  <p>Syntax error: Redirection unexpected</p>
</blockquote>

<p>Also tested not using the variables, but same result, could you tell what I'm missing?</p>
","<pre><code>#!/bin/bash                                                                                                                                                                                     
CURL='/usr/bin/curl'
RVMHTTP=""https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer""
CURLARGS=""-f -s -S -k""

# you can store the result in a variable
raw=""$($CURL $CURLARGS $RVMHTTP)""

# or you can redirect it into a file:
$CURL $CURLARGS $RVMHTTP &gt; /tmp/rvm-installer
</code></pre>

<p>or:</p>

<p><a href=""https://stackoverflow.com/questions/5735666/execute-bash-script-from-url"">Execute bash script from URL</a></p>
","8318726"
"Binary Data Posting with curl","74551","","<p>So basically, I'm trying to write a series of scripts to interact with Dot Net Nuke. I've been analysing the traffic and can now login and do some basic tasks. However, I've never handled binary file upload with curl. Would someone be willing to look at this to help me out? Here's the anatomy of the request:</p>

<p><a href=""http://pastebin.com/qU8ZEMaQ"" rel=""noreferrer"">http://pastebin.com/qU8ZEMaQ</a></p>

<p>Here's what I've got for curl so far:</p>

<p><a href=""http://pastebin.com/LG2ubFZG"" rel=""noreferrer"">http://pastebin.com/LG2ubFZG</a></p>

<p>edit: For the lazy -</p>

<p><em>length of the file is achieved and stored in LENGTH</em>
Bullshit is just a copy/paste of the request URL with parameters, minus the URL itself.</p>

<pre><code>curl -L --cookie ~/.cms --data-binary ""@background.jpg"" \
--header ""Content-Length: $LENGTH"" \
--header ""Content-Disposition: form-data"" \
--header ""name=\""RadFileExplorer1_upload1file0\"""" \
--header ""Content-Type: image/jpg"" \
--header ""Filename=\""background.jpg\"""" \
--data $BULLSHIT \
--referer ""Kept-Secret"" \
""Kept-Secret""
</code></pre>
","<p>You don't need <strong>--header ""Content-Length: $LENGTH""</strong>.</p>

<p>Look for example for Google example:</p>

<p><a href=""http://code.google.com/apis/gdata/articles/using_cURL.html#creating-entries"">http://code.google.com/apis/gdata/articles/using_cURL.html#creating-entries</a></p>

<pre>
curl --request POST --data-binary ""@template_entry.xml"" $URL
</pre>

<p>Note that GET request does not support data transferring.</p>

<p>Also remember that POST request have 2 different coding schema. This is first form:</p>

<pre>
  $ nc -l -p 6666 &
  $ curl  --request POST --data-binary ""@README"" http://localhost:6666

POST / HTTP/1.1
User-Agent: curl/7.21.0 (x86_64-pc-linux-gnu) libcurl/7.21.0 OpenSSL/0.9.8o zlib/1.2.3.4 libidn/1.15 libssh2/1.2.6
Host: localhost:6666
Accept: */*
Content-Length: 9309
Content-Type: application/x-www-form-urlencoded
Expect: 100-continue

.. -*- mode: rst; coding: cp1251; fill-column: 80 -*-
.. rst2html.py README README.html
.. contents::
</pre>

<p>You probably request  this:</p>

<pre>
-F/--form name=content
           (HTTP) This lets curl emulate a filled-in form in
              which a user has pressed the submit button. This
              causes curl to POST data using the Content- Type
              multipart/form-data according to RFC2388. This
              enables uploading of binary files etc. To force the
              'content' part to be a file, prefix the file name
              with an @ sign. To just get the content part from a
              file, prefix the file name with the symbol . The
              difference between @ and  is then that @ makes a
              file get attached in the post as a file upload,
              while the makes a text field and just get the
              contents for that text field from a file.
</pre>
","9134603"
"Diff A Directory Recursively, Ignoring All Binary Files:","74448","","<p>Working on a Fedora Constantine box. I am looking to <code>diff</code> two directories recursively to check for source changes. Due to the setup of the project (prior to my own engagement with said project! <em>sigh</em>), the directories contain both source and binaries, as well as large binary datasets. While diffing eventually works on these directories, it would take perhaps twenty seconds if I could ignore the binary files.</p>

<p>As far as I understand, diff does not have an 'ignore binary file' mode, but does have an ignore argument which will ignore regular expression <strong>within</strong> a file. I don't know what to write there to ignore binary files, regardless of extension.</p>

<p>I'm using the following command, but it does not ignore binary files. Does anyone know how to modify this command to do this?</p>

<p>diff -rq dir1 dir2</p>
","<p>Maybe use <code>grep -I</code> (which is equivalent to <code>grep --binary-files=without-match</code>) as a filter to sort out binary files.</p>

<pre><code>dir1='folder-1'
dir2='folder-2'
IFS=$'\n'
for file in $(grep -Ilsr -m 1 '.' ""$dir1""); do
   diff -q ""$file"" ""${file/${dir1}/${dir2}}""
done
</code></pre>
","6711972"
"Running a script inside a docker container using shell script","74441","","<p>I am new to Docker technology,I am trying to create a shell script for setting up a docker container, my script file looks like following </p>

<pre><code>#!bin/bash

docker run -t -i -p 5902:5902 --name ""mycontainer"" --privileged myImage:new /bin/bash
</code></pre>

<p>Running this script file will run the container in a newly invoked bash.</p>

<p>Now i need to run a script file (test.sh)which is already inside container from the above given shell script.(eg: cd /path/to/test.sh &amp;&amp; ./test.sh)
How to do that, please feel free to ask if the scenario is not clear.</p>
","<p>You can run a command in a running container using <code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code>:</p>

<pre><code>docker exec mycontainer /path/to/test.sh
</code></pre>

<p>And to run from a bash session:</p>

<pre><code>docker exec -it mycontainer /bin/bash
</code></pre>

<p>And from there you can run your script or whatever.   </p>
","31578527"
"How can I get `find` to ignore .svn directories?","74330","","<p>I often use the <code>find</code> command to search through source code, delete files, whatever. Annoyingly, because Subversion stores duplicates of each file in its <code>.svn/text-base/</code> directories my simple searches end up getting lots of duplicate results. For example, I want to recursively search for <code>uint</code> in multiple <code>messages.h</code> and <code>messages.cpp</code> files:</p>

<pre><code># find -name 'messages.*' -exec grep -Iw uint {} +
./messages.cpp:            Log::verbose &lt;&lt; ""Discarding out of date message: id "" &lt;&lt; uint(olderMessage.id)
./messages.cpp:    Log::verbose &lt;&lt; ""Added to send queue: "" &lt;&lt; *message &lt;&lt; "": id "" &lt;&lt; uint(preparedMessage-&gt;id)
./messages.cpp:                Log::error &lt;&lt; ""Received message with invalid SHA-1 hash: id "" &lt;&lt; uint(incomingMessage.id)
./messages.cpp:            Log::verbose &lt;&lt; ""Received "" &lt;&lt; *message &lt;&lt; "": id "" &lt;&lt; uint(incomingMessage.id)
./messages.cpp:            Log::verbose &lt;&lt; ""Sent message: id "" &lt;&lt; uint(preparedMessage-&gt;id)
./messages.cpp:        Log::verbose &lt;&lt; ""Discarding unsent message: id "" &lt;&lt; uint(preparedMessage-&gt;id)
./messages.cpp:        for (uint i = 0; i &lt; 10 &amp;&amp; !_stopThreads; ++i) {
./.svn/text-base/messages.cpp.svn-base:            Log::verbose &lt;&lt; ""Discarding out of date message: id "" &lt;&lt; uint(olderMessage.id)
./.svn/text-base/messages.cpp.svn-base:    Log::verbose &lt;&lt; ""Added to send queue: "" &lt;&lt; *message &lt;&lt; "": id "" &lt;&lt; uint(preparedMessage-&gt;id)
./.svn/text-base/messages.cpp.svn-base:                Log::error &lt;&lt; ""Received message with invalid SHA-1 hash: id "" &lt;&lt; uint(incomingMessage.id)
./.svn/text-base/messages.cpp.svn-base:            Log::verbose &lt;&lt; ""Received "" &lt;&lt; *message &lt;&lt; "": id "" &lt;&lt; uint(incomingMessage.id)
./.svn/text-base/messages.cpp.svn-base:            Log::verbose &lt;&lt; ""Sent message: id "" &lt;&lt; uint(preparedMessage-&gt;id)
./.svn/text-base/messages.cpp.svn-base:        Log::verbose &lt;&lt; ""Discarding unsent message: id "" &lt;&lt; uint(preparedMessage-&gt;id)
./.svn/text-base/messages.cpp.svn-base:        for (uint i = 0; i &lt; 10 &amp;&amp; !_stopThreads; ++i) {
./virus/messages.cpp:void VsMessageProcessor::_progress(const string &amp;fileName, uint scanCount)
./virus/messages.cpp:ProgressMessage::ProgressMessage(const string &amp;fileName, uint scanCount)
./virus/messages.h:    void _progress(const std::string &amp;fileName, uint scanCount);
./virus/messages.h:    ProgressMessage(const std::string &amp;fileName, uint scanCount);
./virus/messages.h:    uint        _scanCount;
./virus/.svn/text-base/messages.cpp.svn-base:void VsMessageProcessor::_progress(const string &amp;fileName, uint scanCount)
./virus/.svn/text-base/messages.cpp.svn-base:ProgressMessage::ProgressMessage(const string &amp;fileName, uint scanCount)
./virus/.svn/text-base/messages.h.svn-base:    void _progress(const std::string &amp;fileName, uint scanCount);
./virus/.svn/text-base/messages.h.svn-base:    ProgressMessage(const std::string &amp;fileName, uint scanCount);
./virus/.svn/text-base/messages.h.svn-base:    uint        _scanCount;
</code></pre>

<p>How can I tell <code>find</code> to ignore the <code>.svn</code> directories?</p>

<hr>

<p><strong>Update</strong>: If you upgrade  your SVN client to <a href=""http://subversion.apache.org/docs/release-notes/1.7.html#single-db"" rel=""noreferrer"">version 1.7</a> this is no longer an issue.</p>

<blockquote>
  <p>A key feature of the changes introduced in Subversion 1.7 is the centralization of working copy metadata storage into a single location. Instead of a <code>.svn</code> directory in every directory in the working copy, Subversion 1.7 working copies have just one <code>.svn</code> directory—in the root of the working copy. This directory includes (among other things) an SQLite-backed database which contains all of the metadata Subversion needs for that working copy.</p>
</blockquote>
","<p>For searching, can I suggest you look at <a href=""http://www.betterthangrep.com"" rel=""noreferrer"">ack</a> ? It's a source-code aware <code>find</code>, and as such will automatically ignore many file types, including source code repository info such as the above.</p>
","2314668"
"How to run a bash script from C++ program","74128","","<p>Bash scripts are very useful and can save a lot of programming time. So how do you start a bash script in a C++ program? Also if you know how to make user become the super-user that would be nice also. Thanks!</p>
","<p>Use the <code>system</code> function.</p>

<pre><code>system(""myfile.sh""); // myfile.sh should be chmod +x
</code></pre>
","646222"
"How to resolve ""You need to have Ruby and Sass installed and in your PATH for this task to work"" Warning?","73933","","<p>I am in the process of setting up a new Mac for work. I have installed Grunt &amp; Grunt CLI globally. Then I did a <code>npm install</code> inside a project folder to install all dependencies.  </p>

<p>No problems so far, but as soon as I try to run the <code>sass:dist</code> task, I get this warning:  </p>

<pre><code>Warning: You need to have Ruby and Sass installed and in your PATH for
this task to work. More info:
https://github.com/gruntjs/grunt-contrib-sass Use --force 
to continue.
</code></pre>

<p>What I understand is that I need to have Ruby and Sass installed on a more global level for this task to run. As I am still pretty new to working with the terminal, I did a quick search to find out what <code>PATH</code> is - seems like its some system path (that can be changed) where important data is stored.  </p>

<p>Does this mean I can simply do a <code>sudo grunt install contrib-sass -g</code> to resolve the issue? And what about Ruby – I always thought its already installed on OS X?</p>
","<p>Ok I got it. I just had to install Sass using <code>gem install sass</code> and now everything is fine...couldn't be easier.</p>
","20177294"
"using cut command to remove multiple columns","73821","","<p>given input</p>

<pre>
 echo 1,2,3,4,5,6,7,8,9,...100 
</pre>

<p>If I want to cut columns 5  I can do</p>

<pre>
cut -d, -f-4,6-
</pre>

<p>what if I want to cut multiple non consecutive columns like 5, 7,etc
is there a one liner?</p>
","<p>You should be able to continue the sequences directly in your existing <code>-f</code> specification.</p>

<p>To skip both 5 and 7, try:</p>

<pre><code>cut -d, -f-4,6-6,8-
</code></pre>

<p>As you're skipping a single sequential column, this can also be written as:</p>

<pre><code>cut -d, -f-4,6,8-
</code></pre>

<p>To keep it going, if you wanted to skip 5, 7, and 11, you would use:</p>

<pre><code>cut -d, -f-4,6-6,8-10,12-
</code></pre>

<p>To put it into a more-clear perspective, it is easier to visualize when you use starting/ending columns which go on the beginning/end of the sequence list, respectively. For instance, the following will print columns 2 through 20, skipping columns 5 and 11:</p>

<pre><code>cut -d, -f2-4,6-10,12-20
</code></pre>

<p>So, this will print ""2 through 4"", skip 5, ""6 through 10"", skip 11, and then ""12 through 20"".</p>
","13690563"
"How to display a specific user's commits in svn log?","73722","","<p>How to display a specific user's commits in svn? I didn't find any switches for that for svn log.</p>
","<p>You could use this:</p>

<pre><code>svn log | sed -n '/USERNAME/,/-----$/ p' 
</code></pre>

<p>It will show you every commit made by the specified user (USERNAME).</p>

<p><strong>UPDATE</strong></p>

<p>As suggested by @bahrep, <a href=""http://svnbook.red-bean.com/en/1.8/svn.ref.svn.html#svn.ref.svn.sw.search"" rel=""noreferrer"">subversion 1.8</a> comes with a <code>--search</code> option.</p>
","4500627"
"how do I check in bash whether a file was created more than x time ago?","73429","","<p>I want to check in linux bash  whether a file was created more than x time ago.</p>

<p>let's say the file is called text.txt and the time is 2 hours.</p>

<pre><code> if [ what? ]
 then
     echo print ""old enough""
 fi
</code></pre>
","<p>Only for modification time</p>

<pre><code>if test `find ""text.txt"" -mmin +120`
then
    echo old enough
fi
</code></pre>

<p>Or, the same in one line:</p>

<pre><code>#!/bin/bash
find text.txt -mmin +120 -exec echo ""old enough"" \;
</code></pre>

<p>You can use <code>-cmin</code> for change or <code>-amin</code> for access time.  As others pointed I don’t think you can track creation time.</p>
","552750"
"Get string after character","73287","","<p>I have a string that looks like this:</p>

<pre><code> GenFiltEff=7.092200e-01
</code></pre>

<p>Using bash, I would like to just get the number after the <code>=</code> character. Is there a way to do this?</p>
","<pre><code>cut -d ""="" -f 2 &lt;&lt;&lt; ""$your_str""
</code></pre>

<p>or</p>

<pre><code>sed -e 's#.*=\(\)#\1#' &lt;&lt;&lt; ""$your_str""
</code></pre>
","15148818"
"Passing variables in remote ssh command","73275","","<p>I want to be able to run a command from my machine using ssh and pass through the environment variable $BUILD_NUMBER</p>

<p>Here's what I'm trying:</p>

<pre><code>ssh pvt@192.168.1.133 '~/tools/myScript.pl $BUILD_NUMBER'
</code></pre>

<p>$BUILD_NUMBER is set on the machine making the ssh call and since the variable doesn't exist on the remote host, it doesn't get picked up.</p>

<p>How do I pass the value of $BUILD_NUMBER ?</p>
","<p>If you use</p>

<pre><code>ssh pvt@192.168.1.133 ""~/tools/run_pvt.pl $BUILD_NUMBER""
</code></pre>

<p>instead of</p>

<pre><code>ssh pvt@192.168.1.133 '~/tools/run_pvt.pl $BUILD_NUMBER'
</code></pre>

<p>your shell will interpolate the <code>$BUILD_NUMBER</code> before sending the command string to the remote host.</p>
","3314678"
"Difference between single and double quotes in Bash","73126","","<p>In Bash, what are the differences between single quotes (<code>''</code>) and double quotes (<code>""""</code>)?</p>
","<p>Single quotes won't interpolate anything, but double quotes will (for example variables, backticks, certain <code>\</code> escapes, etc...)</p>

<p>The Bash manual has this to say:</p>

<blockquote>
  <p><a href=""http://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html"" rel=""noreferrer"">3.1.2.2 Single Quotes</a></p>
  
  <p>Enclosing characters in single quotes (<code>'</code>) preserves the literal value of each character within the quotes. A single quote may not occur between single quotes, even when preceded by a backslash. </p>
  
  <p><a href=""http://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html"" rel=""noreferrer"">3.1.2.3 Double Quotes</a></p>
  
  <p>Enclosing characters in double quotes (<code>""</code>) preserves the literal value of all characters within the quotes, with the exception of <code>$</code>, <code>`</code>, <code>\</code>, and, when history expansion is enabled, <code>!</code>. The characters <code>$</code> and <code>`</code> retain their special meaning within double quotes (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Shell-Expansions.html#Shell-Expansions"" rel=""noreferrer"">Shell Expansions</a>). The backslash retains its special meaning only when followed by one of the following characters: <code>$</code>, <code>`</code>, <code>""</code>, <code>\</code>, or newline. Within double quotes, backslashes that are followed by one of these characters are removed. Backslashes preceding characters without a special meaning are left unmodified. A double quote may be quoted within double quotes by preceding it with a backslash. If enabled, history expansion will be performed unless an <code>!</code> appearing in double quotes is escaped using a backslash. The backslash preceding the <code>!</code> is not removed.</p>
  
  <p>The special parameters <code>*</code> and <code>@</code> have special meaning when in double quotes (see <a href=""https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html#Shell-Parameter-Expansion"" rel=""noreferrer"">Shell Parameter Expansion</a>). </p>
</blockquote>
","6697781"
"Execute a shell script in current shell with sudo permission","73094","","<p>For executing a shell script in current shell, we need to use a period <code>.</code> or a <code>source</code> command. But why does it not work with a sudo permission?</p>

<p>I have a script with execute permission called <code>setup.sh</code>. When I use a period, I get this:</p>

<pre><code>$ sudo . ./setup.sh 
sudo: .: command not found
</code></pre>

<p>The source command also produces a similar error. Am I missing out something? What should I do to run the script with sudo permission in the same shell?</p>

<p>Thanks in advance..</p>
","<p>What you are trying to do is impossible; your current shell is running under your regular user ID (i.e. without root the access <code>sudo</code> would give you), and <em>there is no way to grant it root access</em>. What <code>sudo</code> does is create a new *sub*process that runs as root. The subprocess could be just a regular program (e.g. <code>sudo cp ...</code> runs the <code>cp</code> program in a root process) or it could be a root subshell, but it <em>cannot</em> be the current shell.</p>

<p>(It's actually even more impossible than that, because the <code>sudo</code> command itself is executed as a subprocess of the current shell -- meaning that in a sense it's already too late for it to do anything in the ""current shell"", because that's not where it executes.)</p>
","18815385"
"Use Awk to extract substring","73037","","<p>Given a hostname in format of <code>aaa0.bbb.ccc</code>, I want to extract the first substring before <code>.</code>, that is, <code>aaa0</code> in this case. I use following awk script to do so,</p>

<pre><code>echo aaa0.bbb.ccc | awk '{if (match($0, /\./)) {print substr($0, 0, RSTART - 1)}}'
</code></pre>

<p>While the script running on one machine <code>A</code> produces <code>aaa0</code>, running on machine <code>B</code> produces only <code>aaa</code>, without <code>0</code> in the end. Both machine runs <code>Ubuntu/Linaro</code>, but <code>A</code> runs newer version of awk(gawk with version 3.1.8 while <code>B</code> with older awk (mawk with version 1.2)</p>

<p>I am asking in general, how to write a compatible awk script that performs the same functionality ...</p>
","<p>You just want to set the field separator as <code>.</code> using the <code>-F</code> option and print the first field:</p>

<pre><code>$ echo aaa0.bbb.ccc | awk -F'.' '{print $1}'
aaa0
</code></pre>

<p>Same thing but using cut:</p>

<pre><code>$ echo aaa0.bbb.ccc | cut -d'.' -f1
aaa0
</code></pre>

<p>Or with <code>sed</code>:</p>

<pre><code>$ echo aaa0.bbb.ccc | sed 's/[.].*//'
aaa0
</code></pre>

<p>Even <code>grep</code>:</p>

<pre><code>$ echo aaa0.bbb.ccc | grep -o '^[^.]*'
aaa0
</code></pre>
","16040609"
"How to run C program on Mac OS X using Terminal?","73007","","<p>I am new to C. Here is my ""Hello,world!"" program.</p>

<pre><code>#include &lt;stdio.h&gt;

int main(void)    
{
  printf(""Hello, world!\n"");
  return 0;
}
</code></pre>

<p>After I try to run it using Terminal it says:</p>

<pre class=""lang-none prettyprint-override""><code>MacBook-Pro-MacBook:~ macbook$ /Users/macbook/Desktop/peng/Untitled1
-bash: /Users/macbook/Desktop/peng/Untitled1: Permission denied
MacBook-Pro-MacBook:~ macbook$ 
</code></pre>

<p>Why?</p>
","<p>First save your program as <code>program.c</code>.</p>

<p>Now you need the compiler, so you need to go to <strong>App Store</strong> and install <strong>Xcode</strong> which is Apple's compiler and development tools. How to find <strong>App Store</strong>? Do a <em>""Spotlight Search""</em> by typing <kbd>&#8984;</kbd><kbd>Space</kbd> and start typing <code>App Store</code> and hit <kbd>Enter</kbd> when it guesses correctly.</p>

<p><strong>App Store</strong> looks like this:</p>

<p><a href=""https://i.stack.imgur.com/BNUYi.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/BNUYi.png"" alt=""enter image description here""></a></p>

<p><strong>Xcode</strong> looks like this on <strong>App Store</strong>:</p>

<p><a href=""https://i.stack.imgur.com/bgEBn.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/bgEBn.png"" alt=""enter image description here""></a></p>

<p>Then you need to install the command-line tools in <strong>Terminal</strong>. How to start <strong>Terminal</strong>? You need to do another <em>""Spotlight Search""</em>, which means you type <kbd>&#8984;</kbd><kbd>Space</kbd> and start typing <code>Terminal</code> and hit <kbd>Enter</kbd> when it guesses <code>Terminal</code>.</p>

<p>Now install the command-line tools like this:</p>

<pre><code>xcode-select --install
</code></pre>

<p>Then you can compile your code with by simply running <code>gcc</code> as in the next line without having to fire up the big, ugly software development GUI called <code>Xcode</code>:</p>

<pre><code>gcc -Wall -o program program.c
</code></pre>

<p><strong>Note</strong>: On newer versions of OS X, you would use <code>clang</code> instead of <code>gcc</code>, like this:</p>

<pre><code>clang program.c -o program
</code></pre>

<p>Then you can run it with:</p>

<pre><code>./program
Hello, world!
</code></pre>

<hr>

<p>If your program is C++, you'll probably want to use one of these commands:</p>

<pre><code>clang++ -o program program.cpp
g++ -std=c++11 -o program program.cpp
g++-7 -std=c++11 -o program program.cpp
</code></pre>
","32338889"
"How to copy in bash all directory and files recursive?","72976","","<p>I have script:</p>

<pre><code>find ./SourceFoler/ -maxdepth 4 -exec cp -R '{}' ./DestFolder/ \;
</code></pre>

<p>SourceDir contains also sub-folders.</p>

<p>Problem that in DestFolder not only all tree, but in up level all another levels and files.
How to fix ?
Thanks.</p>
","<pre><code>cp -r ./SourceFolder ./DestFolder
</code></pre>
","8055544"
"Creating temporary files in bash","72966","","<p>Are there objectively better ways to create temporary files in bash scripts?</p>

<p>I normally just name them whatever comes to my mind, such as tempfile-123, since it will be deleted when the script is over. Is there any disadvantage in doing this other than overwriting a possible tempfile-123 in current folder? Or is there any advantage in creating a temporary file in a more careful way?</p>
","<p>The <code>mktemp(1)</code> man page explains it fairly well:</p>

<blockquote>
  <p>Traditionally, many shell scripts take the name of the program with
  the pid as a suffix and use that as a temporary file name. This kind
  of naming scheme is predictable and the race condition it creates is
  easy for an attacker to win.  A safer, though still inferior, approach
  is to make a temporary directory using the same naming scheme. While
  this does allow one to guarantee that a temporary file will not be
  subverted, it still allows a simple denial of service attack.  For
  these reasons it is suggested that mktemp be used instead.</p>
</blockquote>

<p>In a script, I invoke mktemp something like</p>

<pre><code>mydir=$(mktemp -d ""${TMPDIR:-/tmp/}$(basename $0).XXXXXXXXXXXX"")
</code></pre>

<p>which creates a temporary directory I can work in, and in which I can safely name the actual files something readable and useful.</p>

<p><code>mktemp</code> is not standard, but it does exist on many platforms. The ""X""s will generally get converted into some randomness, and more will probably be more random; however, some systems (busybox ash, for one) limit this randomness more significantly than others</p>

<hr>

<p>By the way, safe creation of temporary files is important for more than just shell scripting. That's why python has <a href=""http://docs.python.org/library/tempfile.html"" rel=""noreferrer"">tempfile</a>, perl has <a href=""http://perldoc.perl.org/File/Temp.html"" rel=""noreferrer"">File::Temp</a>, ruby has <a href=""http://www.ruby-doc.org/stdlib-1.9.3/libdoc/tempfile/rdoc/Tempfile.html"" rel=""noreferrer"">Tempfile</a>, etc…</p>
","10983009"
"Use bash to find first folder name that contains a string","72913","","<p>I would like to do this in Bash:</p>

<ul>
<li>in the current directory, find the first folder that contains ""foo"" in the name</li>
</ul>

<p>I've been playing around with the find command, but a little confused. Any suggestions?</p>
","<p>You can use the <code>-quit</code> option of <code>find</code>:</p>

<pre><code>find &lt;dir&gt; -maxdepth 1 -type d -name '*foo*' -print -quit
</code></pre>
","16344484"
"How to execute a .sql script from bash","72786","","<p>Basically, I need to setup a database from a bash script. I have a script db.sql that does all this. Now how do I run this script from bash?</p>

<p>Database system is mysql</p>
","<p>You simply need to start <code>mysql</code> and feed it with the content of <code>db.sql</code>:</p>

<pre><code>mysql -u user -p &lt; db.sql
</code></pre>
","7616552"
"What does -z mean in Bash?","72723","","<p>I'm looking at the following code:  </p>

<pre><code>if [ -z $2 ]; then
        echo ""usage: ...
</code></pre>

<p>(The 3 dots are irrelevant usage details.)<br>
Maybe I'm googling it wrong, but I couldn't find an explanation for the <code>-z</code> option.</p>
","<p><code>-z string</code>   True if the string is null (an empty string)</p>
","18096739"
"Delete all but the most recent X files in bash","72704","","<p>Is there a simple way, in a pretty standard UNIX environment with bash, to run a command to delete all but the most recent X files from a directory?</p>

<p>To give a bit more of a concrete example, imagine some cron job writing out a file (say, a log file or a tar-ed up backup) to a directory every hour. I'd like a way to have another cron job running which would remove the oldest files in that directory until there are less than, say, 5.</p>

<p>And just to be clear, there's only one file present, it should never be deleted.</p>
","<p>The problems with the existing answers:</p>

<ul>
<li>inability to handle filenames with embedded spaces or newlines.

<ul>
<li>in the case of solutions that invoke <code>rm</code> directly on an unquoted command substitution (<code>rm `...`</code>), there's an added risk of unintended globbing.</li>
</ul></li>
<li>inability to distinguish between files and directories (i.e., if <em>directories</em> happened to be among the 5 most recently modified filesystem items, you'd effectively retain <em>fewer</em> than 5 files, and applying <code>rm</code> to directories will fail).</li>
</ul>

<p><a href=""https://stackoverflow.com/a/299911/45375"">wnoise's answer</a> addresses these issues, but the solution is <em>GNU</em>-specific (and quite complex).</p>

<p>Here's a pragmatic, <strong>POSIX-compliant solution</strong> that comes with only <strong>one caveat</strong>: it cannot handle filenames with embedded <em>newlines</em> - but I don't consider that a real-world concern for most people.  </p>

<p><sup>For the record, here's the explanation for why it's generally not a good idea to parse <code>ls</code> output: <a href=""http://mywiki.wooledge.org/ParsingLs"" rel=""noreferrer"">http://mywiki.wooledge.org/ParsingLs</a></sup></p>

<pre><code>ls -tp | grep -v '/$' | tail -n +6 | xargs -I {} rm -- {}
</code></pre>

<p>The above is <strong>inefficient</strong>, because <code>xargs</code> has to invoke <code>rm</code> once for <em>each</em> filename.<br>
Your platform's <code>xargs</code> may allow you to solve this problem:</p>

<p>If you have <strong><em>GNU</em> <code>xargs</code></strong>, use <code>-d '\n'</code>, which makes <code>xargs</code> consider each input line a separate argument, yet passes as many arguments as will fit on a command line <em>at once</em>:</p>

<pre><code>ls -tp | grep -v '/$' | tail -n +6 | xargs -d '\n' -r rm --
</code></pre>

<p><sup><code>-r</code> (<code>--no-run-if-empty</code>) ensures that <code>rm</code> is not invoked if there's no input.</sup></p>

<p>If you have <strong><em>BSD</em> <code>xargs</code></strong> (including on <strong>OS X</strong>), you can use <code>-0</code> to handle <code>NUL</code>-separated input, after first translating newlines to <code>NUL</code> (<code>0x0</code>) chars., which also passes (typically) all filenames <em>at once</em> (will also work with GNU <code>xargs</code>):</p>

<pre><code>ls -tp | grep -v '/$' | tail -n +6 | tr '\n' '\0' | xargs -0 rm --
</code></pre>

<p><strong>Explanation:</strong></p>

<ul>
<li><code>ls -tp</code> prints the names of filesystem items sorted by how recently they were modified , in descending order (most recently modified items first) (<code>-t</code>), with directories printed with a trailing <code>/</code> to mark them as such (<code>-p</code>).</li>
<li><code>grep -v '/$'</code> then weeds out directories from the resulting listing, by omitting (<code>-v</code>) lines that have a trailing <code>/</code> (<code>/$</code>).

<ul>
<li><em>Caveat</em>: Since a <em>symlink that points to a directory</em> is technically not itself a directory, such symlinks will <em>not</em> be excluded.</li>
</ul></li>
<li><code>tail -n +6</code> skips the first <em>5</em> entries in the listing, in effect returning all <em>but</em> the 5 most recently modified files, if any.<br>
Note that in order to exclude <code>N</code> files, <code>N+1</code> must be passed to <code>xargs -n +</code>.</li>
<li><code>xargs -I {} rm -- {}</code> (and its variations) then invokes on <code>rm</code> on all these files; if there are no matches at all, <code>xargs</code> won't do anything.

<ul>
<li><code>xargs -I {} rm -- {}</code> defines placeholder <code>{}</code> that represents each input line <em>as a whole</em>, so <code>rm</code> is then invoked once for each input line, but with filenames with embedded spaces handled correctly.</li>
<li><code>--</code> in all cases ensures that any filenames that happen to start with <code>-</code> aren't mistaken for <em>options</em> by <code>rm</code>.</li>
</ul></li>
</ul>

<hr>

<p>A <strong>variation</strong> on the original problem, <strong>in case the matching files need to be processed <em>individually</em> or <em>collected in a shell array</em></strong>:</p>

<pre><code># One by one, in a shell loop (POSIX-compliant):
ls -tp | grep -v '/$' | tail -n +6 | while IFS= read -r f; do echo ""$f""; done

# One by one, but using a Bash process substitution (&lt;(...), 
# so that the variables inside the `while` loop remain in scope:
while IFS= read -r f; do echo ""$f""; done &lt; &lt;(ls -tp | grep -v '/$' | tail -n +6)

# Collecting the matches in a Bash *array*:
IFS=$'\n' read -d '' -ra files  &lt; &lt;(ls -tp | grep -v '/$' | tail -n +6)
printf '%s\n' ""${files[@]}"" # print array elements
</code></pre>
","34862475"
"What does ""export"" do in shell programming?","72694","","<p>As far as I can tell, variable assignment is the same whether it is or is not preceded by ""export"". What's it for?</p>
","<p>Exported variables (such as <code>$HOME</code> and <code>$PATH</code>) are available to other programs.
Regular (non-exported) variables are not available to other programs.</p>

<pre><code>$ env | grep '^variable='
$                                 # No environment variable called variable
$ variable=Hello                  # Create local (non-exported) variable with value
$ env | grep '^variable='
$                                 # Still no environment variable called variable
$ export variable                 # Mark variable for export to child processes
$ env | grep '^variable='
variable=Hello
$
$ export other_variable=Goodbye   # create and initialize exported variable
$ env | grep '^other_variable='
other_variable=Goodbye
$
</code></pre>

<p>For more information, see the entry for the <a href=""http://www.gnu.org/software/bash/manual/bash.html#index-export"" rel=""nofollow noreferrer""><code>export</code> builtin</a> in the GNU Bash manual.</p>

<p>Note that non-exported variables will be available to subshells run via <code>( ... )</code> and similar notations:</p>

<pre><code>$ othervar=present
$ (echo $othervar; echo $variable; variable=elephant; echo $variable)
present
Hello
elephant
$ echo $variable
Hello
$
</code></pre>

<p>The subshell cannot affect the variable in the parent shell, of course.</p>

<p>Some information about subshells can be found under <a href=""http://www.gnu.org/software/bash/manual/bash.html#Command-Grouping.html"" rel=""nofollow noreferrer"">command grouping</a> and <a href=""http://www.gnu.org/software/bash/manual/bash.html#Command-Execution-Environment"" rel=""nofollow noreferrer"">command execution environment</a> in the Bash manual.</p>
","7411509"
"How to prevent rm from reporting that a file was not found?","72647","","<p>I am using <code>rm</code> within a BASH script to delete many files. Sometimes the files are not present, so it reports many errors. I do not need this message. I have searched the man page for a command to make <code>rm</code> quiet, but the only option I found is <code>-f</code>, which from the description, ""ignore nonexistent files, never prompt"", seems to be the right choice, but the name does not seem to fit, so I am concerned it might have unintended consequences.</p>

<ul>
<li>Is the <code>-f</code> option the correct way to silence <code>rm</code>? Why isn't it called <code>-q</code>?</li>
<li>Does this option do anything else?</li>
</ul>
","<p>The main use of <code>-f</code> is to force the removal of files that would
not be removed using <code>rm</code> by itself (as a special case, it ""removes""
non-existant files, thus suppressing the error message).</p>

<p>You can also just redirect the error message using</p>

<pre><code>$ rm file.txt 2&gt; /dev/null
</code></pre>

<p>(or your operating system's equivalent). You can check the value of <code>$?</code>
immediately after calling <code>rm</code> to see if a file was actually removed or not.</p>
","10250395"
"Bash: Sleep until a specific time/date","72452","","<p>I want my bash script to sleep until a specific time. So, I want a command like ""sleep"" which takes no interval but an end time and sleeps until then.</p>

<p>The ""at""-daemon is not a solution, as I need to block a running script until a certain date/time.</p>

<p>Is there such a command?</p>
","<p>As mentioned by Outlaw Programmer, I think the solution is just to sleep for the correct number of seconds.</p>

<p>To do this in bash, do the following:</p>

<pre><code>current_epoch=$(date +%s)
target_epoch=$(date -d '01/01/2010 12:00' +%s)

sleep_seconds=$(( $target_epoch - $current_epoch ))

sleep $sleep_seconds
</code></pre>

<p>To add precision down to nanoseconds (effectively more around milliseconds) use e.g. this syntax:</p>

<pre><code>current_epoch=$(date +%s.%N)
target_epoch=$(date -d ""20:25:00.12345"" +%s.%N)

sleep_seconds=$(echo ""$target_epoch - $current_epoch""|bc)

sleep $sleep_seconds
</code></pre>

<p>Note that macOS / OS X does not support precision below seconds, you would need to use <code>coreutils</code> from <code>brew</code> instead &rarr;  <a href=""https://apple.stackexchange.com/q/135742/14994"">see these instructions</a></p>
","646008"
"Linux (Bash): Redirect all output to file","72307","","<p>I am trying to redirect all output from a command line programme to a file.  I am using Bash.  Some of the output is directed to a the file, but some still appears in the terminal and is not stored to the file.  </p>

<p>Similar symptoms are described here:</p>

<p><a href=""https://stackoverflow.com/questions/6674327/redirect-all-output-to-file"">Redirect all output to file</a></p>

<p>However I have tried the proposed solution (capture stderr) without success:</p>

<pre><code>&lt;cmd&gt; &lt;args&gt; &gt; stdout.txt 2&gt; stderr.txt
</code></pre>

<p>The file stderr.txt is created but is empty.</p>

<p>A possible clue is that the command-line programme is a client communicating with a server on the same machine.  It may be that some of the output is coming from the <strong>server</strong>.  </p>

<p>Is there a way to capture all the output from the terminal, irrespective of its origin?</p>

<p><strong>EDIT:</strong></p>

<p>I've confirmed that the missing output is generated by the server.  Running the command in a separate terminal causes some output in both terminals, I can pipe all the output from the command terminal to a file.  This raises issues about how to capture the server output, but that's a different question.</p>
","<p>If the server is started on the same terminal, then it's the server's stderr that is presumably being written to the terminal and which you are not capturing.</p>

<p>The best way to capture everything would be to run:</p>

<pre><code>script output.txt
</code></pre>

<p>before starting up either the server or the client. This will launch a new shell with all terminal output redirected out output.txt as well as the terminal. Then start the server from within that new shell, and then the client. Everything that you see on the screen (both your input and the output of everything writing to the terminal from within that shell) will be written to the file.</p>

<p>When you are done, type ""exit"" to exit the shell run by the <code>script</code> command.</p>
","16842294"
"How can you run a command in bash over until success","72152","","<p>I have a script and want to ask the user for some information, the script cannot continue until the user fills in this information. The following is my attempt at putting a command into a loop to achieve this but it doesn't work for some reason.</p>

<pre><code>echo ""Please change password""
while passwd
do
echo ""Try again""
done
</code></pre>

<p>I have tried many variations of the while loop:</p>

<pre><code>while `passwd`
while [[ ""`passwd`"" -gt 0 ]]
while [ `passwd` -ne 0 ]]
# ... And much more
</code></pre>

<p>But I can't seem to get it to work.</p>
","<pre><code>until passwd
do
  echo ""Try again""
done
</code></pre>
","5274386"
"How to convert ISO8859-15 to UTF8?","72120","","<p>I have an Arabic file encoded in <a href=""https://en.wikipedia.org/wiki/ISO/IEC_8859-15"" rel=""noreferrer"">ISO8859-15</a>. How can I convert it into UTF8?<br>
I used <code>iconv</code> but it doesn't work for me.</p>

<pre><code>iconv -f ISO-8859-15 -t UTF-8 Myfile.txt
</code></pre>

<p>I wanted to attach the file, but I don't know how.</p>
","<p>Could it be that your file is not ISO-8859-15 encoded? You should be able to check with the file command:<pre>file YourFile.txt</pre></p>

<p>Also, you can use iconv without providing the encoding of the original file:<pre>iconv -t UTF-8 YourFile.txt</pre></p>
","12215035"
"How to store directory files listing into an array?","72085","","<p>I'm trying to store the files listing into an array and then loop through the array again. 
Below is what I get when I run <code>ls -ls</code> command from the console.</p>

<pre><code>total 40
36 -rwxrwxr-x 1 amit amit 36720 2012-03-31 12:19 1.txt
4 -rwxrwxr-x 1 amit amit  1318 2012-03-31 14:49 2.txt
</code></pre>

<p>The following bash script I've written to store the above data into a bash array. </p>

<pre><code>i=0
ls -ls | while read line
do
    array[ $i ]=""$line""        
    (( i++ ))
done
</code></pre>

<p>But when I <code>echo $array</code>, I get nothing! </p>

<p>FYI, I run the script this way: <code>./bashscript.sh</code></p>
","<p>Try with:</p>

<pre><code>#! /bin/bash

i=0
while read line
do
    array[ $i ]=""$line""        
    (( i++ ))
done &lt; &lt;(ls -ls)

echo ${array[1]}
</code></pre>

<p>In your version, the <code>while</code> runs in a subshell, the environment variables you modify in the loop are not visible outside it.</p>

<p>(Do keep in mind that parsing the output of <code>ls</code> is generally <a href=""http://mywiki.wooledge.org/ParsingLs"" rel=""noreferrer"">not a good idea at all</a>.)</p>
","9954738"
"Select random lines from a file in bash","71721","","<p>in bash script I want to pick out N random lines from input file and output to another file.
how can this be done? </p>
","<p>Sort the file randomly and pick first <code>100</code> lines:</p>

<pre><code>$ sort -R input | head -n 100 &gt;output
</code></pre>
","9245733"
"How can I remount my Android/system as read-write in a bash script using adb?","71550","","<p>For info </p>

<pre><code>$ adb remount 
</code></pre>

<p>returns <code>""remount failed: Operation not permitted""</code></p>

<pre><code>$ adb shell 'su -c  mount -o rw,remount /system'
</code></pre>

<p>returns <code>unknown option -- o</code></p>

<p>My device is rooted.</p>
","<p>Probable cause that <code>remount</code> fails is you are not running <code>adb</code> as <code>root</code>.</p>

<p>Shell Script should be as follow.</p>

<pre><code># Script to mount Android Device as read/write.
# List the Devices.
adb devices;

# Run adb as root (Needs root access).
adb root;

# Since you're running as root su is not required
adb shell mount -o rw,remount /;
</code></pre>

<p>If this fails, you could try the below:</p>

<pre><code># List the Devices.
adb devices;

# Run adb as root
adb root;

adb remount;
adb shell su -c ""mount -o rw,remount /"";
</code></pre>

<p>To find which <code>user</code> you are:  </p>

<pre><code>$ adb shell whoami
</code></pre>
","28018008"
"How to pass parameters to a Linux Bash script?","71487","","<p>I have a Linux bash script 'myshell'.  I want it to read two dates as parameters, for example: <code>myshell date1 date2</code>.  I am a Java programmer, but don't know how to write a script to get this done.</p>

<p>The rest of the script is like this:</p>

<pre><code>sed ""s/$date1/$date2/g"" wlacd_stat.xml &gt;tmp.xml
mv tmp.xml wlacd_stat.xml
</code></pre>
","<p>you use <code>$1</code>, <code>$2</code> in your script eg</p>

<pre><code>date1=""$1""
date2=""$2""
sed ""s/$date1/$date2/g"" wlacd_stat.xml &gt;temp.xml ;mv temp.xml wlacd_stat.xml #Semicolon can also replaced with a newline
</code></pre>
","2645654"
"executing shell command in background from script","71463","","<p>how can I execute a shell command in the background from within a bash script, if the command is in a string?</p>

<p>For example:</p>

<pre><code>#!/bin/bash
cmd=""nohup mycommand"";
other_cmd=""nohup othercommand"";

""$cmd &amp;"";
""$othercmd &amp;"";
</code></pre>

<p>this does not work -- how can I do this?</p>
","<p>Leave off the quotes</p>

<pre><code>$cmd &amp;
$othercmd &amp;
</code></pre>

<p>eg:</p>

<pre><code>nicholas@nick-win7 /tmp
$ cat test
#!/bin/bash

cmd=""ls -la""

$cmd &amp;


nicholas@nick-win7 /tmp
$ ./test

nicholas@nick-win7 /tmp
$ total 6
drwxrwxrwt+ 1 nicholas root    0 2010-09-10 20:44 .
drwxr-xr-x+ 1 nicholas root 4096 2010-09-10 14:40 ..
-rwxrwxrwx  1 nicholas None   35 2010-09-10 20:44 test
-rwxr-xr-x  1 nicholas None   41 2010-09-10 20:43 test~
</code></pre>
","3683949"
"How do I get the last word in each line with bash","71409","","<p>For example i have a file:</p>

<pre><code>$ cat file

i am the first example.

i am the second line.

i do a question about a file.
</code></pre>

<p>and i need:</p>

<pre><code>example, line, file
</code></pre>

<p>i intent with ""awk"" but the problem is that the words are in different space </p>
","<p>Try</p>

<pre><code>$ awk 'NF&gt;1{print $NF}' file
example.
line.
file.
</code></pre>

<p>To get the result in one line as in your example, try:</p>

<pre><code>{
    sub(/\./, "","", $NF)
    str = str$NF
}
END { print str }
</code></pre>

<p>output:</p>

<pre><code>$ awk -f script.awk file
example, line, file, 
</code></pre>

<p>Pure bash:</p>

<pre><code>$ while read line; do [ -z ""$line"" ] &amp;&amp; continue ;echo ${line##* }; done &lt; file
example.
line.
file.
</code></pre>
","16617037"
"The easiest way to replace white spaces with (underscores) _ in bash","71359","","<p>recently I had to write a little script that parsed VMs in XenServer and as the names of the VMs are mostly with white spaces in e.g Windows XP or Windows Server 2008, I had to trim those white spaces and replace them with underscores _ . I found a simple solution to do this using sed which is great tool when it comes to string manipulation.</p>

<pre><code>echo ""This is just a test"" | sed -e 's/ /_/g'
</code></pre>

<p>returns</p>

<pre><code>This_is_just_a_test
</code></pre>
","<p>You can do it using only the shell, no need for <code>tr</code> or <code>sed</code></p>

<pre><code>$ str=""This is just a test""
$ echo ${str// /_}
This_is_just_a_test
</code></pre>
","1706459"
"How to fetch field from MySQL query result in bash","71329","","<p>I would like to get only the value of a MySQL query result in a bash script. For example the running the following command:</p>

<pre><code>mysql -uroot -ppwd -e ""SELECT id FROM nagios.host WHERE name='$host'""
</code></pre>

<p>returns:</p>

<pre><code>+----+
| id |
+----+
| 0  |
+----+
</code></pre>

<p>How can I fetch the value returned in my bash script?</p>
","<p>Use <code>-s</code> and <code>-N</code>:</p>

<pre><code>&gt; id=`mysql -uroot -ppwd -s -N -e ""SELECT id FROM nagios.host WHERE name='$host'""`
&gt; echo $id
0
</code></pre>

<p>From <a href=""https://dev.mysql.com/doc/refman/en/mysql-command-options.html"" rel=""noreferrer"">the manual</a>:</p>

<blockquote>
  <p>--silent, -s</p>

<pre><code>   Silent mode. Produce less output. This option can be given multiple
   times to produce less and less output.

   This option results in nontabular output format and escaping of
   special characters. Escaping may be disabled by using raw mode; see
   the description for the --raw option.
</code></pre>
  
  <p>--skip-column-names, -N</p>

<pre><code>   Do not write column names in results.
</code></pre>
</blockquote>

<p><strong>EDIT</strong></p>

<p>Looks like <code>-ss</code> works as well and much easier to remember.</p>
","9558954"
"Iterate over a list of files with spaces","71161","","<p>I want to iterate over a list of files. This list is the result of a <code>find</code> command, so I came up with:</p>

<pre><code>getlist() {
  for f in $(find . -iname ""foo*"")
  do
    echo ""File found: $f""
    # do something useful
  done
}
</code></pre>

<p>It's fine except if a file has spaces in its name:</p>

<pre><code>$ ls
foo_bar_baz.txt
foo bar baz.txt

$ getlist
File found: foo_bar_baz.txt
File found: foo
File found: bar
File found: baz.txt
</code></pre>

<p>What can I do to avoid the split on spaces?</p>
","<p>You could replace the word-based iteration with a line-based one:</p>

<pre><code>find . -iname ""foo*"" | while read f
do
    # ... loop body
done
</code></pre>
","7039208"
"python 2.7: cannot pip on windows ""bash: pip: command not found""","71147","","<p>I am trying to install the SciPy stack located at scipy(dot)org/stackspec(dot)html [I am only allowed 2 links; trying to use them wisely].  I realize that there are much easier ways to do this, but I think there is a lot to be learned by doing it manually.  I am relatively new to a lot of this stuff, so I apologize if I sound ignorant at any point.  </p>

<p>I am running  Windows 7 Enterprise - 64 bit.  Here is what I have done so far:</p>

<ol>
<li><p>Installed ""python-2.7.8.msi"" (32-bit) from https(colon)//www(DOT)python(DOT)org/download/releases/2.7.8/</p></li>
<li><p>Installed ""numpy-1.8.1-win32-superpack-python2.7"" from
    http(colon)//sourceforge(dot)net/projects/numpy/files/
    Test: import numpy as np ---> no errors</p></li>
<li><p>Installed scipy library,
""scipy-0.14.0-win32-superpack-python2.7.exe"" from
     (SCIPY DOT ORG LINK REMOVED)
    Test: import scipy as sp ---> no errors</p></li>
<li><p>Installed matplotlib: ""matplotlib-1.3.1.win32-py2.7.exe"" from
    (MATPLOTLIB DOT ORG LINK REMOVED)</p></li>
<li><p>Installed PIP by running script here:
    <a href=""https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py"">https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py</a>
    I just copied-pasted script to a new file in IDLE, 
    saved as C:\Python27\Scripts\pip_install.py and clicked Run>module. No errors reported. </p></li>
</ol>

<p><em>Does the path on which I saved
    ""pip_install.py"" matter?</em></p>

<hr>

<p>6.
<strong>HERE IS WHERE I FAIL</strong></p>

<p>Attempted to install matlibplot dependency dateutil: Opened a
        Cygwin Shell, and typed</p>

<pre><code>        cd C:\Python27          ! is it necessary to cd to python directtory?
        pip install python-dateutil
</code></pre>

<p>This results in the error:</p>

<pre><code>    bash: pip: command not found
</code></pre>

<p>I get the same error attempting from CMD. </p>

<p>Any help  is appreciated; the closest I found was stackoverflow_com/questions/9780717/bash-pip-command-not-found.  But the OSX nature of it is just enough to confise me further.</p>

<p><strong>**********************UPDATE*****************</strong></p>

<p>I added the pip-path per Paul H's suggestion below.  It made the error go away, but strangely, nothing I <code>pip</code> actually installs. For example, in Cygwin, I type:</p>

<pre><code>cbennett2&gt; pip install python-dateutil
cbennett2&gt;                            
</code></pre>

<p>You can see that there is no output or feedback from the shell (which I think there should be).  Then when I go to a new python shell:</p>

<pre><code>&gt;&gt;&gt; from dateutil.parser import parse
Traceback (most recent call last):
  File ""&lt;pyshell#12&gt;"", line 1, in &lt;module&gt;
    from dateutil.parser import parse
ImportError: No module named dateutil.parser
&gt;&gt;&gt;&gt;
</code></pre>

<p>This happens with all of the modules that I thought I had pip'd ... pandas, tornado, etc.</p>
","<p>On Windows, <code>pip</code> lives in <code>C:\[pythondir]\scripts</code>.</p>

<p>So you'll need to add that to your system path in order to run it from the command prompt. You could alternatively <code>cd</code> into that directory each time, but that's a hassle.</p>

<p>See the top answer here for info on how to do that:
<a href=""https://stackoverflow.com/questions/6318156/adding-python-path-on-windows-7"">Adding Python Path on Windows 7</a></p>

<p>Also, that is a terrifying way to install <code>pip</code>. Grab it from Christophe Gohlke. Grab everything else from there for that matter.
<a href=""http://www.lfd.uci.edu/~gohlke/pythonlibs/"" rel=""noreferrer"">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a> </p>
","25331771"
"in linux terminal, how do I show the folder's last modification date, taking its content into consideration?","70840","","<p>So here's the deal. Let's say I have a directory named ""web"", so</p>

<pre><code>$ ls -la

drwx------  4 rimmer rimmer 4096 2010-11-18 06:02 web
</code></pre>

<p>BUT inside this directory, web/php/</p>

<pre><code>$ ls -la

-rw-r--r-- 1 rimmer rimmer 1957 2011-01-05 08:44 index.php
</code></pre>

<p>That means that even though the content of my directory, /web/php/index.php has been last modified at 2011-01-05, the /web/ directory itself is reported as last modified at 2010-11-18.</p>

<p>What I need to do is have my /web/ directory's last modification date reported as the latest modification date of any file/directory inside this directory, recursively.</p>

<p>How do I go about doing this?</p>
","<p>Something like:</p>

<pre><code>find /path/ -type f -exec stat \{} --printf=""%y\n"" \; | 
     sort -n -r | 
     head -n 1
</code></pre>

<p>Explanation:</p>

<ul>
<li>the find command will print modification time for every file recursively ignoring directories (according to the comment by IQAndreas you can't rely on the folders timestamps)</li>
<li>sort -n (numerically) -r (reverse)</li>
<li>head -n 1: get the first entry</li>
</ul>
","4997339"
"Linux bash script to extract IP address","70783","","<p>I want to make big script on my Debian 7.3 ( something like translated and much more new user friendly enviroment ). I have a problem. I want to use only some of the informations that commands give me. For example my ifconfig looks like:</p>

<pre><code>eth0      Link encap:Ethernet  HWaddr 08:00:27:a3:e3:b0  
          inet addr:192.168.1.103  Bcast:192.168.1.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fea3:e3b0/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1904 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2002 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:1309425 (1.2 MiB)  T
</code></pre>

<p>I want to display only the IP address in line: echo ""Your IP address is: (IP_ADDRESS )"". Is there any command that allow me to do such a thing, to search in stream for informations I want to get?. I know about <code>grep</code> and <code>sed</code> but I am not really good with them.</p>

<p>Edit: Firstly to say thank you for helping me with this problem, now I know much more. Secondly to say project is in progress. If anyone would be interested in it just pm me. </p>
","<p>To just get your IP address:</p>

<pre><code>echo `ifconfig eth0 2&gt;/dev/null|awk '/inet addr:/ {print $2}'|sed 's/addr://'`
</code></pre>

<p>This will give you the IP address of eth0.</p>

<p>Edit: Due to name changes of interfaces in recent versions of Ubuntu, this doesn't work anymore. Instead, you could just use this:</p>

<p><code>hostname --all-ip-addresses</code> or <code>hostname -I</code>, which does the same thing (gives you ALL IP addresses of the host).</p>
","21336517"
"File content into unix variable with newlines","70716","","<p>I have a text file test.txt with the following content:</p>

<pre><code>text1
text2 
</code></pre>

<p>And I want to assign the content of the file to a UNIX variable, but when I do this: </p>

<pre><code>testvar=$(cat test.txt)
echo $testvar
</code></pre>

<p>the result is: </p>

<pre><code>text1 text2
</code></pre>

<p>instead of</p>

<pre><code>text1
text2 
</code></pre>

<p>Can someone suggest me a solution for this?</p>
","<p>The assignment does <em>not</em> remove the newline characters, it's actually the <code>echo</code> doing this. You need simply put quotes around the string to maintain those newlines:</p>

<pre><code>echo ""$testvar""
</code></pre>

<p>This wil give the result you want. See the following transcript for a demo:</p>

<pre><code>pax&gt; cat num1.txt ; x=$(cat num1.txt)
line 1
line 2

pax&gt; echo $x ; echo '===' ; echo ""$x""
line 1 line 2
===
line 1
line 2
</code></pre>

<hr>

<p>The <em>reason</em> why newlines are replaced with spaces is not <em>entirely</em> to do with the <code>echo</code> command, rather it's a combination of things.</p>

<p>When given a command line, <code>bash</code> splits it into words according to the documentation for the <code>IFS</code> variable:</p>

<blockquote>
  <p><strong>IFS:</strong> The Internal Field Separator that is used for word splitting after expansion ... the default value is <code>&lt;space&gt;&lt;tab&gt;&lt;newline&gt;</code>.</p>
</blockquote>

<p>That specifies that, by default, any of those three characters can be used to split your command into individual words. After that, the word separators are gone, all you have left is a list of words.</p>

<p>Combine that with the <code>echo</code> documentation (a <code>bash</code> internal command), and you'll see why the spaces are output:</p>

<blockquote>
  <p><strong>echo [-neE] [arg ...]:</strong> Output the args, separated by spaces, followed by a newline.</p>
</blockquote>

<p>When you use <code>echo ""$x""</code>, it forces the entire <code>x</code> variable to be a <em>single</em> word according to <code>bash</code>, hence it's not split. You can see that with:</p>

<pre><code>pax&gt; function count {
...&gt;    echo $#
...&gt; }
pax&gt; count 1 2 3
3
pax&gt; count a b c d
4
pax&gt; count $x
4
pax&gt; count ""$x""
1
</code></pre>

<p>Here, the <code>count</code> function simply prints out the number of arguments given. The <code>1 2 3</code> and <code>a b c d</code> variants show it in action.</p>

<p>Then we try it with the two variations on the <code>x</code> variable. The one <em>without</em> quotes shows that there are four words, <code>""test""</code>, <code>""1""</code>, <code>""test""</code> and <code>""2""</code>. Adding the quotes makes it <em>one</em> single word <code>""test 1\ntest 2""</code>.</p>
","2789399"
"Redirect STDERR / STDOUT of a process AFTER it's been started, using command line?","70614","","<p>In the shell you can do redirection, <code>&gt;</code> <code>&lt;</code>, etc., but how about AFTER a program is started?</p>

<p>Here's how I came to ask this question, a program running in the background of my terminal keeps outputting annoying text. It's an important process so I have to open another shell to avoid the text. I'd like to be able to <code>&gt;/dev/null</code> or some other redirection so I can keep working in the same shell.</p>
","<p>Short of closing and reopening your tty (i.e. logging off and back on, which may also terminate some of your background processes in the process) you only have one choice left:</p>

<ul>
<li>attach to the process in question using gdb, and run:

<ul>
<li>p dup2(open(""/dev/null"", 0), 1)</li>
<li>p dup2(open(""/dev/null"", 0), 2) </li>
<li>detach</li>
<li>quit</li>
</ul></li>
</ul>

<p>e.g.:</p>

<pre><code>$ tail -f /var/log/lastlog &amp;
[1] 5636

$ ls -l /proc/5636/fd
total 0
lrwx------ 1 myuser myuser 64 Feb 27 07:36 0 -&gt; /dev/pts/0
lrwx------ 1 myuser myuser 64 Feb 27 07:36 1 -&gt; /dev/pts/0
lrwx------ 1 myuser myuser 64 Feb 27 07:36 2 -&gt; /dev/pts/0
lr-x------ 1 myuser myuser 64 Feb 27 07:36 3 -&gt; /var/log/lastlog

$ gdb -p 5636
GNU gdb 6.8-debian
Copyright (C) 2008 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type ""show copying""
and ""show warranty"" for details.
This GDB was configured as ""x86_64-linux-gnu"".
Attaching to process 5636
Reading symbols from /usr/bin/tail...(no debugging symbols found)...done.
Reading symbols from /lib/librt.so.1...(no debugging symbols found)...done.
Loaded symbols for /lib/librt.so.1
Reading symbols from /lib/libc.so.6...(no debugging symbols found)...done.
Loaded symbols for /lib/libc.so.6
Reading symbols from /lib/libpthread.so.0...(no debugging symbols found)...done.
[Thread debugging using libthread_db enabled]
[New Thread 0x7f3c8f5a66e0 (LWP 5636)]
Loaded symbols for /lib/libpthread.so.0
Reading symbols from /lib/ld-linux-x86-64.so.2...(no debugging symbols found)...done.
Loaded symbols for /lib64/ld-linux-x86-64.so.2

(no debugging symbols found)
0x00007f3c8eec7b50 in nanosleep () from /lib/libc.so.6

(gdb) p dup2(open(""/dev/null"",0),1)
[Switching to Thread 0x7f3c8f5a66e0 (LWP 5636)]
$1 = 1

(gdb) p dup2(open(""/dev/null"",0),2)
$2 = 2

(gdb) detach
Detaching from program: /usr/bin/tail, process 5636

(gdb) quit

$ ls -l /proc/5636/fd
total 0
lrwx------ 1 myuser myuser 64 Feb 27 07:36 0 -&gt; /dev/pts/0
lrwx------ 1 myuser myuser 64 Feb 27 07:36 1 -&gt; /dev/null
lrwx------ 1 myuser myuser 64 Feb 27 07:36 2 -&gt; /dev/null
lr-x------ 1 myuser myuser 64 Feb 27 07:36 3 -&gt; /var/log/lastlog
lr-x------ 1 myuser myuser 64 Feb 27 07:36 4 -&gt; /dev/null
lr-x------ 1 myuser myuser 64 Feb 27 07:36 5 -&gt; /dev/null
</code></pre>

<p>You may also consider:</p>

<ul>
<li>using <code>screen</code>; screen provides several virtual TTYs you can switch between without having to open new SSH/telnet/etc, sessions</li>
<li>using <code>nohup</code>; this allows you to close and reopen your session without losing any background processes in the... process.</li>
</ul>
","593764"
"How can I run a function from a script in command line?","70533","","<p>I have a script that has some functions.</p>

<p>Can I run one of the function directly from command line?</p>

<p>Something like this?</p>

<pre><code>myScript.sh func()
</code></pre>
","<p>If the script only defines the functions and does nothing else, you can first execute the script within the context of the current shell using the <code>source</code> or <code>.</code> command and then simply call the function.  See <code>help source</code> for more information.</p>
","8818150"
"Integer expression expected error in shell script","70502","","<p>I'm a newbie to shell scripts so I have a question. What Im doing wrong in this code?</p>

<pre><code>#!/bin/bash
echo "" Write in your age: ""
read age
if [ ""$age"" -le ""7""] -o [ ""$age"" -ge "" 65"" ]
then
echo "" You can walk in for free ""
elif [ ""$age"" -gt ""7""] -a [ ""$age"" -lt ""65""]
then
echo "" You have to pay for ticket ""
fi
</code></pre>

<p>When I'm trying to open this script it asks me for my age and then it says </p>

<pre><code>./bilet.sh: line 6: [: 7]: integer expression expected
./bilet.sh: line 9: [: missing `]'
</code></pre>

<p>I don't have any idea what I'm doing wrong. If someone could tell me how to fix it I would be thankful, sorry for my poor English I hope you guys can understand me. </p>
","<p>You can use this syntax:</p>

<pre><code>#!/bin/bash

echo "" Write in your age: ""
read age

if [[ ""$age"" -le 7 || ""$age"" -ge 65 ]] ; then
    echo "" You can walk in for free ""
elif [[ ""$age"" -gt 7 &amp;&amp; ""$age"" -lt 65 ]] ; then
    echo "" You have to pay for ticket ""
fi
</code></pre>
","19505322"
"iTerm 2: How to set keyboard shortcuts to jump to beginning/end of line?","70493","","<p>I can see that <kbd>Ctrl</kbd>+<kbd>left</kbd>/<kbd>right</kbd> jumps to the beginning/end of line. How to change this to <kbd>Cmd</kbd>+<kbd>left</kbd>/<kbd>right arrow</kbd>?</p>

<p>In order to get <kbd>Alt</kbd>+<kbd>left</kbd>/<kbd>right arrow</kbd> working correctly for word jumping follow <a href=""http://hackaddict.blogspot.com/2007/07/skip-to-next-or-previous-word-in-iterm.html"" rel=""noreferrer"">this article</a>.</p>
","<p><strong>Add in iTerm2 the following Profile Shortcut Keys</strong></p>

<pre><code>FOR  ACTION         SEND
⌘←  ""SEND HEX CODE""      0x01 
⌘→  ""SEND HEX CODE""      0x05
⌥←  ""SEND ESC SEQ""  b
⌥→  ""SEND ESC SEQ""  f
</code></pre>

<p>Here is a visual for those who need it</p>

<p><a href=""https://i.imgur.com/djgBBQ3.png"" rel=""noreferrer""><img src=""https://i.imgur.com/djgBBQ3.png"" alt=""iTerm add key visual""></a></p>
","10485061"
"Bash Shell Script - Check for a flag and grab its value","70290","","<p>I am trying to make a shell script which is designed to be run like this:</p>

<pre><code>script.sh -t application
</code></pre>

<p>Firstly, in my script I want to check to see if the script has been run with the -t flag. For example if it has been run without the flag like this I want it to error:</p>

<pre><code>script.sh
</code></pre>

<p>Secondly, assuming there is a -t flag, I want to grab the value and store it in a variable that I can use in my script for example like this:</p>

<pre><code>FLAG=""application""
</code></pre>

<p>So far the only progress I've been able to make on any of this is that $@ grabs all the command line arguments but I don't know how this relates to flags, or if this is even possible.</p>
","<p>You should read this <a href=""https://archive.is/TRzn4"" rel=""nofollow noreferrer"">getopts</a> tutorial.</p>

<p>Example with <code>-a</code> switch that requires an argument :</p>

<pre><code>#!/bin/bash

while getopts "":a:"" opt; do
  case $opt in
    a)
      echo ""-a was triggered, Parameter: $OPTARG"" &gt;&amp;2
      ;;
    \?)
      echo ""Invalid option: -$OPTARG"" &gt;&amp;2
      exit 1
      ;;
    :)
      echo ""Option -$OPTARG requires an argument."" &gt;&amp;2
      exit 1
      ;;
  esac
done
</code></pre>

<p>Like greybot said(<code>getopt</code> != <code>getopts</code>) : </p>

<blockquote>
  <p>The external command getopt(1) is never safe to use, unless you <em>know</em>
  it is GNU getopt, you call it in a GNU-specific way, <em>and</em> you ensure
  that GETOPT_COMPATIBLE is not in the environment. Use getopts (shell
  builtin) instead, or simply loop over the positional parameters.</p>
</blockquote>
","14447471"
"Linux - bash script to calculate time elapsed","70261","","<p>I am writing a script in bash to calculate the time elapsed for the execution of my commands, consider:</p>

<pre><code>STARTTIME=$(date +%s)
#command block that takes time to complete...
#........
ENDTIME=$(date +%s)
echo ""It takes $($ENDTIME - $STARTTIME) seconds to complete this task...""
</code></pre>

<p>I guess my logic is correct however I end up with the following print out:</p>

<p>""It takes seconds to complete this task...""</p>

<p>Anything wrong with my string evaluation???</p>

<p>I believe bash variables are untyped, I would love if there is a ""string to integer"" method in bash nevertheless.</p>
","<p>Either <code>$(())</code> or <code>$[]</code> will work for computing the result of an arithmetic operation.  You're using <code>$()</code> which is simply taking the string and evaluating it as a command.  It's a bit of a subtle distinction.  Hope this helps.</p>

<p>As tink pointed out in the comments on this answer, <code>$[]</code> is deprecated, and <code>$(())</code> should be favored.</p>
","16908239"
"How to kill a nohup process?","70226","","<p>I executed the following command</p>

<pre><code>$ nohup ./tests.run.pl 0 &amp;
</code></pre>

<p>now when I try to kill it (and the executions that are started from this script) using </p>

<pre><code>$ kill -0 &lt;process_id&gt;
</code></pre>

<p>it does not work. How can I kill a nohupped process and the processes that runs via the nohupped script?</p>

<p>Thanks</p>
","<p><code>kill -0</code> does <em>not</em> kill the process. It just checks if you could send a signal to it.</p>

<p>Simply <code>kill pid</code>, and if that doesn't work, try <code>kill -9 pid</code>.</p>
","8007409"
"Syntax error near unexpected token 'fi'","70158","","<p>I'm trying to write a script that removes all the .jpg's that end in an odd number. This is my code: </p>

<pre><code>#!/bin/bash
echo ""start\n""
for f in *.jpg
do
  fname=$(basename ""$f"")
  echo ""fname is $fname\n""
  fname=""${filename%.*}""
  echo ""fname is $fname\n""
  if[$((fname %  2)) -eq 1 ] then
    echo ""removing $fname\n""
    rm $f
  fi
done
</code></pre>

<p>When I run it it outputs start and then says ""syntax error near unexpected token 'fi'""</p>

<p>When I had then on the line after if it said ""syntax error near unexpected token 'then'""</p>

<p>How do i fix this?</p>
","<p>As well as having <code>then</code> on a new line, you also need a space before and after the <code>[</code>, which is a special symbol in BASH.</p>

<pre><code>#!/bin/bash
echo ""start\n""
for f in *.jpg
do
  fname=$(basename ""$f"")
  echo ""fname is $fname\n""
  fname=""${filename%.*}""
  echo ""fname is $fname\n""
  if [ $((fname %  2)) -eq 1 ]
  then
    echo ""removing $fname\n""
    rm ""$f""
  fi
done
</code></pre>
","20586867"
"How to break out of a loop in Bash?","70148","","<p>I want to write a Bash script to process text, which might require a while loop. </p>

<p>For example, a while loop in C:</p>

<pre><code>int done = 0;
while(1) {
  ...
  if(done) break;
}
</code></pre>

<p>I want to write a Bash script equivalent to that. But what I usually used and as all the classic examples I read have showed, is this:</p>

<pre><code>while read something;
do
...
done
</code></pre>

<p>It offers no help about how to do <code>while(1){}</code> and <code>break;</code>, which is well defined and widely used in C, and I do not have to read data for stdin. </p>

<p>Could anyone help me with a Bash equivalent of the above C code?</p>
","<p>It's not that different in <code>bash</code>.</p>

<pre><code>done=0
while : ; do
  ...
  if [ ""$done"" -ne 0 ]; then
      break
  fi
done
</code></pre>

<p><code>:</code> is the no-op command; its exit status is always 0, so the loop runs until <code>done</code> is given a non-zero value.</p>

<hr>

<p>There are many ways you could set and test the value of <code>done</code> in order to exit the loop; the one I show above should work in any POSIX-compatible shell.</p>
","18488730"
"Select objects based on value of variable in object using jq","70073","","<p>I have the following json file:</p>

<pre><code>{
    ""FOO"": {
        ""name"": ""Donald"",
        ""location"": ""Stockholm""
    },
    ""BAR"": {
        ""name"": ""Walt"",
        ""location"": ""Stockholm""
    },
    ""BAZ"": {
        ""name"": ""Jack"",
        ""location"": ""Whereever""
    }
}
</code></pre>

<p>I am using jq and want to get the ""name"" elements of the objects where 'location' is 'Stockholm'. </p>

<p>I know I can get all names by</p>

<pre><code>cat json | jq .[] | jq .""name""
""Jack""
""Walt""
""Donald""
</code></pre>

<p>But I can't figure out how to print only certain objects, given the value of a sub key (here <code>""location"" : ""Stockholm""</code>). </p>
","<p>After lots of googling finding mainly jQuery stuff, I found a blog post with the answer:</p>

<pre><code>$ jq '.[] | select(.location==""Stockholm"")' json
{
  ""location"": ""Stockholm"",
  ""name"": ""Walt""
}
{
  ""location"": ""Stockholm"",
  ""name"": ""Donald""
}
</code></pre>

<p>From here: <a href=""http://zerokspot.com/weblog/2013/07/18/processing-json-with-jq/"">http://zerokspot.com/weblog/2013/07/18/processing-json-with-jq/</a></p>
","18608100"
"How to redirect stderr and stdout to different files in the same line of bash?","69716","","<p>I know this much:</p>

<pre><code>$ command 2&gt;&gt; error

$ command 1&gt;&gt; output
</code></pre>

<p>Is there any way I can output the stderr to the error file and output stdout to the output file in the same line of bash?</p>
","<p>Just add them in one line <code>command 2&gt;&gt; error 1&gt;&gt; output</code></p>

<p>However, note that <code>&gt;&gt;</code> is for appending if the file already has data. Whereas, <code>&gt;</code> will overwrite any existing data in the file.</p>

<p>So, <code>command 2&gt; error 1&gt; output</code> if you do  not want to append.</p>

<p>Just for completion's sake, you can write <code>1&gt;</code> as just <code>&gt;</code> since the default file descriptor is the output. so <code>1&gt;</code> and <code>&gt;</code> is the same thing.</p>

<p>So, <code>command 2&gt; error 1&gt; output</code> becomes, <code>command 2&gt; error &gt; output</code></p>
","7901533"
"Executing a Bash script from a PHP script","69666","","<p>I want to execute the Bash script present on the system from a PHP script. I have two scripts present on the system. One of them is a PHP script called client.php present at /var/www/html and the other is a Bash script called testscript present at /home/testuser. </p>

<p>My client.php script looks like  </p>

<pre><code>&lt;?php
  $message=shell_exec(""/home/testuser/testscript 2&gt;&amp;1"");
  print_r($message);
?&gt;  
</code></pre>

<p>My testscript looks like</p>

<pre><code>#!/bin/bash
echo ""Testscript run succesful""
</code></pre>

<p>When i do the following on terminal</p>

<pre><code>php client.php
</code></pre>

<p>I get the following output on terminal</p>

<pre><code>Testscript run successful
</code></pre>

<p>But when i open the page at </p>

<pre><code>http://serverdomain/client.php
</code></pre>

<p>I get the following output</p>

<pre><code>sh: /home/testuser/testscript: Permission denied 
</code></pre>

<p>I get this error even after I did chmod +x testscript.<br>
How do I get it to work from the browser? Please help.</p>
","<p>I would have a directory somewhere called scripts under the WWW folder so that it's not reachable from the web but is reachable by PHP. </p>

<p>e.g. <code>/var/www/scripts/testscript</code></p>

<p>Make sure the user/group for your <code>testscript</code> is the same as your webfiles. For instance if your <code>client.php</code> is owned by <code>apache:apache</code>, change the bash script to the same user/group using <code>chown</code>. You can find out what your <code>client.php</code> and web files are owned by doing <code>ls -al</code>. </p>

<p>Then run</p>

<pre><code>&lt;?php
      $message=shell_exec(""/var/www/scripts/testscript 2&gt;&amp;1"");
      print_r($message);
    ?&gt;  
</code></pre>

<p><strong>EDIT:</strong></p>

<p>If you really want to run a file as root from a webserver you can try this binary wrapper below. Check out this solution for the same thing you want to do. </p>

<p><a href=""https://stackoverflow.com/questions/8532304/execute-root-commands-via-php"">Execute root commands via PHP</a></p>
","17152139"
"Extraction of data from a simple XML file","69519","","<p>I've a XML file with the contents:</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;job xmlns=""http://www.sample.com/""&gt;programming&lt;/job&gt;
</code></pre>

<p>I need a way to extract what is in the <code>&lt;job..&gt;</code> <code>&lt;/job&gt;</code> tags, programmin in this case. This should be done on linux command prompt, using grep/sed/awk.</p>
","<p>Do you really <strong>have to</strong> use only those tools? They're not designed for XML processing, and although it's possible to get something that works OK most of the time, it will fail on edge cases, like encoding, line breaks, etc.</p>

<p>I recommend xml_grep:</p>

<pre><code>xml_grep 'job' jobs.xml --text_only
</code></pre>

<p>Which gives the output:</p>

<pre><code>programming
</code></pre>

<p>On ubuntu/debian, xml_grep is in the xml-twig-tools package.</p>
","2222224"
"Writing a Basic Shell","69519","","<p>For my class I have to create a basic shell similar to bash that will allow the user to call commands like ls, sleep, etc.
I am looking for resources on how to do this: tutorials, help text, sample code or even just some general information on how to get started.
Does anyone have an links or info to help me out?</p>
","<p>The glibc manual contains some useful info on implementing job control in the shell: <a href=""http://www.gnu.org/software/libc/manual/html_node/Implementing-a-Shell.html#Implementing-a-Shell"" rel=""noreferrer"">http://www.gnu.org/software/libc/manual/html_node/Implementing-a-Shell.html#Implementing-a-Shell</a></p>
","4788432"
"How do I create a directory on remote host if it doesn't exist without ssh-ing in?","69440","","<p>I'm not sure if this is possible or not. Basically, I'm writing a script that allows me to <a href=""http://en.wikipedia.org/wiki/Secure_copy"" rel=""noreferrer"">scp</a> a file to my hosting. This is it so far. Argument 1 is the file and argument 2 is the folder I want it to be placed in on the remote server:</p>

<pre><code>function upload {
    scp $1 myusername@ssh.myhost.net:$2
}
</code></pre>

<p>As you may/may not know, if the directory I specify when I call the function doesn't exist, then the transfer fails. Is there a way to check if the directory exists in the function and if it doesn't, create it.</p>

<p>I would prefer not having to ssh in every time and create the directory, but if I have got no choice, then I have got no choice.</p>
","<p>You can use rsync. </p>

<p>For example,</p>

<pre><code>rsync -ave ssh fileToCopy ssh.myhost.net:/some/nonExisting/dirToCopyTO
</code></pre>

<p>Note about rsync:</p>

<p>rsync is utility software and network protocol for Unix which synchronizes files and directories from one location to another while minimizing data transfer by using delta encoding when appropriate using the rsync algorithm which is faster than other tools.</p>
","1340100"
"How to modify a global variable within a function in bash?","69353","","<p>I'm working with this:</p>

<pre><code>GNU bash, version 4.1.2(1)-release (x86_64-redhat-linux-gnu)
</code></pre>

<p>I have a script like below:</p>

<pre><code>#!/bin/bash

e=2

function test1() {
  e=4
  echo ""hello""
}

test1 
echo ""$e""
</code></pre>

<p>Which returns:</p>

<pre><code>hello
4
</code></pre>

<p>But if I assign the result of the function to a variable, the global variable <code>e</code> is not modified:</p>

<pre><code>#!/bin/bash

e=2

function test1() {
  e=4
  echo ""hello""
}

ret=$(test1)

echo ""$ret""
echo ""$e""
</code></pre>

<p>Returns:</p>

<pre><code>hello
2
</code></pre>

<p>I've heard of <a href=""https://superuser.com/a/628865/235245"">the use of eval</a> in this case, so I did this in <code>test1</code>:</p>

<pre><code>eval 'e=4'
</code></pre>

<p>But the same result.</p>

<p>Could you explain me why it is not modified? How could I save the echo of the <code>test1</code> function in <code>ret</code> and modify the global variable too?</p>
","<p>When you use a command substitution (ie the <code>$(...)</code> construct), you are creating a subshell. Subshells inherit variables from their parent shells, but this only works one way - a subshell cannot modify the environment of its parent shell. Your variable <code>e</code> is set within a subshell, but not the parent shell. There are two ways to pass values from a subshell to its parent. First, you can output something to stdout, then capture it with a command substitution:</p>

<pre><code>myfunc() {
    echo ""Hello""
}

var=""$(myfunc)""

echo ""$var""
</code></pre>

<p>Gives:</p>

<pre><code>Hello
</code></pre>

<p>For a numerical value from 0-255, you can use <code>return</code> to pass the number as the exit status:</p>

<pre><code>myotherfunc() {
    echo ""Hello""
    return 4
}

var=""$(myotherfunc)""
num_var=$?

echo ""$var - num is $num_var""
</code></pre>

<p>Gives:</p>

<pre><code>Hello - num is 4
</code></pre>
","23565252"
"How do you execute SQL from within a bash script?","69270","","<p>I have some SQL scripts that I'm trying to automate. In the past I have used SQL*Plus, and called the sqlplus binary manually, from a bash script.</p>

<p>However, I'm trying to figure out if there's a way to connect to the DB, and call the script from inside of the bash script... so that I can insert <code>date</code> and make the queries run relative to a certain number of days in the past.</p>
","<p>I'm slightly confused.  You should be able to call sqlplus from within the bash script.  This may be what you were doing with your first statement</p>

<p>Try Executing the following within your bash script:</p>

<pre><code>#!/bin/bash          
echo Start Executing SQL commands
sqlplus &lt;user&gt;/&lt;password&gt; @file-with-sql-1.sql
sqlplus &lt;user&gt;/&lt;password&gt; @file-with-sql-2.sql
</code></pre>

<p>If you want to be able to pass data into your scripts you can do it via SQLPlus by passing arguments into the script:</p>

<p>Contents of <strong>file-with-sql-1.sql</strong></p>

<pre><code> select * from users where username='&amp;1';
</code></pre>

<p>Then change the bash script to call sqlplus passing in the value</p>

<pre><code>#!/bin/bash

MY_USER=bob
sqlplus &lt;user&gt;/&lt;password&gt; @file-with-sql-1.sql $MY_USER
</code></pre>
","1467893"
"Only get hash value using md5sum (without filename)","69190","","<p>I use md5sum to generate a hash value for a file.
But i only need to receive the hash value, not the file name.</p>

<pre><code>md5=`md5sum ${my_iso_file}`
echo ${md5}
</code></pre>

<p>3abb17b66815bc7946cefe727737d295  ./iso/somefile.iso</p>

<p>How can i 'strip' the file name and only remain the value ?</p>
","<p>Well another way :)</p>

<pre><code>md5=`md5sum ${my_iso_file} | awk '{ print $1 }'`
</code></pre>
","3679803"
"Bash loop ping successful","69058","","<p>I'm thinking that this needs to be changed to a while clause, at the moment it'll wait till all 10000 pings are done, I need it to return when the ping is successful. The program ""say"" is on OSX it makes the computer speak.</p>

<pre><code>#!/bin/bash
echo begin ping
if ping -c 100000 8.8.8.8 | grep timeout;
then echo `say timeout`;
else echo `say the internet is back up`;
fi
</code></pre>

<p>OK I don't have rights to answer my own question so here's my answer for it after playing around:</p>

<p>Thanks, yeah I didn't know about $? until now. Anyway now I've gone and made this. I like that yours doesn't go forever but in my situation I didn't need it to stop until it's finished.</p>

<pre><code>#!/bin/bash
intertube=0
echo ""begin ping""
while [ $intertube -ne 1 ]; do
        ping -c 3 google.com
        if [ $? -eq  0 ]; then
                echo ""ping success"";
                say success
                intertube=1;
        else
                echo ""fail ping""
        fi
done
echo ""fin script""
</code></pre>
","<p>You probably shouldn't rely on textual output of a command to decide this, <em>especially</em> when the <code>ping</code> command <a href=""http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man8/ping.8.html"">gives you a perfectly good return value</a>:</p>

<blockquote>
  <p>The ping utility returns an exit status of zero if at least one response was heard from the specified host; a status of two if the transmission was successful but no responses were received; or another value from <code>&lt;sysexits.h&gt;</code> if an error occurred.</p>
</blockquote>

<p>In other words, use something like:</p>

<pre><code>((count = 100))                            # Maximum number to try.
while [[ $count -ne 0 ]] ; do
    ping -c 1 8.8.8.8                      # Try once.
    rc=$?
    if [[ $rc -eq 0 ]] ; then
        ((count = 1))                      # If okay, flag to exit loop.
    fi
    ((count = count - 1))                  # So we don't go forever.
done

if [[ $rc -eq 0 ]] ; then                  # Make final determination.
    echo `say The internet is back up.`
else
    echo `say Timeout.`
fi
</code></pre>
","6119043"
"Laravel PHP Command Not Found","68853","","<p>I have installed Laravel using composer without problems, but when I try to execute ""<em>laravel</em>"" in my terminal I have this typical error:</p>

<blockquote>
  <p>-bash: laravel: command not found</p>
</blockquote>

<p>If I read the documentation of the official site I need to do that:</p>

<blockquote>
  <p>Make sure to place the ~/.composer/vendor/bin directory in your PATH so the laravel executable is found when you run the <em>laravel</em> command in your terminal.</p>
</blockquote>

<p>But I don't know how to do (I'm new on terminal console commands).</p>

<p>Can you help me with that? Thanks!!</p>
","<p>Ok, I did that and it works:</p>

<pre><code>nano ~/.bash_profile 
</code></pre>

<p>And paste</p>

<pre><code>export PATH=~/.composer/vendor/bin:$PATH
</code></pre>

<p>Restart the terminal and enjoy ;)</p>

<p><strong>Important</strong>: If you want to know the difference between <em>bash_profile</em> and <em>bashrc</em> please check this <a href=""http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html"" rel=""noreferrer"">link</a></p>

<p><strong>Note:</strong> For Ubuntu 16.04 running laravel 5.1, the path is: ~/.config/composer/vendor/bin</p>
","26376773"
"String comparison in bash. [[: not found","68839","","<p>I am trying to compare strings in bash. I already found an answer on how to do it on <a href=""https://stackoverflow.com/questions/229551/string-contains-in-bash"">stackoverflow</a>. In script I am trying, I am using the code submitted by Adam in the mentioned question:</p>

<pre><code>#!/bin/bash
string='My string';

if [[ ""$string"" == *My* ]]
then
  echo ""It's there!"";
fi

needle='y s'
if [[ ""$string"" == *""$needle""* ]]; then
  echo ""haystack '$string' contains needle '$needle'""
fi
</code></pre>

<p>I also tried approach from <a href=""http://ubuntuforums.org/showthread.php?t=562398"" rel=""noreferrer"">ubuntuforums</a> that you can find in 2nd post</p>

<pre><code>if [[ $var =~ regexp ]]; then
  #do something
fi
</code></pre>

<p>In both cases I receive error:</p>

<pre><code>[[: not found
</code></pre>

<p>What am I doing wrong?</p>
","<p><code>[[</code> is a bash-builtin. Your <code>/bin/bash</code> doesn't seem to be an actual bash.</p>
","12230723"
"Bash scripting, multiple conditions in while loop","68788","","<p>I'm trying to get a simple while loop working in bash that uses two conditions, but after trying many different syntax from various forums, I can't stop throwing an error. Here is what I have:</p>

<pre><code>while [ $stats -gt 300 ] -o [ $stats -eq 0 ]
</code></pre>

<p>I have also tried:</p>

<pre><code>while [[ $stats -gt 300 ] || [ $stats -eq 0 ]]
</code></pre>

<p>... as well as several others constructs. I want this loop to continue while <code>$stats is &gt; 300</code> or if <code>$stats = 0</code>.</p>
","<p>The correct options are (in increasing order of recommendation):</p>

<pre><code># Single POSIX test command with -o operator (not recommended anymore).
# Quotes strongly recommended to guard against empty or undefined variables.
while [ ""$stats"" -gt 300 -o ""$stats"" -eq 0 ]

# Two POSIX test commands joined in a list with ||.
# Quotes strongly recommended to guard against empty or undefined variables.
while [ ""$stats"" -gt 300 ] || [ ""$stats"" -eq 0 ]

# Two bash conditional expressions joined in a list with ||.
while [[ $stats -gt 300 ]] || [[ $stats -eq 0 ]]

# A single bash conditional expression with the || operator.
while [[ $stats -gt 300 || $stats -eq 0 ]]

# Two bash arithmetic expressions joined in a list with ||.
# $ optional, as a string can only be interpreted as a variable
while (( stats &gt; 300 )) || (( stats == 0 ))

# And finally, a single bash arithmetic expression with the || operator.
# $ optional, as a string can only be interpreted as a variable
while (( stats &gt; 300 || stats == 0 ))
</code></pre>

<p>Some notes:</p>

<ol>
<li><p>Quoting the parameter expansions inside <code>[[ ... ]]</code> and <code>((...))</code> is optional; if the variable is not set, <code>-gt</code> and <code>-eq</code> will assume a value of 0.</p></li>
<li><p>Using <code>$</code> is optional inside <code>(( ... ))</code>, but using it can help avoid unintentional errors. If <code>stats</code> isn't set, then <code>(( stats &gt; 300 ))</code> will assume <code>stats == 0</code>, but <code>(( $stats &gt; 300 ))</code> will produce a syntax error.</p></li>
</ol>
","15535745"
"Using find with -exec {}, is there a way to count the total?","68619","","<p>I am using a command similar to this one:</p>

<pre><code>find . -name ""*.php"" -exec chmod 755 {} \;
</code></pre>

<p>Although, I am not using chmod, I am using a different command which I will not list here. This command is working fine. However, there are thousands of files and directories to be operated on, and this operation takes some time. I am wondering if there is a way to display some sort of total when the operation is complete? Perhaps a count of modified files?</p>

<p>The only thing I can think of is simply to do something like:</p>

<pre><code>find . -name ""*.php"" -exec chmod 755; echo ""+""; {} \;
</code></pre>

<p>Will that work? At least we can see that something is happening... Anyone have  a better suggestion?</p>
","<p>This works:</p>

<pre><code>$ find . -name ""*.php"" -exec chmod 755 {} \; -exec /bin/echo {} \; | wc -l
</code></pre>

<p>You have to include a second <code>-exec /bin/echo</code> for this to work. If the <code>find</code> command has no output, then <code>wc</code> has no input to count lines for.</p>
","7720401"
"Using variables inside a bash heredoc","68597","","<p>I'm trying to interpolate variables inside of a bash heredoc:</p>

<pre><code>var=$1
sudo tee ""/path/to/outfile"" &gt; /dev/null &lt;&lt; ""EOF""
Some text that contains my $var
EOF
</code></pre>

<p>This isn't working as I'd expect ($var is treated literally, not expanded).</p>

<p>I need to use sudo tee because creating the file requires sudo.  Doing something like:</p>

<pre><code>sudo cat &gt; /path/to/outfile &lt;&lt;EOT
my text...
EOT
</code></pre>

<p>Doesn't work, because >outfile opens the file in the current shell, which is not using sudo.</p>
","<p>In answer to your first question, there's no parameter substitution because you've put the delimiter in quotes - <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Redirections"" rel=""noreferrer"">the bash manual says</a>:</p>

<blockquote>
  <p>The format of here-documents is:</p>

<pre><code>      &lt;&lt;[-]word
              here-document
      delimiter
</code></pre>
  
  <p>No  parameter expansion, command substitution, arithmetic expansion, or
  pathname expansion is performed on <em>word</em>.  If any characters in <em>word</em> are
  quoted,  the  <em>delimiter</em> is the result of quote removal on word, and the
  lines in the here-document are not expanded.  If <em>word</em> is unquoted,  all
  lines  of  the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion. [...]</p>
</blockquote>

<p>If you change your first example to use <code>&lt;&lt;EOF</code> instead of <code>&lt;&lt; ""EOF""</code> you'll find that it works.</p>

<p>In your second example, the shell invokes <code>sudo</code> only with the parameter <code>cat</code>, and the redirection applies to the output of <code>sudo cat</code> as the original user.  It'll work if you try:</p>

<pre><code>sudo sh -c ""cat &gt; /path/to/outfile"" &lt;&lt;EOT
my text...
EOT
</code></pre>
","4938197"
"How to split a list by comma not space","68474","","<p>I want to split a text with comma <code>,</code> not space <code></code> in <code>for foo in list</code>. Suppose I have a CSV file <code>CSV_File</code> with following text inside it:</p>

<pre><code>Hello,World,Questions,Answers,bash shell,script
...
</code></pre>

<p>I used following code to split it into several words:</p>

<pre><code>for word in $(cat CSV_File | sed -n 1'p' | tr ',' '\n')
do echo $word
done
</code></pre>

<p>It prints:</p>

<pre><code>Hello
World
Questions
Answers
bash
shell
script
</code></pre>

<p>But I want it to split the text by commas not spaces:</p>

<pre><code>Hello
World
Questions
Answers
bash shell
script
</code></pre>

<p>How can I achieve this in bash?</p>
","<p>Using a subshell substitution to parse the words undoes all the work you are doing to put spaces together.</p>

<p>Try instead:</p>

<pre><code>cat CSV_file | sed -n 1'p' | tr ',' '\n' | while read word; do
    echo $word
done
</code></pre>

<p>That also increases parallelism. Using a subshell as in your question forces the entire subshell process to finish before you can start iterating over the answers. Piping to a subshell (as in my answer) lets them work in parallel. This matters only if you have many lines in the file, of course.</p>
","7718447"
"What is the exact meaning of IFS=$'\n'?","68447","","<p>If the following example, which sets the <code>IFS</code> environment variable to a line feed character...</p>

<pre><code>IFS=$'\n'
</code></pre>

<ul>
<li>What does the <strong>dollar sign</strong> mean
<strong>exactly</strong>?</li>
<li>What does it do in this specific
case?</li>
<li>Where can I read more on this specific usage (Google doesn't allow special characters in searches and I don't know what to look for otherwise)?</li>
</ul>

<p>I know what the <code>IFS</code> environment variable is, and what the <code>\n</code> character is (line feed), but why not just use the following form: 
<code>IFS=""\n""</code> (which does not work)?</p>

<p>For example, if I want to loop through every line of a file and want to use a for loop, I could do this:</p>

<pre><code>for line in (&lt; /path/to/file); do
    echo ""Line: $line""
done
</code></pre>

<p>However, this won't work right unless <code>IFS</code> is set to a line feed character. To get it to work, I'd have to do this:</p>

<pre><code>OLDIFS=$IFS
IFS=$'\n'
for line in (&lt; /path/to/file); do
    echo ""Line: $line""
done
IFS=$OLDIFS
</code></pre>

<p><strong>Note:</strong> I don't need another way for doing the same thing, I know many other already... I'm only curious about that <code>$'\n'</code> and wondered if anyone could give me an explanation on it.</p>
","<p>Normally <code>bash</code> doesn't interpret escape sequences in string literals. So if you write <code>\n</code> or <code>""\n""</code> or <code>'\n'</code>, that's not a linebreak - it's the letter <code>n</code> (in the first case) or a backslash followed by the letter <code>n</code> (in the other two cases).</p>

<p><code>$'somestring'</code> is a <strong>syntax for string literals with escape sequences</strong>. So unlike <code>'\n'</code>, <code>$'\n'</code> actually is a linebreak.</p>
","4128305"
"Running shell script in parallel","68385","","<p>I have a shell script which </p>

<ol>
<li>shuffles a large text file (6 million rows and 6 columns) </li>
<li>sorts the file based the first column</li>
<li>outputs 1000 files   </li>
</ol>

<p>So the pseudocode looks like this </p>

<pre><code>file1.sh 

#!/bin/bash
for i in $(seq 1 1000)
do

  Generating random numbers here , sorting  and outputting to file$i.txt  

done
</code></pre>

<p>Is there a way to run this shell script in <code>parallel</code> to make full use of multi-core CPUs?</p>

<p>At the moment, .<code>/file1.sh</code> executes in sequence 1 to 1000 runs and it is very slow.</p>

<p>Thanks for your help.</p>
","<p>Check out <a href=""http://tldp.org/LDP/abs/html/subshells.html"" rel=""noreferrer"">bash subshells</a>, these can be used to run parts of a script in parallel.</p>

<p>I haven't tested this, but this could be a start:</p>

<pre><code>#!/bin/bash
for i in $(seq 1 1000)
do
   ( Generating random numbers here , sorting  and outputting to file$i.txt ) &amp;
   if (( $i % 10 == 0 )); then wait; fi # Limit to 10 concurrent subshells.
done
wait
</code></pre>
","5547845"
"Linux shell script to add leading zeros to file names","68266","","<p>I have a folder with about 1,700 files. They are all named like <code>1.txt</code> or <code>1497.txt</code>, etc. I would like to rename all the files so that all the filenames are four digits long.</p>

<p>I.e., <code>23.txt</code> becomes <code>0023.txt</code>.</p>

<p>What is a shell script that will do this? Or a related question: How do I use grep to only match lines that contain <code>\d.txt</code> (i.e., one digit, then a period, then the letters <code>txt</code>)?</p>

<p>Here's what I have so far:</p>

<pre><code>for a in [command i need help with]
do
  mv $a 000$a
done
</code></pre>

<p>Basically, run that three times, with commands there to find one digit, two digits, and three digit filenames (with the number of initial zeros changed).</p>
","<p>Try:</p>

<pre><code>for a in [0-9]*.txt; do
    mv $a `printf %04d.%s ${a%.*} ${a##*.}`
done
</code></pre>

<p>Change the filename pattern (<code>[0-9]*.txt</code>) as necessary.</p>

<hr>

<p>A general-purpose enumerated rename that makes no assumptions about the initial set of filenames:</p>

<pre><code>X=1;
for i in *.txt; do
  mv $i $(printf %04d.%s ${X%.*} ${i##*.})
  let X=""$X+1""
done
</code></pre>

<hr>

<p><strong>On the same topic:</strong></p>

<ul>
<li><a href=""https://stackoverflow.com/questions/55754/bash-script-to-pad-file-names"">Bash script to pad file names</a></li>
<li><a href=""https://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash"">Extract filename and extension in bash</a></li>
</ul>
","3672345"
"Find file in directory from command line","68109","","<p>In editors/ides such as eclipse and textmate, there are shortcuts to quickly find a particular file in a project directory.</p>

<p>Is there a similar tool to do full path completion on filenames within a directory (recursively), in bash or other shell?</p>

<p>I have projects with alot of directories, and deep ones at that (sigh, java).
Hitting tab in the shell only cycles thru files in the immediate directory, thats not enough =/</p>
","<pre><code>find /root/directory/to/search -name 'filename.*'
# Directory is optional (defaults to cwd)
</code></pre>

<p>Standard UNIX globbing is supported.  See <a href=""http://linux.die.net/man/1/find"" rel=""noreferrer""><code>man find</code></a> for more information.</p>

<p>If you're using Vim, you can use:</p>

<pre><code>:e **/filename.cpp
</code></pre>

<p>Or <code>:tabn</code> or any Vim command which accepts a filename.</p>
","656744"
"How to create nonexistent subdirectories recursively using Bash?","68085","","<p>I am creating a quick backup script that will dump some databases into a nice/neat directory structure and I realized that I need to test to make sure that the directories exist before I create them. The code I have works, but it seems that there is a better way to do it. Any suggestions?</p>

<pre><code>[ -d ""$BACKUP_DIR"" ] || mkdir ""$BACKUP_DIR""
[ -d ""$BACKUP_DIR/$client"" ] || mkdir ""$BACKUP_DIR/$client""
[ -d ""$BACKUP_DIR/$client/$year"" ] || mkdir ""$BACKUP_DIR/$client/$year""
[ -d ""$BACKUP_DIR/$client/$year/$month"" ] || mkdir ""$BACKUP_DIR/$client/$year/$month""
[ -d ""$BACKUP_DIR/$client/$year/$month/$day"" ] || mkdir ""$BACKUP_DIR/$client/$year/$month/$day""
</code></pre>
","<p>You can use the <code>-p</code> parameter, which is <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?mkdir"" rel=""noreferrer"">documented as</a>:</p>

<blockquote>
  <p>-p, --parents</p>
  
  <p>no error if existing, make parent directories as needed</p>
</blockquote>

<p>So:</p>

<pre><code>mkdir -p ""$BACKUP_DIR/$client/$year/$month/$day""
</code></pre>
","1731775"
"Worth switching to zsh for casual use?","68025","","<p>The default shell in Mac OS X is <code>bash</code>, which I'm generally happy to be using. I just take it for granted. It would be really nice if it auto-completed <em>more stuff</em>, though, and I've heard good things about <code>zsh</code> in this regard. But I don't really have the inclination to spend hours fiddling with settings to improve my command line usage by a tiny amount, since my life on the command line isn't that bad. </p>

<p>(As I understand it, <code>bash</code> can also be configured to auto-complete more cleverly. It's the configuring I'm not all that keen on.)</p>

<p>Will switching to <code>zsh</code>, even in a small number cases, make my life easier? Or is it only a better shell if you put in the time to learn <em>why</em> it's better? (Examples would be nice, too <code>:)</code> )</p>

<hr>

<p>@<a href=""https://stackoverflow.com/questions/43321/worth-switching-to-zsh-for-casual-use#43340"">Rodney Amato</a>
&amp;
@<a href=""https://stackoverflow.com/questions/43321/worth-switching-to-zsh-for-casual-use#43338"">Vulcan Eager</a>
give two good reasons to respectively stick to <code>bash</code> and switch to <code>zsh</code>. Looks like I'll have to investigate both! Oh well <code>:)</code></p>

<p>Is there anyone with an opinion from both sides of the argument?</p>
","<p>For casual use you are probably better off sticking with bash and just installing bash completion. </p>

<p>Installing it is pretty easy, grab the bash-completion-20060301.tar.gz from <a href=""http://www.caliban.org/bash/index.shtml#completion"" rel=""noreferrer"">http://www.caliban.org/bash/index.shtml#completion</a> and extract it with </p>

<pre><code>tar -xzvf bash-completion-20060301.tar.gz
</code></pre>

<p>then copy the bash_completion/bash_completion file to /etc with </p>

<pre><code>sudo cp bash_completion/bash_completion /etc
</code></pre>

<p>which will prompt you for your password. You probably will want to make a /etc/bash_completion.d directory for any additional completion scripts (for instance I have the git completion script in there).</p>

<p>Once this is done the last step is to make sure the .bash_profile file in your home directory has </p>

<pre><code>if [ -f /etc/bash_completion ]; then
     . /etc/bash_completion 
fi
</code></pre>

<p>in it to load the completion file when you login. </p>

<p>To test it just open a new terminal, and try completing on cvs and it should show you the cvs options in the list of completions.</p>
","43340"
"Passing argument to alias in bash","67863","","<p>Is it possible to do the following:</p>

<p>I want to run the following:</p>

<pre><code>mongodb bin/mongod
</code></pre>

<p>In my bash_profile I have</p>

<pre><code>alias = ""./path/to/mongodb/$1""
</code></pre>
","<p>An alias will expand to the string it represents. Anything after the alias will appear after its expansion without needing to be or able to be passed as explicit arguments (e.g. <code>$1</code>).</p>

<pre><code>$ alias foo='/path/to/bar'
$ foo some args
</code></pre>

<p>will get expanded to</p>

<pre><code>$ /path/to/bar some args
</code></pre>

<p>If you want to use explicit arguments, you'll need to use a function</p>

<pre><code>$ foo () { /path/to/bar ""$@"" fixed args; }
$ foo abc 123
</code></pre>

<p>will be executed as if you had done</p>

<pre><code>$ /path/to/bar abc 123 fixed args
</code></pre>

<p>To undefine an alias:</p>

<pre><code>unalias foo
</code></pre>

<p>To undefine a function:</p>

<pre><code>unset -f foo
</code></pre>

<p>To see the type and definition (for each defined alias, keyword, function, builtin or executable file):</p>

<pre><code>type -a foo
</code></pre>

<p>Or type only (for the highest precedence occurrence):</p>

<pre><code>type -t foo
</code></pre>
","4060984"
"Multithreading in Bash","67720","","<p>I would like to introduce multithreading feature in my shell script.</p>

<p>I have a script which calls the function <code>read_cfg()</code> with different arguments.
Each of these function calls are independent.</p>

<p>Would it be possible to instantiate these function calls (not scripts) parallelly.
Please let me how can we achieve that.. ?</p>
","<p>Sure, just add <code>&amp;</code> after the command:</p>

<pre><code>read_cfg cfgA &amp;
read_cfg cfgB &amp;
read_cfg cfgC &amp;
wait
</code></pre>

<p>all those jobs will then run in the background simultaneously. The optional <code>wait</code> command will then wait for all the jobs to finish.</p>

<p>Each command will run in a separate process, so it's technically not ""multithreading"", but I believe it solves your problem.</p>
","2425914"
"Recursively rename files using find and sed","67471","","<p>I want to go through a bunch of directories and rename all files that end in _test.rb to end in _spec.rb instead. It's something I've never quite figured out how to do with bash so this time I thought I'd put some effort in to get it nailed. I've so far come up short though, my best effort is:</p>

<pre><code>find spec -name ""*_test.rb"" -exec echo mv {} `echo {} | sed s/test/spec/` \;
</code></pre>

<p><em>NB: there's an extra echo after exec so that the command is printed instead of run while I'm testing it.</em> </p>

<p>When I run it the output for each matched filename is:</p>

<pre><code>mv original original
</code></pre>

<p>i.e. the substitution by sed has been lost. What's the trick?</p>
","<p>This happens because <code>sed</code> receives the string <code>{}</code> as input, as can be verified with:</p>

<pre><code>find . -exec echo `echo ""{}"" | sed 's/./foo/g'` \;
</code></pre>

<p>which prints <code>foofoo</code> for each file in the directory, recursively. The reason for this behavior is that the pipeline is executed once, by the shell, when it expands the entire command.</p>

<p>There is no way of quoting the <code>sed</code> pipeline in such a way that <code>find</code> will execute it for every file, since <code>find</code> doesn't execute commands via the shell and has no notion of pipelines or backquotes. The GNU findutils manual explains how to perform a similar task by putting the pipeline in a separate shell script:</p>

<pre><code>#!/bin/sh
echo ""$1"" | sed 's/_test.rb$/_spec.rb/'
</code></pre>

<p>(There may be some perverse way of using <code>sh -c</code> and a ton of quotes to do all this in one command, but I'm not going to try.)</p>
","4794313"
"bash script use cut command at variable and store result at another variable","67402","","<p>I have a <em>config.txt</em> file with IP addresses as content like this</p>

<pre><code>10.10.10.1:80
10.10.10.13:8080
10.10.10.11:443
10.10.10.12:80
</code></pre>

<p>I want to <em>ping every ip</em> address in that file</p>

<pre><code>#!/bin/bash
file=config.txt

for line in `cat $file`
do
  ##this line is not correct, should strip :port and store to ip var
  ip=$line|cut -d\: -f1
  ping $ip
done
</code></pre>

<p>I'm a beginner, sorry for such a question but I couldn't find it out myself.</p>
","<p>The awk solution is what I would use, but if you want to understand your problems with bash, here is a revised version of your script.</p>

<pre><code>##config file with ip addresses like 10.10.10.1:80
#!/bin/bash -vx
file=config.txt

while read line ; do
  ##this line is not correct, should strip :port and store to ip var
  ip=$( echo ""$line"" |cut -d\: -f1 )
  ping $ip
done &lt; ${file}
</code></pre>

<p>You could write your top line as </p>

<pre><code>for line in $(cat $file) ; do ...
</code></pre>

<p>You needed command substitution <code>$( ... )</code> to get the value assigned to $ip</p>

<p>reading lines from a file is usually considered more efficient with the <code>while read line ... done &lt; ${file}</code> pattern.</p>

<p>I hope this helps.</p>
","9726185"
"Adding a path to the .bashrc file?","67144","","<p>At the moment I am trying to add a path for ns-2 to my .bashrc file, I have installed the ns-allinone-2.34 but the command ns gives the result: command not found when entered into the shell.</p>

<p>Here is what my .bashrc file currently looks like, I edited it using gedit:</p>

<pre><code># .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
. /etc/bashrc
fi


# User specific aliases and functions
export PATH=/home/michael/ns-allinone-2.34/bin/ns:/home/michael/ns-allinone-2.34/bin/nam:$PATH
</code></pre>

<p>Can someone please explain why this isn't working or what a possible solution may be? I am using fedora 17.</p>
","<p>The <code>PATH</code> should contain the <em>directory</em> for the binaries, not the binaries themselves.</p>

<p>For example, in the above:</p>

<pre><code>export PATH=/home/michael/ns-allinone-2.34/bin/ns:..
</code></pre>

<p>should actually be:</p>

<pre><code>export PATH=/home/michael/ns-allinone-2.34/bin:...
</code></pre>
","13631374"
"How do you search for files containing dos line endings (CRLF) with grep on Linux?","66945","","<p>I want to search for files containing dos line endings with grep on Linux.  Something like this:</p>

<pre class=""lang-sh prettyprint-override""><code>grep -IUr --color '\r\n' .
</code></pre>

<p>The above seems to match for literal <code>rn</code> which is not what is desired.</p>

<p>The output of this will be piped through xargs into todos to convert crlf to lf like this</p>

<pre><code>grep -IUrl --color '^M' . | xargs -ifile fromdos 'file'
</code></pre>
","<p>Use <kbd>Ctrl</kbd>+<kbd>V</kbd>, <kbd>Ctrl</kbd>+<kbd>M</kbd> to enter a literal Carriage Return character into your grep string. So:</p>

<pre><code>grep -IUr --color ""^M""
</code></pre>

<p>will work - if the <code>^M</code> there is a literal CR that you input as I suggested.</p>

<p>If you want the list of files, you want to add the <code>-l</code> option as well.</p>

<p><strong>Explanation</strong></p>

<ul>
<li><code>-I</code> ignore binary files</li>
<li><code>-U</code> prevents grep to strip CR characters. By default it would do it if it decides it's a text file.</li>
<li><code>-r</code> read all files under each directory recursively. </li>
</ul>
","73886"
"check if a file is executable","66821","","<p>I am wondering what's the easiest way to check if a program is executable  with bash, without executing it ? It should at least check whether the file has execute rights, and is of the same architecture (for example, not a windows executable or another unsupported architecture, not 64 bits if the system is 32 bits, ...) as the current system.</p>
","<p>Take a look at the various <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?test"">test</a> operators (this is for the test command itself, but the built-in BASH and TCSH tests are more or less the same).</p>

<p>You'll notice that <code>-x FILE</code> says <em>FILE exists and execute (or search) permission is granted</em>.</p>

<p>BASH, Bourne, Ksh, Zsh Script</p>

<pre><code>if [[ -x ""$file"" ]]
then
    echo ""File '$file' is executable""
else
    echo ""File '$file' is not executable or found""
fi
</code></pre>

<p>TCSH or CSH Script:</p>

<pre><code>if ( -x ""$file"" ) then
    echo ""File '$file' is executable""
else
    echo ""File '$file' is not executable or found""
endif
</code></pre>

<p>To determine the <em>type</em> of file it is, try the <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?file"">file</a> command. You can parse the output to see exactly what type of file it is. <strong><em>Word 'o Warning</em></strong>: Sometimes <code>file</code> will return more than one line. Here's what happens on my Mac:</p>

<pre><code>$ file /bin/ls    
/bin/ls: Mach-O universal binary with 2 architectures
/bin/ls (for architecture x86_64):  Mach-O 64-bit executable x86_64
/bin/ls (for architecture i386):    Mach-O executable i386
</code></pre>

<p>The <code>file</code> command returns different output depending upon the OS. However, the word <code>executable</code> will be in executable programs, and usually the architecture will appear too.</p>

<p>Compare the above to what I get on my Linux box:</p>

<pre><code>$ file /bin/ls
/bin/ls: ELF 64-bit LSB executable, AMD x86-64, version 1 (SYSV), for GNU/Linux 2.6.9, dynamically linked (uses shared libs), stripped
</code></pre>

<p>And a Solaris box:</p>

<pre><code>$ file /bin/ls
/bin/ls:        ELF 32-bit MSB executable SPARC Version 1, dynamically linked, stripped
</code></pre>

<p>In all three, you'll see the word <code>executable</code> and the architecture (<code>x86-64</code>, <code>i386</code>, or <code>SPARC</code> with <code>32-bit</code>). </p>

<hr>

<h1>Addendum</h1>

<blockquote>
  <p>Thank you very much, that seems the way to go. Before I mark this as my answer, can you please guide me as to what kind of script shell check I would have to perform (ie, what kind of parsing) on 'file' in order to check whether I can execute a program ? If such a test is too difficult to make on a general basis, I would at least like to check whether it's a linux executable or osX (Mach-O)</p>
</blockquote>

<p>Off the top of my head, you could do something like this in BASH:</p>

<pre><code>if [ -x ""$file"" ] &amp;&amp; file ""$file"" | grep -q ""Mach-O""
then
    echo ""This is an executable Mac file""
elif [ -x ""$file"" ] &amp;&amp; file ""$file"" | grep -q ""GNU/Linux""
then
    echo ""This is an executable Linux File""
elif [ -x ""$file"" ] &amp;&amp; file ""$file"" | grep q ""shell script""
then
    echo ""This is an executable Shell Script""
elif [ -x ""$file"" ]
then
    echo ""This file is merely marked executable, but what type is a mystery""
else
    echo ""This file isn't even marked as being executable""
fi
</code></pre>

<p>Basically, I'm running the test, then if that is successful, I do a grep on the output of the <code>file</code> command. The <code>grep -q</code> means don't print any output, but use the exit code of grep to see if I found the string. If your system doesn't take <code>grep -q</code>, you can try <code>grep ""regex"" &gt; /dev/null 2&gt;&amp;1</code>.</p>

<p>Again, the output of the <code>file</code> command may vary from system to system, so you'll have to verify that these will work on your system. Also, I'm checking the executable bit. If a file is a binary executable, but the executable bit isn't on, I'll say it's not executable. This may not be what you want.</p>
","10319835"
"Insert multiple lines into a file after specified pattern using shell script","66766","","<p>I want to insert multiple lines into a file using shell script.
Let us consider my input file contents are:
<strong>input.txt:</strong></p>

<pre><code>abcd
accd
cdef
line
web
</code></pre>

<p>Now I have to insert four lines after the line 'cdef' in the <strong>input.txt</strong> file.
After inserting my file should change like this:</p>

<pre><code>abcd
accd
cdef
line1
line2
line3
line4
line
web
</code></pre>

<p>The above insertion I should do using the shell script. Can any one help me?</p>
","<p>Another <code>sed</code>,</p>

<pre><code>sed '/cdef/r add.txt' input.txt
</code></pre>

<p>input.txt:</p>

<pre><code>abcd
accd
cdef
line
web
</code></pre>

<p>add.txt:</p>

<pre><code>line1
line2
line3
line4
</code></pre>

<p><strong>Test:</strong></p>

<pre><code>sat:~# sed '/cdef/r add.txt' input.txt
abcd
accd
cdef
line1
line2
line3
line4
line
web
</code></pre>

<p>If you want to apply the changes in <code>input.txt</code> file. Then, use <code>-i</code> with <code>sed</code>.</p>

<pre><code>sed -i '/cdef/r add.txt' input.txt
</code></pre>

<p>If you want to use a regex as an expression you have to use the <code>-E</code> tag with <code>sed</code>.</p>

<pre><code>sed -E '/RegexPattern/r add.txt' input.txt
</code></pre>
","22497499"
"RE error: illegal byte sequence on Mac OS X","66740","","<p>I'm trying to replace a string in a Makefile on Mac OS X for cross-compiling to iOS. The string has embedded double quotes. The command is:</p>

<pre><code>sed -i """" 's|""iphoneos-cross"",""llvm-gcc:-O3|""iphoneos-cross"",""clang:-Os|g' Configure
</code></pre>

<p>And the error is:</p>

<pre><code>sed: RE error: illegal byte sequence
</code></pre>

<p>I've tried escaping the double quotes, commas, dashes, and colons with no joy. For example:</p>

<pre><code>sed -i """" 's|\""iphoneos-cross\""\,\""llvm-gcc\:\-O3|\""iphoneos-cross\""\,\""clang\:\-Os|g' Configure
</code></pre>

<p>I'm having a heck of a time debugging the issue. Does anyone know how to get <code>sed</code> to print the position of the illegal byte sequence? Or does anyone know what the illegal byte sequence is?</p>
","<p><sup>A sample command that exhibits the symptom: <code>sed 's/./@/' &lt;&lt;&lt;$'\xfc'</code>: this fails, because byte <code>0xfc</code> is not a valid UTF-8 char.<br>
Note that, by contrast, <em>GNU</em> <code>sed</code> (Linux, but also installable on macOS) simply passes the invalid byte through, without reporting an error.</sup></p>

<p>Using the <strong><a href=""https://stackoverflow.com/a/19770395/45375"">formerly accepted answer</a> is an option if you don't mind losing support for your true locale</strong> (if you're on a US system and you never need to deal with foreign characters, that may be fine.)</p>

<p>However, the <strong>same effect can be had <em>ad-hoc</em> for a <em>single command</em> only</strong>:</p>

<pre><code>LC_ALL=C sed -i """" 's|""iphoneos-cross"",""llvm-gcc:-O3|""iphoneos-cross"",""clang:-Os|g' Configure
</code></pre>

<p>Note: What matters is an <em>effective</em> <code>LC_CTYPE</code> setting of <code>C</code>, so <code>LC_CTYPE=C sed ...</code> would <em>normally</em> also work, but if <code>LC_ALL</code> happens to be set (to something other than <code>C</code>), it will override individual <code>LC_*</code>-category variables such as <code>LC_CTYPE</code>. Thus, the most robust approach is to set <code>LC_ALL</code>.</p>

<p>However, (effectively) setting <code>LC_CTYPE</code> to <code>C</code> treats strings <strong>as if each byte were its own character</strong> (<em>no</em> interpretation based on encoding rules is performed), with <strong>no regard</strong> for the - multibyte-on-demand - <strong>UTF-8 encoding</strong> that OS X employs by default, where <strong>foreign characters</strong> have <strong>multibyte encodings</strong>.</p>

<p>In a nutshell: <strong>setting <code>LC_CTYPE</code> to <code>C</code></strong> causes the shell and utilities to only recognize basic English letters as letters (the ones in the 7-bit ASCII range), so that <strong>foreign chars. will not be treated as letters</strong>, causing, for instance, upper-/lowercase conversions to fail.</p>

<p>Again, this may be fine if you needn't <em>match</em> multibyte-encoded characters such as <code>é</code>, and simply want to <em>pass such characters through</em>.</p>

<p>If this is insufficient and/or you want to <strong>understand the cause</strong> of the original error (including determining what input bytes caused the problem) and <strong>perform encoding conversions</strong> on demand, <strong>read on</strong> below.</p>

<hr>

<p>The problem is that the input file's encoding does not match the shell's.<br>
More specifically, <strong>the input file contains characters encoded in a way that is not valid in UTF-8</strong> (as @Klas Lindbäck stated in a comment) - that's what the <code>sed</code> error message is trying to say by <code>invalid byte sequence</code>.</p>

<p>Most likely, your input file uses a <strong>single-byte 8-bit encoding</strong> such as <code>ISO-8859-1</code>, frequently used to encode ""Western European"" languages.</p>

<p><strong>Example:</strong> </p>

<p>The accented letter <code>à</code> has Unicode codepoint <code>0xE0</code> (224) - the same as in <code>ISO-8859-1</code>. However, due to the nature of <em>UTF-8</em> encoding, this single codepoint is represented as <em>2</em> bytes - <code>0xC3 0xA0</code>, whereas trying to pass the <em>single byte</em> <code>0xE0</code> is <em>invalid</em> under UTF-8.</p>

<p>Here's a <strong>demonstration of the problem</strong> using the string <code>voilà</code> encoded as <code>ISO-8859-1</code>, with the <code>à</code> represented as <em>one</em> byte (via an ANSI-C-quoted bash string (<code>$'...'</code>) that uses <code>\x{e0}</code> to create the byte):</p>

<p>Note that the <code>sed</code> command is effectively a no-op that simply passes the input through, but we need it to provoke the error:</p>

<pre><code>  # -&gt; 'illegal byte sequence': byte 0xE0 is not a valid char.
sed 's/.*/&amp;/' &lt;&lt;&lt;$'voil\x{e0}'
</code></pre>

<p>To simply <strong><em>ignore</em> the problem</strong>, the above <code>LCTYPE=C</code> approach can be used:</p>

<pre><code>  # No error, bytes are passed through ('á' will render as '?', though).
LC_CTYPE=C sed 's/.*/&amp;/' &lt;&lt;&lt;$'voil\x{e0}'
</code></pre>

<p>If you want to <strong>determine which parts of the input cause the problem</strong>, try the following:</p>

<pre><code>  # Convert bytes in the 8-bit range (high bit set) to hex. representation.
  # -&gt; 'voil\x{e0}'
iconv -f ASCII --byte-subst='\x{%02x}' &lt;&lt;&lt;$'voil\x{e0}'
</code></pre>

<p>The output will show you all bytes that have the high bit set (bytes that exceed the 7-bit ASCII range) in hexadecimal form. (Note, however, that that also includes correctly encoded UTF-8 multibyte sequences - a more sophisticated approach would be needed to specifically identify invalid-in-UTF-8 bytes.)</p>

<hr>

<p><strong>Performing encoding conversions on demand</strong>:</p>

<p>Standard utility <code>iconv</code> can be used to convert to (<code>-t</code>) and/or from (<code>-f</code>) encodings; <code>iconv -l</code> lists all supported ones.</p>

<p><strong>Examples:</strong></p>

<p>Convert FROM <code>ISO-8859-1</code> to the encoding in effect in the shell (based on <code>LC_CTYPE</code>, which is <code>UTF-8</code>-based by default), building on the above example:</p>

<pre><code>  # Converts to UTF-8; output renders correctly as 'voilà'
sed 's/.*/&amp;/' &lt;&lt;&lt;""$(iconv -f ISO-8859-1 &lt;&lt;&lt;$'voil\x{e0}')""
</code></pre>

<p>Note that this <em>conversion allows you to properly match foreign characters</em>:</p>

<pre><code>  # Correctly matches 'à' and replaces it with 'ü': -&gt; 'voilü'
sed 's/à/ü/' &lt;&lt;&lt;""$(iconv -f ISO-8859-1 &lt;&lt;&lt;$'voil\x{e0}')""
</code></pre>

<p>To convert the input BACK to <code>ISO-8859-1</code> after processing, simply pipe the result to another <code>iconv</code> command:</p>

<pre><code>sed 's/à/ü/' &lt;&lt;&lt;""$(iconv -f ISO-8859-1 &lt;&lt;&lt;$'voil\x{e0}')"" | iconv -t ISO-8859-1
</code></pre>
","23584470"
"Convert line endings","66681","","<p>I have been using <code>d2u</code> to convert line endings. After installing Puppy Linux I
noticed that it does not come with <code>d2u</code>, but <code>dos2unix</code>. Then I noticed that
Ubuntu is missing both by default.</p>

<p>What is another way to convert line endings?</p>
","<p>Doing this with POSIX is tricky:</p>

<ul>
<li><p><a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/sed.html"" rel=""noreferrer"">POSIX Sed</a> does not support <code>\r</code> or <code>\15</code>. Even if it did, the in place
option <code>-i</code> is not POSIX</p></li>
<li><p><a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html"" rel=""noreferrer"">POSIX Awk</a> does support <code>\r</code> and <code>\15</code>, however the <code>-i inplace</code> option
is not POSIX</p></li>
<li><p><em>d2u</em> and <em>dos2unix</em> are not <a href=""http://pubs.opengroup.org/onlinepubs/9699919799/idx/utilities.html"" rel=""noreferrer"">POSIX utilities</a>, but <em>ex</em> is</p></li>
<li><p><a href=""http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ex.html"" rel=""noreferrer"">POSIX ex</a> does not support <code>\r</code>, <code>\15</code>, <code>\n</code> or <code>\12</code></p></li>
</ul>

<p>To remove carriage returns:</p>

<pre><code>awk 'BEGIN{RS=""^$"";ORS="""";getline;gsub(""\r"","""");print&gt;ARGV[1]}' file
</code></pre>

<p>To add carriage returns:</p>

<pre><code>awk 'BEGIN{RS=""^$"";ORS="""";getline;gsub(""\n"",""\r&amp;"");print&gt;ARGV[1]}' file
</code></pre>
","21219668"
"Bash integer comparison","66604","","<p>I want to write a bash script that checks if there is at least one parameter and if there is one, if that parameter is either a 0 or a 1.
this is the script:</p>

<pre><code>#/bin/bash
if ((""$#"" &lt; 1)) &amp;&amp; ( ((""$0"" != 1)) ||  ((""$0"" -ne 0q)) ) ; then
echo this script requires a 1 or 0 as first parameter.
fi
xinput set-prop 12 ""Device Enabled"" $0
</code></pre>

<p>This gives the following errors:</p>

<pre><code>./setTouchpadEnabled: line 2: ((: ./setTouchpadEnabled != 1: syntax error: operand expected (error token is ""./setTouchpadEnabled != 1"")
./setTouchpadEnabled: line 2: ((: ./setTouchpadEnabled -ne 0q: syntax error: operand expected (error token is ""./setTouchpadEnabled -ne 0q"")
</code></pre>

<p>What am I doing wrong?</p>
","<p>This script works!</p>

<pre><code>#/bin/bash
if [[ ( ""$#"" &lt; 1 ) || ( !( ""$1"" == 1 ) &amp;&amp; !( ""$1"" == 0 ) ) ]] ; then
    echo this script requires a 1 or 0 as first parameter.
else
    echo ""first parameter is $1""
    xinput set-prop 12 ""Device Enabled"" $0
fi
</code></pre>

<p>But this also works, and in addition keeps the logic of the OP, since the question is about calculations. Here it is with only <a href=""http://wiki.bash-hackers.org/syntax/arith_expr"" rel=""nofollow noreferrer""><em>arithmetic expressions</em>:</a></p>

<pre><code>#/bin/bash
if (( $# )) &amp;&amp; (( $1 == 0 || $1 == 1 )); then
    echo ""first parameter is $1""
    xinput set-prop 12 ""Device Enabled"" $0
else
    echo this script requires a 1 or 0 as first parameter.
fi
</code></pre>

<p>The output is the same<sup>1</sup>:</p>

<pre><code>$ ./tmp.sh 
this script requires a 1 or 0 as first parameter.

$ ./tmp.sh 0
first parameter is 0

$ ./tmp.sh 1
first parameter is 1

$ ./tmp.sh 2
this script requires a 1 or 0 as first parameter.
</code></pre>

<p><sub><em>[1] the second fails if the first argument is a string</em></sub></p>
","14511661"
"How to kill a child process after a given timeout in Bash?","66585","","<p>I have a bash script that launches a child process that crashes (actually, hangs) from time to time and with no apparent reason (closed source, so there isn't much I can do about it). As a result, I would like to be able to launch this process for a given amount of time, and kill it if it did not return successfully after a given amount of time.</p>

<p>Is there a <strong>simple</strong> and <strong>robust</strong> way to achieve that using bash? </p>

<p>P.S.: tell me if this question is better suited to serverfault or superuser.</p>
","<p><em>(As seen in:
<a href=""http://mywiki.wooledge.org/BashFAQ/068"" rel=""noreferrer"">BASH FAQ entry #68: ""How do I run a command, and have it abort (timeout) after N seconds?""</a>)</em></p>

<p>If you don't mind downloading something, use <code>timeout</code> (<code>sudo apt-get install timeout</code>) and use it like:</p>

<pre><code>timeout 10 ping www.goooooogle.com
</code></pre>

<p>If you don't want to download something, do what timeout does internally:</p>

<pre><code>( cmdpid=$BASHPID; (sleep 10; kill $cmdpid) &amp; exec ping www.goooooogle.com )
</code></pre>

<p>In case that you want to do a timeout for longer bash code, use the second option as such:</p>

<pre><code>( cmdpid=$BASHPID; 
    (sleep 10; kill $cmdpid) \
   &amp; while ! ping -w 1 www.goooooogle.com 
     do 
         echo crap; 
     done )
</code></pre>
","5161258"
"Bash: Print each command before executing?","66500","","<p>What is the best way to set up a bash script that prints each command before it executes it? </p>

<p>That would be great for debugging purposes. </p>

<p>I already tried this:</p>

<pre><code>CMD=""./my-command --params &gt;stdout.txt 2&gt;stderr.txt""
echo $CMD
`$CMD`
</code></pre>

<p>What it's supposed to do is to print this first:</p>

<pre><code>./my-command --params &gt;stdout.txt 2&gt;stderr.txt
</code></pre>

<p>and then execute <code>./my-command --params</code>, with the output redirected to the files specified.</p>
","<pre><code>set -o xtrace
</code></pre>

<p>or</p>

<pre><code>bash -x myscript.sh
</code></pre>

<p><em>This works with standard /bin/sh as well IIRC (it might be a POSIX thing then)</em></p>

<p>And remember, there is <a href=""http://bashdb.sourceforge.net"" rel=""noreferrer""><strong>bashdb</strong></a> (<code>bash Shell Debugger, release 4.0-0.4</code>)</p>

<hr>

<p>To revert to normal, exit the subshell or</p>

<pre><code>set +o xtrace
</code></pre>
","5750463"
"Bash: read a file line-by-line and process each segment as parameters to other prog","66432","","<p>I have some dirty work to do, so a Bash script seems to be a good choice. I'm new to Bash, and the experience makes me kind of frustrated.</p>

<p>The file mapfiles.txt consists of lines as follow. Each line has four segments separated by a white space. Each segment represents a input parameter to an external program name 'prog'. For example, ""cm19_1.png"" is the <strong>filename</strong>, ""0001"" the <strong>index</strong>, ""121422481"" the <strong>longitude</strong>, and ""31035995"" the <strong>latitude</strong>.</p>

<p>File: mapfiles.txt</p>

<pre><code>cm19_1.png 0001 121422481 31035995
cm19_2.png 0002 121423224 31035995
cm19_3.png 0003 121423967 31035995
…
</code></pre>

<p>I want to execute similar commands to each line. As show below, the prog's input parameter order is slightly different. So it makes sense to write a bash script to handle the repeated work.</p>

<pre><code>[Usage] prog &lt;index&gt; &lt;longitude&gt; &lt;latitude&gt; &lt;filename&gt;
example: prog 0001 121422481 31035995 cm19_1.png
</code></pre>

<p>Generally, the bash script will operate in this way: </p>

<ol>
<li>Read one line from mapfiles.txt</li>
<li>Split the segments</li>
<li>Call the prog with a correct parameter order</li>
</ol>

<p>Here comes run.sh.</p>

<pre><code>#!/bin/sh

input=mapfiles.txt
cmd=prog

while read line
do
        file=$(echo $line | cut -d' ' -f1)
        key=$(echo $line | cut -d' ' -f2)
        log=$(echo $line | cut -d' ' -f3)
        lat=$(echo $line | cut -d' ' -f4)
        echo $cmd $key $log $lat $file
done &lt; ""$input""
</code></pre>

<p>What I expected is</p>

<pre><code>prog 0001 121422481 31035995 cm19_1.png
prog 0002 121423224 31035995 cm19_2.png
prog 0003 121423967 31035995 cm19_3.png
… 
</code></pre>

<p>The ACTUAL result I got is</p>

<pre><code> cm19_1.png21422481 31035995
 cm19_2.png21423224 31035995
 cm19_3.png21423967 31035995
</code></pre>

<p>Problems that confused me</p>

<ol>
<li>Where is 'prog'? </li>
<li>Where is the white space?</li>
<li>What's wrong with the parameter order?</li>
</ol>

<p>Hmm… I wrote this script on my Mac using vim and copy it to a Scientific Linux box and a gentoo box. These three guys get the same ridiculous outputs.</p>
","<p>You can simplify this a lot:</p>

<pre><code>while read file key log lat
do
  echo $cmd $key $log $lat $file
done &lt; ""$input""
</code></pre>
","7619467"
"How to send control+c from a bash script?","66377","","<p>I'm starting a number of screens in a bash script, then running django's <code>runserver</code> command in each of them. I'd like to be able to programmatically stop them all as well, which requires me to send <code>Control+c</code> to <code>runserver</code>.</p>

<p>How can I send these keystrokes from my bash script?</p>
","<p><kbd>Ctrl+C</kbd> sends a <code>SIGINT</code> signal.</p>

<p><code>kill -INT &lt;pid&gt;</code> sends a <code>SIGINT</code> signal too:</p>

<pre><code># Terminates the program (like Ctrl+C)
kill -INT 888
# Force kill
kill -9 888
</code></pre>

<p>Assuming <code>888</code> is your process ID.</p>

<hr>

<p>Note that <code>kill 888</code> sends a <code>SIGTERM</code> signal, which is slightly different, but will also ask for the program to stop. So if you know what you are doing (no handler bound to <code>SIGINT</code> in the program), a simple <code>kill</code> is enough.</p>

<p>To get the PID of the last command launched in your script, use <code>$!</code> :</p>

<pre><code># Launch script in background
./my_script.sh &amp;
# Get its PID
PID=$!
# Wait for 2 seconds
sleep 2
# Kill it
kill $PID
</code></pre>
","5789674"
"Using colors with printf","66357","","<p>When written like this, it outputs text in blue:</p>

<pre><code>printf ""\e[1;34mThis is a blue text.\e[0m""
</code></pre>

<p>But I want to have format defined in printf:</p>

<pre><code>printf '%-6s' ""This is text""
</code></pre>

<p>Now I have tried several options how to add color, with no success:</p>

<pre><code>printf '%-6s' ""\e[1;34mThis is text\e[0m""
</code></pre>

<p>I even tried to add attribute code to format with no success.
This does not work and I can't find anywhere an example, where colors are added to printf, which has defined format as in my case.</p>
","<p>You're mixing the parts together instead of separating them cleanly.</p>

<pre><code>printf '\e[1;34m%-6s\e[m' ""This is text""
</code></pre>

<p>Basically, put the fixed stuff in the format and the variable stuff in the parameters.</p>
","5412776"
"What does if [ $? -eq 0 ] mean for shell scripts?","66353","","<p>There is this line in a shell script i have seen:</p>

<pre><code>grep -e ERROR ${LOG_DIR_PATH}/${LOG_NAME}  &gt; /dev/null
if [ $? -eq 0 ] 
</code></pre>
","<p>It's checking the return value (<code>$?</code>) of <code>grep</code>. In this case it's comparing it to 0 (success).</p>

<p>Usually when you see something like this (checking the return value of grep) it's checking to see whether the particular string was detected. Although the redirect to <code>/dev/null</code> isn't necessary, the same thing can be accomplished using <code>-q</code>.</p>
","7102005"
"Unlimited Bash History","66238","","<p>I want my <code>.bash_history</code> file to be unlimited. e.g. So I can always go back and see how I built/configured something, or what that nifty command was, or how some command broke something weeks ago. How do I change this setting?</p>
","<p>Set <code>HISTSIZE</code> and <code>HISTFILESIZE</code> to an empty string:</p>

<pre><code>HISTSIZE= HISTFILESIZE=
</code></pre>

<p>In <a href=""http://tiswww.case.edu/php/chet/bash/CHANGES"" rel=""noreferrer"">bash 4.3 and later</a> you can also use <code>HISTSIZE=-1 HISTFILESIZE=-1</code>:</p>

<pre class=""lang-none prettyprint-override""><code>n.  Setting HISTSIZE to a value less than zero causes the history list to be
    unlimited (setting it 0 zero disables the history list).

o.  Setting HISTFILESIZE to a value less than zero causes the history file size
    to be unlimited (setting it to 0 causes the history file to be truncated
    to zero size).
</code></pre>
","12234989"
"Finding multiple files recursively and renaming in linux","66135","","<p>I am having files like <code>a_dbg.txt, b_dbg.txt ...</code> in a <code>Suse 10</code> system. I want to write a bash shell script which should rename these files by removing ""_dbg"" from them.</p>

<p>Google suggested me to use <code>rename</code> command. So I executed the command <code>rename _dbg.txt .txt *dbg*</code> on the <code>CURRENT_FOLDER</code></p>

<p>My actual <code>CURRENT_FOLDER</code> contains the below files.</p>

<pre><code>CURRENT_FOLDER/a_dbg.txt
CURRENT_FOLDER/b_dbg.txt
CURRENT_FOLDER/XX/c_dbg.txt
CURRENT_FOLDER/YY/d_dbg.txt
</code></pre>

<p>After executing the <code>rename</code> command, </p>

<pre><code>CURRENT_FOLDER/a.txt
CURRENT_FOLDER/b.txt
CURRENT_FOLDER/XX/c_dbg.txt
CURRENT_FOLDER/YY/d_dbg.txt
</code></pre>

<p>Its not doing recursively, how to make this command to rename files in all subdirectories. Like <code>XX</code> and <code>YY</code> I will be having so many subdirectories which name is unpredictable. And also my <code>CURRENT_FOLDER</code> will be having some other files also.</p>
","<p>You can use <code>find</code> to find all matching files recursively:</p>

<pre><code>$ find . -iname ""*dbg*"" -exec rename _dbg.txt .txt '{}' \;
</code></pre>

<hr>

<p><strong>EDIT:</strong> what the <code>'{}'</code> and <code>\;</code> are?</p>

<p>The <code>-exec</code> argument makes find execute <code>rename</code> for every matching file found. <code>'{}'</code> will be replaced with the path name of the file. The last token, <code>\;</code> is there only to mark the end of the exec expression.</p>

<p>All that is described nicely in the man page for find:</p>

<pre><code> -exec utility [argument ...] ;
         True if the program named utility returns a zero value as its
         exit status.  Optional arguments may be passed to the utility.
         The expression must be terminated by a semicolon (``;'').  If you
         invoke find from a shell you may need to quote the semicolon if
         the shell would otherwise treat it as a control operator.  If the
         string ``{}'' appears anywhere in the utility name or the argu-
         ments it is replaced by the pathname of the current file.
         Utility will be executed from the directory from which find was
         executed.  Utility and arguments are not subject to the further
         expansion of shell patterns and constructs.
</code></pre>
","16541670"
"How to simulate the environment cron executes a script with?","65747","","<p>I normally have several problems with how cron executes scripts as they normally don't have my environment setup. Is there a way to invoke bash(?) in the same way cron does so I could test scripts before installing them?</p>
","<p>Add this to your cron:</p>

<pre><code>30 08 * * * env &gt; ~/cronenv
</code></pre>

<p>After it runs, do this:</p>

<pre><code>env - `cat ~/cronenv` /bin/sh
</code></pre>

<p>This assumes that your cron runs /bin/sh, which is the default regardless of the user's default shell.</p>
","2546509"
"How do I ""read"" a variable on a while loop","65725","","<p>How can I read from variable with <code>while read line</code>?</p>

<p>For example:</p>

<pre><code>the_list=$(..code..)

while read line
do
        echo $line

done &lt; $the_list
</code></pre>

<p>using the code above gives me error:</p>

<pre><code>./copy.sh: line 25: $the_list: ambiguous redirect
</code></pre>
","<p>You can write:</p>

<pre><code>while IFS= read -r line
do
    echo ""$line""
done &lt;&lt;&lt; ""$the_list""
</code></pre>

<p>See <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Here-Strings"">&sect;3.6.7 ""Here Strings"" in the <em>Bash Reference Manual</em></a>.</p>

<p>(I've also taken the liberty of adding some double-quotes, and adding <code>-r</code> and <code>IFS=</code> to <code>read</code>, to avoid too much mucking around with the contents of your variables.)</p>
","13122491"
"Temporarily change current working directory in bash to run a command","65700","","<p>I know I can use <code>cd</code> command to change my working directory in bash.  </p>

<p>But if I do this command:</p>

<pre><code>cd SOME_PATH &amp;&amp; run_some_command
</code></pre>

<p>Then the working directory will be changed permanently. Is there some way to change the working directory just temporarily like this?</p>

<pre><code>PWD=SOME_PATH run_some_command
</code></pre>
","<p>You can run the <code>cd</code> and the executable in a subshell by enclosing the command line in a pair of parentheses:</p>

<pre><code>(cd SOME_PATH &amp;&amp; exec_some_command)
</code></pre>

<p>Demo:</p>

<pre><code>$ pwd
/home/abhijit
$ (cd /tmp &amp;&amp; pwd)  # directory changed in the subshell
/tmp 
$ pwd               # parent shell's pwd is still the same
/home/abhijit
</code></pre>
","10382170"
"How to update one file in a zip archive","65425","","<p>Is it possible to replace a file in a zip file without unzipping deleting the old file adding the new file and rezipping it back?</p>

<p>Reason is I have a zip file which is really big there is one xml inside the zip file that I have to update sometimes.  Unzipping the zip and rezipping it takes a long time.  So I'd like to just be able to replace the one xml inside the zip through a script. I already have that checks for updates on the xml I have.</p>

<p>So is it possible to just replace the one xml without unzipping and rezipping ?</p>

<p>Sorry i would use the zip command to do things like that but problem is the script is actually for an android phone and zip is not a command i can use unfortunately sorry i left that out. I would have used zip definately if i could but i only have unzip for droid and then there is tar in busybox but tar doesn't do what i need</p>
","<p>From <a href=""http://linux.die.net/man/1/zip"" rel=""noreferrer"">zip(1)</a>:</p>

<blockquote>
  <p>When given the name of an existing zip archive, zip will replace identically named entries in the zip archive or add entries for new names.</p>
</blockquote>

<p>So just use the <code>zip</code> command as you normally would to create a new .zip file containing only that one file, except the .zip filename you specify will be the existing archive.</p>
","4799569"
"How to read the file content into a variable in one go?","65418","","<p>In Java, if you know for certain a file is very small, you can use <code>readBytes()</code> method to read the content in one go instead of read it line by line or using buffer. </p>

<p>Just wondering in shell script, I know we can do something like:</p>

<pre><code>    while read line
    do
      echo $line
      LINE = $line
    done &lt; ""test.file""
    echo $LINE
</code></pre>

<p>If my test.file is like:</p>

<pre><code>testline1
testline2
testline3
</code></pre>

<p>This only gives me the last line to <code>$LINE</code>. <code>$LINE</code> contains ""testline3"". </p>

<p>My question is: How can I read the whole file with multiple lines into one single variable,so I can get <code>$LINE=""testline1\ntestline2\ntestline3""</code>?</p>
","<p>Process the lines inside the loop instead of after it. If you really need the file in a variable:</p>

<pre><code>var=$(&lt;file)
</code></pre>
","10984496"
"What is the difference between Git Bash and the GitHub for Windows shell?","65402","","<p>I'm referring to the shell that comes with GitHub for Windows, and Git Bash (which has a stand alone installer).</p>
","<p>Well, for one thing, the default shell that comes with GitHub for Windows is <a href=""https://github.com/dahlbyk/posh-git"" rel=""noreferrer"">PoshGit</a>, which is a <a href=""https://en.wikipedia.org/wiki/Windows_PowerShell"" rel=""noreferrer"">Windows Power Shell</a> environment for Git.  On the other hand, <a href=""http://msysgit.github.io/"" rel=""noreferrer"">Git Bash/msysGit</a> uses the <a href=""https://en.wikipedia.org/wiki/Bash_(Unix_shell)"" rel=""noreferrer"">Bash shell</a> (Bourne Again Shell) and <a href=""https://en.wikipedia.org/wiki/Mingw"" rel=""noreferrer"">MinGW</a>, which is a port of a Linux style environment and command line tools.</p>

<p>PoshGit will let you use Windows and Power Shell commands with Git at the command line, while Git Bash will let you use MinGW/Linux tools with Git at the command line.</p>
","16757442"
"bash shell nested for loop","65354","","<p>I want to write a nested for loop that has to work in the bash shell prompt. nested for loop in Single line command. </p>

<p>For example, </p>

<pre><code>for i in a b; do echo $i; done
a
b
</code></pre>

<p>In the above example, for loop is executed in a single line command right.
Like this I have tried the nested for loop in the shell prompt. Its not working. 
How to do this. Please update me on this.</p>
","<p>This is not a nested loop, just a single loop. And the nested version works, too:</p>

<pre><code># for i in a b; do for j in a b; do echo $j; done; done
a
b
a
b
</code></pre>
","4847876"
"Negate if condition in bash script","65299","","<p>I'm new to bash and I'm stuck at trying to negate the following command:</p>

<pre><code>wget -q --tries=10 --timeout=20 --spider http://google.com
if [[ $? -eq 0 ]]; then
        echo ""Sorry you are Offline""
        exit 1
</code></pre>

<p>This if condition returns true if I'm connected to the internet. I want it to happen the other way around but putting <code>!</code> anywhere doesn't seem to work.</p>
","<p>You can choose:</p>

<pre><code>if [[ $? -ne 0 ]]; then       # -ne: not equal

if ! [[ $? -eq 0 ]]; then     # -eq: equal

if [[ ! $? -eq 0 ]]; then
</code></pre>

<p><code>!</code> inverts the return of the following expression, respectively.</p>
","26475397"
"recursively add file extension to all files","65252","","<p>I have a few directories and sub-directories containing files with no file extension. I want to add <code>.jpg</code> to all the files contained within these directories. I've seen bash scripts for changing the file extension but not for just adding one. It also needs to be recursive, can someone help please?</p>
","<p>Alternative command without an explicit loop (<a href=""http://linux.die.net/man/1/find"" rel=""noreferrer""><code>man find</code></a>):</p>

<pre><code>find . -type f -exec mv '{}' '{}'.jpg \;
</code></pre>

<p>Explanation: this recursively finds all files (<code>-type f</code>) starting from the current directory (<code>.</code>) and applies the move command (<a href=""http://linux.die.net/man/1/mv"" rel=""noreferrer""><code>mv</code></a>) to each of them. Note also the quotes around <code>{}</code>, so that filenames with spaces (and even newlines...) are properly handled.</p>
","1108567"
"How do you diff a directory for only files of a specific type?","65089","","<p>I have a question about the diff command
if I want a recursive directory diff but only for a specific file type, how to do that?</p>

<p>I tried using the exclude option but can only use one pattern only:</p>

<pre><code>$ diff /destination/dir/1 /destination/dir/2 -r -x *.xml
</code></pre>

<p>with the command I can only exclude xml file type, even though there are files in the folder image type (<code>png</code>, <code>gif</code>, <code>jpg</code>), <code>txt</code>, <code>php</code>, etc</p>

<p>how to diff only certain file types.</p>
","<p>You can specify <code>-x</code> more than once.</p>

<pre><code>diff -x '*.foo' -x '*.bar' -x '*.baz' /destination/dir/1 /destination/dir/2
</code></pre>

<p>From the Comparing Directories section of <code>info diff</code> (on my system, I have to do <code>info -f /usr/share/info/diff.info.gz</code>):</p>

<blockquote>
  <p>To ignore some files while comparing directories, use the '-x
  PATTERN' or '--exclude=PATTERN' option.  This option ignores any files
  or subdirectories whose base names match the shell pattern PATTERN.
  Unlike in the shell, a period at the start of the base of a file name
  matches a wildcard at the start of a pattern.  You should enclose
  PATTERN in quotes so that the shell does not expand it.  For example,
  the option <strong>-x '*.[ao]'</strong> ignores any file whose name ends with '.a' or
  '.o'.</p>
  
  <p>This option accumulates if you specify it more than once.  For
  example, using the options <strong>-x 'RCS' -x '*,v'</strong> ignores any file or
  subdirectory whose base name is 'RCS' or ends with ',v'.</p>
</blockquote>
","3775636"
"Why does sed not replace all occurrences?","64988","","<p>If I run this code in bash:</p>

<pre><code>echo dog dog dos | sed -r 's:dog:log:'
</code></pre>

<p>it gives output:</p>

<pre><code>log dog dos
</code></pre>

<p>How can I make it replace all occurrences of dog?</p>
","<p>You should add the <code>g</code> modifier so that sed performs a <em>global</em> substitution of the contents of the pattern buffer:</p>

<pre><code>echo dog dog dos | sed -e 's:dog:log:g'
</code></pre>

<p>For a fantastic documentation on sed, check <a href=""http://www.grymoire.com/Unix/Sed.html"">http://www.grymoire.com/Unix/Sed.html</a>. This <em>global</em> flag is explained here: <a href=""http://www.grymoire.com/Unix/Sed.html#uh-6"">http://www.grymoire.com/Unix/Sed.html#uh-6</a></p>

<p>The official documentation for <code>GNU sed</code> is available at <a href=""http://www.gnu.org/software/sed/manual/"">http://www.gnu.org/software/sed/manual/</a></p>
","15849152"
"How can I count the occurrences of a string within a file using bash?","64977","","<p>Just take this code as an example. Pretending it is an HTML/text file, if I would like to know the total number of times that <code>echo</code> appears, how can I do it using bash?</p>

<pre><code>new_user()
{
    echo ""Preparing to add a new user...""
    sleep 2
    adduser     # run the adduser program
}

echo ""1. Add user""
echo ""2. Exit""

echo ""Enter your choice: ""
read choice


case $choice in
    1) new_user     # call the new_user() function
       ;;
    *) exit
       ;;
esac 
</code></pre>
","<p>This will output the number of <em>lines</em> that contain your search string.</p>

<pre><code>grep -c ""echo"" FILE
</code></pre>

<p>This won't, however, count the number of occurrences in the file (ie, if you have echo multiple times on one line).</p>

<p>edit: </p>

<p>After playing around a bit, you could get the number of occurrences using this dirty little bit of code:</p>

<pre><code>sed 's/echo/echo\n/g' FILE | grep -c ""echo""
</code></pre>

<p>This basically adds a newline following every instance of echo so they're each on their own line, allowing grep to count those lines. You can refine the regex if you only want the word ""echo"", as opposed to ""echoing"", for example.</p>
","6742009"
"ERROR: ld.so: object LD_PRELOAD cannot be preloaded: ignored","64968","","<p>I am using ubuntu 12.04. Every time I start my bash terminal and every time when I finish typing a command(and press enter) , I get this message: </p>

<blockquote>
  <p>ERROR: ld.so: object '/usr/lib/liblunar-calendar-preload.so' from
  LD_PRELOAD cannot be preloaded: ignored.</p>
</blockquote>

<p>It is weird.
So what is the environment variable LD_PRELOAD used for? And what is the going on behind the scene?</p>

<p>Thanks.</p>
","<p>The linker takes some environmental variables in to acount. one is <code>LD_PRELOAD</code></p>

<p>from <code>man 8 ld-linux</code> :</p>

<pre><code>LD_PRELOAD
          A whitespace-separated list of additional,  user-specified,  ELF
          shared  libraries  to  be loaded before all others.  This can be
          used  to  selectively  override  functions   in   other   shared
          libraries.   For  setuid/setgid  ELF binaries, only libraries in
          the standard search directories that are  also  setgid  will  be
          loaded.
</code></pre>

<p>Therefore the linker will try to load libraries listed in the <code>LD_PRELOAD</code> variable before others are loaded.</p>

<p>What could be the case that inside the variable is listed a library that can't be preloaded. look inside your <code>.bashrc</code> or <code>.bash_profile</code> environment where the <code>LD_PRELOAD</code> is set and remove that library from the variable.</p>
","17723894"
"What is the best way to ensure only one instance of a Bash script is running?","64926","","<p>What is the simplest/best way to ensure only one instance of a given script is running - assuming it's Bash on Linux?</p>

<p>At the moment I'm doing:</p>

<pre><code>ps -C script.name.sh &gt; /dev/null 2&gt;&amp;1 || ./script.name.sh
</code></pre>

<p>but it has several issues:</p>

<ol>
<li>it puts the check outside of script</li>
<li>it doesn't let me run the same script from separate accounts - which I would like sometimes.</li>
<li><code>-C</code> checks only first 14 characters of process name</li>
</ol>

<p>Of course, I can write my own pidfile handling, but I sense that there should be a simple way to do it.</p>
","<p>If the script is the same across all users, you can use a <code>lockfile</code> approach. If you acquire the lock, proceed else show a message and exit.</p>

<p>As an example:</p>

<pre><code>[Terminal #1] $ lockfile -r 0 /tmp/the.lock
[Terminal #1] $ 

[Terminal #2] $ lockfile -r 0 /tmp/the.lock
[Terminal #2] lockfile: Sorry, giving up on ""/tmp/the.lock""

[Terminal #1] $ rm -f /tmp/the.lock
[Terminal #1] $ 

[Terminal #2] $ lockfile -r 0 /tmp/the.lock
[Terminal #2] $ 
</code></pre>

<p>After <code>/tmp/the.lock</code> has been acquired your script will be the only one with access to execution. When you are done, just remove the lock. In script form this might look like:</p>

<pre><code>#!/bin/bash

lockfile -r 0 /tmp/the.lock || exit 1

# Do stuff here

rm -f /tmp/the.lock
</code></pre>
","1715151"
"The difference between ""#!/usr/bin/env bash"" and ""#!/usr/bin/bash""?","64890","","<p>In the header of a <code>bash</code> script, what's the difference between those two statements ? </p>

<ol>
<li><p><code>#!/usr/bin/env bash</code></p></li>
<li><p><code>#!/usr/bin/bash</code></p></li>
</ol>

<p>When I tried to see the <code>env</code> man page, I'm just get this definition:</p>

<pre><code> env - run a program in a modified environment
</code></pre>

<p>What does it mean?</p>
","<p>Running a command through <code>/usr/bin/env</code> has the benefit of looking for whatever the default version of the program is in your current <strong>env</strong>ironment.</p>

<p>This way, you don't have to look for it in a specific place on the system, as those paths may be in different locations on different systems.  As long as it's in your path, it will find it.</p>

<p>The downside is that since you aren't calling an explicit executable, it's got the potential for mistakes, and on multiuser systems security problems (if someone managed to get their executable called <code>bash</code> in your path, for example).</p>

<pre><code>#!/usr/bin/env bash #lends you some flexibility on different systems
#!/usr/bin/bash     #gives you explicit control on a given system of what executable is called
</code></pre>

<p>In some situations, the first may be preferred (like running python scripts with multiple versions of python, without having to rework the executable line).  But in situations where security is the focus, the latter would be preferred, as it limits code injection possibilities.</p>
","16365367"
"How to find file accessed/created just few minutes ago","64864","","<p>I always forget which file I edit one minutes ago, so I input <code>find . -cmin 1</code> or some other value but it worked exactly <code>1</code> minutes. I had to try <code>find . -ctime 2 /*or 3,4...*/</code>.</p>

<p>Then I find another approach which be better:</p>

<pre><code>touch -t 12251134 empty /*similar format which 5 or 10 minutes ago */
find . -newer empty
</code></pre>

<p>I can use <code>date -d'-5minutes' +%m%d%H%M</code> caculate the time for me. I want to know if there is a simple way to find files accessed 1, 2 or 3... minutes ago.</p>
","<p>Simply specify whether you want the time to be greater, smaller, or equal to the time you want, using, respectively:</p>

<pre><code>find . -cmin +&lt;time&gt;
find . -cmin -&lt;time&gt;
find . -cmin  &lt;time&gt;
</code></pre>

<p>In your case, for example, the files with last edition in a maximum of 5 minutes, are given by:</p>

<pre><code>find . -cmin -5
</code></pre>
","14032268"
"get just the integer from wc in bash","64796","","<p>Is there a way to get the integer that wc returns in bash?</p>

<p>Basically I want to write the line numbers and word counts to the screen after the file name.</p>

<p><code>output: filename linecount wordcount</code>
Here is what I have so far:
<pre><code>files=`ls`
for f in $files;
do
        if [ ! -d $f ] #only print out information about files !directories
        then
                # some way of getting the wc integers into shell variables and then printing them
                echo ""$f $lines $ words""
        fi
done
</pre></code></p>
","<p>You can use the <a href=""http://www.manpagez.com/man/1/cut/"" rel=""noreferrer""><code>cut</code></a> command to get just the first word of <code>wc</code>'s output (which is the line or word count):</p>

<pre><code>lines=`wc -l $f | cut -f1 -d' '`
words=`wc -w $f | cut -f1 -d' '`
</code></pre>
","3746969"
"Fastest way to ping a network range and return responsive hosts?","64741","","<p>Constraints:<br>
1. Speed matters.<br>
2. I am allowed to ping once.  </p>

<p>I'm debating whether to use Python or shellscripting. Is there a method faster than <code>bash</code>?</p>

<p>Here is the current code,</p>

<pre><code>for ip in $(seq int1 int2); do
    ping -c 1 xxx.xxx.xxx.$ip | grep ""bytes from"" &amp;
done
</code></pre>

<p>Anything faster than this?</p>
","<p>You should use NMAP:</p>

<pre><code>nmap -T5 -sP 192.168.0.0-255
</code></pre>
","14038694"
"""bash: Bad substitution"" when using code in .sh file","64615","","<p>Why does </p>

<pre><code>for i in *.mp4; do ffmpeg -i ""$i"" ""${i/.mp4/.mp3}""; done
</code></pre>

<p>work, if I use it in console, but give me a ""Bad substitution"" error, if I use the same code in a .sh file?</p>

<pre><code>for i in *.mp4
do
    ffmpeg -i ""$i"" ""${i/.mp4/.mp3}""
done
</code></pre>
","<p><strong>The meaning of <code>#!/bin/sh</code></strong></p>

<p>This is because you are using <code>#!/bin/sh</code> in your script, as a fix you should change it to <code>#!/bin/bash</code>.</p>

<pre><code>#!/bin/bash
for i in *.mp4
do
    ffmpeg -i ""$i"" ""${i/.mp4/.mp3}""
done
</code></pre>

<p>People use <code>#!/bin/sh</code> when the only use a limited set of features (defined by the POSIX standard) for maximum portability. <code>#!/bin/bash</code> is perfectly fine for user scripts. <code>/bin/sh</code> is usually symlinked to either a minimal POSIX compliant shell or to a standard shell (e.g. bash). In the later case bash is run in compatibility mode, which is explained in the <a href=""http://linux.die.net/man/1/bash"" rel=""noreferrer"">manpage</a>:</p>

<blockquote>
  <p>If bash is invoked with the name sh, it tries to mimic the startup behavior of historical versions of sh as closely as possible, while conforming to the POSIX standard as well.</p>
</blockquote>

<p><strong>Suggested changes to your script:</strong></p>

<ul>
<li>It is considered good practice to use quotes around variables (<code>""$i""</code> instead of <code>$i</code>). Quoted variables will prevent problems if the stored file name contains white space characters.</li>
<li>I like that you use advanced <a href=""http://linux.die.net/man/1/bash"" rel=""noreferrer"">parameter expansion</a>. I suggest to use <code>""${i%.mp4}.mp3""</code> (instead of <code>""${i/.mp4/.mp3}""</code>), since <code>${parameter%word}</code> only substitutes at the end (for example a file named <code>foo.mp4.backup</code>).</li>
</ul>
","15185640"
"How to run BASH script in my Android?","64438","","<p>My same BASH script is working in Fedora/CentOS.</p>

<p>But I am testing one <code>Android eee pad transformer</code>. 
<img src=""https://i.stack.imgur.com/8dvzw.jpg"" alt=""enter image description here""></p>

<p>Where i have terminal access and i wrote a small test script. But its not working, how can i fix it? what am i doing wrong?</p>

<pre><code>/data/data/berserker.android.apps.sshdroid/home $ cat test.sh 
#!/bin/bash
var=`ifconfig -a`;
echo $var;

/data/data/berserker.android.apps.sshdroid/home $ chmod +x test.sh 
/data/data/berserker.android.apps.sshdroid/home $ ./test.sh 
sh: ./test.sh: not found
/data/data/berserker.android.apps.sshdroid/home $ uname -a
Linux localhost 2.6.36.3-00004-g069b8b5 #1 SMP PREEMPT Wed May 11 22:14:22 CST 2011 armv7l GNU/Linux

/data/data/berserker.android.apps.sshdroid/home $ bash ./test.sh 
sh: bash: Permission denied

/data/data/berserker.android.apps.sshdroid/home $ ls -l /bin/bash
ls: /bin/bash: No such file or directory

/data/data/berserker.android.apps.sshdroid/home $ find / -name ""bash""
find: /config: Permission denied
lots more.......
find: /proc/595/task/598/fd: Permission denied
......
find: /data: Permission denied
find: /root: Permission denied
</code></pre>

<p><strong>Follow up:</strong></p>

<p>This is my script now which works:</p>

<pre><code>#!/bin/sh
echo ""hello wassup, run me simply as './test.sh'"";

or

#!/bin/bash
echo ""hello wassup, run me using 'sh ./test.sh'"";
</code></pre>
","<p>May be it will work when calling interpreter with a script?</p>

<pre><code>$ bash ./test.sh
</code></pre>

<p>I saw, that although it is specified <code>#!/bin/bash</code> error was posted by <code>sh</code>  - may be it do wrong.</p>

<p>UPD</p>

<pre><code>$ sh ./test.sh
</code></pre>
","8094664"
"Error Installing Homebrew - Brew Command Not Found","64277","","<p>I've spent the bulk of my Friday trying to get the latest version of Ruby installed on my new MacBook Air (w/ Mountain Lion installed).</p>

<p>I have all the latest versions of XCode and command line tools. But I can't seem to get Homebrew to work! <a href=""https://imgur.com/of1Sa"" rel=""noreferrer"">Here's a screenshot of where I keep getting stuck</a> (I'm a new user, so can't embed this image).</p>

<p>As you can see I used the following to instal Homebrew:</p>

<pre><code>ruby -e ""$(curl -fsSkL raw.github.com/mxcl/homebrew/go/install)""
</code></pre>

<p>While there was a ""warning"" it seemed as though the installation worked:</p>

<pre><code>Warning: /usr/local/bin is not in your PATH.
==&gt; Installation successful!
</code></pre>

<p>Despite that, when I try to run ""brew doctor"" I received the following:</p>

<pre><code>-bash: brew: command not found
</code></pre>

<p>Again, I'm trying to install homebrew, so i can instal the latest version of ruby -- I'm looking to learn to code in ruby, but kind of screwed if I can even get a development environment running! :)</p>

<p>Thanks for any help you can offer!</p>
","<p>The warning is telling you what is wrong. The problem is that <code>brew</code> is kept in <code>/usr/local/bin</code></p>

<p>So, you can try <code>/usr/local/bin/brew doctor</code></p>

<p>To fix it permanently alter your bash profile (.bashrc or .profile in your home directory) and add the following line:</p>

<pre><code>export PATH=/usr/local/bin:$PATH
</code></pre>
","14288750"
"How to put sshpass command inside a bash script?","64223","","<p>I am trying to run a sshpass command inside a bash script but it isn't working.</p>

<p>If I run the same command from the terminal it works fine but running it in a bash script it doesn't.</p>

<pre><code>#! /bin/bash

sshpass -p 'password' ssh user@host command
</code></pre>

<p>I am aware of the security issues but its not important now.</p>

<p>Can someone help? Am I missing something.</p>

<p>Thanks</p>
","<p>Do <code>which sshpass</code> in your command line to get the absolute path to <code>sshpass</code> and replace it in the bash script. </p>

<p>You should also probably do the same with the <code>command</code> you are trying to run.</p>

<p>The problem might be that it is not finding it.</p>
","19303264"
"Conversion hex string into ascii in bash command line","64125","","<p>I have a lot of this kind of string and I want to find a command to convert it in ascii, I tried with <code>echo -e</code> and <code>od</code>, but it did not work.</p>

<pre><code>0xA7.0x9B.0x46.0x8D.0x1E.0x52.0xA7.0x9B.0x7B.0x31.0xD2
</code></pre>
","<p>This code will convert the text <code>0xA7.0x9B.0x46.0x8D.0x1E.0x52.0xA7.0x9B.0x7B.0x31.0xD2</code> into a stream of 11 bytes with equivalent values.  These bytes will be written to standard out.</p>

<pre><code>TESTDATA=$(echo '0xA7.0x9B.0x46.0x8D.0x1E.0x52.0xA7.0x9B.0x7B.0x31.0xD2' | tr '.' ' ')
for c in $TESTDATA; do
    echo $c | xxd -r
done
</code></pre>

<p>As others have pointed out, this will not result in a printable ASCII string for the simple reason that the specified bytes are not ASCII.  You need post more information about how you obtained this string for us to help you with that.</p>

<p>How it works:  xxd -r translates hexadecimal data to binary (like a reverse hexdump).  xxd requires that each line start off with the index number of the first character on the line (run hexdump on something and see how each line starts off with an index number).  In our case we want that number to always be zero, since each execution only has one line.  As luck would have it, our data already has zeros before every character as part of the 0x notation.  The lower case x is ignored by xxd, so all we have to do is pipe each 0xhh character to xxd and let it do the work.</p>

<p>The tr translates periods to spaces so that for will split it up correctly.</p>
","13163618"
"How to make the hardware beep sound in Mac OS X 10.6","64091","","<p>I just want that Mac OS X 10.6 does a hardware beep sound like in open suse and other distributions. I tried following approaches</p>

<p>Terminal -> beep = -bash: beep: command not found</p>

<p>Terminal -> say beep = voice speaks out beep (Not a Hardware beep but awesome ;) )</p>

<p>applescript -> beep = Macintosh bell (I want a Hardware beep!)</p>

<p>Does anybody know how to make the Hardware beep in bin/bash or applescript?</p>
","<p>There is no ""hardware beep"" in macOS.</p>

<p>The functionality you're thinking of is an artifact of very old (pre-1990s) IBM PC-compatible hardware. Before most computers had sound cards, most machines had a small speaker or piezo buzzer connected to one of the channels of a timer chip. This could be used to generate simple tones or beeps. Even after many computers integrated sound cards, it remained common for quite some time for computers to route this output to a separate internal speaker. More recently, many computers, especially laptops, have integrated this functionality into the onboard sound card.</p>

<p>(If you're curious about the technical details of how the PC speaker interface worked, <a href=""https://courses.engr.illinois.edu/ece390/books/labmanual/io-devices-speaker.html"" rel=""noreferrer"">there are more details here</a>.)</p>

<p>This hardware has never existed in Apple computers. The only audio output available is through the sound card, and the only system beep in macOS is the user's alert sound.</p>
","44056637"
"How to count lines of code including sub-directories","64066","","<p>Suppose I want to count the lines of code in a project. If all of the files are in the same directory I can execute:</p>

<pre><code>cat * | wc -l
</code></pre>

<p>However, if there are sub-directories, this doesn't work. For this to work cat would have to have a recursive mode. I suspect this might be a job for xargs, but I wonder if there is a more elegant solution?</p>
","<p>First you do not need to use <code>cat</code> to count lines. This is an <a href=""http://en.wikipedia.org/wiki/Cat_(Unix)#Useless_use_of_cat"" rel=""noreferrer"">antipattern called Useless Use of Cat</a> (UUoC). To count lines in files in the current directory, use <a href=""https://en.wikipedia.org/wiki/Wc_(Unix)"" rel=""noreferrer""><code>wc</code></a>:</p>

<pre><code>wc -l * 
</code></pre>

<p>Then the <code>find</code> command recurses the sub-directories:</p>

<pre><code>find . -name ""*.c"" -exec wc -l {} \;
</code></pre>

<ul>
<li><p><code>.</code> is the name of the top directory to start searching from</p></li>
<li><p><code>-name ""*.c""</code> is the pattern of the file you're interested in </p></li>
<li><p><code>-exec</code> gives a command to be executed</p></li>
<li><p><code>{}</code> is the result of the find command to be passed to the  command (here <code>wc-l</code>)</p></li>
<li><p><code>\;</code> indicates the end of the command </p></li>
</ul>

<p>This command produces a list of all files found with their line count, if you want to have the sum for <strong>all</strong> the files found, you can use find to list the files (with the <code>-print</code> option) and than use xargs to pass this list as argument to wc-l.</p>

<pre><code>find . -name ""*.c"" -print | xargs wc -l 
</code></pre>

<p>EDIT to address Robert Gamble comment (thanks): if you have spaces or newlines (!) in file names, then you have to use <code>-print0</code> option instead of <code>-print</code> and <code>xargs -null</code> so that the list of file names are exchanged with null-terminated strings. </p>

<pre><code>find . -name ""*.c"" -print0 | xargs -0 wc -l
</code></pre>

<p>The Unix philosophy is to have tools that do one thing only, and do it well.</p>
","316613"
"downloading all the files in a directory with cURL","63908","","<p>I am using cURL to try to download all files in a certain directory.</p>

<p>here's what my list of files looks like:</p>

<p><img src=""https://i.stack.imgur.com/2r8xt.png"" alt=""enter image description here""></p>

<p>I have tried to do in bash script: <code>iiumlabs.[].csv.pgp</code> and <code>iiumlabs*</code> and I guess curl is not big on wildcards.</p>

<pre><code>curl -u login:pass ftp.myftpsite.com/iiumlabs* -O
</code></pre>

<p><strong>question:</strong> how do i download this directory of files using cURL?</p>
","<p>OK, considering that you are using Windows, the most simple way to do that is to use the standard <code>ftp</code> tool bundled with it. I base the following solution on Windows XP, hoping it'll work as well (or with minor modifications) on other versions.</p>

<p>First of all, you need to create a batch (script) file for the <code>ftp</code> program, containing instructions for it. Name it as you want, and put into it:</p>

<pre><code>curl -u login:pass ftp.myftpsite.com/iiumlabs* -O

open ftp.myftpsite.com
login
pass
mget *
quit
</code></pre>

<p>The first line opens a connection to the ftp server at <code>ftp.myftpsite.com</code>. The two following lines specify the login, and the password which ftp will ask for (replace <code>login</code> and <code>pass</code> with just the login and password, without any keywords). Then, you use <code>mget *</code> to get all files. Instead of the <code>*</code>, you can use any wildcard. Finally, you use <code>quit</code> to close the <code>ftp</code> program without interactive prompt.</p>

<p>If you needed to enter some directory first, add a <code>cd</code> command before <code>mget</code>. It should be pretty straightforward.</p>

<p>Finally, write that file and run <code>ftp</code> like this:</p>

<pre><code>ftp -i -s:yourscript
</code></pre>

<p>where <code>-i</code> disables interactivity (asking before downloading files), and <code>-s</code> specifies path to the script you created.</p>

<hr>

<p>Sadly, file transfer over SSH is not natively supported in Windows. But for that case, you'd probably want to use <a href=""http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"" rel=""noreferrer"">PuTTy</a> tools anyway. The one of particular interest for this case would be <code>pscp</code> which is practically the PuTTy counter-part of the openssh <code>scp</code> command.</p>

<p>The syntax is similar to <code>copy</code> command, and it supports wildcards:</p>

<pre><code>pscp -batch login@mysshsite.com:iiumlabs* .
</code></pre>

<p>If you authenticate using a key file, you should pass it using <code>-i path-to-key-file</code>. If you use password, <code>-pw pass</code>. It can also reuse sessions saved using PuTTy, using the load <code>-load your-session-name</code> argument.</p>
","11784314"
"How to produce range with step n in bash? (generate a sequence of numbers with increments)","63896","","<p>The way to iterate over a range in bash is</p>

<pre><code>for i in {0..10}; do echo $i; done
</code></pre>

<p>What would be the syntax for iterating over the sequence with a step? Say, I would like to get only even number in the above example.</p>
","<p>I'd do</p>

<pre><code>for i in `seq 0 2 10`; do echo $i; done
</code></pre>

<p>(though of course <code>seq 0 2 10</code> will produce the same output on its own).</p>

<p>Note that <code>seq</code> allows floating-point numbers (e.g., <code>seq .5 .25 3.5</code>) but bash's brace expansion only allows integers.</p>
","966026"
"does linux shell support list data structure?","63677","","<p>this question is not the same as <a href=""https://stackoverflow.com/questions/7314319/does-the-shell-support-sets"">Does the shell support sets?</a></p>

<p>i know lots of script language support list structure, such as python, python, ruby, and javascript, so what about linux shell?</p>

<p>does shell support such syntax?</p>

<pre><code>for i in list:
do
     print i
done
</code></pre>

<p>i would first to <strong>initialize a list</strong>,  for example:</p>

<pre><code>ListName = [ item1, item2, ..., itemn ]
</code></pre>

<p><strong>then iterate over it</strong></p>

<p>is that possible when programming shell scripts?</p>
","<p>It supports lists, but not as a separate data structure (ignoring arrays for the moment).</p>

<p>The <code>for</code> loop iterates over a list (in the generic sense) of white-space separated values, regardless of how that list is created, whether literally:</p>

<pre><code>for i in 1 2 3; do
    echo ""$i""
done
</code></pre>

<p>or via parameter expansion:</p>

<pre><code>listVar=""1 2 3""
for i in $listVar; do
    echo ""$i""
done
</code></pre>

<p>or command substitution:</p>

<pre><code>for i in $(echo 1; echo 2; echo 3); do
    echo ""$i""
done
</code></pre>

<p>An array is just a special parameter which can contain a more structured list of value, where each element can itself contain whitespace. Compare the difference:</p>

<pre><code>array=(""item 1"" ""item 2"" ""item 3"")
for i in ""${array[@]}""; do   # The quotes are necessary here
    echo ""$i""
done

list='""item 1"" ""item 2"" ""item 3""'
for i in $list; do
    echo $i
done
for i in ""$list""; do
    echo $i
done
for i in ${array[@]}; do
    echo $i
done
</code></pre>
","12317832"
"Bash variable scope","63641","","<p>Please explain to me why the very last ""echo"" statement is blank?  I expect that it was incremented in the while loop to a value of 1:</p>

<pre><code>#!/bin/bash
OUTPUT=""name1 ip ip status"" # normally output of another command with multi line output

if [ -z ""$OUTPUT"" ]
then
        echo ""Status WARN: No messages from SMcli""
        exit $STATE_WARNING
else
        echo ""$OUTPUT""|while read NAME IP1 IP2 STATUS
        do
                if [ ""$STATUS"" != ""Optimal"" ]
                then
                        echo ""CRIT: $NAME - $STATUS""
                        echo $((++XCODE))
                else
                        echo ""OK: $NAME - $STATUS""
                fi
        done
fi

echo $XCODE
</code></pre>

<p>I've tried using the following statement instead of the ++XCODE method</p>

<pre><code>XCODE=`expr $XCODE + 1`
</code></pre>

<p>and it too wont print outside of the while statement.  I think I'm missing something about variable scope here but the ol' man page isnt showing it to me.</p>
","<p>Because you're piping into the while loop, a sub shell is created to run the while loop.
Now this child process has it's own copy of the environment and can't pass any
variables back to its parent (as in any unix process).</p>

<p>Therefore you'll need to restructure so that you're not piping into the loop.
Alternatively you could run in a function for example and echo the value you
want returned from the sub process.</p>

<p><a href=""http://tldp.org/LDP/abs/html/subshells.html#SUBSHELL"" rel=""noreferrer"">http://tldp.org/LDP/abs/html/subshells.html#SUBSHELL</a></p>
","124321"
"""while read LINE do"" and grep problems","63574","","<p>I have two files.  </p>

<pre><code>file1.txt:  
Afghans  
Africans  
Alaskans  
...  
</code></pre>

<p>where <code>file2.txt</code> contains the output from a wget on a webpage, so it's a big sloppy mess, but does contain many of the words from the first list.</p>

<p>Bashscript:</p>

<pre><code>cat file1.txt | while read LINE; do grep $LINE file2.txt; done
</code></pre>

<p>This did not work as expected.  I wondered why, so I echoed out the $LINE variable inside the loop and added a sleep 1, so i could see what was happening:</p>

<pre><code>cat file1.txt | while read LINE; do echo $LINE; sleep 1; grep $LINE file2.txt; done
</code></pre>

<p>The output looks in terminal looks something like this:</p>

<blockquote>
  <p>Afghans<br>
  Africans<br>
  Alaskans<br>
  Albanians<br>
  Americans<br>
  grep: Chinese: No such file or directory<br>
  : No such file or directory<br>
  Arabians<br>
  Arabs<br>
  Arabs/East Indians<br>
  : No such file or directory<br>
  Argentinans<br>
  Armenians<br>
  Asian<br>
  Asian Indians<br>
  : No such file or directory<br>
  file2.txt: Asian Naruto<br>
  ...  </p>
</blockquote>

<p>So you can see it did finally find the word ""Asian"". But why does it say:</p>

<blockquote>
  <p>No such file or directory</p>
</blockquote>

<p>?</p>

<p>Is there something weird going on or am I missing something here?</p>
","<p>@OP, First, use <code>dos2unix</code> as advised. Then use awk</p>

<pre><code>awk 'FNR==NR{a[$1];next}{ for(i=1;i&lt;=NF;i++){ if($i in a) {print $i} } } '  file1 file2_wget
</code></pre>

<p>Note: using while loop and grep inside the loop is not efficient, since for every iteration, you need to invoke <code>grep</code> on the file2.</p>

<p>@OP, crude explanation:
For meaning of FNR and NR, please refer to <a href=""http://www.gnu.org/software/gawk/"" rel=""nofollow"">gawk manual</a>. <code>FNR==NR{a[1];next}</code>  means getting the contents of file1 into array <code>a</code>. when  FNR is not equal to NR (which means reading the 2nd file now), it will check if each word in the file is in array <code>a</code>. If it is, print out. (the for loop is used to iterate each word)</p>
","5629064"
"syntax error near unexpected token ' - bash","63459","","<p>I have a written a sample script on my Mac </p>

<pre><code>#!/bin/bash
test() {
  echo ""Example""
}
test
exit 0
</code></pre>

<p>and this works fine by displaying     Example</p>

<p>When I run this script on a RedHat machine, it says</p>

<blockquote>
  <p>syntax error near unexpected token '</p>
</blockquote>

<p>I checked that bash is available using</p>

<pre><code>cat /etc/shells

which bash shows /bin/bash 
</code></pre>

<p>Did anyone come across the same issue ?</p>

<p>Thanks in advance !</p>
","<p>It could be a file encoding issue.</p>

<p>I have encountered file type encoding issues when working on files between different operating systems and editors - in my case particularly between Linux and Windows systems.</p>

<p>I suggest checking your file's encoding to make sure it is suitable for the target linux environment. I guess an encoding issue is less likely given you are using a MAC than if you had used a Windows text editor, however I think file encoding is still worth considering.</p>

<p>--- EDIT (Add an actual solution as recommended by @Potatoswatter) <br/><br/>
To demonstrate how file type encoding could be this issue, I copy/pasted your example script into Notepad in Windows (I don't have access to a Mac), then copied it to a linux machine and ran it: </p>

<pre><code>jdt@cookielin01:~/windows&gt; sh ./originalfile             
./originalfile: line 2: syntax error near unexpected token `$'{\r''
'/originalfile: line 2: `test() {
</code></pre>

<p>In this case, Notepad saved the file with carriage returns and linefeeds, causing the error shown above. The <code>\r</code> indicates a carriage return (Linux systems terminate lines with linefeeds <code>\n</code> only). </p>

<p>On the linux machine, you could test this theory by running the following to strip carriage returns from the file, if they are present:</p>

<pre><code>cat originalfile | tr -d ""\r"" &gt; newfile
</code></pre>

<p>Then try to run the new file <code>sh ./newfile</code> . If this works, the issue was carriage returns as hidden characters. </p>

<p><strong>Note:</strong> This is not an exact replication of your environment (I don't have access to a Mac), however it seems likely to me that the issue is that an editor, somewhere, saved carriage returns into the file. </p>

<p>--- /EDIT </p>

<p>To elaborate a little, operating systems and editors can have different file encoding defaults. Typically, applications and editors will influence the filetype encoding used, for instance, I think Microsoft Notepad and Notepad++ default to Windows-1252. There may be newline differences to consider too (In Windows environments, a carriage return and linefeed is often used to terminate lines in files, whilst in Linux and OSX, only a Linefeed is usually used). </p>

<p>A similar question and answer that references file encoding is here: <a href=""https://stackoverflow.com/questions/18081038/bad-character-showing-up-in-bash-script-execution"">bad character showing up in bash script execution</a></p>
","20929197"
"Have bash script answer interactive prompts","63360","","<p>Is it possible to have a bash script automatically handle prompts that would normally be presented to the user with default actions?  Currently I am using a bash script to call an in-house tool that will display prompts to the user (prompting for Y/N) to complete actions, however the script I'm writing needs to be completely ""hands-off"", so I need a way to send <code>Y|N</code> to the prompt to allow the program to continue execution.  Is this possible?</p>
","<p>This is not ""auto-completion"", this is automation. One common tool for these things is called <a href=""http://www.nist.gov/mel/msid/expect.cfm"" rel=""noreferrer"">Expect</a>.</p>

<p>You might also get away with just piping input from <code><a href=""http://linux.die.net/man/1/yes"" rel=""noreferrer"">yes</a></code>.</p>
","3804611"
"bash, extract one column of a csv file","63349","","<p>If I have a csv file, is there a quick bash way to print out the contents of only any single column?  It is safe to assume that each row has the same number of columns, but each column's content would have different length.</p>
","<p>You could use awk for this. Change '$2' to the nth column you want.</p>

<pre><code>awk -F ""\""*,\""*"" '{print $2}' textfile.csv
</code></pre>
","19602188"
"BASH array with spaces in elements","63245","","<p>I'm trying to construct an Array in bash-shell of the filenames from my camera:</p>

<pre><code>FILES=(2011-09-04 21.43.02.jpg
2011-09-05 10.23.14.jpg
2011-09-09 12.31.16.jpg
2011-09-11 08.43.12.jpg)
</code></pre>

<p>As you can see, there is a space in the middle of each filename.<br>
I've tried wrapping each name in quotes, and escaping the space with a backslash, neither of which works.<p></p>

<p>When I try to access the array elements, it continues to treat the space as the element-delimiter.</p>

<p>How can I properly capture the filenames with a space inside the name?</p>
","<p>I think the issue might be partly with how you're accessing the elements. If I do a simple <code>for elem in $FILES</code>, I experience the same issue as you. However, if I access the array through its indices, like so, it works if I add the elements either numerically or with escapes:</p>

<pre><code>for ((i = 0; i &lt; ${#FILES[@]}; i++))
do
    echo ""${FILES[$i]}""
done
</code></pre>

<p>Any of these declarations of <code>$FILES</code> should work:</p>

<pre><code>FILES=(2011-09-04\ 21.43.02.jpg
2011-09-05\ 10.23.14.jpg
2011-09-09\ 12.31.16.jpg
2011-09-11\ 08.43.12.jpg)
</code></pre>

<p>or</p>

<pre><code>FILES=(""2011-09-04 21.43.02.jpg""
""2011-09-05 10.23.14.jpg""
""2011-09-09 12.31.16.jpg""
""2011-09-11 08.43.12.jpg"")
</code></pre>

<p>or</p>

<pre><code>FILES[0]=""2011-09-04 21.43.02.jpg""
FILES[1]=""2011-09-05 10.23.14.jpg""
FILES[2]=""2011-09-09 12.31.16.jpg""
FILES[3]=""2011-09-11 08.43.12.jpg""
</code></pre>
","9084479"
"Cannot use mkdir in home directory: permission denied (Linux Lubuntu)","63119","","<p>I am trying to create a directory in my home directory on Linux using the mkdir command, but am getting a 'permission denied' error.  I have recently installed Lubuntu on my laptop, and have the only user profile on the computer.</p>

<p>Here's what happened on my command line:</p>

<pre><code>jdub@Snowball:~$ cd /home
jdub@Snowball:/home$ mkdir bin
mkdir: cannot create directory ‘bin’: Permission denied
jdub@Snowball:/home$ 
</code></pre>

<p>How do I gain access to this folder?  I am trying to write a script and following a tutorial here: <a href=""http://linuxcommand.org/wss0010.php"" rel=""noreferrer"">http://linuxcommand.org/wss0010.php</a></p>

<p>Thanks for your help!</p>
","<p>As @kirbyfan64sos notes in a comment, <strong><code>/home</code> is NOT your home directory</strong> (a.k.a. home folder):</p>

<p>The fact that <code>/home</code> is an <em>absolute, literal</em> path that <em>has no user-specific component</em> provides a clue.</p>

<p>While <code>/home</code> happens to be the <em>parent</em> directory of <em>all</em> user-specific home directories on Linux-based systems, you shouldn't even rely on that, given that this differs across platforms: for instance, the equivalent directory on OS X is <code>/Users</code>.</p>

<p>What <strong>all Unix platforms DO have in common</strong> are the following ways to navigate to / refer to your home directory:</p>

<ul>
<li><strong>Using <code>cd</code> with NO argument</strong> <em>changes to</em> your home dir., i.e., makes your home dir. the <em>working directory</em>.
<ul>
<li>e.g.: <code>cd # changes to home dir; e.g., '/home/jdoe'</code></li>
</ul></li>
</ul>



<ul>
<li><strong><em>Unquoted</em> <code>~</code> by itself / <em>unquoted</em> <code>~/</code> at the start of a path string</strong> represents your home dir. / a path starting at your home dir.; this is referred to as <em>tilde expansion</em> (see <code>man bash</code>)
<ul>
<li>e.g.: <code>echo ~ # outputs, e.g., '/home/jdoe'</code></li>
</ul></li>
</ul>



<ul>
<li><strong><code>$HOME</code> - as part of either unquoted or preferably a <em>double-quoted</em> string - refers to your home dir.</strong> <code>HOME</code> is a predefined, user-specific <em>environment variable</em>:
<ul>
<li>e.g.: <code>cd ""$HOME/tmp"" # changes to your personal folder for temp. files</code></li>
</ul></li>
</ul>



<hr>

<p>Thus, to create the desired folder, you could use:</p>

<pre><code>mkdir ""$HOME/bin""  # same as: mkdir ~/bin
</code></pre>

<p>Note that most locations <em>outside</em> your home dir. require <em>superuser</em> (root user) privileges in order to create files or directories - that's why you ran into the <code>Permission denied</code> error.</p>
","24006189"
"Python vs Bash - In which kind of tasks each one outruns the other performance-wise?","63001","","<p>Obviously Python is more user friendly, a quick search on google shows many results that say that, as Python is byte-compiled is usually faster. I even found <a href=""http://www.murga-linux.com/puppy/viewtopic.php?mode=attach&amp;id=16212&amp;sid=9ec56d74e859eb32ab750e74981181a7"" rel=""noreferrer"">this</a> that claims that you can see an improvement of over 2000% on dictionary-based operations.</p>

<p>What is your experience on this matter? In which kind of task each one is a clear winner?</p>
","<p><strong>Typical mainframe flow...</strong></p>

<pre><code>Input Disk/Tape/User (runtime) --&gt; Job Control Language (JCL) --&gt; Output Disk/Tape/Screen/Printer
                                   |                          ^
                                   v                          |
                                   `--&gt; COBOL Program --------' 
</code></pre>

<p><strong>Typical Linux flow...</strong></p>

<pre><code>Input Disk/SSD/User (runtime) --&gt; sh/bash/ksh/zsh/... ----------&gt; Output Disk/SSD/Screen/Printer
                                   |                          ^
                                   v                          |
                                   `--&gt; Python script --------'
                                   |                          ^
                                   v                          |
                                   `--&gt; awk script -----------'
                                   |                          ^
                                   v                          |
                                   `--&gt; sed script -----------'
                                   |                          ^
                                   v                          |
                                   `--&gt; C/C++ program --------'
                                   |                          ^
                                   v                          |
                                   `--- Java program ---------'
                                   |                          ^
                                   v                          |
                                   :                          :
</code></pre>

<h2>Shells are the glue of Linux</h2>

<p>Linux shells like sh/ksh/<strong>bash</strong>/... provide input/output/flow-control designation facilities much like the old mainframe Job Control Language... but on steroids! They are <a href=""http://en.wikipedia.org/wiki/Turing_completeness"" rel=""nofollow noreferrer"">Turing complete languages</a> in their own right while being optimized to efficiently pass data and control to and from other executing processes written in any language the O/S supports.</p>

<p>Most Linux applications, regardless what language the bulk of the program is written in, depend on shell scripts and <strong>Bash</strong> has become the most common. Clicking an icon on the desktop usually runs a short <strong>Bash</strong> script. That script, either directly or indirectly, knows where all the files needed are and sets variables and command line parameters, finally calling the program. That's a shell's simplest use.</p>

<p>Linux as we know it however would hardly be Linux without the thousands of shell scripts that startup the system, respond to events, control execution priorities and compile, configure and run programs. Many of these are quite large and complex.</p>

<p>Shells provide an infrastructure that lets us use pre-built components that are linked together at run time rather than compile time. Those components are free-standing programs in their own right that can be used alone or in other combinations without recompiling. The syntax for calling them is indistinguishable from that of a <strong>Bash</strong> builtin command, and there are in fact numerous builtin commands for which there is also a stand-alone executable on the system, often having additional options.</p>

<p>There is no language-wide difference between <strong>Python</strong> and <strong>Bash</strong> in performance. It entirely depends on how each is coded and which external tools are called.</p>

<p><em>Any</em> of the well known tools like <strong>awk, sed, grep, bc, dc, tr,</strong> etc. will leave doing those operations in either language in the dust. <strong>Bash</strong> then is preferred for anything without a graphical user interface since it is easier and more efficient to call and pass data back from a tool like those with <strong>Bash</strong> than <strong>Python</strong>.</p>

<h2>Performance</h2>

<p>It depends on which programs the <strong>Bash</strong> shell script calls and their suitability for the subtask they are given whether the overall throughput and/or responsiveness will be better or worse than the equivalent <strong>Python</strong>. To complicate matters <strong>Python</strong>, like most languages, can also call other executables, though it is more cumbersome and thus not as often used.</p>

<h2>User Interface</h2>

<p>One area where <strong>Python</strong> is the clear winner is user interface. That makes it an excellent language for building local or client-server applications as it natively supports GTK graphics and is far more intuitive than <strong>Bash</strong>.</p>

<p><strong>Bash</strong> only understands text. Other tools must be called for a GUI and data passed back from them. A <strong>Python</strong> script is one option. Faster but less flexible options are the binaries like <strong>YAD, Zenity, and GTKDialog</strong>.</p>

<p>While shells like <strong>Bash</strong> work well with GUIs like <a href=""https://sourceforge.net/projects/yad-dialog/"" rel=""nofollow noreferrer"">Yad</a>, <a href=""http://pclosmag.com/html/issues/200910/page21.html"" rel=""nofollow noreferrer"">GtkDialog (embedded XML-like interface to GTK+ functions)</a>, <a href=""http://linuxcommand.org/lc3_adv_dialog.php"" rel=""nofollow noreferrer"">dialog</a>, and <a href=""http://docstore.mik.ua/orelly/unix3/upt/ch36_26.htm"" rel=""nofollow noreferrer"">xmessage</a>, <strong>Python</strong> is usually easier and more capable.</p>

<h2>Summary</h2>

<p>Building with shell scripts is like assembling a computer with off-the-shelf components the way desktop PCs are.</p>

<p>Building with <strong>Python</strong>, <strong>C++</strong> or most any other language is more like building a computer by soldering the chips (libraries) and other electronic parts together the way smartphones are.</p>
","14476979"
"Hide/encrypt password in bash file to stop accidentally seeing it","62997","","<p>Sorry if this has been asked before, I did check but couldn't find anything...</p>

<p>Is there a function in Unix to encrypt <em>and</em> decrypt a password in a batch file so that I can pipe it into some other commands in a bash file?</p>

<p>I realise that doing this provides no real security, it is more to stop someone accidentally seeing the password if they are looking at the script over my shoulder :)</p>

<p>I'm running on Red Hat 5.3.</p>

<p>I have a script which does something similar to this:</p>

<pre><code>serverControl.sh -u admin -p myPassword -c shutdown
</code></pre>

<p>and I would like to do something like this:</p>

<pre><code>password = decrypt(""fgsfkageaivgea"", ""aDecryptionKey"")
serverControl.sh -u admin -p $password -c shutdown
</code></pre>

<p>This doesn't protect the password in any way, but does stop someone from accidentally seeing it over my shoulder.</p>
","<p>OpenSSL provides a <a href=""http://www.manpagez.com/man/1/passwd/"" rel=""noreferrer"">passwd</a> command that can encrypt but doesn't decrypt as it only does hashes.  You could also download something like <a href=""http://my.cubic.ch/users/timtas/aes/"" rel=""noreferrer"">aesutil</a> so you can use a capable and well-known symmetric encryption routine.</p>

<p>For example:</p>

<pre><code>#!/bin/sh    
# using aesutil
SALT=$(mkrand 15) # mkrand generates a 15-character random passwd
MYENCPASS=""i/b9pkcpQAPy7BzH2JlqHVoJc2mNTBM="" # echo ""passwd"" | aes -e -b -B -p $SALT 
MYPASS=$(echo ""$MYENCPASS"" | aes -d -b -p $SALT)

# and usage
serverControl.sh -u admin -p $MYPASS -c shutdown
</code></pre>
","3319056"
"List all files (with full paths) in a directory (and subdirectories), order by access time","62897","","<p>I'd like to construct a Linux command to list all files (with their full paths) within a specific directory (and subdirectories) ordered by access time.</p>

<p>ls can order by access time, but doesn't give the full path. find gives the full path, but the only control you have over the access time is to specify a range with -atime N (accessed at least 24*N hours ago), which isn't what I want.</p>

<p>Is there a way to order by access time and get the full path at once? I could just write a script, but it seems there should be a way to do this with the standard Linux programs.</p>
","<pre><code>find . -type f -exec ls -l {} \; 2&gt; /dev/null | sort -t' ' -k +6,6 -k +7,7
</code></pre>

<p>This will find all files, and sort them by date and then time. You can then use <code>awk</code> or <code>cut</code> to extract the dates and files name from the <code>ls -l</code> output</p>
","9621001"
"List file using ls command in Linux with full path","62687","","<p>Many will found that this is repeating questions but i have gone through all the questions before asked about this topic but none worked for me.</p>

<p>I want to print full path name of the certain file format using ls command so far i found chunk of code that will print all the files in the directory but not full path.</p>

<pre><code>for i in io.popen(""ls /mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7""):lines() do
  if string.find(i,""%.*$"") then 
     print(i) 
  end
end
</code></pre>

<p>this will print out all the file in root diractory and subdiratory.</p>

<p>Output:</p>

<pre><code>  0020111118223425.lvf
  2012
  2012 (2009).mp4
  3 Idiots
  Aashiqui 2
  Agneepath.mkv
  Avatar (2009)
  Captain Phillips (2013)
  Cocktail
</code></pre>

<p>I want output like:</p>

<pre><code>  /mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7/0020111118223425.lvf           [File in Root Directory]
  /mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7/2012/2012.mkv
  /mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7/2012 (2009).mp4                [File in Root Directory]
  /mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7/3 Idiots/3 Idiots.mkv
  /mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7/Aashiqui 2/Aashiqui 2.mkv
  /mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7/Avatar (2009)/Avatar (2009).mkv
  /mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7/Captain Phillips (2013).mkv
  /mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7/Cocktail/Cocktail.mkv
</code></pre>

<p><strong>EDIT:</strong>
I have used this all but its not working with my code in LUA.</p>

<p>when I used with my code it displays wrong directory</p>

<pre><code>for i in io.popen(""ls -d $PWD/* /mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7""):lines() do
    if string.find(i,""%.*$"") then
      print(""/mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7/""..i)
    end
  end
</code></pre>

<p>is not finding files in ""/mnt/mediashare/net/192.168.1.220_STORAGE_1d1b7"" insted its prints the machines root directory files.</p>
","<p>You can use </p>

<pre><code>  ls -lrt -d -1 $PWD/{*,.*}   
</code></pre>

<p>It will also catch hidden files.</p>
","27340401"
"Use sed to replace all backslashes with forward slashes","62680","","<p>I want to be able to use sed to take an input such as:</p>

<pre><code>C:\Windows\Folder\File.txt
</code></pre>

<p>To</p>

<pre><code>C:/Windows/Folder/File.txt
</code></pre>
","<p><code>sed</code> can perform text transformations on input stream from a file or from a pipeline. Example:</p>

<pre><code>echo 'C:\foo\bar.xml' | sed 's/\\/\//g'
</code></pre>

<p>gets</p>

<pre><code>C:/foo/bar.xml
</code></pre>
","6853005"
"Call Python script from bash with argument","62544","","<p>I know that I can run a python script from my bash script using the following:</p>

<pre><code>python python_script.py
</code></pre>

<p>But what about if I wanted to pass a variable / argument to my python script from my bash script. How can I do that?</p>

<p>Basically bash will work out a filename and then python will upload it, but I need to send the filename from bash to python when I call it.</p>
","<p>To execute a python script in a bash script you need to call the same command that you would within a terminal. For instance </p>

<pre><code>&gt; python python_script.py var1 var2
</code></pre>

<p>To access these variables within python you will need</p>

<pre><code>import sys
print sys.argv[0] # prints python_script.py
print sys.argv[1] # prints var1
print sys.argv[2] # prints var2
</code></pre>
","32750302"
"On EC2: sudo node command not found, but node without sudo is ok","62414","","<p>I have just installed nodejs on a new EC2 micro instance.</p>

<p>I installed it normally, ./configure -> make -> sudo make install.</p>

<p><strong>Problem:</strong> When I run ""node"" under ec2-user, it runs perfectly. When I run ""sudo node"", it fails.</p>

<p>I found out that node is in:</p>

<pre><code>[ec2-user@XXXX ~]$ whereis node
node: /usr/local/bin/node /usr/local/lib/node
</code></pre>

<p>and the current path is</p>

<pre><code>[ec2-user@XXXX ~]$ echo $PATH
/usr/local/bin:/bin:/usr/bin:/opt/aws/bin:/home/ec2-user/bin
</code></pre>

<p>but, the sudo path is</p>

<pre><code>[root@ip-10-112-222-32 ~]# echo $PATH
/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin:/root/bin
</code></pre>

<p>then I tried to edit the root PATH to include the paths to node, so ""node"" runs when I'm logged in as root - but it still won't work when I log in as ec2-user and run ""sudo node"".</p>

<p>I need this to install npm properfly. Any idea on how to include the node path while running ""sudo node""?</p>
","<p>Yes, it is a bit annoying but you can fix it with some links:</p>

<pre><code>sudo ln -s /usr/local/bin/node /usr/bin/node
sudo ln -s /usr/local/lib/node /usr/lib/node
sudo ln -s /usr/local/bin/npm /usr/bin/npm
sudo ln -s /usr/local/bin/node-waf /usr/bin/node-waf
</code></pre>

<p>There might be more but that is all I have run across so far. Lack of node-waf will cause some <code>npm</code> installs to fail with a rather cryptic error message.</p>
","5062718"
"mvn command not found in OSX Mavrerick","62253","","<p>Before marking this as duplicate, I went through these posts, but nothing helped.
<a href=""https://stackoverflow.com/questions/13697874/mvn-is-not-recognized-as-an-internal-or-external-command?rq=1"">&#39;mvn&#39; is not recognized as an internal or external command,</a> <a href=""https://stackoverflow.com/questions/1606174/getting-bash-mvn-command-not-found"">Getting -bash: mvn: command not found</a>, <a href=""https://stackoverflow.com/questions/20029934/cant-access-mvn-command-from-command-line"">Can&#39;t access mvn command from command line?</a> </p>

<p>Some are specific to windows and did not help. A couple of them on Mac OS X gave suggestions, that I tried but did not help.</p>

<p>What I tried (this is exactly what <code>Maven</code> suggests):</p>

<blockquote>
  <p>Extract the distribution archive, i.e. apache-maven-3.1.1-bin.tar.gz
  to the directory you wish to install Maven 3.1.1. These instructions
  assume you chose /usr/local/apache-maven. The subdirectory
  apache-maven-3.1.1 will be created from the archive. In a command
  terminal, add the M2_HOME environment variable, e.g. export
  M2_HOME=/usr/local/apache-maven/apache-maven-3.1.1. Add the M2
  environment variable, e.g. export M2=$M2_HOME/bin. Optional: Add the
  MAVEN_OPTS environment variable to specify JVM properties, e.g. export
  MAVEN_OPTS=""-Xms256m -Xmx512m"". This environment variable can be used
  to supply extra options to Maven. Add M2 environment variable to your
  path, e.g. export PATH=$M2:$PATH. Make sure that JAVA_HOME is set to
  the location of your JDK, e.g. export JAVA_HOME=/usr/java/jdk1.5.0_02
  and that $JAVA_HOME/bin is in your PATH environment variable. Run mvn
  --version to verify that it is correctly installed.</p>
</blockquote>

<p>I see that on the <code>terminal</code> that I used for installation, it works fine. I do not have this issue. but when I tried on a new <code>terminal</code>, I get <code>command not found</code>.</p>

<p>I also added <code>export PATH=$M2</code> to my <code>.bashrc</code>, I did <code>source</code> and then restarted the terminal, still it did not help.</p>

<p>can someone suggest how to make it available in all sessions of terminal?</p>

<p>Thanks</p>
","<p>Try following these if these might help:</p>

<p>Since your installation works on the terminal you installed, all the <code>exports</code> you did, work on the <code>current bash and its child process</code>. but is not spawned to new <code>terminals</code>.</p>

<p><code>env</code> variables are lost if the session is closed; using <code>.bash_profile</code>, you can make it available in all sessions, since when a <code>bash</code> session starts, it 'runs' its <code>.bashrc and .bash_profile</code></p>

<p>Now follow these steps and see if it helps:</p>

<ol>
<li><p>type <code>env | grep M2_HOME</code> on the terminal that is working. This should give something like</p>

<p>M2_HOME=/usr/local/apache-maven/apache-maven-3.1.1</p></li>
<li><p>typing <code>env | grep JAVA_HOME</code> should give like this:</p>

<p>JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home</p></li>
</ol>

<p>Now you have the PATH for <code>M2_HOME</code> and <code>JAVA_HOME</code>.</p>

<p>If you just do <code>ls /usr/local/apache-maven/apache-maven-3.1.1/bin</code>, you will see <code>mvn</code> binary there.
All you have to do now is to point to this location everytime using PATH. since <code>bash</code> searches in all the directory path mentioned in <code>PATH</code>, it will find <code>mvn</code>.</p>

<ol>
<li><p>now open <code>.bash_profile</code>, if you dont have one just create one</p>

<p>vi ~/.bash_profile</p></li>
</ol>

<p>Add the following:</p>

<pre><code>#set JAVA_HOME
JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_40.jdk/Contents/Home
export JAVA_HOME


M2_HOME=/usr/local/apache-maven/apache-maven-3.1.1
export M2_HOME

PATH=$PATH:$JAVA_HOME/bin:$M2_HOME/bin
export PATH
</code></pre>

<ol>
<li><p>save the file and type <code>source ~/.bash_profile</code>. This steps executes the commands in the <code>.bash_profile</code> file and you are good to go now.</p></li>
<li><p>open a new terminal and type <code>mvn</code> that should work.</p></li>
</ol>
","21030998"
"recursively use scp but excluding some folders","62096","","<p>Assume there are some folders with these structures</p>

<pre><code>/bench1/1cpu/p_0/image/
/bench1/1cpu/p_0/fl_1/
/bench1/1cpu/p_0/fl_1/
/bench1/1cpu/p_0/fl_1/
/bench1/1cpu/p_0/fl_1/
/bench1/1cpu/p_1/image/
/bench1/1cpu/p_1/fl_1/
/bench1/1cpu/p_1/fl_1/
/bench1/1cpu/p_1/fl_1/
/bench1/1cpu/p_1/fl_1/
/bench1/2cpu/p_0/image/
/bench1/2cpu/p_0/fl_1/
/bench1/2cpu/p_0/fl_1/
/bench1/2cpu/p_0/fl_1/
/bench1/2cpu/p_0/fl_1/
/bench1/2cpu/p_1/image/
/bench1/2cpu/p_1/fl_1/
/bench1/2cpu/p_1/fl_1/
/bench1/2cpu/p_1/fl_1/
/bench1/2cpu/p_1/fl_1/
....
</code></pre>

<p>What I want to do is to <code>scp</code> the following folders</p>

<pre><code>/bench1/1cpu/p_0/image/
/bench1/1cpu/p_1/image/
/bench1/2cpu/p_0/image/
/bench1/2cpu/p_1/image/
</code></pre>

<p>As you can see I want to recursively use <code>scp</code> but excluding all folders that name ""fl_X"". It seems that scp has not such option.</p>

<p><strong>UPDATE</strong>
scp has not such feature. Instead I use the following command</p>

<pre><code> rsync -av --exclude 'fl_*' user@server:/my/dir
</code></pre>

<p>But it doesn't work. It only transfers the list of folders!! something like <code>ls -R</code></p>
","<p>Although <code>scp</code> supports recursive directory copying with the <code>-r</code> option, it does not support filtering of the files. There are several ways to accomplish your task, but I would probably rely on <code>find</code>, <code>xargs</code>, <code>tar</code>, and <code>ssh</code> instead of <code>scp</code>.</p>

<pre><code>find . -type d -wholename '*bench*/image' \
| xargs tar cf - \
| ssh user@remote tar xf - -C /my/dir
</code></pre>

<p>The <code>rsync</code> solution can be made to work, but you are missing some arguments. <code>rsync</code> also needs the <code>r</code> switch to recurse into subdirectories. Also, if you want the same security of <code>scp</code>, you need to do the transfer under <code>ssh</code>. Something like:</p>

<pre><code>rsync -avr -e ""ssh -l user"" --exclude 'fl_*' ./bench* remote:/my/dir
</code></pre>
","15124675"
"Mac OS X 10.9 - setting permanent environment variables","61961","","<p>How do I set a permanent environment variable (i.e. one that does not need exporting every time I start a new Terminal session) in Mac OS X 10.9? I've found a number of answers about modifying my <code>.bash_profile</code> and <code>.profile</code>, however neither of these options seem to work as permanent solutions - only temporary. The variable I'm trying to set is <code>MULE_HOME</code>. I have the following line in my bash profile:</p>

<pre><code>export MULE_HOME=$(/opt/mule-standalone-3.4.0)
</code></pre>

<p>However, when I start Terminal I get the following line (not sure if this is normal behaviour?):</p>

<pre><code>-bash: /opt/mule-standalone-3.4.0: is a directory
</code></pre>

<p>And running a simple <code>env</code> command returns the following:</p>

<pre><code>TERM_PROGRAM=Apple_Terminal
SHELL=/bin/bash
TERM=xterm-256color
TMPDIR=/var/folders/fc/68bqp4jj411gynj5qvwhq6z1shs1fy/T/
Apple_PubSub_Socket_Render=/tmp/launch-xKtkql/Render
TERM_PROGRAM_VERSION=326
TERM_SESSION_ID=E97BFE4B-AF85-4933-B252-0883CC085349
USER=dan
SSH_AUTH_SOCK=/tmp/launch-rEmTWW/Listeners
__CF_USER_TEXT_ENCODING=0x730C85DE:0:0
PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
__CHECKFIX1436934=1
PWD=/Users/dan
JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
LANG=en_GB.UTF-8
MULE_HOME=
SHLVL=1
HOME=/Users/dan
LOGNAME=danwiseman
_=/usr/bin/env
</code></pre>

<p>In order to get around this I'm currently having to type <code>export MULE_HOME=/opt/mule-standalone-3.4.0</code> every time I start a new Terminal session which, whilst not strenuous, is a little inconvenient. What am I doing wrong here that is causing the variable to only be set temporarily? Thanks in advance.</p>
","<p>Drop the <code>$(...)</code> bit, which would attempt to execute the command within the brackets and set <code>$MULE_HOME</code> to whatever it produces.  In your case <code>/opt/mule-standalone-3.4.0</code> is not an executable, hence the error you are getting.</p>

<pre><code>export MULE_HOME=/opt/mule-standalone-3.4.0
</code></pre>

<p><strike>and use <code>~/.bashrc</code> not <code>~/.bash_profile</code>.</strike></p>

<p>EDIT: It seems opinion is that you should set environment variables in your <code>~/.bash_profile</code> script, and not <code>~/.bashrc</code> script.</p>
","22502848"
"Longest line in a file","61936","","<p>I'm looking for a simple way to find the length of the longest line in a file.  Ideally, it would be a simple bash shell command instead of a script.</p>
","<p>Using wc (GNU coreutils) 7.4:</p>

<pre><code>wc -L filename
</code></pre>

<p>gives:</p>

<pre><code>101 filename
</code></pre>
","3191708"
"What command means ""do nothing"" in a conditional in BASH?","61852","","<p>Sometimes when making conditionals, I need the code to do nothing, e.g., here, I want BASH to do nothing when <code>$a</code> is greater than ""10"", print ""1"" if <code>$a</code> is less than ""5"", otherwise, print ""2"":</p>

<pre><code>if [ ""$a"" -ge 10 ]
then
elif [ ""$a"" -le 5 ]
then
    echo ""1""
else
    echo ""2""
fi
</code></pre>

<p>This makes an error though. Is there a command which will do nothing and which will not slow down my script?</p>
","<p>The no-op command in shell is <code>:</code> (colon).</p>

<pre><code>if [ ""$a"" -ge 10 ]
then
    :
elif [ ""$a"" -le 5 ]
then
    echo ""1""
else
    echo ""2""
fi
</code></pre>

<p>From the <a href=""https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#Bourne-Shell-Builtins"" rel=""noreferrer"">bash manual</a>:</p>

<blockquote>
  <p><code>:</code> (a colon)<br>
  Do nothing beyond expanding arguments and performing redirections. The return status is zero.</p>
</blockquote>
","17583599"
"How to check the first character in a string in unix","61810","","<p>I'm writing a script in unix where I have to check whether the first character in a string is ""/"" and if it is, branch.</p>

<p>for example I have a string</p>

<pre><code>/some/directory/file
</code></pre>

<p>I want this to return 1</p>

<p>and</p>

<pre><code>server@10.200.200.20:/some/directory/file
</code></pre>

<p>this to return 0</p>

<p>how can I proceed to do this?</p>
","<p>Many ways to do this. You could use wildcards in double brackets:</p>

<pre><code>str=""/some/directory/file""
if [[ $str == /* ]]; then echo 1; else echo 0; fi
</code></pre>

<p>You can use substring expansion:</p>

<pre><code>if [[ ${str:0:1} == ""/"" ]] ; then echo 1; else echo 0; fi
</code></pre>

<p>Or a regex:</p>

<pre><code>if [[ $str =~ ^/ ]]; then echo 1; else echo 0; fi
</code></pre>
","18488371"
"How to write a bash script to set global environment variable?","61658","","<p>Recently I wrote a script which sets an environment variable, take a look:</p>

<pre><code>#!/bin/bash

echo ""Pass a path:""
read path
echo $path

defaultPath=/home/$(whoami)/Desktop

if [ -n ""$path"" ]; then
    export my_var=$path
else
    echo ""Path is empty! Exporting default path ...""
    export my_var=$defaultPath
fi

echo ""Exported path: $my_var""
</code></pre>

<p>It works just great but the problem is that <code>my_var</code> is  available just locally, I mean in console window where I ran the script. </p>

<p>How to write a script which allow me to export <strong>global</strong> environment variable which can be seen everywhere?</p>
","<p>Each and every shell has its own environment. There's no <em>Universal</em> environment that will magically appear in all console windows. An environment variable created in one shell cannot be accessed in another shell.</p>

<p>It's even more restrictive. If one shell spawns a subshell, that subshell has access to the parent's environment variables, but if that subshell creates an environment variable, it's not accessible in the parent shell.</p>

<p>If all of your shells need access to the same set of variables, you can create a <em>startup</em> file that will set them for you. This is done in BASH via the <code>$HOME/.bash_profile</code> and <code>$HOME/.bashrc</code> files and through <code>$HOME/.profile</code> if <code>$HOME/.bash_profile</code> doesn't exist). Other shells have their own set of startup files. One is used for logins, and one is used for shells spawned without logins. See the manpage to learn exactly what startup scripts are used and what order they're executed).</p>

<p>You can try using shared memory, but I believe that only works while processes are running, so even if you figured out a way to set a piece of shared memory, it would go away as soon as that command is finished. (I've rarely used shared memory except for named pipes). Otherwise, there's really no way to set an environment variable in one shell and have another shell automatically pick it up. You can try using <a href=""http://www.linuxjournal.com/article/2156"">named pipes</a> or writing that environment variable to a file for other shells to pick it up.</p>

<p>Imagine the problems that could happen if someone could change the environment of one shell without my knowledge.</p>
","12353309"
"How to use regex in file find","61487","","<p>I was trying to find all files dated and all files 3 days or more ago.</p>

<pre><code>find /home/test -name 'test.log.\d{4}-d{2}-d{2}.zip' -mtime 3
</code></pre>

<p>It is not listing anything. What is wrong with it?</p>
","<pre><code>find /home/test -regextype posix-extended -regex '^.*test\.log\.[0-9]{4}-[0-9]{2}-[0-9]{2}\.zip' -mtime +3
</code></pre>

<ol>
<li><code>-name</code> uses <em>globular</em> expressions,
aka wildcards. What you want is
<code>-regex</code></li>
<li>To use intervals as you intend, you
need to tell <code>find</code> to use <em>Extended
Regular Expressions</em> via the
<code>-regextype posix-extended</code> flag</li>
<li>You need to escape out the periods
because in regex a period has the
special meaning of <em>any single
character</em>.  What you want is a
literal period denoted by <code>\.</code></li>
<li>To match only those files that are
<em>greater</em> than 3 days old, you need to prefix your number with a <code>+</code> as
in <code>-mtime +3</code>.</li>
</ol>

<h3>Proof of Concept</h3>

<pre><code>$ find . -regextype posix-extended -regex '^.*test\.log\.[0-9]{4}-[0-9]{2}-[0-9]{2}\.zip'
./test.log.1234-12-12.zip
</code></pre>
","5249797"
"Pass a password to ssh in pure bash","61456","","<p>I want to pass a password to <code>ssh</code> using a bash script (Yes, I know that there are ssh keys that I could use, but this is not what I intend).</p>

<p>I found some solutions that were using <code>expect</code> but since it is not a standard bash tool I am wondering if I can do this using pipes.</p>

<p>Can someone explain to me, why exactly something like this:</p>

<pre><code>echo ""password\n"" | ssh somehost.com
</code></pre>

<p>or</p>

<pre><code>ssh somehost.com &lt;(echo ""password\n"")
</code></pre>

<p>doesn't work? Is there any possibility to make it work? Maybe executing <code>ssh</code> as a different process, obtaining its PID and then sending a string directly to it?</p>
","<p>Since there were no exact answers to my question, I made some investigation why my code doesn't work when there are other solutions that works, and decided to post what I found to complete the subject.<br>
As it turns out:</p>

<blockquote>
  <p>""ssh uses direct TTY access to make sure that the password is indeed
  issued by an interactive keyboard user."" <a href=""http://linux.die.net/man/1/sshpass"">sshpass manpage</a></p>
</blockquote>

<p>which answers the question, why the pipes don't work in this case. The obvious solution was to create conditions so that <code>ssh</code> ""thought"" that it is run in the regular terminal and since it may be accomplished by simple <code>posix</code> functions, it is beyond what simple <code>bash</code> offers. </p>
","24465355"
"Using match to find substrings in strings with only bash","61401","","<p>Although I am almost sure this has been covered, I can't seem to find anything specific to this. As I continue my journey on learning bash I keep finding parts where I am baffled as to why things happen the way they do. </p>

<p>Searching and replacing or just matching sub-strings in strings is most likely one of the first thing you do when writing scripts. But, trying to stick to one single language or set of tools is difficult to do in bash, as you are able to solve most problem in multiple ways. I am doing my best to stay as low level as possible with bash. I have run into a snag that I need someone to explain to me. </p>

<p>Doing sub-string a search in bash with match gives me different results depending on the regular expression I use, and I am not sure why. </p>

<pre><code>#!/bin/bash
Stext=""Hallo World""
echo `expr ""$Stext"" : '^\(.[a-z]*\)'` # Hallo
echo `expr ""$Stext"" : '.*World'`      # 11
</code></pre>

<p>Although both search for a word, <em>I think</em>, both don't return what they find. Why? </p>
","<p>Both expressions are equivalent, the difference is the regular expression you use:</p>

<pre><code>$ echo `expr ""$Stext"" : '^\(.[a-z]*\)'`
Hallo
$ echo `expr ""$Stext"" : '^.[a-z]*'`
5
$ echo `expr ""$Stext"" : '\(.*World\)'`
Hallo World
$ echo `expr ""$Stext"" : '.*World'`
11
</code></pre>

<p>As you can see, parentheses is what makes the difference to either return the length of the match or the match itself.</p>

<p>You can find more examples in <a href=""http://tldp.org/LDP/abs/html/string-manipulation.html"" rel=""noreferrer"">Chapter 10</a> of the Advanced Bash-Scripting Guide.</p>
","9597806"
"Bash: Create a file if it does not exist, otherwise check to see if it is writeable","61399","","<p>I have a bash program that will write to an output file.  This file may or may not exist, but the script must check permissions and fail early.  I can't find an elegant way to make this happen.  Here's what I have tried.</p>

<pre>
set +e
touch $file
set -e

if [ $? -ne 0 ]; then exit;fi
</pre>

<p>I keep <code>set -e</code> on for this script so it fails if there is ever an error on any line.  Is there an easier way to do the above script?</p>
","<p>Rather than check <code>$?</code> on a different line, check the return value immediately like this:</p>

<pre><code>touch file || exit
</code></pre>

<p>As long as your <code>umask</code> doesn't restrict the write bit from being set, you can just rely on the return value of <code>touch</code></p>
","4511441"
"How to perform a for loop on each character in a string in Bash?","61387","","<p>I have a variable like this:</p>

<pre><code>words=""这是一条狗。""
</code></pre>

<p>I want to make a for loop on each of the characters, one at a time, e.g. first <code>character=""这""</code>, then <code>character=""是""</code>, <code>character=""一""</code>, etc.</p>

<p>The only way I know is to output each character to separate line in a file, then use <code>while read line</code>, but this seems very inefficient.</p>

<ul>
<li>How can I process each character in a string through a for loop? </li>
</ul>
","<p>With <code>sed</code> on <code>dash</code> shell of <code>LANG=en_US.UTF-8</code>, I got the followings working right:</p>

<pre><code>$ echo ""你好嗎 新年好。全型句號"" | sed -e 's/\(.\)/\1\n/g'
你
好
嗎

新
年
好
。
全
型
句
號
</code></pre>

<p>and</p>

<pre><code>$ echo ""Hello world"" | sed -e 's/\(.\)/\1\n/g'
H
e
l
l
o

w
o
r
l
d
</code></pre>

<p>Thus, output can be looped with <code>while read ... ; do ... ; done</code></p>

<p>edited for sample text translate into English:</p>

<pre><code>""你好嗎 新年好。全型句號"" is zh_TW.UTF-8 encoding for:
""你好嗎""     = How are you[ doing]
"" ""         = a normal space character
""新年好""     = Happy new year
""。全型空格"" = a double-byte-sized full-stop followed by text description
</code></pre>
","10572879"
"How to make an ""alias"" for a long path?","61358","","<p>I tried to make an ""alias"" for a path that I use often while shell scripting. I tried something, but it failed: </p>

<pre><code>myFold=""~/Files/Scripts/Main""
cd myFold

bash: cd: myFold: No such file or directory
</code></pre>

<p>How do I make it work ?<br>
However, <code>cd ~/Files/Scripts/Main</code>works.</p>
","<p>Since it's an environment variable (alias has a different definition in <code>bash</code>), you need to evaluate it with something like:</p>

<pre><code>cd ""${myFold}""
</code></pre>

<p>or:</p>

<pre><code>cp ""${myFold}/someFile"" /somewhere/else
</code></pre>

<p>But I actually find it easier, if you just want the ease of switching into that directory, to create a <em>real</em> alias (in one of the <code>bash</code> startup files like <code>.bashrc</code>), so I can save keystrokes:</p>

<pre><code>alias myfold='cd ~/Files/Scripts/Main'
</code></pre>

<p>Then you can just use (without the <code>cd</code>):</p>

<pre><code>myfold
</code></pre>

<p>To get rid of the definition, you use <code>unalias</code>. The following transcript shows <em>all</em> of these in action:</p>

<pre><code>pax&gt; cd ; pwd ; ls -ald footy
/home/pax
drwxr-xr-x 2 pax pax 4096 Jul 28 11:00 footy

pax&gt; footydir=/home/pax/footy ; cd ""$footydir"" ; pwd
/home/pax/footy

pax&gt; cd ; pwd
/home/pax

pax&gt; alias footy='cd /home/pax/footy' ; footy ; pwd
/home/pax/footy

pax&gt; unalias footy ; footy
bash: footy: command not found
</code></pre>
","17958682"
"grep: group capturing","61303","","<p>I have following string:</p>

<pre><code>{""_id"":""scheme_version"",""_rev"":""4-cad1842a7646b4497066e09c3788e724"",""scheme_version"":1234}
</code></pre>

<p>and I need to get value of ""scheme version"", which is 1234 in this example.</p>

<p>I have tried </p>

<pre><code>grep -Eo ""\""scheme_version\"":(\w*)""
</code></pre>

<p>however it returns </p>

<pre><code>""scheme_version"":1234
</code></pre>

<p>How can I make it? I know I can add <strong>sed</strong> call, but I would prefer to do it with single grep.</p>
","<p>This might work for you:</p>

<pre><code>echo '{""_id"":""scheme_version"",""_rev"":""4-cad1842a7646b4497066e09c3788e724"",""scheme_version"":1234}' |
sed -n 's/.*""scheme_version"":\([^}]*\)}/\1/p'
1234
</code></pre>

<p>Sorry it's not <strong>grep</strong>, so disregard this solution if you like.</p>

<p>Or stick with grep and add:</p>

<pre><code>grep -Eo ""\""scheme_version\"":(\w*)""| cut -d: -f2
</code></pre>
","8603247"
"Bash Templating: How to build configuration files from templates with Bash?","61297","","<p>I'm writing a script to automate creating configuration files for Apache and PHP for my own webserver. I don't want to use any GUIs like CPanel or ISPConfig.</p>

<p>I have some templates of Apache and PHP configuration files. Bash script needs to read templates, make variable substitution and output parsed templates into some folder. What is the best way to do that? I can think of several ways. Which one is the best or may be there are some better ways to do that? I want to do that in pure Bash (it's easy in PHP for example)</p>

<p>1) <a href=""https://stackoverflow.com/questions/415677"">How to replace ${} placeholders in a text file?</a></p>

<p>template.txt:</p>

<pre><code>the number is ${i}
the word is ${word}
</code></pre>

<p>script.sh:</p>

<pre><code>#!/bin/sh

#set variables
i=1
word=""dog""
#read in template one line at the time, and replace variables
#(more natural (and efficient) way, thanks to Jonathan Leffler)
while read line
do
    eval echo ""$line""
done &lt; ""./template.txt""
</code></pre>

<p>BTW, how do I redirect output to external file here? Do I need to escape something if variables contain, say, quotes?</p>

<p>2) Using cat &amp; sed for replacing each variable with its value:</p>

<p>Given template.txt:</p>

<pre><code>The number is ${i}
The word is ${word}
</code></pre>

<p>Command:</p>

<pre><code>cat template.txt | sed -e ""s/\${i}/1/"" | sed -e ""s/\${word}/dog/""
</code></pre>

<p>Seems bad to me because of the need to escape many different symbols and with many variables the line will be tooooo long.</p>

<p>Can you think of some other elegant and safe solution?</p>
","<p>You can use this:</p>

<pre><code>perl -p -i -e 's/\$\{([^}]+)\}/defined $ENV{$1} ? $ENV{$1} : $&amp;/eg' &lt; template.txt
</code></pre>

<p>to replace all <code>${...}</code> strings with corresponding enviroment variables (do not forget to export them before running this script).</p>

<p>For pure bash this should work (assuming that variables do not contain ${...} strings):</p>

<pre><code>#!/bin/bash
while read -r line ; do
    while [[ ""$line"" =~ (\$\{[a-zA-Z_][a-zA-Z_0-9]*\}) ]] ; do
        LHS=${BASH_REMATCH[1]}
        RHS=""$(eval echo ""\""$LHS\"""")""
        line=${line//$LHS/$RHS}
    done
    echo ""$line""
done
</code></pre>

<p>. Solution that does not hang if RHS references some variable that references itself:</p>

<pre>
#!/bin/bash
line=""$(cat; echo -n a)""
end_offset=${#line}
while [[ ""${line:0:$end_offset}"" =~ (.*)(\$\{([a-zA-Z_][a-zA-Z_0-9]*)\})(.*) ]] ; do
    PRE=""${BASH_REMATCH[1]}""
    POST=""${BASH_REMATCH[4]}${line:$end_offset:${#line}}""
    VARNAME=""${BASH_REMATCH[3]}""
    eval 'VARVAL=""$'$VARNAME'""'
    line=""$PRE$VARVAL$POST""
    end_offset=${#PRE}
done
echo -n ""${line:0:-1}""
</pre>

<p><strong>WARNING</strong>: I do not know a way to correctly handle input with NULs in bash or preserve the amount of trailing newlines. Last variant is presented as it is because shells “love” binary input:</p>

<ol>
<li><code>read</code> will interpret backslashes.</li>
<li><code>read -r</code> will not interpret backslashes, but still will drop the last line if it does not end with a newline.</li>
<li><code>""$(…)""</code> will strip as many trailing newlines as there are present, so I end <code>…</code> with <code>; echo -n a</code> and use <code>echo -n ""${line:0:-1}""</code>: this drops the last character (which is <code>a</code>) and preserves as many trailing newlines as there was in the input (including no).</li>
</ol>
","2916159"
"How to get the PID of a process by giving the process name in Mac OS X ?","61281","","<p>I am writing a script to monitor the CPU and MEM of any given process. For that i need to send in the name of the process to be monitored as a commandline argument. For example. </p>

<pre><code>./monitorscript &lt;pname&gt;
</code></pre>

<p>I need to get the pid of the process in the script so that i can use a <code>ps -p &lt;pid&gt;</code> inside. </p>

<p>How do i get the pid of a process given its process name? </p>

<p>I understand that there might be multiple processes in the same name. I just want to get the first process out of that list. </p>
","<p>The answer above was mostly correct, just needed some tweaking for the different parameters in Mac OSX.</p>

<pre><code>ps -A | grep -m1 firefox | awk '{print $1}'
</code></pre>
","11547409"
"Sending mail from a Bash shell script","61187","","<p>I am writing a <a href=""http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29"" rel=""noreferrer"">Bash</a> shell script for Mac that sends an email notification by opening an automator application that sends email out with the default mail account in Mail.app. The automator application also attaches a text file that the script has written to. The problems with this solution are</p>

<ol>
<li>It is visible in the GUI when sending</li>
<li>It steals focus if Mail is not the current application</li>
<li>It is dependent on Mail.app's account setup being valid in the future</li>
</ol>

<p>I figure to get around those shortcomings I should send the mail directly from the script by entering <a href=""http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol"" rel=""noreferrer"">SMTP</a> settings, address to send to, etc. directly in the script. The catch is I would like to deploy this script on multiple computers (10.5 and 10.6) without enabling <a href=""http://en.wikipedia.org/wiki/Postfix_%28software%29"" rel=""noreferrer"">Postfix</a> on the computer. Is it possible to do this in the script so it will run on a base Mac&nbsp;OS&nbsp;X install of 10.5. and 10.6?</p>

<p>Update: I've found the <code>-bs</code> option for Sendmail which seems to be what I need, but I'm at a loss of how to specify settings.</p>

<p>Also, to clarify, the reason I'd like to specify SMTP settings is that mails from localhost on port 25 sent out via Postfix would be blocked by most corporate firewalls, but if I specify the server and an alternate port I won't run into that problem.</p>
","<p>Since Mac&nbsp;OS&nbsp;X includes Python, consider using a Python script instead of a Bash script. I haven't tested the sending portion, but it follows the <a href=""http://docs.python.org/library/smtplib.html#smtp-example"" rel=""noreferrer"">standard example</a>.</p>

<h3>Python script</h3>

<pre><code># Settings

SMTP_SERVER = 'mail.myisp.com'
SMTP_PORT = 25
SMTP_USERNAME = 'myusername'
SMTP_PASSWORD = '$uper$ecret'
SMTP_FROM = 'sender@example.com'
SMTP_TO = 'recipient@example.com'

TEXT_FILENAME = '/script/output/my_attachment.txt'
MESSAGE = """"""This is the message
to be sent to the client.
""""""

# Now construct the message
import smtplib, email
from email import encoders
import os

msg = email.MIMEMultipart.MIMEMultipart()
body = email.MIMEText.MIMEText(MESSAGE)
attachment = email.MIMEBase.MIMEBase('text', 'plain')
attachment.set_payload(open(TEXT_FILENAME).read())
attachment.add_header('Content-Disposition', 'attachment', filename=os.path.basename(TEXT_FILENAME))
encoders.encode_base64(attachment)
msg.attach(body)
msg.attach(attachment)
msg.add_header('From', SMTP_FROM)
msg.add_header('To', SMTP_TO)

# Now send the message
mailer = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
# EDIT: mailer is already connected
# mailer.connect()
mailer.login(SMTP_USERNAME, SMTP_PASSWORD)
mailer.sendmail(SMTP_FROM, [SMTP_TO], msg.as_string())
mailer.close()
</code></pre>

<p>I hope this helps.</p>
","1940937"
"How to create User/Database in script for Docker Postgres","61171","","<p>I have been trying to set up a container for a development postgres instance by creating a custom user &amp; database. I am using the <a href=""https://registry.hub.docker.com/_/postgres/"" rel=""noreferrer"">official postgres docker image</a>. In the documentation it instructs you to insert a bash script inside of the <code>/docker-entrypoint-initdb.d/</code> folder to set up the database with any custom parameters.</p>

<h2>My bash script: make_db.sh</h2>

<pre><code>su postgres -c ""createuser -w -d -r -s docker""
su postgres -c ""createdb -O docker docker""
</code></pre>

<h2>Dockerfile</h2>

<pre><code>FROM library/postgres

RUN [""mkdir"", ""/docker-entrypoint-initdb.d""]
ADD make_db.sh /docker-entrypoint-initdb.d/
</code></pre>

<p>The error I get from the <code>docker logs -f db</code> (db is my container name) is:</p>

<blockquote>
  <p>createuser: could not connect to database postgres: could not connect to server: No such file or directory</p>
</blockquote>

<p>It seems that the commands inside of the <code>/docker-entrypoint-initdb.d/</code> folder are being executed before postgres is started. My question is, how do I set up a user/database programmatically using the official postgres container? Is there any way to do this with a script?</p>
","<h2>EDIT - since Jul 23, 2015</h2>

<p>The <a href=""https://hub.docker.com/_/postgres/"" rel=""noreferrer"">official postgres docker image</a> will run <code>.sql</code> scripts found in the <code>/docker-entrypoint-initdb.d/</code> folder. </p>

<p>So all you need is to create the following sql script: </p>

<p><em>init.sql</em></p>

<pre><code>CREATE USER docker;
CREATE DATABASE docker;
GRANT ALL PRIVILEGES ON DATABASE docker TO docker;
</code></pre>

<p>and add it in you Dockerfile:</p>

<p><em>Dockerfile</em></p>

<pre><code>FROM library/postgres
ADD init.sql /docker-entrypoint-initdb.d/
</code></pre>

<hr>

<p>But since July 8th, 2015, <strong>if all you need is to create a user and database</strong>, it is easier to just make use to the <code>POSTGRES_USER</code>, <code>POSTGRES_PASSWORD</code> and <code>POSTGRES_DB</code> environment variables:</p>

<pre><code>docker run -e POSTGRES_USER=docker -e POSTGRES_PASSWORD=docker -e POSTGRES_DB=docker library/postgres
</code></pre>

<p>or with a Dockerfile:</p>

<pre><code>FROM library/postgres
ENV POSTGRES_USER docker
ENV POSTGRES_PASSWORD docker
ENV POSTGRES_DB docker
</code></pre>

<hr>

<h2>for images older than Jul 23, 2015</h2>

<p>From <a href=""https://registry.hub.docker.com/_/postgres/"" rel=""noreferrer"">the documentation of the postgres Docker image</a>, it is said that</p>

<blockquote>
  <p>[...] it will source any *.sh script found in that directory [<code>/docker-entrypoint-initdb.d</code>] to do further initialization before starting the service</p>
</blockquote>

<p>What's important here is <em>""before starting the service""</em>. This means your script <em>make_db.sh</em> will be executed before the postgres service would be started, hence the error message <em>""could not connect to database postgres""</em>.</p>

<p>After that there is another useful piece of information:</p>

<blockquote>
  <p>If you need to execute SQL commands as part of your initialization, the use of Postgres single user mode is highly recommended.</p>
</blockquote>

<p>Agreed this can be a bit mysterious at the first look. What it says is that your initialization script should start the postgres service in single mode before doing its actions. So you could change your <em>make_db.ksh</em> script as follows and it should get you closer to what you want:</p>

<p><strong>NOTE</strong>, this has changed recently <a href=""https://github.com/docker-library/postgres/pull/75/commits"" rel=""noreferrer"">in the following commit</a>.  This will work with the latest change:</p>

<pre class=""lang-sh prettyprint-override""><code>export PGUSER=postgres
psql &lt;&lt;- EOSQL
    CREATE USER docker;
    CREATE DATABASE docker;
    GRANT ALL PRIVILEGES ON DATABASE docker TO docker;
EOSQL
</code></pre>

<p>Previously, the use of <code>--single</code> mode was required:</p>

<pre class=""lang-sh prettyprint-override""><code>gosu postgres postgres --single &lt;&lt;- EOSQL
    CREATE USER docker;
    CREATE DATABASE docker;
    GRANT ALL PRIVILEGES ON DATABASE docker TO docker;
EOSQL
</code></pre>
","26599273"
"Bash test for empty string with X""""","60815","","<p>I know I can test for an empty string in Bash with <code>-z</code> like so:</p>

<pre><code>if [[ -z $myvar ]]; then do_stuff; fi
</code></pre>

<p>but I see a lot of code written like:</p>

<pre><code>if [[ X"""" = X""$myvar"" ]]; then do_stuff; fi
</code></pre>

<p>Is that method more portable? Is it just historical cruft from before the days of <code>-z</code>? Is it for POSIX shells (even though I've seen it used in scripts targeting <code>bash</code>)? Ready for my history/portability lesson.</p>

<hr>

<p>The same question was asked on Server Fault as <a href=""https://serverfault.com/questions/7503/"">How to determine if a bash variable is empty?</a> but no one offered an explanation as to <em>why</em> you see code with the <code>X""""</code> stuff.</p>
","<p>Fundamentally, because in times now long past, the behaviour of <code>test</code> was more complex and not uniformly defined across different systems (so portable code had to be written carefully to avoid non-portable constructs).</p>

<p>In particular, before <code>test</code> was a shell built-in, it was a separate executable (and note that MacOS X still has <code>/bin/test</code> and <code>/bin/[</code> as executables).  When that was the case, writing:</p>

<pre><code>if [ -z $variable ]
</code></pre>

<p>when <code>$variable</code> was empty would invoke the test program via its alias <code>[</code> with 3 arguments:</p>

<pre><code>argv[0] = ""[""
argv[1] = ""-z""
argv[2] = ""]""
</code></pre>

<p>because the variable was empty so there was nothing to expand.  So, the safe way of writing the code was:</p>

<pre><code>if [ -z ""$variable"" ]
</code></pre>

<p>This works reliably, passing 4 arguments to the <code>test</code> executable.  Granted, the test program has been a built-in to most shells for decades, but old equipment dies hard, and so do good practices learned even longer ago.</p>

<p>The other problem resolved by the X prefix was what happened if variables include leading dashes, or contain equals or other comparators.  Consider (a not desparately good example):</p>

<pre><code>x=""-z""
if [ $x -eq 0 ]
</code></pre>

<p>Is that an empty string test with a stray (erroneous) argument, or a numeric equality test with a non-numeric first argument?  Different systems provided different answers before POSIX standardized the behaviour, circa 1990.  So, the safe way of dealing with this was:</p>

<pre><code>if [ ""X$x"" = ""X0"" ]
</code></pre>

<p>or (less usually, in my experience, but completely equivalently):</p>

<pre><code>if [ X""$x"" = X""0"" ]
</code></pre>

<p>It was all the edge cases like this, tied up with the possibility that the test was a separate executable, that means that portable shell code still uses double quotes more copiously than the modern shells actually require, and the X-prefix notation was used to ensure that things could not get misinterpreted.</p>
","6853353"
"rename part of filename","60796","","<p>sorry for the properly stupid question, but I am quite a newbie.
I have loads of files which look like this:</p>

<pre><code>DET01-ABC-5_50-001.dat
...
DET01-ABC-5_50-0025.dat
</code></pre>

<p>and I want them to look like this:</p>

<pre><code>DET01-XYZ-5_50-001.dat
...
DET01-XYZ-5_50-0025.dat
</code></pre>

<p>how can I do this? I tried several things from this forum but I seem to make a mistake.
Thanks for your help!</p>
","<p>There are a couple of variants of a rename command, in your case, it may be as simple as</p>

<pre><code>rename ABC XYZ *.dat
</code></pre>

<p>You may have a version which takes a Perl regex;</p>

<pre><code>rename 's/ABC/XYZ/' *.dat
</code></pre>
","1392812"
"How to delete first two lines and last four lines from a text file with bash?","60767","","<p>I am trying to delete first two lines and last four lines from my text files. How can I do this with Bash?</p>
","<p>You can combine <a href=""http://linux.die.net/man/1/tail"" rel=""noreferrer"">tail</a> and <a href=""http://linux.die.net/man/1/head"" rel=""noreferrer"">head</a>:</p>

<pre><code>$ tail -n +3 file.txt | head -n -4 &gt; file.txt.new &amp;&amp; mv file.txt.new file.txt
</code></pre>
","10460956"
"How do I execute any command editing its file (argument) ""in place"" using bash?","60520","","<p>I have a file temp.txt, that I want to sort with the <code>sort</code> command in bash.</p>

<p>I want the sorted results to replace the original file.</p>

<p>This doesn't work for example (I get an empty file):</p>

<pre><code>sortx temp.txt &gt; temp.txt
</code></pre>

<p>Can this be done in one line without resorting to copying to temporary files?</p>

<hr>

<p>EDIT: The <code>-o</code> option is very cool for <code>sort</code>. I used <code>sort</code> in my question as an example. I run into the same problem with other commands:</p>

<pre><code>uniq temp.txt &gt; temp.txt.
</code></pre>

<p>Is there a better general solution?</p>
","<pre><code>sort temp.txt -o temp.txt
</code></pre>
","146473"
"Using the star sign in grep","60380","","<p>I am trying to search for the substring ""abc"" in a specific file in linux/bash</p>

<p>So I do:</p>

<pre><code>grep '*abc*' myFile
</code></pre>

<p>It returns nothing.</p>

<p>But if I do:</p>

<pre><code>grep 'abc' myFile
</code></pre>

<p>It returns matches correctly.</p>

<p>Now, this is not a problem for me. But what if I want to grep for a more complex string, say</p>

<pre><code>*abc * def *
</code></pre>

<p>How would I accomplish it using grep?</p>
","<p>The asterisk is just a <a href=""http://www.regular-expressions.info/repeat.html"" rel=""noreferrer"">repetition operator</a>, but you need to tell it what you repeat. <code>/*abc*/</code> matches a string containing ab and zero or more c's (because the second * is on the c; the first is meaningless because there's nothing for it to repeat). If you want to match anything, you need to say <code>.*</code> -- the dot means any character (<a href=""http://www.regular-expressions.info/dot.html"" rel=""noreferrer"">within certain guidelines</a>). If you want to just match abc, you could just say <code>grep 'abc' myFile</code>. For your more complex match, you need to use <code>.*</code> -- <code>grep 'abc.*def' myFile</code> will match a string that contains abc followed by def with something optionally in between.</p>

<p><strong>Update based on a comment:</strong></p>

<p><code>*</code> in a regular expression is not exactly the same as * in the console. In the console, * is part of a <a href=""http://en.wikipedia.org/wiki/Glob_(Unix)"" rel=""noreferrer"">glob construct</a>, and just acts as a wildcard (for instance <code>ls *.log</code> will list all files that end in .log). However, in regular expressions, * is a modifier, meaning that it only applies to the character or group preceding it. If you want * in regular expressions to act as a wildcard, you need to use <code>.*</code> as previously mentioned -- the dot is a wildcard character, and the star, when modifying the dot, means find one or more dot; ie. find one or more of any character.</p>
","1069333"
"find a pattern in files and rename them","60292","","<p>I use this command to find files with a given pattern and then rename them to something else</p>

<pre><code>find . -name '*-GHBAG-*' -exec bash -c 'echo mv $0 ${0/GHBAG/stream-agg}' {} \;
</code></pre>

<p>As I run this command, I see some outputs like this</p>

<pre><code>mv ./report-GHBAG-1B ./report-stream-agg-1B
mv ./reoprt-GHBAG-0.5B ./report-stream-agg-0.5B
</code></pre>

<p>However at the end, when I run <code>ls</code>, I see the old file names.</p>
","<p>You are echo'ing your 'mv' command, not actually executing it. Change to:</p>

<pre><code>find . -name '*-GHBAG-*' -exec bash -c 'mv $0 ${0/GHBAG/stream-agg}' {} \;
</code></pre>
","15290208"
"bash curl command not found. Where can I find it?","60288","","<p>I have no idea what I am getting myself into, I am very new to programming and trying to learn on my own.  I am trying to install homebrew with ""ruby -e ""$(curl -fsSL <a href=""https://raw.github.com/mxcl/homebrew/go"" rel=""noreferrer"">https://raw.github.com/mxcl/homebrew/go</a>)"" and this the outcome is ""-bash: curl: command not found""  ... I have been searching google but can't seem to find anything to help me.  when I type ""which curl"" it just goes to the next line of terminal as if I just opened terminal... 
I have xcode installed with command line tools installed, and even downloaded reinstalled it in case something was wrong with it.
Not that it matters but the reason I am attempting to install homebrew is it is needed for libsodium which is needed for dnscrypt.</p>

<p>Thank You for any help</p>

<p>when I type curl-config it gives me vailable values for OPTION include:</p>

<p>--built-shared says 'yes' if libcurl was built shared
  --ca        ca bundle install path
  --cc        compiler
  --cflags    pre-processor and compiler flags
  --checkfor [version] check for (lib)curl of the specified version
  --configure the arguments given to configure when building curl
  --features  newline separated list of enabled features
  --help      display this help and exit
  --libs      library linking information
  --prefix    curl install prefix
  --protocols newline separated list of enabled protocols
  --static-libs static libcurl library linking information
  --version   output version information
  --vernum    output the version information as a number (hexadecimal)</p>

<p>then I try any of of those like curl --version and it does the same curl command not found</p>
","<p>As an alternative you can use <code>wget</code>:</p>

<pre><code>ruby -e ""$(wget -qO - 'https://raw.github.com/mxcl/homebrew/go')""
</code></pre>
","19039149"
"Meaning of $? in shell scripts","60263","","<p>What does </p>

<pre><code>echo $?
</code></pre>

<p>mean in bash programming?</p>
","<p>This is the exit status of the last executed command.</p>

<p>For example the command <code>true</code> always returns a status of <code>0</code> and <code>false</code> always returns a status of <code>1</code>:</p>

<pre><code>true
echo $? # echoes 0
false
echo $? # echoes 1
</code></pre>

<p>From the manual: (acessible by calling <code>man bash</code> in your shell)</p>

<blockquote>
  <p><code>$?</code>            Expands to the exit status of the most recently  executed  foreground pipeline.</p>
</blockquote>

<p>By convention an exit status of <code>0</code> means success, and non-zero return status means failure. Learn more about <em>exit statuses</em> <a href=""https://secure.wikimedia.org/wikipedia/en/wiki/Exit_status"" rel=""noreferrer"">on wikipedia</a>.</p>

<p>There are other special variables like this, as you can see on this online manual: <a href=""https://www.gnu.org/s/bash/manual/bash.html#Special-Parameters"" rel=""noreferrer"">https://www.gnu.org/s/bash/manual/bash.html#Special-Parameters</a></p>
","7248048"
"Using grep to search for hex strings in a file","60256","","<p>I have been trying all day to get this to work.
Does anyone know how to get grep, or something of the like, to retrieve offsets of hex strings in a file?</p>

<p>I have a bunch of hexdumps that I need to check for strings and then run again and check if the value has changed.</p>

<p>I have tried hexdump and dd, but the problem is because it's a stream, I lose my offset for the files.</p>

<p>Someone must have had this problem and a workaround. What can I do?</p>

<p>To clarify, I have a series of dumped memory regions from GDB.</p>

<p>I am trying to narrow down a number by searching out all the places the number is stored, then doing it again and checking if the new value is stored at the same memory location.</p>

<p>I cannot get grep to do anything because I am looking for hex values so all the times I have tried (like a bazillion, roughly) it will not give me the correct output.</p>

<p>The hex dumps are just complete binary files, the paterns are within float values at larges so 8? bytes?</p>

<p>The patterns are not wrapping the lines that I am aware of. I am aware of the what it changes to, and I can do the same process and compare the lists to see which match.
The hex dumps normally end up (in total) 100 megs-ish.</p>

<p>Perl COULD be a option, but at this point, I would assume my lack of knowledge with bash and its tools is the main culprit.</p>

<p>Its a little hard to explain the output I am getting since I really am not getting any output..</p>

<p>I am anticipating (and expecting) something along the lines of:</p>

<pre><code>&lt;offset&gt;:&lt;searched value&gt;
</code></pre>

<p>Which is the pretty well standard output I would normally get with <code>grep -URbFo &lt;searchterm&gt; . &gt; &lt;output&gt;</code></p>

<p>Problem is, when I try to search for hex values, I get the problem of if just not searching for the hex values, so if I search for 00 I should get like a million hits, because thats always the blankspace, but instead its searching for 00 as text, so in hex, 3030.
Any idea's?</p>

<p>I CAN force it through hexdump or something of the link but because its a stream it will not give me the offsets and filename that it found a match in.</p>

<p>Using <code>grep -b</code> option doesnt seem to work either, I did try all the flags that seemed useful to my situation, and nothing worked.</p>

<p>Using <code>xxd -u /usr/bin/xxd</code> as an example I get a output that would be useful, but I cannot use that for searching.. </p>

<pre><code>0004760: 73CC 6446 161E 266A 3140 5E79 4D37 FDC6  s.dF..&amp;j1@^yM7..
0004770: BF04 0E34 A44E 5BE7 229F 9EEF 5F4F DFFA  ...4.N[.""..._O..
0004780: FADE 0C01 0000 000C 0000 0000 0000 0000  ................
</code></pre>

<p>Nice output, just what I wana see, but it just doesnt work for me in this situation..</p>

<p>This is some of the things i've tried since posting this:</p>

<pre><code>xxd -u /usr/bin/xxd | grep 'DF'
00017b0: 4010 8D05 0DFF FF0A 0300 53E3 0610 A003  @.........S.....

root# grep -ibH ""df"" /usr/bin/xxd
Binary file /usr/bin/xxd matches
xxd -u /usr/bin/xxd | grep -H 'DF'
(standard input):00017b0: 4010 8D05 0DFF FF0A 0300 53E3 0610 A003  @.........S.....
</code></pre>
","<p>We tried several things before arriving at an acceptable solution:</p>

<pre><code>xxd -u /usr/bin/xxd | grep 'DF'
00017b0: 4010 8D05 0DFF FF0A 0300 53E3 0610 A003  @.........S.....


root# grep -ibH ""df"" /usr/bin/xxd
Binary file /usr/bin/xxd matches
xxd -u /usr/bin/xxd | grep -H 'DF'
(standard input):00017b0: 4010 8D05 0DFF FF0A 0300 53E3 0610 A003  @.........S.....
</code></pre>

<p>Then found we could get usable results with</p>

<pre><code>xxd -u /usr/bin/xxd &gt; /tmp/xxd.hex ; grep -H 'DF' /tmp/xxd
</code></pre>

<p>Note that using a simple search target like 'DF' will incorrectly match characters that span across byte boundaries, i.e.</p>

<pre><code>xxd -u /usr/bin/xxd | grep 'DF'
00017b0: 4010 8D05 0DFF FF0A 0300 53E3 0610 A003  @.........S.....
--------------------^^
</code></pre>

<p>So we use an ORed regexp to search for ' DF' OR 'DF ' (the searchTarget preceded or followed by a space char).</p>

<p>The final result seems to be </p>

<pre><code>xxd -u -ps -c 10000000000 DumpFile &gt; DumpFile.hex
egrep ' DF|DF ' Dumpfile.hex

0001020: 0089 0424 8D95 D8F5 FFFF 89F0 E8DF F6FF  ...$............
-----------------------------------------^^
0001220: 0C24 E871 0B00 0083 F8FF 89C3 0F84 DF03  .$.q............
--------------------------------------------^^
</code></pre>
","6325639"
"Command to escape a string in bash","60069","","<p>I need a bash command that will convert a string to something that is escaped.  Here's an example:</p>

<pre>
echo ""hello\world""|escape|someprog
</pre>

<p>Where the escape command makes ""hello\world"" into ""hello\\world"".  Then, someprog can use ""hello\world"" as it expects.  Of course, this is a simplified example of what I will really be doing.</p>
","<p>In Bash:</p>

<pre><code>printf ""%q"" ""hello\world"" | someprog
</code></pre>

<p>for example:</p>

<pre><code>printf ""%q"" ""hello\world""
hello\\world
</code></pre>

<p>This could be used through variables too:</p>

<pre><code>printf -v var ""%q\n"" ""hello\world""
echo ""$var""
hello\\world
</code></pre>
","2856010"
"checking wget's return value [if]","60009","","<p>I'm writing a script to download a bunch of files, and I want it to inform when a particular file doesn't exist.</p>

<pre><code>r=`wget -q www.someurl.com`
if [ $r -ne 0 ]
  then echo ""Not there""
  else echo ""OK""
fi
</code></pre>

<p>But it gives the following error on execution:</p>

<p><code>./file: line 2: [: -ne: unary operator expected</code></p>

<p>What's wrong?</p>
","<p><code>$r</code> is the text output of wget (which you've captured with backticks). To access the return code, use the <code>$?</code> variable.</p>
","2717354"
"Bash : extracting part of a string","59974","","<p>Say I have the string ""Memory Used: 19.54M""
How would I extract the 19.54 from it?
The 19.54 will change frequently so i need to store it in a variable and compare it with the value on the next iteration.</p>

<p>I imagine I need some combination of grep and regex, but I never really understood regex..</p>
","<p>You probably want to <em>extract</em> it rather than <em>remove</em> it. You can use the Parameter Expansion to extract the value:</p>

<pre><code>var=""Memory Used: 19.54M""
var=${var#*: }            # Remove everything up to a colon and space
var=${var%M}              # Remove the M at the end
</code></pre>

<p>Note that bash can only compare integers, it has no floating point arithmetics support.</p>
","12671499"
"Nth word in a string","59969","","<p>In Bash, I want to get the Nth word of a string.</p>

<p>For instance:</p>

<pre><code>STRING=""one two three four""
N=3
</code></pre>

<p>Result:</p>

<pre><code>""three""
</code></pre>

<p>What Bash command/script could do this?</p>
","<pre><code>echo $STRING | cut -d "" "" -f $N
</code></pre>
","3005659"
"Linux scripting: hiding user input on terminal","59844","","<p>I have bash script like the following:</p>

<pre><code>#!/bin/bash

echo ""Please enter your username"";
read username;

echo ""Please enter your password"";
read password;
</code></pre>

<p>I want that when the user types the password on the terminal, it should not be displayed (or something like  *******) should be displayed). How do I achieve this?</p>
","<p>Just supply -s to your read call like so:</p>

<pre><code>$ read -s PASSWORD
$ echo $PASSWORD
</code></pre>
","4316747"
"How to tell bash that the line continues on the next line","59811","","<p>In a bash script I got from another programmer, some lines exceeded 80 columns in length. What is the character or thing to be added to the line in order to indicate that the line continues on the next line?</p>
","<p>The character is a backslash <code>\</code></p>

<p>From the <a href=""http://www.gnu.org/software/bash/manual/bashref.html"" rel=""noreferrer"">bash manual</a>:</p>

<blockquote>
  <p>The backslash character ‘\’ may be used to remove any special meaning
  for the next character read and for line continuation.</p>
</blockquote>
","3871336"
"Shell script using curl to loop through urls","59778","","<p>I've been trying to create a simple script that will take a list of queries from a .txt file, append the main url variable, then scrape the content and output it to a text file.</p>

<p>Here's what I have so far:</p>

<pre><code>#!/bin/bash

url=""example.com/?q=""
for i in $(cat query.txt); do
    content=$(curl -o $url $i)
    echo $url $i
    echo $content &gt;&gt; output.txt
done
</code></pre>

<p>list:</p>

<pre><code>images
news
stuff
other
</code></pre>

<p>error log:</p>

<pre><code>curl: (6) Could not resolve host: other; nodename nor servname provided, or not known
example.com/?q= other
</code></pre>

<p>If I use this command straight from the command line I get some output into the file:</p>

<pre><code>curl -L http://example.com/?q=other &gt;&gt; output.txt
</code></pre>

<p>Ultimately I would like the output to be:</p>

<pre><code>fetched:    http://example.com/?q=other
content:    the output of the page

followed by the next query in the list.
</code></pre>
","<p>Use more quotes !</p>

<ul>
<li><a href=""http://mywiki.wooledge.org/Quotes"" rel=""noreferrer"">http://mywiki.wooledge.org/Quotes</a> </li>
<li><a href=""http://mywiki.wooledge.org/Arguments"" rel=""noreferrer"">http://mywiki.wooledge.org/Arguments</a></li>
<li><a href=""http://wiki.bash-hackers.org/syntax/words"" rel=""noreferrer"">http://wiki.bash-hackers.org/syntax/words</a></li>
</ul>

<p>Try this instead :</p>

<pre><code>url=""example.com/?q=""
for i in $(cat query.txt); do
    content=""$(curl -s ""$url/$i"")""
    echo ""$content"" &gt;&gt; output.txt
done
</code></pre>
","16131364"
"bash command line arguments","59734","","<p>I want to write a bash script which takes different arguments. It should be used like normal linux console programs:</p>

<pre><code>my_bash_script -p 2 -l 5 -t 20
</code></pre>

<p>So the value 2 should be saved in a variable called pages and the parameter l should be saved in a variable called length and the value 20 should be saved in a variable time.</p>

<p>What is the best way to do this?</p>
","<p>Use the <code>getopts</code> builtin:<br>
<a href=""http://wiki.bash-hackers.org/howto/getopts_tutorial"" rel=""nofollow noreferrer"">here's a tutorial</a></p>

<pre><code>pages=  length=  time=

while getopts p:l:t: opt; do
  case $opt in
  p)
      pages=$OPTARG
      ;;
  l)
      length=$OPTARG
      ;;
  t)
      time=$OPTARG
      ;;
  esac
done

shift $((OPTIND - 1))
</code></pre>

<p><code>shift $((OPTIND - 1))</code> shifts the command line parameters so that you can access possible arguments to your script, i.e. <code>$1, $2, ...</code></p>
","12036574"
"Remove element from array shell","59702","","<p>I need to remove an element from an array in bash shell.
Generally I'd simply do:</p>

<pre><code>array=(""${(@)array:#&lt;element to remove&gt;}"")
</code></pre>

<p>Unfortunately the element I want to remove is a variable so I can't use the previous command.
Down here an example:</p>

<pre><code>array+=(pluto)
array+=(pippo)
delete=(pluto)
array( ${array[@]/$delete} ) -&gt; but clearly doesn't work because of {}
</code></pre>

<p>Any idea?</p>
","<p>The following works as you would like in <code>bash</code> and <code>zsh</code>:</p>

<pre><code>$ array=(pluto pippo)
$ delete=(pluto)
$ echo ${array[@]/$delete}
pippo
$ array=( ""${array[@]/$delete}"" ) #Quotes when working with strings
</code></pre>

<p>If need to delete more than one element:</p>

<pre><code>...
$ delete=(pluto pippo)
for del in ${delete[@]}
do
   array=(""${array[@]/$del}"") #Quotes when working with strings
done
</code></pre>

<p><strong>Caveat</strong></p>

<p>This technique actually removes prefixes matching <code>$delete</code> from the elements, not necessarily whole elements.</p>

<p><strong>Update</strong></p>

<p>To really remove an exact item, you need to walk through the array, comparing the target to each element, and using <code>unset</code> to delete an exact match.</p>

<pre><code>array=(pluto pippo bob)
delete=(pippo)
for target in ""${delete[@]}""; do
  for i in ""${!array[@]}""; do
    if [[ ${array[i]} = ""${delete[0]}"" ]]; then
      unset 'array[i]'
    fi
  done
done
</code></pre>

<p>Note that if you do this, and one or more elements is removed, the indices will no longer be a continuous sequence of integers.</p>

<pre><code>$ declare -p array
declare -a array=([0]=""pluto"" [2]=""bob"")
</code></pre>

<p>The simple fact is, arrays were not designed for use as mutable data structures. They are primarily used for storing lists of items in a single variable without needing to waste a character as a delimiter (e.g., to store a list of strings which can contain whitespace).</p>

<p>If gaps are a problem, then you need to rebuild the array to fill the gaps:</p>

<pre><code>for i in ""${!array[@]}""; do
    new_array+=( ""${array[i]}"" )
done
array=(""${new_array[@]}"")
unset new_array
</code></pre>
","16861932"
"Clean way to launch the web browser from shell script?","59698","","<p>In a bash script, I need to launch the user web browser. There seems to be many ways of doing this:</p>

<ul>
<li><code>$BROWSER</code></li>
<li><code>xdg-open</code></li>
<li><code>gnome-open</code> on GNOME</li>
<li><code>www-browser</code></li>
<li><code>x-www-browser</code></li>
<li>...</li>
</ul>

<p>Is there a more-standard-than-the-others way to do this that would work on most platforms, or should I just go with something like this:</p>

<pre><code>#/usr/bin/env bash

if [ -n $BROWSER ]; then
  $BROWSER 'http://wwww.google.com'
elif which xdg-open &gt; /dev/null; then
  xdg-open 'http://wwww.google.com'
elif which gnome-open &gt; /dev/null; then
  gnome-open 'http://wwww.google.com'
# elif bla bla bla...
else
  echo ""Could not detect the web browser to use.""
fi
</code></pre>
","<p><code>xdg-open</code> is standardized and should be available in most distributions.</p>

<p>Otherwise:</p>

<ol>
<li><code>eval</code> is evil, don't use it.</li>
<li>Quote your variables.</li>
<li>Use the correct test operators in the correct way.</li>
</ol>

<p>Here is an example:</p>

<pre><code>#!/bin/bash
if which xdg-open &gt; /dev/null
then
  xdg-open URL
elif which gnome-open &gt; /dev/null
then
  gnome-open URL
fi
</code></pre>

<p>Maybe this version is slightly better (still untested):</p>

<pre><code>#!/bin/bash
URL=$1
[[ -x $BROWSER ]] &amp;&amp; exec ""$BROWSER"" ""$URL""
path=$(which xdg-open || which gnome-open) &amp;&amp; exec ""$path"" ""$URL""
echo ""Can't find browser""
</code></pre>
","3124679"
"Simulate user input in bash script","59565","","<p>I am creating my own bash script, but I am stuck at the moment. Basically, the script would be used to automate server setup in CentOS. Some software normally asks the user to type a password. I want the script to put the password that I have generated and stored as a variable instead of asking the user.</p>

<p>When the message ""New password:"" appears during install, how can I make the script put the value stored in a variable <code>$key</code> as if the user had typed it, with a bash script?</p>
","<p>You should find the 'expect' command will do what you need it to do.  Its widely available.  See here for an example : <a href=""http://www.thegeekstuff.com/2010/10/expect-examples/"">http://www.thegeekstuff.com/2010/10/expect-examples/</a></p>

<p>(very rough example)</p>

<pre><code>#!/usr/bin/expect
set pass ""mysecret""

spawn /usr/bin/passwd

expect ""password: ""
send ""$pass""
expect ""password: ""
send ""$pass""
</code></pre>
","14670734"
"Recursive copy of specific files in Unix/Linux?","59541","","<p>I need to copy all <code>*.jar</code> files from directory and all its subdirectories. How can I do it in UNIX/Linux terminal? Command <code>cp -r *.jar /destination_dir</code> doesn't work.</p>
","<p><code>rsync</code> is useful for local file copying as well as between machines. This will do what you want:</p>

<p><code>rsync -avm --include='*.jar' -f 'hide,! */' . /destination_dir</code></p>

<p>The entire directory structure from . is copied to /destination_dir, but only the .jar files are copied. The -a ensures all permissions and times on files are unchanged. The -m will omit empty directories. -v is for verbose output. </p>

<p>For a dry run add a -n, it will tell you what it would do but not actually copy anything.</p>
","9626253"
"How to slice an array in bash","59511","","<p>(edited to fit the answer)</p>

<p>Looking the ""Array"" section in the bash(1) man page, I didn't find a way to slice a bash array.</p>

<p>So I came up with this overly complicated function:</p>

<pre><code>#!/bin/bash

# @brief: slice a bash array
# @arg1:  output-name
# @arg2:  input-name
# @args:  seq args
# ----------------------------------------------
function slice() {
   local output=$1
   local input=$2
   shift 2
   local indexes=$(seq $*)

   local -i i
   local tmp=$(for i in $indexes 
                 do echo ""$(eval echo \""\${$input[$i]}\"")"" 
               done)

   local IFS=$'\n'
   eval $output=""( \$tmp )""
}
</code></pre>

<p>Used like this:</p>

<pre><code>$ A=( foo bar ""a  b c"" 42 )
$ slice B A 1 2
$ echo ""${B[0]}""  # bar
$ echo ""${B[1]}""  # a  b c
</code></pre>

<p>Is there a better way to do that?</p>
","<p>See the <a href=""https://www.gnu.org/software/bash/manual/bash.html#Shell-Parameter-Expansion"" rel=""noreferrer"">Parameter Expansion</a> section in the Bash <code>man</code> page. <code>A[@]</code> returns the contents of the array, <code>:1:2</code> takes a slice of length 2, starting at index 1. </p>

<pre><code>A=( foo bar ""a  b c"" 42 )
B=(""${A[@]:1:2}"")
C=(""${A[@]:1}"")   # slice to the end of the array
echo ""${B[@]}""    # bar a  b c
echo ""${B[1]}""    # a  b c
echo ""${C[@]}""    # bar a  b c 42
</code></pre>

<p>Note that the fact that ""a  b c"" is one array element (and that it contains an extra space) is preserved.</p>
","1336245"
"How can I find out a files ""mime-type(Content-Type?)""?","59392","","<p>Is there a way to find out the MIME-TYPE (or is it called ""Content-Type""...) of a file in a linux bash script?</p>

<p>The reason I need it is because imageshack appears to need it to upload a file as for some reason it detects the .png file as an ""application/octet-stream""…</p>

<p>I'v checked the file, and it really is a .png</p>

<pre><code>$ cat /1.png 
?PNG
(with a heap load of random characters)
</code></pre>

<p>This gives me the error:</p>

<pre><code>$ curl -F ""fileupload=@/1.png"" http://www.imageshack.us/upload_api.php
&lt;links&gt;
&lt;error id=""wrong_file_type""&gt;Wrong file type detected for file 1.png:application/octet-stream&lt;/error&gt;
&lt;/links&gt;
</code></pre>

<p>This works, but I need to specify a MIME-TYPE.</p>

<pre><code>$ curl -F ""fileupload=@/1.png;type=image/png"" http://www.imageshack.us/upload_api.php
</code></pre>
","<p>Use <code>file</code>. Examples:</p>

<pre><code>&gt; file --mime-type image.png
image.png: image/png

&gt; file -b --mime-type image.png
image/png

&gt; file -i FILE_NAME
image.png: image/png; charset=binary
</code></pre>
","2227201"
"In bash shell script how do I convert a string to an number","59331","","<p>Hey I would like to convert a string to a number </p>

<pre><code>x=""0.80""

#I would like to convert x to 0.80 to compare like such:
if[ $x -gt 0.70 ]; then

echo $x &gt;&gt; you_made_it.txt 

fi 
</code></pre>

<p>Right now I get the error integer expression expected because I am trying to compare a string. </p>

<p>thanks</p>
","<p>For some reason, this solution appeals to me:</p>

<pre>
if ! echo ""$x $y -p"" | dc | grep &#62; /dev/null ^-; then
  echo ""$x &#62; $y""
else
  echo ""$x &#60; $y""
fi
</pre>

<p>You'll need to be sure that $x and $y are valid (eg
contain only numbers and zero or one '.') and,
depending on how old your dc is, you may need to
specify something like '10k' to get it to
recognize non-integer values.</p>
","1788635"
"PS1 line with git current branch and colors","59198","","<p>Here is my current PS1</p>

<pre><code>export PS1='[\u@\h \W$(__git_ps1 "" (%s)"")]\$ '
</code></pre>

<p>How can I display the current branch in a different color?</p>
","<p>You can wrap the part that you want in colour with the following:</p>

<p><code>\e[0;32m</code> - sets colour (in this case, to green)</p>

<p><code>\e[m</code> - sets colour back to the default</p>

<p>For example, this sets the prompt to the last token of the current path, in green, followed by <code>$</code> in the default colour:</p>

<pre><code>export PS1='\e[0;32m\w\e[m $'
</code></pre>

<p>Other colours are available too. Have a look at <a href=""http://www.ibm.com/developerworks/linux/library/l-tip-prompt/"" rel=""noreferrer"">this article</a> under colorization for a comprehensive list of alternatives.</p>
","4138025"
"unix diff side-to-side results?","59060","","<p>How can I plot the results of a unix diff command side-to-side instead of one difference after the other? See below for an example:    </p>

<pre><code>    diff /tmp/test1  /tmp/test2
1,4c1,2
&lt; asfdsadf
&lt; asdfsad
&lt; fsaf
&lt; fdsadf
---
&gt; asdfsafdsf
&gt; saf
6,8d3
&lt; sadf
&lt; asdf
&lt; sadf
10d4
&lt; fasd
12,13c6,14
&lt; sadfa
&lt; fd
---
&gt; sadf
&gt; sadf
&gt; sadf
&gt; sadf
&gt; sadf
&gt; sadf
&gt; sadf
&gt; sadf
&gt; safa
</code></pre>

<p>I would like to have something like:</p>

<pre><code>diff /tmp/test1  /tmp/test2
1,4c1,2
&lt; asfdsadf       &gt; asdfsafdsf
&lt; asdfsad        &gt; saf       
&lt; fsaf
&lt; fdsadf
---
6,8d3
&lt; sadf
&lt; asdf
&lt; sadf
10d4
&lt; fasd
12,13c6,14
&lt; sadfa               &gt; sadf
&lt; fd              &gt; sadf
---               &gt; sadf
              &gt; sadf
              &gt; sadf
              &gt; sadf
              &gt; sadf
              &gt; sadf
              &gt; safa
</code></pre>
","<p>From <code>man diff</code>, you can use <code>-y</code> to do side-by-side.</p>

<pre><code>-y, --side-by-side
       output in two columns
</code></pre>

<p>Hence, say:</p>

<pre><code>diff -y /tmp/test1  /tmp/test2
</code></pre>

<h3>Test</h3>

<pre><code>$ cat a                $ cat b
hello                  hello
my name                my name
is me                  is you
</code></pre>

<p>Let's compare them:</p>

<pre><code>$ diff -y a b
hello                                                           hello
my name                                                         my name
is me                                                         | is you
</code></pre>
","17195364"
"Remove unicode characters from textfiles - sed , other bash/shell methods","58964","","<p>How do I remove unicode characters from a bunch of text files on the terminal?
I've tried this but it didn't work:</p>

<pre><code>sed 'g/\u'U+200E'//' -i *.txt
</code></pre>

<p>I need to remove these unicodes from the textfiles</p>

<pre><code>U+0091 - sort of weird ""control"" space
U+0092 - same sort of weird ""control"" space
A0 - non-space break
U+200E - left to right mark
</code></pre>
","<p>If you want to remove ONLY particular characters and you have python, you can:</p>

<pre><code>CHARS=$(python -c 'print u""\u0091\u0092\u00a0\u200E"".encode(""utf8"")')
sed 's/['""$CHARS""']//g' &lt; /tmp/utf8_input.txt &gt; /tmp/ascii_output.txt
</code></pre>
","8562661"
"How to replace placeholder character or word in variable with value from another variable in Bash?","58942","","<p>I'm trying to write a simple Bash script. I have a simple ""template"" variable:</p>

<pre><code>template = ""my*appserver""
</code></pre>

<p>I then have a function (<code>get_env()</code>) that returns the values <code>dev</code>, <code>qa</code>, or <code>live</code>. I'd like to call <code>get_env</code> and then string-replace the <code>template</code> variable with <code>get_env</code>'s return value and swap it out with the asterisk. So:</p>

<pre><code># Returns ""dev""
server = get_env

# Prints ""mydevappserver""
template = string_replace(server, template)
</code></pre>

<p>Or:</p>

<pre><code># This time, it returns ""live""
server = get_env

# Prints ""myliveappserver""
template = string_replace(server, template)
</code></pre>

<p>What should I be using in lieu of this <code>string_replace()</code> function to accomplish the binding? </p>
","<p>Bash can do string replacement by itself:</p>

<pre><code>template='my*appserver'
server='live'
template=""${template/\*/$server}""
</code></pre>

<p>See the <a href=""http://tldp.org/LDP/abs/html/string-manipulation.html"" rel=""noreferrer"">advanced bash scripting guide</a> for more details on string replacement.</p>

<p>So for a bash function:</p>

<pre><code>function string_replace {
    echo ""${1/\*/$2}""
}
</code></pre>

<p>And to use:</p>

<pre><code>template=$(string_replace ""$template"" ""$server"")
</code></pre>
","13711145"
"Checking if output of a command contains a certain string in a shell script","58923","","<p>I'm writing a shell script, and I'm trying to check if the output of a command contains a certain string. I'm thinking I probably have to use grep, but I'm not sure how. Does anyone know?</p>
","<p>Test the return value of grep:</p>

<pre><code>./somecommand | grep 'string' &amp;&gt; /dev/null
if [ $? == 0 ]; then
   echo ""matched""
fi
</code></pre>
","16931282"
"How to merge two files using AWK?","58921","","<p>File 1 has 5 fields A B C D E, with field A is an integer-valued  </p>

<p>File 2 has 3 fields A F G</p>

<p>The number of rows in File 1 is much bigger than that of File 2 (20^6 to 5000) </p>

<p>All the entries of A in File 1 appeared in field A in File 2   </p>

<p>I like to merge the two files by field A and carry F and G </p>

<p>Desired output is A B C D E F G</p>

<p>Example </p>

<p>File 1</p>

<pre><code> A     B     C    D    E
4050 S00001 31228 3286 0
4050 S00012 31227 4251 0
4049 S00001 28342 3021 1
4048 S00001 46578 4210 0
4048 S00113 31221 4250 0
4047 S00122 31225 4249 0
4046 S00344 31322 4000 1
</code></pre>

<p>File 2</p>

<pre><code>A     F    G   
4050 12.1 23.6
4049 14.4 47.8   
4048 23.2 43.9
4047 45.5 21.6
</code></pre>

<p>Desired output</p>

<pre><code>A    B      C      D   E F    G
4050 S00001 31228 3286 0 12.1 23.6
4050 S00012 31227 4251 0 12.1 23.6
4049 S00001 28342 3021 1 14.4 47.8
4048 S00001 46578 4210 0 23.2 43.9
4048 S00113 31221 4250 0 23.2 43.9
4047 S00122 31225 4249 0 45.5 21.6
</code></pre>
","<pre><code>$ awk 'FNR==NR{a[$1]=$2 FS $3;next}{ print $0, a[$1]}' file2 file1
4050 S00001 31228 3286 0 12.1 23.6
4050 S00012 31227 4251 0 12.1 23.6
4049 S00001 28342 3021 1 14.4 47.8
4048 S00001 46578 4210 0 23.2 43.9
4048 S00113 31221 4250 0 23.2 43.9
4047 S00122 31225 4249 0 45.5 21.6
4046 S00344 31322 4000 1
</code></pre>
","5467806"
"How to run mysql command on bash?","58861","","<p>The following code works on the command line</p>

<pre><code>mysql --user='myusername' --password='mypassword' --database='mydatabase' --execute='DROP DATABASE myusername; 
CREATE DATABASE mydatabase;'
</code></pre>

<p>However, it doesnt work on bash file on excecution</p>

<pre><code>#!/bin/bash
user=myusername
password=mypassword
database=mydatabase

mysql --user='$user' --password='$password' --database='$database' --execute='DROP DATABASE $user; CREATE DATABASE $database;'
</code></pre>

<p>I receive the following error:</p>

<blockquote>
  <p>ERROR 1045 (28000): Access denied for user '$user'@'localhost' (using password: YES)</p>
</blockquote>

<p>How to make the bash file run as the command line?</p>
","<p>Use double quotes while using BASH variables.</p>

<pre><code>mysql --user=""$user"" --password=""$password"" --database=""$database"" --execute=""DROP DATABASE $user; CREATE DATABASE $database;""
</code></pre>

<p>BASH doesn't expand variables in single quotes.</p>
","20033673"
"BASH: echoing the last command run","58854","","<p>I am trying to echo the last command run inside a bash script. I found a way to do it with some <code>history,tail,head,sed</code> which works fine when commands represent a specific line in my script from a parser standpoint. However under some circumstances I don't get the expected output, for instance when the command is inserted inside a <code>case</code> statement:</p>

<p>The script:</p>

<pre><code>#!/bin/bash
set -o history
date
last=$(echo `history |tail -n2 |head -n1` | sed 's/[0-9]* //')
echo ""last command is [$last]""

case ""1"" in
  ""1"")
  date
  last=$(echo `history |tail -n2 |head -n1` | sed 's/[0-9]* //')
  echo ""last command is [$last]""
  ;;
esac
</code></pre>

<p>The output:</p>

<pre><code>Tue May 24 12:36:04 CEST 2011
last command is [date]
Tue May 24 12:36:04 CEST 2011
last command is [echo ""last command is [$last]""]
</code></pre>

<p><strong>[Q] Can someone help me find a way to echo the last run command regardless of how/where this command is called within the bash script?</strong></p>

<p><strong>My answer</strong></p>

<p>Despite the much appreciated contributions from my fellow SO'ers, I opted for writing a <code>run</code> function - which runs all its parameters as a single command and display the command and its error code when it fails - with the following benefits:<br>
-I only need to prepend the commands I want to check with <code>run</code> which keeps them on one line and doesn't affect the conciseness of my script<br>
-Whenever the script fails on one of these commands, the last output line of my script is a message that clearly displays which command fails along with its exit code, which makes debugging easier</p>

<p>Example script:</p>

<pre><code>#!/bin/bash
die() { echo &gt;&amp;2 -e ""\nERROR: $@\n""; exit 1; }
run() { ""$@""; code=$?; [ $code -ne 0 ] &amp;&amp; die ""command [$*] failed with error code $code""; }

case ""1"" in
  ""1"")
  run ls /opt
  run ls /wrong-dir
  ;;
esac
</code></pre>

<p>The output:</p>

<pre><code>$ ./test.sh
apacheds  google  iptables
ls: cannot access /wrong-dir: No such file or directory

ERROR: command [ls /wrong-dir] failed with error code 2
</code></pre>

<p>I tested various commands with multiple arguments, bash variables as arguments, quoted arguments... and the <code>run</code> function didn't break them. The only issue I found so far is to run an echo which breaks but I do not plan to check my echos anyway.</p>
","<p>The command history is an interactive feature. Only complete commands are entered in the history. For example, the <code>case</code> construct is entered as a whole, when the shell has finished parsing it. Neither looking up the history with the <code>history</code> built-in (nor printing it through shell expansion (<code>!:p</code>)) does what you seem to want, which is to print invocations of simple commands.</p>

<p>The <a href=""http://www.gnu.org/software/bash/manual/bashref.html#index-trap-125"" rel=""noreferrer""><code>DEBUG</code> trap</a> lets you execute a command right before any simple command execution. A string version of the command to execute (with words separated by spaces) is available in the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#index-BASH_005fCOMMAND-169"" rel=""noreferrer""><code>BASH_COMMAND</code></a> variable.</p>

<pre><code>trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
…
echo ""last command is $previous_command""
</code></pre>

<p>Note that <code>previous_command</code> will change every time you run a command, so save it to a variable in order to use it. If you want to know the previous command's return status as well, save both in a single command.</p>

<pre><code>cmd=$previous_command ret=$?
if [ $ret -ne 0 ]; then echo ""$cmd failed with error code $ret""; fi
</code></pre>

<p>Furthermore, if you only want to abort on a failed commands, use <a href=""http://www.gnu.org/software/bash/manual/bashref.html#index-set-149"" rel=""noreferrer""><code>set -e</code></a> to make your script exit on the first failed command. You can display the last command from the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#index-trap-125"" rel=""noreferrer""><code>EXIT</code> trap</a>.</p>

<pre><code>set -e
trap 'echo ""exit $? due to $previous_command""' EXIT
</code></pre>

<p>Note that if you're trying to trace your script to see what it's doing, forget all this and use <a href=""http://www.gnu.org/software/bash/manual/bashref.html#index-set-149"" rel=""noreferrer""><code>set -x</code></a>.</p>
","6110446"
"How can I grep complex strings in variables?","58739","","<p>I am trying to grep for a small string in a much larger string. Both strings are being stored as variables and here is a code example: </p>

<pre><code>#!/bin/bash

long_str=$(man man)
shrt_str=""guide""

if grep -q $shrt_str $long_str ; then
        echo ""Found it!""
fi
</code></pre>

<p>I don't think variable expansion is working the way I expect it to. I have tried <code>[ ]</code> and <code>[[ ]]</code>, also quoting the variables and piping the output to <code>/dev/null</code> but no matter what I do it won't work. </p>

<p>Does anyone have any ideas?</p>
","<pre><code>echo ""$long_str"" | grep -q ""$shrt_str""
if [ $? -eq 0 ];then
  echo ""found""
fi
</code></pre>

<p>or</p>

<pre><code>echo ""$long_str"" | grep  -q  ""$shrt_str""  &amp;&amp; echo ""found"" || echo ""not found""
</code></pre>

<p>But since you are using bash shell, then use shell internals. No need to call external commands</p>

<pre><code>shrt_str=""guide""
case ""$long_str"" in 
   *""$shrt_str""* ) echo ""Found"";;
   * ) echo ""Not found"";;
esac
</code></pre>
","2106553"
"Example of using named pipes in Linux Bash","58675","","<p>Can someone post a simple example of using named pipes in Bash in Linux?</p>
","<p>One of the best examples of a practical use of a named pipe...</p>

<p>From <a href=""http://en.wikipedia.org/wiki/Netcat"">http://en.wikipedia.org/wiki/Netcat</a></p>

<p>Another useful behavior is using netcat as a proxy. Both ports and hosts can be redirected. Look at this example:</p>

<pre><code>nc -l 12345 | nc www.google.com 80
</code></pre>

<p>Port 12345 represents the request
This starts a nc server on port 12345 and all the connections get redirected to google.com:80. If a web browser makes a request to nc, the request will be sent to google but the response will not be sent to the web browser. That is because pipes are unidirectional. This can be worked around with a named pipe to redirect the input and output.</p>

<pre><code>mkfifo backpipe
nc -l 12345  0&lt;backpipe | nc www.google.com 80 1&gt;backpipe
</code></pre>
","4114048"
"How to list files in directory using bash?","58561","","<p>How to copy only the regular files in a directory (ignoring sub-directories and links) to the same destination? (bash on Linux)
<strong>A very large number of files</strong></p>
","<pre><code>for file in /source/directory/*
do
    if [[ -f $file ]]; then
        #copy stuff ....
    fi
done
</code></pre>
","7265285"
"How do I script a ""yes"" response for installing programs?","58538","","<p>I work with Amazon Linux instances and I have a couple scripts to populate data and install all the programs I work with, but a couple of the programs ask:</p>

<pre><code>Do you want to continue [Y/n]?
</code></pre>

<p>and pause the install.  I want to auto answer ""Y"" in all cases, I'm just now sure how to do it.</p>
","<p>The <a href=""http://en.wikipedia.org/wiki/Yes_(Unix)"" rel=""noreferrer"">'yes' command</a> will echo 'y' (or whatever you ask it to) indefinitely.  Use it as:</p>

<pre><code>yes | command-that-asks-for-input
</code></pre>

<p>or, if a capital 'Y' is required:</p>

<pre><code>yes Y | command-that-asks-for-input
</code></pre>
","7642711"
"How do I assign ls to an array in Linux Bash?","58503","","<pre><code>array=${ls -d */}
echo ${array[@]}  
</code></pre>

<p>I have three directories: <code>ww</code> <code>ee</code> <code>qq</code>. I want them in an array and then print the array.</p>
","<p>It would be this</p>

<pre><code>array=($(ls -d */))
</code></pre>

<p>EDIT: See Gordon Davisson's solution for a more general answer (i.e. if your filenames contain special characters). This answer is merely a syntax correction.</p>
","18885068"
"How to get number of rows affected, while executing MySQL query from bash?","58467","","<p>I know how one can execute MySQL queries / commands from bash:</p>

<pre><code>mysql -u[user] -p[pass] -e ""[mysql commands]""
</code></pre>

<p>or </p>

<pre><code>mysql -u[user] -p[pass] `&lt;&lt;`QUERY_INPUT

[mysql commands]

QUERY_INPUT
</code></pre>

<p>How can I capture how many rows were affected by the query?<br>
I tried doing:</p>

<pre><code>variable='`mysql -u[user] -p[pass] -e ""[mysql commands]""`'
</code></pre>

<p>It does execute the command but it does not return the number of affected rows.</p>
","<p>Put</p>

<pre><code>SELECT ROW_COUNT();
</code></pre>

<p>as the last statement in your batch and parse the output</p>
","1083882"
"bash shell script two variables in for loop","58183","","<p>I am new to shell scripting. so kindly bear with me if my doubt is too silly. </p>

<p>I have png images in 2 different directories and an executable which takes an images from each directory and processes them to generate a new image. </p>

<p>I am looking for a for loop construct which can take two variables simultaneously..this is possible in C, C++ etc but how do I accomplish something of the following. The code is obviously wrong. </p>

<pre><code>#!/bin/sh

im1_dir=~/prev1/*.png  
im2_dir=~/prev3/*.png
index=0

for i,j in $im1_dir $im2_dir  # i iterates in im1_dir and j iterates in im2_dir 
do
  run_black.sh $i $j  
done
</code></pre>

<p>thanks!</p>
","<p>If you are depending on the two directories to match up based on a locale sorted order (like your attempt), then an array should work.</p>

<pre><code>im1_files=(~/prev1/*.png)
im2_files=(~/prev3/*.png)

for ((i=0;i&lt;=${#im1_files[@]};i++)); do
   run_black.sh ""${im1_files[i]}"" ""${im2_files[i]}""
done
</code></pre>
","11215147"
"Piping both stdout and stderr in bash?","58161","","<p>It seems that newer versions of bash have the <code>&amp;&gt;</code> operator, which (if I understand correctly), redirects both stdout and stderr to a file (<code>&amp;&gt;&gt;</code> appends to the file instead, as Adrian clarified). </p>

<p>What's the simplest way to achieve the same thing, but instead piping to another command?</p>

<p>For example, in this line:</p>

<pre><code>cmd-doesnt-respect-difference-between-stdout-and-stderr | grep -i SomeError
</code></pre>

<p>I'd like the grep to match on content both in stdout and stderr (effectively, have them combined into one stream).</p>

<p><em>Note</em>: this question is asking about piping, <em>not</em> redirecting - so it is not a duplicate of the question it's currently marked as a duplicate of.</p>
","<p>(Note that <code>&amp;&gt;&gt;file</code> <em>appends</em> to a file while <code>&amp;&gt;</code> would redirect and <em>overwrite</em> a previously existing file.)</p>

<p>To combine <code>stdout</code> and <code>stderr</code> you would redirect the latter to the former using <code>2&gt;&amp;1</code>. This redirects stderr (file descriptor 2) to stdout (file descriptor 1), e.g.:</p>

<pre><code>$ { echo ""stdout""; echo ""stderr"" 1&gt;&amp;2; } | grep -v std
stderr
$
</code></pre>

<p><code>stdout</code> goes to stdout, <code>stderr</code> goes to stderr. <code>grep</code> only sees <code>stdout</code>, hence <code>stderr</code> prints to the terminal.</p>

<p>On the other hand:</p>

<pre><code>$ { echo ""stdout""; echo ""stderr"" 1&gt;&amp;2; } 2&gt;&amp;1 | grep -v std
$
</code></pre>

<p>After writing to both stdout and stderr, <code>2&gt;&amp;1</code> redirects stderr back to stdout and <code>grep</code> sees both strings on stdin, thus filters out both.</p>

<p>You can read more about redirection <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Redirections"">here</a>.</p>

<p>Regarding your example (POSIX):</p>

<pre><code>cmd-doesnt-respect-difference-between-stdout-and-stderr 2&gt;&amp;1 | grep -i SomeError
</code></pre>

<p>or, using <code>&gt;=bash-4</code>:</p>

<pre><code>cmd-doesnt-respect-difference-between-stdout-and-stderr |&amp; grep -i SomeError
</code></pre>
","16497456"
"How to open emacs inside bash","58097","","<p>I'm using Ubuntu 11.10. When I type command ""emacs"" in terminal, it opens emacs as a seperate window. How can I open it inside the terminal, like nano editor?</p>
","<p>Emacs takes many launch options.  The one that you are looking for is
<code>emacs -nw</code> this will open emacs inside the terminal disregarding the DISPLAY environment variable even if it is set.
The long form of this flag is <code>emacs --no-window-system</code>. </p>

<p>More information about emacs launch options can be found in the <a href=""http://www.gnu.org/software/emacs/manual/html_node/emacs/Initial-Options.html#Initial-Options"">manual</a>. </p>
","8746243"
"How to schedule to run first Sunday of every month","58005","","<p>I am using Bash on RedHat. I need to schedule a cron job to run at at 9:00 AM on first Sunday of every month. I did a little research and see that there is no short hand in cron to this.</p>

<p>Do you know of an optimal way ?</p>
","<p>You can put something like that in the <code>crontab</code> file:</p>

<pre><code>00 09 * * 7 [ $(date +\%d) -le 07 ] &amp;&amp; /run/your/script
</code></pre>

<p>The <code>date +%d</code> gives you the number of the current day, and then you can check if the day is less than or equal to 7. If it is, run your command.</p>

<p>If you run this script only on Sundays, it should mean that it runs only on the first Sunday of the month.</p>

<p>Remember that in the <code>crontab</code> file, the formatting options for the <code>date</code> command should be escaped.</p>
","3242169"
"Echoing a echo command with a variable in bash","57959","","<p>Ok, here is one I am struggling with as we speak. Echoing a echo command with a variable.</p>

<pre><code>echo ""creating new script file.""
echo ""#!/bin/bash"" &gt; $servsfile
echo ""read -p ""Please enter a service: "" ser "" &gt;&gt; $servfile
echo ""servicetest=`getsebool -a | grep ${ser}` "" &gt;&gt; $servfile
echo ""if [ $servicetest &gt; /dev/null ];then "" &gt;&gt; $servfile
echo ""echo ""we are now going to work with ${ser}"" "" &gt;&gt; $servfile
echo ""else"" &gt;&gt; $servfile
echo ""exit 1"" &gt;&gt; $servfile
echo ""fi"" &gt;&gt; $servfile
</code></pre>

<p>My goal is create a script using echo commands then run it later. I just need to figure out how to echo echo/read commands while maintaining my variables. </p>

<p>edit: the variables need to transfer what's inside of them into the new file.</p>
","<pre><code>echo ""echo ""we are now going to work with ${ser}"" "" &gt;&gt; $servfile
</code></pre>

<p>Escape all "" within quotes with \. Do this with variables like \$servicetest too:</p>

<pre><code>echo ""echo \""we are now going to work with \${ser}\"" "" &gt;&gt; $servfile    
echo ""read -p \""Please enter a service: \"" ser "" &gt;&gt; $servfile
echo ""if [ \$servicetest &gt; /dev/null ];then "" &gt;&gt; $servfile
</code></pre>
","22997790"
"Force flushing of output to a file while bash script is still running","57913","","<p>I have a small script, which is called daily by crontab using the following command:</p>

<pre><code>/homedir/MyScript &amp;&gt; some_log.log
</code></pre>

<p>The problem with this method is that some_log.log is only created after MyScript finishes. I would like to flush the output of the program into the file while it's running so I could do things like </p>

<pre><code>tail -f some_log.log
</code></pre>

<p>and keep track of the progress, etc.</p>
","<p>bash itself will never actually write any output to your log file.  Instead, the commands it invokes as part of the script will each individually write output and flush whenever they feel like it.  So your question is really how to force the commands within the bash script to flush, and that depends on what they are.</p>
","1429973"
"How to capture all the HTTP packets using tcpdump","57807","","<p>I want to run <code>tcpdump</code> with some parameters (Still dont know what to use). Then load the this stackoverflow.com page. </p>

<p>Output should be the HTTP communication. Later I want to use it  as a shell script. So whenever I want to check the HTTP communicaiton of a site site.com I just can run <code>script.sh site.com</code></p>

<p>The HTTP communication should be simple enough. Like following.</p>

<pre><code>GET /questions/9241391/how-to-capture-all-the-http-communication-data-using-tcp-dump
Host: stackoverflow.com
... 
...

HTTP/1.1 200 OK
Cache-Control: public, max-age=60
Content-Length: 35061
Content-Type: text/html; charset=utf-8
Expires: Sat, 11 Feb 2012 15:36:46 GMT
Last-Modified: Sat, 11 Feb 2012 15:35:46 GMT
Vary: *
Date: Sat, 11 Feb 2012 15:35:45 GMT


....
decoded deflated data
....
</code></pre>

<p>Now, could you tell me which options should I use with <code>tcpdump</code> to capture it. </p>
","<p>It can be done by <code>ngrep</code></p>

<pre><code>ngrep -q -d eth1 -W byline host stackoverflow.com and port 80 
       ^  ^       ^         ^        
       |  |       |         |
       |  |       |         |
       |  |       |         v
       |  |       |         filter expression
       |  |       |         
       |  |       +--&gt;  -W  is set the dump format (""normal"", ""byline"", ""single"", ""none"")
       |  |
       |  +----------&gt;  -d  is use specified device instead of the pcap default
       |
       +-------------&gt;  -q  is be quiet (""don't print packet reception hash marks"")
</code></pre>
","9904411"
"modify config file using bash script","57741","","<p>I'm writing a bash script to modify a config file which contains a bunch of key, value pairs. How can i read the key and find the value and possibly modify it?</p>
","<p>A wild stab in the dark for modifying a single value:</p>

<pre><code>sed -c -i ""s/\($TARGET_KEY *= *\).*/\1$REPLACEMENT_VALUE/"" $CONFIG_FILE
</code></pre>

<p>assuming that the target key and replacement value don't contain any special regex characters, and that your key-value separator is ""="". Note, the -c option is system dependent and you may need to omit it for sed to execute. </p>

<p>For other tips on how to do similar replacements (e.g., when the REPLACEMENT_VALUE has '/' characters in it), <a href=""https://stackoverflow.com/a/5955591/564709"">there are some great examples here</a>.</p>
","2464883"
"awk sum a column and print that sum on each line of input","57709","","<p>My <code>file.txt</code> looks like this:</p>

<pre><code>1 12
2 18
3 45
4 5
5 71
6 96
7 13
8 12
</code></pre>

<p>I can sum the second column like this: </p>

<p><code>awk '{ sum += $2 } END { print sum }' file.txt</code> </p>

<p><code>272</code></p>

<p>What's the neatest way that I can print that sum on each line? This is what I'm expecting:</p>

<pre><code>1 12 272
2 18 272
3 45 272
4 5 272
5 71 272
6 96 272
7 13 272
8 12 272
</code></pre>
","<p>Kind of standard <code>awk</code> way.</p>

<pre><code>$ awk 'FNR==NR{sum+=$2;next}; {print $0,sum}' file.txt{,}
1 12 272
2 18 272
3 45 272
4 5 272
5 71 272
6 96 272
7 13 272
8 12 272
</code></pre>
","10511282"
"HMAC-SHA1 in bash","57626","","<p>Is there a bash script to generate a <code>HMAC-SHA1</code> hash?</p>

<p>I'm looking for something equivalent to the following PHP code:</p>

<pre><code>hash_hmac(""sha1"", ""value"", ""key"");
</code></pre>
","<p>I realise this isn't exactly what you're asking for, but there's no point in reinventing the wheel and writing a bash version.</p>

<p>You can simply use the <a href=""https://www.openssl.org/docs/man1.1.0/apps/dgst.html"" rel=""noreferrer""><code>openssl</code></a> command to generate the hash within your script.</p>

<pre><code>[me@home] echo -n ""value"" | openssl dgst -sha1 -hmac ""key""
57443a4c052350a44638835d64fd66822f813319
</code></pre>

<p>Or simply:</p>

<pre><code>[me@home] echo -n ""value"" | openssl sha1 -hmac ""key""
57443a4c052350a44638835d64fd66822f813319
</code></pre>

<p>Remember to use <code>-n</code> with <code>echo</code> or else a line break character is appended to the string and that changes your data and the hash.</p>

<p>That command comes from the OpenSSL package which should already be installed (or easily installed) in your choice of Linux/Unix, Cygwin and the likes.</p>

<p>Do note that older versions of <code>openssl</code> (such as that shipped with RHEL4) may not provide the <code>-hmac</code> option.</p>

<hr>

<p>As an alternative solution, but mainly to prove that the results are the same, we can also call PHP's <code>hmac_sha1()</code> from the command line:</p>

<pre><code>[me@home]$ echo '&lt;?= hash_hmac(""sha1"", ""value"", ""key"") ?&gt;' | php
57443a4c052350a44638835d64fd66822f813319
</code></pre>
","7285256"
"How to get the number of files in a folder as a variable?","57528","","<p>Using bash, how can one get the number of files in a folder, excluding directories from a shell script without the interpreter complaining?</p>

<p>With the help of a friend, I've tried</p>

<pre><code>$files=$(find ../ -maxdepth 1 -type f | sort -n)
$num=$(""ls -l"" | ""grep ^-"" | ""wc -l"")
</code></pre>

<p>which returns from the command line:</p>

<pre><code>../1-prefix_blended_fused.jpg: No such file or directory
ls -l :  command not found
grep ^-: command not found
wc -l:   command not found
</code></pre>

<p>respectively.  These commands work on the command line, but NOT with a bash script.</p>

<p>Given a file filled with image files formatted like <code>1-pano.jpg</code>, I want to grab all the images in the directory to get the largest numbered file to tack onto the next image being processed.</p>

<p>Why the discrepancy?</p>
","<p>The quotes are causing the error messages.</p>

<p>To get a count of files in the directory:</p>

<pre><code>shopt -s nullglob
numfiles=(*)
numfiles=${#numfiles[@]}
</code></pre>

<p>which creates an array and then replaces it with the count of its elements. This will include files and directories, but not dotfiles or <code>.</code> or <code>..</code> or other dotted directories.</p>

<p>Use <code>nullglob</code> so an empty directory gives a count of 0 instead of 1.</p>

<p>You can instead use <code>find -type f</code> or you can count the directories and subtract:</p>

<pre><code># continuing from above
numdirs=(*/)
numdirs=${#numdirs[@]}
(( numfiles -= numdirs ))
</code></pre>

<p>Also see ""<a href=""http://mywiki.wooledge.org/BashFAQ/003"" rel=""nofollow noreferrer"">How can I find the latest (newest, earliest, oldest) file in a directory?</a>""</p>

<p>You can have as many spaces as you want inside an execution block. They often aid in readability. The only downside is that they make the file a little larger and may slow initial parsing (only) slightly. There are a few places that must have spaces (e.g. around <code>[</code>, <code>[[</code>, <code>]</code>, <code>]]</code> and <code>=</code> in comparisons) and a few that must not (e.g. around <code>=</code> in an assignment.</p>
","11131443"
"Saving awk output to variable","57220","","<p>Can anyone help me out with this problem?</p>

<p>I'm trying to save the awk output into a variable.</p>

<pre><code>variable = `ps -ef | grep ""port 10 -"" | grep -v ""grep port 10 -""| awk '{printf ""%s"", $12}'`
printf ""$variable""
</code></pre>

<p>EDIT: $12 corresponds to a parameter running on that process.</p>

<p>Thanks!</p>
","<pre><code>#!/bin/bash

variable=`ps -ef | grep ""port 10 -"" | grep -v ""grep port 10 -"" | awk '{printf $12}'`
echo $variable
</code></pre>

<p>Notice that there's no space after the equal sign.</p>

<p>You can also use <code>$()</code> which allows nesting and is readable.</p>
","18648441"
"How to move all files including hidden files into parent directory via *","57181","","<p>Its must be a popular question but I could not find an answer.</p>

<p>How to move all files via * including hidden files as well to parent directory like this:</p>

<pre><code>mv /path/subfolder/* /path/
</code></pre>

<p>This will move all files to parent directory like expected but will not move hidden files. How to do that?</p>
","<p>You can find a comprehensive set of solutions on this in UNIX &amp; Linux's answer to <a href=""https://unix.stackexchange.com/a/6397/40596"">How do you move all files (including hidden) from one directory to another?</a>. It shows solutions in Bash, zsh, ksh93, standard (POSIX) sh, etc.</p>

<hr>

<p>You can use these two commands together:</p>

<pre><code>mv /path/subfolder/* /path/   # your current approach
mv /path/subfolder/.* /path/  # this one for hidden files
</code></pre>

<p>Or all together (<a href=""https://stackoverflow.com/questions/20192070/how-to-move-all-files-including-hidden-files-into-parent-directory-via/20192079?noredirect=1#comment30104778_20192079"">thanks pfnuesel</a>):</p>

<pre><code>mv /path/subfolder/{.,}* /path/
</code></pre>

<p>Which expands to:</p>

<pre><code>mv /path/subfolder/* /path/subfolder/.* /path/
</code></pre>

<p>(example: <code>echo a{.,}b</code> expands to <code>a.b ab</code>)</p>

<p>Note this will show a couple of warnings:</p>

<pre><code>mv: cannot move ‘/path/subfolder/.’ to /path/.’: Device or resource busy
mv: cannot remove /path/subfolder/..’: Is a directory
</code></pre>

<p>Just ignore them: this happens because <code>/path/subfolder/{.,}*</code> also expands to <code>/path/subfolder/.</code> and <code>/path/subfolder/..</code>, which are the directory and the parent directory (See <a href=""https://askubuntu.com/q/54900/143251"">What do “.” and “..” mean when in a folder?</a>).</p>

<hr>

<p>If you want to just copy, you can use a mere:</p>

<pre><code>cp -r /path/subfolder/. /path/
#                     ^
#                     note the dot!
</code></pre>

<p>This will copy all files, both normal and hidden ones, since <code>/path/subfolder/.</code> expands to ""everything from this directory"" (Source: <a href=""https://superuser.com/a/367303/204979"">How to copy with cp to include hidden files and hidden directories and their contents?</a>)</p>
","20192079"
"cutting last n character in a string using shell script","57171","","<p>How to remove all n characters from a particular string using shell scripts,</p>

<pre><code>ssl01:49188,,,
ssl01:49188,
ssl01:49188,,,,,
ssl01:49188,ssl999999:49188,,,,,
ssl01:49188,abcf999:49188,,,,,
</code></pre>

<p>The output will be in the following format </p>

<pre><code>ssl01:49188
ssl01:49188
ssl01:49188
ssl01:49188,ssl999999:49188
ssl01:49188,abcf999:49188
</code></pre>
","<p>To answer the title of you question with specifies <strong>cutting last n character in a string</strong>, you can use the substring extraction feature in Bash.</p>

<pre><code>me@home$ A=""123456""
me@home$ echo ${A:0:-2}  # remove last 2 chars
1234
</code></pre>

<p>However, based on your examples you appear to want to <strong>remove all trailing commas</strong>, in which case you could use <code>sed 's/,*$//'</code>.</p>

<pre><code>me@home$ echo ""ssl01:49188,ssl999999:49188,,,,,"" | sed 's/,*$//'
ssl01:49188,ssl999999:49188
</code></pre>

<p>or, for a purely Bash solution, you could use substring removal:</p>

<pre><code>me@home$ X=""ssl01:49188,ssl999999:49188,,,,,""
me@home$ shopt -s extglob
me@home$ echo ${X%%+(,)}
ssl01:49188,ssl999999:49188
</code></pre>

<p>I would use the <code>sed</code> approach if the transformation needs to be applied to a whole file, and the bash substring removal approach if the target string is already in a bash variable.</p>
","14338518"
"How to reverse-i-search back and forth?","57109","","<p>I use <code>reverse-i-search</code> often, and that's cool. Sometime though when pressing <code>Ctrl+r</code> multiple times, I <em>pass</em> the command I am actually looking for. Because <code>Ctrl+r</code> searches backward in history, from newest to oldest, I have to:</p>

<ol>
<li>cancel,</li>
<li>search again and</li>
<li>stop exactly at the command, without passing it.</li>
</ol>

<p>While in <code>reverse-i-search</code> prompt, is it possible to search forward, i.e. from where I stand to newest. I naively tried <code>Ctrl+shift+r</code>, no luck. I heard about <code>Ctrl+g</code> but this is not what I am expecting here. Anyone has an idea?</p>
","<p>There is a similar question here: </p>

<p><a href=""https://stackoverflow.com/questions/549810/control-r-reverse-i-search-in-cygwin-bash-how-do-you-reset-the-search"">Control-r reverse-i-search in bash: how do you &quot;reset&quot; the search in Cygwin?</a></p>

<p>Found another similar question on Super User:</p>

<p><a href=""https://superuser.com/questions/159106/reverse-i-search-in-bash"">https://superuser.com/questions/159106/reverse-i-search-in-bash</a></p>

<p>Apparently, both mention <code>Ctrl+s</code>, which may do the trick.</p>

<p>Hope that helps. I myself am trying to find a piece of code that does the <code>reverse-i-search</code> in order to check how it has been implemented exactly.</p>
","15243625"
"Shell script to execute pgsql commands in files","57083","","<p>I am trying to automate a set of procedures that create TEMPLATE databases.</p>

<p>I have a set of files (file1, file2, ... fileN), each of which contains a set of pgsql commands required for creating a TEMPLATE database.</p>

<p>The contents of the file (createdbtemplate1.sql) looks roughly like this:</p>

<pre><code>CREATE DATABASE mytemplate1 WITH ENCODING 'UTF8';

\c mytemplate1

CREATE TABLE first_table ( 
 --- fields here ..
);

-- Add C language extension + functions
\i db_funcs.sql
</code></pre>

<p>I want to be able to write a shell script that will execute the commands in the file, so that I can write a script like this:</p>

<pre><code># run commands to create TEMPLATE db mytemplate1
# ./groksqlcommands.sh createdbtemplate1.sql

for dbname in foo foofoo foobar barbar
do
    # Need to simply create a database based on an existing template in this script
    psql CREATE DATABASE $dbname TEMPLATE mytemplate1
done
</code></pre>

<p>Any suggestions on how to do this? (As you may have guessed, I'm a shell scripting newbie.)</p>

<h3>Edit</h3>

<p>To clarify the question further, I want to know:</p>

<ol>
<li>How to write groksqlcommands.sh (a bash script that will run a set of pgsql cmds from file)</li>
<li>How to create a database based on an existing template at the command line</li>
</ol>
","<p>First off, do <strong>not</strong> mix <code>psql</code> meta-commands and <code>SQL</code> commands. These are separate sets of commands. There are tricks to combine those (using the psql meta-commands <code>\o</code> and <code>\\</code> and piping strings to psql in the shell), but stay away from that if you can.</p>

<ul>
<li>Make your files contain only SQL commands.</li>
<li>Do not include the CREATE DATABASE statement in the SQL files. Create the db separately, you have <em>multiple</em> files you want to execute in the same template db.</li>
</ul>

<p>I assume you are operating as system user <code>postgres</code> and you have <code>postgres</code> as Postgres superuser. All databases in the same db cluster on the default port 5432 and the user <code>postgres</code> has password-less access due to an <code>IDENT</code> setting in <code>pg_hba.conf</code> (default settings).</p>

<pre><code>psql postgres -c ""CREATE DATABASE mytemplate1 WITH ENCODING 'UTF8'
                  TEMPLATE template0""
</code></pre>

<p>I base the new template db on the system template db <code>template0</code>. Read <a href=""http://www.postgresql.org/docs/current/interactive/sql-createdatabase.html"">more about that here</a>.<br>
Your question:</p>

<blockquote>
  <p>How to (...) run a set of pgsql cmds from file</p>
</blockquote>

<p>Try:</p>

<pre><code>psql mytemplate1 -f file
</code></pre>

<p>Example for batch:</p>

<pre class=""lang-sh prettyprint-override""><code>#! /bin/sh

for file in /path/to/files/*; do
    psql mytemplate1 -f ""$file""
done
</code></pre>

<p>The command option <code>-f</code> makes <code>psql</code> execute SQL commands in a file. </p>

<blockquote>
  <p>How to create a database based on an existing template at the command line</p>
</blockquote>

<pre><code>psql -c 'CREATE DATABASE myDB TEMPLATE mytemplate1'
</code></pre>

<p>The command option <code>-c</code> makes <code>psql</code> execute a single SQL command string. Can be multiple commands, terminated by <code>;</code> - will be executed in <em>one</em> transaction and only the result of the last command returned.<br>
Read about <a href=""http://www.postgresql.org/docs/current/interactive/app-psql.html"">psql command options in the manual</a>.</p>

<p>If you don't provide a database to connect to, <code>psql</code> will use the default maintenance database named <code>postgres</code>. In the second answer it is irrelevant which database we connect to.</p>
","8595568"
"How to send list of file in a folder to a txt file in Linux","57059","","<p>I'm fairly new to Linux (CentOS in this case).  I have a folder with about 2000 files in it.  I'd like to ideally execute a command at the command prompt that would write out the name of all the files into a single txt file.</p>

<p>If I have to, I could write an actual program to do it too, I was just thinking there might be a way to simply do it from the command prompt.</p>
","<p>you can just use</p>

<pre><code>ls &gt; filenames.txt
</code></pre>

<p>(usually, start a shell by using ""Terminal"", or ""shell"", or ""Bash"".)  You may need to use <code>cd</code> to go to that folder first, or you can <code>ls ~/docs &gt; filenames.txt</code></p>
","4112156"
"Problems with a PHP shell script: ""Could not open input file""","56957","","<p>Ok, I am <em>trying</em> to create an email logger, that uses a PHP shell script. I have set up CPanel to pipe emails to my script. I am sure this is all configured properly. However I am having problems with the script, well any script for that matter when running it from the shell.</p>

<p>here is an example.</p>

<pre><code>#!/usr/local/bin/php –q
&lt;?php

/* Read the message from STDIN */
$fd = fopen(""php://stdin"", ""r"");
$email = """"; // This will be the variable holding the data.
while (!feof($fd)) {
$email .= fread($fd, 1024);
}
fclose($fd);
/* Saves the data into a file */
$fdw = fopen(""mail.txt"", ""w+"");
fwrite($fdw, $email);
fclose($fdw);
/* Script End */
?&gt;
</code></pre>

<p>Real simple, right? Read from STDIN and write to a file...I thought something was wrong, not able to read STDIN for some reason. Hosting provider allows it, allow_url_open and allow_url_include are both on.</p>

<p>When executing the script via SSH I get the following error:
Could not open input file: âq</p>

<p>So once again I thought that was the script telling me, that is could not read from STDIN</p>

<p>So I tried just a simple script.</p>

<pre><code>#!/usr/local/bin/php –q
&lt;?php
echo 'Hello World';
?&gt;
</code></pre>

<p>Same thing:
Could not open input file: âq</p>

<p>So it appears that the PHP program is telling me it is unable to open the script? The script is located in $HOME/mail/forward (CHMOD 755) and the script itself is CHMOD 755, as well the file mail.txt is CHMOD 755
I am really stumped on this.</p>
","<p>Have you tried:</p>

<pre><code>#!/usr/local/bin/php
</code></pre>

<p>I.e. without the <code>-q</code> part? That's what the error message ""Could not open input file: -q"" means. The first argument to <code>php</code> if it doesn't look like an option is the name of the PHP file to execute, and <code>-q</code> is CGI only.</p>

<p><strong>EDIT:</strong> A couple of (non-related) tips:</p>

<ol>
<li>You don't need to terminate the last block of PHP with <code>?&gt;</code>. In fact, it is often better not to.</li>
<li>When executed on the command line, PHP defines the global constant <code>STDIN</code> to <code>fopen(""php://stdin"", ""r"")</code>. You can use that instead of opening <code>""php://stdin""</code> a second time: <code>$fd = STDIN;</code></li>
</ol>
","4567705"
"Bash incrementing variable in loop","56908","","<p>I'm trying to write a small script that will count entries in a log file, and I'm incrementing  a variable (<code>USCOUNTER</code>) which I'm trying to use after the loop is done. </p>

<p>But at that moment <code>USCOUNTER</code> looks to be 0 instead of the actual value. Any idea what I'm doing wrong? Thanks!</p>

<pre><code>FILE=$1

tail -n10 mylog &gt; $FILE

USCOUNTER=0

cat $FILE | while read line; do
  country=$(echo ""$line"" | cut -d' ' -f1)
  if [ ""US"" = ""$country"" ]; then
        USCOUNTER=`expr $USCOUNTER + 1`
        echo ""US counter $USCOUNTER""
  fi
done
echo ""final $USCOUNTER""
</code></pre>

<p>It outputs:</p>

<pre><code>US counter 1
US counter 2
US counter 3
..
final 0
</code></pre>
","<p>You are using <code>USCOUNTER</code> in a subshell, that's why the variable is not showing in the main shell.</p>

<p>Instead of <code>cat FILE | while ...</code>, do just a <code>while ... done &lt; $FILE</code>. This way, you avoid the common problem of <a href=""http://mywiki.wooledge.org/BashFAQ/024"" rel=""noreferrer"">I set variables in a loop that's in a pipeline. Why do they disappear after the loop terminates? Or, why can't I pipe data to read?</a>:</p>

<pre><code>while read country _; do
  if [ ""US"" = ""$country"" ]; then
        USCOUNTER=$(expr $USCOUNTER + 1)
        echo ""US counter $USCOUNTER""
  fi
done &lt; ""$FILE""
</code></pre>

<p>Note I also replaced the `` expression with a $().</p>

<p>I also replaced <code>while read line; do country=$(echo ""$line"" | cut -d' ' -f1)</code> with <code>while read country _</code>. This allows you to say <code>while read var1 var2 ... varN</code> where <code>var1</code> contains the first word in the line, <code>$var2</code> and so on, until <code>$varN</code> containing the remaining content.</p>
","20681248"
"How can I test if line is empty in shell script?","56825","","<p>I have a shell script like this: </p>

<pre><code>cat file | while read line
do
    # run some commands using $line    
done
</code></pre>

<p>Now I need to check if the line contains any non-whitespace character ([\n\t ]), and if not, skip it.
How can I do this?</p>
","<p>Since <code>read</code> reads whitespace-delimited fields by default, a line containing only whitespace should result in the empty string being assigned to the variable, so you should be able to skip empty lines with just:</p>

<pre><code>[ -z ""$line"" ] &amp;&amp; continue
</code></pre>
","2578289"
"What is EOF!! in the bash script?","56770","","<p>There is a command I don't understand:</p>

<pre><code>custom_command &lt;&lt; EOF!!
</code></pre>

<p>I want to ask what EOF!! is in the bash script. I did find EOF with google, but google will ignore the ""!!"" automatically, so I cannot find EOF!!. </p>

<p>I know the end of the file token, but I don't exactly know what it means with the ""!!"" in the script. Is this a mark to force something to do something like in vim's wq! ?</p>

<p>Plus, why and when should we use EOF!! instead of EOF?</p>
","<p>On the command line, <code>!!</code> would be expanded to the last command executed. Bash will print the line for you:</p>

<pre><code>$ ls
a.txt  b.txt
$ cat &lt;&lt;EOF!!
cat &lt;&lt;EOFls
&gt;
</code></pre>

<p>In a script, though, history expansion is disabled by default, so the exclamation marks are part of the word.</p>

<pre><code>#! /bin/bash
ls
cat &lt;&lt;EOF!!
echo 1
EOFls
echo 2
</code></pre>

<p>Produces:</p>

<pre><code>a.txt  b.txt
script.sh: line 7: warning: here-document at line 3 delimited by end-of-file (wanted `EOF!!')
echo 1
EOFls
echo 2
</code></pre>

<p>To enable history and history expansion in a script, add the following lines:</p>

<pre><code>set -o history
set -H
</code></pre>
","18527367"
"Switching from zsh to bash on OSX, and back again?","56767","","<p>So Im learning to develop in Rails, and have discovered the power of zsh. However, for some of my other tasks, I wish to use normal Bash. Although they are the same, I just feel comfortable with the lay out of bash in some situations. How do I switch back and forth, or turn zsh on and off? Thanks!</p>
","<p>You can just use <code>exec</code> to replace your current shell with a new shell:</p>

<p>Switch to <code>bash</code>:</p>

<pre><code>exec bash
</code></pre>

<p>Switch to <code>zsh</code>:</p>

<pre><code>exec zsh
</code></pre>

<p>This won't affect new terminal windows or anything, but it's convenient.</p>
","10341338"
"count number of columns in bash","56577","","<p>Say I have a large file with many rows and many columns. I'd like to find out how many rows and columns I have using bash.</p>
","<p>Columns: <code>awk '{print NF}' file | sort -nu | tail -n 1</code></p>

<p>Use <code>head -n 1</code> for lowest column count, <code>tail -n 1</code> for highest column count.</p>

<p>Rows: <code>cat file | wc -l</code> or <code>wc -l &lt; file</code> for the <a href=""http://en.wikipedia.org/wiki/Cat_%28Unix%29#Useless_use_of_cat"">UUOC</a> crowd.</p>
","5761234"
"Accessing last x characters of a string in Bash","56494","","<p>I found out that with <code>${string:0:3}</code> one can access the first 3 characters of a string. Is there a equivalently easy method to access the last three characters? </p>
","<p>Last three characters of <code>string</code>:</p>

<pre><code>${string: -3}
</code></pre>

<p>or</p>

<pre><code>${string:(-3)}
</code></pre>

<p>(mind the space between <code>:</code> and <code>-3</code> in the first form).</p>

<p>Please refer to the <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Shell-Parameter-Expansion"" rel=""noreferrer"">Shell Parameter Expansion in the reference manual</a>:</p>

<pre class=""lang-none prettyprint-override""><code>${parameter:offset}
${parameter:offset:length}

Expands to up to length characters of parameter starting at the character
specified by offset. If length is omitted, expands to the substring of parameter
starting at the character specified by offset. length and offset are arithmetic
expressions (see Shell Arithmetic). This is referred to as Substring Expansion.

If offset evaluates to a number less than zero, the value is used as an offset
from the end of the value of parameter. If length evaluates to a number less than
zero, and parameter is not ‘@’ and not an indexed or associative array, it is
interpreted as an offset from the end of the value of parameter rather than a
number of characters, and the expansion is the characters between the two
offsets. If parameter is ‘@’, the result is length positional parameters
beginning at offset. If parameter is an indexed array name subscripted by ‘@’ or
‘*’, the result is the length members of the array beginning with
${parameter[offset]}. A negative offset is taken relative to one greater than the
maximum index of the specified array. Substring expansion applied to an
associative array produces undefined results.

Note that a negative offset must be separated from the colon by at least one
space to avoid being confused with the ‘:-’ expansion. Substring indexing is
zero-based unless the positional parameters are used, in which case the indexing
starts at 1 by default. If offset is 0, and the positional parameters are used,
$@ is prefixed to the list.
</code></pre>

<hr>

<p>Since this answer gets a few regular views, let me add a possibility to address <a href=""https://stackoverflow.com/users/597034"">John Rix</a>'s comment; as he mentions, if your string has length less than 3, <code>${string: -3}</code> expands to the empty string. If, in this case, you want the expansion of <code>string</code>, you may use:</p>

<pre><code>${string:${#string}&lt;3?0:-3}
</code></pre>

<p>This uses the <code>?:</code> ternary if operator, that may be used in <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic"" rel=""noreferrer"">Shell Arithmetic</a>; since as documented, the offset is an arithmetic expression, this is valid.</p>
","19858692"
"How to execute the output of a command within the current shell?","56458","","<p>I'm well aware of the <code>source</code> (aka <code>.</code>) utility, which will take the contents from a file and execute them within the current shell.</p>

<p>Now, I'm transforming some text into shell commands, and then running them, as follows:</p>

<pre><code>$ ls | sed ... | sh
</code></pre>

<p><code>ls</code> is just a random example, the original text can be anything. <code>sed</code> too, just an example for transforming text. The interesting bit is <code>sh</code>. I pipe whatever I got to <code>sh</code> and it runs it.</p>

<p>My problem is, that means starting a new sub shell. I'd rather have the commands run within my current shell. Like I would be able to do with <code>source some-file</code>, if I had the commands in a text file.</p>

<p>I don't want to create a temp file because feels dirty.</p>

<p>Alternatively, I'd like to start my sub shell with the exact same characteristics as my current shell.</p>

<h3>update</h3>

<p>Ok, the solutions using backtick certainly work, but I often need to do this while I'm checking and changing the output, so I'd much prefer if there was a way to pipe the result into something in the end.</p>

<h3>sad update</h3>

<p>Ah, the <code>/dev/stdin</code> thing looked so pretty, but, in a more complex case, it didn't work.</p>

<p>So, I have this:</p>

<pre><code>find . -type f -iname '*.doc' | ack -v '\.doc$' | perl -pe 's/^((.*)\.doc)$/git mv -f $1 $2.doc/i' | source /dev/stdin
</code></pre>

<p>Which ensures all <code>.doc</code> files have their extension lowercased.</p>

<p>And which incidentally, can be handled with <code>xargs</code>, but that's besides the point.</p>

<pre><code>find . -type f -iname '*.doc' | ack -v '\.doc$' | perl -pe 's/^((.*)\.doc)$/$1 $2.doc/i' | xargs -L1 git mv
</code></pre>

<p>So, when I run the former, it'll exit right away, nothing happens.</p>
","<pre><code>$ ls | sed ... | source /dev/stdin
</code></pre>

<p><strong>UPDATE:</strong> This works in bash 4.0, as well as tcsh, and dash (if you change <code>source</code> to <code>.</code>).  Apparently this was buggy in bash 3.2.  From the <a href=""http://www.mail-archive.com/bug-bash@gnu.org/msg04800.html"" rel=""noreferrer"">bash 4.0 release notes</a>:</p>

<blockquote>
  <p>Fixed a bug that caused `.' to fail to read and execute commands from non-regular files such as devices or named pipes.</p>
</blockquote>
","1280047"
"check if file exists on remote host with ssh","56358","","<p>I would like to check if a certain file exists on the remote host.
I tried this:</p>

<pre><code>$ if [ ssh reg@localhost -p 19999 -e /home/reg/Dropbox/New_semiosNET/Research_and_Development/Puffer_and_Traps/Repeaters_Network/UBC_LOGS/log1349544129.tar.bz2 ] then echo ""okidoke""; else ""not okay!"" fi
-sh: syntax error: unexpected ""else"" (expecting ""then"") 
</code></pre>
","<p>Answers for this question are everywhere. The following is a simple approach. </p>

<pre><code>if ssh $HOST stat $FILE_PATH \&gt; /dev/null 2\&gt;\&amp;1
            then
                    echo ""File exists""
            else
                    echo ""File does not exist""

fi
</code></pre>
","12845254"
"Shell scripting, store command output in variable and preserve formatting","56277","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/613572/capturing-multiple-line-output-to-a-bash-variable"">Capturing multiple line output to a bash variable</a>  </p>
</blockquote>



<p>I have what is probably a basic scripting question, but I haven't been able to find an answer anywhere that I've looked.</p>

<p>I have an awk script that processes a file, and spits out a list of disabled systems. When I call it manually from the command line, I get formatted output back:</p>

<pre><code>$awk -f awkscript datafile

The following notifications are currently disabled:

host: bar
host: foo
</code></pre>

<p>I am writing a wrapper script to call from my crontab, which will run the awk script, determine if there is any output, and email me if there is. It looks like (simplified):</p>

<pre><code>BODY=`awk -f awkscript datafile`
if [ -n ""$BODY"" ]
then
echo $BODY | mailx -s ""Disabled notifications"" me@mail.address
else
echo ""Nothing is disabled""
fi
</code></pre>

<p>When run this way, and confirmed by adding an <code>echo $BODY</code> into the script, the output is stripped of the formatting (newlines are mainly what I'm concerned with), so I get output that looks like:</p>

<pre><code>The following notitifications are currently disabled: host: bar host: foo
</code></pre>

<p>I'm trying to figure out how to preserve the formatting that is present if I run the command manually.</p>

<p>Things I've tried so far:</p>

<pre><code>echo -e `cat datafile | awkscript` &gt; /tmp/tmpfile
echo -e /tmp/tmpfile
</code></pre>

<p>I tried this because on my system (Solaris 5.10), using echo without the -e ignores standard escape sequences like \n . Didn't work. I checked the tmpfile, and it doesn't have any formatting in it, so the problem is happening when storing the output, not when printing it out.</p>

<pre><code>BODY=""$(awk -f awkscript datafile)""
echo -e ""$BODY""
</code></pre>

<p>I tried this because everything I could find, including some other questions here on stackoverflow said that the problem was that the shell would replace whitespace codes with spaces if it wasn't quoted. Didn't work.</p>

<p>I've tried using printf instead of echo, using $(command) instead of `command`, and using a tempfile instead of a variable to store the output, but nothing seems to retain the formatting.</p>

<p>What am I missing, or is there another way to do this which avoids this problem all together?</p>
","<pre><code>BODY=`awk -f awkscript datafile`
if [ -n ""$BODY"" ]
then echo ""$BODY"" | mailx -s ""Disabled notifications"" me@mail.address
else echo ""Nothing is disabled""
fi
</code></pre>

<p>Note the double quotes in the <code>echo</code>.</p>

<p>You can simplify this version, too:</p>

<pre><code>echo -e `cat datafile | awkscript` &gt; /tmp/tmpfile
echo -e /tmp/tmpfile
</code></pre>

<p>to just:</p>

<pre><code>tmpfile=/tmp/tmpfile.$$
awkscript &gt; $tmpfile
if [ -s $tmpfile ]
then mailx -s ""Disabled notifications"" me@mail.address &lt; $tmpfile
else echo ""Nothing is disabled""
fi
</code></pre>

<p>Backquotes are useful (but better written as <code>$(cmd args)</code>) but do not have to be used everywhere.</p>
","8837775"
"Bash: run one command after another, even if I suspend the first one (Ctrl-z)","56058","","<p>I know in bash I can run one command after another by separating them by semicolons, like</p>

<pre><code>$ command1; command2
</code></pre>

<p>Or if I only want <code>command2</code> to run only if <code>command1</code> succeeds, using <code>&amp;&amp;</code>:</p>

<pre><code>$ command1 &amp;&amp; command2
</code></pre>

<p>This works, but if I suspend <code>command1</code> using <code>Ctrl-z</code>, in the first case, it runs <code>command2</code> immediately, and in the second case, it doesn't run it at all.  How can I run commands in sequence, but still be able to suspend the first command, but not have the second run until I have restarted it (with <code>fg</code>) and it finishes?  I'd prefer something as simple to type as possible, as I would like to do this interactively.  Or maybe I just need to set an option somewhere.</p>

<p>By the way, what is the proper term for what <code>Ctrl-z</code> does?</p>
","<p>The following should do it:</p>

<pre><code>(command1; command2)
</code></pre>

<p>Note the added parentheses.</p>
","13600474"
"Bash function to find newest file matching pattern","56053","","<p>In Bash, I would like to create a function that returns the filename of the newest file that matches a certain pattern.  For example, I have a directory of files like:</p>

<pre><code>Directory/
   a1.1_5_1
   a1.2_1_4
   b2.1_0
   b2.2_3_4
   b2.3_2_0
</code></pre>

<p>I want the newest file that starts with 'b2'.  How do I do this in bash?  I need to have this in my <code>~/.bash_profile</code> script.</p>
","<p>The <code>ls</code> command has a parameter <code>-t</code> to sort by time. You can then grab the first (newest) with <code>head -1</code>.</p>

<pre><code>ls -t b2* | head -1
</code></pre>

<p>But beware: <a href=""http://mywiki.wooledge.org/ParsingLs"" rel=""noreferrer"">Why you shouldn't parse the output of ls</a></p>

<p>My personal opinion: parsing <code>ls</code> is only dangerous when the filenames can contain funny characters like spaces or newlines. If you can guarantee that the filenames will not contain funny characters then parsing <code>ls</code> is quite safe.</p>

<p>If you are developing a script which is meant to be run by many people on many systems in many different situations then I very much do recommend to not parse <code>ls</code>.</p>

<p>Here is how to do it ""right"": <a href=""http://mywiki.wooledge.org/BashFAQ/003"" rel=""noreferrer"">How can I find the latest (newest, earliest, oldest) file in a directory?</a></p>

<pre><code>unset -v latest
for file in ""$dir""/*; do
  [[ $file -nt $latest ]] &amp;&amp; latest=$file
done
</code></pre>
","5886002"
"gpg encrypt file without keyboard interaction","55933","","<p>I am running next command within a crontab to encrypt a file and I don't want a keyboard interaction</p>

<pre><code>echo ""PASSPHRASE"" | gpg --passphrase-fd 0 -r USER --encrypt FILENAME.TXT
</code></pre>

<p>but I have this answer:</p>

<pre><code>gpg: C042XXXX: There is no assurance this key belongs to the named user

pub  40XXX/C042XXXX 2012-01-11 Name LastName. (comment) &lt;user@email.com&gt;
 Primary key fingerprint: XXXX XXXX XXXX XXXX XXXX  XXXX XXXX XXXX XXXX XXXX
      Subkey fingerprint: XXXX XXXX XXXX XXXX XXXX  XXXX XXXX XXXX XXXX XXXX

It is NOT certain that the key belongs to the person named
in the user ID.  If you *really* know what you are doing,
you may answer the next question with yes.

Use this key anyway? (y/N) 
</code></pre>
","<p>As David intimated, the problem here is that gpg doesn't trust the public key you're using to encrypt. You could sign the key as he explained.</p>

<p>An alternative--especially if the key might be changing occasionally--would be to tack on <code>--trust-model always</code> to your gpg command.</p>

<p>Here's the relevant bit from the man page:</p>

<blockquote>
  <pre class=""lang-none prettyprint-override""><code>--trust-model pgp|classic|direct|always|auto

     Set what trust model GnuPG should follow. The models are:

     pgp    This is the Web of Trust combined with trust signatures as used in
            PGP 5.x and later. This is the default trust model when creating a
            new trust database.

     classic
            This is the standard Web of Trust as used in PGP 2.x and earlier.

     direct Key validity is set directly by the user and  not  calculated  via
            the Web of Trust.

     always Skip  key  validation  and  assume that used keys are always fully
            trusted. You generally won't use this unless you  are  using  some
            external  validation  scheme.  This  option  also  suppresses  the
            ""[uncertain]"" tag printed with signature checks when there  is  no
            evidence that the user ID is bound to the key.

     auto   Select  the  trust  model depending on whatever the internal trust
            database says. This is  the  default  model  if  such  a  database
            already exists.
</code></pre>
</blockquote>
","9466566"
"How to add a new line in the bash string?","55907","","<p>The new line <code>\n</code> is not taken account in the shell strings</p>

<pre><code>root@toto:~# str=""aaa\nbbbb""
root@toto:~# echo $str
aaa\nbbbb
</code></pre>

<p>expected result:</p>

<pre><code>root@toto:~# echo $str
aaa
bbbb
</code></pre>

<p>How to add a new line in the string?</p>
","<pre><code>$ echo ""a\nb""
a\nb
$ echo -e ""a\nb""
a
b
</code></pre>
","17950785"
"how can I count the amount of characters in a bash variable","55720","","<p>how can I count all characters in a bash variable? so for instance if I had</p>

<pre><code>""stackoverflow""
</code></pre>

<p>the result would be </p>

<pre><code>""13""
</code></pre>

<p>I've searched around on google, but so far have only been able to find out how to count specific characters (say the letter ""a"" for instance)</p>

<p>thanks for your help!</p>
","<p>Using the <code>${#VAR}</code> syntax will calculate the number of characters in a variable. </p>

<p><a href=""http://linux.about.com/od/bgb_guide/a/gdebgb78t01.htm"" rel=""noreferrer"">http://linux.about.com/od/bgb_guide/a/gdebgb78t01.htm</a></p>
","15596250"
"Bash, serial I/O and Arduino","55716","","<p>So, I'm in a bit over my head, and I feel like I'm very close to a solution, but it's just not working quite yet. Here's my situation:</p>

<p>I'm working with an Arduino microcontroller, and I'm attempting to write two Bash scripts (right now running in Mac&nbsp;OS&nbsp;X 10.6) which will (a) print all serial data coming out of the Arduino unit to the standard output, and (b) allow me to send serial data to the Arduino unit. These scripts will then be called using Adobe AIR's NativeProcess API to allow a tight integration between the Arduino unit and a Flex <a href=""http://en.wikipedia.org/wiki/Adobe_Integrated_Runtime"" rel=""noreferrer"">Adobe AIR</a> application.</p>

<p>My two scripts are very simple -</p>

<p>Here's my WriteToSerial.sh script:</p>

<pre><code>echo $1 &gt; $2
</code></pre>

<p>($1 is obviously my string, $2 is the location of the serial port - currently /dev/tty.usbserial-A800eIUj)</p>

<p>And here's my ReadSerialOutput.sh script:</p>

<pre><code>tail -f $1
</code></pre>

<p>($1 is the location of my serial port, currently /dev/tty.usbserial-A800eIUj)</p>

<p>When I call either of these scripts (or even if I just type the commands directly into the Bash console), my computer just hangs - I can type characters, but nothing happens until I <kbd>Ctrl</kbd> + <kbd>C</kbd> out of the process.</p>

<p>However, if I open the Arduino IDE and turn on the Serial Monitor, then <code>tail -f</code> the port, close the serial monitor, and then echo ""test"" > serial port, everything works just great.</p>

<p>This suggests to me that opening the Serial Monitor within the Arduino IDE is somehow initializing the serial port, which in turn allows me to tail it with no problem. This in turn suggests to me that I'm simply failing to input some sort of initialization command. However, I've been searching high and low for days and can't seem to find anything that addresses this issue.</p>

<p>What is the solution?</p>
","<p>Try using the tool <a href=""http://tldp.org/HOWTO/Serial-HOWTO-12.html#ss12.4"" rel=""noreferrer"">stty</a>:</p>

<pre><code>stty -F /dev/my_serial_port &lt;baud_rate&gt; cs8 cread clocal
</code></pre>

<p>As always, read the manpage before applying the above.  <code>cread</code> allows you to receive data. You may want to omit <code>clocal</code> if you are using flow control.  If you aren't sure what the above settings are, ask, and I can write up a more complete answer.</p>
","3926278"
"BASH script: Downloading consecutive numbered files with wget","55437","","<p>I have a web server that saves the logs files of a web application numbered. A file name example for this would be:</p>

<pre><code>dbsclog01s001.log
dbsclog01s002.log
dbsclog01s003.log
</code></pre>

<p>The last 3 digits are the counter and they can get sometime up to 100.</p>

<p>I usually open a web browser, browse to the file like:</p>

<pre><code>http://someaddress.com/logs/dbsclog01s001.log
</code></pre>

<p>and save the files. This of course gets a bit annoying when you get 50 logs.
I tried to come up with a BASH script for using wget and passing</p>

<pre><code>http://someaddress.com/logs/dbsclog01s*.log
</code></pre>

<p>but I am having problems with my the script. 
Anyway, anyone has a sample on how to do this?</p>

<p>thanks!</p>
","<pre><code>#!/bin/sh

if [ $# -lt 3 ]; then
        echo ""Usage: $0 url_format seq_start seq_end [wget_args]""
        exit
fi

url_format=$1
seq_start=$2
seq_end=$3
shift 3

printf ""$url_format\\n"" `seq $seq_start $seq_end` | wget -i- ""$@""
</code></pre>

<pre>
$ ./seq_wget http://someaddress.com/logs/dbsclog01s%03d.log 1 50
</pre>

<p>Or, if you have Bash 4.0, you could just type</p>

<pre>
$ wget http://someaddress.com/logs/dbsclog01s{001..050}.log
</pre>

<p>Or, if you have <code>curl</code> instead of <code>wget</code>, you could follow Dennis Williamson's answer.</p>
","1427719"
"Bash: Inserting a line in a file at a specific location","55432","","<p>I am writing a script that will require me to add lines in a specific part of a config file. For example</p>

<p>Before:</p>

<pre><code>ServerActors=IpServer.UdpServerUplink MasterServerAddress=unreal.epicgames.com MasterServerPort=27900
ServerActors=IpServer.UdpServerUplink MasterServerAddress=master0.gamespy.com MasterServerPort=27900
ServerActors=IpServer.UdpServerUplink MasterServerAddress=master.mplayer.com MasterServerPort=27900
ServerActors=UWeb.WebServer
</code></pre>

<p>After:</p>

<pre><code>ServerActors=IpServer.UdpServerUplink MasterServerAddress=unreal.epicgames.com MasterServerPort=27900
ServerActors=IpServer.UdpServerUplink MasterServerAddress=master0.gamespy.com MasterServerPort=27900
ServerActors=IpServer.UdpServerUplink MasterServerAddress=master.mplayer.com MasterServerPort=27900
ServerActors=IpServer.UdpServerUplink MasterServerAddress=master.qtracker.com MasterServerPort=27900
ServerActors=UWeb.WebServer
</code></pre>

<p>As you can see there is a new line added. How can my bash script insert the line? I'm guessing I will need to use sed.</p>
","<p>If you want to add a line after a specific string match:</p>

<pre><code>$ awk '/master.mplayer.com/ { print; print ""new line""; next }1' foo.input
ServerActors=IpServer.UdpServerUplink MasterServerAddress=unreal.epicgames.com MasterServerPort=27900
ServerActors=IpServer.UdpServerUplink MasterServerAddress=master0.gamespy.com MasterServerPort=27900
ServerActors=IpServer.UdpServerUplink MasterServerAddress=master.mplayer.com MasterServerPort=27900
new line
ServerActors=UWeb.WebServer
</code></pre>
","18276534"
"What is proper way to test a bash function return value?","55370","","<p>I would like to test a bash function return value in an if statement like this:</p>

<pre><code>if [[ func arg ]] ; then …
</code></pre>

<p>but I get error messages like: conditional binary operator expected.</p>

<p>What is the right way to do this?</p>

<p>Is it:</p>

<pre><code> if [[ $(func arg) ]] ; then ...
</code></pre>
","<p>If it was the exit code and not the result you could just use</p>

<pre><code>if func arg; then ...
</code></pre>

<p>If you cannot make the function return a proper exit code (with <code>return N</code>), and you have to use string results, use @Alex Gitelman answer.</p>

<p><code>$ help if</code>:</p>

<blockquote>
  <p><code>if: if COMMANDS; then COMMANDS; [ elif COMMANDS; then COMMANDS; ]... [ else COMMANDS; ] fi</code></p>
  
  <p>Execute commands based on conditional.</p>
  
  <p>The <code>if COMMANDS</code> list is executed.  If its exit status is zero, then the
      <code>then COMMANDS</code> list is executed.  Otherwise, each <code>elif COMMANDS</code> list is
      executed in turn, and if its exit status is zero, the corresponding
      <code>then COMMANDS</code> list is executed and the if command completes.  Otherwise,
      the `else COMMANDS' list is executed, if present.  The exit status of the
      entire construct is the exit status of the last command executed, or zero
      if no condition tested true.</p>
  
  <p>Exit Status:
      Returns the status of the last command executed.</p>
</blockquote>
","6241283"
"error: command 'gcc' failed with exit status 1 on CentOS","55349","","<p>I'm trying to install lxml package on CentOS using <code>sudo pip install lxml</code> and its throwing this error right at the end:</p>

<h2>error:</h2>

<pre><code>error: command 'gcc' failed with exit status 1

---------------------------------------

Command /usr/bin/python -c ""import setuptools;__file__='/tmp/pip-build-root/lxml/setup.py';exec(compile(open(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))"" install --record /tmp/pip-PjviBq-record/install-record.txt --single-version-externally-managed failed with error code 1 in /tmp/pip-build-root/lxml
Storing complete log in /root/.pip/pip.log

[hg@user-centos-1 ~]$ error: command 'gcc' failed with exit status 1
bash: error:: command not found
</code></pre>
","<p>Is gcc installed?</p>

<pre><code>sudo yum install gcc
</code></pre>
","19955857"
"How to extract duration time from ffmpeg output?","55320","","<p>To get a lot of information about a media file one can do</p>

<pre><code>ffmpeg -i &lt;filename&gt;
</code></pre>

<p>where it will output a lot of lines, one in particular</p>

<pre><code>Duration: 00:08:07.98, start: 0.000000, bitrate: 2080 kb/s
</code></pre>

<p>I would like to output only <code>00:08:07.98</code>, so I try</p>

<pre><code>ffmpeg -i file.mp4 | grep Duration| sed 's/Duration: \(.*\), start/\1/g'
</code></pre>

<p>But it prints everything, and not just the length.</p>

<p>Even <code>ffmpeg -i file.mp4 | grep Duration</code> outputs everything.</p>

<p>How do I get just the duration length?</p>
","<p>ffmpeg is writing that information to <code>stderr</code>, not <code>stdout</code>. Try this:</p>

<pre><code>ffmpeg -i file.mp4 2&gt;&amp;1 | grep Duration | sed 's/Duration: \(.*\), start/\1/g'
</code></pre>

<p>Notice the redirection of <code>stderr</code> to <code>stdout</code>: <code>2&gt;&amp;1</code></p>

<p><strong>EDIT:</strong></p>

<p>Your <code>sed</code> statement isn't working either. Try this:</p>

<pre><code>ffmpeg -i file.mp4 2&gt;&amp;1 | grep Duration | awk '{print $2}' | tr -d ,
</code></pre>
","6239379"
"Using the grep and cut delimiter command (in bash shell scripting UNIX) - and kind of ""reversing"" it?","55298","","<p>So I have a file with the text: </p>

<pre><code>puddle2_1557936:/home/rogers.williams/folderz/puddle2
</code></pre>

<p>I want to use the grep command</p>

<pre><code>grep puddle2_1557936
</code></pre>

<p>Mixed in with the cut command (or another command if neccessary) to display just this part:</p>

<pre><code>/home/rogers.williams/folderz/puddle2
</code></pre>

<p>So far, I know that if do this</p>

<pre><code> grep puddle2_1557936 | cut -d "":"" -f1
</code></pre>

<p>then it will display</p>

<pre><code>puddle2_1557936
</code></pre>

<p>So is there anyway to kind of ""inverse"" the delimiter cut command?</p>

<p>NOTE: The solution <em>must</em> start off with <code>grep puddle2_15579636</code>.</p>
","<p>You don't need to change the delimiter to display the right part of the string with <code>cut</code>.</p>

<p>The <code>-f</code> switch of the <code>cut</code> command is the n-TH element separated by your delimiter : <code>:</code>, so you can just type :</p>

<pre><code> grep puddle2_1557936 | cut -d "":"" -f2
</code></pre>

<hr>

<p>Another solutions (adapt it a bit) if you want fun :</p>

<p>Using <a href=""/questions/tagged/grep"" class=""post-tag"" title=""show questions tagged &#39;grep&#39;"" rel=""tag"">grep</a> :</p>

<pre><code>grep -oP 'puddle2_1557936:\K.*' &lt;&lt;&lt; 'puddle2_1557936:/home/rogers.williams/folderz/puddle2'                                                                        
/home/rogers.williams/folderz/puddle2
</code></pre>

<p>or still with <a href=""http://www.perlmonks.org/?node_id=518444"" rel=""nofollow noreferrer"">look around</a> <a href=""/questions/tagged/regex"" class=""post-tag"" title=""show questions tagged &#39;regex&#39;"" rel=""tag"">regex</a></p>

<pre><code>grep -oP '(?&lt;=puddle2_1557936:).*' &lt;&lt;&lt; 'puddle2_1557936:/home/rogers.williams/folderz/puddle2'                                                                    
/home/rogers.williams/folderz/puddle2
</code></pre>

<p>or with <a href=""/questions/tagged/perl"" class=""post-tag"" title=""show questions tagged &#39;perl&#39;"" rel=""tag"">perl</a> :</p>

<pre><code>perl -lne '/puddle2_1557936:(.*)/ and print $1' &lt;&lt;&lt; 'puddle2_1557936:/home/rogers.williams/folderz/puddle2'                                                      
/home/rogers.williams/folderz/puddle2
</code></pre>

<p>or using <a href=""/questions/tagged/ruby"" class=""post-tag"" title=""show questions tagged &#39;ruby&#39;"" rel=""tag"">ruby</a> (thanks to <a href=""https://stackoverflow.com/users/7552/glenn-jackman"">glenn jackman</a>)</p>

<pre><code>ruby -F: -ane '/puddle2_1557936/ and puts $F[1]' &lt;&lt;&lt; 'puddle2_1557936:/home/rogers.williams/folderz/puddle2'
/home/rogers.williams/folderz/puddle2
</code></pre>

<p>or with <a href=""/questions/tagged/awk"" class=""post-tag"" title=""show questions tagged &#39;awk&#39;"" rel=""tag"">awk</a> :</p>

<pre><code>awk -F'puddle2_1557936:' '{print $2}'  &lt;&lt;&lt; 'puddle2_1557936:/home/rogers.williams/folderz/puddle2'
/home/rogers.williams/folderz/puddle2
</code></pre>

<p>or with <a href=""/questions/tagged/python"" class=""post-tag"" title=""show questions tagged &#39;python&#39;"" rel=""tag"">python</a> :</p>

<pre><code>python -c 'import sys; print(sys.argv[1].split(""puddle2_1557936:"")[1])' 'puddle2_1557936:/home/rogers.williams/folderz/puddle2'
/home/rogers.williams/folderz/puddle2
</code></pre>

<p>or using only <a href=""/questions/tagged/bash"" class=""post-tag"" title=""show questions tagged &#39;bash&#39;"" rel=""tag"">bash</a> :</p>

<pre><code>IFS=: read _ a &lt;&lt;&lt; ""puddle2_1557936:/home/rogers.williams/folderz/puddle2""
echo ""$a""
/home/rogers.williams/folderz/puddle2
</code></pre>

<p>or using <a href=""/questions/tagged/js"" class=""post-tag"" title=""show questions tagged &#39;js&#39;"" rel=""tag"">js</a> in a <a href=""/questions/tagged/shell"" class=""post-tag"" title=""show questions tagged &#39;shell&#39;"" rel=""tag"">shell</a> :</p>

<pre><code>js&lt;&lt;EOF
var x = 'puddle2_1557936:/home/rogers.williams/folderz/puddle2'
print(x.substr(x.indexOf("":"")+1))
EOF
/home/rogers.williams/folderz/puddle2
</code></pre>

<p>or using <a href=""/questions/tagged/php"" class=""post-tag"" title=""show questions tagged &#39;php&#39;"" rel=""tag"">php</a> in a <a href=""/questions/tagged/shell"" class=""post-tag"" title=""show questions tagged &#39;shell&#39;"" rel=""tag"">shell</a> :</p>

<pre><code>php -r 'preg_match(""/puddle2_1557936:(.*)/"", $argv[1], $m); echo ""$m[1]\n"";' 'puddle2_1557936:/home/rogers.williams/folderz/puddle2' 
/home/rogers.williams/folderz/puddle2
</code></pre>
","17202298"
"""sed"" command in bash","55274","","<p>Could someone explain this command for me:</p>

<pre><code>cat | sed -e 's,%,$,g' | sudo tee /etc/init.d/dropbox &lt;&lt; EOF
   echo ""Hello World""
EOF
</code></pre>

<p>What does the ""sed"" command do?</p>
","<p><code>sed</code> is the <a href=""http://unixhelp.ed.ac.uk/CGI/man-cgi?sed"" rel=""noreferrer"">Stream EDitor</a>. It can do a whole pile of <a href=""http://sed.sourceforge.net/sed1line.txt"" rel=""noreferrer"">really cool things</a>, but the most common is text replacement.</p>

<p>The <code>s,%,$,g</code> part of the command line is the <code>sed</code> command to execute. The <code>s</code> stands for substitute, the <code>,</code> characters are delimiters (other characters can be used; <code>/</code>, <code>:</code> and <code>@</code> are popular). The <code>%</code> is the pattern to match (here a literal percent sign) and the <code>$</code> is the second pattern to match (here a literal dollar sign). The <code>g</code> at the end means to <code>g</code>lobally replace on each line (otherwise it would only update the first match).</p>
","3984855"
"Batch renaming files with Bash","55268","","<p>How can Bash rename a series of packages to remove their version numbers? I've been toying around with both <code>expr</code> and <code>%%</code>, to no avail.</p>

<p>Examples:</p>

<p><code>Xft2-2.1.13.pkg</code> becomes <code>Xft2.pkg</code></p>

<p><code>jasper-1.900.1.pkg</code> becomes <code>jasper.pkg</code></p>

<p><code>xorg-libXrandr-1.2.3.pkg</code> becomes <code>xorg-libXrandr.pkg</code></p>
","<p>You could use bash's parameter expansion feature</p>

<pre><code>for i in *.pkg ; do mv ""$i"" ""${i/-[0-9.]*.pkg/.pkg}"" ; done
</code></pre>

<p>Quotes are needed for filenames with spaces.</p>
","602770"
"Simple Socket Server in Bash?","55265","","<p>Is there a way to quickly bind to a TCP port/ip address and simply print out all information to STDOUT? I have a simple debugging solution which writes things to 127.0.0.1:4444 and I'd like to be able to simply bind up a port from bash and print everything that comes across. Is there an easy way to do this?</p>
","<pre><code>$ nc -k -l 4444 &gt; filename.out
</code></pre>

<p>see <a href=""http://linux.die.net/man/1/nc"" rel=""noreferrer""><code>nc(1)</code></a></p>
","4739260"
"How do I grab an INI value within a shell script?","55253","","<p>I have a parameters.ini file, such as:</p>

<pre><code>[parameters.ini]
    database_user    = user
    database_version = 20110611142248
</code></pre>

<p>I want to read in and use the database version specified in the parameters.ini file from within a bash shell script so I can process it.
</p>

<pre><code>#!/bin/sh    
# Need to get database version from parameters.ini file to use in script    
php app/console doctrine:migrations:migrate $DATABASE_VERSION
</code></pre>

<p>How would I do this?</p>
","<p>How about grepping for that line then using awk</p>

<pre><code>version=$(awk -F ""="" '/database_version/ {print $2}' parameters.ini)
</code></pre>
","6318837"
"Sed not recognizing \t instead it is treating it as 't' why?","54966","","<pre><code>sed ""s/\(.*\)/\t\1/"" $filename &gt; $sedTmpFile &amp;&amp; mv $sedTmpFile $filename
</code></pre>

<p>I am expecting this sed script to insert a tab in font of every line in <code>$filename</code> however it is not.  For some reason it is inserting a t instead..  Strange..</p>
","<p>Not all versions of <code>sed</code> understand <code>\t</code>. Just insert a literal tab instead (press <kbd>Ctrl</kbd>-<kbd>V</kbd> then <kbd>Tab</kbd>).</p>
","2610121"
"Is there a way to create key-value pairs in Bash script?","54961","","<p>I am trying to create a dictionary of key value pair using Bash script. I am trying using this logic:</p>

<pre><code>declare -d dictionary
defaults write ""$dictionary"" key -string ""$value""
</code></pre>

<p>...where <code>$dictionary</code> is a variable, but this is not working.</p>

<p>Is there a way to create key-value pairs in Bash script?</p>
","<p>In bash version 4 associative arrays were introduced.</p>

<pre><code>declare -A arr

arr[""key1""]=val1

arr+=( [""key2""]=val2 [""key3""]=val3 )
</code></pre>

<p>The arr array now contains the three key value pairs. Bash is fairly limited what you can do with them though, no sorting or popping etc.</p>

<pre><code>for key in ${!arr[@]}; do
    echo ${key} ${arr[${key}]}
done
</code></pre>

<p>Will loop over all key values and echo them out. </p>
","14371026"
"How do I assign the output of a command into an array?","54849","","<p>I need to assign the results from a <code>grep</code> to an array... for example</p>

<pre><code>grep -n ""search term"" file.txt | sed 's/:.*//'
</code></pre>

<p>This resulted in a bunch of lines with line numbers in which the search term was found.</p>

<pre><code>1
3
12
19
</code></pre>

<p>What's the easiest way to assign them to a bash array? If I simply assign them to a variable they become a space-separated string.</p>
","<p>To assign the output to an array, you need to use a command substitution inside of an array assignment. </p>

<pre><code>arr=($(grep -n ""search term"" file.txt | sed 's/:.*//'))
</code></pre>

<p>The inner $() runs the command while the outer () causes the output to be an array. The problem with this is that it will not work with files containing spaces. To handle this, you can set IFS to \n.</p>

<pre><code>IFS=$'\n'
arr=($(grep -n ""search term"" file.txt | sed 's/:.*//'))
unset IFS
</code></pre>

<p>You can also cut out the need for sed by performing an expansion on each element of the array:</p>

<pre><code>arr=($(grep -n ""search term"" file.txt))
arr=(""${arr[@]%%:*}"")
</code></pre>
","9449633"
"Fast way of finding lines in one file that are not in another?","54838","","<p>I have two large files (sets of filenames). Roughly 30.000 lines in each file. I am trying to find a fast way of finding lines in file1 that are not present in file2.</p>

<p>For example, if this is file1:</p>

<pre><code>line1
line2
line3
</code></pre>

<p>And this is file2:</p>

<pre><code>line1
line4
line5
</code></pre>

<p>Then my result/output should be:</p>

<pre><code>line2
line3
</code></pre>

<p>This works:</p>

<p><code>grep -v -f file2 file1</code></p>

<p>But it is very, very slow when used on my large files.</p>

<p>I suspect there is a good way to do this using diff(), but the output should be <em>just</em> the lines, nothing else, and I cannot seem to find a switch for that.</p>

<p>Can anyone help me find a fast way of doing this, using bash and basic linux binaries?</p>

<p>EDIT: To follow up on my own question, this is the best way I have found so far using diff():</p>

<pre><code>diff file2 file1 | grep '^&gt;' | sed 's/^&gt;\ //'
</code></pre>

<p>Surely, there must be a better way?</p>
","<p>You can achieve this by controlling the formatting of the old/new/unchanged lines in GNU <code>diff</code> output:</p>

<pre><code>diff --new-line-format="""" --unchanged-line-format=""""  file1 file2
</code></pre>

<p>The input files <em>should be sorted</em> for this to work. With <code>bash</code> (and <code>zsh</code>) you can sort in-place with process substitution <code>&lt;( )</code>:</p>

<pre><code>diff --new-line-format="""" --unchanged-line-format="""" &lt;(sort file1) &lt;(sort file2)
</code></pre>

<p>In the above <em>new</em> and <em>unchanged</em> lines are suppressed,  so only <em>changed</em> (i.e. removed lines in your case) are output. You may also use a few <code>diff</code> options that other solutions don't offer, such as <code>-i</code> to ignore case, or various whitespace options (<code>-E</code>, <code>-b</code>, <code>-v</code> etc) for less strict matching.</p>

<hr>

<p><strong>Explanation</strong></p>

<p>The options <code>--new-line-format</code>, <code>--old-line-format</code> and <code>--unchanged-line-format</code> let you control the way <code>diff</code> formats the differences, similar to  <code>printf</code> format specifiers. These options format <em>new</em> (added), <em>old</em> (removed) and <em>unchanged</em> lines respectively. Setting one to empty """" prevents output of that kind of line.</p>

<p>If you are familiar with <em>unified diff</em> format, you can partly recreate it with:</p>

<pre><code>diff --old-line-format=""-%L"" --unchanged-line-format="" %L"" \
     --new-line-format=""+%L"" file1 file2
</code></pre>

<p>The <code>%L</code> specifier is the line in question, and we prefix each with ""+"" ""-"" or "" "", like <code>diff -u</code>
(note that it only outputs differences, it lacks the <code>---</code> <code>+++</code> and <code>@@</code> lines at the top of each grouped change).
You can also use this to do other useful things like <a href=""https://unix.stackexchange.com/questions/34874/diff-output-line-numbers"">number each line</a> with <code>%dn</code>.</p>

<hr>

<p>The <code>diff</code> method (along with other suggestions <code>comm</code> and <code>join</code>) only produce the expected output with <em>sorted</em> input, though you can use <code>&lt;(sort ...)</code> to sort in place. Here's a simple <code>awk</code> (nawk) script (inspired by the scripts linked-to in Konsolebox's answer) which accepts arbitrarily ordered input files, <em>and</em> outputs the missing lines in the order they occur in file1.</p>

<pre class=""lang-pl prettyprint-override""><code># output lines in file1 that are not in file2
BEGIN { FS="""" }                         # preserve whitespace
(NR==FNR) { ll1[FNR]=$0; nl1=FNR; }     # file1, index by lineno
(NR!=FNR) { ss2[$0]++; }                # file2, index by string
END {
    for (ll=1; ll&lt;=nl1; ll++) if (!(ll1[ll] in ss2)) print ll1[ll]
}
</code></pre>

<p>This stores the entire contents of file1 line by line in a line-number indexed array <code>ll1[]</code>, and the entire contents of file2 line by line in a line-content indexed associative array <code>ss2[]</code>. After both files are read, iterate over <code>ll1</code> and use the <code>in</code> operator to determine if the line in file1 is present in file2. (This will have have different output to the <code>diff</code> method if there are duplicates.)</p>

<p>In the event that the files are sufficiently large that storing them both causes a memory problem, you can trade CPU for memory by storing only file1 and deleting matches along the way as file2 is read.</p>

<pre class=""lang-pl prettyprint-override""><code>BEGIN { FS="""" }
(NR==FNR) {  # file1, index by lineno and string
  ll1[FNR]=$0; ss1[$0]=FNR; nl1=FNR;
}
(NR!=FNR) {  # file2
  if ($0 in ss1) { delete ll1[ss1[$0]]; delete ss1[$0]; }
}
END {
  for (ll=1; ll&lt;=nl1; ll++) if (ll in ll1) print ll1[ll]
}
</code></pre>

<p>The above stores the entire contents of file1 in two arrays, one indexed by line number <code>ll1[]</code>, one indexed by line content <code>ss1[]</code>. Then as file2 is read, each matching line is deleted from <code>ll1[]</code> and <code>ss1[]</code>. At the end the remaining lines from file1 are output, preserving the original order.</p>

<p>In this case, with the problem as stated, you can also <em>divide and conquer</em> using GNU <code>split</code> (filtering is a GNU extension), repeated runs with chunks of file1 and reading file2 completely each time:</p>

<pre><code>split -l 20000 --filter='gawk -f linesnotin.awk - file2' &lt; file1
</code></pre>

<p>Note the use and placement of <code>-</code> meaning <code>stdin</code> on the <code>gawk</code> command line. This is provided by <code>split</code> from file1 in chunks of 20000 line per-invocation.</p>

<p>For users on non-GNU systems, there is almost certainly a GNU coreutils package you can obtain, including on OSX as part of the <a href=""https://developer.apple.com/xcode/features/"" rel=""noreferrer"">Apple Xcode</a> tools which provides GNU <code>diff</code>, <code>awk</code>, though only a POSIX/BSD <code>split</code> rather than a GNU version.</p>
","18205289"
"Using sed/awk to print lines with matching pattern OR another matching pattern","54830","","<p>I need to print lines in a file matching a pattern <em>OR</em> a different pattern using <a href=""/questions/tagged/awk"" class=""post-tag"" title=""show questions tagged 'awk'"" rel=""tag"">awk</a> or <a href=""/questions/tagged/sed"" class=""post-tag"" title=""show questions tagged 'sed'"" rel=""tag"">sed</a>. I feel like this is an easy task but I can't seem to find an answer. Any ideas?</p>
","<p>The POSIX way</p>

<pre><code>awk '/pattern1/ || /pattern2/{print}'
</code></pre>

<h3>Edit</h3>

<p>To be fair, I like <em>lhf</em>'s way better via <code>/pattern1|pattern2/</code> since it requires less typing for the same outcome.  However, I should point out that this template cannot be used for <strong>logical AND</strong> operations, for that you need to use my template which is <code>/pattern1/ &amp;&amp; /pattern2/</code></p>
","5385259"
"bash how to pass array as an argument to a function","54816","","<p>As we know, in bash programming the way to pass arguments is<code>$1</code>, ..., <code>$N</code>. However, I found it not easy to pass an array as an argument to a function which receives more than one argument. Here is one example:</p>

<pre><code>f(){
 x=($1)
 y=$2

 for i in ""${x[@]}""
 do
  echo $i
 done
 ....
}

a=(“jfaldsj jflajds"" ""LAST"")
b=NOEFLDJF

f ""${a[@]}"" $b
f ""${a[*]}"" $b
</code></pre>

<p>As described, function <code>f</code>receives two arguments: the first is assigned to x which is a array, the second to y.</p>

<p><code>f</code> can be called in two ways. The first way use the <code>""${a[@]}""</code> as the first argument, and the result is:</p>

<pre><code>jfaldsj 
jflajds
</code></pre>

<p>The second way use the <code>""${a[*]}""</code> as the first argument, and the result is:</p>

<pre><code>jfaldsj 
jflajds 
LAST
</code></pre>

<p>Neither result is as I wished. So, is there anyone having any idea about how to pass array between functions correctly. </p>
","<p>You cannot pass an array, you can only pass its elements (i.e. the expanded array).</p>

<pre><code>#! /bin/bash
function f() {
    a=(""$@"")
    ((last_idx=${#a[@]} - 1))
    b=${a[last_idx]}
    unset a[last_idx]

    for i in ""${a[@]}"" ; do
        echo ""$i""
    done
    echo ""b: $b""
}

x=(""one two"" ""LAST"")
b='even more'

f ""${x[@]}"" ""$b""
echo ===============
f ""${x[*]}"" ""$b""
</code></pre>

<p>The other possibility would be to pass the array by name:</p>

<pre><code>#! /bin/bash
function f() {
    name=$1[@]
    b=$2
    a=(""${!name}"")

    for i in ""${a[@]}"" ; do
        echo ""$i""
    done
    echo ""b: $b""
}

x=(""one two"" ""LAST"")
b='even more'

f x ""$b""
</code></pre>
","16461878"
"How to use arguments from previous command?","54455","","<p>I know that <kbd>Esc</kbd> + <kbd>.</kbd> gives you the last argument of the last command.</p>

<p>But I'm interested in first argument of the last command.
Is there a key binding to do so?</p>

<p>On the same lines, is there a generic way of getting the nth argument from the last command?
I know that in a bash script, you can use <code>$0</code>, <code>$1</code> etc., but these don't work on the commandline.</p>

<p><strong>Also, what about iterating through the 0th argument of previous commands, like we can do with the last argument by continuously pressing <kbd>Esc</kbd> + <kbd>.</kbd>?</strong></p>
","<p>Just as <code>M-.</code> (meta-dot or esc-dot or alt-dot) is the readline function <code>yank-last-arg</code>, <code>M-C-y</code> (meta-control-y or esc-ctrl-y or ctrl-alt-y) is the readline function <code>yank-nth-arg</code>. Without specifying <code>n</code>, it yanks the first argument of the previous command.</p>

<p>To specify an argument, press Escape and a number or hold Alt and press a number. You can do <kbd>Alt</kbd>-<kbd>-</kbd>to begin specifying a negative number then release Alt and press the digit (this will count from the end of the list of arguments.</p>

<p>Example:</p>

<p>Enter the following command</p>

<pre><code>$ echo a b c d e f g
a b c d e f g
</code></pre>

<p>Now at the next prompt, type <code>echo</code> (with a following space), then</p>

<p>Press <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>y</kbd> and you'll now see:</p>

<pre><code>$ echo a
</code></pre>

<p>without pressing <kbd>Enter</kbd> yet, do the following</p>

<p>Press <kbd>Alt</kbd>-<kbd>3</kbd>  <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>y</kbd></p>

<p>Press <kbd>Alt</kbd>-<kbd>-</kbd> <kbd>2</kbd> <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>y</kbd></p>

<p>Now you will see:</p>

<pre><code>$ echo ace
</code></pre>

<p>By the way, you could have put the <code>echo</code> on the line by selecting argument 0:</p>

<p>Press <kbd>Alt</kbd>-<kbd>0</kbd> <kbd>Alt</kbd>-<kbd>Ctrl</kbd>-<kbd>y</kbd></p>

<p><strong>Edit:</strong></p>

<p>To answer the question you added to your original:</p>

<p>You can press <kbd>Alt</kbd>-<kbd>0</kbd> then repeatedly press <kbd>Alt</kbd>-<kbd>.</kbd> to step through the previous commands (arg 0). Similarly <kbd>Alt</kbd>-<kbd>-</kbd> then repeating <kbd>Alt</kbd>-<kbd>.</kbd> would allow you to step through the previous next-to-last arguments.</p>

<p>If there is no appropriate argument on a particular line in history, the bell will be rung.</p>

<p>If there is a particular combination you use frequently, you can define a macro so one keystroke will perform it. This example will recall the second argument from previous commands by pressing <kbd>Alt</kbd>-<kbd>Shift</kbd>-<kbd>Y</kbd>. You could choose any available keystroke you prefer instead of this one. You can press it repeatedly to step through previous ones.</p>

<p>To try it out, enter the macro at a Bash prompt:</p>

<pre><code>bind '""\eY"": ""\e2\e.""'
</code></pre>

<p>To make it persistent, add this line to your <code>~/.inputrc</code> file:</p>

<pre><code>""\eY"": ""\e2\e.""
</code></pre>

<p>Unfortunately, this doesn't seem to work for arg 0 or negative argument numbers.</p>
","4010170"
"How can I trim white space from a variable in awk?","54382","","<p>Suppose $2 is my variable.  I have tried going from</p>

<pre><code>awk -F\, '{print $2 "":""}'
</code></pre>

<p>to </p>

<pre><code>awk -F\, '{print gsub(/[ \t]+$/, """", $2) "":""}'
</code></pre>

<p>But it goes from printing something to printing nothing at all.</p>
","<p>You're printing the result of the <code>gsub</code>, but <code>gsub</code> does an in-place modify of <code>$2</code> instead of returning a modified copy. Call <code>gsub</code>, then print:</p>

<pre><code>awk -F\, '{gsub(/[ \t]+$/, """", $2); print $2 "":""}'
</code></pre>
","9985555"
"Is there a way to redirect time output to file in Linux","54365","","<p>Just a little question about timing programs on Linux: the time command allows to
measure the execution time of a program:</p>

<pre><code>[ed@lbox200 ~]$ time sleep 1

real    0m1.004s
user    0m0.000s
sys     0m0.004s
</code></pre>

<p>Which works fine. But if I try to redirect the output to a file, it fails.</p>

<pre><code>[ed@lbox200 ~]$ time sleep 1 &gt; time.txt

real    0m1.004s
user    0m0.001s
sys     0m0.004s

[ed@lbox200 ~]$ cat time.txt 
[ed@lbox200 ~]$ 
</code></pre>

<p>I know there are other implementations of time with the option -o to write a file but
my question is about the command without those options.</p>

<p>Any suggestions ?</p>
","<p>Try</p>

<pre><code>{ time sleep 1 ; } 2&gt; time.txt
</code></pre>

<p>which combines the STDERR of ""time"" and your command into time.txt</p>

<p>Or use</p>

<pre><code>{ time sleep 1 2&gt; sleep.stderr ; } 2&gt; time.txt
</code></pre>

<p>which puts STDERR from ""sleep"" into the file ""sleep.stderr"" and only STDERR from ""time"" goes into ""time.txt""</p>
","13356654"
"Bash Script using Grep to search for a pattern in a file","54362","","<p>I am writing a bash script to search for a pattern in a file using GREP. I am clueless for why it isnt working. This is the program</p>

<pre><code>echo ""Enter file name..."";
read fname;
echo ""Enter the search pattern"";
read pattern
if [ -f $fname ]; then
    result=`grep -i '$pattern' $fname`
    echo $result;
fi
</code></pre>

<p>Or is there different approach to do this ?</p>

<p>Thanks</p>

<hr>

<p>(contents of file)</p>

<pre><code>Welcome to UNIX
The shell is a command programming language that provides an interface to the UNIX operating system.
The shell can modify the environment in which commands run.
Simple UNIX commands consist of one or more words separated by blanks. 
Most commands produce output on the standard output that is initially connected to the terminal. This output may be sent to a file by writing.
The standard output of one UNIX command may be connected to the standard input of another UNIX Command by writing the `pipe' operator, indicated by |
</code></pre>

<p>(pattern)</p>

<pre><code>`UNIX` or `unix`
</code></pre>
","<p>The single quotes around <code>$pattern</code> in the grep statement make the shell not resolve the shell variable so you should use double quotes.</p>
","3052890"
"Bash: Copy named files recursively, preserving folder structure","54320","","<p>I was hoping:</p>

<pre><code>cp -R src/prog.js images/icon.jpg /tmp/package
</code></pre>

<p>would yield a symmetrical structure in the destination dir:</p>

<pre><code>/tmp
|
+-- package
    |
    +-- src
    |   |
    |   +-- prog.js
    |
    +-- images
        |
        +-- icon.jpg
</code></pre>

<p>but instead, both of the files are copied into /tmp/package. A flat copy.  (This is on OSX).</p>

<p>Is there a simple bash function I can use to copy all files, including files specified by wildcard (e.g. src/*.js) into their rightful place within the destination directory. A bit like ""for each file, run <code>mkdir -p $(dirname ""$file""); cp ""$file"" $(dirname ""$file"")</code>"", but perhaps a single command.</p>

<p><a href=""http://www.linuxquestions.org/questions/linux-newbie-8/how-to-do-recursive-file-copy-of-directory-for-specific-files-199134/"" rel=""noreferrer"">This is a relevant thread, which suggests it's not possible.</a> The author's solution isn't so useful to me though, because I would like to simply provide a list of files, wildcard or not, and have all of them copied to the destination dir. IIRC MS-DOS xcopy does this, but there seems to be no equivalent for cp.</p>
","<p>Have you tried using the --parents option? I don't know if OS X supports that, but that works on Linux.</p>

<pre><code>cp --parents src/prog.js images/icon.jpg /tmp/package
</code></pre>

<p>If that doesn't work on OS X, try </p>

<pre><code>rsync -R src/prog.js images/icon.jpg /tmp/package
</code></pre>

<p>as aif suggested.</p>
","1650323"
"How to develop in  Linux-Like Shell (bash) on Windows?","54300","","<p>I'm Windows user. But according to my project requirements, I need to write Linux Shell Script(Bash shell). How to develop Linux Shell on Windows? </p>

<p>Is there any IDE for writing Linux Shell Scripting? Please share me some ideas and resource links.</p>
","<p>You have quite a number of options:</p>

<p><strong>cygwin</strong></p>

<p>Install <a href=""http://www.cygwin.com/"" rel=""nofollow noreferrer"">cygwin</a>. It will give you a bash. </p>

<p><strong>mingw</strong></p>

<p>The <a href=""http://www.mingw.org/"" rel=""nofollow noreferrer"">minimal GNU for windows</a>.  Comes with set of commands, compilers. This came with my Git on Windows and now the default shell for small scripts</p>

<p><strong>VM, such as VirtualBox</strong></p>

<p>There are tons on VMs, VirtualBox being easy to use(it powers the <a href=""https://github.com/boot2docker/boot2docker"" rel=""nofollow noreferrer"">Boot2Docker</a>).  You can do  development and test  on real Linux distros.</p>

<p><strong>Ubuntu on Windows 10</strong></p>

<p>There is new kid on the block. This allows you to run User Space Ubuntu using Windows Subsystem for Linux (WSL). see more on it at <a href=""https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/"" rel=""nofollow noreferrer"">Microsoft blog</a></p>

<p><strong>Other notes/IDE support</strong></p>

<p>Shell scripts should be small, requires less IDE etc. I use VIM with syntax highligthing. But it seems <a href=""http://sourceforge.net/projects/shelled/"" rel=""nofollow noreferrer"">ShellED</a> may be useful in your case. I got the link from answer for this question - <a href=""https://stackoverflow.com/questions/1356827/bash-script-plugin-for-eclipse"">Bash script plugin for Eclipse?</a></p>

<p>IntelliJ has  couple of <a href=""https://plugins.jetbrains.com/plugin/4230?pr=idea"" rel=""nofollow noreferrer"">plugins</a> too for Bash..</p>
","12293515"
"Bash: How to tokenize a string variable?","54272","","<p>If I have a string variable who's value is <code>""john is 17 years old""</code> how do I tokenize this using spaces as the delimeter? Would I use <code>awk</code>?</p>
","<p>Use the shell's automatic tokenization of unquoted variables:</p>

<pre><code>$ string=""john is 17 years old""
$ for word in $string; do echo ""$word""; done
john
is
17
years
old
</code></pre>

<p>If you want to change the delimiter you can set the <code>$IFS</code> variable, which stands for internal field separator. The default value of <code>$IFS</code> is <code>"" \t\n""</code> (space, tab, newline).</p>

<pre><code>$ string=""john_is_17_years_old""
$ (IFS='_'; for word in $string; do echo ""$word""; done)
john
is
17
years
old
</code></pre>

<p>(Note that in this second example I added parentheses around the second line. This creates a sub-shell so that the change to <code>$IFS</code> doesn't persist. You generally don't want to permanently change <code>$IFS</code> as it can wreak havoc on unsuspecting shell commands.)</p>
","5382824"
"Variables Multiplication","54258","","<p>I'm making a script which gives the factorial for a inserted number, but i'm having some problems with the multiplication.</p>

<p>Note: the factorial for is given by: 9!=9*8*7*6*5*4*3*2*1</p>

<p>Here's my code:</p>

<pre><code>#!/bin/bash

echo ""Insert an Integer""

read input

if ! [[ ""$input"" =~ ^[0-9]+$ ]] ; then
   exec &gt;&amp;2; echo ""Error: You didn't enter an integer""; exit 1
fi

function factorial
{
while [ ""$input"" != 1 ];
do
    result=$(($result * $input))
    input=$(($input-1))
done
}
factorial
echo ""The Factorial of "" $input ""is"" $result
</code></pre>

<p>it keeps giving me errors of all kinds for diferent multiplication technics :/</p>

<p>Currently the Output is:</p>

<pre><code>joaomartinsrei@joaomartinsrei ~/Área de Trabalho/Shell $ ./factorial.sh
Insert an Integer
3
./factorial.sh: line 15: * 3: syntax error: operand expected (error token is ""* 3"")
The factorial of 3 is
</code></pre>

<p>Many Thanks,
Best Regards</p>
","<p>The main problem is that you never initialize <code>result</code> (to <code>1</code>), so this:</p>

<pre><code>result=$(($result * $input))
</code></pre>

<p>is equivalent to this:</p>

<pre><code>result=$(( * $input))
</code></pre>

<p>which is not a valid arithmetic expression.</p>
","15213163"
"Using `find -perm` to find when a permission is not set","54234","","<p>I want to find the non-readable files in my directory (eg the files with g-r).  So I tried this:</p>

<p><code>find . -perm -g-r</code></p>

<p>It shows me all of the files??  So I tried this:</p>

<p><code>find . -perm -g+r</code></p>

<p>And it showed me only the readable files.  It appears that <code>-perm -g-r</code> matches all files.  I'm using CentOS 5.5.  Am I doing something wrong?  It doesn't look like <code>-perm -g-r</code> does anything useful.</p>
","<p>Try:</p>

<p><code>find . ! -perm -g+r</code></p>


","4382651"
"Design patterns or best practices for shell scripts","54227","","<p>Does anyone know of any resources that talk about best practices or design patterns for shell scripts (sh, bash etc.)?</p>
","<p>I wrote quite complex shell scripts and my first suggestion is ""don't"". The reason is that is fairly easy to make a small mistake that hinders your script, or even make it dangerous.</p>

<p>That said, I don't have other resources to pass you but my personal experience. 
Here is what I normally do, which is overkill, but tends to be solid, although <em>very</em> verbose.</p>

<p><strong>Invocation</strong></p>

<p>make your script accept long and short options. be careful because there are two commands to parse options, getopt and getopts. Use getopt as you face less trouble.</p>

<pre><code>CommandLineOptions__config_file=""""
CommandLineOptions__debug_level=""""

getopt_results=`getopt -s bash -o c:d:: --long config_file:,debug_level:: -- ""$@""`

if test $? != 0
then
    echo ""unrecognized option""
    exit 1
fi

eval set -- ""$getopt_results""

while true
do
    case ""$1"" in
        --config_file)
            CommandLineOptions__config_file=""$2"";
            shift 2;
            ;;
        --debug_level)
            CommandLineOptions__debug_level=""$2"";
            shift 2;
            ;;
        --)
            shift
            break
            ;;
        *)
            echo ""$0: unparseable option $1""
            EXCEPTION=$Main__ParameterException
            EXCEPTION_MSG=""unparseable option $1""
            exit 1
            ;;
    esac
done

if test ""x$CommandLineOptions__config_file"" == ""x""
then
    echo ""$0: missing config_file parameter""
    EXCEPTION=$Main__ParameterException
    EXCEPTION_MSG=""missing config_file parameter""
    exit 1
fi
</code></pre>

<p>Another important point is that a program should always return zero if completes successfully, non-zero if something went wrong.</p>

<p><strong>Function calls</strong></p>

<p>You can call functions in bash, just remember to define them before the call. Functions are like scripts, they can only return numeric values. This means that you have to invent a different strategy to return string values. My strategy is to use a variable called RESULT to store the result, and returning 0 if the function completed cleanly. 
Also, you can raise exceptions if you are returning a value different from zero, and then set two ""exception variables"" (mine: EXCEPTION and EXCEPTION_MSG), the first containing the exception type and the second a human readable message.</p>

<p>When you call a function, the parameters of the function are assigned to the special vars $0, $1 etc. I suggest you to put them into more meaningful names. declare the variables inside the function as local:</p>

<pre><code>function foo {
   local bar=""$0""
}
</code></pre>

<p><strong>Error prone situations</strong></p>

<p>In bash, unless you declare otherwise, an unset variable is used as an empty string. This is very dangerous in case of typo, as the badly typed variable will not be reported, and it will be evaluated as empty. use</p>

<pre><code>set -o nounset
</code></pre>

<p>to prevent this to happen. Be careful though, because if you do this, the program will abort every time you evaluate an undefined variable. For this reason, the only way to check if a variable is not defined is the following:</p>

<pre><code>if test ""x${foo:-notset}"" == ""xnotset""
then
    echo ""foo not set""
fi
</code></pre>

<p>You can declare variables as readonly:</p>

<pre><code>readonly readonly_var=""foo""
</code></pre>

<p><strong>Modularization</strong></p>

<p>You can achieve ""python like"" modularization if you use the following code:</p>

<pre><code>set -o nounset
function getScriptAbsoluteDir {
    # @description used to get the script path
    # @param $1 the script $0 parameter
    local script_invoke_path=""$1""
    local cwd=`pwd`

    # absolute path ? if so, the first character is a /
    if test ""x${script_invoke_path:0:1}"" = 'x/'
    then
        RESULT=`dirname ""$script_invoke_path""`
    else
        RESULT=`dirname ""$cwd/$script_invoke_path""`
    fi
}

script_invoke_path=""$0""
script_name=`basename ""$0""`
getScriptAbsoluteDir ""$script_invoke_path""
script_absolute_dir=$RESULT

function import() { 
    # @description importer routine to get external functionality.
    # @description the first location searched is the script directory.
    # @description if not found, search the module in the paths contained in $SHELL_LIBRARY_PATH environment variable
    # @param $1 the .shinc file to import, without .shinc extension
    module=$1

    if test ""x$module"" == ""x""
    then
        echo ""$script_name : Unable to import unspecified module. Dying.""
        exit 1
    fi

    if test ""x${script_absolute_dir:-notset}"" == ""xnotset""
    then
        echo ""$script_name : Undefined script absolute dir. Did you remove getScriptAbsoluteDir? Dying.""
        exit 1
    fi

    if test ""x$script_absolute_dir"" == ""x""
    then
        echo ""$script_name : empty script path. Dying.""
        exit 1
    fi

    if test -e ""$script_absolute_dir/$module.shinc""
    then
        # import from script directory
        . ""$script_absolute_dir/$module.shinc""
    elif test ""x${SHELL_LIBRARY_PATH:-notset}"" != ""xnotset""
    then
        # import from the shell script library path
        # save the separator and use the ':' instead
        local saved_IFS=""$IFS""
        IFS=':'
        for path in $SHELL_LIBRARY_PATH
        do
            if test -e ""$path/$module.shinc""
            then
                . ""$path/$module.shinc""
                return
            fi
        done
        # restore the standard separator
        IFS=""$saved_IFS""
    fi
    echo ""$script_name : Unable to find module $module.""
    exit 1
} 
</code></pre>

<p>you can then import files with the extension .shinc with the following syntax</p>

<p>import ""AModule/ModuleFile""</p>

<p>Which will be searched in SHELL_LIBRARY_PATH. As you always import in the global namespace, remember to prefix all your functions and variables with a proper prefix, otherwise you risk name clashes. I use double underscore as the python dot.</p>

<p>Also, put this as first thing in your module</p>

<pre><code># avoid double inclusion
if test ""${BashInclude__imported+defined}"" == ""defined""
then
    return 0
fi
BashInclude__imported=1
</code></pre>

<p><strong>Object oriented programming</strong></p>

<p>In bash, you cannot do object oriented programming, unless you build a quite complex system of allocation of objects (I thought about that. it's feasible, but insane).
In practice, you can however do ""Singleton oriented programming"": you have one instance of each object, and only one.</p>

<p>What I do is: i define an object into a module (see the modularization entry). Then I define empty vars (analogous to member variables) an init function (constructor) and member functions, like in this example code</p>

<pre><code># avoid double inclusion
if test ""${Table__imported+defined}"" == ""defined""
then
    return 0
fi
Table__imported=1

readonly Table__NoException=""""
readonly Table__ParameterException=""Table__ParameterException""
readonly Table__MySqlException=""Table__MySqlException""
readonly Table__NotInitializedException=""Table__NotInitializedException""
readonly Table__AlreadyInitializedException=""Table__AlreadyInitializedException""

# an example for module enum constants, used in the mysql table, in this case
readonly Table__GENDER_MALE=""GENDER_MALE""
readonly Table__GENDER_FEMALE=""GENDER_FEMALE""

# private: prefixed with p_ (a bash variable cannot start with _)
p_Table__mysql_exec="""" # will contain the executed mysql command 

p_Table__initialized=0

function Table__init {
    # @description init the module with the database parameters
    # @param $1 the mysql config file
    # @exception Table__NoException, Table__ParameterException

    EXCEPTION=""""
    EXCEPTION_MSG=""""
    EXCEPTION_FUNC=""""
    RESULT=""""

    if test $p_Table__initialized -ne 0
    then
        EXCEPTION=$Table__AlreadyInitializedException   
        EXCEPTION_MSG=""module already initialized""
        EXCEPTION_FUNC=""$FUNCNAME""
        return 1
    fi


    local config_file=""$1""

      # yes, I am aware that I could put default parameters and other niceties, but I am lazy today
      if test ""x$config_file"" = ""x""; then
          EXCEPTION=$Table__ParameterException
          EXCEPTION_MSG=""missing parameter config file""
          EXCEPTION_FUNC=""$FUNCNAME""
          return 1
      fi


    p_Table__mysql_exec=""mysql --defaults-file=$config_file --silent --skip-column-names -e ""

    # mark the module as initialized
    p_Table__initialized=1

    EXCEPTION=$Table__NoException
    EXCEPTION_MSG=""""
    EXCEPTION_FUNC=""""
    return 0

}

function Table__getName() {
    # @description gets the name of the person 
    # @param $1 the row identifier
    # @result the name

    EXCEPTION=""""
    EXCEPTION_MSG=""""
    EXCEPTION_FUNC=""""
    RESULT=""""

    if test $p_Table__initialized -eq 0
    then
        EXCEPTION=$Table__NotInitializedException
        EXCEPTION_MSG=""module not initialized""
        EXCEPTION_FUNC=""$FUNCNAME""
        return 1
    fi

    id=$1

      if test ""x$id"" = ""x""; then
          EXCEPTION=$Table__ParameterException
          EXCEPTION_MSG=""missing parameter identifier""
          EXCEPTION_FUNC=""$FUNCNAME""
          return 1
      fi

    local name=`$p_Table__mysql_exec ""SELECT name FROM table WHERE id = '$id'""`
      if test $? != 0 ; then
        EXCEPTION=$Table__MySqlException
        EXCEPTION_MSG=""unable to perform select""
        EXCEPTION_FUNC=""$FUNCNAME""
        return 1
      fi

    RESULT=$name
    EXCEPTION=$Table__NoException
    EXCEPTION_MSG=""""
    EXCEPTION_FUNC=""""
    return 0
}
</code></pre>

<p><strong>Trapping and handling signals</strong></p>

<p>I found this useful to catch and handle exceptions.</p>

<pre><code>function Main__interruptHandler() {
    # @description signal handler for SIGINT
    echo ""SIGINT caught""
    exit
} 
function Main__terminationHandler() { 
    # @description signal handler for SIGTERM
    echo ""SIGTERM caught""
    exit
} 
function Main__exitHandler() { 
    # @description signal handler for end of the program (clean or unclean). 
    # probably redundant call, we already call the cleanup in main.
    exit
} 

trap Main__interruptHandler INT
trap Main__terminationHandler TERM
trap Main__exitHandler EXIT

function Main__main() {
    # body
}

# catch signals and exit
trap exit INT TERM EXIT

Main__main ""$@""
</code></pre>

<p><strong>Hints and tips</strong></p>

<p>If something does not work for some reason, try to reorder the code. Order is important and not always intuitive.</p>

<p>do not even consider working with tcsh. it does not support functions, and it's horrible in general. </p>

<p>Hope it helps, although please note. If you have to use the kind of things I wrote here, it means that your problem is too complex to be solved with shell. use another language. I had to use it due to human factors and legacy.</p>
","739034"
"Floating point results in Bash integer division","54066","","<p>I have a backup script on my server which does cron jobs of backups, and sends me a summary of  files backed up, including the size of the new backup file. As part of the script, I'd like to divide the final size of the file by (1024^3) to get the file size in GB, from the file size in bytes. </p>

<p>Since bash does not have floating point calculation, I am trying to use pipes to bc to get the result, however I'm getting stumped on basic examples.</p>

<p>I tried to get the value of Pi to a scale, however,</p>

<p>even though the following works:</p>

<pre><code>~ #bc -l
bc 1.06.95
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'.
4/3
1.33333333333333333333
22/7
3.14285714285714285714
q
0
quit
</code></pre>

<p>A non interactive version does not work:</p>

<pre><code>#echo $(( 22/7 )) | bc
3
</code></pre>

<p>This works:</p>

<pre><code>#echo '22/7' | bc -l
3.14285714285714285714
</code></pre>

<p>But I need to use variables. So it doesnt help that the following does not work:</p>

<pre><code>#a=22 ; b=7
#echo $(( a/b )) | bc -l
3
</code></pre>

<p>I'm obviously missing something in the syntax for using variables in Bash, and could use with some 'pointers' on what I've misunderstood.</p>

<p>As DigitalRoss said, I can use the following:</p>

<pre><code>#echo $a / $b | bc -l
3.14285714285714285714
</code></pre>

<p>However I cant use complex expressions like:</p>

<pre><code>#echo $a / (( $b-34 )) | bc -l
-bash: syntax error near unexpected token `('
#echo $a / (( b-34 )) | bc -l
-bash: syntax error near unexpected token `('
#echo $a / (( b-34 )) | bc -l
-bash: syntax error near unexpected token `('
</code></pre>

<p>Can someone give me a working correct syntax for getting floating point results with complicated arithmetic expresssions?</p>
","<p>Just double-quote (<code>""</code>) the expression:</p>

<pre><code>echo ""$a / ( $b - 34 )"" | bc -l
</code></pre>

<p>Then bash will expand the <code>$</code> variables and ignore everything else and <code>bc</code> will see an expression with parentheses:</p>

<pre><code>$ a=22
$ b=7
$ echo ""$a / ( $b - 34 )"" 
22 / ( 7 - 34 )

$ echo ""$a / ( $b - 34 )"" | bc -l
-.81481481481481481481
</code></pre>
","15015920"
"How to split a string in bash delimited by tab","54064","","<p>I'm trying to split a tab delimitted field in bash.</p>

<p>I am aware of this answer: <a href=""https://stackoverflow.com/questions/3162385/how-to-split-a-string-in-shell-and-get-the-last-field"">how to split a string in shell and get the last field</a></p>

<p>But that does not answer for a tab character.</p>

<p>I want to do get the part of a string before the tab character, so I'm doing this:</p>

<pre><code>x=`head -1 my-file.txt`
echo ${x%\t*}
</code></pre>

<p>But the \t is matching on the letter 't' and not on a tab.  What is the best way to do this?</p>

<p>Thanks</p>
","<p>If your file look something like this (with tab as separator):</p>

<pre><code>1st-field   2nd-field
</code></pre>

<p>you can use <code>cut</code> to extract the first field (operates on tab by default):</p>

<pre><code>$ cut -f1 input
1st-field
</code></pre>

<p>If you're using <code>awk</code>, there is no need to use <code>tail</code> to get the last line, changing the input to:</p>

<pre><code>1:1st-field     2nd-field
2:1st-field     2nd-field
3:1st-field     2nd-field
4:1st-field     2nd-field
5:1st-field     2nd-field
6:1st-field     2nd-field
7:1st-field     2nd-field
8:1st-field     2nd-field
9:1st-field     2nd-field
10:1st-field    2nd-field
</code></pre>

<p>Solution using awk:</p>

<pre><code>$ awk 'END {print $1}' input
10:1st-field
</code></pre>

<p>Pure bash-solution:</p>

<pre><code>#!/bin/bash

while read a b;do last=$a; done &lt; input
echo $last
</code></pre>

<p>outputs:</p>

<pre><code>$ ./tab.sh 
10:1st-field
</code></pre>

<p>Lastly, a solution using <code>sed</code></p>

<pre><code>$ sed '$s/\(^[^\t]*\).*$/\1/' input
10:1st-field
</code></pre>

<p>here, <code>$</code> is the range operator; i.e. operate on the last line only.</p>

<p>For your original question, use a literal tab, i.e.</p>

<pre><code>x=""1st-field    2nd-field""
echo ${x%   *}
</code></pre>

<p>outputs:</p>

<pre><code>1st-field
</code></pre>
","6655669"
"RVM is not a function, selecting rubies with 'rvm use ...' will not work","54064","","<p>List the ruby versions </p>

<pre><code>console:~$ rvm list

rvm rubies

ruby-2.0.0-p481 [ i686 ]

# =&gt; - current
# =* - current &amp;&amp; default
#  * - default
</code></pre>

<p>Try to use a specific version of ruby</p>

<pre><code>console:~$ rvm use 2.0.0

RVM is not a function, selecting rubies with 'rvm use ...' will not work.

You need to change your terminal emulator preferences to allow login shell.
Sometimes it is required to use `/bin/bash --login` as the command.
Please visit https://rvm.io/integration/gnome-terminal/ for a example.
</code></pre>
","<p>Your console is not running as a login shell and hence have no access to rvm function. If you are running Ubuntu, you can:</p>

<ol>
<li>Open console</li>
<li>Select Edit -> Profile Preferences</li>
<li>Select tab: Title and Command</li>
<li>Check box 'Run command as a login shell'</li>
<li>Restart terminal</li>
</ol>
","23963123"
"How to pipe input to a Bash while loop and preserve variables after loop ends","53847","","<p>Bash allows to use: <code>cat &lt;(echo ""$FILECONTENT"")</code></p>

<p>Bash also allow to use: <code>while read i; do echo $i; done &lt;/etc/passwd</code></p>

<p>to combine previous two this can be used: <code>echo $FILECONTENT | while read i; do echo $i; done</code></p>

<p>The problem with last one is that it creates sub-shell and after the while loop ends variable <code>i</code> cannot be accessed any more.</p>

<p>My question is:</p>

<p>How to achieve something like this: <code>while read i; do echo $i; done &lt;(echo ""$FILECONTENT"")</code> or in other words: How can I be sure that <code>i</code> survives while loop?</p>

<p>Please note that I am aware of enclosing while statement into <code>{}</code> but this does not solves the problem (imagine that you want use the while loop in function and return <code>i</code> variable)</p>
","<p>The correct notation for <a href=""http://www.gnu.org/software/bash/manual/bash.html#Process-Substitution"" rel=""noreferrer"">Process Substitution</a> is:</p>

<pre><code>while read i; do echo $i; done &lt; &lt;(echo ""$FILECONTENT"")
</code></pre>

<p>The last value of <code>i</code> assigned in the loop is then available when the loop terminates.
An alternative is:</p>

<pre><code>echo $FILECONTENT | 
{
while read i; do echo $i; done
...do other things using $i here...
}
</code></pre>

<p>The braces are an I/O grouping operation and do not themselves create a subshell.  In this context, they are part of a pipeline and are therefore run as a subshell, but it is because of the <code>|</code>, not the <code>{ ... }</code>.  You mention this in the question.  AFAIK, you can do a return from within these inside a function.</p>

<hr>

<p>Bash also provides the <a href=""http://www.gnu.org/software/bash/manual/bash.html#The-Shopt-Builtin"" rel=""noreferrer""><code>shopt</code></a> builtin and one of its many options is:</p>

<blockquote>
  <p><code>lastpipe</code></p>
  
  <p>If set, and job control is not active, the shell runs the last command of a pipeline not executed in the background in the current shell environment.</p>
</blockquote>

<p>Thus, using something like this <em>in a script</em> makes the modfied <code>sum</code> available after the loop:</p>

<pre><code>FILECONTENT=""12 Name
13 Number
14 Information""
shopt -s lastpipe   # Comment this out to see the alternative behaviour
sum=0
echo ""$FILECONTENT"" |
while read number name; do ((sum+=$number)); done
echo $sum
</code></pre>

<p>Doing this at the command line usually runs foul of 'job control is not active' (that is, at the command line, job control is active).  Testing this without using a script failed.</p>

<p>Also, as noted by <a href=""https://stackoverflow.com/users/68063/gareth-rees"">Gareth Rees</a> in his <a href=""https://stackoverflow.com/a/19571256/15168"">answer</a>, you can sometimes use a <a href=""http://www.gnu.org/software/bash/manual/bash.html#Here-Strings"" rel=""noreferrer"">here string</a>:</p>

<pre><code>while read i; do echo $i; done &lt;&lt;&lt; ""$FILECONTENT""
</code></pre>

<p>This doesn't require <code>shopt</code>; you may be able to save a process using it.</p>
","19571082"
"Working with openssl to extract information from a pkcs12 certificate","53642","","<p>I would like some help with the openssl command. I need to automate the retrieval of the subject= line in a pkcs12 certificate for a script I'm working on. </p>

<p>I've used openssl to view the contents of the Identity/Certificate:</p>

<pre><code>openssl pkcs12 -info -in /Users/[user]/Desktop/ID.pfx
</code></pre>

<p>But I am prompted three times for the password. I used -passin to eliminate one of the password prompts, but I am still being prompted for the PEM pass phrase and verification entry.<br>
I need to figure out a way to pass ${password} to the other two password challenges or have the scrip issue a ctl-c. The piece of info I need is outputted to the stdout before the second password prompt. </p>

<p>Any help would be appreciated!  </p>

<p>Obviously I gutted the certificate output for this post.... but you should get the idea of what I'm seeing:</p>

<pre><code>bash-3.2#  openssl pkcs12 -info -in /Users/[user]/Desktop/ID.pfx -passin pass:${password}
MAC Iteration 2048
MAC verified OK
PKCS7 Encrypted data: pbeWithSHA1And40BitRC2-CBC, Iteration 2048
Certificate bag
Bag Attributes
    localKeyID: ****
    friendlyName: ****
subject=****
issuer=****
-----BEGIN CERTIFICATE-----
::HASH REMOVED::
-----END CERTIFICATE-----
PKCS7 Data
Shrouded Keybag: ****
Bag Attributes
    localKeyID: **** 
    friendlyName: ****
Key Attributes: &lt;No Attributes&gt;

Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:

-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: 

::HASH REMOVED::
-----END RSA PRIVATE KEY-----
bash-3.2# 
</code></pre>
","<p>Try this:</p>

<p><code>openssl pkcs12 -in ~/cert.p12 -nodes -passin pass:""my password"" | openssl x509 -noout -subject</code></p>

<p>Or this for the common name (ruby to strip trailing whitespace):</p>

<p><code>openssl pkcs12 -in ~/cert.p12 -nodes -passin pass:""my password"" | openssl x509 -noout -subject | awk -F'[=/]' '{print $6}'</code>.strip`</p>
","16176483"
"Bash if [ false ] ; returns true","53629","","<p>Been learning bash this week and ran into a snag. </p>

<pre><code>#!/bin/sh

if [ false ]; then
    echo ""True""
else
    echo ""False""
fi
</code></pre>

<p>This will always output True even though the condition would seem to indicate otherwise. If I remove the brackets <code>[]</code> then it works, but I do not understand why.</p>
","<p>You are running the <code>[</code> (aka <code>test</code>) command with the argument ""false"", not running the command <code>false</code>. Since ""false"" is a non-empty string, the <code>test</code> command always succeeds. To actually run the command, drop the <code>[</code> command.</p>

<pre><code>if false; then
   echo ""True""
else
   echo ""False""
fi
</code></pre>
","19670094"
"How do I exclude absolute paths for tar?","53629","","<p>I am running a PHP script that gets me the absolute paths of files I want to tar up. This is the syntax I have:</p>

<pre><code>tar -cf tarname.tar -C /www/path/path/file1.txt /www/path/path2/path3/file2.xls
</code></pre>

<p>When I untar it, it creates the absolute path to the files. How do I get just <code>/path</code> with everything under it to show?</p>
","<p>If you want to remove the first n leading components of the file name, you need <code>strip-components</code>. So in your case, on extraction, do</p>

<pre><code>tar xvf tarname.tar --strip-components=2
</code></pre>

<p>The <a href=""http://gd.tuwien.ac.at/linuxcommand.org/man_pages/tar1.html"" rel=""noreferrer"">man page</a> has a list of <code>tar</code>'s many options, including this one. Some earlier versions of <code>tar</code> use <code>--strip-path</code> for this operation instead.</p>
","3153788"
"Exclude .svn directories from grep","53628","","<p>When I grep my Subversion working copy directory, the results include a lot of files from the .svn directories. Is it possible to recursively grep a directory, but exclude all results from  .svn directories?</p>
","<p>If you have GNU Grep, it should work like this:</p>

<pre><code>grep --exclude-dir="".svn""
</code></pre>

<p>If happen to be on a Unix System without GNU Grep, try the following:</p>

<pre><code>grep -R ""whatever you like"" *|grep -v ""\.svn/*"" 
</code></pre>
","1491543"
"Display current date and time without punctuation","53599","","<p>For example, I want to display current date and time as the following format:</p>

<pre><code>yyyymmddhhmmss 
</code></pre>

<p>How do I do that? It seems like most date format comes with <code>-</code>, <code>/</code>, <code>:</code>, etc.</p>
","<p>Here you go:</p>

<pre><code>date +%Y%m%d%H%M%S
</code></pre>

<p>As <code>man date</code> says near the top, you can use the <code>date</code> command like this:</p>

<pre><code>   date [OPTION]... [+FORMAT]
</code></pre>

<p>That is, you can give it a format parameter, starting with a <code>+</code>. 
You can probably guess the meaning of the formatting symbols I used:</p>

<ul>
<li><code>%Y</code> is for year</li>
<li><code>%m</code> is for month</li>
<li><code>%d</code> is for day</li>
<li>... and so on</li>
</ul>

<p>You can find this, and other formatting symbols in <code>man date</code>.</p>
","20551593"
"How to open an app in terminal and passing the current working directory?","53487","","<p>I often want to open the entire directory I'm working in by using the <code>mate</code> command, but how do I pass in the working directory itself?</p>

<p>For example, if I'm working in a rails app and I want to open the app folder into the TextMate tree, I would do <code>mate app</code>, but how could I pass in the working directory itself (i.e. open the entire rails app in the tree)?</p>
","<p><code>mate .</code> will open the currently directory. I use the <code>.</code> directory a lot, for example open finder for the current directory <code>open .</code>.</p>
","8636065"
"Insert lines in a file starting from a specific line","53422","","<p>I would like to insert lines into a file in bash starting from a specific line.</p>

<p>Each line is a string which is an element of an array</p>

<pre><code>line[0]=""foo""
line[1]=""bar""
...
</code></pre>

<p>and the specific line is 'fields'</p>

<pre><code>file=""$(cat $myfile)""
for p in $file; do
    if [ ""$p"" = 'fields' ]
        then insertlines()     #&lt;- here
    fi
done
</code></pre>
","<p>This can be done with sed: <code>sed 's/fields/fields\nNew Inserted Line/'</code></p>

<pre><code>$ cat file.txt 
line 1
line 2 
fields
line 3
another line 
fields
dkhs

$ sed 's/fields/fields\nNew Inserted Line/' file.txt 
line 1
line 2 
fields
New Inserted Line
line 3
another line 
fields
New Inserted Line
dkhs
</code></pre>

<p>Use <code>-i</code> to save in-place instead of printing to <code>stdout</code> </p>

<p><code>sed -i 's/fields/fields\nNew Inserted Line/'</code></p>

<p>As a bash script:</p>

<pre><code>#!/bin/bash

match='fields'
insert='New Inserted Line'
file='file.txt'

sed -i ""s/$match/$match\n$insert/"" $file
</code></pre>
","13316554"
"Variables in bash seq replacement ({1..10})","53250","","<p>Is it possible to do something like this:</p>

<pre><code>start=1
end=10
echo {$start..$end}
# Ouput: {1..10}
# Expected: 1 2 3 ... 10 (echo {1..10})
</code></pre>
","<p>In bash, brace expansion happens before variable expansion, so this is not directly possible. </p>

<p>Instead, use an arithmetic <code>for</code> loop:</p>

<pre><code>start=1
end=10
for ((i=start; i&lt;=end; i++))
do
   echo ""i: $i""
done
</code></pre>

<h3>OUTPUT</h3>

<pre><code>i: 1
i: 2
i: 3
i: 4
i: 5
i: 6
i: 7
i: 8
i: 9
i: 10
</code></pre>
","6191382"
"uppercase first character in a variable with bash","53197","","<p>I want to uppercase just the first character in my string with bash.</p>

<pre><code>foo=""bar"";

//uppercase first character

echo $foo;
</code></pre>

<p>should print ""Bar"";</p>
","<pre><code>foo=""$(tr '[:lower:]' '[:upper:]' &lt;&lt;&lt; ${foo:0:1})${foo:1}""
</code></pre>
","12487465"
"In bash, how to store a return value in a variable?","53158","","<p>I know some very basic commands in Linux and am trying to write some scripts. I have written a function which evaluates the sum of last 2-digits in a 5-digit number. The function should concatenate this resultant sum in between the last 2-digits and return it. The reason I want to return this value is because I will be using this value in the other function. </p>

<p>Ex: if I have 12345, then my function will calculate 4+5 and return 495.</p>

<pre><code>#!/bin/bash

set -x
echo ""enter: ""
        read input

function password_formula
{
        length=${#input}
        last_two=${input:length-2:length}
        first=`echo $last_two| sed -e 's/\(.\)/\1 /g'|awk '{print $2}'`
        second=`echo $last_two| sed -e 's/\(.\)/\1 /g'|awk '{print $1}'`
        let sum=$first+$second
        sum_len=${#sum}
        echo $second
        echo $sum

        if [ $sum -gt 9 ]
        then
               sum=${sum:1}
        fi

        value=$second$sum$first
        return $value
}
result=$(password_formula)
echo $result
</code></pre>

<p>I am trying to echo and see the result but I am getting the output as shown below. </p>

<pre><code>-bash-3.2$ ./file2.sh 
+++ password_formula
+++ echo 'enter: '
+++ read input
12385
+++ length=8
+++ last_two=85
++++ echo 85
++++ sed -e 's/\(.\)/\1 /g'
++++ awk '{print $2}'
+++ first=5
++++ echo 85
++++ sed -e 's/\(.\)/\1 /g'
++++ awk '{print $1}'
+++ second=8
+++ let sum=5+8
+++ sum_len=2
+++ echo 5
+++ echo 8
+++ echo 13
+++ '[' 13 -gt 9 ']'
+++ sum=3
+++ value=835
+++ return 835
++ result='enter: 
5
8
13'
++ echo enter: 5 8 13
enter: 5 8 13
</code></pre>

<p>I also tried to print the result as:</p>

<pre><code>password_formula
RESULT=$?
echo $RESULT
</code></pre>

<p>But that is giving some unknown value: </p>

<pre><code>++ RESULT=67
++ echo 67
67
</code></pre>

<p>How can I properly store the correct value and print (to double check) on the screen? </p>

<p>Thanks in advance.</p>
","<p>Change this line:</p>

<pre><code>return $value
</code></pre>

<p>like this:</p>

<pre><code>echo $value
</code></pre>

<p>Then you can capture it's output.</p>
","15013529"
"How to check that a parameter was supplied to a bash script","53148","","<p>I just want to check if one parameter was supplied in my bash script or not. </p>

<p>I found <a href=""https://stackoverflow.com/questions/699576/validating-parameters-to-a-bash-script"">this</a>, but all the solutions seem to be unnecessarily complicated.</p>

<p>What's a simple solution to this simple problem that would make sense to a beginner?</p>
","<p>Use <code>$#</code> which is equal to the number of arguments supplied, e.g.:</p>

<pre><code>if [ ""$#"" -ne 1 ]
then
  echo ""Usage: ...""
  exit 1
fi
</code></pre>

<p>Word of caution: Note that inside a function this will equal the number of arguments supplied to the function rather than the script.</p>

<p>EDIT: As pointed out by <a href=""https://stackoverflow.com/users/207248/siegex"">SiegeX</a> in bash you can also use arithmetic expressions in <code>(( ... ))</code>. This can be used like this:</p>

<pre><code>if (( $# != 1 ))
then
  echo ""Usage: ...""
  exit 1
fi
</code></pre>
","8968775"
"BASH : Get the last 4 characters of output from Standard Out, Inline","53080","","<p>I have a script that is running and uses </p>

<pre><code>lspci -s 0a.00.1 
</code></pre>

<p>This returns </p>

<pre><code>0a.00.1 usb controller some text device 4dc9
</code></pre>

<p>I want to get those last 4 characters inline such that </p>

<pre><code>lspci -s 0a.00.1 | some command to give me the last 4 characters. 
</code></pre>
","<p>How about <code>tail</code>, with the <code>-c</code> switch. For example, to get the last 4 characters of ""hello"":</p>

<pre><code>echo ""hello"" | tail -c 5
ello
</code></pre>

<p>Note that I used 5 (4+1) because a newline character is added by <code>echo</code>. As suggested by Brad Koch below, use <code>echo -n</code> to prevent the newline character from being added.</p>
","9220013"
"encoding of file shell script","53049","","<p>How can I check the file encoding in a shell script?
I need to know if a file is encoded in utf-8 or iso-8859-1.</p>

<p>Thanks </p>
","<p>I'd just use</p>

<pre><code>file -bi myfile.txt
</code></pre>

<p>to determine the character encoding of a particular file.</p>

<p>A solution with an external dependency but I suspect <code>file</code> is very common nowadays among all semi-modern distro's.</p>

<p><strong>EDIT:</strong></p>

<p>As a response to Laurence Gonsalves' comment: <code>b</code> is the option to be 'brief' (not include the filename) and <code>i</code> is the shorthand equivalent of <code>--mime</code> so the most portable way (including Mac OSX) then probably is:</p>

<pre><code>file --mime myfile.txt 
</code></pre>
","1730914"
"Deleting lines from one file which are in another file","52896","","<p>I have a file <code>f1</code>:</p>

<pre><code>line1
line2
line3
line4
..
..
</code></pre>

<p>I want to delete all the lines which are in another file <code>f2</code>:</p>

<pre><code>line2
line8
..
..
</code></pre>

<p>I tried something with <code>cat</code> and <code>sed</code>, which wasn't even close to what I intended. How can I do this?</p>
","<p><code>grep -v -x -f f2 f1</code> should do the trick.</p>

<p>Explanation:</p>

<ul>
<li><code>-v</code> to select non-matching lines</li>
<li><code>-x</code> to match whole lines only</li>
<li><code>-f f2</code> to get patterns from <code>f2</code></li>
</ul>

<p>One can instead use <code>-F f2</code> to match <em>fixed strings</em> from <code>f2</code> rather than <em>patterns</em> (in case you want remove the lines in a ""what you see if what you get"" manner rather than treating the lines in <code>f2</code> as regex patterns).</p>
","4780220"
"How can I select random files from a directory in bash?","52786","","<p>I have a directory with about 2000 files. How can I select a random sample of <code>N</code> files through using either a bash script or a list of piped commands?</p>
","<p>Here's a script that uses GNU sort's random option:</p>

<pre><code>ls |sort -R |tail -$N |while read file; do
    # Something involving $file, or you can leave
    # off the while to just get the filenames
done
</code></pre>
","414316"
"Bash: Split string into character array","52725","","<p>I have a string in a Bash shell script that I want to split into an array of characters, not based on a delimiter but just one character per array index. How can I do this? <strike>Ideally it would not use any external programs.</strike> Let me rephrase that. My goal is portability, so things like <code>sed</code> that are likely to be on any POSIX compatible system are fine.</p>
","<p>Try</p>

<pre><code>echo ""abcdefg"" | fold -w1
</code></pre>

<p><em>Edit: Added a more elegant solution suggested in comments.</em></p>

<pre><code>echo ""abcdefg"" | grep -o .
</code></pre>
","7579022"
"Remove all whitespaces in a file- Linux","52723","","<p>How would I remove ALL whitespaces in a given file in Linux?</p>
","<p>Depending on your definition of whitespace, something like:</p>

<pre><code>tr -d ' \t\n\r\f' &lt;inputFile &gt;outputFile
</code></pre>

<p>would do the trick.</p>
","4109660"
"grep in IF statement","52691","","<p>The following script portion read each line in <code>$next</code>. But when I try to grep particular pattern i.e. <code>""MO""</code> in <code>$next</code>, the error is shown on standard output as:</p>

<pre><code>grep: 40922|OPR: No such file or directory  
grep: MO: No such file or directory  
grep: 12345|OPR: No such file or directory  
grep: MO: No such file or directory   
grep: 12345|12345|202|local|LMNO: No such file or directory  

cat /home/scripts/$E1.out | while read next  
do  
i=`echo $next | awk -F""|"" '{print($1)}'`
j=`echo $next | awk -F""|"" '{print($2)}'`
k=`echo $next | awk -F""|"" '{print($3)}'`
l=`echo $next | awk -F""|"" '{print($4)}'`
m=`echo $next | awk -F""|"" '{print($5)}'`
n=`echo $next | awk -F""|"" '{print($6)}'`
o=`echo $next | awk -F""|"" '{print($6)}'`  
if grep -q ""MO"" $next  
then echo ""FOUND;"" &gt;&gt; /home/scripts/sql.$E1.out  
else echo ""NOT FOUND;"" &gt;&gt; /home/scripts/sql.$E1.out  
fi  
done  
</code></pre>

<p><code>$E1.out</code> files looks like :  </p>

<pre><code>40922|OPR MO 12345|OPR MO 12345|12345|202|local|LMNO  
</code></pre>
","<p>The argument you pass in to <a href=""http://opengroup.org/onlinepubs/007908799/xcu/grep.html"" rel=""noreferrer""><code>grep</code></a>, <code>$next</code>, is being treated as a list of filenames to search through. If you would like to search within that line for a string, say, <code>MO</code>, then you need to either put it in a file and pass that file in as an argument, or pipe it in via standard input.</p>

<p>Here's an example that you can try out on the command line; of course, substitute the variable that you're using for the literal value that I included to illustrate:</p>

<pre><code>if echo ""40922|OPR MO 12345|OPR MO 12345|12345|202|local|LMNO"" | grep -q ""MO""
  then echo ""FOUND""
  else echo ""NOT FOUND""
fi
</code></pre>
","3944106"
"How do I test (in one line) if command output contains a certain string?","52610","","<p>In one line of bash, how do I return an exit status of 0 when the output of <code>/usr/local/bin/monit --version</code> doesn't contain exactly <code>5.5</code> and an exit status of 1 when it does?</p>
","<pre><code>! /usr/local/bin/monit --version | grep -q 5.5
</code></pre>

<p>(<code>grep</code> returns an exit-status of 0 if it finds a match, and 1 otherwise. The <code>-q</code> option, ""quiet"", tells it not to print any match it finds; in other words, it tells <code>grep</code> that the only thing you want is its return-value. The <code>!</code> at the beginning inverts the exit-status of the whole pipeline.)</p>

<p><strong>Edited to add:</strong> Alternatively, if you want to do this in ""pure Bash"" (rather than calling <code>grep</code>), you can write:</p>

<pre><code>[[ $(/usr/local/bin/monit --version) != *5.5* ]]
</code></pre>

<p>(<code>[[...]]</code> is explained in <a href=""http://www.gnu.org/software/bash/manual/bashref.html#Conditional-Constructs"">&sect;3.2.4.2 ""Conditional Constructs"" of the <em>Bash Reference Manual</em></a>. <code>*5.5*</code> is just like in fileglobs: zero or more characters, plus <code>5.5</code>, plus zero or more characters.)</p>
","12375792"
"Programmatically getting an access token for using the Facebook Graph API","52602","","<p>I am trying to put together a bash or python script to play with the facebook graph API. Using the API looks simple, but I'm having trouble setting up curl in my bash script to call authorize and access_token. Does anyone have a working example?</p>
","<p>Better late than never, maybe others searching for that will find it. I got it working with Python 2.6 on a MacBook.</p>

<p>This requires you to have</p>

<ul>
<li>the Python facebook module installed: <a href=""https://github.com/pythonforfacebook/facebook-sdk"" rel=""noreferrer"">https://github.com/pythonforfacebook/facebook-sdk</a>,</li>
<li>an actual Facebook app set up</li>
<li>and the profile you want to post to must have granted proper permissions to allow all the different stuff like reading and writing.</li>
</ul>

<p>You can read about the authentication stuff in the Facebook developer documentation. See <a href=""https://developers.facebook.com/docs/authentication/"" rel=""noreferrer"">https://developers.facebook.com/docs/authentication/</a> for details.</p>

<p>This blog post might also help with this: <a href=""http://blog.theunical.com/facebook-integration/5-steps-to-publish-on-a-facebook-wall-using-php/"" rel=""noreferrer"">http://blog.theunical.com/facebook-integration/5-steps-to-publish-on-a-facebook-wall-using-php/</a></p>

<p>Here goes:</p>

<pre><code>#!/usr/bin/python
# coding: utf-8

import facebook
import urllib
import urlparse
import subprocess
import warnings

# Hide deprecation warnings. The facebook module isn't that up-to-date (facebook.GraphAPIError).
warnings.filterwarnings('ignore', category=DeprecationWarning)


# Parameters of your app and the id of the profile you want to mess with.
FACEBOOK_APP_ID     = 'XXXXXXXXXXXXXXX'
FACEBOOK_APP_SECRET = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
FACEBOOK_PROFILE_ID = 'XXXXXX'


# Trying to get an access token. Very awkward.
oauth_args = dict(client_id     = FACEBOOK_APP_ID,
                  client_secret = FACEBOOK_APP_SECRET,
                  grant_type    = 'client_credentials')
oauth_curl_cmd = ['curl',
                  'https://graph.facebook.com/oauth/access_token?' + urllib.urlencode(oauth_args)]
oauth_response = subprocess.Popen(oauth_curl_cmd,
                                  stdout = subprocess.PIPE,
                                  stderr = subprocess.PIPE).communicate()[0]

try:
    oauth_access_token = urlparse.parse_qs(str(oauth_response))['access_token'][0]
except KeyError:
    print('Unable to grab an access token!')
    exit()

facebook_graph = facebook.GraphAPI(oauth_access_token)


# Try to post something on the wall.
try:
    fb_response = facebook_graph.put_wall_post('Hello from Python', \
                                               profile_id = FACEBOOK_PROFILE_ID)
    print fb_response
except facebook.GraphAPIError as e:
    print 'Something went wrong:', e.type, e.message
</code></pre>

<p>Error checking on getting the token might be better but you get the idea of what to do.</p>
","5426804"
"How do I recursively list all directories at a location, breadth-first?","52580","","<p>Breadth-first list is important, here. Also, limiting the depth searched would be nice.</p>

<pre><code>$ find . -type d
/foo
/foo/subfoo
/foo/subfoo/subsub
/foo/subfoo/subsub/subsubsub
/bar
/bar/subbar

$ find . -type d -depth
/foo/subfoo/subsub/subsubsub
/foo/subfoo/subsub
/foo/subfoo
/foo
/bar/subbar
/bar

$ &lt; what goes here? &gt;
/foo
/bar
/foo/subfoo
/bar/subbar
/foo/subfoo/subsub
/foo/subfoo/subsub/subsubsub
</code></pre>

<p>I'd like to do this using a bash one-liner, if possible. If there were a javascript-shell, I'd imagine something like</p>

<pre><code>bash(""find . -type d"").sort( function (x) x.findall(/\//g).length; )
</code></pre>
","<p>The <code>find</code> command supports <code>-printf</code> option which recognizes a lot of placeholders.</p>

<p>One such placeholder is <code>%d</code> which renders the depth of given path, relative to where <code>find</code> started.</p>

<p>Therefore you can use following simple one-liner:</p>

<pre><code>find -type d -printf '%d\t%P\n' | sort -r -nk1 | cut -f2-
</code></pre>

<p>It is quite straightforward, and does not depend on heavy tooling like <code>perl</code>.</p>

<p>How it works: </p>

<ul>
<li>it internally generates list of files, each rendered as a two-field line</li>
<li>the first field contains the depth, which is used for (reverse) numerical sorting, and then cut away</li>
<li>resulting is simple file listing, one file per line, in the deepest-first order</li>
</ul>
","27336531"
"Unix find: search for executable files","52562","","<p>What type of parameter/flag can I use with the Unix <code>find</code> command so that I search executables?</p>
","<p>On GNU versions of find you can use <code>-executable</code>:</p>

<pre><code>find . -type f -executable -print
</code></pre>

<p>For BSD versions of find, you can use <code>-perm</code> with <code>+</code> and an octal mask:</p>

<pre><code>find . -type f -perm +111 -print
</code></pre>

<p>In this context ""+"" means ""any of these bits are set"" and 111 is the execute bits.</p>

<p>Note that this is not identical to the <code>-executable</code> predicate in GNU find. In particular, <code>-executable</code> tests that the file can be executed by the current user, while <code>-perm +111</code> just tests if any execute permissions are set.</p>

<p>Older versions of GNU find also support the <code>-perm +111</code> syntax, but as of <a href=""http://lists.gnu.org/archive/html/bug-findutils/2013-09/msg00024.html"" rel=""noreferrer"">4.5.12</a> this syntax is no longer supported. Instead, you can use <code>-perm /111</code> to get this behavior.</p>
","4458361"
"List files by last edited date","52556","","<p>Let's say I have a directory like <code>/home/user/</code>.</p>

<p>How can  I to list EVERY file (even in sub directories) under that folder, and order them by the date they were last edited?</p>
","<p>You can use:</p>

<pre><code>$ ls -Rt
</code></pre>

<p>where <code>-R</code> means <em>recursive</em> (include subdirectories) and <code>-t</code> means ""sort by last modification date"".</p>
","1404964"
"Getting exit code of last shell command in another script","52487","","<p>I am trying to beef up my notify script. The way the script works is that I put it behind a long running shell command and then all sorts of notifications get invoked after the long running script finished.</p>

<p>For example:</p>

<pre><code>sleep 100; my_notify
</code></pre>

<p>It would be nice to get the exit code of the long running script, the problem is that calling <code>my_notify</code> creates a new process that does not have access to the <code>$?</code> variable.</p>

<p>Compare:</p>

<pre><code>~ $: ls nonexisting_file; echo ""exit code: $?""; echo ""PPID: $PPID""
ls: nonexisting_file: No such file or directory
exit code: 1
PPID: 6203
</code></pre>

<p>vs.</p>

<pre><code>~ $: ls nonexisting_file; my_notify      
ls: nonexisting_file: No such file or directory
exit code: 0
PPID: 6205
</code></pre>

<p>The <code>my_notify</code> script has the following in it:</p>

<pre><code>#!/bin/sh
echo ""exit code: $?""
echo ""PPID: $PPID""
</code></pre>

<p>I am looking for a way to get the exit code of the previous command without changing the structure of the command too much. I am aware of the fact that if I change it to work more like <code>time</code>, e.g. <code>my_notify longrunning_command...</code> my problem would be solved, but I actually like that I can tack it at the end of a command and I fear complications of this second solution.</p>

<p>Can this be done or is it fundamentally incompatible with the way that shells work?</p>

<p>My shell is <code>zsh</code> but I would like it to work with <code>bash</code> as well.</p>
","<p>You'd really need to use a shell function in order to accomplish that.  For a simple script like that it should be pretty easy to have it working in both zsh and bash.  Just place the following in a file:</p>

<pre><code>my_notify() {
  echo ""exit code: $?""
  echo ""PPID: $PPID""
}
</code></pre>

<p>Then source that file from your shell startup files.  Although since that would be run from within your interactive shell, you may want to use $$ rather than $PPID.</p>
","13059368"
"In bash, how do I bind a function key to a command?","52436","","<p>Example:  I want to bind the <kbd>F12</kbd> key to the command <code>echo ""foobar""</code> such that every time I hit <kbd>F12</kbd> the message ""foobar"" will be printed to screen.  Ideally it could be any arbitrary shell command, not just builtins.  How does one go about this?</p>
","<p>You can determine the character sequence emitted by a key by pressing <kbd>Ctrl</kbd>-<kbd>v</kbd> at the command line, then pressing the key you're interested in. On my system for <kbd>F12</kbd>, I get <code>^[[24~</code>. The <code>^[</code> represents <kbd>Esc</kbd>. Different types of terminals or terminal emulators can emit different codes for the same key.</p>

<p>At a Bash prompt you can enter a command like this to enable the key macro so you can try it out.</p>

<pre><code>bind '""\e[24~"":""foobar""'
</code></pre>

<p>Now, when you press <kbd>F12</kbd>, you'll get ""foobar"" on the command line ready for further editing. If you wanted a keystroke to enter a command immediately, you can add a newline:</p>

<pre><code>bind '""\e[24~"":""pwd\n""'
</code></pre>

<p>Now when you press <kbd>F12</kbd>, you'll get the current directory displayed without having to press <kbd>Enter</kbd>. What if you've already typed something on the line and you use this which automatically executes? It could get messy. However, you could clear the line as part of your macro:</p>

<pre><code>bind '""\e[24~"":""\C-k \C-upwd\n""'
</code></pre>

<p>The space makes sure that the <kbd>Ctrl</kbd>-<kbd>u</kbd> has something to delete to keep the bell from ringing.</p>

<p>Once you've gotten the macro working the way you want, you can make it persistent by adding it to your <code>~/.inputrc</code> file. There's no need for the <code>bind</code> command or the outer set of single quotes:</p>

<pre><code>""\e[24~"":""\C-k \C-upwd\n""
</code></pre>

<p><strong>Edit:</strong></p>

<p>You can also create a key binding that will execute something without disturbing the current command line.</p>

<pre><code>bind -x '""\eW"":""who""'
</code></pre>

<p>Then while you're typing a command that requires a username, for example, and you need to know the names of user who are logged in, you can press <kbd>Alt</kbd>-<kbd>Shift</kbd>-<kbd>W</kbd> and the output of <code>who</code> will be displayed and the prompt will be re-issued with your partial command intact and the cursor in the same position in the line.</p>

<p>Unfortunately, this doesn't work properly for keys such as <kbd>F12</kbd> which output more than two characters. In some cases this can be worked around.</p>

<p>The command (<code>who</code> in this case) could be any executable - a program, script or function.</p>
","4201274"
"How to pass argument in expect through command line in shell script","52344","","<p>I am passing argument in <code>expect</code> through command line in shell script </p>

<p>I tried this  </p>

<pre><code>#!/usr/bin/expect -f

set arg1 [lindex $argv 0]

spawn lockdis -p
expect ""password:"" {send ""$arg1\r""}
expect ""password:"" {send ""$arg1\r""}
expect ""$ ""
</code></pre>

<p>but it's not working. Please help me to figure it out.</p>

<p>Thanks</p>
","<p>If you want to read from arguments, you can achieve this simply by</p>

<pre><code>set username [lindex $argv 0];
set password [lindex $argv 1];
</code></pre>

<p>And print it</p>

<pre><code>send_user ""$username $password""
</code></pre>

<p>That script will print</p>

<pre><code>$ ./test.exp user1 pass1
user1 pass1
</code></pre>

<p>You can use Debug mode</p>

<pre><code>$ ./test.exp -d user1 pass1
</code></pre>
","17060172"
"Create a new file in git bash","52252","","<p>I've got Git for Windows running, I'm not sure if it's supposed to function as a text editor though?</p>

<p>I think I installed it with the Vim editor, but in a Git Bash shell how do I create a file, such as webpage.html?</p>

<pre><code>$ git add webpage.html
</code></pre>

<p>comes back as</p>

<pre><code>fatal: pathspec 'webpage.html' did not match any files
</code></pre>

<p>because it tries to track a non-existing file.</p>

<p>I understand I can create a new file on the github.com interface, that's easy enough, I'm wondering if I can create a new file (like echo in cmd) and whether this file will actually be blank (<a href=""https://stackoverflow.com/questions/1702762/how-to-create-an-empty-file-at-the-command-line"">echo in cmd creates non-blank files</a>) and how I can write into that file from the git bash shell?</p>

<p>If not, I'm guessing I should just create a new file in windows explorer? Is that the norm...?</p>

<h3><strong>Edit</strong></h3>

<p>Wow, I was new to all this when I asked the above. No, Git Bash isn't a text editor, it's a Windows version of the <code>git</code> facility on Unix, and only handles the file versioning. <code>git add</code>, <code>git rm</code>, and other <code>git</code> commands just handle how the version control file manager handles the files and folders, and the only things it changes as a result are in a hidden folder named <code>.git</code>. Sorry if this has confused anyone.</p>

<p>I was confused at the time because, as the name suggests, Git Bash has bash shell commands shipped with it, not just <code>git</code> - e.g. <code>ls</code> (list files), <code>mkdir</code> (make new folder), and -- what I was looking for -- <code>touch</code> (make a new file or update timestamp on existing file), and <code>echo</code> (print text to the command line, or direct that text to a file). </p>

<p>I could have made my new file <code>webpage.html</code> with:</p>

<pre><code>touch webpage.html
</code></pre>

<p>Then written to it with:</p>

<pre><code>echo ""&lt;!DOCTYPE html&gt;"" &gt; webpage.html
</code></pre>

<p>Then appended lines to it with:</p>

<pre><code>echo ""&lt;html"" &gt;&gt; webpage.html
echo ""&lt;head&gt;"" &gt;&gt; webpage.html
</code></pre>

<p>and so on - but I don't think there's any text editor (according to <a href=""http://www.codeproject.com/Articles/457305/Basic-Git-Command-Line-Reference-for-Windows-Users"" rel=""nofollow noreferrer"">this list of commands</a>). See <a href=""https://stackoverflow.com/questions/10564/how-can-i-set-up-an-editor-to-work-with-git-on-windows"">this thread</a> for details of setting up a text editor with Git on Windows.</p>
","<p>If you are using the Git <strong>Bash</strong> shell, you can use the following trick:</p>

<pre><code>&gt; webpage.html
</code></pre>

<p>This is actually the same as:</p>

<pre><code>echo """" &gt; webpage.html
</code></pre>

<p>Then, you can use <code>git add webpage.html</code> to stage the file.</p>
","18997095"
"How to check internet access using bash script in linux?","52208","","<p>In my school, the internet is not available(every night after 23:0 the school will kill the internet, to put us in bed >..&lt;), then the ping will never stop, though I have used the parameter <code>ping -w1 ...</code>. </p>

<p>That is, when I use: <code>ping -q -w1 -c1 8.8.8.8</code> to check if the internet is up/down, It will be there without any output and doesn't exit, just like I am using a single <code>cat</code>. </p>

<p>Can you understand my question??? I don't know why it's like this, But I think the problem is related to the <em>school-internet-service</em>. Any suggestion? (I think <code>wget</code> may be a good alternative, but how to use?)</p>
","<p>Using wget:</p>

<pre><code>#!/bin/bash

wget -q --tries=10 --timeout=20 --spider http://google.com
if [[ $? -eq 0 ]]; then
        echo ""Online""
else
        echo ""Offline""
fi
</code></pre>
","17292700"
"Bash Script Calls another bash script and waits for it to complete before proceeding","52194","","<p>I have 1 bash script that runs another bash script, however the first bashscript isn't waiting for the second one to complete before proceeding, how can I force it to wait?</p>

<p>For example:</p>

<pre><code>#!/bin/bash
# first.sh

#call to secondary script
sh second.sh
echo ""second.sh has completed""

echo ""continuing with the rest of first.sh...""
</code></pre>

<p>The way it is now, it will run second.sh, and continue on, without waiting for second.sh to complete.</p>
","<p>Normally it does; something else is happening. Are you sure that the other script isn't running something in the background instead? You can try using <code>wait</code> regardless.</p>
","2270089"
"List files over a specific size in current directory and all subdirectories","52168","","<p>How can I display all files greater than 10k bytes in my current directory and it's subdirectories.</p>

<p>Tried <code>ls -size +10k</code> but that didn't work.</p>
","<p><code>find . -size +10k -exec ls -lh {} \+</code></p>

<p>the first part of this is identical to @sputnicks answer, and sucesffully finds all files in the directory over 10k (don't confuse k with K), my addition, the second part then executes <code>ls -lh</code> or ls that lists(-l) the files by human readable size(-h). negate the h if you prefer. of course the <code>{}</code> is the file itself, and the <code>\+</code> is simply an alternative to <code>\;</code></p>

<p>which in practice <code>\;</code> would repeat or:</p>

<p><code>ls -l found.file; ls -l found.file.2; ls -l found.file.3</code></p>

<p>where <code>\+</code> display it as one statement or:</p>

<p><code>ls -l found.file found.file.2  found.file.3</code></p>

<p>more on <a href=""https://stackoverflow.com/a/6085192/638649"">\; vs +</a> with <code>find</code></p>

<p>Additionaly, you may want the listing ordered by size. Which is relatively easy to accomplish. I would at the <code>-s</code> option to <code>ls</code>, so <code>ls -ls</code> and then pipe it to <code>sort -n</code> to sort numerically</p>

<p>which would become:</p>

<p><code>find . -size +10k -exec ls -ls {} \+ | sort -n</code> </p>

<p>or in reverse order add an -r :</p>

<p><code>find . -size +10k -exec ls -ls {} \+ | sort -nr</code></p>

<p>finally, your title says find <strong>biggest</strong> file in directory. You can do that by then piping the code to <code>tail</code></p>

<p><code>find . -size +10k -exec ls -ls {} \+ | sort -n | tail -1</code> 
would find you the largest file in the directory and its sub directories. </p>

<p>note you could also sort files by size by using -S, and negate the need for sort. but to find the largest file you would need to use head so</p>

<p><code>find . -size +10k -exec ls -lS {} \+ | head -1</code> </p>

<p>the benefit of doing it with -S and not <code>sort</code> is one, you don't have to type <code>sort -n</code> and two you can also use <code>-h</code> the human readable size option. which is one of my favorite to use, but is not available with older versisions of <code>ls</code>, for example we have an old centOs 4 server at work that doesn't have <code>-h</code></p>
","13282838"
"Bash checking if string does not contain other string","52139","","<p>I have a string <code>${testmystring}</code> in my <strong>.sh</strong> script and I want to check if this string does not contain another string.</p>

<pre><code>    if [[ ${testmystring} doesNotContain *""c0""* ]];then
        # testmystring does not contain c0
    fi 
</code></pre>

<p>How can I do that, i.e. what is doesNotContain supposed to be?</p>
","<p>Use <code>!=</code>. </p>

<pre><code>if [[ ${testmystring} != *""c0""* ]];then
    # testmystring does not contain c0
fi
</code></pre>

<p>See <code>help [[</code> for more information.</p>
","30557530"
"How can Bash execute a command in a different directory context?","52104","","<p>I have a common command that gets called from within very specific directories. There is only one executable sitting in /bin for this program, and the current working directory is very important for running it correctly. The script affects the files that live inside the directory it is run within.</p>

<p>Now, I also have a custom shell script that does some things in one directory, but I need to call that command mentioned above as if it was in another directory.</p>

<p>How do you do this in a shell script?</p>
","<p>You can use the <code>cd</code> builtin, or the <code>pushd</code> and <code>popd</code> builtins for this purpose. For example:</p>

<pre><code># do something with /etc as the working directory
cd /etc
:

# do something with /tmp as the working directory
cd /tmp
:
</code></pre>

<p>You use the builtins just like any other command, and can change directory context as many times as you like in a script.</p>
","10566581"
"Increment with bash","52021","","<p>I'm stuck trying to increment a variable in an .xml file. The tag may be in a file 100 times or just twice. I am trying to add a value that will increment the amount several times. I have included some sample code I am working on, but when I run the script it will only place a one and not increment further. Advice would be great on what I'm doing wrong.</p>

<pre><code>for xmlfile in $(find $DIRECTORY -type f -name \*.xml); do
  TFILE=""/tmp/$directoryname.$$""
  FROM='&gt;&lt;process&gt;'
  TO=' value\=""""&gt;&lt;process&gt;'
  i=0
  while [ $i -lt 10 ]; do
    i=`expr $i + 1`
    FROM='value\=""""'
    TO='value\=""'$i'""'
  done
  sed ""s/$FROM/$TO/g"" ""$xmlfile"" &gt; $TFILE &amp;&amp; mv $TFILE ""$xmlfile""
done
</code></pre>

<p>The <code>while</code> loop was something I just placed to test the code. It will insert the <code>&lt;process&gt;</code> but it will not insert the increment.</p>

<p>My end goal:</p>

<pre><code>&lt;process&gt;value=""1""&lt;/process&gt;
&lt;process&gt;value=""2""&lt;/process&gt;
&lt;process&gt;value=""3""&lt;/process&gt;
&lt;process&gt;value=""4""&lt;/process&gt;
</code></pre>

<p>And so on as long as <code>&lt;process&gt;</code> is present in the file it needs to increment.</p>
","<p>For a proper increment in <code>bash</code>, use a for loop (C style) :</p>

<pre><code>n=10
for ((i=1; i&lt;=n; i++)) {
    printf '&lt;process&gt;value=""%d""&lt;/process&gt;\n' $i
}
</code></pre>

<p><strong>OUTPUT</strong></p>

<pre><code>&lt;process&gt;value=""1""&lt;/process&gt;
&lt;process&gt;value=""2""&lt;/process&gt;
&lt;process&gt;value=""3""&lt;/process&gt;
&lt;process&gt;value=""4""&lt;/process&gt;
&lt;process&gt;value=""5""&lt;/process&gt;
&lt;process&gt;value=""6""&lt;/process&gt;
&lt;process&gt;value=""7""&lt;/process&gt;
&lt;process&gt;value=""8""&lt;/process&gt;
&lt;process&gt;value=""9""&lt;/process&gt;
&lt;process&gt;value=""10""&lt;/process&gt;
</code></pre>

<p><strong>NOTE</strong></p>

<p><code>expr</code> is a program used in ancient shell code to do math. In Posix shells like bash, use $(( expression )). In bash and ksh93, you can also use <code>(( expression ))</code> or <code>let expression</code> if you don't need to use the result in an expansion.</p>

<p><strong>EDIT</strong></p>

<p>If I misunderstood your needs and you have a file with blank values like this :</p>

<pre><code>&lt;process&gt;value=""""&lt;/process&gt;
</code></pre>

<p>try this :</p>

<pre><code>$ perl -i -pe '$c++; s/&lt;process&gt;value=""""/&lt;process&gt;value""$c""/g' file.xml
&lt;process&gt;value""1""&lt;/process&gt;
&lt;process&gt;value""2""&lt;/process&gt;
&lt;process&gt;value""3""&lt;/process&gt;
&lt;process&gt;value""4""&lt;/process&gt;
&lt;process&gt;value""5""&lt;/process&gt;
&lt;process&gt;value""6""&lt;/process&gt;
&lt;process&gt;value""7""&lt;/process&gt;
</code></pre>

<p><code>-i</code> switch edit the file for real, so take care.</p>
","13387681"
"Exception handling in shell scripting?","51980","","<p>I'm looking for exception handling mechanism in shell script. Is there any try,catch equivalent mechanism in shell script ?</p>
","<p>There is not really a <code>try/catch</code> in bash (i assume you're using bash), but you can achieve a quite similar behaviour using <code>&amp;&amp;</code> or <code>||</code>.</p>

<p>In this example, you want to run <code>fallback_command</code> if <code>a_command</code> <strong>fails</strong> (returns a non-zero value):</p>

<pre><code>a_command || fallback_command
</code></pre>

<p>And in this example, you want to execute <code>second_command</code> if <code>a_command</code> <strong>is successful</strong> (returns 0):</p>

<pre><code>a_command &amp;&amp; second_command
</code></pre>

<p>They can easily be mixed together by using a subshell, for example, the following command will execute <code>a_command</code>, if it succeeds it will then run <code>other_command</code>, but if <code>a_command</code> or <code>other_command</code> fails, <code>fallback_command</code> will be executed:</p>

<pre><code>(a_command &amp;&amp; other_command) || fallback_command
</code></pre>
","6961470"
"Alias with variable in bash","51935","","<p>I want to create an alias in <code>bash</code> like this: </p>

<pre><code>alias tail_ls=""ls -l $1 | tail""
</code></pre>

<p>Thus, if somebody types:</p>

<pre><code>tail_ls /etc/ 
</code></pre>

<p>it will only show the last 10 files in the directory.</p>

<p>But <code>$1</code> does not seem to work for me. Is there any way I can introduce variables in bash.</p>
","<p>I'd create a function for that, rather than alias, and then exported it, like this:</p>

<pre><code>function tail_ls { ls -l ""$1"" | tail; }

export -f tail_ls
</code></pre>

<p>Note <code>-f</code> switch to <code>export</code>: it tells it that you are exporting a function. Put this in your <code>.bashrc</code> and you are good to go.</p>
","4438226"
"SSH error when executing a remote command: ""stdin: is not a tty""","51932","","<p>I'm trying to connect to machine one with ssh and then connect to another machine two with ssh. But get this error:</p>

<pre><code>ssh user@computerone.com 'ssh otheruser@computertwo.com'

stdin: is not a tty
</code></pre>
","<p>When logging into a shell, the remote host assumes that the connection is done by a human user. Therefore, it is reasonable to expect that they have control over the <em>standard in</em> on the client. That is to say, the user is giving input on a terminal through the keyboard. If the remote host detects that the user is not human (because the input is not a terminal - tty, but another process), it may warn the user about this unexpected condition.</p>

<hr>

<p>A demonstration of the discussed misbehavior and how to avoid it (<code>man ssh</code> and look for -t for a more thorough explanation).</p>

<pre><code>$ ssh -t genja.org 'ssh raptor.lan hostname\; uptime'
host: genja.lan 
raptor
 21:17:27 up 3 days, 15 min,  1 user,  load average: 0.00, 0.00, 0.00
Connection to genja.org closed.

$ ssh genja.org uptime 
host: genja.lan 
 21:17:43 up 12 days, 17:40,  1 user,  load average: 0.30, 0.08, 0.02
</code></pre>

<p>...and the error:</p>

<pre><code>$ ssh  genja.org 'ssh raptor.lan hostname\; uptime'
host: genja.lan 
Permission denied (publickey,keyboard-interactive).
</code></pre>

<hr>

<p>You may want to make a tunnel instead:</p>

<pre><code>ssh -L 4444:raptor.lan:22 genja.org
</code></pre>

<p>Then, on a different terminal: </p>

<pre><code>ssh -p 4444 localhost will give you a conenction straight to ""raptor.lan""
</code></pre>

<p>Use IP addresses such as 192.168.0.11 if DNS aliases are not configured on the remote end.</p>
","12536902"
"Copy multiple files from one directory to another from Linux shell","51913","","<p>I want to copy several files from one folder to another.  How do I do it from the shell command prompt?</p>

<p>Consider that <code>folder1</code> contains ten files (e.g. <code>file1</code>, <code>file2</code>, <code>abc</code>, <code>xyz</code>,
 etc.).  I am currently doing the following in order to copy two files from one folder to another:</p>

<pre><code>cp /home/ankur/folder/file1 /home/ankur/folder/file2 /home/ankur/dest
</code></pre>

<p>Typing the full path into the command line for both the files is annoying.<br>
What comes to my mind is regex, but I don't quite know how to do it.</p>

<p>Any help will reduce my RSI ;-)</p>
","<p>I guess you are looking for brace expansion:</p>

<pre><code>cp /home/ankur/folder/{file1,file2} /home/ankur/dest
</code></pre>

<p>take a look here, it would be helpful for you if you want to handle multiple files once :</p>

<p><a href=""http://www.tldp.org/LDP/abs/html/globbingref.html"" rel=""noreferrer"">http://www.tldp.org/LDP/abs/html/globbingref.html</a></p>

<h3>tab completion with zsh...</h3>

<p><img src=""https://i.stack.imgur.com/BvwwA.gif"" alt=""enter image description here""></p>
","24206481"
"How to delete and replace last line in the terminal using bash?","51764","","<p>I want to implement a progress bar showing elapsed seconds in bash. For this, I need to erase the last line shown on the screen (command ""clear"" erases all the screen, but I need to erase only the line of the progress bar and replace it with the new information).</p>

<p>Final result should look like:</p>

<pre><code>$ Elapsed time 5 seconds
</code></pre>

<p>Then after 10 seconds i want to replace this sentence (in the same position in the screen) by:</p>

<pre><code>$ Elapsed time 15 seconds
</code></pre>
","<p>echo a carriage return with \r</p>

<pre><code>seq 1 1000000 | while read i; do echo -en ""\r$i""; done
</code></pre>

<p>from man echo:</p>

<pre><code>-n     do not output the trailing newline
-e     enable interpretation of backslash escapes

\r     carriage return
</code></pre>
","2388107"
"Check if a condition is false","51703","","<p>It is seems to be an easy question, I wonder why googling didn't give anything helpful -- nor in StackOverflow, nor in tutorials. I just need to check using bash that a condition is false. </p>

<p>Of what I found I tried </p>

<pre><code>if ! [ 0==2 ]; then echo Hello; fi
</code></pre>

<p>and </p>

<pre><code>if [ ! 0==2 ]; then echo Hello; fi 
</code></pre>

<p>none of them print <em>Hello</em>.</p>

<p>I found only two similar questions, but the end answer in both cases was restructured code to not use the ""false"" condition.</p>
","<p>Do you mean:</p>

<pre><code>if ! [ 0 == 2 ]; then
  echo Hello;
fi
</code></pre>

<p>You lacked space around the equality operator.</p>

<p>This might be the time to read <a href=""http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html"">http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html</a> - especially the sections about if then else and operators. I usually have this open when I am writing scripts..</p>
","24694436"
"Compare/Difference of two arrays in bash","51688","","<p>Is it possible to take the difference of two arrays in bash.<br>
Would be really great if you could suggest me the way to do it.</p>

<p>Code :</p>

<pre><code>Array1=( ""key1"" ""key2"" ""key3"" ""key4"" ""key5"" ""key6"" ""key7"" ""key8"" ""key9"" ""key10"" )
Array2=( ""key1"" ""key2"" ""key3"" ""key4"" ""key5"" ""key6"" ) 

Array3 =diff(Array1, Array2)

Array3 ideally should be :
Array3=( ""key7"" ""key8"" ""key9"" ""key10"" )
</code></pre>

<p>Appreciate your help.</p>
","<p>If you strictly want <code>Array1 - Array2</code>, then</p>

<pre>
$ Array3=()
$ for i in ""${Array1[@]}""; do
&gt;&nbsp;&nbsp;&nbsp;&nbsp; skip=
&gt;&nbsp;&nbsp;&nbsp;&nbsp; for j in ""${Array2[@]}""; do
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [[ $i == $j ]] && { skip=1; break; }
&gt;&nbsp;&nbsp;&nbsp;&nbsp; done
&gt;&nbsp;&nbsp;&nbsp;&nbsp; [[ -n $skip ]] || Array3+=(""$i"")
&gt; done
$ declare -p Array3
</pre>

<p>Runtime might be improved with associative arrays, but I personally wouldn't bother.  If you're manipulating enough data for that to matter, shell is the wrong tool.</p>

<hr>

<p>For a symmetric difference like Dennis's answer, existing tools like <a href=""http://opengroup.org/onlinepubs/007908799/xcu/comm.html"" rel=""noreferrer""><code>comm</code></a> work, as long as we massage the input and output a bit (since they work on line-based files, not shell variables).</p>

<p>Here, we tell the shell to use newlines to join the array into a single string, and discard tabs when reading lines from <code>comm</code> back into an array.</p>

<pre>
$ oldIFS=$IFS IFS=$'\n\t'
$ Array3=($(comm -3 &lt;(echo ""${Array1[*]}"") &lt;(echo ""${Array2[*]}"")))
comm: file 1 is not in sorted order
$ IFS=$oldIFS
$ declare -p Array3
declare -a Array3='([0]=""key7"" [1]=""key8"" [2]=""key9"" [3]=""key10"")'
</pre>

<p>It complains because, by lexographical sorting, <code>key1 &lt; … &lt; key9 &gt; key10</code>.  But since both input arrays are sorted similarly, it's fine to ignore that warning.  You can use <code>--nocheck-order</code> to get rid of the warning, or add a <code>| sort -u</code> inside the <code>&lt;(…)</code> process substitution if you can't guarantee order&amp;uniqueness of the input arrays.</p>
","2315459"
"How can I untar a tar.bz file in unix?","51651","","<p>I've found tons of pages saying how to untar tar.bz2 files, but how would one untar a tar.bz file?</p>
","<p>use the <code>-j</code> option of <code>tar</code>.</p>

<pre><code>tar -xjf /path/to/archive.tar.bz
</code></pre>
","9454985"
"Using BASH to display a progress (working) indicator","51613","","<p>Using a bash only script, how can you provide a bash progress indicator?</p>

<p>So I can run a command form bash, and while that command is executing let the user know that something is still happening.</p>
","<p>In this example using SCP, I'm demonstrating how to grab the process id (pid) and then do something while that process is running.</p>

<p>This displays a simple spinnng icon.</p>

<pre><code>/usr/bin/scp me@website.com:file somewhere 2&gt;/dev/null &amp;
pid=$! # Process Id of the previous running command

spin[0]=""-""
spin[1]=""\\""
spin[2]=""|""
spin[3]=""/""

echo -n ""[copying] ${spin[0]}""
while [ kill -0 $pid ]
do
  for i in ""${spin[@]}""
  do
        echo -ne ""\b$i""
        sleep 0.1
  done
done
</code></pre>

<hr>

<p>William Pursell's solution</p>

<pre><code>/usr/bin/scp me@website.com:file somewhere 2&gt;/dev/null &amp;
pid=$! # Process Id of the previous running command

spin='-\|/'

i=0
while kill -0 $pid 2&gt;/dev/null
do
  i=$(( (i+1) %4 ))
  printf ""\r${spin:$i:1}""
  sleep .1
done
</code></pre>
","12498305"
"How do I replace single quotes with space in sed?","51599","","<p>I have a flat file where I have multiple occurrences of strings that contains single quote, e.g. <code>hari's</code> and <code>leader's</code>.</p>

<p>I want to replace all occurrences of the single quote with space, i.e. </p>

<ul>
<li>all occurences of <code>hari's</code> to <code>hari s</code></li>
<li>all occurences of <code>leader's</code> to <code>leader s</code></li>
</ul>

<p>I tried</p>

<pre><code>sed -e 's/""'""/ /g' myfile.txt
</code></pre>

<p>and</p>

<pre><code>sed -e 's/""'""/"" ""/g' myfile.txt
</code></pre>

<p>but they are not giving me the expected result.</p>
","<p>Try to keep sed commands simple as much as possible or else you'll get confused of what you'd written after reading it later.</p>

<pre><code>#!/bin/bash
sed ""s/'/ /g"" myfile.txt
</code></pre>
","17358098"
"How to list variables declared in script in bash?","51446","","<p>In my script in bash, there are lot of variables, and I have to make something to save them to file.
My question is how to list all variables declared in my script and get list like this:</p>

<pre><code>VARIABLE1=abc
VARIABLE2=def
VARIABLE3=ghi
</code></pre>
","<p><code>set</code> will output the variables, unfortunately it will also output the functions defines as well.</p>

<p>Luckily POSIX mode only outputs the variables:</p>

<pre><code>( set -o posix ; set ) | less
</code></pre>

<p>Piping to <code>less</code>, or redirect to where you want the options. </p>

<p>So to get the variables declared in just the script:</p>

<pre><code>( set -o posix ; set ) &gt;/tmp/variables.before
source script
( set -o posix ; set ) &gt;/tmp/variables.after
diff /tmp/variables.before /tmp/variables.after
rm /tmp/variables.before /tmp/variables.after
</code></pre>

<p>(Or at least something based on that :-) )</p>
","1305273"
"bash vs csh vs others - which is better for application maintenance?","51423","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/199661/what-linux-shell-should-i-use"">What Linux shell should I use?</a>  </p>
</blockquote>



<p>I am starting to get proficient in a Linux environment and i'm trying to pick a weapon of choice in terms of command shell scripting (as i'm still a big n00b at this) that will help me (and others) manage, test and administer a set of server side applications running on a *NIX environment.</p>

<p>My question is: What is(are) the preferred command shell(s)  out there when the following criteria are considered:</p>

<ol>
<li><p>How easy is it to learn/understand for a junior dev who has never had an exposure to shell scripting?</p></li>
<li><p>Is there a big pool of developers out there that know this shell script?</p></li>
<li><p>Is it safe and easy to use - will script errors be silent or give intelligent error output, will it let the uninitiated shoot them selves in the foot?</p></li>
<li><p>How portable is it? - Can i expect the same script to run in OpenSolaris as well as Redhat, FreeBSD? (granted command syntax and options for specific OS will change accordingly)</p></li>
<li><p>How standard is it? Is it expected to be included on most distro's of *NIX or does it have to be installed additionally?</p></li>
</ol>

<p>I understand that there are camps out there who hold strong feelings for/against specific command shells, i am just looking for an informed opinion.</p>
","<p>These days, just about any non-embedded (or large embedded) operating system has a <a href=""http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html"" rel=""nofollow noreferrer"">POSIX:2001 a.k.a. Single Unix v3</a> compatibility layer. This is native on unix platforms (Linux, Mac OS X, Solaris, *BSD, etc.) and installable on other platforms such as Windows and Android. POSIX specifies a <a href=""http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html"" rel=""nofollow noreferrer"">shell</a> language, usually known as POSIX sh. This language is derived from the Bourne shell.</p>

<p>Most unix systems have one of two implementations of POSIX sh: ksh or bash, which have additional useful features compared to POSIX. However some less mainstream systems (especially embedded ones) may have only POSIX-mandated features.</p>

<p>Given your objectives, I see three choices:</p>

<ul>
<li>Restrict yourself to POSIX sh. Pro: you don't have to worry about differing variants, since there's a standard and compliant implementations are readily available. Con: you don't benefit from bash and ksh's extensions.</li>
<li>Use the intersection of ksh and bash. This is attractive in appearance, but it does mean you have to use two reference documents instead of just one — and even the features that bash and ksh have in common don't always use the same syntax. Figuring out which one you want to use on a given system is also a pain.</li>
<li>Choose one of ksh or bash. Both bash and ksh are available on all unix-like platforms and on Windows. Both have an open source implementation (the only one for bash, ATT ksh93 for ksh) that can be installed on most platforms. I'd go for bash over ksh for two reasons. First, it's the default on Linux, so you'll find more people who're used to it. Second, there are systems that come with an older, less-featured implementation of ksh; even if you can install ksh93, it's another thing you have to think about when deploying.</li>
</ul>

<p>Forget about csh for scripting, and forget about zsh if you want common default availability.</p>

<p>See also <a href=""https://unix.stackexchange.com/q/3320/885"">What are the fundamental differences between the mainstream *NIX shells?</a>, particularly the “for scripting” part of <a href=""https://unix.stackexchange.com/questions/3320/what-are-the-fundamental-differences-between-the-mainstream-nix-shells/3390#3390"">my answer</a>.</p>

<p>Note that shell programming involves other utilities beyond the shell. POSIX specifies those other utilities. “Bash plus other POSIX utilities” is a reasonable choice, distinct from “POSIX utilities (including sh)”.</p>
","4318284"
"sed - unknown option to `s'","51403","","<p>I'm trying to use </p>

<pre><code>sed -i -e ""s/.*seb.*/    \""$ftp_login_template\""/"" $ftp_dir
</code></pre>

<p>however I get this error:</p>

<pre><code>sed: -e expression #1, char 34: unknown option to `s'
</code></pre>

<p>I don't understand why since this works perfectly:</p>

<pre><code>sed -i -e ""s/.*wbspassword.*/    \""wbspassword\"": \""$password\"",/"" $user_conf
</code></pre>

<p>Any ideas as to what I'm doing wrong? </p>

<p>Could this be the problem?
    <code>ftp_login_template=\${user}:${password}:24:86::\/var\/lib\/clit.${user}\/downloads:\/bin\/false\""</code></p>
","<p>The problem is with slashes: your variable contains them and the final command will be something like <code>sed ""s/string/path/to/something/g""</code>, containing way too many slashes.</p>

<p>Since <code>sed</code> can take any char as delimiter, you can try using another one that doesn't appear in your replacement string:</p>

<pre><code>replacement=""/my/path""
sed -e ""s@pattern@$replacement@""
</code></pre>

<p>Note that this is not bullet proof: if the replacement string later contains <code>@</code> it will break for the same reason, and any backslash sequences like <code>\1</code> will still be interpreted according to sed rules.</p>
","9366940"
"how to hide password in command line with **** and get the value into .bat file and .sh file","51308","","<p>My .bat file command to get user input from command line is</p>

<pre><code>set /p weblogicpassword=Enter weblogic password:%=%
</code></pre>

<p>My .sh file command to get user input from bash script is </p>

<pre><code>echo -n ""Enter weblogic password: ""
read weblogicpassword
</code></pre>

<p>Now when we enter some values for password, those values are visible in command line.
How we can get the password values from command line which should be invisible to users like <em>*</em>* </p>
","<p>For bash its <code>read -s</code>. </p>

<p><code>-s Silent mode. If input is coming from a terminal, characters are not echoed.</code></p>

<p>For batch it seems to be more complicated.</p>

<p>Read about it here:
<a href=""https://stackoverflow.com/questions/664957/can-i-mask-an-input-text-in-a-bat-file"">Can I mask an input text in a bat file</a></p>
","19950690"
"Bash script compare two date variables","51235","","<p>I'm trying to compare a date given by a user to a date in a file, basically a text file with lots of dates and times listed. </p>

<p>for example the user would enter a date such as 22/08/2007 and a time of 1:00, what i need the script to do is count how many dates in the text file are after the date given by the user.</p>

<p>I’ve managed to accomplish this by converting each date in the text file to unix timestamp and then comparing the two. Is there no way of simply comparing two dates in bash?</p>

<p>Thanks in advance</p>
","<p>The GNU date command can convert a date into the number of seconds since 1970. Try this script:</p>

<pre><code>#! /bin/bash
DATE=$(date -d ""$3-$2-$1 01"" '+%s')
COUNT=0
tr '/' ' ' | {
    while read D M Y ; do
    THIS=$(date -d ""$Y-$M-$D 01"" '+%s')
    if (( THIS &gt; DATE )) ; then
        COUNT=$((COUNT + 1))
    fi
    done
    echo $COUNT
}
</code></pre>

<p>It expects three arguments and the raw dates in stdin:</p>

<pre><code>for D in $(seq 19 25) ; do echo $D/08/2007 ; done | ./count.sh 22 08 2007
3
</code></pre>

<p>It will work till 2038. ;-)</p>
","5895607"
"Shell script common template","51225","","<p>Millions of developers write shell scripts to solve various types of tasks. I use shell scripts to simplify deployment, life-cycle management, installation or simply as a <a href=""http://en.wikipedia.org/wiki/Glue_language"">glue language</a>.</p>

<p>What I've noticed is nobody actually cares about shell scripts style and quality. A lot of teams spend many hours fixing Java, C++, ... style issues, but totally ignore issues in their shell scripts. By the way, usually there is no standard way to implement a shell script within a particular project, so the one may find dozens different, ugly and buggy scripts, spread around the codebase.</p>

<p>To overcome that issue in my projects I decided to create a shell script template, universal and good enough. I will provide my templates as is to make this question a bit more useful. Out of the box these templates provides:</p>

<ul>
<li>command-line arguments handling</li>
<li>synchronization</li>
<li>some basic help</li>
</ul>

<p><strong>Arguments handling: getopts</strong> (latest version: <strong><a href=""https://github.com/RenatGilmanov/shell-script-template"">shell-script-template@github</a></strong>)</p>

<pre class=""lang-bash prettyprint-override""><code>#!/bin/bash
# ------------------------------------------------------------------
# [Author] Title
#          Description
# ------------------------------------------------------------------

VERSION=0.1.0
SUBJECT=some-unique-id
USAGE=""Usage: command -ihv args""

# --- Options processing -------------------------------------------
if [ $# == 0 ] ; then
    echo $USAGE
    exit 1;
fi

while getopts "":i:vh"" optname
  do
    case ""$optname"" in
      ""v"")
        echo ""Version $VERSION""
        exit 0;
        ;;
      ""i"")
        echo ""-i argument: $OPTARG""
        ;;
      ""h"")
        echo $USAGE
        exit 0;
        ;;
      ""?"")
        echo ""Unknown option $OPTARG""
        exit 0;
        ;;
      "":"")
        echo ""No argument value for option $OPTARG""
        exit 0;
        ;;
      *)
        echo ""Unknown error while processing options""
        exit 0;
        ;;
    esac
  done

shift $(($OPTIND - 1))

param1=$1
param2=$2

# --- Locks -------------------------------------------------------
LOCK_FILE=/tmp/$SUBJECT.lock
if [ -f ""$LOCK_FILE"" ]; then
   echo ""Script is already running""
   exit
fi

trap ""rm -f $LOCK_FILE"" EXIT
touch $LOCK_FILE

# --- Body --------------------------------------------------------
#  SCRIPT LOGIC GOES HERE
echo $param1
echo $param2
# -----------------------------------------------------------------
</code></pre>

<p><a href=""http://code.google.com/p/shflags/"">Shell Flags</a> (shFlags) allows to simplify command-line arguments handling a lot, so at some moment of time I decided not to ignore such possibility. </p>

<p><strong>Arguments handling: shflags</strong> (latest version: <strong><a href=""https://github.com/RenatGilmanov/shell-script-template"">shell-script-template@github</a></strong>)</p>

<pre class=""lang-bash prettyprint-override""><code>#!/bin/bash
# ------------------------------------------------------------------
# [Author] Title
#          Description
#
#          This script uses shFlags -- Advanced command-line flag
#          library for Unix shell scripts.
#          http://code.google.com/p/shflags/
#
# Dependency:
#     http://shflags.googlecode.com/svn/trunk/source/1.0/src/shflags
# ------------------------------------------------------------------
VERSION=0.1.0
SUBJECT=some-unique-id
USAGE=""Usage: command -hv args""

# --- Option processing --------------------------------------------
if [ $# == 0 ] ; then
    echo $USAGE
    exit 1;
fi

. ./shflags

DEFINE_string 'aparam' 'adefault' 'First parameter'
DEFINE_string 'bparam' 'bdefault' 'Second parameter'

# parse command line
FLAGS ""$@"" || exit 1
eval set -- ""${FLAGS_ARGV}""

shift $(($OPTIND - 1))

param1=$1
param2=$2

# --- Locks -------------------------------------------------------
LOCK_FILE=/tmp/${SUBJECT}.lock

if [ -f ""$LOCK_FILE"" ]; then
echo ""Script is already running""
exit
fi

trap ""rm -f $LOCK_FILE"" EXIT
touch $LOCK_FILE

# -- Body ---------------------------------------------------------
#  SCRIPT LOGIC GOES HERE
echo ""Param A: $FLAGS_aparam""
echo ""Param B: $FLAGS_bparam""
echo $param1
echo $param2
# -----------------------------------------------------------------
</code></pre>

<p>I do think these templates can be improved to simplify developer's life even more. </p>

<p><strong>So the question is how to improve them to have the following:</strong></p>

<ul>
<li><strong>built-in logging</strong></li>
<li><strong>better error handling</strong></li>
<li><strong>better portability</strong></li>
<li><strong>smaller footprint</strong></li>
<li><strong>built-in execution time tracking</strong></li>
</ul>
","<p>I would steer clear of relying on <code>bash</code> as the shell and model your solution on top of <a href=""http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html"">shell syntax defined by POSIX</a> and use <code>/bin/sh</code> on the shebang.  We had a number of surprises recently when <a href=""https://wiki.ubuntu.com/DashAsBinSh"">Ubuntu changed <code>/bin/sh</code> to <code>dash</code></a>.</p>

<p>Another pandemic in the shell world is a general misunderstanding of exit status codes.  Exiting with an understandable code is what lets other shell scripts programmatically react to specific failures.  Unfortunately, there is not a lot of guidance on this beyond <a href=""http://www.opensource.apple.com/source/Libc/Libc-320/include/sysexits.h"">the ""sysexits.h"" header file</a>.</p>

<p>If you are looking for more information about good shell scripting practices, concentrate on Korn shell scripting resources.  Ksh programming tends to focus on really programming as opposed to writing haphazard scripts.</p>

<p>Personally, I haven't found much use for shell templates.  The unfortunate truth is that most engineers will simply copy and paste your template and continue to write the same sloppy shell code.  A better approach is to create a library of shell functions with well-defined semantics and then convince others to use them.  This approach will also help with change control.  For example, if you find a defect in a template, then every script that was based on it is broken and would require modifications.  Using a library makes it possible to fix defects in one place.</p>

<p>Welcome to the world of shell scripting.  Writing shell scripts is a bit of a lost art that seems to be entering a renaissance.  There were some good books written on the subject in the late 90's - <a href=""http://rads.stackoverflow.com/amzn/click/0471168947""><em>UNIX Shell Programming</em> by Burns and Arthur</a> comes to mind though the Amazon reviews for the book make it seem awful.  IMHO, effective shell code embraces the UNIX philosophy as described by Eric S. Raymond in <a href=""http://www.faqs.org/docs/artu/""><em>The Art of Unix Programming</em></a>.</p>
","14011576"
"Bash: Syntax error: redirection unexpected","51218","","<p>I do this in a script:</p>

<pre><code>read direc &lt;&lt;&lt; $(basename `pwd`)
</code></pre>

<p>and I get:</p>

<pre><code>Syntax error: redirection unexpected
</code></pre>

<p>in an ubuntu machine</p>

<pre><code>/bin/bash --version
GNU bash, version 4.0.33(1)-release (x86_64-pc-linux-gnu)
</code></pre>

<p>while I do not get this error in another suse machine:</p>

<pre><code>/bin/bash --version
GNU bash, version 3.2.39(1)-release (x86_64-suse-linux-gnu)
Copyright (C) 2007 Free Software Foundation, Inc.
</code></pre>

<p>Why the error?</p>
","<p>Does your script reference <code>/bin/bash</code> or <code>/bin/sh</code> in its hash bang line? The default system shell in Ubuntu is <a href=""http://linux.die.net/man/1/dash"" rel=""noreferrer"">dash</a>, not <a href=""http://linux.die.net/man/1/bash"" rel=""noreferrer"">bash</a>, so if you have <code>#!/bin/sh</code> then your script will be using a different shell than you expect. Dash does not have the <code>&lt;&lt;&lt;</code> redirection operator.</p>
","2462357"
"Padding zeros in a string","51185","","<p>I'm writing a bash script to get some podcasts.  The problem is that some of the podcast numbers are one digits while others are two/three digits, therefore I need to pad them to make them all 3 digits.</p>

<p>I tried the following:</p>

<pre><code>n=1

n = printf %03d $n

wget http://aolradio.podcast.aol.com/sn/SN-$n.mp3
</code></pre>

<p>but the variable 'n' doesn't stay padded permanently.  How can I make it permanent?</p>
","<p>Use backticks to assign the result of the printf command (``):</p>

<pre><code>n=1
wget http://aolradio.podcast.aol.com/sn/SN-`printf %03d $n`.mp3
</code></pre>

<p>EDIT: Note that i removed one line which was not really necessary.
If you want to assign the output of 'printf %...' to n, you could 
use </p>

<pre><code>n=`printf %03d $n`
</code></pre>

<p>and after that, use the $n variable substitution you used before.</p>
","1117140"
"store return value of a Python script in a bash script","51183","","<p>I want to execute a python script from a bash script, and I want to store the output of the python script in a variable. </p>

<p>In my python script, I print some stuff to screen and at the end I return a string with:</p>

<pre><code>sys.exit(myString) 
</code></pre>

<p>In my bash script, I did the following:</p>

<pre><code>outputString=`python myPythonScript arg1 arg2 arg3 `
</code></pre>

<p>But then when I check the value of <code>outputString</code> with <code>echo $outputString</code> I get everything that the Python script had printed to screen, but <em>not</em> the return value <code>myString</code>!</p>

<p>How should I do this?</p>

<p>EDIT: I need the string because that tells me where a file created by the Python script is located. I want to do something like:</p>

<pre><code>fileLocation=`python myPythonScript1 arg1 arg2 arg1`
python myPythonScript2 $fileLocation
</code></pre>
","<p><a href=""http://docs.python.org/library/sys.html#sys.exit"" rel=""noreferrer"">http://docs.python.org/library/sys.html#sys.exit</a></p>

<p><code>sys.exit</code> will write to <code>stderr</code> if you use string args.</p>

<p>Do something like </p>

<pre><code>python yourscript 2&gt; return_file
</code></pre>

<p><a href=""https://stackoverflow.com/questions/3130375/bash-script-store-stderr-in-variable"">Bash script - store stderr in a variable</a></p>

<p>You could do something like that in your script</p>

<pre><code>output=$((your command here) 2&gt; &amp;1)
</code></pre>

<p>example:</p>

<p>test.py</p>

<pre><code>print ""something""
exit('ohoh') 
</code></pre>

<p>t.sh</p>

<pre><code>va=$(python test.py 2&gt;&amp;1)                                                                                                                    
mkdir $va
</code></pre>

<p><code>bash t.sh</code></p>

<p><em>edit</em></p>

<p>Not sure why but in that case, I would write a main script and two other scripts... Mixing python and bash is pointless unless you really need to.</p>

<pre><code>import script1
import script2

if __name__ == '__main__':
    filename = script1.run(sys.args)
    script2.run(filename)
</code></pre>
","11900911"
"How do I delete all lines in a file starting from after a matching line?","51094","","<p>I have a file which is made up of several lines of text:</p>

<pre><code>The first line
The second line
The third line
The fourth line
</code></pre>

<p>I have a string which is one of the lines: <code>The second line</code></p>

<p>I want to delete the string and all lines after it in the file, so it will delete <code>The third line</code> and <code>The fourth line</code> in addition to the string. The file would become:</p>

<pre><code>The first line
</code></pre>

<p>I've searched for a solution on google, and it seems that I should use <code>sed</code>. Something like:</p>

<pre><code>sed 'linenum,$d' file
</code></pre>

<p>But how to find the line number of the string? Or, how else should I do it?</p>
","<p>If you don't want to print the matched line (or any following lines):</p>

<pre><code>sed -n '/The second line/q;p' inputfile
</code></pre>

<p>This says ""when you reach the line that matches the pattern quit, otherwise print each line"". The <code>-n</code> option prevents implicit printing and the <code>p</code> command is required to explicitly print lines.</p>

<p>or</p>

<pre><code>sed '/The second line/,$d' inputfile
</code></pre>

<p>This says ""delete all lines from the output starting at the matched line and continuing to the end of the file"".</p>

<p>but the first one is faster.</p>

<p>If you do want to print the matched line, but not any following lines:</p>

<pre><code>sed '/The second line/q' inputfile
</code></pre>

<p>This says ""print all lines and quit when the matched line is reached"" (the <code>-n</code> option (no implicit print) is not used).</p>

<p>See <a href=""https://linux.die.net/man/1/sed"" rel=""noreferrer"">man sed</a> for additional information.</p>
","5227429"
"How to pass a variable in a curl command in shell scripting","51079","","<p>I have a curl command:</p>

<pre><code>curl -u ${USER_ID}:${PASSWORD} -X GET 'http://blah.gso.woo.com:8080/rest/job-execution/job-details/${job_id}'
</code></pre>

<p>The variable <code>job_id</code> has a value in it, say, 1160. When I execute the curl command in shell it gives me the following error:</p>

<pre><code>{""message"":""Sorry. An unexpected error occured."", ""stacktrace"":""Bad Request. The request could not be understood by the server due to malformed syntax.""}
</code></pre>

<p>If I pass the number '1160' directly in the command, as shown below, the curl command works.</p>

<pre><code>curl -u ${USER_ID}:${PASSWORD} -X GET 'http://blah.gso.woo.com:8080/rest/job-execution/job-details/1160'
</code></pre>

<p>Can someone please help me out? I wanna be able to pass the value of the variable in the curl command.</p>
","<p>When using variables in <a href=""/questions/tagged/shell"" class=""post-tag"" title=""show questions tagged &#39;shell&#39;"" rel=""tag"">shell</a>, you can only use doubles quotes, not single quotes : the variables inside single quotes are not expanded.
Learn the difference between ' and "" and `. See <a href=""http://mywiki.wooledge.org/Quotes"" rel=""noreferrer"">http://mywiki.wooledge.org/Quotes</a> and <a href=""http://wiki.bash-hackers.org/syntax/words"" rel=""noreferrer"">http://wiki.bash-hackers.org/syntax/words</a></p>
","13341971"
"Putting IP Address into bash variable. Is there a better way","51036","","<p>I'm trying to find a short and robust way to put my IP address into a bash variable and was curious if there was an easier way to do this.  This is how I am currently doing it:</p>

<pre><code>ip=`ifconfig|xargs|awk '{print $7}'|sed -e 's/[a-z]*:/''/'`
</code></pre>
","<p>You can take a look at <a href=""http://www.cyberciti.biz/tips/read-unixlinux-system-ip-address-in-a-shell-script.html"" rel=""noreferrer"">this site</a> for alternatives.</p>

<p>One way would be:</p>

<pre><code>ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'
</code></pre>

<p>A bit smaller one, although it is not at all robust, and can return the wrong value depending on your system:</p>

<pre><code>$ /sbin/ifconfig | sed -n '2 p' | awk '{print $3}'
</code></pre>

<p>(from <a href=""http://www.htmlstaff.org/ver.php?id=22346"" rel=""noreferrer"">http://www.htmlstaff.org/ver.php?id=22346</a>)</p>
","6829709"
"Continue output on same line","51014","","<p>Want to do a fancy effect by printing [OK] at the end of the last line when a task is finished.</p>

<p>Got this:</p>

<pre><code>echo ""$0: Starting backup process in '$backupdir'... "" 
sleep 3
echo '[OK]'
</code></pre>

<p>I tried different things at the end of the first echo, at the beginning of the second like <code>\r</code>, <code>\c</code>, <code>\</code>, Googled it... No good.</p>

<p>I want it to output this:</p>

<p><code>./backup.sh: Starting backup process in '/backup'...</code></p>

<p>... And 3 sec later, add the <code>[OK]</code>:</p>

<p><code>./backup.sh: Starting backup process in '/backup'... [OK]</code></p>

<p>Thanks,</p>
","<p>Use the <code>-n</code> option to skip printing newline at the end. More reference at <a href=""http://ss64.com/bash/echo.html"" rel=""noreferrer""><code>echo</code> docs</a>.</p>

<p>So you could do something like this:</p>

<pre><code>echo -n ""$0: Starting backup process in '$backupdir'... "" 
</code></pre>
","3372685"
"Creating an array from a text file in Bash","50948","","<p>A script takes a URL, parses it for the required fields, and redirects its output to be saved in a file, <em>file.txt</em>. The output is saved on a new line each time a field has been found. </p>

<h3>file.txt</h3>

<pre><code>A Cat
A Dog
A Mouse 
etc... 
</code></pre>

<p>I want to take <code>file.txt</code> and create an array from it in a new script, where every line gets to be its own string variable in the array. So far I have tried: </p>

<pre><code>#!/bin/bash

filename=file.txt
declare -a myArray
myArray=(`cat ""$filename""`)

for (( i = 0 ; i &lt; 9 ; i++))
do
  echo ""Element [$i]: ${myArray[$i]}""
done
</code></pre>

<p>When I run this script, whitespace results in words getting split and instead of getting </p>

<h3>Desired output</h3>

<pre><code>Element [0]: A Cat 
Element [1]: A Dog 
etc... 
</code></pre>

<p>I end up getting this:</p>

<h3>Actual output</h3>

<pre><code>Element [0]: A 
Element [1]: Cat 
Element [2]: A
Element [3]: Dog 
etc... 
</code></pre>

<p>How can I adjust the loop below such that the entire string on each line will correspond one-to-one with each variable in the array? </p>
","<p>Use the <a href=""https://www.gnu.org/software/bash/manual/bashref.html#index-mapfile"" rel=""noreferrer""><code>mapfile</code></a> command:</p>

<pre><code>mapfile -t myArray &lt; file.txt
</code></pre>

<p>The error is using <code>for</code> -- the idiomatic way to loop over <em>lines</em> of a file is:</p>

<pre><code>while IFS= read -r line; do echo ""&gt;&gt;$line&lt;&lt;""; done &lt; file.txt
</code></pre>

<p>See the <a href=""http://mywiki.wooledge.org/BashFAQ/005#Loading_lines_from_a_file_or_stream"" rel=""noreferrer"">Bash FAQ</a> for more details.</p>
","30988704"
"Bash: How to list only files?","50931","","<p>How can I list all the files of one folder but not their folders or subfiles. In other words: How can I list only the files?</p>
","<p>Using <code>find</code>:</p>

<pre><code>find . -maxdepth 1 -type f
</code></pre>

<p>Using the <code>-maxdepth 1</code> option ensures that you only look in the current directory (or, if you replace the <code>.</code> with some path, that directory). If you want a full recursive listing of all files in that and subdirectories, just remove that option.</p>
","10574806"
"shell variable in a grep regex","50886","","<p>I'm trying to use a variable in a grep regex.  I'll just post an example of the failure and maybe someone can suggest how to make the variable be evaluated while running the grep command.  I've tried <code>${var}</code> as well.</p>

<pre><code>$ string=""test this""
$ var=""test""
$ echo $string | grep '^$var'
$ 
</code></pre>

<p>Since my regex should match lines which start with ""test"", it should print the line echoed thru it.</p>

<pre><code>$ echo $string
test this
$
</code></pre>
","<p>You need to use double quotes. Single quotes prevent the shell variable from being interpolated by the shell. You use single quotes to prevent the shell from doing interpolation which you may have to do if your regular expression used <code>$</code> as part of the pattern. You can also use a backslash to <em>quote</em> a <code>$</code> if you're using double quotes.</p>

<p>Also, you may need to put your variable in curly braces <code>${var}</code> in order to help separate it from the rest of the pattern.</p>

<p>Example:</p>

<pre><code>$ string=""test this""
$ var=""test""
$ echo $string | grep ""^$var""
</code></pre>
","18148101"
"Which signal does ctrl-x send when used in a terminal?","50878","","<p>On Linux/Unix there are signals. The <kbd>Ctrl</kbd><kbd>C</kbd> one (<code>SIGINT</code>) is obvious to me. 
Now, in some other applications there are signals via <kbd>Ctrl</kbd><kbd>X</kbd>?!
Is that even a signal or does it generate an escape sequence?
Is there anything else I can use as something similar to <kbd>Ctrl</kbd><kbd>C</kbd> ( <kbd>Ctrl</kbd><kbd>V</kbd>, <kbd>Ctrl</kbd><kbd>X</kbd> ...)?</p>

<p>If anyone has a clue, im familiar with C more than bash, but answers in both languages are appreciated!</p>
","<p>To get all the terminal control character assignments:</p>

<pre><code>stty -a
</code></pre>
","6764943"
"How to run 'cd' in shell script and stay there after script finishes?","50876","","<p>I used 'change directory' in my shell script (bash)</p>

<pre><code>#!/bin/bash
alias mycd='cd some_place'
mycd
pwd
</code></pre>

<p><code>pwd</code> prints <code>some_place</code> correctly, but after the script finished my current working directory doesn't change.</p>

<p>Is it possible to change my path by script?</p>
","<p>You need to source the file as:</p>

<pre><code>. myfile.sh
</code></pre>

<p>or</p>

<pre><code>source myfile.sh
</code></pre>

<p>Without sourcing the changes will happen in the sub-shell and not in the parent shell which is invoking the script. But when you source a file the lines in the file are executed as if they were typed at the command line.</p>
","3879456"
"How to pass arguments to Shell Script through docker run","50788","","<p>I am new to the docker world. I have to invoke a shell script that takes command line arguments through a docker container.
Ex: My shell script looks like:</p>

<pre><code>#!bin/bash
echo $1
</code></pre>

<p>Dockerfile looks like this:</p>

<pre><code>FROM ubuntu:14.04
COPY ./file.sh /
CMD /bin/bash file.sh
</code></pre>

<p>I am not sure how to pass the arguments while running the container</p>
","<p>@user1801934, are you sure @Gilles Quenot's answer is correct?</p>

<p>put the arg1 into Dockerfile directly, is that your request?</p>

<p>Here is my answer. </p>

<p>Update <code>file.sh</code></p>

<pre><code>#!/usr/bin/env bash
echo $1
</code></pre>

<p>using the exist Dockerfile</p>

<p>Build the image:</p>

<pre><code>docker build -t test .
</code></pre>

<p>run the image with argument <code>abc</code> or <code>xyz</code> or something else.</p>

<pre><code>docker run -ti test /file.sh abc

docker run -ti test /file.sh xyz
</code></pre>
","32728266"
"How do I list the functions defined in my shell?","50780","","<p>I can type alias to show a list of all the aliases.</p>

<p>But for functions, all I can do is grep my <code>.bash_profile</code>.</p>

<p>That only gets the ones in that file, not those defined in subsidiary files or dynamically.</p>

<p>Is there a more convenient way to find out what functions are currently defined?</p>
","<blockquote>
  <p>Function names and definitions may be listed with the <code>-f</code> option to the
  <code>declare</code> builtin command (see Bash Builtins). The <code>-F</code> option to <code>declare</code>
  will list the function names only
  (and optionally the source file and line number).</p>
</blockquote>

<p><a href=""http://gnu.org/software/bash/manual/bashref"" rel=""noreferrer"">Bash Reference Manual</a></p>
","4471405"
"bash for loop: a range of numbers","50654","","<p>I have the following code in an .sh file:</p>

<pre><code>for num in {1..10}
do
  echo $num
done
</code></pre>

<p>Which should print numbers from 1 to 10. But, this is what I get:</p>

<pre><code>{1..10}
</code></pre>

<p>Also, using C-like sytax doesn't work as well:</p>

<pre><code>for ((i=1; i&lt;=10; i++))
</code></pre>

<p>This gets me an error:</p>

<pre><code>Syntax error: Bad for loop variable
</code></pre>

<p>The version of bash that I have is 4.2.25.</p>
","<p>The code should be as follows (note the shebang says <code>bash</code>, not <code>sh</code>):</p>

<pre><code> #!/bin/bash
 echo ""Bash version ${BASH_VERSION}...""
 for i in {0..10..1}
    do
       echo ""Welcome $i times""
 done
</code></pre>

<p>source <a href=""http://www.cyberciti.biz/faq/bash-for-loop/"">http://www.cyberciti.biz/faq/bash-for-loop/</a></p>
","17752972"
"passing grep into a variable in bash","50638","","<p>I have a file named email.txt like these one :</p>

<pre><code>Subject:My test
From:my email &lt;myemail@gmail.com&gt;

this is third test
</code></pre>

<p>I want to take out only the email address in this file by using bash script.So i put this script in my bash script named myscript:</p>

<pre><code>#!/bin/bash

file=$(myscript)

var1=$(awk 'NR==2' $file)

var2=$(""$var1"" | (grep -Eio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b'))

echo $var2
</code></pre>

<p>But I failed to run this script.When I run this command manually in bash i can obtain the email address:</p>

<pre><code>echo $var1 | grep -Eio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b'
</code></pre>

<p>I need to put the email address to store in a variable so i can use it in other function.Can someone show me how to solve this problem?
Thanks.</p>
","<p>I think this is an overly complicated way to go about things, but if you just want to get your script to work, try this:</p>

<pre><code>#!/bin/bash

file=""email.txt""

var1=$(awk 'NR==2' $file)

var2=$(echo ""$var1"" | grep -Eio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b')

echo $var2
</code></pre>

<p>I'm not sure what <code>file=$(myscript)</code> was supposed to do, but on the next line you want a file name as argument to <code>awk</code>, so you should just assign <code>email.txt</code> as a string value to <code>file</code>, not execute a command called <code>myscript</code>. <code>$var1</code> isn't a command (it's just a line from your text file), so you have to <code>echo</code> it to give <code>grep</code> anything useful to work with. The additional parentheses around <code>grep</code> are redundant.</p>
","10993059"
"How to use `while read` (Bash) to read the last line in a file if there’s no newline at the end of the file?","50636","","<p>Let’s say I have the following Bash script:</p>

<pre><code>while read SCRIPT_SOURCE_LINE; do
  echo ""$SCRIPT_SOURCE_LINE""
done
</code></pre>

<p>I noticed that for files without a newline at the end, this will effectively skip the last line.</p>

<p>I’ve searched around for a solution <a href=""http://linux.derkeiler.com/Mailing-Lists/SuSE/2008-11/msg00237.html"" rel=""noreferrer"">and found this</a>:</p>

<blockquote>
  <p>When read reaches end-of-file instead
  of end-of-line, it does read in the
  data and assign it to the variables,
  but it exits with a non-zero status.
  If your loop is constructed ""while
  read ;do stuff ;done 
  
  <p>So instead of testing the read exit
  status directly, test a flag, and have
  the read command set that flag from
  within the loop body. That way
  regardless of reads exit status, the
  entire loop body runs, because read
  was just one of the list of commands
  in the loop like any other, not a
  deciding factor of if the loop will
  get run at all.</p>

<pre><code>DONE=false
until $DONE ;do
read || DONE=true
# process $REPLY here
done &lt; /path/to/file.in
</code></pre>
</blockquote>

<p>How can I rewrite this solution to make it behave exactly the same as the <code>while</code> loop I was having earlier, i.e. without hardcoding the location of the input file?</p>
","<p>In your first example, I'm assuming you are reading from <em>stdin</em>. To do the same with the second code block, you just have to remove the redirection and echo $REPLY:</p>

<pre><code>DONE=false
until $DONE ;do
read || DONE=true
echo $REPLY
done
</code></pre>
","4165189"
"Check whether a certain file type/extension exists in directory","50614","","<p>How would you go about telling whether files of a specific extension are present in a directory, with bash?</p>

<p>Something like</p>

<pre><code>if [ -e *.flac ]; then 
echo true; 
fi 
</code></pre>
","<pre><code>#!/bin/bash

count=`ls -1 *.flac 2&gt;/dev/null | wc -l`
if [ $count != 0 ]
then 
echo true
fi 
</code></pre>
","3856879"
"Run bash script with sh","50588","","<p>I have bash script and it requires bash.</p>

<p>Another person try to run it with </p>

<pre><code>sh script_name.sh
</code></pre>

<p>And it fails because sh is symbolic link to dash in his distribution.</p>

<pre><code>$ ls -la /bin/sh
lrwxrwxrwx 1 root root 4 Aug 25 16:06 /bin/sh -&gt; dash
</code></pre>

<p>I have an idea to use wrapper script:</p>

<pre><code>#!/bin/sh
bash script_name.sh
</code></pre>

<p>The goal is to run .sh script by sh with bash in system having symbolic link to dash.</p>
","<p>Well, usually you use the <a href=""http://en.wikipedia.org/wiki/Shebang_%28Unix%29"" rel=""noreferrer"">shebang</a> to tell the shell to use the correct interpreter:</p>

<pre><code>#!/bin/bash

# your script here
</code></pre>

<p>You have to set the script to be executable:</p>

<pre><code>chmod +x my_script.sh
</code></pre>

<p>And let the user start it with:</p>

<pre><code>./my_script.sh
</code></pre>

<p>It seems simple than to use a wrapper script.</p>

<p>You can use jbr test to run your script with bash even if the user use sh/dash or any sh like interpreter:</p>

<pre><code>#!/bin/bash

if [ -z ""$BASH_VERSION"" ]
then
    exec bash ""$0"" ""$@""
fi

# Your script here
</code></pre>

<p>This way it correctly works with either :</p>

<pre><code>sh ./my_script.sh

# or

bash ./my_script.sh

# or

./my_script.sh
</code></pre>
","19538774"
"`date` command on OS X doesn't have ISO 8601 `-I` option?","50587","","<p>In a Bash script, I want to print the current datetime in <a href=""http://en.wikipedia.org/wiki/ISO_8601"" rel=""noreferrer"">ISO 8601</a> format (preferably UTC), and it seems that this should be as simple as <code>date -I</code>:</p>

<p><a href=""http://ss64.com/bash/date.html"" rel=""noreferrer"">http://ss64.com/bash/date.html</a></p>

<p>But this doesn't seem to work on my Mac:</p>

<pre><code>$ date -I
date: illegal option -- I
usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ... 
            [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]
</code></pre>

<p>And indeed, <code>man date</code> doesn't list this option.</p>

<p>Anyone know why this is, or any other (easy) way for me to print the date in ISO 8601 format? Thanks!</p>
","<p>You could use </p>

<pre><code>date ""+%Y-%m-%d""
</code></pre>

<p>Or for a fully <a href=""http://en.wikipedia.org/wiki/ISO_8601"" rel=""noreferrer"">ISO-8601 compliant date</a>, use one of the following formats:</p>

<pre><code>date -u +""%Y-%m-%dT%H:%M:%SZ""
</code></pre>

<p>Output:</p>

<pre><code>2011-08-27T23:22:37Z
</code></pre>

<p><em>or</em></p>

<pre><code>date +%Y-%m-%dT%H:%M:%S%z
</code></pre>

<p>Output:</p>

<pre><code>2011-08-27T15:22:37-0800
</code></pre>
","7216394"
"bash script assign grep count to variable","50578","","<p><br>How to assign the result of 
<br>grep -c ""some text"" /tmp/somePath
<br>into variable so I can echo it.
<br>Thanks!</p>

<pre><code>#!/bin/bash
some_var = grep -c ""some text"" /tmp/somePath
echo ""var value is: ${some_var}""
</code></pre>

<p>I also tried: 
    some_var = 'grep -c \""some text\"" /tmp/somePath'</p>

<p>But I keep getting: command not found</p>

<p>Thanks</p>
","<p>To assign the output of a command, use <code>var=$(cmd)</code> (as <a href=""http://www.shellcheck.net"">shellcheck</a> automatically tells you if you paste your script there).</p>

<pre><code>#!/bin/bash
some_var=$(grep -c ""some text"" /tmp/somePath)
echo ""var value is: ${some_var}""
</code></pre>
","16327400"
"how to replace a variable in shell script string","50535","","<p>I'm having problems getting this to work...</p>

<p>I have a variable that is holding a SQL to with a placeholder:</p>

<pre><code>echo $SQL
SELECT PX_PROMOTION_ID, PRIORITY, STATUS, EXCLSVE, TYPE, PERORDLMT, PERSHOPPERLMT, TOTALLMT, RSV_INT, PX_GROUP_ID, CAMPAIGN_ID, STOREENT_ID, VERSION, REVISION, EFFECTIVE, TRANSFER, CDREQUIRED, EXPIRE, LASTUPDATEBY, TO_CHAR(LASTUPDATE, 'YYYYMMDD HH24MMSS') AS LASTUPDATE, TO_CHAR(STARTDATE, 'YYYYMMDD HH24MMSS') AS STARTDATE, TO_CHAR(ENDDATE, 'YYYYMMDD HH24MMSS') AS ENDDATE, TO_CHAR(RSV_TIME, 'YYYYMMDD HH24MMSS') AS RSV_TIME, RSV_REAL, TGTSALES, NAME, CODE, RSV_VCH, OPTCOUNTER FROM PX_PROMOTION WHERE LASTUPDATE BETWEEN (SELECT MAX(BATCHSTART) FROM XRPTEBATCHCONTROL) AND TIMESTAMP('$BATCH_END')
</code></pre>

<p>I have another variable that holds the value:</p>

<pre><code>echo $BATCH_END
2012-11-14 17:06:13
</code></pre>

<p>I want to replace the placeholder with the value. I'm not particularly great at Unix scripting, but I've tried this:</p>

<pre><code>echo $SQL | sed -e ""s/'$BATCH_END/$BATCH_END/g""
</code></pre>

<p>but it still doesn't get replaced...</p>

<p>Can anyone help? I want to replace the placeholder, and keep the final string assigned to $SQL</p>

<p>I also need to know how to get the value of the output back into the variable, for example, I tried:</p>

<pre><code> SQL=`echo ""$SQL"" | echo ""${SQL//\$BATCH_END/$BATCH_END}""`
</code></pre>
","<p>You are missing the end of that single-quote pair in your script.</p>

<p>Change from:</p>

<pre><code>echo $SQL | sed -e ""s/'$BATCH_END/$BATCH_END/g""
</code></pre>

<p>To:</p>

<pre><code>echo $SQL | sed -e ""s/\$BATCH_END/$BATCH_END/g""
</code></pre>

<p><strong>Updated</strong> - as per followup comment: </p>

<p>To save the result of the above replacement back into <code>$SQL</code>, do either of the following:</p>

<pre><code># Preferred way
SQL=$(echo $SQL | sed -e ""s/\$BATCH_END/$BATCH_END/g"")

# Old way
SQL=`echo $SQL | sed -e ""s/\$BATCH_END/$BATCH_END/g""`
</code></pre>

<p>This is called <a href=""http://tldp.org/LDP/abs/html/commandsub.html""><strong>command substitution</strong></a>. Either syntax (<code>$(...)</code> vs. enclosure by backticks) works, but the preferred one allows you to do nesting.</p>

<p><strong>The <em>preferred</em>-preferred way: <a href=""http://tldp.org/LDP/abs/html/x17700.html"">Herestring</strong></a></p>

<p>This is probably a bit more advanced than what you care about, but doing it in the following way will save you a subprocess from having to use <code>echo</code> unnecessarily:</p>

<pre><code>SQL=$(sed -e ""s/\$BATCH_END/$BATCH_END/g"" &lt;&lt;&lt; $SQL)
</code></pre>
","13374006"
"Rename multiple files shell","50527","","<p>I have multiple files in a directory, example: <code>linux_file1.mp4</code>, <code>linux_file2.mp4</code> and so on. How do I move these files, using shell, so that the names are <code>file1.mp4</code>, <code>file2.mp4</code> and so on. I have about 30 files that I want to move to the new name.</p>
","<p>I like <a href=""http://manpages.ubuntu.com/manpages/stable/en/man1/mmv.1.html"" rel=""noreferrer"">mmv</a> for this kind of thing</p>

<pre><code>mmv 'linux_*' '#1'
</code></pre>

<p>But you can also use <code>rename</code>. Be aware that there are commonly two <code>rename</code> commands with very different syntax. One is written in Perl, the other is distributed with util-linux, so I distinguish them as ""perl rename"" and ""util rename"" below.</p>

<p>With Perl rename:</p>

<pre><code>rename 's/^linux_//' linux_*.mp4
</code></pre>

<p>As cweiske correctly pointed out.</p>

<p>With util rename:</p>

<pre><code>rename linux_ '' linux_*.mp4
</code></pre>

<p>How can you tell which rename you have? Try running <code>rename -V</code>; if your version is util rename it will print the version number and if it is perl rename it will harmlessly report and unknown option and show usage.</p>

<p>If you don't have either <code>rename</code> or <code>mmv</code> and don't want to or can't install them you can still accomplish this with plain old shell code:</p>

<pre><code>for file in linux_*.mp4 ; do mv ""$file"" ""${file#linux_}"" ; done
</code></pre>

<p>This syntax will work with any POSIX sh conforming to XPG4 or later, which is essentially all shells these days.</p>
","6912021"
"How can I recall the argument of the previous bash command?","50444","","<p>Is there a way in Bash to recall the argument of the previous command?</p>

<p>I usually do <code>vi file.c</code> followed by <code>gcc file.c</code>. </p>

<p>Is there a way in Bash to recall the argument of the previous command?</p>
","<p>You can use <code>$_</code> or <code>!$</code> to recall the last argument of the previous command.</p>

<p>Also <code>Alt + .</code> can be used to recall the last argument of any of the previous commands.</p>
","3371299"
"How to run grep inside awk?","50330","","<p>Suppose I have a file <code>input.txt</code> with few columns and few rows, the first column is the key, and a directory <code>dir</code> with files which contain some of these keys. I want to find all lines in the files in <code>dir</code> which contain these key words. At first I tried to run the command</p>

<pre><code>cat input.txt | awk '{print $1}' | xargs grep dir
</code></pre>

<p>This doesn't work because it thinks the keys are paths on my file system. Next I tried something like</p>

<pre><code>cat input.txt | awk '{system(""grep -rn dir $1"")}'
</code></pre>

<p>But this didn't work either, eventually I have to admit that even this doesn't work</p>

<pre><code>cat input.txt | awk '{system(""echo $1"")}'
</code></pre>

<p>After I tried to use <code>\</code> to escape the white space and the <code>$</code> sign, I came here to ask for your advice, any ideas?</p>

<p>Of course I can do something like</p>

<pre><code>for x in `cat input.txt` ; do grep -rn $x dir ; done
</code></pre>

<p>This is not good enough, because it takes two commands, but I want only one. This also shows why <code>xargs</code> doesn't work, the parameter is not the last argument</p>
","<p>Try following </p>

<pre><code>awk '{print $1}' input.txt | xargs -n 1 -I pattern grep -rn pattern dir
</code></pre>
","20080236"
"Bash Scripting and bc","50243","","<p>I'm trying to write a bash script and I needed to do some floating point math.  Basically I want to do something like this:</p>

<pre><code>NUM=$(echo ""scale=25;$1/10"" | bc)
if [ $? -ne 0 ]
then
echo bad
fi
</code></pre>

<p>The problem I'm running into is $? tends to hold the output from the echo program and not the bc call.  Is there a way I save the output from the bc program into a variable?</p>

<p>EDIT:</p>

<p>Thanks for the quick replies.  Here's another way of looking at the problem.  Say I modified the script a little bit so it looks like this:</p>

<pre><code>#!/bin/bash
NUM=$(echo ""scale=25;$1/10"" | bc)
if [ $? -ne 0 ]
then
echo bad
exit
fi
echo ""$NUM""
</code></pre>

<p>When the user inputs a normal floating point value, it works fine:</p>

<pre><code>bash script.sh 1.0
</code></pre>

<p>output:</p>

<pre><code>.1000000000000000000000000
</code></pre>

<p>However, when the user enters an incorrect value, the script can't recover:</p>

<pre><code>bash script.sh 1.0a
</code></pre>

<p>output:</p>

<pre><code>(standard_in) 1: parse error
</code></pre>

<p>What I'm trying to do is get it to exit gracefully.</p>
","<p>I don't see anything wrong. $NUM is supposed to hold your <code>bc</code> command results</p>

<p>see:</p>

<pre><code>NUM=$(echo ""scale=25;$1/10"" | bc)
echo ""\$? is $?""
echo ""NUM is $NUM""
</code></pre>

<p>output</p>

<pre><code>$ ./shell.sh 10
$? is 0
NUM is 1.0000000000000000000000000
</code></pre>

<p>another way is to use awk</p>

<pre><code>NUM=$(awk -vinput=""$1"" 'BEGIN{printf ""%.25f"", input/10 }')
echo ""\$? is $?""
echo ""NUM is $NUM""
</code></pre>

<p>The other way, is to do the check of ""$1"" before you pass to <code>bc</code>. eg</p>

<pre><code>shopt -s extglob
input=""$1""
case ""$input"" in
 +([0-9.]))
     IFS="".""; set -- $input
     if [ $# -ne 2 ];then
        echo ""bad decimal""
     else
        NUM=$(echo ""scale=25;$1/10"" | bc  )
        echo ""$NUM""
     fi
esac
</code></pre>

<p>you don't have to check for <code>$?</code> from <code>bc</code> anymore</p>
","2331976"
"Today's date, minus X days in shell script","50233","","<p>I need to create three variables, each for Year, Month, and Day for Today's date, minus X number of days.  For this question I'll choose a random amount of days: 222.</p>

<p>So if:</p>

<pre><code>TodayYear=`date +%Y`
TodayMonth=`date +%m`
TodayDay=`date +%d`
</code></pre>

<p>What I want is 222 days before this.</p>

<pre><code>222days_before_TodayYear=???
222days_before_TodayMonth=???
222days_before_TodayDay=???
</code></pre>

<p>Edit: Need 222 <strong>working</strong> days instead 222 regular days.</p>
","<p><strong>For GNU <code>date</code>:</strong></p>

<pre><code>date_222days_before_TodayYear=$(date --date=""222 days ago"" +""%Y"")
date_222days_before_TodayMonth=$(date --date=""222 days ago"" +""%m"")
date_222days_before_TodayDay=$(date --date=""222 days ago"" +""%d"")
</code></pre>

<hr>

<p><strong>For BSD <code>date</code>:</strong>: </p>

<p>If you are using OS X or FreeBSD, use the following instead because BSD date is different from GNU date:</p>

<pre><code>date_222days_before_TodayYear=$(date -j -v-222d +""%Y"")
date_222days_before_TodayMonth=$(date -j -v-222d +""%m"")
date_222days_before_TodayDay=$(date -j -v-222d +""%d"")
</code></pre>

<p>Source: <a href=""http://www.unix.com/man-page/FreeBSD/1/date/"" rel=""noreferrer"">BSD date manual page</a></p>

<p><strong>Note:</strong></p>

<p>In <code>bash</code> and many other languages, you cannot start a variable name with a numerical character, so I prefixed them with <code>date_</code> for you.</p>

<hr>

<p><strong>Second Update:</strong> New requirement - <em>Using 222 Working days instead of 222 Regular days:</em></p>

<p>(<strong>Assumption:</strong> Not considering statutory holidays, because that just gets far beyond the scope of what I can help you with in a shell script:)</p>

<p>Consider 222 working days:</p>

<ul>
<li>5 working days per week, that is <code>floor(222/5) == 44 weeks</code></li>
<li><code>44 weeks * 7 days per week == 308 days</code></li>
<li>Extra days leftover: <code>222 % 5 == 2</code></li>
<li>Therefore <code>222 working days == 310 regular days</code></li>
</ul>

<p>But, there is a catch! If the number of regular days is <code>308</code> or some multiple of <code>7</code>, then we would have been fine, because any multiple of 7-days ago from a working day is still a working day. So we need to consider whether today is a Monday or a Tuesday:</p>

<ul>
<li>If today is a Monday, we'd get Saturday where we wanted Thursday</li>
<li>If today is a Tuesday, we'd get Sunday where we wanted Friday</li>
</ul>

<p>So you see we need an additional offset of 2 more days if today is either Monday or Tuesday; so let's find that out first before we proceed:</p>

<pre><code>#!/bin/bash

# Use 310 days as offset instead of 222
offset=310
# Find locale's abbreviated weekday name (e.g., Sun)
today=$(date -j +""%a"")
# Check for Mon/Tue
if [[ ""$today"" == ""Mon"" ]] || [[ ""$today"" == ""Tue"" ]]; then
     offset=$((offset+2))
fi

date_222_working_days_before_TodayYear=$(date -j -v-${offset}d +""%Y"")
date_222_working_days_before_TodayMonth=$(date -j -v-${offset}d +""%m"")
date_222_working_days_before_TodayDay=$(date -j -v-${offset}d +""%d"")
</code></pre>

<p>And that should do it =)</p>
","13533753"
"passing arguments to an interactive program non interactively","50213","","<p>I have a bash script that employs the <code>read</code> command to read arguments to commands interactively, for example yes/no options. Is there a way to call this script in a non-interactive script passing default option values as arguments?</p>

<p>It's not just one option that I have to pass to the interactive script.</p>
","<p>For more complex tasks there is <code>expect</code> ( <a href=""http://en.wikipedia.org/wiki/Expect"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Expect</a> ).
It basically simulates a user, you can code a script how to react to specific program outputs and related stuff.</p>

<p>This also works in cases like <code>ssh</code> that prohibits piping passwords to it.</p>
","14397442"
"Deleting the first two lines of a file using BASH or awk or sed or whatever","50120","","<p>I'm trying to delete the first two lines of a file by just not printing it to another file.  I'm not looking for something fancy. Here's my (failed) attempt at awk:</p>

<pre><code>awk '{ (NR &gt; 2) {print} }' myfile
</code></pre>

<p>That throws out the following error:</p>

<pre><code>awk: { NR &gt; 2 {print} }
awk:          ^ syntax error
</code></pre>

<p>Example:</p>

<p>contents of 'myfile':</p>

<pre><code>blah
blahsdfsj
1 
2
3
4
</code></pre>

<p>What I want the result to be:</p>

<pre><code>1
2
3
4
</code></pre>
","<p>Use tail:</p>

<pre><code>tail -n+3 file
</code></pre>

<p>from the man page:</p>

<pre><code>   -n, --lines=K
          output the last K lines, instead of the last 10; or use  -n  +K
          to output lines starting with the Kth
</code></pre>
","8857734"
"BASH, check if file exists and continue else exit","49993","","<p>I have a script that is one script in a chain of others that sends an email.</p>

<p>At the start of the script I want to check if a file exists and continue only if it exists, otherwise just quit.</p>

<p>Here is the start of my script:</p>

<pre><code>{
if [ ! -f /scripts/alert ];
then
    echo ""File not found!"" &amp;&amp; exit 0
else
        continue
fi
}
</code></pre>

<p>However I keep getting a message saying:</p>

<pre><code>line 10: continue: only meaningful in a `for', `while', or `until' loop
</code></pre>

<p>Any pointers?</p>
","<p>Change it to this:</p>

<pre><code>{
if [ ! -f /scripts/alert ]; then
    echo ""File not found!""
    exit 0
fi
}
</code></pre>

<p>A conditional isn't a loop, and there's no place you need to jump to. Execution simply continues after the conditional anyway.</p>

<p>(I also removed the needless <code>&amp;&amp;</code>. Not that it should happen, but just in case the <code>echo</code> fails there's no reason not to exit.)</p>
","9146145"
"Bash mkdir and subfolders","49870","","<p>Why I can't do something like this? <code>mkdir folder/subfolder/</code> in order to achive this I have to do: </p>

<pre><code>mkdir folder
cd folder
mkdir subfolder
</code></pre>

<p>Is there a better way to do it?</p>
","<p>You can:</p>

<pre><code>mkdir -p folder/subfolder
</code></pre>

<p>The <code>-p</code> flag causes any parent directories to be created if necessary.</p>
","9242171"
"Assign a makefile variable value to a bash command result?","49833","","<p>I'm trying to assign the output of this command ( that is in my makefile ) to the makefile HEADER var like in this following line of code:</p>

<pre><code>HEADER = $(shell for file in `find . -name *.h`;do echo $file; done)
</code></pre>

<p>The problem is that if I print HEADER in my makefile using:</p>

<pre><code>print:
    @echo $(HEADER)
</code></pre>

<p>I get </p>

<pre><code>ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile ile
</code></pre>

<p>And if I run this command directly in the console, and directly where my makefile is:</p>

<pre><code>myaccount$ for file in `find . -name *.h`;do echo $file; done
./engine/helper/crypto/tomcrypt/headers/._tomcrypt_pk.h
./engine/helper/crypto/tomcrypt/headers/tomcrypt.h
./engine/helper/crypto/tomcrypt/headers/tomcrypt_argchk.h
./engine/helper/crypto/tomcrypt/headers/tomcrypt_cfg.h
./engine/helper/crypto/tomcrypt/headers/tomcrypt_cipher.h
./engine/helper/crypto/tomcrypt/headers/tomcrypt_custom.h
./engine/helper/crypto/tomcrypt/headers/tomcrypt_hash.h
./engine/helper/crypto/tomcrypt/headers/tomcrypt_mac.h
....
</code></pre>

<p>So I get all my header files. I'm doing this to avoid manually specifying all my .h files manually in my makefile.</p>

<p>Any ideas ?</p>
","<p>You will need to double-escape the <code>$</code> character within the shell command:</p>

<pre><code>HEADER = $(shell for file in `find . -name *.h`;do echo $$file; done)
</code></pre>

<p>The problem here is that make will try to expand <code>$f</code> as a variable, and since it doesn't find anything, it simply replaces it with """". That leaves your shell command with nothing but <code>echo ile</code>, which it faithfully does.</p>

<p>Adding <code>$$</code> tells make to place a single <code>$</code> at that position, which results in the shell command looking exactly the way you want it to.</p>
","2373111"
"Using conditional statements inside 'expect'","49780","","<p>I need to automate logging into a TELNET session using <strong>expect</strong>, but I need to take care of multiple passwords for the same username.</p>

<p>Here's the flow I need to create:</p>

<ol>
<li>Open TELNET session to an IP</li>
<li>Send user-name</li>
<li>Send password</li>
<li>Wrong password? Send the same user-name again, then a different password</li>
<li>Should have successfully logged-in at this point...</li>
</ol>

<p>For what it's worth, here's what I've got so far:</p>

<pre><code>#!/usr/bin/expect
spawn telnet 192.168.40.100
expect ""login:""
send ""spongebob\r""
expect ""password:""
send ""squarepants\r""
expect ""login incorrect"" {
  expect ""login:""
  send ""spongebob\r""
  expect ""password:""
  send ""rhombuspants\r""
}
expect ""prompt\&gt;"" {
  send_user ""success!\r""
}
send ""blah...blah...blah\r""
</code></pre>

<p>Needless to say this doesn't work, and nor does it look very pretty. From my adventures with Google <strong>expect</strong> seems to be something of a dark-art. Thanks in advance to anyone for assistance in the matter!</p>
","<p>Have to recomment the <a href=""http://oreilly.com/catalog/9781565920903"" rel=""noreferrer"">Exploring Expect</a> book for all expect programmers -- invaluable.</p>

<p>I've rewritten your code: (untested)</p>

<pre><code>proc login {user pass} {
    expect ""login:""
    send ""$user\r""
    expect ""password:""
    send ""$pass\r""
}

set username spongebob 
set passwords {squarepants rhombuspants}
set index 0

spawn telnet 192.168.40.100
login $username [lindex $passwords $index]
expect {
    ""login incorrect"" {
        send_user ""failed with $username:[lindex $passwords $index]\n""
        incr index
        if {$index == [llength $passwords]} {
            error ""ran out of possible passwords""
        }
        login $username [lindex $passwords $index]
        exp_continue
    }
    ""prompt&gt;"" 
}
send_user ""success!\n""
# ...
</code></pre>

<p><code>exp_continue</code> loops back to the beginning of the expect block -- it's like a ""redo"" statement.</p>

<p>Note that <code>send_user</code> ends with <code>\n</code> not <code>\r</code></p>

<p>You don't have to escape the <code>&gt;</code> character in your prompt: it's not special for Tcl.</p>
","1539215"
"Bash- how to read the second-to-last line in a file?","49739","","<p>I have a file that has the following as the last three lines. I want to retrieve the penultimate line, i.e. <code>100.000;8438;  06:46:12</code>.</p>

<pre><code>.
.
.
99.900; 8423;   06:44:41
100.000;8438;   06:46:12
Number of patterns: 8438
</code></pre>

<p>I don't know the line number. How can I retrieve it using a shell script? Thanks in advance for your help.</p>
","<p>Try this:</p>

<pre><code>tail -2 yourfile | head -1
</code></pre>
","7022436"
"Capturing output of find . -print0 into a bash array","49626","","<p>Using <code>find . -print0</code> seems to be the only safe way of obtaining a list of files in bash due to the possibility of filenames containing spaces, newlines, quotation marks etc.</p>

<p>However, I'm having a hard time actually making find's output useful within bash or with other command line utilities. The only way I have managed to make use of the output is by piping it to perl, and changing perl's IFS to null:</p>

<pre><code>find . -print0 | perl -e '$/=""\0""; @files=&lt;&gt;; print $#files;'
</code></pre>

<p>This example prints the number of files found, avoiding the danger of newlines in filenames corrupting the count, as would occur with:</p>

<pre><code>find . | wc -l
</code></pre>

<p>As most command line programs do not support null-delimited input, I figure the best thing would be to capture the output of <code>find . -print0</code> in a bash array, like I have done in the perl snippet above, and then continue with the task, whatever it may be.</p>

<p>How can I do this?</p>

<p>This doesn't work:</p>

<pre><code>find . -print0 | ( IFS=$'\0' ; array=( $( cat ) ) ; echo ${#array[@]} )
</code></pre>

<p>A much more general question might be: <strong>How can I do useful things with lists of files in bash?</strong></p>
","<p>Shamelessly stolen from <a href=""http://mywiki.wooledge.org/BashFAQ/020"" rel=""noreferrer"">Greg's BashFAQ</a>:</p>

<pre><code>unset a i
while IFS= read -r -d $'\0' file; do
    a[i++]=""$file""        # or however you want to process each file
done &lt; &lt;(find /tmp -type f -print0)
</code></pre>

<p>Note that the redirection construct used here (<code>cmd1 &lt; &lt;(cmd2)</code>) is similar to, but not quite the same as the more usual pipeline (<code>cmd2 | cmd1</code>) -- if the commands are shell builtins (e.g. <code>while</code>), the pipeline version executes them in subshells, and any variables they set (e.g. the array <code>a</code>) are lost when they exit.  <code>cmd1 &lt; &lt;(cmd2)</code> only runs cmd2 in a subshell, so the array lives past its construction.  Warning: this form of redirection is only available in bash, not even bash in sh-emulation mode; you must start your script with <code>#!/bin/bash</code>.</p>

<p>Also, because the file processing step (in this case, just <code>a[i++]=""$file""</code>, but you might want to do something fancier directly in the loop) has its input redirected, it cannot use any commands that might read from stdin.  To avoid this limitation, I tend to use:</p>

<pre><code>unset a i
while IFS= read -r -u3 -d $'\0' file; do
    a[i++]=""$file""        # or however you want to process each file
done 3&lt; &lt;(find /tmp -type f -print0)
</code></pre>

<p>...which passes the file list via unit 3, rather than stdin.</p>
","1120952"
"Checking for environment variables","49489","","<p>I am trying to check the value of an environment variable and depending on the value do certain things and it works fine as long as the variable is set. When it isn't though I get a whole bunch of errors (as BASH is trying to compare the string I specify with an undefined variable, I guess)</p>

<p>I tried implementing an extra check to prevent it happening but no luck. The block of code I am using is:</p>

<pre><code>#!/bin/bash

if [ -n $TESTVAR ]
then
  if [ $TESTVAR == ""x"" ]
  then
    echo ""foo""
    exit
  elif [ $TESTVAR == ""y"" ]
  then
    echo ""bar""
    exit
  else
    echo ""baz""
    exit
  fi
else
  echo -e ""TESTVAR not set\n""
fi
</code></pre>

<p>And this is the output:</p>

<pre><code>$ export TESTVAR=x
$ ./testenv.sh 
foo
$ export TESTVAR=y
$ ./testenv.sh 
bar
$ export TESTVAR=q
$ ./testenv.sh 
baz
$ unset TESTVAR
$ ./testenv.sh 
./testenv.sh: line 5: [: ==: unary operator expected
./testenv.sh: line 9: [: ==: unary operator expected
baz
</code></pre>

<p>My question is, shouldn't 'unset TESTVAR' nullify it? It doesn't seem to be the case...</p>
","<p>Enclose the variable in double-quotes.</p>

<pre><code>if [ ""$TESTVAR"" = ""foo"" ]
</code></pre>

<p>if you do that and the variable is empty, the test expands to:</p>

<pre><code>if [ """" = ""foo"" ]
</code></pre>

<p>whereas if you don't quote it, it expands to:</p>

<pre><code>if [  = ""foo"" ]
</code></pre>

<p>which is a syntax error.</p>
","2981883"
"Pip Install not installing into correct directory?","49474","","<p>I can't seem to use sudo pip install correctly so that it installs into the following directory: </p>

<pre><code>/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/
</code></pre>

<p>so that I can then import the module using python </p>

<p>I've run </p>

<pre><code>sudo pip install scikit-learn --upgrade
</code></pre>

<p>Result</p>

<pre><code>Requirement already up-to-date: scikit-learn in /usr/local/lib/python2.7/site-packages
Cleaning up...
</code></pre>

<p>However, it's not in the correct directory</p>

<p>How do I get sudo pip install to install into correct directory?</p>

<p>In addition, I've tried </p>

<p>sudo pip install Scrappy</p>

<p>I get the following message </p>

<pre><code>new-host-2:site-packages Chris$ sudo pip install Scrapy
Password:
Requirement already satisfied (use --upgrade to upgrade): Scrapy in /usr/local/lib/python2.7/site-packages
Requirement already satisfied (use --upgrade to upgrade): Twisted&gt;=10.0.0 in /usr/local/lib/python2.7/site-packages (from Scrapy)
Requirement already satisfied (use --upgrade to upgrade): w3lib&gt;=1.8.0 in /usr/local/lib/python2.7/site-packages (from Scrapy)
Requirement already satisfied (use --upgrade to upgrade): queuelib in /usr/local/lib/python2.7/site-packages (from Scrapy)
Requirement already satisfied (use --upgrade to upgrade): lxml in /usr/local/lib/python2.7/site-packages (from Scrapy)
Requirement already satisfied (use --upgrade to upgrade): pyOpenSSL in /usr/local/lib/python2.7/site-packages (from Scrapy)
Requirement already satisfied (use --upgrade to upgrade): cssselect&gt;=0.9 in /usr/local/lib/python2.7/site-packages (from Scrapy)
Requirement already satisfied (use --upgrade to upgrade): six&gt;=1.5.2 in /usr/local/lib/python2.7/site-packages (from Scrapy)
Requirement already satisfied (use --upgrade to upgrade): zope.interface&gt;=3.6.0 in /usr/local/lib/python2.7/site-packages (from Twisted&gt;=10.0.0-&gt;Scrapy)
Requirement already satisfied (use --upgrade to upgrade): cryptography&gt;=0.2.1 in /usr/local/lib/python2.7/site-packages (from pyOpenSSL-&gt;Scrapy)
Requirement already satisfied (use --upgrade to upgrade): setuptools in /usr/local/lib/python2.7/site-packages (from zope.interface&gt;=3.6.0-&gt;Twisted&gt;=10.0.0-&gt;Scrapy)
Requirement already satisfied (use --upgrade to upgrade): cffi&gt;=0.8 in /usr/local/lib/python2.7/site-packages (from cryptography&gt;=0.2.1-&gt;pyOpenSSL-&gt;Scrapy)
Requirement already satisfied (use --upgrade to upgrade): pycparser in /usr/local/lib/python2.7/site-packages (from cffi&gt;=0.8-&gt;cryptography&gt;=0.2.1-&gt;pyOpenSSL-&gt;Scrapy)
</code></pre>

<p>Both these instances demonstrate that it's been installed but not correctly. For example, when I run the following import in python: </p>

<pre><code>import scrapy
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
&lt;ipython-input-6-51c73a18167b&gt; in &lt;module&gt;()
----&gt; 1 import scrapy

ImportError: No module named scrapy
</code></pre>

<p>I've tried the following: </p>

<pre><code>sudo ln -s /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/
</code></pre>
","<p>From the comments to the original question, it seems that you have multiple versions of Python installed, and that pip just goes to the wrong version. </p>

<p>First, to know which version of python you're using, just type <code>which python</code>. You should either see: </p>

<pre><code>which python
/Library/Frameworks/Python.framework/Versions/2.7/bin/python
</code></pre>

<p>if you're going to the right version of python, or: </p>

<pre><code>which python
/usr/bin/python
</code></pre>

<p>If you're going to the 'wrong' version. To make pip go to the right version, you first have to change the path: </p>

<pre><code> export PATH=/Library/Frameworks/Python.framework/Versions/2.7/bin/python:${PATH}
</code></pre>

<p>typing 'which python' would now get you to the right result. Next, install pip (if it's not already installed for this installation of python). Finally, use it. you should be fine now. </p>
","25907213"
"Bash, grep between two lines with specified string","49257","","<p>Example:</p>

<pre><code>a43
test1
abc
cvb
bnm
test2
kfo
</code></pre>

<p>I need all lines between test1 and test2. Normal grep does not work in this case. Do you have any propositions?</p>
","<p>Her are some <code>awk</code>
These will print from <code>test1</code> to <code>test2</code> </p>

<pre><code>awk '/test1/{f=1} /test2/{f=0;print} f'
awk '/test1/{f=1} f; /test2/{f=0}' 
awk '/test1/,/test2/'
</code></pre>

<p>

<pre><code>test1
abc
cvb
bnm
test2
</code></pre>

<hr>

<p>These prints data between <code>test1</code> to <code>test2</code> </p>

<pre><code>awk '/test1/{f=1;next} /test2/{f=0} f' 
awk '/test2/{f=0} f; /test1/{f=1}' 
</code></pre>

<p>

<pre><code>abc
cvb
bnm
</code></pre>
","22222219"
"Rename files using a regex with bash","49193","","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/1086502/rename-multiple-files-at-once-in-unix"">rename multiple files at once in unix</a>  </p>
</blockquote>

<p>I would like to rename all files from a folder using a regex (add a name to the end of name) and move to another folder. </p>

<p>It my opinion, it should be looking like this:</p>

<pre><code>mv -v ./images/*.png ./test/*test.png
</code></pre>

<p>but it does not work.</p>

<p>Can anyone suggest me a solution?</p>
","<p>Try this:</p>

<pre><code>for x in *.png;do mv $x test/${x%.png}test.png;done
</code></pre>
","1961270"
"Remove first element from $@ in bash","49192","","<p>I'm writing a bash script that needs to loop over the arguments passed into the script.  However, the first argument shouldn't be looped over, and instead needs to be checked before the loop.</p>

<p>If I didn't have to remove that first element I could just do:</p>

<pre><code>for item in ""$@"" ; do
  #process item
done
</code></pre>

<p>I could modify the loop to check if it's in its first iteration and change the behavior, but that seems way too hackish.  There's got to be a simple way to extract the first argument out and then loop over the rest, but I wasn't able to find it.</p>
","<p>Use <code>shift</code>?</p>

<p><a href=""http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_07.html"" rel=""noreferrer"">http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_07.html</a></p>

<p>Basically, read <code>$1</code> for the first argument before the loop (or <code>$0</code> if what you're wanting to check is the script name), then use <code>shift</code>, then loop over the remaining <code>$@</code>.</p>
","2701420"
"Check the output of a command in shell script","49151","","<p>I'm writing a very simple shell scripts that would looked at the log of all failed tests, and print out all the name of all files in the current directory that are in the log</p>

<pre><code> 1  #! /bin/sh

 2  for file in *
 3  do
 4      echo ""checking: $file""
 5      if [$(grep $file failed.txt -c) -ne 0]
 6      then
 7          echo ""$file FAILED""
 8      fi
 9  done
</code></pre>

<p>When I execute it, I get this error:</p>

<pre><code>line 6: [0: command not found
</code></pre>

<p>Does anyone have any idea why?</p>

<p>Thanks!!</p>
","<p><code>[</code> is actually a command in linux (like bash or cat or grep).</p>

<p><code>$(grep $file failed.txt -c)</code> is a command substitution which in your case evaluated to 0. Thus the line now reads <code>[0 -ne 0]</code>, which is interpreted as run a program called <code>[0</code> with arguments <code>-ne 0]</code>.</p>

<p>What you should write instead is <code>[ $(grep $file failed.txt -c) -ne 0 ]</code>. Shell scripts require that there be spaces between the opening and closing square braces. Otherwise you change the command that is executed (the closing <code>]</code> indicates that there are no more arguments to be read.</p>

<p>So now the command evaluates to <code>[ 0 -ne 0 ]</code>. You can try executing this in your shell to see what happens. <code>[</code> exits with a value of <code>0</code> if the expression is true and <code>1</code> if it is false. You can see the exit value by echoing <code>$?</code> (the exit value of the last command to be run).</p>
","10586458"
"Cron jobs and random times, within given hours","49137","","<p>I need the ability to run a PHP script 20 times a day at completely random times. I also want it to run only between 9am - 11pm.</p>

<p>I'm familiar with creating cron jobs in linux.</p>
","<p>If I understand what you're looking for, you'll need to do something a bit messy, like having a cron job that runs a bash script that randomizes the run times...  Something like this:</p>

<p>crontab:</p>

<pre><code>0 9 * * * /path/to/bashscript
</code></pre>

<p>and in /path/to/bashscript:</p>

<pre><code>#!/bin/bash

maxdelay=$((14*60))  # 14 hours from 9am to 11pm, converted to minutes
for ((i=1; i&lt;=20; i++)); do
    delay=$(($RANDOM%maxdelay)) # pick an independent random delay for each of the 20 runs
    (sleep $((delay*60)); /path/to/phpscript.php) &amp; # background a subshell to wait, then run the php script
done
</code></pre>

<p>A few notes: this approach it a little wasteful of resources, as it fires off 20 background processes at 9am, each of which waits around for a random number of minutes (up to 14 hours, i.e. 11pm), then launches the php script and exits.  Also, since it uses a random number of minutes (not seconds), the start times aren't quite as random as they could be.  But $RANDOM only goes up to 32,767, and there are 50,400 seconds between 9am and 11pm, it'd be a little more complicated to randomize the seconds as well.  Finally, since the start times are random and independent of each other, it's possible (but not very likely) that two or more instances of the script will be started simultaneously.</p>
","9051029"
"How to call shell script from php that requires SUDO?","49116","","<p>I have a file that is a bash script that requires SUDO to work.</p>

<p>I can run it from the command line using SUDO but I will be prompted to put in the SUDO password.</p>

<p>I want to run this script from php via <code>shell_exec</code> but I if I call SUDO, its not like a command line where I can be prompted for the password. Is there a way to pass the password for sudo with the sudo call?</p>

<p>How can I do this?</p>
","<p>Edit the sudoers file (with <code>visudo</code>) and add a rule that allows the web server user to run the command without a password.  For example:</p>

<pre><code>www-data ALL=NOPASSWD: /path/to/script
</code></pre>
","3166174"